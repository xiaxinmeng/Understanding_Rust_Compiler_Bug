{"sha": "600ec284838c52d1f6657c2cf0097b58970b133b", "node_id": "C_kwDOAAsO6NoAKDYwMGVjMjg0ODM4YzUyZDFmNjY1N2MyY2YwMDk3YjU4OTcwYjEzM2I", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-28T16:15:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-28T16:15:17Z"}, "message": "Auto merge of #95403 - Dylan-DPC:rollup-9on30mg, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #95301 (Remove `Nonterminal::NtTT`.)\n - #95314 (Tell users that `||` operators are not currently supported in let chain expressions)\n - #95350 (resolve: Simplify some diagnostic code to avoid an ICE)\n - #95370 ([bootstrap] Don't print `Suite not skipped` unless `--verbose` is set)\n - #95390 (Ignore doc comments in a declarative macro matcher.)\n - #95401 (Remove duplicated and unused test files)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "2ddd324782e9effabde72c5c2dcfb36f3bd807ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ddd324782e9effabde72c5c2dcfb36f3bd807ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/600ec284838c52d1f6657c2cf0097b58970b133b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/600ec284838c52d1f6657c2cf0097b58970b133b", "html_url": "https://github.com/rust-lang/rust/commit/600ec284838c52d1f6657c2cf0097b58970b133b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/600ec284838c52d1f6657c2cf0097b58970b133b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d37f38f872859b2b096772765a7987199c852c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d37f38f872859b2b096772765a7987199c852c4", "html_url": "https://github.com/rust-lang/rust/commit/2d37f38f872859b2b096772765a7987199c852c4"}, {"sha": "e5afe2b107810bcabf9f8b2ceeb4577b2ea9c5dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5afe2b107810bcabf9f8b2ceeb4577b2ea9c5dc", "html_url": "https://github.com/rust-lang/rust/commit/e5afe2b107810bcabf9f8b2ceeb4577b2ea9c5dc"}], "stats": {"total": 414, "additions": 118, "deletions": 296}, "files": [{"sha": "1a271b0adef921d09e340800f8d6a9e21bc7fb26", "filename": "compiler/rustc_ast/src/ast_like.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/600ec284838c52d1f6657c2cf0097b58970b133b/compiler%2Frustc_ast%2Fsrc%2Fast_like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600ec284838c52d1f6657c2cf0097b58970b133b/compiler%2Frustc_ast%2Fsrc%2Fast_like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast_like.rs?ref=600ec284838c52d1f6657c2cf0097b58970b133b", "patch": "@@ -51,7 +51,6 @@ impl AstLike for crate::token::Nonterminal {\n             | Nonterminal::NtMeta(_)\n             | Nonterminal::NtPath(_)\n             | Nonterminal::NtVis(_)\n-            | Nonterminal::NtTT(_)\n             | Nonterminal::NtBlock(_)\n             | Nonterminal::NtIdent(..)\n             | Nonterminal::NtLifetime(_) => &[],\n@@ -67,7 +66,6 @@ impl AstLike for crate::token::Nonterminal {\n             | Nonterminal::NtMeta(_)\n             | Nonterminal::NtPath(_)\n             | Nonterminal::NtVis(_)\n-            | Nonterminal::NtTT(_)\n             | Nonterminal::NtBlock(_)\n             | Nonterminal::NtIdent(..)\n             | Nonterminal::NtLifetime(_) => {}\n@@ -84,7 +82,7 @@ impl AstLike for crate::token::Nonterminal {\n             Nonterminal::NtPath(path) => path.tokens_mut(),\n             Nonterminal::NtVis(vis) => vis.tokens_mut(),\n             Nonterminal::NtBlock(block) => block.tokens_mut(),\n-            Nonterminal::NtIdent(..) | Nonterminal::NtLifetime(..) | Nonterminal::NtTT(..) => None,\n+            Nonterminal::NtIdent(..) | Nonterminal::NtLifetime(..) => None,\n         }\n     }\n }"}, {"sha": "32621eb5f2f666773dc17407883adcbf375471b7", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/600ec284838c52d1f6657c2cf0097b58970b133b/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600ec284838c52d1f6657c2cf0097b58970b133b/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=600ec284838c52d1f6657c2cf0097b58970b133b", "patch": "@@ -787,7 +787,6 @@ pub fn visit_interpolated<T: MutVisitor>(nt: &mut token::Nonterminal, vis: &mut\n             visit_lazy_tts(tokens, vis);\n         }\n         token::NtPath(path) => vis.visit_path(path),\n-        token::NtTT(tt) => visit_tt(tt, vis),\n         token::NtVis(visib) => vis.visit_vis(visib),\n     }\n }"}, {"sha": "7df385873c11639e49441dcef49830623edf7be0", "filename": "compiler/rustc_ast/src/token.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/600ec284838c52d1f6657c2cf0097b58970b133b/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600ec284838c52d1f6657c2cf0097b58970b133b/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs?ref=600ec284838c52d1f6657c2cf0097b58970b133b", "patch": "@@ -6,7 +6,6 @@ pub use TokenKind::*;\n \n use crate::ast;\n use crate::ptr::P;\n-use crate::tokenstream::TokenTree;\n \n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::Lrc;\n@@ -680,7 +679,6 @@ pub enum Nonterminal {\n     NtMeta(P<ast::AttrItem>),\n     NtPath(ast::Path),\n     NtVis(ast::Visibility),\n-    NtTT(TokenTree),\n }\n \n // `Nonterminal` is used a lot. Make sure it doesn't unintentionally get bigger.\n@@ -778,7 +776,6 @@ impl Nonterminal {\n             NtMeta(attr_item) => attr_item.span(),\n             NtPath(path) => path.span,\n             NtVis(vis) => vis.span,\n-            NtTT(tt) => tt.span(),\n         }\n     }\n }\n@@ -790,7 +787,6 @@ impl PartialEq for Nonterminal {\n                 ident_lhs == ident_rhs && is_raw_lhs == is_raw_rhs\n             }\n             (NtLifetime(ident_lhs), NtLifetime(ident_rhs)) => ident_lhs == ident_rhs,\n-            (NtTT(tt_lhs), NtTT(tt_rhs)) => tt_lhs == tt_rhs,\n             // FIXME: Assume that all \"complex\" nonterminal are not equal, we can't compare them\n             // correctly based on data from AST. This will prevent them from matching each other\n             // in macros. The comparison will become possible only when each nonterminal has an\n@@ -813,7 +809,6 @@ impl fmt::Debug for Nonterminal {\n             NtLiteral(..) => f.pad(\"NtLiteral(..)\"),\n             NtMeta(..) => f.pad(\"NtMeta(..)\"),\n             NtPath(..) => f.pad(\"NtPath(..)\"),\n-            NtTT(..) => f.pad(\"NtTT(..)\"),\n             NtVis(..) => f.pad(\"NtVis(..)\"),\n             NtLifetime(..) => f.pad(\"NtLifetime(..)\"),\n         }"}, {"sha": "aba0b6a7463cc694324fdf7d5b3da573676750ce", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/600ec284838c52d1f6657c2cf0097b58970b133b/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600ec284838c52d1f6657c2cf0097b58970b133b/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=600ec284838c52d1f6657c2cf0097b58970b133b", "patch": "@@ -122,7 +122,10 @@ impl<'a> AstValidator<'a> {\n             diag.note(\"only supported directly in conditions of `if` and `while` expressions\");\n             diag.note(\"as well as when nested within `&&` and parentheses in those conditions\");\n             if let ForbiddenLetReason::ForbiddenWithOr(span) = forbidden_let_reason {\n-                diag.span_note(span, \"`||` operators are not allowed in let chain expressions\");\n+                diag.span_note(\n+                    span,\n+                    \"`||` operators are not currently supported in let chain expressions\",\n+                );\n             }\n             diag.emit();\n         } else {"}, {"sha": "719fd2710932185213c279573fa57ec3c98c339d", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/600ec284838c52d1f6657c2cf0097b58970b133b/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600ec284838c52d1f6657c2cf0097b58970b133b/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=600ec284838c52d1f6657c2cf0097b58970b133b", "patch": "@@ -714,7 +714,6 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n             token::NtIdent(e, is_raw) => IdentPrinter::for_ast_ident(e, is_raw).to_string(),\n             token::NtLifetime(e) => e.to_string(),\n             token::NtLiteral(ref e) => self.expr_to_string(e),\n-            token::NtTT(ref tree) => self.tt_to_string(tree),\n             token::NtVis(ref e) => self.vis_to_string(e),\n         }\n     }"}, {"sha": "5a6a2b2c57b9656a161add1a9988a22294b877fc", "filename": "compiler/rustc_expand/src/mbe/macro_parser.rs", "status": "modified", "additions": 25, "deletions": 27, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/600ec284838c52d1f6657c2cf0097b58970b133b/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600ec284838c52d1f6657c2cf0097b58970b133b/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs?ref=600ec284838c52d1f6657c2cf0097b58970b133b", "patch": "@@ -76,7 +76,7 @@ crate use ParseResult::*;\n use crate::mbe::{self, SequenceRepetition, TokenTree};\n \n use rustc_ast::token::{self, DocComment, Nonterminal, Token};\n-use rustc_parse::parser::Parser;\n+use rustc_parse::parser::{NtOrTt, Parser};\n use rustc_session::parse::ParseSess;\n use rustc_span::symbol::MacroRulesNormalizedIdent;\n \n@@ -275,7 +275,7 @@ pub(super) fn count_names(ms: &[TokenTree]) -> usize {\n }\n \n /// `NamedMatch` is a pattern-match result for a single metavar. All\n-/// `MatchedNtNonTt`s in the `NamedMatch` have the same non-terminal type\n+/// `MatchedNonterminal`s in the `NamedMatch` have the same non-terminal type\n /// (expr, item, etc).\n ///\n /// The in-memory structure of a particular `NamedMatch` represents the match\n@@ -306,32 +306,29 @@ pub(super) fn count_names(ms: &[TokenTree]) -> usize {\n /// ```rust\n /// MatchedSeq([\n ///   MatchedSeq([\n-///     MatchedNtNonTt(a),\n-///     MatchedNtNonTt(b),\n-///     MatchedNtNonTt(c),\n-///     MatchedNtNonTt(d),\n+///     MatchedNonterminal(a),\n+///     MatchedNonterminal(b),\n+///     MatchedNonterminal(c),\n+///     MatchedNonterminal(d),\n ///   ]),\n ///   MatchedSeq([\n-///     MatchedNtNonTt(a),\n-///     MatchedNtNonTt(b),\n-///     MatchedNtNonTt(c),\n-///     MatchedNtNonTt(d),\n-///     MatchedNtNonTt(e),\n+///     MatchedNonterminal(a),\n+///     MatchedNonterminal(b),\n+///     MatchedNonterminal(c),\n+///     MatchedNonterminal(d),\n+///     MatchedNonterminal(e),\n ///   ])\n /// ])\n /// ```\n #[derive(Debug, Clone)]\n crate enum NamedMatch {\n     MatchedSeq(Lrc<NamedMatchVec>),\n \n-    // This variant should never hold an `NtTT`. `MatchedNtTt` should be used\n-    // for that case.\n-    MatchedNtNonTt(Lrc<Nonterminal>),\n+    // A metavar match of type `tt`.\n+    MatchedTokenTree(rustc_ast::tokenstream::TokenTree),\n \n-    // `NtTT` is handled without any cloning when transcribing, unlike other\n-    // nonterminals. Therefore, an `Lrc` isn't helpful and causes unnecessary\n-    // allocations. Hence this separate variant.\n-    MatchedNtTt(rustc_ast::tokenstream::TokenTree),\n+    // A metavar match of any type other than `tt`.\n+    MatchedNonterminal(Lrc<Nonterminal>),\n }\n \n /// Takes a slice of token trees `ms` representing a matcher which successfully matched input\n@@ -519,13 +516,14 @@ impl<'tt> TtParser<'tt> {\n                     }\n \n                     TokenTree::Token(t) => {\n-                        // Doc comments cannot appear in a matcher.\n-                        debug_assert!(!matches!(t, Token { kind: DocComment(..), .. }));\n-\n-                        // If the token matches, we can just advance the parser. Otherwise, this\n-                        // match hash failed, there is nothing to do, and hopefully another item in\n-                        // `cur_items` will match.\n-                        if token_name_eq(&t, token) {\n+                        // If it's a doc comment, we just ignore it and move on to the next tt in\n+                        // the matcher. If the token matches, we can just advance the parser.\n+                        // Otherwise, this match has failed, there is nothing to do, and hopefully\n+                        // another item in `cur_items` will match.\n+                        if matches!(t, Token { kind: DocComment(..), .. }) {\n+                            item.idx += 1;\n+                            self.cur_items.push(item);\n+                        } else if token_name_eq(&t, token) {\n                             item.idx += 1;\n                             self.next_items.push(item);\n                         }\n@@ -677,8 +675,8 @@ impl<'tt> TtParser<'tt> {\n                             Ok(nt) => nt,\n                         };\n                         let m = match nt {\n-                            Nonterminal::NtTT(tt) => MatchedNtTt(tt),\n-                            _ => MatchedNtNonTt(Lrc::new(nt)),\n+                            NtOrTt::Nt(nt) => MatchedNonterminal(Lrc::new(nt)),\n+                            NtOrTt::Tt(tt) => MatchedTokenTree(tt),\n                         };\n                         item.push_match(match_cur, m);\n                         item.idx += 1;"}, {"sha": "10b2b9f07e2a57dc423c392487d9e342c52b2b0c", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/600ec284838c52d1f6657c2cf0097b58970b133b/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600ec284838c52d1f6657c2cf0097b58970b133b/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=600ec284838c52d1f6657c2cf0097b58970b133b", "patch": "@@ -4,7 +4,7 @@ use crate::expand::{ensure_complete_parse, parse_ast_fragment, AstFragment, AstF\n use crate::mbe;\n use crate::mbe::macro_check;\n use crate::mbe::macro_parser::{Error, ErrorReported, Failure, Success, TtParser};\n-use crate::mbe::macro_parser::{MatchedNtTt, MatchedSeq};\n+use crate::mbe::macro_parser::{MatchedSeq, MatchedTokenTree};\n use crate::mbe::transcribe::transcribe;\n \n use rustc_ast as ast;\n@@ -470,7 +470,7 @@ pub fn compile_declarative_macro(\n         MatchedSeq(ref s) => s\n             .iter()\n             .map(|m| {\n-                if let MatchedNtTt(ref tt) = *m {\n+                if let MatchedTokenTree(ref tt) = *m {\n                     let mut tts = vec![];\n                     mbe::quoted::parse(\n                         tt.clone().into(),\n@@ -495,7 +495,7 @@ pub fn compile_declarative_macro(\n         MatchedSeq(ref s) => s\n             .iter()\n             .map(|m| {\n-                if let MatchedNtTt(ref tt) = *m {\n+                if let MatchedTokenTree(ref tt) = *m {\n                     let mut tts = vec![];\n                     mbe::quoted::parse(\n                         tt.clone().into(),"}, {"sha": "cd016bfd8f4d73b6cfb1ec948298d4ef365db2e0", "filename": "compiler/rustc_expand/src/mbe/transcribe.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/600ec284838c52d1f6657c2cf0097b58970b133b/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600ec284838c52d1f6657c2cf0097b58970b133b/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs?ref=600ec284838c52d1f6657c2cf0097b58970b133b", "patch": "@@ -1,8 +1,8 @@\n use crate::base::ExtCtxt;\n-use crate::mbe::macro_parser::{MatchedNtNonTt, MatchedNtTt, MatchedSeq, NamedMatch};\n+use crate::mbe::macro_parser::{MatchedNonterminal, MatchedSeq, MatchedTokenTree, NamedMatch};\n use crate::mbe::{self, MetaVarExpr};\n use rustc_ast::mut_visit::{self, MutVisitor};\n-use rustc_ast::token::{self, Nonterminal, Token, TokenKind};\n+use rustc_ast::token::{self, Token, TokenKind};\n use rustc_ast::tokenstream::{DelimSpan, TokenStream, TokenTree, TreeAndSpacing};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n@@ -234,17 +234,16 @@ pub(super) fn transcribe<'a>(\n                 let ident = MacroRulesNormalizedIdent::new(orignal_ident);\n                 if let Some(cur_matched) = lookup_cur_matched(ident, interp, &repeats) {\n                     match cur_matched {\n-                        MatchedNtTt(ref tt) => {\n+                        MatchedTokenTree(ref tt) => {\n                             // `tt`s are emitted into the output stream directly as \"raw tokens\",\n                             // without wrapping them into groups.\n                             let token = tt.clone();\n                             result.push(token.into());\n                         }\n-                        MatchedNtNonTt(ref nt) => {\n+                        MatchedNonterminal(ref nt) => {\n                             // Other variables are emitted into the output stream as groups with\n                             // `Delimiter::None` to maintain parsing priorities.\n                             // `Interpolated` is currently used for such groups in rustc parser.\n-                            debug_assert!(!matches!(**nt, Nonterminal::NtTT(_)));\n                             marker.visit_span(&mut sp);\n                             let token = TokenTree::token(token::Interpolated(nt.clone()), sp);\n                             result.push(token.into());\n@@ -312,7 +311,7 @@ fn lookup_cur_matched<'a>(\n         let mut matched = matched;\n         for &(idx, _) in repeats {\n             match matched {\n-                MatchedNtTt(_) | MatchedNtNonTt(_) => break,\n+                MatchedTokenTree(_) | MatchedNonterminal(_) => break,\n                 MatchedSeq(ref ads) => matched = ads.get(idx).unwrap(),\n             }\n         }\n@@ -402,7 +401,7 @@ fn lockstep_iter_size(\n             let name = MacroRulesNormalizedIdent::new(name);\n             match lookup_cur_matched(name, interpolations, repeats) {\n                 Some(matched) => match matched {\n-                    MatchedNtTt(_) | MatchedNtNonTt(_) => LockstepIterSize::Unconstrained,\n+                    MatchedTokenTree(_) | MatchedNonterminal(_) => LockstepIterSize::Unconstrained,\n                     MatchedSeq(ref ads) => LockstepIterSize::Constraint(ads.len(), name),\n                 },\n                 _ => LockstepIterSize::Unconstrained,\n@@ -449,7 +448,7 @@ fn count_repetitions<'a>(\n         sp: &DelimSpan,\n     ) -> PResult<'a, usize> {\n         match matched {\n-            MatchedNtTt(_) | MatchedNtNonTt(_) => {\n+            MatchedTokenTree(_) | MatchedNonterminal(_) => {\n                 if declared_lhs_depth == 0 {\n                     return Err(cx.struct_span_err(\n                         sp.entire(),"}, {"sha": "28c2a63db27f832a25c157ae7db37d149150e725", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/600ec284838c52d1f6657c2cf0097b58970b133b/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600ec284838c52d1f6657c2cf0097b58970b133b/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=600ec284838c52d1f6657c2cf0097b58970b133b", "patch": "@@ -290,7 +290,6 @@ pub fn nt_to_tokenstream(\n         Nonterminal::NtMeta(ref attr) => convert_tokens(attr.tokens.as_ref()),\n         Nonterminal::NtPath(ref path) => convert_tokens(path.tokens.as_ref()),\n         Nonterminal::NtVis(ref vis) => convert_tokens(vis.tokens.as_ref()),\n-        Nonterminal::NtTT(ref tt) => Some(tt.clone().into()),\n         Nonterminal::NtExpr(ref expr) | Nonterminal::NtLiteral(ref expr) => {\n             prepend_attrs(&expr.attrs, expr.tokens.as_ref())\n         }"}, {"sha": "5d244ef9118a64e61cfce9d79edde016f2f53bf9", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/600ec284838c52d1f6657c2cf0097b58970b133b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600ec284838c52d1f6657c2cf0097b58970b133b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=600ec284838c52d1f6657c2cf0097b58970b133b", "patch": "@@ -19,7 +19,7 @@ pub use pat::{CommaRecoveryMode, RecoverColon, RecoverComma};\n pub use path::PathStyle;\n \n use rustc_ast::ptr::P;\n-use rustc_ast::token::{self, DelimToken, Token, TokenKind};\n+use rustc_ast::token::{self, DelimToken, Nonterminal, Token, TokenKind};\n use rustc_ast::tokenstream::AttributesData;\n use rustc_ast::tokenstream::{self, DelimSpan, Spacing};\n use rustc_ast::tokenstream::{TokenStream, TokenTree};\n@@ -1507,3 +1507,9 @@ pub enum FlatToken {\n     /// handling of replace ranges.\n     Empty,\n }\n+\n+#[derive(Debug)]\n+pub enum NtOrTt {\n+    Nt(Nonterminal),\n+    Tt(TokenTree),\n+}"}, {"sha": "c105fbfaee053a02d2bbe452e16203eb7683d164", "filename": "compiler/rustc_parse/src/parser/nonterminal.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/600ec284838c52d1f6657c2cf0097b58970b133b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600ec284838c52d1f6657c2cf0097b58970b133b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs?ref=600ec284838c52d1f6657c2cf0097b58970b133b", "patch": "@@ -1,12 +1,12 @@\n use rustc_ast::ptr::P;\n-use rustc_ast::token::{self, Nonterminal, NonterminalKind, Token};\n+use rustc_ast::token::{self, NonterminalKind, Token};\n use rustc_ast::AstLike;\n use rustc_ast_pretty::pprust;\n use rustc_errors::PResult;\n use rustc_span::symbol::{kw, Ident};\n \n use crate::parser::pat::{CommaRecoveryMode, RecoverColon, RecoverComma};\n-use crate::parser::{FollowedByType, ForceCollect, Parser, PathStyle};\n+use crate::parser::{FollowedByType, ForceCollect, NtOrTt, Parser, PathStyle};\n \n impl<'a> Parser<'a> {\n     /// Checks whether a non-terminal may begin with a particular token.\n@@ -85,7 +85,7 @@ impl<'a> Parser<'a> {\n             NonterminalKind::Lifetime => match token.kind {\n                 token::Lifetime(_) => true,\n                 token::Interpolated(ref nt) => {\n-                    matches!(**nt, token::NtLifetime(_) | token::NtTT(_))\n+                    matches!(**nt, token::NtLifetime(_))\n                 }\n                 _ => false,\n             },\n@@ -96,14 +96,16 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parse a non-terminal (e.g. MBE `:pat` or `:ident`).\n-    pub fn parse_nonterminal(&mut self, kind: NonterminalKind) -> PResult<'a, Nonterminal> {\n+    pub fn parse_nonterminal(&mut self, kind: NonterminalKind) -> PResult<'a, NtOrTt> {\n         // Any `Nonterminal` which stores its tokens (currently `NtItem` and `NtExpr`)\n         // needs to have them force-captured here.\n         // A `macro_rules!` invocation may pass a captured item/expr to a proc-macro,\n         // which requires having captured tokens available. Since we cannot determine\n         // in advance whether or not a proc-macro will be (transitively) invoked,\n         // we always capture tokens for any `Nonterminal` which needs them.\n         let mut nt = match kind {\n+            // Note that TT is treated differently to all the others.\n+            NonterminalKind::TT => return Ok(NtOrTt::Tt(self.parse_token_tree())),\n             NonterminalKind::Item => match self.parse_item(ForceCollect::Yes)? {\n                 Some(item) => token::NtItem(item),\n                 None => {\n@@ -124,9 +126,12 @@ impl<'a> Parser<'a> {\n             NonterminalKind::PatParam { .. } | NonterminalKind::PatWithOr { .. } => {\n                 token::NtPat(self.collect_tokens_no_attrs(|this| match kind {\n                     NonterminalKind::PatParam { .. } => this.parse_pat_no_top_alt(None),\n-                    NonterminalKind::PatWithOr { .. } => {\n-                        this.parse_pat_allow_top_alt(None, RecoverComma::No, RecoverColon::No, CommaRecoveryMode::EitherTupleOrPipe)\n-                    }\n+                    NonterminalKind::PatWithOr { .. } => this.parse_pat_allow_top_alt(\n+                        None,\n+                        RecoverComma::No,\n+                        RecoverColon::No,\n+                        CommaRecoveryMode::EitherTupleOrPipe,\n+                    ),\n                     _ => unreachable!(),\n                 })?)\n             }\n@@ -139,9 +144,10 @@ impl<'a> Parser<'a> {\n                 )\n             }\n \n-            NonterminalKind::Ty => {\n-                token::NtTy(self.collect_tokens_no_attrs(|this| this.parse_no_question_mark_recover())?)\n-            }\n+            NonterminalKind::Ty => token::NtTy(\n+                self.collect_tokens_no_attrs(|this| this.parse_no_question_mark_recover())?,\n+            ),\n+\n             // this could be handled like a token, since it is one\n             NonterminalKind::Ident\n                 if let Some((ident, is_raw)) = get_macro_ident(&self.token) =>\n@@ -158,7 +164,6 @@ impl<'a> Parser<'a> {\n                 self.collect_tokens_no_attrs(|this| this.parse_path(PathStyle::Type))?,\n             ),\n             NonterminalKind::Meta => token::NtMeta(P(self.parse_attr_item(true)?)),\n-            NonterminalKind::TT => token::NtTT(self.parse_token_tree()),\n             NonterminalKind::Vis => token::NtVis(\n                 self.collect_tokens_no_attrs(|this| this.parse_visibility(FollowedByType::Yes))?,\n             ),\n@@ -183,7 +188,7 @@ impl<'a> Parser<'a> {\n             );\n         }\n \n-        Ok(nt)\n+        Ok(NtOrTt::Nt(nt))\n     }\n }\n "}, {"sha": "c8ca51348cc7199ffeb60e76d6fd016ae80b32d7", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/600ec284838c52d1f6657c2cf0097b58970b133b/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600ec284838c52d1f6657c2cf0097b58970b133b/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=600ec284838c52d1f6657c2cf0097b58970b133b", "patch": "@@ -696,14 +696,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         ) = &bounded_ty.kind\n         {\n             // use this to verify that ident is a type param.\n-            let Ok(Some(partial_res)) = self.resolve_qpath_anywhere(\n-                None,\n-                &Segment::from_path(path),\n-                Namespace::TypeNS,\n-                span,\n-                true,\n-                Finalize::No,\n-            ) else {\n+            let Some(partial_res) = self.r.partial_res_map.get(&bounded_ty.id) else {\n                 return false;\n             };\n             if !(matches!(\n@@ -718,16 +711,10 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             return false;\n         };\n \n-        if let ast::TyKind::Path(None, type_param_path) = &ty.peel_refs().kind {\n+        let peeled_ty = ty.peel_refs();\n+        if let ast::TyKind::Path(None, type_param_path) = &peeled_ty.kind {\n             // Confirm that the `SelfTy` is a type parameter.\n-            let Ok(Some(partial_res)) = self.resolve_qpath_anywhere(\n-                None,\n-                &Segment::from_path(type_param_path),\n-                Namespace::TypeNS,\n-                span,\n-                true,\n-                Finalize::No,\n-            ) else {\n+            let Some(partial_res) = self.r.partial_res_map.get(&peeled_ty.id) else {\n                 return false;\n             };\n             if !(matches!("}, {"sha": "e7511888114234e49c877f2815f110fbbf5f0704", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/600ec284838c52d1f6657c2cf0097b58970b133b/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600ec284838c52d1f6657c2cf0097b58970b133b/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=600ec284838c52d1f6657c2cf0097b58970b133b", "patch": "@@ -231,10 +231,10 @@ impl StepDescription {\n         }\n \n         if !builder.config.exclude.is_empty() {\n-            eprintln!(\n+            builder.verbose(&format!(\n                 \"{:?} not skipped for {:?} -- not in {:?}\",\n                 pathset, self.name, builder.config.exclude\n-            );\n+            ));\n         }\n         false\n     }"}, {"sha": "3fb40f6bfa96004068358d5a4e8815078a488bf9", "filename": "src/test/ui/auxiliary/empty-struct.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2d37f38f872859b2b096772765a7987199c852c4/src%2Ftest%2Fui%2Fauxiliary%2Fempty-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d37f38f872859b2b096772765a7987199c852c4/src%2Ftest%2Fui%2Fauxiliary%2Fempty-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fempty-struct.rs?ref=2d37f38f872859b2b096772765a7987199c852c4", "patch": "@@ -1,9 +0,0 @@\n-pub struct XEmpty1 {}\n-pub struct XEmpty2;\n-pub struct XEmpty6();\n-\n-pub enum XE {\n-    XEmpty3 {},\n-    XEmpty4,\n-    XEmpty5(),\n-}"}, {"sha": "c995038e5a8a7271296466148f4186afe1483692", "filename": "src/test/ui/auxiliary/stability-cfg2.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2d37f38f872859b2b096772765a7987199c852c4/src%2Ftest%2Fui%2Fauxiliary%2Fstability-cfg2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d37f38f872859b2b096772765a7987199c852c4/src%2Ftest%2Fui%2Fauxiliary%2Fstability-cfg2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fstability-cfg2.rs?ref=2d37f38f872859b2b096772765a7987199c852c4", "patch": "@@ -1,5 +0,0 @@\n-// compile-flags:--cfg foo\n-\n-#![cfg_attr(foo, unstable(feature = \"unstable_test_feature\", issue = \"none\"))]\n-#![cfg_attr(not(foo), stable(feature = \"test_feature\", since = \"1.0.0\"))]\n-#![feature(staged_api)]"}, {"sha": "7a698cf76ae517b01dc5234aca067045017dbca0", "filename": "src/test/ui/auxiliary/weak-lang-items.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2d37f38f872859b2b096772765a7987199c852c4/src%2Ftest%2Fui%2Fauxiliary%2Fweak-lang-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d37f38f872859b2b096772765a7987199c852c4/src%2Ftest%2Fui%2Fauxiliary%2Fweak-lang-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fweak-lang-items.rs?ref=2d37f38f872859b2b096772765a7987199c852c4", "patch": "@@ -1,22 +0,0 @@\n-// no-prefer-dynamic\n-\n-// This aux-file will require the eh_personality function to be codegen'd, but\n-// it hasn't been defined just yet. Make sure we don't explode.\n-\n-#![no_std]\n-#![crate_type = \"rlib\"]\n-\n-struct A;\n-\n-impl core::ops::Drop for A {\n-    fn drop(&mut self) {}\n-}\n-\n-pub fn foo() {\n-    let _a = A;\n-    panic!(\"wut\");\n-}\n-\n-mod std {\n-    pub use core::{option, fmt};\n-}"}, {"sha": "dceec7e3ec151e0e7f5839c022b93f65049e9bfe", "filename": "src/test/ui/cross-crate/auxiliary/anon_trait_static_method_lib.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2d37f38f872859b2b096772765a7987199c852c4/src%2Ftest%2Fui%2Fcross-crate%2Fauxiliary%2Fanon_trait_static_method_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d37f38f872859b2b096772765a7987199c852c4/src%2Ftest%2Fui%2Fcross-crate%2Fauxiliary%2Fanon_trait_static_method_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross-crate%2Fauxiliary%2Fanon_trait_static_method_lib.rs?ref=2d37f38f872859b2b096772765a7987199c852c4", "patch": "@@ -1,9 +0,0 @@\n-pub struct Foo {\n-    pub x: isize\n-}\n-\n-impl Foo {\n-    pub fn new() -> Foo {\n-        Foo { x: 3 }\n-    }\n-}"}, {"sha": "9d1e0742e3c9e6f7bdf25d98236d6371682934e3", "filename": "src/test/ui/cross-crate/auxiliary/newtype_struct_xc.rs", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2d37f38f872859b2b096772765a7987199c852c4/src%2Ftest%2Fui%2Fcross-crate%2Fauxiliary%2Fnewtype_struct_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d37f38f872859b2b096772765a7987199c852c4/src%2Ftest%2Fui%2Fcross-crate%2Fauxiliary%2Fnewtype_struct_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross-crate%2Fauxiliary%2Fnewtype_struct_xc.rs?ref=2d37f38f872859b2b096772765a7987199c852c4", "patch": "@@ -1,3 +0,0 @@\n-#![crate_type=\"lib\"]\n-\n-pub struct Au(pub isize);"}, {"sha": "69ed498e7e1cdccd659113b368c94bd239648d81", "filename": "src/test/ui/cross-crate/auxiliary/xcrate_unit_struct.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2d37f38f872859b2b096772765a7987199c852c4/src%2Ftest%2Fui%2Fcross-crate%2Fauxiliary%2Fxcrate_unit_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d37f38f872859b2b096772765a7987199c852c4/src%2Ftest%2Fui%2Fcross-crate%2Fauxiliary%2Fxcrate_unit_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross-crate%2Fauxiliary%2Fxcrate_unit_struct.rs?ref=2d37f38f872859b2b096772765a7987199c852c4", "patch": "@@ -1,28 +0,0 @@\n-#![crate_type = \"lib\"]\n-\n-// used by the rpass test\n-\n-#[derive(Copy, Clone)]\n-pub struct Struct;\n-\n-#[derive(Copy, Clone)]\n-pub enum Unit {\n-    UnitVariant,\n-    Argument(Struct)\n-}\n-\n-#[derive(Copy, Clone)]\n-pub struct TupleStruct(pub usize, pub &'static str);\n-\n-// used by the cfail test\n-\n-#[derive(Copy, Clone)]\n-pub struct StructWithFields {\n-    foo: isize,\n-}\n-\n-#[derive(Copy, Clone)]\n-pub enum EnumWithVariants {\n-    EnumVariant,\n-    EnumVariantArg(isize)\n-}"}, {"sha": "fd678a717d0493241c4a459f673264b32fc2d94a", "filename": "src/test/ui/empty/issue-37026.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/600ec284838c52d1f6657c2cf0097b58970b133b/src%2Ftest%2Fui%2Fempty%2Fissue-37026.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600ec284838c52d1f6657c2cf0097b58970b133b/src%2Ftest%2Fui%2Fempty%2Fissue-37026.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fissue-37026.rs?ref=600ec284838c52d1f6657c2cf0097b58970b133b", "previous_filename": "src/test/ui/issues/issue-37026.rs"}, {"sha": "48a4a5bcad2b57365524fa37a430db1b3d14c445", "filename": "src/test/ui/empty/issue-37026.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/600ec284838c52d1f6657c2cf0097b58970b133b/src%2Ftest%2Fui%2Fempty%2Fissue-37026.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/600ec284838c52d1f6657c2cf0097b58970b133b/src%2Ftest%2Fui%2Fempty%2Fissue-37026.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fissue-37026.stderr?ref=600ec284838c52d1f6657c2cf0097b58970b133b", "previous_filename": "src/test/ui/issues/issue-37026.stderr"}, {"sha": "c80e61b451116b7e45cd140bb377aec86fc9470e", "filename": "src/test/ui/empty/no-link.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/600ec284838c52d1f6657c2cf0097b58970b133b/src%2Ftest%2Fui%2Fempty%2Fno-link.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600ec284838c52d1f6657c2cf0097b58970b133b/src%2Ftest%2Fui%2Fempty%2Fno-link.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fno-link.rs?ref=600ec284838c52d1f6657c2cf0097b58970b133b", "previous_filename": "src/test/ui/no-link.rs"}, {"sha": "3fb40f6bfa96004068358d5a4e8815078a488bf9", "filename": "src/test/ui/issues/auxiliary/empty-struct.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2d37f38f872859b2b096772765a7987199c852c4/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fempty-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d37f38f872859b2b096772765a7987199c852c4/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fempty-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fempty-struct.rs?ref=2d37f38f872859b2b096772765a7987199c852c4", "patch": "@@ -1,9 +0,0 @@\n-pub struct XEmpty1 {}\n-pub struct XEmpty2;\n-pub struct XEmpty6();\n-\n-pub enum XE {\n-    XEmpty3 {},\n-    XEmpty4,\n-    XEmpty5(),\n-}"}, {"sha": "d634b8bf80079ce8f885c5ffea40b9455f52847e", "filename": "src/test/ui/issues/issue-51244.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d37f38f872859b2b096772765a7987199c852c4/src%2Ftest%2Fui%2Fissues%2Fissue-51244.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d37f38f872859b2b096772765a7987199c852c4/src%2Ftest%2Fui%2Fissues%2Fissue-51244.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51244.rs?ref=2d37f38f872859b2b096772765a7987199c852c4", "patch": "@@ -1,4 +0,0 @@\n-fn main() {\n-    let ref my_ref @ _ = 0;\n-    *my_ref = 0; //~ ERROR cannot assign to `*my_ref`, which is behind a `&` reference [E0594]\n-}"}, {"sha": "19f0223a357a53e1fee7727c77516654b4e3a158", "filename": "src/test/ui/issues/issue-51244.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2d37f38f872859b2b096772765a7987199c852c4/src%2Ftest%2Fui%2Fissues%2Fissue-51244.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d37f38f872859b2b096772765a7987199c852c4/src%2Ftest%2Fui%2Fissues%2Fissue-51244.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51244.stderr?ref=2d37f38f872859b2b096772765a7987199c852c4", "patch": "@@ -1,11 +0,0 @@\n-error[E0594]: cannot assign to `*my_ref`, which is behind a `&` reference\n-  --> $DIR/issue-51244.rs:3:5\n-   |\n-LL |     let ref my_ref @ _ = 0;\n-   |         -------------- help: consider changing this to be a mutable reference: `ref mut my_ref @ _`\n-LL |     *my_ref = 0;\n-   |     ^^^^^^^^^^^ `my_ref` is a `&` reference, so the data it refers to cannot be written\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0594`."}, {"sha": "4d59c7ea5e9d7585aecc43dffaf494bf460fd4a5", "filename": "src/test/ui/macros/issue-95267.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/600ec284838c52d1f6657c2cf0097b58970b133b/src%2Ftest%2Fui%2Fmacros%2Fissue-95267.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600ec284838c52d1f6657c2cf0097b58970b133b/src%2Ftest%2Fui%2Fmacros%2Fissue-95267.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-95267.rs?ref=600ec284838c52d1f6657c2cf0097b58970b133b", "patch": "@@ -0,0 +1,13 @@\n+// check-pass\n+\n+// This is a valid macro. Commit 4 in #95159 broke things such that it failed\n+// with a \"missing tokens in macro arguments\" error, as reported in #95267.\n+macro_rules! f {\n+    (\n+        /// ab\n+    ) => {};\n+}\n+\n+fn main() {\n+    f!();\n+}"}, {"sha": "a429d8fabc72b0741db06316400ce1d92b2502f2", "filename": "src/test/ui/panic-handler/weak-lang-item-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/600ec284838c52d1f6657c2cf0097b58970b133b/src%2Ftest%2Fui%2Fpanic-handler%2Fweak-lang-item-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600ec284838c52d1f6657c2cf0097b58970b133b/src%2Ftest%2Fui%2Fpanic-handler%2Fweak-lang-item-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-handler%2Fweak-lang-item-2.rs?ref=600ec284838c52d1f6657c2cf0097b58970b133b", "previous_filename": "src/test/ui/weak-lang-item.rs"}, {"sha": "8b491ee4e303fc6f85172b35ac33cb45f80d0642", "filename": "src/test/ui/regions/regions-enum-not-wf.rs", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/2d37f38f872859b2b096772765a7987199c852c4/src%2Ftest%2Fui%2Fregions%2Fregions-enum-not-wf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d37f38f872859b2b096772765a7987199c852c4/src%2Ftest%2Fui%2Fregions%2Fregions-enum-not-wf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-enum-not-wf.rs?ref=2d37f38f872859b2b096772765a7987199c852c4", "patch": "@@ -1,39 +0,0 @@\n-// Various examples of structs whose fields are not well-formed.\n-\n-#![allow(dead_code)]\n-\n-trait Dummy<'a> {\n-    type Out;\n-}\n-impl<'a, T> Dummy<'a> for T\n-where\n-    T: 'a,\n-{\n-    type Out = ();\n-}\n-type RequireOutlives<'a, T> = <T as Dummy<'a>>::Out;\n-\n-enum Ref1<'a, T> {\n-    Ref1Variant1(RequireOutlives<'a, T>), //~ ERROR the parameter type `T` may not live long enough\n-}\n-\n-enum Ref2<'a, T> {\n-    Ref2Variant1,\n-    Ref2Variant2(isize, RequireOutlives<'a, T>), //~ ERROR the parameter type `T` may not live long enough\n-}\n-\n-enum RefOk<'a, T: 'a> {\n-    RefOkVariant1(&'a T),\n-}\n-\n-// This is now well formed. RFC 2093\n-enum RefIndirect<'a, T> {\n-    RefIndirectVariant1(isize, RefOk<'a, T>),\n-}\n-\n-enum RefDouble<'a, 'b, T> {\n-    RefDoubleVariant1(&'a RequireOutlives<'b, T>),\n-    //~^ the parameter type `T` may not live long enough [E0309]\n-}\n-\n-fn main() {}"}, {"sha": "553a3e71c169a093b8635f2b1b83625298551517", "filename": "src/test/ui/regions/regions-enum-not-wf.stderr", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2d37f38f872859b2b096772765a7987199c852c4/src%2Ftest%2Fui%2Fregions%2Fregions-enum-not-wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d37f38f872859b2b096772765a7987199c852c4/src%2Ftest%2Fui%2Fregions%2Fregions-enum-not-wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-enum-not-wf.stderr?ref=2d37f38f872859b2b096772765a7987199c852c4", "patch": "@@ -1,28 +0,0 @@\n-error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-enum-not-wf.rs:17:18\n-   |\n-LL | enum Ref1<'a, T> {\n-   |               - help: consider adding an explicit lifetime bound...: `T: 'a`\n-LL |     Ref1Variant1(RequireOutlives<'a, T>),\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n-\n-error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-enum-not-wf.rs:22:25\n-   |\n-LL | enum Ref2<'a, T> {\n-   |               - help: consider adding an explicit lifetime bound...: `T: 'a`\n-LL |     Ref2Variant1,\n-LL |     Ref2Variant2(isize, RequireOutlives<'a, T>),\n-   |                         ^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n-\n-error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-enum-not-wf.rs:35:23\n-   |\n-LL | enum RefDouble<'a, 'b, T> {\n-   |                        - help: consider adding an explicit lifetime bound...: `T: 'b`\n-LL |     RefDoubleVariant1(&'a RequireOutlives<'b, T>),\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0309`."}, {"sha": "34f059248b61dd36a694fcd3c92d9b80c9f9a05a", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/600ec284838c52d1f6657c2cf0097b58970b133b/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/600ec284838c52d1f6657c2cf0097b58970b133b/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=600ec284838c52d1f6657c2cf0097b58970b133b", "patch": "@@ -62,7 +62,7 @@ LL |     if true || let 0 = 0 {}\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n    = note: as well as when nested within `&&` and parentheses in those conditions\n-note: `||` operators are not allowed in let chain expressions\n+note: `||` operators are not currently supported in let chain expressions\n   --> $DIR/disallowed-positions.rs:47:13\n    |\n LL |     if true || let 0 = 0 {}\n@@ -76,7 +76,7 @@ LL |     if (true || let 0 = 0) {}\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n    = note: as well as when nested within `&&` and parentheses in those conditions\n-note: `||` operators are not allowed in let chain expressions\n+note: `||` operators are not currently supported in let chain expressions\n   --> $DIR/disallowed-positions.rs:48:14\n    |\n LL |     if (true || let 0 = 0) {}\n@@ -90,7 +90,7 @@ LL |     if true && (true || let 0 = 0) {}\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n    = note: as well as when nested within `&&` and parentheses in those conditions\n-note: `||` operators are not allowed in let chain expressions\n+note: `||` operators are not currently supported in let chain expressions\n   --> $DIR/disallowed-positions.rs:49:22\n    |\n LL |     if true && (true || let 0 = 0) {}\n@@ -104,7 +104,7 @@ LL |     if true || (true && let 0 = 0) {}\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n    = note: as well as when nested within `&&` and parentheses in those conditions\n-note: `||` operators are not allowed in let chain expressions\n+note: `||` operators are not currently supported in let chain expressions\n   --> $DIR/disallowed-positions.rs:50:13\n    |\n LL |     if true || (true && let 0 = 0) {}\n@@ -244,7 +244,7 @@ LL |     while true || let 0 = 0 {}\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n    = note: as well as when nested within `&&` and parentheses in those conditions\n-note: `||` operators are not allowed in let chain expressions\n+note: `||` operators are not currently supported in let chain expressions\n   --> $DIR/disallowed-positions.rs:111:16\n    |\n LL |     while true || let 0 = 0 {}\n@@ -258,7 +258,7 @@ LL |     while (true || let 0 = 0) {}\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n    = note: as well as when nested within `&&` and parentheses in those conditions\n-note: `||` operators are not allowed in let chain expressions\n+note: `||` operators are not currently supported in let chain expressions\n   --> $DIR/disallowed-positions.rs:112:17\n    |\n LL |     while (true || let 0 = 0) {}\n@@ -272,7 +272,7 @@ LL |     while true && (true || let 0 = 0) {}\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n    = note: as well as when nested within `&&` and parentheses in those conditions\n-note: `||` operators are not allowed in let chain expressions\n+note: `||` operators are not currently supported in let chain expressions\n   --> $DIR/disallowed-positions.rs:113:25\n    |\n LL |     while true && (true || let 0 = 0) {}\n@@ -286,7 +286,7 @@ LL |     while true || (true && let 0 = 0) {}\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n    = note: as well as when nested within `&&` and parentheses in those conditions\n-note: `||` operators are not allowed in let chain expressions\n+note: `||` operators are not currently supported in let chain expressions\n   --> $DIR/disallowed-positions.rs:114:16\n    |\n LL |     while true || (true && let 0 = 0) {}\n@@ -426,7 +426,7 @@ LL |     true || let 0 = 0;\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n    = note: as well as when nested within `&&` and parentheses in those conditions\n-note: `||` operators are not allowed in let chain expressions\n+note: `||` operators are not currently supported in let chain expressions\n   --> $DIR/disallowed-positions.rs:184:10\n    |\n LL |     true || let 0 = 0;\n@@ -440,7 +440,7 @@ LL |     (true || let 0 = 0);\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n    = note: as well as when nested within `&&` and parentheses in those conditions\n-note: `||` operators are not allowed in let chain expressions\n+note: `||` operators are not currently supported in let chain expressions\n   --> $DIR/disallowed-positions.rs:185:11\n    |\n LL |     (true || let 0 = 0);\n@@ -454,7 +454,7 @@ LL |     true && (true || let 0 = 0);\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n    = note: as well as when nested within `&&` and parentheses in those conditions\n-note: `||` operators are not allowed in let chain expressions\n+note: `||` operators are not currently supported in let chain expressions\n   --> $DIR/disallowed-positions.rs:186:19\n    |\n LL |     true && (true || let 0 = 0);"}, {"sha": "83f941f65b9884ffaec7fe2af4e545bda0ae23f9", "filename": "src/test/ui/span/E0057.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d37f38f872859b2b096772765a7987199c852c4/src%2Ftest%2Fui%2Fspan%2FE0057.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d37f38f872859b2b096772765a7987199c852c4/src%2Ftest%2Fui%2Fspan%2FE0057.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0057.rs?ref=2d37f38f872859b2b096772765a7987199c852c4", "patch": "@@ -1,6 +0,0 @@\n-fn main() {\n-    let f = |x| x * 3;\n-    let a = f(); //~ ERROR E0057\n-    let b = f(4);\n-    let c = f(2, 3); //~ ERROR E0057\n-}"}, {"sha": "31579e282896402d067d47b61d507c0921f252ae", "filename": "src/test/ui/span/E0057.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2d37f38f872859b2b096772765a7987199c852c4/src%2Ftest%2Fui%2Fspan%2FE0057.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d37f38f872859b2b096772765a7987199c852c4/src%2Ftest%2Fui%2Fspan%2FE0057.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0057.stderr?ref=2d37f38f872859b2b096772765a7987199c852c4", "patch": "@@ -1,19 +0,0 @@\n-error[E0057]: this function takes 1 argument but 0 arguments were supplied\n-  --> $DIR/E0057.rs:3:13\n-   |\n-LL |     let a = f();\n-   |             ^-- supplied 0 arguments\n-   |             |\n-   |             expected 1 argument\n-\n-error[E0057]: this function takes 1 argument but 2 arguments were supplied\n-  --> $DIR/E0057.rs:5:13\n-   |\n-LL |     let c = f(2, 3);\n-   |             ^ -  - supplied 2 arguments\n-   |             |\n-   |             expected 1 argument\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0057`."}, {"sha": "eabffc16170cac1eb8a402199484b9e399963ecd", "filename": "src/test/ui/structs-enums/cross-crate-newtype-struct-pat.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/600ec284838c52d1f6657c2cf0097b58970b133b/src%2Ftest%2Fui%2Fstructs-enums%2Fcross-crate-newtype-struct-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600ec284838c52d1f6657c2cf0097b58970b133b/src%2Ftest%2Fui%2Fstructs-enums%2Fcross-crate-newtype-struct-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs-enums%2Fcross-crate-newtype-struct-pat.rs?ref=600ec284838c52d1f6657c2cf0097b58970b133b", "previous_filename": "src/test/ui/cross-crate/cross-crate-newtype-struct-pat.rs"}, {"sha": "8267a82fe2aea980b0ba24eb87ab451ab1a21429", "filename": "src/test/ui/structs/suggest-private-fields.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/600ec284838c52d1f6657c2cf0097b58970b133b/src%2Ftest%2Fui%2Fstructs%2Fsuggest-private-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600ec284838c52d1f6657c2cf0097b58970b133b/src%2Ftest%2Fui%2Fstructs%2Fsuggest-private-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fsuggest-private-fields.rs?ref=600ec284838c52d1f6657c2cf0097b58970b133b", "previous_filename": "src/test/ui/suggestions/suggest-private-fields.rs"}, {"sha": "d628bd16208339b37a1bc357c87bf93f40a01d83", "filename": "src/test/ui/structs/suggest-private-fields.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/600ec284838c52d1f6657c2cf0097b58970b133b/src%2Ftest%2Fui%2Fstructs%2Fsuggest-private-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/600ec284838c52d1f6657c2cf0097b58970b133b/src%2Ftest%2Fui%2Fstructs%2Fsuggest-private-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fsuggest-private-fields.stderr?ref=600ec284838c52d1f6657c2cf0097b58970b133b", "previous_filename": "src/test/ui/suggestions/suggest-private-fields.stderr"}, {"sha": "9765af1a7f652ac5e2bce5d4bcad7fb7b06b56c7", "filename": "src/test/ui/suggestions/auxiliary/struct_field_privacy.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2d37f38f872859b2b096772765a7987199c852c4/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fstruct_field_privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d37f38f872859b2b096772765a7987199c852c4/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fstruct_field_privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fstruct_field_privacy.rs?ref=2d37f38f872859b2b096772765a7987199c852c4", "patch": "@@ -1,9 +0,0 @@\n-pub struct A {\n-    a: isize,\n-    pub b: isize,\n-}\n-\n-pub struct B {\n-    pub a: isize,\n-    b: isize,\n-}"}, {"sha": "471a6b836b51e56932d2ae5a56ac3dc8c007c578", "filename": "src/test/ui/traits/associated_type_bound/assoc_type_bound_with_struct.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/600ec284838c52d1f6657c2cf0097b58970b133b/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fassoc_type_bound_with_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600ec284838c52d1f6657c2cf0097b58970b133b/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fassoc_type_bound_with_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fassoc_type_bound_with_struct.rs?ref=600ec284838c52d1f6657c2cf0097b58970b133b", "patch": "@@ -16,4 +16,8 @@ fn foo<T: Bar>(_: T) where <T as Bar>::Baz: String { //~ ERROR expected trait, f\n fn qux<'a, T: Bar>(_: &'a T) where <&'a T as Bar>::Baz: String { //~ ERROR expected trait, found\n }\n \n+fn issue_95327() where <u8 as Unresolved>::Assoc: String {}\n+//~^ ERROR expected trait, found struct\n+//~| ERROR use of undeclared type `Unresolved`\n+\n fn main() {}"}, {"sha": "9ca446a0a891d82ecb0436977b226f971a18b68d", "filename": "src/test/ui/traits/associated_type_bound/assoc_type_bound_with_struct.stderr", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/600ec284838c52d1f6657c2cf0097b58970b133b/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fassoc_type_bound_with_struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/600ec284838c52d1f6657c2cf0097b58970b133b/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fassoc_type_bound_with_struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fassoc_type_bound_with_struct.stderr?ref=600ec284838c52d1f6657c2cf0097b58970b133b", "patch": "@@ -1,3 +1,9 @@\n+error[E0433]: failed to resolve: use of undeclared type `Unresolved`\n+  --> $DIR/assoc_type_bound_with_struct.rs:19:31\n+   |\n+LL | fn issue_95327() where <u8 as Unresolved>::Assoc: String {}\n+   |                               ^^^^^^^^^^ use of undeclared type `Unresolved`\n+\n error[E0404]: expected trait, found struct `String`\n   --> $DIR/assoc_type_bound_with_struct.rs:5:46\n    |\n@@ -78,6 +84,18 @@ help: a trait with a similar name exists\n LL | fn qux<'a, T: Bar>(_: &'a T) where <&'a T as Bar>::Baz: ToString {\n    |                                                         ~~~~~~~~\n \n-error: aborting due to 4 previous errors\n+error[E0404]: expected trait, found struct `String`\n+  --> $DIR/assoc_type_bound_with_struct.rs:19:51\n+   |\n+LL | fn issue_95327() where <u8 as Unresolved>::Assoc: String {}\n+   |                                                   ^^^^^^ help: a trait with a similar name exists: `ToString`\n+   |\n+  ::: $SRC_DIR/alloc/src/string.rs:LL:COL\n+   |\n+LL | pub trait ToString {\n+   | ------------------ similarly named trait `ToString` defined here\n+\n+error: aborting due to 6 previous errors\n \n-For more information about this error, try `rustc --explain E0404`.\n+Some errors have detailed explanations: E0404, E0433.\n+For more information about an error, try `rustc --explain E0404`."}, {"sha": "7aa3eb0d6c44af68eddbeeceb2b659c5fcc200b4", "filename": "src/test/ui/xcrate/xcrate-unit-struct-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/600ec284838c52d1f6657c2cf0097b58970b133b/src%2Ftest%2Fui%2Fxcrate%2Fxcrate-unit-struct-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600ec284838c52d1f6657c2cf0097b58970b133b/src%2Ftest%2Fui%2Fxcrate%2Fxcrate-unit-struct-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fxcrate%2Fxcrate-unit-struct-2.rs?ref=600ec284838c52d1f6657c2cf0097b58970b133b", "previous_filename": "src/test/ui/cross-crate/xcrate-unit-struct.rs"}]}