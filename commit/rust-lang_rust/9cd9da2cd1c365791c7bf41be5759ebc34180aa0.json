{"sha": "9cd9da2cd1c365791c7bf41be5759ebc34180aa0", "node_id": "C_kwDOAAsO6NoAKDljZDlkYTJjZDFjMzY1NzkxYzdiZjQxYmU1NzU5ZWJjMzQxODBhYTA", "commit": {"author": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2023-03-13T19:16:43Z"}, "committer": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2023-03-27T14:03:30Z"}, "message": "update documentation", "tree": {"sha": "75842f804dd5ad0e3f1883e8a815025688abb019", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75842f804dd5ad0e3f1883e8a815025688abb019"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cd9da2cd1c365791c7bf41be5759ebc34180aa0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cd9da2cd1c365791c7bf41be5759ebc34180aa0", "html_url": "https://github.com/rust-lang/rust/commit/9cd9da2cd1c365791c7bf41be5759ebc34180aa0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cd9da2cd1c365791c7bf41be5759ebc34180aa0/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e29b27b4a4c6b6fc80e38d2747c8076a59475c03", "url": "https://api.github.com/repos/rust-lang/rust/commits/e29b27b4a4c6b6fc80e38d2747c8076a59475c03", "html_url": "https://github.com/rust-lang/rust/commit/e29b27b4a4c6b6fc80e38d2747c8076a59475c03"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "d82ecb698dd085abed3a72806617654221602cba", "filename": "library/core/src/iter/traits/double_ended.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9cd9da2cd1c365791c7bf41be5759ebc34180aa0/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cd9da2cd1c365791c7bf41be5759ebc34180aa0/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs?ref=9cd9da2cd1c365791c7bf41be5759ebc34180aa0", "patch": "@@ -101,10 +101,11 @@ pub trait DoubleEndedIterator: Iterator {\n     /// eagerly skip `n` elements starting from the back by calling [`next_back`] up\n     /// to `n` times until [`None`] is encountered.\n     ///\n-    /// `advance_back_by(n)` will return `0` if the iterator successfully advances by\n-    /// `n` elements, or an usize `k` if [`None`] is encountered, where `k` is remaining number\n-    /// of steps that could not be advanced because the iterator ran out.\n-    /// Note that `k` is always less than `n`.\n+    /// `advance_back_by(n)` will return `Ok(())` if the iterator successfully advances by\n+    /// `n` elements, or a `Err(NonZeroUsize)` with value `k` if [`None`] is encountered, where `k`\n+    /// is remaining number of steps that could not be advanced because the iterator ran out.\n+    /// If `self` is empty and `n` is non-zero, then this returns `Err(n)`.\n+    /// Otherwise, `k` is always less than `n`.\n     ///\n     /// Calling `advance_back_by(0)` can do meaningful work, for example [`Flatten`] can advance its\n     /// outer iterator until it finds an inner iterator that is not empty, which then often"}, {"sha": "080330fa41ef5c177eb5ed0602c4c4759954fdf6", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9cd9da2cd1c365791c7bf41be5759ebc34180aa0/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cd9da2cd1c365791c7bf41be5759ebc34180aa0/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=9cd9da2cd1c365791c7bf41be5759ebc34180aa0", "patch": "@@ -309,10 +309,11 @@ pub trait Iterator {\n     /// This method will eagerly skip `n` elements by calling [`next`] up to `n`\n     /// times until [`None`] is encountered.\n     ///\n-    /// `advance_by(n)` will return `0` if the iterator successfully advances by\n-    /// `n` elements, or an usize `k` if [`None`] is encountered, where `k` is remaining number\n-    /// of steps that could not be advanced because the iterator ran out.\n-    /// Note that `k` is always less than `n`.\n+    /// `advance_by(n)` will return `Ok(())` if the iterator successfully advances by\n+    /// `n` elements, or a `Err(NonZeroUsize)` with value `k` if [`None`] is encountered,\n+    /// where `k` is remaining number of steps that could not be advanced because the iterator ran out.\n+    /// If `self` is empty and `n` is non-zero, then this returns `Err(n)`.\n+    /// Otherwise, `k` is always less than `n`.\n     ///\n     /// Calling `advance_by(0)` can do meaningful work, for example [`Flatten`]\n     /// can advance its outer iterator until it finds an inner iterator that is not empty, which"}]}