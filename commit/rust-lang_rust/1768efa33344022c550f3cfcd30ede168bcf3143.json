{"sha": "1768efa33344022c550f3cfcd30ede168bcf3143", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3NjhlZmEzMzM0NDAyMmM1NTBmM2NmY2QzMGVkZTE2OGJjZjMxNDM=", "commit": {"author": {"name": "ThibsG", "email": "thibsg@pm.me", "date": "2021-03-14T18:35:35Z"}, "committer": {"name": "ThibsG", "email": "thibsg@pm.me", "date": "2021-03-28T07:37:05Z"}, "message": "Fix FP in `single_component_path_imports` lint", "tree": {"sha": "16a3048c9c0d86f4f29558966e28abc7a9f0013f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16a3048c9c0d86f4f29558966e28abc7a9f0013f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1768efa33344022c550f3cfcd30ede168bcf3143", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1768efa33344022c550f3cfcd30ede168bcf3143", "html_url": "https://github.com/rust-lang/rust/commit/1768efa33344022c550f3cfcd30ede168bcf3143", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1768efa33344022c550f3cfcd30ede168bcf3143/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e56a2b27f005e7f81756ccc281eca69900dddd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e56a2b27f005e7f81756ccc281eca69900dddd7", "html_url": "https://github.com/rust-lang/rust/commit/8e56a2b27f005e7f81756ccc281eca69900dddd7"}], "stats": {"total": 125, "additions": 109, "deletions": 16}, "files": [{"sha": "97557fefe3ecab54082e0faf5878e01ad796cda7", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1768efa33344022c550f3cfcd30ede168bcf3143/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1768efa33344022c550f3cfcd30ede168bcf3143/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=1768efa33344022c550f3cfcd30ede168bcf3143", "patch": "@@ -1232,7 +1232,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_early_pass(|| box as_conversions::AsConversions);\n     store.register_late_pass(|| box let_underscore::LetUnderscore);\n     store.register_late_pass(|| box atomic_ordering::AtomicOrdering);\n-    store.register_early_pass(|| box single_component_path_imports::SingleComponentPathImports);\n+    store.register_early_pass(|| box single_component_path_imports::SingleComponentPathImports::default());\n     let max_fn_params_bools = conf.max_fn_params_bools;\n     let max_struct_bools = conf.max_struct_bools;\n     store.register_early_pass(move || box excessive_bools::ExcessiveBools::new(max_struct_bools, max_fn_params_bools));"}, {"sha": "ee74ef97bcdf8e8cd616c99e3d37b6b5639eff01", "filename": "clippy_lints/src/single_component_path_imports.rs", "status": "modified", "additions": 75, "deletions": 15, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/1768efa33344022c550f3cfcd30ede168bcf3143/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1768efa33344022c550f3cfcd30ede168bcf3143/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs?ref=1768efa33344022c550f3cfcd30ede168bcf3143", "patch": "@@ -1,11 +1,13 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::in_macro;\n use if_chain::if_chain;\n-use rustc_ast::{Item, ItemKind, UseTreeKind};\n+use rustc_ast::{Crate, Item, ItemKind, UseTreeKind};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::edition::Edition;\n+use rustc_span::symbol::kw;\n+use rustc_span::{Span, Symbol};\n \n declare_clippy_lint! {\n     /// **What it does:** Checking for imports with single component use path.\n@@ -35,29 +37,87 @@ declare_clippy_lint! {\n     \"imports with single component path are redundant\"\n }\n \n-declare_lint_pass!(SingleComponentPathImports => [SINGLE_COMPONENT_PATH_IMPORTS]);\n+#[derive(Default)]\n+pub struct SingleComponentPathImports {\n+    /// keep track of imports reused with `self` keyword,\n+    /// such as `self::crypto_hash` in the example below\n+    ///\n+    /// ```rust,ignore\n+    /// use self::crypto_hash::{Algorithm, Hasher};\n+    /// ```\n+    imports_reused_with_self: Vec<Symbol>,\n+    /// keep track of single use statements\n+    /// such as `crypto_hash` in the example below\n+    ///\n+    /// ```rust,ignore\n+    /// use crypto_hash;\n+    /// ```\n+    single_use_usages: Vec<(Symbol, Span)>,\n+}\n+\n+impl_lint_pass!(SingleComponentPathImports => [SINGLE_COMPONENT_PATH_IMPORTS]);\n \n impl EarlyLintPass for SingleComponentPathImports {\n-    fn check_item(&mut self, cx: &EarlyContext<'_>, item: &Item) {\n-        if_chain! {\n-            if !in_macro(item.span);\n-            if cx.sess.opts.edition >= Edition::Edition2018;\n-            if !item.vis.kind.is_pub();\n-            if let ItemKind::Use(use_tree) = &item.kind;\n-            if let segments = &use_tree.prefix.segments;\n-            if segments.len() == 1;\n-            if let UseTreeKind::Simple(None, _, _) = use_tree.kind;\n-            then {\n+    fn check_crate(&mut self, cx: &EarlyContext<'_>, krate: &Crate) {\n+        if cx.sess.opts.edition < Edition::Edition2018 {\n+            return;\n+        }\n+        for item in &krate.items {\n+            self.track_uses(&item);\n+        }\n+        for single_use in &self.single_use_usages {\n+            if !self.imports_reused_with_self.contains(&single_use.0) {\n                 span_lint_and_sugg(\n                     cx,\n                     SINGLE_COMPONENT_PATH_IMPORTS,\n-                    item.span,\n+                    single_use.1,\n                     \"this import is redundant\",\n                     \"remove it entirely\",\n                     String::new(),\n-                    Applicability::MachineApplicable\n+                    Applicability::MachineApplicable,\n                 );\n             }\n         }\n     }\n }\n+\n+impl SingleComponentPathImports {\n+    fn track_uses(&mut self, item: &Item) {\n+        if_chain! {\n+            if !in_macro(item.span);\n+            if !item.vis.kind.is_pub();\n+            if let ItemKind::Use(use_tree) = &item.kind;\n+            if let segments = &use_tree.prefix.segments;\n+\n+            then {\n+                // keep track of `use some_module;` usages\n+                if segments.len() == 1 {\n+                    if let UseTreeKind::Simple(None, _, _) = use_tree.kind {\n+                        let ident = &segments[0].ident;\n+                        self.single_use_usages.push((ident.name, item.span));\n+                    }\n+                    return;\n+                }\n+\n+                // keep track of `use self::some_module` usages\n+                if segments[0].ident.name == kw::SelfLower {\n+                    // simple case such as `use self::module::SomeStruct`\n+                    if segments.len() > 1 {\n+                        self.imports_reused_with_self.push(segments[1].ident.name);\n+                        return;\n+                    }\n+\n+                    // nested case such as `use self::{module1::Struct1, module2::Struct2}`\n+                    if let UseTreeKind::Nested(trees) = &use_tree.kind {\n+                        for tree in trees {\n+                            let segments = &tree.0.prefix.segments;\n+                            if !segments.is_empty() {\n+                                self.imports_reused_with_self.push(segments[0].ident.name);\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "94319ade0ac4b9672ad2064bab6844db2e634887", "filename": "tests/ui/single_component_path_imports_self_after.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1768efa33344022c550f3cfcd30ede168bcf3143/tests%2Fui%2Fsingle_component_path_imports_self_after.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1768efa33344022c550f3cfcd30ede168bcf3143/tests%2Fui%2Fsingle_component_path_imports_self_after.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_component_path_imports_self_after.rs?ref=1768efa33344022c550f3cfcd30ede168bcf3143", "patch": "@@ -0,0 +1,16 @@\n+// edition:2018\n+#![warn(clippy::single_component_path_imports)]\n+#![allow(unused_imports)]\n+\n+use self::regex::{Regex as xeger, RegexSet as tesxeger};\n+pub use self::{\n+    regex::{Regex, RegexSet},\n+    some_mod::SomeType,\n+};\n+use regex;\n+\n+mod some_mod {\n+    pub struct SomeType;\n+}\n+\n+fn main() {}"}, {"sha": "c7437b234566a95f08dd4794f7cecc2af1430adf", "filename": "tests/ui/single_component_path_imports_self_before.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1768efa33344022c550f3cfcd30ede168bcf3143/tests%2Fui%2Fsingle_component_path_imports_self_before.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1768efa33344022c550f3cfcd30ede168bcf3143/tests%2Fui%2Fsingle_component_path_imports_self_before.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_component_path_imports_self_before.rs?ref=1768efa33344022c550f3cfcd30ede168bcf3143", "patch": "@@ -0,0 +1,17 @@\n+// edition:2018\n+#![warn(clippy::single_component_path_imports)]\n+#![allow(unused_imports)]\n+\n+use regex;\n+\n+use self::regex::{Regex as xeger, RegexSet as tesxeger};\n+pub use self::{\n+    regex::{Regex, RegexSet},\n+    some_mod::SomeType,\n+};\n+\n+mod some_mod {\n+    pub struct SomeType;\n+}\n+\n+fn main() {}"}]}