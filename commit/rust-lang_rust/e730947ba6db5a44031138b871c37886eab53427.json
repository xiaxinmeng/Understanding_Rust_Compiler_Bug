{"sha": "e730947ba6db5a44031138b871c37886eab53427", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3MzA5NDdiYTZkYjVhNDQwMzExMzhiODcxYzM3ODg2ZWFiNTM0Mjc=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-16T21:40:47Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-24T02:53:43Z"}, "message": "Separate `run_global_ctxt` into a separate function", "tree": {"sha": "a37cc4833ab5ba1e5523b5043d3e68686f0cf409", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a37cc4833ab5ba1e5523b5043d3e68686f0cf409"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e730947ba6db5a44031138b871c37886eab53427", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e730947ba6db5a44031138b871c37886eab53427", "html_url": "https://github.com/rust-lang/rust/commit/e730947ba6db5a44031138b871c37886eab53427", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e730947ba6db5a44031138b871c37886eab53427/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2527989875a7ef84de96ea61721508f5d8f7111", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2527989875a7ef84de96ea61721508f5d8f7111", "html_url": "https://github.com/rust-lang/rust/commit/d2527989875a7ef84de96ea61721508f5d8f7111"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "e7856bbfd34b0413c96d08b8d50d6ba8b869f054", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e730947ba6db5a44031138b871c37886eab53427/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e730947ba6db5a44031138b871c37886eab53427/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=e730947ba6db5a44031138b871c37886eab53427", "patch": "@@ -32,7 +32,7 @@ use std::rc::Rc;\n \n use crate::clean;\n use crate::clean::{AttributesExt, MAX_DEF_ID};\n-use crate::config::RenderInfo;\n+use crate::config::{RenderInfo, OutputFormat};\n use crate::config::{Options as RustdocOptions, RenderOptions};\n use crate::passes::{self, Condition::*, ConditionalPass};\n \n@@ -299,8 +299,8 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n         lint_opts,\n         describe_lints,\n         lint_cap,\n-        mut default_passes,\n-        mut manual_passes,\n+        default_passes,\n+        manual_passes,\n         display_warnings,\n         render_options,\n         output_format,\n@@ -457,7 +457,14 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n \n             let mut global_ctxt = abort_on_err(queries.global_ctxt(), sess).take();\n \n-            global_ctxt.enter(|tcx| {\n+            global_ctxt.enter(|tcx| run_global_ctxt(tcx, resolver, default_passes, manual_passes, render_options, output_format))\n+        })\n+    })\n+}\n+\n+fn run_global_ctxt(tcx: TyCtxt<'_>, resolver: Rc<RefCell<interface::BoxedResolver>>,\n+    mut default_passes: passes::DefaultPassOption, mut manual_passes: Vec<String>,\n+    render_options: RenderOptions, output_format: Option<OutputFormat>) -> (clean::Crate, RenderInfo, RenderOptions) {\n                 // Certain queries assume that some checks were run elsewhere\n                 // (see https://github.com/rust-lang/rust/pull/73566#issuecomment-656954425),\n                 // so type-check everything other than function bodies in this crate before running lints.\n@@ -476,13 +483,15 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n                     }\n                 });\n                 tcx.sess.abort_if_errors();\n-                sess.time(\"missing_docs\", || {\n+    tcx.sess.time(\"missing_docs\", || {\n                     rustc_lint::check_crate(tcx, rustc_lint::builtin::MissingDoc::new);\n                 });\n+    tcx.sess.time(\"check_mod_attrs\", || {\n                 for &module in tcx.hir().krate().modules.keys() {\n                     let local_def_id = tcx.hir().local_def_id(module);\n                     tcx.ensure().check_mod_attrs(local_def_id);\n                 }\n+    });\n \n                 let access_levels = tcx.privacy_access_levels(LOCAL_CRATE);\n                 // Convert from a HirId set to a DefId set since we don't always have easy access\n@@ -629,9 +638,6 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n                 ctxt.sess().abort_if_errors();\n \n                 (krate, ctxt.renderinfo.into_inner(), ctxt.render_options)\n-            })\n-        })\n-    })\n }\n \n /// Due to https://github.com/rust-lang/rust/pull/73566,"}]}