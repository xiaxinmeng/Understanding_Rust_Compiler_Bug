{"sha": "6dbf0ba691f756ebb89ffe0fd082f3d057027273", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkYmYwYmE2OTFmNzU2ZWJiODlmZmUwZmQwODJmM2QwNTcwMjcyNzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-20T06:38:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-20T06:38:15Z"}, "message": "Auto merge of #46233 - SimonSapin:fmt-debuglist-flags, r=sfackler\n\nMake fmt::DebugList and friends forward formatting parameters\n\nFor example, formatting slice of integers with `{:04?}` should zero-pad each integer.\n\nThis also affects every use of `#[derive(Debug)]`.", "tree": {"sha": "57a6519a97af4d3135a1a55bee412dceded08d46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57a6519a97af4d3135a1a55bee412dceded08d46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6dbf0ba691f756ebb89ffe0fd082f3d057027273", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6dbf0ba691f756ebb89ffe0fd082f3d057027273", "html_url": "https://github.com/rust-lang/rust/commit/6dbf0ba691f756ebb89ffe0fd082f3d057027273", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6dbf0ba691f756ebb89ffe0fd082f3d057027273/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "588f7db8ef588ea7e349817bb44b4e37bfd92745", "url": "https://api.github.com/repos/rust-lang/rust/commits/588f7db8ef588ea7e349817bb44b4e37bfd92745", "html_url": "https://github.com/rust-lang/rust/commit/588f7db8ef588ea7e349817bb44b4e37bfd92745"}, {"sha": "bf087895102f1ab275a7ceed9f789dcfb7e172f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf087895102f1ab275a7ceed9f789dcfb7e172f3", "html_url": "https://github.com/rust-lang/rust/commit/bf087895102f1ab275a7ceed9f789dcfb7e172f3"}], "stats": {"total": 177, "additions": 134, "deletions": 43}, "files": [{"sha": "a1f4c6995dae08a74a89f32f6db3a341a31833cd", "filename": "src/libcore/fmt/builders.rs", "status": "modified", "additions": 58, "deletions": 43, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/6dbf0ba691f756ebb89ffe0fd082f3d057027273/src%2Flibcore%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dbf0ba691f756ebb89ffe0fd082f3d057027273/src%2Flibcore%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fbuilders.rs?ref=6dbf0ba691f756ebb89ffe0fd082f3d057027273", "patch": "@@ -10,25 +10,29 @@\n \n use fmt;\n \n-struct PadAdapter<'a, 'b: 'a> {\n-    fmt: &'a mut fmt::Formatter<'b>,\n+struct PadAdapter<'a> {\n+    buf: &'a mut (fmt::Write + 'a),\n     on_newline: bool,\n }\n \n-impl<'a, 'b: 'a> PadAdapter<'a, 'b> {\n-    fn new(fmt: &'a mut fmt::Formatter<'b>) -> PadAdapter<'a, 'b> {\n-        PadAdapter {\n-            fmt,\n-            on_newline: false,\n-        }\n+impl<'a> PadAdapter<'a> {\n+    fn wrap<'b, 'c: 'a+'b>(fmt: &'c mut fmt::Formatter, slot: &'b mut Option<Self>)\n+                        -> fmt::Formatter<'b> {\n+        fmt.wrap_buf(move |buf| {\n+            *slot = Some(PadAdapter {\n+                buf,\n+                on_newline: false,\n+            });\n+            slot.as_mut().unwrap()\n+        })\n     }\n }\n \n-impl<'a, 'b: 'a> fmt::Write for PadAdapter<'a, 'b> {\n+impl<'a> fmt::Write for PadAdapter<'a> {\n     fn write_str(&mut self, mut s: &str) -> fmt::Result {\n         while !s.is_empty() {\n             if self.on_newline {\n-                self.fmt.write_str(\"    \")?;\n+                self.buf.write_str(\"    \")?;\n             }\n \n             let split = match s.find('\\n') {\n@@ -41,7 +45,7 @@ impl<'a, 'b: 'a> fmt::Write for PadAdapter<'a, 'b> {\n                     s.len()\n                 }\n             };\n-            self.fmt.write_str(&s[..split])?;\n+            self.buf.write_str(&s[..split])?;\n             s = &s[split..];\n         }\n \n@@ -112,11 +116,16 @@ impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n             };\n \n             if self.is_pretty() {\n-                let mut writer = PadAdapter::new(self.fmt);\n-                fmt::write(&mut writer,\n-                           format_args!(\"{}\\n{}: {:#?}\", prefix, name, value))\n+                let mut slot = None;\n+                let mut writer = PadAdapter::wrap(&mut self.fmt, &mut slot);\n+                writer.write_str(prefix)?;\n+                writer.write_str(\"\\n\")?;\n+                writer.write_str(name)?;\n+                writer.write_str(\": \")?;\n+                value.fmt(&mut writer)\n             } else {\n-                write!(self.fmt, \"{} {}: {:?}\", prefix, name, value)\n+                write!(self.fmt, \"{} {}: \", prefix, name)?;\n+                value.fmt(self.fmt)\n             }\n         });\n \n@@ -204,10 +213,15 @@ impl<'a, 'b: 'a> DebugTuple<'a, 'b> {\n             };\n \n             if self.is_pretty() {\n-                let mut writer = PadAdapter::new(self.fmt);\n-                fmt::write(&mut writer, format_args!(\"{}\\n{:#?}\", prefix, value))\n+                let mut slot = None;\n+                let mut writer = PadAdapter::wrap(&mut self.fmt, &mut slot);\n+                writer.write_str(prefix)?;\n+                writer.write_str(\"\\n\")?;\n+                value.fmt(&mut writer)\n             } else {\n-                write!(self.fmt, \"{}{}{:?}\", prefix, space, value)\n+                self.fmt.write_str(prefix)?;\n+                self.fmt.write_str(space)?;\n+                value.fmt(self.fmt)\n             }\n         });\n \n@@ -247,20 +261,19 @@ impl<'a, 'b: 'a> DebugInner<'a, 'b> {\n     fn entry(&mut self, entry: &fmt::Debug) {\n         self.result = self.result.and_then(|_| {\n             if self.is_pretty() {\n-                let mut writer = PadAdapter::new(self.fmt);\n-                let prefix = if self.has_fields {\n-                    \",\"\n+                let mut slot = None;\n+                let mut writer = PadAdapter::wrap(&mut self.fmt, &mut slot);\n+                writer.write_str(if self.has_fields {\n+                    \",\\n\"\n                 } else {\n-                    \"\"\n-                };\n-                fmt::write(&mut writer, format_args!(\"{}\\n{:#?}\", prefix, entry))\n+                    \"\\n\"\n+                })?;\n+                entry.fmt(&mut writer)\n             } else {\n-                let prefix = if self.has_fields {\n-                    \", \"\n-                } else {\n-                    \"\"\n-                };\n-                write!(self.fmt, \"{}{:?}\", prefix, entry)\n+                if self.has_fields {\n+                    self.fmt.write_str(\", \")?\n+                }\n+                entry.fmt(self.fmt)\n             }\n         });\n \n@@ -472,21 +485,23 @@ impl<'a, 'b: 'a> DebugMap<'a, 'b> {\n     pub fn entry(&mut self, key: &fmt::Debug, value: &fmt::Debug) -> &mut DebugMap<'a, 'b> {\n         self.result = self.result.and_then(|_| {\n             if self.is_pretty() {\n-                let mut writer = PadAdapter::new(self.fmt);\n-                let prefix = if self.has_fields {\n-                    \",\"\n+                let mut slot = None;\n+                let mut writer = PadAdapter::wrap(&mut self.fmt, &mut slot);\n+                writer.write_str(if self.has_fields {\n+                    \",\\n\"\n                 } else {\n-                    \"\"\n-                };\n-                fmt::write(&mut writer,\n-                           format_args!(\"{}\\n{:#?}: {:#?}\", prefix, key, value))\n+                    \"\\n\"\n+                })?;\n+                key.fmt(&mut writer)?;\n+                writer.write_str(\": \")?;\n+                value.fmt(&mut writer)\n             } else {\n-                let prefix = if self.has_fields {\n-                    \", \"\n-                } else {\n-                    \"\"\n-                };\n-                write!(self.fmt, \"{}{:?}: {:?}\", prefix, key, value)\n+                if self.has_fields {\n+                    self.fmt.write_str(\", \")?\n+                }\n+                key.fmt(self.fmt)?;\n+                self.fmt.write_str(\": \")?;\n+                value.fmt(self.fmt)\n             }\n         });\n "}, {"sha": "0f541a4b53789930d992090a034ed83c8020f7ee", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6dbf0ba691f756ebb89ffe0fd082f3d057027273/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dbf0ba691f756ebb89ffe0fd082f3d057027273/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=6dbf0ba691f756ebb89ffe0fd082f3d057027273", "patch": "@@ -1034,6 +1034,27 @@ pub fn write(output: &mut Write, args: Arguments) -> Result {\n }\n \n impl<'a> Formatter<'a> {\n+    fn wrap_buf<'b, 'c, F>(&'b mut self, wrap: F) -> Formatter<'c>\n+        where 'b: 'c, F: FnOnce(&'b mut (Write+'b)) -> &'c mut (Write+'c)\n+    {\n+        Formatter {\n+            // We want to change this\n+            buf: wrap(self.buf),\n+\n+            // And preserve these\n+            flags: self.flags,\n+            fill: self.fill,\n+            align: self.align,\n+            width: self.width,\n+            precision: self.precision,\n+\n+            // These only exist in the struct for the `run` method,\n+            // which won\u2019t be used together with this method.\n+            curarg: self.curarg.clone(),\n+            args: self.args,\n+        }\n+    }\n+\n     // First up is the collection of functions used to execute a format string\n     // at runtime. This consumes all of the compile-time statics generated by\n     // the format! syntax extension."}, {"sha": "b7233658e9361ac2f521247b29b91130b30d7707", "filename": "src/libcore/tests/fmt/builders.rs", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/6dbf0ba691f756ebb89ffe0fd082f3d057027273/src%2Flibcore%2Ftests%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dbf0ba691f756ebb89ffe0fd082f3d057027273/src%2Flibcore%2Ftests%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Ffmt%2Fbuilders.rs?ref=6dbf0ba691f756ebb89ffe0fd082f3d057027273", "patch": "@@ -496,3 +496,58 @@ mod debug_list {\n                    format!(\"{:#?}\", Bar));\n     }\n }\n+\n+#[test]\n+fn test_formatting_parameters_are_forwarded() {\n+    use std::collections::{BTreeMap, BTreeSet};\n+    #[derive(Debug)]\n+    struct Foo {\n+        bar: u32,\n+        baz: u32,\n+    }\n+    let struct_ = Foo { bar: 1024, baz: 7 };\n+    let tuple = (1024, 7);\n+    let list = [1024, 7];\n+    let mut map = BTreeMap::new();\n+    map.insert(\"bar\", 1024);\n+    map.insert(\"baz\", 7);\n+    let mut set = BTreeSet::new();\n+    set.insert(1024);\n+    set.insert(7);\n+\n+    assert_eq!(format!(\"{:03?}\", struct_), \"Foo { bar: 1024, baz: 007 }\");\n+    assert_eq!(format!(\"{:03?}\", tuple), \"(1024, 007)\");\n+    assert_eq!(format!(\"{:03?}\", list), \"[1024, 007]\");\n+    assert_eq!(format!(\"{:03?}\", map), r#\"{\"bar\": 1024, \"baz\": 007}\"#);\n+    assert_eq!(format!(\"{:03?}\", set), \"{007, 1024}\");\n+    assert_eq!(format!(\"{:#03?}\", struct_), \"\n+Foo {\n+    bar: 1024,\n+    baz: 007\n+}\n+    \".trim());\n+    assert_eq!(format!(\"{:#03?}\", tuple), \"\n+(\n+    1024,\n+    007\n+)\n+    \".trim());\n+    assert_eq!(format!(\"{:#03?}\", list), \"\n+[\n+    1024,\n+    007\n+]\n+    \".trim());\n+    assert_eq!(format!(\"{:#03?}\", map), r#\"\n+{\n+    \"bar\": 1024,\n+    \"baz\": 007\n+}\n+    \"#.trim());\n+    assert_eq!(format!(\"{:#03?}\", set), \"\n+{\n+    007,\n+    1024\n+}\n+    \".trim());\n+}"}]}