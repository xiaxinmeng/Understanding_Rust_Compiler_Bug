{"sha": "a6c04eab864af62138c8b8787d787623d9040bed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2YzA0ZWFiODY0YWY2MjEzOGM4Yjg3ODdkNzg3NjIzZDkwNDBiZWQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@pobox.com", "date": "2012-01-19T03:22:01Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@pobox.com", "date": "2012-01-19T03:22:01Z"}, "message": "Merge pull request #1562 from elly/cargo\n\n[cargo] add --test flag to install", "tree": {"sha": "fba4df982a420c5b3e87c8ce6a91d7e0552d67a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fba4df982a420c5b3e87c8ce6a91d7e0552d67a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6c04eab864af62138c8b8787d787623d9040bed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6c04eab864af62138c8b8787d787623d9040bed", "html_url": "https://github.com/rust-lang/rust/commit/a6c04eab864af62138c8b8787d787623d9040bed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6c04eab864af62138c8b8787d787623d9040bed/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a6aec04a266f5435f5d6f879750761c2cd8fce3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a6aec04a266f5435f5d6f879750761c2cd8fce3", "html_url": "https://github.com/rust-lang/rust/commit/6a6aec04a266f5435f5d6f879750761c2cd8fce3"}, {"sha": "ad0065fe8350d29fb2c2049453e818555160f80f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad0065fe8350d29fb2c2049453e818555160f80f", "html_url": "https://github.com/rust-lang/rust/commit/ad0065fe8350d29fb2c2049453e818555160f80f"}], "stats": {"total": 63, "additions": 48, "deletions": 15}, "files": [{"sha": "055c6b5a867961c6551087edcbb4a52401ff87de", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 48, "deletions": 15, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/a6c04eab864af62138c8b8787d787623d9040bed/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c04eab864af62138c8b8787d787623d9040bed/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=a6c04eab864af62138c8b8787d787623d9040bed", "patch": "@@ -54,7 +54,8 @@ type cargo = {\n     libdir: str,\n     workdir: str,\n     sourcedir: str,\n-    sources: map::hashmap<str, source>\n+    sources: map::hashmap<str, source>,\n+    mutable test: bool\n };\n \n type pkg = {\n@@ -67,7 +68,7 @@ type pkg = {\n };\n \n fn info(msg: str) {\n-    io::stdout().write_line(msg);\n+    io::stdout().write_line(\"info: \" + msg);\n }\n \n fn warn(msg: str) {\n@@ -323,7 +324,8 @@ fn configure() -> cargo {\n         libdir: fs::connect(p, \"lib\"),\n         workdir: fs::connect(p, \"work\"),\n         sourcedir: fs::connect(p, \"sources\"),\n-        sources: sources\n+        sources: sources,\n+        mutable test: false\n     };\n \n     need_dir(c.root);\n@@ -353,15 +355,16 @@ fn for_each_package(c: cargo, b: block(source, package)) {\n     })\n }\n \n-fn install_one_crate(c: cargo, _path: str, cf: str, _p: pkg) {\n+// FIXME: deduplicate code with install_one_crate\n+fn test_one_crate(c: cargo, _path: str, cf: str, _p: pkg) {\n     let name = fs::basename(cf);\n     let ri = str::index(name, '.' as u8);\n     if ri != -1 {\n         name = str::slice(name, 0u, ri as uint);\n     }\n     #debug(\"Installing: %s\", name);\n     let old = fs::list_dir(\".\");\n-    let p = run::program_output(\"rustc\", [name + \".rc\"]);\n+    let p = run::program_output(\"rustc\", [\"--test\", name + \".rc\"]);\n     if p.status != 0 {\n         error(#fmt[\"rustc failed: %d\\n%s\\n%s\", p.status, p.err, p.out]);\n         ret;\n@@ -371,6 +374,26 @@ fn install_one_crate(c: cargo, _path: str, cf: str, _p: pkg) {\n         vec::filter::<str>(new, { |n| !vec::member::<str>(n, old) });\n     let exec_suffix = os::exec_suffix();\n     for ct: str in created {\n+        if (exec_suffix != \"\" && str::ends_with(ct, exec_suffix)) ||\n+            (exec_suffix == \"\" && !str::starts_with(ct, \"./lib\")) {\n+            // FIXME: need libstd fs::copy or something\n+            run::run_program(ct, []);\n+        }\n+    }\n+}\n+\n+fn install_one_crate(c: cargo, _path: str, cf: str, _p: pkg) {\n+    let buildpath = fs::connect(_path, \"/build\");\n+    need_dir(buildpath);\n+    #debug(\"Installing: %s -> %s\", cf, buildpath);\n+    let p = run::program_output(\"rustc\", [\"--out-dir\", buildpath, cf]);\n+    if p.status != 0 {\n+        error(#fmt[\"rustc failed: %d\\n%s\\n%s\", p.status, p.err, p.out]);\n+        ret;\n+    }\n+    let new = fs::list_dir(buildpath);\n+    let exec_suffix = os::exec_suffix();\n+    for ct: str in new {\n         if (exec_suffix != \"\" && str::ends_with(ct, exec_suffix)) ||\n             (exec_suffix == \"\" && !str::starts_with(ct, \"./lib\")) {\n             #debug(\"  bin: %s\", ct);\n@@ -402,6 +425,9 @@ fn install_source(c: cargo, path: str) {\n         alt p {\n             none. { cont; }\n             some(_p) {\n+                if c.test {\n+                    test_one_crate(c, path, cf, _p);\n+                }\n                 install_one_crate(c, path, cf, _p);\n             }\n         }\n@@ -530,13 +556,20 @@ fn cmd_install(c: cargo, argv: [str]) {\n         ret;\n     }\n \n+    let target = argv[2];\n+    // TODO: getopts\n+    if vec::len(argv) > 3u && argv[2] == \"--test\" {\n+        c.test = true;\n+        target = argv[3];\n+    }\n+\n     let wd = alt tempfile::mkdtemp(c.workdir + fs::path_sep(), \"\") {\n         some(_wd) { _wd }\n         none. { fail \"needed temp dir\"; }\n     };\n \n-    if str::starts_with(argv[2], \"uuid:\") {\n-        let uuid = rest(argv[2], 5u);\n+    if str::starts_with(target, \"uuid:\") {\n+        let uuid = rest(target, 5u);\n         let idx = str::index(uuid, '/' as u8);\n         if idx != -1 {\n             let source = str::slice(uuid, 0u, idx as uint);\n@@ -546,7 +579,7 @@ fn cmd_install(c: cargo, argv: [str]) {\n             install_uuid(c, wd, uuid);\n         }\n     } else {\n-        let name = argv[2];\n+        let name = target;\n         let idx = str::index(name, '/' as u8);\n         if idx != -1 {\n             let source = str::slice(name, 0u, idx as uint);\n@@ -686,13 +719,13 @@ fn cmd_search(c: cargo, argv: [str]) {\n \n fn cmd_usage() {\n     print(\"Usage: cargo <verb> [args...]\");\n-    print(\"  init                                 Fetch default sources\");\n-    print(\"  install [source/]package-name        Install by name\");\n-    print(\"  install uuid:[source/]package-uuid   Install by uuid\");\n-    print(\"  list [source]                        List packages\");\n-    print(\"  search <name | '*'> [tags...]        Search packages\");\n-    print(\"  sync                                 Sync all sources\");\n-    print(\"  usage                                This\");\n+    print(\"  init                                          Fetch default sources\");\n+    print(\"  install [--test] [source/]package-name        Install by name\");\n+    print(\"  install [--test] uuid:[source/]package-uuid   Install by uuid\");\n+    print(\"  list [source]                                 List packages\");\n+    print(\"  search <name | '*'> [tags...]                 Search packages\");\n+    print(\"  sync                                          Sync all sources\");\n+    print(\"  usage                                         This\");\n }\n \n fn main(argv: [str]) {"}]}