{"sha": "e58cff2a4d28d50a83cca7adeda54f1f671ab5f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1OGNmZjJhNGQyOGQ1MGE4M2NjYTdhZGVkYTU0ZjFmNjcxYWI1ZjM=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-02-04T15:28:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-04T15:28:59Z"}, "message": "Rollup merge of #47958 - frewsxcv:frewsxcv-try-clone, r=aidanhs\n\nClarify shared file handler behavior of File::try_clone.\n\nFixes https://github.com/rust-lang/rust/issues/46578.", "tree": {"sha": "03ff492be8dbce826bc331a206e42345c3a72dac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03ff492be8dbce826bc331a206e42345c3a72dac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e58cff2a4d28d50a83cca7adeda54f1f671ab5f3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJadya8CRBK7hj4Ov3rIwAAdHIIAJabFuJJZTNDdiHoeCMpU8fv\nWsMmYiIJ/RL/+B1lBAr60W0jNXz0ojV/MxFqRjqgwR81h2adtz+qhoZV4ypF0cHa\nBYHcDLr5gKK0Jk63VEi3KNCeD6cU++xgcn0PUZF2EiZOis21Xf2zat6neWqSlNGC\nps3/HPkVh0Zc0dvlaPsjQgwdGnzlG5WSrnPi0a5ifKY0BMudmpOiSrmI+3Bnu3yj\nQv4m2z/loRGsKoQ9t35sSzW9pJ5hSYhbXtYonysNH+Mx9Q9wC8K0aoxP/6eHi2mg\nluRcY/jR70qPlu4FFM9S3GYpB1+VUzgt2MnMvKzRA+SkfUdu0ZKh1YlBmh5k0o0=\n=dBE6\n-----END PGP SIGNATURE-----\n", "payload": "tree 03ff492be8dbce826bc331a206e42345c3a72dac\nparent 1439c2ac35e2e2b03fdc336dc108865387565bd7\nparent d597da32672805644b6dc76cfffeca6b8c4d8e62\nauthor kennytm <kennytm@gmail.com> 1517758139 +0800\ncommitter GitHub <noreply@github.com> 1517758139 +0800\n\nRollup merge of #47958 - frewsxcv:frewsxcv-try-clone, r=aidanhs\n\nClarify shared file handler behavior of File::try_clone.\n\nFixes https://github.com/rust-lang/rust/issues/46578.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e58cff2a4d28d50a83cca7adeda54f1f671ab5f3", "html_url": "https://github.com/rust-lang/rust/commit/e58cff2a4d28d50a83cca7adeda54f1f671ab5f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e58cff2a4d28d50a83cca7adeda54f1f671ab5f3/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1439c2ac35e2e2b03fdc336dc108865387565bd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1439c2ac35e2e2b03fdc336dc108865387565bd7", "html_url": "https://github.com/rust-lang/rust/commit/1439c2ac35e2e2b03fdc336dc108865387565bd7"}, {"sha": "d597da32672805644b6dc76cfffeca6b8c4d8e62", "url": "https://api.github.com/repos/rust-lang/rust/commits/d597da32672805644b6dc76cfffeca6b8c4d8e62", "html_url": "https://github.com/rust-lang/rust/commit/d597da32672805644b6dc76cfffeca6b8c4d8e62"}], "stats": {"total": 36, "additions": 29, "deletions": 7}, "files": [{"sha": "594c9d0ff5aed0fd3a8fa98ee136ecb30a011994", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e58cff2a4d28d50a83cca7adeda54f1f671ab5f3/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58cff2a4d28d50a83cca7adeda54f1f671ab5f3/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=e58cff2a4d28d50a83cca7adeda54f1f671ab5f3", "patch": "@@ -482,20 +482,42 @@ impl File {\n         self.inner.file_attr().map(Metadata)\n     }\n \n-    /// Creates a new independently owned handle to the underlying file.\n-    ///\n-    /// The returned `File` is a reference to the same state that this object\n-    /// references. Both handles will read and write with the same cursor\n-    /// position.\n+    /// Create a new `File` instance that shares the same underlying file handle\n+    /// as the existing `File` instance. Reads, writes, and seeks will affect\n+    /// both `File` instances simultaneously.\n     ///\n     /// # Examples\n     ///\n+    /// Create two handles for a file named `foo.txt`:\n+    ///\n     /// ```no_run\n     /// use std::fs::File;\n     ///\n     /// # fn foo() -> std::io::Result<()> {\n-    /// let mut f = File::open(\"foo.txt\")?;\n-    /// let file_copy = f.try_clone()?;\n+    /// let mut file = File::open(\"foo.txt\")?;\n+    /// let file_copy = file.try_clone()?;\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n+    ///\n+    /// Assuming there\u2019s a file named `foo.txt` with contents `abcdef\\n`, create\n+    /// two handles, seek one of them, and read the remaining bytes from the\n+    /// other handle:\n+    ///\n+    /// ```no_run\n+    /// use std::fs::File;\n+    /// use std::io::SeekFrom;\n+    /// use std::io::prelude::*;\n+    ///\n+    /// # fn foo() -> std::io::Result<()> {\n+    /// let mut file = File::open(\"foo.txt\")?;\n+    /// let mut file_copy = file.try_clone()?;\n+    ///\n+    /// file.seek(SeekFrom::Start(3))?;\n+    ///\n+    /// let mut contents = vec![];\n+    /// file_copy.read_to_end(&mut contents)?;\n+    /// assert_eq!(contents, b\"def\\n\");\n     /// # Ok(())\n     /// # }\n     /// ```"}]}