{"sha": "a1d04cc1d87d990c12da5c816dee412704b38d7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExZDA0Y2MxZDg3ZDk5MGMxMmRhNWM4MTZkZWU0MTI3MDRiMzhkN2Y=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-10-24T15:20:18Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-11-21T20:54:33Z"}, "message": "Remove statics from HAIR by lowering them to a pointer constant", "tree": {"sha": "6e72d36c939daada8f61096a9c79a3a9972cf5b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e72d36c939daada8f61096a9c79a3a9972cf5b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1d04cc1d87d990c12da5c816dee412704b38d7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1d04cc1d87d990c12da5c816dee412704b38d7f", "html_url": "https://github.com/rust-lang/rust/commit/a1d04cc1d87d990c12da5c816dee412704b38d7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1d04cc1d87d990c12da5c816dee412704b38d7f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "html_url": "https://github.com/rust-lang/rust/commit/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed"}], "stats": {"total": 41, "additions": 26, "deletions": 15}, "files": [{"sha": "aed4759322cb9216e25731764707aea218ef2c77", "filename": "src/librustc_mir/build/expr/as_place.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a1d04cc1d87d990c12da5c816dee412704b38d7f/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d04cc1d87d990c12da5c816dee412704b38d7f/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs?ref=a1d04cc1d87d990c12da5c816dee412704b38d7f", "patch": "@@ -197,13 +197,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 };\n                 block.and(place_builder)\n             }\n-            ExprKind::StaticRef { id } => block.and(PlaceBuilder::from(\n-                PlaceBase::Static(Box::new(Static {\n-                    ty: expr.ty,\n-                    kind: StaticKind::Static,\n-                    def_id: id,\n-                }))\n-            )),\n \n             ExprKind::PlaceTypeAscription { source, user_ty } => {\n                 let source = this.hir.mirror(source);"}, {"sha": "3bbd8093d3baedd4cbeae31758796b2f51646a85", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1d04cc1d87d990c12da5c816dee412704b38d7f/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d04cc1d87d990c12da5c816dee412704b38d7f/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=a1d04cc1d87d990c12da5c816dee412704b38d7f", "patch": "@@ -288,7 +288,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             | ExprKind::Continue { .. }\n             | ExprKind::Return { .. }\n             | ExprKind::InlineAsm { .. }\n-            | ExprKind::StaticRef { .. }\n             | ExprKind::PlaceTypeAscription { .. }\n             | ExprKind::ValueTypeAscription { .. } => {\n                 // these do not have corresponding `Rvalue` variants,"}, {"sha": "e7b68acc2ef9752f286f4e5046650425b5513fad", "filename": "src/librustc_mir/build/expr/category.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1d04cc1d87d990c12da5c816dee412704b38d7f/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d04cc1d87d990c12da5c816dee412704b38d7f/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs?ref=a1d04cc1d87d990c12da5c816dee412704b38d7f", "patch": "@@ -40,7 +40,6 @@ impl Category {\n             | ExprKind::Index { .. }\n             | ExprKind::SelfRef\n             | ExprKind::VarRef { .. }\n-            | ExprKind::StaticRef { .. }\n             | ExprKind::PlaceTypeAscription { .. }\n             | ExprKind::ValueTypeAscription { .. } => Some(Category::Place),\n "}, {"sha": "1a19878a1f18e9899e51b19e3104071f32af27fb", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1d04cc1d87d990c12da5c816dee412704b38d7f/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d04cc1d87d990c12da5c816dee412704b38d7f/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=a1d04cc1d87d990c12da5c816dee412704b38d7f", "patch": "@@ -384,7 +384,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             // Avoid creating a temporary\n             ExprKind::VarRef { .. } |\n             ExprKind::SelfRef |\n-            ExprKind::StaticRef { .. } |\n             ExprKind::PlaceTypeAscription { .. } |\n             ExprKind::ValueTypeAscription { .. } => {\n                 debug_assert!(Category::of(&expr.kind) == Some(Category::Place));"}, {"sha": "4bae4bf9052d678e0eab72006178558e0a275d7f", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a1d04cc1d87d990c12da5c816dee412704b38d7f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d04cc1d87d990c12da5c816dee412704b38d7f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=a1d04cc1d87d990c12da5c816dee412704b38d7f", "patch": "@@ -5,7 +5,7 @@ use crate::hair::cx::to_ref::ToRef;\n use crate::hair::util::UserAnnotatedTyHelpers;\n use rustc_index::vec::Idx;\n use rustc::hir::def::{CtorOf, Res, DefKind, CtorKind};\n-use rustc::mir::interpret::{GlobalId, ErrorHandled};\n+use rustc::mir::interpret::{GlobalId, ErrorHandled, ConstValue, Scalar};\n use rustc::ty::{self, AdtKind, Ty};\n use rustc::ty::adjustment::{Adjustment, Adjust, AutoBorrow, AutoBorrowMutability, PointerCast};\n use rustc::ty::subst::{InternalSubsts, SubstsRef};\n@@ -961,7 +961,31 @@ fn convert_path_expr<'a, 'tcx>(\n             }\n         }\n \n-        Res::Def(DefKind::Static, id) => ExprKind::StaticRef { id },\n+        // We encode uses of statics as a `*&STATIC` where the `&STATIC` part is\n+        // a constant reference (or constant raw pointer for `static mut`) in MIR\n+        Res::Def(DefKind::Static, id) => {\n+            let ty = cx.tcx.type_of(id);\n+            let ty = if cx.tcx.is_mutable_static(id) {\n+                cx.tcx.mk_mut_ptr(ty)\n+            } else if cx.tcx.is_foreign_item(id) {\n+                cx.tcx.mk_imm_ptr(ty)\n+            } else {\n+                cx.tcx.mk_imm_ref(cx.tcx.lifetimes.re_static, ty)\n+            };\n+            let ptr = cx.tcx.alloc_map.lock().create_static_alloc(id);\n+            let temp_lifetime = cx.region_scope_tree.temporary_scope(expr.hir_id.local_id);\n+            ExprKind::Deref { arg: Expr {\n+                ty,\n+                temp_lifetime,\n+                span: expr.span,\n+                kind: ExprKind::Literal {\n+                    literal: cx.tcx.mk_const(ty::Const {\n+                        ty, val: ConstValue::Scalar(Scalar::Ptr(ptr.into())),\n+                    }),\n+                    user_ty: None,\n+                }\n+            }.to_ref() }\n+        },\n \n         Res::Local(var_hir_id) => convert_var(cx, expr, var_hir_id),\n "}, {"sha": "28794859c564dd39841a3bee28dbfed456dca3df", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a1d04cc1d87d990c12da5c816dee412704b38d7f/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d04cc1d87d990c12da5c816dee412704b38d7f/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=a1d04cc1d87d990c12da5c816dee412704b38d7f", "patch": "@@ -208,9 +208,6 @@ pub enum ExprKind<'tcx> {\n     },\n     /// first argument, used for self in a closure\n     SelfRef,\n-    StaticRef {\n-        id: DefId,\n-    },\n     Borrow {\n         borrow_kind: BorrowKind,\n         arg: ExprRef<'tcx>,"}]}