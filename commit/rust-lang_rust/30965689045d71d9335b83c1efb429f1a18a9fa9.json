{"sha": "30965689045d71d9335b83c1efb429f1a18a9fa9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwOTY1Njg5MDQ1ZDcxZDkzMzViODNjMWVmYjQyOWYxYTE4YTlmYTk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-06-28T18:46:45Z"}, "committer": {"name": "Taiki Endo", "email": "te316e89@gmail.com", "date": "2019-07-27T03:28:04Z"}, "message": "add a bevy of new test cases", "tree": {"sha": "fb6588c7d6c78df386e3d5a61cc1fab53fc1fb4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb6588c7d6c78df386e3d5a61cc1fab53fc1fb4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30965689045d71d9335b83c1efb429f1a18a9fa9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30965689045d71d9335b83c1efb429f1a18a9fa9", "html_url": "https://github.com/rust-lang/rust/commit/30965689045d71d9335b83c1efb429f1a18a9fa9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30965689045d71d9335b83c1efb429f1a18a9fa9/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "taiki-e", "id": 43724913, "node_id": "MDQ6VXNlcjQzNzI0OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/43724913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taiki-e", "html_url": "https://github.com/taiki-e", "followers_url": "https://api.github.com/users/taiki-e/followers", "following_url": "https://api.github.com/users/taiki-e/following{/other_user}", "gists_url": "https://api.github.com/users/taiki-e/gists{/gist_id}", "starred_url": "https://api.github.com/users/taiki-e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taiki-e/subscriptions", "organizations_url": "https://api.github.com/users/taiki-e/orgs", "repos_url": "https://api.github.com/users/taiki-e/repos", "events_url": "https://api.github.com/users/taiki-e/events{/privacy}", "received_events_url": "https://api.github.com/users/taiki-e/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f64404ba34c525d7fdaa1a5dfdf784cdc2806a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f64404ba34c525d7fdaa1a5dfdf784cdc2806a1", "html_url": "https://github.com/rust-lang/rust/commit/2f64404ba34c525d7fdaa1a5dfdf784cdc2806a1"}], "stats": {"total": 831, "additions": 831, "deletions": 0}, "files": [{"sha": "de29a9d5e53bcf33a173e3805c5e9d7064bad03b", "filename": "src/test/ui/self/elision/README.md", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/30965689045d71d9335b83c1efb429f1a18a9fa9/src%2Ftest%2Fui%2Fself%2Felision%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/30965689045d71d9335b83c1efb429f1a18a9fa9/src%2Ftest%2Fui%2Fself%2Felision%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2FREADME.md?ref=30965689045d71d9335b83c1efb429f1a18a9fa9", "patch": "@@ -0,0 +1,45 @@\n+Test cases intended to to document behavior and tryto exhaustively\n+explore the combinations. \n+\n+## Confidence\n+\n+These tests are not yet considered 100% normative, in that some\n+aspects of the current behavior are not desirable. This is expressed\n+in the \"confidence\" field in the following table. Values:\n+\n+| Confidence | Interpretation |\n+| --- | --- |\n+| 100% | this will remain recommended behavior |\n+| 75% | unclear whether we will continue to accept this |\n+| 50% | this will likely be deprecated but remain valid |\n+| 25% | this could change in the future |\n+| 0% | this is definitely bogus and will likely change in the future in *some* way |\n+\n+## Tests\n+\n+| Test file | `Self` type | Pattern | Current elision behavior | Confidence |\n+| --- | --- | --- | --- | --- |\n+| `self.rs` | `Struct` | `Self` | ignore `self` parameter | 100% |\n+| `struct.rs` | `Struct` | `Struct` | ignore `self` parameter | 100% |\n+| `alias.rs` | `Struct` | `Alias` | ignore `self` parameter | 100% |\n+| `ref-self.rs` | `Struct` | `&Self` | take lifetime from `&Self` | 100% |\n+| `ref-mut-self.rs` | `Struct` | `&mut Self` | take lifetime from `&Self` | 100% |\n+| `ref-struct.rs` | `Struct` | `&Struct` | take lifetime from `&Self` | 50% |\n+| `ref-mut-struct.rs` | `Struct` | `&Struct` | take lifetime from `&Self` | 50% |\n+| `ref-alias.rs` | `Struct` | `&Alias` | ignore `Alias` | 0% |\n+| `ref-mut-alias.rs` | `Struct` | `&Alias` | ignore `Alias` | 0% |\n+| `lt-self.rs` | `Struct<'a>` | `Self` | ignore `Self` (and hence `'a`) | 25% |\n+| `lt-struct.rs` | `Struct<'a>` | `Self` | ignore `Self` (and hence `'a`) | 0% |\n+| `lt-alias.rs`   | `Alias<'a>` | `Self` | ignore `Self` (and hence `'a`) | 0% |\n+| `lt-ref-self.rs` | `Struct<'a>` | `&Self` | take lifetime from `&Self` | 75% |\n+\n+In each case, we test the following patterns:\n+\n+- `self: XXX`\n+- `self: Box<XXX>`\n+- `self: Pin<XXX>`\n+- `self: Box<Box<XXX>>`\n+- `self: Box<Pin<XXX>>`\n+\n+In the non-reference cases, `Pin` causes errors so we substitute `Rc`.\n+"}, {"sha": "6f113ec1a4bc9c1989f1f2b875fae101225c0710", "filename": "src/test/ui/self/elision/alias.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/30965689045d71d9335b83c1efb429f1a18a9fa9/src%2Ftest%2Fui%2Fself%2Felision%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30965689045d71d9335b83c1efb429f1a18a9fa9/src%2Ftest%2Fui%2Fself%2Felision%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Falias.rs?ref=30965689045d71d9335b83c1efb429f1a18a9fa9", "patch": "@@ -0,0 +1,32 @@\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::rc::Rc;\n+\n+struct Struct { }\n+\n+type Alias = Struct;\n+\n+impl Struct {\n+    // Test using an alias for `Struct`:\n+\n+    fn alias(self: Alias, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn box_Alias(self: Box<Alias>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn rc_Alias(self: Rc<Alias>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn box_box_Alias(self: Box<Box<Alias>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn box_rc_Alias(self: Box<Rc<Alias>>, f: &u32) -> &u32 {\n+        f\n+    }\n+}"}, {"sha": "a8f2a125b5eb7dcbb857e38177e400496c6c5f53", "filename": "src/test/ui/self/elision/alias.stderr", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/30965689045d71d9335b83c1efb429f1a18a9fa9/src%2Ftest%2Fui%2Fself%2Felision%2Falias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30965689045d71d9335b83c1efb429f1a18a9fa9/src%2Ftest%2Fui%2Fself%2Felision%2Falias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Falias.stderr?ref=30965689045d71d9335b83c1efb429f1a18a9fa9", "patch": "@@ -0,0 +1,7 @@\n+error[E0601]: `main` function not found in crate `alias`\n+   |\n+   = note: consider adding a `main` function to `$DIR/alias.rs`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0601`."}, {"sha": "044682789007dc68688043770b27fcd5ecc9434b", "filename": "src/test/ui/self/elision/lt-alias.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/30965689045d71d9335b83c1efb429f1a18a9fa9/src%2Ftest%2Fui%2Fself%2Felision%2Flt-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30965689045d71d9335b83c1efb429f1a18a9fa9/src%2Ftest%2Fui%2Fself%2Felision%2Flt-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-alias.rs?ref=30965689045d71d9335b83c1efb429f1a18a9fa9", "patch": "@@ -0,0 +1,38 @@\n+// run-pass\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::rc::Rc;\n+\n+struct Struct<'a> { x: &'a u32 }\n+\n+type Alias<'a> = Struct<'a>;\n+\n+impl<'a> Alias<'a> {\n+    fn take_self(self, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn take_Alias(self: Alias<'a>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn take_Box_Alias(self: Box<Alias<'a>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn take_Box_Box_Alias(self: Box<Box<Alias<'a>>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn take_Rc_Alias(self: Rc<Alias<'a>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn take_Box_Rc_Alias(self: Box<Rc<Alias<'a>>>, f: &u32) -> &u32 {\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "8abf2876a5c1b155136dd6fbe39fe872a7661aca", "filename": "src/test/ui/self/elision/lt-ref-self.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/30965689045d71d9335b83c1efb429f1a18a9fa9/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30965689045d71d9335b83c1efb429f1a18a9fa9/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.rs?ref=30965689045d71d9335b83c1efb429f1a18a9fa9", "patch": "@@ -0,0 +1,38 @@\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::pin::Pin;\n+\n+struct Struct<'a> { data: &'a u32 }\n+\n+impl<'a> Struct<'a> {\n+    // Test using `&self` sugar:\n+\n+    fn ref_self(&self, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    // Test using `&Self` explicitly:\n+\n+    fn ref_Self(self: &Self, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "f73b3eddd38215aa5ad164abfff6d337fec839e6", "filename": "src/test/ui/self/elision/lt-ref-self.stderr", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/30965689045d71d9335b83c1efb429f1a18a9fa9/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30965689045d71d9335b83c1efb429f1a18a9fa9/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.stderr?ref=30965689045d71d9335b83c1efb429f1a18a9fa9", "patch": "@@ -0,0 +1,62 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/lt-ref-self.rs:12:9\n+   |\n+LL |     fn ref_self(&self, f: &u32) -> &u32 {\n+   |                           ----     ----\n+   |                           |\n+   |                           this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/lt-ref-self.rs:18:9\n+   |\n+LL |     fn ref_Self(self: &Self, f: &u32) -> &u32 {\n+   |                                 ----     ----\n+   |                                 |\n+   |                                 this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/lt-ref-self.rs:22:9\n+   |\n+LL |     fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n+   |                                          ----     ----\n+   |                                          |\n+   |                                          this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/lt-ref-self.rs:26:9\n+   |\n+LL |     fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n+   |                                          ----     ----\n+   |                                          |\n+   |                                          this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/lt-ref-self.rs:30:9\n+   |\n+LL |     fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n+   |                                                   ----     ----\n+   |                                                   |\n+   |                                                   this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/lt-ref-self.rs:34:9\n+   |\n+LL |     fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n+   |                                               ----     ----\n+   |                                               |\n+   |                                               this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "c33df08e0ee4832f899c37755f811c5fa290c1fb", "filename": "src/test/ui/self/elision/lt-self.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/30965689045d71d9335b83c1efb429f1a18a9fa9/src%2Ftest%2Fui%2Fself%2Felision%2Flt-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30965689045d71d9335b83c1efb429f1a18a9fa9/src%2Ftest%2Fui%2Fself%2Felision%2Flt-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-self.rs?ref=30965689045d71d9335b83c1efb429f1a18a9fa9", "patch": "@@ -0,0 +1,49 @@\n+// run-pass\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::pin::Pin;\n+use std::rc::Rc;\n+\n+struct Struct<'a> {\n+    x: &'a u32\n+}\n+\n+impl<'a> Struct<'a> {\n+    fn take_self(self, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn take_Self(self: Self, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn take_Box_Self(self: Box<Self>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn take_Box_Box_Self(self: Box<Box<Self>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn take_Rc_Self(self: Rc<Self>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn take_Box_Rc_Self(self: Box<Rc<Self>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    // N/A\n+    //fn take_Pin_Self(self: Pin<Self>, f: &u32) -> &u32 {\n+    //    f\n+    //}\n+\n+    // N/A\n+    //fn take_Box_Pin_Self(self: Box<Pin<Self>>, f: &u32) -> &u32 {\n+    //    f\n+    //}\n+}\n+\n+fn main() { }"}, {"sha": "79ffc8fd6f4bdf9cd9319e1c0edffad59af60201", "filename": "src/test/ui/self/elision/lt-struct.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/30965689045d71d9335b83c1efb429f1a18a9fa9/src%2Ftest%2Fui%2Fself%2Felision%2Flt-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30965689045d71d9335b83c1efb429f1a18a9fa9/src%2Ftest%2Fui%2Fself%2Felision%2Flt-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-struct.rs?ref=30965689045d71d9335b83c1efb429f1a18a9fa9", "patch": "@@ -0,0 +1,36 @@\n+// run-pass\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::rc::Rc;\n+\n+struct Struct<'a> { x: &'a u32 }\n+\n+impl<'a> Struct<'a> {\n+    fn take_self(self, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn take_Struct(self: Struct<'a>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn take_Box_Struct(self: Box<Struct<'a>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn take_Box_Box_Struct(self: Box<Box<Struct<'a>>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn take_Rc_Struct(self: Rc<Struct<'a>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn take_Box_Rc_Struct(self: Box<Rc<Struct<'a>>>, f: &u32) -> &u32 {\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "23bfe8fb029f6f773234aed49bd80ab04acbc63b", "filename": "src/test/ui/self/elision/ref-alias.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/30965689045d71d9335b83c1efb429f1a18a9fa9/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30965689045d71d9335b83c1efb429f1a18a9fa9/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias.rs?ref=30965689045d71d9335b83c1efb429f1a18a9fa9", "patch": "@@ -0,0 +1,39 @@\n+// run-pass\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::pin::Pin;\n+\n+struct Struct { }\n+\n+type Alias = Struct;\n+\n+impl Struct {\n+    // Test using an alias for `Struct`:\n+    //\n+    // FIXME. We currently fail to recognize this as the self type, which\n+    // feels like a bug.\n+\n+    fn ref_Alias(self: &Alias, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn box_ref_Alias(self: Box<&Alias>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn pin_ref_Alias(self: Pin<&Alias>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn box_box_ref_Alias(self: Box<Box<&Alias>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn box_pin_ref_Alias(self: Box<Pin<&Alias>>, f: &u32) -> &u32 {\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "abb412965768d4c03c4f94fa993057b1f9e3a4e3", "filename": "src/test/ui/self/elision/ref-mut-alias.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/30965689045d71d9335b83c1efb429f1a18a9fa9/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30965689045d71d9335b83c1efb429f1a18a9fa9/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias.rs?ref=30965689045d71d9335b83c1efb429f1a18a9fa9", "patch": "@@ -0,0 +1,32 @@\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::pin::Pin;\n+\n+struct Struct { }\n+\n+type Alias = Struct;\n+\n+impl Struct {\n+    // Test using an alias for `Struct`:\n+\n+    fn ref_Alias(self: &mut Alias, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn box_ref_Alias(self: Box<&mut Alias>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn pin_ref_Alias(self: Pin<&mut Alias>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn box_box_ref_Alias(self: Box<Box<&mut Alias>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn box_pin_ref_Alias(self: Box<Pin<&mut Alias>>, f: &u32) -> &u32 {\n+        f\n+    }\n+}"}, {"sha": "cf202ccaa5d8852c76daf62c8987405cd007613a", "filename": "src/test/ui/self/elision/ref-mut-alias.stderr", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/30965689045d71d9335b83c1efb429f1a18a9fa9/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30965689045d71d9335b83c1efb429f1a18a9fa9/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias.stderr?ref=30965689045d71d9335b83c1efb429f1a18a9fa9", "patch": "@@ -0,0 +1,7 @@\n+error[E0601]: `main` function not found in crate `ref_mut_alias`\n+   |\n+   = note: consider adding a `main` function to `$DIR/ref-mut-alias.rs`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0601`."}, {"sha": "6705ca9e305988710471a498c798502410755718", "filename": "src/test/ui/self/elision/ref-mut-self.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/30965689045d71d9335b83c1efb429f1a18a9fa9/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30965689045d71d9335b83c1efb429f1a18a9fa9/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.rs?ref=30965689045d71d9335b83c1efb429f1a18a9fa9", "patch": "@@ -0,0 +1,40 @@\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::pin::Pin;\n+\n+struct Struct { }\n+\n+type Alias = Struct;\n+\n+impl Struct {\n+    // Test using `&mut self` sugar:\n+\n+    fn ref_self(&mut self, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    // Test using `&mut Self` explicitly:\n+\n+    fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "05dc5b774c83281fd534e4d02a4f30716d9235ed", "filename": "src/test/ui/self/elision/ref-mut-self.stderr", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/30965689045d71d9335b83c1efb429f1a18a9fa9/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30965689045d71d9335b83c1efb429f1a18a9fa9/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.stderr?ref=30965689045d71d9335b83c1efb429f1a18a9fa9", "patch": "@@ -0,0 +1,62 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-mut-self.rs:14:9\n+   |\n+LL |     fn ref_self(&mut self, f: &u32) -> &u32 {\n+   |                               ----     ----\n+   |                               |\n+   |                               this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-mut-self.rs:20:9\n+   |\n+LL |     fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n+   |                                     ----     ----\n+   |                                     |\n+   |                                     this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-mut-self.rs:24:9\n+   |\n+LL |     fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n+   |                                              ----     ----\n+   |                                              |\n+   |                                              this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-mut-self.rs:28:9\n+   |\n+LL |     fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n+   |                                              ----     ----\n+   |                                              |\n+   |                                              this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-mut-self.rs:32:9\n+   |\n+LL |     fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n+   |                                                       ----     ----\n+   |                                                       |\n+   |                                                       this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-mut-self.rs:36:9\n+   |\n+LL |     fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n+   |                                                       ----     ----\n+   |                                                       |\n+   |                                                       this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "f063728e247515a236ef33887f9f23ddb4d468d5", "filename": "src/test/ui/self/elision/ref-mut-struct.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/30965689045d71d9335b83c1efb429f1a18a9fa9/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30965689045d71d9335b83c1efb429f1a18a9fa9/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.rs?ref=30965689045d71d9335b83c1efb429f1a18a9fa9", "patch": "@@ -0,0 +1,34 @@\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::pin::Pin;\n+\n+struct Struct { }\n+\n+type Alias = Struct;\n+\n+impl Struct {\n+    // Test using `&mut Struct` explicitly:\n+\n+    fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "88dfb17892a2fb84752e44299b9e9c490a6a3d30", "filename": "src/test/ui/self/elision/ref-mut-struct.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/30965689045d71d9335b83c1efb429f1a18a9fa9/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30965689045d71d9335b83c1efb429f1a18a9fa9/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.stderr?ref=30965689045d71d9335b83c1efb429f1a18a9fa9", "patch": "@@ -0,0 +1,52 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-mut-struct.rs:14:9\n+   |\n+LL |     fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n+   |                                         ----     ----\n+   |                                         |\n+   |                                         this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-mut-struct.rs:18:9\n+   |\n+LL |     fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n+   |                                                  ----     ----\n+   |                                                  |\n+   |                                                  this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-mut-struct.rs:22:9\n+   |\n+LL |     fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n+   |                                                  ----     ----\n+   |                                                  |\n+   |                                                  this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-mut-struct.rs:26:9\n+   |\n+LL |     fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n+   |                                                           ----     ----\n+   |                                                           |\n+   |                                                           this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-mut-struct.rs:30:9\n+   |\n+LL |     fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n+   |                                                           ----     ----\n+   |                                                           |\n+   |                                                           this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "af10e10d3111c02c6201b0f651f527af368f3866", "filename": "src/test/ui/self/elision/ref-self.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/30965689045d71d9335b83c1efb429f1a18a9fa9/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30965689045d71d9335b83c1efb429f1a18a9fa9/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self.rs?ref=30965689045d71d9335b83c1efb429f1a18a9fa9", "patch": "@@ -0,0 +1,40 @@\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::pin::Pin;\n+\n+struct Struct { }\n+\n+type Alias = Struct;\n+\n+impl Struct {\n+    // Test using `&self` sugar:\n+\n+    fn ref_self(&self, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    // Test using `&Self` explicitly:\n+\n+    fn ref_Self(self: &Self, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "10131cc5935a558b69410c3a22172b0dc4646e92", "filename": "src/test/ui/self/elision/ref-self.stderr", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/30965689045d71d9335b83c1efb429f1a18a9fa9/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30965689045d71d9335b83c1efb429f1a18a9fa9/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self.stderr?ref=30965689045d71d9335b83c1efb429f1a18a9fa9", "patch": "@@ -0,0 +1,62 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-self.rs:14:9\n+   |\n+LL |     fn ref_self(&self, f: &u32) -> &u32 {\n+   |                           ----     ----\n+   |                           |\n+   |                           this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-self.rs:20:9\n+   |\n+LL |     fn ref_Self(self: &Self, f: &u32) -> &u32 {\n+   |                                 ----     ----\n+   |                                 |\n+   |                                 this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-self.rs:24:9\n+   |\n+LL |     fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n+   |                                          ----     ----\n+   |                                          |\n+   |                                          this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-self.rs:28:9\n+   |\n+LL |     fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n+   |                                          ----     ----\n+   |                                          |\n+   |                                          this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-self.rs:32:9\n+   |\n+LL |     fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n+   |                                                   ----     ----\n+   |                                                   |\n+   |                                                   this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-self.rs:36:9\n+   |\n+LL |     fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n+   |                                                   ----     ----\n+   |                                                   |\n+   |                                                   this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "28afe17c234672f28187b5618255d8a6047667c9", "filename": "src/test/ui/self/elision/ref-struct.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/30965689045d71d9335b83c1efb429f1a18a9fa9/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30965689045d71d9335b83c1efb429f1a18a9fa9/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.rs?ref=30965689045d71d9335b83c1efb429f1a18a9fa9", "patch": "@@ -0,0 +1,34 @@\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::pin::Pin;\n+\n+struct Struct { }\n+\n+type Alias = Struct;\n+\n+impl Struct {\n+    // Test using `&Struct` explicitly:\n+\n+    fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "8a17ab13d5759bc984105ee4d17f044ad9bffb2c", "filename": "src/test/ui/self/elision/ref-struct.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/30965689045d71d9335b83c1efb429f1a18a9fa9/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30965689045d71d9335b83c1efb429f1a18a9fa9/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.stderr?ref=30965689045d71d9335b83c1efb429f1a18a9fa9", "patch": "@@ -0,0 +1,52 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-struct.rs:14:9\n+   |\n+LL |     fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n+   |                                     ----     ----\n+   |                                     |\n+   |                                     this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-struct.rs:18:9\n+   |\n+LL |     fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n+   |                                              ----     ----\n+   |                                              |\n+   |                                              this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-struct.rs:22:9\n+   |\n+LL |     fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n+   |                                              ----     ----\n+   |                                              |\n+   |                                              this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-struct.rs:26:9\n+   |\n+LL |     fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n+   |                                                       ----     ----\n+   |                                                       |\n+   |                                                       this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-struct.rs:30:9\n+   |\n+LL |     fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n+   |                                                   ----     ----\n+   |                                                   |\n+   |                                                   this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "cfd1e79e975c3f35d4a7f24b9b7d9e0dce589cdf", "filename": "src/test/ui/self/elision/self.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/30965689045d71d9335b83c1efb429f1a18a9fa9/src%2Ftest%2Fui%2Fself%2Felision%2Fself.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30965689045d71d9335b83c1efb429f1a18a9fa9/src%2Ftest%2Fui%2Fself%2Felision%2Fself.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fself.rs?ref=30965689045d71d9335b83c1efb429f1a18a9fa9", "patch": "@@ -0,0 +1,36 @@\n+// run-pass\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::rc::Rc;\n+\n+struct Struct { }\n+\n+impl Struct {\n+    fn take_self(self, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn take_Self(self: Self, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn take_Box_Self(self: Box<Self>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn take_Box_Box_Self(self: Box<Box<Self>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn take_Rc_Self(self: Rc<Self>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    fn take_Box_Rc_Self(self: Box<Rc<Self>>, f: &u32) -> &u32 {\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "efdeb121fed8a0eb357c1607361df632943809ff", "filename": "src/test/ui/self/elision/struct.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/30965689045d71d9335b83c1efb429f1a18a9fa9/src%2Ftest%2Fui%2Fself%2Felision%2Fstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30965689045d71d9335b83c1efb429f1a18a9fa9/src%2Ftest%2Fui%2Fself%2Felision%2Fstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fstruct.rs?ref=30965689045d71d9335b83c1efb429f1a18a9fa9", "patch": "@@ -0,0 +1,34 @@\n+// run-pass\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::rc::Rc;\n+\n+struct Struct { }\n+\n+impl Struct {\n+    // Test using `&mut Struct` explicitly:\n+\n+    fn ref_Struct(self: Struct, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    fn box_Struct(self: Box<Struct>, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    fn rc_Struct(self: Rc<Struct>, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    fn box_box_Struct(self: Box<Box<Struct>>, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+\n+    fn box_rc_Struct(self: Box<Rc<Struct>>, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n+    }\n+}\n+\n+fn main() { }"}]}