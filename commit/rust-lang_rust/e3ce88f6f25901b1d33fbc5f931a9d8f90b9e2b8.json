{"sha": "e3ce88f6f25901b1d33fbc5f931a9d8f90b9e2b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzY2U4OGY2ZjI1OTAxYjFkMzNmYmM1ZjkzMWE5ZDhmOTBiOWUyYjg=", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2021-06-18T11:40:51Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2021-06-18T11:40:51Z"}, "message": "Minor clippy perf fixes", "tree": {"sha": "c6876d5f81bafe5d405f7ab72ff61e4a748a3bc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6876d5f81bafe5d405f7ab72ff61e4a748a3bc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3ce88f6f25901b1d33fbc5f931a9d8f90b9e2b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3ce88f6f25901b1d33fbc5f931a9d8f90b9e2b8", "html_url": "https://github.com/rust-lang/rust/commit/e3ce88f6f25901b1d33fbc5f931a9d8f90b9e2b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3ce88f6f25901b1d33fbc5f931a9d8f90b9e2b8/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d863ccea96c6c3256fad12807a0eedbfccd8294", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d863ccea96c6c3256fad12807a0eedbfccd8294", "html_url": "https://github.com/rust-lang/rust/commit/0d863ccea96c6c3256fad12807a0eedbfccd8294"}], "stats": {"total": 43, "additions": 22, "deletions": 21}, "files": [{"sha": "49c5730877bc9c32f9607b7eb03218dc47ab1048", "filename": "crates/hir_def/src/resolver.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e3ce88f6f25901b1d33fbc5f931a9d8f90b9e2b8/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3ce88f6f25901b1d33fbc5f931a9d8f90b9e2b8/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fresolver.rs?ref=e3ce88f6f25901b1d33fbc5f931a9d8f90b9e2b8", "patch": "@@ -640,8 +640,7 @@ pub trait HasResolver: Copy {\n impl HasResolver for ModuleId {\n     fn resolver(self, db: &dyn DefDatabase) -> Resolver {\n         let mut def_map = self.def_map(db);\n-        let mut modules = Vec::new();\n-        modules.push((def_map.clone(), self.local_id));\n+        let mut modules = vec![(def_map.clone(), self.local_id)];\n         while let Some(parent) = def_map.parent() {\n             def_map = parent.def_map(db);\n             modules.push((def_map.clone(), parent.local_id));"}, {"sha": "4c83a2efe370a591577a56bee110d5ee5ed0535a", "filename": "crates/hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3ce88f6f25901b1d33fbc5f931a9d8f90b9e2b8/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3ce88f6f25901b1d33fbc5f931a9d8f90b9e2b8/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=e3ce88f6f25901b1d33fbc5f931a9d8f90b9e2b8", "patch": "@@ -202,7 +202,7 @@ fn assert_expand(\n \n     let arg_tts = args.into_iter().flat_map(|arg| {\n         quote! { &(#arg), }\n-    }.token_trees).collect::<Vec<_>>();\n+    }.token_trees);\n \n     let expanded = quote! {\n         { { (##arg_tts); } }\n@@ -254,7 +254,7 @@ fn format_args_expand(\n     let _format_string = args.remove(0);\n     let arg_tts = args.into_iter().flat_map(|arg| {\n         quote! { std::fmt::ArgumentV1::new(&(#arg), std::fmt::Display::fmt), }\n-    }.token_trees).collect::<Vec<_>>();\n+    }.token_trees);\n     let expanded = quote! {\n         std::fmt::Arguments::new_v1(&[], &[##arg_tts])\n     };"}, {"sha": "dc8f20138fa654c88b6acef022f85625ddd7a26a", "filename": "crates/hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3ce88f6f25901b1d33fbc5f931a9d8f90b9e2b8/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3ce88f6f25901b1d33fbc5f931a9d8f90b9e2b8/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=e3ce88f6f25901b1d33fbc5f931a9d8f90b9e2b8", "patch": "@@ -56,7 +56,7 @@ impl BodyValidationDiagnostic {\n     pub fn collect(db: &dyn HirDatabase, owner: DefWithBodyId) -> Vec<BodyValidationDiagnostic> {\n         let _p = profile::span(\"BodyValidationDiagnostic::collect\");\n         let infer = db.infer(owner);\n-        let mut validator = ExprValidator::new(owner, infer.clone());\n+        let mut validator = ExprValidator::new(owner, infer);\n         validator.validate_body(db);\n         validator.diagnostics\n     }"}, {"sha": "c3a5b979f71768c69932a6c70c0462af205c46df", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e3ce88f6f25901b1d33fbc5f931a9d8f90b9e2b8/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3ce88f6f25901b1d33fbc5f931a9d8f90b9e2b8/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=e3ce88f6f25901b1d33fbc5f931a9d8f90b9e2b8", "patch": "@@ -367,7 +367,7 @@ impl<'a> InferenceContext<'a> {\n             Expr::Path(p) => {\n                 // FIXME this could be more efficient...\n                 let resolver = resolver_for_expr(self.db.upcast(), self.owner, tgt_expr);\n-                self.infer_path(&resolver, p, tgt_expr.into()).unwrap_or(self.err_ty())\n+                self.infer_path(&resolver, p, tgt_expr.into()).unwrap_or_else(|| self.err_ty())\n             }\n             Expr::Continue { .. } => TyKind::Never.intern(&Interner),\n             Expr::Break { expr, label } => {\n@@ -511,7 +511,7 @@ impl<'a> InferenceContext<'a> {\n                         _ => None,\n                     }\n                 })\n-                .unwrap_or(self.err_ty());\n+                .unwrap_or_else(|| self.err_ty());\n                 let ty = self.insert_type_vars(ty);\n                 self.normalize_associated_types_in(ty)\n             }\n@@ -818,8 +818,10 @@ impl<'a> InferenceContext<'a> {\n         for stmt in statements {\n             match stmt {\n                 Statement::Let { pat, type_ref, initializer } => {\n-                    let decl_ty =\n-                        type_ref.as_ref().map(|tr| self.make_ty(tr)).unwrap_or(self.err_ty());\n+                    let decl_ty = type_ref\n+                        .as_ref()\n+                        .map(|tr| self.make_ty(tr))\n+                        .unwrap_or_else(|| self.err_ty());\n \n                     // Always use the declared type when specified\n                     let mut ty = decl_ty.clone();"}, {"sha": "c79ed91eacf962b17f2113d35e8806defcfc0121", "filename": "crates/hir_ty/src/infer/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3ce88f6f25901b1d33fbc5f931a9d8f90b9e2b8/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3ce88f6f25901b1d33fbc5f931a9d8f90b9e2b8/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=e3ce88f6f25901b1d33fbc5f931a9d8f90b9e2b8", "patch": "@@ -192,7 +192,7 @@ impl<'a> InferenceContext<'a> {\n             Pat::Path(path) => {\n                 // FIXME use correct resolver for the surrounding expression\n                 let resolver = self.resolver.clone();\n-                self.infer_path(&resolver, path, pat.into()).unwrap_or(self.err_ty())\n+                self.infer_path(&resolver, path, pat.into()).unwrap_or_else(|| self.err_ty())\n             }\n             Pat::Bind { mode, name: _, subpat } => {\n                 let mode = if mode == &BindingAnnotation::Unannotated {"}, {"sha": "ea03b6a6c5ed40c51ab6584614541d35089061ba", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3ce88f6f25901b1d33fbc5f931a9d8f90b9e2b8/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3ce88f6f25901b1d33fbc5f931a9d8f90b9e2b8/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=e3ce88f6f25901b1d33fbc5f931a9d8f90b9e2b8", "patch": "@@ -562,7 +562,7 @@ impl<'a> TyLoweringContext<'a> {\n                 },\n             );\n \n-            ty.unwrap_or(TyKind::Error.intern(&Interner))\n+            ty.unwrap_or_else(|| TyKind::Error.intern(&Interner))\n         } else {\n             TyKind::Error.intern(&Interner)\n         }"}, {"sha": "43cffefe50695c169f862ef597000547c5f74eef", "filename": "crates/ide/src/goto_type_definition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3ce88f6f25901b1d33fbc5f931a9d8f90b9e2b8/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3ce88f6f25901b1d33fbc5f931a9d8f90b9e2b8/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs?ref=e3ce88f6f25901b1d33fbc5f931a9d8f90b9e2b8", "patch": "@@ -25,7 +25,7 @@ pub(crate) fn goto_type_definition(\n     let token: SyntaxToken = pick_best(file.syntax().token_at_offset(position.offset))?;\n     let token: SyntaxToken = sema.descend_into_macros(token);\n \n-    let (ty, node) = sema.token_ancestors_with_macros(token.clone()).find_map(|node| {\n+    let (ty, node) = sema.token_ancestors_with_macros(token).find_map(|node| {\n         let ty = match_ast! {\n             match node {\n                 ast::Expr(it) => sema.type_of_expr(&it)?,"}, {"sha": "5866d8974ef3e9d9d9c00d4ce57605294fa2b700", "filename": "crates/ide_assists/src/handlers/remove_dbg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3ce88f6f25901b1d33fbc5f931a9d8f90b9e2b8/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3ce88f6f25901b1d33fbc5f931a9d8f90b9e2b8/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs?ref=e3ce88f6f25901b1d33fbc5f931a9d8f90b9e2b8", "patch": "@@ -35,14 +35,14 @@ pub(crate) fn remove_dbg(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n                             .prev_sibling_or_token()\n                             .and_then(whitespace_start)\n                             .map(|start| TextRange::new(start, macro_call.syntax().text_range().end()))\n-                            .unwrap_or(macro_call.syntax().text_range())\n+                            .unwrap_or_else(|| macro_call.syntax().text_range())\n                     },\n                     ast::ExprStmt(it) => {\n                         let start = it\n                             .syntax()\n                             .prev_sibling_or_token()\n                             .and_then(whitespace_start)\n-                            .unwrap_or(it.syntax().text_range().start());\n+                            .unwrap_or_else(|| it.syntax().text_range().start());\n                         let end = it.syntax().text_range().end();\n \n                         TextRange::new(start, end)"}, {"sha": "434decc7e5191b8805292f1fbcd5eb95f71e5e87", "filename": "crates/proc_macro_api/src/version.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e3ce88f6f25901b1d33fbc5f931a9d8f90b9e2b8/crates%2Fproc_macro_api%2Fsrc%2Fversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3ce88f6f25901b1d33fbc5f931a9d8f90b9e2b8/crates%2Fproc_macro_api%2Fsrc%2Fversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Fversion.rs?ref=e3ce88f6f25901b1d33fbc5f931a9d8f90b9e2b8", "patch": "@@ -28,23 +28,23 @@ pub fn read_dylib_info(dylib_path: &Path) -> io::Result<RustCInfo> {\n \n     let ver_str = read_version(dylib_path)?;\n     let mut items = ver_str.split_whitespace();\n-    let tag = items.next().ok_or(err!(\"version format error\"))?;\n+    let tag = items.next().ok_or_else(|| err!(\"version format error\"))?;\n     if tag != \"rustc\" {\n         return Err(err!(\"version format error (No rustc tag)\"));\n     }\n \n-    let version_part = items.next().ok_or(err!(\"no version string\"))?;\n+    let version_part = items.next().ok_or_else(|| err!(\"no version string\"))?;\n     let mut version_parts = version_part.split('-');\n-    let version = version_parts.next().ok_or(err!(\"no version\"))?;\n+    let version = version_parts.next().ok_or_else(|| err!(\"no version\"))?;\n     let channel = version_parts.next().unwrap_or_default().to_string();\n \n-    let commit = items.next().ok_or(err!(\"no commit info\"))?;\n+    let commit = items.next().ok_or_else(|| err!(\"no commit info\"))?;\n     // remove (\n     if commit.len() == 0 {\n         return Err(err!(\"commit format error\"));\n     }\n     let commit = commit[1..].to_string();\n-    let date = items.next().ok_or(err!(\"no date info\"))?;\n+    let date = items.next().ok_or_else(|| err!(\"no date info\"))?;\n     // remove )\n     if date.len() == 0 {\n         return Err(err!(\"date format error\"));"}, {"sha": "a76f25a8cdc69806596a26d6348cd3ac9692f298", "filename": "crates/project_model/src/build_data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3ce88f6f25901b1d33fbc5f931a9d8f90b9e2b8/crates%2Fproject_model%2Fsrc%2Fbuild_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3ce88f6f25901b1d33fbc5f931a9d8f90b9e2b8/crates%2Fproject_model%2Fsrc%2Fbuild_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fbuild_data.rs?ref=e3ce88f6f25901b1d33fbc5f931a9d8f90b9e2b8", "patch": "@@ -187,7 +187,7 @@ impl WorkspaceBuildData {\n                 let mut deserializer = serde_json::Deserializer::from_str(line);\n                 deserializer.disable_recursion_limit();\n                 let message = Message::deserialize(&mut deserializer)\n-                    .unwrap_or(Message::TextLine(line.to_string()));\n+                    .unwrap_or_else(|_| Message::TextLine(line.to_string()));\n \n                 match message {\n                     Message::BuildScriptExecuted(BuildScript {"}, {"sha": "44656267fed5ea0442c1cfb9e8c09be97d40d1c4", "filename": "crates/test_utils/src/fixture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3ce88f6f25901b1d33fbc5f931a9d8f90b9e2b8/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3ce88f6f25901b1d33fbc5f931a9d8f90b9e2b8/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Ffixture.rs?ref=e3ce88f6f25901b1d33fbc5f931a9d8f90b9e2b8", "patch": "@@ -131,7 +131,7 @@ impl Fixture {\n                 res.push(meta)\n             } else {\n                 if line.starts_with(\"// \")\n-                    && line.contains(\":\")\n+                    && line.contains(':')\n                     && !line.contains(\"::\")\n                     && line.chars().all(|it| !it.is_uppercase())\n                 {"}]}