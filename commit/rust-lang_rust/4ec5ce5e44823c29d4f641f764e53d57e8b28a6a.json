{"sha": "4ec5ce5e44823c29d4f641f764e53d57e8b28a6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlYzVjZTVlNDQ4MjNjMjlkNGY2NDFmNzY0ZTUzZDU3ZThiMjhhNmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-12T21:31:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-12T21:31:54Z"}, "message": "Auto merge of #33282 - alexcrichton:rustbuild-crate-tests, r=brson\n\nrustbuild: Add support for crate tests + doctests\n\nThis commit adds support to rustbuild to run crate unit tests (those defined by\n`#[test]`) as well as documentation tests. All tests are powered by `cargo test`\nunder the hood.\n\nEach step requires the `libtest` library is built for that corresponding stage.\nIdeally the `test` crate would be a dev-dependency, but for now it's just easier\nto ensure that we sequence everything in the right order.\n\nCurrently no filtering is implemented, so there's not actually a method of\ntesting *only* libstd or *only* libcore, but rather entire swaths of crates are\ntested all at once.\n\nA few points of note here are:\n\n* The `coretest` and `collectionstest` crates are just listed as `[[test]]`\n  entires for `cargo test` to naturally pick up. This mean that `cargo test -p\n  core` actually runs all the tests for libcore.\n* Libraries that aren't tested all mention `test = false` in their `Cargo.toml`\n* Crates aren't currently allowed to have dev-dependencies due to\n  rust-lang/cargo#860, but we can likely alleviate this restriction once\n  workspaces are implemented.\n\ncc #31590", "tree": {"sha": "140b6c4e9f7a05a813227174e754d3f92dee74fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/140b6c4e9f7a05a813227174e754d3f92dee74fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a", "html_url": "https://github.com/rust-lang/rust/commit/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e88defe71806ad190588e168e513bc1098f7c9fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/e88defe71806ad190588e168e513bc1098f7c9fb", "html_url": "https://github.com/rust-lang/rust/commit/e88defe71806ad190588e168e513bc1098f7c9fb"}, {"sha": "bb9062a2967a5b772788aa14f742d8927ac040ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb9062a2967a5b772788aa14f742d8927ac040ba", "html_url": "https://github.com/rust-lang/rust/commit/bb9062a2967a5b772788aa14f742d8927ac040ba"}], "stats": {"total": 208, "additions": 182, "deletions": 26}, "files": [{"sha": "f12b0dadeacc1ce9389a0de629436809211ef57d", "filename": "src/bootstrap/build/check.rs", "status": "modified", "additions": 77, "deletions": 2, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Fbootstrap%2Fbuild%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Fbootstrap%2Fbuild%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fcheck.rs?ref=4ec5ce5e44823c29d4f641f764e53d57e8b28a6a", "patch": "@@ -13,13 +13,16 @@\n //! This file implements the various regression test suites that we execute on\n //! our CI.\n \n-use std::fs;\n+use std::env;\n+use std::fs::{self, File};\n+use std::io::prelude::*;\n use std::path::{PathBuf, Path};\n use std::process::Command;\n \n use build_helper::output;\n+use bootstrap::{dylib_path, dylib_path_var};\n \n-use build::{Build, Compiler};\n+use build::{Build, Compiler, Mode};\n \n /// Runs the `linkchecker` tool as compiled in `stage` by the `host` compiler.\n ///\n@@ -222,3 +225,75 @@ fn markdown_test(build: &Build, compiler: &Compiler, markdown: &Path) {\n     cmd.arg(\"--test-args\").arg(build.flags.args.join(\" \"));\n     build.run(&mut cmd);\n }\n+\n+/// Run all unit tests plus documentation tests for an entire crate DAG defined\n+/// by a `Cargo.toml`\n+///\n+/// This is what runs tests for crates like the standard library, compiler, etc.\n+/// It essentially is the driver for running `cargo test`.\n+///\n+/// Currently this runs all tests for a DAG by passing a bunch of `-p foo`\n+/// arguments, and those arguments are discovered from `Cargo.lock`.\n+pub fn krate(build: &Build,\n+             compiler: &Compiler,\n+             target: &str,\n+             mode: Mode) {\n+    let (name, path, features) = match mode {\n+        Mode::Libstd => (\"libstd\", \"src/rustc/std_shim\", build.std_features()),\n+        Mode::Libtest => (\"libtest\", \"src/rustc/test_shim\", String::new()),\n+        Mode::Librustc => (\"librustc\", \"src/rustc\", build.rustc_features()),\n+        _ => panic!(\"can only test libraries\"),\n+    };\n+    println!(\"Testing {} stage{} ({} -> {})\", name, compiler.stage,\n+             compiler.host, target);\n+\n+    // Build up the base `cargo test` command.\n+    let mut cargo = build.cargo(compiler, mode, target, \"test\");\n+    cargo.arg(\"--manifest-path\")\n+         .arg(build.src.join(path).join(\"Cargo.toml\"))\n+         .arg(\"--features\").arg(features);\n+\n+    // Generate a list of `-p` arguments to pass to the `cargo test` invocation\n+    // by crawling the corresponding Cargo.lock file.\n+    let lockfile = build.src.join(path).join(\"Cargo.lock\");\n+    let mut contents = String::new();\n+    t!(t!(File::open(&lockfile)).read_to_string(&mut contents));\n+    let mut lines = contents.lines();\n+    while let Some(line) = lines.next() {\n+        let prefix = \"name = \\\"\";\n+        if !line.starts_with(prefix) {\n+            continue\n+        }\n+        lines.next(); // skip `version = ...`\n+\n+        // skip crates.io or otherwise non-path crates\n+        if let Some(line) = lines.next() {\n+            if line.starts_with(\"source\") {\n+                continue\n+            }\n+        }\n+\n+        let crate_name = &line[prefix.len()..line.len() - 1];\n+\n+        // Right now jemalloc is our only target-specific crate in the sense\n+        // that it's not present on all platforms. Custom skip it here for now,\n+        // but if we add more this probably wants to get more generalized.\n+        if crate_name.contains(\"jemalloc\") {\n+            continue\n+        }\n+\n+        cargo.arg(\"-p\").arg(crate_name);\n+    }\n+\n+    // The tests are going to run with the *target* libraries, so we need to\n+    // ensure that those libraries show up in the LD_LIBRARY_PATH equivalent.\n+    //\n+    // Note that to run the compiler we need to run with the *host* libraries,\n+    // but our wrapper scripts arrange for that to be the case anyway.\n+    let mut dylib_path = dylib_path();\n+    dylib_path.insert(0, build.sysroot_libdir(compiler, target));\n+    cargo.env(dylib_path_var(), env::join_paths(&dylib_path).unwrap());\n+    cargo.args(&build.flags.args);\n+\n+    build.run(&mut cargo);\n+}"}, {"sha": "44f161fb487f43a5ea8fecac0f5e610f6cc370da", "filename": "src/bootstrap/build/mod.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Fbootstrap%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Fbootstrap%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fmod.rs?ref=4ec5ce5e44823c29d4f641f764e53d57e8b28a6a", "patch": "@@ -380,6 +380,15 @@ impl Build {\n                     check::compiletest(self, &compiler, target.target,\n                                        \"run-make\", \"run-make\")\n                 }\n+                CheckCrateStd { compiler } => {\n+                    check::krate(self, &compiler, target.target, Mode::Libstd)\n+                }\n+                CheckCrateTest { compiler } => {\n+                    check::krate(self, &compiler, target.target, Mode::Libtest)\n+                }\n+                CheckCrateRustc { compiler } => {\n+                    check::krate(self, &compiler, target.target, Mode::Librustc)\n+                }\n \n                 DistDocs { stage } => dist::docs(self, stage, target.target),\n                 DistMingw { _dummy } => dist::mingw(self, target.target),\n@@ -485,6 +494,7 @@ impl Build {\n                   self.config.rust_debug_assertions.to_string())\n              .env(\"RUSTC_SNAPSHOT\", &self.rustc)\n              .env(\"RUSTC_SYSROOT\", self.sysroot(compiler))\n+             .env(\"RUSTC_LIBDIR\", self.rustc_libdir(compiler))\n              .env(\"RUSTC_SNAPSHOT_LIBDIR\", self.rustc_snapshot_libdir())\n              .env(\"RUSTC_RPATH\", self.config.rust_rpath.to_string())\n              .env(\"RUSTDOC\", self.out.join(\"bootstrap/debug/rustdoc\"))\n@@ -520,7 +530,6 @@ impl Build {\n         if self.config.rust_optimize {\n             cargo.arg(\"--release\");\n         }\n-        self.add_rustc_lib_path(compiler, &mut cargo);\n         return cargo\n     }\n "}, {"sha": "c494d965a19c3f0d5aad082cba4adc3dbdb1c6b6", "filename": "src/bootstrap/build/step.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Fbootstrap%2Fbuild%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Fbootstrap%2Fbuild%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fstep.rs?ref=4ec5ce5e44823c29d4f641f764e53d57e8b28a6a", "patch": "@@ -120,6 +120,9 @@ macro_rules! targets {\n             (check_docs, CheckDocs { compiler: Compiler<'a> }),\n             (check_error_index, CheckErrorIndex { compiler: Compiler<'a> }),\n             (check_rmake, CheckRMake { compiler: Compiler<'a> }),\n+            (check_crate_std, CheckCrateStd { compiler: Compiler<'a> }),\n+            (check_crate_test, CheckCrateTest { compiler: Compiler<'a> }),\n+            (check_crate_rustc, CheckCrateRustc { compiler: Compiler<'a> }),\n \n             // Distribution targets, creating tarballs\n             (dist, Dist { stage: u32 }),\n@@ -376,6 +379,9 @@ impl<'a> Step<'a> {\n                     self.check_cfail(compiler),\n                     self.check_rfail(compiler),\n                     self.check_pfail(compiler),\n+                    self.check_crate_std(compiler),\n+                    self.check_crate_test(compiler),\n+                    self.check_crate_rustc(compiler),\n                     self.check_codegen(compiler),\n                     self.check_codegen_units(compiler),\n                     self.check_debuginfo(compiler),\n@@ -437,6 +443,15 @@ impl<'a> Step<'a> {\n             Source::CheckErrorIndex { compiler } => {\n                 vec![self.libstd(compiler), self.tool_error_index(compiler.stage)]\n             }\n+            Source::CheckCrateStd { compiler } => {\n+                vec![self.libtest(compiler)]\n+            }\n+            Source::CheckCrateTest { compiler } => {\n+                vec![self.libtest(compiler)]\n+            }\n+            Source::CheckCrateRustc { compiler } => {\n+                vec![self.libtest(compiler)]\n+            }\n \n             Source::ToolLinkchecker { stage } |\n             Source::ToolTidy { stage } => {"}, {"sha": "97decedf91dce6c20f560a7b94d40a95954abbb5", "filename": "src/bootstrap/rustc.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Fbootstrap%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Fbootstrap%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Frustc.rs?ref=4ec5ce5e44823c29d4f641f764e53d57e8b28a6a", "patch": "@@ -29,6 +29,7 @@ extern crate bootstrap;\n \n use std::env;\n use std::ffi::OsString;\n+use std::path::PathBuf;\n use std::process::Command;\n \n fn main() {\n@@ -43,16 +44,22 @@ fn main() {\n     // have the standard library built yet and may not be able to produce an\n     // executable. Otherwise we just use the standard compiler we're\n     // bootstrapping with.\n-    let rustc = if target.is_none() {\n-        env::var_os(\"RUSTC_SNAPSHOT\").unwrap()\n+    let (rustc, libdir) = if target.is_none() {\n+        (\"RUSTC_SNAPSHOT\", \"RUSTC_SNAPSHOT_LIBDIR\")\n     } else {\n-        env::var_os(\"RUSTC_REAL\").unwrap()\n+        (\"RUSTC_REAL\", \"RUSTC_LIBDIR\")\n     };\n     let stage = env::var(\"RUSTC_STAGE\").unwrap();\n \n+    let rustc = env::var_os(rustc).unwrap();\n+    let libdir = env::var_os(libdir).unwrap();\n+    let mut dylib_path = bootstrap::dylib_path();\n+    dylib_path.insert(0, PathBuf::from(libdir));\n+\n     let mut cmd = Command::new(rustc);\n     cmd.args(&args)\n-       .arg(\"--cfg\").arg(format!(\"stage{}\", stage));\n+       .arg(\"--cfg\").arg(format!(\"stage{}\", stage))\n+       .env(bootstrap::dylib_path_var(), env::join_paths(&dylib_path).unwrap());\n \n     if let Some(target) = target {\n         // The stage0 compiler has a special sysroot distinct from what we"}, {"sha": "88ac26d32f6c3d1f1e55acfe98b6490168cbfb1b", "filename": "src/bootstrap/rustdoc.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Fbootstrap%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Fbootstrap%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Frustdoc.rs?ref=4ec5ce5e44823c29d4f641f764e53d57e8b28a6a", "patch": "@@ -12,17 +12,25 @@\n //!\n //! See comments in `src/bootstrap/rustc.rs` for more information.\n \n+extern crate bootstrap;\n+\n use std::env;\n use std::process::Command;\n+use std::path::PathBuf;\n \n fn main() {\n     let args = env::args_os().skip(1).collect::<Vec<_>>();\n     let rustdoc = env::var_os(\"RUSTDOC_REAL\").unwrap();\n+    let libdir = env::var_os(\"RUSTC_LIBDIR\").unwrap();\n+\n+    let mut dylib_path = bootstrap::dylib_path();\n+    dylib_path.insert(0, PathBuf::from(libdir));\n \n     let mut cmd = Command::new(rustdoc);\n     cmd.args(&args)\n        .arg(\"--cfg\").arg(format!(\"stage{}\", env::var(\"RUSTC_STAGE\").unwrap()))\n-       .arg(\"--cfg\").arg(\"dox\");\n+       .arg(\"--cfg\").arg(\"dox\")\n+       .env(bootstrap::dylib_path_var(), env::join_paths(&dylib_path).unwrap());\n     std::process::exit(match cmd.status() {\n         Ok(s) => s.code().unwrap_or(1),\n         Err(e) => panic!(\"\\n\\nfailed to run {:?}: {}\\n\\n\", cmd, e),"}, {"sha": "0889ca9fc84d4e72361d24933ce2de1081ec7c3d", "filename": "src/liballoc/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Fliballoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Fliballoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2FCargo.toml?ref=4ec5ce5e44823c29d4f641f764e53d57e8b28a6a", "patch": "@@ -6,7 +6,6 @@ version = \"0.0.0\"\n [lib]\n name = \"alloc\"\n path = \"lib.rs\"\n-test = false\n \n [dependencies]\n core = { path = \"../libcore\" }"}, {"sha": "33a675331ab9dbb91e471e2a9b9d2ffde3e223fc", "filename": "src/liballoc_jemalloc/build.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Fliballoc_jemalloc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Fliballoc_jemalloc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Fbuild.rs?ref=4ec5ce5e44823c29d4f641f764e53d57e8b28a6a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![deny(warnings)]\n+\n extern crate build_helper;\n extern crate gcc;\n \n@@ -18,6 +20,7 @@ use build_helper::run;\n \n fn main() {\n     println!(\"cargo:rustc-cfg=cargobuild\");\n+    println!(\"cargo:rerun-if-changed=build.rs\");\n \n     let target = env::var(\"TARGET\").unwrap();\n     let host = env::var(\"HOST\").unwrap();\n@@ -40,6 +43,19 @@ fn main() {\n     let cflags = compiler.args().iter().map(|s| s.to_str().unwrap())\n                          .collect::<Vec<_>>().join(\" \");\n \n+    let mut stack = src_dir.join(\"../jemalloc\")\n+                           .read_dir().unwrap()\n+                           .map(|e| e.unwrap())\n+                           .collect::<Vec<_>>();\n+    while let Some(entry) = stack.pop() {\n+        let path = entry.path();\n+        if entry.file_type().unwrap().is_dir() {\n+            stack.extend(path.read_dir().unwrap().map(|e| e.unwrap()));\n+        } else {\n+            println!(\"cargo:rerun-if-changed={}\", path.display());\n+        }\n+    }\n+\n     let mut cmd = Command::new(\"sh\");\n     cmd.arg(src_dir.join(\"../jemalloc/configure\").to_str().unwrap()\n                    .replace(\"C:\\\\\", \"/c/\")"}, {"sha": "65d456e750f6f6c5a3b5bed06787b30b373403d2", "filename": "src/libcollections/Cargo.toml", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Flibcollections%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Flibcollections%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2FCargo.toml?ref=4ec5ce5e44823c29d4f641f764e53d57e8b28a6a", "patch": "@@ -6,9 +6,12 @@ version = \"0.0.0\"\n [lib]\n name = \"collections\"\n path = \"lib.rs\"\n-test = false\n \n [dependencies]\n alloc = { path = \"../liballoc\" }\n core = { path = \"../libcore\" }\n rustc_unicode = { path = \"../librustc_unicode\" }\n+\n+[[test]]\n+name = \"collectionstest\"\n+path = \"../libcollectionstest/lib.rs\""}, {"sha": "02fe574b81edd07ddfa66ed5c4474c02570e920b", "filename": "src/libcore/Cargo.toml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Flibcore%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Flibcore%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2FCargo.toml?ref=4ec5ce5e44823c29d4f641f764e53d57e8b28a6a", "patch": "@@ -8,3 +8,7 @@ build = \"build.rs\"\n name = \"core\"\n path = \"lib.rs\"\n test = false\n+\n+[[test]]\n+name = \"coretest\"\n+path = \"../libcoretest/lib.rs\""}, {"sha": "255a367e58b45a8280d2346c8f7c200dd2244283", "filename": "src/libcore/build.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Flibcore%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Flibcore%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbuild.rs?ref=4ec5ce5e44823c29d4f641f764e53d57e8b28a6a", "patch": "@@ -8,7 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![deny(warnings)]\n+\n fn main() {\n     // Remove this whenever snapshots and rustbuild nightlies are synced.\n     println!(\"cargo:rustc-cfg=cargobuild\");\n+    println!(\"cargo:rerun-if-changed=build.rs\")\n }"}, {"sha": "b578b064d67caece89816bdecee93c709041b2a7", "filename": "src/libflate/lib.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Flibflate%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Flibflate%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Flib.rs?ref=4ec5ce5e44823c29d4f641f764e53d57e8b28a6a", "patch": "@@ -27,11 +27,7 @@\n #![feature(libc)]\n #![feature(staged_api)]\n #![feature(unique)]\n-#![cfg_attr(test, feature(rustc_private, rand))]\n-\n-#[cfg(test)]\n-#[macro_use]\n-extern crate log;\n+#![cfg_attr(test, feature(rand))]\n \n extern crate libc;\n \n@@ -175,14 +171,8 @@ mod tests {\n             for _ in 0..2000 {\n                 input.extend_from_slice(r.choose(&words).unwrap());\n             }\n-            debug!(\"de/inflate of {} bytes of random word-sequences\",\n-                   input.len());\n             let cmp = deflate_bytes(&input);\n             let out = inflate_bytes(&cmp).unwrap();\n-            debug!(\"{} bytes deflated to {} ({:.1}% size)\",\n-                   input.len(),\n-                   cmp.len(),\n-                   100.0 * ((cmp.len() as f64) / (input.len() as f64)));\n             assert_eq!(&*input, &*out);\n         }\n     }"}, {"sha": "9d62be64fc4ecf836c364046d582fede41c8edff", "filename": "src/libpanic_abort/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Flibpanic_abort%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Flibpanic_abort%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_abort%2FCargo.toml?ref=4ec5ce5e44823c29d4f641f764e53d57e8b28a6a", "patch": "@@ -5,6 +5,7 @@ version = \"0.0.0\"\n \n [lib]\n path = \"lib.rs\"\n+test = false\n \n [dependencies]\n core = { path = \"../libcore\" }"}, {"sha": "18f37a8bb174ee8a2982439e8b88673a1eabe652", "filename": "src/libpanic_unwind/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Flibpanic_unwind%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Flibpanic_unwind%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2FCargo.toml?ref=4ec5ce5e44823c29d4f641f764e53d57e8b28a6a", "patch": "@@ -5,6 +5,7 @@ version = \"0.0.0\"\n \n [lib]\n path = \"lib.rs\"\n+test = false\n \n [dependencies]\n alloc = { path = \"../liballoc\" }"}, {"sha": "86b061db05413f3704975c8e15d92753fae4ea8b", "filename": "src/librand/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Flibrand%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Flibrand%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2FCargo.toml?ref=4ec5ce5e44823c29d4f641f764e53d57e8b28a6a", "patch": "@@ -6,7 +6,6 @@ version = \"0.0.0\"\n [lib]\n name = \"rand\"\n path = \"lib.rs\"\n-test = false\n \n [dependencies]\n core = { path = \"../libcore\" }"}, {"sha": "d1e66dcf9351b282356f72f430aab33395eb3b8b", "filename": "src/librustc_bitflags/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Flibrustc_bitflags%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Flibrustc_bitflags%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_bitflags%2FCargo.toml?ref=4ec5ce5e44823c29d4f641f764e53d57e8b28a6a", "patch": "@@ -7,3 +7,4 @@ version = \"0.0.0\"\n name = \"rustc_bitflags\"\n path = \"lib.rs\"\n test = false\n+doctest = false"}, {"sha": "fbc267aaa6a06c54f2e5dd9469eac49996bc4215", "filename": "src/librustc_borrowck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Flibrustc_borrowck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Flibrustc_borrowck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2FCargo.toml?ref=4ec5ce5e44823c29d4f641f764e53d57e8b28a6a", "patch": "@@ -7,6 +7,7 @@ version = \"0.0.0\"\n name = \"rustc_borrowck\"\n path = \"lib.rs\"\n crate-type = [\"dylib\"]\n+test = false\n \n [dependencies]\n log = { path = \"../liblog\" }"}, {"sha": "7674cc529bef81e85b1348b47634fdb6a9ccc6d8", "filename": "src/librustc_lint/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Flibrustc_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Flibrustc_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2FCargo.toml?ref=4ec5ce5e44823c29d4f641f764e53d57e8b28a6a", "patch": "@@ -7,6 +7,7 @@ version = \"0.0.0\"\n name = \"rustc_lint\"\n path = \"lib.rs\"\n crate-type = [\"dylib\"]\n+test = false\n \n [dependencies]\n log = { path = \"../liblog\" }"}, {"sha": "a63460d912d7d3033821ff16363b6e69b1631a75", "filename": "src/librustc_resolve/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Flibrustc_resolve%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Flibrustc_resolve%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2FCargo.toml?ref=4ec5ce5e44823c29d4f641f764e53d57e8b28a6a", "patch": "@@ -7,6 +7,7 @@ version = \"0.0.0\"\n name = \"rustc_resolve\"\n path = \"lib.rs\"\n crate-type = [\"dylib\"]\n+test = false\n \n [dependencies]\n log = { path = \"../liblog\" }"}, {"sha": "9a0580472b4017f779a097efe1a1f1a08e821525", "filename": "src/librustc_trans/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Flibrustc_trans%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Flibrustc_trans%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2FCargo.toml?ref=4ec5ce5e44823c29d4f641f764e53d57e8b28a6a", "patch": "@@ -7,6 +7,7 @@ version = \"0.0.0\"\n name = \"rustc_trans\"\n path = \"lib.rs\"\n crate-type = [\"dylib\"]\n+test = false\n \n [dependencies]\n arena = { path = \"../libarena\" }"}, {"sha": "a0c4c7534fab27b78c7c69ac3c67c2fa9b1a487e", "filename": "src/librustc_typeck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Flibrustc_typeck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Flibrustc_typeck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2FCargo.toml?ref=4ec5ce5e44823c29d4f641f764e53d57e8b28a6a", "patch": "@@ -7,6 +7,7 @@ version = \"0.0.0\"\n name = \"rustc_typeck\"\n path = \"lib.rs\"\n crate-type = [\"dylib\"]\n+test = false\n \n [dependencies]\n log = { path = \"../liblog\" }"}, {"sha": "eded6e24f3ef5db2f6f0d2f06179c43b73f9ea8c", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=4ec5ce5e44823c29d4f641f764e53d57e8b28a6a", "patch": "@@ -8,7 +8,6 @@ build = \"build.rs\"\n name = \"std\"\n path = \"lib.rs\"\n crate-type = [\"dylib\", \"rlib\"]\n-test = false\n \n [dependencies]\n alloc = { path = \"../liballoc\" }"}, {"sha": "ff9dacbb6799b7192e1874267307a25ad6b156ea", "filename": "src/libstd/build.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Flibstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Flibstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbuild.rs?ref=4ec5ce5e44823c29d4f641f764e53d57e8b28a6a", "patch": "@@ -8,18 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![deny(warnings)]\n+\n extern crate gcc;\n extern crate build_helper;\n \n use std::env;\n-use std::fs;\n use std::path::PathBuf;\n use std::process::Command;\n \n use build_helper::run;\n \n fn main() {\n     println!(\"cargo:rustc-cfg=cargobuild\");\n+    println!(\"cargo:rerun-if-changed=build.rs\");\n \n     let target = env::var(\"TARGET\").unwrap();\n     let host = env::var(\"HOST\").unwrap();\n@@ -65,8 +67,16 @@ fn build_libbacktrace(host: &str, target: &str) {\n     println!(\"cargo:rustc-link-lib=static=backtrace\");\n     println!(\"cargo:rustc-link-search=native={}/.libs\", build_dir.display());\n \n-    if fs::metadata(&build_dir.join(\".libs/libbacktrace.a\")).is_ok() {\n-        return\n+    let mut stack = src_dir.read_dir().unwrap()\n+                           .map(|e| e.unwrap())\n+                           .collect::<Vec<_>>();\n+    while let Some(entry) = stack.pop() {\n+        let path = entry.path();\n+        if entry.file_type().unwrap().is_dir() {\n+            stack.extend(path.read_dir().unwrap().map(|e| e.unwrap()));\n+        } else {\n+            println!(\"cargo:rerun-if-changed={}\", path.display());\n+        }\n     }\n \n     let compiler = gcc::Config::new().get_compiler();"}, {"sha": "b537c6b1b71c1a242de8a49dcf79fd6b6188fee4", "filename": "src/libunwind/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Flibunwind%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Flibunwind%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2FCargo.toml?ref=4ec5ce5e44823c29d4f641f764e53d57e8b28a6a", "patch": "@@ -7,6 +7,7 @@ build = \"build.rs\"\n [lib]\n name = \"unwind\"\n path = \"lib.rs\"\n+test = false\n \n [dependencies]\n core = { path = \"../libcore\" }"}, {"sha": "24499cb8f08c2efdc02607bc1b785f0cb41c113d", "filename": "src/rustc/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Frustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Frustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2FCargo.toml?ref=4ec5ce5e44823c29d4f641f764e53d57e8b28a6a", "patch": "@@ -13,6 +13,8 @@ path = \"rustdoc.rs\"\n \n [profile.release]\n opt-level = 2\n+[profile.bench]\n+opt-level = 2\n \n # These options are controlled from our rustc wrapper script, so turn them off\n # here and have them controlled elsewhere."}, {"sha": "8fc713e0f1bb3a6467d1d13b832e49629af543e6", "filename": "src/rustc/libc_shim/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Frustc%2Flibc_shim%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Frustc%2Flibc_shim%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Flibc_shim%2FCargo.toml?ref=4ec5ce5e44823c29d4f641f764e53d57e8b28a6a", "patch": "@@ -15,6 +15,7 @@ build = \"build.rs\"\n [lib]\n name = \"libc\"\n path = \"../../liblibc/src/lib.rs\"\n+test = false\n \n [dependencies]\n core = { path = \"../../libcore\" }"}, {"sha": "546f60482e7bcd21561227ecff7ed2b496baf2af", "filename": "src/rustc/libc_shim/build.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Frustc%2Flibc_shim%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Frustc%2Flibc_shim%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Flibc_shim%2Fbuild.rs?ref=4ec5ce5e44823c29d4f641f764e53d57e8b28a6a", "patch": "@@ -8,8 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![deny(warnings)]\n+\n // See comments in Cargo.toml for why this exists\n \n fn main() {\n     println!(\"cargo:rustc-cfg=stdbuild\");\n+    println!(\"cargo:rerun-if-changed=build.rs\");\n }"}, {"sha": "5602ef866b83ae800e44f877f026f16ef054d566", "filename": "src/rustc/std_shim/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Frustc%2Fstd_shim%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Frustc%2Fstd_shim%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fstd_shim%2FCargo.toml?ref=4ec5ce5e44823c29d4f641f764e53d57e8b28a6a", "patch": "@@ -30,6 +30,8 @@ path = \"lib.rs\"\n \n [profile.release]\n opt-level = 2\n+[profile.bench]\n+opt-level = 2\n \n # These options are controlled from our rustc wrapper script, so turn them off\n # here and have them controlled elsewhere."}, {"sha": "87f2ccd51e8850ee933034d1b898107b5fde327a", "filename": "src/rustc/test_shim/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Frustc%2Ftest_shim%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4ec5ce5e44823c29d4f641f764e53d57e8b28a6a/src%2Frustc%2Ftest_shim%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ftest_shim%2FCargo.toml?ref=4ec5ce5e44823c29d4f641f764e53d57e8b28a6a", "patch": "@@ -14,6 +14,8 @@ path = \"lib.rs\"\n \n [profile.release]\n opt-level = 2\n+[profile.bench]\n+opt-level = 2\n \n # These options are controlled from our rustc wrapper script, so turn them off\n # here and have them controlled elsewhere."}]}