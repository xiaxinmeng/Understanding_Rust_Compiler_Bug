{"sha": "4fec679399ddaf67d15adddad2677731f94dfa36", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmZWM2NzkzOTlkZGFmNjdkMTVhZGRkYWQyNjc3NzMxZjk0ZGZhMzY=", "commit": {"author": {"name": "Sean Bowe", "email": "ewillbefull@gmail.com", "date": "2015-09-14T08:33:29Z"}, "committer": {"name": "Sean Bowe", "email": "ewillbefull@gmail.com", "date": "2015-09-14T08:33:29Z"}, "message": "Cleaner abstraction for type_substs", "tree": {"sha": "5dd5bb4bba11884554a79136d6519e20bd2ed85f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5dd5bb4bba11884554a79136d6519e20bd2ed85f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fec679399ddaf67d15adddad2677731f94dfa36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fec679399ddaf67d15adddad2677731f94dfa36", "html_url": "https://github.com/rust-lang/rust/commit/4fec679399ddaf67d15adddad2677731f94dfa36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fec679399ddaf67d15adddad2677731f94dfa36/comments", "author": {"login": "ebfull", "id": 3794471, "node_id": "MDQ6VXNlcjM3OTQ0NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3794471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebfull", "html_url": "https://github.com/ebfull", "followers_url": "https://api.github.com/users/ebfull/followers", "following_url": "https://api.github.com/users/ebfull/following{/other_user}", "gists_url": "https://api.github.com/users/ebfull/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebfull/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebfull/subscriptions", "organizations_url": "https://api.github.com/users/ebfull/orgs", "repos_url": "https://api.github.com/users/ebfull/repos", "events_url": "https://api.github.com/users/ebfull/events{/privacy}", "received_events_url": "https://api.github.com/users/ebfull/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebfull", "id": 3794471, "node_id": "MDQ6VXNlcjM3OTQ0NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3794471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebfull", "html_url": "https://github.com/ebfull", "followers_url": "https://api.github.com/users/ebfull/followers", "following_url": "https://api.github.com/users/ebfull/following{/other_user}", "gists_url": "https://api.github.com/users/ebfull/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebfull/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebfull/subscriptions", "organizations_url": "https://api.github.com/users/ebfull/orgs", "repos_url": "https://api.github.com/users/ebfull/repos", "events_url": "https://api.github.com/users/ebfull/events{/privacy}", "received_events_url": "https://api.github.com/users/ebfull/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d0774f5989fc9425c5dc0ab5118fdcabba33555", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d0774f5989fc9425c5dc0ab5118fdcabba33555", "html_url": "https://github.com/rust-lang/rust/commit/3d0774f5989fc9425c5dc0ab5118fdcabba33555"}], "stats": {"total": 71, "additions": 43, "deletions": 28}, "files": [{"sha": "0537b176aef33f508ff849d5fccc6f1916f220fd", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 43, "deletions": 28, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/4fec679399ddaf67d15adddad2677731f94dfa36/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fec679399ddaf67d15adddad2677731f94dfa36/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=4fec679399ddaf67d15adddad2677731f94dfa36", "patch": "@@ -408,34 +408,13 @@ fn create_substs_for_ast_path<'tcx>(\n                                                .take_while(|x| x.default.is_none())\n                                                .count();\n \n-    // Fill with `ty_infer` if no params were specified, as long as\n-    // they were optional (e.g. paths inside expressions).\n-    let mut type_substs = if param_mode == PathParamMode::Optional &&\n-                             types_provided.is_empty() {\n-        fn default_type_parameter<'tcx>(p: &ty::TypeParameterDef<'tcx>, self_ty: Option<Ty<'tcx>>)\n-                                        -> Option<ty::TypeParameterDef<'tcx>>\n-        {\n-            if let Some(ref default) = p.default {\n-                if self_ty.is_none() && default.has_self_ty() {\n-                    // There is no suitable inference default for a type parameter\n-                    // that references self with no self-type provided.\n-                    return None;\n-                }\n-            }\n-\n-            Some(p.clone())\n-        }\n-\n-        let mut substs = region_substs.clone();\n-\n-        ty_param_defs\n-            .iter()\n-            .map(|p| this.ty_infer(default_type_parameter(p, self_ty), Some(&mut substs),\n-                                   Some(TypeSpace), span))\n-            .collect()\n-    } else {\n-        types_provided\n-    };\n+    let mut type_substs = get_type_substs_for_defs(this,\n+                                                   span,\n+                                                   types_provided,\n+                                                   param_mode,\n+                                                   ty_param_defs,\n+                                                   region_substs.clone(),\n+                                                   self_ty);\n \n     let supplied_ty_param_count = type_substs.len();\n     check_type_argument_count(this.tcx(), span, supplied_ty_param_count,\n@@ -499,6 +478,42 @@ fn create_substs_for_ast_path<'tcx>(\n     substs\n }\n \n+/// Returns types_provided if it is not empty, otherwise populating the\n+/// type parameters with inference variables as appropriate.\n+fn get_type_substs_for_defs<'tcx>(this: &AstConv<'tcx>,\n+                                  span: Span,\n+                                  types_provided: Vec<Ty<'tcx>>,\n+                                  param_mode: PathParamMode,\n+                                  ty_param_defs: &[ty::TypeParameterDef<'tcx>],\n+                                  mut substs: Substs<'tcx>,\n+                                  self_ty: Option<Ty<'tcx>>)\n+                                  -> Vec<Ty<'tcx>>\n+{\n+    fn default_type_parameter<'tcx>(p: &ty::TypeParameterDef<'tcx>, self_ty: Option<Ty<'tcx>>)\n+                                    -> Option<ty::TypeParameterDef<'tcx>>\n+    {\n+        if let Some(ref default) = p.default {\n+            if self_ty.is_none() && default.has_self_ty() {\n+                // There is no suitable inference default for a type parameter\n+                // that references self with no self-type provided.\n+                return None;\n+            }\n+        }\n+\n+        Some(p.clone())\n+    }\n+\n+    if param_mode == PathParamMode::Optional && types_provided.is_empty() {\n+        ty_param_defs\n+            .iter()\n+            .map(|p| this.ty_infer(default_type_parameter(p, self_ty), Some(&mut substs),\n+                                   Some(TypeSpace), span))\n+            .collect()\n+    } else {\n+        types_provided\n+    }\n+}\n+\n struct ConvertedBinding<'tcx> {\n     item_name: ast::Name,\n     ty: Ty<'tcx>,"}]}