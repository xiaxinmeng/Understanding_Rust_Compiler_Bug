{"sha": "75d9a0ae210dcd078b3985e3550b59064e6603bc", "node_id": "C_kwDOAAsO6NoAKDc1ZDlhMGFlMjEwZGNkMDc4YjM5ODVlMzU1MGI1OTA2NGU2NjAzYmM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-16T18:52:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-16T18:52:59Z"}, "message": "Auto merge of #94061 - matthiaskrgr:rollup-oduekp5, r=matthiaskrgr\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #92366 (Resolve concern of `derive_default_enum`)\n - #93382 (Add a bit more padding in search box)\n - #93962 (Make [u8]::cmp implementation branchless)\n - #94015 (rustdoc --check option documentation)\n - #94017 (Clarify confusing UB statement in MIR)\n - #94020 (Support pretty printing of invalid constants)\n - #94027 (Update browser UI test version)\n - #94037 (Fix inconsistent symbol mangling with -Zverbose)\n - #94045 (Update books)\n - #94054 (:arrow_up: rust-analyzer)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "62ac55d59c1dcbb0a2b71659c738e3d78e751f78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62ac55d59c1dcbb0a2b71659c738e3d78e751f78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75d9a0ae210dcd078b3985e3550b59064e6603bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75d9a0ae210dcd078b3985e3550b59064e6603bc", "html_url": "https://github.com/rust-lang/rust/commit/75d9a0ae210dcd078b3985e3550b59064e6603bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75d9a0ae210dcd078b3985e3550b59064e6603bc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f90b06d7fb00470177516c5881bcec0432cb4f24", "url": "https://api.github.com/repos/rust-lang/rust/commits/f90b06d7fb00470177516c5881bcec0432cb4f24", "html_url": "https://github.com/rust-lang/rust/commit/f90b06d7fb00470177516c5881bcec0432cb4f24"}, {"sha": "be858fa1194ad264d606802606a942c38c2ee7a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/be858fa1194ad264d606802606a942c38c2ee7a1", "html_url": "https://github.com/rust-lang/rust/commit/be858fa1194ad264d606802606a942c38c2ee7a1"}], "stats": {"total": 245, "additions": 177, "deletions": 68}, "files": [{"sha": "1d1eee88a68e614780634da880552b8b5df231dd", "filename": "compiler/rustc_builtin_macros/src/deriving/default.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/75d9a0ae210dcd078b3985e3550b59064e6603bc/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d9a0ae210dcd078b3985e3550b59064e6603bc/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs?ref=75d9a0ae210dcd078b3985e3550b59064e6603bc", "patch": "@@ -222,9 +222,6 @@ fn validate_default_attribute(\n             \"this method must only be called with a variant that has a `#[default]` attribute\",\n         ),\n         [first, rest @ ..] => {\n-            // FIXME(jhpratt) Do we want to perform this check? It doesn't exist\n-            // for `#[inline]`, `#[non_exhaustive]`, and presumably others.\n-\n             let suggestion_text =\n                 if rest.len() == 1 { \"try removing this\" } else { \"try removing these\" };\n "}, {"sha": "ba1d5f45bbb10be632ea2f3888b10235110f5604", "filename": "compiler/rustc_const_eval/src/const_eval/mod.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/75d9a0ae210dcd078b3985e3550b59064e6603bc/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d9a0ae210dcd078b3985e3550b59064e6603bc/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs?ref=75d9a0ae210dcd078b3985e3550b59064e6603bc", "patch": "@@ -11,7 +11,8 @@ use rustc_middle::{\n use rustc_span::{source_map::DUMMY_SP, symbol::Symbol};\n \n use crate::interpret::{\n-    intern_const_alloc_recursive, ConstValue, InternKind, InterpCx, MPlaceTy, MemPlaceMeta, Scalar,\n+    intern_const_alloc_recursive, ConstValue, InternKind, InterpCx, InterpResult, MPlaceTy,\n+    MemPlaceMeta, Scalar,\n };\n \n mod error;\n@@ -132,42 +133,39 @@ fn const_to_valtree_inner<'tcx>(\n     }\n }\n \n-/// This function uses `unwrap` copiously, because an already validated constant\n-/// must have valid fields and can thus never fail outside of compiler bugs. However, it is\n-/// invoked from the pretty printer, where it can receive enums with no variants and e.g.\n-/// `read_discriminant` needs to be able to handle that.\n-pub(crate) fn destructure_const<'tcx>(\n+/// This function should never fail for validated constants. However, it is also invoked from the\n+/// pretty printer which might attempt to format invalid constants and in that case it might fail.\n+pub(crate) fn try_destructure_const<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     val: ty::Const<'tcx>,\n-) -> mir::DestructuredConst<'tcx> {\n+) -> InterpResult<'tcx, mir::DestructuredConst<'tcx>> {\n     trace!(\"destructure_const: {:?}\", val);\n     let ecx = mk_eval_cx(tcx, DUMMY_SP, param_env, false);\n-    let op = ecx.const_to_op(val, None).unwrap();\n+    let op = ecx.const_to_op(val, None)?;\n \n     // We go to `usize` as we cannot allocate anything bigger anyway.\n     let (field_count, variant, down) = match val.ty().kind() {\n         ty::Array(_, len) => (usize::try_from(len.eval_usize(tcx, param_env)).unwrap(), None, op),\n-        ty::Adt(def, _) if def.variants.is_empty() => {\n-            return mir::DestructuredConst { variant: None, fields: &[] };\n-        }\n         ty::Adt(def, _) => {\n-            let variant = ecx.read_discriminant(&op).unwrap().1;\n-            let down = ecx.operand_downcast(&op, variant).unwrap();\n+            let variant = ecx.read_discriminant(&op)?.1;\n+            let down = ecx.operand_downcast(&op, variant)?;\n             (def.variants[variant].fields.len(), Some(variant), down)\n         }\n         ty::Tuple(substs) => (substs.len(), None, op),\n         _ => bug!(\"cannot destructure constant {:?}\", val),\n     };\n \n-    let fields_iter = (0..field_count).map(|i| {\n-        let field_op = ecx.operand_field(&down, i).unwrap();\n-        let val = op_to_const(&ecx, &field_op);\n-        ty::Const::from_value(tcx, val, field_op.layout.ty)\n-    });\n-    let fields = tcx.arena.alloc_from_iter(fields_iter);\n+    let fields = (0..field_count)\n+        .map(|i| {\n+            let field_op = ecx.operand_field(&down, i)?;\n+            let val = op_to_const(&ecx, &field_op);\n+            Ok(ty::Const::from_value(tcx, val, field_op.layout.ty))\n+        })\n+        .collect::<InterpResult<'tcx, Vec<_>>>()?;\n+    let fields = tcx.arena.alloc_from_iter(fields);\n \n-    mir::DestructuredConst { variant, fields }\n+    Ok(mir::DestructuredConst { variant, fields })\n }\n \n pub(crate) fn deref_const<'tcx>("}, {"sha": "77d312f585138f6c4c9eda1031cb4f4c1a27955a", "filename": "compiler/rustc_const_eval/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75d9a0ae210dcd078b3985e3550b59064e6603bc/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d9a0ae210dcd078b3985e3550b59064e6603bc/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs?ref=75d9a0ae210dcd078b3985e3550b59064e6603bc", "patch": "@@ -41,9 +41,9 @@ pub fn provide(providers: &mut Providers) {\n     providers.eval_to_const_value_raw = const_eval::eval_to_const_value_raw_provider;\n     providers.eval_to_allocation_raw = const_eval::eval_to_allocation_raw_provider;\n     providers.const_caller_location = const_eval::const_caller_location;\n-    providers.destructure_const = |tcx, param_env_and_value| {\n+    providers.try_destructure_const = |tcx, param_env_and_value| {\n         let (param_env, value) = param_env_and_value.into_parts();\n-        const_eval::destructure_const(tcx, param_env, value)\n+        const_eval::try_destructure_const(tcx, param_env, value).ok()\n     };\n     providers.const_to_valtree = |tcx, param_env_and_value| {\n         let (param_env, raw) = param_env_and_value.into_parts();"}, {"sha": "4a57f483c70e2b8a1069263ca031f8271ca817a5", "filename": "compiler/rustc_middle/src/mir/interpret/queries.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/75d9a0ae210dcd078b3985e3550b59064e6603bc/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d9a0ae210dcd078b3985e3550b59064e6603bc/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs?ref=75d9a0ae210dcd078b3985e3550b59064e6603bc", "patch": "@@ -98,4 +98,12 @@ impl<'tcx> TyCtxt<'tcx> {\n         let raw_const = self.eval_to_allocation_raw(param_env.and(gid))?;\n         Ok(self.global_alloc(raw_const.alloc_id).unwrap_memory())\n     }\n+\n+    /// Destructure a constant ADT or array into its variant index and its field values.\n+    pub fn destructure_const(\n+        self,\n+        param_env_and_val: ty::ParamEnvAnd<'tcx, ty::Const<'tcx>>,\n+    ) -> mir::DestructuredConst<'tcx> {\n+        self.try_destructure_const(param_env_and_val).unwrap()\n+    }\n }"}, {"sha": "7e5f8018dfc422e26521389256d216d3194b0012", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75d9a0ae210dcd078b3985e3550b59064e6603bc/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d9a0ae210dcd078b3985e3550b59064e6603bc/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=75d9a0ae210dcd078b3985e3550b59064e6603bc", "patch": "@@ -2270,11 +2270,13 @@ pub enum BinOp {\n     Mul,\n     /// The `/` operator (division)\n     ///\n-    /// Division by zero is UB.\n+    /// Division by zero is UB, because the compiler should have inserted checks\n+    /// prior to this.\n     Div,\n     /// The `%` operator (modulus)\n     ///\n-    /// Using zero as the modulus (second operand) is UB.\n+    /// Using zero as the modulus (second operand) is UB, because the compiler\n+    /// should have inserted checks prior to this.\n     Rem,\n     /// The `^` operator (bitwise xor)\n     BitXor,"}, {"sha": "43cfe6f3b8a7a51e608f6ff6ed38d817ba1f6368", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/75d9a0ae210dcd078b3985e3550b59064e6603bc/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d9a0ae210dcd078b3985e3550b59064e6603bc/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=75d9a0ae210dcd078b3985e3550b59064e6603bc", "patch": "@@ -924,10 +924,12 @@ rustc_queries! {\n     }\n \n     /// Destructure a constant ADT or array into its variant index and its\n-    /// field values.\n-    query destructure_const(\n+    /// field values or return `None` if constant is invalid.\n+    ///\n+    /// Use infallible `TyCtxt::destructure_const` when you know that constant is valid.\n+    query try_destructure_const(\n         key: ty::ParamEnvAnd<'tcx, ty::Const<'tcx>>\n-    ) -> mir::DestructuredConst<'tcx> {\n+    ) -> Option<mir::DestructuredConst<'tcx>> {\n         desc { \"destructure constant\" }\n         remap_env_constness\n     }"}, {"sha": "94cea505c32a058d049f925a5d7fcabbd3a7e413", "filename": "compiler/rustc_middle/src/ty/print/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/75d9a0ae210dcd078b3985e3550b59064e6603bc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d9a0ae210dcd078b3985e3550b59064e6603bc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs?ref=75d9a0ae210dcd078b3985e3550b59064e6603bc", "patch": "@@ -188,11 +188,6 @@ pub trait Printer<'tcx>: Sized {\n             own_params.start = 1;\n         }\n \n-        // If we're in verbose mode, then print default-equal args too\n-        if self.tcx().sess.verbose() {\n-            return &substs[own_params];\n-        }\n-\n         // Don't print args that are the defaults of their respective parameters.\n         own_params.end -= generics\n             .params"}, {"sha": "ae838a461574b2df1dee5d0a317423c33c28975f", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/75d9a0ae210dcd078b3985e3550b59064e6603bc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d9a0ae210dcd078b3985e3550b59064e6603bc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=75d9a0ae210dcd078b3985e3550b59064e6603bc", "patch": "@@ -1459,10 +1459,18 @@ pub trait PrettyPrinter<'tcx>:\n             // FIXME(eddyb) for `--emit=mir`/`-Z dump-mir`, we should provide the\n             // correct `ty::ParamEnv` to allow printing *all* constant values.\n             (_, ty::Array(..) | ty::Tuple(..) | ty::Adt(..)) if !ty.has_param_types_or_consts() => {\n-                let contents =\n-                    self.tcx().destructure_const(ty::ParamEnv::reveal_all().and(\n-                        self.tcx().mk_const(ty::ConstS { val: ty::ConstKind::Value(ct), ty }),\n-                    ));\n+                let Some(contents) = self.tcx().try_destructure_const(\n+                    ty::ParamEnv::reveal_all()\n+                        .and(self.tcx().mk_const(ty::ConstS { val: ty::ConstKind::Value(ct), ty })),\n+                ) else {\n+                    // Fall back to debug pretty printing for invalid constants.\n+                    p!(write(\"{:?}\", ct));\n+                    if print_ty {\n+                        p!(\": \", print(ty));\n+                    }\n+                    return Ok(self);\n+                };\n+\n                 let fields = contents.fields.iter().copied();\n \n                 match *ty.kind() {"}, {"sha": "27c6b6f5bc02f474a8954a54c53de4f7f6347ed9", "filename": "library/core/src/slice/cmp.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/75d9a0ae210dcd078b3985e3550b59064e6603bc/library%2Fcore%2Fsrc%2Fslice%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d9a0ae210dcd078b3985e3550b59064e6603bc/library%2Fcore%2Fsrc%2Fslice%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fcmp.rs?ref=75d9a0ae210dcd078b3985e3550b59064e6603bc", "patch": "@@ -1,7 +1,6 @@\n //! Comparison traits for `[T]`.\n \n-use crate::cmp;\n-use crate::cmp::Ordering::{self, Greater, Less};\n+use crate::cmp::{self, Ordering};\n use crate::mem;\n \n use super::from_raw_parts;\n@@ -189,18 +188,18 @@ impl<A: Ord> SliceOrd for A {\n impl SliceOrd for u8 {\n     #[inline]\n     fn compare(left: &[Self], right: &[Self]) -> Ordering {\n-        let order =\n-            // SAFETY: `left` and `right` are references and are thus guaranteed to be valid.\n-            // We use the minimum of both lengths which guarantees that both regions are\n-            // valid for reads in that interval.\n-            unsafe { memcmp(left.as_ptr(), right.as_ptr(), cmp::min(left.len(), right.len())) };\n+        // Since the length of a slice is always less than or equal to isize::MAX, this never underflows.\n+        let diff = left.len() as isize - right.len() as isize;\n+        // This comparison gets optimized away (on x86_64 and ARM) because the subtraction updates flags.\n+        let len = if left.len() < right.len() { left.len() } else { right.len() };\n+        // SAFETY: `left` and `right` are references and are thus guaranteed to be valid.\n+        // We use the minimum of both lengths which guarantees that both regions are\n+        // valid for reads in that interval.\n+        let mut order = unsafe { memcmp(left.as_ptr(), right.as_ptr(), len) as isize };\n         if order == 0 {\n-            left.len().cmp(&right.len())\n-        } else if order < 0 {\n-            Less\n-        } else {\n-            Greater\n+            order = diff;\n         }\n+        order.cmp(&0)\n     }\n }\n "}, {"sha": "f1c42b248f4bd236d5781b6ba969d407abbfa2ca", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-tools/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75d9a0ae210dcd078b3985e3550b59064e6603bc/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/75d9a0ae210dcd078b3985e3550b59064e6603bc/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2FDockerfile?ref=75d9a0ae210dcd078b3985e3550b59064e6603bc", "patch": "@@ -72,7 +72,7 @@ ENV PATH=\"/node-v14.4.0-linux-x64/bin:${PATH}\"\n # https://github.com/puppeteer/puppeteer/issues/375\n #\n # We also specify the version in case we need to update it to go around cache limitations.\n-RUN npm install -g browser-ui-test@0.7.1 --unsafe-perm=true\n+RUN npm install -g browser-ui-test@0.7.2 --unsafe-perm=true\n \n ENV RUST_CONFIGURE_ARGS \\\n   --build=x86_64-unknown-linux-gnu \\"}, {"sha": "67b768c0b660a069a45f0e5d8ae2f679df1022ab", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=75d9a0ae210dcd078b3985e3550b59064e6603bc", "patch": "@@ -1 +1 @@\n-Subproject commit 98904efaa4fc968db8ff59cf2744d9f7ed158166\n+Subproject commit 67b768c0b660a069a45f0e5d8ae2f679df1022ab"}, {"sha": "90993eeac93dbf9388992de92965f99cf6f29a03", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=75d9a0ae210dcd078b3985e3550b59064e6603bc", "patch": "@@ -1 +1 @@\n-Subproject commit 9493715a6280a1f74be759c7e1ef9999b5d13e6f\n+Subproject commit 90993eeac93dbf9388992de92965f99cf6f29a03"}, {"sha": "70fc73a6b908e08e66aa0306856c5211312f6c05", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=75d9a0ae210dcd078b3985e3550b59064e6603bc", "patch": "@@ -1 +1 @@\n-Subproject commit 411c2f0d5cebf48453ae2d136ad0c5e611d39aec\n+Subproject commit 70fc73a6b908e08e66aa0306856c5211312f6c05"}, {"sha": "62f58394ba7b203f55ac35ddcc4c0b79578f5706", "filename": "src/doc/rustc-dev-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-dev-guide?ref=75d9a0ae210dcd078b3985e3550b59064e6603bc", "patch": "@@ -1 +1 @@\n-Subproject commit 8763adb62c712df69b1d39ea3e692b6d696cc4d9\n+Subproject commit 62f58394ba7b203f55ac35ddcc4c0b79578f5706"}, {"sha": "3ce57f88938f76d39f495db068a6a01b94893b41", "filename": "src/doc/rustdoc/src/command-line-arguments.md", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/75d9a0ae210dcd078b3985e3550b59064e6603bc/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/75d9a0ae210dcd078b3985e3550b59064e6603bc/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md?ref=75d9a0ae210dcd078b3985e3550b59064e6603bc", "patch": "@@ -381,7 +381,7 @@ the same CSS rules as the official `light` theme.\n `--check-theme` flag, it discards all other flags and only performs the CSS rule\n comparison operation.\n \n-### `--crate-version`: control the crate version\n+## `--crate-version`: control the crate version\n \n Using this flag looks like this:\n \n@@ -418,9 +418,22 @@ Rustdoc only supports Rust source code and Markdown input formats. If the\n file ends in `.md` or `.markdown`, `rustdoc` treats it as a Markdown file.\n Otherwise, it assumes that the input file is Rust.\n \n+# Unstable command line arguments\n+\n ## `--nocapture`\n \n When this flag is used with `--test`, the output (stdout and stderr) of your tests won't be\n captured by rustdoc. Instead, the output will be directed to your terminal,\n as if you had run the test executable manually. This is especially useful\n for debugging your tests!\n+\n+## `--check`\n+\n+When this flag is supplied, rustdoc will type check and lint your code, but will not generate any\n+documentation or run your doctests.\n+\n+Using this flag looks like:\n+\n+```bash\n+rustdoc -Z unstable-options --check src/lib.rs\n+```"}, {"sha": "662221ae773a76ab808c9dc038891d58f9b221a3", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75d9a0ae210dcd078b3985e3550b59064e6603bc/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/75d9a0ae210dcd078b3985e3550b59064e6603bc/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=75d9a0ae210dcd078b3985e3550b59064e6603bc", "patch": "@@ -933,7 +933,7 @@ table,\n \toutline: none;\n \tborder: 1px solid;\n \tborder-radius: 2px;\n-\tpadding: 5px 8px;\n+\tpadding: 8px;\n \tfont-size: 1rem;\n \ttransition: border-color 300ms ease;\n \twidth: 100%;"}, {"sha": "ee6c3b5f36fd4ecc6168815253278ce97f79426f", "filename": "src/test/mir-opt/const_prop/invalid_constant.main.ConstProp.diff", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/75d9a0ae210dcd078b3985e3550b59064e6603bc/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/75d9a0ae210dcd078b3985e3550b59064e6603bc/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff?ref=75d9a0ae210dcd078b3985e3550b59064e6603bc", "patch": "@@ -0,0 +1,55 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/invalid_constant.rs:15:11: 15:11\n+      let _1: std::option::Option<()>;     // in scope 0 at $DIR/invalid_constant.rs:16:5: 16:12\n+      let mut _2: std::option::Option<std::option::Option<()>>; // in scope 0 at $DIR/invalid_constant.rs:16:7: 16:11\n+      scope 1 (inlined f) {                // at $DIR/invalid_constant.rs:16:5: 16:12\n+          debug x => _2;                   // in scope 1 at $DIR/invalid_constant.rs:16:5: 16:12\n+          let mut _3: isize;               // in scope 1 at $DIR/invalid_constant.rs:16:5: 16:12\n+          let _4: std::option::Option<()>; // in scope 1 at $DIR/invalid_constant.rs:16:5: 16:12\n+          scope 2 {\n+              debug y => _4;               // in scope 2 at $DIR/invalid_constant.rs:16:5: 16:12\n+          }\n+      }\n+  \n+      bb0: {\n+          discriminant(_2) = 0;            // scope 0 at $DIR/invalid_constant.rs:16:7: 16:11\n+-         _3 = discriminant(_2);           // scope 1 at $DIR/invalid_constant.rs:16:5: 16:12\n+-         switchInt(move _3) -> [0_isize: bb3, otherwise: bb2]; // scope 1 at $DIR/invalid_constant.rs:16:5: 16:12\n++         _3 = const 0_isize;              // scope 1 at $DIR/invalid_constant.rs:16:5: 16:12\n++         switchInt(const 0_isize) -> [0_isize: bb3, otherwise: bb2]; // scope 1 at $DIR/invalid_constant.rs:16:5: 16:12\n+      }\n+  \n+      bb1: {\n+          nop;                             // scope 0 at $DIR/invalid_constant.rs:15:11: 17:2\n+          return;                          // scope 0 at $DIR/invalid_constant.rs:17:2: 17:2\n+      }\n+  \n+      bb2: {\n+-         _4 = ((_2 as Some).0: std::option::Option<()>); // scope 1 at $DIR/invalid_constant.rs:16:5: 16:12\n+-         _1 = _4;                         // scope 2 at $DIR/invalid_constant.rs:16:5: 16:12\n++         _4 = const Scalar(0x02): Option::<()>; // scope 1 at $DIR/invalid_constant.rs:16:5: 16:12\n++                                          // ty::Const\n++                                          // + ty: std::option::Option<()>\n++                                          // + val: Value(Scalar(0x02))\n++                                          // mir::Constant\n++                                          // + span: $DIR/invalid_constant.rs:16:5: 16:12\n++                                          // + literal: Const { ty: std::option::Option<()>, val: Value(Scalar(0x02)) }\n++         _1 = const Scalar(0x02): Option::<()>; // scope 2 at $DIR/invalid_constant.rs:16:5: 16:12\n++                                          // ty::Const\n++                                          // + ty: std::option::Option<()>\n++                                          // + val: Value(Scalar(0x02))\n++                                          // mir::Constant\n++                                          // + span: $DIR/invalid_constant.rs:16:5: 16:12\n++                                          // + literal: Const { ty: std::option::Option<()>, val: Value(Scalar(0x02)) }\n+          goto -> bb1;                     // scope 0 at $DIR/invalid_constant.rs:10:20: 10:21\n+      }\n+  \n+      bb3: {\n+          discriminant(_1) = 0;            // scope 1 at $DIR/invalid_constant.rs:16:5: 16:12\n+          goto -> bb1;                     // scope 0 at $DIR/invalid_constant.rs:9:17: 9:21\n+      }\n+  }\n+  "}, {"sha": "1eb6f37df59683bd7896e7e9de9964edbeb52d35", "filename": "src/test/mir-opt/const_prop/invalid_constant.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/75d9a0ae210dcd078b3985e3550b59064e6603bc/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d9a0ae210dcd078b3985e3550b59064e6603bc/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.rs?ref=75d9a0ae210dcd078b3985e3550b59064e6603bc", "patch": "@@ -0,0 +1,17 @@\n+// Verify that we can pretty print invalid constant introduced\n+// by constant propagation. Regression test for issue #93688.\n+//\n+// compile-flags: -Copt-level=0 -Zinline-mir\n+\n+#[inline(always)]\n+pub fn f(x: Option<Option<()>>) -> Option<()> {\n+    match x {\n+        None => None,\n+        Some(y) => y,\n+    }\n+}\n+\n+// EMIT_MIR invalid_constant.main.ConstProp.diff\n+fn main() {\n+    f(None);\n+}"}, {"sha": "7a32d9029103a4067696b73da350f76957c41c76", "filename": "src/test/rustdoc-gui/item-info-width.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75d9a0ae210dcd078b3985e3550b59064e6603bc/src%2Ftest%2Frustdoc-gui%2Fitem-info-width.goml", "raw_url": "https://github.com/rust-lang/rust/raw/75d9a0ae210dcd078b3985e3550b59064e6603bc/src%2Ftest%2Frustdoc-gui%2Fitem-info-width.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fitem-info-width.goml?ref=75d9a0ae210dcd078b3985e3550b59064e6603bc", "patch": "@@ -4,5 +4,5 @@ goto: file://|DOC_PATH|/lib2/struct.Foo.html\n size: (1100, 800)\n // We check that \".item-info\" is bigger than its content.\n assert-css: (\".item-info\", {\"width\": \"790px\"})\n-assert-css: (\".item-info .stab\", {\"width\": \"339.562px\"})\n+assert-css: (\".item-info .stab\", {\"width\": \"340px\"})\n assert-position: (\".item-info .stab\", {\"x\": 295})"}, {"sha": "66cd94d7a1b3730f224fdd13c3c44ca10ebb44ba", "filename": "src/test/ui/associated-types/substs-ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75d9a0ae210dcd078b3985e3550b59064e6603bc/src%2Ftest%2Fui%2Fassociated-types%2Fsubsts-ppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d9a0ae210dcd078b3985e3550b59064e6603bc/src%2Ftest%2Fui%2Fassociated-types%2Fsubsts-ppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fsubsts-ppaux.rs?ref=75d9a0ae210dcd078b3985e3550b59064e6603bc", "patch": "@@ -25,7 +25,7 @@ fn foo<'z>() where &'z (): Sized {\n     let x: () = <i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>;\n     //[verbose]~^ ERROR mismatched types\n     //[verbose]~| expected unit type `()`\n-    //[verbose]~| found fn item `fn() {<i8 as Foo<ReStatic, ReStatic, u32>>::bar::<ReStatic, char>}`\n+    //[verbose]~| found fn item `fn() {<i8 as Foo<ReStatic, ReStatic>>::bar::<ReStatic, char>}`\n     //[normal]~^^^^ ERROR mismatched types\n     //[normal]~| expected unit type `()`\n     //[normal]~| found fn item `fn() {<i8 as Foo<'static, 'static>>::bar::<'static, char>}`"}, {"sha": "b831f3b7a76d23aef2deaf317863be67d68ee0c8", "filename": "src/test/ui/associated-types/substs-ppaux.verbose.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75d9a0ae210dcd078b3985e3550b59064e6603bc/src%2Ftest%2Fui%2Fassociated-types%2Fsubsts-ppaux.verbose.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75d9a0ae210dcd078b3985e3550b59064e6603bc/src%2Ftest%2Fui%2Fassociated-types%2Fsubsts-ppaux.verbose.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fsubsts-ppaux.verbose.stderr?ref=75d9a0ae210dcd078b3985e3550b59064e6603bc", "patch": "@@ -20,15 +20,15 @@ error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:25:17\n    |\n LL |     fn bar<'a, T>() where T: 'a {}\n-   |     --------------------------- fn() {<i8 as Foo<ReStatic, ReStatic, u32>>::bar::<ReStatic, char>} defined here\n+   |     --------------------------- fn() {<i8 as Foo<ReStatic, ReStatic>>::bar::<ReStatic, char>} defined here\n ...\n LL |     let x: () = <i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>;\n    |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found fn item\n    |            |\n    |            expected due to this\n    |\n    = note: expected unit type `()`\n-                found fn item `fn() {<i8 as Foo<ReStatic, ReStatic, u32>>::bar::<ReStatic, char>}`\n+                found fn item `fn() {<i8 as Foo<ReStatic, ReStatic>>::bar::<ReStatic, char>}`\n help: use parentheses to call this function\n    |\n LL |     let x: () = <i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>();"}, {"sha": "983d6a06afada75c7edffd8500d13cacbf15bc7b", "filename": "src/test/ui/nll/ty-outlives/projection-no-regions-closure.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/75d9a0ae210dcd078b3985e3550b59064e6603bc/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75d9a0ae210dcd078b3985e3550b59064e6603bc/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr?ref=75d9a0ae210dcd078b3985e3550b59064e6603bc", "patch": "@@ -6,7 +6,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |\n    = note: defining type: no_region::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::boxed::Box<T, std::alloc::Global>,)) -> std::boxed::Box<(dyn Anything + '_#2r), std::alloc::Global>,\n+               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#2r)>,\n                (),\n            ]\n    = note: number of external vids: 3\n@@ -42,7 +42,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |\n    = note: defining type: correct_region::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::boxed::Box<T, std::alloc::Global>,)) -> std::boxed::Box<(dyn Anything + '_#2r), std::alloc::Global>,\n+               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#2r)>,\n                (),\n            ]\n    = note: number of external vids: 3\n@@ -69,7 +69,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |\n    = note: defining type: wrong_region::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::boxed::Box<T, std::alloc::Global>,)) -> std::boxed::Box<(dyn Anything + '_#3r), std::alloc::Global>,\n+               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#3r)>,\n                (),\n            ]\n    = note: number of external vids: 4\n@@ -105,7 +105,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |\n    = note: defining type: outlives_region::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::boxed::Box<T, std::alloc::Global>,)) -> std::boxed::Box<(dyn Anything + '_#3r), std::alloc::Global>,\n+               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#3r)>,\n                (),\n            ]\n    = note: number of external vids: 4"}, {"sha": "88d73e7a729a92f5826d545af0bcf947c986f650", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-return-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75d9a0ae210dcd078b3985e3550b59064e6603bc/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75d9a0ae210dcd078b3985e3550b59064e6603bc/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr?ref=75d9a0ae210dcd078b3985e3550b59064e6603bc", "patch": "@@ -6,7 +6,7 @@ LL |     with_signature(x, |y| y)\n    |\n    = note: defining type: no_region::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::boxed::Box<T, std::alloc::Global>,)) -> std::boxed::Box<(dyn std::fmt::Debug + '_#2r), std::alloc::Global>,\n+               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn std::fmt::Debug + '_#2r)>,\n                (),\n            ]\n    = note: number of external vids: 3"}, {"sha": "e00c592b6d2761361fbeb5951bf6c33d2deee586", "filename": "src/test/ui/symbol-names/verbose.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/75d9a0ae210dcd078b3985e3550b59064e6603bc/src%2Ftest%2Fui%2Fsymbol-names%2Fverbose.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d9a0ae210dcd078b3985e3550b59064e6603bc/src%2Ftest%2Fui%2Fsymbol-names%2Fverbose.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fverbose.rs?ref=75d9a0ae210dcd078b3985e3550b59064e6603bc", "patch": "@@ -0,0 +1,15 @@\n+// Regression test for issue #57596, where -Zverbose flag unintentionally\n+// affected produced symbols making it impossible to link between crates\n+// with a different value of the flag (for symbols involving generic\n+// arguments equal to defaults of their respective parameters).\n+//\n+// build-pass\n+// compile-flags: -Zverbose\n+\n+pub fn error(msg: String) -> Box<dyn std::error::Error> {\n+  msg.into()\n+}\n+\n+fn main() {\n+  error(String::new());\n+}"}, {"sha": "02904e99acc3daf39b56ed18aa07e62aeb9492c5", "filename": "src/tools/rust-analyzer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer?ref=75d9a0ae210dcd078b3985e3550b59064e6603bc", "patch": "@@ -1 +1 @@\n-Subproject commit ba330548023607717295f0dfd61b72eda41aa9dd\n+Subproject commit 02904e99acc3daf39b56ed18aa07e62aeb9492c5"}]}