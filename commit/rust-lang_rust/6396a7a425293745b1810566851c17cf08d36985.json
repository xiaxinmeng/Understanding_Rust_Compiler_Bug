{"sha": "6396a7a425293745b1810566851c17cf08d36985", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzOTZhN2E0MjUyOTM3NDViMTgxMDU2Njg1MWMxN2NmMDhkMzY5ODU=", "commit": {"author": {"name": "Daniele D'Orazio", "email": "d.dorazio96@gmail.com", "date": "2019-06-19T12:56:02Z"}, "committer": {"name": "Daniele D'Orazio", "email": "d.dorazio96@gmail.com", "date": "2019-06-21T11:58:22Z"}, "message": "make needless_return work with void functions", "tree": {"sha": "5189a1aa70f6955f0f96abe3df64cba686ebcb4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5189a1aa70f6955f0f96abe3df64cba686ebcb4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6396a7a425293745b1810566851c17cf08d36985", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6396a7a425293745b1810566851c17cf08d36985", "html_url": "https://github.com/rust-lang/rust/commit/6396a7a425293745b1810566851c17cf08d36985", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6396a7a425293745b1810566851c17cf08d36985/comments", "author": {"login": "d-dorazio", "id": 6960399, "node_id": "MDQ6VXNlcjY5NjAzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/6960399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/d-dorazio", "html_url": "https://github.com/d-dorazio", "followers_url": "https://api.github.com/users/d-dorazio/followers", "following_url": "https://api.github.com/users/d-dorazio/following{/other_user}", "gists_url": "https://api.github.com/users/d-dorazio/gists{/gist_id}", "starred_url": "https://api.github.com/users/d-dorazio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/d-dorazio/subscriptions", "organizations_url": "https://api.github.com/users/d-dorazio/orgs", "repos_url": "https://api.github.com/users/d-dorazio/repos", "events_url": "https://api.github.com/users/d-dorazio/events{/privacy}", "received_events_url": "https://api.github.com/users/d-dorazio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "d-dorazio", "id": 6960399, "node_id": "MDQ6VXNlcjY5NjAzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/6960399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/d-dorazio", "html_url": "https://github.com/d-dorazio", "followers_url": "https://api.github.com/users/d-dorazio/followers", "following_url": "https://api.github.com/users/d-dorazio/following{/other_user}", "gists_url": "https://api.github.com/users/d-dorazio/gists{/gist_id}", "starred_url": "https://api.github.com/users/d-dorazio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/d-dorazio/subscriptions", "organizations_url": "https://api.github.com/users/d-dorazio/orgs", "repos_url": "https://api.github.com/users/d-dorazio/repos", "events_url": "https://api.github.com/users/d-dorazio/events{/privacy}", "received_events_url": "https://api.github.com/users/d-dorazio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a11ed7b92cc4cf40a4568a8fc1ff54b198c333b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a11ed7b92cc4cf40a4568a8fc1ff54b198c333b", "html_url": "https://github.com/rust-lang/rust/commit/5a11ed7b92cc4cf40a4568a8fc1ff54b198c333b"}], "stats": {"total": 137, "additions": 108, "deletions": 29}, "files": [{"sha": "caeb1e8b9fbb6d114ca451b6f236a4129d5c04f6", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 55, "deletions": 20, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/6396a7a425293745b1810566851c17cf08d36985/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6396a7a425293745b1810566851c17cf08d36985/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=6396a7a425293745b1810566851c17cf08d36985", "patch": "@@ -83,6 +83,12 @@ declare_clippy_lint! {\n     \"needless unit expression\"\n }\n \n+#[derive(PartialEq, Eq, Copy, Clone)]\n+enum RetReplacement {\n+    Empty,\n+    Unit\n+}\n+\n declare_lint_pass!(Return => [NEEDLESS_RETURN, LET_AND_RETURN, UNUSED_UNIT]);\n \n impl Return {\n@@ -91,21 +97,21 @@ impl Return {\n         if let Some(stmt) = block.stmts.last() {\n             match stmt.node {\n                 ast::StmtKind::Expr(ref expr) | ast::StmtKind::Semi(ref expr) => {\n-                    self.check_final_expr(cx, expr, Some(stmt.span));\n+                    self.check_final_expr(cx, expr, Some(stmt.span), RetReplacement::Empty);\n                 },\n                 _ => (),\n             }\n         }\n     }\n \n     // Check a the final expression in a block if it's a return.\n-    fn check_final_expr(&mut self, cx: &EarlyContext<'_>, expr: &ast::Expr, span: Option<Span>) {\n+    fn check_final_expr(&mut self, cx: &EarlyContext<'_>, expr: &ast::Expr, span: Option<Span>, replacement: RetReplacement) {\n         match expr.node {\n             // simple return is always \"bad\"\n-            ast::ExprKind::Ret(Some(ref inner)) => {\n+            ast::ExprKind::Ret(ref inner) => {\n                 // allow `#[cfg(a)] return a; #[cfg(b)] return b;`\n                 if !expr.attrs.iter().any(attr_is_cfg) {\n-                    self.emit_return_lint(cx, span.expect(\"`else return` is not possible\"), inner.span);\n+                    self.emit_return_lint(cx, span.expect(\"`else return` is not possible\"), inner.as_ref().map(|i| i.span), replacement);\n                 }\n             },\n             // a whole block? check it!\n@@ -117,32 +123,61 @@ impl Return {\n             // (except for unit type functions) so we don't match it\n             ast::ExprKind::If(_, ref ifblock, Some(ref elsexpr)) => {\n                 self.check_block_return(cx, ifblock);\n-                self.check_final_expr(cx, elsexpr, None);\n+                self.check_final_expr(cx, elsexpr, None, RetReplacement::Empty);\n             },\n             // a match expr, check all arms\n             ast::ExprKind::Match(_, ref arms) => {\n                 for arm in arms {\n-                    self.check_final_expr(cx, &arm.body, Some(arm.body.span));\n+                    self.check_final_expr(cx, &arm.body, Some(arm.body.span), RetReplacement::Unit);\n                 }\n             },\n             _ => (),\n         }\n     }\n \n-    fn emit_return_lint(&mut self, cx: &EarlyContext<'_>, ret_span: Span, inner_span: Span) {\n-        if in_external_macro(cx.sess(), inner_span) || in_macro_or_desugar(inner_span) {\n-            return;\n-        }\n-        span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded return statement\", |db| {\n-            if let Some(snippet) = snippet_opt(cx, inner_span) {\n-                db.span_suggestion(\n-                    ret_span,\n-                    \"remove `return` as shown\",\n-                    snippet,\n-                    Applicability::MachineApplicable,\n-                );\n+    fn emit_return_lint(&mut self, cx: &EarlyContext<'_>, ret_span: Span, inner_span: Option<Span>, replacement: RetReplacement) {\n+        match inner_span {\n+            Some(inner_span) => {\n+                if in_external_macro(cx.sess(), inner_span) || in_macro_or_desugar(inner_span) {\n+                    return;\n+                }\n+\n+                span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded return statement\", |db| {\n+                    if let Some(snippet) = snippet_opt(cx, inner_span) {\n+                        db.span_suggestion(\n+                            ret_span,\n+                            \"remove `return` as shown\",\n+                            snippet,\n+                            Applicability::MachineApplicable,\n+                        );\n+                    }\n+                })\n+            },\n+            None => {\n+                match replacement {\n+                    RetReplacement::Empty => {\n+                        span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded return statement\", |db| {\n+                            db.span_suggestion(\n+                                ret_span,\n+                                \"remove `return`\",\n+                                String::new(),\n+                                Applicability::MachineApplicable,\n+                            );\n+                        });\n+                    }\n+                    RetReplacement::Unit => {\n+                        span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded return statement\", |db| {\n+                            db.span_suggestion(\n+                                ret_span,\n+                                \"replace `return` with the unit type `()`\",\n+                                \"()\".to_string(),\n+                                Applicability::MachineApplicable,\n+                            );\n+                        });\n+                    }\n+                }\n             }\n-        });\n+        }\n     }\n \n     // Check for \"let x = EXPR; x\"\n@@ -195,7 +230,7 @@ impl EarlyLintPass for Return {\n     fn check_fn(&mut self, cx: &EarlyContext<'_>, kind: FnKind<'_>, decl: &ast::FnDecl, span: Span, _: ast::NodeId) {\n         match kind {\n             FnKind::ItemFn(.., block) | FnKind::Method(.., block) => self.check_block_return(cx, block),\n-            FnKind::Closure(body) => self.check_final_expr(cx, body, Some(body.span)),\n+            FnKind::Closure(body) => self.check_final_expr(cx, body, Some(body.span), RetReplacement::Empty),\n         }\n         if_chain! {\n             if let ast::FunctionRetTy::Ty(ref ty) = decl.output;"}, {"sha": "bc6072202b59b0152d7c3b7f9607d6a36f479a42", "filename": "tests/ui/needless_return.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6396a7a425293745b1810566851c17cf08d36985/tests%2Fui%2Fneedless_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6396a7a425293745b1810566851c17cf08d36985/tests%2Fui%2Fneedless_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.rs?ref=6396a7a425293745b1810566851c17cf08d36985", "patch": "@@ -1,5 +1,9 @@\n #![warn(clippy::needless_return)]\n \n+macro_rules! the_answer {\n+    () => (42)\n+}\n+\n fn test_end_of_fn() -> bool {\n     if true {\n         // no error!\n@@ -36,6 +40,22 @@ fn test_closure() {\n     let _ = || return true;\n }\n \n+fn test_macro_call() -> i32 {\n+    return the_answer!();\n+}\n+\n+fn test_void_fun() {\n+    return;\n+}\n+\n+fn test_void_if_fun(b: bool) {\n+    if b {\n+        return;\n+    } else {\n+        return;\n+    }\n+}\n+\n fn main() {\n     let _ = test_end_of_fn();\n     let _ = test_no_semicolon();"}, {"sha": "71646f32dfb9913ef84fa142c084f01985a22def", "filename": "tests/ui/needless_return.stderr", "status": "modified", "additions": 33, "deletions": 9, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6396a7a425293745b1810566851c17cf08d36985/tests%2Fui%2Fneedless_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6396a7a425293745b1810566851c17cf08d36985/tests%2Fui%2Fneedless_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.stderr?ref=6396a7a425293745b1810566851c17cf08d36985", "patch": "@@ -1,52 +1,76 @@\n error: unneeded return statement\n-  --> $DIR/needless_return.rs:8:5\n+  --> $DIR/needless_return.rs:12:5\n    |\n LL |     return true;\n    |     ^^^^^^^^^^^^ help: remove `return` as shown: `true`\n    |\n    = note: `-D clippy::needless-return` implied by `-D warnings`\n \n error: unneeded return statement\n-  --> $DIR/needless_return.rs:12:5\n+  --> $DIR/needless_return.rs:16:5\n    |\n LL |     return true;\n    |     ^^^^^^^^^^^^ help: remove `return` as shown: `true`\n \n error: unneeded return statement\n-  --> $DIR/needless_return.rs:17:9\n+  --> $DIR/needless_return.rs:21:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^^ help: remove `return` as shown: `true`\n \n error: unneeded return statement\n-  --> $DIR/needless_return.rs:19:9\n+  --> $DIR/needless_return.rs:23:9\n    |\n LL |         return false;\n    |         ^^^^^^^^^^^^^ help: remove `return` as shown: `false`\n \n error: unneeded return statement\n-  --> $DIR/needless_return.rs:25:17\n+  --> $DIR/needless_return.rs:29:17\n    |\n LL |         true => return false,\n    |                 ^^^^^^^^^^^^ help: remove `return` as shown: `false`\n \n error: unneeded return statement\n-  --> $DIR/needless_return.rs:27:13\n+  --> $DIR/needless_return.rs:31:13\n    |\n LL |             return true;\n    |             ^^^^^^^^^^^^ help: remove `return` as shown: `true`\n \n error: unneeded return statement\n-  --> $DIR/needless_return.rs:34:9\n+  --> $DIR/needless_return.rs:38:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^^ help: remove `return` as shown: `true`\n \n error: unneeded return statement\n-  --> $DIR/needless_return.rs:36:16\n+  --> $DIR/needless_return.rs:40:16\n    |\n LL |     let _ = || return true;\n    |                ^^^^^^^^^^^ help: remove `return` as shown: `true`\n \n-error: aborting due to 8 previous errors\n+error: unneeded return statement\n+  --> $DIR/needless_return.rs:44:5\n+   |\n+LL |     return the_answer!();\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: unneeded return statement\n+  --> $DIR/needless_return.rs:48:5\n+   |\n+LL |     return;\n+   |     ^^^^^^^ help: remove `return`\n+\n+error: unneeded return statement\n+  --> $DIR/needless_return.rs:53:9\n+   |\n+LL |         return;\n+   |         ^^^^^^^ help: remove `return`\n+\n+error: unneeded return statement\n+  --> $DIR/needless_return.rs:55:9\n+   |\n+LL |         return;\n+   |         ^^^^^^^ help: remove `return`\n+\n+error: aborting due to 12 previous errors\n "}]}