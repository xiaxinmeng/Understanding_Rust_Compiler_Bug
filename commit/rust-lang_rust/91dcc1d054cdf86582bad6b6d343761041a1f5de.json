{"sha": "91dcc1d054cdf86582bad6b6d343761041a1f5de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxZGNjMWQwNTRjZGY4NjU4MmJhZDZiNmQzNDM3NjEwNDFhMWY1ZGU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-10T08:32:35Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-10T08:32:35Z"}, "message": "stdlib: Add missing unsafe.rs. Puts out burning tinderbox.", "tree": {"sha": "b6c0bbb16c81a973370caff421e1931f224ea16d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6c0bbb16c81a973370caff421e1931f224ea16d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91dcc1d054cdf86582bad6b6d343761041a1f5de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91dcc1d054cdf86582bad6b6d343761041a1f5de", "html_url": "https://github.com/rust-lang/rust/commit/91dcc1d054cdf86582bad6b6d343761041a1f5de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91dcc1d054cdf86582bad6b6d343761041a1f5de/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7efb9426394ce5854b906bd3d7394bfc2228a9d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7efb9426394ce5854b906bd3d7394bfc2228a9d0", "html_url": "https://github.com/rust-lang/rust/commit/7efb9426394ce5854b906bd3d7394bfc2228a9d0"}], "stats": {"total": 9, "additions": 9, "deletions": 0}, "files": [{"sha": "11068b87e48415e7d5c997990d9831038f1b2d2f", "filename": "src/lib/unsafe.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/91dcc1d054cdf86582bad6b6d343761041a1f5de/src%2Flib%2Funsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91dcc1d054cdf86582bad6b6d343761041a1f5de/src%2Flib%2Funsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Funsafe.rs?ref=91dcc1d054cdf86582bad6b6d343761041a1f5de", "patch": "@@ -0,0 +1,9 @@\n+// Unsafe operations.\n+\n+native \"rust-intrinsic\" mod rusti {\n+    fn cast[T,U](&T src) -> U;\n+}\n+\n+// Casts the value at `src` to U. The two types must have the same length.\n+fn reinterpret_cast[T,U](&T src) -> U { ret rusti::cast(src); }\n+"}]}