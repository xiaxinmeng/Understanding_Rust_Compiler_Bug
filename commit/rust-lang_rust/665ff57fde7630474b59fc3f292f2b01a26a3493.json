{"sha": "665ff57fde7630474b59fc3f292f2b01a26a3493", "node_id": "C_kwDOAAsO6NoAKDY2NWZmNTdmZGU3NjMwNDc0YjU5ZmMzZjI5MmYyYjAxYTI2YTM0OTM", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2021-10-30T04:22:19Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2021-10-30T04:22:19Z"}, "message": "Remove expects from FullInt Partial{Ord,Eq}", "tree": {"sha": "1380eb56988bbf2eccc69ad3d88a9d8c2946dfc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1380eb56988bbf2eccc69ad3d88a9d8c2946dfc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/665ff57fde7630474b59fc3f292f2b01a26a3493", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/665ff57fde7630474b59fc3f292f2b01a26a3493", "html_url": "https://github.com/rust-lang/rust/commit/665ff57fde7630474b59fc3f292f2b01a26a3493", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/665ff57fde7630474b59fc3f292f2b01a26a3493/comments", "author": null, "committer": null, "parents": [{"sha": "4c70c182c092c4b12c6bc737b808d024ffea6165", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c70c182c092c4b12c6bc737b808d024ffea6165", "html_url": "https://github.com/rust-lang/rust/commit/4c70c182c092c4b12c6bc737b808d024ffea6165"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "3b718d64ce60fa38d7b4d56243287dd03bd7f64d", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/665ff57fde7630474b59fc3f292f2b01a26a3493/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665ff57fde7630474b59fc3f292f2b01a26a3493/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=665ff57fde7630474b59fc3f292f2b01a26a3493", "patch": "@@ -246,27 +246,26 @@ impl FullInt {\n impl PartialEq for FullInt {\n     #[must_use]\n     fn eq(&self, other: &Self) -> bool {\n-        self.partial_cmp(other).expect(\"`partial_cmp` only returns `Some(_)`\") == Ordering::Equal\n+        self.cmp(other) == Ordering::Equal\n     }\n }\n \n impl PartialOrd for FullInt {\n     #[must_use]\n     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n-        Some(match (self, other) {\n-            (&Self::S(s), &Self::S(o)) => s.cmp(&o),\n-            (&Self::U(s), &Self::U(o)) => s.cmp(&o),\n-            (&Self::S(s), &Self::U(o)) => Self::cmp_s_u(s, o),\n-            (&Self::U(s), &Self::S(o)) => Self::cmp_s_u(o, s).reverse(),\n-        })\n+        Some(self.cmp(other))\n     }\n }\n \n impl Ord for FullInt {\n     #[must_use]\n     fn cmp(&self, other: &Self) -> Ordering {\n-        self.partial_cmp(other)\n-            .expect(\"`partial_cmp` for FullInt can never return `None`\")\n+        match (self, other) {\n+            (&Self::S(s), &Self::S(o)) => s.cmp(&o),\n+            (&Self::U(s), &Self::U(o)) => s.cmp(&o),\n+            (&Self::S(s), &Self::U(o)) => Self::cmp_s_u(s, o),\n+            (&Self::U(s), &Self::S(o)) => Self::cmp_s_u(o, s).reverse(),\n+        }\n     }\n }\n "}]}