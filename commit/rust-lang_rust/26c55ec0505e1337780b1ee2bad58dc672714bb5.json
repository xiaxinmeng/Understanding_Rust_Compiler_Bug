{"sha": "26c55ec0505e1337780b1ee2bad58dc672714bb5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2YzU1ZWMwNTA1ZTEzMzc3ODBiMWVlMmJhZDU4ZGM2NzI3MTRiYjU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-24T18:09:18Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-02T20:48:07Z"}, "message": "fix casts from fat pointers", "tree": {"sha": "e0ee06b7b336bffd84cc2f96ee3aa7a9cd05ec11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0ee06b7b336bffd84cc2f96ee3aa7a9cd05ec11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26c55ec0505e1337780b1ee2bad58dc672714bb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26c55ec0505e1337780b1ee2bad58dc672714bb5", "html_url": "https://github.com/rust-lang/rust/commit/26c55ec0505e1337780b1ee2bad58dc672714bb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26c55ec0505e1337780b1ee2bad58dc672714bb5/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "780e1fc5df22d5b6971553048f1ad7dbc0bb41ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/780e1fc5df22d5b6971553048f1ad7dbc0bb41ec", "html_url": "https://github.com/rust-lang/rust/commit/780e1fc5df22d5b6971553048f1ad7dbc0bb41ec"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "72def95de895d8737fec0ac2ec50d4f98968eb6b", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/26c55ec0505e1337780b1ee2bad58dc672714bb5/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c55ec0505e1337780b1ee2bad58dc672714bb5/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=26c55ec0505e1337780b1ee2bad58dc672714bb5", "patch": "@@ -111,9 +111,13 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 )\n         }\n \n-        // Handle cast the metadata away from a fat pointer.\n-        if dest_layout.size != src.layout.size {\n+        // Handle casting the metadata away from a fat pointer.\n+        if src.layout.ty.is_unsafe_ptr() && dest_layout.ty.is_unsafe_ptr() &&\n+            dest_layout.size != src.layout.size\n+        {\n+            assert_eq!(src.layout.size, 2*self.memory.pointer_size());\n             assert_eq!(dest_layout.size, self.memory.pointer_size());\n+            assert!(dest_layout.ty.is_unsafe_ptr());\n             return match *src {\n                 Immediate::ScalarPair(data, _) => Ok(data.into()),\n                 Immediate::Scalar(..) =>\n@@ -124,6 +128,15 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             };\n         }\n \n+        // Handle casting reference to raw ptr or raw to other raw (might be a fat ptr).\n+        if (src.layout.ty.is_region_ptr() || src.layout.ty.is_unsafe_ptr()) &&\n+            dest_layout.ty.is_unsafe_ptr()\n+        {\n+            // The only possible size-unequal case was handled above.\n+            assert_eq!(src.layout.size, dest_layout.size);\n+            return Ok(*src);\n+        }\n+\n         // Handle cast from a univariant (ZST) enum\n         match src.layout.variants {\n             layout::Variants::Single { index } => {"}]}