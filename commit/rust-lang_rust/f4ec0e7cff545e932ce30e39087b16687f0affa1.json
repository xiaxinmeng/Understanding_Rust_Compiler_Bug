{"sha": "f4ec0e7cff545e932ce30e39087b16687f0affa1", "node_id": "C_kwDOAAsO6NoAKGY0ZWMwZTdjZmY1NDVlOTMyY2UzMGUzOTA4N2IxNjY4N2YwYWZmYTE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-22T19:28:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-22T19:28:05Z"}, "message": "Auto merge of #96322 - matthiaskrgr:rollup-9xejxrf, r=matthiaskrgr\n\nRollup of 3 pull requests\n\nSuccessful merges:\n\n - #96272 (Update `validate_uninhabited_zsts.rs` test after MIR building changes)\n - #96273 (Make `E0117` error clear)\n - #96315 (Make the lifetime accurate which is used in the region constraints part)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "927eb5a897050dffc9f81df65ff85b00f9e34997", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/927eb5a897050dffc9f81df65ff85b00f9e34997"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4ec0e7cff545e932ce30e39087b16687f0affa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4ec0e7cff545e932ce30e39087b16687f0affa1", "html_url": "https://github.com/rust-lang/rust/commit/f4ec0e7cff545e932ce30e39087b16687f0affa1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4ec0e7cff545e932ce30e39087b16687f0affa1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ffebc2cb3a089c27a4c7da13d09fd2365c288aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ffebc2cb3a089c27a4c7da13d09fd2365c288aa", "html_url": "https://github.com/rust-lang/rust/commit/5ffebc2cb3a089c27a4c7da13d09fd2365c288aa"}, {"sha": "eeed267215700bbbce422a6df6023193e0da3c9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/eeed267215700bbbce422a6df6023193e0da3c9e", "html_url": "https://github.com/rust-lang/rust/commit/eeed267215700bbbce422a6df6023193e0da3c9e"}], "stats": {"total": 164, "additions": 94, "deletions": 70}, "files": [{"sha": "c19a39c393f799f3c926d4ac3aa8e5c6f0c447d1", "filename": "compiler/rustc_borrowck/src/constraints/graph.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f4ec0e7cff545e932ce30e39087b16687f0affa1/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ec0e7cff545e932ce30e39087b16687f0affa1/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fgraph.rs?ref=f4ec0e7cff545e932ce30e39087b16687f0affa1", "patch": "@@ -190,7 +190,7 @@ impl<'s, 'tcx, D: ConstraintGraphDirecton> RegionGraph<'s, 'tcx, D> {\n \n     /// Given a region `R`, iterate over all regions `R1` such that\n     /// there exists a constraint `R: R1`.\n-    crate fn outgoing_regions(&self, region_sup: RegionVid) -> Successors<'_, 'tcx, D> {\n+    crate fn outgoing_regions(&self, region_sup: RegionVid) -> Successors<'s, 'tcx, D> {\n         Successors {\n             edges: self.constraint_graph.outgoing_edges(region_sup, self.set, self.static_region),\n         }\n@@ -225,10 +225,7 @@ impl<'s, 'tcx, D: ConstraintGraphDirecton> graph::WithSuccessors for RegionGraph\n     }\n }\n \n-impl<'s, 'graph, 'tcx, D: ConstraintGraphDirecton> graph::GraphSuccessors<'graph>\n-    for RegionGraph<'s, 'tcx, D>\n-{\n+impl<'s, 'tcx, D: ConstraintGraphDirecton> graph::GraphSuccessors<'_> for RegionGraph<'s, 'tcx, D> {\n     type Item = RegionVid;\n-    // FIXME - why can't this be `'graph, 'tcx`\n-    type Iter = Successors<'graph, 'graph, D>;\n+    type Iter = Successors<'s, 'tcx, D>;\n }"}, {"sha": "19e68f0b14f4f23934dba64e53f2a41e36a521d7", "filename": "compiler/rustc_typeck/src/coherence/orphan.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f4ec0e7cff545e932ce30e39087b16687f0affa1/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ec0e7cff545e932ce30e39087b16687f0affa1/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs?ref=f4ec0e7cff545e932ce30e39087b16687f0affa1", "patch": "@@ -50,6 +50,7 @@ fn orphan_check_impl(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Result<(), ErrorGua\n             tcx,\n             sp,\n             tr.path.span,\n+            trait_ref.self_ty(),\n             impl_.self_ty.span,\n             &impl_.generics,\n             err,\n@@ -201,18 +202,23 @@ fn emit_orphan_check_error<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     sp: Span,\n     trait_span: Span,\n+    self_ty: Ty<'tcx>,\n     self_ty_span: Span,\n     generics: &hir::Generics<'tcx>,\n     err: traits::OrphanCheckErr<'tcx>,\n ) -> Result<!, ErrorGuaranteed> {\n     Err(match err {\n         traits::OrphanCheckErr::NonLocalInputType(tys) => {\n+            let msg = match self_ty.kind() {\n+                ty::Adt(..) => \"can be implemented for types defined outside of the crate\",\n+                _ if self_ty.is_primitive() => \"can be implemented for primitive types\",\n+                _ => \"can be implemented for arbitrary types\",\n+            };\n             let mut err = struct_span_err!(\n                 tcx.sess,\n                 sp,\n                 E0117,\n-                \"only traits defined in the current crate can be implemented for \\\n-                        arbitrary types\"\n+                \"only traits defined in the current crate {msg}\"\n             );\n             err.span_label(sp, \"impl doesn't use only types from inside the current crate\");\n             for (ty, is_target_ty) in &tys {"}, {"sha": "fe4b5b410789572e32aaae7e0a003c16eb51df1e", "filename": "src/test/ui/coherence/coherence-cow.re_a.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_a.stderr?ref=f4ec0e7cff545e932ce30e39087b16687f0affa1", "patch": "@@ -1,4 +1,4 @@\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+error[E0117]: only traits defined in the current crate can be implemented for types defined outside of the crate\n   --> $DIR/coherence-cow.rs:18:1\n    |\n LL | impl<T> Remote for Pair<T,Cover<T>> { }"}, {"sha": "da4ede3251ed83729fcfddde25d482c2b91df15b", "filename": "src/test/ui/coherence/coherence-cow.re_b.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_b.stderr?ref=f4ec0e7cff545e932ce30e39087b16687f0affa1", "patch": "@@ -1,4 +1,4 @@\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+error[E0117]: only traits defined in the current crate can be implemented for types defined outside of the crate\n   --> $DIR/coherence-cow.rs:22:1\n    |\n LL | impl<T> Remote for Pair<Cover<T>,T> { }"}, {"sha": "d1a20c0ca101b99e1f597e1957438ba5c72edc8c", "filename": "src/test/ui/coherence/coherence-cow.re_c.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cow.re_c.stderr?ref=f4ec0e7cff545e932ce30e39087b16687f0affa1", "patch": "@@ -1,4 +1,4 @@\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+error[E0117]: only traits defined in the current crate can be implemented for types defined outside of the crate\n   --> $DIR/coherence-cow.rs:26:1\n    |\n LL | impl<T,U> Remote for Pair<Cover<T>,U> { }"}, {"sha": "b3ca354c633aade9e89e5bfa9d21eba1407121a2", "filename": "src/test/ui/coherence/coherence-impls-copy.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.stderr?ref=f4ec0e7cff545e932ce30e39087b16687f0affa1", "patch": "@@ -1,4 +1,4 @@\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+error[E0117]: only traits defined in the current crate can be implemented for primitive types\n   --> $DIR/coherence-impls-copy.rs:5:1\n    |\n LL | impl Copy for i32 {}"}, {"sha": "01f166a21f7683aee5f4d7678f0ec5d598eb30dd", "filename": "src/test/ui/coherence/coherence-orphan.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.stderr?ref=f4ec0e7cff545e932ce30e39087b16687f0affa1", "patch": "@@ -1,4 +1,4 @@\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+error[E0117]: only traits defined in the current crate can be implemented for primitive types\n   --> $DIR/coherence-orphan.rs:10:1\n    |\n LL | impl TheTrait<usize> for isize { }\n@@ -10,7 +10,7 @@ LL | impl TheTrait<usize> for isize { }\n    |\n    = note: define and implement a trait or new type instead\n \n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+error[E0117]: only traits defined in the current crate can be implemented for types defined outside of the crate\n   --> $DIR/coherence-orphan.rs:17:1\n    |\n LL | impl !Send for Vec<isize> { }"}, {"sha": "15c92dfeb07d73d26bc9ab2b6961c5fa5d2a2e07", "filename": "src/test/ui/coherence/coherence-overlapping-pairs.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlapping-pairs.stderr?ref=f4ec0e7cff545e932ce30e39087b16687f0affa1", "patch": "@@ -1,4 +1,4 @@\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+error[E0117]: only traits defined in the current crate can be implemented for types defined outside of the crate\n   --> $DIR/coherence-overlapping-pairs.rs:8:1\n    |\n LL | impl<T> Remote for lib::Pair<T,Foo> { }"}, {"sha": "03d787123812874dd36776e8534131e79af04800", "filename": "src/test/ui/coherence/coherence-pair-covered-uncovered-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered-1.stderr?ref=f4ec0e7cff545e932ce30e39087b16687f0affa1", "patch": "@@ -1,4 +1,4 @@\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+error[E0117]: only traits defined in the current crate can be implemented for primitive types\n   --> $DIR/coherence-pair-covered-uncovered-1.rs:12:1\n    |\n LL | impl<T, U> Remote1<Pair<T, Local<U>>> for i32 { }"}, {"sha": "73dfe2f572ae3e205c55d8b85d6566401f23b3ac", "filename": "src/test/ui/coherence/coherence-pair-covered-uncovered.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-pair-covered-uncovered.stderr?ref=f4ec0e7cff545e932ce30e39087b16687f0affa1", "patch": "@@ -1,4 +1,4 @@\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+error[E0117]: only traits defined in the current crate can be implemented for types defined outside of the crate\n   --> $DIR/coherence-pair-covered-uncovered.rs:8:1\n    |\n LL | impl<T,U> Remote for Pair<T,Local<U>> { }"}, {"sha": "95fdf172ec255404e54378bd1dcb6837b7c8d48d", "filename": "src/test/ui/coherence/coherence-vec-local-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local-2.stderr?ref=f4ec0e7cff545e932ce30e39087b16687f0affa1", "patch": "@@ -1,4 +1,4 @@\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+error[E0117]: only traits defined in the current crate can be implemented for types defined outside of the crate\n   --> $DIR/coherence-vec-local-2.rs:11:1\n    |\n LL | impl<T> Remote for Vec<Local<T>> { }"}, {"sha": "4835e771abd3bf807d77609c75e175ba9097063c", "filename": "src/test/ui/coherence/coherence-vec-local.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-vec-local.stderr?ref=f4ec0e7cff545e932ce30e39087b16687f0affa1", "patch": "@@ -1,4 +1,4 @@\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+error[E0117]: only traits defined in the current crate can be implemented for types defined outside of the crate\n   --> $DIR/coherence-vec-local.rs:11:1\n    |\n LL | impl Remote for Vec<Local> { }"}, {"sha": "afc6fc45d0e03f890f5e9c5c020c2fd68f9c7bb4", "filename": "src/test/ui/coherence/coherence_local_err_struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_err_struct.stderr?ref=f4ec0e7cff545e932ce30e39087b16687f0affa1", "patch": "@@ -1,4 +1,4 @@\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+error[E0117]: only traits defined in the current crate can be implemented for types defined outside of the crate\n   --> $DIR/coherence_local_err_struct.rs:14:1\n    |\n LL | impl lib::MyCopy for lib::MyStruct<MyType> { }"}, {"sha": "93f7a6fdc25d34eb43be6bb0832b416fd415e6da", "filename": "src/test/ui/coherence/impl-foreign-for-foreign.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign.stderr?ref=f4ec0e7cff545e932ce30e39087b16687f0affa1", "patch": "@@ -1,4 +1,4 @@\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+error[E0117]: only traits defined in the current crate can be implemented for primitive types\n   --> $DIR/impl-foreign-for-foreign.rs:10:1\n    |\n LL | impl Remote for i32 {"}, {"sha": "e24537bce229a5f4942b6306a06c48efb599c9ef", "filename": "src/test/ui/coherence/impl-foreign-for-foreign[foreign].stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign%5Bforeign%5D.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign%5Bforeign%5D.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-foreign%5Bforeign%5D.stderr?ref=f4ec0e7cff545e932ce30e39087b16687f0affa1", "patch": "@@ -1,4 +1,4 @@\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+error[E0117]: only traits defined in the current crate can be implemented for primitive types\n   --> $DIR/impl-foreign-for-foreign[foreign].rs:10:1\n    |\n LL | impl Remote1<Rc<i32>> for i32 {\n@@ -10,7 +10,7 @@ LL | impl Remote1<Rc<i32>> for i32 {\n    |\n    = note: define and implement a trait or new type instead\n \n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+error[E0117]: only traits defined in the current crate can be implemented for primitive types\n   --> $DIR/impl-foreign-for-foreign[foreign].rs:14:1\n    |\n LL | impl Remote1<Rc<Local>> for f64 {\n@@ -22,7 +22,7 @@ LL | impl Remote1<Rc<Local>> for f64 {\n    |\n    = note: define and implement a trait or new type instead\n \n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+error[E0117]: only traits defined in the current crate can be implemented for primitive types\n   --> $DIR/impl-foreign-for-foreign[foreign].rs:18:1\n    |\n LL | impl<T> Remote1<Rc<T>> for f32 {"}, {"sha": "55ea4409e6f362f9b7037308b3298b9f61359d16", "filename": "src/test/ui/coherence/impl-foreign-for-fundamental[foreign].stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-fundamental%5Bforeign%5D.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-fundamental%5Bforeign%5D.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-fundamental%5Bforeign%5D.stderr?ref=f4ec0e7cff545e932ce30e39087b16687f0affa1", "patch": "@@ -1,4 +1,4 @@\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+error[E0117]: only traits defined in the current crate can be implemented for types defined outside of the crate\n   --> $DIR/impl-foreign-for-fundamental[foreign].rs:10:1\n    |\n LL | impl Remote for Box<i32> {\n@@ -10,7 +10,7 @@ LL | impl Remote for Box<i32> {\n    |\n    = note: define and implement a trait or new type instead\n \n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+error[E0117]: only traits defined in the current crate can be implemented for types defined outside of the crate\n   --> $DIR/impl-foreign-for-fundamental[foreign].rs:14:1\n    |\n LL | impl<T> Remote for Box<Rc<T>> {"}, {"sha": "65b3aa394a85f756e942841fa000c0d0822c0f6e", "filename": "src/test/ui/coherence/impl-foreign[foreign]-for-foreign.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bforeign%5D-for-foreign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bforeign%5D-for-foreign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bforeign%5D-for-foreign.stderr?ref=f4ec0e7cff545e932ce30e39087b16687f0affa1", "patch": "@@ -1,4 +1,4 @@\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+error[E0117]: only traits defined in the current crate can be implemented for primitive types\n   --> $DIR/impl-foreign[foreign]-for-foreign.rs:10:1\n    |\n LL | impl Remote1<u32> for f64 {"}, {"sha": "8e77c13e1116aef74a36dcd8f9fe2542d5bc2277", "filename": "src/test/ui/coherence/impl-foreign[fundemental[foreign]]-for-foreign.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bfundemental%5Bforeign%5D%5D-for-foreign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bfundemental%5Bforeign%5D%5D-for-foreign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign%5Bfundemental%5Bforeign%5D%5D-for-foreign.stderr?ref=f4ec0e7cff545e932ce30e39087b16687f0affa1", "patch": "@@ -1,4 +1,4 @@\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+error[E0117]: only traits defined in the current crate can be implemented for primitive types\n   --> $DIR/impl-foreign[fundemental[foreign]]-for-foreign.rs:11:1\n    |\n LL | impl Remote1<Box<String>> for i32 {\n@@ -11,7 +11,7 @@ LL | impl Remote1<Box<String>> for i32 {\n    |\n    = note: define and implement a trait or new type instead\n \n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+error[E0117]: only traits defined in the current crate can be implemented for primitive types\n   --> $DIR/impl-foreign[fundemental[foreign]]-for-foreign.rs:15:1\n    |\n LL | impl Remote1<Box<Rc<i32>>> for f64 {\n@@ -24,7 +24,7 @@ LL | impl Remote1<Box<Rc<i32>>> for f64 {\n    |\n    = note: define and implement a trait or new type instead\n \n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+error[E0117]: only traits defined in the current crate can be implemented for primitive types\n   --> $DIR/impl-foreign[fundemental[foreign]]-for-foreign.rs:19:1\n    |\n LL | impl<T> Remote1<Box<Rc<T>>> for f32 {"}, {"sha": "92346c29198cede287a0edafea079342fd0578cb", "filename": "src/test/ui/coherence/impl[t]-foreign-for-foreign[t].stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign-for-foreign%5Bt%5D.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign-for-foreign%5Bt%5D.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign-for-foreign%5Bt%5D.stderr?ref=f4ec0e7cff545e932ce30e39087b16687f0affa1", "patch": "@@ -1,4 +1,4 @@\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+error[E0117]: only traits defined in the current crate can be implemented for types defined outside of the crate\n   --> $DIR/impl[t]-foreign-for-foreign[t].rs:11:1\n    |\n LL | impl Remote for Rc<Local> {\n@@ -9,7 +9,7 @@ LL | impl Remote for Rc<Local> {\n    |\n    = note: define and implement a trait or new type instead\n \n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+error[E0117]: only traits defined in the current crate can be implemented for types defined outside of the crate\n   --> $DIR/impl[t]-foreign-for-foreign[t].rs:16:1\n    |\n LL | impl<T> Remote for Arc<T> {"}, {"sha": "65ab1b02b3587d3cbbae56c1946f5e07c4db2f4e", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.32bit.stderr", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr?ref=f4ec0e7cff545e932ce30e39087b16687f0affa1", "patch": "@@ -7,14 +7,17 @@ LL |     unsafe { std::mem::transmute(()) }\n    |              transmuting to uninhabited type\n    |              inside `foo` at $DIR/validate_uninhabited_zsts.rs:4:14\n ...\n-LL | const FOO: [Empty; 3] = [foo(); 3];\n-   |                          ----- inside `FOO` at $DIR/validate_uninhabited_zsts.rs:13:26\n+LL | const FOO: [empty::Empty; 3] = [foo(); 3];\n+   |                                 ----- inside `FOO` at $DIR/validate_uninhabited_zsts.rs:20:33\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/validate_uninhabited_zsts.rs:16:35\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/validate_uninhabited_zsts.rs:23:1\n+   |\n+LL | const BAR: [empty::Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed at [0].0: encountered a value of uninhabited type empty::Void\n    |\n-LL | const BAR: [Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^ transmuting to uninhabited type\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 0, align: 1) {}\n \n warning: the type `!` does not permit zero-initialization\n   --> $DIR/validate_uninhabited_zsts.rs:4:14\n@@ -28,16 +31,20 @@ LL |     unsafe { std::mem::transmute(()) }\n    = note: `#[warn(invalid_value)]` on by default\n    = note: the `!` type has no valid value\n \n-warning: the type `Empty` does not permit zero-initialization\n-  --> $DIR/validate_uninhabited_zsts.rs:16:35\n+warning: the type `empty::Empty` does not permit zero-initialization\n+  --> $DIR/validate_uninhabited_zsts.rs:23:42\n+   |\n+LL | const BAR: [empty::Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                          |\n+   |                                          this code causes undefined behavior when executed\n+   |                                          help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-LL | const BAR: [Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^\n-   |                                   |\n-   |                                   this code causes undefined behavior when executed\n-   |                                   help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n+note: enums with no variants have no valid value (in this struct field)\n+  --> $DIR/validate_uninhabited_zsts.rs:16:22\n    |\n-   = note: enums with no variants have no valid value\n+LL |     pub struct Empty(Void);\n+   |                      ^^^^\n \n error: aborting due to 2 previous errors; 2 warnings emitted\n "}, {"sha": "65ab1b02b3587d3cbbae56c1946f5e07c4db2f4e", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.64bit.stderr", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr?ref=f4ec0e7cff545e932ce30e39087b16687f0affa1", "patch": "@@ -7,14 +7,17 @@ LL |     unsafe { std::mem::transmute(()) }\n    |              transmuting to uninhabited type\n    |              inside `foo` at $DIR/validate_uninhabited_zsts.rs:4:14\n ...\n-LL | const FOO: [Empty; 3] = [foo(); 3];\n-   |                          ----- inside `FOO` at $DIR/validate_uninhabited_zsts.rs:13:26\n+LL | const FOO: [empty::Empty; 3] = [foo(); 3];\n+   |                                 ----- inside `FOO` at $DIR/validate_uninhabited_zsts.rs:20:33\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/validate_uninhabited_zsts.rs:16:35\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/validate_uninhabited_zsts.rs:23:1\n+   |\n+LL | const BAR: [empty::Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed at [0].0: encountered a value of uninhabited type empty::Void\n    |\n-LL | const BAR: [Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^ transmuting to uninhabited type\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 0, align: 1) {}\n \n warning: the type `!` does not permit zero-initialization\n   --> $DIR/validate_uninhabited_zsts.rs:4:14\n@@ -28,16 +31,20 @@ LL |     unsafe { std::mem::transmute(()) }\n    = note: `#[warn(invalid_value)]` on by default\n    = note: the `!` type has no valid value\n \n-warning: the type `Empty` does not permit zero-initialization\n-  --> $DIR/validate_uninhabited_zsts.rs:16:35\n+warning: the type `empty::Empty` does not permit zero-initialization\n+  --> $DIR/validate_uninhabited_zsts.rs:23:42\n+   |\n+LL | const BAR: [empty::Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                          |\n+   |                                          this code causes undefined behavior when executed\n+   |                                          help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-LL | const BAR: [Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^\n-   |                                   |\n-   |                                   this code causes undefined behavior when executed\n-   |                                   help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n+note: enums with no variants have no valid value (in this struct field)\n+  --> $DIR/validate_uninhabited_zsts.rs:16:22\n    |\n-   = note: enums with no variants have no valid value\n+LL |     pub struct Empty(Void);\n+   |                      ^^^^\n \n error: aborting due to 2 previous errors; 2 warnings emitted\n "}, {"sha": "96f3312758292e34b8e9cf9a5e9f206de18c8e1e", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.rs?ref=f4ec0e7cff545e932ce30e39087b16687f0affa1", "patch": "@@ -6,16 +6,23 @@ const fn foo() -> ! {\n     //~| WARN the type `!` does not permit zero-initialization [invalid_value]\n }\n \n-#[derive(Clone, Copy)]\n-enum Empty { }\n+// Type defined in a submodule, so that it is not \"visibly\"\n+// uninhabited (which would change interpreter behavior).\n+pub mod empty {\n+    #[derive(Clone, Copy)]\n+    enum Void {}\n+\n+    #[derive(Clone, Copy)]\n+    pub struct Empty(Void);\n+}\n \n #[warn(const_err)]\n-const FOO: [Empty; 3] = [foo(); 3];\n+const FOO: [empty::Empty; 3] = [foo(); 3];\n \n #[warn(const_err)]\n-const BAR: [Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n-//~^ ERROR evaluation of constant value failed\n-//~| WARN the type `Empty` does not permit zero-initialization\n+const BAR: [empty::Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n+//~^ ERROR it is undefined behavior to use this value\n+//~| WARN the type `empty::Empty` does not permit zero-initialization\n \n fn main() {\n     FOO;"}, {"sha": "76d9f5cc0e52a3f8cfdf2b29fd983bd08f8ed4bf", "filename": "src/test/ui/error-codes/E0117.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Ferror-codes%2FE0117.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Ferror-codes%2FE0117.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0117.stderr?ref=f4ec0e7cff545e932ce30e39087b16687f0affa1", "patch": "@@ -1,4 +1,4 @@\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+error[E0117]: only traits defined in the current crate can be implemented for primitive types\n   --> $DIR/E0117.rs:1:1\n    |\n LL | impl Drop for u32 {}"}, {"sha": "dd5099317667307c38ebaac6edae56e645610fd4", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-and-non-const-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-and-non-const-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-and-non-const-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-and-non-const-impl.rs?ref=f4ec0e7cff545e932ce30e39087b16687f0affa1", "patch": "@@ -3,7 +3,7 @@\n pub struct Int(i32);\n \n impl const std::ops::Add for i32 { //~ ERROR type annotations needed\n-    //~^ ERROR only traits defined in the current crate can be implemented for arbitrary types\n+    //~^ ERROR only traits defined in the current crate can be implemented for primitive types\n     type Output = Self;\n \n     fn add(self, rhs: Self) -> Self {"}, {"sha": "9fd82196e79c11836cdd70352ced3100d967f50b", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-and-non-const-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-and-non-const-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-and-non-const-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-and-non-const-impl.stderr?ref=f4ec0e7cff545e932ce30e39087b16687f0affa1", "patch": "@@ -1,4 +1,4 @@\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+error[E0117]: only traits defined in the current crate can be implemented for primitive types\n   --> $DIR/const-and-non-const-impl.rs:5:1\n    |\n LL | impl const std::ops::Add for i32 {"}, {"sha": "fc3778b796745283c6a11c7928efc1f232047b06", "filename": "src/test/ui/typeck/typeck-default-trait-impl-cross-crate-coherence.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-cross-crate-coherence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4ec0e7cff545e932ce30e39087b16687f0affa1/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-cross-crate-coherence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-cross-crate-coherence.stderr?ref=f4ec0e7cff545e932ce30e39087b16687f0affa1", "patch": "@@ -26,7 +26,7 @@ error[E0321]: cross-crate traits with a default impl, like `DefaultedTrait`, can\n LL | impl DefaultedTrait for Box<C> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't implement cross-crate trait for type in another crate\n \n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+error[E0117]: only traits defined in the current crate can be implemented for types defined outside of the crate\n   --> $DIR/typeck-default-trait-impl-cross-crate-coherence.rs:22:1\n    |\n LL | impl DefaultedTrait for lib::Something<C> { }"}]}