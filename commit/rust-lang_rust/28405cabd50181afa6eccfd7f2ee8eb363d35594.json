{"sha": "28405cabd50181afa6eccfd7f2ee8eb363d35594", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4NDA1Y2FiZDUwMTgxYWZhNmVjY2ZkN2YyZWU4ZWIzNjNkMzU1OTQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-05-05T19:15:42Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-05-24T08:49:30Z"}, "message": "rustbuild: Simplify debuginfo configuration", "tree": {"sha": "16d1e6c2276d4749946e6c83cca74ed5ac0a31ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16d1e6c2276d4749946e6c83cca74ed5ac0a31ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28405cabd50181afa6eccfd7f2ee8eb363d35594", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28405cabd50181afa6eccfd7f2ee8eb363d35594", "html_url": "https://github.com/rust-lang/rust/commit/28405cabd50181afa6eccfd7f2ee8eb363d35594", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28405cabd50181afa6eccfd7f2ee8eb363d35594/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46805805abe58c287fa16963f897fd09d5d97467", "url": "https://api.github.com/repos/rust-lang/rust/commits/46805805abe58c287fa16963f897fd09d5d97467", "html_url": "https://github.com/rust-lang/rust/commit/46805805abe58c287fa16963f897fd09d5d97467"}], "stats": {"total": 147, "additions": 65, "deletions": 82}, "files": [{"sha": "361a1b00ae226abd48758c2dbacb8f3844dffba9", "filename": "config.toml.example", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/28405cabd50181afa6eccfd7f2ee8eb363d35594/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/28405cabd50181afa6eccfd7f2ee8eb363d35594/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=28405cabd50181afa6eccfd7f2ee8eb363d35594", "patch": "@@ -301,20 +301,24 @@\n # library.\n #debug-assertions = false\n \n-# Whether or not debuginfo is emitted\n-#debuginfo = false\n+# Debuginfo level for Rust code, corresponds to the `-C debuginfo=N` option of `rustc`.\n+# `0` - no debug info\n+# `1` - line tables only\n+# `2` - full debug info with variable and type information\n+# Can be overriden for specific subsets of Rust code (rustc, std, tools or tests).\n+#debuginfo-level = if debug { 2 } else { 0 }\n \n-# Whether or not line number debug information is emitted\n-#debuginfo-lines = false\n+# Debuginfo level for the compiler.\n+#debuginfo-level-rustc = debuginfo-level\n \n-# Whether or not to only build debuginfo for the standard library if enabled.\n-# If enabled, this will not compile the compiler with debuginfo, just the\n-# standard library.\n-#debuginfo-only-std = false\n+# Debuginfo level for the standard library.\n+#debuginfo-level-std = debuginfo-level\n \n-# Enable debuginfo for the extended tools: cargo, rls, rustfmt\n-# Adding debuginfo makes them several times larger.\n-#debuginfo-tools = false\n+# Debuginfo level for the tools.\n+#debuginfo-level-tools = debuginfo-level\n+\n+# Debuginfo level for the test suites run with compiletest.\n+#debuginfo-level-tests = debuginfo-level\n \n # Whether or not `panic!`s generate backtraces (RUST_BACKTRACE)\n #backtrace = true\n@@ -345,10 +349,8 @@\n # harness are debuggable just from logfiles.\n #verbose-tests = false\n \n-# Flag indicating whether tests are compiled with optimizations (the -O flag) or\n-# with debuginfo (the -g flag)\n+# Flag indicating whether tests are compiled with optimizations (the -O flag)\n #optimize-tests = true\n-#debuginfo-tests = true\n \n # Flag indicating whether codegen tests will be run or not. If you get an error\n # saying that the FileCheck executable is missing, you may want to disable this."}, {"sha": "d51961c65b7aed63b32833e273e2afc4e4b69cf6", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/28405cabd50181afa6eccfd7f2ee8eb363d35594/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28405cabd50181afa6eccfd7f2ee8eb363d35594/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=28405cabd50181afa6eccfd7f2ee8eb363d35594", "patch": "@@ -102,6 +102,10 @@ fn main() {\n \n     cmd.env(\"RUSTC_BREAK_ON_ICE\", \"1\");\n \n+    if let Ok(debuginfo_level) = env::var(\"RUSTC_DEBUGINFO_LEVEL\") {\n+        cmd.arg(format!(\"-Cdebuginfo={}\", debuginfo_level));\n+    }\n+\n     if let Some(target) = target {\n         // The stage0 compiler has a special sysroot distinct from what we\n         // actually downloaded, so we just always pass the `--sysroot` option.\n@@ -169,11 +173,6 @@ fn main() {\n \n         // Set various options from config.toml to configure how we're building\n         // code.\n-        if env::var(\"RUSTC_DEBUGINFO\") == Ok(\"true\".to_string()) {\n-            cmd.arg(\"-g\");\n-        } else if env::var(\"RUSTC_DEBUGINFO_LINES\") == Ok(\"true\".to_string()) {\n-            cmd.arg(\"-Cdebuginfo=1\");\n-        }\n         let debug_assertions = match env::var(\"RUSTC_DEBUG_ASSERTIONS\") {\n             Ok(s) => if s == \"true\" { \"y\" } else { \"n\" },\n             Err(..) => \"n\","}, {"sha": "e616b2647a9f4ea16806d902391b5387b984a7b6", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/28405cabd50181afa6eccfd7f2ee8eb363d35594/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28405cabd50181afa6eccfd7f2ee8eb363d35594/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=28405cabd50181afa6eccfd7f2ee8eb363d35594", "patch": "@@ -970,22 +970,15 @@ impl<'a> Builder<'a> {\n             cargo.env(\"RUSTDOC_LIBDIR\", self.rustc_libdir(compiler));\n         }\n \n-        if mode.is_tool() {\n-            // Tools like cargo and rls don't get debuginfo by default right now, but this can be\n-            // enabled in the config.  Adding debuginfo makes them several times larger.\n-            if self.config.rust_debuginfo_tools {\n-                cargo.env(\"RUSTC_DEBUGINFO\", self.config.rust_debuginfo.to_string());\n-                cargo.env(\n-                    \"RUSTC_DEBUGINFO_LINES\",\n-                    self.config.rust_debuginfo_lines.to_string(),\n-                );\n-            }\n-        } else {\n-            cargo.env(\"RUSTC_DEBUGINFO\", self.config.rust_debuginfo.to_string());\n-            cargo.env(\n-                \"RUSTC_DEBUGINFO_LINES\",\n-                self.config.rust_debuginfo_lines.to_string(),\n-            );\n+        let debuginfo_level = match mode {\n+            Mode::Rustc | Mode::Codegen => self.config.rust_debuginfo_level_rustc,\n+            Mode::Std | Mode::Test => self.config.rust_debuginfo_level_std,\n+            Mode::ToolBootstrap | Mode::ToolStd |\n+            Mode::ToolTest | Mode::ToolRustc => self.config.rust_debuginfo_level_tools,\n+        };\n+        cargo.env(\"RUSTC_DEBUGINFO_LEVEL\", debuginfo_level.to_string());\n+\n+        if !mode.is_tool() {\n             cargo.env(\"RUSTC_FORCE_UNSTABLE\", \"1\");\n \n             // Currently the compiler depends on crates from crates.io, and"}, {"sha": "6c81b6ada2b9fdc066589dde545b87c68a7b9903", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/28405cabd50181afa6eccfd7f2ee8eb363d35594/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28405cabd50181afa6eccfd7f2ee8eb363d35594/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=28405cabd50181afa6eccfd7f2ee8eb363d35594", "patch": "@@ -586,13 +586,6 @@ pub fn rustc_cargo_env(builder: &Builder<'_>, cargo: &mut Command) {\n     let libdir_relative = builder.config.libdir_relative().unwrap_or(Path::new(\"lib\"));\n     cargo.env(\"CFG_LIBDIR_RELATIVE\", libdir_relative);\n \n-    // If we're not building a compiler with debugging information then remove\n-    // these two env vars which would be set otherwise.\n-    if builder.config.rust_debuginfo_only_std {\n-        cargo.env_remove(\"RUSTC_DEBUGINFO\");\n-        cargo.env_remove(\"RUSTC_DEBUGINFO_LINES\");\n-    }\n-\n     if let Some(ref ver_date) = builder.rust_info.commit_date() {\n         cargo.env(\"CFG_VER_DATE\", ver_date);\n     }"}, {"sha": "836a1d13c3053caf1a9316e059771b98b5c4a983", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 29, "deletions": 28, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/28405cabd50181afa6eccfd7f2ee8eb363d35594/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28405cabd50181afa6eccfd7f2ee8eb363d35594/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=28405cabd50181afa6eccfd7f2ee8eb363d35594", "patch": "@@ -96,15 +96,14 @@ pub struct Config {\n     pub rust_codegen_units: Option<u32>,\n     pub rust_codegen_units_std: Option<u32>,\n     pub rust_debug_assertions: bool,\n-    pub rust_debuginfo: bool,\n-    pub rust_debuginfo_lines: bool,\n-    pub rust_debuginfo_only_std: bool,\n-    pub rust_debuginfo_tools: bool,\n+    pub rust_debuginfo_level_rustc: u32,\n+    pub rust_debuginfo_level_std: u32,\n+    pub rust_debuginfo_level_tools: u32,\n+    pub rust_debuginfo_level_tests: u32,\n     pub rust_rpath: bool,\n     pub rustc_parallel: bool,\n     pub rustc_default_linker: Option<String>,\n     pub rust_optimize_tests: bool,\n-    pub rust_debuginfo_tests: bool,\n     pub rust_dist_src: bool,\n     pub rust_codegen_backends: Vec<Interned<String>>,\n     pub rust_codegen_backends_dir: String,\n@@ -300,18 +299,18 @@ struct Rust {\n     codegen_units: Option<u32>,\n     codegen_units_std: Option<u32>,\n     debug_assertions: Option<bool>,\n-    debuginfo: Option<bool>,\n-    debuginfo_lines: Option<bool>,\n-    debuginfo_only_std: Option<bool>,\n-    debuginfo_tools: Option<bool>,\n+    debuginfo_level: Option<u32>,\n+    debuginfo_level_rustc: Option<u32>,\n+    debuginfo_level_std: Option<u32>,\n+    debuginfo_level_tools: Option<u32>,\n+    debuginfo_level_tests: Option<u32>,\n     parallel_compiler: Option<bool>,\n     backtrace: Option<bool>,\n     default_linker: Option<String>,\n     channel: Option<String>,\n     musl_root: Option<String>,\n     rpath: Option<bool>,\n     optimize_tests: Option<bool>,\n-    debuginfo_tests: Option<bool>,\n     codegen_tests: Option<bool>,\n     ignore_git: Option<bool>,\n     debug: Option<bool>,\n@@ -495,12 +494,13 @@ impl Config {\n         // Store off these values as options because if they're not provided\n         // we'll infer default values for them later\n         let mut llvm_assertions = None;\n-        let mut debuginfo_lines = None;\n-        let mut debuginfo_only_std = None;\n-        let mut debuginfo_tools = None;\n         let mut debug = None;\n-        let mut debuginfo = None;\n         let mut debug_assertions = None;\n+        let mut debuginfo_level = None;\n+        let mut debuginfo_level_rustc = None;\n+        let mut debuginfo_level_std = None;\n+        let mut debuginfo_level_tools = None;\n+        let mut debuginfo_level_tests = None;\n         let mut optimize = None;\n         let mut ignore_git = None;\n \n@@ -540,14 +540,14 @@ impl Config {\n         if let Some(ref rust) = toml.rust {\n             debug = rust.debug;\n             debug_assertions = rust.debug_assertions;\n-            debuginfo = rust.debuginfo;\n-            debuginfo_lines = rust.debuginfo_lines;\n-            debuginfo_only_std = rust.debuginfo_only_std;\n-            debuginfo_tools = rust.debuginfo_tools;\n+            debuginfo_level = rust.debuginfo_level;\n+            debuginfo_level_rustc = rust.debuginfo_level_rustc;\n+            debuginfo_level_std = rust.debuginfo_level_std;\n+            debuginfo_level_tools = rust.debuginfo_level_tools;\n+            debuginfo_level_tests = rust.debuginfo_level_tests;\n             optimize = rust.optimize;\n             ignore_git = rust.ignore_git;\n             set(&mut config.rust_optimize_tests, rust.optimize_tests);\n-            set(&mut config.rust_debuginfo_tests, rust.debuginfo_tests);\n             set(&mut config.codegen_tests, rust.codegen_tests);\n             set(&mut config.rust_rpath, rust.rpath);\n             set(&mut config.jemalloc, rust.jemalloc);\n@@ -639,18 +639,19 @@ impl Config {\n         let default = true;\n         config.rust_optimize = optimize.unwrap_or(default);\n \n-        let default = match &config.channel[..] {\n-            \"stable\" | \"beta\" | \"nightly\" => true,\n-            _ => false,\n-        };\n-        config.rust_debuginfo_lines = debuginfo_lines.unwrap_or(default);\n-        config.rust_debuginfo_only_std = debuginfo_only_std.unwrap_or(default);\n-        config.rust_debuginfo_tools = debuginfo_tools.unwrap_or(false);\n-\n         let default = debug == Some(true);\n-        config.rust_debuginfo = debuginfo.unwrap_or(default);\n         config.rust_debug_assertions = debug_assertions.unwrap_or(default);\n \n+        let with_defaults = |debuginfo_level_specific: Option<u32>| {\n+            debuginfo_level_specific\n+                .or(debuginfo_level)\n+                .unwrap_or(if debug == Some(true) { 2 } else { 0 })\n+        };\n+        config.rust_debuginfo_level_rustc = with_defaults(debuginfo_level_rustc);\n+        config.rust_debuginfo_level_std = with_defaults(debuginfo_level_std);\n+        config.rust_debuginfo_level_tools = with_defaults(debuginfo_level_tools);\n+        config.rust_debuginfo_level_tests = with_defaults(debuginfo_level_tests);\n+\n         let default = config.channel == \"dev\";\n         config.ignore_git = ignore_git.unwrap_or(default);\n "}, {"sha": "53d3dbf60d1d7c74a094fead7f66471c133c07ae", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/28405cabd50181afa6eccfd7f2ee8eb363d35594/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/28405cabd50181afa6eccfd7f2ee8eb363d35594/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=28405cabd50181afa6eccfd7f2ee8eb363d35594", "patch": "@@ -37,7 +37,6 @@ def v(*args):\n o(\"optimize-tests\", \"rust.optimize-tests\", \"build tests with optimizations\")\n o(\"parallel-compiler\", \"rust.parallel-compiler\", \"build a multi-threaded rustc\")\n o(\"test-miri\", \"rust.test-miri\", \"run miri's test suite\")\n-o(\"debuginfo-tests\", \"rust.debuginfo-tests\", \"build tests with debugger metadata\")\n o(\"verbose-tests\", \"rust.verbose-tests\", \"enable verbose output when running tests\")\n o(\"ccache\", \"llvm.ccache\", \"invoke gcc/clang via ccache to reuse object files between builds\")\n o(\"sccache\", None, \"invoke gcc/clang via sccache to reuse object files between builds\")\n@@ -77,10 +76,11 @@ def v(*args):\n o(\"llvm-assertions\", \"llvm.assertions\", \"build LLVM with assertions\")\n o(\"debug-assertions\", \"rust.debug-assertions\", \"build with debugging assertions\")\n o(\"llvm-release-debuginfo\", \"llvm.release-debuginfo\", \"build LLVM with debugger metadata\")\n-o(\"debuginfo\", \"rust.debuginfo\", \"build with debugger metadata\")\n-o(\"debuginfo-lines\", \"rust.debuginfo-lines\", \"build with line number debugger metadata\")\n-o(\"debuginfo-only-std\", \"rust.debuginfo-only-std\", \"build only libstd with debugging information\")\n-o(\"debuginfo-tools\", \"rust.debuginfo-tools\", \"build extended tools with debugging information\")\n+o(\"debuginfo-level\", \"rust.debuginfo-level\", \"debuginfo level for Rust code\")\n+o(\"debuginfo-level-rustc\", \"rust.debuginfo-level-rustc\", \"debuginfo level for the compiler\")\n+o(\"debuginfo-level-std\", \"rust.debuginfo-level-std\", \"debuginfo level for the standard library\")\n+o(\"debuginfo-level-tools\", \"rust.debuginfo-level-tools\", \"debuginfo level for the tools\")\n+o(\"debuginfo-level-tests\", \"rust.debuginfo-level-tests\", \"debuginfo level for the test suites run with compiletest\")\n v(\"save-toolstates\", \"rust.save-toolstates\", \"save build and test status of external tools into this file\")\n \n v(\"prefix\", \"install.prefix\", \"set installation prefix\")"}, {"sha": "05b3ce6bc896464c0c127ca6a0a9444219ded7e1", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28405cabd50181afa6eccfd7f2ee8eb363d35594/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28405cabd50181afa6eccfd7f2ee8eb363d35594/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=28405cabd50181afa6eccfd7f2ee8eb363d35594", "patch": "@@ -1078,10 +1078,8 @@ impl Step for Compiletest {\n             if builder.config.rust_optimize_tests {\n                 flags.push(\"-O\".to_string());\n             }\n-            if builder.config.rust_debuginfo_tests {\n-                flags.push(\"-g\".to_string());\n-            }\n         }\n+        flags.push(format!(\"-Cdebuginfo={}\", builder.config.rust_debuginfo_level_tests));\n         flags.push(\"-Zunstable-options\".to_string());\n         flags.push(builder.config.cmd.rustc_args().join(\" \"));\n "}, {"sha": "d723f286fa8890a7b5936474d2e1116333d3be50", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28405cabd50181afa6eccfd7f2ee8eb363d35594/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28405cabd50181afa6eccfd7f2ee8eb363d35594/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=28405cabd50181afa6eccfd7f2ee8eb363d35594", "patch": "@@ -485,10 +485,6 @@ impl Step for Rustdoc {\n             &[],\n         );\n \n-        // Most tools don't get debuginfo, but rustdoc should.\n-        cargo.env(\"RUSTC_DEBUGINFO\", builder.config.rust_debuginfo.to_string())\n-             .env(\"RUSTC_DEBUGINFO_LINES\", builder.config.rust_debuginfo_lines.to_string());\n-\n         let _folder = builder.fold_output(|| format!(\"stage{}-rustdoc\", target_compiler.stage));\n         builder.info(&format!(\"Building rustdoc for stage{} ({})\",\n             target_compiler.stage, target_compiler.host));"}, {"sha": "14ae2ae3b01c17fed98f2c6008c032b7b2d06f1e", "filename": "src/ci/run.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28405cabd50181afa6eccfd7f2ee8eb363d35594/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/28405cabd50181afa6eccfd7f2ee8eb363d35594/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=28405cabd50181afa6eccfd7f2ee8eb363d35594", "patch": "@@ -32,6 +32,7 @@ RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --disable-manage-submodules\"\n RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-locked-deps\"\n RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-cargo-native-static\"\n RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --set rust.codegen-units-std=1\"\n+RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --set rust.debuginfo-level-std=1\"\n \n if [ \"$DIST_SRC\" = \"\" ]; then\n   RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --disable-dist-src\""}]}