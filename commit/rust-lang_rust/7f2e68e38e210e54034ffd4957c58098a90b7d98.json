{"sha": "7f2e68e38e210e54034ffd4957c58098a90b7d98", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmMmU2OGUzOGUyMTBlNTQwMzRmZmQ0OTU3YzU4MDk4YTkwYjdkOTg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-08T13:38:03Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-08T13:38:03Z"}, "message": "Better unimplemented stuff handling", "tree": {"sha": "93ba036468f6d758a62a09865d5dca8983032d67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93ba036468f6d758a62a09865d5dca8983032d67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f2e68e38e210e54034ffd4957c58098a90b7d98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f2e68e38e210e54034ffd4957c58098a90b7d98", "html_url": "https://github.com/rust-lang/rust/commit/7f2e68e38e210e54034ffd4957c58098a90b7d98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f2e68e38e210e54034ffd4957c58098a90b7d98/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b88b4ef09ca293acff898d14ec267c13f2ff3b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b88b4ef09ca293acff898d14ec267c13f2ff3b2", "html_url": "https://github.com/rust-lang/rust/commit/0b88b4ef09ca293acff898d14ec267c13f2ff3b2"}], "stats": {"total": 72, "additions": 43, "deletions": 29}, "files": [{"sha": "b3e63dce4cb148dc26dff9f2398e7677f7eddb7b", "filename": "src/abi.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7f2e68e38e210e54034ffd4957c58098a90b7d98/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f2e68e38e210e54034ffd4957c58098a90b7d98/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=7f2e68e38e210e54034ffd4957c58098a90b7d98", "patch": "@@ -329,6 +329,7 @@ pub fn codegen_call<'a, 'tcx: 'a>(\n             let intrinsic = &intrinsic[..];\n \n             let nil_ty = fx.tcx.mk_nil();\n+            let u64_layout = fx.layout_of(fx.tcx.types.u64);\n             let usize_layout = fx.layout_of(fx.tcx.types.usize);\n             let ret = return_place.expect(\"return place\");\n             match intrinsic {\n@@ -371,7 +372,7 @@ pub fn codegen_call<'a, 'tcx: 'a>(\n                 \"type_id\" => {\n                     assert_eq!(args.len(), 0);\n                     let type_id = fx.tcx.type_id_hash(substs.type_at(0));\n-                    let type_id = CValue::const_val(fx, usize_layout.ty, type_id as i64);\n+                    let type_id = CValue::const_val(fx, u64_layout.ty, type_id as i64);\n                     ret.write_cvalue(fx, type_id);\n                 }\n                 \"min_align_of\" => {\n@@ -518,10 +519,7 @@ pub fn codegen_call<'a, 'tcx: 'a>(\n                     let res = CValue::ByVal(fx.bcx.ins().popcnt(arg), args[0].layout());\n                     ret.write_cvalue(fx, res);\n                 }\n-                _ => fx\n-                    .tcx\n-                    .sess\n-                    .fatal(&format!(\"unsupported intrinsic {}\", intrinsic)),\n+                _ => unimpl!(\"unsupported intrinsic {}\", intrinsic),\n             }\n             if let Some((_, dest)) = *destination {\n                 let ret_ebb = fx.get_ebb(dest);"}, {"sha": "6fc61ca1fa8ae15dc65db684edcb48b1bff8251a", "filename": "src/base.rs", "status": "modified", "additions": 21, "deletions": 23, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7f2e68e38e210e54034ffd4957c58098a90b7d98/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f2e68e38e210e54034ffd4957c58098a90b7d98/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=7f2e68e38e210e54034ffd4957c58098a90b7d98", "patch": "@@ -47,13 +47,7 @@ pub fn trans_mono_item<'a, 'tcx: 'a>(\n                     sig,\n                 );\n \n-                let comments = match trans_fn(cx, &mut f, inst) {\n-                    Ok(comments) => comments,\n-                    Err(err) => {\n-                        tcx.sess.err(&err);\n-                        return;\n-                    }\n-                };\n+                let comments = trans_fn(cx, &mut f, inst);\n \n                 let mut writer = crate::pretty_clif::CommentWriter(comments);\n                 let mut cton = String::new();\n@@ -104,7 +98,7 @@ pub fn trans_fn<'a, 'tcx: 'a>(\n     cx: &mut CodegenCx<'a, 'tcx, CurrentBackend>,\n     f: &mut Function,\n     instance: Instance<'tcx>,\n-) -> Result<HashMap<Inst, String>, String> {\n+) -> HashMap<Inst, String> {\n     let mir = cx.tcx.optimized_mir(instance.def_id());\n     let mut func_ctx = FunctionBuilderContext::new();\n     let mut bcx: FunctionBuilder<Variable> = FunctionBuilder::new(f, &mut func_ctx);\n@@ -145,7 +139,7 @@ pub fn trans_fn<'a, 'tcx: 'a>(\n \n         fx.bcx.ins().nop();\n         for stmt in &bb_data.statements {\n-            trans_stmt(fx, ebb, stmt)?;\n+            trans_stmt(fx, ebb, stmt);\n         }\n \n         let mut terminator_head = \"\\n\".to_string();\n@@ -234,14 +228,14 @@ pub fn trans_fn<'a, 'tcx: 'a>(\n     fx.bcx.seal_all_blocks();\n     fx.bcx.finalize();\n \n-    Ok(fx.comments.clone())\n+    fx.comments.clone()\n }\n \n fn trans_stmt<'a, 'tcx: 'a>(\n     fx: &mut FunctionCx<'a, 'tcx>,\n     cur_ebb: Ebb,\n     stmt: &Statement<'tcx>,\n-) -> Result<(), String> {\n+) {\n     fx.tcx.sess.warn(&format!(\"stmt {:?}\", stmt));\n \n     let inst = fx.bcx.func.layout.last_inst(cur_ebb).unwrap();\n@@ -255,7 +249,7 @@ fn trans_stmt<'a, 'tcx: 'a>(\n             let place = trans_place(fx, place);\n             let layout = place.layout();\n             if layout.for_variant(&*fx, *variant_index).abi == layout::Abi::Uninhabited {\n-                return Ok(());\n+                return;\n             }\n             match layout.variants {\n                 layout::Variants::Single { index } => {\n@@ -402,14 +396,14 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                             let res = crate::common::cton_intcast(fx, from, from_ty, to_ty, true);\n                             lval.write_cvalue(fx, CValue::ByVal(res, dest_layout));\n                         }\n-                        _ => return Err(format!(\"rval misc {:?} {:?}\", operand, to_ty)),\n+                        _ => unimpl!(\"rval misc {:?} {:?}\", operand, to_ty),\n                     }\n                 }\n                 Rvalue::Cast(CastKind::ClosureFnPointer, operand, ty) => {\n                     unimplemented!(\"rval closure_fn_ptr {:?} {:?}\", operand, ty)\n                 }\n                 Rvalue::Cast(CastKind::Unsize, operand, ty) => {\n-                    return Err(format!(\"rval unsize {:?} {:?}\", operand, ty))\n+                    unimpl!(\"rval unsize {:?} {:?}\", operand, ty);\n                 }\n                 Rvalue::Discriminant(place) => {\n                     let place = trans_place(fx, place).to_cvalue(fx);\n@@ -424,7 +418,7 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                         to.write_cvalue(fx, operand);\n                     }\n                 }\n-                Rvalue::Len(lval) => return Err(format!(\"rval len {:?}\", lval)),\n+                Rvalue::Len(lval) => unimpl!(\"rval len {:?}\", lval),\n                 Rvalue::NullaryOp(NullOp::Box, ty) => unimplemented!(\"rval box {:?}\", ty),\n                 Rvalue::NullaryOp(NullOp::SizeOf, ty) => {\n                     assert!(\n@@ -436,7 +430,7 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                     let val = CValue::const_val(fx, fx.tcx.types.usize, ty_size as i64);\n                     lval.write_cvalue(fx, val);\n                 }\n-                Rvalue::Aggregate(_, _) => return Err(format!(\"shouldn't exist at trans {:?}\", rval)),\n+                Rvalue::Aggregate(_, _) => unimpl!(\"shouldn't exist at trans {:?}\", rval),\n             }\n         }\n         StatementKind::StorageLive(_)\n@@ -448,8 +442,6 @@ fn trans_stmt<'a, 'tcx: 'a>(\n         | StatementKind::UserAssertTy(_, _) => {}\n         StatementKind::InlineAsm { .. } => fx.tcx.sess.fatal(\"Inline assembly is not supported\"),\n     }\n-\n-    Ok(())\n }\n \n pub fn trans_get_discriminant<'a, 'tcx: 'a>(\n@@ -823,15 +815,21 @@ pub fn trans_place<'a, 'tcx: 'a>(\n         Place::Local(local) => fx.get_local_place(*local),\n         Place::Promoted(promoted) => crate::constant::trans_promoted(fx, promoted.0),\n         Place::Static(static_) => {\n-            unimplemented!(\"static place {:?} ty {:?}\", static_.def_id, static_.ty)\n+            unimpl!(\"static place {:?} ty {:?}\", static_.def_id, static_.ty);\n         }\n         Place::Projection(projection) => {\n             let base = trans_place(fx, &projection.base);\n             match projection.elem {\n-                ProjectionElem::Deref => CPlace::Addr(\n-                    base.to_cvalue(fx).load_value(fx),\n-                    fx.layout_of(place.ty(&*fx.mir, fx.tcx).to_ty(fx.tcx)),\n-                ),\n+                ProjectionElem::Deref => {\n+                    let layout = fx.layout_of(place.ty(&*fx.mir, fx.tcx).to_ty(fx.tcx));\n+                    if layout.is_unsized() {\n+                        unimpl!(\"Unsized places are not yet implemented\");\n+                    }\n+                    CPlace::Addr(\n+                        base.to_cvalue(fx).load_value(fx),\n+                        layout,\n+                    )\n+                },\n                 ProjectionElem::Field(field, _ty) => base.place_field(fx, field),\n                 ProjectionElem::Index(local) => {\n                     let index = fx.get_local_place(local).to_cvalue(fx).load_value(fx);"}, {"sha": "2572fee5c0b7bbdd2be12e7ee5e4b9ed4aeaf4c9", "filename": "src/lib.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7f2e68e38e210e54034ffd4957c58098a90b7d98/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f2e68e38e210e54034ffd4957c58098a90b7d98/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=7f2e68e38e210e54034ffd4957c58098a90b7d98", "patch": "@@ -40,6 +40,14 @@ use syntax::symbol::Symbol;\n use cranelift::codegen::settings;\n use cranelift_faerie::*;\n \n+struct NonFatal(pub String);\n+\n+macro_rules! unimpl {\n+    ($($tt:tt)*) => {\n+        panic!(::NonFatal(format!($($tt)*)));\n+    };\n+}\n+\n mod abi;\n mod base;\n mod common;\n@@ -240,7 +248,17 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             for mono_item in\n                 collector::collect_crate_mono_items(tcx, collector::MonoItemCollectionMode::Eager).0\n             {\n-                base::trans_mono_item(&mut cx, &mut context, mono_item)\n+                let cx = &mut cx;\n+                let context = &mut context;\n+                let res = ::std::panic::catch_unwind(::std::panic::AssertUnwindSafe(move || {\n+                    base::trans_mono_item(cx, context, mono_item);\n+                }));\n+                if let Err(err) = res {\n+                    match err.downcast::<NonFatal>() {\n+                        Ok(non_fatal) => tcx.sess.err(&non_fatal.0),\n+                        Err(err) => ::std::panic::resume_unwind(err),\n+                    }\n+                }\n             }\n         }\n "}]}