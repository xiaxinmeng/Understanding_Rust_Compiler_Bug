{"sha": "59a768ce14ca8b439107dce0b575ee1c36244758", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5YTc2OGNlMTRjYThiNDM5MTA3ZGNlMGI1NzVlZTFjMzYyNDQ3NTg=", "commit": {"author": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2019-11-25T00:47:15Z"}, "committer": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2019-11-29T17:07:06Z"}, "message": "rename to AnonRegionFromAsyncFn", "tree": {"sha": "326f5073055703d5e73eadb69e49dbda1df7c5b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/326f5073055703d5e73eadb69e49dbda1df7c5b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59a768ce14ca8b439107dce0b575ee1c36244758", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59a768ce14ca8b439107dce0b575ee1c36244758", "html_url": "https://github.com/rust-lang/rust/commit/59a768ce14ca8b439107dce0b575ee1c36244758", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59a768ce14ca8b439107dce0b575ee1c36244758/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f853d25b8465e61209035393eebb765968e6173", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f853d25b8465e61209035393eebb765968e6173", "html_url": "https://github.com/rust-lang/rust/commit/1f853d25b8465e61209035393eebb765968e6173"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "938059c2a923b84199ad5dd87ebc0ba5876a5f5d", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/outlives_suggestion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59a768ce14ca8b439107dce0b575ee1c36244758/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Foutlives_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59a768ce14ca8b439107dce0b575ee1c36244758/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Foutlives_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Foutlives_suggestion.rs?ref=59a768ce14ca8b439107dce0b575ee1c36244758", "patch": "@@ -89,7 +89,7 @@ impl OutlivesSuggestionBuilder<'a> {\n             | RegionNameSource::AnonRegionFromUpvar(..)\n             | RegionNameSource::AnonRegionFromOutput(..)\n             | RegionNameSource::AnonRegionFromYieldTy(..)\n-            | RegionNameSource::AnonRegionFromTraitObjAsync(..) => {\n+            | RegionNameSource::AnonRegionFromAsyncFn(..) => {\n                 debug!(\"Region {:?} is NOT suggestable\", name);\n                 false\n             }"}, {"sha": "46c87db7af1607e83aed0a71aa8dfeb560777188", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/59a768ce14ca8b439107dce0b575ee1c36244758/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59a768ce14ca8b439107dce0b575ee1c36244758/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=59a768ce14ca8b439107dce0b575ee1c36244758", "patch": "@@ -57,8 +57,8 @@ crate enum RegionNameSource {\n     AnonRegionFromOutput(Span, String, String),\n     /// The region from a type yielded by a generator.\n     AnonRegionFromYieldTy(Span, String),\n-    /// An anonymous region from a trait object in an async fn.\n-    AnonRegionFromTraitObjAsync(Span),\n+    /// An anonymous region from an async fn.\n+    AnonRegionFromAsyncFn(Span),\n }\n \n /// Records region names that have been assigned before so that we can use the same ones in later\n@@ -117,7 +117,7 @@ impl RegionName {\n             RegionNameSource::AnonRegionFromUpvar(..) |\n             RegionNameSource::AnonRegionFromOutput(..) |\n             RegionNameSource::AnonRegionFromYieldTy(..) |\n-            RegionNameSource::AnonRegionFromTraitObjAsync(..) => false,\n+            RegionNameSource::AnonRegionFromAsyncFn(..) => false,\n         }\n     }\n \n@@ -142,7 +142,7 @@ impl RegionName {\n                 diag.span_label(*span, format!(\"has type `{}`\", type_name));\n             }\n             RegionNameSource::MatchedHirTy(span) |\n-            RegionNameSource::AnonRegionFromTraitObjAsync(span) => {\n+            RegionNameSource::AnonRegionFromAsyncFn(span) => {\n                 diag.span_label(\n                     *span,\n                     format!(\"let's call the lifetime of this reference `{}`\", self),\n@@ -306,14 +306,13 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                     } else {\n                         // If we spuriously thought that the region is named, we should let the\n                         // system generate a true name for error messages. Currently this can\n-                        // happen if we have an elided name in a trait object used in an async fn\n-                        // for example: the compiler will generate a region named `'_`, but\n-                        // reporting such a name is not actually useful, so we synthesize a name\n-                        // for it instead.\n+                        // happen if we have an elided name in an async fn for example: the\n+                        // compiler will generate a region named `'_`, but reporting such a name is\n+                        // not actually useful, so we synthesize a name for it instead.\n                         let name = self.synthesize_region_name(renctx);\n                         Some(RegionName {\n                             name,\n-                            source: RegionNameSource::AnonRegionFromTraitObjAsync(span),\n+                            source: RegionNameSource::AnonRegionFromAsyncFn(span),\n                         })\n                     }\n                 }"}]}