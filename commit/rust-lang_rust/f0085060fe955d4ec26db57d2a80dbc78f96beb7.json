{"sha": "f0085060fe955d4ec26db57d2a80dbc78f96beb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwMDg1MDYwZmU5NTVkNGVjMjZkYjU3ZDJhODBkYmM3OGY5NmJlYjc=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-23T09:14:59Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-23T17:58:48Z"}, "message": "Rollup merge of #22658 - glacjay:issue-22535, r=Gankro\n\n fix issue #22535", "tree": {"sha": "32efacfa8f50347541c34dae52ab052297cdc7b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32efacfa8f50347541c34dae52ab052297cdc7b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0085060fe955d4ec26db57d2a80dbc78f96beb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0085060fe955d4ec26db57d2a80dbc78f96beb7", "html_url": "https://github.com/rust-lang/rust/commit/f0085060fe955d4ec26db57d2a80dbc78f96beb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0085060fe955d4ec26db57d2a80dbc78f96beb7/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d46e049ae4b2429868d8a317ee53d52128411b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d46e049ae4b2429868d8a317ee53d52128411b6", "html_url": "https://github.com/rust-lang/rust/commit/7d46e049ae4b2429868d8a317ee53d52128411b6"}, {"sha": "c2a2b1050799609658ab9662bf93842bba6631ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2a2b1050799609658ab9662bf93842bba6631ba", "html_url": "https://github.com/rust-lang/rust/commit/c2a2b1050799609658ab9662bf93842bba6631ba"}], "stats": {"total": 128, "additions": 66, "deletions": 62}, "files": [{"sha": "15ae8b027e128a20451ebc5c8a408ae008f5b42e", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/f0085060fe955d4ec26db57d2a80dbc78f96beb7/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0085060fe955d4ec26db57d2a80dbc78f96beb7/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=f0085060fe955d4ec26db57d2a80dbc78f96beb7", "patch": "@@ -1751,6 +1751,72 @@ mod tests {\n         assert_pow!((8,     3 ) => 512);\n         assert_pow!((2u64,   50) => 1125899906842624);\n     }\n+\n+    #[test]\n+    fn test_uint_to_str_overflow() {\n+        let mut u8_val: u8 = 255_u8;\n+        assert_eq!(u8_val.to_string(), \"255\");\n+\n+        u8_val += 1 as u8;\n+        assert_eq!(u8_val.to_string(), \"0\");\n+\n+        let mut u16_val: u16 = 65_535_u16;\n+        assert_eq!(u16_val.to_string(), \"65535\");\n+\n+        u16_val += 1 as u16;\n+        assert_eq!(u16_val.to_string(), \"0\");\n+\n+        let mut u32_val: u32 = 4_294_967_295_u32;\n+        assert_eq!(u32_val.to_string(), \"4294967295\");\n+\n+        u32_val += 1 as u32;\n+        assert_eq!(u32_val.to_string(), \"0\");\n+\n+        let mut u64_val: u64 = 18_446_744_073_709_551_615_u64;\n+        assert_eq!(u64_val.to_string(), \"18446744073709551615\");\n+\n+        u64_val += 1 as u64;\n+        assert_eq!(u64_val.to_string(), \"0\");\n+    }\n+\n+    fn from_str<T: ::str::FromStr>(t: &str) -> Option<T> {\n+        ::str::FromStr::from_str(t).ok()\n+    }\n+\n+    #[test]\n+    fn test_uint_from_str_overflow() {\n+        let mut u8_val: u8 = 255_u8;\n+        assert_eq!(from_str::<u8>(\"255\"), Some(u8_val));\n+        assert_eq!(from_str::<u8>(\"256\"), None);\n+\n+        u8_val += 1 as u8;\n+        assert_eq!(from_str::<u8>(\"0\"), Some(u8_val));\n+        assert_eq!(from_str::<u8>(\"-1\"), None);\n+\n+        let mut u16_val: u16 = 65_535_u16;\n+        assert_eq!(from_str::<u16>(\"65535\"), Some(u16_val));\n+        assert_eq!(from_str::<u16>(\"65536\"), None);\n+\n+        u16_val += 1 as u16;\n+        assert_eq!(from_str::<u16>(\"0\"), Some(u16_val));\n+        assert_eq!(from_str::<u16>(\"-1\"), None);\n+\n+        let mut u32_val: u32 = 4_294_967_295_u32;\n+        assert_eq!(from_str::<u32>(\"4294967295\"), Some(u32_val));\n+        assert_eq!(from_str::<u32>(\"4294967296\"), None);\n+\n+        u32_val += 1 as u32;\n+        assert_eq!(from_str::<u32>(\"0\"), Some(u32_val));\n+        assert_eq!(from_str::<u32>(\"-1\"), None);\n+\n+        let mut u64_val: u64 = 18_446_744_073_709_551_615_u64;\n+        assert_eq!(from_str::<u64>(\"18446744073709551615\"), Some(u64_val));\n+        assert_eq!(from_str::<u64>(\"18446744073709551616\"), None);\n+\n+        u64_val += 1 as u64;\n+        assert_eq!(from_str::<u64>(\"0\"), Some(u64_val));\n+        assert_eq!(from_str::<u64>(\"-1\"), None);\n+    }\n }\n \n "}, {"sha": "c9e6a8f66d1d25cb01e50a4a67c9f20873cdfbbb", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/f0085060fe955d4ec26db57d2a80dbc78f96beb7/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0085060fe955d4ec26db57d2a80dbc78f96beb7/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=f0085060fe955d4ec26db57d2a80dbc78f96beb7", "patch": "@@ -48,68 +48,6 @@ mod tests {\n         assert_eq!(FromStrRadix::from_str_radix(\"Z\", 10).ok(), None::<$T>);\n         assert_eq!(FromStrRadix::from_str_radix(\"_\", 2).ok(), None::<$T>);\n     }\n-\n-    #[test]\n-    fn test_uint_to_str_overflow() {\n-        let mut u8_val: u8 = 255_u8;\n-        assert_eq!(u8_val.to_string(), \"255\");\n-\n-        u8_val += 1 as u8;\n-        assert_eq!(u8_val.to_string(), \"0\");\n-\n-        let mut u16_val: u16 = 65_535_u16;\n-        assert_eq!(u16_val.to_string(), \"65535\");\n-\n-        u16_val += 1 as u16;\n-        assert_eq!(u16_val.to_string(), \"0\");\n-\n-        let mut u32_val: u32 = 4_294_967_295_u32;\n-        assert_eq!(u32_val.to_string(), \"4294967295\");\n-\n-        u32_val += 1 as u32;\n-        assert_eq!(u32_val.to_string(), \"0\");\n-\n-        let mut u64_val: u64 = 18_446_744_073_709_551_615_u64;\n-        assert_eq!(u64_val.to_string(), \"18446744073709551615\");\n-\n-        u64_val += 1 as u64;\n-        assert_eq!(u64_val.to_string(), \"0\");\n-    }\n-\n-    #[test]\n-    fn test_uint_from_str_overflow() {\n-        let mut u8_val: u8 = 255_u8;\n-        assert_eq!(from_str::<u8>(\"255\"), Some(u8_val));\n-        assert_eq!(from_str::<u8>(\"256\"), None);\n-\n-        u8_val += 1 as u8;\n-        assert_eq!(from_str::<u8>(\"0\"), Some(u8_val));\n-        assert_eq!(from_str::<u8>(\"-1\"), None);\n-\n-        let mut u16_val: u16 = 65_535_u16;\n-        assert_eq!(from_str::<u16>(\"65535\"), Some(u16_val));\n-        assert_eq!(from_str::<u16>(\"65536\"), None);\n-\n-        u16_val += 1 as u16;\n-        assert_eq!(from_str::<u16>(\"0\"), Some(u16_val));\n-        assert_eq!(from_str::<u16>(\"-1\"), None);\n-\n-        let mut u32_val: u32 = 4_294_967_295_u32;\n-        assert_eq!(from_str::<u32>(\"4294967295\"), Some(u32_val));\n-        assert_eq!(from_str::<u32>(\"4294967296\"), None);\n-\n-        u32_val += 1 as u32;\n-        assert_eq!(from_str::<u32>(\"0\"), Some(u32_val));\n-        assert_eq!(from_str::<u32>(\"-1\"), None);\n-\n-        let mut u64_val: u64 = 18_446_744_073_709_551_615_u64;\n-        assert_eq!(from_str::<u64>(\"18446744073709551615\"), Some(u64_val));\n-        assert_eq!(from_str::<u64>(\"18446744073709551616\"), None);\n-\n-        u64_val += 1 as u64;\n-        assert_eq!(from_str::<u64>(\"0\"), Some(u64_val));\n-        assert_eq!(from_str::<u64>(\"-1\"), None);\n-    }\n }\n \n ) }"}]}