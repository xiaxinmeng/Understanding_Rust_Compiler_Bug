{"sha": "10030a37d50f5c3ae681709598be201153e0b1e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwMDMwYTM3ZDUwZjVjM2FlNjgxNzA5NTk4YmUyMDExNTNlMGIxZTU=", "commit": {"author": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2011-11-10T05:55:09Z"}, "committer": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2011-12-19T04:39:54Z"}, "message": "Generate basic debug info for files, functions and compile units.", "tree": {"sha": "00b9b1e2325dc1300f466fd75fea782509ac3c8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00b9b1e2325dc1300f466fd75fea782509ac3c8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10030a37d50f5c3ae681709598be201153e0b1e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10030a37d50f5c3ae681709598be201153e0b1e5", "html_url": "https://github.com/rust-lang/rust/commit/10030a37d50f5c3ae681709598be201153e0b1e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10030a37d50f5c3ae681709598be201153e0b1e5/comments", "author": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa27724a4bb213f896d4003ed129bf7caff7f3a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa27724a4bb213f896d4003ed129bf7caff7f3a0", "html_url": "https://github.com/rust-lang/rust/commit/fa27724a4bb213f896d4003ed129bf7caff7f3a0"}], "stats": {"total": 225, "additions": 222, "deletions": 3}, "files": [{"sha": "b090fb74644a2a0f9dba2cc775e0d66af4f8102d", "filename": "src/comp/lib/llvm.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/10030a37d50f5c3ae681709598be201153e0b1e5/src%2Fcomp%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10030a37d50f5c3ae681709598be201153e0b1e5/src%2Fcomp%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Flib%2Fllvm.rs?ref=10030a37d50f5c3ae681709598be201153e0b1e5", "patch": "@@ -256,6 +256,7 @@ native mod llvm {\n \n     /* Operations on Users */\n     fn LLVMGetOperand(Val: ValueRef, Index: uint) -> ValueRef;\n+    fn LLVMSetOperand(Val: ValueRef, Index: uint, Op: ValueRef);\n \n     /* Operations on constants of any type */\n     fn LLVMConstNull(Ty: TypeRef) -> ValueRef;\n@@ -275,6 +276,8 @@ native mod llvm {\n     fn LLVMMDNodeInContext(C: ContextRef, Vals: *ValueRef, Count: uint) ->\n        ValueRef;\n     fn LLVMMDNode(Vals: *ValueRef, Count: uint) -> ValueRef;\n+    fn LLVMAddNamedMetadataOperand(M: ModuleRef, Str: sbuf, SLen: uint,\n+                                   Val: ValueRef);\n \n     /* Operations on scalar constants */\n     fn LLVMConstInt(IntTy: TypeRef, N: ULongLong, SignExtend: Bool) ->"}, {"sha": "72390a23383da78393f474cfc7f8cee6dbce5fb0", "filename": "src/comp/middle/debuginfo.rs", "status": "added", "additions": 192, "deletions": 0, "changes": 192, "blob_url": "https://github.com/rust-lang/rust/blob/10030a37d50f5c3ae681709598be201153e0b1e5/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10030a37d50f5c3ae681709598be201153e0b1e5/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs?ref=10030a37d50f5c3ae681709598be201153e0b1e5", "patch": "@@ -0,0 +1,192 @@\n+import std::{vec, str, map, option, unsafe};\n+import std::vec::to_ptr;\n+import std::map::hashmap;\n+import lib::llvm::llvm;\n+import lib::llvm::llvm::{ModuleRef, ValueRef};\n+import middle::trans_common::*;\n+import syntax::{ast, codemap};\n+\n+const LLVMDebugVersion: int = 0x80000;\n+\n+const DW_LANG_RUST: int = 0x9000;\n+const DW_VIRTUALITY_none: int = 0;\n+\n+const CompileUnitTag: int = 17;\n+const FileDescriptorTag: int = 41;\n+const SubprogramTag: int = 46;\n+\n+fn as_buf(s: str) -> str::sbuf {\n+    str::as_buf(s, {|sbuf| sbuf})\n+}\n+fn llstr(s: str) -> ValueRef {\n+    llvm::LLVMMDString(as_buf(s), str::byte_len(s))\n+}\n+\n+fn lltag(lltag: int) -> ValueRef {\n+    lli32(0x80000 + lltag)\n+}\n+fn lli32(val: int) -> ValueRef {\n+    C_i32(val as i32)\n+}\n+fn lli1(bval: bool) -> ValueRef {\n+    C_bool(bval)\n+}\n+fn llmdnode(elems: [ValueRef]) -> ValueRef unsafe {\n+    llvm::LLVMMDNode(vec::unsafe::to_ptr(elems),\n+                     vec::len(elems))\n+}\n+fn llunused() -> ValueRef {\n+    lli32(0x0)\n+}\n+\n+fn update_cache(cache: metadata_cache, mdtag: int, val: debug_metadata) {\n+    let existing = if cache.contains_key(mdtag) {\n+        cache.get(mdtag)\n+    } else {\n+        []\n+    };\n+    cache.insert(mdtag, existing + [val]);\n+}\n+\n+////////////////\n+\n+type metadata<T> = {node: ValueRef, data: T};\n+\n+type file_md = {path: str};\n+type compile_unit_md = {path: str};\n+type subprogram_md = {name: str, file: str};\n+\n+type metadata_cache = hashmap<int, [debug_metadata]>;\n+\n+tag debug_metadata {\n+    file_metadata(@metadata<file_md>);\n+    compile_unit_metadata(@metadata<compile_unit_md>);\n+    subprogram_metadata(@metadata<subprogram_md>);\n+}\n+\n+fn md_from_metadata<T>(val: debug_metadata) -> T unsafe {\n+    alt val {\n+      file_metadata(md) { unsafe::reinterpret_cast(md) }\n+      compile_unit_metadata(md) { unsafe::reinterpret_cast(md) }\n+      subprogram_metadata(md) { unsafe::reinterpret_cast(md) }\n+    }\n+}\n+\n+fn cached_metadata<T>(cache: metadata_cache, mdtag: int,\n+                      eq: block(md: T) -> bool) -> option::t<T> {\n+    if cache.contains_key(mdtag) {\n+        let items = cache.get(mdtag);\n+        for item in items {\n+            let md: T = md_from_metadata::<T>(item);\n+            if eq(md) {\n+                ret option::some(md);\n+            }\n+        }\n+    }\n+    ret option::none;\n+}\n+\n+fn get_compile_unit_metadata(cx: @crate_ctxt, full_path: str)\n+    -> @metadata<compile_unit_md> {\n+    let cache = cx.llmetadata;\n+    alt cached_metadata::<@metadata<compile_unit_md>>(cache, CompileUnitTag,\n+                        {|md| md.data.path == full_path}) {\n+      option::some(md) { ret md; }\n+      option::none. {}\n+    }\n+    let sep = str::rindex(full_path, '/' as u8) as uint;\n+    let fname = str::slice(full_path, sep + 1u,\n+                           str::byte_len(full_path));\n+    let path = str::slice(full_path, 0u, sep + 1u);\n+    let unit_metadata = [lltag(CompileUnitTag),\n+                         llunused(),\n+                         lli32(DW_LANG_RUST),\n+                         llstr(fname),\n+                         llstr(path),\n+                         llstr(#env[\"CFG_VERSION\"]),\n+                         lli1(false), // main compile unit\n+                         lli1(cx.sess.get_opts().optimize != 0u),\n+                         llstr(\"\"), // flags (???)\n+                         lli32(0) // runtime version (???)\n+                         // list of enum types\n+                         // list of retained values\n+                         // list of subprograms\n+                         // list of global variables\n+                        ];\n+    let unit_node = llmdnode(unit_metadata);\n+    llvm::LLVMAddNamedMetadataOperand(cx.llmod, as_buf(\"llvm.dbg.cu\"),\n+                                  str::byte_len(\"llvm.dbg.cu\"),\n+                                  unit_node);\n+    let mdval = @{node: unit_node, data: {path: full_path}};\n+    update_cache(cache, CompileUnitTag, compile_unit_metadata(mdval));\n+    ret mdval;\n+}\n+\n+//        let kind_id = llvm::LLVMGetMDKindID(as_buf(\"dbg\"),\n+//                                            str::byte_len(\"dbg\"));\n+\n+\n+fn get_file_metadata(cx: @crate_ctxt, full_path: str) -> @metadata<file_md> {\n+    let cache = cx.llmetadata;\n+    alt cached_metadata::<@metadata<file_md>>(\n+        cache, FileDescriptorTag, {|md| md.data.path == full_path}) {\n+      option::some(md) { ret md; }\n+      option::none. {}\n+    }\n+    let sep = str::rindex(full_path, '/' as u8) as uint;\n+    let fname = str::slice(full_path, sep + 1u,\n+                           str::byte_len(full_path));\n+    let path = str::slice(full_path, 0u, sep + 1u);\n+    let unit_node = get_compile_unit_metadata(cx, path).node;\n+    let file_md = [lltag(FileDescriptorTag),\n+                   llstr(fname),\n+                   llstr(path),\n+                   unit_node];\n+    let val = llmdnode(file_md);\n+    let mdval = @{node: val, data: {path: full_path}};\n+    update_cache(cache, FileDescriptorTag, file_metadata(mdval));\n+    ret mdval;\n+}\n+\n+fn get_function_metadata(cx: @crate_ctxt, item: @ast::item,\n+                         llfndecl: ValueRef) -> @metadata<subprogram_md> {\n+    let cache = cx.llmetadata;\n+    alt cached_metadata::<@metadata<subprogram_md>>(\n+        cache, SubprogramTag, {|md| md.data.name == item.ident &&\n+                                    /*sub.path == ??*/ true}) {\n+      option::some(md) { ret md; }\n+      option::none. {}\n+    }\n+    let loc = codemap::lookup_char_pos(cx.sess.get_codemap(),\n+                                           item.span.lo);\n+        let file_node = get_file_metadata(cx, loc.filename).node;\n+        let fn_metadata = [lltag(SubprogramTag),\n+                           llunused(),\n+                           file_node,\n+                           llstr(item.ident),\n+                           llstr(item.ident), //XXX fully-qualified C++ name\n+                           llstr(item.ident), //XXX MIPS name?????\n+                           file_node,\n+                           lli32(loc.line as int),\n+                           C_null(T_ptr(T_nil())), // XXX reference to tydesc\n+                           lli1(false), //XXX static\n+                           lli1(true), // not extern\n+                           lli32(DW_VIRTUALITY_none), // virtual-ness\n+                           lli32(0i), //index into virt func\n+                           C_null(T_ptr(T_nil())), // base type with vtbl\n+                           lli1(false), // artificial\n+                           lli1(cx.sess.get_opts().optimize != 0u),\n+                           llfndecl\n+                           //list of template params\n+                           //func decl descriptor\n+                           //list of func vars\n+                          ];\n+        let val = llmdnode(fn_metadata);\n+        llvm::LLVMAddNamedMetadataOperand(cx.llmod, as_buf(\"llvm.dbg.sp\"),\n+                                          str::byte_len(\"llvm.dbg.sp\"),\n+                                          val);\n+        let mdval = @{node: val, data: {name: item.ident,\n+                                        file: loc.filename}};\n+        update_cache(cache, SubprogramTag, subprogram_metadata(mdval));\n+        ret mdval;\n+}\n\\ No newline at end of file"}, {"sha": "6985ef974e602c72a53b242c2b1de10dc2501654", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/10030a37d50f5c3ae681709598be201153e0b1e5/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10030a37d50f5c3ae681709598be201153e0b1e5/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=10030a37d50f5c3ae681709598be201153e0b1e5", "patch": "@@ -20,7 +20,7 @@ import std::map::{new_int_hash, new_str_hash};\n import option::{some, none};\n import driver::session;\n import front::attr;\n-import middle::{ty, gc, resolve};\n+import middle::{ty, gc, resolve, debuginfo};\n import middle::freevars::*;\n import back::{link, abi, upcall};\n import syntax::{ast, ast_util};\n@@ -4543,6 +4543,12 @@ fn trans_fn(cx: @local_ctxt, sp: span, f: ast::_fn, llfndecl: ValueRef,\n     let do_time = cx.ccx.sess.get_opts().stats;\n     let start = do_time ? time::get_time() : {sec: 0u32, usec: 0u32};\n     trans_closure(cx, sp, f, llfndecl, ty_self, ty_params, id, {|_fcx|});\n+    if cx.ccx.sess.get_opts().debuginfo {\n+        let item = alt option::get(cx.ccx.ast_map.find(id)) {\n+            ast_map::node_item(item) { item }\n+        };\n+        debuginfo::get_function_metadata(cx.ccx, item, llfndecl);\n+    }\n     if do_time {\n         let end = time::get_time();\n         log_fn_time(cx.ccx, str::connect(cx.path, \"::\"), start, end);\n@@ -5659,7 +5665,8 @@ fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n           builder: BuilderRef_res(llvm::LLVMCreateBuilder()),\n           shape_cx: shape::mk_ctxt(llmod),\n           gc_cx: gc::mk_ctxt(),\n-          crate_map: crate_map};\n+          crate_map: crate_map,\n+          llmetadata: map::new_int_hash()};\n     let cx = new_local_ctxt(ccx);\n     collect_items(ccx, crate);\n     collect_tag_ctors(ccx, crate);"}, {"sha": "a4f0a6dfe3decadf1286d445890daa0282b9bb4f", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/10030a37d50f5c3ae681709598be201153e0b1e5/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10030a37d50f5c3ae681709598be201153e0b1e5/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=10030a37d50f5c3ae681709598be201153e0b1e5", "patch": "@@ -116,7 +116,8 @@ type crate_ctxt =\n      builder: BuilderRef_res,\n      shape_cx: shape::ctxt,\n      gc_cx: gc::ctxt,\n-     crate_map: ValueRef};\n+     crate_map: ValueRef,\n+     llmetadata: debuginfo::metadata_cache};\n \n type local_ctxt =\n     {path: [str],"}, {"sha": "9f88b369749a12073f20c710db6f3dade52f9f08", "filename": "src/comp/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/10030a37d50f5c3ae681709598be201153e0b1e5/src%2Fcomp%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/10030a37d50f5c3ae681709598be201153e0b1e5/src%2Fcomp%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Frustc.rc?ref=10030a37d50f5c3ae681709598be201153e0b1e5", "patch": "@@ -37,6 +37,7 @@ mod middle {\n     mod freevars;\n     mod shape;\n     mod gc;\n+    mod debuginfo;\n \n     mod tstate {\n         mod ck;"}, {"sha": "ad7fec1586b40baa3f71a51bf54444b389b18609", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/10030a37d50f5c3ae681709598be201153e0b1e5/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/10030a37d50f5c3ae681709598be201153e0b1e5/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=10030a37d50f5c3ae681709598be201153e0b1e5", "patch": "@@ -165,3 +165,17 @@ extern \"C\" LLVMValueRef LLVMGetOrInsertFunction(LLVMModuleRef M,\n   return wrap(unwrap(M)->getOrInsertFunction(Name,\n                                              unwrap<FunctionType>(FunctionTy)));\n }\n+\n+extern \"C\" LLVMTypeRef LLVMMetadataTypeInContext(LLVMContextRef C) {\n+  return wrap(Type::getMetadataTy(*unwrap(C)));\n+}\n+extern \"C\" LLVMTypeRef LLVMMetadataType(void) {\n+  return LLVMMetadataTypeInContext(LLVMGetGlobalContext());\n+}\n+\n+extern \"C\" void LLVMAddNamedMetadataOperand(LLVMModuleRef M, const char *Str,\n+                                            unsigned SLen, LLVMValueRef Val)\n+{\n+  NamedMDNode *N = unwrap(M)->getOrInsertNamedMetadata(StringRef(Str, SLen));\n+  N->addOperand(unwrap<MDNode>(Val));\n+}"}, {"sha": "1a34f62f7a062b84940d70c61288830bc70c101d", "filename": "src/rustllvm/rustllvm.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/10030a37d50f5c3ae681709598be201153e0b1e5/src%2Frustllvm%2Frustllvm.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/10030a37d50f5c3ae681709598be201153e0b1e5/src%2Frustllvm%2Frustllvm.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.def.in?ref=10030a37d50f5c3ae681709598be201153e0b1e5", "patch": "@@ -487,6 +487,7 @@ LLVMMDNode\n LLVMMDNodeInContext\n LLVMMDString\n LLVMMDStringInContext\n+LLVMAddNamedMetadataOperand\n LLVMModuleCreateWithName\n LLVMModuleCreateWithNameInContext\n LLVMMoveBasicBlockAfter"}]}