{"sha": "1fb17aba6921e80bd5ad20b85b5df5334a6e32b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmYjE3YWJhNjkyMWU4MGJkNWFkMjBiODViNWRmNTMzNGE2ZTMyYjc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-05-08T02:26:23Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-05-10T02:21:24Z"}, "message": "generalize `blame_span`", "tree": {"sha": "82fc5a2eac053682c54ea64c84610782d9846d1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82fc5a2eac053682c54ea64c84610782d9846d1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fb17aba6921e80bd5ad20b85b5df5334a6e32b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fb17aba6921e80bd5ad20b85b5df5334a6e32b7", "html_url": "https://github.com/rust-lang/rust/commit/1fb17aba6921e80bd5ad20b85b5df5334a6e32b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fb17aba6921e80bd5ad20b85b5df5334a6e32b7/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5f80f2a4f016bf724a1cfb580619d71c8fd39ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5f80f2a4f016bf724a1cfb580619d71c8fd39ec", "html_url": "https://github.com/rust-lang/rust/commit/e5f80f2a4f016bf724a1cfb580619d71c8fd39ec"}], "stats": {"total": 35, "additions": 19, "deletions": 16}, "files": [{"sha": "39f31531a9c35f3bf08d876e86c0816b1f5b278b", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1fb17aba6921e80bd5ad20b85b5df5334a6e32b7/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fb17aba6921e80bd5ad20b85b5df5334a6e32b7/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=1fb17aba6921e80bd5ad20b85b5df5334a6e32b7", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use super::universal_regions::UniversalRegions;\n+use borrow_check::nll::region_infer::values::ToElementIndex;\n use rustc::hir::def_id::DefId;\n use rustc::infer::InferCtxt;\n use rustc::infer::NLLRegionVariableOrigin;\n@@ -1007,7 +1008,8 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 longer_fr, shorter_fr,\n             );\n \n-            let blame_span = self.blame_span(longer_fr, shorter_fr);\n+            let blame_index = self.blame_constraint(longer_fr, shorter_fr);\n+            let blame_span = self.constraints[blame_index].span;\n \n             if let Some(propagated_outlives_requirements) = propagated_outlives_requirements {\n                 // Shrink `fr` until we find a non-local region (if we do).\n@@ -1095,7 +1097,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n     /// Tries to finds a good span to blame for the fact that `fr1`\n     /// contains `fr2`.\n-    fn blame_span(&self, fr1: RegionVid, fr2: RegionVid) -> Span {\n+    fn blame_constraint(&self, fr1: RegionVid, elem: impl ToElementIndex) -> ConstraintIndex {\n         // Find everything that influenced final value of `fr`.\n         let influenced_fr1 = self.dependencies(fr1);\n \n@@ -1108,23 +1110,23 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // of dependencies, which doesn't account for the locations of\n         // contraints at all. But it will do for now.\n         let relevant_constraint = self.constraints\n-                .iter()\n-                .filter_map(|constraint| {\n-                    if constraint.sub != fr2 {\n-                        None\n-                    } else {\n-                        influenced_fr1[constraint.sup]\n-                            .map(|distance| (distance, constraint.span))\n-                    }\n-                })\n-                .min() // constraining fr1 with fewer hops *ought* to be more obvious\n-                .map(|(_dist, span)| span);\n+            .iter_enumerated()\n+            .filter_map(|(i, constraint)| {\n+                if self.liveness_constraints.contains(constraint.sub, elem) {\n+                    None\n+                } else {\n+                    influenced_fr1[constraint.sup]\n+                        .map(|distance| (distance, i))\n+                }\n+            })\n+            .min() // constraining fr1 with fewer hops *ought* to be more obvious\n+            .map(|(_dist, i)| i);\n \n         relevant_constraint.unwrap_or_else(|| {\n             bug!(\n                 \"could not find any constraint to blame for {:?}: {:?}\",\n                 fr1,\n-                fr2\n+                elem,\n             );\n         })\n     }"}, {"sha": "ce9397a25aa4b1c568a93812fc49dbd270c8125b", "filename": "src/librustc_mir/borrow_check/nll/region_infer/values.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1fb17aba6921e80bd5ad20b85b5df5334a6e32b7/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fb17aba6921e80bd5ad20b85b5df5334a6e32b7/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs?ref=1fb17aba6921e80bd5ad20b85b5df5334a6e32b7", "patch": "@@ -8,13 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::rc::Rc;\n use rustc_data_structures::bitvec::SparseBitMatrix;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc::mir::{BasicBlock, Location, Mir};\n use rustc::ty::{self, RegionVid};\n+use std::fmt::Debug;\n+use std::rc::Rc;\n use syntax::codemap::Span;\n \n use super::{Cause, CauseExt, TrackCauses};\n@@ -152,7 +153,7 @@ pub(super) enum RegionElement {\n     UniversalRegion(RegionVid),\n }\n \n-pub(super) trait ToElementIndex {\n+pub(super) trait ToElementIndex: Debug + Copy {\n     fn to_element_index(self, elements: &RegionValueElements) -> RegionElementIndex;\n }\n "}]}