{"sha": "41bca84dd95e0ef9ceb9f0a304eca0d62602198b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxYmNhODRkZDk1ZTBlZjljZWI5ZjBhMzA0ZWNhMGQ2MjYwMjE5OGI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-07-03T23:46:57Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-07-04T00:31:31Z"}, "message": "core: Convert iter::repeat to the for protocol", "tree": {"sha": "b2df37615851bc50053375f5eb799d5eadf49063", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2df37615851bc50053375f5eb799d5eadf49063"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41bca84dd95e0ef9ceb9f0a304eca0d62602198b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41bca84dd95e0ef9ceb9f0a304eca0d62602198b", "html_url": "https://github.com/rust-lang/rust/commit/41bca84dd95e0ef9ceb9f0a304eca0d62602198b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41bca84dd95e0ef9ceb9f0a304eca0d62602198b/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae6ea068a12877742247b848ceeaa39c41e981c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae6ea068a12877742247b848ceeaa39c41e981c6", "html_url": "https://github.com/rust-lang/rust/commit/ae6ea068a12877742247b848ceeaa39c41e981c6"}], "stats": {"total": 68, "additions": 34, "deletions": 34}, "files": [{"sha": "ff6187a9f61d49ee0de023bd307ab295fe27a046", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/41bca84dd95e0ef9ceb9f0a304eca0d62602198b/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41bca84dd95e0ef9ceb9f0a304eca0d62602198b/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=41bca84dd95e0ef9ceb9f0a304eca0d62602198b", "patch": "@@ -364,16 +364,16 @@ fn test_select2_rendezvous() {\n     let ch_a = chan(po_a);\n     let ch_b = chan(po_b);\n \n-    do iter::repeat(10u) || {\n+    for iter::repeat(10u) || {\n         do task::spawn || {\n-            iter::repeat(10u, || task::yield());\n+            for iter::repeat(10u) { task::yield() }\n             send(ch_a, \"a\");\n         };\n \n         assert select2(po_a, po_b) == either::left(\"a\");\n \n         do task::spawn || {\n-            iter::repeat(10u, || task::yield());\n+            for iter::repeat(10u) { task::yield() }\n             send(ch_b, \"b\");\n         };\n \n@@ -391,22 +391,22 @@ fn test_select2_stress() {\n     let msgs = 100u;\n     let times = 4u;\n \n-    do iter::repeat(times) || {\n+    for iter::repeat(times) || {\n         do task::spawn || {\n-            do iter::repeat(msgs) || {\n+            for iter::repeat(msgs) || {\n                 send(ch_a, \"a\")\n             }\n         };\n         do task::spawn || {\n-            do iter::repeat(msgs) || {\n+            for iter::repeat(msgs) || {\n                 send(ch_b, \"b\")\n             }\n         };\n     }\n \n     let mut as = 0;\n     let mut bs = 0;\n-    do iter::repeat(msgs * times * 2u) || {\n+    for iter::repeat(msgs * times * 2u) || {\n         alt check select2(po_a, po_b) {\n           either::left(\"a\") { as += 1 }\n           either::right(\"b\") { bs += 1 }\n@@ -473,7 +473,7 @@ fn test_listen() {\n #[test]\n #[ignore(cfg(windows))]\n fn test_port_detach_fail() {\n-    do iter::repeat(100u) || {\n+    for iter::repeat(100u) || {\n         let builder = task::builder();\n         task::unsupervise(builder);\n         do task::run(builder) || {"}, {"sha": "0280221ebfc0b319c7029875735b60949f4a3638", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41bca84dd95e0ef9ceb9f0a304eca0d62602198b/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41bca84dd95e0ef9ceb9f0a304eca0d62602198b/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=41bca84dd95e0ef9ceb9f0a304eca0d62602198b", "patch": "@@ -99,10 +99,10 @@ fn position<A,IA:base_iter<A>>(self: IA, f: fn(A) -> bool)\n // iter interface, such as would provide \"reach\" in addition to \"each\". as is,\n // it would have to be implemented with foldr, which is too inefficient.\n \n-fn repeat(times: uint, blk: fn()) {\n+fn repeat(times: uint, blk: fn() -> bool) {\n     let mut i = 0u;\n     while i < times {\n-        blk();\n+        if !blk() { break }\n         i += 1u;\n     }\n }"}, {"sha": "c4bcbdb36cdb8f2af75060678507333a67142737", "filename": "src/libcore/priv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41bca84dd95e0ef9ceb9f0a304eca0d62602198b/src%2Flibcore%2Fpriv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41bca84dd95e0ef9ceb9f0a304eca0d62602198b/src%2Flibcore%2Fpriv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpriv.rs?ref=41bca84dd95e0ef9ceb9f0a304eca0d62602198b", "patch": "@@ -121,7 +121,7 @@ fn test_from_global_chan1() {\n #[test]\n fn test_from_global_chan2() {\n \n-    do iter::repeat(100u) || {\n+    for iter::repeat(100u) || {\n         // The global channel\n         let globchan = 0u;\n         let globchanp = ptr::addr_of(globchan);\n@@ -224,7 +224,7 @@ fn test_weaken_task_wait() {\n #[test]\n fn test_weaken_task_stress() {\n     // Create a bunch of weak tasks\n-    do iter::repeat(100u) || {\n+    for iter::repeat(100u) || {\n         do task::spawn || {\n             unsafe {\n                 do weaken_task |_po| {"}, {"sha": "e636a1007b921b5284ee7524a65d8e4caa98cbd8", "filename": "src/libcore/task.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41bca84dd95e0ef9ceb9f0a304eca0d62602198b/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41bca84dd95e0ef9ceb9f0a304eca0d62602198b/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=41bca84dd95e0ef9ceb9f0a304eca0d62602198b", "patch": "@@ -1003,7 +1003,7 @@ fn test_spawn_sched_blocking() {\n \n     // Testing that a task in one scheduler can block in foreign code\n     // without affecting other schedulers\n-    do iter::repeat(20u) || {\n+    for iter::repeat(20u) || {\n \n         let start_po = comm::port();\n         let start_ch = comm::chan(start_po);\n@@ -1168,7 +1168,7 @@ fn test_unkillable() {\n \n     // We want to do this after failing\n     do spawn || {\n-        iter::repeat(10u, yield);\n+        for iter::repeat(10u) { yield() }\n         ch.send(());\n     }\n "}, {"sha": "15e91691c72e22cd96b392a8cc8518961ca15d26", "filename": "src/libstd/timer.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/41bca84dd95e0ef9ceb9f0a304eca0d62602198b/src%2Flibstd%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41bca84dd95e0ef9ceb9f0a304eca0d62602198b/src%2Flibstd%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftimer.rs?ref=41bca84dd95e0ef9ceb9f0a304eca0d62602198b", "patch": "@@ -151,7 +151,7 @@ mod test {\n     #[test]\n     fn test_gl_timer_sleep_stress1() {\n         let hl_loop = uv::global_loop::get();\n-        do iter::repeat(200u) || {\n+        for iter::repeat(200u) || {\n             sleep(hl_loop, 1u);\n         }\n     }\n@@ -171,22 +171,22 @@ mod test {\n \n         };\n \n-        do iter::repeat(repeat) || {\n+        for iter::repeat(repeat) || {\n \n             for spec.each |spec| {\n                 let (times, maxms) = spec;\n                 do task::spawn || {\n                     import rand::*;\n                     let rng = rng();\n-                    do iter::repeat(times) || {\n+                    for iter::repeat(times) || {\n                         sleep(hl_loop, rng.next() as uint % maxms);\n                     }\n                     comm::send(ch, ());\n                 }\n             }\n         }\n \n-        do iter::repeat(repeat * spec.len()) || {\n+        for iter::repeat(repeat * spec.len()) || {\n             comm::recv(po)\n         }\n     }\n@@ -204,7 +204,7 @@ mod test {\n         let mut failures = 0;\n         let hl_loop = uv::global_loop::get();\n \n-        do iter::repeat(times as uint) || {\n+        for iter::repeat(times as uint) || {\n             task::yield();\n \n             let expected = rand::rng().gen_str(16u);\n@@ -231,7 +231,7 @@ mod test {\n         let mut failures = 0;\n         let hl_loop = uv::global_loop::get();\n \n-        do iter::repeat(times as uint) || {\n+        for iter::repeat(times as uint) || {\n             let expected = rand::rng().gen_str(16u);\n             let test_po = comm::port::<str>();\n             let test_ch = comm::chan(test_po);"}, {"sha": "d9009aa05036f9d67b4523070454562436e4139c", "filename": "src/libstd/uv_global_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41bca84dd95e0ef9ceb9f0a304eca0d62602198b/src%2Flibstd%2Fuv_global_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41bca84dd95e0ef9ceb9f0a304eca0d62602198b/src%2Flibstd%2Fuv_global_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_global_loop.rs?ref=41bca84dd95e0ef9ceb9f0a304eca0d62602198b", "patch": "@@ -191,13 +191,13 @@ mod test {\n         let exit_po = comm::port::<()>();\n         let exit_ch = comm::chan(exit_po);\n         let cycles = 5000u;\n-        do iter::repeat(cycles) || {\n+        for iter::repeat(cycles) || {\n             task::spawn_sched(task::manual_threads(1u), || {\n                 impl_uv_hl_simple_timer(hl_loop);\n                 comm::send(exit_ch, ());\n             });\n         };\n-        do iter::repeat(cycles) || {\n+        for iter::repeat(cycles) || {\n             comm::recv(exit_po);\n         };\n         log(debug, \"test_stress_gl_uv_global_loop_high_level_global_timer\"+"}, {"sha": "27c79d7a6d16c5449d5b6835d0db37040aef2904", "filename": "src/libstd/uv_iotask.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41bca84dd95e0ef9ceb9f0a304eca0d62602198b/src%2Flibstd%2Fuv_iotask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41bca84dd95e0ef9ceb9f0a304eca0d62602198b/src%2Flibstd%2Fuv_iotask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_iotask.rs?ref=41bca84dd95e0ef9ceb9f0a304eca0d62602198b", "patch": "@@ -255,13 +255,13 @@ mod test {\n         // called, at least.\n         let work_exit_po = comm::port::<()>();\n         let work_exit_ch = comm::chan(work_exit_po);\n-        do iter::repeat(7u) || {\n+        for iter::repeat(7u) || {\n             do task::spawn_sched(task::manual_threads(1u)) || {\n                 impl_uv_iotask_async(iotask);\n                 comm::send(work_exit_ch, ());\n             };\n         };\n-        do iter::repeat(7u) || {\n+        for iter::repeat(7u) || {\n             comm::recv(work_exit_po);\n         };\n         log(debug, \"sending teardown_loop msg..\");"}, {"sha": "7402bfa0dbbd9989c34f1afe75e49aa7bc9ffe89", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41bca84dd95e0ef9ceb9f0a304eca0d62602198b/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41bca84dd95e0ef9ceb9f0a304eca0d62602198b/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=41bca84dd95e0ef9ceb9f0a304eca0d62602198b", "patch": "@@ -115,7 +115,7 @@ fn should_request_new_writer_for_each_page() {\n     let doc = page_pass::mk_pass(config::doc_per_mod).f(srv, doc);\n     write_markdown(doc, writer_factory);\n     // We expect two pages to have been written\n-    do iter::repeat(2u) || {\n+    for iter::repeat(2u) || {\n         comm::recv(po);\n     }\n }\n@@ -146,7 +146,7 @@ fn should_write_title_for_each_page() {\n         \"#[link(name = \\\"core\\\")]; mod a { }\");\n     let doc = page_pass::mk_pass(config::doc_per_mod).f(srv, doc);\n     write_markdown(doc, writer_factory);\n-    do iter::repeat(2u) || {\n+    for iter::repeat(2u) || {\n         let (page, markdown) = comm::recv(po);\n         alt page {\n           doc::cratepage(_) {"}, {"sha": "4c4e263701b673eded9dd47c1eea46bab7ba27fc", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41bca84dd95e0ef9ceb9f0a304eca0d62602198b/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41bca84dd95e0ef9ceb9f0a304eca0d62602198b/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=41bca84dd95e0ef9ceb9f0a304eca0d62602198b", "patch": "@@ -17,7 +17,7 @@ fn main() {\n }\n \n fn run(repeat: int, depth: int) {\n-    do iter::repeat(repeat as uint) || {\n+    for iter::repeat(repeat as uint) || {\n         #debug(\"starting %.4f\", precise_time_s());\n         do task::try || {\n             recurse_or_fail(depth, none)"}, {"sha": "9b46d74c702f29330602923feaf5710c3f9fd35a", "filename": "src/test/bench/task-perf-one-million.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/41bca84dd95e0ef9ceb9f0a304eca0d62602198b/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41bca84dd95e0ef9ceb9f0a304eca0d62602198b/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs?ref=41bca84dd95e0ef9ceb9f0a304eca0d62602198b", "patch": "@@ -12,13 +12,13 @@ fn calc(children: uint, parent_ch: comm::chan<msg>) {\n     let mut child_chs = ~[];\n     let mut sum = 0;\n \n-    do iter::repeat (children) || {\n+    for iter::repeat (children) || {\n         do task::spawn || {\n             calc(0u, chan);\n         };\n     }\n \n-    do iter::repeat (children) || {\n+    for iter::repeat (children) || {\n         alt check comm::recv(port) {\n           ready(child_ch) {\n             vec::push(child_chs, child_ch);\n@@ -36,7 +36,7 @@ fn calc(children: uint, parent_ch: comm::chan<msg>) {\n         }\n     }\n \n-    do iter::repeat (children) || {\n+    for iter::repeat (children) || {\n         alt check comm::recv(port) {\n           done(child_sum) { sum += child_sum; }\n         }"}, {"sha": "a09a53a1d65b2adb525e0be0e5cc55af506ca03e", "filename": "src/test/run-fail/extern-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41bca84dd95e0ef9ceb9f0a304eca0d62602198b/src%2Ftest%2Frun-fail%2Fextern-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41bca84dd95e0ef9ceb9f0a304eca0d62602198b/src%2Ftest%2Frun-fail%2Fextern-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fextern-fail.rs?ref=41bca84dd95e0ef9ceb9f0a304eca0d62602198b", "patch": "@@ -21,7 +21,7 @@ fn count(n: uint) -> uint {\n }\n \n fn main() {\n-    do iter::repeat(10u) || {\n+    for iter::repeat(10u) || {\n         do task::spawn || {\n             let result = count(5u);\n             #debug(\"result = %?\", result);"}, {"sha": "4e8439ec1a2cb486f43c96276699caaa38732231", "filename": "src/test/run-pass/extern-stress.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41bca84dd95e0ef9ceb9f0a304eca0d62602198b/src%2Ftest%2Frun-pass%2Fextern-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41bca84dd95e0ef9ceb9f0a304eca0d62602198b/src%2Ftest%2Frun-pass%2Fextern-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-stress.rs?ref=41bca84dd95e0ef9ceb9f0a304eca0d62602198b", "patch": "@@ -20,7 +20,7 @@ fn count(n: uint) -> uint {\n }\n \n fn main() {\n-    do iter::repeat(100u) || {\n+    for iter::repeat(100u) || {\n         do task::spawn || {\n             assert count(5u) == 16u;\n         };"}, {"sha": "174e4c483fdba1716ff1bc2ec5ddb3538b4ac28c", "filename": "src/test/run-pass/extern-yield.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41bca84dd95e0ef9ceb9f0a304eca0d62602198b/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41bca84dd95e0ef9ceb9f0a304eca0d62602198b/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-yield.rs?ref=41bca84dd95e0ef9ceb9f0a304eca0d62602198b", "patch": "@@ -17,7 +17,7 @@ fn count(n: uint) -> uint {\n }\n \n fn main() {\n-    do iter::repeat(10u) || {\n+    for iter::repeat(10u) || {\n         do task::spawn || {\n             let result = count(5u);\n             #debug(\"result = %?\", result);"}, {"sha": "662c1804fc30bac528346cb9aa100f1b34d48a7b", "filename": "src/test/run-pass/issue-783.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41bca84dd95e0ef9ceb9f0a304eca0d62602198b/src%2Ftest%2Frun-pass%2Fissue-783.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41bca84dd95e0ef9ceb9f0a304eca0d62602198b/src%2Ftest%2Frun-pass%2Fissue-783.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-783.rs?ref=41bca84dd95e0ef9ceb9f0a304eca0d62602198b", "patch": "@@ -21,7 +21,7 @@ fn a() {\n }\n \n fn main() {\n-    do iter::repeat(100u) || {\n+    for iter::repeat(100u) || {\n         spawn(|| a() );\n     }\n }"}]}