{"sha": "faf0f5b196ead1b2f3083c14ed4ddeab3bd85063", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhZjBmNWIxOTZlYWQxYjJmMzA4M2MxNGVkNGRkZWFiM2JkODUwNjM=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-02-09T23:00:50Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-02-16T10:31:26Z"}, "message": "Document where clauses.\n\nCloses #21859.", "tree": {"sha": "2e65aa72405f284fd7c356f9ca467736e56b655b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e65aa72405f284fd7c356f9ca467736e56b655b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/faf0f5b196ead1b2f3083c14ed4ddeab3bd85063", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/faf0f5b196ead1b2f3083c14ed4ddeab3bd85063", "html_url": "https://github.com/rust-lang/rust/commit/faf0f5b196ead1b2f3083c14ed4ddeab3bd85063", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/faf0f5b196ead1b2f3083c14ed4ddeab3bd85063/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf636c233dfeef5abf0de8fb35e23c0a161810d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf636c233dfeef5abf0de8fb35e23c0a161810d2", "html_url": "https://github.com/rust-lang/rust/commit/cf636c233dfeef5abf0de8fb35e23c0a161810d2"}], "stats": {"total": 90, "additions": 90, "deletions": 0}, "files": [{"sha": "52ec012320aa31398b6da465ce91308e426715b9", "filename": "src/doc/trpl/traits.md", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/faf0f5b196ead1b2f3083c14ed4ddeab3bd85063/src%2Fdoc%2Ftrpl%2Ftraits.md", "raw_url": "https://github.com/rust-lang/rust/raw/faf0f5b196ead1b2f3083c14ed4ddeab3bd85063/src%2Fdoc%2Ftrpl%2Ftraits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ftraits.md?ref=faf0f5b196ead1b2f3083c14ed4ddeab3bd85063", "patch": "@@ -273,6 +273,96 @@ One last thing about traits: generic functions with a trait bound use\n dispatched. What's that mean? Check out the chapter on [static and dynamic\n dispatch](static-and-dynamic-dispatch.html) for more.\n \n+## Where clause\n+\n+Writing functions with only a few generic types and a small number of trait\n+bounds isn't too bad, but as the number increases, the syntax gets increasingly\n+awkward:\n+\n+```\n+use std::fmt::Debug;\n+\n+fn foo<T: Clone, K: Clone + Debug>(x: T, y: K) {\n+    x.clone();\n+    y.clone();\n+    println!(\"{:?}\", y);\n+}\n+```\n+\n+The name of the function is on the far left, and the parameter list is on the\n+far right. The bounds are getting in the way.\n+\n+Rust has a solution, and it's called a '`where` clause':\n+\n+```\n+use std::fmt::Debug;\n+\n+fn foo<T: Clone, K: Clone + Debug>(x: T, y: K) {\n+    x.clone();\n+    y.clone();\n+    println!(\"{:?}\", y);\n+}\n+\n+fn bar<T, K>(x: T, y: K) where T: Clone, K: Clone + Debug {\n+    x.clone();\n+    y.clone();\n+    println!(\"{:?}\", y);\n+}\n+\n+fn main() {\n+    foo(\"Hello\", \"world\");\n+    bar(\"Hello\", \"workd\");\n+}\n+```\n+\n+`foo()` uses the syntax we showed earlier, and `bar()` uses a `where` clause.\n+All you need to do is leave off the bounds when defining your type parameters,\n+and then add `where` after the parameter list. For longer lists, whitespace can\n+be added:\n+\n+```\n+use std::fmt::Debug;\n+\n+fn bar<T, K>(x: T, y: K)\n+    where T: Clone,\n+          K: Clone + Debug {\n+\n+    x.clone();\n+    y.clone();\n+    println!(\"{:?}\", y);\n+}\n+```\n+\n+This flexibility can add clarity in complex situations.\n+\n+`where` is also more powerful than the simpler syntax. For example:\n+\n+```\n+trait ConvertTo<Output> {\n+    fn convert(&self) -> Output;\n+}\n+\n+impl ConvertTo<i64> for i32 {\n+    fn convert(&self) -> i64 { *self as i32 }\n+}\n+\n+// can be called with T == i32\n+fn normal<T: ConvertTo<i64>>(x: &T) -> i64 {\n+    x.convert()\n+}\n+\n+// can be called with T == i64\n+fn inverse<T>() -> T\n+        // this is using ConvertTo as if it were \"ConvertFrom<i32>\"\n+        where i32: ConvertTo<T> {\n+    1i32.convert()\n+}\n+```\n+\n+This shows off the additional feature of `where` clauses: they allow bounds\n+where the left-hand side is an arbitrary type (`i32` in this case), not just a\n+plain type parameter (like `T`).\n+\n ## Our `inverse` Example\n \n Back in [Generics](generics.html), we were trying to write code like this:"}]}