{"sha": "d09220de13a72b283d824285a2883da9e014f3f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwOTIyMGRlMTNhNzJiMjgzZDgyNDI4NWEyODgzZGE5ZTAxNGYzZjc=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2015-11-13T13:15:04Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2015-11-16T09:35:30Z"}, "message": "rename `ast::ImplItem_::*ImplItem` to `ast::ImplItemKind::*`", "tree": {"sha": "c597cdd27b4d81c4101ce8b917cb590a9025c57b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c597cdd27b4d81c4101ce8b917cb590a9025c57b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d09220de13a72b283d824285a2883da9e014f3f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d09220de13a72b283d824285a2883da9e014f3f7", "html_url": "https://github.com/rust-lang/rust/commit/d09220de13a72b283d824285a2883da9e014f3f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d09220de13a72b283d824285a2883da9e014f3f7/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e36872da5b252b4cfb023c4249d68be30848ddbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/e36872da5b252b4cfb023c4249d68be30848ddbb", "html_url": "https://github.com/rust-lang/rust/commit/e36872da5b252b4cfb023c4249d68be30848ddbb"}], "stats": {"total": 95, "additions": 47, "deletions": 48}, "files": [{"sha": "e6c165193f0327378b148c721a5b446a8f8585cb", "filename": "src/librustc/front/map/blocks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09220de13a72b283d824285a2883da9e014f3f7/src%2Flibrustc%2Ffront%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09220de13a72b283d824285a2883da9e014f3f7/src%2Flibrustc%2Ffront%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fblocks.rs?ref=d09220de13a72b283d824285a2883da9e014f3f7", "patch": "@@ -236,7 +236,7 @@ impl<'a> FnLikeNode<'a> {\n             },\n             map::NodeImplItem(ii) => {\n                 match ii.node {\n-                    ast::ImplItem_::Method(ref sig, ref body) => {\n+                    ast::ImplItemKind::Method(ref sig, ref body) => {\n                         method(ii.id, ii.name, sig, Some(ii.vis), body, ii.span)\n                     }\n                     _ => {"}, {"sha": "04f7938e9ba4f8c34121c4a7d891b5ce9b2c57b3", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09220de13a72b283d824285a2883da9e014f3f7/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09220de13a72b283d824285a2883da9e014f3f7/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=d09220de13a72b283d824285a2883da9e014f3f7", "patch": "@@ -623,7 +623,7 @@ impl fold::Folder for ReplaceBodyWithLoop {\n \n     fn fold_impl_item(&mut self, i: P<ast::ImplItem>) -> SmallVector<P<ast::ImplItem>> {\n         match i.node {\n-            ast::ConstImplItem(..) => {\n+            ast::ImplItemKind::Const(..) => {\n                 self.within_static_or_const = true;\n                 let ret = fold::noop_fold_impl_item(i, self);\n                 self.within_static_or_const = false;"}, {"sha": "1a3b03a87a1a2c8bf9dd7115f6f23576c0370284", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d09220de13a72b283d824285a2883da9e014f3f7/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09220de13a72b283d824285a2883da9e014f3f7/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=d09220de13a72b283d824285a2883da9e014f3f7", "patch": "@@ -675,14 +675,14 @@ pub fn lower_impl_item(_lctx: &LoweringContext, i: &ImplItem) -> P<hir::ImplItem\n         attrs: i.attrs.clone(),\n         vis: lower_visibility(_lctx, i.vis),\n         node: match i.node {\n-            ConstImplItem(ref ty, ref expr) => {\n+            ImplItemKind::Const(ref ty, ref expr) => {\n                 hir::ImplItemKind::Const(lower_ty(_lctx, ty), lower_expr(_lctx, expr))\n             }\n-            MethodImplItem(ref sig, ref body) => {\n+            ImplItemKind::Method(ref sig, ref body) => {\n                 hir::ImplItemKind::Method(lower_method_sig(_lctx, sig), lower_block(_lctx, body))\n             }\n-            TypeImplItem(ref ty) => hir::ImplItemKind::Type(lower_ty(_lctx, ty)),\n-            MacImplItem(..) => panic!(\"Shouldn't exist any more\"),\n+            ImplItemKind::Type(ref ty) => hir::ImplItemKind::Type(lower_ty(_lctx, ty)),\n+            ImplItemKind::Macro(..) => panic!(\"Shouldn't exist any more\"),\n         },\n         span: i.span,\n     })"}, {"sha": "682e203f8561749c0596438de4d649e9291e0403", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d09220de13a72b283d824285a2883da9e014f3f7/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09220de13a72b283d824285a2883da9e014f3f7/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=d09220de13a72b283d824285a2883da9e014f3f7", "patch": "@@ -992,22 +992,22 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DumpCsvVisitor<'l, 'tcx> {\n \n     fn visit_impl_item(&mut self, impl_item: &ast::ImplItem) {\n         match impl_item.node {\n-            ast::ConstImplItem(ref ty, ref expr) => {\n+            ast::ImplItemKind::Const(ref ty, ref expr) => {\n                 self.process_const(impl_item.id,\n                                    impl_item.ident.name,\n                                    impl_item.span,\n                                    &ty,\n                                    &expr);\n             }\n-            ast::MethodImplItem(ref sig, ref body) => {\n+            ast::ImplItemKind::Method(ref sig, ref body) => {\n                 self.process_method(sig,\n                                     Some(body),\n                                     impl_item.id,\n                                     impl_item.ident.name,\n                                     impl_item.span);\n             }\n-            ast::TypeImplItem(_) |\n-            ast::MacImplItem(_) => {}\n+            ast::ImplItemKind::Type(_) |\n+            ast::ImplItemKind::Macro(_) => {}\n         }\n     }\n "}, {"sha": "cb36ceb8a9f20916a1ec1548ea30184789297dd8", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d09220de13a72b283d824285a2883da9e014f3f7/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09220de13a72b283d824285a2883da9e014f3f7/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=d09220de13a72b283d824285a2883da9e014f3f7", "patch": "@@ -20,7 +20,6 @@ pub use self::Expr_::*;\n pub use self::FloatTy::*;\n pub use self::FunctionRetTy::*;\n pub use self::ForeignItem_::*;\n-pub use self::ImplItem_::*;\n pub use self::IntTy::*;\n pub use self::Item_::*;\n pub use self::KleeneOp::*;\n@@ -1230,16 +1229,16 @@ pub struct ImplItem {\n     pub ident: Ident,\n     pub vis: Visibility,\n     pub attrs: Vec<Attribute>,\n-    pub node: ImplItem_,\n+    pub node: ImplItemKind,\n     pub span: Span,\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub enum ImplItem_ {\n-    ConstImplItem(P<Ty>, P<Expr>),\n-    MethodImplItem(MethodSig, P<Block>),\n-    TypeImplItem(P<Ty>),\n-    MacImplItem(Mac),\n+pub enum ImplItemKind {\n+    Const(P<Ty>, P<Expr>),\n+    Method(MethodSig, P<Block>),\n+    Type(P<Ty>),\n+    Macro(Mac),\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]"}, {"sha": "625abf706caa4325155212041c6d703bbb287511", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d09220de13a72b283d824285a2883da9e014f3f7/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09220de13a72b283d824285a2883da9e014f3f7/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=d09220de13a72b283d824285a2883da9e014f3f7", "patch": "@@ -480,7 +480,7 @@ impl<'a> TraitDef<'a> {\n                 ident: ident,\n                 vis: ast::Inherited,\n                 attrs: Vec::new(),\n-                node: ast::TypeImplItem(type_def.to_ty(cx,\n+                node: ast::ImplItemKind::Type(type_def.to_ty(cx,\n                     self.span,\n                     type_ident,\n                     generics\n@@ -895,7 +895,7 @@ impl<'a> MethodDef<'a> {\n             span: trait_.span,\n             vis: ast::Inherited,\n             ident: method_ident,\n-            node: ast::MethodImplItem(ast::MethodSig {\n+            node: ast::ImplItemKind::Method(ast::MethodSig {\n                 generics: fn_generics,\n                 abi: abi,\n                 explicit_self: explicit_self,"}, {"sha": "a0e4fd301a2fb3598edcbca1a0be84fd6ce1f096", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d09220de13a72b283d824285a2883da9e014f3f7/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09220de13a72b283d824285a2883da9e014f3f7/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=d09220de13a72b283d824285a2883da9e014f3f7", "patch": "@@ -1030,23 +1030,23 @@ fn expand_item_multi_modifier(mut it: Annotatable,\n fn expand_impl_item(ii: P<ast::ImplItem>, fld: &mut MacroExpander)\n                  -> SmallVector<P<ast::ImplItem>> {\n     match ii.node {\n-        ast::MethodImplItem(..) => SmallVector::one(ii.map(|ii| ast::ImplItem {\n+        ast::ImplItemKind::Method(..) => SmallVector::one(ii.map(|ii| ast::ImplItem {\n             id: ii.id,\n             ident: ii.ident,\n             attrs: ii.attrs,\n             vis: ii.vis,\n             node: match ii.node  {\n-                ast::MethodImplItem(sig, body) => {\n+                ast::ImplItemKind::Method(sig, body) => {\n                     let (sig, body) = expand_and_rename_method(sig, body, fld);\n-                    ast::MethodImplItem(sig, body)\n+                    ast::ImplItemKind::Method(sig, body)\n                 }\n                 _ => unreachable!()\n             },\n             span: fld.new_span(ii.span)\n         })),\n-        ast::MacImplItem(_) => {\n+        ast::ImplItemKind::Macro(_) => {\n             let (span, mac) = ii.and_then(|ii| match ii.node {\n-                ast::MacImplItem(mac) => (ii.span, mac),\n+                ast::ImplItemKind::Macro(mac) => (ii.span, mac),\n                 _ => unreachable!()\n             });\n             let maybe_new_items ="}, {"sha": "ca232963e65a9bdd470d521b518d5dcb79cbadb2", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d09220de13a72b283d824285a2883da9e014f3f7/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09220de13a72b283d824285a2883da9e014f3f7/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=d09220de13a72b283d824285a2883da9e014f3f7", "patch": "@@ -998,12 +998,12 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n \n     fn visit_impl_item(&mut self, ii: &'v ast::ImplItem) {\n         match ii.node {\n-            ast::ConstImplItem(..) => {\n+            ast::ImplItemKind::Const(..) => {\n                 self.gate_feature(\"associated_consts\",\n                                   ii.span,\n                                   \"associated constants are experimental\")\n             }\n-            ast::MethodImplItem(ref sig, _) => {\n+            ast::ImplItemKind::Method(ref sig, _) => {\n                 if sig.constness == ast::Constness::Const {\n                     self.gate_feature(\"const_fn\", ii.span, \"const fn is unstable\");\n                 }"}, {"sha": "3dba6cbecbd1cb62ff278f8ca079b63e41fc8546", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d09220de13a72b283d824285a2883da9e014f3f7/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09220de13a72b283d824285a2883da9e014f3f7/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=d09220de13a72b283d824285a2883da9e014f3f7", "patch": "@@ -1001,15 +1001,15 @@ pub fn noop_fold_impl_item<T: Folder>(i: P<ImplItem>, folder: &mut T)\n         attrs: fold_attrs(attrs, folder),\n         vis: vis,\n         node: match node  {\n-            ConstImplItem(ty, expr) => {\n-                ConstImplItem(folder.fold_ty(ty), folder.fold_expr(expr))\n+            ast::ImplItemKind::Const(ty, expr) => {\n+                ast::ImplItemKind::Const(folder.fold_ty(ty), folder.fold_expr(expr))\n             }\n-            MethodImplItem(sig, body) => {\n-                MethodImplItem(noop_fold_method_sig(sig, folder),\n+            ast::ImplItemKind::Method(sig, body) => {\n+                ast::ImplItemKind::Method(noop_fold_method_sig(sig, folder),\n                                folder.fold_block(body))\n             }\n-            TypeImplItem(ty) => TypeImplItem(folder.fold_ty(ty)),\n-            MacImplItem(mac) => MacImplItem(folder.fold_mac(mac))\n+            ast::ImplItemKind::Type(ty) => ast::ImplItemKind::Type(folder.fold_ty(ty)),\n+            ast::ImplItemKind::Macro(mac) => ast::ImplItemKind::Macro(folder.fold_mac(mac))\n         },\n         span: folder.new_span(span)\n     }))"}, {"sha": "56a06f70ed4b4406dded7611872c3361d21ed0af", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d09220de13a72b283d824285a2883da9e014f3f7/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09220de13a72b283d824285a2883da9e014f3f7/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d09220de13a72b283d824285a2883da9e014f3f7", "patch": "@@ -17,7 +17,7 @@ use ast::{Public, Unsafety};\n use ast::{Mod, BiAdd, Arg, Arm, Attribute, BindByRef, BindByValue};\n use ast::{BiBitAnd, BiBitOr, BiBitXor, BiRem, BiLt, Block};\n use ast::{BlockCheckMode, CaptureByRef, CaptureByValue, CaptureClause};\n-use ast::{Constness, ConstImplItem, ConstTraitItem, Crate, CrateConfig};\n+use ast::{Constness, ConstTraitItem, Crate, CrateConfig};\n use ast::{Decl, DeclItem, DeclLocal, DefaultBlock, DefaultReturn};\n use ast::{UnDeref, BiDiv, EMPTY_CTXT, EnumDef, ExplicitSelf};\n use ast::{Expr, Expr_, ExprAddrOf, ExprMatch, ExprAgain};\n@@ -39,7 +39,7 @@ use ast::{LitStr, LitInt, Local};\n use ast::{MacStmtWithBraces, MacStmtWithSemicolon, MacStmtWithoutBraces};\n use ast::{MutImmutable, MutMutable, Mac_};\n use ast::{MutTy, BiMul, Mutability};\n-use ast::{MethodImplItem, NamedField, UnNeg, NoReturn, UnNot};\n+use ast::{NamedField, UnNeg, NoReturn, UnNot};\n use ast::{Pat, PatBox, PatEnum, PatIdent, PatLit, PatQPath, PatMac, PatRange};\n use ast::{PatRegion, PatStruct, PatTup, PatVec, PatWild};\n use ast::{PolyTraitRef, QSelf};\n@@ -52,7 +52,7 @@ use ast::{Ty, Ty_, TypeBinding, TyMac};\n use ast::{TyFixedLengthVec, TyBareFn, TyTypeof, TyInfer};\n use ast::{TyParam, TyParamBound, TyParen, TyPath, TyPolyTraitRef, TyPtr};\n use ast::{TyRptr, TyTup, TyU32, TyVec};\n-use ast::{TypeImplItem, TypeTraitItem};\n+use ast::TypeTraitItem;\n use ast::{UnnamedField, UnsafeBlock};\n use ast::{ViewPath, ViewPathGlob, ViewPathList, ViewPathSimple};\n use ast::{Visibility, WhereClause};\n@@ -4425,7 +4425,7 @@ impl<'a> Parser<'a> {\n             try!(self.expect(&token::Eq));\n             let typ = try!(self.parse_ty_sum());\n             try!(self.expect(&token::Semi));\n-            (name, TypeImplItem(typ))\n+            (name, ast::ImplItemKind::Type(typ))\n         } else if self.is_const_item() {\n             try!(self.expect_keyword(keywords::Const));\n             let name = try!(self.parse_ident());\n@@ -4434,7 +4434,7 @@ impl<'a> Parser<'a> {\n             try!(self.expect(&token::Eq));\n             let expr = try!(self.parse_expr());\n             try!(self.commit_expr_expecting(&expr, token::Semi));\n-            (name, ConstImplItem(typ, expr))\n+            (name, ast::ImplItemKind::Const(typ, expr))\n         } else {\n             let (name, inner_attrs, node) = try!(self.parse_impl_method(vis));\n             attrs.extend(inner_attrs);\n@@ -4464,7 +4464,7 @@ impl<'a> Parser<'a> {\n \n     /// Parse a method or a macro invocation in a trait impl.\n     fn parse_impl_method(&mut self, vis: Visibility)\n-                         -> PResult<(Ident, Vec<ast::Attribute>, ast::ImplItem_)> {\n+                         -> PResult<(Ident, Vec<ast::Attribute>, ast::ImplItemKind)> {\n         // code copied from parse_macro_use_or_failure... abstraction!\n         if !self.token.is_any_keyword()\n             && self.look_ahead(1, |t| *t == token::Not)\n@@ -4490,7 +4490,7 @@ impl<'a> Parser<'a> {\n             if delim != token::Brace {\n                 try!(self.expect(&token::Semi))\n             }\n-            Ok((token::special_idents::invalid, vec![], ast::MacImplItem(m)))\n+            Ok((token::special_idents::invalid, vec![], ast::ImplItemKind::Macro(m)))\n         } else {\n             let (constness, unsafety, abi) = try!(self.parse_fn_front_matter());\n             let ident = try!(self.parse_ident());\n@@ -4500,7 +4500,7 @@ impl<'a> Parser<'a> {\n                 }));\n             generics.where_clause = try!(self.parse_where_clause());\n             let (inner_attrs, body) = try!(self.parse_inner_attrs_and_block());\n-            Ok((ident, inner_attrs, MethodImplItem(ast::MethodSig {\n+            Ok((ident, inner_attrs, ast::ImplItemKind::Method(ast::MethodSig {\n                 generics: generics,\n                 abi: abi,\n                 explicit_self: explicit_self,"}, {"sha": "2c07d75f1fa5ab6bc83abacfbb4bdec9045a8e5a", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d09220de13a72b283d824285a2883da9e014f3f7/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09220de13a72b283d824285a2883da9e014f3f7/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=d09220de13a72b283d824285a2883da9e014f3f7", "patch": "@@ -1576,19 +1576,19 @@ impl<'a> State<'a> {\n         try!(self.maybe_print_comment(ii.span.lo));\n         try!(self.print_outer_attributes(&ii.attrs));\n         match ii.node {\n-            ast::ConstImplItem(ref ty, ref expr) => {\n+            ast::ImplItemKind::Const(ref ty, ref expr) => {\n                 try!(self.print_associated_const(ii.ident, &ty, Some(&expr), ii.vis));\n             }\n-            ast::MethodImplItem(ref sig, ref body) => {\n+            ast::ImplItemKind::Method(ref sig, ref body) => {\n                 try!(self.head(\"\"));\n                 try!(self.print_method_sig(ii.ident, sig, ii.vis));\n                 try!(self.nbsp());\n                 try!(self.print_block_with_attrs(body, &ii.attrs));\n             }\n-            ast::TypeImplItem(ref ty) => {\n+            ast::ImplItemKind::Type(ref ty) => {\n                 try!(self.print_associated_type(ii.ident, None, Some(ty)));\n             }\n-            ast::MacImplItem(codemap::Spanned { ref node, .. }) => {\n+            ast::ImplItemKind::Macro(codemap::Spanned { ref node, .. }) => {\n                 // code copied from ItemMac:\n                 try!(self.print_path(&node.path, false, 0));\n                 try!(word(&mut self.s, \"! \"));"}, {"sha": "516c983c2085528f36649bb65c872679fa79abda", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d09220de13a72b283d824285a2883da9e014f3f7/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09220de13a72b283d824285a2883da9e014f3f7/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=d09220de13a72b283d824285a2883da9e014f3f7", "patch": "@@ -588,18 +588,18 @@ pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplIt\n     visitor.visit_ident(impl_item.span, impl_item.ident);\n     walk_list!(visitor, visit_attribute, &impl_item.attrs);\n     match impl_item.node {\n-        ConstImplItem(ref ty, ref expr) => {\n+        ImplItemKind::Const(ref ty, ref expr) => {\n             visitor.visit_ty(ty);\n             visitor.visit_expr(expr);\n         }\n-        MethodImplItem(ref sig, ref body) => {\n+        ImplItemKind::Method(ref sig, ref body) => {\n             visitor.visit_fn(FnKind::Method(impl_item.ident, sig, Some(impl_item.vis)), &sig.decl,\n                              body, impl_item.span, impl_item.id);\n         }\n-        TypeImplItem(ref ty) => {\n+        ImplItemKind::Type(ref ty) => {\n             visitor.visit_ty(ty);\n         }\n-        MacImplItem(ref mac) => {\n+        ImplItemKind::Macro(ref mac) => {\n             visitor.visit_mac(mac);\n         }\n     }"}]}