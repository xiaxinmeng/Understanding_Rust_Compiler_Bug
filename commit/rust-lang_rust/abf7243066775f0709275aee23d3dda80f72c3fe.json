{"sha": "abf7243066775f0709275aee23d3dda80f72c3fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiZjcyNDMwNjY3NzVmMDcwOTI3NWFlZTIzZDNkZGE4MGY3MmMzZmU=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-10-28T13:38:12Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-10-28T13:38:12Z"}, "message": "Rollup merge of #55257 - mjbshaw:static, r=oli-obk\n\nAllow extern statics with an extern type\n\nFixes #55239", "tree": {"sha": "c8dc40c8248ecfc14a0b877fd1976a6e1554b7e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8dc40c8248ecfc14a0b877fd1976a6e1554b7e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abf7243066775f0709275aee23d3dda80f72c3fe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlvVu8QACgkQ/vbIBR0O\nATyMDA/+IcvzreJoXc+Sge2A7BeOFivxl8XlTqXuL4muM+4KZ+RxHawKG4JI2Bgv\nK5TXqhqS1VaEGs7gp1rIgxyvxRYeeZphA8AE/rQgTK6fq5slq02xJ6Hb7HLhi5Ro\npPauGsfKoxZego2aTzSkqflvjgFlwY6i42sMIlIZivo9IEWaJ3sTB9D3BU2tQH2o\nuXFYIPrirsL024njgEHlByRUttmnScc18wxw9zhbH4lbnTGPHIbLinp9jHfZSHEK\n2QD0OSUqf623EC0Z8Hy4xJUcwT2Qa1vNANS2u9uBbKLrTROoVTHMabbj0UglamiL\n2nbh89yRokPqxo73oxliBeS84IoCmUY3KUIh+arsqYiXK/KwQYkMiLLfdtvxFtGC\n6G4sfAi2A0TUZ9XPyo2bxXBwaTx2YW2Kve1ptPvB5QiaOhiTRIb51PDmglxC0EE5\nZSAe3rKh0qD5DtH2q9Xq4LtxyrQfCymlx5GjM5ERtk6GGa+0H9f4ozPJW8/OzYWC\nuBil5azZ3R2r0XWM6x1+46s47SokmW9qSVHkVyKkbtRjSkbBM3f9cWIGFnuj6i6Q\nOVwhZYugc2jak6Hdp+JgPq+LKdTO/yF0hf91m3DAnlsqT8LdTlfeaYOHVqTMkqc8\nyYv3CwOVdQ0vxHaTJJ5U+rDnB1oFf5F53Tizv2D0DCIcpL+fvlo=\n=myEg\n-----END PGP SIGNATURE-----", "payload": "tree c8dc40c8248ecfc14a0b877fd1976a6e1554b7e6\nparent aaa20c61d6cc090b139882a7946dfe89bb3486c1\nparent 5b84550d7c39821704a48b53c8cbe3916ab100b7\nauthor kennytm <kennytm@gmail.com> 1540733892 +0800\ncommitter kennytm <kennytm@gmail.com> 1540733892 +0800\n\nRollup merge of #55257 - mjbshaw:static, r=oli-obk\n\nAllow extern statics with an extern type\n\nFixes #55239\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abf7243066775f0709275aee23d3dda80f72c3fe", "html_url": "https://github.com/rust-lang/rust/commit/abf7243066775f0709275aee23d3dda80f72c3fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abf7243066775f0709275aee23d3dda80f72c3fe/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aaa20c61d6cc090b139882a7946dfe89bb3486c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaa20c61d6cc090b139882a7946dfe89bb3486c1", "html_url": "https://github.com/rust-lang/rust/commit/aaa20c61d6cc090b139882a7946dfe89bb3486c1"}, {"sha": "5b84550d7c39821704a48b53c8cbe3916ab100b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b84550d7c39821704a48b53c8cbe3916ab100b7", "html_url": "https://github.com/rust-lang/rust/commit/5b84550d7c39821704a48b53c8cbe3916ab100b7"}], "stats": {"total": 75, "additions": 61, "deletions": 14}, "files": [{"sha": "ea84e874b1a5b3b9dc6abb2a7f5bad9ff37f3bc5", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/abf7243066775f0709275aee23d3dda80f72c3fe/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf7243066775f0709275aee23d3dda80f72c3fe/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=abf7243066775f0709275aee23d3dda80f72c3fe", "patch": "@@ -13,7 +13,7 @@ use constrained_type_params::{identify_constrained_type_params, Parameter};\n \n use hir::def_id::DefId;\n use rustc::traits::{self, ObligationCauseCode};\n-use rustc::ty::{self, Lift, Ty, TyCtxt, GenericParamDefKind, TypeFoldable};\n+use rustc::ty::{self, Lift, Ty, TyCtxt, TyKind, GenericParamDefKind, TypeFoldable};\n use rustc::ty::subst::{Subst, Substs};\n use rustc::ty::util::ExplicitSelf;\n use rustc::util::nodemap::{FxHashSet, FxHashMap};\n@@ -119,14 +119,14 @@ pub fn check_item_well_formed<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: Def\n             check_item_fn(tcx, item);\n         }\n         hir::ItemKind::Static(ref ty, ..) => {\n-            check_item_type(tcx, item.id, ty.span);\n+            check_item_type(tcx, item.id, ty.span, false);\n         }\n         hir::ItemKind::Const(ref ty, ..) => {\n-            check_item_type(tcx, item.id, ty.span);\n+            check_item_type(tcx, item.id, ty.span, false);\n         }\n         hir::ItemKind::ForeignMod(ref module) => for it in module.items.iter() {\n             if let hir::ForeignItemKind::Static(ref ty, ..) = it.node {\n-                check_item_type(tcx, it.id, ty.span);\n+                check_item_type(tcx, it.id, ty.span, true);\n             }\n         },\n         hir::ItemKind::Struct(ref struct_def, ref ast_generics) => {\n@@ -340,23 +340,33 @@ fn check_item_fn<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item: &hir::Item) {\n     })\n }\n \n-fn check_item_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item_id: ast::NodeId, ty_span: Span) {\n+fn check_item_type<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    item_id: ast::NodeId,\n+    ty_span: Span,\n+    allow_foreign_ty: bool,\n+) {\n     debug!(\"check_item_type: {:?}\", item_id);\n \n     for_id(tcx, item_id, ty_span).with_fcx(|fcx, _this| {\n         let ty = fcx.tcx.type_of(fcx.tcx.hir.local_def_id(item_id));\n         let item_ty = fcx.normalize_associated_types_in(ty_span, &ty);\n \n+        let mut forbid_unsized = true;\n+        if allow_foreign_ty {\n+            if let TyKind::Foreign(_) = tcx.struct_tail(item_ty).sty {\n+                forbid_unsized = false;\n+            }\n+        }\n+\n         fcx.register_wf_obligation(item_ty, ty_span, ObligationCauseCode::MiscObligation);\n-        fcx.register_bound(\n-            item_ty,\n-            fcx.tcx.require_lang_item(lang_items::SizedTraitLangItem),\n-            traits::ObligationCause::new(\n-                ty_span,\n-                fcx.body_id,\n-                traits::MiscObligation,\n-            ),\n-        );\n+        if forbid_unsized {\n+            fcx.register_bound(\n+                item_ty,\n+                fcx.tcx.require_lang_item(lang_items::SizedTraitLangItem),\n+                traits::ObligationCause::new(ty_span, fcx.body_id, traits::MiscObligation),\n+            );\n+        }\n \n         vec![] // no implied bounds in a const etc\n     });"}, {"sha": "72e2853b9f03845fa6655ef2ea457c7c77d63971", "filename": "src/test/ui/static/static-extern-type.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/abf7243066775f0709275aee23d3dda80f72c3fe/src%2Ftest%2Fui%2Fstatic%2Fstatic-extern-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf7243066775f0709275aee23d3dda80f72c3fe/src%2Ftest%2Fui%2Fstatic%2Fstatic-extern-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-extern-type.rs?ref=abf7243066775f0709275aee23d3dda80f72c3fe", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+#![feature(extern_types)]\n+\n+pub mod a {\n+    extern \"C\" {\n+        pub type StartFn;\n+        pub static start: StartFn;\n+    }\n+}\n+\n+pub mod b {\n+    #[repr(transparent)]\n+    pub struct TransparentType(::a::StartFn);\n+    extern \"C\" {\n+        pub static start: TransparentType;\n+    }\n+}\n+\n+pub mod c {\n+    #[repr(C)]\n+    pub struct CType(u32, ::b::TransparentType);\n+    extern \"C\" {\n+        pub static start: CType;\n+    }\n+}\n+\n+fn main() {}"}]}