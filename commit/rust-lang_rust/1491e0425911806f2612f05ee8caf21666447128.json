{"sha": "1491e0425911806f2612f05ee8caf21666447128", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0OTFlMDQyNTkxMTgwNmYyNjEyZjA1ZWU4Y2FmMjE2NjY0NDcxMjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-28T20:32:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-28T20:32:56Z"}, "message": "Auto merge of #39234 - segevfiner:fix-backtraces-on-windows-gnu, r=petrochenkov\n\nMake backtraces work on Windows GNU targets again.\n\nThis is done by adding a function that can return a filename\nto pass to backtrace_create_state. The filename is obtained in\na safe way by first getting the filename, locking the file so it can't\nbe moved, and then getting the filename again and making sure it's the same.\n\nSee: https://github.com/rust-lang/rust/pull/37359#issuecomment-260123399\nIssue: #33985\n\nNote though that this isn't that pretty...\n\nI had to implement a `WideCharToMultiByte` wrapper function to convert to the ANSI code page. This will work better than only allowing ASCII provided that the ANSI code page is set to the user's local language, which is often the case.\n\nAlso, please make sure that I didn't break the Unix build.", "tree": {"sha": "ea70520dbf0d73ef2fa82d91074776160517b8bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea70520dbf0d73ef2fa82d91074776160517b8bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1491e0425911806f2612f05ee8caf21666447128", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1491e0425911806f2612f05ee8caf21666447128", "html_url": "https://github.com/rust-lang/rust/commit/1491e0425911806f2612f05ee8caf21666447128", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1491e0425911806f2612f05ee8caf21666447128/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c81c1d6a41babf7e34120625727211cad7b40b87", "url": "https://api.github.com/repos/rust-lang/rust/commits/c81c1d6a41babf7e34120625727211cad7b40b87", "html_url": "https://github.com/rust-lang/rust/commit/c81c1d6a41babf7e34120625727211cad7b40b87"}, {"sha": "ab21314c3fbf093c92123abee62101d15846c1e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab21314c3fbf093c92123abee62101d15846c1e2", "html_url": "https://github.com/rust-lang/rust/commit/ab21314c3fbf093c92123abee62101d15846c1e2"}], "stats": {"total": 186, "additions": 182, "deletions": 4}, "files": [{"sha": "1eef89bf66f74af2eac1eedd7dc06e9db508a023", "filename": "src/libstd/sys/unix/backtrace/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1491e0425911806f2612f05ee8caf21666447128/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1491e0425911806f2612f05ee8caf21666447128/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fmod.rs?ref=1491e0425911806f2612f05ee8caf21666447128", "patch": "@@ -89,3 +89,14 @@ pub use self::tracing::write;\n mod tracing;\n // symbol resolvers:\n mod printing;\n+\n+#[cfg(not(any(target_os = \"macos\", target_os = \"ios\", target_os = \"emscripten\")))]\n+pub mod gnu {\n+    use io;\n+    use fs;\n+    use libc::c_char;\n+\n+    pub fn get_executable_filename() -> io::Result<(Vec<c_char>, fs::File)> {\n+        Err(io::Error::new(io::ErrorKind::Other, \"Not implemented\"))\n+    }\n+}"}, {"sha": "94aaf439f3d576bdb7fa53cc23752da69c34d65a", "filename": "src/libstd/sys/windows/backtrace.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1491e0425911806f2612f05ee8caf21666447128/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1491e0425911806f2612f05ee8caf21666447128/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs?ref=1491e0425911806f2612f05ee8caf21666447128", "patch": "@@ -51,6 +51,10 @@ mod printing;\n #[path = \"printing/gnu.rs\"]\n mod printing;\n \n+#[cfg(target_env = \"gnu\")]\n+#[path = \"backtrace_gnu.rs\"]\n+pub mod gnu;\n+\n type SymInitializeFn =\n     unsafe extern \"system\" fn(c::HANDLE, *mut c_void,\n                               c::BOOL) -> c::BOOL;"}, {"sha": "f0d29dd4178d125acff38545459c05752030a757", "filename": "src/libstd/sys/windows/backtrace_gnu.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/1491e0425911806f2612f05ee8caf21666447128/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1491e0425911806f2612f05ee8caf21666447128/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace_gnu.rs?ref=1491e0425911806f2612f05ee8caf21666447128", "patch": "@@ -0,0 +1,62 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use io;\n+use sys::c;\n+use libc::c_char;\n+use path::PathBuf;\n+use fs::{OpenOptions, File};\n+use sys::ext::fs::OpenOptionsExt;\n+use sys::handle::Handle;\n+use super::super::{fill_utf16_buf, os2path, to_u16s, wide_char_to_multi_byte};\n+\n+fn query_full_process_image_name() -> io::Result<PathBuf> {\n+    unsafe {\n+        let process_handle = Handle::new(c::OpenProcess(c::PROCESS_QUERY_INFORMATION,\n+                                                        c::FALSE,\n+                                                        c::GetCurrentProcessId()));\n+        fill_utf16_buf(|buf, mut sz| {\n+            if c::QueryFullProcessImageNameW(process_handle.raw(), 0, buf, &mut sz) == 0 {\n+                0\n+            } else {\n+                sz\n+            }\n+        }, os2path)\n+    }\n+}\n+\n+fn lock_and_get_executable_filename() -> io::Result<(PathBuf, File)> {\n+    // We query the current image name, open the file without FILE_SHARE_DELETE so it\n+    // can't be moved and then get the current image name again. If the names are the\n+    // same than we have successfully locked the file\n+    let image_name1 = query_full_process_image_name()?;\n+    let file = OpenOptions::new()\n+                .read(true)\n+                .share_mode(c::FILE_SHARE_READ | c::FILE_SHARE_WRITE)\n+                .open(&image_name1)?;\n+    let image_name2 = query_full_process_image_name()?;\n+\n+    if image_name1 != image_name2 {\n+        return Err(io::Error::new(io::ErrorKind::Other,\n+                                  \"executable moved while trying to lock it\"));\n+    }\n+\n+    Ok((image_name1, file))\n+}\n+\n+// Get the executable filename for libbacktrace\n+// This returns the path in the ANSI code page and a File which should remain open\n+// for as long as the path should remain valid\n+pub fn get_executable_filename() -> io::Result<(Vec<c_char>, File)> {\n+    let (executable, file) = lock_and_get_executable_filename()?;\n+    let u16_executable = to_u16s(executable.into_os_string())?;\n+    Ok((wide_char_to_multi_byte(c::CP_ACP, c::WC_NO_BEST_FIT_CHARS,\n+                                &u16_executable, true)?, file))\n+}"}, {"sha": "1b29bf73c7aec09794eff3830c87df9842c2c53c", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1491e0425911806f2612f05ee8caf21666447128/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1491e0425911806f2612f05ee8caf21666447128/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=1491e0425911806f2612f05ee8caf21666447128", "patch": "@@ -69,6 +69,7 @@ pub type LPWCH = *mut WCHAR;\n pub type LPWIN32_FIND_DATAW = *mut WIN32_FIND_DATAW;\n pub type LPWSADATA = *mut WSADATA;\n pub type LPWSAPROTOCOL_INFO = *mut WSAPROTOCOL_INFO;\n+pub type LPSTR = *mut CHAR;\n pub type LPWSTR = *mut WCHAR;\n pub type LPFILETIME = *mut FILETIME;\n \n@@ -973,6 +974,14 @@ extern \"system\" {\n     pub fn DeleteFileW(lpPathName: LPCWSTR) -> BOOL;\n     pub fn GetCurrentDirectoryW(nBufferLength: DWORD, lpBuffer: LPWSTR) -> DWORD;\n     pub fn SetCurrentDirectoryW(lpPathName: LPCWSTR) -> BOOL;\n+    pub fn WideCharToMultiByte(CodePage: UINT,\n+                               dwFlags: DWORD,\n+                               lpWideCharStr: LPCWSTR,\n+                               cchWideChar: c_int,\n+                               lpMultiByteStr: LPSTR,\n+                               cbMultiByte: c_int,\n+                               lpDefaultChar: LPCSTR,\n+                               lpUsedDefaultChar: LPBOOL) -> c_int;\n \n     pub fn closesocket(socket: SOCKET) -> c_int;\n     pub fn recv(socket: SOCKET, buf: *mut c_void, len: c_int,\n@@ -1178,3 +1187,34 @@ compat_fn! {\n         panic!(\"rwlocks not available\")\n     }\n }\n+\n+#[cfg(target_env = \"gnu\")]\n+mod gnu {\n+    use super::*;\n+\n+    pub const PROCESS_QUERY_INFORMATION: DWORD = 0x0400;\n+\n+    pub const CP_ACP: UINT = 0;\n+\n+    pub const WC_NO_BEST_FIT_CHARS: DWORD = 0x00000400;\n+\n+    extern \"system\" {\n+        pub fn OpenProcess(dwDesiredAccess: DWORD,\n+                           bInheritHandle: BOOL,\n+                           dwProcessId: DWORD) -> HANDLE;\n+    }\n+\n+    compat_fn! {\n+        kernel32:\n+\n+        pub fn QueryFullProcessImageNameW(_hProcess: HANDLE,\n+                                          _dwFlags: DWORD,\n+                                          _lpExeName: LPWSTR,\n+                                          _lpdwSize: LPDWORD) -> BOOL {\n+            SetLastError(ERROR_CALL_NOT_IMPLEMENTED as DWORD); 0\n+        }\n+    }\n+}\n+\n+#[cfg(target_env = \"gnu\")]\n+pub use self::gnu::*;"}, {"sha": "4424c6c6136c5ff94521be912b206bdb0ed482c0", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/1491e0425911806f2612f05ee8caf21666447128/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1491e0425911806f2612f05ee8caf21666447128/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=1491e0425911806f2612f05ee8caf21666447128", "patch": "@@ -10,6 +10,7 @@\n \n #![allow(missing_docs, bad_style)]\n \n+use ptr;\n use ffi::{OsStr, OsString};\n use io::{self, ErrorKind};\n use os::windows::ffi::{OsStrExt, OsStringExt};\n@@ -171,6 +172,52 @@ fn os2path(s: &[u16]) -> PathBuf {\n     PathBuf::from(OsString::from_wide(s))\n }\n \n+#[allow(dead_code)] // Only used in backtrace::gnu::get_executable_filename()\n+fn wide_char_to_multi_byte(code_page: u32,\n+                           flags: u32,\n+                           s: &[u16],\n+                           no_default_char: bool)\n+                           -> io::Result<Vec<i8>> {\n+    unsafe {\n+        let mut size = c::WideCharToMultiByte(code_page,\n+                                              flags,\n+                                              s.as_ptr(),\n+                                              s.len() as i32,\n+                                              ptr::null_mut(),\n+                                              0,\n+                                              ptr::null(),\n+                                              ptr::null_mut());\n+        if size == 0 {\n+            return Err(io::Error::last_os_error());\n+        }\n+\n+        let mut buf = Vec::with_capacity(size as usize);\n+        buf.set_len(size as usize);\n+\n+        let mut used_default_char = c::FALSE;\n+        size = c::WideCharToMultiByte(code_page,\n+                                      flags,\n+                                      s.as_ptr(),\n+                                      s.len() as i32,\n+                                      buf.as_mut_ptr(),\n+                                      buf.len() as i32,\n+                                      ptr::null(),\n+                                      if no_default_char { &mut used_default_char }\n+                                      else { ptr::null_mut() });\n+        if size == 0 {\n+            return Err(io::Error::last_os_error());\n+        }\n+        if no_default_char && used_default_char == c::TRUE {\n+            return Err(io::Error::new(io::ErrorKind::InvalidData,\n+                                      \"string cannot be converted to requested code page\"));\n+        }\n+\n+        buf.set_len(size as usize);\n+\n+        Ok(buf)\n+    }\n+}\n+\n pub fn truncate_utf16_at_nul<'a>(v: &'a [u16]) -> &'a [u16] {\n     match v.iter().position(|c| *c == 0) {\n         // don't include the 0"}, {"sha": "d464a13ad1d3f67484d986c6976af6099347bcea", "filename": "src/libstd/sys_common/gnu/libbacktrace.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1491e0425911806f2612f05ee8caf21666447128/src%2Flibstd%2Fsys_common%2Fgnu%2Flibbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1491e0425911806f2612f05ee8caf21666447128/src%2Flibstd%2Fsys_common%2Fgnu%2Flibbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fgnu%2Flibbacktrace.rs?ref=1491e0425911806f2612f05ee8caf21666447128", "patch": "@@ -16,6 +16,7 @@ use sys_common::backtrace::{output, output_fileline};\n pub fn print(w: &mut Write, idx: isize, addr: *mut libc::c_void,\n              symaddr: *mut libc::c_void) -> io::Result<()> {\n     use ffi::CStr;\n+    use mem;\n     use ptr;\n \n     ////////////////////////////////////////////////////////////////////////\n@@ -124,7 +125,21 @@ pub fn print(w: &mut Write, idx: isize, addr: *mut libc::c_void,\n     unsafe fn init_state() -> *mut backtrace_state {\n         static mut STATE: *mut backtrace_state = ptr::null_mut();\n         if !STATE.is_null() { return STATE }\n-        STATE = backtrace_create_state(ptr::null(), 0, error_cb,\n+\n+        let filename = match ::sys::backtrace::gnu::get_executable_filename() {\n+            Ok((filename, file)) => {\n+                // filename is purposely leaked here since libbacktrace requires\n+                // it to stay allocated permanently, file is also leaked so that\n+                // the file stays locked\n+                let filename_ptr = filename.as_ptr();\n+                mem::forget(filename);\n+                mem::forget(file);\n+                filename_ptr\n+            },\n+            Err(_) => ptr::null(),\n+        };\n+\n+        STATE = backtrace_create_state(filename, 0, error_cb,\n                                        ptr::null_mut());\n         STATE\n     }"}, {"sha": "015ba75d432ad507a667ac34f7bf19f7bd0b601c", "filename": "src/test/run-pass/backtrace-debuginfo.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1491e0425911806f2612f05ee8caf21666447128/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1491e0425911806f2612f05ee8caf21666447128/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs?ref=1491e0425911806f2612f05ee8caf21666447128", "patch": "@@ -37,7 +37,7 @@ macro_rules! dump_and_die {\n                     target_os = \"ios\",\n                     target_os = \"android\",\n                     all(target_os = \"linux\", target_arch = \"arm\"),\n-                    target_os = \"windows\",\n+                    all(target_os = \"windows\", target_pointer_width = \"32\"),\n                     target_os = \"freebsd\",\n                     target_os = \"dragonfly\",\n                     target_os = \"bitrig\",\n@@ -173,4 +173,3 @@ fn main() {\n         run_test(&args[0]);\n     }\n }\n-"}, {"sha": "e892f5e7728b34f13ecba91e994c22d66c4b7c4d", "filename": "src/test/run-pass/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1491e0425911806f2612f05ee8caf21666447128/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1491e0425911806f2612f05ee8caf21666447128/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace.rs?ref=1491e0425911806f2612f05ee8caf21666447128", "patch": "@@ -104,7 +104,7 @@ fn runtest(me: &str) {\n }\n \n fn main() {\n-    if cfg!(windows) && cfg!(target_env = \"gnu\") {\n+    if cfg!(windows) && cfg!(target_env = \"gnu\") && cfg!(target_pointer_width = \"32\") {\n         return\n     }\n "}]}