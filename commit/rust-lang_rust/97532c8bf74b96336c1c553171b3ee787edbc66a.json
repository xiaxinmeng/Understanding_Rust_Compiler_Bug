{"sha": "97532c8bf74b96336c1c553171b3ee787edbc66a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3NTMyYzhiZjc0Yjk2MzM2YzFjNTUzMTcxYjNlZTc4N2VkYmM2NmE=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-11-16T11:22:40Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-11-16T11:22:40Z"}, "message": "Merge #227\n\n227: Correctly map between UTF-8 and UTF-16 positions r=aochagavia a=aochagavia\n\nFixes #202 \n\nCo-authored-by: Adolfo Ochagav\u00eda <github@adolfo.ochagavia.xyz>\nCo-authored-by: Adolfo Ochagav\u00eda <aochagavia92@gmail.com>", "tree": {"sha": "ec9b9ab4d9849cfbe30127eaf4f984dd97571e63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec9b9ab4d9849cfbe30127eaf4f984dd97571e63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97532c8bf74b96336c1c553171b3ee787edbc66a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97532c8bf74b96336c1c553171b3ee787edbc66a", "html_url": "https://github.com/rust-lang/rust/commit/97532c8bf74b96336c1c553171b3ee787edbc66a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97532c8bf74b96336c1c553171b3ee787edbc66a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "923483e321acace3bbf38688bd70d4d38f49b35e", "url": "https://api.github.com/repos/rust-lang/rust/commits/923483e321acace3bbf38688bd70d4d38f49b35e", "html_url": "https://github.com/rust-lang/rust/commit/923483e321acace3bbf38688bd70d4d38f49b35e"}, {"sha": "acd51cb361720458615bd1ceb909b0f4461328df", "url": "https://api.github.com/repos/rust-lang/rust/commits/acd51cb361720458615bd1ceb909b0f4461328df", "html_url": "https://github.com/rust-lang/rust/commit/acd51cb361720458615bd1ceb909b0f4461328df"}], "stats": {"total": 238, "additions": 208, "deletions": 30}, "files": [{"sha": "aab7e4081c6c667764f872556bdc353317e290dd", "filename": "crates/ra_editor/src/line_index.rs", "status": "modified", "additions": 197, "deletions": 22, "changes": 219, "blob_url": "https://github.com/rust-lang/rust/blob/97532c8bf74b96336c1c553171b3ee787edbc66a/crates%2Fra_editor%2Fsrc%2Fline_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97532c8bf74b96336c1c553171b3ee787edbc66a/crates%2Fra_editor%2Fsrc%2Fline_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fline_index.rs?ref=97532c8bf74b96336c1c553171b3ee787edbc66a", "patch": "@@ -1,43 +1,124 @@\n use crate::TextUnit;\n+use rustc_hash::FxHashMap;\n use superslice::Ext;\n \n-#[derive(Clone, Debug, Hash, PartialEq, Eq)]\n+#[derive(Clone, Debug, PartialEq, Eq)]\n pub struct LineIndex {\n     newlines: Vec<TextUnit>,\n+    utf16_lines: FxHashMap<u32, Vec<Utf16Char>>,\n }\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub struct LineCol {\n     pub line: u32,\n-    pub col: TextUnit,\n+    pub col_utf16: u32,\n+}\n+\n+#[derive(Clone, Debug, Hash, PartialEq, Eq)]\n+struct Utf16Char {\n+    start: TextUnit,\n+    end: TextUnit,\n+}\n+\n+impl Utf16Char {\n+    fn len(&self) -> TextUnit {\n+        self.end - self.start\n+    }\n }\n \n impl LineIndex {\n     pub fn new(text: &str) -> LineIndex {\n+        let mut utf16_lines = FxHashMap::default();\n+        let mut utf16_chars = Vec::new();\n+\n         let mut newlines = vec![0.into()];\n-        let mut curr = 0.into();\n+        let mut curr_row = 0.into();\n+        let mut curr_col = 0.into();\n+        let mut line = 0;\n         for c in text.chars() {\n-            curr += TextUnit::of_char(c);\n+            curr_row += TextUnit::of_char(c);\n             if c == '\\n' {\n-                newlines.push(curr);\n+                newlines.push(curr_row);\n+\n+                // Save any utf-16 characters seen in the previous line\n+                if utf16_chars.len() > 0 {\n+                    utf16_lines.insert(line, utf16_chars);\n+                    utf16_chars = Vec::new();\n+                }\n+\n+                // Prepare for processing the next line\n+                curr_col = 0.into();\n+                line += 1;\n+                continue;\n             }\n+\n+            let char_len = TextUnit::of_char(c);\n+            if char_len.to_usize() > 1 {\n+                utf16_chars.push(Utf16Char {\n+                    start: curr_col,\n+                    end: curr_col + char_len,\n+                });\n+            }\n+\n+            curr_col += char_len;\n+        }\n+        LineIndex {\n+            newlines,\n+            utf16_lines,\n         }\n-        LineIndex { newlines }\n     }\n \n     pub fn line_col(&self, offset: TextUnit) -> LineCol {\n         let line = self.newlines.upper_bound(&offset) - 1;\n         let line_start_offset = self.newlines[line];\n         let col = offset - line_start_offset;\n+\n         LineCol {\n             line: line as u32,\n-            col,\n+            col_utf16: self.utf8_to_utf16_col(line as u32, col) as u32,\n         }\n     }\n \n     pub fn offset(&self, line_col: LineCol) -> TextUnit {\n         //TODO: return Result\n-        self.newlines[line_col.line as usize] + line_col.col\n+        let col = self.utf16_to_utf8_col(line_col.line, line_col.col_utf16);\n+        self.newlines[line_col.line as usize] + col\n+    }\n+\n+    fn utf8_to_utf16_col(&self, line: u32, mut col: TextUnit) -> usize {\n+        if let Some(utf16_chars) = self.utf16_lines.get(&line) {\n+            let mut correction = TextUnit::from_usize(0);\n+            for c in utf16_chars {\n+                if col >= c.end {\n+                    correction += c.len() - TextUnit::from_usize(1);\n+                } else {\n+                    // From here on, all utf16 characters come *after* the character we are mapping,\n+                    // so we don't need to take them into account\n+                    break;\n+                }\n+            }\n+\n+            col -= correction;\n+        }\n+\n+        col.to_usize()\n+    }\n+\n+    fn utf16_to_utf8_col(&self, line: u32, col: u32) -> TextUnit {\n+        let mut col: TextUnit = col.into();\n+        if let Some(utf16_chars) = self.utf16_lines.get(&line) {\n+            for c in utf16_chars {\n+                if col >= c.start {\n+                    col += c.len() - TextUnit::from_usize(1);\n+                } else {\n+                    // From here on, all utf16 characters come *after* the character we are mapping,\n+                    // so we don't need to take them into account\n+                    break;\n+                }\n+            }\n+        }\n+\n+        col\n     }\n }\n \n@@ -49,63 +130,63 @@ fn test_line_index() {\n         index.line_col(0.into()),\n         LineCol {\n             line: 0,\n-            col: 0.into()\n+            col_utf16: 0\n         }\n     );\n     assert_eq!(\n         index.line_col(1.into()),\n         LineCol {\n             line: 0,\n-            col: 1.into()\n+            col_utf16: 1\n         }\n     );\n     assert_eq!(\n         index.line_col(5.into()),\n         LineCol {\n             line: 0,\n-            col: 5.into()\n+            col_utf16: 5\n         }\n     );\n     assert_eq!(\n         index.line_col(6.into()),\n         LineCol {\n             line: 1,\n-            col: 0.into()\n+            col_utf16: 0\n         }\n     );\n     assert_eq!(\n         index.line_col(7.into()),\n         LineCol {\n             line: 1,\n-            col: 1.into()\n+            col_utf16: 1\n         }\n     );\n     assert_eq!(\n         index.line_col(8.into()),\n         LineCol {\n             line: 1,\n-            col: 2.into()\n+            col_utf16: 2\n         }\n     );\n     assert_eq!(\n         index.line_col(10.into()),\n         LineCol {\n             line: 1,\n-            col: 4.into()\n+            col_utf16: 4\n         }\n     );\n     assert_eq!(\n         index.line_col(11.into()),\n         LineCol {\n             line: 1,\n-            col: 5.into()\n+            col_utf16: 5\n         }\n     );\n     assert_eq!(\n         index.line_col(12.into()),\n         LineCol {\n             line: 1,\n-            col: 6.into()\n+            col_utf16: 6\n         }\n     );\n \n@@ -115,35 +196,129 @@ fn test_line_index() {\n         index.line_col(0.into()),\n         LineCol {\n             line: 0,\n-            col: 0.into()\n+            col_utf16: 0\n         }\n     );\n     assert_eq!(\n         index.line_col(1.into()),\n         LineCol {\n             line: 1,\n-            col: 0.into()\n+            col_utf16: 0\n         }\n     );\n     assert_eq!(\n         index.line_col(2.into()),\n         LineCol {\n             line: 1,\n-            col: 1.into()\n+            col_utf16: 1\n         }\n     );\n     assert_eq!(\n         index.line_col(6.into()),\n         LineCol {\n             line: 1,\n-            col: 5.into()\n+            col_utf16: 5\n         }\n     );\n     assert_eq!(\n         index.line_col(7.into()),\n         LineCol {\n             line: 2,\n-            col: 0.into()\n+            col_utf16: 0\n         }\n     );\n }\n+\n+#[cfg(test)]\n+mod test_utf8_utf16_conv {\n+    use super::*;\n+\n+    #[test]\n+    fn test_char_len() {\n+        assert_eq!('\u30e1'.len_utf8(), 3);\n+        assert_eq!('\u30e1'.len_utf16(), 1);\n+    }\n+\n+    #[test]\n+    fn test_empty_index() {\n+        let col_index = LineIndex::new(\n+            \"\n+const C: char = 'x';\n+\",\n+        );\n+        assert_eq!(col_index.utf16_lines.len(), 0);\n+    }\n+\n+    #[test]\n+    fn test_single_char() {\n+        let col_index = LineIndex::new(\n+            \"\n+const C: char = '\u30e1';\n+\",\n+        );\n+\n+        assert_eq!(col_index.utf16_lines.len(), 1);\n+        assert_eq!(col_index.utf16_lines[&1].len(), 1);\n+        assert_eq!(\n+            col_index.utf16_lines[&1][0],\n+            Utf16Char {\n+                start: 17.into(),\n+                end: 20.into()\n+            }\n+        );\n+\n+        // UTF-8 to UTF-16, no changes\n+        assert_eq!(col_index.utf8_to_utf16_col(1, 15.into()), 15);\n+\n+        // UTF-8 to UTF-16\n+        assert_eq!(col_index.utf8_to_utf16_col(1, 22.into()), 20);\n+\n+        // UTF-16 to UTF-8, no changes\n+        assert_eq!(col_index.utf16_to_utf8_col(1, 15), TextUnit::from(15));\n+\n+        // UTF-16 to UTF-8\n+        assert_eq!(col_index.utf16_to_utf8_col(1, 19), TextUnit::from(21));\n+    }\n+\n+    #[test]\n+    fn test_string() {\n+        let col_index = LineIndex::new(\n+            \"\n+const C: char = \\\"\u30e1 \u30e1\\\";\n+\",\n+        );\n+\n+        assert_eq!(col_index.utf16_lines.len(), 1);\n+        assert_eq!(col_index.utf16_lines[&1].len(), 2);\n+        assert_eq!(\n+            col_index.utf16_lines[&1][0],\n+            Utf16Char {\n+                start: 17.into(),\n+                end: 20.into()\n+            }\n+        );\n+        assert_eq!(\n+            col_index.utf16_lines[&1][1],\n+            Utf16Char {\n+                start: 21.into(),\n+                end: 24.into()\n+            }\n+        );\n+\n+        // UTF-8 to UTF-16\n+        assert_eq!(col_index.utf8_to_utf16_col(1, 15.into()), 15);\n+\n+        assert_eq!(col_index.utf8_to_utf16_col(1, 21.into()), 19);\n+        assert_eq!(col_index.utf8_to_utf16_col(1, 25.into()), 21);\n+\n+        assert!(col_index.utf8_to_utf16_col(2, 15.into()) == 15);\n+\n+        // UTF-16 to UTF-8\n+        assert_eq!(col_index.utf16_to_utf8_col(1, 15), TextUnit::from_usize(15));\n+\n+        assert_eq!(col_index.utf16_to_utf8_col(1, 18), TextUnit::from_usize(20));\n+        assert_eq!(col_index.utf16_to_utf8_col(1, 19), TextUnit::from_usize(23));\n+\n+        assert_eq!(col_index.utf16_to_utf8_col(2, 15), TextUnit::from_usize(15));\n+    }\n+}"}, {"sha": "5d5a0c55ee7e24b0ebce792af38bd762e3a05d81", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/97532c8bf74b96336c1c553171b3ee787edbc66a/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97532c8bf74b96336c1c553171b3ee787edbc66a/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=97532c8bf74b96336c1c553171b3ee787edbc66a", "patch": "@@ -49,10 +49,9 @@ impl ConvWith for Position {\n     type Output = TextUnit;\n \n     fn conv_with(self, line_index: &LineIndex) -> TextUnit {\n-        // TODO: UTF-16\n         let line_col = LineCol {\n             line: self.line as u32,\n-            col: (self.character as u32).into(),\n+            col_utf16: self.character as u32,\n         };\n         line_index.offset(line_col)\n     }\n@@ -64,8 +63,10 @@ impl ConvWith for TextUnit {\n \n     fn conv_with(self, line_index: &LineIndex) -> Position {\n         let line_col = line_index.line_col(self);\n-        // TODO: UTF-16\n-        Position::new(u64::from(line_col.line), u64::from(u32::from(line_col.col)))\n+        Position::new(\n+            u64::from(line_col.line),\n+            u64::from(u32::from(line_col.col_utf16)),\n+        )\n     }\n }\n \n@@ -203,8 +204,10 @@ impl TryConvWith for SourceChange {\n                     .map(|it| it.edits.as_slice())\n                     .unwrap_or(&[]);\n                 let line_col = translate_offset_with_edit(&*line_index, pos.offset, edits);\n-                let position =\n-                    Position::new(u64::from(line_col.line), u64::from(u32::from(line_col.col)));\n+                let position = Position::new(\n+                    u64::from(line_col.line),\n+                    u64::from(u32::from(line_col.col_utf16)),\n+                );\n                 Some(TextDocumentPositionParams {\n                     text_document: TextDocumentIdentifier::new(pos.file_id.try_conv_with(world)?),\n                     position,\n@@ -247,12 +250,12 @@ fn translate_offset_with_edit(\n     if in_edit_line_col.line == 0 {\n         LineCol {\n             line: edit_line_col.line,\n-            col: edit_line_col.col + in_edit_line_col.col,\n+            col_utf16: edit_line_col.col_utf16 + in_edit_line_col.col_utf16,\n         }\n     } else {\n         LineCol {\n             line: edit_line_col.line + in_edit_line_col.line,\n-            col: in_edit_line_col.col,\n+            col_utf16: in_edit_line_col.col_utf16,\n         }\n     }\n }"}]}