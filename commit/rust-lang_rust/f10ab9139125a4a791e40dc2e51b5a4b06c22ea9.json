{"sha": "f10ab9139125a4a791e40dc2e51b5a4b06c22ea9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxMGFiOTEzOTEyNWE0YTc5MWU0MGRjMmU1MWI1YTRiMDZjMjJlYTk=", "commit": {"author": {"name": "Surya Midatala", "email": "surya.midatala@protonmail.com", "date": "2020-08-23T15:43:14Z"}, "committer": {"name": "Surya Midatala", "email": "surya.midatala@protonmail.com", "date": "2020-08-26T16:13:46Z"}, "message": "Add suggestions from code review", "tree": {"sha": "f61c792026717ce3350a9de40d772cb0d908f8b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f61c792026717ce3350a9de40d772cb0d908f8b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f10ab9139125a4a791e40dc2e51b5a4b06c22ea9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f10ab9139125a4a791e40dc2e51b5a4b06c22ea9", "html_url": "https://github.com/rust-lang/rust/commit/f10ab9139125a4a791e40dc2e51b5a4b06c22ea9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f10ab9139125a4a791e40dc2e51b5a4b06c22ea9/comments", "author": {"login": "kofls", "id": 12569767, "node_id": "MDQ6VXNlcjEyNTY5NzY3", "avatar_url": "https://avatars.githubusercontent.com/u/12569767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kofls", "html_url": "https://github.com/kofls", "followers_url": "https://api.github.com/users/kofls/followers", "following_url": "https://api.github.com/users/kofls/following{/other_user}", "gists_url": "https://api.github.com/users/kofls/gists{/gist_id}", "starred_url": "https://api.github.com/users/kofls/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kofls/subscriptions", "organizations_url": "https://api.github.com/users/kofls/orgs", "repos_url": "https://api.github.com/users/kofls/repos", "events_url": "https://api.github.com/users/kofls/events{/privacy}", "received_events_url": "https://api.github.com/users/kofls/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kofls", "id": 12569767, "node_id": "MDQ6VXNlcjEyNTY5NzY3", "avatar_url": "https://avatars.githubusercontent.com/u/12569767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kofls", "html_url": "https://github.com/kofls", "followers_url": "https://api.github.com/users/kofls/followers", "following_url": "https://api.github.com/users/kofls/following{/other_user}", "gists_url": "https://api.github.com/users/kofls/gists{/gist_id}", "starred_url": "https://api.github.com/users/kofls/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kofls/subscriptions", "organizations_url": "https://api.github.com/users/kofls/orgs", "repos_url": "https://api.github.com/users/kofls/repos", "events_url": "https://api.github.com/users/kofls/events{/privacy}", "received_events_url": "https://api.github.com/users/kofls/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3437f36e0d2c8c172344e35fbe2a01ca10de4e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3437f36e0d2c8c172344e35fbe2a01ca10de4e2", "html_url": "https://github.com/rust-lang/rust/commit/b3437f36e0d2c8c172344e35fbe2a01ca10de4e2"}], "stats": {"total": 29, "additions": 12, "deletions": 17}, "files": [{"sha": "0752ba0bfea3cd6757eededcd96123906422faac", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f10ab9139125a4a791e40dc2e51b5a4b06c22ea9/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f10ab9139125a4a791e40dc2e51b5a4b06c22ea9/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=f10ab9139125a4a791e40dc2e51b5a4b06c22ea9", "patch": "@@ -99,7 +99,7 @@ mod prim_bool {}\n /// at all we know it can never produce a value which isn't a [`u32`]. This illustrates another\n /// behaviour of the `!` type - expressions with type `!` will coerce into any other type.\n ///\n-/// [`exit`]: crate::process::exit\n+/// [`exit`]: process::exit\n ///\n /// # `!` and generics\n ///\n@@ -354,7 +354,7 @@ mod prim_unit {}\n //\n /// Raw, unsafe pointers, `*const T`, and `*mut T`.\n ///\n-/// *[See also the `std::ptr` module][`crate::ptr`].*\n+/// *[See also the `std::ptr` module][`ptr`].*\n ///\n /// Working with raw pointers in Rust is uncommon, typically limited to a few patterns.\n /// Raw pointers can be unaligned or [`null`]. However, when a raw pointer is\n@@ -545,7 +545,7 @@ mod prim_array {}\n /// means that elements are laid out so that every element is the same\n /// distance from its neighbors.\n ///\n-/// *[See also the `std::slice` module][`crate::slice`].*\n+/// *[See also the `std::slice` module][`slice`].*\n ///\n /// Slices are a view into a block of memory represented as a pointer and a\n /// length.\n@@ -590,7 +590,7 @@ mod prim_slice {}\n //\n /// String slices.\n ///\n-/// *[See also the `std::str` module][`crate::str`].*\n+/// *[See also the `std::str` module][`str`].*\n ///\n /// The `str` type, also called a 'string slice', is the most primitive string\n /// type. It is usually seen in its borrowed form, `&str`. It is also the type\n@@ -785,7 +785,7 @@ mod prim_tuple {}\n ///\n /// For more information on floating point numbers, see [Wikipedia][wikipedia].\n ///\n-/// *[See also the `std::f32::consts` module][`crate::f32::consts`].*\n+/// *[See also the `std::f32::consts` module][`f32::consts`].*\n ///\n /// [wikipedia]: https://en.wikipedia.org/wiki/Single-precision_floating-point_format\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -799,7 +799,7 @@ mod prim_f32 {}\n /// `f32`] or [Wikipedia on double precision\n /// values][wikipedia] for more information.\n ///\n-/// *[See also the `std::f64::consts` module][`crate::f64::consts`].*\n+/// *[See also the `std::f64::consts` module][`f64::consts`].*\n ///\n /// [wikipedia]: https://en.wikipedia.org/wiki/Double-precision_floating-point_format\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "03119e9a3733ec0a4edf554e12164f9e4913d818", "filename": "library/std/src/sys_common/poison.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f10ab9139125a4a791e40dc2e51b5a4b06c22ea9/library%2Fstd%2Fsrc%2Fsys_common%2Fpoison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f10ab9139125a4a791e40dc2e51b5a4b06c22ea9/library%2Fstd%2Fsrc%2Fsys_common%2Fpoison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fpoison.rs?ref=f10ab9139125a4a791e40dc2e51b5a4b06c22ea9", "patch": "@@ -3,6 +3,9 @@ use crate::fmt;\n use crate::sync::atomic::{AtomicBool, Ordering};\n use crate::thread;\n \n+#[cfg(doc)]\n+use crate::sync::{Mutex, RwLock};\n+\n pub struct Flag {\n     failed: AtomicBool,\n }\n@@ -77,9 +80,6 @@ pub struct Guard {\n ///     }\n /// };\n /// ```\n-///\n-/// [`Mutex`]: crate::sync::Mutex\n-/// [`RwLock`]: crate::sync::RwLock\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct PoisonError<T> {\n     guard: T,\n@@ -89,11 +89,9 @@ pub struct PoisonError<T> {\n /// can occur while trying to acquire a lock, from the [`try_lock`] method on a\n /// [`Mutex`] or the [`try_read`] and [`try_write`] methods on an [`RwLock`].\n ///\n-/// [`Mutex`]: crate::sync::Mutex\n-/// [`RwLock`]: crate::sync::RwLock\n-/// [`try_lock`]: crate::sync::Mutex::try_lock\n-/// [`try_read`]: crate::sync::RwLock::try_read\n-/// [`try_write`]: crate::sync::RwLock::try_write\n+/// [`try_lock`]: Mutex::try_lock\n+/// [`try_read`]: RwLock::try_read\n+/// [`try_write`]: RwLock::try_write\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum TryLockError<T> {\n     /// The lock could not be acquired because another thread failed while holding\n@@ -152,9 +150,6 @@ impl<T> PoisonError<T> {\n     /// Creates a `PoisonError`.\n     ///\n     /// This is generally created by methods like [`Mutex::lock`] or [`RwLock::read`].\n-    ///\n-    /// [`Mutex::lock`]:  crate::sync::Mutex::lock\n-    /// [`RwLock::read`]: crate::sync::RwLock::read\n     #[stable(feature = \"sync_poison\", since = \"1.2.0\")]\n     pub fn new(guard: T) -> PoisonError<T> {\n         PoisonError { guard }"}]}