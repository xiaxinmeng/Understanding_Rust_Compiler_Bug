{"sha": "fcbe99009308014378a53fbfa695354c65e46529", "node_id": "C_kwDOAAsO6NoAKGZjYmU5OTAwOTMwODAxNDM3OGE1M2ZiZmE2OTUzNTRjNjVlNDY1Mjk", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-11-12T06:32:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-12T06:32:51Z"}, "message": "Rollup merge of #103970 - oli-obk:unhide_unknown_spans, r=estebank\n\nUnhide unknown spans\n\nr? ```@estebank```", "tree": {"sha": "2d32d87a98978e5c88e33901f7db94a65e64b9e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d32d87a98978e5c88e33901f7db94a65e64b9e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcbe99009308014378a53fbfa695354c65e46529", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjbz4TCRBK7hj4Ov3rIwAAhywIAEYMOk+LMxU4jcacfNjyYNK1\nLh+mRTWSJfBl9tSKCdOHc0bFfDEL4a9gFR65MslCsrMw683ifdknvguaYf6dEaVh\noG5TsmOWH48/GGtemtryxbrC0V9Qt8+1yPRdksFjMZH58R1y7kT73cz9vfXkFmsZ\ntRtB/Ja2WTVDYbMQY/uxAx2i0ccFaXIlMC2hpeCzePHeYj2ZlDeS9FgC9+ywAsnD\nf5j4gG0g1FAZjfpdq4uLyopcOFxzoweMifGgNUfGXUl6u0MHYtfZJp04VywYIQ/R\nBtELwjCry0Rp7AoGm57uakBD/gLjSOfwnlbkowtl0PRxQduyTLr72f/TK3cDO0s=\n=aq4P\n-----END PGP SIGNATURE-----\n", "payload": "tree 2d32d87a98978e5c88e33901f7db94a65e64b9e4\nparent 4b0b89827d9d4b4ba44623d0b798be10a7277826\nparent df2adc4760a1c03096ab4b39512ba90b983c2332\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1668234771 +0530\ncommitter GitHub <noreply@github.com> 1668234771 +0530\n\nRollup merge of #103970 - oli-obk:unhide_unknown_spans, r=estebank\n\nUnhide unknown spans\n\nr? ```@estebank```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcbe99009308014378a53fbfa695354c65e46529", "html_url": "https://github.com/rust-lang/rust/commit/fcbe99009308014378a53fbfa695354c65e46529", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcbe99009308014378a53fbfa695354c65e46529/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b0b89827d9d4b4ba44623d0b798be10a7277826", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b0b89827d9d4b4ba44623d0b798be10a7277826", "html_url": "https://github.com/rust-lang/rust/commit/4b0b89827d9d4b4ba44623d0b798be10a7277826"}, {"sha": "df2adc4760a1c03096ab4b39512ba90b983c2332", "url": "https://api.github.com/repos/rust-lang/rust/commits/df2adc4760a1c03096ab4b39512ba90b983c2332", "html_url": "https://github.com/rust-lang/rust/commit/df2adc4760a1c03096ab4b39512ba90b983c2332"}], "stats": {"total": 190, "additions": 121, "deletions": 69}, "files": [{"sha": "001e53d1d0e4ce52953539a295d5a3cf0ded2475", "filename": "compiler/rustc_error_messages/locales/en-US/passes.ftl", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fcbe99009308014378a53fbfa695354c65e46529/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/fcbe99009308014378a53fbfa695354c65e46529/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl?ref=fcbe99009308014378a53fbfa695354c65e46529", "patch": "@@ -47,7 +47,10 @@ passes_no_coverage_not_coverable =\n \n passes_should_be_applied_to_fn =\n     attribute should be applied to a function definition\n-    .label = not a function definition\n+    .label = {$on_crate ->\n+        [true] cannot be applied to crates\n+        *[false] not a function definition\n+    }\n \n passes_naked_tracked_caller =\n     cannot use `#[track_caller]` with `#[naked]`"}, {"sha": "c450c276366e156220e09c14077eb72c23e4727b", "filename": "compiler/rustc_errors/src/annotate_snippet_emitter_writer.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fcbe99009308014378a53fbfa695354c65e46529/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcbe99009308014378a53fbfa695354c65e46529/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs?ref=fcbe99009308014378a53fbfa695354c65e46529", "patch": "@@ -52,7 +52,6 @@ impl Emitter for AnnotateSnippetEmitterWriter {\n         let (mut primary_span, suggestions) = self.primary_span_formatted(&diag, &fluent_args);\n \n         self.fix_multispans_in_extern_macros_and_render_macro_backtrace(\n-            &self.source_map,\n             &mut primary_span,\n             &mut children,\n             &diag.level,"}, {"sha": "55c7997a513636bc38d48f8acfc74da9e3c61dd9", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 40, "deletions": 20, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/fcbe99009308014378a53fbfa695354c65e46529/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcbe99009308014378a53fbfa695354c65e46529/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=fcbe99009308014378a53fbfa695354c65e46529", "patch": "@@ -314,7 +314,6 @@ pub trait Emitter: Translate {\n \n     fn fix_multispans_in_extern_macros_and_render_macro_backtrace(\n         &self,\n-        source_map: &Option<Lrc<SourceMap>>,\n         span: &mut MultiSpan,\n         children: &mut Vec<SubDiagnostic>,\n         level: &Level,\n@@ -340,7 +339,7 @@ pub trait Emitter: Translate {\n             .collect();\n \n         if !backtrace {\n-            self.fix_multispans_in_extern_macros(source_map, span, children);\n+            self.fix_multispans_in_extern_macros(span, children);\n         }\n \n         self.render_multispans_macro_backtrace(span, children, backtrace);\n@@ -480,23 +479,22 @@ pub trait Emitter: Translate {\n     // this will change the span to point at the use site.\n     fn fix_multispans_in_extern_macros(\n         &self,\n-        source_map: &Option<Lrc<SourceMap>>,\n         span: &mut MultiSpan,\n         children: &mut Vec<SubDiagnostic>,\n     ) {\n-        let Some(source_map) = source_map else { return };\n         debug!(\"fix_multispans_in_extern_macros: before: span={:?} children={:?}\", span, children);\n-        self.fix_multispan_in_extern_macros(source_map, span);\n+        self.fix_multispan_in_extern_macros(span);\n         for child in children.iter_mut() {\n-            self.fix_multispan_in_extern_macros(source_map, &mut child.span);\n+            self.fix_multispan_in_extern_macros(&mut child.span);\n         }\n         debug!(\"fix_multispans_in_extern_macros: after: span={:?} children={:?}\", span, children);\n     }\n \n     // This \"fixes\" MultiSpans that contain `Span`s pointing to locations inside of external macros.\n     // Since these locations are often difficult to read,\n     // we move these spans from the external macros to their corresponding use site.\n-    fn fix_multispan_in_extern_macros(&self, source_map: &Lrc<SourceMap>, span: &mut MultiSpan) {\n+    fn fix_multispan_in_extern_macros(&self, span: &mut MultiSpan) {\n+        let Some(source_map) = self.source_map() else { return };\n         // First, find all the spans in external macros and point instead at their use site.\n         let replacements: Vec<(Span, Span)> = span\n             .primary_spans()\n@@ -544,7 +542,6 @@ impl Emitter for EmitterWriter {\n         debug!(\"emit_diagnostic: suggestions={:?}\", suggestions);\n \n         self.fix_multispans_in_extern_macros_and_render_macro_backtrace(\n-            &self.sm,\n             &mut primary_span,\n             &mut children,\n             &diag.level,\n@@ -2213,22 +2210,45 @@ impl FileWithAnnotatedLines {\n \n         if let Some(ref sm) = emitter.source_map() {\n             for span_label in msp.span_labels() {\n+                let fixup_lo_hi = |span: Span| {\n+                    let lo = sm.lookup_char_pos(span.lo());\n+                    let mut hi = sm.lookup_char_pos(span.hi());\n+\n+                    // Watch out for \"empty spans\". If we get a span like 6..6, we\n+                    // want to just display a `^` at 6, so convert that to\n+                    // 6..7. This is degenerate input, but it's best to degrade\n+                    // gracefully -- and the parser likes to supply a span like\n+                    // that for EOF, in particular.\n+\n+                    if lo.col_display == hi.col_display && lo.line == hi.line {\n+                        hi.col_display += 1;\n+                    }\n+                    (lo, hi)\n+                };\n+\n                 if span_label.span.is_dummy() {\n+                    if let Some(span) = msp.primary_span() {\n+                        // if we don't know where to render the annotation, emit it as a note\n+                        // on the primary span.\n+\n+                        let (lo, hi) = fixup_lo_hi(span);\n+\n+                        let ann = Annotation {\n+                            start_col: lo.col_display,\n+                            end_col: hi.col_display,\n+                            is_primary: span_label.is_primary,\n+                            label: span_label\n+                                .label\n+                                .as_ref()\n+                                .map(|m| emitter.translate_message(m, args).to_string()),\n+                            annotation_type: AnnotationType::Singleline,\n+                        };\n+                        add_annotation_to_file(&mut output, lo.file, lo.line, ann);\n+                    }\n                     continue;\n                 }\n \n-                let lo = sm.lookup_char_pos(span_label.span.lo());\n-                let mut hi = sm.lookup_char_pos(span_label.span.hi());\n-\n-                // Watch out for \"empty spans\". If we get a span like 6..6, we\n-                // want to just display a `^` at 6, so convert that to\n-                // 6..7. This is degenerate input, but it's best to degrade\n-                // gracefully -- and the parser likes to supply a span like\n-                // that for EOF, in particular.\n-\n-                if lo.col_display == hi.col_display && lo.line == hi.line {\n-                    hi.col_display += 1;\n-                }\n+                let (lo, hi) = fixup_lo_hi(span_label.span);\n \n                 if lo.line != hi.line {\n                     let ml = MultilineAnnotation {"}, {"sha": "2b6ff0a5cb9d38ce25a35bbbd871e27dc904cbfc", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 42, "deletions": 13, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/fcbe99009308014378a53fbfa695354c65e46529/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcbe99009308014378a53fbfa695354c65e46529/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=fcbe99009308014378a53fbfa695354c65e46529", "patch": "@@ -119,13 +119,13 @@ impl CheckAttrVisitor<'_> {\n                 }\n                 sym::naked => self.check_naked(hir_id, attr, span, target),\n                 sym::rustc_legacy_const_generics => {\n-                    self.check_rustc_legacy_const_generics(&attr, span, target, item)\n+                    self.check_rustc_legacy_const_generics(hir_id, &attr, span, target, item)\n                 }\n                 sym::rustc_lint_query_instability => {\n-                    self.check_rustc_lint_query_instability(&attr, span, target)\n+                    self.check_rustc_lint_query_instability(hir_id, &attr, span, target)\n                 }\n                 sym::rustc_lint_diagnostics => {\n-                    self.check_rustc_lint_diagnostics(&attr, span, target)\n+                    self.check_rustc_lint_diagnostics(hir_id, &attr, span, target)\n                 }\n                 sym::rustc_lint_opt_ty => self.check_rustc_lint_opt_ty(&attr, span, target),\n                 sym::rustc_lint_opt_deny_field_access => {\n@@ -135,7 +135,9 @@ impl CheckAttrVisitor<'_> {\n                 | sym::rustc_dirty\n                 | sym::rustc_if_this_changed\n                 | sym::rustc_then_this_would_need => self.check_rustc_dirty_clean(&attr),\n-                sym::cmse_nonsecure_entry => self.check_cmse_nonsecure_entry(attr, span, target),\n+                sym::cmse_nonsecure_entry => {\n+                    self.check_cmse_nonsecure_entry(hir_id, attr, span, target)\n+                }\n                 sym::collapse_debuginfo => self.check_collapse_debuginfo(attr, span, target),\n                 sym::const_trait => self.check_const_trait(attr, span, target),\n                 sym::must_not_suspend => self.check_must_not_suspend(&attr, span, target),\n@@ -386,21 +388,29 @@ impl CheckAttrVisitor<'_> {\n                 self.tcx.sess.emit_err(errors::AttrShouldBeAppliedToFn {\n                     attr_span: attr.span,\n                     defn_span: span,\n+                    on_crate: hir_id == CRATE_HIR_ID,\n                 });\n                 false\n             }\n         }\n     }\n \n     /// Checks if `#[cmse_nonsecure_entry]` is applied to a function definition.\n-    fn check_cmse_nonsecure_entry(&self, attr: &Attribute, span: Span, target: Target) -> bool {\n+    fn check_cmse_nonsecure_entry(\n+        &self,\n+        hir_id: HirId,\n+        attr: &Attribute,\n+        span: Span,\n+        target: Target,\n+    ) -> bool {\n         match target {\n             Target::Fn\n             | Target::Method(MethodKind::Trait { body: true } | MethodKind::Inherent) => true,\n             _ => {\n                 self.tcx.sess.emit_err(errors::AttrShouldBeAppliedToFn {\n                     attr_span: attr.span,\n                     defn_span: span,\n+                    on_crate: hir_id == CRATE_HIR_ID,\n                 });\n                 false\n             }\n@@ -465,9 +475,11 @@ impl CheckAttrVisitor<'_> {\n                 true\n             }\n             _ => {\n-                self.tcx\n-                    .sess\n-                    .emit_err(errors::TrackedCallerWrongLocation { attr_span, defn_span: span });\n+                self.tcx.sess.emit_err(errors::TrackedCallerWrongLocation {\n+                    attr_span,\n+                    defn_span: span,\n+                    on_crate: hir_id == CRATE_HIR_ID,\n+                });\n                 false\n             }\n         }\n@@ -576,6 +588,7 @@ impl CheckAttrVisitor<'_> {\n                 self.tcx.sess.emit_err(errors::AttrShouldBeAppliedToFn {\n                     attr_span: attr.span,\n                     defn_span: span,\n+                    on_crate: hir_id == CRATE_HIR_ID,\n                 });\n                 false\n             }\n@@ -1230,7 +1243,7 @@ impl CheckAttrVisitor<'_> {\n                     UNUSED_ATTRIBUTES,\n                     hir_id,\n                     attr.span,\n-                    errors::Cold { span },\n+                    errors::Cold { span, on_crate: hir_id == CRATE_HIR_ID },\n                 );\n             }\n         }\n@@ -1366,6 +1379,7 @@ impl CheckAttrVisitor<'_> {\n     /// Checks if `#[rustc_legacy_const_generics]` is applied to a function and has a valid argument.\n     fn check_rustc_legacy_const_generics(\n         &self,\n+        hir_id: HirId,\n         attr: &Attribute,\n         span: Span,\n         target: Target,\n@@ -1376,6 +1390,7 @@ impl CheckAttrVisitor<'_> {\n             self.tcx.sess.emit_err(errors::AttrShouldBeAppliedToFn {\n                 attr_span: attr.span,\n                 defn_span: span,\n+                on_crate: hir_id == CRATE_HIR_ID,\n             });\n             return false;\n         }\n@@ -1440,12 +1455,19 @@ impl CheckAttrVisitor<'_> {\n \n     /// Helper function for checking that the provided attribute is only applied to a function or\n     /// method.\n-    fn check_applied_to_fn_or_method(&self, attr: &Attribute, span: Span, target: Target) -> bool {\n+    fn check_applied_to_fn_or_method(\n+        &self,\n+        hir_id: HirId,\n+        attr: &Attribute,\n+        span: Span,\n+        target: Target,\n+    ) -> bool {\n         let is_function = matches!(target, Target::Fn | Target::Method(..));\n         if !is_function {\n             self.tcx.sess.emit_err(errors::AttrShouldBeAppliedToFn {\n                 attr_span: attr.span,\n                 defn_span: span,\n+                on_crate: hir_id == CRATE_HIR_ID,\n             });\n             false\n         } else {\n@@ -1457,17 +1479,24 @@ impl CheckAttrVisitor<'_> {\n     /// or method.\n     fn check_rustc_lint_query_instability(\n         &self,\n+        hir_id: HirId,\n         attr: &Attribute,\n         span: Span,\n         target: Target,\n     ) -> bool {\n-        self.check_applied_to_fn_or_method(attr, span, target)\n+        self.check_applied_to_fn_or_method(hir_id, attr, span, target)\n     }\n \n     /// Checks that the `#[rustc_lint_diagnostics]` attribute is only applied to a function or\n     /// method.\n-    fn check_rustc_lint_diagnostics(&self, attr: &Attribute, span: Span, target: Target) -> bool {\n-        self.check_applied_to_fn_or_method(attr, span, target)\n+    fn check_rustc_lint_diagnostics(\n+        &self,\n+        hir_id: HirId,\n+        attr: &Attribute,\n+        span: Span,\n+        target: Target,\n+    ) -> bool {\n+        self.check_applied_to_fn_or_method(hir_id, attr, span, target)\n     }\n \n     /// Checks that the `#[rustc_lint_opt_ty]` attribute is only applied to a struct."}, {"sha": "c6cd69add28a04837c20fa0640419cee5ccb7af7", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fcbe99009308014378a53fbfa695354c65e46529/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcbe99009308014378a53fbfa695354c65e46529/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=fcbe99009308014378a53fbfa695354c65e46529", "patch": "@@ -81,6 +81,7 @@ pub struct AttrShouldBeAppliedToFn {\n     pub attr_span: Span,\n     #[label]\n     pub defn_span: Span,\n+    pub on_crate: bool,\n }\n \n #[derive(Diagnostic)]\n@@ -97,6 +98,7 @@ pub struct TrackedCallerWrongLocation {\n     pub attr_span: Span,\n     #[label]\n     pub defn_span: Span,\n+    pub on_crate: bool,\n }\n \n #[derive(Diagnostic)]\n@@ -367,6 +369,7 @@ pub struct MustNotSuspend {\n pub struct Cold {\n     #[label]\n     pub span: Span,\n+    pub on_crate: bool,\n }\n \n #[derive(LintDiagnostic)]"}, {"sha": "a12918b2979906021789ef8f5936bc59eb42c02c", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fcbe99009308014378a53fbfa695354c65e46529/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcbe99009308014378a53fbfa695354c65e46529/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=fcbe99009308014378a53fbfa695354c65e46529", "patch": "@@ -241,10 +241,12 @@ impl<'a> Resolver<'a> {\n         ));\n \n         err.span_label(span, format!(\"`{}` re{} here\", name, new_participle));\n-        err.span_label(\n-            self.session.source_map().guess_head_span(old_binding.span),\n-            format!(\"previous {} of the {} `{}` here\", old_noun, old_kind, name),\n-        );\n+        if !old_binding.span.is_dummy() && old_binding.span != span {\n+            err.span_label(\n+                self.session.source_map().guess_head_span(old_binding.span),\n+                format!(\"previous {} of the {} `{}` here\", old_noun, old_kind, name),\n+            );\n+        }\n \n         // See https://github.com/rust-lang/rust/issues/32354\n         use NameBindingKind::Import;"}, {"sha": "95eff92ef5e2471775f13aa5fa13cd2e84eb5532", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fcbe99009308014378a53fbfa695354c65e46529/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcbe99009308014378a53fbfa695354c65e46529/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=fcbe99009308014378a53fbfa695354c65e46529", "patch": "@@ -807,14 +807,16 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         err.code(rustc_errors::error_code!(E0411));\n         err.span_label(span, \"`Self` is only available in impls, traits, and type definitions\");\n         if let Some(item_kind) = self.diagnostic_metadata.current_item {\n-            err.span_label(\n-                item_kind.ident.span,\n-                format!(\n-                    \"`Self` not allowed in {} {}\",\n-                    item_kind.kind.article(),\n-                    item_kind.kind.descr()\n-                ),\n-            );\n+            if !item_kind.ident.span.is_dummy() {\n+                err.span_label(\n+                    item_kind.ident.span,\n+                    format!(\n+                        \"`Self` not allowed in {} {}\",\n+                        item_kind.kind.article(),\n+                        item_kind.kind.descr()\n+                    ),\n+                );\n+            }\n         }\n         true\n     }"}, {"sha": "22e7d3ea5dd5ba1ab468e6bf1faa2b2b1187f88f", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcbe99009308014378a53fbfa695354c65e46529/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcbe99009308014378a53fbfa695354c65e46529/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=fcbe99009308014378a53fbfa695354c65e46529", "patch": "@@ -2445,12 +2445,12 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             (Ok(l), Ok(r)) => l.line == r.line,\n                             _ => true,\n                         };\n-                    if !ident.span.overlaps(span) && !same_line {\n+                    if !ident.span.is_dummy() && !ident.span.overlaps(span) && !same_line {\n                         multispan.push_span_label(ident.span, \"required by a bound in this\");\n                     }\n                 }\n                 let descr = format!(\"required by a bound in `{}`\", item_name);\n-                if span != DUMMY_SP {\n+                if !span.is_dummy() {\n                     let msg = format!(\"required by this bound in `{}`\", item_name);\n                     multispan.push_span_label(span, msg);\n                     err.span_note(multispan, &descr);"}, {"sha": "e8ddccc854abe3b8f65a7ee77b3510682c22c97f", "filename": "src/test/ui/asm/naked-invalid-attr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcbe99009308014378a53fbfa695354c65e46529/src%2Ftest%2Fui%2Fasm%2Fnaked-invalid-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcbe99009308014378a53fbfa695354c65e46529/src%2Ftest%2Fui%2Fasm%2Fnaked-invalid-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-invalid-attr.stderr?ref=fcbe99009308014378a53fbfa695354c65e46529", "patch": "@@ -36,7 +36,7 @@ error: attribute should be applied to a function definition\n   --> $DIR/naked-invalid-attr.rs:5:1\n    |\n LL | #![naked]\n-   | ^^^^^^^^^\n+   | ^^^^^^^^^ cannot be applied to crates\n \n error: aborting due to 5 previous errors\n "}, {"sha": "7876704042188d065caab0e78b41f97c30366d29", "filename": "src/test/ui/feature-gates/issue-43106-gating-of-builtin-attrs-error.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fcbe99009308014378a53fbfa695354c65e46529/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcbe99009308014378a53fbfa695354c65e46529/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs-error.stderr?ref=fcbe99009308014378a53fbfa695354c65e46529", "patch": "@@ -110,19 +110,19 @@ error: attribute should be applied to an `extern crate` item\n   --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:25:1\n    |\n LL | #![no_link]\n-   | ^^^^^^^^^^^\n+   | ^^^^^^^^^^^ not an `extern crate` item\n \n error: attribute should be applied to a free function, impl method or static\n   --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:27:1\n    |\n LL | #![export_name = \"2200\"]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^ not a free function, impl method or static\n \n error[E0518]: attribute should be applied to function or closure\n   --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:29:1\n    |\n LL | #![inline]\n-   | ^^^^^^^^^^\n+   | ^^^^^^^^^^ not a function or closure\n \n error: `macro_export` attribute cannot be used at crate level\n   --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:12:1"}, {"sha": "1fa315f3d215987d28050aad84ba0c94eb9497d4", "filename": "src/test/ui/feature-gates/issue-43106-gating-of-builtin-attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcbe99009308014378a53fbfa695354c65e46529/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcbe99009308014378a53fbfa695354c65e46529/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs.rs?ref=fcbe99009308014378a53fbfa695354c65e46529", "patch": "@@ -1,6 +1,6 @@\n //~ NOTE not a function\n //~| NOTE not a foreign function or static\n-//~| NOTE not a function or static\n+//~| NOTE cannot be applied to crates\n //~| NOTE not an `extern` block\n // This test enumerates as many compiler-builtin ungated attributes as\n // possible (that is, all the mutually compatible ones), and checks"}, {"sha": "30039267979fb6db14c533f4306f9ca40ec9787f", "filename": "src/test/ui/feature-gates/issue-43106-gating-of-builtin-attrs.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fcbe99009308014378a53fbfa695354c65e46529/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcbe99009308014378a53fbfa695354c65e46529/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs.stderr?ref=fcbe99009308014378a53fbfa695354c65e46529", "patch": "@@ -403,31 +403,31 @@ warning: attribute should be applied to a function definition\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:62:1\n    |\n LL | #![cold]\n-   | ^^^^^^^^\n+   | ^^^^^^^^ cannot be applied to crates\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to an `extern` block with non-Rust ABI\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:64:1\n    |\n LL | #![link()]\n-   | ^^^^^^^^^^\n+   | ^^^^^^^^^^ not an `extern` block\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a foreign function or static\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:66:1\n    |\n LL | #![link_name = \"1900\"]\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^ not a foreign function or static\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a function or static\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:69:1\n    |\n LL | #![link_section = \"1800\"]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ not a function or static\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n "}, {"sha": "89aeafebac497da7cb98c81f6408934209e310b2", "filename": "src/test/ui/issues/issue-69396-const-no-type-in-macro.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fcbe99009308014378a53fbfa695354c65e46529/src%2Ftest%2Fui%2Fissues%2Fissue-69396-const-no-type-in-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcbe99009308014378a53fbfa695354c65e46529/src%2Ftest%2Fui%2Fissues%2Fissue-69396-const-no-type-in-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69396-const-no-type-in-macro.stderr?ref=fcbe99009308014378a53fbfa695354c65e46529", "patch": "@@ -2,10 +2,7 @@ error[E0428]: the name `A` is defined multiple times\n   --> $DIR/issue-69396-const-no-type-in-macro.rs:4:13\n    |\n LL |               const A = \"A\".$fn();\n-   |               ^^^^^^^^^^^^^^^^^^^^\n-   |               |\n-   |               `A` redefined here\n-   |               previous definition of the value `A` here\n+   |               ^^^^^^^^^^^^^^^^^^^^ `A` redefined here\n ...\n LL | / suite! {\n LL | |     len;"}, {"sha": "4c424999b754d5e867f0e402da5b3f318b1f33f0", "filename": "src/test/ui/iterators/collect-into-array.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fcbe99009308014378a53fbfa695354c65e46529/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcbe99009308014378a53fbfa695354c65e46529/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-array.rs?ref=fcbe99009308014378a53fbfa695354c65e46529", "patch": "@@ -1,5 +1,4 @@\n fn main() {\n-    //~^ NOTE required by a bound in this\n     let whatever: [u32; 10] = (0..10).collect();\n     //~^ ERROR an array of type `[u32; 10]` cannot be built directly from an iterator\n     //~| NOTE try collecting into a `Vec<{integer}>`, then using `.try_into()`"}, {"sha": "a23a36a88abb336dd24a54ec7ce3f41c9654ee90", "filename": "src/test/ui/iterators/collect-into-array.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcbe99009308014378a53fbfa695354c65e46529/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcbe99009308014378a53fbfa695354c65e46529/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-array.stderr?ref=fcbe99009308014378a53fbfa695354c65e46529", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: an array of type `[u32; 10]` cannot be built directly from an iterator\n-  --> $DIR/collect-into-array.rs:3:31\n+  --> $DIR/collect-into-array.rs:2:31\n    |\n LL |     let whatever: [u32; 10] = (0..10).collect();\n    |                               ^^^^^^^ ------- required by a bound introduced by this call"}, {"sha": "09832c260d04e82e5e64d0ccc510bf49ae6a42a6", "filename": "src/test/ui/iterators/collect-into-slice.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcbe99009308014378a53fbfa695354c65e46529/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcbe99009308014378a53fbfa695354c65e46529/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.rs?ref=fcbe99009308014378a53fbfa695354c65e46529", "patch": "@@ -1,6 +1,4 @@\n fn process_slice(data: &[i32]) {\n-    //~^ NOTE required by a bound in this\n-    //~| NOTE required by a bound in this\n     todo!()\n }\n "}, {"sha": "bc152467ce3a5c5d94d1c06ca790ec3793a38492", "filename": "src/test/ui/iterators/collect-into-slice.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fcbe99009308014378a53fbfa695354c65e46529/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcbe99009308014378a53fbfa695354c65e46529/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.stderr?ref=fcbe99009308014378a53fbfa695354c65e46529", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the size for values of type `[i32]` cannot be known at compilation time\n-  --> $DIR/collect-into-slice.rs:8:9\n+  --> $DIR/collect-into-slice.rs:6:9\n    |\n LL |     let some_generated_vec = (0..10).collect();\n    |         ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n@@ -9,7 +9,7 @@ LL |     let some_generated_vec = (0..10).collect();\n    = help: unsized locals are gated as an unstable feature\n \n error[E0277]: the size for values of type `[i32]` cannot be known at compilation time\n-  --> $DIR/collect-into-slice.rs:8:38\n+  --> $DIR/collect-into-slice.rs:6:38\n    |\n LL |     let some_generated_vec = (0..10).collect();\n    |                                      ^^^^^^^ doesn't have a size known at compile-time\n@@ -22,7 +22,7 @@ LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n    |                ^ required by this bound in `collect`\n \n error[E0277]: a slice of type `[i32]` cannot be built since `[i32]` has no definite size\n-  --> $DIR/collect-into-slice.rs:8:30\n+  --> $DIR/collect-into-slice.rs:6:30\n    |\n LL |     let some_generated_vec = (0..10).collect();\n    |                              ^^^^^^^ ------- required by a bound introduced by this call"}]}