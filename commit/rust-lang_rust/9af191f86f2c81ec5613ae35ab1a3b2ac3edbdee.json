{"sha": "9af191f86f2c81ec5613ae35ab1a3b2ac3edbdee", "node_id": "C_kwDOAAsO6NoAKDlhZjE5MWY4NmYyYzgxZWM1NjEzYWUzNWFiMWEzYjJhYzNlZGJkZWU", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-01-29T14:20:45Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-06T21:58:07Z"}, "message": "Improve value_analysis API.", "tree": {"sha": "769cceadde29523cd4e1fadcdd2ea97f254fda93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/769cceadde29523cd4e1fadcdd2ea97f254fda93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9af191f86f2c81ec5613ae35ab1a3b2ac3edbdee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9af191f86f2c81ec5613ae35ab1a3b2ac3edbdee", "html_url": "https://github.com/rust-lang/rust/commit/9af191f86f2c81ec5613ae35ab1a3b2ac3edbdee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9af191f86f2c81ec5613ae35ab1a3b2ac3edbdee/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c48756cdbfb1725251cbfa6fe760b2cb4e47b2d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c48756cdbfb1725251cbfa6fe760b2cb4e47b2d9", "html_url": "https://github.com/rust-lang/rust/commit/c48756cdbfb1725251cbfa6fe760b2cb4e47b2d9"}], "stats": {"total": 25, "additions": 18, "deletions": 7}, "files": [{"sha": "353b8d801d57b28eceaef6f919236d9eb84cddf9", "filename": "compiler/rustc_mir_dataflow/src/value_analysis.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9af191f86f2c81ec5613ae35ab1a3b2ac3edbdee/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af191f86f2c81ec5613ae35ab1a3b2ac3edbdee/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs?ref=9af191f86f2c81ec5613ae35ab1a3b2ac3edbdee", "patch": "@@ -735,20 +735,31 @@ impl Map {\n     }\n \n     /// Locates the given place, if it exists in the tree.\n-    pub fn find(&self, place: PlaceRef<'_>) -> Option<PlaceIndex> {\n+    pub fn find_extra(\n+        &self,\n+        place: PlaceRef<'_>,\n+        extra: impl IntoIterator<Item = TrackElem>,\n+    ) -> Option<PlaceIndex> {\n         let mut index = *self.locals.get(place.local)?.as_ref()?;\n \n         for &elem in place.projection {\n             index = self.apply(index, elem.try_into().ok()?)?;\n         }\n+        for elem in extra {\n+            index = self.apply(index, elem)?;\n+        }\n \n         Some(index)\n     }\n \n     /// Locates the given place, if it exists in the tree.\n+    pub fn find(&self, place: PlaceRef<'_>) -> Option<PlaceIndex> {\n+        self.find_extra(place, [])\n+    }\n+\n+    /// Locates the given place and applies `Discriminant`, if it exists in the tree.\n     pub fn find_discr(&self, place: PlaceRef<'_>) -> Option<PlaceIndex> {\n-        let index = self.find(place)?;\n-        self.apply(index, TrackElem::Discriminant)\n+        self.find_extra(place, [TrackElem::Discriminant])\n     }\n \n     /// Iterate over all direct children.\n@@ -763,14 +774,14 @@ impl Map {\n     ///\n     /// `tail_elem` allows to support discriminants that are not a place in MIR, but that we track\n     /// as such.\n-    fn for_each_aliasing_place(\n+    pub fn for_each_aliasing_place(\n         &self,\n         place: PlaceRef<'_>,\n         tail_elem: Option<TrackElem>,\n         f: &mut impl FnMut(PlaceIndex),\n     ) {\n         let Some(&Some(mut index)) = self.locals.get(place.local) else {\n-            // The local is not tracked at all, nothing to invalidate.\n+            // The local is not tracked at all, so it does not alias anything.\n             return;\n         };\n         let elems = place\n@@ -782,7 +793,7 @@ impl Map {\n             let Ok(elem) = elem else { return };\n             let sub = self.apply(index, elem);\n             if let TrackElem::Variant(..) | TrackElem::Discriminant = elem {\n-                // Writing to an enum variant field invalidates the other variants and the discriminant.\n+                // Enum variant fields and enum discriminants alias each another.\n                 self.for_each_variant_sibling(index, sub, f);\n             }\n             if let Some(sub) = sub {\n@@ -795,7 +806,7 @@ impl Map {\n     }\n \n     /// Invoke the given function on all the descendants of the given place, except one branch.\n-    pub fn for_each_variant_sibling(\n+    fn for_each_variant_sibling(\n         &self,\n         parent: PlaceIndex,\n         preserved_child: Option<PlaceIndex>,"}]}