{"sha": "fd6aa149bca7b896650c5f15a9c0000fc4f0056d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkNmFhMTQ5YmNhN2I4OTY2NTBjNWYxNWE5YzAwMDBmYzRmMDA1NmQ=", "commit": {"author": {"name": "Pascal Hertleif", "email": "killercup@gmail.com", "date": "2018-04-19T22:04:08Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-05-04T22:01:28Z"}, "message": "First step towards rustfix compiletest mode\n\nThis is the first small step towards testing auto-fixable compiler\nsuggestions using compiletest. Currently, it only checks if next to a\nUI test there also happens to a `*.rs.fixed` file, and then uses rustfix\n(added as external crate) on the original file, and asserts that it\nproduces the fixed version.\n\nTo show that this works, I've included one such test. I picked this test\ncase at random (and because it was simple) -- It is not relevant to the\n2018 edition. Indeed, in the near future, we want to be able to restrict\nrustfix to edition-lints, so this test cast might go away soon.\n\nIn case you still think this is somewhat feature-complete, here's a\nquick list of things currently missing that I want to add before telling\npeople they can use this:\n\n- [ ] Make this an actual compiletest mode, with `test [fix] \u2026` output\n  and everything\n- [ ] Assert that fixed files still compile\n- [ ] Assert that fixed files produce no (or a known set of) diagnostics\n  output\n- [ ] Update `update-references.sh` to support rustfix\n- [ ] Use a published version of rustfix (i.e.: publish a new version\n  rustfix that exposes a useful API for this)", "tree": {"sha": "63426dfa52298734730ed903ada68aff32f6e3d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63426dfa52298734730ed903ada68aff32f6e3d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd6aa149bca7b896650c5f15a9c0000fc4f0056d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd6aa149bca7b896650c5f15a9c0000fc4f0056d", "html_url": "https://github.com/rust-lang/rust/commit/fd6aa149bca7b896650c5f15a9c0000fc4f0056d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd6aa149bca7b896650c5f15a9c0000fc4f0056d/comments", "author": {"login": "killercup", "id": 20063, "node_id": "MDQ6VXNlcjIwMDYz", "avatar_url": "https://avatars.githubusercontent.com/u/20063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killercup", "html_url": "https://github.com/killercup", "followers_url": "https://api.github.com/users/killercup/followers", "following_url": "https://api.github.com/users/killercup/following{/other_user}", "gists_url": "https://api.github.com/users/killercup/gists{/gist_id}", "starred_url": "https://api.github.com/users/killercup/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killercup/subscriptions", "organizations_url": "https://api.github.com/users/killercup/orgs", "repos_url": "https://api.github.com/users/killercup/repos", "events_url": "https://api.github.com/users/killercup/events{/privacy}", "received_events_url": "https://api.github.com/users/killercup/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91db9dcf3730207f63b3dfc33b2c438a769b7517", "url": "https://api.github.com/repos/rust-lang/rust/commits/91db9dcf3730207f63b3dfc33b2c438a769b7517", "html_url": "https://github.com/rust-lang/rust/commit/91db9dcf3730207f63b3dfc33b2c438a769b7517"}], "stats": {"total": 112, "additions": 110, "deletions": 2}, "files": [{"sha": "80a5a45a3058007b3f1f3aeccdbace628bb91074", "filename": "src/test/ui/suggestions/closure-immutable-outer-variable.rs.fixed", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fd6aa149bca7b896650c5f15a9c0000fc4f0056d/src%2Ftest%2Fui%2Fsuggestions%2Fclosure-immutable-outer-variable.rs.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fd6aa149bca7b896650c5f15a9c0000fc4f0056d/src%2Ftest%2Fui%2Fsuggestions%2Fclosure-immutable-outer-variable.rs.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fclosure-immutable-outer-variable.rs.fixed?ref=fd6aa149bca7b896650c5f15a9c0000fc4f0056d", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Point at the captured immutable outer variable\n+\n+fn foo(mut f: Box<FnMut()>) {\n+    f();\n+}\n+\n+fn main() {\n+    let mut y = true;\n+    foo(Box::new(move || y = false) as Box<_>); //~ ERROR cannot assign to captured outer variable\n+}"}, {"sha": "1710a44380f95d90da9137e8b4d2ad17725c6344", "filename": "src/tools/compiletest/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd6aa149bca7b896650c5f15a9c0000fc4f0056d/src%2Ftools%2Fcompiletest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fd6aa149bca7b896650c5f15a9c0000fc4f0056d/src%2Ftools%2Fcompiletest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2FCargo.toml?ref=fd6aa149bca7b896650c5f15a9c0000fc4f0056d", "patch": "@@ -13,6 +13,7 @@ regex = \"0.2\"\n serde = \"1.0\"\n serde_json = \"1.0\"\n serde_derive = \"1.0\"\n+rustfix = { git = \"https://github.com/rust-lang-nursery/rustfix\" }\n \n [target.'cfg(unix)'.dependencies]\n libc = \"0.2\""}, {"sha": "29ea5cdff8f9d155d52eb7f24c1aae0d48bee10b", "filename": "src/tools/compiletest/src/autofix.rs", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/fd6aa149bca7b896650c5f15a9c0000fc4f0056d/src%2Ftools%2Fcompiletest%2Fsrc%2Fautofix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd6aa149bca7b896650c5f15a9c0000fc4f0056d/src%2Ftools%2Fcompiletest%2Fsrc%2Fautofix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fautofix.rs?ref=fd6aa149bca7b896650c5f15a9c0000fc4f0056d", "patch": "@@ -0,0 +1,70 @@\n+use rustfix::{get_suggestions_from_json, Replacement};\n+use std::collections::HashSet;\n+use std::error::Error;\n+\n+pub fn run_rustfix(code: &str, json: &str) -> String {\n+    let suggestions = get_suggestions_from_json(&json, &HashSet::new())\n+        .expect(\"could not load suggestions\");\n+\n+    let mut fixed = code.to_string();\n+\n+    for sug in suggestions.into_iter().rev() {\n+        for sol in sug.solutions {\n+            for r in sol.replacements {\n+                fixed = apply_suggestion(&mut fixed, &r)\n+                    .expect(\"could not apply suggestion\");\n+            }\n+        }\n+    }\n+\n+    fixed\n+}\n+\n+fn apply_suggestion(\n+    file_content: &mut String,\n+    suggestion: &Replacement,\n+) -> Result<String, Box<Error>> {\n+    use std::cmp::max;\n+\n+    let mut new_content = String::new();\n+\n+    // Add the lines before the section we want to replace\n+    new_content.push_str(&file_content\n+        .lines()\n+        .take(max(suggestion.snippet.line_range.start.line - 1, 0) as usize)\n+        .collect::<Vec<_>>()\n+        .join(\"\\n\"));\n+    new_content.push_str(\"\\n\");\n+\n+    // Parts of line before replacement\n+    new_content.push_str(&file_content\n+        .lines()\n+        .nth(suggestion.snippet.line_range.start.line - 1)\n+        .unwrap_or(\"\")\n+        .chars()\n+        .take(suggestion.snippet.line_range.start.column - 1)\n+        .collect::<String>());\n+\n+    // Insert new content! Finally!\n+    new_content.push_str(&suggestion.replacement);\n+\n+    // Parts of line after replacement\n+    new_content.push_str(&file_content\n+        .lines()\n+        .nth(suggestion.snippet.line_range.end.line - 1)\n+        .unwrap_or(\"\")\n+        .chars()\n+        .skip(suggestion.snippet.line_range.end.column - 1)\n+        .collect::<String>());\n+\n+    // Add the lines after the section we want to replace\n+    new_content.push_str(\"\\n\");\n+    new_content.push_str(&file_content\n+        .lines()\n+        .skip(suggestion.snippet.line_range.end.line as usize)\n+        .collect::<Vec<_>>()\n+        .join(\"\\n\"));\n+    new_content.push_str(\"\\n\");\n+\n+    Ok(new_content)\n+}"}, {"sha": "5159b1a692efb37dfc01908c20a01f4bf9750f5d", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd6aa149bca7b896650c5f15a9c0000fc4f0056d/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd6aa149bca7b896650c5f15a9c0000fc4f0056d/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=fd6aa149bca7b896650c5f15a9c0000fc4f0056d", "patch": "@@ -269,6 +269,7 @@ pub fn expected_output_path(testpaths: &TestPaths,\n     testpaths.file.with_extension(extension)\n }\n \n-pub const UI_EXTENSIONS: &[&str] = &[UI_STDERR, UI_STDOUT];\n+pub const UI_EXTENSIONS: &[&str] = &[UI_STDERR, UI_STDOUT, UI_FIXED];\n pub const UI_STDERR: &str = \"stderr\";\n pub const UI_STDOUT: &str = \"stdout\";\n+pub const UI_FIXED: &str = \"rs.fixed\";"}, {"sha": "3e7c6500433b1bcf51cc5ffcad2e637898c10c70", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd6aa149bca7b896650c5f15a9c0000fc4f0056d/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd6aa149bca7b896650c5f15a9c0000fc4f0056d/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=fd6aa149bca7b896650c5f15a9c0000fc4f0056d", "patch": "@@ -26,6 +26,7 @@ extern crate regex;\n extern crate serde_derive;\n extern crate serde_json;\n extern crate test;\n+extern crate rustfix;\n \n use std::env;\n use std::ffi::OsString;\n@@ -52,6 +53,7 @@ pub mod common;\n pub mod errors;\n mod raise_fd_limit;\n mod read2;\n+mod autofix;\n \n fn main() {\n     env_logger::init();"}, {"sha": "20456a21cb5c4cfe13820f25bd7e06e5bd8034b5", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fd6aa149bca7b896650c5f15a9c0000fc4f0056d/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd6aa149bca7b896650c5f15a9c0000fc4f0056d/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=fd6aa149bca7b896650c5f15a9c0000fc4f0056d", "patch": "@@ -12,7 +12,7 @@ use common::{Config, TestPaths};\n use common::{CompileFail, ParseFail, Pretty, RunFail, RunPass, RunPassValgrind};\n use common::{Codegen, CodegenUnits, DebugInfoGdb, DebugInfoLldb, Rustdoc};\n use common::{Incremental, MirOpt, RunMake, Ui};\n-use common::{expected_output_path, UI_STDERR, UI_STDOUT};\n+use common::{expected_output_path, UI_STDERR, UI_STDOUT, UI_FIXED};\n use common::CompareMode;\n use diff;\n use errors::{self, Error, ErrorKind};\n@@ -35,6 +35,7 @@ use std::path::{Path, PathBuf};\n use std::process::{Child, Command, ExitStatus, Output, Stdio};\n use std::str;\n \n+use autofix::run_rustfix;\n use extract_gdb_version;\n \n /// The name of the environment variable that holds dynamic library locations.\n@@ -2603,6 +2604,19 @@ impl<'test> TestCx<'test> {\n                 self.check_error_patterns(&proc_res.stderr, &proc_res);\n             }\n         }\n+\n+        let fixture_path = expected_output_path(&self.testpaths, None, &None, UI_FIXED);\n+        if fixture_path.exists() {\n+            let unfixed_code = self.load_expected_output_from_path(&self.testpaths.file)\n+                .unwrap();\n+            let expected_fixed = self.load_expected_output_from_path(&fixture_path).unwrap();\n+            let fixed_code = run_rustfix(&unfixed_code, &proc_res.stderr);\n+            let errors = self.compare_output(\"rs.fixed\", &fixed_code, &expected_fixed);\n+            if errors > 0 {\n+                panic!(\"rustfix produced different fixed file!\");\n+                // TODO: Add info for update-references.sh call\n+            }\n+        }\n     }\n \n     fn run_mir_opt_test(&self) {"}]}