{"sha": "30a96267a6050c55e1f2bb1c540458a88fdb9567", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwYTk2MjY3YTYwNTBjNTVlMWYyYmIxYzU0MDQ1OGE4OGZkYjk1Njc=", "commit": {"author": {"name": "LooMaclin", "email": "loo.maclin@protonmail.com", "date": "2019-04-10T01:18:19Z"}, "committer": {"name": "LooMaclin", "email": "loo.maclin@protonmail.com", "date": "2019-04-10T01:18:19Z"}, "message": "Improve miri's error reporting in check_in_alloc", "tree": {"sha": "eca251f0010dd28c92127b8ff63e0ce7e52115df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eca251f0010dd28c92127b8ff63e0ce7e52115df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30a96267a6050c55e1f2bb1c540458a88fdb9567", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30a96267a6050c55e1f2bb1c540458a88fdb9567", "html_url": "https://github.com/rust-lang/rust/commit/30a96267a6050c55e1f2bb1c540458a88fdb9567", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30a96267a6050c55e1f2bb1c540458a88fdb9567/comments", "author": {"login": "LooMaclin", "id": 10957765, "node_id": "MDQ6VXNlcjEwOTU3NzY1", "avatar_url": "https://avatars.githubusercontent.com/u/10957765?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LooMaclin", "html_url": "https://github.com/LooMaclin", "followers_url": "https://api.github.com/users/LooMaclin/followers", "following_url": "https://api.github.com/users/LooMaclin/following{/other_user}", "gists_url": "https://api.github.com/users/LooMaclin/gists{/gist_id}", "starred_url": "https://api.github.com/users/LooMaclin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LooMaclin/subscriptions", "organizations_url": "https://api.github.com/users/LooMaclin/orgs", "repos_url": "https://api.github.com/users/LooMaclin/repos", "events_url": "https://api.github.com/users/LooMaclin/events{/privacy}", "received_events_url": "https://api.github.com/users/LooMaclin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LooMaclin", "id": 10957765, "node_id": "MDQ6VXNlcjEwOTU3NzY1", "avatar_url": "https://avatars.githubusercontent.com/u/10957765?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LooMaclin", "html_url": "https://github.com/LooMaclin", "followers_url": "https://api.github.com/users/LooMaclin/followers", "following_url": "https://api.github.com/users/LooMaclin/following{/other_user}", "gists_url": "https://api.github.com/users/LooMaclin/gists{/gist_id}", "starred_url": "https://api.github.com/users/LooMaclin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LooMaclin/subscriptions", "organizations_url": "https://api.github.com/users/LooMaclin/orgs", "repos_url": "https://api.github.com/users/LooMaclin/repos", "events_url": "https://api.github.com/users/LooMaclin/events{/privacy}", "received_events_url": "https://api.github.com/users/LooMaclin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9147e26fcb8d0f140d5c7f97a6063758ff5aeac4", "url": "https://api.github.com/repos/rust-lang/rust/commits/9147e26fcb8d0f140d5c7f97a6063758ff5aeac4", "html_url": "https://github.com/rust-lang/rust/commit/9147e26fcb8d0f140d5c7f97a6063758ff5aeac4"}], "stats": {"total": 22, "additions": 9, "deletions": 13}, "files": [{"sha": "433c105231e01a531453d337e8fd41d7c9b103cb", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/30a96267a6050c55e1f2bb1c540458a88fdb9567/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30a96267a6050c55e1f2bb1c540458a88fdb9567/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=30a96267a6050c55e1f2bb1c540458a88fdb9567", "patch": "@@ -239,12 +239,11 @@ impl<'tcx, Tag: Copy, Extra> Allocation<Tag, Extra> {\n         cx: &impl HasDataLayout,\n         ptr: Pointer<Tag>,\n         size: Size,\n-        msg: CheckInAllocMsg,\n     ) -> EvalResult<'tcx, &[u8]>\n         // FIXME: Working around https://github.com/rust-lang/rust/issues/56209\n         where Extra: AllocationExtra<Tag, MemoryExtra>\n     {\n-        self.get_bytes_internal(cx, ptr, size, false, msg)\n+        self.get_bytes_internal(cx, ptr, size, false, CheckInAllocMsg::MemoryAccess)\n     }\n \n     /// Just calling this already marks everything as defined and removes relocations,\n@@ -254,13 +253,12 @@ impl<'tcx, Tag: Copy, Extra> Allocation<Tag, Extra> {\n         cx: &impl HasDataLayout,\n         ptr: Pointer<Tag>,\n         size: Size,\n-        msg: CheckInAllocMsg,\n     ) -> EvalResult<'tcx, &mut [u8]>\n         // FIXME: Working around https://github.com/rust-lang/rust/issues/56209\n         where Extra: AllocationExtra<Tag, MemoryExtra>\n     {\n         assert_ne!(size.bytes(), 0, \"0-sized accesses should never even get a `Pointer`\");\n-        self.check_bounds(cx, ptr, size, msg)?;\n+        self.check_bounds(cx, ptr, size, CheckInAllocMsg::MemoryAccess)?;\n \n         self.mark_definedness(ptr, size, true)?;\n         self.clear_relocations(cx, ptr, size)?;\n@@ -314,7 +312,7 @@ impl<'tcx, Tag: Copy, Extra> Allocation<Tag, Extra> {\n         where Extra: AllocationExtra<Tag, MemoryExtra>\n     {\n         // Check bounds and relocations on the edges\n-        self.get_bytes_with_undef_and_ptr(cx, ptr, size, CheckInAllocMsg::OutOfBounds)?;\n+        self.get_bytes_with_undef_and_ptr(cx, ptr, size)?;\n         // Check undef and ptr\n         if !allow_ptr_and_undef {\n             self.check_defined(ptr, size)?;\n@@ -335,8 +333,7 @@ impl<'tcx, Tag: Copy, Extra> Allocation<Tag, Extra> {\n         // FIXME: Working around https://github.com/rust-lang/rust/issues/56209\n         where Extra: AllocationExtra<Tag, MemoryExtra>\n     {\n-        let bytes = self.get_bytes_mut(cx, ptr, Size::from_bytes(src.len() as u64),\n-                                       CheckInAllocMsg::MemoryAccess)?;\n+        let bytes = self.get_bytes_mut(cx, ptr, Size::from_bytes(src.len() as u64))?;\n         bytes.clone_from_slice(src);\n         Ok(())\n     }\n@@ -352,7 +349,7 @@ impl<'tcx, Tag: Copy, Extra> Allocation<Tag, Extra> {\n         // FIXME: Working around https://github.com/rust-lang/rust/issues/56209\n         where Extra: AllocationExtra<Tag, MemoryExtra>\n     {\n-        let bytes = self.get_bytes_mut(cx, ptr, count, CheckInAllocMsg::MemoryAccess)?;\n+        let bytes = self.get_bytes_mut(cx, ptr, count)?;\n         for b in bytes {\n             *b = val;\n         }\n@@ -377,8 +374,7 @@ impl<'tcx, Tag: Copy, Extra> Allocation<Tag, Extra> {\n         where Extra: AllocationExtra<Tag, MemoryExtra>\n     {\n         // get_bytes_unchecked tests relocation edges\n-        let bytes = self.get_bytes_with_undef_and_ptr(cx, ptr, size,\n-                                                      CheckInAllocMsg::MemoryAccess)?;\n+        let bytes = self.get_bytes_with_undef_and_ptr(cx, ptr, size)?;\n         // Undef check happens *after* we established that the alignment is correct.\n         // We must not return Ok() for unaligned pointers!\n         if self.check_defined(ptr, size).is_err() {\n@@ -455,7 +451,7 @@ impl<'tcx, Tag: Copy, Extra> Allocation<Tag, Extra> {\n         };\n \n         let endian = cx.data_layout().endian;\n-        let dst = self.get_bytes_mut(cx, ptr, type_size, CheckInAllocMsg::MemoryAccess)?;\n+        let dst = self.get_bytes_mut(cx, ptr, type_size)?;\n         write_target_uint(endian, dst, bytes).unwrap();\n \n         // See if we have to also write a relocation"}, {"sha": "e8ae7ab579b93ada5fed0d4cad9e6f527c447f96", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30a96267a6050c55e1f2bb1c540458a88fdb9567/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30a96267a6050c55e1f2bb1c540458a88fdb9567/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=30a96267a6050c55e1f2bb1c540458a88fdb9567", "patch": "@@ -731,10 +731,10 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n \n         // This checks relocation edges on the src.\n         let src_bytes = self.get(src.alloc_id)?\n-            .get_bytes_with_undef_and_ptr(&tcx, src, size, CheckInAllocMsg::MemoryAccess)?\n+            .get_bytes_with_undef_and_ptr(&tcx, src, size)?\n             .as_ptr();\n         let dest_bytes = self.get_mut(dest.alloc_id)?\n-            .get_bytes_mut(&tcx, dest, size * length, CheckInAllocMsg::MemoryAccess)?\n+            .get_bytes_mut(&tcx, dest, size * length)?\n             .as_mut_ptr();\n \n         // SAFE: The above indexing would have panicked if there weren't at least `size` bytes"}]}