{"sha": "1882597991277f9467d2a187f180f76eecf45c9c", "node_id": "C_kwDOAAsO6NoAKDE4ODI1OTc5OTEyNzdmOTQ2N2QyYTE4N2YxODBmNzZlZWNmNDVjOWM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-19T02:07:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-19T02:07:43Z"}, "message": "Auto merge of #94134 - matthiaskrgr:rollup-b132kjz, r=matthiaskrgr\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #89892 (Suggest `impl Trait` return type when incorrectly using a generic return type)\n - #91675 (Add MemTagSanitizer Support)\n - #92806 (Add more information to `impl Trait` error)\n - #93497 (Pass `--test` flag through rustdoc to rustc so `#[test]` functions can be scraped)\n - #93814 (mips64-openwrt-linux-musl: correct soft-foat)\n - #93847 (kmc-solid: Use the filesystem thread-safety wrapper)\n - #93877 (asm: Allow the use of r8-r14 as clobbers on Thumb1)\n - #93892 (Only mark projection as ambiguous if GAT substs are constrained)\n - #93915 (Implement --check-cfg option (RFC 3013), take 2)\n - #93953 (Add the `known-bug` test directive, use it, and do some cleanup)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "a92dff87801a7bd2c30d4e8b3233fec97a48bbf1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a92dff87801a7bd2c30d4e8b3233fec97a48bbf1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1882597991277f9467d2a187f180f76eecf45c9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1882597991277f9467d2a187f180f76eecf45c9c", "html_url": "https://github.com/rust-lang/rust/commit/1882597991277f9467d2a187f180f76eecf45c9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1882597991277f9467d2a187f180f76eecf45c9c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a1a3707ff3e048c947d8b85d9e1f563775860c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a1a3707ff3e048c947d8b85d9e1f563775860c8", "html_url": "https://github.com/rust-lang/rust/commit/5a1a3707ff3e048c947d8b85d9e1f563775860c8"}, {"sha": "620b0c5122ee539124ed9442772e4648ac1d8b3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/620b0c5122ee539124ed9442772e4648ac1d8b3f", "html_url": "https://github.com/rust-lang/rust/commit/620b0c5122ee539124ed9442772e4648ac1d8b3f"}], "stats": {"total": 2170, "additions": 1593, "deletions": 577}, "files": [{"sha": "18fcc99ffbaa0432eb7b30fb892f0b5d1dd4dc59", "filename": "compiler/rustc_ast_lowering/src/asm.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -129,13 +129,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             .operands\n             .iter()\n             .map(|(op, op_sp)| {\n-                let lower_reg = |reg| match reg {\n+                let lower_reg = |reg, is_clobber| match reg {\n                     InlineAsmRegOrRegClass::Reg(s) => {\n                         asm::InlineAsmRegOrRegClass::Reg(if let Some(asm_arch) = asm_arch {\n                             asm::InlineAsmReg::parse(\n                                 asm_arch,\n                                 &sess.target_features,\n                                 &sess.target,\n+                                is_clobber,\n                                 s,\n                             )\n                             .unwrap_or_else(|e| {\n@@ -162,24 +163,24 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n                 let op = match *op {\n                     InlineAsmOperand::In { reg, ref expr } => hir::InlineAsmOperand::In {\n-                        reg: lower_reg(reg),\n+                        reg: lower_reg(reg, false),\n                         expr: self.lower_expr_mut(expr),\n                     },\n                     InlineAsmOperand::Out { reg, late, ref expr } => hir::InlineAsmOperand::Out {\n-                        reg: lower_reg(reg),\n+                        reg: lower_reg(reg, expr.is_none()),\n                         late,\n                         expr: expr.as_ref().map(|expr| self.lower_expr_mut(expr)),\n                     },\n                     InlineAsmOperand::InOut { reg, late, ref expr } => {\n                         hir::InlineAsmOperand::InOut {\n-                            reg: lower_reg(reg),\n+                            reg: lower_reg(reg, false),\n                             late,\n                             expr: self.lower_expr_mut(expr),\n                         }\n                     }\n                     InlineAsmOperand::SplitInOut { reg, late, ref in_expr, ref out_expr } => {\n                         hir::InlineAsmOperand::SplitInOut {\n-                            reg: lower_reg(reg),\n+                            reg: lower_reg(reg, false),\n                             late,\n                             in_expr: self.lower_expr_mut(in_expr),\n                             out_expr: out_expr.as_ref().map(|expr| self.lower_expr_mut(expr)),"}, {"sha": "3a7e0a70585f125e53d264d2e16e8e3e70043141", "filename": "compiler/rustc_ast_lowering/src/block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_ast_lowering%2Fsrc%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_ast_lowering%2Fsrc%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fblock.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -97,7 +97,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let ty = l\n             .ty\n             .as_ref()\n-            .map(|t| self.lower_ty(t, ImplTraitContext::Disallowed(ImplTraitPosition::Binding)));\n+            .map(|t| self.lower_ty(t, ImplTraitContext::Disallowed(ImplTraitPosition::Variable)));\n         let init = l.kind.init().map(|init| self.lower_expr(init));\n         let hir_id = self.lower_node_id(l.id);\n         let pat = self.lower_pat(&l.pat);\n@@ -127,7 +127,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let ty = local\n             .ty\n             .as_ref()\n-            .map(|t| self.lower_ty(t, ImplTraitContext::Disallowed(ImplTraitPosition::Binding)));\n+            .map(|t| self.lower_ty(t, ImplTraitContext::Disallowed(ImplTraitPosition::Variable)));\n         let span = self.lower_span(local.span);\n         let span = self.mark_span_with_reason(DesugaringKind::LetElse, span, None);\n         let init = self.lower_expr(init);"}, {"sha": "d48ff10b97d9181145efb0f6f32e8fddcd3cbf36", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -1,3 +1,5 @@\n+use crate::{FnDeclKind, ImplTraitPosition};\n+\n use super::{ImplTraitContext, LoweringContext, ParamMode, ParenthesizedGenericArgs};\n \n use rustc_ast::attr;\n@@ -53,7 +55,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         ParamMode::Optional,\n                         0,\n                         ParenthesizedGenericArgs::Err,\n-                        ImplTraitContext::disallowed(),\n+                        ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                     ));\n                     let args = self.lower_exprs(args);\n                     hir::ExprKind::MethodCall(hir_seg, args, self.lower_span(span))\n@@ -74,12 +76,14 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 }\n                 ExprKind::Cast(ref expr, ref ty) => {\n                     let expr = self.lower_expr(expr);\n-                    let ty = self.lower_ty(ty, ImplTraitContext::disallowed());\n+                    let ty =\n+                        self.lower_ty(ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n                     hir::ExprKind::Cast(expr, ty)\n                 }\n                 ExprKind::Type(ref expr, ref ty) => {\n                     let expr = self.lower_expr(expr);\n-                    let ty = self.lower_ty(ty, ImplTraitContext::disallowed());\n+                    let ty =\n+                        self.lower_ty(ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n                     hir::ExprKind::Type(expr, ty)\n                 }\n                 ExprKind::AddrOf(k, m, ref ohs) => {\n@@ -203,7 +207,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         qself,\n                         path,\n                         ParamMode::Optional,\n-                        ImplTraitContext::disallowed(),\n+                        ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                     );\n                     hir::ExprKind::Path(qpath)\n                 }\n@@ -239,7 +243,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                             &se.qself,\n                             &se.path,\n                             ParamMode::Optional,\n-                            ImplTraitContext::disallowed(),\n+                            ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                         )),\n                         self.arena\n                             .alloc_from_iter(se.fields.iter().map(|x| self.lower_expr_field(x))),\n@@ -538,7 +542,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         body: impl FnOnce(&mut Self) -> hir::Expr<'hir>,\n     ) -> hir::ExprKind<'hir> {\n         let output = match ret_ty {\n-            Some(ty) => hir::FnRetTy::Return(self.lower_ty(&ty, ImplTraitContext::disallowed())),\n+            Some(ty) => hir::FnRetTy::Return(\n+                self.lower_ty(&ty, ImplTraitContext::Disallowed(ImplTraitPosition::AsyncBlock)),\n+            ),\n             None => hir::FnRetTy::DefaultReturn(self.lower_span(span)),\n         };\n \n@@ -827,7 +833,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         });\n \n         // Lower outside new scope to preserve `is_in_loop_condition`.\n-        let fn_decl = self.lower_fn_decl(decl, None, false, None);\n+        let fn_decl = self.lower_fn_decl(decl, None, FnDeclKind::Closure, None);\n \n         hir::ExprKind::Closure(\n             capture_clause,\n@@ -919,7 +925,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         // We need to lower the declaration outside the new scope, because we\n         // have to conserve the state of being inside a loop condition for the\n         // closure argument types.\n-        let fn_decl = self.lower_fn_decl(&outer_decl, None, false, None);\n+        let fn_decl = self.lower_fn_decl(&outer_decl, None, FnDeclKind::Closure, None);\n \n         hir::ExprKind::Closure(\n             capture_clause,\n@@ -1064,7 +1070,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         qself,\n                         path,\n                         ParamMode::Optional,\n-                        ImplTraitContext::disallowed(),\n+                        ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                     );\n                     // Destructure like a tuple struct.\n                     let tuple_struct_pat =\n@@ -1089,7 +1095,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     &se.qself,\n                     &se.path,\n                     ParamMode::Optional,\n-                    ImplTraitContext::disallowed(),\n+                    ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                 );\n                 let fields_omitted = match &se.rest {\n                     StructRest::Base(e) => {"}, {"sha": "6489c729cfe50dcbb9e4c8e31f62d10c681cbc1b", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 103, "deletions": 45, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -1,6 +1,6 @@\n use super::{AnonymousLifetimeMode, LoweringContext, ParamMode};\n use super::{ImplTraitContext, ImplTraitPosition};\n-use crate::Arena;\n+use crate::{Arena, FnDeclKind};\n \n use rustc_ast::ptr::P;\n use rustc_ast::visit::{self, AssocCtxt, FnCtxt, FnKind, Visitor};\n@@ -246,7 +246,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         AnonymousLifetimeMode::PassThrough,\n                         |this, idty| {\n                             let ret_id = asyncness.opt_return_id();\n-                            this.lower_fn_decl(&decl, Some((fn_def_id, idty)), true, ret_id)\n+                            this.lower_fn_decl(\n+                                &decl,\n+                                Some((fn_def_id, idty)),\n+                                FnDeclKind::Fn,\n+                                ret_id,\n+                            )\n                         },\n                     );\n                     let sig = hir::FnSig {\n@@ -287,12 +292,18 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         capturable_lifetimes: &mut FxHashSet::default(),\n                     },\n                 );\n-                let generics = self.lower_generics(generics, ImplTraitContext::disallowed());\n+                let generics = self.lower_generics(\n+                    generics,\n+                    ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                );\n                 hir::ItemKind::TyAlias(ty, generics)\n             }\n             ItemKind::TyAlias(box TyAlias { ref generics, ty: None, .. }) => {\n                 let ty = self.arena.alloc(self.ty(span, hir::TyKind::Err));\n-                let generics = self.lower_generics(generics, ImplTraitContext::disallowed());\n+                let generics = self.lower_generics(\n+                    generics,\n+                    ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                );\n                 hir::ItemKind::TyAlias(ty, generics)\n             }\n             ItemKind::Enum(ref enum_definition, ref generics) => hir::ItemKind::Enum(\n@@ -301,20 +312,29 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         enum_definition.variants.iter().map(|x| self.lower_variant(x)),\n                     ),\n                 },\n-                self.lower_generics(generics, ImplTraitContext::disallowed()),\n+                self.lower_generics(\n+                    generics,\n+                    ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                ),\n             ),\n             ItemKind::Struct(ref struct_def, ref generics) => {\n                 let struct_def = self.lower_variant_data(hir_id, struct_def);\n                 hir::ItemKind::Struct(\n                     struct_def,\n-                    self.lower_generics(generics, ImplTraitContext::disallowed()),\n+                    self.lower_generics(\n+                        generics,\n+                        ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                    ),\n                 )\n             }\n             ItemKind::Union(ref vdata, ref generics) => {\n                 let vdata = self.lower_variant_data(hir_id, vdata);\n                 hir::ItemKind::Union(\n                     vdata,\n-                    self.lower_generics(generics, ImplTraitContext::disallowed()),\n+                    self.lower_generics(\n+                        generics,\n+                        ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                    ),\n                 )\n             }\n             ItemKind::Impl(box Impl {\n@@ -347,10 +367,14 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     AnonymousLifetimeMode::CreateParameter,\n                     |this, _| {\n                         let trait_ref = trait_ref.as_ref().map(|trait_ref| {\n-                            this.lower_trait_ref(trait_ref, ImplTraitContext::disallowed())\n+                            this.lower_trait_ref(\n+                                trait_ref,\n+                                ImplTraitContext::Disallowed(ImplTraitPosition::Trait),\n+                            )\n                         });\n \n-                        let lowered_ty = this.lower_ty(ty, ImplTraitContext::disallowed());\n+                        let lowered_ty = this\n+                            .lower_ty(ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n \n                         (trait_ref, lowered_ty)\n                     },\n@@ -390,21 +414,33 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 ref bounds,\n                 ref items,\n             }) => {\n-                let bounds = self.lower_param_bounds(bounds, ImplTraitContext::disallowed());\n+                let bounds = self.lower_param_bounds(\n+                    bounds,\n+                    ImplTraitContext::Disallowed(ImplTraitPosition::Bound),\n+                );\n                 let items = self\n                     .arena\n                     .alloc_from_iter(items.iter().map(|item| self.lower_trait_item_ref(item)));\n                 hir::ItemKind::Trait(\n                     is_auto,\n                     self.lower_unsafety(unsafety),\n-                    self.lower_generics(generics, ImplTraitContext::disallowed()),\n+                    self.lower_generics(\n+                        generics,\n+                        ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                    ),\n                     bounds,\n                     items,\n                 )\n             }\n             ItemKind::TraitAlias(ref generics, ref bounds) => hir::ItemKind::TraitAlias(\n-                self.lower_generics(generics, ImplTraitContext::disallowed()),\n-                self.lower_param_bounds(bounds, ImplTraitContext::disallowed()),\n+                self.lower_generics(\n+                    generics,\n+                    ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                ),\n+                self.lower_param_bounds(\n+                    bounds,\n+                    ImplTraitContext::Disallowed(ImplTraitPosition::Bound),\n+                ),\n             ),\n             ItemKind::MacroDef(MacroDef { ref body, macro_rules }) => {\n                 let body = P(self.lower_mac_args(body));\n@@ -423,7 +459,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         span: Span,\n         body: Option<&Expr>,\n     ) -> (&'hir hir::Ty<'hir>, hir::BodyId) {\n-        let ty = self.lower_ty(ty, ImplTraitContext::Disallowed(ImplTraitPosition::Binding));\n+        let ty = self.lower_ty(ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n         (ty, self.lower_const_body(span, body))\n     }\n \n@@ -667,7 +703,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         |this, _| {\n                             (\n                                 // Disallow `impl Trait` in foreign items.\n-                                this.lower_fn_decl(fdec, None, false, None),\n+                                this.lower_fn_decl(fdec, None, FnDeclKind::ExternFn, None),\n                                 this.lower_fn_params_to_names(fdec),\n                             )\n                         },\n@@ -676,7 +712,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     hir::ForeignItemKind::Fn(fn_dec, fn_args, generics)\n                 }\n                 ForeignItemKind::Static(ref t, m, _) => {\n-                    let ty = self.lower_ty(t, ImplTraitContext::disallowed());\n+                    let ty =\n+                        self.lower_ty(t, ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n                     hir::ForeignItemKind::Static(ty, m)\n                 }\n                 ForeignItemKind::TyAlias(..) => hir::ForeignItemKind::Type,\n@@ -744,11 +781,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 qself,\n                 path,\n                 ParamMode::ExplicitNamed, // no `'_` in declarations (Issue #61124)\n-                ImplTraitContext::disallowed(),\n+                ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n             );\n             self.arena.alloc(t)\n         } else {\n-            self.lower_ty(&f.ty, ImplTraitContext::disallowed())\n+            self.lower_ty(&f.ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type))\n         };\n         let hir_id = self.lower_node_id(f.id);\n         self.lower_attrs(hir_id, &f.attrs);\n@@ -771,14 +808,19 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n         let (generics, kind) = match i.kind {\n             AssocItemKind::Const(_, ref ty, ref default) => {\n-                let ty = self.lower_ty(ty, ImplTraitContext::disallowed());\n+                let ty = self.lower_ty(ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n                 let body = default.as_ref().map(|x| self.lower_const_body(i.span, Some(x)));\n                 (hir::Generics::empty(), hir::TraitItemKind::Const(ty, body))\n             }\n             AssocItemKind::Fn(box Fn { ref sig, ref generics, body: None, .. }) => {\n                 let names = self.lower_fn_params_to_names(&sig.decl);\n-                let (generics, sig) =\n-                    self.lower_method_sig(generics, sig, trait_item_def_id, false, None);\n+                let (generics, sig) = self.lower_method_sig(\n+                    generics,\n+                    sig,\n+                    trait_item_def_id,\n+                    FnDeclKind::Trait,\n+                    None,\n+                );\n                 (generics, hir::TraitItemKind::Fn(sig, hir::TraitFn::Required(names)))\n             }\n             AssocItemKind::Fn(box Fn { ref sig, ref generics, body: Some(ref body), .. }) => {\n@@ -789,16 +831,24 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     generics,\n                     sig,\n                     trait_item_def_id,\n-                    false,\n+                    FnDeclKind::Trait,\n                     asyncness.opt_return_id(),\n                 );\n                 (generics, hir::TraitItemKind::Fn(sig, hir::TraitFn::Provided(body_id)))\n             }\n             AssocItemKind::TyAlias(box TyAlias { ref generics, ref bounds, ref ty, .. }) => {\n-                let ty = ty.as_ref().map(|x| self.lower_ty(x, ImplTraitContext::disallowed()));\n-                let generics = self.lower_generics(generics, ImplTraitContext::disallowed());\n+                let ty = ty.as_ref().map(|x| {\n+                    self.lower_ty(x, ImplTraitContext::Disallowed(ImplTraitPosition::Type))\n+                });\n+                let generics = self.lower_generics(\n+                    generics,\n+                    ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                );\n                 let kind = hir::TraitItemKind::Type(\n-                    self.lower_param_bounds(bounds, ImplTraitContext::disallowed()),\n+                    self.lower_param_bounds(\n+                        bounds,\n+                        ImplTraitContext::Disallowed(ImplTraitPosition::Bound),\n+                    ),\n                     ty,\n                 );\n \n@@ -850,7 +900,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n         let (generics, kind) = match &i.kind {\n             AssocItemKind::Const(_, ty, expr) => {\n-                let ty = self.lower_ty(ty, ImplTraitContext::disallowed());\n+                let ty = self.lower_ty(ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n                 (\n                     hir::Generics::empty(),\n                     hir::ImplItemKind::Const(ty, self.lower_const_body(i.span, expr.as_deref())),\n@@ -861,19 +911,21 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let asyncness = sig.header.asyncness;\n                 let body_id =\n                     self.lower_maybe_async_body(i.span, &sig.decl, asyncness, body.as_deref());\n-                let impl_trait_return_allow = !self.is_in_trait_impl;\n                 let (generics, sig) = self.lower_method_sig(\n                     generics,\n                     sig,\n                     impl_item_def_id,\n-                    impl_trait_return_allow,\n+                    if self.is_in_trait_impl { FnDeclKind::Impl } else { FnDeclKind::Inherent },\n                     asyncness.opt_return_id(),\n                 );\n \n                 (generics, hir::ImplItemKind::Fn(sig, body_id))\n             }\n             AssocItemKind::TyAlias(box TyAlias { generics, ty, .. }) => {\n-                let generics = self.lower_generics(generics, ImplTraitContext::disallowed());\n+                let generics = self.lower_generics(\n+                    generics,\n+                    ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                );\n                 let kind = match ty {\n                     None => {\n                         let ty = self.arena.alloc(self.ty(i.span, hir::TyKind::Err));\n@@ -1248,22 +1300,15 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         generics: &Generics,\n         sig: &FnSig,\n         fn_def_id: LocalDefId,\n-        impl_trait_return_allow: bool,\n+        kind: FnDeclKind,\n         is_async: Option<NodeId>,\n     ) -> (hir::Generics<'hir>, hir::FnSig<'hir>) {\n         let header = self.lower_fn_header(sig.header);\n         let (generics, decl) = self.add_in_band_defs(\n             generics,\n             fn_def_id,\n             AnonymousLifetimeMode::PassThrough,\n-            |this, idty| {\n-                this.lower_fn_decl(\n-                    &sig.decl,\n-                    Some((fn_def_id, idty)),\n-                    impl_trait_return_allow,\n-                    is_async,\n-                )\n-            },\n+            |this, idty| this.lower_fn_decl(&sig.decl, Some((fn_def_id, idty)), kind, is_async),\n         );\n         (generics, hir::FnSig { header, decl, span: self.lower_span(sig.span) })\n     }\n@@ -1409,11 +1454,19 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 span,\n             }) => self.with_in_scope_lifetime_defs(&bound_generic_params, |this| {\n                 hir::WherePredicate::BoundPredicate(hir::WhereBoundPredicate {\n-                    bound_generic_params: this\n-                        .lower_generic_params(bound_generic_params, ImplTraitContext::disallowed()),\n-                    bounded_ty: this.lower_ty(bounded_ty, ImplTraitContext::disallowed()),\n+                    bound_generic_params: this.lower_generic_params(\n+                        bound_generic_params,\n+                        ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                    ),\n+                    bounded_ty: this.lower_ty(\n+                        bounded_ty,\n+                        ImplTraitContext::Disallowed(ImplTraitPosition::Type),\n+                    ),\n                     bounds: this.arena.alloc_from_iter(bounds.iter().map(|bound| {\n-                        this.lower_param_bound(bound, ImplTraitContext::disallowed())\n+                        this.lower_param_bound(\n+                            bound,\n+                            ImplTraitContext::Disallowed(ImplTraitPosition::Bound),\n+                        )\n                     })),\n                     span: this.lower_span(span),\n                 })\n@@ -1425,13 +1478,18 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             }) => hir::WherePredicate::RegionPredicate(hir::WhereRegionPredicate {\n                 span: self.lower_span(span),\n                 lifetime: self.lower_lifetime(lifetime),\n-                bounds: self.lower_param_bounds(bounds, ImplTraitContext::disallowed()),\n+                bounds: self.lower_param_bounds(\n+                    bounds,\n+                    ImplTraitContext::Disallowed(ImplTraitPosition::Bound),\n+                ),\n             }),\n             WherePredicate::EqPredicate(WhereEqPredicate { id, ref lhs_ty, ref rhs_ty, span }) => {\n                 hir::WherePredicate::EqPredicate(hir::WhereEqPredicate {\n                     hir_id: self.lower_node_id(id),\n-                    lhs_ty: self.lower_ty(lhs_ty, ImplTraitContext::disallowed()),\n-                    rhs_ty: self.lower_ty(rhs_ty, ImplTraitContext::disallowed()),\n+                    lhs_ty: self\n+                        .lower_ty(lhs_ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type)),\n+                    rhs_ty: self\n+                        .lower_ty(rhs_ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type)),\n                     span: self.lower_span(span),\n                 })\n             }"}, {"sha": "ae7f22923dfc502e69dfa2be449805604989e2fa", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 103, "deletions": 25, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -256,19 +256,28 @@ enum ImplTraitContext<'b, 'a> {\n /// Position in which `impl Trait` is disallowed.\n #[derive(Debug, Copy, Clone, PartialEq, Eq)]\n enum ImplTraitPosition {\n-    /// Disallowed in `let` / `const` / `static` bindings.\n-    Binding,\n-\n-    /// All other positions.\n-    Other,\n+    Path,\n+    Variable,\n+    Type,\n+    Trait,\n+    AsyncBlock,\n+    Bound,\n+    Generic,\n+    ExternFnParam,\n+    ClosureParam,\n+    PointerParam,\n+    FnTraitParam,\n+    TraitParam,\n+    ImplParam,\n+    ExternFnReturn,\n+    ClosureReturn,\n+    PointerReturn,\n+    FnTraitReturn,\n+    TraitReturn,\n+    ImplReturn,\n }\n \n impl<'a> ImplTraitContext<'_, 'a> {\n-    #[inline]\n-    fn disallowed() -> Self {\n-        ImplTraitContext::Disallowed(ImplTraitPosition::Other)\n-    }\n-\n     fn reborrow<'this>(&'this mut self) -> ImplTraitContext<'this, 'a> {\n         use self::ImplTraitContext::*;\n         match self {\n@@ -284,6 +293,54 @@ impl<'a> ImplTraitContext<'_, 'a> {\n     }\n }\n \n+impl std::fmt::Display for ImplTraitPosition {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        let name = match self {\n+            ImplTraitPosition::Path => \"path\",\n+            ImplTraitPosition::Variable => \"variable binding\",\n+            ImplTraitPosition::Type => \"type\",\n+            ImplTraitPosition::Trait => \"trait\",\n+            ImplTraitPosition::AsyncBlock => \"async block\",\n+            ImplTraitPosition::Bound => \"bound\",\n+            ImplTraitPosition::Generic => \"generic\",\n+            ImplTraitPosition::ExternFnParam => \"`extern fn` param\",\n+            ImplTraitPosition::ClosureParam => \"closure param\",\n+            ImplTraitPosition::PointerParam => \"`fn` pointer param\",\n+            ImplTraitPosition::FnTraitParam => \"`Fn` trait param\",\n+            ImplTraitPosition::TraitParam => \"trait method param\",\n+            ImplTraitPosition::ImplParam => \"`impl` method param\",\n+            ImplTraitPosition::ExternFnReturn => \"`extern fn` return\",\n+            ImplTraitPosition::ClosureReturn => \"closure return\",\n+            ImplTraitPosition::PointerReturn => \"`fn` pointer return\",\n+            ImplTraitPosition::FnTraitReturn => \"`Fn` trait return\",\n+            ImplTraitPosition::TraitReturn => \"trait method return\",\n+            ImplTraitPosition::ImplReturn => \"`impl` method return\",\n+        };\n+\n+        write!(f, \"{}\", name)\n+    }\n+}\n+\n+#[derive(Debug)]\n+enum FnDeclKind {\n+    Fn,\n+    Inherent,\n+    ExternFn,\n+    Closure,\n+    Pointer,\n+    Trait,\n+    Impl,\n+}\n+\n+impl FnDeclKind {\n+    fn impl_trait_return_allowed(&self) -> bool {\n+        match self {\n+            FnDeclKind::Fn | FnDeclKind::Inherent => true,\n+            _ => false,\n+        }\n+    }\n+}\n+\n pub fn lower_crate<'a, 'hir>(\n     sess: &'a Session,\n     krate: &'a Crate,\n@@ -1232,11 +1289,11 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     hir::TyKind::BareFn(this.arena.alloc(hir::BareFnTy {\n                         generic_params: this.lower_generic_params(\n                             &f.generic_params,\n-                            ImplTraitContext::disallowed(),\n+                            ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n                         ),\n                         unsafety: this.lower_unsafety(f.unsafety),\n                         abi: this.lower_extern(f.ext),\n-                        decl: this.lower_fn_decl(&f.decl, None, false, None),\n+                        decl: this.lower_fn_decl(&f.decl, None, FnDeclKind::Pointer, None),\n                         param_names: this.lower_fn_params_to_names(&f.decl),\n                     }))\n                 })\n@@ -1357,13 +1414,13 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             }),\n                         ))\n                     }\n-                    ImplTraitContext::Disallowed(_) => {\n+                    ImplTraitContext::Disallowed(position) => {\n                         let mut err = struct_span_err!(\n                             self.sess,\n                             t.span,\n                             E0562,\n-                            \"`impl Trait` not allowed outside of {}\",\n-                            \"function and method return types\",\n+                            \"`impl Trait` only allowed in function and inherent method return types, not in {}\",\n+                            position\n                         );\n                         err.emit();\n                         hir::TyKind::Err\n@@ -1528,16 +1585,16 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         &mut self,\n         decl: &FnDecl,\n         mut in_band_ty_params: Option<(LocalDefId, &mut Vec<hir::GenericParam<'hir>>)>,\n-        impl_trait_return_allow: bool,\n+        kind: FnDeclKind,\n         make_ret_async: Option<NodeId>,\n     ) -> &'hir hir::FnDecl<'hir> {\n         debug!(\n             \"lower_fn_decl(\\\n             fn_decl: {:?}, \\\n             in_band_ty_params: {:?}, \\\n-            impl_trait_return_allow: {}, \\\n+            kind: {:?}, \\\n             make_ret_async: {:?})\",\n-            decl, in_band_ty_params, impl_trait_return_allow, make_ret_async,\n+            decl, in_band_ty_params, kind, make_ret_async,\n         );\n         let lt_mode = if make_ret_async.is_some() {\n             // In `async fn`, argument-position elided lifetimes\n@@ -1567,7 +1624,19 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         ImplTraitContext::Universal(ibty, this.current_hir_id_owner),\n                     )\n                 } else {\n-                    this.lower_ty_direct(&param.ty, ImplTraitContext::disallowed())\n+                    this.lower_ty_direct(\n+                        &param.ty,\n+                        ImplTraitContext::Disallowed(match kind {\n+                            FnDeclKind::Fn | FnDeclKind::Inherent => {\n+                                unreachable!(\"fn should allow in-band lifetimes\")\n+                            }\n+                            FnDeclKind::ExternFn => ImplTraitPosition::ExternFnParam,\n+                            FnDeclKind::Closure => ImplTraitPosition::ClosureParam,\n+                            FnDeclKind::Pointer => ImplTraitPosition::PointerParam,\n+                            FnDeclKind::Trait => ImplTraitPosition::TraitParam,\n+                            FnDeclKind::Impl => ImplTraitPosition::ImplParam,\n+                        }),\n+                    )\n                 }\n             }))\n         });\n@@ -1582,13 +1651,22 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             match decl.output {\n                 FnRetTy::Ty(ref ty) => {\n                     let context = match in_band_ty_params {\n-                        Some((def_id, _)) if impl_trait_return_allow => {\n+                        Some((def_id, _)) if kind.impl_trait_return_allowed() => {\n                             ImplTraitContext::ReturnPositionOpaqueTy {\n                                 fn_def_id: def_id,\n                                 origin: hir::OpaqueTyOrigin::FnReturn(def_id),\n                             }\n                         }\n-                        _ => ImplTraitContext::disallowed(),\n+                        _ => ImplTraitContext::Disallowed(match kind {\n+                            FnDeclKind::Fn | FnDeclKind::Inherent => {\n+                                unreachable!(\"fn should allow in-band lifetimes\")\n+                            }\n+                            FnDeclKind::ExternFn => ImplTraitPosition::ExternFnReturn,\n+                            FnDeclKind::Closure => ImplTraitPosition::ClosureReturn,\n+                            FnDeclKind::Pointer => ImplTraitPosition::PointerReturn,\n+                            FnDeclKind::Trait => ImplTraitPosition::TraitReturn,\n+                            FnDeclKind::Impl => ImplTraitPosition::ImplReturn,\n+                        }),\n                     };\n                     hir::FnRetTy::Return(self.lower_ty(ty, context))\n                 }\n@@ -1946,17 +2024,17 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             GenericParamKind::Type { ref default, .. } => {\n                 let kind = hir::GenericParamKind::Type {\n                     default: default.as_ref().map(|x| {\n-                        self.lower_ty(x, ImplTraitContext::Disallowed(ImplTraitPosition::Other))\n+                        self.lower_ty(x, ImplTraitContext::Disallowed(ImplTraitPosition::Type))\n                     }),\n                     synthetic: false,\n                 };\n \n                 (hir::ParamName::Plain(self.lower_ident(param.ident)), kind)\n             }\n             GenericParamKind::Const { ref ty, kw_span: _, ref default } => {\n-                let ty = self\n-                    .with_anonymous_lifetime_mode(AnonymousLifetimeMode::ReportError, |this| {\n-                        this.lower_ty(&ty, ImplTraitContext::disallowed())\n+                let ty =\n+                    self.with_anonymous_lifetime_mode(AnonymousLifetimeMode::ReportError, |this| {\n+                        this.lower_ty(&ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type))\n                     });\n                 let default = default.as_ref().map(|def| self.lower_anon_const(def));\n                 ("}, {"sha": "2c331767b8958541be83947dd6ef7ee9918bc6e5", "filename": "compiler/rustc_ast_lowering/src/pat.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -1,3 +1,5 @@\n+use crate::ImplTraitPosition;\n+\n use super::{ImplTraitContext, LoweringContext, ParamMode};\n \n use rustc_ast::ptr::P;\n@@ -33,7 +35,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             qself,\n                             path,\n                             ParamMode::Optional,\n-                            ImplTraitContext::disallowed(),\n+                            ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                         );\n                         let (pats, ddpos) = self.lower_pat_tuple(pats, \"tuple struct\");\n                         break hir::PatKind::TupleStruct(qpath, pats, ddpos);\n@@ -49,7 +51,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             qself,\n                             path,\n                             ParamMode::Optional,\n-                            ImplTraitContext::disallowed(),\n+                            ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                         );\n                         break hir::PatKind::Path(qpath);\n                     }\n@@ -59,7 +61,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             qself,\n                             path,\n                             ParamMode::Optional,\n-                            ImplTraitContext::disallowed(),\n+                            ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                         );\n \n                         let fs = self.arena.alloc_from_iter(fields.iter().map(|f| hir::PatField {"}, {"sha": "b35e3a071619af307dfa7df01533a02d6c2487dd", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -1,3 +1,5 @@\n+use crate::ImplTraitPosition;\n+\n use super::{AnonymousLifetimeMode, ImplTraitContext, LoweringContext, ParamMode};\n use super::{GenericArgsCtor, ParenthesizedGenericArgs};\n \n@@ -184,7 +186,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     param_mode,\n                     0,\n                     ParenthesizedGenericArgs::Err,\n-                    ImplTraitContext::disallowed(),\n+                    ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                 )\n             })),\n             span: self.lower_span(p.span),\n@@ -392,11 +394,15 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         // we generally don't permit such things (see #51008).\n         self.with_anonymous_lifetime_mode(AnonymousLifetimeMode::PassThrough, |this| {\n             let ParenthesizedArgs { span, inputs, inputs_span, output } = data;\n-            let inputs = this.arena.alloc_from_iter(\n-                inputs.iter().map(|ty| this.lower_ty_direct(ty, ImplTraitContext::disallowed())),\n-            );\n+            let inputs = this.arena.alloc_from_iter(inputs.iter().map(|ty| {\n+                this.lower_ty_direct(\n+                    ty,\n+                    ImplTraitContext::Disallowed(ImplTraitPosition::FnTraitParam),\n+                )\n+            }));\n             let output_ty = match output {\n-                FnRetTy::Ty(ty) => this.lower_ty(&ty, ImplTraitContext::disallowed()),\n+                FnRetTy::Ty(ty) => this\n+                    .lower_ty(&ty, ImplTraitContext::Disallowed(ImplTraitPosition::FnTraitReturn)),\n                 FnRetTy::Default(_) => this.arena.alloc(this.ty_tup(*span, &[])),\n             };\n             let args = smallvec![GenericArg::Type(this.ty_tup(*inputs_span, inputs))];"}, {"sha": "49043e9f5f9d630ebfad878d08a48862200a1acb", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -1,10 +1,13 @@\n //! Parsing and validation of builtin attributes\n \n-use rustc_ast::{self as ast, Attribute, Lit, LitKind, MetaItem, MetaItemKind, NestedMetaItem};\n+use rustc_ast as ast;\n+use rustc_ast::node_id::CRATE_NODE_ID;\n+use rustc_ast::{Attribute, Lit, LitKind, MetaItem, MetaItemKind, NestedMetaItem};\n use rustc_ast_pretty::pprust;\n use rustc_errors::{struct_span_err, Applicability};\n use rustc_feature::{find_gated_cfg, is_builtin_attr_name, Features, GatedCfg};\n use rustc_macros::HashStable_Generic;\n+use rustc_session::lint::builtin::UNEXPECTED_CFGS;\n use rustc_session::parse::{feature_err, ParseSess};\n use rustc_session::Session;\n use rustc_span::hygiene::Transparency;\n@@ -458,8 +461,30 @@ pub fn cfg_matches(cfg: &ast::MetaItem, sess: &ParseSess, features: Option<&Feat\n                 true\n             }\n             MetaItemKind::NameValue(..) | MetaItemKind::Word => {\n-                let ident = cfg.ident().expect(\"multi-segment cfg predicate\");\n-                sess.config.contains(&(ident.name, cfg.value_str()))\n+                let name = cfg.ident().expect(\"multi-segment cfg predicate\").name;\n+                let value = cfg.value_str();\n+                if sess.check_config.names_checked && !sess.check_config.names_valid.contains(&name)\n+                {\n+                    sess.buffer_lint(\n+                        UNEXPECTED_CFGS,\n+                        cfg.span,\n+                        CRATE_NODE_ID,\n+                        \"unexpected `cfg` condition name\",\n+                    );\n+                }\n+                if let Some(val) = value {\n+                    if sess.check_config.values_checked.contains(&name)\n+                        && !sess.check_config.values_valid.contains(&(name, val))\n+                    {\n+                        sess.buffer_lint(\n+                            UNEXPECTED_CFGS,\n+                            cfg.span,\n+                            CRATE_NODE_ID,\n+                            \"unexpected `cfg` condition value\",\n+                        );\n+                    }\n+                }\n+                sess.config.contains(&(name, value))\n             }\n         }\n     })"}, {"sha": "f6d7221d4e9e8afa56a13160b7eb364b06b7ab79", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -55,6 +55,19 @@ pub fn sanitize<'ll>(cx: &CodegenCx<'ll, '_>, no_sanitize: SanitizerSet, llfn: &\n     if enabled.contains(SanitizerSet::HWADDRESS) {\n         llvm::Attribute::SanitizeHWAddress.apply_llfn(Function, llfn);\n     }\n+    if enabled.contains(SanitizerSet::MEMTAG) {\n+        // Check to make sure the mte target feature is actually enabled.\n+        let sess = cx.tcx.sess;\n+        let features = llvm_util::llvm_global_features(sess).join(\",\");\n+        let mte_feature_enabled = features.rfind(\"+mte\");\n+        let mte_feature_disabled = features.rfind(\"-mte\");\n+\n+        if mte_feature_enabled.is_none() || (mte_feature_disabled > mte_feature_enabled) {\n+            sess.err(\"`-Zsanitizer=memtag` requires `-Ctarget-feature=+mte`\");\n+        }\n+\n+        llvm::Attribute::SanitizeMemTag.apply_llfn(Function, llfn);\n+    }\n }\n \n /// Tell LLVM to emit or not emit the information necessary to unwind the stack for the function."}, {"sha": "657f1fcf31e838fd496b3f105203837e61304396", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -190,6 +190,7 @@ pub enum Attribute {\n     StackProtectStrong = 31,\n     StackProtect = 32,\n     NoUndef = 33,\n+    SanitizeMemTag = 34,\n }\n \n /// LLVMIntPredicate"}, {"sha": "85826cfbf0168dd17448a722b9a2a68af94ccd40", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -216,10 +216,12 @@ fn run_compiler(\n     }\n \n     let cfg = interface::parse_cfgspecs(matches.opt_strs(\"cfg\"));\n+    let check_cfg = interface::parse_check_cfg(matches.opt_strs(\"check-cfg\"));\n     let (odir, ofile) = make_output(&matches);\n     let mut config = interface::Config {\n         opts: sopts,\n         crate_cfg: cfg,\n+        crate_check_cfg: check_cfg,\n         input: Input::File(PathBuf::new()),\n         input_path: None,\n         output_file: ofile,"}, {"sha": "74c440890452a1bbe1d1db6c243f9f3dabf1d3fe", "filename": "compiler/rustc_infer/src/infer/type_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ftype_variable.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -263,7 +263,7 @@ impl<'tcx> TypeVariableTable<'_, 'tcx> {\n         let index = self.values().push(TypeVariableData { origin });\n         assert_eq!(eq_key.vid.as_u32(), index as u32);\n \n-        debug!(\"new_var(index={:?}, universe={:?}, origin={:?}\", eq_key.vid, universe, origin,);\n+        debug!(\"new_var(index={:?}, universe={:?}, origin={:?})\", eq_key.vid, universe, origin);\n \n         eq_key.vid\n     }"}, {"sha": "609fc4b78c0dea9ce1da6dea32c82afeb8f1b865", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 89, "deletions": 2, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -2,7 +2,7 @@ pub use crate::passes::BoxedResolver;\n use crate::util;\n \n use rustc_ast::token;\n-use rustc_ast::{self as ast, MetaItemKind};\n+use rustc_ast::{self as ast, LitKind, MetaItemKind};\n use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n@@ -13,12 +13,13 @@ use rustc_lint::LintStore;\n use rustc_middle::ty;\n use rustc_parse::maybe_new_parser_from_source_str;\n use rustc_query_impl::QueryCtxt;\n-use rustc_session::config::{self, ErrorOutputType, Input, OutputFilenames};\n+use rustc_session::config::{self, CheckCfg, ErrorOutputType, Input, OutputFilenames};\n use rustc_session::early_error;\n use rustc_session::lint;\n use rustc_session::parse::{CrateConfig, ParseSess};\n use rustc_session::{DiagnosticOutput, Session};\n use rustc_span::source_map::{FileLoader, FileName};\n+use rustc_span::symbol::sym;\n use std::path::PathBuf;\n use std::result;\n \n@@ -139,13 +140,98 @@ pub fn parse_cfgspecs(cfgspecs: Vec<String>) -> FxHashSet<(String, Option<String\n     })\n }\n \n+/// Converts strings provided as `--check-cfg [specs]` into a `CheckCfg`.\n+pub fn parse_check_cfg(specs: Vec<String>) -> CheckCfg {\n+    rustc_span::create_default_session_if_not_set_then(move |_| {\n+        let mut cfg = CheckCfg::default();\n+\n+        'specs: for s in specs {\n+            let sess = ParseSess::with_silent_emitter(Some(format!(\n+                \"this error occurred on the command line: `--check-cfg={}`\",\n+                s\n+            )));\n+            let filename = FileName::cfg_spec_source_code(&s);\n+\n+            macro_rules! error {\n+                ($reason: expr) => {\n+                    early_error(\n+                        ErrorOutputType::default(),\n+                        &format!(\n+                            concat!(\"invalid `--check-cfg` argument: `{}` (\", $reason, \")\"),\n+                            s\n+                        ),\n+                    );\n+                };\n+            }\n+\n+            match maybe_new_parser_from_source_str(&sess, filename, s.to_string()) {\n+                Ok(mut parser) => match &mut parser.parse_meta_item() {\n+                    Ok(meta_item) if parser.token == token::Eof => {\n+                        if let Some(args) = meta_item.meta_item_list() {\n+                            if meta_item.has_name(sym::names) {\n+                                cfg.names_checked = true;\n+                                for arg in args {\n+                                    if arg.is_word() && arg.ident().is_some() {\n+                                        let ident = arg.ident().expect(\"multi-segment cfg key\");\n+                                        cfg.names_valid.insert(ident.name.to_string());\n+                                    } else {\n+                                        error!(\"`names()` arguments must be simple identifers\");\n+                                    }\n+                                }\n+                                continue 'specs;\n+                            } else if meta_item.has_name(sym::values) {\n+                                if let Some((name, values)) = args.split_first() {\n+                                    if name.is_word() && name.ident().is_some() {\n+                                        let ident = name.ident().expect(\"multi-segment cfg key\");\n+                                        cfg.values_checked.insert(ident.to_string());\n+                                        for val in values {\n+                                            if let Some(LitKind::Str(s, _)) =\n+                                                val.literal().map(|lit| &lit.kind)\n+                                            {\n+                                                cfg.values_valid\n+                                                    .insert((ident.to_string(), s.to_string()));\n+                                            } else {\n+                                                error!(\n+                                                    \"`values()` arguments must be string literals\"\n+                                                );\n+                                            }\n+                                        }\n+\n+                                        continue 'specs;\n+                                    } else {\n+                                        error!(\n+                                            \"`values()` first argument must be a simple identifer\"\n+                                        );\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                    Ok(..) => {}\n+                    Err(err) => err.cancel(),\n+                },\n+                Err(errs) => errs.into_iter().for_each(|mut err| err.cancel()),\n+            }\n+\n+            error!(\n+                \"expected `names(name1, name2, ... nameN)` or \\\n+                `values(name, \\\"value1\\\", \\\"value2\\\", ... \\\"valueN\\\")`\"\n+            );\n+        }\n+\n+        cfg.names_valid.extend(cfg.values_checked.iter().cloned());\n+        cfg\n+    })\n+}\n+\n /// The compiler configuration\n pub struct Config {\n     /// Command line options\n     pub opts: config::Options,\n \n     /// cfg! configuration in addition to the default ones\n     pub crate_cfg: FxHashSet<(String, Option<String>)>,\n+    pub crate_check_cfg: CheckCfg,\n \n     pub input: Input,\n     pub input_path: Option<PathBuf>,\n@@ -188,6 +274,7 @@ pub fn create_compiler_and_run<R>(config: Config, f: impl FnOnce(&Compiler) -> R\n     let (mut sess, codegen_backend) = util::create_session(\n         config.opts,\n         config.crate_cfg,\n+        config.crate_check_cfg,\n         config.diagnostic_output,\n         config.file_loader,\n         config.input_path.clone(),"}, {"sha": "46964f5268509666ffb58967b999e8b37c53babd", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -15,6 +15,7 @@ use rustc_parse::validate_attr;\n use rustc_query_impl::QueryCtxt;\n use rustc_resolve::{self, Resolver};\n use rustc_session as session;\n+use rustc_session::config::CheckCfg;\n use rustc_session::config::{self, CrateType};\n use rustc_session::config::{ErrorOutputType, Input, OutputFilenames};\n use rustc_session::lint::{self, BuiltinLintDiagnostics, LintBuffer};\n@@ -65,6 +66,7 @@ pub fn add_configuration(\n pub fn create_session(\n     sopts: config::Options,\n     cfg: FxHashSet<(String, Option<String>)>,\n+    check_cfg: CheckCfg,\n     diagnostic_output: DiagnosticOutput,\n     file_loader: Option<Box<dyn FileLoader + Send + Sync + 'static>>,\n     input_path: Option<PathBuf>,\n@@ -100,7 +102,13 @@ pub fn create_session(\n \n     let mut cfg = config::build_configuration(&sess, config::to_crate_config(cfg));\n     add_configuration(&mut cfg, &mut sess, &*codegen_backend);\n+\n+    let mut check_cfg = config::to_crate_check_config(check_cfg);\n+    check_cfg.fill_well_known();\n+    check_cfg.fill_actual(&cfg);\n+\n     sess.parse_sess.config = cfg;\n+    sess.parse_sess.check_config = check_cfg;\n \n     (Lrc::new(sess), Lrc::new(codegen_backend))\n }"}, {"sha": "adec1a3ab00d6c0e89805232dc89ff13f842f8ab", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -2957,6 +2957,43 @@ declare_lint! {\n     };\n }\n \n+declare_lint! {\n+    /// The `unexpected_cfgs` lint detects unexpected conditional compilation conditions.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```text\n+    /// rustc --check-cfg 'names()'\n+    /// ```\n+    ///\n+    /// ```rust,ignore (needs command line option)\n+    /// #[cfg(widnows)]\n+    /// fn foo() {}\n+    /// ```\n+    ///\n+    /// This will produce:\n+    ///\n+    /// ```text\n+    /// warning: unknown condition name used\n+    ///  --> lint_example.rs:1:7\n+    ///   |\n+    /// 1 | #[cfg(widnows)]\n+    ///   |       ^^^^^^^\n+    ///   |\n+    ///   = note: `#[warn(unexpected_cfgs)]` on by default\n+    /// ```\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// This lint is only active when a `--check-cfg='names(...)'` option has been passed\n+    /// to the compiler and triggers whenever an unknown condition name or value is used.\n+    /// The known condition include names or values passed in `--check-cfg`, `--cfg`, and some\n+    /// well-knows names and values built into the compiler.\n+    pub UNEXPECTED_CFGS,\n+    Warn,\n+    \"detects unexpected names and values in `#[cfg]` conditions\",\n+}\n+\n declare_lint_pass! {\n     /// Does nothing as a lint pass, but registers some `Lint`s\n     /// that are used by other parts of the compiler.\n@@ -3055,6 +3092,7 @@ declare_lint_pass! {\n         DEPRECATED_CFG_ATTR_CRATE_TYPE_NAME,\n         DUPLICATE_MACRO_ATTRIBUTES,\n         SUSPICIOUS_AUTO_TRAIT_IMPLS,\n+        UNEXPECTED_CFGS,\n     ]\n }\n "}, {"sha": "a2b0e9b4d29d861fc7d5634b29828681c71f4a6e", "filename": "compiler/rustc_llvm/llvm-wrapper/LLVMWrapper.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -83,6 +83,7 @@ enum LLVMRustAttribute {\n   StackProtectStrong = 31,\n   StackProtect = 32,\n   NoUndef = 33,\n+  SanitizeMemTag = 34,\n };\n \n typedef struct OpaqueRustString *RustStringRef;"}, {"sha": "c8f31adbfd9ffb6444f3d7567b07a78393a198e1", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -226,6 +226,8 @@ static Attribute::AttrKind fromRust(LLVMRustAttribute Kind) {\n     return Attribute::StackProtect;\n   case NoUndef:\n     return Attribute::NoUndef;\n+  case SanitizeMemTag:\n+    return Attribute::SanitizeMemTag;\n   }\n   report_fatal_error(\"bad AttributeKind\");\n }"}, {"sha": "7c6d6ea1cb6ee1fa729c92c2aa9a7070707cbca7", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -8,7 +8,9 @@ use crate::infer::canonical::Canonical;\n use crate::ty::fold::ValidateBoundVars;\n use crate::ty::subst::{GenericArg, InternalSubsts, Subst, SubstsRef};\n use crate::ty::InferTy::{self, *};\n-use crate::ty::{self, AdtDef, DefIdTree, Discr, Term, Ty, TyCtxt, TypeFlags, TypeFoldable};\n+use crate::ty::{\n+    self, AdtDef, DefIdTree, Discr, Term, Ty, TyCtxt, TypeFlags, TypeFoldable, TypeVisitor,\n+};\n use crate::ty::{DelaySpanBugEmitted, List, ParamEnv};\n use polonius_engine::Atom;\n use rustc_data_structures::captures::Captures;\n@@ -24,7 +26,7 @@ use std::borrow::Cow;\n use std::cmp::Ordering;\n use std::fmt;\n use std::marker::PhantomData;\n-use std::ops::{Deref, Range};\n+use std::ops::{ControlFlow, Deref, Range};\n use ty::util::IntTypeExt;\n \n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]\n@@ -2072,6 +2074,24 @@ impl<'tcx> Ty<'tcx> {\n         !matches!(self.kind(), Param(_) | Infer(_) | Error(_))\n     }\n \n+    /// Checks whether a type recursively contains another type\n+    ///\n+    /// Example: `Option<()>` contains `()`\n+    pub fn contains(self, other: Ty<'tcx>) -> bool {\n+        struct ContainsTyVisitor<'tcx>(Ty<'tcx>);\n+\n+        impl<'tcx> TypeVisitor<'tcx> for ContainsTyVisitor<'tcx> {\n+            type BreakTy = ();\n+\n+            fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n+                if self.0 == t { ControlFlow::BREAK } else { t.super_visit_with(self) }\n+            }\n+        }\n+\n+        let cf = self.visit_with(&mut ContainsTyVisitor(other));\n+        cf.is_break()\n+    }\n+\n     /// Returns the type and mutability of `*ty`.\n     ///\n     /// The parameter `explicit` indicates if this is an *explicit* dereference."}, {"sha": "7a0d9a212c9d9bc2e4ee830939db2e51b8f7e0d7", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 88, "deletions": 1, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -16,7 +16,7 @@ use rustc_target::spec::{LinkerFlavor, SplitDebuginfo, Target, TargetTriple, Tar\n \n use rustc_serialize::json;\n \n-use crate::parse::CrateConfig;\n+use crate::parse::{CrateCheckConfig, CrateConfig};\n use rustc_feature::UnstableFeatures;\n use rustc_span::edition::{Edition, DEFAULT_EDITION, EDITION_NAME_LIST, LATEST_STABLE_EDITION};\n use rustc_span::source_map::{FileName, FilePathMapping};\n@@ -936,6 +936,7 @@ pub const fn default_lib_output() -> CrateType {\n }\n \n fn default_configuration(sess: &Session) -> CrateConfig {\n+    // NOTE: This should be kept in sync with `CrateCheckConfig::fill_well_known` below.\n     let end = &sess.target.endian;\n     let arch = &sess.target.arch;\n     let wordsz = sess.target.pointer_width.to_string();\n@@ -1020,6 +1021,91 @@ pub fn to_crate_config(cfg: FxHashSet<(String, Option<String>)>) -> CrateConfig\n     cfg.into_iter().map(|(a, b)| (Symbol::intern(&a), b.map(|b| Symbol::intern(&b)))).collect()\n }\n \n+/// The parsed `--check-cfg` options\n+pub struct CheckCfg<T = String> {\n+    /// Set if `names()` checking is enabled\n+    pub names_checked: bool,\n+    /// The union of all `names()`\n+    pub names_valid: FxHashSet<T>,\n+    /// The set of names for which `values()` was used\n+    pub values_checked: FxHashSet<T>,\n+    /// The set of all (name, value) pairs passed in `values()`\n+    pub values_valid: FxHashSet<(T, T)>,\n+}\n+\n+impl<T> Default for CheckCfg<T> {\n+    fn default() -> Self {\n+        CheckCfg {\n+            names_checked: false,\n+            names_valid: FxHashSet::default(),\n+            values_checked: FxHashSet::default(),\n+            values_valid: FxHashSet::default(),\n+        }\n+    }\n+}\n+\n+impl<T> CheckCfg<T> {\n+    fn map_data<O: Eq + Hash>(&self, f: impl Fn(&T) -> O) -> CheckCfg<O> {\n+        CheckCfg {\n+            names_checked: self.names_checked,\n+            names_valid: self.names_valid.iter().map(|a| f(a)).collect(),\n+            values_checked: self.values_checked.iter().map(|a| f(a)).collect(),\n+            values_valid: self.values_valid.iter().map(|(a, b)| (f(a), f(b))).collect(),\n+        }\n+    }\n+}\n+\n+/// Converts the crate `--check-cfg` options from `String` to `Symbol`.\n+/// `rustc_interface::interface::Config` accepts this in the compiler configuration,\n+/// but the symbol interner is not yet set up then, so we must convert it later.\n+pub fn to_crate_check_config(cfg: CheckCfg) -> CrateCheckConfig {\n+    cfg.map_data(|s| Symbol::intern(s))\n+}\n+\n+impl CrateCheckConfig {\n+    /// Fills a `CrateCheckConfig` with well-known configuration names.\n+    pub fn fill_well_known(&mut self) {\n+        // NOTE: This should be kept in sync with `default_configuration`\n+        const WELL_KNOWN_NAMES: &[Symbol] = &[\n+            sym::unix,\n+            sym::windows,\n+            sym::target_os,\n+            sym::target_family,\n+            sym::target_arch,\n+            sym::target_endian,\n+            sym::target_pointer_width,\n+            sym::target_env,\n+            sym::target_abi,\n+            sym::target_vendor,\n+            sym::target_thread_local,\n+            sym::target_has_atomic_load_store,\n+            sym::target_has_atomic,\n+            sym::target_has_atomic_equal_alignment,\n+            sym::panic,\n+            sym::sanitize,\n+            sym::debug_assertions,\n+            sym::proc_macro,\n+            sym::test,\n+            sym::doc,\n+            sym::doctest,\n+            sym::feature,\n+        ];\n+        for &name in WELL_KNOWN_NAMES {\n+            self.names_valid.insert(name);\n+        }\n+    }\n+\n+    /// Fills a `CrateCheckConfig` with configuration names and values that are actually active.\n+    pub fn fill_actual(&mut self, cfg: &CrateConfig) {\n+        for &(k, v) in cfg {\n+            self.names_valid.insert(k);\n+            if let Some(v) = v {\n+                self.values_valid.insert((k, v));\n+            }\n+        }\n+    }\n+}\n+\n pub fn build_configuration(sess: &Session, mut user_cfg: CrateConfig) -> CrateConfig {\n     // Combine the configuration requested by the session (command line) with\n     // some default and generated configuration items.\n@@ -1163,6 +1249,7 @@ pub fn rustc_short_optgroups() -> Vec<RustcOptGroup> {\n     vec![\n         opt::flag_s(\"h\", \"help\", \"Display this message\"),\n         opt::multi_s(\"\", \"cfg\", \"Configure the compilation environment\", \"SPEC\"),\n+        opt::multi(\"\", \"check-cfg\", \"Provide list of valid cfg options for checking\", \"SPEC\"),\n         opt::multi_s(\n             \"L\",\n             \"\","}, {"sha": "0a4bd23937dec6eb356181dbaadacf93874d996b", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -376,7 +376,7 @@ mod desc {\n     pub const parse_panic_strategy: &str = \"either `unwind` or `abort`\";\n     pub const parse_opt_panic_strategy: &str = parse_panic_strategy;\n     pub const parse_relro_level: &str = \"one of: `full`, `partial`, or `off`\";\n-    pub const parse_sanitizers: &str = \"comma separated list of sanitizers: `address`, `cfi`, `hwaddress`, `leak`, `memory` or `thread`\";\n+    pub const parse_sanitizers: &str = \"comma separated list of sanitizers: `address`, `cfi`, `hwaddress`, `leak`, `memory`, `memtag`, or `thread`\";\n     pub const parse_sanitizer_memory_track_origins: &str = \"0, 1, or 2\";\n     pub const parse_cfguard: &str =\n         \"either a boolean (`yes`, `no`, `on`, `off`, etc), `checks`, or `nochecks`\";\n@@ -639,6 +639,7 @@ mod parse {\n                     \"cfi\" => SanitizerSet::CFI,\n                     \"leak\" => SanitizerSet::LEAK,\n                     \"memory\" => SanitizerSet::MEMORY,\n+                    \"memtag\" => SanitizerSet::MEMTAG,\n                     \"thread\" => SanitizerSet::THREAD,\n                     \"hwaddress\" => SanitizerSet::HWADDRESS,\n                     _ => return false,"}, {"sha": "7113f9b0a2f5a4d8fc4f21fd0d26116d7de7dcfe", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -1,6 +1,7 @@\n //! Contains `ParseSess` which holds state living beyond what one `Parser` might.\n //! It also serves as an input to the parser itself.\n \n+use crate::config::CheckCfg;\n use crate::lint::{BufferedEarlyLint, BuiltinLintDiagnostics, Lint, LintId};\n use rustc_ast::node_id::NodeId;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -18,6 +19,7 @@ use std::str;\n /// The set of keys (and, optionally, values) that define the compilation\n /// environment of the crate, used to drive conditional compilation.\n pub type CrateConfig = FxHashSet<(Symbol, Option<Symbol>)>;\n+pub type CrateCheckConfig = CheckCfg<Symbol>;\n \n /// Collected spans during parsing for places where a certain feature was\n /// used and should be feature gated accordingly in `check_crate`.\n@@ -117,6 +119,7 @@ pub struct ParseSess {\n     pub span_diagnostic: Handler,\n     pub unstable_features: UnstableFeatures,\n     pub config: CrateConfig,\n+    pub check_config: CrateCheckConfig,\n     pub edition: Edition,\n     pub missing_fragment_specifiers: Lock<FxHashMap<Span, NodeId>>,\n     /// Places where raw identifiers were used. This is used to avoid complaining about idents\n@@ -162,6 +165,7 @@ impl ParseSess {\n             span_diagnostic: handler,\n             unstable_features: UnstableFeatures::from_environment(None),\n             config: FxHashSet::default(),\n+            check_config: CrateCheckConfig::default(),\n             edition: ExpnId::root().expn_data().edition,\n             missing_fragment_specifiers: Default::default(),\n             raw_identifier_spans: Lock::new(Vec::new()),"}, {"sha": "c746255e95e18b693e946eb20654023de67acec7", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -876,6 +876,7 @@ symbols! {\n         mem_zeroed,\n         member_constraints,\n         memory,\n+        memtag,\n         message,\n         meta,\n         metadata_type,\n@@ -910,6 +911,7 @@ symbols! {\n         naked,\n         naked_functions,\n         name,\n+        names,\n         native_link_modifiers,\n         native_link_modifiers_as_needed,\n         native_link_modifiers_bundle,\n@@ -1481,6 +1483,7 @@ symbols! {\n         va_list,\n         va_start,\n         val,\n+        values,\n         var,\n         variant_count,\n         vec,"}, {"sha": "d184ad4e78ae5ea4854a4e7bde7074fe8e563889", "filename": "compiler/rustc_target/src/asm/aarch64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_target%2Fsrc%2Fasm%2Faarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_target%2Fsrc%2Fasm%2Faarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Faarch64.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -77,6 +77,7 @@ pub fn reserved_x18(\n     _arch: InlineAsmArch,\n     _target_features: &FxHashSet<Symbol>,\n     target: &Target,\n+    _is_clobber: bool,\n ) -> Result<(), &'static str> {\n     if target.os == \"android\"\n         || target.is_like_fuchsia"}, {"sha": "b2d5bb3736afd5f9ccbda039843034dd453de3f6", "filename": "compiler/rustc_target/src/asm/arm.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -66,10 +66,13 @@ fn frame_pointer_is_r7(target_features: &FxHashSet<Symbol>, target: &Target) ->\n }\n \n fn frame_pointer_r11(\n-    _arch: InlineAsmArch,\n+    arch: InlineAsmArch,\n     target_features: &FxHashSet<Symbol>,\n     target: &Target,\n+    is_clobber: bool,\n ) -> Result<(), &'static str> {\n+    not_thumb1(arch, target_features, target, is_clobber)?;\n+\n     if !frame_pointer_is_r7(target_features, target) {\n         Err(\"the frame pointer (r11) cannot be used as an operand for inline asm\")\n     } else {\n@@ -81,6 +84,7 @@ fn frame_pointer_r7(\n     _arch: InlineAsmArch,\n     target_features: &FxHashSet<Symbol>,\n     target: &Target,\n+    _is_clobber: bool,\n ) -> Result<(), &'static str> {\n     if frame_pointer_is_r7(target_features, target) {\n         Err(\"the frame pointer (r7) cannot be used as an operand for inline asm\")\n@@ -93,9 +97,13 @@ fn not_thumb1(\n     _arch: InlineAsmArch,\n     target_features: &FxHashSet<Symbol>,\n     _target: &Target,\n+    is_clobber: bool,\n ) -> Result<(), &'static str> {\n-    if target_features.contains(&sym::thumb_mode) && !target_features.contains(&sym::thumb2) {\n-        Err(\"high registers (r8+) cannot be used in Thumb-1 code\")\n+    if !is_clobber\n+        && target_features.contains(&sym::thumb_mode)\n+        && !target_features.contains(&sym::thumb2)\n+    {\n+        Err(\"high registers (r8+) can only be used as clobbers in Thumb-1 code\")\n     } else {\n         Ok(())\n     }\n@@ -105,8 +113,9 @@ fn reserved_r9(\n     arch: InlineAsmArch,\n     target_features: &FxHashSet<Symbol>,\n     target: &Target,\n+    is_clobber: bool,\n ) -> Result<(), &'static str> {\n-    not_thumb1(arch, target_features, target)?;\n+    not_thumb1(arch, target_features, target, is_clobber)?;\n \n     // We detect this using the reserved-r9 feature instead of using the target\n     // because the relocation model can be changed with compiler options."}, {"sha": "b4d982f3836be848253730555a726f5753082bb5", "filename": "compiler/rustc_target/src/asm/bpf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_target%2Fsrc%2Fasm%2Fbpf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_target%2Fsrc%2Fasm%2Fbpf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fbpf.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -47,6 +47,7 @@ fn only_alu32(\n     _arch: InlineAsmArch,\n     target_features: &FxHashSet<Symbol>,\n     _target: &Target,\n+    _is_clobber: bool,\n ) -> Result<(), &'static str> {\n     if !target_features.contains(&sym::alu32) {\n         Err(\"register can't be used without the `alu32` target feature\")"}, {"sha": "fd95b0338a6e14ebedee1d38e1227f09d328ca6e", "filename": "compiler/rustc_target/src/asm/mod.rs", "status": "modified", "additions": 71, "deletions": 37, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -83,12 +83,13 @@ macro_rules! def_regs {\n                 _arch: super::InlineAsmArch,\n                 _target_features: &rustc_data_structures::fx::FxHashSet<Symbol>,\n                 _target: &crate::spec::Target,\n+                _is_clobber: bool,\n                 name: &str,\n             ) -> Result<Self, &'static str> {\n                 match name {\n                     $(\n                         $($alias)|* | $reg_name => {\n-                            $($filter(_arch, _target_features, _target)?;)?\n+                            $($filter(_arch, _target_features, _target, _is_clobber)?;)?\n                             Ok(Self::$reg)\n                         }\n                     )*\n@@ -112,7 +113,7 @@ macro_rules! def_regs {\n             #[allow(unused_imports)]\n             use super::{InlineAsmReg, InlineAsmRegClass};\n             $(\n-                if $($filter(_arch, _target_features, _target).is_ok() &&)? true {\n+                if $($filter(_arch, _target_features, _target, false).is_ok() &&)? true {\n                     if let Some(set) = _map.get_mut(&InlineAsmRegClass::$arch($arch_regclass::$class)) {\n                         set.insert(InlineAsmReg::$arch($arch_reg::$reg));\n                     }\n@@ -298,54 +299,87 @@ impl InlineAsmReg {\n         arch: InlineAsmArch,\n         target_features: &FxHashSet<Symbol>,\n         target: &Target,\n+        is_clobber: bool,\n         name: Symbol,\n     ) -> Result<Self, &'static str> {\n         // FIXME: use direct symbol comparison for register names\n         // Use `Symbol::as_str` instead of `Symbol::with` here because `has_feature` may access `Symbol`.\n         let name = name.as_str();\n         Ok(match arch {\n             InlineAsmArch::X86 | InlineAsmArch::X86_64 => {\n-                Self::X86(X86InlineAsmReg::parse(arch, target_features, target, name)?)\n+                Self::X86(X86InlineAsmReg::parse(arch, target_features, target, is_clobber, name)?)\n             }\n             InlineAsmArch::Arm => {\n-                Self::Arm(ArmInlineAsmReg::parse(arch, target_features, target, name)?)\n-            }\n-            InlineAsmArch::AArch64 => {\n-                Self::AArch64(AArch64InlineAsmReg::parse(arch, target_features, target, name)?)\n-            }\n-            InlineAsmArch::RiscV32 | InlineAsmArch::RiscV64 => {\n-                Self::RiscV(RiscVInlineAsmReg::parse(arch, target_features, target, name)?)\n-            }\n-            InlineAsmArch::Nvptx64 => {\n-                Self::Nvptx(NvptxInlineAsmReg::parse(arch, target_features, target, name)?)\n-            }\n-            InlineAsmArch::PowerPC | InlineAsmArch::PowerPC64 => {\n-                Self::PowerPC(PowerPCInlineAsmReg::parse(arch, target_features, target, name)?)\n-            }\n-            InlineAsmArch::Hexagon => {\n-                Self::Hexagon(HexagonInlineAsmReg::parse(arch, target_features, target, name)?)\n-            }\n-            InlineAsmArch::Mips | InlineAsmArch::Mips64 => {\n-                Self::Mips(MipsInlineAsmReg::parse(arch, target_features, target, name)?)\n-            }\n-            InlineAsmArch::S390x => {\n-                Self::S390x(S390xInlineAsmReg::parse(arch, target_features, target, name)?)\n-            }\n-            InlineAsmArch::SpirV => {\n-                Self::SpirV(SpirVInlineAsmReg::parse(arch, target_features, target, name)?)\n-            }\n-            InlineAsmArch::Wasm32 | InlineAsmArch::Wasm64 => {\n-                Self::Wasm(WasmInlineAsmReg::parse(arch, target_features, target, name)?)\n+                Self::Arm(ArmInlineAsmReg::parse(arch, target_features, target, is_clobber, name)?)\n             }\n+            InlineAsmArch::AArch64 => Self::AArch64(AArch64InlineAsmReg::parse(\n+                arch,\n+                target_features,\n+                target,\n+                is_clobber,\n+                name,\n+            )?),\n+            InlineAsmArch::RiscV32 | InlineAsmArch::RiscV64 => Self::RiscV(\n+                RiscVInlineAsmReg::parse(arch, target_features, target, is_clobber, name)?,\n+            ),\n+            InlineAsmArch::Nvptx64 => Self::Nvptx(NvptxInlineAsmReg::parse(\n+                arch,\n+                target_features,\n+                target,\n+                is_clobber,\n+                name,\n+            )?),\n+            InlineAsmArch::PowerPC | InlineAsmArch::PowerPC64 => Self::PowerPC(\n+                PowerPCInlineAsmReg::parse(arch, target_features, target, is_clobber, name)?,\n+            ),\n+            InlineAsmArch::Hexagon => Self::Hexagon(HexagonInlineAsmReg::parse(\n+                arch,\n+                target_features,\n+                target,\n+                is_clobber,\n+                name,\n+            )?),\n+            InlineAsmArch::Mips | InlineAsmArch::Mips64 => Self::Mips(MipsInlineAsmReg::parse(\n+                arch,\n+                target_features,\n+                target,\n+                is_clobber,\n+                name,\n+            )?),\n+            InlineAsmArch::S390x => Self::S390x(S390xInlineAsmReg::parse(\n+                arch,\n+                target_features,\n+                target,\n+                is_clobber,\n+                name,\n+            )?),\n+            InlineAsmArch::SpirV => Self::SpirV(SpirVInlineAsmReg::parse(\n+                arch,\n+                target_features,\n+                target,\n+                is_clobber,\n+                name,\n+            )?),\n+            InlineAsmArch::Wasm32 | InlineAsmArch::Wasm64 => Self::Wasm(WasmInlineAsmReg::parse(\n+                arch,\n+                target_features,\n+                target,\n+                is_clobber,\n+                name,\n+            )?),\n             InlineAsmArch::Bpf => {\n-                Self::Bpf(BpfInlineAsmReg::parse(arch, target_features, target, name)?)\n+                Self::Bpf(BpfInlineAsmReg::parse(arch, target_features, target, is_clobber, name)?)\n             }\n             InlineAsmArch::Avr => {\n-                Self::Avr(AvrInlineAsmReg::parse(arch, target_features, target, name)?)\n-            }\n-            InlineAsmArch::Msp430 => {\n-                Self::Msp430(Msp430InlineAsmReg::parse(arch, target_features, target, name)?)\n+                Self::Avr(AvrInlineAsmReg::parse(arch, target_features, target, is_clobber, name)?)\n             }\n+            InlineAsmArch::Msp430 => Self::Msp430(Msp430InlineAsmReg::parse(\n+                arch,\n+                target_features,\n+                target,\n+                is_clobber,\n+                name,\n+            )?),\n         })\n     }\n \n@@ -844,7 +878,7 @@ impl InlineAsmClobberAbi {\n             },\n             InlineAsmArch::AArch64 => match name {\n                 \"C\" | \"system\" | \"efiapi\" => {\n-                    Ok(if aarch64::reserved_x18(arch, target_features, target).is_err() {\n+                    Ok(if aarch64::reserved_x18(arch, target_features, target, true).is_err() {\n                         InlineAsmClobberAbi::AArch64NoX18\n                     } else {\n                         InlineAsmClobberAbi::AArch64"}, {"sha": "e145ba8a16e6488d2d6779327285c99152fa9275", "filename": "compiler/rustc_target/src/asm/riscv.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_target%2Fsrc%2Fasm%2Friscv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_target%2Fsrc%2Fasm%2Friscv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Friscv.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -56,6 +56,7 @@ fn not_e(\n     _arch: InlineAsmArch,\n     target_features: &FxHashSet<Symbol>,\n     _target: &Target,\n+    _is_clobber: bool,\n ) -> Result<(), &'static str> {\n     if target_features.contains(&sym::e) {\n         Err(\"register can't be used with the `e` target feature\")"}, {"sha": "a8ee80ec4ea277131cdb086ade32ae0a9c851a8e", "filename": "compiler/rustc_target/src/asm/x86.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_target%2Fsrc%2Fasm%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_target%2Fsrc%2Fasm%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fx86.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -141,6 +141,7 @@ fn x86_64_only(\n     arch: InlineAsmArch,\n     _target_features: &FxHashSet<Symbol>,\n     _target: &Target,\n+    _is_clobber: bool,\n ) -> Result<(), &'static str> {\n     match arch {\n         InlineAsmArch::X86 => Err(\"register is only available on x86_64\"),\n@@ -153,6 +154,7 @@ fn high_byte(\n     arch: InlineAsmArch,\n     _target_features: &FxHashSet<Symbol>,\n     _target: &Target,\n+    _is_clobber: bool,\n ) -> Result<(), &'static str> {\n     match arch {\n         InlineAsmArch::X86_64 => Err(\"high byte registers cannot be used as an operand on x86_64\"),\n@@ -164,6 +166,7 @@ fn rbx_reserved(\n     arch: InlineAsmArch,\n     _target_features: &FxHashSet<Symbol>,\n     _target: &Target,\n+    _is_clobber: bool,\n ) -> Result<(), &'static str> {\n     match arch {\n         InlineAsmArch::X86 => Ok(()),\n@@ -178,6 +181,7 @@ fn esi_reserved(\n     arch: InlineAsmArch,\n     _target_features: &FxHashSet<Symbol>,\n     _target: &Target,\n+    _is_clobber: bool,\n ) -> Result<(), &'static str> {\n     match arch {\n         InlineAsmArch::X86 => {"}, {"sha": "5692925f63beb2057fe5841634de915cad2e0898", "filename": "compiler/rustc_target/src/spec/aarch64_linux_android.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_linux_android.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -14,7 +14,9 @@ pub fn target() -> Target {\n             // As documented in https://developer.android.com/ndk/guides/cpu-features.html\n             // the neon (ASIMD) and FP must exist on all android aarch64 targets.\n             features: \"+neon,+fp-armv8\".to_string(),\n-            supported_sanitizers: SanitizerSet::CFI | SanitizerSet::HWADDRESS,\n+            supported_sanitizers: SanitizerSet::CFI\n+                | SanitizerSet::HWADDRESS\n+                | SanitizerSet::MEMTAG,\n             ..super::android_base::opts()\n         },\n     }"}, {"sha": "974a5b84d1dc44ec56d6657428333ff44b5123cd", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -14,6 +14,7 @@ pub fn target() -> Target {\n                 | SanitizerSet::CFI\n                 | SanitizerSet::LEAK\n                 | SanitizerSet::MEMORY\n+                | SanitizerSet::MEMTAG\n                 | SanitizerSet::THREAD\n                 | SanitizerSet::HWADDRESS,\n             ..super::linux_gnu_base::opts()"}, {"sha": "5991cd8bfa90a8c68f330c38bb3c97539ad425a0", "filename": "compiler/rustc_target/src/spec/mips64_openwrt_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_openwrt_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_openwrt_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_openwrt_linux_musl.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -6,7 +6,7 @@ use crate::spec::{Target, TargetOptions};\n pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n     base.cpu = \"mips64r2\".to_string();\n-    base.features = \"+mips64r2\".to_string();\n+    base.features = \"+mips64r2,+soft-float\".to_string();\n     base.max_atomic_width = Some(64);\n     base.crt_static_default = false;\n "}, {"sha": "92678aed5b1a291dcc0fd808793f90e30e22668c", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -606,6 +606,7 @@ bitflags::bitflags! {\n         const THREAD  = 1 << 3;\n         const HWADDRESS = 1 << 4;\n         const CFI     = 1 << 5;\n+        const MEMTAG  = 1 << 6;\n     }\n }\n \n@@ -619,6 +620,7 @@ impl SanitizerSet {\n             SanitizerSet::CFI => \"cfi\",\n             SanitizerSet::LEAK => \"leak\",\n             SanitizerSet::MEMORY => \"memory\",\n+            SanitizerSet::MEMTAG => \"memtag\",\n             SanitizerSet::THREAD => \"thread\",\n             SanitizerSet::HWADDRESS => \"hwaddress\",\n             _ => return None,\n@@ -652,6 +654,7 @@ impl IntoIterator for SanitizerSet {\n             SanitizerSet::CFI,\n             SanitizerSet::LEAK,\n             SanitizerSet::MEMORY,\n+            SanitizerSet::MEMTAG,\n             SanitizerSet::THREAD,\n             SanitizerSet::HWADDRESS,\n         ]\n@@ -1883,6 +1886,7 @@ impl Target {\n                                 Some(\"cfi\") => SanitizerSet::CFI,\n                                 Some(\"leak\") => SanitizerSet::LEAK,\n                                 Some(\"memory\") => SanitizerSet::MEMORY,\n+                                Some(\"memtag\") => SanitizerSet::MEMTAG,\n                                 Some(\"thread\") => SanitizerSet::THREAD,\n                                 Some(\"hwaddress\") => SanitizerSet::HWADDRESS,\n                                 Some(s) => return Err(format!(\"unknown sanitizer {}\", s)),"}, {"sha": "dba24fb2f31b525f2fb779caa402145d461bf4cc", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 28, "deletions": 30, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -19,6 +19,7 @@ use super::{Normalized, NormalizedTy, ProjectionCacheEntry, ProjectionCacheKey};\n use crate::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use crate::infer::{InferCtxt, InferOk, LateBoundRegionConversionTime};\n use crate::traits::error_reporting::InferCtxtExt as _;\n+use crate::traits::select::ProjectionMatchesProjection;\n use rustc_data_structures::sso::SsoHashSet;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::ErrorReported;\n@@ -1075,16 +1076,6 @@ fn project<'cx, 'tcx>(\n         return Ok(Projected::Progress(Progress::error(selcx.tcx())));\n     }\n \n-    // If the obligation contains any inference types or consts in associated\n-    // type substs, then we don't assemble any candidates.\n-    // This isn't really correct, but otherwise we can end up in a case where\n-    // we constrain inference variables by selecting a single predicate, when\n-    // we need to stay general. See issue #91762.\n-    let (_, predicate_own_substs) = obligation.predicate.trait_ref_and_own_substs(selcx.tcx());\n-    if predicate_own_substs.iter().any(|g| g.has_infer_types_or_consts()) {\n-        return Err(ProjectionError::TooManyCandidates);\n-    }\n-\n     let mut candidates = ProjectionCandidateSet::None;\n \n     // Make sure that the following procedures are kept in order. ParamEnv\n@@ -1182,7 +1173,7 @@ fn assemble_candidates_from_trait_def<'cx, 'tcx>(\n         ProjectionCandidate::TraitDef,\n         bounds.iter(),\n         true,\n-    )\n+    );\n }\n \n /// In the case of a trait object like\n@@ -1247,28 +1238,35 @@ fn assemble_candidates_from_predicates<'cx, 'tcx>(\n         let bound_predicate = predicate.kind();\n         if let ty::PredicateKind::Projection(data) = predicate.kind().skip_binder() {\n             let data = bound_predicate.rebind(data);\n-            let same_def_id = data.projection_def_id() == obligation.predicate.item_def_id;\n-\n-            let is_match = same_def_id\n-                && infcx.probe(|_| {\n-                    selcx.match_projection_projections(\n-                        obligation,\n-                        data,\n-                        potentially_unnormalized_candidates,\n-                    )\n-                });\n+            if data.projection_def_id() != obligation.predicate.item_def_id {\n+                continue;\n+            }\n \n-            if is_match {\n-                candidate_set.push_candidate(ctor(data));\n+            let is_match = infcx.probe(|_| {\n+                selcx.match_projection_projections(\n+                    obligation,\n+                    data,\n+                    potentially_unnormalized_candidates,\n+                )\n+            });\n \n-                if potentially_unnormalized_candidates\n-                    && !obligation.predicate.has_infer_types_or_consts()\n-                {\n-                    // HACK: Pick the first trait def candidate for a fully\n-                    // inferred predicate. This is to allow duplicates that\n-                    // differ only in normalization.\n-                    return;\n+            match is_match {\n+                ProjectionMatchesProjection::Yes => {\n+                    candidate_set.push_candidate(ctor(data));\n+\n+                    if potentially_unnormalized_candidates\n+                        && !obligation.predicate.has_infer_types_or_consts()\n+                    {\n+                        // HACK: Pick the first trait def candidate for a fully\n+                        // inferred predicate. This is to allow duplicates that\n+                        // differ only in normalization.\n+                        return;\n+                    }\n+                }\n+                ProjectionMatchesProjection::Ambiguous => {\n+                    candidate_set.mark_ambiguous();\n                 }\n+                ProjectionMatchesProjection::No => {}\n             }\n         }\n     }"}, {"sha": "3b69700530b8504052f5fc0b96968c3860a9d8f6", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -1494,12 +1494,18 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         })\n     }\n \n+    /// Return `Yes` if the obligation's predicate type applies to the env_predicate, and\n+    /// `No` if it does not. Return `Ambiguous` in the case that the projection type is a GAT,\n+    /// and applying this env_predicate constrains any of the obligation's GAT substitutions.\n+    ///\n+    /// This behavior is a somewhat of a hack to prevent overconstraining inference variables\n+    /// in cases like #91762.\n     pub(super) fn match_projection_projections(\n         &mut self,\n         obligation: &ProjectionTyObligation<'tcx>,\n         env_predicate: PolyProjectionPredicate<'tcx>,\n         potentially_unnormalized_candidates: bool,\n-    ) -> bool {\n+    ) -> ProjectionMatchesProjection {\n         let mut nested_obligations = Vec::new();\n         let (infer_predicate, _) = self.infcx.replace_bound_vars_with_fresh_vars(\n             obligation.cause.span,\n@@ -1521,7 +1527,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             infer_predicate.projection_ty\n         };\n \n-        self.infcx\n+        let is_match = self\n+            .infcx\n             .at(&obligation.cause, obligation.param_env)\n             .sup(obligation.predicate, infer_projection)\n             .map_or(false, |InferOk { obligations, value: () }| {\n@@ -1530,7 +1537,26 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     nested_obligations.into_iter().chain(obligations),\n                 )\n                 .map_or(false, |res| res.may_apply())\n-            })\n+            });\n+\n+        if is_match {\n+            let generics = self.tcx().generics_of(obligation.predicate.item_def_id);\n+            // FIXME(generic-associated-types): Addresses aggressive inference in #92917.\n+            // If this type is a GAT, and of the GAT substs resolve to something new,\n+            // that means that we must have newly inferred something about the GAT.\n+            // We should give up in that case.\n+            if !generics.params.is_empty()\n+                && obligation.predicate.substs[generics.parent_count..]\n+                    .iter()\n+                    .any(|&p| p.has_infer_types_or_consts() && self.infcx.shallow_resolve(p) != p)\n+            {\n+                ProjectionMatchesProjection::Ambiguous\n+            } else {\n+                ProjectionMatchesProjection::Yes\n+            }\n+        } else {\n+            ProjectionMatchesProjection::No\n+        }\n     }\n \n     ///////////////////////////////////////////////////////////////////////////\n@@ -2709,3 +2735,9 @@ impl<'o, 'tcx> fmt::Debug for TraitObligationStack<'o, 'tcx> {\n         write!(f, \"TraitObligationStack({:?})\", self.obligation)\n     }\n }\n+\n+pub enum ProjectionMatchesProjection {\n+    Yes,\n+    Ambiguous,\n+    No,\n+}"}, {"sha": "f9c482713f1fec8041d587fb338224438e125feb", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 115, "deletions": 1, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -8,8 +8,12 @@ use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind};\n use rustc_hir::lang_items::LangItem;\n-use rustc_hir::{Expr, ExprKind, ItemKind, Node, Path, QPath, Stmt, StmtKind, TyKind};\n+use rustc_hir::{\n+    Expr, ExprKind, GenericBound, ItemKind, Node, Path, QPath, Stmt, StmtKind, TyKind,\n+    WherePredicate,\n+};\n use rustc_infer::infer::{self, TyCtxtInferExt};\n+\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, Binder, Ty};\n use rustc_span::symbol::{kw, sym};\n@@ -559,13 +563,123 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let ty = self.tcx.erase_late_bound_regions(ty);\n                 if self.can_coerce(expected, ty) {\n                     err.span_label(sp, format!(\"expected `{}` because of return type\", expected));\n+                    self.try_suggest_return_impl_trait(err, expected, ty, fn_id);\n                     return true;\n                 }\n                 false\n             }\n         }\n     }\n \n+    /// check whether the return type is a generic type with a trait bound\n+    /// only suggest this if the generic param is not present in the arguments\n+    /// if this is true, hint them towards changing the return type to `impl Trait`\n+    /// ```\n+    /// fn cant_name_it<T: Fn() -> u32>() -> T {\n+    ///     || 3\n+    /// }\n+    /// ```\n+    fn try_suggest_return_impl_trait(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        expected: Ty<'tcx>,\n+        found: Ty<'tcx>,\n+        fn_id: hir::HirId,\n+    ) {\n+        // Only apply the suggestion if:\n+        //  - the return type is a generic parameter\n+        //  - the generic param is not used as a fn param\n+        //  - the generic param has at least one bound\n+        //  - the generic param doesn't appear in any other bounds where it's not the Self type\n+        // Suggest:\n+        //  - Changing the return type to be `impl <all bounds>`\n+\n+        debug!(\"try_suggest_return_impl_trait, expected = {:?}, found = {:?}\", expected, found);\n+\n+        let ty::Param(expected_ty_as_param) = expected.kind() else { return };\n+\n+        let fn_node = self.tcx.hir().find(fn_id);\n+\n+        let Some(hir::Node::Item(hir::Item {\n+            kind:\n+                hir::ItemKind::Fn(\n+                    hir::FnSig { decl: hir::FnDecl { inputs: fn_parameters, output: fn_return, .. }, .. },\n+                    hir::Generics { params, where_clause, .. },\n+                    _body_id,\n+                ),\n+            ..\n+        })) = fn_node else { return };\n+\n+        let Some(expected_generic_param) = params.get(expected_ty_as_param.index as usize) else { return };\n+\n+        // get all where BoundPredicates here, because they are used in to cases below\n+        let where_predicates = where_clause\n+            .predicates\n+            .iter()\n+            .filter_map(|p| match p {\n+                WherePredicate::BoundPredicate(hir::WhereBoundPredicate {\n+                    bounds,\n+                    bounded_ty,\n+                    ..\n+                }) => {\n+                    // FIXME: Maybe these calls to `ast_ty_to_ty` can be removed (and the ones below)\n+                    let ty = <dyn AstConv<'_>>::ast_ty_to_ty(self, bounded_ty);\n+                    Some((ty, bounds))\n+                }\n+                _ => None,\n+            })\n+            .map(|(ty, bounds)| match ty.kind() {\n+                ty::Param(param_ty) if param_ty == expected_ty_as_param => Ok(Some(bounds)),\n+                // check whether there is any predicate that contains our `T`, like `Option<T>: Send`\n+                _ => match ty.contains(expected) {\n+                    true => Err(()),\n+                    false => Ok(None),\n+                },\n+            })\n+            .collect::<Result<Vec<_>, _>>();\n+\n+        let Ok(where_predicates) =  where_predicates else { return };\n+\n+        // now get all predicates in the same types as the where bounds, so we can chain them\n+        let predicates_from_where =\n+            where_predicates.iter().flatten().map(|bounds| bounds.iter()).flatten();\n+\n+        // extract all bounds from the source code using their spans\n+        let all_matching_bounds_strs = expected_generic_param\n+            .bounds\n+            .iter()\n+            .chain(predicates_from_where)\n+            .filter_map(|bound| match bound {\n+                GenericBound::Trait(_, _) => {\n+                    self.tcx.sess.source_map().span_to_snippet(bound.span()).ok()\n+                }\n+                _ => None,\n+            })\n+            .collect::<Vec<String>>();\n+\n+        if all_matching_bounds_strs.len() == 0 {\n+            return;\n+        }\n+\n+        let all_bounds_str = all_matching_bounds_strs.join(\" + \");\n+\n+        let ty_param_used_in_fn_params = fn_parameters.iter().any(|param| {\n+                let ty = <dyn AstConv<'_>>::ast_ty_to_ty(self, param);\n+                matches!(ty.kind(), ty::Param(fn_param_ty_param) if expected_ty_as_param == fn_param_ty_param)\n+            });\n+\n+        if ty_param_used_in_fn_params {\n+            return;\n+        }\n+\n+        err.span_suggestion(\n+            fn_return.span(),\n+            \"consider using an impl return type\",\n+            format!(\"impl {}\", all_bounds_str),\n+            Applicability::MaybeIncorrect,\n+        );\n+    }\n+\n     pub(in super::super) fn suggest_missing_break_or_return_expr(\n         &self,\n         err: &mut DiagnosticBuilder<'_>,"}, {"sha": "18f54eb2246bcd8c9683e2e6c248548acf39c85f", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -3009,14 +3009,16 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n                         codegen_fn_attrs.no_sanitize |= SanitizerSet::CFI;\n                     } else if item.has_name(sym::memory) {\n                         codegen_fn_attrs.no_sanitize |= SanitizerSet::MEMORY;\n+                    } else if item.has_name(sym::memtag) {\n+                        codegen_fn_attrs.no_sanitize |= SanitizerSet::MEMTAG;\n                     } else if item.has_name(sym::thread) {\n                         codegen_fn_attrs.no_sanitize |= SanitizerSet::THREAD;\n                     } else if item.has_name(sym::hwaddress) {\n                         codegen_fn_attrs.no_sanitize |= SanitizerSet::HWADDRESS;\n                     } else {\n                         tcx.sess\n                             .struct_span_err(item.span(), \"invalid argument for `no_sanitize`\")\n-                            .note(\"expected one of: `address`, `hwaddress`, `memory` or `thread`\")\n+                            .note(\"expected one of: `address`, `cfi`, `hwaddress`, `memory`, `memtag`, or `thread`\")\n                             .emit();\n                     }\n                 }"}, {"sha": "a2cbee4dcf07b7ad8d665fb31417479c8c77e952", "filename": "library/std/src/sys/solid/fs.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Ffs.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -289,7 +289,26 @@ impl OpenOptions {\n }\n \n fn cstr(path: &Path) -> io::Result<CString> {\n-    Ok(CString::new(path.as_os_str().as_bytes())?)\n+    let path = path.as_os_str().as_bytes();\n+\n+    if !path.starts_with(br\"\\\") {\n+        // Relative paths aren't supported\n+        return Err(crate::io::const_io_error!(\n+            crate::io::ErrorKind::Unsupported,\n+            \"relative path is not supported on this platform\",\n+        ));\n+    }\n+\n+    // Apply the thread-safety wrapper\n+    const SAFE_PREFIX: &[u8] = br\"\\TS\";\n+    let wrapped_path = [SAFE_PREFIX, &path, &[0]].concat();\n+\n+    CString::from_vec_with_nul(wrapped_path).map_err(|_| {\n+        crate::io::const_io_error!(\n+            io::ErrorKind::InvalidInput,\n+            \"path provided contains a nul byte\",\n+        )\n+    })\n }\n \n impl File {"}, {"sha": "c7fd5ed6fcb2ed28d2bd217e35a94928c8326d7d", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -509,3 +509,6 @@ reverse-dependency like `examples/ex.rs` is given to rustdoc with the target\n crate being documented (`foobar`) and a path to output the calls\n (`output.calls`). Then, the generated calls file can be passed via\n `--with-examples` to the subsequent documentation of `foobar`.\n+\n+To scrape examples from test code, e.g. functions marked `#[test]`, then\n+add the `--scrape-tests` flag."}, {"sha": "457851b0cc7a42945fd4b6d28224297c6d25ad4f", "filename": "src/doc/unstable-book/src/compiler-flags/sanitizer.md", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -16,11 +16,13 @@ This feature allows for use of one of following sanitizers:\n   AddressSanitizer, but based on partial hardware assistance.\n * [LeakSanitizer][clang-lsan] a run-time memory leak detector.\n * [MemorySanitizer][clang-msan] a detector of uninitialized reads.\n+* [MemTagSanitizer][clang-memtag] fast memory error detector based on\n+  Armv8.5-A Memory Tagging Extension.\n * [ThreadSanitizer][clang-tsan] a fast data race detector.\n \n To enable a sanitizer compile with `-Zsanitizer=address`,`-Zsanitizer=cfi`,\n-`-Zsanitizer=hwaddress`, `-Zsanitizer=leak`, `-Zsanitizer=memory` or\n-`-Zsanitizer=thread`.\n+`-Zsanitizer=hwaddress`, `-Zsanitizer=leak`, `-Zsanitizer=memory`,\n+`-Zsanitizer=memtag`, or `-Zsanitizer=thread`.\n \n # AddressSanitizer\n \n@@ -494,6 +496,20 @@ $ cargo run -Zbuild-std --target x86_64-unknown-linux-gnu\n     #0 0x560c04b2bc50 in memory::main::hd2333c1899d997f5 $CWD/src/main.rs:3\n ```\n \n+# MemTagSanitizer\n+\n+MemTagSanitizer detects a similar class of errors as AddressSanitizer and HardwareAddressSanitizer, but with lower overhead suitable for use as hardening for production binaries.\n+\n+MemTagSanitizer is supported on the following targets:\n+\n+* `aarch64-linux-android`\n+* `aarch64-unknown-linux-gnu`\n+\n+MemTagSanitizer requires hardware support and the `mte` target feature.\n+To enable this target feature compile with `-C target-feature=\"+mte\"`.\n+\n+More information can be found in the associated [LLVM documentation](https://llvm.org/docs/MemTagSanitizer.html).\n+\n # ThreadSanitizer\n \n ThreadSanitizer is a data race detection tool. It is supported on the following"}, {"sha": "c2f6f7aea757e4ef3fdef947f8a1154d402d9233", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -200,6 +200,7 @@ crate fn create_config(\n         lint_opts,\n         describe_lints,\n         lint_cap,\n+        scrape_examples_options,\n         ..\n     }: RustdocOptions,\n ) -> rustc_interface::Config {\n@@ -227,6 +228,7 @@ crate fn create_config(\n \n     let crate_types =\n         if proc_macro_crate { vec![CrateType::ProcMacro] } else { vec![CrateType::Rlib] };\n+    let test = scrape_examples_options.map(|opts| opts.scrape_tests).unwrap_or(false);\n     // plays with error output here!\n     let sessopts = config::Options {\n         maybe_sysroot,\n@@ -244,12 +246,14 @@ crate fn create_config(\n         edition,\n         describe_lints,\n         crate_name,\n+        test,\n         ..Options::default()\n     };\n \n     interface::Config {\n         opts: sessopts,\n         crate_cfg: interface::parse_cfgspecs(cfgs),\n+        crate_check_cfg: interface::parse_check_cfg(vec![]),\n         input,\n         input_path: cpath,\n         output_file: None,"}, {"sha": "696397c5f671babc6297e3eca632e576c6bdc99c", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -91,6 +91,7 @@ crate fn run(options: RustdocOptions) -> Result<(), ErrorReported> {\n     let config = interface::Config {\n         opts: sessopts,\n         crate_cfg: interface::parse_cfgspecs(cfgs),\n+        crate_check_cfg: interface::parse_check_cfg(vec![]),\n         input,\n         input_path: None,\n         output_file: None,"}, {"sha": "7eff725989cc9872542ecbe4ab7b077143ff8388", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -596,6 +596,9 @@ fn opts() -> Vec<RustcOptGroup> {\n                 \"collect function call information for functions from the target crate\",\n             )\n         }),\n+        unstable(\"scrape-tests\", |o| {\n+            o.optflag(\"\", \"scrape-tests\", \"Include test code when scraping examples\")\n+        }),\n         unstable(\"with-examples\", |o| {\n             o.optmulti(\n                 \"\","}, {"sha": "7cf0ea9e84e4e188b82b0120160abab78d3e4777", "filename": "src/librustdoc/scrape_examples.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Flibrustdoc%2Fscrape_examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Flibrustdoc%2Fscrape_examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fscrape_examples.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -34,6 +34,7 @@ use std::path::PathBuf;\n crate struct ScrapeExamplesOptions {\n     output_path: PathBuf,\n     target_crates: Vec<String>,\n+    crate scrape_tests: bool,\n }\n \n impl ScrapeExamplesOptions {\n@@ -43,16 +44,22 @@ impl ScrapeExamplesOptions {\n     ) -> Result<Option<Self>, i32> {\n         let output_path = matches.opt_str(\"scrape-examples-output-path\");\n         let target_crates = matches.opt_strs(\"scrape-examples-target-crate\");\n-        match (output_path, !target_crates.is_empty()) {\n-            (Some(output_path), true) => Ok(Some(ScrapeExamplesOptions {\n+        let scrape_tests = matches.opt_present(\"scrape-tests\");\n+        match (output_path, !target_crates.is_empty(), scrape_tests) {\n+            (Some(output_path), true, _) => Ok(Some(ScrapeExamplesOptions {\n                 output_path: PathBuf::from(output_path),\n                 target_crates,\n+                scrape_tests,\n             })),\n-            (Some(_), false) | (None, true) => {\n+            (Some(_), false, _) | (None, true, _) => {\n                 diag.err(\"must use --scrape-examples-output-path and --scrape-examples-target-crate together\");\n                 Err(1)\n             }\n-            (None, false) => Ok(None),\n+            (None, false, true) => {\n+                diag.err(\"must use --scrape-examples-output-path and --scrape-examples-target-crate with --scrape-tests\");\n+                Err(1)\n+            }\n+            (None, false, false) => Ok(None),\n         }\n     }\n }"}, {"sha": "2fd362656d4b7dd3505e870392f7d1ad0315c431", "filename": "src/test/codegen/sanitizer_memtag_attr_check.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fcodegen%2Fsanitizer_memtag_attr_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fcodegen%2Fsanitizer_memtag_attr_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsanitizer_memtag_attr_check.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -0,0 +1,12 @@\n+// This tests that the sanitize_memtag attribute is\n+// applied when enabling the memtag sanitizer.\n+//\n+// needs-sanitizer-memtag\n+// compile-flags: -Zsanitizer=memtag -Ctarget-feature=+mte\n+\n+#![crate_type = \"lib\"]\n+\n+// CHECK: ; Function Attrs:{{.*}}sanitize_memtag\n+pub fn tagged() {}\n+\n+// CHECK: attributes #0 = {{.*}}sanitize_memtag"}, {"sha": "fd294b018afa660afa25b96b8d54e70527b34076", "filename": "src/test/run-make-fulldeps/issue-19371/foo.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -49,6 +49,7 @@ fn compile(code: String, output: PathBuf, sysroot: PathBuf) {\n     let config = interface::Config {\n         opts,\n         crate_cfg: Default::default(),\n+        crate_check_cfg: Default::default(),\n         input,\n         input_path: None,\n         output_file: Some(output),"}, {"sha": "d49b6c1f290cb1633ada9884640851b88530ed2c", "filename": "src/test/run-make/rustdoc-scrape-examples-multiple/scrape.mk", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-multiple%2Fscrape.mk", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-multiple%2Fscrape.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-multiple%2Fscrape.mk?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -7,7 +7,8 @@ $(TMPDIR)/%.calls: $(TMPDIR)/libfoobar.rmeta\n \t  --extern foobar=$(TMPDIR)/libfoobar.rmeta \\\n \t\t-Z unstable-options \\\n \t\t--scrape-examples-output-path $@ \\\n-\t\t--scrape-examples-target-crate foobar\n+\t\t--scrape-examples-target-crate foobar \\\n+\t\t$(extra_flags)\n \n $(TMPDIR)/lib%.rmeta: src/lib.rs\n \t$(RUSTC) src/lib.rs --crate-name $* --crate-type lib --emit=metadata"}, {"sha": "9f80a8d96022f457c3b99069b168bfba5940c606", "filename": "src/test/run-make/rustdoc-scrape-examples-test/Makefile", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-test%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-test%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-test%2FMakefile?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -0,0 +1,6 @@\n+extra_flags := --scrape-tests\n+deps := ex\n+\n+-include ../rustdoc-scrape-examples-multiple/scrape.mk\n+\n+all: scrape"}, {"sha": "d1a9a74e7825c55985e6d2a8d0c47831a2d1e789", "filename": "src/test/run-make/rustdoc-scrape-examples-test/examples/ex.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-test%2Fexamples%2Fex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-test%2Fexamples%2Fex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-test%2Fexamples%2Fex.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -0,0 +1,6 @@\n+fn main() {}\n+\n+#[test]\n+fn a_test() {\n+  foobar::ok();\n+}"}, {"sha": "22be1ad41010f93a6fb64e3756df9927618511eb", "filename": "src/test/run-make/rustdoc-scrape-examples-test/src/lib.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-test%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-test%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-test%2Fsrc%2Flib.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -0,0 +1,3 @@\n+// @has foobar/fn.ok.html '//*[@class=\"docblock scraped-example-list\"]' ''\n+\n+pub fn ok() {}"}, {"sha": "046ff0364e2716081e4ebd0f0dce900d03af5f71", "filename": "src/test/ui/check-cfg/empty-names.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fcheck-cfg%2Fempty-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fcheck-cfg%2Fempty-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fempty-names.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -0,0 +1,10 @@\n+// Check warning for unexpected cfg\n+//\n+// check-pass\n+// compile-flags: --check-cfg=names() -Z unstable-options\n+\n+#[cfg(unknown_key = \"value\")]\n+//~^ WARNING unexpected `cfg` condition name\n+pub fn f() {}\n+\n+fn main() {}"}, {"sha": "f926d1133cced3e50d7cb6d86bf2af3941644b7b", "filename": "src/test/ui/check-cfg/empty-names.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fcheck-cfg%2Fempty-names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fcheck-cfg%2Fempty-names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fempty-names.stderr?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -0,0 +1,10 @@\n+warning: unexpected `cfg` condition name\n+  --> $DIR/empty-names.rs:6:7\n+   |\n+LL | #[cfg(unknown_key = \"value\")]\n+   |       ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(unexpected_cfgs)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "38ef9e51c7a1f58f4f19d094d875b8a30fb9358d", "filename": "src/test/ui/check-cfg/empty-values.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fcheck-cfg%2Fempty-values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fcheck-cfg%2Fempty-values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fempty-values.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -0,0 +1,6 @@\n+// Check that a an empty values() is rejected\n+//\n+// check-fail\n+// compile-flags: --check-cfg=values() -Z unstable-options\n+\n+fn main() {}"}, {"sha": "106d5b7b47f9bec61c11562793d3723c597a3c68", "filename": "src/test/ui/check-cfg/empty-values.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fcheck-cfg%2Fempty-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fcheck-cfg%2Fempty-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fempty-values.stderr?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -0,0 +1,2 @@\n+error: invalid `--check-cfg` argument: `values()` (expected `names(name1, name2, ... nameN)` or `values(name, \"value1\", \"value2\", ... \"valueN\")`)\n+"}, {"sha": "850924d993ac940946382e184f6dcb2486351ab0", "filename": "src/test/ui/check-cfg/invalid-arguments.anything_else.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-arguments.anything_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-arguments.anything_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-arguments.anything_else.stderr?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -0,0 +1,2 @@\n+error: invalid `--check-cfg` argument: `anything_else(...)` (expected `names(name1, name2, ... nameN)` or `values(name, \"value1\", \"value2\", ... \"valueN\")`)\n+"}, {"sha": "bdfbc3d54a2c58ec3d8af494a8d5751132cabcc9", "filename": "src/test/ui/check-cfg/invalid-arguments.names_simple_ident.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-arguments.names_simple_ident.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-arguments.names_simple_ident.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-arguments.names_simple_ident.stderr?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -0,0 +1,2 @@\n+error: invalid `--check-cfg` argument: `names(\"NOT_IDENT\")` (`names()` arguments must be simple identifers)\n+"}, {"sha": "5090ce3e845d368934d54b06763e6b4fce71f6fb", "filename": "src/test/ui/check-cfg/invalid-arguments.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-arguments.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -0,0 +1,10 @@\n+// Check that invalid --check-cfg are rejected\n+//\n+// check-fail\n+// revisions: anything_else names_simple_ident values_simple_ident values_string_literals\n+// [anything_else]compile-flags: -Z unstable-options --check-cfg=anything_else(...)\n+// [names_simple_ident]compile-flags: -Z unstable-options --check-cfg=names(\"NOT_IDENT\")\n+// [values_simple_ident]compile-flags: -Z unstable-options --check-cfg=values(\"NOT_IDENT\")\n+// [values_string_literals]compile-flags: -Z unstable-options --check-cfg=values(test,12)\n+\n+fn main() {}"}, {"sha": "b25882baaf3e634d135217138a34a074b588297f", "filename": "src/test/ui/check-cfg/invalid-arguments.values_simple_ident.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-arguments.values_simple_ident.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-arguments.values_simple_ident.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-arguments.values_simple_ident.stderr?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -0,0 +1,2 @@\n+error: invalid `--check-cfg` argument: `values(\"NOT_IDENT\")` (`values()` first argument must be a simple identifer)\n+"}, {"sha": "5853b4741a6422e8551ec8056449ff5a3032d04c", "filename": "src/test/ui/check-cfg/invalid-arguments.values_string_literals.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-arguments.values_string_literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-arguments.values_string_literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-arguments.values_string_literals.stderr?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -0,0 +1,2 @@\n+error: invalid `--check-cfg` argument: `values(test,12)` (`values()` arguments must be string literals)\n+"}, {"sha": "8499d3d4448da583454bdba3f996aceed2a19a57", "filename": "src/test/ui/check-cfg/invalid-cfg-name.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-name.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -0,0 +1,14 @@\n+// Check warning for invalid configuration name\n+//\n+// edition:2018\n+// check-pass\n+// compile-flags: --check-cfg=names() -Z unstable-options\n+\n+#[cfg(widnows)]\n+//~^ WARNING unexpected `cfg` condition name\n+pub fn f() {}\n+\n+#[cfg(windows)]\n+pub fn g() {}\n+\n+pub fn main() {}"}, {"sha": "2587685afa048a66ed27f66973ecfbb01a13fed0", "filename": "src/test/ui/check-cfg/invalid-cfg-name.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-name.stderr?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -0,0 +1,10 @@\n+warning: unexpected `cfg` condition name\n+  --> $DIR/invalid-cfg-name.rs:7:7\n+   |\n+LL | #[cfg(widnows)]\n+   |       ^^^^^^^\n+   |\n+   = note: `#[warn(unexpected_cfgs)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "a60095a5aae9dd7e564663b5b44c4f1626f53f0f", "filename": "src/test/ui/check-cfg/invalid-cfg-value.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-value.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -0,0 +1,17 @@\n+// Check warning for invalid configuration value\n+//\n+// edition:2018\n+// check-pass\n+// compile-flags: --check-cfg=values(feature,\"serde\",\"full\") --cfg=feature=\"rand\" -Z unstable-options\n+\n+#[cfg(feature = \"sedre\")]\n+//~^ WARNING unexpected `cfg` condition value\n+pub fn f() {}\n+\n+#[cfg(feature = \"serde\")]\n+pub fn g() {}\n+\n+#[cfg(feature = \"rand\")]\n+pub fn h() {}\n+\n+pub fn main() {}"}, {"sha": "c591d8474a26146a0ece257f3a6a65c302f70685", "filename": "src/test/ui/check-cfg/invalid-cfg-value.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-value.stderr?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -0,0 +1,10 @@\n+warning: unexpected `cfg` condition value\n+  --> $DIR/invalid-cfg-value.rs:7:7\n+   |\n+LL | #[cfg(feature = \"sedre\")]\n+   |       ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(unexpected_cfgs)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "a93fb7977131db566a8164941ea206565bcb3973", "filename": "src/test/ui/feature-gates/feature-gate-associated_type_bounds.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -57,20 +57,20 @@ fn _rpit_dyn() -> Box<dyn Tr1<As1: Copy>> { Box::new(S1) }\n \n const _cdef: impl Tr1<As1: Copy> = S1;\n //~^ ERROR associated type bounds are unstable\n-//~| ERROR `impl Trait` not allowed outside of function and method return types [E0562]\n+//~| ERROR `impl Trait` only allowed in function and inherent method return types\n // FIXME: uncomment when `impl_trait_in_bindings` feature is fixed.\n // const _cdef_dyn: &dyn Tr1<As1: Copy> = &S1;\n \n static _sdef: impl Tr1<As1: Copy> = S1;\n //~^ ERROR associated type bounds are unstable\n-//~| ERROR `impl Trait` not allowed outside of function and method return types [E0562]\n+//~| ERROR `impl Trait` only allowed in function and inherent method return types\n // FIXME: uncomment when `impl_trait_in_bindings` feature is fixed.\n // static _sdef_dyn: &dyn Tr1<As1: Copy> = &S1;\n \n fn main() {\n     let _: impl Tr1<As1: Copy> = S1;\n     //~^ ERROR associated type bounds are unstable\n-    //~| ERROR `impl Trait` not allowed outside of function and method return types [E0562]\n+    //~| ERROR `impl Trait` only allowed in function and inherent method return types\n     // FIXME: uncomment when `impl_trait_in_bindings` feature is fixed.\n     // let _: &dyn Tr1<As1: Copy> = &S1;\n }"}, {"sha": "5be1d97a059853d0bd9c9ea432608cd2e297d1dc", "filename": "src/test/ui/feature-gates/feature-gate-associated_type_bounds.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -115,19 +115,19 @@ LL |     let _: impl Tr1<As1: Copy> = S1;\n    = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n   --> $DIR/feature-gate-associated_type_bounds.rs:58:14\n    |\n LL | const _cdef: impl Tr1<As1: Copy> = S1;\n    |              ^^^^^^^^^^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n   --> $DIR/feature-gate-associated_type_bounds.rs:64:15\n    |\n LL | static _sdef: impl Tr1<As1: Copy> = S1;\n    |               ^^^^^^^^^^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n   --> $DIR/feature-gate-associated_type_bounds.rs:71:12\n    |\n LL |     let _: impl Tr1<As1: Copy> = S1;"}, {"sha": "4012a3b04b522d6dce854a66dd54d152400e67bf", "filename": "src/test/ui/feature-gates/feature-gate-check-cfg.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-check-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-check-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-check-cfg.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -0,0 +1,3 @@\n+// compile-flags: --check-cfg \"names()\"\n+\n+fn main() {}"}, {"sha": "9b27c2bc058a73760e18439b943d0d8bd1b74577", "filename": "src/test/ui/feature-gates/feature-gate-check-cfg.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-check-cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-check-cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-check-cfg.stderr?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -0,0 +1,2 @@\n+error: the `-Z unstable-options` flag must also be passed to enable the flag `check-cfg`\n+"}, {"sha": "a637da6cf6fa778a9ceddb57aaf61b1530dbb4d8", "filename": "src/test/ui/generic-associated-types/bugs/issue-80626.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-80626.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-80626.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-80626.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -1,4 +1,5 @@\n // check-fail\n+// known-bug\n \n // This should pass, but it requires `Sized` to be coinductive.\n \n@@ -11,7 +12,6 @@ trait Allocator {\n enum LinkedList<A: Allocator> {\n     Head,\n     Next(A::Allocated<Self>)\n-    //~^ overflow\n }\n \n fn main() {}"}, {"sha": "8b0cc78e9994964889441231f0d895f04ff57776", "filename": "src/test/ui/generic-associated-types/bugs/issue-80626.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-80626.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-80626.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-80626.stderr?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -1,5 +1,5 @@\n error[E0275]: overflow evaluating the requirement `LinkedList<A>: Sized`\n-  --> $DIR/issue-80626.rs:13:10\n+  --> $DIR/issue-80626.rs:14:10\n    |\n LL |     Next(A::Allocated<Self>)\n    |          ^^^^^^^^^^^^^^^^^^"}, {"sha": "68cd0fd7efce0ffe0ca242ad0d89a96eac05a01f", "filename": "src/test/ui/generic-associated-types/bugs/issue-86218.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-86218.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-86218.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-86218.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -1,4 +1,5 @@\n // check-fail\n+// known-bug\n \n // This should pass, but seems to run into a TAIT issue.\n \n@@ -20,7 +21,6 @@ trait Yay<AdditionalValue> {\n \n impl<'a> Yay<&'a ()> for () {\n     type InnerStream<'s> = impl Stream<Item = i32> + 's;\n-    //~^ the type\n     fn foo<'s>() -> Self::InnerStream<'s> { todo!() }\n }\n "}, {"sha": "98a5f4254bb1b9f5c33a36c7090e9de2dc47002a", "filename": "src/test/ui/generic-associated-types/bugs/issue-86218.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-86218.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-86218.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-86218.stderr?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -1,11 +1,11 @@\n error[E0477]: the type `impl Stream<Item = i32>` does not fulfill the required lifetime\n-  --> $DIR/issue-86218.rs:22:28\n+  --> $DIR/issue-86218.rs:23:28\n    |\n LL |     type InnerStream<'s> = impl Stream<Item = i32> + 's;\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: type must outlive the lifetime `'s` as defined here as required by this binding\n-  --> $DIR/issue-86218.rs:22:22\n+  --> $DIR/issue-86218.rs:23:22\n    |\n LL |     type InnerStream<'s> = impl Stream<Item = i32> + 's;\n    |                      ^^"}, {"sha": "6d6063f8085ba5bc253de9560b41dc797c448363", "filename": "src/test/ui/generic-associated-types/bugs/issue-87735.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87735.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87735.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87735.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -1,4 +1,5 @@\n // check-fail\n+// known-bug\n \n // This should pass, but we need an extension of implied bounds (probably).\n \n@@ -23,7 +24,7 @@ struct Foo<T>(T);\n #[derive(Debug)]\n struct FooRef<'a, U>(&'a [U]);\n \n-impl<'b, T, U> AsRef2 for Foo<T> //~ the type parameter\n+impl<'b, T, U> AsRef2 for Foo<T>\n where\n     // * `for<'b, 'c> T: AsRef2<Output<'b> = &'c [U]>>` does not work\n     //"}, {"sha": "0a18b5f0cbdaaa0b77d09901c869fac18cbea8e6", "filename": "src/test/ui/generic-associated-types/bugs/issue-87735.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87735.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87735.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87735.stderr?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -1,5 +1,5 @@\n error[E0207]: the type parameter `U` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-87735.rs:26:13\n+  --> $DIR/issue-87735.rs:27:13\n    |\n LL | impl<'b, T, U> AsRef2 for Foo<T>\n    |             ^ unconstrained type parameter"}, {"sha": "ffcfd62cbb3be48c6e81f62c6d0ac008487d3a6c", "filename": "src/test/ui/generic-associated-types/bugs/issue-87748.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87748.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87748.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87748.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -1,4 +1,5 @@\n // check-fail\n+// known-bug\n \n // This should pass, but unnormalized input args aren't treated as implied.\n \n@@ -14,7 +15,7 @@ struct Foo;\n impl MyTrait for Foo {\n     type Assoc<'a, 'b> where 'b: 'a = u32;\n \n-    fn do_sth(_: u32) {} //~ lifetime bound\n+    fn do_sth(_: u32) {}\n     // fn do_sth(_: Self::Assoc<'static, 'static>) {}\n     // fn do_sth(_: Self::Assoc<'_, '_>) {}\n }"}, {"sha": "60bb48efbc89504a0244dad0e17865b508cf158a", "filename": "src/test/ui/generic-associated-types/bugs/issue-87748.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87748.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87748.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87748.stderr?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -1,16 +1,16 @@\n error[E0478]: lifetime bound not satisfied\n-  --> $DIR/issue-87748.rs:17:5\n+  --> $DIR/issue-87748.rs:18:5\n    |\n LL |     fn do_sth(_: u32) {}\n    |     ^^^^^^^^^^^^^^^^^\n    |\n note: lifetime parameter instantiated with the anonymous lifetime #2 defined here\n-  --> $DIR/issue-87748.rs:17:5\n+  --> $DIR/issue-87748.rs:18:5\n    |\n LL |     fn do_sth(_: u32) {}\n    |     ^^^^^^^^^^^^^^^^^\n note: but lifetime parameter must outlive the anonymous lifetime #1 defined here\n-  --> $DIR/issue-87748.rs:17:5\n+  --> $DIR/issue-87748.rs:18:5\n    |\n LL |     fn do_sth(_: u32) {}\n    |     ^^^^^^^^^^^^^^^^^"}, {"sha": "31cea12a3e2416a7365b81edd9c0f6cbae30e9c3", "filename": "src/test/ui/generic-associated-types/bugs/issue-87755.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87755.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87755.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87755.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -1,4 +1,5 @@\n // check-fail\n+// known-bug\n \n // This should pass.\n \n@@ -15,7 +16,6 @@ struct Bar;\n \n impl Foo for Bar {\n     type Ass = Bar;\n-    //~^ overflow\n }\n \n fn main() {}"}, {"sha": "5d1aff0117c13cb838bcdde5f94e7aa770dee397", "filename": "src/test/ui/generic-associated-types/bugs/issue-87755.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87755.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87755.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87755.stderr?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -1,5 +1,5 @@\n error[E0275]: overflow evaluating the requirement `<Bar as Foo>::Ass == _`\n-  --> $DIR/issue-87755.rs:17:16\n+  --> $DIR/issue-87755.rs:18:16\n    |\n LL |     type Ass = Bar;\n    |                ^^^"}, {"sha": "57a4b028d93ea67bf3e1b5cbb6ef8ff8369084e5", "filename": "src/test/ui/generic-associated-types/bugs/issue-87803.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87803.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87803.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87803.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -1,4 +1,5 @@\n // check-fail\n+// known-bug\n \n // This should pass, but using a type alias vs a reference directly\n // changes late-bound -> early-bound.\n@@ -18,7 +19,7 @@ impl Scanner for IdScanner {\n     type Input<'a> = &'a str;\n     type Token<'a> = &'a str;\n \n-    fn scan<'a>(&mut self, s : &'a str) -> &'a str { //~ lifetime parameters\n+    fn scan<'a>(&mut self, s : &'a str) -> &'a str {\n         s\n     }\n }"}, {"sha": "c81c051d32a89616271abfbd7e4bf0f9c79487aa", "filename": "src/test/ui/generic-associated-types/bugs/issue-87803.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87803.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87803.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87803.stderr?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -1,5 +1,5 @@\n error[E0195]: lifetime parameters or bounds on method `scan` do not match the trait declaration\n-  --> $DIR/issue-87803.rs:21:12\n+  --> $DIR/issue-87803.rs:22:12\n    |\n LL |     fn scan<'a>(&mut self, i : Self::Input<'a>) -> Self::Token<'a>;\n    |            ---- lifetimes in impl do not match this method in trait"}, {"sha": "c9f342405278a90597f39b6a236532dc8701bbfd", "filename": "src/test/ui/generic-associated-types/bugs/issue-88382.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88382.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88382.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88382.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -1,4 +1,5 @@\n // check-fail\n+// known-bug\n \n // This should pass, but has a missed normalization due to HRTB.\n \n@@ -25,7 +26,6 @@ fn do_something<I: Iterable>(i: I, mut f: impl for<'a> Fn(&mut I::Iterator<'a>))\n fn main() {\n     do_something(SomeImplementation(), |_| ());\n     do_something(SomeImplementation(), test);\n-    //~^ type mismatch\n }\n \n fn test<'a, I: Iterable>(_: &mut I::Iterator<'a>) {}"}, {"sha": "d06c3ec8de75ec436c4461bc5b4749ce244132e4", "filename": "src/test/ui/generic-associated-types/bugs/issue-88382.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88382.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88382.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88382.stderr?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -1,5 +1,5 @@\n error[E0631]: type mismatch in function arguments\n-  --> $DIR/issue-88382.rs:27:40\n+  --> $DIR/issue-88382.rs:28:40\n    |\n LL |     do_something(SomeImplementation(), test);\n    |     ------------                       ^^^^ expected signature of `for<'a> fn(&mut <SomeImplementation as Iterable>::Iterator<'a>) -> _`\n@@ -10,7 +10,7 @@ LL | fn test<'a, I: Iterable>(_: &mut I::Iterator<'a>) {}\n    | ------------------------------------------------- found signature of `for<'r> fn(&'r mut std::iter::Empty<usize>) -> _`\n    |\n note: required by a bound in `do_something`\n-  --> $DIR/issue-88382.rs:21:56\n+  --> $DIR/issue-88382.rs:22:56\n    |\n LL | fn do_something<I: Iterable>(i: I, mut f: impl for<'a> Fn(&mut I::Iterator<'a>)) {\n    |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `do_something`"}, {"sha": "b31d012d2fc4163c1f5478933ecca9062cdb849a", "filename": "src/test/ui/generic-associated-types/bugs/issue-88460.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -1,4 +1,5 @@\n // check-fail\n+// known-bug\n \n // This should pass, but has a missed normalization due to HRTB.\n \n@@ -27,5 +28,4 @@ impl Trait for Foo {\n \n fn main() {\n     test(Foo);\n-    //~^ the trait bound\n }"}, {"sha": "0b83e9da1ab7ade398c3f3aa31a2be73c6ea39b8", "filename": "src/test/ui/generic-associated-types/bugs/issue-88460.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.stderr?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `for<'a> <_ as Trait>::Assoc<'a>: Marker` is not satisfied\n-  --> $DIR/issue-88460.rs:29:5\n+  --> $DIR/issue-88460.rs:30:5\n    |\n LL |     test(Foo);\n    |     ^^^^ the trait `for<'a> Marker` is not implemented for `<_ as Trait>::Assoc<'a>`\n    |\n note: required by a bound in `test`\n-  --> $DIR/issue-88460.rs:16:27\n+  --> $DIR/issue-88460.rs:17:27\n    |\n LL | fn test<T>(value: T)\n    |    ---- required by a bound in this"}, {"sha": "c72a450b9261cac5ee88b46fd963ff19de228382", "filename": "src/test/ui/generic-associated-types/bugs/issue-88526.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88526.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88526.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88526.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -1,4 +1,5 @@\n // check-fail\n+// known-bug\n \n // This should pass, but requires more logic.\n \n@@ -23,7 +24,7 @@ struct TestB<Q, F>\n     f: F,\n }\n \n-impl<'q, Q, I, F> A for TestB<Q, F> //~ the type parameter\n+impl<'q, Q, I, F> A for TestB<Q, F>\n where\n     Q: A<I<'q> = &'q I>,\n     F: Fn(I),"}, {"sha": "127c889bf715e3c41e515fadae67b70fe827fcef", "filename": "src/test/ui/generic-associated-types/bugs/issue-88526.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88526.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88526.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88526.stderr?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -1,5 +1,5 @@\n error[E0207]: the type parameter `I` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-88526.rs:26:13\n+  --> $DIR/issue-88526.rs:27:13\n    |\n LL | impl<'q, Q, I, F> A for TestB<Q, F>\n    |             ^ unconstrained type parameter"}, {"sha": "1581b7105a867518a077c998fe2f2eb667743ad5", "filename": "src/test/ui/generic-associated-types/bugs/issue-89008.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89008.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89008.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89008.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -1,5 +1,6 @@\n // check-fail\n // edition:2021\n+// known-bug\n \n // This should pass, but seems to run into a TAIT bug.\n \n@@ -31,11 +32,11 @@ trait X {\n struct Y;\n \n impl X for Y {\n-    type LineStream<'a, Repr> = impl Stream<Item = Repr>; //~ could not find\n+    type LineStream<'a, Repr> = impl Stream<Item = Repr>;\n \n     type LineStreamFut<'a, Repr> = impl Future<Output = Self::LineStream<'a, Repr>> ;\n \n-    fn line_stream<'a, Repr>(&'a self) -> Self::LineStreamFut<'a, Repr> { //~ type mismatch\n+    fn line_stream<'a, Repr>(&'a self) -> Self::LineStreamFut<'a, Repr> {\n         async {empty()}\n     }\n }"}, {"sha": "c2687ca540153c7bcc87aa5e8cea8788b130e023", "filename": "src/test/ui/generic-associated-types/bugs/issue-89008.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89008.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89008.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89008.stderr?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -1,5 +1,5 @@\n error[E0271]: type mismatch resolving `<impl Future<Output = [async output]> as Future>::Output == impl Stream<Item = Repr>`\n-  --> $DIR/issue-89008.rs:38:43\n+  --> $DIR/issue-89008.rs:39:43\n    |\n LL |     type LineStream<'a, Repr> = impl Stream<Item = Repr>;\n    |                                 ------------------------ the expected opaque type\n@@ -11,7 +11,7 @@ LL |     fn line_stream<'a, Repr>(&'a self) -> Self::LineStreamFut<'a, Repr> {\n                    found struct `Empty<_>`\n \n error: could not find defining uses\n-  --> $DIR/issue-89008.rs:34:33\n+  --> $DIR/issue-89008.rs:35:33\n    |\n LL |     type LineStream<'a, Repr> = impl Stream<Item = Repr>;\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "1bbf7aac5cdabc6ff70bb90f645e3f85ccda02f8", "filename": "src/test/ui/generic-associated-types/issue-74824.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -17,7 +17,6 @@ impl<T> UnsafeCopy for T {}\n fn main() {\n     let b = Box::new(42usize);\n     let copy = <()>::copy(&b);\n-    //~^ type annotations needed\n \n     let raw_b = Box::deref(&b) as *const _;\n     let raw_copy = Box::deref(&copy) as *const _;"}, {"sha": "8517eb9fa21026c915453e4dcb1463593b7cee28", "filename": "src/test/ui/generic-associated-types/issue-74824.stderr", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.stderr?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -27,13 +27,6 @@ help: consider restricting type parameter `T`\n LL |     type Copy<T: std::clone::Clone>: Copy = Box<T>;\n    |                +++++++++++++++++++\n \n-error[E0282]: type annotations needed\n-  --> $DIR/issue-74824.rs:19:16\n-   |\n-LL |     let copy = <()>::copy(&b);\n-   |                ^^^^^^^^^^ cannot infer type for type parameter `T` declared on the associated function `copy`\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0277, E0282.\n-For more information about an error, try `rustc --explain E0277`.\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "f403d75167d8a9f73a29ae2994ac7b2471c2f48d", "filename": "src/test/ui/generic-associated-types/issue-93874.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-93874.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-93874.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-93874.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -0,0 +1,35 @@\n+// check-pass\n+\n+#![feature(generic_associated_types)]\n+\n+pub trait Build {\n+    type Output<O>;\n+    fn build<O>(self, input: O) -> Self::Output<O>;\n+}\n+\n+pub struct IdentityBuild;\n+impl Build for IdentityBuild {\n+    type Output<O> = O;\n+    fn build<O>(self, input: O) -> Self::Output<O> {\n+        input\n+    }\n+}\n+\n+fn a() {\n+    let _x: u8 = IdentityBuild.build(10);\n+}\n+\n+fn b() {\n+    let _x: Vec<u8> = IdentityBuild.build(Vec::new());\n+}\n+\n+fn c() {\n+    let mut f = IdentityBuild.build(|| ());\n+    (f)();\n+}\n+\n+pub fn main() {\n+    a();\n+    b();\n+    c();\n+}"}, {"sha": "3024fedf7b5fbad353f783ed2c4c06b9e074fcd1", "filename": "src/test/ui/impl-trait/issues/issue-54600.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54600.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54600.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54600.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -2,6 +2,6 @@ use std::fmt::Debug;\n \n fn main() {\n     let x: Option<impl Debug> = Some(44_u32);\n-    //~^ `impl Trait` not allowed outside of function and method return types\n+    //~^ `impl Trait` only allowed in function and inherent method return types\n     println!(\"{:?}\", x);\n }"}, {"sha": "316566a57a8964f5d7681f66ba8f8a34b3cc27c1", "filename": "src/test/ui/impl-trait/issues/issue-54600.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54600.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54600.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54600.stderr?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -1,4 +1,4 @@\n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n   --> $DIR/issue-54600.rs:4:19\n    |\n LL |     let x: Option<impl Debug> = Some(44_u32);"}, {"sha": "8f1e0ece03a62ec16b87898c0b78271aa948c07c", "filename": "src/test/ui/impl-trait/issues/issue-54840.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54840.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54840.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54840.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -3,5 +3,5 @@ use std::ops::Add;\n fn main() {\n     let i: i32 = 0;\n     let j: &impl Add = &i;\n-    //~^ `impl Trait` not allowed outside of function and method return types\n+    //~^ `impl Trait` only allowed in function and inherent method return types\n }"}, {"sha": "8d82133ac90298d31f72d7545409837aabf794c8", "filename": "src/test/ui/impl-trait/issues/issue-54840.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54840.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54840.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54840.stderr?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -1,4 +1,4 @@\n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n   --> $DIR/issue-54840.rs:5:13\n    |\n LL |     let j: &impl Add = &i;"}, {"sha": "e5865d0dfff340ddea23fbbb43b735b4212c4f02", "filename": "src/test/ui/impl-trait/issues/issue-58504.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58504.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58504.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58504.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -8,5 +8,5 @@ fn mk_gen() -> impl Generator<Return=!, Yield=()> {\n \n fn main() {\n     let gens: [impl Generator<Return=!, Yield=()>;2] = [ mk_gen(), mk_gen() ];\n-    //~^ `impl Trait` not allowed outside of function and method return types\n+    //~^ `impl Trait` only allowed in function and inherent method return types\n }"}, {"sha": "6656e9fc3fbfc05846b9e253d235eae2659835df", "filename": "src/test/ui/impl-trait/issues/issue-58504.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58504.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58504.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58504.stderr?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -1,4 +1,4 @@\n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n   --> $DIR/issue-58504.rs:10:16\n    |\n LL |     let gens: [impl Generator<Return=!, Yield=()>;2] = [ mk_gen(), mk_gen() ];"}, {"sha": "68cfcd9ba4f9e03c72e9f5e4acee8b5db6bda814", "filename": "src/test/ui/impl-trait/issues/issue-58956.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58956.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58956.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58956.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -5,9 +5,9 @@ impl Lam for B {}\n pub struct Wrap<T>(T);\n \n const _A: impl Lam = {\n-    //~^ `impl Trait` not allowed outside of function and method return types\n+    //~^ `impl Trait` only allowed in function and inherent method return types\n     let x: Wrap<impl Lam> = Wrap(B);\n-    //~^ `impl Trait` not allowed outside of function and method return types\n+    //~^ `impl Trait` only allowed in function and inherent method return types\n     x.0\n };\n "}, {"sha": "123fb4df4b3c8650c9acd6d3cd3f43b561df2cdc", "filename": "src/test/ui/impl-trait/issues/issue-58956.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58956.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58956.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58956.stderr?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -1,10 +1,10 @@\n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n   --> $DIR/issue-58956.rs:7:11\n    |\n LL | const _A: impl Lam = {\n    |           ^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n   --> $DIR/issue-58956.rs:9:17\n    |\n LL |     let x: Wrap<impl Lam> = Wrap(B);"}, {"sha": "f8ae18bacd67d68e095583013dc53c50857023df", "filename": "src/test/ui/impl-trait/issues/issue-70971.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70971.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70971.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70971.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     let x : (impl Copy,) = (true,);\n-    //~^ `impl Trait` not allowed outside of function and method return types\n+    //~^ `impl Trait` only allowed in function and inherent method return types\n }"}, {"sha": "4dda4c22aa2cf04524b44023b5c718d102a4e850", "filename": "src/test/ui/impl-trait/issues/issue-70971.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70971.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70971.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70971.stderr?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -1,4 +1,4 @@\n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n   --> $DIR/issue-70971.rs:2:14\n    |\n LL |     let x : (impl Copy,) = (true,);"}, {"sha": "da53594f3d091a547a3a6c80268d1b68be1ed9b8", "filename": "src/test/ui/impl-trait/issues/issue-79099.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-79099.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-79099.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-79099.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -1,7 +1,7 @@\n struct Bug {\n     V1: [(); {\n         let f: impl core::future::Future<Output = u8> = async { 1 };\n-        //~^ `impl Trait` not allowed outside of function and method return types\n+        //~^ `impl Trait` only allowed in function and inherent method return types\n         //~| expected identifier\n         1\n     }],"}, {"sha": "4c9ec2a83ff37959c37c945fcd6866e3f8f0ab51", "filename": "src/test/ui/impl-trait/issues/issue-79099.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-79099.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-79099.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-79099.stderr?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -9,7 +9,7 @@ LL |         let f: impl core::future::Future<Output = u8> = async { 1 };\n    = help: set `edition = \"2021\"` in `Cargo.toml`\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n   --> $DIR/issue-79099.rs:3:16\n    |\n LL |         let f: impl core::future::Future<Output = u8> = async { 1 };"}, {"sha": "344f359529b6185ec879bdd5a8357b246d0ee84b", "filename": "src/test/ui/impl-trait/issues/issue-83929-impl-trait-in-generic-default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -1,8 +1,8 @@\n struct Foo<T = impl Copy>(T);\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n type Result<T, E = impl std::error::Error> = std::result::Result<T, E>;\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n // should not cause ICE\n fn x() -> Foo {"}, {"sha": "e635e554e23848be23f2077644b61041c9ade79c", "filename": "src/test/ui/impl-trait/issues/issue-83929-impl-trait-in-generic-default.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.stderr?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -1,10 +1,10 @@\n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n   --> $DIR/issue-83929-impl-trait-in-generic-default.rs:1:16\n    |\n LL | struct Foo<T = impl Copy>(T);\n    |                ^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n   --> $DIR/issue-83929-impl-trait-in-generic-default.rs:4:20\n    |\n LL | type Result<T, E = impl std::error::Error> = std::result::Result<T, E>;"}, {"sha": "a0b73743a2b2dc98109e7088d2ea8e7a8b02fe21", "filename": "src/test/ui/impl-trait/issues/issue-84919.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-84919.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-84919.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-84919.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -3,7 +3,7 @@ impl Trait for () {}\n \n fn foo<'a: 'a>() {\n     let _x: impl Trait = ();\n-    //~^ `impl Trait` not allowed outside of function and method return types\n+    //~^ `impl Trait` only allowed in function and inherent method return types\n }\n \n fn main() {}"}, {"sha": "5abe1bd877943bf1a80a27d6be77b25392e93cdb", "filename": "src/test/ui/impl-trait/issues/issue-84919.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-84919.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-84919.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-84919.stderr?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -1,4 +1,4 @@\n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n   --> $DIR/issue-84919.rs:5:13\n    |\n LL |     let _x: impl Trait = ();"}, {"sha": "e6e95771400d302f31be971363c97d7f3064b0ad", "filename": "src/test/ui/impl-trait/issues/issue-86642.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86642.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86642.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86642.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -1,5 +1,5 @@\n static x: impl Fn(&str) -> Result<&str, ()> = move |source| {\n-    //~^ `impl Trait` not allowed outside of function and method return types\n+    //~^ `impl Trait` only allowed in function and inherent method return types\n     let res = (move |source| Ok(source))(source);\n     let res = res.or((move |source| Ok(source))(source));\n     res"}, {"sha": "0ec118d5be80219b3bcae67d7a08ccf89ef66762", "filename": "src/test/ui/impl-trait/issues/issue-86642.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86642.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86642.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86642.stderr?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -1,4 +1,4 @@\n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n   --> $DIR/issue-86642.rs:1:11\n    |\n LL | static x: impl Fn(&str) -> Result<&str, ()> = move |source| {"}, {"sha": "aeb8f83326e4dbf0859f42a582ce2c88698c8eb7", "filename": "src/test/ui/impl-trait/issues/issue-87295.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-87295.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-87295.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-87295.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -14,5 +14,5 @@ impl<F> Struct<F> {\n \n fn main() {\n     let _do_not_waste: Struct<impl Trait<Output = i32>> = Struct::new(());\n-    //~^ `impl Trait` not allowed outside of function and method return types\n+    //~^ `impl Trait` only allowed in function and inherent method return types\n }"}, {"sha": "0b043056b84a6f3f6e306ff42223d3a0fe4a57d2", "filename": "src/test/ui/impl-trait/issues/issue-87295.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-87295.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-87295.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-87295.stderr?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -1,4 +1,4 @@\n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n   --> $DIR/issue-87295.rs:16:31\n    |\n LL |     let _do_not_waste: Struct<impl Trait<Output = i32>> = Struct::new(());"}, {"sha": "06a2191a0176152d3fb960ce4b10665740de489f", "filename": "src/test/ui/impl-trait/nested_impl_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -7,7 +7,7 @@ fn bad_in_ret_position(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n \n fn bad_in_fn_syntax(x: fn() -> impl Into<impl Debug>) {}\n //~^ ERROR nested `impl Trait` is not allowed\n-//~^^ `impl Trait` not allowed\n+//~| `impl Trait` only allowed in function and inherent method return types\n \n fn bad_in_arg_position(_: impl Into<impl Debug>) { }\n //~^ ERROR nested `impl Trait` is not allowed\n@@ -23,7 +23,7 @@ fn allowed_in_assoc_type() -> impl Iterator<Item=impl Fn()> {\n }\n \n fn allowed_in_ret_type() -> impl Fn() -> impl Into<u32> {\n-//~^ `impl Trait` not allowed\n+//~^ `impl Trait` only allowed in function and inherent method return types\n     || 5\n }\n "}, {"sha": "4444e6a454f896ab518c56d9b14a55b50a641a6e", "filename": "src/test/ui/impl-trait/nested_impl_trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -34,13 +34,13 @@ LL |     fn bad(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n    |                                  |         nested `impl Trait` here\n    |                                  outer `impl Trait`\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return\n   --> $DIR/nested_impl_trait.rs:8:32\n    |\n LL | fn bad_in_fn_syntax(x: fn() -> impl Into<impl Debug>) {}\n    |                                ^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n   --> $DIR/nested_impl_trait.rs:25:42\n    |\n LL | fn allowed_in_ret_type() -> impl Fn() -> impl Into<u32> {"}, {"sha": "c1dd46c7ff7fd1d9f769368173351b340e8a5cbd", "filename": "src/test/ui/impl-trait/where-allowed.rs", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -13,61 +13,61 @@ fn in_adt_in_parameters(_: Vec<impl Debug>) { panic!() }\n \n // Disallowed\n fn in_fn_parameter_in_parameters(_: fn(impl Debug)) { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n // Disallowed\n fn in_fn_return_in_parameters(_: fn() -> impl Debug) { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n // Disallowed\n fn in_fn_parameter_in_return() -> fn(impl Debug) { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n // Disallowed\n fn in_fn_return_in_return() -> fn() -> impl Debug { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n // Disallowed\n fn in_dyn_Fn_parameter_in_parameters(_: &dyn Fn(impl Debug)) { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n // Disallowed\n fn in_dyn_Fn_return_in_parameters(_: &dyn Fn() -> impl Debug) { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n // Disallowed\n fn in_dyn_Fn_parameter_in_return() -> &'static dyn Fn(impl Debug) { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n // Disallowed\n fn in_dyn_Fn_return_in_return() -> &'static dyn Fn() -> impl Debug { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n // Disallowed\n fn in_impl_Fn_parameter_in_parameters(_: &impl Fn(impl Debug)) { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n //~^^ ERROR nested `impl Trait` is not allowed\n \n // Disallowed\n fn in_impl_Fn_return_in_parameters(_: &impl Fn() -> impl Debug) { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n // Disallowed\n fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n //~| ERROR nested `impl Trait` is not allowed\n \n // Disallowed\n fn in_impl_Fn_return_in_return() -> &'static impl Fn() -> impl Debug { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n // Disallowed\n fn in_Fn_parameter_in_generics<F: Fn(impl Debug)> (_: F) { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n // Disallowed\n fn in_Fn_return_in_generics<F: Fn() -> impl Debug> (_: F) { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n \n // Allowed\n@@ -80,22 +80,22 @@ fn in_impl_Trait_in_return() -> impl IntoIterator<Item = impl IntoIterator> {\n \n // Disallowed\n struct InBraceStructField { x: impl Debug }\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n // Disallowed\n struct InAdtInBraceStructField { x: Vec<impl Debug> }\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n // Disallowed\n struct InTupleStructField(impl Debug);\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n // Disallowed\n enum InEnum {\n     InBraceVariant { x: impl Debug },\n-    //~^ ERROR `impl Trait` not allowed outside of function and method return types\n+    //~^ ERROR `impl Trait` only allowed in function and inherent method return types\n     InTupleVariant(impl Debug),\n-    //~^ ERROR `impl Trait` not allowed outside of function and method return types\n+    //~^ ERROR `impl Trait` only allowed in function and inherent method return types\n }\n \n // Allowed\n@@ -106,7 +106,7 @@ trait InTraitDefnParameters {\n // Disallowed\n trait InTraitDefnReturn {\n     fn in_return() -> impl Debug;\n-    //~^ ERROR `impl Trait` not allowed outside of function and method return types\n+    //~^ ERROR `impl Trait` only allowed in function and inherent method return types\n }\n \n // Allowed and disallowed in trait impls\n@@ -123,7 +123,7 @@ impl DummyTrait for () {\n     // Allowed\n \n     fn in_trait_impl_return() -> impl Debug { () }\n-    //~^ ERROR `impl Trait` not allowed outside of function and method return types\n+    //~^ ERROR `impl Trait` only allowed in function and inherent method return types\n }\n \n // Allowed\n@@ -136,10 +136,10 @@ impl DummyType {\n // Disallowed\n extern \"C\" {\n     fn in_foreign_parameters(_: impl Debug);\n-    //~^ ERROR `impl Trait` not allowed outside of function and method return types\n+    //~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n     fn in_foreign_return() -> impl Debug;\n-    //~^ ERROR `impl Trait` not allowed outside of function and method return types\n+    //~^ ERROR `impl Trait` only allowed in function and inherent method return types\n }\n \n // Allowed\n@@ -155,97 +155,97 @@ type InTypeAlias<R> = impl Debug;\n //~^ ERROR `impl Trait` in type aliases is unstable\n \n type InReturnInTypeAlias<R> = fn() -> impl Debug;\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n //~| ERROR `impl Trait` in type aliases is unstable\n \n // Disallowed in impl headers\n impl PartialEq<impl Debug> for () {\n-    //~^ ERROR `impl Trait` not allowed outside of function and method return types\n+    //~^ ERROR `impl Trait` only allowed in function and inherent method return types\n }\n \n // Disallowed in impl headers\n impl PartialEq<()> for impl Debug {\n-    //~^ ERROR `impl Trait` not allowed outside of function and method return types\n+    //~^ ERROR `impl Trait` only allowed in function and inherent method return types\n }\n \n // Disallowed in inherent impls\n impl impl Debug {\n-    //~^ ERROR `impl Trait` not allowed outside of function and method return types\n+    //~^ ERROR `impl Trait` only allowed in function and inherent method return types\n }\n \n // Disallowed in inherent impls\n struct InInherentImplAdt<T> { t: T }\n impl InInherentImplAdt<impl Debug> {\n-    //~^ ERROR `impl Trait` not allowed outside of function and method return types\n+    //~^ ERROR `impl Trait` only allowed in function and inherent method return types\n }\n \n // Disallowed in where clauses\n fn in_fn_where_clause()\n     where impl Debug: Debug\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n {\n }\n \n // Disallowed in where clauses\n fn in_adt_in_fn_where_clause()\n     where Vec<impl Debug>: Debug\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n {\n }\n \n // Disallowed\n fn in_trait_parameter_in_fn_where_clause<T>()\n     where T: PartialEq<impl Debug>\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n {\n }\n \n // Disallowed\n fn in_Fn_parameter_in_fn_where_clause<T>()\n     where T: Fn(impl Debug)\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n {\n }\n \n // Disallowed\n fn in_Fn_return_in_fn_where_clause<T>()\n     where T: Fn() -> impl Debug\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n {\n }\n \n // Disallowed\n struct InStructGenericParamDefault<T = impl Debug>(T);\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n // Disallowed\n enum InEnumGenericParamDefault<T = impl Debug> { Variant(T) }\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n // Disallowed\n trait InTraitGenericParamDefault<T = impl Debug> {}\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n // Disallowed\n type InTypeAliasGenericParamDefault<T = impl Debug> = T;\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n // Disallowed\n impl <T = impl Debug> T {}\n //~^ ERROR defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n //~| WARNING this was previously accepted by the compiler but is being phased out\n-//~| ERROR `impl Trait` not allowed outside of function and method return types\n+//~| ERROR `impl Trait` only allowed in function and inherent method return types\n //~| ERROR no nominal type found\n \n // Disallowed\n fn in_method_generic_param_default<T = impl Debug>(_: T) {}\n //~^ ERROR defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n //~| WARNING this was previously accepted by the compiler but is being phased out\n-//~| ERROR `impl Trait` not allowed outside of function and method return types\n+//~| ERROR `impl Trait` only allowed in function and inherent method return types\n \n fn main() {\n     let _in_local_variable: impl Fn() = || {};\n-    //~^ ERROR `impl Trait` not allowed outside of function and method return types\n+    //~^ ERROR `impl Trait` only allowed in function and inherent method return types\n     let _in_return_in_local_variable = || -> impl Fn() { || {} };\n-    //~^ ERROR `impl Trait` not allowed outside of function and method return types\n+    //~^ ERROR `impl Trait` only allowed in function and inherent method return types\n }"}, {"sha": "eef20c2de94bc7b0b4f5b83ba9cea83b68e8be46", "filename": "src/test/ui/impl-trait/where-allowed.stderr", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -43,247 +43,247 @@ LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer param\n   --> $DIR/where-allowed.rs:15:40\n    |\n LL | fn in_fn_parameter_in_parameters(_: fn(impl Debug)) { panic!() }\n    |                                        ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return\n   --> $DIR/where-allowed.rs:19:42\n    |\n LL | fn in_fn_return_in_parameters(_: fn() -> impl Debug) { panic!() }\n    |                                          ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer param\n   --> $DIR/where-allowed.rs:23:38\n    |\n LL | fn in_fn_parameter_in_return() -> fn(impl Debug) { panic!() }\n    |                                      ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return\n   --> $DIR/where-allowed.rs:27:40\n    |\n LL | fn in_fn_return_in_return() -> fn() -> impl Debug { panic!() }\n    |                                        ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n   --> $DIR/where-allowed.rs:31:49\n    |\n LL | fn in_dyn_Fn_parameter_in_parameters(_: &dyn Fn(impl Debug)) { panic!() }\n    |                                                 ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n   --> $DIR/where-allowed.rs:35:51\n    |\n LL | fn in_dyn_Fn_return_in_parameters(_: &dyn Fn() -> impl Debug) { panic!() }\n    |                                                   ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n   --> $DIR/where-allowed.rs:39:55\n    |\n LL | fn in_dyn_Fn_parameter_in_return() -> &'static dyn Fn(impl Debug) { panic!() }\n    |                                                       ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n   --> $DIR/where-allowed.rs:43:57\n    |\n LL | fn in_dyn_Fn_return_in_return() -> &'static dyn Fn() -> impl Debug { panic!() }\n    |                                                         ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n   --> $DIR/where-allowed.rs:47:51\n    |\n LL | fn in_impl_Fn_parameter_in_parameters(_: &impl Fn(impl Debug)) { panic!() }\n    |                                                   ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n   --> $DIR/where-allowed.rs:52:53\n    |\n LL | fn in_impl_Fn_return_in_parameters(_: &impl Fn() -> impl Debug) { panic!() }\n    |                                                     ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n   --> $DIR/where-allowed.rs:56:57\n    |\n LL | fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic!() }\n    |                                                         ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n   --> $DIR/where-allowed.rs:61:59\n    |\n LL | fn in_impl_Fn_return_in_return() -> &'static impl Fn() -> impl Debug { panic!() }\n    |                                                           ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n   --> $DIR/where-allowed.rs:65:38\n    |\n LL | fn in_Fn_parameter_in_generics<F: Fn(impl Debug)> (_: F) { panic!() }\n    |                                      ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n   --> $DIR/where-allowed.rs:69:40\n    |\n LL | fn in_Fn_return_in_generics<F: Fn() -> impl Debug> (_: F) { panic!() }\n    |                                        ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n   --> $DIR/where-allowed.rs:82:32\n    |\n LL | struct InBraceStructField { x: impl Debug }\n    |                                ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in path\n   --> $DIR/where-allowed.rs:86:41\n    |\n LL | struct InAdtInBraceStructField { x: Vec<impl Debug> }\n    |                                         ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n   --> $DIR/where-allowed.rs:90:27\n    |\n LL | struct InTupleStructField(impl Debug);\n    |                           ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n   --> $DIR/where-allowed.rs:95:25\n    |\n LL |     InBraceVariant { x: impl Debug },\n    |                         ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n   --> $DIR/where-allowed.rs:97:20\n    |\n LL |     InTupleVariant(impl Debug),\n    |                    ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in trait method return\n   --> $DIR/where-allowed.rs:108:23\n    |\n LL |     fn in_return() -> impl Debug;\n    |                       ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `impl` method return\n   --> $DIR/where-allowed.rs:125:34\n    |\n LL |     fn in_trait_impl_return() -> impl Debug { () }\n    |                                  ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `extern fn` param\n   --> $DIR/where-allowed.rs:138:33\n    |\n LL |     fn in_foreign_parameters(_: impl Debug);\n    |                                 ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `extern fn` return\n   --> $DIR/where-allowed.rs:141:31\n    |\n LL |     fn in_foreign_return() -> impl Debug;\n    |                               ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return\n   --> $DIR/where-allowed.rs:157:39\n    |\n LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    |                                       ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in trait\n   --> $DIR/where-allowed.rs:162:16\n    |\n LL | impl PartialEq<impl Debug> for () {\n    |                ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n   --> $DIR/where-allowed.rs:167:24\n    |\n LL | impl PartialEq<()> for impl Debug {\n    |                        ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n   --> $DIR/where-allowed.rs:172:6\n    |\n LL | impl impl Debug {\n    |      ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n   --> $DIR/where-allowed.rs:178:24\n    |\n LL | impl InInherentImplAdt<impl Debug> {\n    |                        ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n   --> $DIR/where-allowed.rs:184:11\n    |\n LL |     where impl Debug: Debug\n    |           ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n   --> $DIR/where-allowed.rs:191:15\n    |\n LL |     where Vec<impl Debug>: Debug\n    |               ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in bound\n   --> $DIR/where-allowed.rs:198:24\n    |\n LL |     where T: PartialEq<impl Debug>\n    |                        ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n   --> $DIR/where-allowed.rs:205:17\n    |\n LL |     where T: Fn(impl Debug)\n    |                 ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n   --> $DIR/where-allowed.rs:212:22\n    |\n LL |     where T: Fn() -> impl Debug\n    |                      ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n   --> $DIR/where-allowed.rs:218:40\n    |\n LL | struct InStructGenericParamDefault<T = impl Debug>(T);\n    |                                        ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n   --> $DIR/where-allowed.rs:222:36\n    |\n LL | enum InEnumGenericParamDefault<T = impl Debug> { Variant(T) }\n    |                                    ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n   --> $DIR/where-allowed.rs:226:38\n    |\n LL | trait InTraitGenericParamDefault<T = impl Debug> {}\n    |                                      ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n   --> $DIR/where-allowed.rs:230:41\n    |\n LL | type InTypeAliasGenericParamDefault<T = impl Debug> = T;\n    |                                         ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n   --> $DIR/where-allowed.rs:234:11\n    |\n LL | impl <T = impl Debug> T {}\n    |           ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n   --> $DIR/where-allowed.rs:241:40\n    |\n LL | fn in_method_generic_param_default<T = impl Debug>(_: T) {}\n    |                                        ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n   --> $DIR/where-allowed.rs:247:29\n    |\n LL |     let _in_local_variable: impl Fn() = || {};\n    |                             ^^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in closure return\n   --> $DIR/where-allowed.rs:249:46\n    |\n LL |     let _in_return_in_local_variable = || -> impl Fn() { || {} };"}, {"sha": "5a92555eb322e9f6de60831790288115e09d39c0", "filename": "src/test/ui/invalid/invalid-no-sanitize.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Finvalid%2Finvalid-no-sanitize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Finvalid%2Finvalid-no-sanitize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-no-sanitize.stderr?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -4,7 +4,7 @@ error: invalid argument for `no_sanitize`\n LL | #[no_sanitize(brontosaurus)]\n    |               ^^^^^^^^^^^^\n    |\n-   = note: expected one of: `address`, `hwaddress`, `memory` or `thread`\n+   = note: expected one of: `address`, `cfi`, `hwaddress`, `memory`, `memtag`, or `thread`\n \n error: aborting due to previous error\n "}, {"sha": "b8088c18dadfeda82e7b0ca3d54bb3d286a1c3f8", "filename": "src/test/ui/issues/issue-47715.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fissues%2Fissue-47715.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fissues%2Fissue-47715.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47715.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -7,22 +7,22 @@ trait Iterable {\n }\n \n struct Container<T: Iterable<Item = impl Foo>> {\n-    //~^ ERROR `impl Trait` not allowed\n+    //~^ ERROR `impl Trait` only allowed in function and inherent method return types\n     field: T\n }\n \n enum Enum<T: Iterable<Item = impl Foo>> {\n-    //~^ ERROR `impl Trait` not allowed\n+    //~^ ERROR `impl Trait` only allowed in function and inherent method return types\n     A(T),\n }\n \n union Union<T: Iterable<Item = impl Foo> + Copy> {\n-    //~^ ERROR `impl Trait` not allowed\n+    //~^ ERROR `impl Trait` only allowed in function and inherent method return types\n     x: T,\n }\n \n type Type<T: Iterable<Item = impl Foo>> = T;\n-//~^ ERROR `impl Trait` not allowed\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n fn main() {\n }"}, {"sha": "0ee9388bf2b2ce321231b6bb74d2991c78162ae5", "filename": "src/test/ui/issues/issue-47715.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fissues%2Fissue-47715.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Fissues%2Fissue-47715.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47715.stderr?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -1,22 +1,22 @@\n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic\n   --> $DIR/issue-47715.rs:9:37\n    |\n LL | struct Container<T: Iterable<Item = impl Foo>> {\n    |                                     ^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic\n   --> $DIR/issue-47715.rs:14:30\n    |\n LL | enum Enum<T: Iterable<Item = impl Foo>> {\n    |                              ^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic\n   --> $DIR/issue-47715.rs:19:32\n    |\n LL | union Union<T: Iterable<Item = impl Foo> + Copy> {\n    |                                ^^^^^^^^\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic\n   --> $DIR/issue-47715.rs:24:30\n    |\n LL | type Type<T: Iterable<Item = impl Foo>> = T;"}, {"sha": "e3f6ddb9a14978aba53de03070d5961457443d8d", "filename": "src/test/ui/return/return-impl-trait-bad.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Freturn%2Freturn-impl-trait-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Freturn%2Freturn-impl-trait-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Freturn-impl-trait-bad.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -0,0 +1,31 @@\n+trait Trait {}\n+impl Trait for () {}\n+\n+fn bad_echo<T>(_t: T) -> T {\n+    \"this should not suggest impl Trait\" //~ ERROR mismatched types\n+}\n+\n+fn bad_echo_2<T: Trait>(_t: T) -> T {\n+    \"this will not suggest it, because that would probably be wrong\" //~ ERROR mismatched types\n+}\n+\n+fn other_bounds_bad<T>() -> T\n+where\n+    T: Send,\n+    Option<T>: Send,\n+{\n+    \"don't suggest this, because Option<T> places additional constraints\" //~ ERROR mismatched types\n+}\n+\n+// FIXME: implement this check\n+trait GenericTrait<T> {}\n+\n+fn used_in_trait<T>() -> T\n+where\n+    T: Send,\n+    (): GenericTrait<T>,\n+{\n+    \"don't suggest this, because the generic param is used in the bound.\" //~ ERROR mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "237b85ee66a10d73a2366ded6193eaffe30651d2", "filename": "src/test/ui/return/return-impl-trait-bad.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Freturn%2Freturn-impl-trait-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Freturn%2Freturn-impl-trait-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Freturn-impl-trait-bad.stderr?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -0,0 +1,59 @@\n+error[E0308]: mismatched types\n+  --> $DIR/return-impl-trait-bad.rs:5:5\n+   |\n+LL | fn bad_echo<T>(_t: T) -> T {\n+   |             -            - expected `T` because of return type\n+   |             |\n+   |             this type parameter\n+LL |     \"this should not suggest impl Trait\"\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected type parameter `T`, found `&str`\n+   |\n+   = note: expected type parameter `T`\n+                   found reference `&'static str`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/return-impl-trait-bad.rs:9:5\n+   |\n+LL | fn bad_echo_2<T: Trait>(_t: T) -> T {\n+   |               -                   - expected `T` because of return type\n+   |               |\n+   |               this type parameter\n+LL |     \"this will not suggest it, because that would probably be wrong\"\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected type parameter `T`, found `&str`\n+   |\n+   = note: expected type parameter `T`\n+                   found reference `&'static str`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/return-impl-trait-bad.rs:17:5\n+   |\n+LL | fn other_bounds_bad<T>() -> T\n+   |                     -       - expected `T` because of return type\n+   |                     |\n+   |                     this type parameter\n+...\n+LL |     \"don't suggest this, because Option<T> places additional constraints\"\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected type parameter `T`, found `&str`\n+   |\n+   = note: expected type parameter `T`\n+                   found reference `&'static str`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/return-impl-trait-bad.rs:28:5\n+   |\n+LL | fn used_in_trait<T>() -> T\n+   |                  -       -\n+   |                  |       |\n+   |                  |       expected `T` because of return type\n+   |                  |       help: consider using an impl return type: `impl Send`\n+   |                  this type parameter\n+...\n+LL |     \"don't suggest this, because the generic param is used in the bound.\"\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected type parameter `T`, found `&str`\n+   |\n+   = note: expected type parameter `T`\n+                   found reference `&'static str`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "ff2b02f73ea6522798b6509b58f3a87c8f7a789e", "filename": "src/test/ui/return/return-impl-trait.fixed", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Freturn%2Freturn-impl-trait.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Freturn%2Freturn-impl-trait.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Freturn-impl-trait.fixed?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -0,0 +1,30 @@\n+// run-rustfix\n+\n+trait Trait {}\n+impl Trait for () {}\n+\n+// this works\n+fn foo() -> impl Trait {\n+    ()\n+}\n+\n+fn bar<T: Trait + std::marker::Sync>() -> impl Trait + std::marker::Sync + Send\n+where\n+    T: Send,\n+{\n+    () //~ ERROR mismatched types\n+}\n+\n+fn other_bounds<T>() -> impl Trait\n+where\n+    T: Trait,\n+    Vec<usize>: Clone,\n+{\n+    () //~ ERROR mismatched types\n+}\n+\n+fn main() {\n+    foo();\n+    bar::<()>();\n+    other_bounds::<()>();\n+}"}, {"sha": "e905d712f622d7cdb0f4a4dc5b892f01732d1244", "filename": "src/test/ui/return/return-impl-trait.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Freturn%2Freturn-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Freturn%2Freturn-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Freturn-impl-trait.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -0,0 +1,30 @@\n+// run-rustfix\n+\n+trait Trait {}\n+impl Trait for () {}\n+\n+// this works\n+fn foo() -> impl Trait {\n+    ()\n+}\n+\n+fn bar<T: Trait + std::marker::Sync>() -> T\n+where\n+    T: Send,\n+{\n+    () //~ ERROR mismatched types\n+}\n+\n+fn other_bounds<T>() -> T\n+where\n+    T: Trait,\n+    Vec<usize>: Clone,\n+{\n+    () //~ ERROR mismatched types\n+}\n+\n+fn main() {\n+    foo();\n+    bar::<()>();\n+    other_bounds::<()>();\n+}"}, {"sha": "43d40972fcac0a94924522750a129a36b40fa2a4", "filename": "src/test/ui/return/return-impl-trait.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Freturn%2Freturn-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Freturn%2Freturn-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Freturn-impl-trait.stderr?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -0,0 +1,34 @@\n+error[E0308]: mismatched types\n+  --> $DIR/return-impl-trait.rs:15:5\n+   |\n+LL | fn bar<T: Trait + std::marker::Sync>() -> T\n+   |        -                                  -\n+   |        |                                  |\n+   |        |                                  expected `T` because of return type\n+   |        this type parameter                help: consider using an impl return type: `impl Trait + std::marker::Sync + Send`\n+...\n+LL |     ()\n+   |     ^^ expected type parameter `T`, found `()`\n+   |\n+   = note: expected type parameter `T`\n+                   found unit type `()`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/return-impl-trait.rs:23:5\n+   |\n+LL | fn other_bounds<T>() -> T\n+   |                 -       -\n+   |                 |       |\n+   |                 |       expected `T` because of return type\n+   |                 |       help: consider using an impl return type: `impl Trait`\n+   |                 this type parameter\n+...\n+LL |     ()\n+   |     ^^ expected type parameter `T`, found `()`\n+   |\n+   = note: expected type parameter `T`\n+                   found unit type `()`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "857066c78c9026576b6365faacbda4444f836631", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-fn-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-fn-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-fn-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-fn-type.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -4,7 +4,7 @@\n // FIXME: this is ruled out for now but should work\n \n type Foo = fn() -> impl Send;\n-//~^ ERROR: `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR: `impl Trait` only allowed in function and inherent method return types\n \n fn make_foo() -> Foo {\n     || 15"}, {"sha": "a31cf1a51ccd7c2aafa7f1bc7014edb35803b621", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-fn-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-fn-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-fn-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-fn-type.stderr?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -1,4 +1,4 @@\n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return\n   --> $DIR/type-alias-impl-trait-fn-type.rs:6:20\n    |\n LL | type Foo = fn() -> impl Send;"}, {"sha": "887d27fd6dca41d04c8d3c7b4b7500178f0362e5", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 177, "deletions": 221, "changes": 398, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -41,12 +41,15 @@ impl EarlyProps {\n     pub fn from_reader<R: Read>(config: &Config, testfile: &Path, rdr: R) -> Self {\n         let mut props = EarlyProps::default();\n         iter_header(testfile, rdr, &mut |_, ln| {\n-            if let Some(s) = config.parse_aux_build(ln) {\n-                props.aux.push(s);\n-            }\n-            if let Some(ac) = config.parse_aux_crate(ln) {\n-                props.aux_crate.push(ac);\n-            }\n+            config.push_name_value_directive(ln, directives::AUX_BUILD, &mut props.aux, |r| {\n+                r.trim().to_string()\n+            });\n+            config.push_name_value_directive(\n+                ln,\n+                directives::AUX_CRATE,\n+                &mut props.aux_crate,\n+                Config::parse_aux_crate,\n+            );\n             config.parse_and_update_revisions(ln, &mut props.revisions);\n         });\n         return props;\n@@ -126,6 +129,12 @@ pub struct TestProps {\n     // empty before the test starts. Incremental mode tests will reuse the\n     // incremental directory between passes in the same test.\n     pub incremental: bool,\n+    // If `true`, this test is a known bug.\n+    //\n+    // When set, some requirements are relaxed. Currently, this only means no\n+    // error annotations are needed, but this may be updated in the future to\n+    // include other relaxations.\n+    pub known_bug: bool,\n     // How far should the test proceed while still passing.\n     pass_mode: Option<PassMode>,\n     // Ignore `--pass` overrides from the command line for this test.\n@@ -150,6 +159,38 @@ pub struct TestProps {\n     pub stderr_per_bitwidth: bool,\n }\n \n+mod directives {\n+    pub const ERROR_PATTERN: &'static str = \"error-pattern\";\n+    pub const COMPILE_FLAGS: &'static str = \"compile-flags\";\n+    pub const RUN_FLAGS: &'static str = \"run-flags\";\n+    pub const SHOULD_ICE: &'static str = \"should-ice\";\n+    pub const BUILD_AUX_DOCS: &'static str = \"build-aux-docs\";\n+    pub const FORCE_HOST: &'static str = \"force-host\";\n+    pub const CHECK_STDOUT: &'static str = \"check-stdout\";\n+    pub const CHECK_RUN_RESULTS: &'static str = \"check-run-results\";\n+    pub const DONT_CHECK_COMPILER_STDOUT: &'static str = \"dont-check-compiler-stdout\";\n+    pub const DONT_CHECK_COMPILER_STDERR: &'static str = \"dont-check-compiler-stderr\";\n+    pub const NO_PREFER_DYNAMIC: &'static str = \"no-prefer-dynamic\";\n+    pub const PRETTY_EXPANDED: &'static str = \"pretty-expanded\";\n+    pub const PRETTY_MODE: &'static str = \"pretty-mode\";\n+    pub const PRETTY_COMPARE_ONLY: &'static str = \"pretty-compare-only\";\n+    pub const AUX_BUILD: &'static str = \"aux-build\";\n+    pub const AUX_CRATE: &'static str = \"aux-crate\";\n+    pub const EXEC_ENV: &'static str = \"exec-env\";\n+    pub const RUSTC_ENV: &'static str = \"rustc-env\";\n+    pub const UNSET_RUSTC_ENV: &'static str = \"unset-rustc-env\";\n+    pub const FORBID_OUTPUT: &'static str = \"forbid-output\";\n+    pub const CHECK_TEST_LINE_NUMBERS_MATCH: &'static str = \"check-test-line-numbers-match\";\n+    pub const IGNORE_PASS: &'static str = \"ignore-pass\";\n+    pub const FAILURE_STATUS: &'static str = \"failure-status\";\n+    pub const RUN_RUSTFIX: &'static str = \"run-rustfix\";\n+    pub const RUSTFIX_ONLY_MACHINE_APPLICABLE: &'static str = \"rustfix-only-machine-applicable\";\n+    pub const ASSEMBLY_OUTPUT: &'static str = \"assembly-output\";\n+    pub const STDERR_PER_BITWIDTH: &'static str = \"stderr-per-bitwidth\";\n+    pub const INCREMENTAL: &'static str = \"incremental\";\n+    pub const KNOWN_BUG: &'static str = \"known-bug\";\n+}\n+\n impl TestProps {\n     pub fn new() -> Self {\n         TestProps {\n@@ -176,6 +217,7 @@ impl TestProps {\n             forbid_output: vec![],\n             incremental_dir: None,\n             incremental: false,\n+            known_bug: false,\n             pass_mode: None,\n             fail_mode: None,\n             ignore_pass: false,\n@@ -228,11 +270,16 @@ impl TestProps {\n                     return;\n                 }\n \n-                if let Some(ep) = config.parse_error_pattern(ln) {\n-                    self.error_patterns.push(ep);\n-                }\n+                use directives::*;\n \n-                if let Some(flags) = config.parse_compile_flags(ln) {\n+                config.push_name_value_directive(\n+                    ln,\n+                    ERROR_PATTERN,\n+                    &mut self.error_patterns,\n+                    |r| r,\n+                );\n+\n+                if let Some(flags) = config.parse_name_value_directive(ln, COMPILE_FLAGS) {\n                     self.compile_flags.extend(flags.split_whitespace().map(|s| s.to_owned()));\n                 }\n \n@@ -243,93 +290,73 @@ impl TestProps {\n \n                 config.parse_and_update_revisions(ln, &mut self.revisions);\n \n-                if self.run_flags.is_none() {\n-                    self.run_flags = config.parse_run_flags(ln);\n-                }\n+                config.set_name_value_directive(ln, RUN_FLAGS, &mut self.run_flags, |r| r);\n \n                 if self.pp_exact.is_none() {\n                     self.pp_exact = config.parse_pp_exact(ln, testfile);\n                 }\n \n-                if !self.should_ice {\n-                    self.should_ice = config.parse_should_ice(ln);\n-                }\n-\n-                if !self.build_aux_docs {\n-                    self.build_aux_docs = config.parse_build_aux_docs(ln);\n-                }\n-\n-                if !self.force_host {\n-                    self.force_host = config.parse_force_host(ln);\n-                }\n-\n-                if !self.check_stdout {\n-                    self.check_stdout = config.parse_check_stdout(ln);\n-                }\n-\n-                if !self.check_run_results {\n-                    self.check_run_results = config.parse_check_run_results(ln);\n-                }\n-\n-                if !self.dont_check_compiler_stdout {\n-                    self.dont_check_compiler_stdout = config.parse_dont_check_compiler_stdout(ln);\n-                }\n-\n-                if !self.dont_check_compiler_stderr {\n-                    self.dont_check_compiler_stderr = config.parse_dont_check_compiler_stderr(ln);\n-                }\n-\n-                if !self.no_prefer_dynamic {\n-                    self.no_prefer_dynamic = config.parse_no_prefer_dynamic(ln);\n-                }\n-\n-                if !self.pretty_expanded {\n-                    self.pretty_expanded = config.parse_pretty_expanded(ln);\n-                }\n-\n-                if let Some(m) = config.parse_pretty_mode(ln) {\n+                config.set_name_directive(ln, SHOULD_ICE, &mut self.should_ice);\n+                config.set_name_directive(ln, BUILD_AUX_DOCS, &mut self.build_aux_docs);\n+                config.set_name_directive(ln, FORCE_HOST, &mut self.force_host);\n+                config.set_name_directive(ln, CHECK_STDOUT, &mut self.check_stdout);\n+                config.set_name_directive(ln, CHECK_RUN_RESULTS, &mut self.check_run_results);\n+                config.set_name_directive(\n+                    ln,\n+                    DONT_CHECK_COMPILER_STDOUT,\n+                    &mut self.dont_check_compiler_stdout,\n+                );\n+                config.set_name_directive(\n+                    ln,\n+                    DONT_CHECK_COMPILER_STDERR,\n+                    &mut self.dont_check_compiler_stderr,\n+                );\n+                config.set_name_directive(ln, NO_PREFER_DYNAMIC, &mut self.no_prefer_dynamic);\n+                config.set_name_directive(ln, PRETTY_EXPANDED, &mut self.pretty_expanded);\n+\n+                if let Some(m) = config.parse_name_value_directive(ln, PRETTY_MODE) {\n                     self.pretty_mode = m;\n                 }\n \n-                if !self.pretty_compare_only {\n-                    self.pretty_compare_only = config.parse_pretty_compare_only(ln);\n-                }\n-\n-                if let Some(ab) = config.parse_aux_build(ln) {\n-                    self.aux_builds.push(ab);\n-                }\n-\n-                if let Some(ac) = config.parse_aux_crate(ln) {\n-                    self.aux_crates.push(ac);\n-                }\n-\n-                if let Some(ee) = config.parse_env(ln, \"exec-env\") {\n-                    self.exec_env.push(ee);\n-                }\n-\n-                if let Some(ee) = config.parse_env(ln, \"rustc-env\") {\n-                    self.rustc_env.push(ee);\n-                }\n-\n-                if let Some(ev) = config.parse_name_value_directive(ln, \"unset-rustc-env\") {\n-                    self.unset_rustc_env.push(ev);\n-                }\n-\n-                if let Some(of) = config.parse_forbid_output(ln) {\n-                    self.forbid_output.push(of);\n-                }\n-\n-                if !self.check_test_line_numbers_match {\n-                    self.check_test_line_numbers_match =\n-                        config.parse_check_test_line_numbers_match(ln);\n-                }\n+                config.set_name_directive(ln, PRETTY_COMPARE_ONLY, &mut self.pretty_compare_only);\n+                config.push_name_value_directive(ln, AUX_BUILD, &mut self.aux_builds, |r| {\n+                    r.trim().to_string()\n+                });\n+                config.push_name_value_directive(\n+                    ln,\n+                    AUX_CRATE,\n+                    &mut self.aux_crates,\n+                    Config::parse_aux_crate,\n+                );\n+                config.push_name_value_directive(\n+                    ln,\n+                    EXEC_ENV,\n+                    &mut self.exec_env,\n+                    Config::parse_env,\n+                );\n+                config.push_name_value_directive(\n+                    ln,\n+                    RUSTC_ENV,\n+                    &mut self.rustc_env,\n+                    Config::parse_env,\n+                );\n+                config.push_name_value_directive(\n+                    ln,\n+                    UNSET_RUSTC_ENV,\n+                    &mut self.unset_rustc_env,\n+                    |r| r,\n+                );\n+                config.push_name_value_directive(ln, FORBID_OUTPUT, &mut self.forbid_output, |r| r);\n+                config.set_name_directive(\n+                    ln,\n+                    CHECK_TEST_LINE_NUMBERS_MATCH,\n+                    &mut self.check_test_line_numbers_match,\n+                );\n \n                 self.update_pass_mode(ln, cfg, config);\n                 self.update_fail_mode(ln, config);\n \n-                if !self.ignore_pass {\n-                    self.ignore_pass = config.parse_ignore_pass(ln);\n-                }\n+                config.set_name_directive(ln, IGNORE_PASS, &mut self.ignore_pass);\n \n                 if let Some(rule) = config.parse_custom_normalization(ln, \"normalize-stdout\") {\n                     self.normalize_stdout.push(rule);\n@@ -338,30 +365,28 @@ impl TestProps {\n                     self.normalize_stderr.push(rule);\n                 }\n \n-                if let Some(code) = config.parse_failure_status(ln) {\n+                if let Some(code) = config\n+                    .parse_name_value_directive(ln, FAILURE_STATUS)\n+                    .and_then(|code| code.trim().parse::<i32>().ok())\n+                {\n                     self.failure_status = code;\n                 }\n \n-                if !self.run_rustfix {\n-                    self.run_rustfix = config.parse_run_rustfix(ln);\n-                }\n-\n-                if !self.rustfix_only_machine_applicable {\n-                    self.rustfix_only_machine_applicable =\n-                        config.parse_rustfix_only_machine_applicable(ln);\n-                }\n-\n-                if self.assembly_output.is_none() {\n-                    self.assembly_output = config.parse_assembly_output(ln);\n-                }\n-\n-                if !self.stderr_per_bitwidth {\n-                    self.stderr_per_bitwidth = config.parse_stderr_per_bitwidth(ln);\n-                }\n-\n-                if !self.incremental {\n-                    self.incremental = config.parse_incremental(ln);\n-                }\n+                config.set_name_directive(ln, RUN_RUSTFIX, &mut self.run_rustfix);\n+                config.set_name_directive(\n+                    ln,\n+                    RUSTFIX_ONLY_MACHINE_APPLICABLE,\n+                    &mut self.rustfix_only_machine_applicable,\n+                );\n+                config.set_name_value_directive(\n+                    ln,\n+                    ASSEMBLY_OUTPUT,\n+                    &mut self.assembly_output,\n+                    |r| r.trim().to_string(),\n+                );\n+                config.set_name_directive(ln, STDERR_PER_BITWIDTH, &mut self.stderr_per_bitwidth);\n+                config.set_name_directive(ln, INCREMENTAL, &mut self.incremental);\n+                config.set_name_directive(ln, KNOWN_BUG, &mut self.known_bug);\n             });\n         }\n \n@@ -503,33 +528,12 @@ fn iter_header<R: Read>(testfile: &Path, rdr: R, it: &mut dyn FnMut(Option<&str>\n }\n \n impl Config {\n-    fn parse_should_ice(&self, line: &str) -> bool {\n-        self.parse_name_directive(line, \"should-ice\")\n-    }\n-    fn parse_error_pattern(&self, line: &str) -> Option<String> {\n-        self.parse_name_value_directive(line, \"error-pattern\")\n-    }\n-\n-    fn parse_forbid_output(&self, line: &str) -> Option<String> {\n-        self.parse_name_value_directive(line, \"forbid-output\")\n-    }\n-\n-    fn parse_aux_build(&self, line: &str) -> Option<String> {\n-        self.parse_name_value_directive(line, \"aux-build\").map(|r| r.trim().to_string())\n-    }\n-\n-    fn parse_aux_crate(&self, line: &str) -> Option<(String, String)> {\n-        self.parse_name_value_directive(line, \"aux-crate\").map(|r| {\n-            let mut parts = r.trim().splitn(2, '=');\n-            (\n-                parts.next().expect(\"missing aux-crate name (e.g. log=log.rs)\").to_string(),\n-                parts.next().expect(\"missing aux-crate value (e.g. log=log.rs)\").to_string(),\n-            )\n-        })\n-    }\n-\n-    fn parse_compile_flags(&self, line: &str) -> Option<String> {\n-        self.parse_name_value_directive(line, \"compile-flags\")\n+    fn parse_aux_crate(r: String) -> (String, String) {\n+        let mut parts = r.trim().splitn(2, '=');\n+        (\n+            parts.next().expect(\"missing aux-crate name (e.g. log=log.rs)\").to_string(),\n+            parts.next().expect(\"missing aux-crate value (e.g. log=log.rs)\").to_string(),\n+        )\n     }\n \n     fn parse_and_update_revisions(&self, line: &str, existing: &mut Vec<String>) {\n@@ -544,87 +548,18 @@ impl Config {\n         }\n     }\n \n-    fn parse_run_flags(&self, line: &str) -> Option<String> {\n-        self.parse_name_value_directive(line, \"run-flags\")\n-    }\n-\n-    fn parse_force_host(&self, line: &str) -> bool {\n-        self.parse_name_directive(line, \"force-host\")\n-    }\n-\n-    fn parse_build_aux_docs(&self, line: &str) -> bool {\n-        self.parse_name_directive(line, \"build-aux-docs\")\n-    }\n-\n-    fn parse_check_stdout(&self, line: &str) -> bool {\n-        self.parse_name_directive(line, \"check-stdout\")\n-    }\n-\n-    fn parse_check_run_results(&self, line: &str) -> bool {\n-        self.parse_name_directive(line, \"check-run-results\")\n-    }\n-\n-    fn parse_dont_check_compiler_stdout(&self, line: &str) -> bool {\n-        self.parse_name_directive(line, \"dont-check-compiler-stdout\")\n-    }\n-\n-    fn parse_dont_check_compiler_stderr(&self, line: &str) -> bool {\n-        self.parse_name_directive(line, \"dont-check-compiler-stderr\")\n-    }\n-\n-    fn parse_no_prefer_dynamic(&self, line: &str) -> bool {\n-        self.parse_name_directive(line, \"no-prefer-dynamic\")\n-    }\n-\n-    fn parse_pretty_expanded(&self, line: &str) -> bool {\n-        self.parse_name_directive(line, \"pretty-expanded\")\n-    }\n-\n-    fn parse_pretty_mode(&self, line: &str) -> Option<String> {\n-        self.parse_name_value_directive(line, \"pretty-mode\")\n-    }\n-\n-    fn parse_pretty_compare_only(&self, line: &str) -> bool {\n-        self.parse_name_directive(line, \"pretty-compare-only\")\n-    }\n-\n-    fn parse_failure_status(&self, line: &str) -> Option<i32> {\n-        match self.parse_name_value_directive(line, \"failure-status\") {\n-            Some(code) => code.trim().parse::<i32>().ok(),\n-            _ => None,\n-        }\n-    }\n-\n-    fn parse_check_test_line_numbers_match(&self, line: &str) -> bool {\n-        self.parse_name_directive(line, \"check-test-line-numbers-match\")\n-    }\n-\n-    fn parse_ignore_pass(&self, line: &str) -> bool {\n-        self.parse_name_directive(line, \"ignore-pass\")\n-    }\n-\n-    fn parse_stderr_per_bitwidth(&self, line: &str) -> bool {\n-        self.parse_name_directive(line, \"stderr-per-bitwidth\")\n-    }\n-\n-    fn parse_assembly_output(&self, line: &str) -> Option<String> {\n-        self.parse_name_value_directive(line, \"assembly-output\").map(|r| r.trim().to_string())\n-    }\n-\n-    fn parse_env(&self, line: &str, name: &str) -> Option<(String, String)> {\n-        self.parse_name_value_directive(line, name).map(|nv| {\n-            // nv is either FOO or FOO=BAR\n-            let mut strs: Vec<String> = nv.splitn(2, '=').map(str::to_owned).collect();\n+    fn parse_env(nv: String) -> (String, String) {\n+        // nv is either FOO or FOO=BAR\n+        let mut strs: Vec<String> = nv.splitn(2, '=').map(str::to_owned).collect();\n \n-            match strs.len() {\n-                1 => (strs.pop().unwrap(), String::new()),\n-                2 => {\n-                    let end = strs.pop().unwrap();\n-                    (strs.pop().unwrap(), end)\n-                }\n-                n => panic!(\"Expected 1 or 2 strings, not {}\", n),\n+        match strs.len() {\n+            1 => (strs.pop().unwrap(), String::new()),\n+            2 => {\n+                let end = strs.pop().unwrap();\n+                (strs.pop().unwrap(), end)\n             }\n-        })\n+            n => panic!(\"Expected 1 or 2 strings, not {}\", n),\n+        }\n     }\n \n     fn parse_pp_exact(&self, line: &str, testfile: &Path) -> Option<PathBuf> {\n@@ -736,20 +671,38 @@ impl Config {\n         None\n     }\n \n-    fn parse_run_rustfix(&self, line: &str) -> bool {\n-        self.parse_name_directive(line, \"run-rustfix\")\n+    fn parse_edition(&self, line: &str) -> Option<String> {\n+        self.parse_name_value_directive(line, \"edition\")\n     }\n \n-    fn parse_rustfix_only_machine_applicable(&self, line: &str) -> bool {\n-        self.parse_name_directive(line, \"rustfix-only-machine-applicable\")\n+    fn set_name_directive(&self, line: &str, directive: &str, value: &mut bool) {\n+        if !*value {\n+            *value = self.parse_name_directive(line, directive)\n+        }\n     }\n \n-    fn parse_edition(&self, line: &str) -> Option<String> {\n-        self.parse_name_value_directive(line, \"edition\")\n+    fn set_name_value_directive<T>(\n+        &self,\n+        line: &str,\n+        directive: &str,\n+        value: &mut Option<T>,\n+        parse: impl FnOnce(String) -> T,\n+    ) {\n+        if value.is_none() {\n+            *value = self.parse_name_value_directive(line, directive).map(parse);\n+        }\n     }\n \n-    fn parse_incremental(&self, line: &str) -> bool {\n-        self.parse_name_directive(line, \"incremental\")\n+    fn push_name_value_directive<T>(\n+        &self,\n+        line: &str,\n+        directive: &str,\n+        values: &mut Vec<T>,\n+        parse: impl FnOnce(String) -> T,\n+    ) {\n+        if let Some(value) = self.parse_name_value_directive(line, directive).map(parse) {\n+            values.push(value);\n+        }\n     }\n }\n \n@@ -863,6 +816,7 @@ pub fn make_test_description<R: Read>(\n     let has_msan = util::MSAN_SUPPORTED_TARGETS.contains(&&*config.target);\n     let has_tsan = util::TSAN_SUPPORTED_TARGETS.contains(&&*config.target);\n     let has_hwasan = util::HWASAN_SUPPORTED_TARGETS.contains(&&*config.target);\n+    let has_memtag = util::MEMTAG_SUPPORTED_TARGETS.contains(&&*config.target);\n     // for `-Z gcc-ld=lld`\n     let has_rust_lld = config\n         .compile_lib_path\n@@ -899,9 +853,11 @@ pub fn make_test_description<R: Read>(\n         ignore |= !has_msan && config.parse_name_directive(ln, \"needs-sanitizer-memory\");\n         ignore |= !has_tsan && config.parse_name_directive(ln, \"needs-sanitizer-thread\");\n         ignore |= !has_hwasan && config.parse_name_directive(ln, \"needs-sanitizer-hwaddress\");\n+        ignore |= !has_memtag && config.parse_name_directive(ln, \"needs-sanitizer-memtag\");\n         ignore |= config.target_panic == PanicStrategy::Abort\n             && config.parse_name_directive(ln, \"needs-unwind\");\n-        ignore |= config.target == \"wasm32-unknown-unknown\" && config.parse_check_run_results(ln);\n+        ignore |= config.target == \"wasm32-unknown-unknown\"\n+            && config.parse_name_directive(ln, directives::CHECK_RUN_RESULTS);\n         ignore |= config.debugger == Some(Debugger::Cdb) && ignore_cdb(config, ln);\n         ignore |= config.debugger == Some(Debugger::Gdb) && ignore_gdb(config, ln);\n         ignore |= config.debugger == Some(Debugger::Lldb) && ignore_lldb(config, ln);"}, {"sha": "7fe7db0801b47d734750b8317b6edee950881582", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -1274,6 +1274,16 @@ impl<'test> TestCx<'test> {\n             self.fatal_proc_rec(\"process did not return an error status\", proc_res);\n         }\n \n+        if self.props.known_bug {\n+            if !expected_errors.is_empty() {\n+                self.fatal_proc_rec(\n+                    \"`known_bug` tests should not have an expected errors\",\n+                    proc_res,\n+                );\n+            }\n+            return;\n+        }\n+\n         // On Windows, keep all '\\' path separators to match the paths reported in the JSON output\n         // from the compiler\n         let os_file_name = self.testpaths.file.display().to_string();\n@@ -1310,6 +1320,7 @@ impl<'test> TestCx<'test> {\n                 }\n \n                 None => {\n+                    // If the test is a known bug, don't require that the error is annotated\n                     if self.is_unexpected_compiler_message(actual_error, expect_help, expect_note) {\n                         self.error(&format!(\n                             \"{}:{}: unexpected {}: '{}'\","}, {"sha": "bed509d77be77f32be5d95cebc58c214b49c3937", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -117,6 +117,9 @@ pub const TSAN_SUPPORTED_TARGETS: &[&str] = &[\n pub const HWASAN_SUPPORTED_TARGETS: &[&str] =\n     &[\"aarch64-linux-android\", \"aarch64-unknown-linux-gnu\"];\n \n+pub const MEMTAG_SUPPORTED_TARGETS: &[&str] =\n+    &[\"aarch64-linux-android\", \"aarch64-unknown-linux-gnu\"];\n+\n const BIG_ENDIAN: &[&str] = &[\n     \"aarch64_be\",\n     \"armebv7r\","}, {"sha": "95847dcd46be5e2b8f212230058aa2958f39fda0", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1882597991277f9467d2a187f180f76eecf45c9c/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=1882597991277f9467d2a187f180f76eecf45c9c", "patch": "@@ -7,7 +7,7 @@ use std::path::Path;\n \n const ENTRY_LIMIT: usize = 1000;\n // FIXME: The following limits should be reduced eventually.\n-const ROOT_ENTRY_LIMIT: usize = 982;\n+const ROOT_ENTRY_LIMIT: usize = 983;\n const ISSUES_ENTRY_LIMIT: usize = 2310;\n \n fn check_entries(path: &Path, bad: &mut bool) {"}]}