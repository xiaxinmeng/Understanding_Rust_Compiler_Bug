{"sha": "63ecd6aa0f2c8a6807528d8bdf5eb30211b3fcd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzZWNkNmFhMGYyYzhhNjgwNzUyOGQ4YmRmNWViMzAyMTFiM2ZjZDQ=", "commit": {"author": {"name": "Masaki Hara", "email": "ackie.h.gmai@gmail.com", "date": "2017-05-09T13:32:29Z"}, "committer": {"name": "Masaki Hara", "email": "ackie.h.gmai@gmail.com", "date": "2017-05-09T13:32:29Z"}, "message": "Prohibit parenthesized params in more types.", "tree": {"sha": "9267b459cdcc2195ff46b2c45444fb50c1315740", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9267b459cdcc2195ff46b2c45444fb50c1315740"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63ecd6aa0f2c8a6807528d8bdf5eb30211b3fcd4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJZEcTtAAoJEHynqF4EmoLoyAQP/A14p/S3XGTi3FVFdzZlIrvN\nsAWMNIu38+P550D2189g4/NYAihMM7ZymrlTkFh5EOHNVQeZDSdc0vzoH4gNMW+/\n1cLf/bGfn6OfWv6ZQ9tdZP9OH/gzaLmlh6zSc2TRjuPXsVWCKf4ctokcu717A7i5\n89GqqjWqDm4Aceuz2tmZj/CRprJ2Schd7QzPwhHB+UcudcNEz6ydixKGdLoVxWAT\nvNB65N8IPcAZqoYND8KIJieBXbK3pYPNKrbUYJMisJoW27c92QeT9F81JNjfVAgs\n5PUWIYb/tbenz2lVOc/Fj4C5DGULAnCIYsgy5AZuNIDQzSEEty/wMUQ7PNX+jibL\nbZAa0XJJwC8L7sidHrV+7RmMa24R4OYNiKxiXJ8I/aGGTOAcMS205YZM9TwZQAZc\nA0Jb9WNcG53No8e/pPzXaGD1JUiTvyU4KbwTmLxH8iAwTRDJj+EN8AkWpcMMs2DF\nWNR7iXQpEQQ4Ugn6XPeJWq+cbS9frsafihV8NkIo9hDoPoZ7DI/pehRKxhALUwPb\n+iphMECCAfVC/dj2+L34Ss2ENjg119feCsFBDT8vmApyL1IxOu0BtOISkadTkXW/\n7z9IpS4WLkK5xAUOfXYSeYsWriiG7iBkJ8jflGz/h9qlJRYpUMKSJ7u0zcIPS5OA\nSqh41OwRqp7AVemfjn66\n=VkSU\n-----END PGP SIGNATURE-----", "payload": "tree 9267b459cdcc2195ff46b2c45444fb50c1315740\nparent bedd7da3d28d69520f33ac6a585df87ef1373a26\nauthor Masaki Hara <ackie.h.gmai@gmail.com> 1494336749 +0900\ncommitter Masaki Hara <ackie.h.gmai@gmail.com> 1494336749 +0900\n\nProhibit parenthesized params in more types.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63ecd6aa0f2c8a6807528d8bdf5eb30211b3fcd4", "html_url": "https://github.com/rust-lang/rust/commit/63ecd6aa0f2c8a6807528d8bdf5eb30211b3fcd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63ecd6aa0f2c8a6807528d8bdf5eb30211b3fcd4/comments", "author": {"login": "qnighy", "id": 41755, "node_id": "MDQ6VXNlcjQxNzU1", "avatar_url": "https://avatars.githubusercontent.com/u/41755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qnighy", "html_url": "https://github.com/qnighy", "followers_url": "https://api.github.com/users/qnighy/followers", "following_url": "https://api.github.com/users/qnighy/following{/other_user}", "gists_url": "https://api.github.com/users/qnighy/gists{/gist_id}", "starred_url": "https://api.github.com/users/qnighy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qnighy/subscriptions", "organizations_url": "https://api.github.com/users/qnighy/orgs", "repos_url": "https://api.github.com/users/qnighy/repos", "events_url": "https://api.github.com/users/qnighy/events{/privacy}", "received_events_url": "https://api.github.com/users/qnighy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "qnighy", "id": 41755, "node_id": "MDQ6VXNlcjQxNzU1", "avatar_url": "https://avatars.githubusercontent.com/u/41755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qnighy", "html_url": "https://github.com/qnighy", "followers_url": "https://api.github.com/users/qnighy/followers", "following_url": "https://api.github.com/users/qnighy/following{/other_user}", "gists_url": "https://api.github.com/users/qnighy/gists{/gist_id}", "starred_url": "https://api.github.com/users/qnighy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qnighy/subscriptions", "organizations_url": "https://api.github.com/users/qnighy/orgs", "repos_url": "https://api.github.com/users/qnighy/repos", "events_url": "https://api.github.com/users/qnighy/events{/privacy}", "received_events_url": "https://api.github.com/users/qnighy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bedd7da3d28d69520f33ac6a585df87ef1373a26", "url": "https://api.github.com/repos/rust-lang/rust/commits/bedd7da3d28d69520f33ac6a585df87ef1373a26", "html_url": "https://github.com/rust-lang/rust/commit/bedd7da3d28d69520f33ac6a585df87ef1373a26"}], "stats": {"total": 43, "additions": 39, "deletions": 4}, "files": [{"sha": "93411493b178f41864d714416a265c520fd551dd", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/63ecd6aa0f2c8a6807528d8bdf5eb30211b3fcd4/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ecd6aa0f2c8a6807528d8bdf5eb30211b3fcd4/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=63ecd6aa0f2c8a6807528d8bdf5eb30211b3fcd4", "patch": "@@ -161,10 +161,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         match item_segment.parameters {\n             hir::AngleBracketedParameters(_) => {}\n             hir::ParenthesizedParameters(..) => {\n-                struct_span_err!(tcx.sess, span, E0214,\n-                          \"parenthesized parameters may only be used with a trait\")\n-                    .span_label(span, \"only traits may use parentheses\")\n-                    .emit();\n+                self.prohibit_parenthesized_params(item_segment);\n \n                 return Substs::for_item(tcx, def_id, |_, _| {\n                     tcx.types.re_static\n@@ -948,6 +945,10 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n \n     pub fn prohibit_type_params(&self, segments: &[hir::PathSegment]) {\n         for segment in segments {\n+            if let hir::ParenthesizedParameters(_) = segment.parameters {\n+                self.prohibit_parenthesized_params(segment);\n+                break;\n+            }\n             for typ in segment.parameters.types() {\n                 struct_span_err!(self.tcx().sess, typ.span, E0109,\n                                  \"type parameters are not allowed on this type\")\n@@ -970,6 +971,15 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         }\n     }\n \n+    pub fn prohibit_parenthesized_params(&self, segment: &hir::PathSegment) {\n+        if let hir::ParenthesizedParameters(ref data) = segment.parameters {\n+            struct_span_err!(self.tcx().sess, data.span, E0214,\n+                      \"parenthesized parameters may only be used with a trait\")\n+                .span_label(data.span, \"only traits may use parentheses\")\n+                .emit();\n+        }\n+    }\n+\n     pub fn prohibit_projection(&self, span: Span) {\n         let mut err = struct_span_err!(self.tcx().sess, span, E0229,\n                                        \"associated type bindings are not allowed here\");"}, {"sha": "2fb22e68bebdb7346966dc5d4fba652308edb3a9", "filename": "src/test/compile-fail/issue-32995.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/63ecd6aa0f2c8a6807528d8bdf5eb30211b3fcd4/src%2Ftest%2Fcompile-fail%2Fissue-32995.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ecd6aa0f2c8a6807528d8bdf5eb30211b3fcd4/src%2Ftest%2Fcompile-fail%2Fissue-32995.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-32995.rs?ref=63ecd6aa0f2c8a6807528d8bdf5eb30211b3fcd4", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let s: String() = String::from(\"foo\");\n+    //~^ ERROR parenthesized parameters may only be used with a trait\n+\n+    let x: usize() = 1;\n+    //~^ ERROR parenthesized parameters may only be used with a trait\n+\n+    let b: ::std::boxed()::Box<_> = Box::new(1);\n+    //~^ ERROR parenthesized parameters may only be used with a trait\n+}\n+\n+fn foo<X:Default>() {\n+    let d : X() = Default::default();\n+    //~^ ERROR parenthesized parameters may only be used with a trait\n+}"}]}