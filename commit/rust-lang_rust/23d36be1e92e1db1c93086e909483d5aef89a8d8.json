{"sha": "23d36be1e92e1db1c93086e909483d5aef89a8d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzZDM2YmUxZTkyZTFkYjFjOTMwODZlOTA5NDgzZDVhZWY4OWE4ZDg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-18T23:23:56Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-18T23:23:56Z"}, "message": "core: Define futures in terms of local functions, of which port::recv is one possibility", "tree": {"sha": "976b4a2a0ab47b24e6a1fc307727116ca50d7a00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/976b4a2a0ab47b24e6a1fc307727116ca50d7a00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23d36be1e92e1db1c93086e909483d5aef89a8d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23d36be1e92e1db1c93086e909483d5aef89a8d8", "html_url": "https://github.com/rust-lang/rust/commit/23d36be1e92e1db1c93086e909483d5aef89a8d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23d36be1e92e1db1c93086e909483d5aef89a8d8/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2294a2d9975c30a6dcba17778d2d8f242be237f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2294a2d9975c30a6dcba17778d2d8f242be237f", "html_url": "https://github.com/rust-lang/rust/commit/d2294a2d9975c30a6dcba17778d2d8f242be237f"}], "stats": {"total": 63, "additions": 43, "deletions": 20}, "files": [{"sha": "fe535ebce5b4aec379deb80afbd1a5cd8f7c3cbc", "filename": "src/libcore/future.rs", "status": "modified", "additions": 43, "deletions": 20, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/23d36be1e92e1db1c93086e909483d5aef89a8d8/src%2Flibcore%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d36be1e92e1db1c93086e909483d5aef89a8d8/src%2Flibcore%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture.rs?ref=23d36be1e92e1db1c93086e909483d5aef89a8d8", "patch": "@@ -15,6 +15,7 @@ export future;\n export future::{};\n export from_value;\n export from_port;\n+export from_fn;\n export get;\n export with;\n export spawn;\n@@ -23,7 +24,7 @@ import either = either::t;\n \n #[doc = \"The future type\"]\n enum future<A> = {\n-    mutable v: either<@A, comm::port<A>>\n+    mutable v: either<@A, fn@() -> A>\n };\n \n #[doc = \"Methods on the `future` type\"]\n@@ -55,7 +56,7 @@ fn from_value<A>(+val: A) -> future<A> {\n     })\n }\n \n-fn from_port<A>(-port: comm::port<A>) -> future<A> {\n+fn from_port<A:send>(-port: comm::port<A>) -> future<A> {\n     #[doc = \"\n \n     Create a future from a port. The first time that the value is\n@@ -64,29 +65,24 @@ fn from_port<A>(-port: comm::port<A>) -> future<A> {\n \n     \"];\n \n-    future({\n-        mutable v: either::right(port)\n-    })\n+    from_fn {||\n+        comm::recv(port)\n+    }\n }\n \n-fn get<A:send>(future: future<A>) -> A {\n-    #[doc = \"Get the value of the future\"];\n+fn from_fn<A>(f: fn@() -> A) -> future<A> {\n+    #[doc = \"\n \n-    with(future) {|v| v }\n-}\n+    Create a future from a function. The first time that the value is\n+    requested it will be retreived by calling the function.\n \n-fn with<A:send,B>(future: future<A>, blk: fn(A) -> B) -> B {\n-    #[doc = \"Work with the value without copying it\"];\n+    Note that this function is a local function. It is not spawned into\n+    another task.\n+    \"];\n \n-    let v = alt future.v {\n-      either::left(v) { v }\n-      either::right(po) {\n-        let v = @comm::recv(po);\n-        future.v = either::left(v);\n-        v\n-      }\n-    };\n-    blk(*v)\n+    future({\n+        mutable v: either::right(f)\n+    })\n }\n \n fn spawn<A:send>(+blk: fn~() -> A) -> future<A> {\n@@ -105,6 +101,26 @@ fn spawn<A:send>(+blk: fn~() -> A) -> future<A> {\n     from_port(po)\n }\n \n+fn get<A:copy>(future: future<A>) -> A {\n+    #[doc = \"Get the value of the future\"];\n+\n+    with(future) {|v| v }\n+}\n+\n+fn with<A,B>(future: future<A>, blk: fn(A) -> B) -> B {\n+    #[doc = \"Work with the value without copying it\"];\n+\n+    let v = alt future.v {\n+      either::left(v) { v }\n+      either::right(f) {\n+        let v = @f();\n+        future.v = either::left(v);\n+        v\n+      }\n+    };\n+    blk(*v)\n+}\n+\n #[test]\n fn test_from_value() {\n     let f = from_value(\"snail\");\n@@ -120,6 +136,13 @@ fn test_from_port() {\n     assert get(f) == \"whale\";\n }\n \n+#[test]\n+fn test_from_fn() {\n+    let f = fn@() -> str { \"brail\" };\n+    let f = from_fn(f);\n+    assert get(f) == \"brail\";\n+}\n+\n #[test]\n fn test_iface_get() {\n     let f = from_value(\"fail\");"}]}