{"sha": "7cc97ebcbb3fe637e2467f2e4fc45d94dae013e8", "node_id": "C_kwDOAAsO6NoAKDdjYzk3ZWJjYmIzZmU2MzdlMjQ2N2YyZTRmYzQ1ZDk0ZGFlMDEzZTg", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-12T09:11:47Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-12T09:11:47Z"}, "message": "Extract global_asm module", "tree": {"sha": "47fa3ae3b6190166d9a7027d13e4b48065c27128", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47fa3ae3b6190166d9a7027d13e4b48065c27128"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cc97ebcbb3fe637e2467f2e4fc45d94dae013e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cc97ebcbb3fe637e2467f2e4fc45d94dae013e8", "html_url": "https://github.com/rust-lang/rust/commit/7cc97ebcbb3fe637e2467f2e4fc45d94dae013e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cc97ebcbb3fe637e2467f2e4fc45d94dae013e8/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5adc96532205a12c94c1407e6b6b35f7c7a2b64", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5adc96532205a12c94c1407e6b6b35f7c7a2b64", "html_url": "https://github.com/rust-lang/rust/commit/c5adc96532205a12c94c1407e6b6b35f7c7a2b64"}], "stats": {"total": 226, "additions": 119, "deletions": 107}, "files": [{"sha": "6482dce274676f44d049666d14603c29b1dc800f", "filename": "src/driver/aot.rs", "status": "modified", "additions": 2, "deletions": 107, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/7cc97ebcbb3fe637e2467f2e4fc45d94dae013e8/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cc97ebcbb3fe637e2467f2e4fc45d94dae013e8/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=7cc97ebcbb3fe637e2467f2e4fc45d94dae013e8", "patch": "@@ -1,9 +1,6 @@\n //! The AOT driver uses [`cranelift_object`] to write object files suitable for linking into a\n //! standalone executable.\n \n-use std::path::PathBuf;\n-\n-use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n use rustc_codegen_ssa::back::metadata::create_compressed_metadata_file;\n use rustc_codegen_ssa::{CodegenResults, CompiledModule, CrateInfo, ModuleKind};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n@@ -175,23 +172,7 @@ fn module_codegen(\n             }\n             MonoItem::Static(def_id) => crate::constant::codegen_static(tcx, &mut module, def_id),\n             MonoItem::GlobalAsm(item_id) => {\n-                let item = cx.tcx.hir().item(item_id);\n-                if let rustc_hir::ItemKind::GlobalAsm(asm) = item.kind {\n-                    if !asm.options.contains(InlineAsmOptions::ATT_SYNTAX) {\n-                        cx.global_asm.push_str(\"\\n.intel_syntax noprefix\\n\");\n-                    } else {\n-                        cx.global_asm.push_str(\"\\n.att_syntax\\n\");\n-                    }\n-                    for piece in asm.template {\n-                        match *piece {\n-                            InlineAsmTemplatePiece::String(ref s) => cx.global_asm.push_str(s),\n-                            InlineAsmTemplatePiece::Placeholder { .. } => todo!(),\n-                        }\n-                    }\n-                    cx.global_asm.push_str(\"\\n.att_syntax\\n\\n\");\n-                } else {\n-                    bug!(\"Expected GlobalAsm found {:?}\", item);\n-                }\n+                crate::global_asm::codegen_global_asm_item(tcx, &mut cx.global_asm, item_id);\n             }\n         }\n     }\n@@ -217,7 +198,7 @@ fn module_codegen(\n         )\n     });\n \n-    codegen_global_asm(tcx, cgu.name().as_str(), &cx.global_asm);\n+    crate::global_asm::compile_global_asm(tcx, cgu.name().as_str(), &cx.global_asm);\n \n     codegen_result\n }\n@@ -353,92 +334,6 @@ pub(crate) fn run_aot(\n     })\n }\n \n-fn codegen_global_asm(tcx: TyCtxt<'_>, cgu_name: &str, global_asm: &str) {\n-    use std::io::Write;\n-    use std::process::{Command, Stdio};\n-\n-    if global_asm.is_empty() {\n-        return;\n-    }\n-\n-    if cfg!(not(feature = \"inline_asm\"))\n-        || tcx.sess.target.is_like_osx\n-        || tcx.sess.target.is_like_windows\n-    {\n-        if global_asm.contains(\"__rust_probestack\") {\n-            return;\n-        }\n-\n-        // FIXME fix linker error on macOS\n-        if cfg!(not(feature = \"inline_asm\")) {\n-            tcx.sess.fatal(\n-                \"asm! and global_asm! support is disabled while compiling rustc_codegen_cranelift\",\n-            );\n-        } else {\n-            tcx.sess.fatal(\"asm! and global_asm! are not yet supported on macOS and Windows\");\n-        }\n-    }\n-\n-    let assembler = crate::toolchain::get_toolchain_binary(tcx.sess, \"as\");\n-    let linker = crate::toolchain::get_toolchain_binary(tcx.sess, \"ld\");\n-\n-    // Remove all LLVM style comments\n-    let global_asm = global_asm\n-        .lines()\n-        .map(|line| if let Some(index) = line.find(\"//\") { &line[0..index] } else { line })\n-        .collect::<Vec<_>>()\n-        .join(\"\\n\");\n-\n-    let output_object_file = tcx.output_filenames(()).temp_path(OutputType::Object, Some(cgu_name));\n-\n-    // Assemble `global_asm`\n-    let global_asm_object_file = add_file_stem_postfix(output_object_file.clone(), \".asm\");\n-    let mut child = Command::new(assembler)\n-        .arg(\"-o\")\n-        .arg(&global_asm_object_file)\n-        .stdin(Stdio::piped())\n-        .spawn()\n-        .expect(\"Failed to spawn `as`.\");\n-    child.stdin.take().unwrap().write_all(global_asm.as_bytes()).unwrap();\n-    let status = child.wait().expect(\"Failed to wait for `as`.\");\n-    if !status.success() {\n-        tcx.sess.fatal(&format!(\"Failed to assemble `{}`\", global_asm));\n-    }\n-\n-    // Link the global asm and main object file together\n-    let main_object_file = add_file_stem_postfix(output_object_file.clone(), \".main\");\n-    std::fs::rename(&output_object_file, &main_object_file).unwrap();\n-    let status = Command::new(linker)\n-        .arg(\"-r\") // Create a new object file\n-        .arg(\"-o\")\n-        .arg(output_object_file)\n-        .arg(&main_object_file)\n-        .arg(&global_asm_object_file)\n-        .status()\n-        .unwrap();\n-    if !status.success() {\n-        tcx.sess.fatal(&format!(\n-            \"Failed to link `{}` and `{}` together\",\n-            main_object_file.display(),\n-            global_asm_object_file.display(),\n-        ));\n-    }\n-\n-    std::fs::remove_file(global_asm_object_file).unwrap();\n-    std::fs::remove_file(main_object_file).unwrap();\n-}\n-\n-fn add_file_stem_postfix(mut path: PathBuf, postfix: &str) -> PathBuf {\n-    let mut new_filename = path.file_stem().unwrap().to_owned();\n-    new_filename.push(postfix);\n-    if let Some(extension) = path.extension() {\n-        new_filename.push(\".\");\n-        new_filename.push(extension);\n-    }\n-    path.set_file_name(new_filename);\n-    path\n-}\n-\n // Adapted from https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src/librustc_codegen_ssa/base.rs#L922-L953\n fn determine_cgu_reuse<'tcx>(tcx: TyCtxt<'tcx>, cgu: &CodegenUnit<'tcx>) -> CguReuse {\n     if !tcx.dep_graph.is_fully_enabled() {"}, {"sha": "5962a86a6864cc1ce6de5216cc095145598f479e", "filename": "src/global_asm.rs", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/7cc97ebcbb3fe637e2467f2e4fc45d94dae013e8/src%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cc97ebcbb3fe637e2467f2e4fc45d94dae013e8/src%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fglobal_asm.rs?ref=7cc97ebcbb3fe637e2467f2e4fc45d94dae013e8", "patch": "@@ -0,0 +1,116 @@\n+//! The AOT driver uses [`cranelift_object`] to write object files suitable for linking into a\n+//! standalone executable.\n+\n+use std::path::PathBuf;\n+\n+use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n+use rustc_hir::ItemId;\n+use rustc_session::config::OutputType;\n+\n+use crate::prelude::*;\n+\n+pub(crate) fn codegen_global_asm_item(tcx: TyCtxt<'_>, global_asm: &mut String, item_id: ItemId) {\n+    let item = tcx.hir().item(item_id);\n+    if let rustc_hir::ItemKind::GlobalAsm(asm) = item.kind {\n+        if !asm.options.contains(InlineAsmOptions::ATT_SYNTAX) {\n+            global_asm.push_str(\"\\n.intel_syntax noprefix\\n\");\n+        } else {\n+            global_asm.push_str(\"\\n.att_syntax\\n\");\n+        }\n+        for piece in asm.template {\n+            match *piece {\n+                InlineAsmTemplatePiece::String(ref s) => global_asm.push_str(s),\n+                InlineAsmTemplatePiece::Placeholder { .. } => todo!(),\n+            }\n+        }\n+        global_asm.push_str(\"\\n.att_syntax\\n\\n\");\n+    } else {\n+        bug!(\"Expected GlobalAsm found {:?}\", item);\n+    }\n+}\n+\n+pub(crate) fn compile_global_asm(tcx: TyCtxt<'_>, cgu_name: &str, global_asm: &str) {\n+    use std::io::Write;\n+    use std::process::{Command, Stdio};\n+\n+    if global_asm.is_empty() {\n+        return;\n+    }\n+\n+    if cfg!(not(feature = \"inline_asm\"))\n+        || tcx.sess.target.is_like_osx\n+        || tcx.sess.target.is_like_windows\n+    {\n+        if global_asm.contains(\"__rust_probestack\") {\n+            return;\n+        }\n+\n+        // FIXME fix linker error on macOS\n+        if cfg!(not(feature = \"inline_asm\")) {\n+            tcx.sess.fatal(\n+                \"asm! and global_asm! support is disabled while compiling rustc_codegen_cranelift\",\n+            );\n+        } else {\n+            tcx.sess.fatal(\"asm! and global_asm! are not yet supported on macOS and Windows\");\n+        }\n+    }\n+\n+    let assembler = crate::toolchain::get_toolchain_binary(tcx.sess, \"as\");\n+    let linker = crate::toolchain::get_toolchain_binary(tcx.sess, \"ld\");\n+\n+    // Remove all LLVM style comments\n+    let global_asm = global_asm\n+        .lines()\n+        .map(|line| if let Some(index) = line.find(\"//\") { &line[0..index] } else { line })\n+        .collect::<Vec<_>>()\n+        .join(\"\\n\");\n+\n+    let output_object_file = tcx.output_filenames(()).temp_path(OutputType::Object, Some(cgu_name));\n+\n+    // Assemble `global_asm`\n+    let global_asm_object_file = add_file_stem_postfix(output_object_file.clone(), \".asm\");\n+    let mut child = Command::new(assembler)\n+        .arg(\"-o\")\n+        .arg(&global_asm_object_file)\n+        .stdin(Stdio::piped())\n+        .spawn()\n+        .expect(\"Failed to spawn `as`.\");\n+    child.stdin.take().unwrap().write_all(global_asm.as_bytes()).unwrap();\n+    let status = child.wait().expect(\"Failed to wait for `as`.\");\n+    if !status.success() {\n+        tcx.sess.fatal(&format!(\"Failed to assemble `{}`\", global_asm));\n+    }\n+\n+    // Link the global asm and main object file together\n+    let main_object_file = add_file_stem_postfix(output_object_file.clone(), \".main\");\n+    std::fs::rename(&output_object_file, &main_object_file).unwrap();\n+    let status = Command::new(linker)\n+        .arg(\"-r\") // Create a new object file\n+        .arg(\"-o\")\n+        .arg(output_object_file)\n+        .arg(&main_object_file)\n+        .arg(&global_asm_object_file)\n+        .status()\n+        .unwrap();\n+    if !status.success() {\n+        tcx.sess.fatal(&format!(\n+            \"Failed to link `{}` and `{}` together\",\n+            main_object_file.display(),\n+            global_asm_object_file.display(),\n+        ));\n+    }\n+\n+    std::fs::remove_file(global_asm_object_file).unwrap();\n+    std::fs::remove_file(main_object_file).unwrap();\n+}\n+\n+fn add_file_stem_postfix(mut path: PathBuf, postfix: &str) -> PathBuf {\n+    let mut new_filename = path.file_stem().unwrap().to_owned();\n+    new_filename.push(postfix);\n+    if let Some(extension) = path.extension() {\n+        new_filename.push(\".\");\n+        new_filename.push(extension);\n+    }\n+    path.set_file_name(new_filename);\n+    path\n+}"}, {"sha": "6ea160d26ce5e85fcdcbdff62c07967162ea3bda", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7cc97ebcbb3fe637e2467f2e4fc45d94dae013e8/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cc97ebcbb3fe637e2467f2e4fc45d94dae013e8/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=7cc97ebcbb3fe637e2467f2e4fc45d94dae013e8", "patch": "@@ -56,6 +56,7 @@ mod constant;\n mod debuginfo;\n mod discriminant;\n mod driver;\n+mod global_asm;\n mod inline_asm;\n mod intrinsics;\n mod linkage;"}]}