{"sha": "5f4cc602fd4d7fa773799e24cacfc64159b9c949", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmNGNjNjAyZmQ0ZDdmYTc3Mzc5OWUyNGNhY2ZjNjQxNTliOWM5NDk=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-08-03T10:07:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-03T10:07:45Z"}, "message": "Rollup merge of #87685 - notriddle:lazy-from-docs, r=dtolnay\n\nWrite docs for SyncOnceCell From and Default impl\n\nPart of #51430", "tree": {"sha": "66b2a278a1f58d2bc00b49269bc47d105398c7ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66b2a278a1f58d2bc00b49269bc47d105398c7ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f4cc602fd4d7fa773799e24cacfc64159b9c949", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhCRVyCRBK7hj4Ov3rIwAAwxoIAAZeOsEfwj2hTrZEqF79MvmT\n4lUOPnab870QKG01gZxlKVsmGkQjPA5ei7sbsq0wbH6D+gbC2hOjUP8znyoSvBIv\n6cV4XU3S/YCmg30Y87AgNvFqnTMxmDYOiXpfPtki0AzgwO9TLFOHKRmbTfMHTU+E\n2xESuPSqhapM9cnrPitHMMFBAjBn1vvjk0BDQ7J2HbbpYsIxLksaNQXG7f8hsQGh\njaCD8lUQaaxBppFP11hEWrs2kzK0+4VHyW0PUjEpx4F8MzJeD6Xipx3IKGs4ZIQ+\nBIEdGeEopZesmfV89qwpKNcJCsctjfMls185qcfR0MnqUUhkrzFnLfhgVUtxTn0=\n=xocV\n-----END PGP SIGNATURE-----\n", "payload": "tree 66b2a278a1f58d2bc00b49269bc47d105398c7ee\nparent a14b283022af5bdf7507f37e31638fc64ecca298\nparent e0172b380d8260883ddecc060996ea6f5441c54c\nauthor Yuki Okushi <jtitor@2k36.org> 1627985265 +0900\ncommitter GitHub <noreply@github.com> 1627985265 +0900\n\nRollup merge of #87685 - notriddle:lazy-from-docs, r=dtolnay\n\nWrite docs for SyncOnceCell From and Default impl\n\nPart of #51430\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f4cc602fd4d7fa773799e24cacfc64159b9c949", "html_url": "https://github.com/rust-lang/rust/commit/5f4cc602fd4d7fa773799e24cacfc64159b9c949", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f4cc602fd4d7fa773799e24cacfc64159b9c949/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a14b283022af5bdf7507f37e31638fc64ecca298", "url": "https://api.github.com/repos/rust-lang/rust/commits/a14b283022af5bdf7507f37e31638fc64ecca298", "html_url": "https://github.com/rust-lang/rust/commit/a14b283022af5bdf7507f37e31638fc64ecca298"}, {"sha": "e0172b380d8260883ddecc060996ea6f5441c54c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0172b380d8260883ddecc060996ea6f5441c54c", "html_url": "https://github.com/rust-lang/rust/commit/e0172b380d8260883ddecc060996ea6f5441c54c"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "132733a0525106034097eb4889776bdc2b5cf29a", "filename": "library/std/src/lazy.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5f4cc602fd4d7fa773799e24cacfc64159b9c949/library%2Fstd%2Fsrc%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f4cc602fd4d7fa773799e24cacfc64159b9c949/library%2Fstd%2Fsrc%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flazy.rs?ref=5f4cc602fd4d7fa773799e24cacfc64159b9c949", "patch": "@@ -87,6 +87,19 @@ impl<T: UnwindSafe> UnwindSafe for SyncOnceCell<T> {}\n \n #[unstable(feature = \"once_cell\", issue = \"74465\")]\n impl<T> Default for SyncOnceCell<T> {\n+    /// Creates a new empty cell.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// #![feature(once_cell)]\n+    ///\n+    /// use std::lazy::SyncOnceCell;\n+    ///\n+    /// fn main() {\n+    ///     assert_eq!(SyncOnceCell::<()>::new(), SyncOnceCell::default());\n+    /// }\n+    /// ```\n     fn default() -> SyncOnceCell<T> {\n         SyncOnceCell::new()\n     }\n@@ -118,6 +131,23 @@ impl<T: Clone> Clone for SyncOnceCell<T> {\n \n #[unstable(feature = \"once_cell\", issue = \"74465\")]\n impl<T> From<T> for SyncOnceCell<T> {\n+    /// Create a new cell with its contents set to `value`.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// #![feature(once_cell)]\n+    ///\n+    /// use std::lazy::SyncOnceCell;\n+    ///\n+    /// # fn main() -> Result<(), i32> {\n+    /// let a = SyncOnceCell::from(3);\n+    /// let b = SyncOnceCell::new();\n+    /// b.set(3)?;\n+    /// assert_eq!(a, b);\n+    /// Ok(())\n+    /// # }\n+    /// ```\n     fn from(value: T) -> Self {\n         let cell = Self::new();\n         match cell.set(value) {"}]}