{"sha": "b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "node_id": "C_kwDOAAsO6NoAKGI3NmZlYzNjYTg5YmEyNTUzMTZjMDEwMDY1ZjFmY2Y0ZDdjYmZjOWM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-14T01:29:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-14T01:29:58Z"}, "message": "Auto merge of #100511 - compiler-errors:rollup-vrte4w5, r=compiler-errors\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #100355 (rustdoc: Rename ``@has` FILE PATTERN` to ``@hasraw` FILE PATTERN`)\n - #100407 (avoid some int2ptr casts in thread_local_key tests)\n - #100434 (Fix HIR pretty printing of let else)\n - #100438 (Erase regions better in `promote_candidate`)\n - #100445 (adapt test for msan message change)\n - #100447 (Remove more Clean trait implementations)\n - #100464 (Make `[rust] use-lld=true` work on windows)\n - #100475 (Give a helpful diagnostic when the next struct field has an attribute)\n - #100490 (wf: correctly `shallow_resolve` consts)\n - #100501 (nicer Miri backtraces for from_exposed_addr)\n - #100509 (merge two test directories that mean the same thing)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "cba22d8a87a62adfc69df8238b4658bcae39c783", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cba22d8a87a62adfc69df8238b4658bcae39c783"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "html_url": "https://github.com/rust-lang/rust/commit/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75b7e52e92c3b00fc891b47f5b2efdff0a2be55a", "url": "https://api.github.com/repos/rust-lang/rust/commits/75b7e52e92c3b00fc891b47f5b2efdff0a2be55a", "html_url": "https://github.com/rust-lang/rust/commit/75b7e52e92c3b00fc891b47f5b2efdff0a2be55a"}, {"sha": "860e093efb78ff67ae7f2cb9bbb69637295214a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/860e093efb78ff67ae7f2cb9bbb69637295214a4", "html_url": "https://github.com/rust-lang/rust/commit/860e093efb78ff67ae7f2cb9bbb69637295214a4"}], "stats": {"total": 826, "additions": 473, "deletions": 353}, "files": [{"sha": "161c89e3242b9f660336c64da476154e48a9ca24", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -839,17 +839,12 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n             let mut promoted_operand = |ty, span| {\n                 promoted.span = span;\n                 promoted.local_decls[RETURN_PLACE] = LocalDecl::new(ty, span);\n+                let substs = tcx.erase_regions(InternalSubsts::identity_for_item(tcx, def.did));\n                 let _const = tcx.mk_const(ty::ConstS {\n                     ty,\n                     kind: ty::ConstKind::Unevaluated(ty::Unevaluated {\n                         def,\n-                        substs: InternalSubsts::for_item(tcx, def.did, |param, _| {\n-                            if let ty::GenericParamDefKind::Lifetime = param.kind {\n-                                tcx.lifetimes.re_erased.into()\n-                            } else {\n-                                tcx.mk_param_from_def(param)\n-                            }\n-                        }),\n+                        substs,\n                         promoted: Some(promoted_id),\n                     }),\n                 });"}, {"sha": "c7966b662de9fa403887ef5a30df1d64c8025f11", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -911,6 +911,10 @@ impl<'a> State<'a> {\n         if let Some(els) = els {\n             self.nbsp();\n             self.word_space(\"else\");\n+            // containing cbox, will be closed by print-block at `}`\n+            self.cbox(0);\n+            // head-box, will be closed by print-block after `{`\n+            self.ibox(0);\n             self.print_block(els);\n         }\n "}, {"sha": "ac55aee988376fe17e94abeb5cde221ebfcdc43d", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -1544,8 +1544,12 @@ impl<'a> Parser<'a> {\n                     }\n                 }\n \n-                if self.token.is_ident() {\n-                    // This is likely another field; emit the diagnostic and keep going\n+                if self.token.is_ident()\n+                    || (self.token.kind == TokenKind::Pound\n+                        && (self.look_ahead(1, |t| t == &token::OpenDelim(Delimiter::Bracket))))\n+                {\n+                    // This is likely another field, TokenKind::Pound is used for `#[..]` attribute for next field,\n+                    // emit the diagnostic and keep going\n                     err.span_suggestion(\n                         sp,\n                         \"try adding a comma\","}, {"sha": "7a5e67ff74b32daa78845d419948750b035633eb", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -31,26 +31,24 @@ pub fn obligations<'a, 'tcx>(\n                     if resolved_ty == ty {\n                         // No progress, bail out to prevent \"livelock\".\n                         return None;\n+                    } else {\n+                        resolved_ty\n                     }\n-\n-                    resolved_ty\n                 }\n                 _ => ty,\n             }\n             .into()\n         }\n         GenericArgKind::Const(ct) => {\n             match ct.kind() {\n-                ty::ConstKind::Infer(infer) => {\n-                    let resolved = infcx.shallow_resolve(infer);\n-                    if resolved == infer {\n+                ty::ConstKind::Infer(_) => {\n+                    let resolved = infcx.shallow_resolve(ct);\n+                    if resolved == ct {\n                         // No progress.\n                         return None;\n+                    } else {\n+                        resolved\n                     }\n-\n-                    infcx\n-                        .tcx\n-                        .mk_const(ty::ConstS { kind: ty::ConstKind::Infer(resolved), ty: ct.ty() })\n                 }\n                 _ => ct,\n             }"}, {"sha": "203531f66aa367e47ea00c1127124a27665b82ae", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -603,6 +603,7 @@ pub const fn invalid_mut<T>(addr: usize) -> *mut T {\n #[must_use]\n #[inline]\n #[unstable(feature = \"strict_provenance\", issue = \"95228\")]\n+#[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n pub fn from_exposed_addr<T>(addr: usize) -> *const T\n where\n     T: Sized,\n@@ -639,6 +640,7 @@ where\n #[must_use]\n #[inline]\n #[unstable(feature = \"strict_provenance\", issue = \"95228\")]\n+#[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n pub fn from_exposed_addr_mut<T>(addr: usize) -> *mut T\n where\n     T: Sized,"}, {"sha": "6f32b858f09666a2a22a4dadbf1c8e94d70c3b39", "filename": "library/std/src/sys_common/thread_local_key/tests.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_key%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_key%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_key%2Ftests.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -1,4 +1,5 @@\n use super::{Key, StaticKey};\n+use core::ptr;\n \n fn assert_sync<T: Sync>() {}\n fn assert_send<T: Send>() {}\n@@ -12,8 +13,8 @@ fn smoke() {\n     let k2 = Key::new(None);\n     assert!(k1.get().is_null());\n     assert!(k2.get().is_null());\n-    k1.set(1 as *mut _);\n-    k2.set(2 as *mut _);\n+    k1.set(ptr::invalid_mut(1));\n+    k2.set(ptr::invalid_mut(2));\n     assert_eq!(k1.get() as usize, 1);\n     assert_eq!(k2.get() as usize, 2);\n }\n@@ -26,8 +27,8 @@ fn statik() {\n     unsafe {\n         assert!(K1.get().is_null());\n         assert!(K2.get().is_null());\n-        K1.set(1 as *mut _);\n-        K2.set(2 as *mut _);\n+        K1.set(ptr::invalid_mut(1));\n+        K2.set(ptr::invalid_mut(2));\n         assert_eq!(K1.get() as usize, 1);\n         assert_eq!(K2.get() as usize, 2);\n     }"}, {"sha": "c3aabb16a9b9af131c70095d4ecc6e667efe5a07", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -658,7 +658,12 @@ impl Step for Rustc {\n \n         // With LLD, we can use ICF (identical code folding) to reduce the executable size\n         // of librustc_driver/rustc and to improve i-cache utilization.\n-        if builder.config.use_lld {\n+        //\n+        // -Wl,[link options] doesn't work on MSVC. However, /OPT:ICF (technically /OPT:REF,ICF)\n+        // is already on by default in MSVC optimized builds, which is interpreted as --icf=all:\n+        // https://github.com/llvm/llvm-project/blob/3329cec2f79185bafd678f310fafadba2a8c76d2/lld/COFF/Driver.cpp#L1746\n+        // https://github.com/rust-lang/rust/blob/f22819bcce4abaff7d1246a56eec493418f9f4ee/compiler/rustc_codegen_ssa/src/back/linker.rs#L827\n+        if builder.config.use_lld && !compiler.host.contains(\"msvc\") {\n             cargo.rustflag(\"-Clink-args=-Wl,--icf=all\");\n         }\n "}, {"sha": "baf95627c702820ea56bac0fea38841e73383ed6", "filename": "src/etc/htmldocck.py", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Fetc%2Fhtmldocck.py", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Fetc%2Fhtmldocck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fhtmldocck.py?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -41,15 +41,15 @@\n   `PATH` is relative to the output directory. It can be given as `-`\n   which repeats the most recently used `PATH`.\n \n-* `@has PATH PATTERN` and `@matches PATH PATTERN` checks for\n-  the occurrence of the given pattern `PATTERN` in the specified file.\n+* `@hasraw PATH PATTERN` and `@matchesraw PATH PATTERN` checks\n+  for the occurrence of the given pattern `PATTERN` in the specified file.\n   Only one occurrence of the pattern is enough.\n \n-  For `@has`, `PATTERN` is a whitespace-normalized (every consecutive\n+  For `@hasraw`, `PATTERN` is a whitespace-normalized (every consecutive\n   whitespace being replaced by one single space character) string.\n   The entire file is also whitespace-normalized including newlines.\n \n-  For `@matches`, `PATTERN` is a Python-supported regular expression.\n+  For `@matchesraw`, `PATTERN` is a Python-supported regular expression.\n   The file remains intact but the regexp is matched without the `MULTILINE`\n   and `IGNORECASE` options. You can still use a prefix `(?m)` or `(?i)`\n   to override them, and `\\A` and `\\Z` for definitely matching\n@@ -542,19 +542,23 @@ def get_nb_matching_elements(cache, c, regexp, stop_at_first):\n def check_command(c, cache):\n     try:\n         cerr = \"\"\n-        if c.cmd == 'has' or c.cmd == 'matches':  # string test\n-            regexp = (c.cmd == 'matches')\n-            if len(c.args) == 1 and not regexp:  # @has <path> = file existence\n+        if c.cmd in ['has', 'hasraw', 'matches', 'matchesraw']:  # string test\n+            regexp = c.cmd.startswith('matches')\n+\n+            # @has <path> = file existence\n+            if len(c.args) == 1 and not regexp and 'raw' not in c.cmd:\n                 try:\n                     cache.get_file(c.args[0])\n                     ret = True\n                 except FailedCheck as err:\n                     cerr = str(err)\n                     ret = False\n-            elif len(c.args) == 2:  # @has/matches <path> <pat> = string test\n+            # @hasraw/matchesraw <path> <pat> = string test\n+            elif len(c.args) == 2 and 'raw' in c.cmd:\n                 cerr = \"`PATTERN` did not match\"\n                 ret = check_string(cache.get_file(c.args[0]), c.args[1], regexp)\n-            elif len(c.args) == 3:  # @has/matches <path> <pat> <match> = XML tree test\n+            # @has/matches <path> <pat> <match> = XML tree test\n+            elif len(c.args) == 3 and 'raw' not in c.cmd:\n                 cerr = \"`XPATH PATTERN` did not match\"\n                 ret = get_nb_matching_elements(cache, c, regexp, True) != 0\n             else:"}, {"sha": "addd6ffa11e280d0ed81263c2d920bcc43a9c46a", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 33, "deletions": 25, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -1322,14 +1322,17 @@ fn clean_qpath<'tcx>(hir_ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> Type\n             let trait_def = cx.tcx.associated_item(p.res.def_id()).container_id(cx.tcx);\n             let trait_ = self::Path {\n                 res: Res::Def(DefKind::Trait, trait_def),\n-                segments: trait_segments.iter().map(|x| x.clean(cx)).collect(),\n+                segments: trait_segments.iter().map(|x| clean_path_segment(x, cx)).collect(),\n             };\n             register_res(cx, trait_.res);\n             let self_def_id = DefId::local(qself.hir_id.owner.local_def_index);\n             let self_type = clean_ty(qself, cx);\n             let should_show_cast = compute_should_show_cast(Some(self_def_id), &trait_, &self_type);\n             Type::QPath {\n-                assoc: Box::new(p.segments.last().expect(\"segments were empty\").clean(cx)),\n+                assoc: Box::new(clean_path_segment(\n+                    p.segments.last().expect(\"segments were empty\"),\n+                    cx,\n+                )),\n                 should_show_cast,\n                 self_type: Box::new(self_type),\n                 trait_,\n@@ -1349,7 +1352,7 @@ fn clean_qpath<'tcx>(hir_ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> Type\n             let self_type = clean_ty(qself, cx);\n             let should_show_cast = compute_should_show_cast(self_def_id, &trait_, &self_type);\n             Type::QPath {\n-                assoc: Box::new(segment.clean(cx)),\n+                assoc: Box::new(clean_path_segment(segment, cx)),\n                 should_show_cast,\n                 self_type: Box::new(self_type),\n                 trait_,\n@@ -1507,7 +1510,7 @@ pub(crate) fn clean_ty<'tcx>(ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> T\n                 if !lifetime.is_elided() { Some(clean_lifetime(*lifetime, cx)) } else { None };\n             DynTrait(bounds, lifetime)\n         }\n-        TyKind::BareFn(barefn) => BareFunction(Box::new(barefn.clean(cx))),\n+        TyKind::BareFn(barefn) => BareFunction(Box::new(clean_bare_fn_ty(barefn, cx))),\n         // Rustdoc handles `TyKind::Err`s by turning them into `Type::Infer`s.\n         TyKind::Infer | TyKind::Err => Infer,\n         TyKind::Typeof(..) => panic!(\"unimplemented type {:?}\", ty.kind),\n@@ -1823,7 +1826,10 @@ fn clean_variant_data<'tcx>(\n }\n \n fn clean_path<'tcx>(path: &hir::Path<'tcx>, cx: &mut DocContext<'tcx>) -> Path {\n-    Path { res: path.res, segments: path.segments.iter().map(|x| x.clean(cx)).collect() }\n+    Path {\n+        res: path.res,\n+        segments: path.segments.iter().map(|x| clean_path_segment(x, cx)).collect(),\n+    }\n }\n \n fn clean_generic_args<'tcx>(\n@@ -1861,28 +1867,30 @@ fn clean_generic_args<'tcx>(\n     }\n }\n \n-impl<'tcx> Clean<'tcx, PathSegment> for hir::PathSegment<'tcx> {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> PathSegment {\n-        PathSegment { name: self.ident.name, args: clean_generic_args(self.args(), cx) }\n-    }\n+fn clean_path_segment<'tcx>(\n+    path: &hir::PathSegment<'tcx>,\n+    cx: &mut DocContext<'tcx>,\n+) -> PathSegment {\n+    PathSegment { name: path.ident.name, args: clean_generic_args(path.args(), cx) }\n }\n \n-impl<'tcx> Clean<'tcx, BareFunctionDecl> for hir::BareFnTy<'tcx> {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> BareFunctionDecl {\n-        let (generic_params, decl) = enter_impl_trait(cx, |cx| {\n-            // NOTE: generics must be cleaned before args\n-            let generic_params = self\n-                .generic_params\n-                .iter()\n-                .filter(|p| !is_elided_lifetime(p))\n-                .map(|x| clean_generic_param(cx, None, x))\n-                .collect();\n-            let args = clean_args_from_types_and_names(cx, self.decl.inputs, self.param_names);\n-            let decl = clean_fn_decl_with_args(cx, self.decl, args);\n-            (generic_params, decl)\n-        });\n-        BareFunctionDecl { unsafety: self.unsafety, abi: self.abi, decl, generic_params }\n-    }\n+fn clean_bare_fn_ty<'tcx>(\n+    bare_fn: &hir::BareFnTy<'tcx>,\n+    cx: &mut DocContext<'tcx>,\n+) -> BareFunctionDecl {\n+    let (generic_params, decl) = enter_impl_trait(cx, |cx| {\n+        // NOTE: generics must be cleaned before args\n+        let generic_params = bare_fn\n+            .generic_params\n+            .iter()\n+            .filter(|p| !is_elided_lifetime(p))\n+            .map(|x| clean_generic_param(cx, None, x))\n+            .collect();\n+        let args = clean_args_from_types_and_names(cx, bare_fn.decl.inputs, bare_fn.param_names);\n+        let decl = clean_fn_decl_with_args(cx, bare_fn.decl, args);\n+        (generic_params, decl)\n+    });\n+    BareFunctionDecl { unsafety: bare_fn.unsafety, abi: bare_fn.abi, decl, generic_params }\n }\n \n fn clean_maybe_renamed_item<'tcx>("}, {"sha": "4c8d02310955972b193f230aeecd500f342eef7e", "filename": "src/test/rustdoc/all.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fall.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -24,5 +24,5 @@ mod private_module {\n }\n \n // @has foo/all.html '//a[@href=\"struct.ReexportedStruct.html\"]' 'ReexportedStruct'\n-// @!has foo/all.html 'private_module'\n+// @!hasraw foo/all.html 'private_module'\n pub use private_module::ReexportedStruct;"}, {"sha": "97b7739b4c975f83794ea27bb64648cfaab68614", "filename": "src/test/rustdoc/assoc-consts.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fassoc-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fassoc-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fassoc-consts.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -5,7 +5,7 @@ pub trait Foo {\n     const FOO: usize = 12 + 1;\n     // @has - '//*[@id=\"associatedconstant.FOO_NO_DEFAULT\"]' 'const FOO_NO_DEFAULT: bool'\n     const FOO_NO_DEFAULT: bool;\n-    // @!has - FOO_HIDDEN\n+    // @!hasraw - FOO_HIDDEN\n     #[doc(hidden)]\n     const FOO_HIDDEN: u8 = 0;\n }\n@@ -18,7 +18,7 @@ impl Foo for Bar {\n     const FOO: usize = 12;\n     // @has - '//*[@id=\"associatedconstant.FOO_NO_DEFAULT\"]' 'const FOO_NO_DEFAULT: bool'\n     const FOO_NO_DEFAULT: bool = false;\n-    // @!has - FOO_HIDDEN\n+    // @!hasraw - FOO_HIDDEN\n     #[doc(hidden)]\n     const FOO_HIDDEN: u8 = 0;\n }\n@@ -50,9 +50,9 @@ impl Bar {\n }\n \n impl Bar {\n-    // @!has assoc_consts/struct.Bar.html 'BAR_PRIVATE'\n+    // @!hasraw assoc_consts/struct.Bar.html 'BAR_PRIVATE'\n     const BAR_PRIVATE: char = 'a';\n-    // @!has assoc_consts/struct.Bar.html 'BAR_HIDDEN'\n+    // @!hasraw assoc_consts/struct.Bar.html 'BAR_HIDDEN'\n     #[doc(hidden)]\n     pub const BAR_HIDDEN: &'static str = \"a\";\n }"}, {"sha": "594501b22b142dbd5f74c17dad09d70642b87b88", "filename": "src/test/rustdoc/const-display.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fconst-display.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fconst-display.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-display.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -20,7 +20,7 @@ pub const fn foo() -> u32 { 42 }\n pub const unsafe fn foo_unsafe() -> u32 { 42 }\n \n // @has 'foo/fn.foo2.html' '//pre' 'pub const fn foo2() -> u32'\n-// @!has - '//span[@class=\"since\"]'\n+// @!hasraw - '//span[@class=\"since\"]'\n #[unstable(feature = \"humans\", issue = \"none\")]\n pub const fn foo2() -> u32 { 42 }\n \n@@ -32,7 +32,7 @@ pub const fn bar2() -> u32 { 42 }\n \n \n // @has 'foo/fn.foo2_gated.html' '//pre' 'pub const unsafe fn foo2_gated() -> u32'\n-// @!has - '//span[@class=\"since\"]'\n+// @!hasraw - '//span[@class=\"since\"]'\n #[unstable(feature = \"foo2\", issue = \"none\")]\n pub const unsafe fn foo2_gated() -> u32 { 42 }\n \n@@ -43,7 +43,7 @@ pub const unsafe fn foo2_gated() -> u32 { 42 }\n pub const unsafe fn bar2_gated() -> u32 { 42 }\n \n // @has 'foo/fn.bar_not_gated.html' '//pre' 'pub const unsafe fn bar_not_gated() -> u32'\n-// @!has - '//span[@class=\"since\"]'\n+// @!hasraw - '//span[@class=\"since\"]'\n pub const unsafe fn bar_not_gated() -> u32 { 42 }\n \n pub struct Foo;"}, {"sha": "e419d2631f6847e8824084a8cf44852d272d6dd1", "filename": "src/test/rustdoc/deprecated-impls.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fdeprecated-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fdeprecated-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdeprecated-impls.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -5,8 +5,8 @@ pub struct Foo0;\n \n impl Foo0 {\n     // @has - '//*[@class=\"stab deprecated\"]' 'Deprecated since 1.0.1: fn_with_doc'\n-    // @has - 'fn_with_doc short'\n-    // @has - 'fn_with_doc full'\n+    // @hasraw - 'fn_with_doc short'\n+    // @hasraw - 'fn_with_doc full'\n     /// fn_with_doc short\n     ///\n     /// fn_with_doc full\n@@ -52,8 +52,8 @@ pub struct Foo1;\n \n impl Bar for Foo1 {\n     // @has - '//*[@class=\"stab deprecated\"]' 'Deprecated since 1.0.3: fn_empty_with_doc'\n-    // @has - 'fn_empty_with_doc_impl short'\n-    // @has - 'fn_empty_with_doc_impl full'\n+    // @hasraw - 'fn_empty_with_doc_impl short'\n+    // @hasraw - 'fn_empty_with_doc_impl full'\n     /// fn_empty_with_doc_impl short\n     ///\n     /// fn_empty_with_doc_impl full\n@@ -63,8 +63,8 @@ impl Bar for Foo1 {\n     fn fn_empty_without_doc() {}\n \n     // @has - '//*[@class=\"stab deprecated\"]' 'Deprecated since 1.0.5: fn_def_with_doc'\n-    // @has - 'fn_def_with_doc_impl short'\n-    // @has - 'fn_def_with_doc_impl full'\n+    // @hasraw - 'fn_def_with_doc_impl short'\n+    // @hasraw - 'fn_def_with_doc_impl full'\n     /// fn_def_with_doc_impl short\n     ///\n     /// fn_def_with_doc_impl full\n@@ -74,8 +74,8 @@ impl Bar for Foo1 {\n     fn fn_def_without_doc() {}\n \n     // @has - '//*[@class=\"stab deprecated\"]' 'Deprecated since 1.0.7: fn_def_def_with_doc'\n-    // @has - 'fn_def_def_with_doc short'\n-    // @!has - 'fn_def_def_with_doc full'\n+    // @hasraw - 'fn_def_def_with_doc short'\n+    // @!hasraw - 'fn_def_def_with_doc full'\n \n     // @has - '//*[@class=\"stab deprecated\"]' 'Deprecated since 1.0.8: fn_def_def_without_doc'\n }\n@@ -85,34 +85,34 @@ pub struct Foo2;\n \n impl Bar for Foo2 {\n     // @has - '//*[@class=\"stab deprecated\"]' 'Deprecated since 1.0.3: fn_empty_with_doc'\n-    // @has - 'fn_empty_with_doc short'\n-    // @!has - 'fn_empty_with_doc full'\n+    // @hasraw - 'fn_empty_with_doc short'\n+    // @!hasraw - 'fn_empty_with_doc full'\n     fn fn_empty_with_doc() {}\n \n     // @has - '//*[@class=\"stab deprecated\"]' 'Deprecated since 1.0.4: fn_empty_without_doc'\n-    // @has - 'fn_empty_without_doc_impl short'\n-    // @has - 'fn_empty_without_doc_impl full'\n+    // @hasraw - 'fn_empty_without_doc_impl short'\n+    // @hasraw - 'fn_empty_without_doc_impl full'\n     /// fn_empty_without_doc_impl short\n     ///\n     /// fn_empty_without_doc_impl full\n     fn fn_empty_without_doc() {}\n \n     // @has - '//*[@class=\"stab deprecated\"]' 'Deprecated since 1.0.5: fn_def_with_doc'\n-    // @has - 'fn_def_with_doc short'\n-    // @!has - 'fn_def_with_doc full'\n+    // @hasraw - 'fn_def_with_doc short'\n+    // @!hasraw - 'fn_def_with_doc full'\n     fn fn_def_with_doc() {}\n \n     // @has - '//*[@class=\"stab deprecated\"]' 'Deprecated since 1.0.6: fn_def_without_doc'\n-    // @has - 'fn_def_without_doc_impl short'\n-    // @has - 'fn_def_without_doc_impl full'\n+    // @hasraw - 'fn_def_without_doc_impl short'\n+    // @hasraw - 'fn_def_without_doc_impl full'\n     /// fn_def_without_doc_impl short\n     ///\n     /// fn_def_without_doc_impl full\n     fn fn_def_without_doc() {}\n \n     // @has - '//*[@class=\"stab deprecated\"]' 'Deprecated since 1.0.7: fn_def_def_with_doc'\n-    // @has - 'fn_def_def_with_doc short'\n-    // @!has - 'fn_def_def_with_doc full'\n+    // @hasraw - 'fn_def_def_with_doc short'\n+    // @!hasraw - 'fn_def_def_with_doc full'\n \n     // @has - '//*[@class=\"stab deprecated\"]' 'Deprecated since 1.0.8: fn_def_def_without_doc'\n }"}, {"sha": "9b4ceb4f9cd86bbd29c0eb55840e718dc423a040", "filename": "src/test/rustdoc/elided-lifetime.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Felided-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Felided-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Felided-lifetime.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -11,33 +11,33 @@ pub struct Ref<'a>(&'a u32);\n type ARef<'a> = Ref<'a>;\n \n // @has foo/fn.test1.html\n-// @matches - \"Ref</a>&lt;'_&gt;\"\n+// @matchesraw - \"Ref</a>&lt;'_&gt;\"\n pub fn test1(a: &u32) -> Ref {\n     Ref(a)\n }\n \n // @has foo/fn.test2.html\n-// @matches - \"Ref</a>&lt;'_&gt;\"\n+// @matchesraw - \"Ref</a>&lt;'_&gt;\"\n pub fn test2(a: &u32) -> Ref<'_> {\n     Ref(a)\n }\n \n // @has foo/fn.test3.html\n-// @matches - \"Ref</a>&lt;'_&gt;\"\n+// @matchesraw - \"Ref</a>&lt;'_&gt;\"\n pub fn test3(a: &u32) -> ARef {\n     Ref(a)\n }\n \n // @has foo/fn.test4.html\n-// @matches - \"Ref</a>&lt;'_&gt;\"\n+// @matchesraw - \"Ref</a>&lt;'_&gt;\"\n pub fn test4(a: &u32) -> ARef<'_> {\n     Ref(a)\n }\n \n // Ensure external paths in inlined docs also display elided lifetime\n // @has foo/bar/fn.test5.html\n-// @matches - \"Ref</a>&lt;'_&gt;\"\n+// @matchesraw - \"Ref</a>&lt;'_&gt;\"\n // @has foo/bar/fn.test6.html\n-// @matches - \"Ref</a>&lt;'_&gt;\"\n+// @matchesraw - \"Ref</a>&lt;'_&gt;\"\n #[doc(inline)]\n pub extern crate bar;"}, {"sha": "147e11e5882e09c5ce4c0ba190794564bf44d94d", "filename": "src/test/rustdoc/empty-mod-private.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fempty-mod-private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fempty-mod-private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fempty-mod-private.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -1,16 +1,16 @@\n // compile-flags: --document-private-items\n \n // @has 'empty_mod_private/index.html' '//a[@href=\"foo/index.html\"]' 'foo'\n-// @has 'empty_mod_private/sidebar-items.js' 'foo'\n+// @hasraw 'empty_mod_private/sidebar-items.js' 'foo'\n // @matches 'empty_mod_private/foo/index.html' '//h1' 'Module empty_mod_private::foo'\n mod foo {}\n \n // @has 'empty_mod_private/index.html' '//a[@href=\"bar/index.html\"]' 'bar'\n-// @has 'empty_mod_private/sidebar-items.js' 'bar'\n+// @hasraw 'empty_mod_private/sidebar-items.js' 'bar'\n // @matches 'empty_mod_private/bar/index.html' '//h1' 'Module empty_mod_private::bar'\n mod bar {\n     // @has 'empty_mod_private/bar/index.html' '//a[@href=\"baz/index.html\"]' 'baz'\n-    // @has 'empty_mod_private/bar/sidebar-items.js' 'baz'\n+    // @hasraw 'empty_mod_private/bar/sidebar-items.js' 'baz'\n     // @matches 'empty_mod_private/bar/baz/index.html' '//h1' 'Module empty_mod_private::bar::baz'\n     mod baz {}\n }"}, {"sha": "c0bac40212c90a8218b0d3a7d86d2399a603ecbd", "filename": "src/test/rustdoc/empty-mod-public.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fempty-mod-public.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fempty-mod-public.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fempty-mod-public.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -1,14 +1,14 @@\n // @has 'empty_mod_public/index.html' '//a[@href=\"foo/index.html\"]' 'foo'\n-// @has 'empty_mod_public/sidebar-items.js' 'foo'\n+// @hasraw 'empty_mod_public/sidebar-items.js' 'foo'\n // @matches 'empty_mod_public/foo/index.html' '//h1' 'Module empty_mod_public::foo'\n pub mod foo {}\n \n // @has 'empty_mod_public/index.html' '//a[@href=\"bar/index.html\"]' 'bar'\n-// @has 'empty_mod_public/sidebar-items.js' 'bar'\n+// @hasraw 'empty_mod_public/sidebar-items.js' 'bar'\n // @matches 'empty_mod_public/bar/index.html' '//h1' 'Module empty_mod_public::bar'\n pub mod bar {\n     // @has 'empty_mod_public/bar/index.html' '//a[@href=\"baz/index.html\"]' 'baz'\n-    // @has 'empty_mod_public/bar/sidebar-items.js' 'baz'\n+    // @hasraw 'empty_mod_public/bar/sidebar-items.js' 'baz'\n     // @matches 'empty_mod_public/bar/baz/index.html' '//h1' 'Module empty_mod_public::bar::baz'\n     pub mod baz {}\n }"}, {"sha": "d8241ab96f6ddce6036fddd835845156a70100bb", "filename": "src/test/rustdoc/empty-section.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fempty-section.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fempty-section.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fempty-section.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -5,7 +5,7 @@\n pub struct Foo;\n \n // @has foo/struct.Foo.html\n-// @!has - 'Auto Trait Implementations'\n+// @!hasraw - 'Auto Trait Implementations'\n impl !Send for Foo {}\n impl !Sync for Foo {}\n impl !std::marker::Unpin for Foo {}"}, {"sha": "91499100ec6872fd32734eb6140026c6a8009a1a", "filename": "src/test/rustdoc/generic-associated-types/issue-94683.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fgeneric-associated-types%2Fissue-94683.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fgeneric-associated-types%2Fissue-94683.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fgeneric-associated-types%2Fissue-94683.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -8,6 +8,6 @@ pub trait Trait {\n // Make sure that the elided lifetime shows up\n \n // @has foo/type.T.html\n-// @has - \"pub type T = \"\n-// @has - \"&lt;'_&gt;\"\n+// @hasraw - \"pub type T = \"\n+// @hasraw - \"&lt;'_&gt;\"\n pub type T = fn(&<() as Trait>::Gat<'_>);"}, {"sha": "26e2e0e0660088ebb7dc3e937c0acff45bb30b8a", "filename": "src/test/rustdoc/hidden-impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fhidden-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fhidden-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fhidden-impls.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -11,7 +11,7 @@ pub mod __hidden {\n }\n \n // @has foo/trait.Clone.html\n-// @!has - 'Foo'\n+// @!hasraw - 'Foo'\n // @has implementors/core/clone/trait.Clone.js\n-// @!has - 'Foo'\n+// @!hasraw - 'Foo'\n pub use std::clone::Clone;"}, {"sha": "00a05a7c26f0e9c7e03ded2f0b5ca8124663bb0f", "filename": "src/test/rustdoc/hidden-line.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fhidden-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fhidden-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fhidden-line.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -15,5 +15,5 @@\n /// ```\n pub fn foo() {}\n \n-// @!has hidden_line/fn.foo.html invisible\n+// @!hasraw hidden_line/fn.foo.html invisible\n // @matches - //pre \"#\\[derive\\(PartialEq\\)\\] // Bar\""}, {"sha": "543d8f768a61c393d26f1890fb6ac28b9615fcca", "filename": "src/test/rustdoc/hidden-methods.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fhidden-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fhidden-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fhidden-methods.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -17,13 +17,13 @@ pub mod hidden {\n }\n \n // @has foo/struct.Foo.html\n-// @!has - 'Methods'\n+// @!hasraw - 'Methods'\n // @!has - '//code' 'impl Foo'\n-// @!has - 'this_should_be_hidden'\n+// @!hasraw - 'this_should_be_hidden'\n pub use hidden::Foo;\n \n // @has foo/struct.Bar.html\n-// @!has - 'Methods'\n+// @!hasraw - 'Methods'\n // @!has - '//code' 'impl Bar'\n-// @!has - 'this_should_be_hidden'\n+// @!hasraw - 'this_should_be_hidden'\n pub use hidden::Bar;"}, {"sha": "0bf7cabc43b2401a29df1e752b054b7d0609603d", "filename": "src/test/rustdoc/hide-unstable-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fhide-unstable-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fhide-unstable-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fhide-unstable-trait.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -5,7 +5,7 @@\n \n extern crate unstable_trait;\n \n-// @has foo/struct.Foo.html 'bar'\n-// @has foo/struct.Foo.html 'bar2'\n+// @hasraw foo/struct.Foo.html 'bar'\n+// @hasraw foo/struct.Foo.html 'bar2'\n #[doc(inline)]\n pub use unstable_trait::Foo;"}, {"sha": "34733f1f8ccb8518cf7d722599ef08099da30f06", "filename": "src/test/rustdoc/impl-parts-crosscrate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fimpl-parts-crosscrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fimpl-parts-crosscrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fimpl-parts-crosscrate.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -12,9 +12,9 @@ pub struct Bar<T> { t: T }\n // full impl string.  Instead, just make sure something from each part\n // is mentioned.\n \n-// @has implementors/rustdoc_impl_parts_crosscrate/trait.AnAutoTrait.js Bar\n-// @has - Send\n-// @has - !AnAutoTrait\n-// @has - Copy\n+// @hasraw implementors/rustdoc_impl_parts_crosscrate/trait.AnAutoTrait.js Bar\n+// @hasraw - Send\n+// @hasraw - !AnAutoTrait\n+// @hasraw - Copy\n impl<T: Send> !rustdoc_impl_parts_crosscrate::AnAutoTrait for Bar<T>\n     where T: Copy {}"}, {"sha": "4f681c78ee1171ae4fdcc861d0b88a2c410e27f3", "filename": "src/test/rustdoc/impl-trait-alias.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fimpl-trait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fimpl-trait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fimpl-trait-alias.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -3,11 +3,11 @@\n trait MyTrait {}\n impl MyTrait for i32 {}\n \n-// @has impl_trait_alias/type.Foo.html 'Foo'\n+// @hasraw impl_trait_alias/type.Foo.html 'Foo'\n /// debug type\n pub type Foo = impl MyTrait;\n \n-// @has impl_trait_alias/fn.foo.html 'foo'\n+// @hasraw impl_trait_alias/fn.foo.html 'foo'\n /// debug function\n pub fn foo() -> Foo {\n     1"}, {"sha": "a1124d2094c0fb6177d555c54fe0a5e8d24aee9e", "filename": "src/test/rustdoc/inline_cross/add-docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Finline_cross%2Fadd-docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Finline_cross%2Fadd-docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fadd-docs.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -4,6 +4,6 @@ extern crate inner;\n \n \n // @has add_docs/struct.MyStruct.html\n-// @has add_docs/struct.MyStruct.html \"Doc comment from \u2018pub use\u2019, Doc comment from definition\"\n+// @hasraw add_docs/struct.MyStruct.html \"Doc comment from \u2018pub use\u2019, Doc comment from definition\"\n /// Doc comment from 'pub use',\n pub use inner::MyStruct;"}, {"sha": "811827a17feebcc0e301e608b34bec3eff70962f", "filename": "src/test/rustdoc/inline_cross/assoc-items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc-items.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -7,10 +7,10 @@\n extern crate assoc_items;\n \n // @has foo/struct.MyStruct.html\n-// @!has - 'PrivateConst'\n+// @!hasraw - 'PrivateConst'\n // @has - '//*[@id=\"associatedconstant.PublicConst\"]' 'pub const PublicConst: u8'\n // @has - '//*[@class=\"docblock\"]' 'docs for PublicConst'\n-// @!has - 'private_method'\n+// @!hasraw - 'private_method'\n // @has - '//*[@id=\"method.public_method\"]' 'pub fn public_method()'\n // @has - '//*[@class=\"docblock\"]' 'docs for public_method'\n // @has - '//*[@id=\"associatedconstant.ConstNoDefault\"]' 'const ConstNoDefault: i16'"}, {"sha": "28a4f4bac1a4a38006eaa38abb633325e20c88df", "filename": "src/test/rustdoc/inline_cross/hidden-use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Finline_cross%2Fhidden-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Finline_cross%2Fhidden-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fhidden-use.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -5,8 +5,8 @@\n extern crate rustdoc_hidden;\n \n // @has hidden_use/index.html\n-// @!has - 'rustdoc_hidden'\n-// @!has - 'Bar'\n+// @!hasraw - 'rustdoc_hidden'\n+// @!hasraw - 'Bar'\n // @!has hidden_use/struct.Bar.html\n #[doc(hidden)]\n pub use rustdoc_hidden::Bar;"}, {"sha": "a46550865c8b1e930374a44a26bc5cdb0b4498d0", "filename": "src/test/rustdoc/inline_cross/proc_macro.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Finline_cross%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Finline_cross%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fproc_macro.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -12,25 +12,25 @@ extern crate some_macros;\n // @has proc_macro/derive.SomeDerive.html\n \n // @has proc_macro/macro.some_proc_macro.html\n-// @has - 'a proc-macro that swallows its input and does nothing.'\n+// @hasraw - 'a proc-macro that swallows its input and does nothing.'\n pub use some_macros::some_proc_macro;\n \n // @has proc_macro/macro.reexported_macro.html\n-// @has - 'Doc comment from the original crate'\n+// @hasraw - 'Doc comment from the original crate'\n pub use some_macros::reexported_macro;\n \n // @has proc_macro/attr.some_proc_attr.html\n-// @has - 'a proc-macro attribute that passes its item through verbatim.'\n+// @hasraw - 'a proc-macro attribute that passes its item through verbatim.'\n pub use some_macros::some_proc_attr;\n \n // @has proc_macro/derive.SomeDerive.html\n-// @has - 'a derive attribute that adds nothing to its input.'\n+// @hasraw - 'a derive attribute that adds nothing to its input.'\n pub use some_macros::SomeDerive;\n \n // @has proc_macro/attr.first_attr.html\n-// @has - 'Generated doc comment'\n+// @hasraw - 'Generated doc comment'\n pub use some_macros::first_attr;\n \n // @has proc_macro/attr.second_attr.html\n-// @has - 'Generated doc comment'\n+// @hasraw - 'Generated doc comment'\n pub use some_macros::second_attr;"}, {"sha": "8e1089d60ec5133df76ca86325b12b7eca413745", "filename": "src/test/rustdoc/inline_local/glob-extern-document-private-items.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Finline_local%2Fglob-extern-document-private-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Finline_local%2Fglob-extern-document-private-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_local%2Fglob-extern-document-private-items.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -12,14 +12,14 @@ mod mod1 {\n pub use mod1::*;\n \n // @has foo/index.html\n-// @has - \"mod1\"\n-// @has - \"public_fn\"\n-// @!has - \"private_fn\"\n+// @hasraw - \"mod1\"\n+// @hasraw - \"public_fn\"\n+// @!hasraw - \"private_fn\"\n // @has foo/fn.public_fn.html\n // @!has foo/fn.private_fn.html\n \n // @has foo/mod1/index.html\n-// @has - \"public_fn\"\n-// @has - \"private_fn\"\n+// @hasraw - \"public_fn\"\n+// @hasraw - \"private_fn\"\n // @has foo/mod1/fn.public_fn.html\n // @has foo/mod1/fn.private_fn.html"}, {"sha": "c592a4db19d98c42757bf37afe4e4226aaf908b7", "filename": "src/test/rustdoc/inline_local/glob-extern.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Finline_local%2Fglob-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Finline_local%2Fglob-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_local%2Fglob-extern.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -10,9 +10,9 @@ mod mod1 {\n pub use mod1::*;\n \n // @has foo/index.html\n-// @!has - \"mod1\"\n-// @has - \"public_fn\"\n-// @!has - \"private_fn\"\n+// @!hasraw - \"mod1\"\n+// @hasraw - \"public_fn\"\n+// @!hasraw - \"private_fn\"\n // @has foo/fn.public_fn.html\n // @!has foo/fn.private_fn.html\n "}, {"sha": "d8cbd42343b9d7026af5ad17bbcd1b28632cf18c", "filename": "src/test/rustdoc/inline_local/glob-private-document-private-items.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Finline_local%2Fglob-private-document-private-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Finline_local%2Fglob-private-document-private-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_local%2Fglob-private-document-private-items.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -15,31 +15,31 @@ mod mod1 {\n pub use mod1::*;\n \n // @has foo/index.html\n-// @has - \"mod1\"\n-// @has - \"Mod1Public\"\n-// @!has - \"Mod1Private\"\n-// @!has - \"mod2\"\n-// @has - \"Mod2Public\"\n-// @!has - \"Mod2Private\"\n+// @hasraw - \"mod1\"\n+// @hasraw - \"Mod1Public\"\n+// @!hasraw - \"Mod1Private\"\n+// @!hasraw - \"mod2\"\n+// @hasraw - \"Mod2Public\"\n+// @!hasraw - \"Mod2Private\"\n // @has foo/struct.Mod1Public.html\n // @!has foo/struct.Mod1Private.html\n // @has foo/struct.Mod2Public.html\n // @!has foo/struct.Mod2Private.html\n \n // @has foo/mod1/index.html\n-// @has - \"mod2\"\n-// @has - \"Mod1Public\"\n-// @has - \"Mod1Private\"\n-// @!has - \"Mod2Public\"\n-// @!has - \"Mod2Private\"\n+// @hasraw - \"mod2\"\n+// @hasraw - \"Mod1Public\"\n+// @hasraw - \"Mod1Private\"\n+// @!hasraw - \"Mod2Public\"\n+// @!hasraw - \"Mod2Private\"\n // @has foo/mod1/struct.Mod1Public.html\n // @has foo/mod1/struct.Mod1Private.html\n // @!has foo/mod1/struct.Mod2Public.html\n // @!has foo/mod1/struct.Mod2Private.html\n \n // @has foo/mod1/mod2/index.html\n-// @has - \"Mod2Public\"\n-// @has - \"Mod2Private\"\n+// @hasraw - \"Mod2Public\"\n+// @hasraw - \"Mod2Private\"\n // @has foo/mod1/mod2/struct.Mod2Public.html\n // @has foo/mod1/mod2/struct.Mod2Private.html\n "}, {"sha": "303f1d61048893adf0994005e26754c323efe6bf", "filename": "src/test/rustdoc/inline_local/glob-private.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Finline_local%2Fglob-private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Finline_local%2Fglob-private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_local%2Fglob-private.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -13,12 +13,12 @@ mod mod1 {\n pub use mod1::*;\n \n // @has foo/index.html\n-// @!has - \"mod1\"\n-// @has - \"Mod1Public\"\n-// @!has - \"Mod1Private\"\n-// @!has - \"mod2\"\n-// @has - \"Mod2Public\"\n-// @!has - \"Mod2Private\"\n+// @!hasraw - \"mod1\"\n+// @hasraw - \"Mod1Public\"\n+// @!hasraw - \"Mod1Private\"\n+// @!hasraw - \"mod2\"\n+// @hasraw - \"Mod2Public\"\n+// @!hasraw - \"Mod2Private\"\n // @has foo/struct.Mod1Public.html\n // @!has foo/struct.Mod1Private.html\n // @has foo/struct.Mod2Public.html"}, {"sha": "de512fb26e6eff7d43b6282448aff2665480f3e6", "filename": "src/test/rustdoc/inline_local/hidden-use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Finline_local%2Fhidden-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Finline_local%2Fhidden-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_local%2Fhidden-use.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -3,8 +3,8 @@ mod private {\n }\n \n // @has hidden_use/index.html\n-// @!has - 'private'\n-// @!has - 'Foo'\n+// @!hasraw - 'private'\n+// @!hasraw - 'Foo'\n // @!has hidden_use/struct.Foo.html\n #[doc(hidden)]\n pub use private::Foo;"}, {"sha": "5c33c0037e48ef4d2e6b421ab22909f33297c290", "filename": "src/test/rustdoc/inline_local/macro_by_example.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Finline_local%2Fmacro_by_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Finline_local%2Fmacro_by_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_local%2Fmacro_by_example.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -7,7 +7,7 @@ macro_rules! foo {\n \n // @has macro_by_example/macros/index.html\n pub mod macros {\n-    // @!has - 'pub use foo as bar;'\n+    // @!hasraw - 'pub use foo as bar;'\n     // @has macro_by_example/macros/macro.bar.html\n     // @has - '//*[@class=\"docblock\"]' 'docs for foo'\n     // @has - '//*[@class=\"stab deprecated\"]' 'Deprecated since 1.2.3: text'"}, {"sha": "e4429ef33a928801f6c997729dc1593777f8e874", "filename": "src/test/rustdoc/inline_local/please_inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Finline_local%2Fplease_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Finline_local%2Fplease_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_local%2Fplease_inline.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -4,15 +4,15 @@ pub mod foo {\n \n // @has please_inline/a/index.html\n pub mod a {\n-    // @!has - 'pub use foo::'\n+    // @!hasraw - 'pub use foo::'\n     // @has please_inline/a/struct.Foo.html\n     #[doc(inline)]\n     pub use foo::Foo;\n }\n \n // @has please_inline/b/index.html\n pub mod b {\n-    // @has - 'pub use foo::'\n+    // @hasraw - 'pub use foo::'\n     // @!has please_inline/b/struct.Foo.html\n     #[feature(inline)]\n     pub use foo::Foo;"}, {"sha": "caad43a087c4eda9f516e6cc98710d51ee6acdc1", "filename": "src/test/rustdoc/internal.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finternal.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -3,13 +3,15 @@\n // Check that the unstable marker is not added for \"rustc_private\".\n \n // @!matches internal/index.html \\\n-//      '//*[@class=\"item-right docblock-short\"]/span[@class=\"stab unstable\"]'\n+//      '//*[@class=\"item-right docblock-short\"]/span[@class=\"stab unstable\"]' \\\n+//      ''\n // @!matches internal/index.html \\\n-//      '//*[@class=\"item-right docblock-short\"]/span[@class=\"stab internal\"]'\n+//      '//*[@class=\"item-right docblock-short\"]/span[@class=\"stab internal\"]' \\\n+//      ''\n // @matches - '//*[@class=\"item-right docblock-short\"]' 'Docs'\n \n-// @!has internal/struct.S.html '//*[@class=\"stab unstable\"]'\n-// @!has internal/struct.S.html '//*[@class=\"stab internal\"]'\n+// @!has internal/struct.S.html '//*[@class=\"stab unstable\"]' ''\n+// @!has internal/struct.S.html '//*[@class=\"stab internal\"]' ''\n /// Docs\n pub struct S;\n "}, {"sha": "5440f582dff7e3360502b2f3b67674c0ff96965a", "filename": "src/test/rustdoc/intra-doc/extern-type.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fintra-doc%2Fextern-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fintra-doc%2Fextern-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fextern-type.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -25,11 +25,11 @@ impl G<usize> for ExternType {\n }\n \n // @has 'extern_type/foreigntype.ExternType.html'\n-// @has 'extern_type/fn.links_to_extern_type.html' \\\n+// @hasraw 'extern_type/fn.links_to_extern_type.html' \\\n // 'href=\"foreigntype.ExternType.html#method.f\"'\n-// @has 'extern_type/fn.links_to_extern_type.html' \\\n+// @hasraw 'extern_type/fn.links_to_extern_type.html' \\\n // 'href=\"foreigntype.ExternType.html#method.test\"'\n-// @has 'extern_type/fn.links_to_extern_type.html' \\\n+// @hasraw 'extern_type/fn.links_to_extern_type.html' \\\n // 'href=\"foreigntype.ExternType.html#method.g\"'\n /// See also [ExternType::f]\n /// See also [ExternType::test]"}, {"sha": "2fda637a64131f6d9b6299df8418a4db46f7f858", "filename": "src/test/rustdoc/issue-16265-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fissue-16265-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fissue-16265-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-16265-1.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -1,6 +1,6 @@\n pub struct Foo;\n \n-// @has issue_16265_1/traits/index.html 'source'\n+// @hasraw issue_16265_1/traits/index.html 'source'\n pub mod traits {\n     impl PartialEq for super::Foo {\n         fn eq(&self, _: &super::Foo) -> bool {"}, {"sha": "c3eb356171e856e7f36b96d6c3bb51f3c2eb8fc2", "filename": "src/test/rustdoc/issue-16265-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fissue-16265-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fissue-16265-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-16265-2.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -1,4 +1,4 @@\n-// @has issue_16265_2/index.html 'source'\n+// @hasraw issue_16265_2/index.html 'source'\n \n trait Y {}\n impl Y for Option<u32> {}"}, {"sha": "7576ebb0305aaa5604cd2566397466e7c00ebea6", "filename": "src/test/rustdoc/issue-23511.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fissue-23511.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fissue-23511.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-23511.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -6,7 +6,7 @@ pub mod str {\n     #![doc(primitive = \"str\")]\n \n     impl str {\n-        // @has search-index.js foo\n+        // @hasraw search-index.js foo\n         #[rustc_allow_incoherent_impl]\n         pub fn foo(&self) {}\n     }"}, {"sha": "08fd1833bcef33ebd373bab41c0cf9fb2dcb67ee", "filename": "src/test/rustdoc/issue-23812.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fissue-23812.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fissue-23812.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-23812.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -16,10 +16,10 @@ doc! {\n }\n \n // @has issue_23812/Foo/index.html\n-// @has - 'Outer comment'\n-// @!has - '/// Outer comment'\n-// @has - 'Inner comment'\n-// @!has - '//! Inner comment'\n+// @hasraw - 'Outer comment'\n+// @!hasraw - '/// Outer comment'\n+// @hasraw - 'Inner comment'\n+// @!hasraw - '//! Inner comment'\n \n \n doc! {\n@@ -30,7 +30,7 @@ doc! {\n }\n \n // @has issue_23812/Bar/index.html\n-// @has - 'Outer block comment'\n-// @!has - '/** Outer block comment */'\n-// @has - 'Inner block comment'\n-// @!has - '/*! Inner block comment */'\n+// @hasraw - 'Outer block comment'\n+// @!hasraw - '/** Outer block comment */'\n+// @hasraw - 'Inner block comment'\n+// @!hasraw - '/*! Inner block comment */'"}, {"sha": "9f2fd9071144fc0776321a3e9102db6d2bb79689", "filename": "src/test/rustdoc/issue-27104.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fissue-27104.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fissue-27104.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-27104.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -3,8 +3,8 @@\n // ignore-cross-compile\n \n // @has issue_27104/index.html\n-// @!has - 'extern crate std'\n-// @!has - 'use std::prelude::'\n+// @!hasraw - 'extern crate std'\n+// @!hasraw - 'use std::prelude::'\n \n-// @has - 'pub extern crate empty'\n+// @hasraw - 'pub extern crate empty'\n pub extern crate empty;"}, {"sha": "65e0f7cb87b0c5f41b7fe3e3375453191f29d528", "filename": "src/test/rustdoc/issue-27759.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fissue-27759.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fissue-27759.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-27759.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -4,11 +4,11 @@\n #![unstable(feature=\"test\", issue=\"27759\")]\n \n // @has issue_27759/unstable/index.html\n-// @has - '<code>test</code>&nbsp;<a href=\"http://issue_url/27759\">#27759</a>'\n+// @hasraw - '<code>test</code>&nbsp;<a href=\"http://issue_url/27759\">#27759</a>'\n #[unstable(feature=\"test\", issue=\"27759\")]\n pub mod unstable {\n     // @has issue_27759/unstable/fn.issue.html\n-    // @has - '<code>test_function</code>&nbsp;<a href=\"http://issue_url/12345\">#12345</a>'\n+    // @hasraw - '<code>test_function</code>&nbsp;<a href=\"http://issue_url/12345\">#12345</a>'\n     #[unstable(feature=\"test_function\", issue=\"12345\")]\n     pub fn issue() {}\n }"}, {"sha": "4364a9649b57b48ac11cfa970d342c13389cbce2", "filename": "src/test/rustdoc/issue-29584.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fissue-29584.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fissue-29584.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-29584.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -4,5 +4,5 @@\n extern crate issue_29584;\n \n // @has issue_29584/struct.Foo.html\n-// @!has - 'impl Bar for'\n+// @!hasraw - 'impl Bar for'\n pub use issue_29584::Foo;"}, {"sha": "3eee374465d2bc4e482ddb161a9febc328704983", "filename": "src/test/rustdoc/issue-31899.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fissue-31899.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fissue-31899.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-31899.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -1,8 +1,8 @@\n // @has issue_31899/index.html\n-// @has - 'Make this line a bit longer.'\n-// @!has - 'rust rust-example-rendered'\n-// @!has - 'use ndarray::arr2'\n-// @!has - 'prohibited'\n+// @hasraw - 'Make this line a bit longer.'\n+// @!hasraw - 'rust rust-example-rendered'\n+// @!hasraw - 'use ndarray::arr2'\n+// @!hasraw - 'prohibited'\n \n /// A tuple or fixed size array that can be used to index an array.\n /// Make this line a bit longer."}, {"sha": "9c585497d354faaefa8213a546164b1bba29c573", "filename": "src/test/rustdoc/issue-32374.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fissue-32374.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fissue-32374.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-32374.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -10,7 +10,7 @@\n \n // @has issue_32374/struct.T.html '//*[@class=\"stab deprecated\"]' \\\n //      '\ud83d\udc4e Deprecated since 1.0.0: text'\n-// @has - '<code>test</code>&nbsp;<a href=\"https://issue_url/32374\">#32374</a>'\n+// @hasraw - '<code>test</code>&nbsp;<a href=\"https://issue_url/32374\">#32374</a>'\n // @matches issue_32374/struct.T.html '//*[@class=\"stab unstable\"]' \\\n //      '\ud83d\udd2c This is a nightly-only experimental API. \\(test\\s#32374\\)$'\n /// Docs"}, {"sha": "5552300f9fe896db7fc63fb867b850e9af845661", "filename": "src/test/rustdoc/issue-32395.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fissue-32395.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fissue-32395.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-32395.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -3,13 +3,13 @@\n // ignore-cross-compile\n \n // @has variant_struct/enum.Foo.html\n-// @!has - 'pub qux'\n-// @!has - 'pub(crate) qux'\n-// @!has - 'pub Bar'\n+// @!hasraw - 'pub qux'\n+// @!hasraw - 'pub(crate) qux'\n+// @!hasraw - 'pub Bar'\n extern crate variant_struct;\n \n // @has issue_32395/enum.Foo.html\n-// @!has - 'pub qux'\n-// @!has - 'pub(crate) qux'\n-// @!has - 'pub Bar'\n+// @!hasraw - 'pub qux'\n+// @!hasraw - 'pub(crate) qux'\n+// @!hasraw - 'pub Bar'\n pub use variant_struct::Foo;"}, {"sha": "37da3dd1999753fdc14fd5cbb94dfb2eee06f30e", "filename": "src/test/rustdoc/issue-34473.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fissue-34473.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fissue-34473.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-34473.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -5,7 +5,7 @@ mod second {\n }\n \n // @has foo/index.html\n-// @!has - SomeTypeWithLongName\n+// @!hasraw - SomeTypeWithLongName\n // @has foo/struct.SomeType.html\n // @!has foo/struct.SomeTypeWithLongName.html\n pub use second::{SomeTypeWithLongName as SomeType};"}, {"sha": "58a55a73815d02e5b1114cf7dc81c1421d5cea35", "filename": "src/test/rustdoc/issue-41783.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fissue-41783.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fissue-41783.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-41783.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -1,11 +1,11 @@\n // @has issue_41783/struct.Foo.html\n-// @!has - 'space'\n-// @!has - 'comment'\n-// @has - '# <span class=\"ident\">single'\n-// @has - '## <span class=\"ident\">double</span>'\n-// @has - '### <span class=\"ident\">triple</span>'\n-// @has - '<span class=\"attribute\">#[<span class=\"ident\">outer</span>]</span>'\n-// @has - '<span class=\"attribute\">#![<span class=\"ident\">inner</span>]</span>'\n+// @!hasraw - 'space'\n+// @!hasraw - 'comment'\n+// @hasraw - '# <span class=\"ident\">single'\n+// @hasraw - '## <span class=\"ident\">double</span>'\n+// @hasraw - '### <span class=\"ident\">triple</span>'\n+// @hasraw - '<span class=\"attribute\">#[<span class=\"ident\">outer</span>]</span>'\n+// @hasraw - '<span class=\"attribute\">#![<span class=\"ident\">inner</span>]</span>'\n \n /// ```no_run\n /// # # space"}, {"sha": "832140e061b51cefa6fb126fa30fa3ac7a31714e", "filename": "src/test/rustdoc/issue-53689.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fissue-53689.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fissue-53689.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-53689.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -5,7 +5,7 @@\n extern crate issue_53689;\n \n // @has foo/trait.MyTrait.html\n-// @!has - 'MyStruct'\n+// @!hasraw - 'MyStruct'\n // @count - '//*[h3=\"impl<T> MyTrait for T\"]' 1\n pub trait MyTrait {}\n "}, {"sha": "4b6c37b94aa71535ffcdb2185bef8580d57d4592", "filename": "src/test/rustdoc/issue-61592.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fissue-61592.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fissue-61592.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-61592.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -5,11 +5,11 @@ extern crate foo;\n // @has issue_61592/index.html\n // @has - '//a[@href=\"#reexports\"]' 'Re-exports'\n // @has - '//code' 'pub use foo::FooTrait as _;'\n-// @!has - '//a[@href=\"trait._.html\"]'\n+// @!has - '//a[@href=\"trait._.html\"]' ''\n pub use foo::FooTrait as _;\n \n // @has issue_61592/index.html\n // @has - '//a[@href=\"#reexports\"]' 'Re-exports'\n // @has - '//code' 'pub use foo::FooStruct as _;'\n-// @!has - '//a[@href=\"struct._.html\"]'\n+// @!has - '//a[@href=\"struct._.html\"]' ''\n pub use foo::FooStruct as _;"}, {"sha": "4f2da5e07bee1eea9a5a328f2d71dae58a299d05", "filename": "src/test/rustdoc/issue-89852.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fissue-89852.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fissue-89852.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-89852.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -3,8 +3,8 @@\n #![no_core]\n #![feature(no_core)]\n \n-// @matches 'issue_89852/sidebar-items.js' '\"repro\"'\n-// @!matches 'issue_89852/sidebar-items.js' '\"repro\".*\"repro\"'\n+// @matchesraw 'issue_89852/sidebar-items.js' '\"repro\"'\n+// @!matchesraw 'issue_89852/sidebar-items.js' '\"repro\".*\"repro\"'\n \n #[macro_export]\n macro_rules! repro {"}, {"sha": "7a322ea6d3414ddc61eb816704f98e59616224f5", "filename": "src/test/rustdoc/link-title-escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Flink-title-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Flink-title-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Flink-title-escape.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -6,4 +6,4 @@\n //!\n //! [foo]: url 'title & <stuff> & \"things\"'\n \n-// @has 'foo/index.html' 'title &amp; &lt;stuff&gt; &amp; &quot;things&quot;'\n+// @hasraw 'foo/index.html' 'title &amp; &lt;stuff&gt; &amp; &quot;things&quot;'"}, {"sha": "ee3010514417a7da47aaaf9b9761b7ebb166a740", "filename": "src/test/rustdoc/macro-document-private-duplicate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fmacro-document-private-duplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fmacro-document-private-duplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmacro-document-private-duplicate.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -10,15 +10,15 @@\n //\n // compile-flags: --document-private-items\n \n-// @has macro_document_private_duplicate/index.html 'Doc 1.'\n-// @has macro_document_private_duplicate/macro.a_macro.html 'Doc 1.'\n+// @hasraw macro_document_private_duplicate/index.html 'Doc 1.'\n+// @hasraw macro_document_private_duplicate/macro.a_macro.html 'Doc 1.'\n /// Doc 1.\n macro_rules! a_macro {\n     () => ()\n }\n \n-// @has macro_document_private_duplicate/index.html 'Doc 2.'\n-// @!has macro_document_private_duplicate/macro.a_macro.html 'Doc 2.'\n+// @hasraw macro_document_private_duplicate/index.html 'Doc 2.'\n+// @!hasraw macro_document_private_duplicate/macro.a_macro.html 'Doc 2.'\n /// Doc 2.\n macro_rules! a_macro {\n     () => ()"}, {"sha": "f135a3a9ca662dd362a4e9c85188b20b41a7a956", "filename": "src/test/rustdoc/macro-private-not-documented.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fmacro-private-not-documented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fmacro-private-not-documented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmacro-private-not-documented.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -6,13 +6,13 @@\n // This is a regression text for issue #88453.\n #![feature(decl_macro)]\n \n-// @!has macro_private_not_documented/index.html 'a_macro'\n+// @!hasraw macro_private_not_documented/index.html 'a_macro'\n // @!has macro_private_not_documented/macro.a_macro.html\n macro_rules! a_macro {\n     () => ()\n }\n \n-// @!has macro_private_not_documented/index.html 'another_macro'\n+// @!hasraw macro_private_not_documented/index.html 'another_macro'\n // @!has macro_private_not_documented/macro.another_macro.html\n macro another_macro {\n     () => ()"}, {"sha": "98026663e5a7a9b9c1b36cb4cb18aae68bd27e9b", "filename": "src/test/rustdoc/macro_rules-matchers.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fmacro_rules-matchers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fmacro_rules-matchers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmacro_rules-matchers.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -7,27 +7,27 @@\n // @has - '//span[@class=\"macro\"]' 'macro_rules!'\n // @has - '//span[@class=\"ident\"]' 'todo'\n \n-// @has - '{ () =&gt; { ... }; ($('\n+// @hasraw - '{ () =&gt; { ... }; ($('\n // @has - '//span[@class=\"macro-nonterminal\"]' '$'\n // @has - '//span[@class=\"macro-nonterminal\"]' 'arg'\n-// @has - ':'\n+// @hasraw - ':'\n // @has - '//span[@class=\"ident\"]' 'tt'\n-// @has - ')+'\n-// @has - ') =&gt; { ... }; }'\n+// @hasraw - ')+'\n+// @hasraw - ') =&gt; { ... }; }'\n pub use std::todo;\n \n mod mod1 {\n     // @has 'foo/macro.macro1.html'\n-    // @has - 'macro_rules!'\n-    // @has - 'macro1'\n-    // @has - '{ () =&gt; { ... }; ($('\n+    // @hasraw - 'macro_rules!'\n+    // @hasraw - 'macro1'\n+    // @hasraw - '{ () =&gt; { ... }; ($('\n     // @has - '//span[@class=\"macro-nonterminal\"]' '$'\n     // @has - '//span[@class=\"macro-nonterminal\"]' 'arg'\n-    // @has - ':'\n-    // @has - 'expr'\n-    // @has - '),'\n-    // @has - '+'\n-    // @has - ') =&gt; { ... }; }'\n+    // @hasraw - ':'\n+    // @hasraw - 'expr'\n+    // @hasraw - '),'\n+    // @hasraw - '+'\n+    // @hasraw - ') =&gt; { ... }; }'\n     #[macro_export]\n     macro_rules! macro1 {\n         () => {};"}, {"sha": "31e7072b5ce9bc7e05c4b596d777aaf991ad2d6d", "filename": "src/test/rustdoc/markdown-summaries.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fmarkdown-summaries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fmarkdown-summaries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmarkdown-summaries.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -7,21 +7,21 @@\n //!\n //! [link]: https://example.com\n \n-// @has search-index.js 'This <em>summary</em> has a link and <code>code</code>.'\n-// @!has - 'second paragraph'\n+// @hasraw search-index.js 'This <em>summary</em> has a link and <code>code</code>.'\n+// @!hasraw - 'second paragraph'\n \n /// This `code` will be rendered in a code tag.\n ///\n /// This text should not be rendered.\n pub struct Sidebar;\n \n-// @has search-index.js 'This <code>code</code> will be rendered in a code tag.'\n-// @has summaries/sidebar-items.js 'This `code` will be rendered in a code tag.'\n-// @!has - 'text should not be rendered'\n+// @hasraw search-index.js 'This <code>code</code> will be rendered in a code tag.'\n+// @hasraw summaries/sidebar-items.js 'This `code` will be rendered in a code tag.'\n+// @!hasraw - 'text should not be rendered'\n \n /// ```text\n /// this block should not be rendered\n /// ```\n pub struct Sidebar2;\n \n-// @!has summaries/sidebar-items.js 'block should not be rendered'\n+// @!hasraw summaries/sidebar-items.js 'block should not be rendered'"}, {"sha": "80d5b99c0b035df9b9eca5ce92070e461181d1e3", "filename": "src/test/rustdoc/masked.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fmasked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fmasked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmasked.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -7,24 +7,24 @@\n #[doc(masked)]\n extern crate masked;\n \n-// @!has 'search-index.js' 'masked_method'\n+// @!hasraw 'search-index.js' 'masked_method'\n \n-// @!has 'foo/struct.String.html' 'MaskedTrait'\n-// @!has 'foo/struct.String.html' 'masked_method'\n+// @!hasraw 'foo/struct.String.html' 'MaskedTrait'\n+// @!hasraw 'foo/struct.String.html' 'masked_method'\n pub use std::string::String;\n \n-// @!has 'foo/trait.Clone.html' 'MaskedStruct'\n+// @!hasraw 'foo/trait.Clone.html' 'MaskedStruct'\n pub use std::clone::Clone;\n \n-// @!has 'foo/struct.MyStruct.html' 'MaskedTrait'\n-// @!has 'foo/struct.MyStruct.html' 'masked_method'\n+// @!hasraw 'foo/struct.MyStruct.html' 'MaskedTrait'\n+// @!hasraw 'foo/struct.MyStruct.html' 'masked_method'\n pub struct MyStruct;\n \n impl masked::MaskedTrait for MyStruct {\n     fn masked_method() {}\n }\n \n-// @!has 'foo/trait.MyTrait.html' 'MaskedStruct'\n+// @!hasraw 'foo/trait.MyTrait.html' 'MaskedStruct'\n pub trait MyTrait {}\n \n impl MyTrait for masked::MaskedStruct {}"}, {"sha": "852f444e99b65d4af0486206078c1929a0515746", "filename": "src/test/rustdoc/module-impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fmodule-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fmodule-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmodule-impls.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -2,4 +2,4 @@\n \n pub use std::marker::Send;\n \n-// @!has foo/index.html 'Implementations'\n+// @!hasraw foo/index.html 'Implementations'"}, {"sha": "12234d2cf7ef52cd99146bfe70e497ca2adc8fbe", "filename": "src/test/rustdoc/nested-modules.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fnested-modules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fnested-modules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fnested-modules.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -7,22 +7,22 @@ mod a_module {\n \n     pub mod a_nested_module {\n         // @has aCrate/a_nested_module/index.html '//a[@href=\"fn.a_nested_public_function.html\"]' 'a_nested_public_function'\n-        // @has aCrate/a_nested_module/fn.a_nested_public_function.html 'pub fn a_nested_public_function()'\n+        // @hasraw aCrate/a_nested_module/fn.a_nested_public_function.html 'pub fn a_nested_public_function()'\n         pub fn a_nested_public_function() {}\n \n         // @has aCrate/a_nested_module/index.html '//a[@href=\"fn.another_nested_public_function.html\"]' 'another_nested_public_function'\n-        // @has aCrate/a_nested_module/fn.another_nested_public_function.html 'pub fn another_nested_public_function()'\n+        // @hasraw aCrate/a_nested_module/fn.another_nested_public_function.html 'pub fn another_nested_public_function()'\n         pub use a_nested_module::a_nested_public_function as another_nested_public_function;\n     }\n \n-    // @!has aCrate/a_nested_module/index.html 'yet_another_nested_public_function'\n+    // @!hasraw aCrate/a_nested_module/index.html 'yet_another_nested_public_function'\n     pub use a_nested_module::a_nested_public_function as yet_another_nested_public_function;\n \n-    // @!has aCrate/a_nested_module/index.html 'one_last_nested_public_function'\n+    // @!hasraw aCrate/a_nested_module/index.html 'one_last_nested_public_function'\n     pub use a_nested_module::another_nested_public_function as one_last_nested_public_function;\n }\n \n-// @!has aCrate/index.html 'a_module'\n+// @!hasraw aCrate/index.html 'a_module'\n // @has aCrate/index.html '//a[@href=\"a_nested_module/index.html\"]' 'a_nested_module'\n pub use a_module::a_nested_module;\n \n@@ -36,7 +36,7 @@ pub use a_module::{\n };\n \n // @has aCrate/index.html '//a[@href=\"fn.private_function.html\"]' 'private_function'\n-// @!has aCrate/fn.private_function.html 'a_module'\n+// @!hasraw aCrate/fn.private_function.html 'a_module'\n // @has aCrate/index.html '//a[@href=\"fn.other_private_function.html\"]' 'other_private_function'\n-// @!has aCrate/fn.other_private_function.html 'a_module'\n+// @!hasraw aCrate/fn.other_private_function.html 'a_module'\n pub use a_module::{other_private_function, private_function};"}, {"sha": "b2f89906480d6c22f692544c3e09e7529998e523", "filename": "src/test/rustdoc/no-crate-filter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fno-crate-filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fno-crate-filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fno-crate-filter.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -2,5 +2,5 @@\n \n // compile-flags: -Z unstable-options --disable-per-crate-search\n \n-// @!has 'foo/struct.Foo.html' '//*[id=\"crate-search\"]'\n+// @!has 'foo/struct.Foo.html' '//*[id=\"crate-search\"]' ''\n pub struct Foo;"}, {"sha": "2ab9d44be6dac9f3267f9e9485414d582397cf91", "filename": "src/test/rustdoc/recursive-deref.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Frecursive-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Frecursive-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Frecursive-deref.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -51,7 +51,7 @@ impl G {\n \n // @has recursive_deref/struct.D.html '//h3[@class=\"code-header in-band\"]' 'impl Deref for D'\n // We also check that `G::g` method isn't rendered because there is no `self` argument.\n-// @!has '-' '//*[@id=\"deref-methods-G\"]'\n+// @!has '-' '//*[@id=\"deref-methods-G\"]' ''\n impl Deref for D {\n     type Target = E;\n \n@@ -62,7 +62,7 @@ impl Deref for D {\n \n // @has recursive_deref/struct.E.html '//h3[@class=\"code-header in-band\"]' 'impl Deref for E'\n // We also check that `G::g` method isn't rendered because there is no `self` argument.\n-// @!has '-' '//*[@id=\"deref-methods-G\"]'\n+// @!has '-' '//*[@id=\"deref-methods-G\"]' ''\n impl Deref for E {\n     type Target = F;\n \n@@ -73,7 +73,7 @@ impl Deref for E {\n \n // @has recursive_deref/struct.F.html '//h3[@class=\"code-header in-band\"]' 'impl Deref for F'\n // We also check that `G::g` method isn't rendered because there is no `self` argument.\n-// @!has '-' '//*[@id=\"deref-methods-G\"]'\n+// @!has '-' '//*[@id=\"deref-methods-G\"]' ''\n impl Deref for F {\n     type Target = G;\n \n@@ -101,7 +101,7 @@ impl I {\n }\n \n // @has recursive_deref/struct.H.html '//h3[@class=\"code-header in-band\"]' 'impl Deref for H'\n-// @!has '-' '//*[@id=\"deref-methods-I\"]'\n+// @!has '-' '//*[@id=\"deref-methods-I\"]' ''\n impl Deref for H {\n     type Target = I;\n "}, {"sha": "599c429a6e1de388f306ae803c44ecdfb95ce2bd", "filename": "src/test/rustdoc/remove-url-from-headings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fremove-url-from-headings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fremove-url-from-headings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fremove-url-from-headings.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -1,7 +1,7 @@\n #![crate_name = \"foo\"]\n \n // @has foo/fn.foo.html\n-// @!has - '//a[@href=\"http://a.a\"]'\n+// @!has - '//a[@href=\"http://a.a\"]' ''\n // @has - '//a[@href=\"#implementing-stuff-somewhere\"]' 'Implementing stuff somewhere'\n // @has - '//a[@href=\"#another-one-urg\"]' 'Another one urg'\n "}, {"sha": "efd366405bfeb0bbe9caa5328602cba92269c0db", "filename": "src/test/rustdoc/search-index-summaries.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fsearch-index-summaries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fsearch-index-summaries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsearch-index-summaries.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -1,8 +1,8 @@\n #![crate_name = \"foo\"]\n \n-// @has 'search-index.js' 'Foo short link.'\n-// @!has - 'www.example.com'\n-// @!has - 'More Foo.'\n+// @hasraw 'search-index.js' 'Foo short link.'\n+// @!hasraw - 'www.example.com'\n+// @!hasraw - 'More Foo.'\n \n /// Foo short [link](https://www.example.com/).\n ///"}, {"sha": "d1d05eb886b00e144708c57e697eb7b9a3fba0ad", "filename": "src/test/rustdoc/search-index.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fsearch-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fsearch-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsearch-index.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -2,25 +2,25 @@\n \n use std::ops::Deref;\n \n-// @has search-index.js Foo\n+// @hasraw search-index.js Foo\n pub use private::Foo;\n \n mod private {\n     pub struct Foo;\n     impl Foo {\n-        pub fn test_method() {} // @has - test_method\n-        fn priv_method() {} // @!has - priv_method\n+        pub fn test_method() {} // @hasraw - test_method\n+        fn priv_method() {} // @!hasraw - priv_method\n     }\n \n     pub trait PrivateTrait {\n-        fn trait_method(&self) {} // @!has - priv_method\n+        fn trait_method(&self) {} // @!hasraw - priv_method\n     }\n }\n \n pub struct Bar;\n \n impl Deref for Bar {\n-    // @!has search-index.js Target\n+    // @!hasraw search-index.js Target\n     type Target = Bar;\n     fn deref(&self) -> &Bar { self }\n }"}, {"sha": "69e742ee74739a5429a1a2cb630e854cfe7185f8", "filename": "src/test/rustdoc/show-const-contents.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fshow-const-contents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fshow-const-contents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fshow-const-contents.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -1,57 +1,57 @@\n // Test that the contents of constants are displayed as part of the\n // documentation.\n \n-// @has show_const_contents/constant.CONST_S.html 'show this'\n-// @!has show_const_contents/constant.CONST_S.html '; //'\n+// @hasraw show_const_contents/constant.CONST_S.html 'show this'\n+// @!hasraw show_const_contents/constant.CONST_S.html '; //'\n pub const CONST_S: &'static str = \"show this\";\n \n-// @has show_const_contents/constant.CONST_I32.html '= 42;'\n-// @!has show_const_contents/constant.CONST_I32.html '; //'\n+// @hasraw show_const_contents/constant.CONST_I32.html '= 42;'\n+// @!hasraw show_const_contents/constant.CONST_I32.html '; //'\n pub const CONST_I32: i32 = 42;\n \n-// @has show_const_contents/constant.CONST_I32_HEX.html '= 0x42;'\n-// @!has show_const_contents/constant.CONST_I32_HEX.html '; //'\n+// @hasraw show_const_contents/constant.CONST_I32_HEX.html '= 0x42;'\n+// @!hasraw show_const_contents/constant.CONST_I32_HEX.html '; //'\n pub const CONST_I32_HEX: i32 = 0x42;\n \n-// @has show_const_contents/constant.CONST_NEG_I32.html '= -42;'\n-// @!has show_const_contents/constant.CONST_NEG_I32.html '; //'\n+// @hasraw show_const_contents/constant.CONST_NEG_I32.html '= -42;'\n+// @!hasraw show_const_contents/constant.CONST_NEG_I32.html '; //'\n pub const CONST_NEG_I32: i32 = -42;\n \n-// @has show_const_contents/constant.CONST_EQ_TO_VALUE_I32.html '= 42i32;'\n-// @!has show_const_contents/constant.CONST_EQ_TO_VALUE_I32.html '// 42i32'\n+// @hasraw show_const_contents/constant.CONST_EQ_TO_VALUE_I32.html '= 42i32;'\n+// @!hasraw show_const_contents/constant.CONST_EQ_TO_VALUE_I32.html '// 42i32'\n pub const CONST_EQ_TO_VALUE_I32: i32 = 42i32;\n \n-// @has show_const_contents/constant.CONST_CALC_I32.html '= _; // 43i32'\n+// @hasraw show_const_contents/constant.CONST_CALC_I32.html '= _; // 43i32'\n pub const CONST_CALC_I32: i32 = 42 + 1;\n \n-// @!has show_const_contents/constant.CONST_REF_I32.html '= &42;'\n-// @!has show_const_contents/constant.CONST_REF_I32.html '; //'\n+// @!hasraw show_const_contents/constant.CONST_REF_I32.html '= &42;'\n+// @!hasraw show_const_contents/constant.CONST_REF_I32.html '; //'\n pub const CONST_REF_I32: &'static i32 = &42;\n \n-// @has show_const_contents/constant.CONST_I32_MAX.html '= i32::MAX; // 2_147_483_647i32'\n+// @hasraw show_const_contents/constant.CONST_I32_MAX.html '= i32::MAX; // 2_147_483_647i32'\n pub const CONST_I32_MAX: i32 = i32::MAX;\n \n-// @!has show_const_contents/constant.UNIT.html '= ();'\n-// @!has show_const_contents/constant.UNIT.html '; //'\n+// @!hasraw show_const_contents/constant.UNIT.html '= ();'\n+// @!hasraw show_const_contents/constant.UNIT.html '; //'\n pub const UNIT: () = ();\n \n pub struct MyType(i32);\n \n-// @!has show_const_contents/constant.MY_TYPE.html '= MyType(42);'\n-// @!has show_const_contents/constant.MY_TYPE.html '; //'\n+// @!hasraw show_const_contents/constant.MY_TYPE.html '= MyType(42);'\n+// @!hasraw show_const_contents/constant.MY_TYPE.html '; //'\n pub const MY_TYPE: MyType = MyType(42);\n \n pub struct MyTypeWithStr(&'static str);\n \n-// @!has show_const_contents/constant.MY_TYPE_WITH_STR.html '= MyTypeWithStr(\"show this\");'\n-// @!has show_const_contents/constant.MY_TYPE_WITH_STR.html '; //'\n+// @!hasraw show_const_contents/constant.MY_TYPE_WITH_STR.html '= MyTypeWithStr(\"show this\");'\n+// @!hasraw show_const_contents/constant.MY_TYPE_WITH_STR.html '; //'\n pub const MY_TYPE_WITH_STR: MyTypeWithStr = MyTypeWithStr(\"show this\");\n \n-// @has show_const_contents/constant.PI.html '= 3.14159265358979323846264338327950288f32;'\n-// @has show_const_contents/constant.PI.html '; // 3.14159274f32'\n+// @hasraw show_const_contents/constant.PI.html '= 3.14159265358979323846264338327950288f32;'\n+// @hasraw show_const_contents/constant.PI.html '; // 3.14159274f32'\n pub use std::f32::consts::PI;\n \n-// @has show_const_contents/constant.MAX.html '= i32::MAX; // 2_147_483_647i32'\n+// @hasraw show_const_contents/constant.MAX.html '= i32::MAX; // 2_147_483_647i32'\n #[allow(deprecated, deprecated_in_future)]\n pub use std::i32::MAX;\n \n@@ -61,7 +61,7 @@ macro_rules! int_module {\n     )\n }\n \n-// @has show_const_contents/constant.MIN.html '= i16::MIN; // -32_768i16'\n+// @hasraw show_const_contents/constant.MIN.html '= i16::MIN; // -32_768i16'\n int_module!(i16);\n \n // @has show_const_contents/constant.ESCAPE.html //pre '= r#\"<script>alert(\"ESCAPE\");</script>\"#;'"}, {"sha": "36718ebe1a6302712bfe1b8b9efaac5125c93bff", "filename": "src/test/rustdoc/sized_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fsized_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fsized_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsized_trait.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -1,13 +1,13 @@\n #![crate_name = \"foo\"]\n \n // @has foo/struct.Bar.html\n-// @!has - '//*[@id=\"impl-Sized\"]'\n+// @!has - '//*[@id=\"impl-Sized\"]' ''\n pub struct Bar {\n     a: u16,\n }\n \n // @has foo/struct.Foo.html\n-// @!has - '//*[@id=\"impl-Sized\"]'\n+// @!has - '//*[@id=\"impl-Sized\"]' ''\n pub struct Foo<T: ?Sized>(T);\n \n // @has foo/struct.Unsized.html"}, {"sha": "b5cc8bc8304e8d4d3dbeec28d00dd70118ca9696", "filename": "src/test/rustdoc/sort-modules-by-appearance.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fsort-modules-by-appearance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fsort-modules-by-appearance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsort-modules-by-appearance.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -9,5 +9,5 @@ pub mod module_c {}\n \n pub mod module_a {}\n \n-// @matches 'sort_modules_by_appearance/index.html' '(?s)module_b.*module_c.*module_a'\n-// @matches 'sort_modules_by_appearance/sidebar-items.js' '\"module_b\".*\"module_c\".*\"module_a\"'\n+// @matchesraw 'sort_modules_by_appearance/index.html' '(?s)module_b.*module_c.*module_a'\n+// @matchesraw 'sort_modules_by_appearance/sidebar-items.js' '\"module_b\".*\"module_c\".*\"module_a\"'"}, {"sha": "4e166479063cc072c55a37d5d12857aa5a693e6f", "filename": "src/test/rustdoc/source-file.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fsource-file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fsource-file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsource-file.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -1,5 +1,5 @@\n #![crate_name = \"foo\"]\n \n-// @has source-files.js source-file.rs\n+// @hasraw source-files.js source-file.rs\n \n pub struct Foo;"}, {"sha": "08c055c5b8dbbed9d72c661f7d498bf62414ceed", "filename": "src/test/rustdoc/static-root-path.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fstatic-root-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Fstatic-root-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fstatic-root-path.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -1,18 +1,18 @@\n // compile-flags:-Z unstable-options --static-root-path /cache/\n \n // @has static_root_path/struct.SomeStruct.html\n-// @matches - '\"/cache/main\\.js\"'\n-// @!matches - '\"\\.\\./main\\.js\"'\n-// @matches - 'data-root-path=\"\\.\\./\"'\n-// @!matches - '\"/cache/search-index\\.js\"'\n+// @matchesraw - '\"/cache/main\\.js\"'\n+// @!matchesraw - '\"\\.\\./main\\.js\"'\n+// @matchesraw - 'data-root-path=\"\\.\\./\"'\n+// @!matchesraw - '\"/cache/search-index\\.js\"'\n pub struct SomeStruct;\n \n // @has src/static_root_path/static-root-path.rs.html\n-// @matches - '\"/cache/source-script\\.js\"'\n-// @!matches - '\"\\.\\./\\.\\./source-script\\.js\"'\n-// @matches - '\"\\.\\./\\.\\./source-files.js\"'\n-// @!matches - '\"/cache/source-files\\.js\"'\n+// @matchesraw - '\"/cache/source-script\\.js\"'\n+// @!matchesraw - '\"\\.\\./\\.\\./source-script\\.js\"'\n+// @matchesraw - '\"\\.\\./\\.\\./source-files.js\"'\n+// @!matchesraw - '\"/cache/source-files\\.js\"'\n \n // @has settings.html\n-// @matches - '/cache/settings\\.js'\n-// @!matches - '\\./settings\\.js'\n+// @matchesraw - '/cache/settings\\.js'\n+// @!matchesraw - '\\./settings\\.js'"}, {"sha": "194f49f16d007cb6f6f603f776bcae982471b923", "filename": "src/test/rustdoc/table-in-docblock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Ftable-in-docblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Ftable-in-docblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftable-in-docblock.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -2,7 +2,7 @@\n \n // @has foo/struct.Foo.html\n // @count - '//*[@class=\"docblock\"]/div/table' 2\n-// @!has - '//*[@class=\"docblock\"]/table'\n+// @!has - '//*[@class=\"docblock\"]/table' ''\n /// | hello | hello2 |\n /// | ----- | ------ |\n /// | data  | data2  |"}, {"sha": "dbaf195e1a9636b369fa09e1ef46449663383dba", "filename": "src/test/rustdoc/toggle-item-contents.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Ftoggle-item-contents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Ftoggle-item-contents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftoggle-item-contents.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -62,7 +62,7 @@ pub struct PrivStruct {\n }\n \n // @has 'toggle_item_contents/enum.Enum.html'\n-// @!has - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]'\n+// @!has - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' ''\n pub enum Enum {\n     A, B, C,\n     D {\n@@ -72,7 +72,7 @@ pub enum Enum {\n }\n \n // @has 'toggle_item_contents/enum.EnumStructVariant.html'\n-// @!has - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]'\n+// @!has - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' ''\n pub enum EnumStructVariant {\n     A, B, C,\n     D {"}, {"sha": "fba594c38273cfb2f2a5b55ad666fcb13a354c9b", "filename": "src/test/rustdoc/trait-impl-items-links-and-anchors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Ftrait-impl-items-links-and-anchors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Ftrait-impl-items-links-and-anchors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftrait-impl-items-links-and-anchors.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -59,7 +59,7 @@ pub struct MyStruct;\n \n // We check that associated items with default values aren't generated in the implementors list.\n impl MyTrait for (u8, u8) {\n-    // @!has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedconstant.VALUE-4\"]'\n+    // @!has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedconstant.VALUE-4\"]' ''\n     type Assoc = bool;\n     fn trait_function(&self) {}\n }"}, {"sha": "4d5173f6024c774e167a88a348408c3795ab9f7e", "filename": "src/test/rustdoc/trait-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Ftrait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Ftrait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftrait-impl.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -40,7 +40,7 @@ impl Trait for Struct {\n     fn c() {}\n \n     // @has - '//*[@id=\"method.d\"]/../../div[@class=\"docblock\"]/p' 'Escaped formatting a*b*c* works'\n-    // @!has - '//*[@id=\"method.d\"]/../../div[@class=\"docblock\"]/p/em'\n+    // @!has - '//*[@id=\"method.d\"]/../../div[@class=\"docblock\"]/p/em' ''\n     fn d() {}\n \n     // @has - '//*[@id=\"impl-Trait-for-Struct\"]/h3//a/@href' 'trait.Trait.html'"}, {"sha": "66bb409325c9980908dc4d89ac776b6a76d2a127", "filename": "src/test/rustdoc/tuple-struct-fields-doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Ftuple-struct-fields-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Ftuple-struct-fields-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftuple-struct-fields-doc.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -5,7 +5,7 @@\n // @has - '//h3[@class=\"sidebar-title\"]/a[@href=\"#fields\"]' 'Tuple Fields'\n // @has - '//*[@id=\"structfield.0\"]' '0: u32'\n // @has - '//*[@id=\"main-content\"]/div[@class=\"docblock\"]' 'hello'\n-// @!has - '//*[@id=\"structfield.1\"]'\n+// @!has - '//*[@id=\"structfield.1\"]' ''\n // @has - '//*[@id=\"structfield.2\"]' '2: char'\n // @has - '//*[@id=\"structfield.3\"]' '3: i8'\n // @has - '//*[@id=\"main-content\"]/div[@class=\"docblock\"]' 'not hello'"}, {"sha": "6bb5e10f8813734ab072a7b6103a3a213ef69014", "filename": "src/test/rustdoc/type-layout-flag-required.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Ftype-layout-flag-required.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Ftype-layout-flag-required.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftype-layout-flag-required.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -1,4 +1,4 @@\n // Tests that `--show-type-layout` is required in order to show layout info.\n \n-// @!has type_layout_flag_required/struct.Foo.html 'Size: '\n+// @!hasraw type_layout_flag_required/struct.Foo.html 'Size: '\n pub struct Foo(usize);"}, {"sha": "5e0a0411a62b656135df2b24647c0f6da6641714", "filename": "src/test/rustdoc/type-layout.rs", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Ftype-layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Ftype-layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftype-layout.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -1,84 +1,84 @@\n // compile-flags: --show-type-layout -Z unstable-options\n \n-// @has type_layout/struct.Foo.html 'Size: '\n-// @has - ' bytes'\n+// @hasraw type_layout/struct.Foo.html 'Size: '\n+// @hasraw - ' bytes'\n // @has - '//*[@id=\"layout\"]/a[@href=\"#layout\"]' ''\n pub struct Foo {\n     pub a: usize,\n     b: Vec<String>,\n }\n \n-// @has type_layout/enum.Bar.html 'Size: '\n-// @has - ' bytes'\n+// @hasraw type_layout/enum.Bar.html 'Size: '\n+// @hasraw - ' bytes'\n pub enum Bar<'a> {\n     A(String),\n     B(&'a str, (std::collections::HashMap<String, usize>, Foo)),\n }\n \n-// @has type_layout/union.Baz.html 'Size: '\n-// @has - ' bytes'\n+// @hasraw type_layout/union.Baz.html 'Size: '\n+// @hasraw - ' bytes'\n pub union Baz {\n     a: &'static str,\n     b: usize,\n     c: &'static [u8],\n }\n \n-// @has type_layout/struct.X.html 'Size: '\n-// @has - ' bytes'\n+// @hasraw type_layout/struct.X.html 'Size: '\n+// @hasraw - ' bytes'\n pub struct X(usize);\n \n-// @has type_layout/struct.Y.html 'Size: '\n-// @has - '1 byte'\n-// @!has - ' bytes'\n+// @hasraw type_layout/struct.Y.html 'Size: '\n+// @hasraw - '1 byte'\n+// @!hasraw - ' bytes'\n pub struct Y(u8);\n \n-// @has type_layout/struct.Z.html 'Size: '\n-// @has - '0 bytes'\n+// @hasraw type_layout/struct.Z.html 'Size: '\n+// @hasraw - '0 bytes'\n pub struct Z;\n \n // We can't compute layout for generic types.\n-// @has type_layout/struct.Generic.html 'Unable to compute type layout, possibly due to this type having generic parameters'\n-// @!has - 'Size: '\n+// @hasraw type_layout/struct.Generic.html 'Unable to compute type layout, possibly due to this type having generic parameters'\n+// @!hasraw - 'Size: '\n pub struct Generic<T>(T);\n \n // We *can*, however, compute layout for types that are only generic over lifetimes,\n // because lifetimes are a type-system construct.\n-// @has type_layout/struct.GenericLifetimes.html 'Size: '\n-// @has - ' bytes'\n+// @hasraw type_layout/struct.GenericLifetimes.html 'Size: '\n+// @hasraw - ' bytes'\n pub struct GenericLifetimes<'a>(&'a str);\n \n-// @has type_layout/struct.Unsized.html 'Size: '\n-// @has - '(unsized)'\n+// @hasraw type_layout/struct.Unsized.html 'Size: '\n+// @hasraw - '(unsized)'\n pub struct Unsized([u8]);\n \n-// @has type_layout/type.TypeAlias.html 'Size: '\n-// @has - ' bytes'\n+// @hasraw type_layout/type.TypeAlias.html 'Size: '\n+// @hasraw - ' bytes'\n pub type TypeAlias = X;\n \n-// @has type_layout/type.GenericTypeAlias.html 'Size: '\n-// @has - '8 bytes'\n+// @hasraw type_layout/type.GenericTypeAlias.html 'Size: '\n+// @hasraw - '8 bytes'\n pub type GenericTypeAlias = (Generic<(u32, ())>, Generic<u32>);\n \n // Regression test for the rustdoc equivalent of #85103.\n-// @has type_layout/type.Edges.html 'Encountered an error during type layout; the type failed to be normalized.'\n+// @hasraw type_layout/type.Edges.html 'Encountered an error during type layout; the type failed to be normalized.'\n pub type Edges<'a, E> = std::borrow::Cow<'a, [E]>;\n \n-// @!has type_layout/trait.MyTrait.html 'Size: '\n+// @!hasraw type_layout/trait.MyTrait.html 'Size: '\n pub trait MyTrait {}\n \n-// @has type_layout/enum.Variants.html 'Size: '\n-// @has - '2 bytes'\n-// @has - '<code>A</code>: 0 bytes'\n-// @has - '<code>B</code>: 1 byte'\n+// @hasraw type_layout/enum.Variants.html 'Size: '\n+// @hasraw - '2 bytes'\n+// @hasraw - '<code>A</code>: 0 bytes'\n+// @hasraw - '<code>B</code>: 1 byte'\n pub enum Variants {\n     A,\n     B(u8),\n }\n \n-// @has type_layout/enum.WithNiche.html 'Size: '\n+// @hasraw type_layout/enum.WithNiche.html 'Size: '\n // @has - //p '4 bytes'\n-// @has - '<code>None</code>: 0 bytes'\n-// @has - '<code>Some</code>: 4 bytes'\n+// @hasraw - '<code>None</code>: 0 bytes'\n+// @hasraw - '<code>Some</code>: 4 bytes'\n pub enum WithNiche {\n     None,\n     Some(std::num::NonZeroU32),"}, {"sha": "b68ec4557ad55c7baf3adac783ad4f6f2358ba67", "filename": "src/test/rustdoc/typedef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Ftypedef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Ftypedef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftypedef.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -11,7 +11,7 @@ impl MyStruct {\n // @has typedef/type.MyAlias.html\n // @has - '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' 'impl MyAlias'\n // @has - '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' 'impl MyTrait for MyAlias'\n-// @has - 'Alias docstring'\n+// @hasraw - 'Alias docstring'\n // @has - '//*[@class=\"sidebar\"]//*[@class=\"location\"]' 'MyAlias'\n // @has - '//*[@class=\"sidebar\"]//a[@href=\"#implementations\"]' 'Methods'\n // @has - '//*[@class=\"sidebar\"]//a[@href=\"#trait-implementations\"]' 'Trait Implementations'"}, {"sha": "f5eabda59b7820e3bde8fe45e65493de2128d67f", "filename": "src/test/rustdoc/universal-impl-trait.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Funiversal-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Frustdoc%2Funiversal-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Funiversal-impl-trait.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -5,15 +5,15 @@ use std::borrow::Borrow;\n \n // @has foo/fn.foo.html\n // @has - //pre 'foo('\n-// @matches - '_x: impl <a class=\"trait\" href=\"[^\"]+/trait\\.Clone\\.html\"'\n-// @matches - '_z: .+impl.+trait\\.Copy\\.html.+, impl.+trait\\.Clone\\.html'\n+// @matchesraw - '_x: impl <a class=\"trait\" href=\"[^\"]+/trait\\.Clone\\.html\"'\n+// @matchesraw - '_z: .+impl.+trait\\.Copy\\.html.+, impl.+trait\\.Clone\\.html'\n pub fn foo(_x: impl Clone, _y: i32, _z: (impl Copy, impl Clone)) {\n }\n \n pub trait Trait {\n     // @has foo/trait.Trait.html\n-    // @has - 'method</a>('\n-    // @matches - '_x: impl <a class=\"trait\" href=\"[^\"]+/trait\\.Debug\\.html\"'\n+    // @hasraw - 'method</a>('\n+    // @matchesraw - '_x: impl <a class=\"trait\" href=\"[^\"]+/trait\\.Debug\\.html\"'\n     fn method(&self, _x: impl std::fmt::Debug) {\n     }\n }\n@@ -22,30 +22,30 @@ pub struct S<T>(T);\n \n impl<T> S<T> {\n     // @has foo/struct.S.html\n-    // @has - 'bar</a>('\n-    // @matches - '_bar: impl <a class=\"trait\" href=\"[^\"]+/trait\\.Copy\\.html\"'\n+    // @hasraw - 'bar</a>('\n+    // @matchesraw - '_bar: impl <a class=\"trait\" href=\"[^\"]+/trait\\.Copy\\.html\"'\n     pub fn bar(_bar: impl Copy) {\n     }\n \n-    // @has - 'baz</a>('\n-    // @matches - '_baz:.+struct\\.S\\.html.+impl .+trait\\.Clone\\.html'\n+    // @hasraw - 'baz</a>('\n+    // @matchesraw - '_baz:.+struct\\.S\\.html.+impl .+trait\\.Clone\\.html'\n     pub fn baz(_baz: S<impl Clone>) {\n     }\n \n-    // @has - 'qux</a>('\n-    // @matches - 'trait\\.Read\\.html'\n+    // @hasraw - 'qux</a>('\n+    // @matchesraw - 'trait\\.Read\\.html'\n     pub fn qux(_qux: impl IntoIterator<Item = S<impl Read>>) {\n     }\n }\n \n-// @has - 'method</a>('\n-// @matches - '_x: impl <a class=\"trait\" href=\"[^\"]+/trait\\.Debug\\.html\"'\n+// @hasraw - 'method</a>('\n+// @matchesraw - '_x: impl <a class=\"trait\" href=\"[^\"]+/trait\\.Debug\\.html\"'\n impl<T> Trait for S<T> {}\n \n // @has foo/fn.much_universe.html\n-// @matches - 'T:.+Borrow.+impl .+trait\\.Trait\\.html'\n-// @matches - 'U:.+IntoIterator.+= impl.+Iterator\\.html.+= impl.+Clone\\.html'\n-// @matches - '_: impl .+trait\\.Read\\.html.+ \\+ .+trait\\.Clone\\.html'\n+// @matchesraw - 'T:.+Borrow.+impl .+trait\\.Trait\\.html'\n+// @matchesraw - 'U:.+IntoIterator.+= impl.+Iterator\\.html.+= impl.+Clone\\.html'\n+// @matchesraw - '_: impl .+trait\\.Read\\.html.+ \\+ .+trait\\.Clone\\.html'\n pub fn much_universe<\n     T: Borrow<impl Trait>,\n     U: IntoIterator<Item = impl Iterator<Item = impl Clone>>,"}, {"sha": "5572f1f88df4cf6d819481a756ffd1f6ac95dfe1", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-100360.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-100360.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-100360.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-100360.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -0,0 +1,13 @@\n+// check-pass\n+// (this requires debug assertions)\n+\n+#![feature(adt_const_params)]\n+#![allow(incomplete_features)]\n+\n+fn foo<const B: &'static bool>(arg: &'static bool) -> bool {\n+    B == arg\n+}\n+\n+fn main() {\n+    foo::<{ &true }>(&false);\n+}"}, {"sha": "cde849d901788169cc51269a2e8693a323d1d5a8", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-89851.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-89851.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-89851.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-89851.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+// (this requires debug assertions)\n+\n+#![feature(adt_const_params)]\n+#![allow(incomplete_features)]\n+\n+pub const BAR: () = ice::<\"\">();\n+pub const fn ice<const N: &'static str>() {\n+    &10;\n+}\n+\n+fn main() {}"}, {"sha": "8cdfe247e025e7b17626f8976fbaaeb2ff781f81", "filename": "src/test/ui/higher-rank-trait-bounds/complex.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fcomplex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fcomplex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fcomplex.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "previous_filename": "src/test/ui/hrtb/complex.rs"}, {"sha": "1afd15613b51c301643befc0db04542813a037c9", "filename": "src/test/ui/higher-rank-trait-bounds/due-to-where-clause.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fdue-to-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fdue-to-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fdue-to-where-clause.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "previous_filename": "src/test/ui/hrtb/due-to-where-clause.rs"}, {"sha": "520938a633514b6c41bdf929605ab24a2f061843", "filename": "src/test/ui/higher-rank-trait-bounds/due-to-where-clause.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fdue-to-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fdue-to-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fdue-to-where-clause.stderr?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "previous_filename": "src/test/ui/hrtb/due-to-where-clause.stderr"}, {"sha": "a20d03c7747cdb24078e791a4a31de085176744b", "filename": "src/test/ui/higher-rank-trait-bounds/hrtb-cache-issue-54302.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-cache-issue-54302.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-cache-issue-54302.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-cache-issue-54302.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "previous_filename": "src/test/ui/hrtb/hrtb-cache-issue-54302.rs"}, {"sha": "f014eab8601fa4a728a6411304841a81553f5eeb", "filename": "src/test/ui/higher-rank-trait-bounds/hrtb-cache-issue-54302.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-cache-issue-54302.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-cache-issue-54302.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-cache-issue-54302.stderr?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "previous_filename": "src/test/ui/hrtb/hrtb-cache-issue-54302.stderr"}, {"sha": "e83686404a351b1f5abf79a41038192b870b0642", "filename": "src/test/ui/higher-rank-trait-bounds/hrtb-conflate-regions.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-conflate-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-conflate-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-conflate-regions.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "previous_filename": "src/test/ui/hrtb/hrtb-conflate-regions.rs"}, {"sha": "46f5308dd87ba4cb193cc6884f806743790f883f", "filename": "src/test/ui/higher-rank-trait-bounds/hrtb-conflate-regions.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-conflate-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-conflate-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-conflate-regions.stderr?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "previous_filename": "src/test/ui/hrtb/hrtb-conflate-regions.stderr"}, {"sha": "05d3e1a434e69c78d0bf37e837e35251cc037fc2", "filename": "src/test/ui/higher-rank-trait-bounds/hrtb-debruijn-in-receiver.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-debruijn-in-receiver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-debruijn-in-receiver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-debruijn-in-receiver.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "previous_filename": "src/test/ui/hrtb/hrtb-debruijn-in-receiver.rs"}, {"sha": "fa391ecba8a9510a686be3cf2057f324bd28480f", "filename": "src/test/ui/higher-rank-trait-bounds/hrtb-debruijn-in-receiver.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-debruijn-in-receiver.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-debruijn-in-receiver.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-debruijn-in-receiver.stderr?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "previous_filename": "src/test/ui/hrtb/hrtb-debruijn-in-receiver.stderr"}, {"sha": "567802376184da5316e82becf37edbb70d9724c1", "filename": "src/test/ui/higher-rank-trait-bounds/hrtb-exists-forall-fn.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-exists-forall-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-exists-forall-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-exists-forall-fn.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "previous_filename": "src/test/ui/hrtb/hrtb-exists-forall-fn.rs"}, {"sha": "9914783d9767d5d99ecd0790eae8597cc1714265", "filename": "src/test/ui/higher-rank-trait-bounds/hrtb-exists-forall-fn.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-exists-forall-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-exists-forall-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-exists-forall-fn.stderr?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "previous_filename": "src/test/ui/hrtb/hrtb-exists-forall-fn.stderr"}, {"sha": "921061916fc95b7d46c891db83d39cfae29499a5", "filename": "src/test/ui/higher-rank-trait-bounds/hrtb-exists-forall-trait-contravariant.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-exists-forall-trait-contravariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-exists-forall-trait-contravariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-exists-forall-trait-contravariant.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "previous_filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-contravariant.rs"}, {"sha": "364b613fc7717b87ac4401c7d5edaa7883bad873", "filename": "src/test/ui/higher-rank-trait-bounds/hrtb-exists-forall-trait-contravariant.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-exists-forall-trait-contravariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-exists-forall-trait-contravariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-exists-forall-trait-contravariant.stderr?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "previous_filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-contravariant.stderr"}, {"sha": "f95496a6c3cc0dc5845f83dfede498241dd2632f", "filename": "src/test/ui/higher-rank-trait-bounds/hrtb-exists-forall-trait-covariant.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-exists-forall-trait-covariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-exists-forall-trait-covariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-exists-forall-trait-covariant.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "previous_filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-covariant.rs"}, {"sha": "9b9e4496a870dc926c88791b9e4aaebc4e54d623", "filename": "src/test/ui/higher-rank-trait-bounds/hrtb-exists-forall-trait-invariant.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-exists-forall-trait-invariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-exists-forall-trait-invariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-exists-forall-trait-invariant.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "previous_filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-invariant.rs"}, {"sha": "cb2ce8a4116aa887b5621130f33e9f5e1bbd391d", "filename": "src/test/ui/higher-rank-trait-bounds/hrtb-exists-forall-trait-invariant.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-exists-forall-trait-invariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-exists-forall-trait-invariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-exists-forall-trait-invariant.stderr?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "previous_filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-invariant.stderr"}, {"sha": "f9ae1429ee4a2c52a2a4c6e03a29ef3fe512c849", "filename": "src/test/ui/higher-rank-trait-bounds/hrtb-higher-ranker-supertraits-transitive.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-higher-ranker-supertraits-transitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-higher-ranker-supertraits-transitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-higher-ranker-supertraits-transitive.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "previous_filename": "src/test/ui/hrtb/hrtb-higher-ranker-supertraits-transitive.rs"}, {"sha": "8cda76b9490c2faa02aa7911ff42ab729a8f9e98", "filename": "src/test/ui/higher-rank-trait-bounds/hrtb-higher-ranker-supertraits-transitive.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-higher-ranker-supertraits-transitive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-higher-ranker-supertraits-transitive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-higher-ranker-supertraits-transitive.stderr?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "previous_filename": "src/test/ui/hrtb/hrtb-higher-ranker-supertraits-transitive.stderr"}, {"sha": "48ebe5017aa62df306ff1efa806a4a39cf689726", "filename": "src/test/ui/higher-rank-trait-bounds/hrtb-higher-ranker-supertraits.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-higher-ranker-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-higher-ranker-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-higher-ranker-supertraits.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "previous_filename": "src/test/ui/hrtb/hrtb-higher-ranker-supertraits.rs"}, {"sha": "88793a1525bfb7ba98d4bb881f27108607c75698", "filename": "src/test/ui/higher-rank-trait-bounds/hrtb-higher-ranker-supertraits.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-higher-ranker-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-higher-ranker-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-higher-ranker-supertraits.stderr?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "previous_filename": "src/test/ui/hrtb/hrtb-higher-ranker-supertraits.stderr"}, {"sha": "89fc4705a787fa1cc976b803c7bbfed38f685577", "filename": "src/test/ui/higher-rank-trait-bounds/hrtb-identity-fn-borrows.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-identity-fn-borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-identity-fn-borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-identity-fn-borrows.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "previous_filename": "src/test/ui/hrtb/hrtb-identity-fn-borrows.rs"}, {"sha": "4886a3c8bad62925aec0d2e0500d52c5ba7a3c30", "filename": "src/test/ui/higher-rank-trait-bounds/hrtb-identity-fn-borrows.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-identity-fn-borrows.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-identity-fn-borrows.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-identity-fn-borrows.stderr?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "previous_filename": "src/test/ui/hrtb/hrtb-identity-fn-borrows.stderr"}, {"sha": "8fb4218f8a409cb3d50993eab69b043c40048456", "filename": "src/test/ui/higher-rank-trait-bounds/hrtb-just-for-static.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-just-for-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-just-for-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-just-for-static.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "previous_filename": "src/test/ui/hrtb/hrtb-just-for-static.rs"}, {"sha": "b4312091edb279f9a987b73efe3e97634be548aa", "filename": "src/test/ui/higher-rank-trait-bounds/hrtb-just-for-static.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-just-for-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-just-for-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-just-for-static.stderr?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "previous_filename": "src/test/ui/hrtb/hrtb-just-for-static.stderr"}, {"sha": "a94c80eb30b16c23589d081828522ac35303e96c", "filename": "src/test/ui/higher-rank-trait-bounds/hrtb-perfect-forwarding.polonius.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-perfect-forwarding.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-perfect-forwarding.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-perfect-forwarding.polonius.stderr?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "previous_filename": "src/test/ui/hrtb/hrtb-perfect-forwarding.polonius.stderr"}, {"sha": "d45fa183c0c4c5f8cd571d5ba5dd32f384e52ffa", "filename": "src/test/ui/higher-rank-trait-bounds/hrtb-perfect-forwarding.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-perfect-forwarding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-perfect-forwarding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-perfect-forwarding.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "previous_filename": "src/test/ui/hrtb/hrtb-perfect-forwarding.rs"}, {"sha": "1461e7fd2ddd7fbddddb647509cda2b91bfcfe72", "filename": "src/test/ui/higher-rank-trait-bounds/hrtb-perfect-forwarding.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-perfect-forwarding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-perfect-forwarding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-perfect-forwarding.stderr?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "previous_filename": "src/test/ui/hrtb/hrtb-perfect-forwarding.stderr"}, {"sha": "e5f46f711c2fbf73721f792ed9e1d6903a82c178", "filename": "src/test/ui/higher-rank-trait-bounds/issue-30786.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-30786.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-30786.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-30786.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "previous_filename": "src/test/ui/hrtb/issue-30786.rs"}, {"sha": "ffe3d7b81f51eca8b207d10a60cd3f5154cef018", "filename": "src/test/ui/higher-rank-trait-bounds/issue-30786.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-30786.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-30786.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-30786.stderr?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "previous_filename": "src/test/ui/hrtb/issue-30786.stderr"}, {"sha": "4a09f4be156e2bb60a879883cf640004796c28d1", "filename": "src/test/ui/higher-rank-trait-bounds/issue-46989.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-46989.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-46989.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-46989.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "previous_filename": "src/test/ui/hrtb/issue-46989.rs"}, {"sha": "309e1a676edafa4669f72f15f32c129f69cf4e50", "filename": "src/test/ui/higher-rank-trait-bounds/issue-46989.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-46989.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-46989.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-46989.stderr?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "previous_filename": "src/test/ui/hrtb/issue-46989.stderr"}, {"sha": "392e7233b567aecf26e5402746ccc5b536c399e5", "filename": "src/test/ui/higher-rank-trait-bounds/issue-57639.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-57639.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-57639.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-57639.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "previous_filename": "src/test/ui/hrtb/issue-57639.rs"}, {"sha": "f36d549e476b8baa6b04d25125475c8dd3284965", "filename": "src/test/ui/higher-rank-trait-bounds/issue-58451.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-58451.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-58451.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-58451.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "previous_filename": "src/test/ui/hrtb/issue-58451.rs"}, {"sha": "22ba63c3e86f0ef812ddbee47080f403af17b524", "filename": "src/test/ui/higher-rank-trait-bounds/issue-58451.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-58451.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-58451.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-58451.stderr?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "previous_filename": "src/test/ui/hrtb/issue-58451.stderr"}, {"sha": "ae21dbce011398b060b4e9fd62a659d24ef74a76", "filename": "src/test/ui/higher-rank-trait-bounds/issue-62203-hrtb-ice.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-62203-hrtb-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-62203-hrtb-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-62203-hrtb-ice.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "previous_filename": "src/test/ui/hrtb/issue-62203-hrtb-ice.rs"}, {"sha": "8365fd0c79e1b52031fdda59825593ec9c5026b9", "filename": "src/test/ui/higher-rank-trait-bounds/issue-62203-hrtb-ice.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-62203-hrtb-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-62203-hrtb-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-62203-hrtb-ice.stderr?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "previous_filename": "src/test/ui/hrtb/issue-62203-hrtb-ice.stderr"}, {"sha": "571b8531757cdc4579771b716e1711ca63c3354b", "filename": "src/test/ui/higher-rank-trait-bounds/issue-88446.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-88446.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-88446.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-88446.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "previous_filename": "src/test/ui/hrtb/issue-88446.rs"}, {"sha": "b151a9d3ab6599d709582fe830669db42e4dbfae", "filename": "src/test/ui/higher-rank-trait-bounds/issue-90177.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-90177.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-90177.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-90177.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "previous_filename": "src/test/ui/hrtb/issue-90177.rs"}, {"sha": "d8edbe7e56b51b9804caa7cf82d03c4e9ab3f1e9", "filename": "src/test/ui/higher-rank-trait-bounds/issue-95034.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-95034.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-95034.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-95034.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "previous_filename": "src/test/ui/hrtb/issue-95034.rs"}, {"sha": "1d8329142fc5c0a142f078d1106713135539f7ad", "filename": "src/test/ui/higher-rank-trait-bounds/issue-95034.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-95034.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-95034.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-95034.stderr?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "previous_filename": "src/test/ui/hrtb/issue-95034.stderr"}, {"sha": "92c506eabb7f43a01ccb297b7467d664cab1d01b", "filename": "src/test/ui/higher-rank-trait-bounds/issue-95230.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-95230.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-95230.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-95230.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "previous_filename": "src/test/ui/hrtb/issue-95230.rs"}, {"sha": "a799ec8ca2ea5bc3cb21caebd199327319b8c405", "filename": "src/test/ui/parser/struct-filed-with-attr.fixed", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fparser%2Fstruct-filed-with-attr.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fparser%2Fstruct-filed-with-attr.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-filed-with-attr.fixed?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -0,0 +1,18 @@\n+// Issue: 100461, Try to give a helpful diagnostic even when the next struct field has an attribute.\n+// run-rustfix\n+\n+struct Feelings {\n+    owo: bool,\n+    //~^ ERROR expected `,`, or `}`, found `#`\n+    #[allow(unused)]\n+    uwu: bool,\n+}\n+\n+impl Feelings {\n+    #[allow(unused)]\n+    fn hmm(&self) -> bool {\n+        self.owo\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "bfc78e15b5b09d2c874e886b451c9d30209dfde7", "filename": "src/test/ui/parser/struct-filed-with-attr.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fparser%2Fstruct-filed-with-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fparser%2Fstruct-filed-with-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-filed-with-attr.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -0,0 +1,18 @@\n+// Issue: 100461, Try to give a helpful diagnostic even when the next struct field has an attribute.\n+// run-rustfix\n+\n+struct Feelings {\n+    owo: bool\n+    //~^ ERROR expected `,`, or `}`, found `#`\n+    #[allow(unused)]\n+    uwu: bool,\n+}\n+\n+impl Feelings {\n+    #[allow(unused)]\n+    fn hmm(&self) -> bool {\n+        self.owo\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "c2cd7e82ead41b7f6842ae072e63fff2b028ccd6", "filename": "src/test/ui/parser/struct-filed-with-attr.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fparser%2Fstruct-filed-with-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fparser%2Fstruct-filed-with-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-filed-with-attr.stderr?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -0,0 +1,8 @@\n+error: expected `,`, or `}`, found `#`\n+  --> $DIR/struct-filed-with-attr.rs:5:14\n+   |\n+LL |     owo: bool\n+   |              ^ help: try adding a comma: `,`\n+\n+error: aborting due to previous error\n+"}, {"sha": "83f79679c6e67f7b16d38f9bfce6f5ae5a6637e3", "filename": "src/test/ui/sanitize/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fsanitize%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Fsanitize%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Fmemory.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -6,7 +6,7 @@\n // run-fail\n // error-pattern: MemorySanitizer: use-of-uninitialized-value\n // error-pattern: Uninitialized value was created by an allocation\n-// error-pattern: in the stack frame of function 'main'\n+// error-pattern: in the stack frame\n //\n // This test case intentionally limits the usage of the std,\n // since it will be linked with an uninstrumented version of it."}, {"sha": "5abfa2523b74e4937390b8ab5f2087ae97a9bc4d", "filename": "src/test/ui/unpretty/pretty-let-else.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Funpretty%2Fpretty-let-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Funpretty%2Fpretty-let-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funpretty%2Fpretty-let-else.rs?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -0,0 +1,10 @@\n+// compile-flags: -Zunpretty=hir\n+// check-pass\n+\n+#![feature(let_else)]\n+\n+fn foo(x: Option<u32>) {\n+    let Some(_) = x else { panic!() };\n+}\n+\n+fn main() {}"}, {"sha": "ffe1d1657aa1519ab7e06844f8d292ea7769e997", "filename": "src/test/ui/unpretty/pretty-let-else.stdout", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Funpretty%2Fpretty-let-else.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/b76fec3ca89ba255316c010065f1fcf4d7cbfc9c/src%2Ftest%2Fui%2Funpretty%2Fpretty-let-else.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funpretty%2Fpretty-let-else.stdout?ref=b76fec3ca89ba255316c010065f1fcf4d7cbfc9c", "patch": "@@ -0,0 +1,18 @@\n+// compile-flags: -Zunpretty=hir\n+// check-pass\n+\n+#![feature(let_else)]\n+#[prelude_import]\n+use ::std::prelude::rust_2015::*;\n+#[macro_use]\n+extern crate std;\n+\n+fn foo(x:\n+        Option<u32>) {\n+        let Some(_) = x else\n+            {\n+\n+            { ::std::rt::begin_panic(\"explicit panic\") }\n+        };\n+    }\n+fn main() { }"}]}