{"sha": "c8df60a1462b4b83573573c6e08259a731b60a20", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4ZGY2MGExNDYyYjRiODM1NzM1NzNjNmUwODI1OWE3MzFiNjBhMjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-02T20:12:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-02T20:12:00Z"}, "message": "Auto merge of #51944 - MajorBreakfast:generic-future-obj, r=cramertj\n\nMake custom trait object for `Future` generic\n\n- `TaskObj` -> `FutureObj<'static, ()>`\n- The `impl From<...> for FutureObj<'a, T>` impls are impossible because of the type parameter `T`. The impl has to live in libstd, but `FutureObj<'a, T>` is from libcore. Therefore `Into<FutureObj<'a, T>>` was implemented instead. Edit: This didn\u2018t compile without warnings. I am now using non-generic Form impls.\n\nSee https://github.com/rust-lang-nursery/futures-rs/issues/1058\n\nr? @cramertj\n\nEdit: Added lifetime", "tree": {"sha": "9cbebb0f4f49577abb3f97ef8f622e0ef6b433e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cbebb0f4f49577abb3f97ef8f622e0ef6b433e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8df60a1462b4b83573573c6e08259a731b60a20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8df60a1462b4b83573573c6e08259a731b60a20", "html_url": "https://github.com/rust-lang/rust/commit/c8df60a1462b4b83573573c6e08259a731b60a20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8df60a1462b4b83573573c6e08259a731b60a20/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9363342be956d1bf7781a3b7455d80fc5d94b1f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/9363342be956d1bf7781a3b7455d80fc5d94b1f8", "html_url": "https://github.com/rust-lang/rust/commit/9363342be956d1bf7781a3b7455d80fc5d94b1f8"}, {"sha": "e666c2bd0742cbf88ff9fa26cfc194099a139589", "url": "https://api.github.com/repos/rust-lang/rust/commits/e666c2bd0742cbf88ff9fa26cfc194099a139589", "html_url": "https://github.com/rust-lang/rust/commit/e666c2bd0742cbf88ff9fa26cfc194099a139589"}], "stats": {"total": 439, "additions": 266, "deletions": 173}, "files": [{"sha": "fb16bdf0ab43ae4d4872b87f4c44d5bb6aabb081", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 39, "deletions": 18, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/c8df60a1462b4b83573573c6e08259a731b60a20/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8df60a1462b4b83573573c6e08259a731b60a20/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=c8df60a1462b4b83573573c6e08259a731b60a20", "patch": "@@ -58,16 +58,16 @@\n use core::any::Any;\n use core::borrow;\n use core::cmp::Ordering;\n+use core::convert::From;\n use core::fmt;\n-use core::future::Future;\n+use core::future::{Future, FutureObj, LocalFutureObj, UnsafeFutureObj};\n use core::hash::{Hash, Hasher};\n use core::iter::FusedIterator;\n use core::marker::{Unpin, Unsize};\n use core::mem::{self, PinMut};\n use core::ops::{CoerceUnsized, Deref, DerefMut, Generator, GeneratorState};\n use core::ptr::{self, NonNull, Unique};\n-use core::task::{Context, Poll, UnsafeTask, TaskObj, LocalTaskObj};\n-use core::convert::From;\n+use core::task::{Context, Poll};\n \n use raw_vec::RawVec;\n use str::from_boxed_utf8_unchecked;\n@@ -915,7 +915,7 @@ impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<PinBox<U>> for PinBox<T> {}\n impl<T: ?Sized> Unpin for PinBox<T> {}\n \n #[unstable(feature = \"futures_api\", issue = \"50547\")]\n-impl<'a, F: ?Sized + Future + Unpin> Future for Box<F> {\n+impl<F: ?Sized + Future + Unpin> Future for Box<F> {\n     type Output = F::Output;\n \n     fn poll(mut self: PinMut<Self>, cx: &mut Context) -> Poll<Self::Output> {\n@@ -924,7 +924,7 @@ impl<'a, F: ?Sized + Future + Unpin> Future for Box<F> {\n }\n \n #[unstable(feature = \"futures_api\", issue = \"50547\")]\n-impl<'a, F: ?Sized + Future> Future for PinBox<F> {\n+impl<F: ?Sized + Future> Future for PinBox<F> {\n     type Output = F::Output;\n \n     fn poll(mut self: PinMut<Self>, cx: &mut Context) -> Poll<Self::Output> {\n@@ -933,46 +933,67 @@ impl<'a, F: ?Sized + Future> Future for PinBox<F> {\n }\n \n #[unstable(feature = \"futures_api\", issue = \"50547\")]\n-unsafe impl<F: Future<Output = ()> + 'static> UnsafeTask for PinBox<F> {\n+unsafe impl<'a, T, F> UnsafeFutureObj<'a, T> for Box<F>\n+    where F: Future<Output = T> + 'a\n+{\n+    fn into_raw(self) -> *mut () {\n+        Box::into_raw(self) as *mut ()\n+    }\n+\n+    unsafe fn poll(ptr: *mut (), cx: &mut Context) -> Poll<T> {\n+        let ptr = ptr as *mut F;\n+        let pin: PinMut<F> = PinMut::new_unchecked(&mut *ptr);\n+        pin.poll(cx)\n+    }\n+\n+    unsafe fn drop(ptr: *mut ()) {\n+        drop(Box::from_raw(ptr as *mut F))\n+    }\n+}\n+\n+#[unstable(feature = \"futures_api\", issue = \"50547\")]\n+unsafe impl<'a, T, F> UnsafeFutureObj<'a, T> for PinBox<F>\n+    where F: Future<Output = T> + 'a\n+{\n     fn into_raw(self) -> *mut () {\n         PinBox::into_raw(self) as *mut ()\n     }\n \n-    unsafe fn poll(task: *mut (), cx: &mut Context) -> Poll<()> {\n-        let ptr = task as *mut F;\n+    unsafe fn poll(ptr: *mut (), cx: &mut Context) -> Poll<T> {\n+        let ptr = ptr as *mut F;\n         let pin: PinMut<F> = PinMut::new_unchecked(&mut *ptr);\n         pin.poll(cx)\n     }\n \n-    unsafe fn drop(task: *mut ()) {\n-        drop(PinBox::from_raw(task as *mut F))\n+    unsafe fn drop(ptr: *mut ()) {\n+        drop(PinBox::from_raw(ptr as *mut F))\n     }\n }\n \n #[unstable(feature = \"futures_api\", issue = \"50547\")]\n-impl<F: Future<Output = ()> + Send + 'static> From<PinBox<F>> for TaskObj {\n+impl<'a, F: Future<Output = ()> + Send + 'a> From<PinBox<F>> for FutureObj<'a, ()> {\n     fn from(boxed: PinBox<F>) -> Self {\n-        TaskObj::new(boxed)\n+        FutureObj::new(boxed)\n     }\n }\n \n #[unstable(feature = \"futures_api\", issue = \"50547\")]\n-impl<F: Future<Output = ()> + Send + 'static> From<Box<F>> for TaskObj {\n+impl<'a, F: Future<Output = ()> + Send + 'a> From<Box<F>> for FutureObj<'a, ()> {\n     fn from(boxed: Box<F>) -> Self {\n-        TaskObj::new(PinBox::from(boxed))\n+        FutureObj::new(boxed)\n     }\n }\n \n #[unstable(feature = \"futures_api\", issue = \"50547\")]\n-impl<F: Future<Output = ()> + 'static> From<PinBox<F>> for LocalTaskObj {\n+impl<'a, F: Future<Output = ()> + 'a> From<PinBox<F>> for LocalFutureObj<'a, ()> {\n     fn from(boxed: PinBox<F>) -> Self {\n-        LocalTaskObj::new(boxed)\n+        LocalFutureObj::new(boxed)\n     }\n }\n \n #[unstable(feature = \"futures_api\", issue = \"50547\")]\n-impl<F: Future<Output = ()> + 'static> From<Box<F>> for LocalTaskObj {\n+impl<'a, F: Future<Output = ()> + 'a> From<Box<F>> for LocalFutureObj<'a, ()> {\n     fn from(boxed: Box<F>) -> Self {\n-        LocalTaskObj::new(PinBox::from(boxed))\n+        LocalFutureObj::new(boxed)\n     }\n }"}, {"sha": "10b4ca9b0b27a5e55f089501c1bf45f8ebaf633e", "filename": "src/libcore/future/future.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8df60a1462b4b83573573c6e08259a731b60a20/src%2Flibcore%2Ffuture%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8df60a1462b4b83573573c6e08259a731b60a20/src%2Flibcore%2Ffuture%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Ffuture.rs?ref=c8df60a1462b4b83573573c6e08259a731b60a20", "patch": "@@ -12,8 +12,6 @@\n             reason = \"futures in libcore are unstable\",\n             issue = \"50547\")]\n \n-//! Asynchronous values.\n-\n use mem::PinMut;\n use marker::Unpin;\n use task::{self, Poll};", "previous_filename": "src/libcore/future.rs"}, {"sha": "98c504a3f7bef380a6ca28cb044bc3c1c0bbf546", "filename": "src/libcore/future/future_obj.rs", "status": "added", "additions": 179, "deletions": 0, "changes": 179, "blob_url": "https://github.com/rust-lang/rust/blob/c8df60a1462b4b83573573c6e08259a731b60a20/src%2Flibcore%2Ffuture%2Ffuture_obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8df60a1462b4b83573573c6e08259a731b60a20/src%2Flibcore%2Ffuture%2Ffuture_obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Ffuture_obj.rs?ref=c8df60a1462b4b83573573c6e08259a731b60a20", "patch": "@@ -0,0 +1,179 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![unstable(feature = \"futures_api\",\n+            reason = \"futures in libcore are unstable\",\n+            issue = \"50547\")]\n+\n+use fmt;\n+use future::Future;\n+use marker::{PhantomData, Unpin};\n+use mem::PinMut;\n+use task::{Context, Poll};\n+\n+/// A custom trait object for polling futures, roughly akin to\n+/// `Box<dyn Future<Output = T> + 'a>`.\n+///\n+/// This custom trait object was introduced for two reasons:\n+/// - Currently it is not possible to take `dyn Trait` by value and\n+///   `Box<dyn Trait>` is not available in no_std contexts.\n+/// - The `Future` trait is currently not object safe: The `Future::poll`\n+///   method makes uses the arbitrary self types feature and traits in which\n+///   this feature is used are currently not object safe due to current compiler\n+///   limitations. (See tracking issue for arbitray self types for more\n+///   information #44874)\n+pub struct LocalFutureObj<'a, T> {\n+    ptr: *mut (),\n+    poll_fn: unsafe fn(*mut (), &mut Context) -> Poll<T>,\n+    drop_fn: unsafe fn(*mut ()),\n+    _marker: PhantomData<&'a ()>,\n+}\n+\n+impl<'a, T> LocalFutureObj<'a, T> {\n+    /// Create a `LocalFutureObj` from a custom trait object representation.\n+    #[inline]\n+    pub fn new<F: UnsafeFutureObj<'a, T> + 'a>(f: F) -> LocalFutureObj<'a, T> {\n+        LocalFutureObj {\n+            ptr: f.into_raw(),\n+            poll_fn: F::poll,\n+            drop_fn: F::drop,\n+            _marker: PhantomData,\n+        }\n+    }\n+\n+    /// Converts the `LocalFutureObj` into a `FutureObj`\n+    /// To make this operation safe one has to ensure that the `UnsafeFutureObj`\n+    /// instance from which this `LocalFutureObj` was created actually\n+    /// implements `Send`.\n+    #[inline]\n+    pub unsafe fn into_future_obj(self) -> FutureObj<'a, T> {\n+        FutureObj(self)\n+    }\n+}\n+\n+impl<'a, T> fmt::Debug for LocalFutureObj<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"LocalFutureObj\")\n+            .finish()\n+    }\n+}\n+\n+impl<'a, T> From<FutureObj<'a, T>> for LocalFutureObj<'a, T> {\n+    #[inline]\n+    fn from(f: FutureObj<'a, T>) -> LocalFutureObj<'a, T> {\n+        f.0\n+    }\n+}\n+\n+impl<'a, T> Future for LocalFutureObj<'a, T> {\n+    type Output = T;\n+\n+    #[inline]\n+    fn poll(self: PinMut<Self>, cx: &mut Context) -> Poll<T> {\n+        unsafe {\n+            (self.poll_fn)(self.ptr, cx)\n+        }\n+    }\n+}\n+\n+impl<'a, T> Drop for LocalFutureObj<'a, T> {\n+    fn drop(&mut self) {\n+        unsafe {\n+            (self.drop_fn)(self.ptr)\n+        }\n+    }\n+}\n+\n+/// A custom trait object for polling futures, roughly akin to\n+/// `Box<dyn Future<Output = T> + Send + 'a>`.\n+///\n+/// This custom trait object was introduced for two reasons:\n+/// - Currently it is not possible to take `dyn Trait` by value and\n+///   `Box<dyn Trait>` is not available in no_std contexts.\n+/// - The `Future` trait is currently not object safe: The `Future::poll`\n+///   method makes uses the arbitrary self types feature and traits in which\n+///   this feature is used are currently not object safe due to current compiler\n+///   limitations. (See tracking issue for arbitray self types for more\n+///   information #44874)\n+pub struct FutureObj<'a, T>(LocalFutureObj<'a, T>);\n+\n+unsafe impl<'a, T> Send for FutureObj<'a, T> {}\n+\n+impl<'a, T> FutureObj<'a, T> {\n+    /// Create a `FutureObj` from a custom trait object representation.\n+    #[inline]\n+    pub fn new<F: UnsafeFutureObj<'a, T> + Send>(f: F) -> FutureObj<'a, T> {\n+        FutureObj(LocalFutureObj::new(f))\n+    }\n+}\n+\n+impl<'a, T> fmt::Debug for FutureObj<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"FutureObj\")\n+            .finish()\n+    }\n+}\n+\n+impl<'a, T> Future for FutureObj<'a, T> {\n+    type Output = T;\n+\n+    #[inline]\n+    fn poll(self: PinMut<Self>, cx: &mut Context) -> Poll<T> {\n+        let pinned_field = unsafe { PinMut::map_unchecked(self, |x| &mut x.0) };\n+        pinned_field.poll(cx)\n+    }\n+}\n+\n+/// A custom implementation of a future trait object for `FutureObj`, providing\n+/// a hand-rolled vtable.\n+///\n+/// This custom representation is typically used only in `no_std` contexts,\n+/// where the default `Box`-based implementation is not available.\n+///\n+/// The implementor must guarantee that it is safe to call `poll` repeatedly (in\n+/// a non-concurrent fashion) with the result of `into_raw` until `drop` is\n+/// called.\n+pub unsafe trait UnsafeFutureObj<'a, T>: 'a {\n+    /// Convert an owned instance into a (conceptually owned) void pointer.\n+    fn into_raw(self) -> *mut ();\n+\n+    /// Poll the future represented by the given void pointer.\n+    ///\n+    /// # Safety\n+    ///\n+    /// The trait implementor must guarantee that it is safe to repeatedly call\n+    /// `poll` with the result of `into_raw` until `drop` is called; such calls\n+    /// are not, however, allowed to race with each other or with calls to\n+    /// `drop`.\n+    unsafe fn poll(ptr: *mut (), cx: &mut Context) -> Poll<T>;\n+\n+    /// Drops the future represented by the given void pointer.\n+    ///\n+    /// # Safety\n+    ///\n+    /// The trait implementor must guarantee that it is safe to call this\n+    /// function once per `into_raw` invocation; that call cannot race with\n+    /// other calls to `drop` or `poll`.\n+    unsafe fn drop(ptr: *mut ());\n+}\n+\n+unsafe impl<'a, T, F> UnsafeFutureObj<'a, T> for &'a mut F\n+    where F: Future<Output = T> + Unpin + 'a\n+{\n+    fn into_raw(self) -> *mut () {\n+        self as *mut F as *mut ()\n+    }\n+\n+    unsafe fn poll(ptr: *mut (), cx: &mut Context) -> Poll<T> {\n+        PinMut::new_unchecked(&mut *(ptr as *mut F)).poll(cx)\n+    }\n+\n+    unsafe fn drop(_ptr: *mut ()) {}\n+}"}, {"sha": "f9361a0f4e7a3ecc9e5175c4959c3874242c72fd", "filename": "src/libcore/future/mod.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c8df60a1462b4b83573573c6e08259a731b60a20/src%2Flibcore%2Ffuture%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8df60a1462b4b83573573c6e08259a731b60a20/src%2Flibcore%2Ffuture%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Fmod.rs?ref=c8df60a1462b4b83573573c6e08259a731b60a20", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![unstable(feature = \"futures_api\",\n+            reason = \"futures in libcore are unstable\",\n+            issue = \"50547\")]\n+\n+//! Asynchronous values.\n+\n+mod future;\n+pub use self::future::Future;\n+\n+mod future_obj;\n+pub use self::future_obj::{FutureObj, LocalFutureObj, UnsafeFutureObj};"}, {"sha": "84173654655ebbe28f496e5ebbe11b040fec1835", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c8df60a1462b4b83573573c6e08259a731b60a20/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8df60a1462b4b83573573c6e08259a731b60a20/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=c8df60a1462b4b83573573c6e08259a731b60a20", "patch": "@@ -18,10 +18,12 @@\n use clone;\n use cmp;\n use fmt;\n+use future::{Future, UnsafeFutureObj};\n use hash;\n use intrinsics;\n use marker::{Copy, PhantomData, Sized, Unpin, Unsize};\n use ptr;\n+use task::{Context, Poll};\n use ops::{Deref, DerefMut, CoerceUnsized};\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1227,3 +1229,18 @@ impl<'a, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<PinMut<'a, U>> for PinM\n \n #[unstable(feature = \"pin\", issue = \"49150\")]\n impl<'a, T: ?Sized> Unpin for PinMut<'a, T> {}\n+\n+#[unstable(feature = \"futures_api\", issue = \"50547\")]\n+unsafe impl<'a, T, F> UnsafeFutureObj<'a, T> for PinMut<'a, F>\n+    where F: Future<Output = T> + 'a\n+{\n+    fn into_raw(self) -> *mut () {\n+        unsafe { PinMut::get_mut_unchecked(self) as *mut F as *mut () }\n+    }\n+\n+    unsafe fn poll(ptr: *mut (), cx: &mut Context) -> Poll<T> {\n+        PinMut::new_unchecked(&mut *(ptr as *mut F)).poll(cx)\n+    }\n+\n+    unsafe fn drop(_ptr: *mut ()) {}\n+}"}, {"sha": "f1db5093e9880ab84fe4940c455bbd893700d073", "filename": "src/libcore/task/executor.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c8df60a1462b4b83573573c6e08259a731b60a20/src%2Flibcore%2Ftask%2Fexecutor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8df60a1462b4b83573573c6e08259a731b60a20/src%2Flibcore%2Ftask%2Fexecutor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fexecutor.rs?ref=c8df60a1462b4b83573573c6e08259a731b60a20", "patch": "@@ -13,7 +13,7 @@\n             issue = \"50547\")]\n \n use fmt;\n-use super::{TaskObj, LocalTaskObj};\n+use future::{FutureObj, LocalFutureObj};\n \n /// A task executor.\n ///\n@@ -29,7 +29,7 @@ pub trait Executor {\n     ///\n     /// The executor may be unable to spawn tasks, either because it has\n     /// been shut down or is resource-constrained.\n-    fn spawn_obj(&mut self, task: TaskObj) -> Result<(), SpawnObjError>;\n+    fn spawn_obj(&mut self, task: FutureObj<'static, ()>) -> Result<(), SpawnObjError>;\n \n     /// Determine whether the executor is able to spawn new tasks.\n     ///\n@@ -76,7 +76,7 @@ pub struct SpawnObjError {\n     pub kind: SpawnErrorKind,\n \n     /// The task for which spawning was attempted\n-    pub task: TaskObj,\n+    pub task: FutureObj<'static, ()>,\n }\n \n /// The result of a failed spawn\n@@ -86,5 +86,5 @@ pub struct SpawnLocalObjError {\n     pub kind: SpawnErrorKind,\n \n     /// The task for which spawning was attempted\n-    pub task: LocalTaskObj,\n+    pub task: LocalFutureObj<'static, ()>,\n }"}, {"sha": "c4f075361640f1b887e099b8c797b0ded7082265", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c8df60a1462b4b83573573c6e08259a731b60a20/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8df60a1462b4b83573573c6e08259a731b60a20/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=c8df60a1462b4b83573573c6e08259a731b60a20", "patch": "@@ -25,8 +25,5 @@ pub use self::executor::{\n mod poll;\n pub use self::poll::Poll;\n \n-mod task;\n-pub use self::task::{TaskObj, LocalTaskObj, UnsafeTask};\n-\n mod wake;\n pub use self::wake::{Waker, LocalWaker, UnsafeWake};"}, {"sha": "c5a41873db42725fbaccfa588996cf0a4ebab68d", "filename": "src/libcore/task/task.rs", "status": "removed", "additions": 0, "deletions": 142, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/9363342be956d1bf7781a3b7455d80fc5d94b1f8/src%2Flibcore%2Ftask%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9363342be956d1bf7781a3b7455d80fc5d94b1f8/src%2Flibcore%2Ftask%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Ftask.rs?ref=9363342be956d1bf7781a3b7455d80fc5d94b1f8", "patch": "@@ -1,142 +0,0 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![unstable(feature = \"futures_api\",\n-            reason = \"futures in libcore are unstable\",\n-            issue = \"50547\")]\n-\n-use fmt;\n-use future::Future;\n-use mem::PinMut;\n-use super::{Context, Poll};\n-\n-/// A custom trait object for polling tasks, roughly akin to\n-/// `Box<Future<Output = ()>>`.\n-/// Contrary to `TaskObj`, `LocalTaskObj` does not have a `Send` bound.\n-pub struct LocalTaskObj {\n-    ptr: *mut (),\n-    poll_fn: unsafe fn(*mut (), &mut Context) -> Poll<()>,\n-    drop_fn: unsafe fn(*mut ()),\n-}\n-\n-impl LocalTaskObj {\n-    /// Create a `LocalTaskObj` from a custom trait object representation.\n-    #[inline]\n-    pub fn new<T: UnsafeTask>(t: T) -> LocalTaskObj {\n-        LocalTaskObj {\n-            ptr: t.into_raw(),\n-            poll_fn: T::poll,\n-            drop_fn: T::drop,\n-        }\n-    }\n-\n-    /// Converts the `LocalTaskObj` into a `TaskObj`\n-    /// To make this operation safe one has to ensure that the `UnsafeTask`\n-    /// instance from which this `LocalTaskObj` was created actually implements\n-    /// `Send`.\n-    pub unsafe fn as_task_obj(self) -> TaskObj {\n-        TaskObj(self)\n-    }\n-}\n-\n-impl fmt::Debug for LocalTaskObj {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.debug_struct(\"LocalTaskObj\")\n-            .finish()\n-    }\n-}\n-\n-impl From<TaskObj> for LocalTaskObj {\n-    fn from(task: TaskObj) -> LocalTaskObj {\n-        task.0\n-    }\n-}\n-\n-impl Future for LocalTaskObj {\n-    type Output = ();\n-\n-    #[inline]\n-    fn poll(self: PinMut<Self>, cx: &mut Context) -> Poll<()> {\n-        unsafe {\n-            (self.poll_fn)(self.ptr, cx)\n-        }\n-    }\n-}\n-\n-impl Drop for LocalTaskObj {\n-    fn drop(&mut self) {\n-        unsafe {\n-            (self.drop_fn)(self.ptr)\n-        }\n-    }\n-}\n-\n-/// A custom trait object for polling tasks, roughly akin to\n-/// `Box<Future<Output = ()> + Send>`.\n-pub struct TaskObj(LocalTaskObj);\n-\n-unsafe impl Send for TaskObj {}\n-\n-impl TaskObj {\n-    /// Create a `TaskObj` from a custom trait object representation.\n-    #[inline]\n-    pub fn new<T: UnsafeTask + Send>(t: T) -> TaskObj {\n-        TaskObj(LocalTaskObj::new(t))\n-    }\n-}\n-\n-impl fmt::Debug for TaskObj {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.debug_struct(\"TaskObj\")\n-            .finish()\n-    }\n-}\n-\n-impl Future for TaskObj {\n-    type Output = ();\n-\n-    #[inline]\n-    fn poll(self: PinMut<Self>, cx: &mut Context) -> Poll<()> {\n-        let pinned_field = unsafe { PinMut::map_unchecked(self, |x| &mut x.0) };\n-        pinned_field.poll(cx)\n-    }\n-}\n-\n-/// A custom implementation of a task trait object for `TaskObj`, providing\n-/// a hand-rolled vtable.\n-///\n-/// This custom representation is typically used only in `no_std` contexts,\n-/// where the default `Box`-based implementation is not available.\n-///\n-/// The implementor must guarantee that it is safe to call `poll` repeatedly (in\n-/// a non-concurrent fashion) with the result of `into_raw` until `drop` is\n-/// called.\n-pub unsafe trait UnsafeTask: 'static {\n-    /// Convert a owned instance into a (conceptually owned) void pointer.\n-    fn into_raw(self) -> *mut ();\n-\n-    /// Poll the task represented by the given void pointer.\n-    ///\n-    /// # Safety\n-    ///\n-    /// The trait implementor must guarantee that it is safe to repeatedly call\n-    /// `poll` with the result of `into_raw` until `drop` is called; such calls\n-    /// are not, however, allowed to race with each other or with calls to `drop`.\n-    unsafe fn poll(task: *mut (), cx: &mut Context) -> Poll<()>;\n-\n-    /// Drops the task represented by the given void pointer.\n-    ///\n-    /// # Safety\n-    ///\n-    /// The trait implementor must guarantee that it is safe to call this\n-    /// function once per `into_raw` invocation; that call cannot race with\n-    /// other calls to `drop` or `poll`.\n-    unsafe fn drop(task: *mut ());\n-}"}, {"sha": "0ac37485d3dc81df976de0d747b979be4c3e0592", "filename": "src/test/run-pass/async-await.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c8df60a1462b4b83573573c6e08259a731b60a20/src%2Ftest%2Frun-pass%2Fasync-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8df60a1462b4b83573573c6e08259a731b60a20/src%2Ftest%2Frun-pass%2Fasync-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasync-await.rs?ref=c8df60a1462b4b83573573c6e08259a731b60a20", "patch": "@@ -19,9 +19,10 @@ use std::sync::{\n     Arc,\n     atomic::{self, AtomicUsize},\n };\n+use std::future::FutureObj;\n use std::task::{\n     Context, Poll, Wake,\n-    Executor, TaskObj, SpawnObjError,\n+    Executor, SpawnObjError,\n     local_waker_from_nonlocal,\n };\n \n@@ -37,7 +38,7 @@ impl Wake for Counter {\n \n struct NoopExecutor;\n impl Executor for NoopExecutor {\n-    fn spawn_obj(&mut self, _: TaskObj) -> Result<(), SpawnObjError> {\n+    fn spawn_obj(&mut self, _: FutureObj<'static, ()>) -> Result<(), SpawnObjError> {\n         Ok(())\n     }\n }"}, {"sha": "6cb975a9560b9403cb726ea043dee7744eaf7bb9", "filename": "src/test/run-pass/futures-api.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c8df60a1462b4b83573573c6e08259a731b60a20/src%2Ftest%2Frun-pass%2Ffutures-api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8df60a1462b4b83573573c6e08259a731b60a20/src%2Ftest%2Frun-pass%2Ffutures-api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffutures-api.rs?ref=c8df60a1462b4b83573573c6e08259a731b60a20", "patch": "@@ -19,10 +19,11 @@ use std::sync::{\n     Arc,\n     atomic::{self, AtomicUsize},\n };\n+use std::future::FutureObj;\n use std::task::{\n     Context, Poll,\n     Wake, Waker, LocalWaker,\n-    Executor, TaskObj, SpawnObjError,\n+    Executor, SpawnObjError,\n     local_waker, local_waker_from_nonlocal,\n };\n \n@@ -44,7 +45,7 @@ impl Wake for Counter {\n struct NoopExecutor;\n \n impl Executor for NoopExecutor {\n-    fn spawn_obj(&mut self, _: TaskObj) -> Result<(), SpawnObjError> {\n+    fn spawn_obj(&mut self, _: FutureObj<'static, ()>) -> Result<(), SpawnObjError> {\n         Ok(())\n     }\n }"}]}