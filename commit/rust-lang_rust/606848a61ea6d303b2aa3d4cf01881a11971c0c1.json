{"sha": "606848a61ea6d303b2aa3d4cf01881a11971c0c1", "node_id": "C_kwDOAAsO6NoAKDYwNjg0OGE2MWVhNmQzMDNiMmFhM2Q0Y2YwMTg4MWExMTk3MWMwYzE", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-05-05T16:34:13Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-06-03T17:02:14Z"}, "message": "Fix all tests", "tree": {"sha": "55438388fc7f10d5516f36fc0a2761118af5fd7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55438388fc7f10d5516f36fc0a2761118af5fd7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/606848a61ea6d303b2aa3d4cf01881a11971c0c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/606848a61ea6d303b2aa3d4cf01881a11971c0c1", "html_url": "https://github.com/rust-lang/rust/commit/606848a61ea6d303b2aa3d4cf01881a11971c0c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/606848a61ea6d303b2aa3d4cf01881a11971c0c1/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7381ea019c47282985baab8752d27aca0a432023", "url": "https://api.github.com/repos/rust-lang/rust/commits/7381ea019c47282985baab8752d27aca0a432023", "html_url": "https://github.com/rust-lang/rust/commit/7381ea019c47282985baab8752d27aca0a432023"}], "stats": {"total": 146, "additions": 111, "deletions": 35}, "files": [{"sha": "230194c53779342a6dc11b7954ef839d4e1192b7", "filename": "src/test/ui-fulldeps/extern-mod-syntax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/606848a61ea6d303b2aa3d4cf01881a11971c0c1/src%2Ftest%2Fui-fulldeps%2Fextern-mod-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/606848a61ea6d303b2aa3d4cf01881a11971c0c1/src%2Ftest%2Fui-fulldeps%2Fextern-mod-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fextern-mod-syntax.rs?ref=606848a61ea6d303b2aa3d4cf01881a11971c0c1", "patch": "@@ -3,8 +3,8 @@\n #![allow(unused_imports)]\n #![feature(rustc_private)]\n \n-extern crate rustc_serialize;\n-use rustc_serialize::json::Object;\n+extern crate libc;\n+use libc::c_void;\n \n pub fn main() {\n     println!(\"Hello world!\");"}, {"sha": "9641470a68ba209700a2e26dccded8e03cbf172e", "filename": "src/test/ui-fulldeps/issue-11881.rs", "status": "modified", "additions": 52, "deletions": 14, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/606848a61ea6d303b2aa3d4cf01881a11971c0c1/src%2Ftest%2Fui-fulldeps%2Fissue-11881.rs", "raw_url": "https://github.com/rust-lang/rust/raw/606848a61ea6d303b2aa3d4cf01881a11971c0c1/src%2Ftest%2Fui-fulldeps%2Fissue-11881.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fissue-11881.rs?ref=606848a61ea6d303b2aa3d4cf01881a11971c0c1", "patch": "@@ -3,42 +3,80 @@\n #![allow(unused_must_use)]\n #![allow(dead_code)]\n #![allow(unused_imports)]\n-#![feature(rustc_private)]\n-\n-extern crate rustc_macros;\n-extern crate rustc_serialize;\n \n use std::fmt;\n use std::io::prelude::*;\n use std::io::Cursor;\n use std::slice;\n+use std::marker::PhantomData;\n+\n+trait Encoder {\n+    type Error;\n+}\n+\n+trait Encodable<S: Encoder> {\n+    fn encode(&self, s: &mut S) -> Result<(), S::Error>;\n+}\n+\n+struct JsonEncoder<'a>(PhantomData<&'a mut ()>);\n+\n+impl Encoder for JsonEncoder<'_> {\n+    type Error = ();\n+}\n+\n+struct AsJson<'a, T> {\n+    inner: &'a T,\n+}\n+\n+impl<'a, T: for<'r> Encodable<JsonEncoder<'r>>> fmt::Display for AsJson<'a, T> {\n+    /// Encodes a json value into a string\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        Ok(())\n+    }\n+}\n+\n+fn as_json<T>(t: &T) -> AsJson<'_, T> {\n+    AsJson { inner: t }\n+}\n+\n+struct OpaqueEncoder(Vec<u8>);\n+\n+impl Encoder for OpaqueEncoder {\n+    type Error = ();\n+}\n \n-use rustc_macros::Encodable;\n-use rustc_serialize::json;\n-use rustc_serialize::opaque;\n-use rustc_serialize::{Encodable, Encoder};\n \n-#[derive(Encodable)]\n struct Foo {\n     baz: bool,\n }\n \n-#[derive(Encodable)]\n+impl<S: Encoder> Encodable<S> for Foo {\n+    fn encode(&self, _s: &mut S) -> Result<(), S::Error> {\n+        Ok(())\n+    }\n+}\n+\n struct Bar {\n     froboz: usize,\n }\n \n+impl<S: Encoder> Encodable<S> for Bar {\n+    fn encode(&self, _s: &mut S) -> Result<(), S::Error> {\n+        Ok(())\n+    }\n+}\n+\n enum WireProtocol {\n     JSON,\n     Opaque,\n     // ...\n }\n \n-fn encode_json<T: for<'a> Encodable<json::Encoder<'a>>>(val: &T, wr: &mut Cursor<Vec<u8>>) {\n-    write!(wr, \"{}\", json::as_json(val));\n+fn encode_json<T: for<'a> Encodable<JsonEncoder<'a>>>(val: &T, wr: &mut Cursor<Vec<u8>>) {\n+    write!(wr, \"{}\", as_json(val));\n }\n-fn encode_opaque<T: Encodable<opaque::Encoder>>(val: &T, wr: Vec<u8>) {\n-    let mut encoder = opaque::Encoder::new(wr);\n+fn encode_opaque<T: Encodable<OpaqueEncoder>>(val: &T, wr: Vec<u8>) {\n+    let mut encoder = OpaqueEncoder(wr);\n     val.encode(&mut encoder);\n }\n "}, {"sha": "d8b3914d0d4f777e9e1855dab37d6dfa21855ad0", "filename": "src/test/ui-fulldeps/issue-15924.rs", "status": "modified", "additions": 35, "deletions": 8, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/606848a61ea6d303b2aa3d4cf01881a11971c0c1/src%2Ftest%2Fui-fulldeps%2Fissue-15924.rs", "raw_url": "https://github.com/rust-lang/rust/raw/606848a61ea6d303b2aa3d4cf01881a11971c0c1/src%2Ftest%2Fui-fulldeps%2Fissue-15924.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fissue-15924.rs?ref=606848a61ea6d303b2aa3d4cf01881a11971c0c1", "patch": "@@ -3,21 +3,48 @@\n #![allow(unused_imports)]\n #![allow(unused_must_use)]\n // pretty-expanded FIXME #23616\n-#![feature(rustc_private)]\n \n-extern crate rustc_serialize;\n-\n-use rustc_serialize::json;\n-use rustc_serialize::{Encodable, Encoder};\n use std::fmt;\n+use std::marker::PhantomData;\n+\n+trait Encoder {\n+    type Error;\n+}\n+\n+trait Encodable<S: Encoder> {\n+    fn encode(&self, s: &mut S) -> Result<(), S::Error>;\n+}\n+\n+impl<S: Encoder> Encodable<S> for i32 {\n+    fn encode(&self, _s: &mut S) -> Result<(), S::Error> {\n+        Ok(())\n+    }\n+}\n+\n+struct JsonEncoder<'a>(PhantomData<&'a mut ()>);\n+\n+impl Encoder for JsonEncoder<'_> {\n+    type Error = ();\n+}\n+\n+fn encode_json<T: for<'r> Encodable<JsonEncoder<'r>>>(\n+    object: &T,\n+) -> Result<String, ()> {\n+    let s = String::new();\n+    {\n+        let mut encoder = JsonEncoder(PhantomData);\n+        object.encode(&mut encoder)?;\n+    }\n+    Ok(s)\n+}\n \n-struct Foo<T: for<'a> Encodable<json::Encoder<'a>>> {\n+struct Foo<T: for<'a> Encodable<JsonEncoder<'a>>> {\n     v: T,\n }\n \n-impl<T: for<'a> Encodable<json::Encoder<'a>>> Drop for Foo<T> {\n+impl<T: for<'a> Encodable<JsonEncoder<'a>>> Drop for Foo<T> {\n     fn drop(&mut self) {\n-        json::encode(&self.v);\n+        encode_json(&self.v);\n     }\n }\n "}, {"sha": "571028c5e400571391530091cf97a4cf87de91ee", "filename": "src/test/ui-fulldeps/issue-2804.rs", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/606848a61ea6d303b2aa3d4cf01881a11971c0c1/src%2Ftest%2Fui-fulldeps%2Fissue-2804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/606848a61ea6d303b2aa3d4cf01881a11971c0c1/src%2Ftest%2Fui-fulldeps%2Fissue-2804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fissue-2804.rs?ref=606848a61ea6d303b2aa3d4cf01881a11971c0c1", "patch": "@@ -2,27 +2,38 @@\n \n #![allow(non_camel_case_types)]\n #![allow(dead_code)]\n-#![feature(rustc_private)]\n \n-extern crate rustc_serialize;\n-\n-use std::collections::HashMap;\n-use rustc_serialize::json::{self, Json};\n+use std::collections::{BTreeMap, HashMap};\n use std::option;\n \n+#[derive(Clone, Debug)]\n+enum Json {\n+    I64(i64),\n+    U64(u64),\n+    F64(f64),\n+    String(String),\n+    Boolean(bool),\n+    Array(Array),\n+    Object(Object),\n+    Null,\n+}\n+\n+type Array = Vec<Json>;\n+type Object = BTreeMap<String, Json>;\n+\n enum object {\n     bool_value(bool),\n     int_value(i64),\n }\n \n-fn lookup(table: json::Object, key: String, default: String) -> String\n+fn lookup(table: Object, key: String, default: String) -> String\n {\n     match table.get(&key) {\n         option::Option::Some(&Json::String(ref s)) => {\n             s.to_string()\n         }\n         option::Option::Some(value) => {\n-            println!(\"{} was expected to be a string but is a {}\", key, value);\n+            println!(\"{} was expected to be a string but is a {:?}\", key, value);\n             default\n         }\n         option::Option::None => {\n@@ -31,7 +42,7 @@ fn lookup(table: json::Object, key: String, default: String) -> String\n     }\n }\n \n-fn add_interface(_store: isize, managed_ip: String, data: json::Json) -> (String, object)\n+fn add_interface(_store: isize, managed_ip: String, data: Json) -> (String, object)\n {\n     match &data {\n         &Json::Object(ref interface) => {\n@@ -43,13 +54,13 @@ fn add_interface(_store: isize, managed_ip: String, data: json::Json) -> (String\n             (label, object::bool_value(false))\n         }\n         _ => {\n-            println!(\"Expected dict for {} interfaces, found {}\", managed_ip, data);\n+            println!(\"Expected dict for {} interfaces, found {:?}\", managed_ip, data);\n             (\"gnos:missing-interface\".to_string(), object::bool_value(true))\n         }\n     }\n }\n \n-fn add_interfaces(store: isize, managed_ip: String, device: HashMap<String, json::Json>)\n+fn add_interfaces(store: isize, managed_ip: String, device: HashMap<String, Json>)\n -> Vec<(String, object)> {\n     match device[\"interfaces\"] {\n         Json::Array(ref interfaces) =>\n@@ -60,7 +71,7 @@ fn add_interfaces(store: isize, managed_ip: String, device: HashMap<String, json\n         }\n         _ =>\n         {\n-            println!(\"Expected list for {} interfaces, found {}\", managed_ip,\n+            println!(\"Expected list for {} interfaces, found {:?}\", managed_ip,\n                      device[\"interfaces\"]);\n             Vec::new()\n         }"}]}