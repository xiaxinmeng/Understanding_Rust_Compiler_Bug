{"sha": "1cccf2dd4cb342542a0c7d2e59445f6eedd32a85", "node_id": "C_kwDOAAsO6NoAKDFjY2NmMmRkNGNiMzQyNTQyYTBjN2QyZTU5NDQ1ZjZlZWRkMzJhODU", "commit": {"author": {"name": "Joshua Nelson", "email": "github@jyn.dev", "date": "2023-01-04T02:16:24Z"}, "committer": {"name": "Joshua Nelson", "email": "github@jyn.dev", "date": "2023-03-05T11:44:13Z"}, "message": "Ignore things in .gitignore in tidy\n\n- Switch from `walkdir` to `ignore`. This required various changes to\n  make `skip` thread-safe.\n- Ignore `build` anywhere in the source tree, not just at the top-level.\n  We support this in bootstrap, we should support it in tidy too.\n\nAs a nice side benefit, this also makes tidy a bit faster.\n\nBefore:\n```\n; hyperfine -i '\"/home/gh-jyn514/rust2/build/aarch64-unknown-linux-gnu/stage0-tools-bin/rust-tidy\" \"/home/gh-jyn514/rust2\" \"/home/gh-jyn514/rust2/build/aarch64-unknown-linux-gnu/stage0/bin/cargo\" \"/home/gh-jyn514/rust2/build\" \"32\"'\nBenchmark 1: \"/home/gh-jyn514/rust2/build/aarch64-unknown-linux-gnu/stage0-tools-bin/rust-tidy\" \"/home/gh-jyn514/rust2\" \"/home/gh-jyn514/rust2/build/aarch64-unknown-linux-gnu/stage0/bin/cargo\" \"/home/gh-jyn514/rust2/build\" \"32\"\n  Time (mean \u00b1 \u03c3):      1.080 s \u00b1  0.008 s    [User: 2.616 s, System: 3.243 s]\n  Range (min \u2026 max):    1.069 s \u2026  1.099 s    10 runs\n```\n\nAfter:\n```\n; hyperfine '\"/home/gh-jyn514/rust2/build/aarch64-unknown-linux-gnu/stage0-tools-bin/rust-tidy\" \"/home/gh-jyn514/rust2\" \"/home/gh-jyn514/rust2/build/aarch64-unknown-linux-gnu/stage0/bin/cargo\" \"/home/gh-jyn514/rust2/build\" \"32\"'\nBenchmark 1: \"/home/gh-jyn514/rust2/build/aarch64-unknown-linux-gnu/stage0-tools-bin/rust-tidy\" \"/home/gh-jyn514/rust2\" \"/home/gh-jyn514/rust2/build/aarch64-unknown-linux-gnu/stage0/bin/cargo\" \"/home/gh-jyn514/rust2/build\" \"32\"\n  Time (mean \u00b1 \u03c3):     705.0 ms \u00b1   1.4 ms    [User: 3179.1 ms, System: 1517.5 ms]\n  Range (min \u2026 max):   702.3 ms \u2026 706.9 ms    10 runs\n```", "tree": {"sha": "d3387d5449de4f2f1057bf4a6e3e9dc2e9299376", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3387d5449de4f2f1057bf4a6e3e9dc2e9299376"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cccf2dd4cb342542a0c7d2e59445f6eedd32a85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cccf2dd4cb342542a0c7d2e59445f6eedd32a85", "html_url": "https://github.com/rust-lang/rust/commit/1cccf2dd4cb342542a0c7d2e59445f6eedd32a85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cccf2dd4cb342542a0c7d2e59445f6eedd32a85/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14c54b637b18f74680d0c0441216714b5e9c150d", "url": "https://api.github.com/repos/rust-lang/rust/commits/14c54b637b18f74680d0c0441216714b5e9c150d", "html_url": "https://github.com/rust-lang/rust/commit/14c54b637b18f74680d0c0441216714b5e9c150d"}], "stats": {"total": 160, "additions": 75, "deletions": 85}, "files": [{"sha": "ce797a7a8371dcb2be3b2666459864e9b16f3b9e", "filename": ".gitignore", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cccf2dd4cb342542a0c7d2e59445f6eedd32a85/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/1cccf2dd4cb342542a0c7d2e59445f6eedd32a85/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=1cccf2dd4cb342542a0c7d2e59445f6eedd32a85", "patch": "@@ -41,7 +41,7 @@ no_llvm_build\n /inst/\n /llvm/\n /mingw-build/\n-/build/\n+build/\n /build-rust-analyzer/\n /dist/\n /unicode-downloads"}, {"sha": "864e68de55dedbd7fb68815edcf250d247e72840", "filename": "src/tools/replace-version-placeholder/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cccf2dd4cb342542a0c7d2e59445f6eedd32a85/src%2Ftools%2Freplace-version-placeholder%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cccf2dd4cb342542a0c7d2e59445f6eedd32a85/src%2Ftools%2Freplace-version-placeholder%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Freplace-version-placeholder%2Fsrc%2Fmain.rs?ref=1cccf2dd4cb342542a0c7d2e59445f6eedd32a85", "patch": "@@ -10,7 +10,7 @@ fn main() {\n     let version_str = version_str.trim();\n     walk::walk(\n         &root_path,\n-        &mut |path| {\n+        |path| {\n             walk::filter_dirs(path)\n                 // We exempt these as they require the placeholder\n                 // for their operation"}, {"sha": "9bfee1efc0b2e03daad02a5090bbd725a479e1b0", "filename": "src/tools/tidy/src/alphabetical.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cccf2dd4cb342542a0c7d2e59445f6eedd32a85/src%2Ftools%2Ftidy%2Fsrc%2Falphabetical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cccf2dd4cb342542a0c7d2e59445f6eedd32a85/src%2Ftools%2Ftidy%2Fsrc%2Falphabetical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Falphabetical.rs?ref=1cccf2dd4cb342542a0c7d2e59445f6eedd32a85", "patch": "@@ -95,7 +95,7 @@ fn check_section<'a>(\n }\n \n pub fn check(path: &Path, bad: &mut bool) {\n-    walk(path, &mut filter_dirs, &mut |entry, contents| {\n+    walk(path, filter_dirs, &mut |entry, contents| {\n         let file = &entry.path().display();\n \n         let mut lines = contents.lines().enumerate().peekable();"}, {"sha": "2d6abe59343f2f031b9a1762fb2234efcc998f6a", "filename": "src/tools/tidy/src/bins.rs", "status": "modified", "additions": 29, "deletions": 45, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/1cccf2dd4cb342542a0c7d2e59445f6eedd32a85/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cccf2dd4cb342542a0c7d2e59445f6eedd32a85/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs?ref=1cccf2dd4cb342542a0c7d2e59445f6eedd32a85", "patch": "@@ -101,54 +101,38 @@ mod os_impl {\n \n         const ALLOWED: &[&str] = &[\"configure\", \"x\"];\n \n-        walk_no_read(\n-            path,\n-            &mut |path| {\n-                filter_dirs(path)\n-                    || path.ends_with(\"src/etc\")\n-                    // This is a list of directories that we almost certainly\n-                    // don't need to walk. A future PR will likely want to\n-                    // remove these in favor of crate::walk_no_read using git\n-                    // ls-files to discover the paths we should check, which\n-                    // would naturally ignore all of these directories. It's\n-                    // also likely faster than walking the directory tree\n-                    // directly (since git is just reading from a couple files\n-                    // to produce the results).\n-                    || path.ends_with(\"target\")\n-                    || path.ends_with(\"build\")\n-                    || path.ends_with(\".git\")\n-            },\n-            &mut |entry| {\n-                let file = entry.path();\n-                let extension = file.extension();\n-                let scripts = [\"py\", \"sh\", \"ps1\"];\n-                if scripts.into_iter().any(|e| extension == Some(OsStr::new(e))) {\n-                    return;\n-                }\n+        // FIXME: we don't need to look at all binaries, only files that have been modified in this branch\n+        // (e.g. using `git ls-files`).\n+        walk_no_read(path, |path| filter_dirs(path) || path.ends_with(\"src/etc\"), &mut |entry| {\n+            let file = entry.path();\n+            let extension = file.extension();\n+            let scripts = [\"py\", \"sh\", \"ps1\"];\n+            if scripts.into_iter().any(|e| extension == Some(OsStr::new(e))) {\n+                return;\n+            }\n \n-                if t!(is_executable(&file), file) {\n-                    let rel_path = file.strip_prefix(path).unwrap();\n-                    let git_friendly_path = rel_path.to_str().unwrap().replace(\"\\\\\", \"/\");\n+            if t!(is_executable(&file), file) {\n+                let rel_path = file.strip_prefix(path).unwrap();\n+                let git_friendly_path = rel_path.to_str().unwrap().replace(\"\\\\\", \"/\");\n \n-                    if ALLOWED.contains(&git_friendly_path.as_str()) {\n-                        return;\n-                    }\n+                if ALLOWED.contains(&git_friendly_path.as_str()) {\n+                    return;\n+                }\n \n-                    let output = Command::new(\"git\")\n-                        .arg(\"ls-files\")\n-                        .arg(&git_friendly_path)\n-                        .current_dir(path)\n-                        .stderr(Stdio::null())\n-                        .output()\n-                        .unwrap_or_else(|e| {\n-                            panic!(\"could not run git ls-files: {e}\");\n-                        });\n-                    let path_bytes = rel_path.as_os_str().as_bytes();\n-                    if output.status.success() && output.stdout.starts_with(path_bytes) {\n-                        tidy_error!(bad, \"binary checked into source: {}\", file.display());\n-                    }\n+                let output = Command::new(\"git\")\n+                    .arg(\"ls-files\")\n+                    .arg(&git_friendly_path)\n+                    .current_dir(path)\n+                    .stderr(Stdio::null())\n+                    .output()\n+                    .unwrap_or_else(|e| {\n+                        panic!(\"could not run git ls-files: {e}\");\n+                    });\n+                let path_bytes = rel_path.as_os_str().as_bytes();\n+                if output.status.success() && output.stdout.starts_with(path_bytes) {\n+                    tidy_error!(bad, \"binary checked into source: {}\", file.display());\n                 }\n-            },\n-        )\n+            }\n+        })\n     }\n }"}, {"sha": "2241375eaae11f14ed89f15e12d37a433238cf4f", "filename": "src/tools/tidy/src/debug_artifacts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cccf2dd4cb342542a0c7d2e59445f6eedd32a85/src%2Ftools%2Ftidy%2Fsrc%2Fdebug_artifacts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cccf2dd4cb342542a0c7d2e59445f6eedd32a85/src%2Ftools%2Ftidy%2Fsrc%2Fdebug_artifacts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdebug_artifacts.rs?ref=1cccf2dd4cb342542a0c7d2e59445f6eedd32a85", "patch": "@@ -6,7 +6,7 @@ use std::path::Path;\n const GRAPHVIZ_POSTFLOW_MSG: &str = \"`borrowck_graphviz_postflow` attribute in test\";\n \n pub fn check(test_dir: &Path, bad: &mut bool) {\n-    walk(test_dir, &mut filter_dirs, &mut |entry, contents| {\n+    walk(test_dir, filter_dirs, &mut |entry, contents| {\n         let filename = entry.path();\n         let is_rust = filename.extension().map_or(false, |ext| ext == \"rs\");\n         if !is_rust {"}, {"sha": "ae8233aa9108d0e3282d38bcb2092b1fcc755cab", "filename": "src/tools/tidy/src/edition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cccf2dd4cb342542a0c7d2e59445f6eedd32a85/src%2Ftools%2Ftidy%2Fsrc%2Fedition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cccf2dd4cb342542a0c7d2e59445f6eedd32a85/src%2Ftools%2Ftidy%2Fsrc%2Fedition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fedition.rs?ref=1cccf2dd4cb342542a0c7d2e59445f6eedd32a85", "patch": "@@ -11,7 +11,7 @@ fn is_edition_2021(mut line: &str) -> bool {\n pub fn check(path: &Path, bad: &mut bool) {\n     walk(\n         path,\n-        &mut |path| {\n+        |path| {\n             filter_dirs(path)\n                 || (path.ends_with(\"tests\") && path.join(\"COMPILER_TESTS.md\").exists())\n         },"}, {"sha": "d90ad5abbf999cd536253891da14334034cdbf78", "filename": "src/tools/tidy/src/error_codes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cccf2dd4cb342542a0c7d2e59445f6eedd32a85/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cccf2dd4cb342542a0c7d2e59445f6eedd32a85/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs?ref=1cccf2dd4cb342542a0c7d2e59445f6eedd32a85", "patch": "@@ -127,7 +127,7 @@ fn check_error_codes_docs(\n \n     let mut no_longer_emitted_codes = Vec::new();\n \n-    walk(&docs_path, &mut |_| false, &mut |entry, contents| {\n+    walk(&docs_path, |_| false, &mut |entry, contents| {\n         let path = entry.path();\n \n         // Error if the file isn't markdown.\n@@ -319,7 +319,7 @@ fn check_error_codes_used(\n \n     let mut found_codes = Vec::new();\n \n-    walk_many(search_paths, &mut filter_dirs, &mut |entry, contents| {\n+    walk_many(search_paths, filter_dirs, &mut |entry, contents| {\n         let path = entry.path();\n \n         // Return early if we aren't looking at a source file."}, {"sha": "f0f13628dc796742cd5f8fa82c269cfa8bcb4d5a", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1cccf2dd4cb342542a0c7d2e59445f6eedd32a85/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cccf2dd4cb342542a0c7d2e59445f6eedd32a85/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=1cccf2dd4cb342542a0c7d2e59445f6eedd32a85", "patch": "@@ -101,7 +101,7 @@ pub fn check(\n             &tests_path.join(\"rustdoc-ui\"),\n             &tests_path.join(\"rustdoc\"),\n         ],\n-        &mut filter_dirs,\n+        filter_dirs,\n         &mut |entry, contents| {\n             let file = entry.path();\n             let filename = file.file_name().unwrap().to_string_lossy();\n@@ -477,11 +477,11 @@ fn get_and_check_lib_features(\n \n fn map_lib_features(\n     base_src_path: &Path,\n-    mf: &mut dyn FnMut(Result<(&str, Feature), &str>, &Path, usize),\n+    mf: &mut (dyn Send + Sync + FnMut(Result<(&str, Feature), &str>, &Path, usize)),\n ) {\n     walk(\n         base_src_path,\n-        &mut |path| filter_dirs(path) || path.ends_with(\"tests\"),\n+        |path| filter_dirs(path) || path.ends_with(\"tests\"),\n         &mut |entry, contents| {\n             let file = entry.path();\n             let filename = file.file_name().unwrap().to_string_lossy();"}, {"sha": "33938ac9a0a5f7776e30119c867c12a1e6c10022", "filename": "src/tools/tidy/src/pal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cccf2dd4cb342542a0c7d2e59445f6eedd32a85/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cccf2dd4cb342542a0c7d2e59445f6eedd32a85/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs?ref=1cccf2dd4cb342542a0c7d2e59445f6eedd32a85", "patch": "@@ -68,7 +68,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n     // Sanity check that the complex parsing here works.\n     let mut saw_target_arch = false;\n     let mut saw_cfg_bang = false;\n-    walk(path, &mut filter_dirs, &mut |entry, contents| {\n+    walk(path, filter_dirs, &mut |entry, contents| {\n         let file = entry.path();\n         let filestr = file.to_string_lossy().replace(\"\\\\\", \"/\");\n         if !filestr.ends_with(\".rs\") {"}, {"sha": "d7db5c02297868674a13e0ab3efc6d644e7be38c", "filename": "src/tools/tidy/src/rustdoc_gui_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cccf2dd4cb342542a0c7d2e59445f6eedd32a85/src%2Ftools%2Ftidy%2Fsrc%2Frustdoc_gui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cccf2dd4cb342542a0c7d2e59445f6eedd32a85/src%2Ftools%2Ftidy%2Fsrc%2Frustdoc_gui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Frustdoc_gui_tests.rs?ref=1cccf2dd4cb342542a0c7d2e59445f6eedd32a85", "patch": "@@ -5,7 +5,7 @@ use std::path::Path;\n pub fn check(path: &Path, bad: &mut bool) {\n     crate::walk::walk(\n         &path.join(\"rustdoc-gui\"),\n-        &mut |p| {\n+        |p| {\n             // If there is no extension, it's very likely a folder and we want to go into it.\n             p.extension().map(|e| e != \"goml\").unwrap_or(false)\n         },"}, {"sha": "9ecb30529cc920d10da8a7198b9af51c4a7cf1a7", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cccf2dd4cb342542a0c7d2e59445f6eedd32a85/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cccf2dd4cb342542a0c7d2e59445f6eedd32a85/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=1cccf2dd4cb342542a0c7d2e59445f6eedd32a85", "patch": "@@ -235,7 +235,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n         .chain(PROBLEMATIC_CONSTS.iter().map(|v| format!(\"{:X}\", v)))\n         .collect();\n     let problematic_regex = RegexSet::new(problematic_consts_strings.as_slice()).unwrap();\n-    walk(path, &mut skip, &mut |entry, contents| {\n+    walk(path, skip, &mut |entry, contents| {\n         let file = entry.path();\n         let filename = file.file_name().unwrap().to_string_lossy();\n         let extensions ="}, {"sha": "f41fa4fcce1b519651573e968e24d523d138eab0", "filename": "src/tools/tidy/src/target_specific_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cccf2dd4cb342542a0c7d2e59445f6eedd32a85/src%2Ftools%2Ftidy%2Fsrc%2Ftarget_specific_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cccf2dd4cb342542a0c7d2e59445f6eedd32a85/src%2Ftools%2Ftidy%2Fsrc%2Ftarget_specific_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ftarget_specific_tests.rs?ref=1cccf2dd4cb342542a0c7d2e59445f6eedd32a85", "patch": "@@ -37,7 +37,7 @@ struct RevisionInfo<'a> {\n pub fn check(path: &Path, bad: &mut bool) {\n     crate::walk::walk(\n         path,\n-        &mut |path| path.extension().map(|p| p == \"rs\") == Some(false),\n+        |path| path.extension().map(|p| p == \"rs\") == Some(false),\n         &mut |entry, content| {\n             let file = entry.path().display();\n             let mut header_map = BTreeMap::new();"}, {"sha": "15c36923e885fee6299c22622b516e1ef88f7cce", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cccf2dd4cb342542a0c7d2e59445f6eedd32a85/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cccf2dd4cb342542a0c7d2e59445f6eedd32a85/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=1cccf2dd4cb342542a0c7d2e59445f6eedd32a85", "patch": "@@ -54,7 +54,7 @@ fn check_entries(path: &Path, bad: &mut bool) {\n pub fn check(path: &Path, bad: &mut bool) {\n     check_entries(&path, bad);\n     for path in &[&path.join(\"ui\"), &path.join(\"ui-fulldeps\")] {\n-        crate::walk::walk_no_read(path, &mut |_| false, &mut |entry| {\n+        crate::walk::walk_no_read(path, |_| false, &mut |entry| {\n             let file_path = entry.path();\n             if let Some(ext) = file_path.extension() {\n                 if ext == \"stderr\" || ext == \"stdout\" {"}, {"sha": "24ab81587db1d99eaf98ed9a82096081bd2d5fc7", "filename": "src/tools/tidy/src/unit_tests.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1cccf2dd4cb342542a0c7d2e59445f6eedd32a85/src%2Ftools%2Ftidy%2Fsrc%2Funit_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cccf2dd4cb342542a0c7d2e59445f6eedd32a85/src%2Ftools%2Ftidy%2Fsrc%2Funit_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Funit_tests.rs?ref=1cccf2dd4cb342542a0c7d2e59445f6eedd32a85", "patch": "@@ -11,14 +11,16 @@ use crate::walk::{filter_dirs, walk};\n use std::path::Path;\n \n pub fn check(root_path: &Path, bad: &mut bool) {\n-    let core = &root_path.join(\"core\");\n-    let core_tests = &core.join(\"tests\");\n-    let core_benches = &core.join(\"benches\");\n-    let is_core = |path: &Path| {\n-        path.starts_with(core) && !(path.starts_with(core_tests) || path.starts_with(core_benches))\n+    let core = root_path.join(\"core\");\n+    let core_copy = core.clone();\n+    let core_tests = core.join(\"tests\");\n+    let core_benches = core.join(\"benches\");\n+    let is_core = move |path: &Path| {\n+        path.starts_with(&core)\n+            && !(path.starts_with(&core_tests) || path.starts_with(&core_benches))\n     };\n \n-    let mut skip = |path: &Path| {\n+    let skip = move |path: &Path| {\n         let file_name = path.file_name().unwrap_or_default();\n         if path.is_dir() {\n             filter_dirs(path)\n@@ -35,9 +37,9 @@ pub fn check(root_path: &Path, bad: &mut bool) {\n         }\n     };\n \n-    walk(root_path, &mut skip, &mut |entry, contents| {\n+    walk(root_path, skip, &mut |entry, contents| {\n         let path = entry.path();\n-        let is_core = path.starts_with(core);\n+        let is_core = path.starts_with(&core_copy);\n         for (i, line) in contents.lines().enumerate() {\n             let line = line.trim();\n             let is_test = || line.contains(\"#[test]\") && !line.contains(\"`#[test]\");"}, {"sha": "f7f2c647eb49a0e1a3ba3df28f94cf3d1da383ff", "filename": "src/tools/tidy/src/walk.rs", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1cccf2dd4cb342542a0c7d2e59445f6eedd32a85/src%2Ftools%2Ftidy%2Fsrc%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cccf2dd4cb342542a0c7d2e59445f6eedd32a85/src%2Ftools%2Ftidy%2Fsrc%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fwalk.rs?ref=1cccf2dd4cb342542a0c7d2e59445f6eedd32a85", "patch": "@@ -1,9 +1,8 @@\n-use std::fs::File;\n-use std::io::Read;\n-use walkdir::{DirEntry, WalkDir};\n+use ignore::DirEntry;\n \n-use std::path::Path;\n+use std::{fs, path::Path};\n \n+/// The default directory filter.\n pub fn filter_dirs(path: &Path) -> bool {\n     let skip = [\n         \"tidy-test-file\",\n@@ -36,34 +35,39 @@ pub fn filter_dirs(path: &Path) -> bool {\n \n pub fn walk_many(\n     paths: &[&Path],\n-    skip: &mut dyn FnMut(&Path) -> bool,\n+    skip: impl Clone + Send + Sync + 'static + Fn(&Path) -> bool,\n     f: &mut dyn FnMut(&DirEntry, &str),\n ) {\n     for path in paths {\n-        walk(path, skip, f);\n+        walk(path, skip.clone(), f);\n     }\n }\n \n-pub fn walk(path: &Path, skip: &mut dyn FnMut(&Path) -> bool, f: &mut dyn FnMut(&DirEntry, &str)) {\n-    let mut contents = String::new();\n+pub fn walk(\n+    path: &Path,\n+    skip: impl Send + Sync + 'static + Fn(&Path) -> bool,\n+    f: &mut dyn FnMut(&DirEntry, &str),\n+) {\n     walk_no_read(path, skip, &mut |entry| {\n-        contents.clear();\n-        if t!(File::open(entry.path()), entry.path()).read_to_string(&mut contents).is_err() {\n-            contents.clear();\n-        }\n-        f(&entry, &contents);\n+        let contents = t!(fs::read(entry.path()), entry.path());\n+        let contents_str = match String::from_utf8(contents) {\n+            Ok(s) => s,\n+            Err(_) => return, // skip this file\n+        };\n+        f(&entry, &contents_str);\n     });\n }\n \n pub(crate) fn walk_no_read(\n     path: &Path,\n-    skip: &mut dyn FnMut(&Path) -> bool,\n+    skip: impl Send + Sync + 'static + Fn(&Path) -> bool,\n     f: &mut dyn FnMut(&DirEntry),\n ) {\n-    let walker = WalkDir::new(path).into_iter().filter_entry(|e| !skip(e.path()));\n-    for entry in walker {\n+    let mut walker = ignore::WalkBuilder::new(path);\n+    let walker = walker.filter_entry(move |e| !skip(e.path()));\n+    for entry in walker.build() {\n         if let Ok(entry) = entry {\n-            if entry.file_type().is_dir() {\n+            if entry.file_type().map_or(true, |kind| kind.is_dir() || kind.is_symlink()) {\n                 continue;\n             }\n             f(&entry);"}]}