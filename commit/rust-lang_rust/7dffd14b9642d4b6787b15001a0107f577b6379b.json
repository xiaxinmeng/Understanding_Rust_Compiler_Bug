{"sha": "7dffd14b9642d4b6787b15001a0107f577b6379b", "node_id": "C_kwDOAAsO6NoAKDdkZmZkMTRiOTY0MmQ0YjY3ODdiMTUwMDFhMDEwN2Y1NzdiNjM3OWI", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-06-28T09:57:05Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-06-30T07:59:22Z"}, "message": "lint: port unsafe diagnostics\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "863c0a8b628c1197aa7760ae9e506dafd063b594", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/863c0a8b628c1197aa7760ae9e506dafd063b594"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7dffd14b9642d4b6787b15001a0107f577b6379b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7dffd14b9642d4b6787b15001a0107f577b6379b", "html_url": "https://github.com/rust-lang/rust/commit/7dffd14b9642d4b6787b15001a0107f577b6379b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7dffd14b9642d4b6787b15001a0107f577b6379b/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c63a2145c171bdf498c56f0c923baa7c135bb20", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c63a2145c171bdf498c56f0c923baa7c135bb20", "html_url": "https://github.com/rust-lang/rust/commit/4c63a2145c171bdf498c56f0c923baa7c135bb20"}], "stats": {"total": 98, "additions": 62, "deletions": 36}, "files": [{"sha": "359ae8db5892cf05dedda266c81f601b23ba6927", "filename": "compiler/rustc_error_messages/locales/en-US/lint.ftl", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7dffd14b9642d4b6787b15001a0107f577b6379b/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/7dffd14b9642d4b6787b15001a0107f577b6379b/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl?ref=7dffd14b9642d4b6787b15001a0107f577b6379b", "patch": "@@ -294,3 +294,33 @@ lint-builtin-box-pointers = type uses owned (Box type) pointers: {$ty}\n \n lint-builtin-non-shorthand-field-patterns = the `{$ident}:` in this pattern is redundant\n     .suggestion = use shorthand field pattern\n+\n+lint-builtin-overridden-symbol-name =\n+    the linker's behavior with multiple libraries exporting duplicate symbol names is undefined and Rust cannot provide guarantees when you manually override them\n+\n+lint-builtin-overridden-symbol-section =\n+    the program's behavior with overridden link sections on items is unpredictable and Rust cannot provide guarantees when you manually override them\n+\n+lint-builtin-allow-internal-unsafe =\n+    `allow_internal_unsafe` allows defining macros using unsafe without triggering the `unsafe_code` lint at their call site\n+\n+lint-builtin-unsafe-block = usage of an `unsafe` block\n+\n+lint-builtin-unsafe-trait = declaration of an `unsafe` trait\n+\n+lint-builtin-unsafe-impl = implementation of an `unsafe` trait\n+\n+lint-builtin-no-mangle-fn = declaration of a `no_mangle` function\n+lint-builtin-export-name-fn = declaration of a function with `export_name`\n+lint-builtin-link-section-fn = declaration of a function with `link_section`\n+\n+lint-builtin-no-mangle-static = declaration of a `no_mangle` static\n+lint-builtin-export-name-static = declaration of a static with `export_name`\n+lint-builtin-link-section-static = declaration of a static with `link_section`\n+\n+lint-builtin-no-mangle-method = declaration of a `no_mangle` method\n+lint-builtin-export-name-method = declaration of a method with `export_name`\n+\n+lint-builtin-decl-unsafe-fn = declaration of an `unsafe` function\n+lint-builtin-decl-unsafe-method = declaration of an `unsafe` method\n+lint-builtin-impl-unsafe-method = implementation of an `unsafe` method"}, {"sha": "6acfbc8f89b37ac9654908cddfba195c0310e50a", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 32, "deletions": 36, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/7dffd14b9642d4b6787b15001a0107f577b6379b/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dffd14b9642d4b6787b15001a0107f577b6379b/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=7dffd14b9642d4b6787b15001a0107f577b6379b", "patch": "@@ -31,7 +31,9 @@ use rustc_ast::{self as ast, *};\n use rustc_ast_pretty::pprust::{self, expr_to_string};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::stack::ensure_sufficient_stack;\n-use rustc_errors::{fluent, Applicability, Diagnostic, DiagnosticStyledString, MultiSpan};\n+use rustc_errors::{\n+    fluent, Applicability, Diagnostic, DiagnosticMessage, DiagnosticStyledString, MultiSpan,\n+};\n use rustc_feature::{deprecated_attributes, AttributeGate, BuiltinAttribute, GateIssue, Stability};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n@@ -326,26 +328,25 @@ impl UnsafeCode {\n         cx.struct_span_lint(UNSAFE_CODE, span, decorate);\n     }\n \n-    fn report_overridden_symbol_name(&self, cx: &EarlyContext<'_>, span: Span, msg: &str) {\n+    fn report_overridden_symbol_name(\n+        &self,\n+        cx: &EarlyContext<'_>,\n+        span: Span,\n+        msg: DiagnosticMessage,\n+    ) {\n         self.report_unsafe(cx, span, |lint| {\n-            lint.build(msg)\n-                .note(\n-                    \"the linker's behavior with multiple libraries exporting duplicate symbol \\\n-                    names is undefined and Rust cannot provide guarantees when you manually \\\n-                    override them\",\n-                )\n-                .emit();\n+            lint.build(msg).note(fluent::lint::builtin_overridden_symbol_name).emit();\n         })\n     }\n \n-    fn report_overridden_symbol_section(&self, cx: &EarlyContext<'_>, span: Span, msg: &str) {\n+    fn report_overridden_symbol_section(\n+        &self,\n+        cx: &EarlyContext<'_>,\n+        span: Span,\n+        msg: DiagnosticMessage,\n+    ) {\n         self.report_unsafe(cx, span, |lint| {\n-            lint.build(msg)\n-                .note(\n-                    \"the program's behavior with overridden link sections on items is unpredictable \\\n-                    and Rust cannot provide guarantees when you manually override them\",\n-                )\n-                .emit();\n+            lint.build(msg).note(fluent::lint::builtin_overridden_symbol_section).emit();\n         })\n     }\n }\n@@ -354,12 +355,7 @@ impl EarlyLintPass for UnsafeCode {\n     fn check_attribute(&mut self, cx: &EarlyContext<'_>, attr: &ast::Attribute) {\n         if attr.has_name(sym::allow_internal_unsafe) {\n             self.report_unsafe(cx, attr.span, |lint| {\n-                lint.build(\n-                    \"`allow_internal_unsafe` allows defining \\\n-                                               macros using unsafe without triggering \\\n-                                               the `unsafe_code` lint at their call site\",\n-                )\n-                .emit();\n+                lint.build(fluent::lint::builtin_allow_internal_unsafe).emit();\n             });\n         }\n     }\n@@ -369,7 +365,7 @@ impl EarlyLintPass for UnsafeCode {\n             // Don't warn about generated blocks; that'll just pollute the output.\n             if blk.rules == ast::BlockCheckMode::Unsafe(ast::UserProvided) {\n                 self.report_unsafe(cx, blk.span, |lint| {\n-                    lint.build(\"usage of an `unsafe` block\").emit();\n+                    lint.build(fluent::lint::builtin_unsafe_block).emit();\n                 });\n             }\n         }\n@@ -379,36 +375,36 @@ impl EarlyLintPass for UnsafeCode {\n         match it.kind {\n             ast::ItemKind::Trait(box ast::Trait { unsafety: ast::Unsafe::Yes(_), .. }) => self\n                 .report_unsafe(cx, it.span, |lint| {\n-                    lint.build(\"declaration of an `unsafe` trait\").emit();\n+                    lint.build(fluent::lint::builtin_unsafe_trait).emit();\n                 }),\n \n             ast::ItemKind::Impl(box ast::Impl { unsafety: ast::Unsafe::Yes(_), .. }) => self\n                 .report_unsafe(cx, it.span, |lint| {\n-                    lint.build(\"implementation of an `unsafe` trait\").emit();\n+                    lint.build(fluent::lint::builtin_unsafe_impl).emit();\n                 }),\n \n             ast::ItemKind::Fn(..) => {\n                 if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::no_mangle) {\n                     self.report_overridden_symbol_name(\n                         cx,\n                         attr.span,\n-                        \"declaration of a `no_mangle` function\",\n+                        fluent::lint::builtin_no_mangle_fn,\n                     );\n                 }\n \n                 if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::export_name) {\n                     self.report_overridden_symbol_name(\n                         cx,\n                         attr.span,\n-                        \"declaration of a function with `export_name`\",\n+                        fluent::lint::builtin_export_name_fn,\n                     );\n                 }\n \n                 if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::link_section) {\n                     self.report_overridden_symbol_section(\n                         cx,\n                         attr.span,\n-                        \"declaration of a function with `link_section`\",\n+                        fluent::lint::builtin_link_section_fn,\n                     );\n                 }\n             }\n@@ -418,23 +414,23 @@ impl EarlyLintPass for UnsafeCode {\n                     self.report_overridden_symbol_name(\n                         cx,\n                         attr.span,\n-                        \"declaration of a `no_mangle` static\",\n+                        fluent::lint::builtin_no_mangle_static,\n                     );\n                 }\n \n                 if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::export_name) {\n                     self.report_overridden_symbol_name(\n                         cx,\n                         attr.span,\n-                        \"declaration of a static with `export_name`\",\n+                        fluent::lint::builtin_export_name_static,\n                     );\n                 }\n \n                 if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::link_section) {\n                     self.report_overridden_symbol_section(\n                         cx,\n                         attr.span,\n-                        \"declaration of a static with `link_section`\",\n+                        fluent::lint::builtin_link_section_static,\n                     );\n                 }\n             }\n@@ -449,14 +445,14 @@ impl EarlyLintPass for UnsafeCode {\n                 self.report_overridden_symbol_name(\n                     cx,\n                     attr.span,\n-                    \"declaration of a `no_mangle` method\",\n+                    fluent::lint::builtin_no_mangle_method,\n                 );\n             }\n             if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::export_name) {\n                 self.report_overridden_symbol_name(\n                     cx,\n                     attr.span,\n-                    \"declaration of a method with `export_name`\",\n+                    fluent::lint::builtin_export_name_method,\n                 );\n             }\n         }\n@@ -474,9 +470,9 @@ impl EarlyLintPass for UnsafeCode {\n         {\n             let msg = match ctxt {\n                 FnCtxt::Foreign => return,\n-                FnCtxt::Free => \"declaration of an `unsafe` function\",\n-                FnCtxt::Assoc(_) if body.is_none() => \"declaration of an `unsafe` method\",\n-                FnCtxt::Assoc(_) => \"implementation of an `unsafe` method\",\n+                FnCtxt::Free => fluent::lint::builtin_decl_unsafe_fn,\n+                FnCtxt::Assoc(_) if body.is_none() => fluent::lint::builtin_decl_unsafe_method,\n+                FnCtxt::Assoc(_) => fluent::lint::builtin_impl_unsafe_method,\n             };\n             self.report_unsafe(cx, span, |lint| {\n                 lint.build(msg).emit();"}]}