{"sha": "bdf16d1b670959f35bcbadbfd11b5c1b5a396703", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkZjE2ZDFiNjcwOTU5ZjM1YmNiYWRiZmQxMWI1YzFiNWEzOTY3MDM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-08-20T16:56:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-20T16:56:24Z"}, "message": "Merge #1706 #1708\n\n1706: Normalize line endings to Unix flavor on IO bounraries r=matklad a=matklad\n\n\n\n1708: update yanked getrandom r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "a1ed678df5a59200f91d7412f45acef158e54cfd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1ed678df5a59200f91d7412f45acef158e54cfd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdf16d1b670959f35bcbadbfd11b5c1b5a396703", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdXCY4CRBK7hj4Ov3rIwAAdHIIAIVCi6Q566fek/+tTKG7+x/x\nxqWtX0Xz1/DQ7fyjmADdLPyWVshRMDOArZ+euZwgCU2Ax+GZT9nABOFjvnl1xOBK\nDDo5TznspfCdCEqJSUxgtQOew7tmkhiBsVXLwS5vxX67Dtl9eOYwuXL8hbbom/4q\nsnyBuu17uZAUwSnjFsTxYBISToSvXfGckYUHoVCCULJen4g/iipLsBErMLJVF7De\nCYytmenPoASeJaEvfxlZYFQs68+P/M7olgyp8YSNwEOEzzoEMjRIrisem9QzjpFA\nvCFR5YWQh3FtigPjNWRBD2YUzuRw/CyAaJrVgiyEaND/xpaw8QZ/CHkAkgJf3qA=\n=/QM8\n-----END PGP SIGNATURE-----\n", "payload": "tree a1ed678df5a59200f91d7412f45acef158e54cfd\nparent 43dd8b64e70ab883f39d3dcf73a21daf0e2fe6ea\nparent 77751cfe01311d9e4fbb61c8dca352289499b3b7\nparent f2d458760a22a53b7d7882eea4234f2e2a9947d7\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1566320184 +0000\ncommitter GitHub <noreply@github.com> 1566320184 +0000\n\nMerge #1706 #1708\n\n1706: Normalize line endings to Unix flavor on IO bounraries r=matklad a=matklad\n\n\n\n1708: update yanked getrandom r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdf16d1b670959f35bcbadbfd11b5c1b5a396703", "html_url": "https://github.com/rust-lang/rust/commit/bdf16d1b670959f35bcbadbfd11b5c1b5a396703", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdf16d1b670959f35bcbadbfd11b5c1b5a396703/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43dd8b64e70ab883f39d3dcf73a21daf0e2fe6ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/43dd8b64e70ab883f39d3dcf73a21daf0e2fe6ea", "html_url": "https://github.com/rust-lang/rust/commit/43dd8b64e70ab883f39d3dcf73a21daf0e2fe6ea"}, {"sha": "77751cfe01311d9e4fbb61c8dca352289499b3b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/77751cfe01311d9e4fbb61c8dca352289499b3b7", "html_url": "https://github.com/rust-lang/rust/commit/77751cfe01311d9e4fbb61c8dca352289499b3b7"}, {"sha": "f2d458760a22a53b7d7882eea4234f2e2a9947d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2d458760a22a53b7d7882eea4234f2e2a9947d7", "html_url": "https://github.com/rust-lang/rust/commit/f2d458760a22a53b7d7882eea4234f2e2a9947d7"}], "stats": {"total": 455, "additions": 224, "deletions": 231}, "files": [{"sha": "4ad9a01b019dcec6ece19b05442b8c0ef2c13de7", "filename": "Cargo.lock", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bdf16d1b670959f35bcbadbfd11b5c1b5a396703/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/bdf16d1b670959f35bcbadbfd11b5c1b5a396703/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=bdf16d1b670959f35bcbadbfd11b5c1b5a396703", "patch": "@@ -534,7 +534,7 @@ dependencies = [\n \n [[package]]\n name = \"getrandom\"\n-version = \"0.1.9\"\n+version = \"0.1.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1092,7 +1092,7 @@ dependencies = [\n  \"ra_hir 0.1.0\",\n  \"ra_ide_api 0.1.0\",\n  \"ra_project_model 0.1.0\",\n- \"ra_vfs 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ra_vfs 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_vfs_glob 0.1.0\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -1198,7 +1198,7 @@ dependencies = [\n  \"ra_project_model 0.1.0\",\n  \"ra_syntax 0.1.0\",\n  \"ra_text_edit 0.1.0\",\n- \"ra_vfs 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ra_vfs 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_vfs_glob 0.1.0\",\n  \"relative-path 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1256,7 +1256,7 @@ dependencies = [\n \n [[package]]\n name = \"ra_rustc_lexer\"\n-version = \"0.1.0-pre.2\"\n+version = \"0.1.0-pre.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1268,7 +1268,7 @@ version = \"0.1.0\"\n dependencies = [\n  \"itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_parser 0.1.0\",\n- \"ra_rustc_lexer 0.1.0-pre.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ra_rustc_lexer 0.1.0-pre.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_text_edit 0.1.0\",\n  \"rowan 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smol_str 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1307,7 +1307,7 @@ dependencies = [\n \n [[package]]\n name = \"ra_vfs\"\n-version = \"0.2.6\"\n+version = \"0.2.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"crossbeam-channel 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1324,7 +1324,7 @@ name = \"ra_vfs_glob\"\n version = \"0.1.0\"\n dependencies = [\n  \"globset 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"ra_vfs 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ra_vfs 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1350,7 +1350,7 @@ name = \"rand\"\n version = \"0.7.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"getrandom 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"getrandom 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_chacha 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_core 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1394,7 +1394,7 @@ name = \"rand_core\"\n version = \"0.5.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"getrandom 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"getrandom 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -2073,7 +2073,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2e9763c69ebaae630ba35f74888db465e49e259ba1bc0eda7d06f4a067615d82\"\n \"checksum fuchsia-zircon-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3dcaa9ae7725d12cdb85b3ad99a434db70b468c09ded17e012d86b5c1010f7a7\"\n \"checksum generic-array 0.12.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c68f0274ae0e023facc3c97b2e00f076be70e254bc851d972503b328db79b2ec\"\n-\"checksum getrandom 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2512b3191f22e2763a5db387f1c9409379772e2050841722eb4a8c4f497bf096\"\n+\"checksum getrandom 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6171a6cc63fbabbe27c2b5ee268e8b7fe5dc1eb0dd2dfad537c1dfed6f69117e\"\n \"checksum glob 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9b919933a397b79c37e33b77bb2aa3dc8eb6e165ad809e58ff75bc7db2e34574\"\n \"checksum globset 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"925aa2cac82d8834e2b2a4415b6f6879757fb5c0928fc445ae76461a12eed8f2\"\n \"checksum heck 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"20564e78d53d2bb135c343b3f47714a56af2061f1c928fdb541dc7b9fdd94205\"\n@@ -2134,8 +2134,8 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum quick-error 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9274b940887ce9addde99c4eee6b5c44cc494b182b97e73dc8ffdcb3397fd3f0\"\n \"checksum quote 0.6.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6ce23b6b870e8f94f81fb0a363d65d86675884b34a09043c81e5562f11c1f8e1\"\n \"checksum quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"053a8c8bcc71fcce321828dc897a98ab9760bef03a4fc36693c231e5b3216cfe\"\n-\"checksum ra_rustc_lexer 0.1.0-pre.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6baccda91574dfadd7f8a0bc8f9f110f874b6b484289b2536d3dbf4f0d5d97bb\"\n-\"checksum ra_vfs 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"865bb9e0f71916f7c7527af4843a2a67d1b0789f7c91c512a6b4ded69af98249\"\n+\"checksum ra_rustc_lexer 0.1.0-pre.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"04371af481820ff8d35c7d12b503eb09cf9e1bd246269bf4a33e3d8c54fa3a4a\"\n+\"checksum ra_vfs 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6918c38f6ab45101f1ddd6110eda831a735b5e9ca6c96d1ceedb7d13ecaeb0f4\"\n \"checksum rand 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6d71dacdc3c88c1fde3885a3be3fbab9f35724e6ce99467f7d9c5026132184ca\"\n \"checksum rand 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d47eab0e83d9693d40f825f86948aa16eff6750ead4bdffc4ab95b8b3a7f052c\"\n \"checksum rand_chacha 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"556d3a1ca6600bfcbab7c7c91ccb085ac7fbbcd70e008a98742e7847f4f7bcef\""}, {"sha": "95c18d0e3df1c6c1d9f0683b7bc3a3d3271a762e", "filename": "crates/ra_assists/src/introduce_variable.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bdf16d1b670959f35bcbadbfd11b5c1b5a396703/crates%2Fra_assists%2Fsrc%2Fintroduce_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf16d1b670959f35bcbadbfd11b5c1b5a396703/crates%2Fra_assists%2Fsrc%2Fintroduce_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fintroduce_variable.rs?ref=bdf16d1b670959f35bcbadbfd11b5c1b5a396703", "patch": "@@ -56,10 +56,7 @@ pub(crate) fn introduce_variable(mut ctx: AssistCtx<impl HirDatabase>) -> Option\n             // but we do not want to duplicate possible\n             // extra newlines in the indent block\n             let text = indent.text();\n-            if text.starts_with(\"\\r\\n\") {\n-                buf.push_str(\"\\r\\n\");\n-                buf.push_str(text.trim_start_matches(\"\\r\\n\"));\n-            } else if text.starts_with('\\n') {\n+            if text.starts_with('\\n') {\n                 buf.push_str(\"\\n\");\n                 buf.push_str(text.trim_start_matches('\\n'));\n             } else {"}, {"sha": "afeac0d8a4c2c85c2e991e3d839e4a9d2246dea7", "filename": "crates/ra_lsp_server/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdf16d1b670959f35bcbadbfd11b5c1b5a396703/crates%2Fra_lsp_server%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bdf16d1b670959f35bcbadbfd11b5c1b5a396703/crates%2Fra_lsp_server%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2FCargo.toml?ref=bdf16d1b670959f35bcbadbfd11b5c1b5a396703", "patch": "@@ -16,7 +16,7 @@ lsp-types = { version = \"0.60.0\", features = [\"proposed\"] }\n rustc-hash = \"1.0\"\n parking_lot = \"0.9.0\"\n \n-ra_vfs = \"0.2.0\"\n+ra_vfs = \"0.2.7\"\n thread_worker = { path = \"../thread_worker\" }\n ra_syntax = { path = \"../ra_syntax\" }\n ra_text_edit = { path = \"../ra_text_edit\" }"}, {"sha": "0ad2ea10f4b53845b22a13253f6f7f71fd0c4f3f", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 66, "deletions": 84, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/bdf16d1b670959f35bcbadbfd11b5c1b5a396703/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf16d1b670959f35bcbadbfd11b5c1b5a396703/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=bdf16d1b670959f35bcbadbfd11b5c1b5a396703", "patch": "@@ -11,6 +11,7 @@ use ra_ide_api::{\n };\n use ra_syntax::{SyntaxKind, TextRange, TextUnit};\n use ra_text_edit::{AtomTextEdit, TextEdit};\n+use ra_vfs::LineEndings;\n \n use crate::{req, world::WorldSnapshot, Result};\n \n@@ -19,16 +20,14 @@ pub trait Conv {\n     fn conv(self) -> Self::Output;\n }\n \n-pub trait ConvWith {\n-    type Ctx;\n+pub trait ConvWith<CTX> {\n     type Output;\n-    fn conv_with(self, ctx: &Self::Ctx) -> Self::Output;\n+    fn conv_with(self, ctx: CTX) -> Self::Output;\n }\n \n-pub trait TryConvWith {\n-    type Ctx;\n+pub trait TryConvWith<CTX> {\n     type Output;\n-    fn try_conv_with(self, ctx: &Self::Ctx) -> Result<Self::Output>;\n+    fn try_conv_with(self, ctx: CTX) -> Result<Self::Output>;\n }\n \n impl Conv for SyntaxKind {\n@@ -89,11 +88,10 @@ impl Conv for Severity {\n     }\n }\n \n-impl ConvWith for CompletionItem {\n-    type Ctx = LineIndex;\n+impl ConvWith<(&LineIndex, LineEndings)> for CompletionItem {\n     type Output = ::lsp_types::CompletionItem;\n \n-    fn conv_with(self, ctx: &LineIndex) -> ::lsp_types::CompletionItem {\n+    fn conv_with(self, ctx: (&LineIndex, LineEndings)) -> ::lsp_types::CompletionItem {\n         let mut additional_text_edits = Vec::new();\n         let mut text_edit = None;\n         // LSP does not allow arbitrary edits in completion, so we have to do a\n@@ -138,8 +136,7 @@ impl ConvWith for CompletionItem {\n     }\n }\n \n-impl ConvWith for Position {\n-    type Ctx = LineIndex;\n+impl ConvWith<&LineIndex> for Position {\n     type Output = TextUnit;\n \n     fn conv_with(self, line_index: &LineIndex) -> TextUnit {\n@@ -148,8 +145,7 @@ impl ConvWith for Position {\n     }\n }\n \n-impl ConvWith for TextUnit {\n-    type Ctx = LineIndex;\n+impl ConvWith<&LineIndex> for TextUnit {\n     type Output = Position;\n \n     fn conv_with(self, line_index: &LineIndex) -> Position {\n@@ -158,17 +154,15 @@ impl ConvWith for TextUnit {\n     }\n }\n \n-impl ConvWith for TextRange {\n-    type Ctx = LineIndex;\n+impl ConvWith<&LineIndex> for TextRange {\n     type Output = Range;\n \n     fn conv_with(self, line_index: &LineIndex) -> Range {\n         Range::new(self.start().conv_with(line_index), self.end().conv_with(line_index))\n     }\n }\n \n-impl ConvWith for Range {\n-    type Ctx = LineIndex;\n+impl ConvWith<&LineIndex> for Range {\n     type Output = TextRange;\n \n     fn conv_with(self, line_index: &LineIndex) -> TextRange {\n@@ -208,77 +202,73 @@ impl Conv for ra_ide_api::FunctionSignature {\n     }\n }\n \n-impl ConvWith for TextEdit {\n-    type Ctx = LineIndex;\n+impl ConvWith<(&LineIndex, LineEndings)> for TextEdit {\n     type Output = Vec<lsp_types::TextEdit>;\n \n-    fn conv_with(self, line_index: &LineIndex) -> Vec<lsp_types::TextEdit> {\n-        self.as_atoms().iter().map_conv_with(line_index).collect()\n+    fn conv_with(self, ctx: (&LineIndex, LineEndings)) -> Vec<lsp_types::TextEdit> {\n+        self.as_atoms().iter().map_conv_with(ctx).collect()\n     }\n }\n \n-impl<'a> ConvWith for &'a AtomTextEdit {\n-    type Ctx = LineIndex;\n+impl ConvWith<(&LineIndex, LineEndings)> for &AtomTextEdit {\n     type Output = lsp_types::TextEdit;\n \n-    fn conv_with(self, line_index: &LineIndex) -> lsp_types::TextEdit {\n-        lsp_types::TextEdit {\n-            range: self.delete.conv_with(line_index),\n-            new_text: self.insert.clone(),\n+    fn conv_with(\n+        self,\n+        (line_index, line_endings): (&LineIndex, LineEndings),\n+    ) -> lsp_types::TextEdit {\n+        let mut new_text = self.insert.clone();\n+        if line_endings == LineEndings::Dos {\n+            new_text = new_text.replace('\\n', \"\\r\\n\");\n         }\n+        lsp_types::TextEdit { range: self.delete.conv_with(line_index), new_text }\n     }\n }\n \n-impl<T: ConvWith> ConvWith for Option<T> {\n-    type Ctx = <T as ConvWith>::Ctx;\n-    type Output = Option<<T as ConvWith>::Output>;\n-    fn conv_with(self, ctx: &Self::Ctx) -> Self::Output {\n+impl<T: ConvWith<CTX>, CTX> ConvWith<CTX> for Option<T> {\n+    type Output = Option<T::Output>;\n+\n+    fn conv_with(self, ctx: CTX) -> Self::Output {\n         self.map(|x| ConvWith::conv_with(x, ctx))\n     }\n }\n \n-impl<'a> TryConvWith for &'a Url {\n-    type Ctx = WorldSnapshot;\n+impl TryConvWith<&WorldSnapshot> for &Url {\n     type Output = FileId;\n     fn try_conv_with(self, world: &WorldSnapshot) -> Result<FileId> {\n         world.uri_to_file_id(self)\n     }\n }\n \n-impl TryConvWith for FileId {\n-    type Ctx = WorldSnapshot;\n+impl TryConvWith<&WorldSnapshot> for FileId {\n     type Output = Url;\n     fn try_conv_with(self, world: &WorldSnapshot) -> Result<Url> {\n         world.file_id_to_uri(self)\n     }\n }\n \n-impl<'a> TryConvWith for &'a TextDocumentItem {\n-    type Ctx = WorldSnapshot;\n+impl TryConvWith<&WorldSnapshot> for &TextDocumentItem {\n     type Output = FileId;\n     fn try_conv_with(self, world: &WorldSnapshot) -> Result<FileId> {\n         self.uri.try_conv_with(world)\n     }\n }\n \n-impl<'a> TryConvWith for &'a VersionedTextDocumentIdentifier {\n-    type Ctx = WorldSnapshot;\n+impl TryConvWith<&WorldSnapshot> for &VersionedTextDocumentIdentifier {\n     type Output = FileId;\n     fn try_conv_with(self, world: &WorldSnapshot) -> Result<FileId> {\n         self.uri.try_conv_with(world)\n     }\n }\n \n-impl<'a> TryConvWith for &'a TextDocumentIdentifier {\n-    type Ctx = WorldSnapshot;\n+impl TryConvWith<&WorldSnapshot> for &TextDocumentIdentifier {\n     type Output = FileId;\n     fn try_conv_with(self, world: &WorldSnapshot) -> Result<FileId> {\n         world.uri_to_file_id(&self.uri)\n     }\n }\n \n-impl<'a> TryConvWith for &'a TextDocumentPositionParams {\n-    type Ctx = WorldSnapshot;\n+impl TryConvWith<&WorldSnapshot> for &TextDocumentPositionParams {\n     type Output = FilePosition;\n     fn try_conv_with(self, world: &WorldSnapshot) -> Result<FilePosition> {\n         let file_id = self.text_document.try_conv_with(world)?;\n@@ -288,8 +278,7 @@ impl<'a> TryConvWith for &'a TextDocumentPositionParams {\n     }\n }\n \n-impl<'a> TryConvWith for (&'a TextDocumentIdentifier, Range) {\n-    type Ctx = WorldSnapshot;\n+impl TryConvWith<&WorldSnapshot> for (&TextDocumentIdentifier, Range) {\n     type Output = FileRange;\n     fn try_conv_with(self, world: &WorldSnapshot) -> Result<FileRange> {\n         let file_id = self.0.try_conv_with(world)?;\n@@ -299,10 +288,9 @@ impl<'a> TryConvWith for (&'a TextDocumentIdentifier, Range) {\n     }\n }\n \n-impl<T: TryConvWith> TryConvWith for Vec<T> {\n-    type Ctx = <T as TryConvWith>::Ctx;\n-    type Output = Vec<<T as TryConvWith>::Output>;\n-    fn try_conv_with(self, ctx: &Self::Ctx) -> Result<Self::Output> {\n+impl<T: TryConvWith<CTX>, CTX: Copy> TryConvWith<CTX> for Vec<T> {\n+    type Output = Vec<<T as TryConvWith<CTX>>::Output>;\n+    fn try_conv_with(self, ctx: CTX) -> Result<Self::Output> {\n         let mut res = Vec::with_capacity(self.len());\n         for item in self {\n             res.push(item.try_conv_with(ctx)?);\n@@ -311,8 +299,7 @@ impl<T: TryConvWith> TryConvWith for Vec<T> {\n     }\n }\n \n-impl TryConvWith for SourceChange {\n-    type Ctx = WorldSnapshot;\n+impl TryConvWith<&WorldSnapshot> for SourceChange {\n     type Output = req::SourceChange;\n     fn try_conv_with(self, world: &WorldSnapshot) -> Result<req::SourceChange> {\n         let cursor_position = match self.cursor_position {\n@@ -351,22 +338,22 @@ impl TryConvWith for SourceChange {\n     }\n }\n \n-impl TryConvWith for SourceFileEdit {\n-    type Ctx = WorldSnapshot;\n+impl TryConvWith<&WorldSnapshot> for SourceFileEdit {\n     type Output = TextDocumentEdit;\n     fn try_conv_with(self, world: &WorldSnapshot) -> Result<TextDocumentEdit> {\n         let text_document = VersionedTextDocumentIdentifier {\n             uri: self.file_id.try_conv_with(world)?,\n             version: None,\n         };\n         let line_index = world.analysis().file_line_index(self.file_id)?;\n-        let edits = self.edit.as_atoms().iter().map_conv_with(&line_index).collect();\n+        let line_endings = world.file_line_endings(self.file_id);\n+        let edits =\n+            self.edit.as_atoms().iter().map_conv_with((&line_index, line_endings)).collect();\n         Ok(TextDocumentEdit { text_document, edits })\n     }\n }\n \n-impl TryConvWith for FileSystemEdit {\n-    type Ctx = WorldSnapshot;\n+impl TryConvWith<&WorldSnapshot> for FileSystemEdit {\n     type Output = ResourceOp;\n     fn try_conv_with(self, world: &WorldSnapshot) -> Result<ResourceOp> {\n         let res = match self {\n@@ -384,8 +371,7 @@ impl TryConvWith for FileSystemEdit {\n     }\n }\n \n-impl TryConvWith for &NavigationTarget {\n-    type Ctx = WorldSnapshot;\n+impl TryConvWith<&WorldSnapshot> for &NavigationTarget {\n     type Output = Location;\n     fn try_conv_with(self, world: &WorldSnapshot) -> Result<Location> {\n         let line_index = world.analysis().file_line_index(self.file_id())?;\n@@ -394,8 +380,7 @@ impl TryConvWith for &NavigationTarget {\n     }\n }\n \n-impl TryConvWith for (FileId, RangeInfo<NavigationTarget>) {\n-    type Ctx = WorldSnapshot;\n+impl TryConvWith<&WorldSnapshot> for (FileId, RangeInfo<NavigationTarget>) {\n     type Output = LocationLink;\n     fn try_conv_with(self, world: &WorldSnapshot) -> Result<LocationLink> {\n         let (src_file_id, target) = self;\n@@ -422,8 +407,7 @@ impl TryConvWith for (FileId, RangeInfo<NavigationTarget>) {\n     }\n }\n \n-impl TryConvWith for (FileId, RangeInfo<Vec<NavigationTarget>>) {\n-    type Ctx = WorldSnapshot;\n+impl TryConvWith<&WorldSnapshot> for (FileId, RangeInfo<Vec<NavigationTarget>>) {\n     type Output = req::GotoDefinitionResponse;\n     fn try_conv_with(self, world: &WorldSnapshot) -> Result<req::GotoTypeDefinitionResponse> {\n         let (file_id, RangeInfo { range, info: navs }) = self;\n@@ -454,57 +438,55 @@ pub fn to_location(\n     Ok(loc)\n }\n \n-pub trait MapConvWith<'a>: Sized + 'a {\n-    type Ctx;\n+pub trait MapConvWith<CTX>: Sized {\n     type Output;\n \n-    fn map_conv_with(self, ctx: &'a Self::Ctx) -> ConvWithIter<'a, Self, Self::Ctx> {\n+    fn map_conv_with(self, ctx: CTX) -> ConvWithIter<Self, CTX> {\n         ConvWithIter { iter: self, ctx }\n     }\n }\n \n-impl<'a, I> MapConvWith<'a> for I\n+impl<CTX, I> MapConvWith<CTX> for I\n where\n-    I: Iterator + 'a,\n-    I::Item: ConvWith,\n+    I: Iterator,\n+    I::Item: ConvWith<CTX>,\n {\n-    type Ctx = <I::Item as ConvWith>::Ctx;\n-    type Output = <I::Item as ConvWith>::Output;\n+    type Output = <I::Item as ConvWith<CTX>>::Output;\n }\n \n-pub struct ConvWithIter<'a, I, Ctx: 'a> {\n+pub struct ConvWithIter<I, CTX> {\n     iter: I,\n-    ctx: &'a Ctx,\n+    ctx: CTX,\n }\n \n-impl<'a, I, Ctx> Iterator for ConvWithIter<'a, I, Ctx>\n+impl<I, CTX> Iterator for ConvWithIter<I, CTX>\n where\n     I: Iterator,\n-    I::Item: ConvWith<Ctx = Ctx>,\n+    I::Item: ConvWith<CTX>,\n+    CTX: Copy,\n {\n-    type Item = <I::Item as ConvWith>::Output;\n+    type Item = <I::Item as ConvWith<CTX>>::Output;\n \n     fn next(&mut self) -> Option<Self::Item> {\n         self.iter.next().map(|item| item.conv_with(self.ctx))\n     }\n }\n \n-pub trait TryConvWithToVec<'a>: Sized + 'a {\n-    type Ctx;\n+pub trait TryConvWithToVec<CTX>: Sized {\n     type Output;\n \n-    fn try_conv_with_to_vec(self, ctx: &'a Self::Ctx) -> Result<Vec<Self::Output>>;\n+    fn try_conv_with_to_vec(self, ctx: CTX) -> Result<Vec<Self::Output>>;\n }\n \n-impl<'a, I> TryConvWithToVec<'a> for I\n+impl<I, CTX> TryConvWithToVec<CTX> for I\n where\n-    I: Iterator + 'a,\n-    I::Item: TryConvWith,\n+    I: Iterator,\n+    I::Item: TryConvWith<CTX>,\n+    CTX: Copy,\n {\n-    type Ctx = <I::Item as TryConvWith>::Ctx;\n-    type Output = <I::Item as TryConvWith>::Output;\n+    type Output = <I::Item as TryConvWith<CTX>>::Output;\n \n-    fn try_conv_with_to_vec(self, ctx: &'a Self::Ctx) -> Result<Vec<Self::Output>> {\n+    fn try_conv_with_to_vec(self, ctx: CTX) -> Result<Vec<Self::Output>> {\n         self.map(|it| it.try_conv_with(ctx)).collect()\n     }\n }"}, {"sha": "3a559e845d30da79336143525966e85b04227270", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bdf16d1b670959f35bcbadbfd11b5c1b5a396703/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf16d1b670959f35bcbadbfd11b5c1b5a396703/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=bdf16d1b670959f35bcbadbfd11b5c1b5a396703", "patch": "@@ -138,6 +138,7 @@ pub fn handle_on_type_formatting(\n     let _p = profile(\"handle_on_type_formatting\");\n     let mut position = params.text_document_position.try_conv_with(&world)?;\n     let line_index = world.analysis().file_line_index(position.file_id)?;\n+    let line_endings = world.file_line_endings(position.file_id);\n \n     // in `ra_ide_api`, the `on_type` invariant is that\n     // `text.char_at(position) == typed_char`.\n@@ -156,7 +157,7 @@ pub fn handle_on_type_formatting(\n     // This should be a single-file edit\n     let edit = edit.source_file_edits.pop().unwrap();\n \n-    let change: Vec<TextEdit> = edit.edit.conv_with(&line_index);\n+    let change: Vec<TextEdit> = edit.edit.conv_with((&line_index, line_endings));\n     Ok(Some(change))\n }\n \n@@ -370,8 +371,9 @@ pub fn handle_completion(\n         Some(items) => items,\n     };\n     let line_index = world.analysis().file_line_index(position.file_id)?;\n+    let line_endings = world.file_line_endings(position.file_id);\n     let items: Vec<CompletionItem> =\n-        items.into_iter().map(|item| item.conv_with(&line_index)).collect();\n+        items.into_iter().map(|item| item.conv_with((&line_index, line_endings))).collect();\n \n     Ok(Some(items.into()))\n }"}, {"sha": "10f96812fbd2bc01ae7a2e660254c3809fafe316", "filename": "crates/ra_lsp_server/src/world.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bdf16d1b670959f35bcbadbfd11b5c1b5a396703/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf16d1b670959f35bcbadbfd11b5c1b5a396703/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs?ref=bdf16d1b670959f35bcbadbfd11b5c1b5a396703", "patch": "@@ -9,7 +9,7 @@ use parking_lot::RwLock;\n use ra_ide_api::{\n     Analysis, AnalysisChange, AnalysisHost, CrateGraph, FileId, LibraryData, SourceRootId,\n };\n-use ra_vfs::{RootEntry, Vfs, VfsChange, VfsFile, VfsRoot};\n+use ra_vfs::{LineEndings, RootEntry, Vfs, VfsChange, VfsFile, VfsRoot};\n use ra_vfs_glob::{Glob, RustPackageFilterBuilder};\n use relative_path::RelativePathBuf;\n \n@@ -210,6 +210,10 @@ impl WorldSnapshot {\n         Ok(url)\n     }\n \n+    pub fn file_line_endings(&self, id: FileId) -> LineEndings {\n+        self.vfs.read().file_line_endings(VfsFile(id.0))\n+    }\n+\n     pub fn path_to_uri(&self, root: SourceRootId, path: &RelativePathBuf) -> Result<Url> {\n         let base = self.vfs.read().root2path(VfsRoot(root.0));\n         let path = path.to_path(base);"}, {"sha": "152681062e52180dee327f1b1398525eac90fe7d", "filename": "crates/ra_lsp_server/tests/heavy_tests/main.rs", "status": "modified", "additions": 47, "deletions": 1, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/bdf16d1b670959f35bcbadbfd11b5c1b5a396703/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf16d1b670959f35bcbadbfd11b5c1b5a396703/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs?ref=bdf16d1b670959f35bcbadbfd11b5c1b5a396703", "patch": "@@ -208,7 +208,7 @@ pub use std::collections::HashMap;\n                 \"range\": {\n                     \"end\": {\n                         \"character\": 0,\n-                        \"line\": 6\n+                        \"line\": 7\n                     },\n                     \"start\": {\n                         \"character\": 0,\n@@ -414,3 +414,49 @@ fn main() {{}}\n     let elapsed = start.elapsed();\n     assert!(elapsed.as_millis() < 2000, \"typing enter took {:?}\", elapsed);\n }\n+\n+#[test]\n+fn preserves_dos_line_endings() {\n+    let server = Project::with_fixture(\n+        &\"\n+//- Cargo.toml\n+[package]\n+name = \\\"foo\\\"\n+version = \\\"0.0.0\\\"\n+\n+//- src/main.rs\n+/// Some Docs\\r\\nfn main() {}\n+\",\n+    )\n+    .server();\n+\n+    server.request::<OnEnter>(\n+        TextDocumentPositionParams {\n+            text_document: server.doc_id(\"src/main.rs\"),\n+            position: Position { line: 0, character: 8 },\n+        },\n+        json!({\n+          \"cursorPosition\": {\n+            \"position\": { \"line\": 1, \"character\": 4 },\n+            \"textDocument\": { \"uri\": \"file:///[..]src/main.rs\" }\n+          },\n+          \"label\": \"on enter\",\n+          \"workspaceEdit\": {\n+            \"documentChanges\": [\n+              {\n+                \"edits\": [\n+                  {\n+                    \"newText\": \"\\r\\n/// \",\n+                    \"range\": {\n+                      \"end\": { \"line\": 0, \"character\": 8 },\n+                      \"start\": { \"line\": 0, \"character\": 8 }\n+                    }\n+                  }\n+                ],\n+                \"textDocument\": { \"uri\": \"file:///[..]src/main.rs\", \"version\": null }\n+              }\n+            ]\n+          }\n+        }),\n+    );\n+}"}, {"sha": "0ead277b2f8abde205d25e3173c9baca4b98228f", "filename": "crates/ra_syntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdf16d1b670959f35bcbadbfd11b5c1b5a396703/crates%2Fra_syntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bdf16d1b670959f35bcbadbfd11b5c1b5a396703/crates%2Fra_syntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2FCargo.toml?ref=bdf16d1b670959f35bcbadbfd11b5c1b5a396703", "patch": "@@ -10,7 +10,7 @@ repository = \"https://github.com/rust-analyzer/rust-analyzer\"\n [dependencies]\n itertools = \"0.8.0\"\n rowan = \"0.6.1\"\n-ra_rustc_lexer = { version = \"0.1.0-pre.2\" }\n+ra_rustc_lexer = { version = \"0.1.0-pre.3\", features = [\"unicode-xid\"] }\n \n # ideally, `serde` should be enabled by `ra_lsp_server`, but we enable it here\n # to reduce number of compilations"}, {"sha": "bdb01d40b387b5dd11347e51fa48ad7f482e8e98", "filename": "crates/ra_syntax/src/parsing/lexer.rs", "status": "modified", "additions": 48, "deletions": 88, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/bdf16d1b670959f35bcbadbfd11b5c1b5a396703/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf16d1b670959f35bcbadbfd11b5c1b5a396703/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs?ref=bdf16d1b670959f35bcbadbfd11b5c1b5a396703", "patch": "@@ -12,16 +12,16 @@ pub struct Token {\n     pub len: TextUnit,\n }\n \n-fn match_literal_kind(kind: ra_rustc_lexer::LiteralKind) -> SyntaxKind {\n+fn match_literal_kind(kind: rustc_lexer::LiteralKind) -> SyntaxKind {\n     match kind {\n-        ra_rustc_lexer::LiteralKind::Int { .. } => INT_NUMBER,\n-        ra_rustc_lexer::LiteralKind::Float { .. } => FLOAT_NUMBER,\n-        ra_rustc_lexer::LiteralKind::Char { .. } => CHAR,\n-        ra_rustc_lexer::LiteralKind::Byte { .. } => BYTE,\n-        ra_rustc_lexer::LiteralKind::Str { .. } => STRING,\n-        ra_rustc_lexer::LiteralKind::ByteStr { .. } => BYTE_STRING,\n-        ra_rustc_lexer::LiteralKind::RawStr { .. } => RAW_STRING,\n-        ra_rustc_lexer::LiteralKind::RawByteStr { .. } => RAW_BYTE_STRING,\n+        rustc_lexer::LiteralKind::Int { .. } => INT_NUMBER,\n+        rustc_lexer::LiteralKind::Float { .. } => FLOAT_NUMBER,\n+        rustc_lexer::LiteralKind::Char { .. } => CHAR,\n+        rustc_lexer::LiteralKind::Byte { .. } => BYTE,\n+        rustc_lexer::LiteralKind::Str { .. } => STRING,\n+        rustc_lexer::LiteralKind::ByteStr { .. } => BYTE_STRING,\n+        rustc_lexer::LiteralKind::RawStr { .. } => RAW_STRING,\n+        rustc_lexer::LiteralKind::RawByteStr { .. } => RAW_BYTE_STRING,\n     }\n }\n \n@@ -32,95 +32,55 @@ pub fn tokenize(text: &str) -> Vec<Token> {\n     }\n     let mut text = text;\n     let mut acc = Vec::new();\n-    if let Some(len) = ra_rustc_lexer::strip_shebang(text) {\n+    if let Some(len) = rustc_lexer::strip_shebang(text) {\n         acc.push(Token { kind: SHEBANG, len: TextUnit::from_usize(len) });\n         text = &text[len..];\n     }\n     while !text.is_empty() {\n-        let rustc_token = ra_rustc_lexer::first_token(text);\n-        macro_rules! decompose {\n-            ($t1:expr, $t2:expr) => {{\n-                acc.push(Token { kind: $t1, len: 1.into() });\n-                acc.push(Token { kind: $t2, len: 1.into() });\n-                text = &text[2..];\n-                continue;\n-            }};\n-            ($t1:expr, $t2:expr, $t3:expr) => {{\n-                acc.push(Token { kind: $t1, len: 1.into() });\n-                acc.push(Token { kind: $t2, len: 1.into() });\n-                acc.push(Token { kind: $t3, len: 1.into() });\n-                text = &text[3..];\n-                continue;\n-            }};\n-        }\n+        let rustc_token = rustc_lexer::first_token(text);\n         let kind = match rustc_token.kind {\n-            ra_rustc_lexer::TokenKind::LineComment => COMMENT,\n-            ra_rustc_lexer::TokenKind::BlockComment { .. } => COMMENT,\n-            ra_rustc_lexer::TokenKind::Whitespace => WHITESPACE,\n-            ra_rustc_lexer::TokenKind::Ident => {\n+            rustc_lexer::TokenKind::LineComment => COMMENT,\n+            rustc_lexer::TokenKind::BlockComment { .. } => COMMENT,\n+            rustc_lexer::TokenKind::Whitespace => WHITESPACE,\n+            rustc_lexer::TokenKind::Ident => {\n                 let token_text = &text[..rustc_token.len];\n                 if token_text == \"_\" {\n                     UNDERSCORE\n                 } else {\n                     SyntaxKind::from_keyword(&text[..rustc_token.len]).unwrap_or(IDENT)\n                 }\n             }\n-            ra_rustc_lexer::TokenKind::RawIdent => IDENT,\n-            ra_rustc_lexer::TokenKind::Literal { kind, .. } => match_literal_kind(kind),\n-            ra_rustc_lexer::TokenKind::Lifetime { .. } => LIFETIME,\n-            ra_rustc_lexer::TokenKind::Semi => SEMI,\n-            ra_rustc_lexer::TokenKind::Comma => COMMA,\n-            ra_rustc_lexer::TokenKind::DotDotDot => decompose!(DOT, DOT, DOT),\n-            ra_rustc_lexer::TokenKind::DotDotEq => decompose!(DOT, DOT, EQ),\n-            ra_rustc_lexer::TokenKind::DotDot => decompose!(DOT, DOT),\n-            ra_rustc_lexer::TokenKind::Dot => DOT,\n-            ra_rustc_lexer::TokenKind::OpenParen => L_PAREN,\n-            ra_rustc_lexer::TokenKind::CloseParen => R_PAREN,\n-            ra_rustc_lexer::TokenKind::OpenBrace => L_CURLY,\n-            ra_rustc_lexer::TokenKind::CloseBrace => R_CURLY,\n-            ra_rustc_lexer::TokenKind::OpenBracket => L_BRACK,\n-            ra_rustc_lexer::TokenKind::CloseBracket => R_BRACK,\n-            ra_rustc_lexer::TokenKind::At => AT,\n-            ra_rustc_lexer::TokenKind::Pound => POUND,\n-            ra_rustc_lexer::TokenKind::Tilde => TILDE,\n-            ra_rustc_lexer::TokenKind::Question => QUESTION,\n-            ra_rustc_lexer::TokenKind::ColonColon => decompose!(COLON, COLON),\n-            ra_rustc_lexer::TokenKind::Colon => COLON,\n-            ra_rustc_lexer::TokenKind::Dollar => DOLLAR,\n-            ra_rustc_lexer::TokenKind::EqEq => decompose!(EQ, EQ),\n-            ra_rustc_lexer::TokenKind::Eq => EQ,\n-            ra_rustc_lexer::TokenKind::FatArrow => decompose!(EQ, R_ANGLE),\n-            ra_rustc_lexer::TokenKind::Ne => decompose!(EXCL, EQ),\n-            ra_rustc_lexer::TokenKind::Not => EXCL,\n-            ra_rustc_lexer::TokenKind::Le => decompose!(L_ANGLE, EQ),\n-            ra_rustc_lexer::TokenKind::LArrow => decompose!(COLON, MINUS),\n-            ra_rustc_lexer::TokenKind::Lt => L_ANGLE,\n-            ra_rustc_lexer::TokenKind::ShlEq => decompose!(L_ANGLE, L_ANGLE, EQ),\n-            ra_rustc_lexer::TokenKind::Shl => decompose!(L_ANGLE, L_ANGLE),\n-            ra_rustc_lexer::TokenKind::Ge => decompose!(R_ANGLE, EQ),\n-            ra_rustc_lexer::TokenKind::Gt => R_ANGLE,\n-            ra_rustc_lexer::TokenKind::ShrEq => decompose!(R_ANGLE, R_ANGLE, EQ),\n-            ra_rustc_lexer::TokenKind::Shr => decompose!(R_ANGLE, R_ANGLE),\n-            ra_rustc_lexer::TokenKind::RArrow => decompose!(MINUS, R_ANGLE),\n-            ra_rustc_lexer::TokenKind::Minus => MINUS,\n-            ra_rustc_lexer::TokenKind::MinusEq => decompose!(MINUS, EQ),\n-            ra_rustc_lexer::TokenKind::And => AMP,\n-            ra_rustc_lexer::TokenKind::AndAnd => decompose!(AMP, AMP),\n-            ra_rustc_lexer::TokenKind::AndEq => decompose!(AMP, EQ),\n-            ra_rustc_lexer::TokenKind::Or => PIPE,\n-            ra_rustc_lexer::TokenKind::OrOr => decompose!(PIPE, PIPE),\n-            ra_rustc_lexer::TokenKind::OrEq => decompose!(PIPE, EQ),\n-            ra_rustc_lexer::TokenKind::PlusEq => decompose!(PLUS, EQ),\n-            ra_rustc_lexer::TokenKind::Plus => PLUS,\n-            ra_rustc_lexer::TokenKind::StarEq => decompose!(STAR, EQ),\n-            ra_rustc_lexer::TokenKind::Star => STAR,\n-            ra_rustc_lexer::TokenKind::SlashEq => decompose!(SLASH, EQ),\n-            ra_rustc_lexer::TokenKind::Slash => SLASH,\n-            ra_rustc_lexer::TokenKind::CaretEq => decompose!(CARET, EQ),\n-            ra_rustc_lexer::TokenKind::Caret => CARET,\n-            ra_rustc_lexer::TokenKind::PercentEq => decompose!(PERCENT, EQ),\n-            ra_rustc_lexer::TokenKind::Percent => PERCENT,\n-            ra_rustc_lexer::TokenKind::Unknown => ERROR,\n+            rustc_lexer::TokenKind::RawIdent => IDENT,\n+            rustc_lexer::TokenKind::Literal { kind, .. } => match_literal_kind(kind),\n+            rustc_lexer::TokenKind::Lifetime { .. } => LIFETIME,\n+            rustc_lexer::TokenKind::Semi => SEMI,\n+            rustc_lexer::TokenKind::Comma => COMMA,\n+            rustc_lexer::TokenKind::Dot => DOT,\n+            rustc_lexer::TokenKind::OpenParen => L_PAREN,\n+            rustc_lexer::TokenKind::CloseParen => R_PAREN,\n+            rustc_lexer::TokenKind::OpenBrace => L_CURLY,\n+            rustc_lexer::TokenKind::CloseBrace => R_CURLY,\n+            rustc_lexer::TokenKind::OpenBracket => L_BRACK,\n+            rustc_lexer::TokenKind::CloseBracket => R_BRACK,\n+            rustc_lexer::TokenKind::At => AT,\n+            rustc_lexer::TokenKind::Pound => POUND,\n+            rustc_lexer::TokenKind::Tilde => TILDE,\n+            rustc_lexer::TokenKind::Question => QUESTION,\n+            rustc_lexer::TokenKind::Colon => COLON,\n+            rustc_lexer::TokenKind::Dollar => DOLLAR,\n+            rustc_lexer::TokenKind::Eq => EQ,\n+            rustc_lexer::TokenKind::Not => EXCL,\n+            rustc_lexer::TokenKind::Lt => L_ANGLE,\n+            rustc_lexer::TokenKind::Gt => R_ANGLE,\n+            rustc_lexer::TokenKind::Minus => MINUS,\n+            rustc_lexer::TokenKind::And => AMP,\n+            rustc_lexer::TokenKind::Or => PIPE,\n+            rustc_lexer::TokenKind::Plus => PLUS,\n+            rustc_lexer::TokenKind::Star => STAR,\n+            rustc_lexer::TokenKind::Slash => SLASH,\n+            rustc_lexer::TokenKind::Caret => CARET,\n+            rustc_lexer::TokenKind::Percent => PERCENT,\n+            rustc_lexer::TokenKind::Unknown => ERROR,\n         };\n         let token = Token { kind, len: TextUnit::from_usize(rustc_token.len) };\n         acc.push(token);\n@@ -130,12 +90,12 @@ pub fn tokenize(text: &str) -> Vec<Token> {\n }\n \n pub fn classify_literal(text: &str) -> Option<Token> {\n-    let t = ra_rustc_lexer::first_token(text);\n+    let t = rustc_lexer::first_token(text);\n     if t.len != text.len() {\n         return None;\n     }\n     let kind = match t.kind {\n-        ra_rustc_lexer::TokenKind::Literal { kind, .. } => match_literal_kind(kind),\n+        rustc_lexer::TokenKind::Literal { kind, .. } => match_literal_kind(kind),\n         _ => return None,\n     };\n     Some(Token { kind, len: TextUnit::from_usize(t.len) })"}, {"sha": "a8c789e0ca2e0181077771eb82068e153798da45", "filename": "crates/ra_syntax/src/validation.rs", "status": "modified", "additions": 26, "deletions": 28, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/bdf16d1b670959f35bcbadbfd11b5c1b5a396703/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf16d1b670959f35bcbadbfd11b5c1b5a396703/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs?ref=bdf16d1b670959f35bcbadbfd11b5c1b5a396703", "patch": "@@ -1,6 +1,6 @@\n mod block;\n \n-use ra_rustc_lexer::unescape;\n+use rustc_lexer::unescape;\n \n use crate::{\n     algo::visit::{visitor_ctx, VisitorCtx},\n@@ -32,64 +32,62 @@ pub enum EscapeError {\n     NonAsciiCharInByte,\n }\n \n-impl From<ra_rustc_lexer::unescape::EscapeError> for EscapeError {\n-    fn from(err: ra_rustc_lexer::unescape::EscapeError) -> Self {\n+impl From<rustc_lexer::unescape::EscapeError> for EscapeError {\n+    fn from(err: rustc_lexer::unescape::EscapeError) -> Self {\n         match err {\n-            ra_rustc_lexer::unescape::EscapeError::ZeroChars => EscapeError::ZeroChars,\n-            ra_rustc_lexer::unescape::EscapeError::MoreThanOneChar => EscapeError::MoreThanOneChar,\n-            ra_rustc_lexer::unescape::EscapeError::LoneSlash => EscapeError::LoneSlash,\n-            ra_rustc_lexer::unescape::EscapeError::InvalidEscape => EscapeError::InvalidEscape,\n-            ra_rustc_lexer::unescape::EscapeError::BareCarriageReturn\n-            | ra_rustc_lexer::unescape::EscapeError::BareCarriageReturnInRawString => {\n+            rustc_lexer::unescape::EscapeError::ZeroChars => EscapeError::ZeroChars,\n+            rustc_lexer::unescape::EscapeError::MoreThanOneChar => EscapeError::MoreThanOneChar,\n+            rustc_lexer::unescape::EscapeError::LoneSlash => EscapeError::LoneSlash,\n+            rustc_lexer::unescape::EscapeError::InvalidEscape => EscapeError::InvalidEscape,\n+            rustc_lexer::unescape::EscapeError::BareCarriageReturn\n+            | rustc_lexer::unescape::EscapeError::BareCarriageReturnInRawString => {\n                 EscapeError::BareCarriageReturn\n             }\n-            ra_rustc_lexer::unescape::EscapeError::EscapeOnlyChar => EscapeError::EscapeOnlyChar,\n-            ra_rustc_lexer::unescape::EscapeError::TooShortHexEscape => {\n-                EscapeError::TooShortHexEscape\n-            }\n-            ra_rustc_lexer::unescape::EscapeError::InvalidCharInHexEscape => {\n+            rustc_lexer::unescape::EscapeError::EscapeOnlyChar => EscapeError::EscapeOnlyChar,\n+            rustc_lexer::unescape::EscapeError::TooShortHexEscape => EscapeError::TooShortHexEscape,\n+            rustc_lexer::unescape::EscapeError::InvalidCharInHexEscape => {\n                 EscapeError::InvalidCharInHexEscape\n             }\n-            ra_rustc_lexer::unescape::EscapeError::OutOfRangeHexEscape => {\n+            rustc_lexer::unescape::EscapeError::OutOfRangeHexEscape => {\n                 EscapeError::OutOfRangeHexEscape\n             }\n-            ra_rustc_lexer::unescape::EscapeError::NoBraceInUnicodeEscape => {\n+            rustc_lexer::unescape::EscapeError::NoBraceInUnicodeEscape => {\n                 EscapeError::NoBraceInUnicodeEscape\n             }\n-            ra_rustc_lexer::unescape::EscapeError::InvalidCharInUnicodeEscape => {\n+            rustc_lexer::unescape::EscapeError::InvalidCharInUnicodeEscape => {\n                 EscapeError::InvalidCharInUnicodeEscape\n             }\n-            ra_rustc_lexer::unescape::EscapeError::EmptyUnicodeEscape => {\n+            rustc_lexer::unescape::EscapeError::EmptyUnicodeEscape => {\n                 EscapeError::EmptyUnicodeEscape\n             }\n-            ra_rustc_lexer::unescape::EscapeError::UnclosedUnicodeEscape => {\n+            rustc_lexer::unescape::EscapeError::UnclosedUnicodeEscape => {\n                 EscapeError::UnclosedUnicodeEscape\n             }\n-            ra_rustc_lexer::unescape::EscapeError::LeadingUnderscoreUnicodeEscape => {\n+            rustc_lexer::unescape::EscapeError::LeadingUnderscoreUnicodeEscape => {\n                 EscapeError::LeadingUnderscoreUnicodeEscape\n             }\n-            ra_rustc_lexer::unescape::EscapeError::OverlongUnicodeEscape => {\n+            rustc_lexer::unescape::EscapeError::OverlongUnicodeEscape => {\n                 EscapeError::OverlongUnicodeEscape\n             }\n-            ra_rustc_lexer::unescape::EscapeError::LoneSurrogateUnicodeEscape => {\n+            rustc_lexer::unescape::EscapeError::LoneSurrogateUnicodeEscape => {\n                 EscapeError::LoneSurrogateUnicodeEscape\n             }\n-            ra_rustc_lexer::unescape::EscapeError::OutOfRangeUnicodeEscape => {\n+            rustc_lexer::unescape::EscapeError::OutOfRangeUnicodeEscape => {\n                 EscapeError::OutOfRangeUnicodeEscape\n             }\n-            ra_rustc_lexer::unescape::EscapeError::UnicodeEscapeInByte => {\n+            rustc_lexer::unescape::EscapeError::UnicodeEscapeInByte => {\n                 EscapeError::UnicodeEscapeInByte\n             }\n-            ra_rustc_lexer::unescape::EscapeError::NonAsciiCharInByte\n-            | ra_rustc_lexer::unescape::EscapeError::NonAsciiCharInByteString => {\n+            rustc_lexer::unescape::EscapeError::NonAsciiCharInByte\n+            | rustc_lexer::unescape::EscapeError::NonAsciiCharInByteString => {\n                 EscapeError::NonAsciiCharInByte\n             }\n         }\n     }\n }\n \n-impl From<ra_rustc_lexer::unescape::EscapeError> for SyntaxErrorKind {\n-    fn from(err: ra_rustc_lexer::unescape::EscapeError) -> Self {\n+impl From<rustc_lexer::unescape::EscapeError> for SyntaxErrorKind {\n+    fn from(err: rustc_lexer::unescape::EscapeError) -> Self {\n         SyntaxErrorKind::EscapeError(err.into())\n     }\n }"}, {"sha": "816d01f09ef3dae729c69e9f2d88c6d160ff8026", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bdf16d1b670959f35bcbadbfd11b5c1b5a396703/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf16d1b670959f35bcbadbfd11b5c1b5a396703/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=bdf16d1b670959f35bcbadbfd11b5c1b5a396703", "patch": "@@ -134,21 +134,25 @@ pub fn parse_fixture(fixture: &str) -> Vec<FixtureEntry> {\n             }\n         };\n     };\n+\n     let margin = fixture\n         .lines()\n         .filter(|it| it.trim_start().starts_with(\"//-\"))\n         .map(|it| it.len() - it.trim_start().len())\n         .next()\n         .expect(\"empty fixture\");\n-    let lines = fixture.lines().filter_map(|line| {\n-        if line.len() >= margin {\n-            assert!(line[..margin].trim().is_empty());\n-            Some(&line[margin..])\n-        } else {\n-            assert!(line.trim().is_empty());\n-            None\n-        }\n-    });\n+\n+    let lines = fixture\n+        .split('\\n') // don't use `.lines` to not drop `\\r\\n`\n+        .filter_map(|line| {\n+            if line.len() >= margin {\n+                assert!(line[..margin].trim().is_empty());\n+                Some(&line[margin..])\n+            } else {\n+                assert!(line.trim().is_empty());\n+                None\n+            }\n+        });\n \n     for line in lines {\n         if line.starts_with(\"//-\") {"}]}