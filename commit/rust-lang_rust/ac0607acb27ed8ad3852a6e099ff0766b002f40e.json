{"sha": "ac0607acb27ed8ad3852a6e099ff0766b002f40e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjMDYwN2FjYjI3ZWQ4YWQzODUyYTZlMDk5ZmYwNzY2YjAwMmY0MGU=", "commit": {"author": {"name": "Valerii Hiora", "email": "valerii.hiora@gmail.com", "date": "2015-01-05T09:54:41Z"}, "committer": {"name": "Valerii Hiora", "email": "valerii.hiora@gmail.com", "date": "2015-01-09T16:23:42Z"}, "message": "iOS: fixed test build\n\nNow it is possible to run tests on a jailbroken device", "tree": {"sha": "6b395d116c435bfe1850988697c22e5315fef7cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b395d116c435bfe1850988697c22e5315fef7cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac0607acb27ed8ad3852a6e099ff0766b002f40e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac0607acb27ed8ad3852a6e099ff0766b002f40e", "html_url": "https://github.com/rust-lang/rust/commit/ac0607acb27ed8ad3852a6e099ff0766b002f40e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac0607acb27ed8ad3852a6e099ff0766b002f40e/comments", "author": {"login": "vhbit", "id": 140199, "node_id": "MDQ6VXNlcjE0MDE5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/140199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vhbit", "html_url": "https://github.com/vhbit", "followers_url": "https://api.github.com/users/vhbit/followers", "following_url": "https://api.github.com/users/vhbit/following{/other_user}", "gists_url": "https://api.github.com/users/vhbit/gists{/gist_id}", "starred_url": "https://api.github.com/users/vhbit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vhbit/subscriptions", "organizations_url": "https://api.github.com/users/vhbit/orgs", "repos_url": "https://api.github.com/users/vhbit/repos", "events_url": "https://api.github.com/users/vhbit/events{/privacy}", "received_events_url": "https://api.github.com/users/vhbit/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vhbit", "id": 140199, "node_id": "MDQ6VXNlcjE0MDE5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/140199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vhbit", "html_url": "https://github.com/vhbit", "followers_url": "https://api.github.com/users/vhbit/followers", "following_url": "https://api.github.com/users/vhbit/following{/other_user}", "gists_url": "https://api.github.com/users/vhbit/gists{/gist_id}", "starred_url": "https://api.github.com/users/vhbit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vhbit/subscriptions", "organizations_url": "https://api.github.com/users/vhbit/orgs", "repos_url": "https://api.github.com/users/vhbit/repos", "events_url": "https://api.github.com/users/vhbit/events{/privacy}", "received_events_url": "https://api.github.com/users/vhbit/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fb91dc1c2a34e5cbe384493616254253c821e41", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fb91dc1c2a34e5cbe384493616254253c821e41", "html_url": "https://github.com/rust-lang/rust/commit/1fb91dc1c2a34e5cbe384493616254253c821e41"}], "stats": {"total": 29, "additions": 21, "deletions": 8}, "files": [{"sha": "67c14dc2dc12de381fc4f380070446f95e5c855f", "filename": "src/libstd/io/test.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ac0607acb27ed8ad3852a6e099ff0766b002f40e/src%2Flibstd%2Fio%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac0607acb27ed8ad3852a6e099ff0766b002f40e/src%2Flibstd%2Fio%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ftest.rs?ref=ac0607acb27ed8ad3852a6e099ff0766b002f40e", "patch": "@@ -23,23 +23,36 @@ pub fn next_test_port() -> u16 {\n     base_port() + NEXT_OFFSET.fetch_add(1, Ordering::Relaxed) as u16\n }\n \n-/// Get a temporary path which could be the location of a unix socket\n-pub fn next_test_unix() -> Path {\n+// iOS has a pretty long tmpdir path which causes pipe creation\n+// to like: invalid argument: path must be smaller than SUN_LEN\n+fn next_test_unix_socket() -> String {\n     static COUNT: AtomicUint = ATOMIC_UINT_INIT;\n     // base port and pid are an attempt to be unique between multiple\n     // test-runners of different configurations running on one\n     // buildbot, the count is to be unique within this executable.\n-    let string = format!(\"rust-test-unix-path-{}-{}-{}\",\n-                         base_port(),\n-                         unsafe {libc::getpid()},\n-                         COUNT.fetch_add(1, Ordering::Relaxed));\n+    format!(\"rust-test-unix-path-{}-{}-{}\",\n+            base_port(),\n+            unsafe {libc::getpid()},\n+            COUNT.fetch_add(1, Ordering::Relaxed))\n+}\n+\n+/// Get a temporary path which could be the location of a unix socket\n+#[cfg(not(target_os = \"ios\"))]\n+pub fn next_test_unix() -> Path {\n+    let string = next_test_unix_socket();\n     if cfg!(unix) {\n         os::tmpdir().join(string)\n     } else {\n         Path::new(format!(\"{}{}\", r\"\\\\.\\pipe\\\", string))\n     }\n }\n \n+/// Get a temporary path which could be the location of a unix socket\n+#[cfg(target_os = \"ios\")]\n+pub fn next_test_unix() -> Path {\n+    Path::new(format!(\"/var/tmp/{}\", next_test_unix_socket()))\n+}\n+\n /// Get a unique IPv4 localhost:port pair starting at 9600\n pub fn next_test_ip4() -> SocketAddr {\n     SocketAddr { ip: Ipv4Addr(127, 0, 0, 1), port: next_test_port() }\n@@ -99,7 +112,7 @@ pub fn raise_fd_limit() {\n /// multithreaded scheduler testing, depending on the number of cores available.\n ///\n /// This fixes issue #7772.\n-#[cfg(target_os=\"macos\")]\n+#[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n #[allow(non_camel_case_types)]\n mod darwin_fd_limit {\n     use libc;\n@@ -156,7 +169,7 @@ mod darwin_fd_limit {\n     }\n }\n \n-#[cfg(not(target_os=\"macos\"))]\n+#[cfg(not(any(target_os = \"macos\", target_os = \"ios\")))]\n mod darwin_fd_limit {\n     pub unsafe fn raise_fd_limit() {}\n }"}]}