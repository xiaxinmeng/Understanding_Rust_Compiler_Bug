{"sha": "30b97aa410af0a2e1405e7dde9f9f0f28ae14f60", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwYjk3YWE0MTBhZjBhMmUxNDA1ZTdkZGU5ZjlmMGYyOGFlMTRmNjA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-11-17T20:50:25Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-11-18T15:13:30Z"}, "message": "add test for adding a field", "tree": {"sha": "c649fe7b7ab981aec3b955ae5009feaf659197fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c649fe7b7ab981aec3b955ae5009feaf659197fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30b97aa410af0a2e1405e7dde9f9f0f28ae14f60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30b97aa410af0a2e1405e7dde9f9f0f28ae14f60", "html_url": "https://github.com/rust-lang/rust/commit/30b97aa410af0a2e1405e7dde9f9f0f28ae14f60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30b97aa410af0a2e1405e7dde9f9f0f28ae14f60/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70a145914348b4f6c5fbf1be9f2e1db082bd0222", "url": "https://api.github.com/repos/rust-lang/rust/commits/70a145914348b4f6c5fbf1be9f2e1db082bd0222", "html_url": "https://github.com/rust-lang/rust/commit/70a145914348b4f6c5fbf1be9f2e1db082bd0222"}], "stats": {"total": 142, "additions": 142, "deletions": 0}, "files": [{"sha": "0858a55ed32a5827aa822135f91afa6592242470", "filename": "src/test/incremental/change_add_field/struct_point.rs", "status": "added", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/30b97aa410af0a2e1405e7dde9f9f0f28ae14f60/src%2Ftest%2Fincremental%2Fchange_add_field%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30b97aa410af0a2e1405e7dde9f9f0f28ae14f60/src%2Ftest%2Fincremental%2Fchange_add_field%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_add_field%2Fstruct_point.rs?ref=30b97aa410af0a2e1405e7dde9f9f0f28ae14f60", "patch": "@@ -0,0 +1,142 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test where we change a type definition by adding a field.  Fns with\n+// this type in their signature are recompiled, as are their callers.\n+// Fns with that type used only in their body are also recompiled, but\n+// their callers are not.\n+\n+// revisions:rpass1 rpass2\n+// compile-flags: -Z query-dep-graph\n+\n+#![feature(rustc_attrs)]\n+#![feature(stmt_expr_attributes)]\n+#![feature(static_in_const)]\n+#![allow(dead_code)]\n+\n+// These are expected to require translation.\n+#![rustc_partition_translated(module=\"struct_point-point\", cfg=\"rpass2\")]\n+#![rustc_partition_translated(module=\"struct_point-fn_with_type_in_sig\", cfg=\"rpass2\")]\n+#![rustc_partition_translated(module=\"struct_point-call_fn_with_type_in_sig\", cfg=\"rpass2\")]\n+#![rustc_partition_translated(module=\"struct_point-fn_with_type_in_body\", cfg=\"rpass2\")]\n+#![rustc_partition_translated(module=\"struct_point-fn_make_struct\", cfg=\"rpass2\")]\n+#![rustc_partition_translated(module=\"struct_point-fn_read_field\", cfg=\"rpass2\")]\n+#![rustc_partition_translated(module=\"struct_point-fn_write_field\", cfg=\"rpass2\")]\n+\n+#![rustc_partition_reused(module=\"struct_point-call_fn_with_type_in_body\", cfg=\"rpass2\")]\n+\n+mod point {\n+    #[cfg(rpass1)]\n+    pub struct Point {\n+        pub x: f32,\n+        pub y: f32,\n+    }\n+\n+    #[cfg(rpass2)]\n+    pub struct Point {\n+        pub x: f32,\n+        pub y: f32,\n+        pub z: f32,\n+    }\n+\n+    impl Point {\n+        pub fn origin() -> Point {\n+            #[cfg(rpass1)]\n+            return Point { x: 0.0, y: 0.0 };\n+\n+            #[cfg(rpass2)]\n+            return Point { x: 0.0, y: 0.0, z: 0.0 };\n+        }\n+\n+        pub fn total(&self) -> f32 {\n+            #[cfg(rpass1)]\n+            return self.x + self.y;\n+\n+            #[cfg(rpass2)]\n+            return self.x + self.y + self.z;\n+        }\n+\n+        pub fn x(&self) -> f32 {\n+            self.x\n+        }\n+    }\n+}\n+\n+/// A fn item that calls (public) methods on `Point` from the same impl which changed\n+mod fn_with_type_in_sig {\n+    use point::Point;\n+\n+    #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    pub fn boop(p: Option<&Point>) -> f32 {\n+        p.map(|p| p.total()).unwrap_or(0.0)\n+    }\n+}\n+\n+mod call_fn_with_type_in_sig {\n+    use fn_with_type_in_sig;\n+\n+    #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    pub fn bip() -> f32 {\n+        fn_with_type_in_sig::boop(None)\n+    }\n+}\n+\n+/// A fn item that calls (public) methods on `Point` from the same impl which changed\n+mod fn_with_type_in_body {\n+    use point::Point;\n+\n+    #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    pub fn boop() -> f32 {\n+        Point::origin().total()\n+    }\n+}\n+\n+/// A fn item that calls (public) methods on `Point` from the same impl which changed\n+mod call_fn_with_type_in_body {\n+    use fn_with_type_in_body;\n+\n+    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    pub fn bip() -> f32 {\n+        fn_with_type_in_body::boop()\n+    }\n+}\n+\n+/// A fn item that makes an instance of `Point` but does not invoke methods\n+mod fn_make_struct {\n+    use point::Point;\n+\n+    #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    pub fn make_origin(p: Point) -> Point {\n+        Point { ..p }\n+    }\n+}\n+\n+/// A fn item that reads fields from `Point` but does not invoke methods\n+mod fn_read_field {\n+    use point::Point;\n+\n+    #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    pub fn get_x(p: Point) -> f32 {\n+        p.x\n+    }\n+}\n+\n+/// A fn item that writes to a field of `Point` but does not invoke methods\n+mod fn_write_field {\n+    use point::Point;\n+\n+    #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    pub fn inc_x(p: &mut Point) {\n+        p.x += 1.0;\n+    }\n+}\n+\n+fn main() {\n+}"}]}