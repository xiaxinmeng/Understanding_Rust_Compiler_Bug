{"sha": "e3148dc7c48e1c96b05c85f57394308a6e46c1ed", "node_id": "C_kwDOAAsO6NoAKGUzMTQ4ZGM3YzQ4ZTFjOTZiMDVjODVmNTczOTQzMDhhNmU0NmMxZWQ", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2022-08-26T12:08:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-26T12:08:43Z"}, "message": "Rollup merge of #95005 - ssomers:btree_static_assert, r=thomcc\n\nBTree: evaluate static type-related check at compile time\n\n`assert`s like the ones replaced here would only go off when you run the right test cases, if the code were ever incorrectly changed such that rhey would trigger. But [inspired on a nice forum question](https://users.rust-lang.org/t/compile-time-const-generic-parameter-check/69202), they can be checked at compile time.", "tree": {"sha": "919f2245d6ed3c5ac0570e18be950643dee707a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/919f2245d6ed3c5ac0570e18be950643dee707a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3148dc7c48e1c96b05c85f57394308a6e46c1ed", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjCLfLCRBK7hj4Ov3rIwAAyXAIAEvtCFWQy5g1Hk9G0KO00MIP\nSzHSK5UHzrCVhNhzjvomRxlgeupGHmf2QIywx1gPE4hnJLRWoxLce2pXj/7lBfoT\nr+rW27AWjoakNce1xwUZGNhVU++AlIbJRLp88lABO6/p45FMemY5sbmR/pXcP29k\nF/T0t24ml81qJH6yb4+RBgRZuLafT/wY9ZZvJ58F3xmkIRgqQDT+5E67/VUztpxY\nSgcj9ES9f0Btd2s37w7kM4WDBdDSShR4KSq9qpuRu6qrEteVyFG2UV+03SIqpZIy\n7aYqp/Wd0ax9OvR78uA6GHiP8H3roe1hA2RyJDM6dRjOODibbOexeGvjm+qOXR8=\n=Z4Wb\n-----END PGP SIGNATURE-----\n", "payload": "tree 919f2245d6ed3c5ac0570e18be950643dee707a0\nparent 983f4daddf238d114c4adc4751c5528fc6695a5a\nparent ea4e5c27a9fe52d175f6cdf5af4d2079660a5540\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1661515723 +0200\ncommitter GitHub <noreply@github.com> 1661515723 +0200\n\nRollup merge of #95005 - ssomers:btree_static_assert, r=thomcc\n\nBTree: evaluate static type-related check at compile time\n\n`assert`s like the ones replaced here would only go off when you run the right test cases, if the code were ever incorrectly changed such that rhey would trigger. But [inspired on a nice forum question](https://users.rust-lang.org/t/compile-time-const-generic-parameter-check/69202), they can be checked at compile time.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3148dc7c48e1c96b05c85f57394308a6e46c1ed", "html_url": "https://github.com/rust-lang/rust/commit/e3148dc7c48e1c96b05c85f57394308a6e46c1ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3148dc7c48e1c96b05c85f57394308a6e46c1ed/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "983f4daddf238d114c4adc4751c5528fc6695a5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/983f4daddf238d114c4adc4751c5528fc6695a5a", "html_url": "https://github.com/rust-lang/rust/commit/983f4daddf238d114c4adc4751c5528fc6695a5a"}, {"sha": "ea4e5c27a9fe52d175f6cdf5af4d2079660a5540", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea4e5c27a9fe52d175f6cdf5af4d2079660a5540", "html_url": "https://github.com/rust-lang/rust/commit/ea4e5c27a9fe52d175f6cdf5af4d2079660a5540"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "f1d2d3b30d9e244c3771859365d871e1f2a0b5b2", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e3148dc7c48e1c96b05c85f57394308a6e46c1ed/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3148dc7c48e1c96b05c85f57394308a6e46c1ed/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=e3148dc7c48e1c96b05c85f57394308a6e46c1ed", "patch": "@@ -318,7 +318,7 @@ impl<BorrowType: marker::BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type>\n     pub fn ascend(\n         self,\n     ) -> Result<Handle<NodeRef<BorrowType, K, V, marker::Internal>, marker::Edge>, Self> {\n-        assert!(BorrowType::PERMITS_TRAVERSAL);\n+        let _ = BorrowType::TRAVERSAL_PERMIT;\n         // We need to use raw pointers to nodes because, if BorrowType is marker::ValMut,\n         // there might be outstanding mutable references to values that we must not invalidate.\n         let leaf_ptr: *const _ = Self::as_leaf_ptr(&self);\n@@ -1003,7 +1003,7 @@ impl<BorrowType: marker::BorrowType, K, V>\n     /// `edge.descend().ascend().unwrap()` and `node.ascend().unwrap().descend()` should\n     /// both, upon success, do nothing.\n     pub fn descend(self) -> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {\n-        assert!(BorrowType::PERMITS_TRAVERSAL);\n+        let _ = BorrowType::TRAVERSAL_PERMIT;\n         // We need to use raw pointers to nodes because, if BorrowType is\n         // marker::ValMut, there might be outstanding mutable references to\n         // values that we must not invalidate. There's no worry accessing the\n@@ -1666,15 +1666,17 @@ pub mod marker {\n     pub struct ValMut<'a>(PhantomData<&'a mut ()>);\n \n     pub trait BorrowType {\n-        // Whether node references of this borrow type allow traversing\n-        // to other nodes in the tree.\n-        const PERMITS_TRAVERSAL: bool = true;\n+        // If node references of this borrow type allow traversing to other\n+        // nodes in the tree, this constant can be evaluated. Thus reading it\n+        // serves as a compile-time assertion.\n+        const TRAVERSAL_PERMIT: () = ();\n     }\n     impl BorrowType for Owned {\n-        // Traversal isn't needed, it happens using the result of `borrow_mut`.\n+        // Reject evaluation, because traversal isn't needed. Instead traversal\n+        // happens using the result of `borrow_mut`.\n         // By disabling traversal, and only creating new references to roots,\n         // we know that every reference of the `Owned` type is to a root node.\n-        const PERMITS_TRAVERSAL: bool = false;\n+        const TRAVERSAL_PERMIT: () = panic!();\n     }\n     impl BorrowType for Dying {}\n     impl<'a> BorrowType for Immut<'a> {}"}]}