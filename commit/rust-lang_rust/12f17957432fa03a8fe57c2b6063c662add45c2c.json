{"sha": "12f17957432fa03a8fe57c2b6063c662add45c2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyZjE3OTU3NDMyZmEwM2E4ZmU1N2MyYjYwNjNjNjYyYWRkNDVjMmM=", "commit": {"author": {"name": "1000teslas", "email": "47207223+1000teslas@users.noreply.github.com", "date": "2021-01-02T16:53:50Z"}, "committer": {"name": "1000teslas", "email": "47207223+1000teslas@users.noreply.github.com", "date": "2021-01-10T05:47:40Z"}, "message": "Fix location of error message explanation", "tree": {"sha": "53bccbddf0bf870e020d6bd94df31bbafb96405b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53bccbddf0bf870e020d6bd94df31bbafb96405b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12f17957432fa03a8fe57c2b6063c662add45c2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12f17957432fa03a8fe57c2b6063c662add45c2c", "html_url": "https://github.com/rust-lang/rust/commit/12f17957432fa03a8fe57c2b6063c662add45c2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12f17957432fa03a8fe57c2b6063c662add45c2c/comments", "author": {"login": "1000teslas", "id": 47207223, "node_id": "MDQ6VXNlcjQ3MjA3MjIz", "avatar_url": "https://avatars.githubusercontent.com/u/47207223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1000teslas", "html_url": "https://github.com/1000teslas", "followers_url": "https://api.github.com/users/1000teslas/followers", "following_url": "https://api.github.com/users/1000teslas/following{/other_user}", "gists_url": "https://api.github.com/users/1000teslas/gists{/gist_id}", "starred_url": "https://api.github.com/users/1000teslas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1000teslas/subscriptions", "organizations_url": "https://api.github.com/users/1000teslas/orgs", "repos_url": "https://api.github.com/users/1000teslas/repos", "events_url": "https://api.github.com/users/1000teslas/events{/privacy}", "received_events_url": "https://api.github.com/users/1000teslas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "1000teslas", "id": 47207223, "node_id": "MDQ6VXNlcjQ3MjA3MjIz", "avatar_url": "https://avatars.githubusercontent.com/u/47207223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1000teslas", "html_url": "https://github.com/1000teslas", "followers_url": "https://api.github.com/users/1000teslas/followers", "following_url": "https://api.github.com/users/1000teslas/following{/other_user}", "gists_url": "https://api.github.com/users/1000teslas/gists{/gist_id}", "starred_url": "https://api.github.com/users/1000teslas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1000teslas/subscriptions", "organizations_url": "https://api.github.com/users/1000teslas/orgs", "repos_url": "https://api.github.com/users/1000teslas/repos", "events_url": "https://api.github.com/users/1000teslas/events{/privacy}", "received_events_url": "https://api.github.com/users/1000teslas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ccef564560df65db0cb761cb27751f15821f1af", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ccef564560df65db0cb761cb27751f15821f1af", "html_url": "https://github.com/rust-lang/rust/commit/5ccef564560df65db0cb761cb27751f15821f1af"}], "stats": {"total": 32, "additions": 17, "deletions": 15}, "files": [{"sha": "43e9701aa25accf568f290fc323c985237e4e4aa", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/12f17957432fa03a8fe57c2b6063c662add45c2c/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12f17957432fa03a8fe57c2b6063c662add45c2c/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=12f17957432fa03a8fe57c2b6063c662add45c2c", "patch": "@@ -1323,16 +1323,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             suggestion,\n             Applicability::MachineApplicable,\n         );\n-        if let Some(generator_kind) = use_span.generator_kind() {\n-            if let GeneratorKind::Async(_) = generator_kind {\n-                err.note(\n-            \"borrows cannot be held across a yield point, because the stack space of the current \\\n-            function is not preserved\",\n-        );\n-                err.help(\"see https://rust-lang.github.io/async-book/03_async_await/01_chapter.html#awaiting-on-a-multithreaded-executor \\\n-        for more information\");\n-            }\n-        }\n \n         let msg = match category {\n             ConstraintCategory::Return(_) | ConstraintCategory::OpaqueType => {\n@@ -1349,6 +1339,18 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             ),\n         };\n         err.span_note(constraint_span, &msg);\n+        if let ConstraintCategory::CallArgument = category {\n+            if let Some(generator_kind) = use_span.generator_kind() {\n+                if let GeneratorKind::Async(_) = generator_kind {\n+                    err.note(\n+                        \"borrows cannot be held across a yield point, because the stack \\\n+                        space of the current function is not preserved\",\n+                    );\n+                    err.help(\"see https://rust-lang.github.io/async-book/03_async_await/01_chapter.html#awaiting-on-a-multithreaded-executor \\\n+                        for more information\");\n+                }\n+            }\n+        }\n         err\n     }\n "}, {"sha": "a16061fd979d90d08ba509ea6792be51f75f6d4e", "filename": "src/test/ui/async-await/issues/issue-78938-async-block.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/12f17957432fa03a8fe57c2b6063c662add45c2c/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78938-async-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12f17957432fa03a8fe57c2b6063c662add45c2c/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78938-async-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78938-async-block.rs?ref=12f17957432fa03a8fe57c2b6063c662add45c2c", "patch": "@@ -16,7 +16,7 @@ fn game_loop(v: Arc<Vec<usize>>) {}\n fn spawn<F>(future: F) -> JoinHandle\n where\n     F: Future + Send + 'static,\n-    F::Output: Send + 'static,  \n+    F::Output: Send + 'static,\n {\n     loop {}\n }\n@@ -26,8 +26,8 @@ struct JoinHandle;\n impl Future for JoinHandle {\n     type Output = ();\n     fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {\n-        loop {}\n+       loop {}\n     }\n }\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "604c47b430f82a569404cb2c763fee66ba75f737", "filename": "src/test/ui/async-await/issues/issue-78938-async-block.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12f17957432fa03a8fe57c2b6063c662add45c2c/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78938-async-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12f17957432fa03a8fe57c2b6063c662add45c2c/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78938-async-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78938-async-block.stderr?ref=12f17957432fa03a8fe57c2b6063c662add45c2c", "patch": "@@ -8,8 +8,6 @@ LL | |         game_loop(Arc::clone(&room_ref))\n LL | |     });\n    | |_____^ may outlive borrowed value `room_ref`\n    |\n-   = note: borrows cannot be held across a yield point, because the stack space of the current function is not preserved\n-   = help: see https://rust-lang.github.io/async-book/03_async_await/01_chapter.html#awaiting-on-a-multithreaded-executor for more information\n note: function requires argument type to outlive `'static`\n   --> $DIR/issue-78938-async-block.rs:8:33\n    |\n@@ -18,6 +16,8 @@ LL |       let gameloop_handle = spawn(async {\n LL | |         game_loop(Arc::clone(&room_ref))\n LL | |     });\n    | |_____^\n+   = note: borrows cannot be held across a yield point, because the stack space of the current function is not preserved\n+   = help: see https://rust-lang.github.io/async-book/03_async_await/01_chapter.html#awaiting-on-a-multithreaded-executor for more information\n help: to force the async block to take ownership of `room_ref` (and any other referenced variables), use the `move` keyword\n    |\n LL |     let gameloop_handle = spawn(async move {"}]}