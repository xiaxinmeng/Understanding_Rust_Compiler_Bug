{"sha": "5d66bfe16343141132c8a7aefa727b209ec3e66a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkNjZiZmUxNjM0MzE0MTEzMmM4YTdhZWZhNzI3YjIwOWVjM2U2NmE=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-06-13T17:05:31Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-06-13T17:12:05Z"}, "message": "Shorten *all* qualified paths when adding use", "tree": {"sha": "24cf6c4c08f8bc009edc4e3f0ce665509b4e86c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24cf6c4c08f8bc009edc4e3f0ce665509b4e86c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d66bfe16343141132c8a7aefa727b209ec3e66a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d66bfe16343141132c8a7aefa727b209ec3e66a", "html_url": "https://github.com/rust-lang/rust/commit/5d66bfe16343141132c8a7aefa727b209ec3e66a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d66bfe16343141132c8a7aefa727b209ec3e66a/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b65c0a5893e0ed88119a00062ae26e86375e4883", "url": "https://api.github.com/repos/rust-lang/rust/commits/b65c0a5893e0ed88119a00062ae26e86375e4883", "html_url": "https://github.com/rust-lang/rust/commit/b65c0a5893e0ed88119a00062ae26e86375e4883"}], "stats": {"total": 203, "additions": 192, "deletions": 11}, "files": [{"sha": "ee614de7260b370c1d20b2578187820c125204b5", "filename": "crates/ra_assists/src/assist_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d66bfe16343141132c8a7aefa727b209ec3e66a/crates%2Fra_assists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d66bfe16343141132c8a7aefa727b209ec3e66a/crates%2Fra_assists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_context.rs?ref=5d66bfe16343141132c8a7aefa727b209ec3e66a", "patch": "@@ -252,7 +252,7 @@ impl AssistBuilder {\n     pub(crate) fn rewrite(&mut self, rewriter: SyntaxRewriter) {\n         let node = rewriter.rewrite_root().unwrap();\n         let new = rewriter.rewrite(&node);\n-        algo::diff(&node, &new).into_text_edit(&mut self.edit)\n+        algo::diff(&node, &new).into_text_edit(&mut self.edit);\n     }\n \n     // FIXME: kill this API"}, {"sha": "6cbf8309bb4d5d4d4eddd04194f9f2fa62566bec", "filename": "crates/ra_assists/src/handlers/replace_qualified_name_with_use.rs", "status": "modified", "additions": 191, "deletions": 10, "changes": 201, "blob_url": "https://github.com/rust-lang/rust/blob/5d66bfe16343141132c8a7aefa727b209ec3e66a/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d66bfe16343141132c8a7aefa727b209ec3e66a/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs?ref=5d66bfe16343141132c8a7aefa727b209ec3e66a", "patch": "@@ -1,7 +1,11 @@\n-use hir;\n-use ra_syntax::{ast, AstNode, SmolStr, TextRange};\n+use hir::{self, ModPath};\n+use ra_syntax::{algo::SyntaxRewriter, ast, match_ast, AstNode, SmolStr, SyntaxNode};\n \n-use crate::{utils::insert_use_statement, AssistContext, AssistId, Assists};\n+use crate::{\n+    utils::{find_insert_use_container, insert_use_statement},\n+    AssistContext, AssistId, Assists,\n+};\n+use either::Either;\n \n // Assist: replace_qualified_name_with_use\n //\n@@ -39,16 +43,28 @@ pub(crate) fn replace_qualified_name_with_use(\n         target,\n         |builder| {\n             let path_to_import = hir_path.mod_path().clone();\n+            let container = match find_insert_use_container(path.syntax(), ctx) {\n+                Some(c) => c,\n+                None => return,\n+            };\n             insert_use_statement(path.syntax(), &path_to_import, ctx, builder.text_edit_builder());\n \n-            if let Some(last) = path.segment() {\n-                // Here we are assuming the assist will provide a correct use statement\n-                // so we can delete the path qualifier\n-                builder.delete(TextRange::new(\n-                    path.syntax().text_range().start(),\n-                    last.syntax().text_range().start(),\n-                ));\n+            // Now that we've brought the name into scope, re-qualify all paths that could be\n+            // affected (that is, all paths inside the node we added the `use` to).\n+            let hir_path = match hir::Path::from_ast(path.clone()) {\n+                Some(p) => p,\n+                None => return,\n+            };\n+            let mut rewriter = SyntaxRewriter::default();\n+            match container {\n+                Either::Left(l) => {\n+                    shorten_paths(&mut rewriter, l.syntax().clone(), hir_path.mod_path());\n+                }\n+                Either::Right(r) => {\n+                    shorten_paths(&mut rewriter, r.syntax().clone(), hir_path.mod_path());\n+                }\n             }\n+            builder.rewrite(rewriter);\n         },\n     )\n }\n@@ -73,6 +89,59 @@ fn collect_hir_path_segments(path: &hir::Path) -> Option<Vec<SmolStr>> {\n     Some(ps)\n }\n \n+/// Adds replacements to `re` that shorten `path` in all descendants of `node`.\n+fn shorten_paths(re: &mut SyntaxRewriter<'static>, node: SyntaxNode, path: &ModPath) {\n+    for child in node.children() {\n+        match_ast! {\n+            match child {\n+                // Don't modify `use` items, as this can break the `use` item when injecting a new\n+                // import into the use tree.\n+                ast::UseItem(_it) => continue,\n+                // Don't descend into submodules, they don't have the same `use` items in scope.\n+                ast::Module(_it) => continue,\n+\n+                ast::Path(p) => {\n+                    match maybe_replace_path(re, &p, path) {\n+                        Some(()) => {},\n+                        None => shorten_paths(re, p.syntax().clone(), path),\n+                    }\n+                },\n+                _ => shorten_paths(re, child, path),\n+            }\n+        }\n+    }\n+}\n+\n+fn maybe_replace_path(\n+    re: &mut SyntaxRewriter<'static>,\n+    p: &ast::Path,\n+    path: &ModPath,\n+) -> Option<()> {\n+    let hir_path = hir::Path::from_ast(p.clone())?;\n+\n+    if hir_path.mod_path() != path {\n+        return None;\n+    }\n+\n+    // Replace path with its last \"plain\" segment.\n+    let mut mod_path = hir_path.mod_path().clone();\n+    let last = mod_path.segments.len() - 1;\n+    mod_path.segments.swap(0, last);\n+    mod_path.segments.truncate(1);\n+    mod_path.kind = hir::PathKind::Plain;\n+\n+    let mut new_path = crate::ast_transform::path_to_ast(mod_path);\n+\n+    let type_args = p.segment().and_then(|s| s.type_arg_list());\n+    if let Some(type_args) = type_args {\n+        let last_segment = new_path.segment().unwrap();\n+        new_path = new_path.with_segment(last_segment.with_type_args(type_args));\n+    }\n+\n+    re.replace(p.syntax(), new_path.syntax());\n+    Some(())\n+}\n+\n #[cfg(test)]\n mod tests {\n     use crate::tests::{check_assist, check_assist_not_applicable};\n@@ -459,6 +528,118 @@ use std::fmt::Debug;\n \n fn main() {\n     Debug\n+}\n+    \",\n+        );\n+    }\n+\n+    #[test]\n+    fn replaces_all_affected_paths() {\n+        check_assist(\n+            replace_qualified_name_with_use,\n+            \"\n+fn main() {\n+    std::fmt::Debug<|>;\n+    let x: std::fmt::Debug = std::fmt::Debug;\n+}\n+    \",\n+            \"\n+use std::fmt::Debug;\n+\n+fn main() {\n+    Debug;\n+    let x: Debug = Debug;\n+}\n+    \",\n+        );\n+    }\n+\n+    #[test]\n+    fn replaces_all_affected_paths_mod() {\n+        check_assist(\n+            replace_qualified_name_with_use,\n+            \"\n+mod m {\n+    fn f() {\n+        std::fmt::Debug<|>;\n+        let x: std::fmt::Debug = std::fmt::Debug;\n+    }\n+    fn g() {\n+        std::fmt::Debug;\n+    }\n+}\n+\n+fn f() {\n+    std::fmt::Debug;\n+}\n+    \",\n+            \"\n+mod m {\n+    use std::fmt::Debug;\n+\n+    fn f() {\n+        Debug;\n+        let x: Debug = Debug;\n+    }\n+    fn g() {\n+        Debug;\n+    }\n+}\n+\n+fn f() {\n+    std::fmt::Debug;\n+}\n+    \",\n+        );\n+    }\n+\n+    #[test]\n+    fn does_not_replace_in_submodules() {\n+        check_assist(\n+            replace_qualified_name_with_use,\n+            \"\n+fn main() {\n+    std::fmt::Debug<|>;\n+}\n+\n+mod sub {\n+    fn f() {\n+        std::fmt::Debug;\n+    }\n+}\n+    \",\n+            \"\n+use std::fmt::Debug;\n+\n+fn main() {\n+    Debug;\n+}\n+\n+mod sub {\n+    fn f() {\n+        std::fmt::Debug;\n+    }\n+}\n+    \",\n+        );\n+    }\n+\n+    #[test]\n+    fn does_not_replace_in_use() {\n+        check_assist(\n+            replace_qualified_name_with_use,\n+            \"\n+use std::fmt::Display;\n+\n+fn main() {\n+    std::fmt<|>;\n+}\n+    \",\n+            \"\n+use std::fmt::{self, Display};\n+\n+fn main() {\n+    fmt;\n }\n     \",\n         );"}]}