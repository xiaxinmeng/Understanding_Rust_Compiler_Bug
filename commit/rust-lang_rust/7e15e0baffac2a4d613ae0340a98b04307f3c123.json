{"sha": "7e15e0baffac2a4d613ae0340a98b04307f3c123", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlMTVlMGJhZmZhYzJhNGQ2MTNhZTAzNDBhOThiMDQzMDdmM2MxMjM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-05-28T16:38:39Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-05-28T23:47:05Z"}, "message": "remove use of depth from `TyS` and replace with a debruijn index\n\nCo-authored-by: csmoe <35686186+csmoe@users.noreply.github.com>", "tree": {"sha": "2bd003ccef1cdf50746833356799b2e83ce1afd6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bd003ccef1cdf50746833356799b2e83ce1afd6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e15e0baffac2a4d613ae0340a98b04307f3c123", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e15e0baffac2a4d613ae0340a98b04307f3c123", "html_url": "https://github.com/rust-lang/rust/commit/7e15e0baffac2a4d613ae0340a98b04307f3c123", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e15e0baffac2a4d613ae0340a98b04307f3c123/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f15d1ea255a8d0bddd6194aefe5cfee0434e0a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f15d1ea255a8d0bddd6194aefe5cfee0434e0a1", "html_url": "https://github.com/rust-lang/rust/commit/8f15d1ea255a8d0bddd6194aefe5cfee0434e0a1"}], "stats": {"total": 108, "additions": 74, "deletions": 34}, "files": [{"sha": "f2bdb77ad352673a29c06681110b9b0ac341e149", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e15e0baffac2a4d613ae0340a98b04307f3c123/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e15e0baffac2a4d613ae0340a98b04307f3c123/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=7e15e0baffac2a4d613ae0340a98b04307f3c123", "patch": "@@ -181,7 +181,7 @@ impl<'gcx: 'tcx, 'tcx> CtxtInterners<'tcx> {\n             let ty_struct = TyS {\n                 sty: st,\n                 flags: flags.flags,\n-                region_depth: flags.depth,\n+                outer_exclusive_binder: flags.outer_exclusive_binder,\n             };\n \n             // Make sure we don't end up with inference\n@@ -205,7 +205,7 @@ impl<'gcx: 'tcx, 'tcx> CtxtInterners<'tcx> {\n             let ty_struct = TyS {\n                 sty: st,\n                 flags: flags.flags,\n-                region_depth: flags.depth,\n+                outer_exclusive_binder: flags.outer_exclusive_binder,\n             };\n \n             // This is safe because all the types the ty_struct can point to"}, {"sha": "ebbdc928b5dda858366847bbf4acd3787407cd41", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7e15e0baffac2a4d613ae0340a98b04307f3c123/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e15e0baffac2a4d613ae0340a98b04307f3c123/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=7e15e0baffac2a4d613ae0340a98b04307f3c123", "patch": "@@ -16,13 +16,16 @@ use ty::{self, Ty, TypeFlags, TypeFoldable};\n pub struct FlagComputation {\n     pub flags: TypeFlags,\n \n-    // maximum depth of any bound region that we have seen thus far\n-    pub depth: u32,\n+    // see `TyS::outer_exclusive_binder` for details\n+    pub outer_exclusive_binder: ty::DebruijnIndex,\n }\n \n impl FlagComputation {\n     fn new() -> FlagComputation {\n-        FlagComputation { flags: TypeFlags::empty(), depth: 0 }\n+        FlagComputation {\n+            flags: TypeFlags::empty(),\n+            outer_exclusive_binder: ty::DebruijnIndex::INNERMOST,\n+        }\n     }\n \n     pub fn for_sty(st: &ty::TypeVariants) -> FlagComputation {\n@@ -35,10 +38,17 @@ impl FlagComputation {\n         self.flags = self.flags | (flags & TypeFlags::NOMINAL_FLAGS);\n     }\n \n-    fn add_depth(&mut self, depth: u32) {\n-        if depth > self.depth {\n-            self.depth = depth;\n-        }\n+    /// indicates that `self` refers to something at binding level `binder`\n+    fn add_binder(&mut self, binder: ty::DebruijnIndex) {\n+        let exclusive_binder = binder.shifted_in(1);\n+        self.add_exclusive_binder(exclusive_binder);\n+    }\n+\n+    /// indicates that `self` refers to something *inside* binding\n+    /// level `binder` -- not bound by `binder`, but bound by the next\n+    /// binder internal to it\n+    fn add_exclusive_binder(&mut self, exclusive_binder: ty::DebruijnIndex) {\n+        self.outer_exclusive_binder = self.outer_exclusive_binder.max(exclusive_binder);\n     }\n \n     /// Adds the flags/depth from a set of types that appear within the current type, but within a\n@@ -49,9 +59,11 @@ impl FlagComputation {\n         // The types that contributed to `computation` occurred within\n         // a region binder, so subtract one from the region depth\n         // within when adding the depth to `self`.\n-        let depth = computation.depth;\n-        if depth > 0 {\n-            self.add_depth(depth - 1);\n+        let outer_exclusive_binder = computation.outer_exclusive_binder;\n+        if outer_exclusive_binder > ty::DebruijnIndex::INNERMOST {\n+            self.add_exclusive_binder(outer_exclusive_binder.shifted_out(1));\n+        } else {\n+            // otherwise, this binder captures nothing\n         }\n     }\n \n@@ -194,7 +206,7 @@ impl FlagComputation {\n \n     fn add_ty(&mut self, ty: Ty) {\n         self.add_flags(ty.flags);\n-        self.add_depth(ty.region_depth);\n+        self.add_exclusive_binder(ty.outer_exclusive_binder);\n     }\n \n     fn add_tys(&mut self, tys: &[Ty]) {\n@@ -215,7 +227,7 @@ impl FlagComputation {\n     fn add_region(&mut self, r: ty::Region) {\n         self.add_flags(r.type_flags());\n         if let ty::ReLateBound(debruijn, _) = *r {\n-            self.add_depth(debruijn.depth);\n+            self.add_binder(debruijn);\n         }\n     }\n "}, {"sha": "dea33ca6947fa4a18581697edadd82e798b8e21d", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7e15e0baffac2a4d613ae0340a98b04307f3c123/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e15e0baffac2a4d613ae0340a98b04307f3c123/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=7e15e0baffac2a4d613ae0340a98b04307f3c123", "patch": "@@ -63,20 +63,22 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n         self.super_visit_with(visitor)\n     }\n \n-    fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n-        self.visit_with(&mut HasEscapingRegionsVisitor { depth: depth })\n-    }\n-\n     /// True if `self` has any late-bound regions that are either\n     /// bound by `binder` or bound by some binder outside of `binder`.\n     /// If `binder` is `ty::DebruijnIndex::INNERMOST`, this indicates whether\n     /// there are any late-bound regions that appear free.\n-    fn has_regions_bound_by_or_escaping(&self, binder: ty::DebruijnIndex) -> bool {\n-        self.has_regions_escaping_depth(binder.depth - 1)\n+    fn has_regions_bound_at_or_above(&self, binder: ty::DebruijnIndex) -> bool {\n+        self.visit_with(&mut HasEscapingRegionsVisitor { outer_index: binder })\n+    }\n+\n+    /// True if this `self` has any regions that escape `binder` (and\n+    /// hence are not bound by it).\n+    fn has_regions_bound_above(&self, binder: ty::DebruijnIndex) -> bool {\n+        self.has_regions_bound_at_or_above(binder.shifted_in(1))\n     }\n \n     fn has_escaping_regions(&self) -> bool {\n-        self.has_regions_escaping_depth(0)\n+        self.has_regions_bound_at_or_above(ty::DebruijnIndex::INNERMOST)\n     }\n \n     fn has_type_flags(&self, flags: TypeFlags) -> bool {\n@@ -523,7 +525,7 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for RegionReplacer<'a, 'gcx, 'tcx> {\n     }\n \n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n-        if !t.has_regions_bound_by_or_escaping(self.current_index) {\n+        if !t.has_regions_bound_at_or_above(self.current_index) {\n             return t;\n         }\n \n@@ -623,23 +625,32 @@ pub fn shift_regions<'a, 'gcx, 'tcx, T>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n /// represent the scope to which it is attached, etc. An escaping region represents a bound region\n /// for which this processing has not yet been done.\n struct HasEscapingRegionsVisitor {\n-    depth: u32,\n+    /// Anything bound by `outer_index` or \"above\" is escaping\n+    outer_index: ty::DebruijnIndex,\n }\n \n impl<'tcx> TypeVisitor<'tcx> for HasEscapingRegionsVisitor {\n     fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> bool {\n-        self.depth += 1;\n+        self.outer_index.shift_in(1);\n         let result = t.super_visit_with(self);\n-        self.depth -= 1;\n+        self.outer_index.shift_out(1);\n         result\n     }\n \n     fn visit_ty(&mut self, t: Ty<'tcx>) -> bool {\n-        t.region_depth > self.depth\n+        // If the outer-exclusive-binder is *strictly greater* than\n+        // `outer_index`, that means that `t` contains some content\n+        // bound at `outer_index` or above (because\n+        // `outer_exclusive_binder` is always 1 higher than the\n+        // content in `t`). Therefore, `t` has some escaping regions.\n+        t.outer_exclusive_binder > self.outer_index\n     }\n \n     fn visit_region(&mut self, r: ty::Region<'tcx>) -> bool {\n-        r.escapes_depth(self.depth)\n+        // If the region is bound by `outer_index` or anything outside\n+        // of outer index, then it escapes the binders we have\n+        // visited.\n+        r.bound_at_or_above_binder(self.outer_index)\n     }\n }\n "}, {"sha": "646c60c139c85f3d59b9f4c7864fefc4e5a5a964", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7e15e0baffac2a4d613ae0340a98b04307f3c123/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e15e0baffac2a4d613ae0340a98b04307f3c123/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=7e15e0baffac2a4d613ae0340a98b04307f3c123", "patch": "@@ -488,8 +488,24 @@ pub struct TyS<'tcx> {\n     pub sty: TypeVariants<'tcx>,\n     pub flags: TypeFlags,\n \n-    // the maximal depth of any bound regions appearing in this type.\n-    region_depth: u32,\n+    /// This is a kind of confusing thing: it stores the smallest\n+    /// binder such that\n+    ///\n+    /// (a) the binder itself captures nothing but\n+    /// (b) all the late-bound things within the type are captured\n+    ///     by some sub-binder.\n+    ///\n+    /// So, for a type without any late-bound things, like `u32`, this\n+    /// will be INNERMOST, because that is the innermost binder that\n+    /// captures nothing. But for a type `&'D u32`, where `'D` is a\n+    /// late-bound region with debruijn index D, this would be D+1 --\n+    /// the binder itself does not capture D, but D is captured by an\n+    /// inner binder.\n+    ///\n+    /// We call this concept an \"exclusive\" binder D (because all\n+    /// debruijn indices within the type are contained within `0..D`\n+    /// (exclusive)).\n+    outer_exclusive_binder: ty::DebruijnIndex,\n }\n \n impl<'tcx> Ord for TyS<'tcx> {\n@@ -560,7 +576,8 @@ impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for ty::TyS<'gcx> {\n             // The other fields just provide fast access to information that is\n             // also contained in `sty`, so no need to hash them.\n             flags: _,\n-            region_depth: _,\n+\n+            outer_exclusive_binder: _,\n         } = *self;\n \n         sty.hash_stable(hcx, hasher);"}, {"sha": "b03930432a9e6bbb880ad5fd0a738b3ab191a51e", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e15e0baffac2a4d613ae0340a98b04307f3c123/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e15e0baffac2a4d613ae0340a98b04307f3c123/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=7e15e0baffac2a4d613ae0340a98b04307f3c123", "patch": "@@ -1332,9 +1332,9 @@ impl RegionKind {\n         }\n     }\n \n-    pub fn escapes_depth(&self, depth: u32) -> bool {\n+    pub fn bound_at_or_above_binder(&self, index: DebruijnIndex) -> bool {\n         match *self {\n-            ty::ReLateBound(debruijn, _) => debruijn.depth > depth,\n+            ty::ReLateBound(debruijn, _) => debruijn >= index,\n             _ => false,\n         }\n     }"}, {"sha": "67245bec7fb898f3f6906fbb86c239c62e41ec74", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e15e0baffac2a4d613ae0340a98b04307f3c123/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e15e0baffac2a4d613ae0340a98b04307f3c123/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=7e15e0baffac2a4d613ae0340a98b04307f3c123", "patch": "@@ -19,8 +19,8 @@ use rustc::infer::LateBoundRegionConversionTime;\n use rustc::infer::type_variable::TypeVariableOrigin;\n use rustc::traits::error_reporting::ArgKind;\n use rustc::ty::{self, ToPolyTraitRef, Ty, GenericParamDefKind};\n+use rustc::ty::fold::TypeFoldable;\n use rustc::ty::subst::Substs;\n-use rustc::ty::TypeFoldable;\n use std::cmp;\n use std::iter;\n use rustc_target::spec::abi::Abi;\n@@ -465,7 +465,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // Create a `PolyFnSig`. Note the oddity that late bound\n         // regions appearing free in `expected_sig` are now bound up\n         // in this binder we are creating.\n-        assert!(!expected_sig.sig.has_regions_escaping_depth(1));\n+        assert!(!expected_sig.sig.has_regions_bound_above(ty::DebruijnIndex::INNERMOST));\n         let bound_sig = ty::Binder::bind(self.tcx.mk_fn_sig(\n             expected_sig.sig.inputs().iter().cloned(),\n             expected_sig.sig.output(),"}]}