{"sha": "af8739b96efa97694526e478985960b4c9fc09f5", "node_id": "C_kwDOAAsO6NoAKGFmODczOWI5NmVmYTk3Njk0NTI2ZTQ3ODk4NTk2MGI0YzlmYzA5ZjU", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-04T13:31:04Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-04T13:33:27Z"}, "message": "Completely remove LifetimeScopeForPath.", "tree": {"sha": "3aadf31ce511233c5a82c46727d87df2895ea7be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3aadf31ce511233c5a82c46727d87df2895ea7be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af8739b96efa97694526e478985960b4c9fc09f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af8739b96efa97694526e478985960b4c9fc09f5", "html_url": "https://github.com/rust-lang/rust/commit/af8739b96efa97694526e478985960b4c9fc09f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af8739b96efa97694526e478985960b4c9fc09f5/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a07290047e6b27638f491ee7ebb90e20fece2a79", "url": "https://api.github.com/repos/rust-lang/rust/commits/a07290047e6b27638f491ee7ebb90e20fece2a79", "html_url": "https://github.com/rust-lang/rust/commit/a07290047e6b27638f491ee7ebb90e20fece2a79"}], "stats": {"total": 124, "additions": 7, "deletions": 117}, "files": [{"sha": "c71ba7b175313b380419aefc385250b89e51c99e", "filename": "compiler/rustc_middle/src/middle/resolve_lifetime.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/af8739b96efa97694526e478985960b4c9fc09f5/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af8739b96efa97694526e478985960b4c9fc09f5/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fresolve_lifetime.rs?ref=af8739b96efa97694526e478985960b4c9fc09f5", "patch": "@@ -16,19 +16,6 @@ pub enum Region {\n     Free(DefId, /* lifetime decl */ DefId),\n }\n \n-/// This is used in diagnostics to improve suggestions for missing generic arguments.\n-/// It gives information on the type of lifetimes that are in scope for a particular `PathSegment`,\n-/// so that we can e.g. suggest elided-lifetimes-in-paths of the form <'_, '_> e.g.\n-#[derive(Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, HashStable)]\n-pub enum LifetimeScopeForPath {\n-    /// Contains all lifetime names that are in scope and could possibly be used in generics\n-    /// arguments of path.\n-    NonElided,\n-    /// Information that allows us to suggest args of the form `<'_>` in case\n-    /// no generic arguments were provided for a path.\n-    Elided,\n-}\n-\n /// A set containing, at most, one known element.\n /// If two distinct values are inserted into a set, then it\n /// becomes `Many`, which can be used to detect ambiguities."}, {"sha": "ef23a182bf5e45db62235916386e4790109f7f2f", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/af8739b96efa97694526e478985960b4c9fc09f5/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af8739b96efa97694526e478985960b4c9fc09f5/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=af8739b96efa97694526e478985960b4c9fc09f5", "patch": "@@ -1599,11 +1599,6 @@ rustc_queries! {\n         desc { \"looking up late bound vars\" }\n     }\n \n-    query lifetime_scope_map(_: LocalDefId) -> Option<FxHashMap<ItemLocalId, LifetimeScopeForPath>> {\n-        storage(ArenaCacheSelector<'tcx>)\n-        desc { \"finds the lifetime scope for an HirId of a PathSegment\" }\n-    }\n-\n     query visibility(def_id: DefId) -> ty::Visibility {\n         desc { |tcx| \"computing visibility of `{}`\", tcx.def_path_str(def_id) }\n         separate_provide_extern"}, {"sha": "c23b97eba1e6df3330b296c971d25055a3c5ae30", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af8739b96efa97694526e478985960b4c9fc09f5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af8739b96efa97694526e478985960b4c9fc09f5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=af8739b96efa97694526e478985960b4c9fc09f5", "patch": "@@ -6,7 +6,7 @@ use crate::hir::place::Place as HirPlace;\n use crate::infer::canonical::{Canonical, CanonicalVarInfo, CanonicalVarInfos};\n use crate::lint::{struct_lint_level, LintDiagnosticBuilder, LintLevelSource};\n use crate::middle::codegen_fn_attrs::CodegenFnAttrs;\n-use crate::middle::resolve_lifetime::{self, LifetimeScopeForPath};\n+use crate::middle::resolve_lifetime;\n use crate::middle::stability;\n use crate::mir::interpret::{self, Allocation, ConstAllocation, ConstValue, Scalar};\n use crate::mir::{\n@@ -2821,10 +2821,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         )\n     }\n \n-    pub fn lifetime_scope(self, id: HirId) -> Option<&'tcx LifetimeScopeForPath> {\n-        self.lifetime_scope_map(id.owner).as_ref().and_then(|map| map.get(&id.local_id))\n-    }\n-\n     /// Whether the `def_id` counts as const fn in the current crate, considering all active\n     /// feature gates\n     pub fn is_const_fn(self, def_id: DefId) -> bool {"}, {"sha": "db92ab0aa9a2c4102d0a71a1b5cc578a970d67ce", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af8739b96efa97694526e478985960b4c9fc09f5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af8739b96efa97694526e478985960b4c9fc09f5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=af8739b96efa97694526e478985960b4c9fc09f5", "patch": "@@ -6,9 +6,7 @@ use crate::middle::codegen_fn_attrs::CodegenFnAttrs;\n use crate::middle::exported_symbols::{ExportedSymbol, SymbolExportInfo};\n use crate::middle::lib_features::LibFeatures;\n use crate::middle::privacy::AccessLevels;\n-use crate::middle::resolve_lifetime::{\n-    LifetimeScopeForPath, ObjectLifetimeDefault, Region, ResolveLifetimes,\n-};\n+use crate::middle::resolve_lifetime::{ObjectLifetimeDefault, Region, ResolveLifetimes};\n use crate::middle::stability::{self, DeprecationEntry};\n use crate::mir;\n use crate::mir::interpret::GlobalId;"}, {"sha": "359535951de99c42bc20febc3b64bf5edc6d6cf1", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 5, "deletions": 83, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/af8739b96efa97694526e478985960b4c9fc09f5/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af8739b96efa97694526e478985960b4c9fc09f5/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=af8739b96efa97694526e478985960b4c9fc09f5", "patch": "@@ -8,12 +8,11 @@\n \n use crate::late::diagnostics::{ForLifetimeSpanType, MissingLifetimeSpot};\n use rustc_ast::walk_list;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap, FxIndexSet};\n+use rustc_data_structures::fx::{FxHashSet, FxIndexMap, FxIndexSet};\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefIdMap, LocalDefId};\n-use rustc_hir::hir_id::ItemLocalId;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{GenericArg, GenericParam, LifetimeName, Node};\n use rustc_hir::{GenericParamKind, HirIdMap};\n@@ -141,9 +140,6 @@ struct NamedRegionMap {\n     // - trait refs\n     // - bound types (like `T` in `for<'a> T<'a>: Foo`)\n     late_bound_vars: HirIdMap<Vec<ty::BoundVariableKind>>,\n-\n-    // maps `PathSegment` `HirId`s to lifetime scopes.\n-    scope_for_path: Option<FxHashMap<LocalDefId, FxHashMap<ItemLocalId, LifetimeScopeForPath>>>,\n }\n \n pub(crate) struct LifetimeContext<'a, 'tcx> {\n@@ -353,10 +349,6 @@ pub fn provide(providers: &mut ty::query::Providers) {\n             _ => None,\n         },\n         late_bound_vars_map: |tcx, id| resolve_lifetimes_for(tcx, id).late_bound_vars.get(&id),\n-        lifetime_scope_map: |tcx, id| {\n-            let item_id = item_for(tcx, id);\n-            do_resolve(tcx, item_id, false, true).scope_for_path.unwrap().remove(&id)\n-        },\n \n         ..*providers\n     };\n@@ -397,29 +389,25 @@ fn resolve_lifetimes_trait_definition(\n     tcx: TyCtxt<'_>,\n     local_def_id: LocalDefId,\n ) -> ResolveLifetimes {\n-    convert_named_region_map(do_resolve(tcx, local_def_id, true, false))\n+    convert_named_region_map(do_resolve(tcx, local_def_id, true))\n }\n \n /// Computes the `ResolveLifetimes` map that contains data for an entire `Item`.\n /// You should not read the result of this query directly, but rather use\n /// `named_region_map`, `is_late_bound_map`, etc.\n #[tracing::instrument(level = \"debug\", skip(tcx))]\n fn resolve_lifetimes(tcx: TyCtxt<'_>, local_def_id: LocalDefId) -> ResolveLifetimes {\n-    convert_named_region_map(do_resolve(tcx, local_def_id, false, false))\n+    convert_named_region_map(do_resolve(tcx, local_def_id, false))\n }\n \n fn do_resolve(\n     tcx: TyCtxt<'_>,\n     local_def_id: LocalDefId,\n     trait_definition_only: bool,\n-    with_scope_for_path: bool,\n ) -> NamedRegionMap {\n     let item = tcx.hir().expect_item(local_def_id);\n-    let mut named_region_map = NamedRegionMap {\n-        defs: Default::default(),\n-        late_bound_vars: Default::default(),\n-        scope_for_path: with_scope_for_path.then(|| Default::default()),\n-    };\n+    let mut named_region_map =\n+        NamedRegionMap { defs: Default::default(), late_bound_vars: Default::default() };\n     let mut visitor = LifetimeContext {\n         tcx,\n         map: &mut named_region_map,\n@@ -515,24 +503,6 @@ fn late_region_as_bound_region<'tcx>(tcx: TyCtxt<'tcx>, region: &Region) -> ty::\n     }\n }\n \n-#[tracing::instrument(level = \"debug\")]\n-fn get_lifetime_scopes_for_path(mut scope: &Scope<'_>) -> LifetimeScopeForPath {\n-    loop {\n-        match scope {\n-            Scope::Elision { elide: Elide::Exact(_), .. } => return LifetimeScopeForPath::Elided,\n-            Scope::Root => return LifetimeScopeForPath::NonElided,\n-            Scope::Binder { s, .. }\n-            | Scope::Body { s, .. }\n-            | Scope::ObjectLifetimeDefault { s, .. }\n-            | Scope::Supertrait { s, .. }\n-            | Scope::TraitRefBoundary { s, .. }\n-            | Scope::Elision { s, .. } => {\n-                scope = s;\n-            }\n-        }\n-    }\n-}\n-\n impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n     /// Returns the binders in scope and the type of `Binder` that should be created for a poly trait ref.\n     fn poly_trait_ref_binder_info(&mut self) -> (Vec<ty::BoundVariableKind>, BinderScopeType) {\n@@ -1172,51 +1142,13 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_assoc_type_binding(&mut self, type_binding: &'tcx hir::TypeBinding<'_>) {\n-        let scope = self.scope;\n-        if let Some(scope_for_path) = self.map.scope_for_path.as_mut() {\n-            // We add lifetime scope information for `Ident`s in associated type bindings and use\n-            // the `HirId` of the type binding as the key in `LifetimeMap`\n-            let lifetime_scope = get_lifetime_scopes_for_path(scope);\n-            let map = scope_for_path.entry(type_binding.hir_id.owner).or_default();\n-            map.insert(type_binding.hir_id.local_id, lifetime_scope);\n-        }\n-        hir::intravisit::walk_assoc_type_binding(self, type_binding);\n-    }\n-\n     fn visit_path(&mut self, path: &'tcx hir::Path<'tcx>, _: hir::HirId) {\n         for (i, segment) in path.segments.iter().enumerate() {\n             let depth = path.segments.len() - i - 1;\n             if let Some(ref args) = segment.args {\n                 self.visit_segment_args(path.res, depth, args);\n             }\n-\n-            let scope = self.scope;\n-            if let Some(scope_for_path) = self.map.scope_for_path.as_mut() {\n-                // Add lifetime scope information to path segment. Note we cannot call `visit_path_segment`\n-                // here because that call would yield to resolution problems due to `walk_path_segment`\n-                // being called, which processes the path segments generic args, which we have already\n-                // processed using `visit_segment_args`.\n-                let lifetime_scope = get_lifetime_scopes_for_path(scope);\n-                if let Some(hir_id) = segment.hir_id {\n-                    let map = scope_for_path.entry(hir_id.owner).or_default();\n-                    map.insert(hir_id.local_id, lifetime_scope);\n-                }\n-            }\n-        }\n-    }\n-\n-    fn visit_path_segment(&mut self, path_span: Span, path_segment: &'tcx hir::PathSegment<'tcx>) {\n-        let scope = self.scope;\n-        if let Some(scope_for_path) = self.map.scope_for_path.as_mut() {\n-            let lifetime_scope = get_lifetime_scopes_for_path(scope);\n-            if let Some(hir_id) = path_segment.hir_id {\n-                let map = scope_for_path.entry(hir_id.owner).or_default();\n-                map.insert(hir_id.local_id, lifetime_scope);\n-            }\n         }\n-\n-        intravisit::walk_path_segment(self, path_span, path_segment);\n     }\n \n     fn visit_fn_decl(&mut self, fd: &'tcx hir::FnDecl<'tcx>) {\n@@ -2480,16 +2412,6 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n         };\n \n-        // If we specifically need the `scope_for_path` map, then we're in the\n-        // diagnostic pass and we don't want to emit more errors.\n-        if self.map.scope_for_path.is_some() {\n-            self.tcx.sess.delay_span_bug(\n-                rustc_span::DUMMY_SP,\n-                \"Encountered unexpected errors during diagnostics related part\",\n-            );\n-            return;\n-        }\n-\n         let mut spans: Vec<_> = lifetime_refs.iter().map(|lt| lt.span).collect();\n         spans.sort();\n         let mut spans_dedup = spans.clone();"}, {"sha": "edd2aedfe87e364c684198154a3aff138226981e", "filename": "compiler/rustc_typeck/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af8739b96efa97694526e478985960b4c9fc09f5/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af8739b96efa97694526e478985960b4c9fc09f5/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=af8739b96efa97694526e478985960b4c9fc09f5", "patch": "@@ -5,7 +5,6 @@ use rustc_errors::{\n };\n use rustc_hir as hir;\n use rustc_middle::hir::map::fn_sig;\n-use rustc_middle::middle::resolve_lifetime::LifetimeScopeForPath;\n use rustc_middle::ty::{self as ty, AssocItems, AssocKind, TyCtxt};\n use rustc_session::Session;\n use rustc_span::def_id::DefId;\n@@ -299,13 +298,6 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n         debug!(?path_hir_id);\n \n         if let Some(path_hir_id) = path_hir_id {\n-            // We first try to get lifetime name suggestions from scope or elision information.\n-            // If none is available we use the parameter definitions\n-            if let Some(LifetimeScopeForPath::Elided) = self.tcx.lifetime_scope(path_hir_id) {\n-                // Use suggestions of the form `<'_, '_>` in case lifetime can be elided\n-                return [\"'_\"].repeat(num_params_to_take).join(\",\");\n-            }\n-\n             let mut ret = Vec::new();\n             for (id, node) in self.tcx.hir().parent_iter(path_hir_id) {\n                 debug!(?id);"}]}