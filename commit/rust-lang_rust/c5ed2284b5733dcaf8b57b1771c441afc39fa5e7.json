{"sha": "c5ed2284b5733dcaf8b57b1771c441afc39fa5e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1ZWQyMjg0YjU3MzNkY2FmOGI1N2IxNzcxYzQ0MWFmYzM5ZmE1ZTc=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-01-20T13:49:04Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-01-20T14:00:28Z"}, "message": "Create a mapping from blocks to inner items", "tree": {"sha": "598c6447f36c827a61fa89df4300946c0e213d32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/598c6447f36c827a61fa89df4300946c0e213d32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5ed2284b5733dcaf8b57b1771c441afc39fa5e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5ed2284b5733dcaf8b57b1771c441afc39fa5e7", "html_url": "https://github.com/rust-lang/rust/commit/c5ed2284b5733dcaf8b57b1771c441afc39fa5e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5ed2284b5733dcaf8b57b1771c441afc39fa5e7/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52fe50a97b702f3e72600b19936f5f355d897d1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/52fe50a97b702f3e72600b19936f5f355d897d1e", "html_url": "https://github.com/rust-lang/rust/commit/52fe50a97b702f3e72600b19936f5f355d897d1e"}], "stats": {"total": 61, "additions": 35, "deletions": 26}, "files": [{"sha": "6494cebd388bae56fb96ea1cdad981f7e6c46fda", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c5ed2284b5733dcaf8b57b1771c441afc39fa5e7/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ed2284b5733dcaf8b57b1771c441afc39fa5e7/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=c5ed2284b5733dcaf8b57b1771c441afc39fa5e7", "patch": "@@ -69,13 +69,12 @@ impl GenericParamsId {\n pub struct ItemTree {\n     top_level: SmallVec<[ModItem; 1]>,\n     attrs: FxHashMap<AttrOwner, RawAttrs>,\n-    inner_items: FxHashMap<FileAstId<ast::Item>, SmallVec<[ModItem; 1]>>,\n \n     data: Option<Box<ItemTreeData>>,\n }\n \n impl ItemTree {\n-    pub fn item_tree_query(db: &dyn DefDatabase, file_id: HirFileId) -> Arc<ItemTree> {\n+    pub(crate) fn item_tree_query(db: &dyn DefDatabase, file_id: HirFileId) -> Arc<ItemTree> {\n         let _p = profile::span(\"item_tree_query\").detail(|| format!(\"{:?}\", file_id));\n         let syntax = if let Some(node) = db.parse_or_expand(file_id) {\n             node\n@@ -117,12 +116,7 @@ impl ItemTree {\n     }\n \n     fn empty() -> Self {\n-        Self {\n-            top_level: Default::default(),\n-            attrs: Default::default(),\n-            inner_items: Default::default(),\n-            data: Default::default(),\n-        }\n+        Self { top_level: Default::default(), attrs: Default::default(), data: Default::default() }\n     }\n \n     fn shrink_to_fit(&mut self) {\n@@ -147,6 +141,7 @@ impl ItemTree {\n                 macro_defs,\n                 vis,\n                 generics,\n+                inner_items,\n             } = &mut **data;\n \n             imports.shrink_to_fit();\n@@ -169,6 +164,8 @@ impl ItemTree {\n \n             vis.arena.shrink_to_fit();\n             generics.arena.shrink_to_fit();\n+\n+            inner_items.shrink_to_fit();\n         }\n     }\n \n@@ -191,16 +188,11 @@ impl ItemTree {\n         self.raw_attrs(of).clone().filter(db, krate)\n     }\n \n-    /// Returns the lowered inner items that `ast` corresponds to.\n-    ///\n-    /// Most AST items are lowered to a single `ModItem`, but some (eg. `use` items) may be lowered\n-    /// to multiple items in the `ItemTree`.\n-    pub fn inner_items(&self, ast: FileAstId<ast::Item>) -> &[ModItem] {\n-        &self.inner_items[&ast]\n-    }\n-\n     pub fn all_inner_items(&self) -> impl Iterator<Item = ModItem> + '_ {\n-        self.inner_items.values().flatten().copied()\n+        match &self.data {\n+            Some(data) => Some(data.inner_items.values().flatten().copied()).into_iter().flatten(),\n+            None => None.into_iter().flatten(),\n+        }\n     }\n \n     pub fn source<S: ItemTreeNode>(&self, db: &dyn DefDatabase, of: ItemTreeId<S>) -> S::Source {\n@@ -297,6 +289,8 @@ struct ItemTreeData {\n \n     vis: ItemVisibilities,\n     generics: GenericParamsStorage,\n+\n+    inner_items: FxHashMap<FileAstId<ast::BlockExpr>, SmallVec<[ModItem; 1]>>,\n }\n \n #[derive(Debug, Eq, PartialEq, Hash)]"}, {"sha": "56fe569ff36a8494879668cba09d0b57f8de1eb1", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c5ed2284b5733dcaf8b57b1771c441afc39fa5e7/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ed2284b5733dcaf8b57b1771c441afc39fa5e7/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=c5ed2284b5733dcaf8b57b1771c441afc39fa5e7", "patch": "@@ -6,7 +6,7 @@ use hir_expand::{ast_id_map::AstIdMap, hygiene::Hygiene, name::known, HirFileId}\n use smallvec::SmallVec;\n use syntax::{\n     ast::{self, ModuleItemOwner},\n-    SyntaxNode,\n+    SyntaxNode, WalkEvent,\n };\n \n use crate::{\n@@ -150,14 +150,29 @@ impl Ctx {\n \n     fn collect_inner_items(&mut self, container: &SyntaxNode) {\n         let forced_vis = self.forced_visibility.take();\n-        let mut inner_items = mem::take(&mut self.tree.inner_items);\n-        inner_items.extend(container.descendants().skip(1).filter_map(ast::Item::cast).filter_map(\n-            |item| {\n-                let ast_id = self.source_ast_id_map.ast_id(&item);\n-                Some((ast_id, self.lower_mod_item(&item, true)?.0))\n-            },\n-        ));\n-        self.tree.inner_items = inner_items;\n+\n+        let mut current_block = None;\n+        for event in container.preorder().skip(1) {\n+            if let WalkEvent::Enter(node) = event {\n+                match_ast! {\n+                    match node {\n+                        ast::BlockExpr(block) => {\n+                            current_block = Some(self.source_ast_id_map.ast_id(&block));\n+                        },\n+                        ast::Item(item) => {\n+                            let mod_items = self.lower_mod_item(&item, true);\n+                            if let (Some(mod_items), Some(block)) = (mod_items, current_block) {\n+                                if !mod_items.0.is_empty() {\n+                                    self.data().inner_items.entry(block).or_default().extend(mod_items.0.iter().copied());\n+                                }\n+                            }\n+                        },\n+                        _ => {}\n+                    }\n+                }\n+            }\n+        }\n+\n         self.forced_visibility = forced_vis;\n     }\n "}]}