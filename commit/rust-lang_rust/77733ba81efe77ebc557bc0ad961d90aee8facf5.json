{"sha": "77733ba81efe77ebc557bc0ad961d90aee8facf5", "node_id": "C_kwDOAAsO6NoAKDc3NzMzYmE4MWVmZTc3ZWJjNTU3YmMwYWQ5NjFkOTBhZWU4ZmFjZjU", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-12-23T09:01:59Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-12-23T09:09:35Z"}, "message": "fix rustdoc", "tree": {"sha": "29fa597ff591a6c03c52897200441a14862e715f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29fa597ff591a6c03c52897200441a14862e715f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77733ba81efe77ebc557bc0ad961d90aee8facf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77733ba81efe77ebc557bc0ad961d90aee8facf5", "html_url": "https://github.com/rust-lang/rust/commit/77733ba81efe77ebc557bc0ad961d90aee8facf5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77733ba81efe77ebc557bc0ad961d90aee8facf5/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3f5cc6c38434a7e32e2f52456b8da6eebf013de", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3f5cc6c38434a7e32e2f52456b8da6eebf013de", "html_url": "https://github.com/rust-lang/rust/commit/e3f5cc6c38434a7e32e2f52456b8da6eebf013de"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "1ebbbba541ed9e3b6e24e364ddd50d5636fcb814", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/77733ba81efe77ebc557bc0ad961d90aee8facf5/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77733ba81efe77ebc557bc0ad961d90aee8facf5/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=77733ba81efe77ebc557bc0ad961d90aee8facf5", "patch": "@@ -1335,17 +1335,23 @@ impl Clean<Type> for hir::Ty<'_> {\n             }\n             TyKind::Slice(ref ty) => Slice(box ty.clean(cx)),\n             TyKind::Array(ref ty, ref length) => {\n-                let def_id = cx.tcx.hir().local_def_id(length.hir_id);\n-                // NOTE(min_const_generics): We can't use `const_eval_poly` for constants\n-                // as we currently do not supply the parent generics to anonymous constants\n-                // but do allow `ConstKind::Param`.\n-                //\n-                // `const_eval_poly` tries to to first substitute generic parameters which\n-                // results in an ICE while manually constructing the constant and using `eval`\n-                // does nothing for `ConstKind::Param`.\n-                let ct = ty::Const::from_anon_const(cx.tcx, def_id);\n-                let param_env = cx.tcx.param_env(def_id);\n-                let length = print_const(cx, ct.eval(cx.tcx, param_env));\n+                let length = match length {\n+                    hir::ArrayLen::Infer(_, _) => \"_\".to_string(),\n+                    hir::ArrayLen::Body(anon_const) => {\n+                        let def_id = cx.tcx.hir().local_def_id(anon_const.hir_id);\n+                        // NOTE(min_const_generics): We can't use `const_eval_poly` for constants\n+                        // as we currently do not supply the parent generics to anonymous constants\n+                        // but do allow `ConstKind::Param`.\n+                        //\n+                        // `const_eval_poly` tries to to first substitute generic parameters which\n+                        // results in an ICE while manually constructing the constant and using `eval`\n+                        // does nothing for `ConstKind::Param`.\n+                        let ct = ty::Const::from_anon_const(cx.tcx, def_id);\n+                        let param_env = cx.tcx.param_env(def_id);\n+                        print_const(cx, ct.eval(cx.tcx, param_env))\n+                    }\n+                };\n+\n                 Array(box ty.clean(cx), length)\n             }\n             TyKind::Tup(tys) => Tuple(tys.iter().map(|x| x.clean(cx)).collect()),"}]}