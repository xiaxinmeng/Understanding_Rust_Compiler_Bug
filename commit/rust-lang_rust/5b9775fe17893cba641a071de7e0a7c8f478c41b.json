{"sha": "5b9775fe17893cba641a071de7e0a7c8f478c41b", "node_id": "C_kwDOAAsO6NoAKDViOTc3NWZlMTc4OTNjYmE2NDFhMDcxZGU3ZTBhN2M4ZjQ3OGM0MWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-01T14:43:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-01T14:43:15Z"}, "message": "Auto merge of #98402 - cjgillot:undead, r=michaelwoerister\n\nRewrite dead-code pass to avoid fetching HIR.\n\nThis allows to get a more uniform handling of spans, and to simplify the grouping of diagnostics for variants and fields.", "tree": {"sha": "20e2faec4a3868c6a98697b3184de076a9cc2652", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20e2faec4a3868c6a98697b3184de076a9cc2652"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b9775fe17893cba641a071de7e0a7c8f478c41b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b9775fe17893cba641a071de7e0a7c8f478c41b", "html_url": "https://github.com/rust-lang/rust/commit/5b9775fe17893cba641a071de7e0a7c8f478c41b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b9775fe17893cba641a071de7e0a7c8f478c41b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca1e68b3229e710c3948a361ee770d846a88e6da", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca1e68b3229e710c3948a361ee770d846a88e6da", "html_url": "https://github.com/rust-lang/rust/commit/ca1e68b3229e710c3948a361ee770d846a88e6da"}, {"sha": "2d8223433159fc74b14df3736cfacc1f06f65868", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d8223433159fc74b14df3736cfacc1f06f65868", "html_url": "https://github.com/rust-lang/rust/commit/2d8223433159fc74b14df3736cfacc1f06f65868"}], "stats": {"total": 663, "additions": 266, "deletions": 397}, "files": [{"sha": "62f6a43d1f2581e328d2676ebf5d32df1883b257", "filename": "compiler/rustc_mir_build/src/thir/cx/mod.rs", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5b9775fe17893cba641a071de7e0a7c8f478c41b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b9775fe17893cba641a071de7e0a7c8f478c41b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs?ref=5b9775fe17893cba641a071de7e0a7c8f478c41b", "patch": "@@ -5,18 +5,15 @@\n use crate::thir::pattern::pat_from_hir;\n use crate::thir::util::UserAnnotatedTyHelpers;\n \n-use rustc_ast as ast;\n use rustc_data_structures::steal::Steal;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::HirId;\n use rustc_hir::Node;\n use rustc_middle::middle::region;\n-use rustc_middle::mir::interpret::{LitToConstError, LitToConstInput};\n-use rustc_middle::mir::ConstantKind;\n use rustc_middle::thir::*;\n-use rustc_middle::ty::{self, RvalueScopes, Ty, TyCtxt};\n+use rustc_middle::ty::{self, RvalueScopes, TyCtxt};\n use rustc_span::Span;\n \n pub(crate) fn thir_body<'tcx>(\n@@ -80,24 +77,6 @@ impl<'tcx> Cx<'tcx> {\n         }\n     }\n \n-    #[instrument(skip(self), level = \"debug\")]\n-    pub(crate) fn const_eval_literal(\n-        &mut self,\n-        lit: &'tcx ast::LitKind,\n-        ty: Ty<'tcx>,\n-        sp: Span,\n-        neg: bool,\n-    ) -> ConstantKind<'tcx> {\n-        match self.tcx.at(sp).lit_to_mir_constant(LitToConstInput { lit, ty, neg }) {\n-            Ok(c) => c,\n-            Err(LitToConstError::Reported) => {\n-                // create a dummy value and continue compiling\n-                ConstantKind::Ty(self.tcx.const_error(ty))\n-            }\n-            Err(LitToConstError::TypeError) => bug!(\"const_eval_literal: had type error\"),\n-        }\n-    }\n-\n     #[tracing::instrument(level = \"debug\", skip(self))]\n     pub(crate) fn pattern_from_hir(&mut self, p: &hir::Pat<'_>) -> Pat<'tcx> {\n         let p = match self.tcx.hir().get(p.hir_id) {"}, {"sha": "58c5e5b4dfe533a0109dac583954e12ca817d535", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 150, "deletions": 279, "changes": 429, "blob_url": "https://github.com/rust-lang/rust/blob/5b9775fe17893cba641a071de7e0a7c8f478c41b/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b9775fe17893cba641a071de7e0a7c8f478c41b/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=5b9775fe17893cba641a071de7e0a7c8f478c41b", "patch": "@@ -10,14 +10,12 @@ use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{Node, PatKind, TyKind};\n-use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::middle::privacy;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, DefIdTree, TyCtxt};\n use rustc_session::lint;\n use rustc_span::symbol::{sym, Symbol};\n-use rustc_span::Span;\n use std::mem;\n \n // Any local node that may call something in its body block should be\n@@ -82,8 +80,8 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n \n     fn handle_res(&mut self, res: Res) {\n         match res {\n-            Res::Def(DefKind::Const | DefKind::AssocConst | DefKind::TyAlias, _) => {\n-                self.check_def_id(res.def_id());\n+            Res::Def(DefKind::Const | DefKind::AssocConst | DefKind::TyAlias, def_id) => {\n+                self.check_def_id(def_id);\n             }\n             _ if self.in_pat => {}\n             Res::PrimTy(..) | Res::SelfCtor(..) | Res::Local(..) => {}\n@@ -102,6 +100,7 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n                     self.check_def_id(variant_id);\n                 }\n             }\n+            Res::Def(_, def_id) => self.check_def_id(def_id),\n             Res::SelfTy { trait_: t, alias_to: i } => {\n                 if let Some(t) = t {\n                     self.check_def_id(t);\n@@ -111,9 +110,6 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n                 }\n             }\n             Res::ToolMod | Res::NonMacroAttr(..) | Res::Err => {}\n-            _ => {\n-                self.check_def_id(res.def_id());\n-            }\n         }\n     }\n \n@@ -285,20 +281,33 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n                     let def = self.tcx.adt_def(item.def_id);\n                     self.repr_has_repr_c = def.repr().c();\n \n-                    intravisit::walk_item(self, &item);\n-                }\n-                hir::ItemKind::Enum(..) => {\n-                    intravisit::walk_item(self, &item);\n+                    intravisit::walk_item(self, &item)\n                 }\n                 hir::ItemKind::ForeignMod { .. } => {}\n-                _ => {\n-                    intravisit::walk_item(self, &item);\n-                }\n+                _ => intravisit::walk_item(self, &item),\n             },\n             Node::TraitItem(trait_item) => {\n                 intravisit::walk_trait_item(self, trait_item);\n             }\n             Node::ImplItem(impl_item) => {\n+                let item = self.tcx.local_parent(impl_item.def_id);\n+                if self.tcx.impl_trait_ref(item).is_none() {\n+                    //// If it's a type whose items are live, then it's live, too.\n+                    //// This is done to handle the case where, for example, the static\n+                    //// method of a private type is used, but the type itself is never\n+                    //// called directly.\n+                    let self_ty = self.tcx.type_of(item);\n+                    match *self_ty.kind() {\n+                        ty::Adt(def, _) => self.check_def_id(def.did()),\n+                        ty::Foreign(did) => self.check_def_id(did),\n+                        ty::Dynamic(data, ..) => {\n+                            if let Some(def_id) = data.principal_def_id() {\n+                                self.check_def_id(def_id)\n+                            }\n+                        }\n+                        _ => {}\n+                    }\n+                }\n                 intravisit::walk_impl_item(self, impl_item);\n             }\n             Node::ForeignItem(foreign_item) => {\n@@ -624,8 +633,7 @@ fn live_symbols_and_ignored_derived_traits<'tcx>(\n }\n \n struct DeadVariant {\n-    hir_id: hir::HirId,\n-    span: Span,\n+    def_id: LocalDefId,\n     name: Symbol,\n     level: lint::Level,\n }\n@@ -637,85 +645,53 @@ struct DeadVisitor<'tcx> {\n }\n \n impl<'tcx> DeadVisitor<'tcx> {\n-    fn should_warn_about_item(&mut self, item: &hir::Item<'_>) -> bool {\n-        let should_warn = matches!(\n-            item.kind,\n-            hir::ItemKind::Static(..)\n-                | hir::ItemKind::Const(..)\n-                | hir::ItemKind::Fn(..)\n-                | hir::ItemKind::TyAlias(..)\n-                | hir::ItemKind::Enum(..)\n-                | hir::ItemKind::Struct(..)\n-                | hir::ItemKind::Union(..)\n-        );\n-        should_warn && !self.symbol_is_live(item.def_id)\n-    }\n-\n-    fn should_warn_about_field(&mut self, field: &hir::FieldDef<'_>) -> bool {\n-        let def_id = self.tcx.hir().local_def_id(field.hir_id);\n-        let field_type = self.tcx.type_of(def_id);\n-        !field.is_positional()\n-            && !self.symbol_is_live(def_id)\n-            && !field_type.is_phantom_data()\n-            && !has_allow_dead_code_or_lang_attr(self.tcx, field.hir_id)\n-    }\n-\n-    fn should_warn_about_variant(&mut self, variant: &hir::Variant<'_>) -> bool {\n-        let def_id = self.tcx.hir().local_def_id(variant.id);\n-        !self.symbol_is_live(def_id) && !has_allow_dead_code_or_lang_attr(self.tcx, variant.id)\n-    }\n-\n-    fn should_warn_about_foreign_item(&mut self, fi: &hir::ForeignItem<'_>) -> bool {\n-        !self.symbol_is_live(fi.def_id) && !has_allow_dead_code_or_lang_attr(self.tcx, fi.hir_id())\n-    }\n-\n-    // id := HIR id of an item's definition.\n-    fn symbol_is_live(&mut self, def_id: LocalDefId) -> bool {\n-        if self.live_symbols.contains(&def_id) {\n-            return true;\n+    fn should_warn_about_field(&mut self, field: &ty::FieldDef) -> bool {\n+        if self.live_symbols.contains(&field.did.expect_local()) {\n+            return false;\n         }\n-        // If it's a type whose items are live, then it's live, too.\n-        // This is done to handle the case where, for example, the static\n-        // method of a private type is used, but the type itself is never\n-        // called directly.\n-        let inherent_impls = self.tcx.inherent_impls(def_id);\n-        for &impl_did in inherent_impls.iter() {\n-            for item_did in self.tcx.associated_item_def_ids(impl_did) {\n-                if let Some(def_id) = item_did.as_local()\n-                    && self.live_symbols.contains(&def_id)\n-                {\n-                    return true;\n-                }\n-            }\n+        let is_positional = field.name.as_str().starts_with(|c: char| c.is_ascii_digit());\n+        if is_positional {\n+            return false;\n         }\n-        false\n+        let field_type = self.tcx.type_of(field.did);\n+        !field_type.is_phantom_data()\n     }\n \n     fn warn_multiple_dead_codes(\n         &self,\n-        dead_codes: &[(hir::HirId, Span, Symbol)],\n+        dead_codes: &[LocalDefId],\n         participle: &str,\n-        parent_hir_id: Option<hir::HirId>,\n+        parent_item: Option<LocalDefId>,\n     ) {\n-        if let Some((id, _, name)) = dead_codes.first()\n-            && !name.as_str().starts_with('_')\n-        {\n-            self.tcx.struct_span_lint_hir(\n+        if let Some(&first_id) = dead_codes.first() {\n+            let tcx = self.tcx;\n+            let names: Vec<_> = dead_codes\n+                .iter()\n+                .map(|&def_id| tcx.item_name(def_id.to_def_id()).to_string())\n+                .collect();\n+            let spans = dead_codes\n+                .iter()\n+                .map(|&def_id| match tcx.def_ident_span(def_id) {\n+                    Some(s) => s.with_ctxt(tcx.def_span(def_id).ctxt()),\n+                    None => tcx.def_span(def_id),\n+                })\n+                .collect();\n+\n+            tcx.struct_span_lint_hir(\n                 lint::builtin::DEAD_CODE,\n-                *id,\n-                MultiSpan::from_spans(\n-                    dead_codes.iter().map(|(_, span, _)| *span).collect(),\n-                ),\n+                tcx.hir().local_def_id_to_hir_id(first_id),\n+                MultiSpan::from_spans(spans),\n                 |lint| {\n-                    let def_id = self.tcx.hir().local_def_id(*id);\n-                    let descr = self.tcx.def_kind(def_id).descr(def_id.to_def_id());\n+                    let descr = tcx.def_kind(first_id).descr(first_id.to_def_id());\n                     let span_len = dead_codes.len();\n-                    let names = match &dead_codes.iter().map(|(_, _, n)| n.to_string()).collect::<Vec<_>>()[..]\n-                    {\n+                    let names = match &names[..] {\n                         _ if span_len > 6 => String::new(),\n                         [name] => format!(\"`{name}` \"),\n                         [names @ .., last] => {\n-                            format!(\"{} and `{last}` \", names.iter().map(|name| format!(\"`{name}`\")).join(\", \"))\n+                            format!(\n+                                \"{} and `{last}` \",\n+                                names.iter().map(|name| format!(\"`{name}`\")).join(\", \")\n+                            )\n                         }\n                         [] => unreachable!(),\n                     };\n@@ -725,25 +701,17 @@ impl<'tcx> DeadVisitor<'tcx> {\n                         s = pluralize!(span_len),\n                         are = pluralize!(\"is\", span_len),\n                     ));\n-                    let hir = self.tcx.hir();\n-                    if let Some(parent_hir_id) = parent_hir_id\n-                        && let Some(parent_node) = hir.find(parent_hir_id)\n-                        && let Node::Item(item) = parent_node\n-                    {\n-                        let def_id = self.tcx.hir().local_def_id(parent_hir_id);\n-                        let parent_descr = self.tcx.def_kind(def_id).descr(def_id.to_def_id());\n+\n+                    if let Some(parent_item) = parent_item {\n+                        let parent_descr = tcx.def_kind(parent_item).descr(parent_item.to_def_id());\n                         err.span_label(\n-                            item.ident.span,\n-                            format!(\n-                                \"{descr}{s} in this {parent_descr}\",\n-                                s = pluralize!(span_len)\n-                            ),\n+                            tcx.def_ident_span(parent_item).unwrap(),\n+                            format!(\"{descr}{s} in this {parent_descr}\", s = pluralize!(span_len)),\n                         );\n                     }\n-                    if let Some(encl_scope) = hir.get_enclosing_scope(*id)\n-                        && let Some(encl_def_id) = hir.opt_local_def_id(encl_scope)\n-                        && let Some(ign_traits) = self.ignored_derived_traits.get(&encl_def_id)\n-                    {\n+\n+                    let encl_def_id = parent_item.unwrap_or(first_id);\n+                    if let Some(ign_traits) = self.ignored_derived_traits.get(&encl_def_id) {\n                         let traits_str = ign_traits\n                             .iter()\n                             .map(|(trait_id, _)| format!(\"`{}`\", self.tcx.item_name(*trait_id)))\n@@ -764,15 +732,15 @@ impl<'tcx> DeadVisitor<'tcx> {\n                         );\n                         err.note(&msg);\n                     }\n-                        err.emit();\n-                    },\n+                    err.emit();\n+                },\n             );\n         }\n     }\n \n     fn warn_dead_fields_and_variants(\n         &self,\n-        hir_id: hir::HirId,\n+        def_id: LocalDefId,\n         participle: &str,\n         dead_codes: Vec<DeadVariant>,\n     ) {\n@@ -787,207 +755,110 @@ impl<'tcx> DeadVisitor<'tcx> {\n         dead_codes.sort_by_key(|v| v.level);\n         for (_, group) in &dead_codes.into_iter().group_by(|v| v.level) {\n             self.warn_multiple_dead_codes(\n-                &group\n-                    .map(|v| (v.hir_id, v.span, v.name))\n-                    .collect::<Vec<(hir::HirId, Span, Symbol)>>(),\n+                &group.map(|v| v.def_id).collect::<Vec<_>>(),\n                 participle,\n-                Some(hir_id),\n+                Some(def_id),\n             );\n         }\n     }\n \n-    fn warn_dead_code(\n-        &mut self,\n-        id: hir::HirId,\n-        span: rustc_span::Span,\n-        name: Symbol,\n-        participle: &str,\n-    ) {\n-        self.warn_multiple_dead_codes(&[(id, span, name)], participle, None);\n+    fn warn_dead_code(&mut self, id: LocalDefId, participle: &str) {\n+        self.warn_multiple_dead_codes(&[id], participle, None);\n     }\n-}\n \n-impl<'tcx> Visitor<'tcx> for DeadVisitor<'tcx> {\n-    type NestedFilter = nested_filter::All;\n-\n-    /// Walk nested items in place so that we don't report dead-code\n-    /// on inner functions when the outer function is already getting\n-    /// an error. We could do this also by checking the parents, but\n-    /// this is how the code is setup and it seems harmless enough.\n-    fn nested_visit_map(&mut self) -> Self::Map {\n-        self.tcx.hir()\n-    }\n-\n-    fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n-        if self.should_warn_about_item(item) {\n-            // For most items, we want to highlight its identifier\n-            let span = match item.kind {\n-                hir::ItemKind::Fn(..)\n-                | hir::ItemKind::Mod(..)\n-                | hir::ItemKind::Enum(..)\n-                | hir::ItemKind::Struct(..)\n-                | hir::ItemKind::Union(..)\n-                | hir::ItemKind::Trait(..)\n-                | hir::ItemKind::Impl { .. } => {\n-                    // FIXME(66095): Because item.span is annotated with things\n-                    // like expansion data, and ident.span isn't, we use the\n-                    // def_span method if it's part of a macro invocation\n-                    // (and thus has a source_callee set).\n-                    // We should probably annotate ident.span with the macro\n-                    // context, but that's a larger change.\n-                    if item.span.source_callee().is_some() {\n-                        self.tcx.sess.source_map().guess_head_span(item.span)\n-                    } else {\n-                        item.ident.span\n-                    }\n-                }\n-                _ => item.span,\n-            };\n-            let participle = match item.kind {\n-                hir::ItemKind::Struct(..) => \"constructed\", // Issue #52325\n-                _ => \"used\",\n-            };\n-            self.warn_dead_code(item.hir_id(), span, item.ident.name, participle);\n-        } else {\n-            // Only continue if we didn't warn\n-            intravisit::walk_item(self, item);\n+    fn check_definition(&mut self, def_id: LocalDefId) {\n+        if self.live_symbols.contains(&def_id) {\n+            return;\n+        }\n+        let hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id);\n+        if has_allow_dead_code_or_lang_attr(self.tcx, hir_id) {\n+            return;\n+        }\n+        let Some(name) = self.tcx.opt_item_name(def_id.to_def_id()) else {\n+            return\n+        };\n+        if name.as_str().starts_with('_') {\n+            return;\n+        }\n+        match self.tcx.def_kind(def_id) {\n+            DefKind::AssocConst\n+            | DefKind::AssocFn\n+            | DefKind::Fn\n+            | DefKind::Static(_)\n+            | DefKind::Const\n+            | DefKind::TyAlias\n+            | DefKind::Enum\n+            | DefKind::Union\n+            | DefKind::ForeignTy => self.warn_dead_code(def_id, \"used\"),\n+            DefKind::Struct => self.warn_dead_code(def_id, \"constructed\"),\n+            DefKind::Variant | DefKind::Field => bug!(\"should be handled specially\"),\n+            _ => {}\n         }\n     }\n+}\n \n-    // This visitor should only visit a single module at a time.\n-    fn visit_mod(&mut self, _: &'tcx hir::Mod<'tcx>, _: Span, _: hir::HirId) {}\n+fn check_mod_deathness(tcx: TyCtxt<'_>, module: LocalDefId) {\n+    let (live_symbols, ignored_derived_traits) = tcx.live_symbols_and_ignored_derived_traits(());\n+    let mut visitor = DeadVisitor { tcx, live_symbols, ignored_derived_traits };\n \n-    fn visit_enum_def(\n-        &mut self,\n-        enum_definition: &'tcx hir::EnumDef<'tcx>,\n-        generics: &'tcx hir::Generics<'tcx>,\n-        item_id: hir::HirId,\n-        _: Span,\n-    ) {\n-        intravisit::walk_enum_def(self, enum_definition, generics, item_id);\n-        let dead_variants = enum_definition\n-            .variants\n-            .iter()\n-            .filter_map(|variant| {\n-                if self.should_warn_about_variant(&variant) {\n-                    Some(DeadVariant {\n-                        hir_id: variant.id,\n-                        span: variant.span,\n-                        name: variant.ident.name,\n-                        level: self.tcx.lint_level_at_node(lint::builtin::DEAD_CODE, variant.id).0,\n-                    })\n-                } else {\n-                    None\n-                }\n-            })\n-            .collect();\n-        self.warn_dead_fields_and_variants(item_id, \"constructed\", dead_variants)\n-    }\n+    let module_items = tcx.hir_module_items(module);\n \n-    fn visit_variant(\n-        &mut self,\n-        variant: &'tcx hir::Variant<'tcx>,\n-        g: &'tcx hir::Generics<'tcx>,\n-        id: hir::HirId,\n-    ) {\n-        if !self.should_warn_about_variant(&variant) {\n-            intravisit::walk_variant(self, variant, g, id);\n+    for item in module_items.items() {\n+        if !live_symbols.contains(&item.def_id) {\n+            let parent = tcx.local_parent(item.def_id);\n+            if parent != module && !live_symbols.contains(&parent) {\n+                // We already have diagnosed something.\n+                continue;\n+            }\n+            visitor.check_definition(item.def_id);\n+            continue;\n         }\n-    }\n \n-    fn visit_foreign_item(&mut self, fi: &'tcx hir::ForeignItem<'tcx>) {\n-        if self.should_warn_about_foreign_item(fi) {\n-            self.warn_dead_code(fi.hir_id(), fi.span, fi.ident.name, \"used\");\n-        }\n-        intravisit::walk_foreign_item(self, fi);\n-    }\n+        let def_kind = tcx.def_kind(item.def_id);\n+        if let DefKind::Struct | DefKind::Union | DefKind::Enum = def_kind {\n+            let adt = tcx.adt_def(item.def_id);\n+            let mut dead_variants = Vec::new();\n \n-    fn visit_variant_data(\n-        &mut self,\n-        def: &'tcx hir::VariantData<'tcx>,\n-        _: Symbol,\n-        _: &hir::Generics<'_>,\n-        id: hir::HirId,\n-        _: rustc_span::Span,\n-    ) {\n-        intravisit::walk_struct_def(self, def);\n-        let dead_fields = def\n-            .fields()\n-            .iter()\n-            .filter_map(|field| {\n-                if self.should_warn_about_field(&field) {\n-                    Some(DeadVariant {\n-                        hir_id: field.hir_id,\n-                        span: field.span,\n-                        name: field.ident.name,\n-                        level: self\n-                            .tcx\n-                            .lint_level_at_node(lint::builtin::DEAD_CODE, field.hir_id)\n-                            .0,\n-                    })\n-                } else {\n-                    None\n+            for variant in adt.variants() {\n+                let def_id = variant.def_id.expect_local();\n+                if !live_symbols.contains(&def_id) {\n+                    // Record to group diagnostics.\n+                    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n+                    let level = tcx.lint_level_at_node(lint::builtin::DEAD_CODE, hir_id).0;\n+                    dead_variants.push(DeadVariant { def_id, name: variant.name, level });\n+                    continue;\n                 }\n-            })\n-            .collect();\n-        self.warn_dead_fields_and_variants(id, \"read\", dead_fields)\n-    }\n-\n-    fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n-        match impl_item.kind {\n-            hir::ImplItemKind::Const(_, body_id) => {\n-                if !self.symbol_is_live(impl_item.def_id) {\n-                    self.warn_dead_code(\n-                        impl_item.hir_id(),\n-                        impl_item.span,\n-                        impl_item.ident.name,\n-                        \"used\",\n-                    );\n-                }\n-                self.visit_nested_body(body_id)\n-            }\n-            hir::ImplItemKind::Fn(_, body_id) => {\n-                if !self.symbol_is_live(impl_item.def_id) {\n-                    // FIXME(66095): Because impl_item.span is annotated with things\n-                    // like expansion data, and ident.span isn't, we use the\n-                    // def_span method if it's part of a macro invocation\n-                    // (and thus has a source_callee set).\n-                    // We should probably annotate ident.span with the macro\n-                    // context, but that's a larger change.\n-                    let span = if impl_item.span.source_callee().is_some() {\n-                        self.tcx.sess.source_map().guess_head_span(impl_item.span)\n-                    } else {\n-                        impl_item.ident.span\n-                    };\n-                    self.warn_dead_code(impl_item.hir_id(), span, impl_item.ident.name, \"used\");\n-                }\n-                self.visit_nested_body(body_id)\n+\n+                let dead_fields = variant\n+                    .fields\n+                    .iter()\n+                    .filter_map(|field| {\n+                        let def_id = field.did.expect_local();\n+                        let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n+                        if visitor.should_warn_about_field(&field) {\n+                            let level = tcx.lint_level_at_node(lint::builtin::DEAD_CODE, hir_id).0;\n+                            Some(DeadVariant { def_id, name: field.name, level })\n+                        } else {\n+                            None\n+                        }\n+                    })\n+                    .collect();\n+                visitor.warn_dead_fields_and_variants(def_id, \"read\", dead_fields)\n             }\n-            hir::ImplItemKind::TyAlias(..) => {}\n+\n+            visitor.warn_dead_fields_and_variants(item.def_id, \"constructed\", dead_variants);\n         }\n     }\n \n-    // Overwrite so that we don't warn the trait item itself.\n-    fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem<'tcx>) {\n-        match trait_item.kind {\n-            hir::TraitItemKind::Const(_, Some(body_id))\n-            | hir::TraitItemKind::Fn(_, hir::TraitFn::Provided(body_id)) => {\n-                self.visit_nested_body(body_id)\n-            }\n-            hir::TraitItemKind::Const(_, None)\n-            | hir::TraitItemKind::Fn(_, hir::TraitFn::Required(_))\n-            | hir::TraitItemKind::Type(..) => {}\n-        }\n+    for impl_item in module_items.impl_items() {\n+        visitor.check_definition(impl_item.def_id);\n     }\n-}\n \n-fn check_mod_deathness(tcx: TyCtxt<'_>, module: LocalDefId) {\n-    let (live_symbols, ignored_derived_traits) = tcx.live_symbols_and_ignored_derived_traits(());\n-    let mut visitor = DeadVisitor { tcx, live_symbols, ignored_derived_traits };\n-    let (module, _, module_id) = tcx.hir().get_module(module);\n-    // Do not use an ItemLikeVisitor since we may want to skip visiting some items\n-    // when a surrounding one is warned against or `_`.\n-    intravisit::walk_mod(&mut visitor, module, module_id);\n+    for foreign_item in module_items.foreign_items() {\n+        visitor.check_definition(foreign_item.def_id);\n+    }\n+\n+    // We do not warn trait items.\n }\n \n pub(crate) fn provide(providers: &mut Providers) {"}, {"sha": "cc701cc4b9424f8d6a2c0af36042db1cf6446c0d", "filename": "src/test/ui/associated-consts/associated-const-dead-code.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b9775fe17893cba641a071de7e0a7c8f478c41b/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-dead-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b9775fe17893cba641a071de7e0a7c8f478c41b/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-dead-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-dead-code.stderr?ref=5b9775fe17893cba641a071de7e0a7c8f478c41b", "patch": "@@ -1,8 +1,8 @@\n error: associated constant `BAR` is never used\n-  --> $DIR/associated-const-dead-code.rs:6:5\n+  --> $DIR/associated-const-dead-code.rs:6:11\n    |\n LL |     const BAR: u32 = 1;\n-   |     ^^^^^^^^^^^^^^^^^^^\n+   |           ^^^\n    |\n note: the lint level is defined here\n   --> $DIR/associated-const-dead-code.rs:1:9"}, {"sha": "5696a010c3f80e6f5794025cb307322d121ba71d", "filename": "src/test/ui/closures/2229_closure_analysis/issue-87987.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b9775fe17893cba641a071de7e0a7c8f478c41b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-87987.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b9775fe17893cba641a071de7e0a7c8f478c41b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-87987.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-87987.stderr?ref=5b9775fe17893cba641a071de7e0a7c8f478c41b", "patch": "@@ -4,9 +4,9 @@ warning: fields `field_1` and `field_2` are never read\n LL | struct Props {\n    |        ----- fields in this struct\n LL |     field_1: u32,\n-   |     ^^^^^^^^^^^^\n+   |     ^^^^^^^\n LL |     field_2: u32,\n-   |     ^^^^^^^^^^^^\n+   |     ^^^^^^^\n    |\n    = note: `#[warn(dead_code)]` on by default\n "}, {"sha": "bd36a25686a30bc1d0b12cc9a45c2e55ab75f451", "filename": "src/test/ui/derive-uninhabited-enum-38885.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b9775fe17893cba641a071de7e0a7c8f478c41b/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b9775fe17893cba641a071de7e0a7c8f478c41b/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.stderr?ref=5b9775fe17893cba641a071de7e0a7c8f478c41b", "patch": "@@ -5,7 +5,7 @@ LL | enum Foo {\n    |      --- variant in this enum\n LL |     Bar(u8),\n LL |     Void(Void),\n-   |     ^^^^^^^^^^\n+   |     ^^^^\n    |\n    = note: `-W dead-code` implied by `-W unused`\n    = note: `Foo` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis"}, {"sha": "baf34b46d8b57c766b91bc102d7bb42b3d2f7442", "filename": "src/test/ui/derives/clone-debug-dead-code-in-the-same-struct.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b9775fe17893cba641a071de7e0a7c8f478c41b/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code-in-the-same-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b9775fe17893cba641a071de7e0a7c8f478c41b/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code-in-the-same-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code-in-the-same-struct.stderr?ref=5b9775fe17893cba641a071de7e0a7c8f478c41b", "patch": "@@ -5,13 +5,13 @@ LL | pub struct Whatever {\n    |            -------- fields in this struct\n LL |     pub field0: (),\n LL |     field1: (),\n-   |     ^^^^^^^^^^\n+   |     ^^^^^^\n LL |     field2: (),\n-   |     ^^^^^^^^^^\n+   |     ^^^^^^\n LL |     field3: (),\n-   |     ^^^^^^^^^^\n+   |     ^^^^^^\n LL |     field4: (),\n-   |     ^^^^^^^^^^\n+   |     ^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/clone-debug-dead-code-in-the-same-struct.rs:1:11"}, {"sha": "38be486e33207195ffac2256c6fb5f2bc8b58afb", "filename": "src/test/ui/derives/clone-debug-dead-code.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5b9775fe17893cba641a071de7e0a7c8f478c41b/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b9775fe17893cba641a071de7e0a7c8f478c41b/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code.stderr?ref=5b9775fe17893cba641a071de7e0a7c8f478c41b", "patch": "@@ -2,7 +2,7 @@ error: field `f` is never read\n   --> $DIR/clone-debug-dead-code.rs:6:12\n    |\n LL | struct A { f: () }\n-   |        -   ^^^^^\n+   |        -   ^\n    |        |\n    |        field in this struct\n    |\n@@ -16,7 +16,7 @@ error: field `f` is never read\n   --> $DIR/clone-debug-dead-code.rs:10:12\n    |\n LL | struct B { f: () }\n-   |        -   ^^^^^\n+   |        -   ^\n    |        |\n    |        field in this struct\n    |\n@@ -26,7 +26,7 @@ error: field `f` is never read\n   --> $DIR/clone-debug-dead-code.rs:14:12\n    |\n LL | struct C { f: () }\n-   |        -   ^^^^^\n+   |        -   ^\n    |        |\n    |        field in this struct\n    |\n@@ -36,7 +36,7 @@ error: field `f` is never read\n   --> $DIR/clone-debug-dead-code.rs:18:12\n    |\n LL | struct D { f: () }\n-   |        -   ^^^^^\n+   |        -   ^\n    |        |\n    |        field in this struct\n    |\n@@ -46,7 +46,7 @@ error: field `f` is never read\n   --> $DIR/clone-debug-dead-code.rs:21:12\n    |\n LL | struct E { f: () }\n-   |        -   ^^^^^\n+   |        -   ^\n    |        |\n    |        field in this struct\n "}, {"sha": "f1e83ca74d8e9748a4c458512448ee5a0992f5c7", "filename": "src/test/ui/issues/issue-37515.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b9775fe17893cba641a071de7e0a7c8f478c41b/src%2Ftest%2Fui%2Fissues%2Fissue-37515.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b9775fe17893cba641a071de7e0a7c8f478c41b/src%2Ftest%2Fui%2Fissues%2Fissue-37515.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37515.stderr?ref=5b9775fe17893cba641a071de7e0a7c8f478c41b", "patch": "@@ -1,8 +1,8 @@\n warning: type alias `Z` is never used\n-  --> $DIR/issue-37515.rs:5:1\n+  --> $DIR/issue-37515.rs:5:6\n    |\n LL | type Z = dyn for<'x> Send;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |      ^\n    |\n note: the lint level is defined here\n   --> $DIR/issue-37515.rs:3:9"}, {"sha": "e35e13a9ec6d607f0322d6438b2486e2fbd035f2", "filename": "src/test/ui/lint/dead-code/impl-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b9775fe17893cba641a071de7e0a7c8f478c41b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fimpl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b9775fe17893cba641a071de7e0a7c8f478c41b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fimpl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fimpl-trait.stderr?ref=5b9775fe17893cba641a071de7e0a7c8f478c41b", "patch": "@@ -1,8 +1,8 @@\n error: type alias `Unused` is never used\n-  --> $DIR/impl-trait.rs:12:1\n+  --> $DIR/impl-trait.rs:12:6\n    |\n LL | type Unused = ();\n-   | ^^^^^^^^^^^^^^^^^\n+   |      ^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/impl-trait.rs:1:9"}, {"sha": "3497b952fdd0b912b362b43a4d1807df433f9ade", "filename": "src/test/ui/lint/dead-code/issue-85255.stderr", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/5b9775fe17893cba641a071de7e0a7c8f478c41b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-85255.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b9775fe17893cba641a071de7e0a7c8f478c41b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-85255.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-85255.stderr?ref=5b9775fe17893cba641a071de7e0a7c8f478c41b", "patch": "@@ -4,16 +4,36 @@ warning: fields `a` and `b` are never read\n LL | struct Foo {\n    |        --- fields in this struct\n LL |     a: i32,\n-   |     ^^^^^^\n+   |     ^\n LL |     pub b: i32,\n-   |     ^^^^^^^^^^\n+   |         ^\n    |\n note: the lint level is defined here\n   --> $DIR/issue-85255.rs:4:9\n    |\n LL | #![warn(dead_code)]\n    |         ^^^^^^^^^\n \n+warning: fields `a` and `b` are never read\n+  --> $DIR/issue-85255.rs:19:5\n+   |\n+LL | pub(crate) struct Foo1 {\n+   |                   ---- fields in this struct\n+LL |     a: i32,\n+   |     ^\n+LL |     pub b: i32,\n+   |         ^\n+\n+warning: fields `a` and `b` are never read\n+  --> $DIR/issue-85255.rs:31:5\n+   |\n+LL | pub(crate) struct Foo2 {\n+   |                   ---- fields in this struct\n+LL |     a: i32,\n+   |     ^\n+LL |     pub b: i32,\n+   |         ^\n+\n warning: associated function `a` is never used\n   --> $DIR/issue-85255.rs:14:8\n    |\n@@ -26,16 +46,6 @@ warning: associated function `b` is never used\n LL |     pub fn b(&self) -> i32 { 6 }\n    |            ^\n \n-warning: fields `a` and `b` are never read\n-  --> $DIR/issue-85255.rs:19:5\n-   |\n-LL | pub(crate) struct Foo1 {\n-   |                   ---- fields in this struct\n-LL |     a: i32,\n-   |     ^^^^^^\n-LL |     pub b: i32,\n-   |     ^^^^^^^^^^\n-\n warning: associated function `a` is never used\n   --> $DIR/issue-85255.rs:26:8\n    |\n@@ -48,16 +58,6 @@ warning: associated function `b` is never used\n LL |     pub fn b(&self) -> i32 { 6 }\n    |            ^\n \n-warning: fields `a` and `b` are never read\n-  --> $DIR/issue-85255.rs:31:5\n-   |\n-LL | pub(crate) struct Foo2 {\n-   |                   ---- fields in this struct\n-LL |     a: i32,\n-   |     ^^^^^^\n-LL |     pub b: i32,\n-   |     ^^^^^^^^^^\n-\n warning: associated function `a` is never used\n   --> $DIR/issue-85255.rs:38:8\n    |"}, {"sha": "eb728b5b930551152727b285d3b51900db807640", "filename": "src/test/ui/lint/dead-code/lint-dead-code-1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b9775fe17893cba641a071de7e0a7c8f478c41b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b9775fe17893cba641a071de7e0a7c8f478c41b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-1.stderr?ref=5b9775fe17893cba641a071de7e0a7c8f478c41b", "patch": "@@ -1,8 +1,8 @@\n error: static `priv_static` is never used\n-  --> $DIR/lint-dead-code-1.rs:20:1\n+  --> $DIR/lint-dead-code-1.rs:20:8\n    |\n LL | static priv_static: isize = 0;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/lint-dead-code-1.rs:5:9\n@@ -11,10 +11,10 @@ LL | #![deny(dead_code)]\n    |         ^^^^^^^^^\n \n error: constant `priv_const` is never used\n-  --> $DIR/lint-dead-code-1.rs:27:1\n+  --> $DIR/lint-dead-code-1.rs:27:7\n    |\n LL | const priv_const: isize = 0;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |       ^^^^^^^^^^\n \n error: struct `PrivStruct` is never constructed\n   --> $DIR/lint-dead-code-1.rs:35:8"}, {"sha": "293fcdbc5ee7f68e25371abdbccfdebec5c177b8", "filename": "src/test/ui/lint/dead-code/lint-dead-code-3.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5b9775fe17893cba641a071de7e0a7c8f478c41b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b9775fe17893cba641a071de7e0a7c8f478c41b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.rs?ref=5b9775fe17893cba641a071de7e0a7c8f478c41b", "patch": "@@ -73,7 +73,18 @@ mod inner {\n     fn f() {}\n }\n \n+fn anon_const() -> [(); {\n+    fn blah() {} //~ ERROR: function `blah` is never used\n+    1\n+}] {\n+    [(); {\n+        fn blah() {} //~ ERROR: function `blah` is never used\n+        1\n+    }]\n+}\n+\n pub fn foo() {\n     let a: &dyn inner::Trait = &1_isize;\n     a.f();\n+    anon_const();\n }"}, {"sha": "26fc13bae08a1fcd197a7b4810a9f530d14bf10e", "filename": "src/test/ui/lint/dead-code/lint-dead-code-3.stderr", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5b9775fe17893cba641a071de7e0a7c8f478c41b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b9775fe17893cba641a071de7e0a7c8f478c41b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.stderr?ref=5b9775fe17893cba641a071de7e0a7c8f478c41b", "patch": "@@ -10,12 +10,6 @@ note: the lint level is defined here\n LL | #![deny(dead_code)]\n    |         ^^^^^^^^^\n \n-error: associated function `foo` is never used\n-  --> $DIR/lint-dead-code-3.rs:16:8\n-   |\n-LL |     fn foo(&self) {\n-   |        ^^^\n-\n error: function `bar` is never used\n   --> $DIR/lint-dead-code-3.rs:21:4\n    |\n@@ -28,11 +22,29 @@ error: enum `c_void` is never used\n LL | enum c_void {}\n    |      ^^^^^^\n \n+error: function `blah` is never used\n+  --> $DIR/lint-dead-code-3.rs:77:8\n+   |\n+LL |     fn blah() {}\n+   |        ^^^^\n+\n+error: function `blah` is never used\n+  --> $DIR/lint-dead-code-3.rs:81:12\n+   |\n+LL |         fn blah() {}\n+   |            ^^^^\n+\n+error: associated function `foo` is never used\n+  --> $DIR/lint-dead-code-3.rs:16:8\n+   |\n+LL |     fn foo(&self) {\n+   |        ^^^\n+\n error: function `free` is never used\n-  --> $DIR/lint-dead-code-3.rs:62:5\n+  --> $DIR/lint-dead-code-3.rs:62:8\n    |\n LL |     fn free(p: *const c_void);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 7 previous errors\n "}, {"sha": "668c1dacf95a7a35b8583ca7f500c91c932e37a6", "filename": "src/test/ui/lint/dead-code/lint-dead-code-4.stderr", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5b9775fe17893cba641a071de7e0a7c8f478c41b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b9775fe17893cba641a071de7e0a7c8f478c41b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-4.stderr?ref=5b9775fe17893cba641a071de7e0a7c8f478c41b", "patch": "@@ -5,7 +5,7 @@ LL | struct Foo {\n    |        --- field in this struct\n LL |     x: usize,\n LL |     b: bool,\n-   |     ^^^^^^^\n+   |     ^\n    |\n note: the lint level is defined here\n   --> $DIR/lint-dead-code-4.rs:3:9\n@@ -16,16 +16,12 @@ LL | #![deny(dead_code)]\n error: variants `X` and `Y` are never constructed\n   --> $DIR/lint-dead-code-4.rs:15:5\n    |\n-LL |   enum XYZ {\n-   |        --- variants in this enum\n-LL |       X,\n-   |       ^\n-LL | /     Y {\n-LL | |         a: String,\n-LL | |         b: i32,\n-LL | |         c: i32,\n-LL | |     },\n-   | |_____^\n+LL | enum XYZ {\n+   |      --- variants in this enum\n+LL |     X,\n+   |     ^\n+LL |     Y {\n+   |     ^\n \n error: enum `ABC` is never used\n   --> $DIR/lint-dead-code-4.rs:24:6\n@@ -36,13 +32,13 @@ LL | enum ABC {\n error: fields `b` and `c` are never read\n   --> $DIR/lint-dead-code-4.rs:39:9\n    |\n-LL | enum IJK {\n-   |      --- fields in this enum\n-...\n+LL |     J {\n+   |     - fields in this variant\n+LL |         a: String,\n LL |         b: i32,\n-   |         ^^^^^^\n+   |         ^\n LL |         c: i32,\n-   |         ^^^^^^\n+   |         ^\n \n error: variants `I` and `K` are never constructed\n   --> $DIR/lint-dead-code-4.rs:36:5\n@@ -61,10 +57,10 @@ error: fields `x` and `c` are never read\n LL | struct Bar {\n    |        --- fields in this struct\n LL |     x: usize,\n-   |     ^^^^^^^^\n+   |     ^\n LL |     b: bool,\n LL |     c: bool,\n-   |     ^^^^^^^\n+   |     ^\n \n error: aborting due to 6 previous errors\n "}, {"sha": "eaf43e4536104257bd7edbff1b76d9660ba6ff8a", "filename": "src/test/ui/lint/dead-code/lint-dead-code-5.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b9775fe17893cba641a071de7e0a7c8f478c41b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b9775fe17893cba641a071de7e0a7c8f478c41b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-5.stderr?ref=5b9775fe17893cba641a071de7e0a7c8f478c41b", "patch": "@@ -20,9 +20,9 @@ LL | enum Enum2 {\n    |      ----- variants in this enum\n ...\n LL |     Variant5 { _x: isize },\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^\n LL |     Variant6(isize),\n-   |     ^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^\n \n error: enum `Enum3` is never used\n   --> $DIR/lint-dead-code-5.rs:35:6"}, {"sha": "c0f1ed38f6de3bd9cb5512ce587f95dacba2bda8", "filename": "src/test/ui/lint/dead-code/multiple-dead-codes-in-the-same-struct.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5b9775fe17893cba641a071de7e0a7c8f478c41b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fmultiple-dead-codes-in-the-same-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b9775fe17893cba641a071de7e0a7c8f478c41b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fmultiple-dead-codes-in-the-same-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fmultiple-dead-codes-in-the-same-struct.stderr?ref=5b9775fe17893cba641a071de7e0a7c8f478c41b", "patch": "@@ -5,12 +5,12 @@ LL | struct Bar {\n    |        --- fields in this struct\n ...\n LL |     d: usize,\n-   |     ^^^^^^^^\n+   |     ^\n ...\n LL |     f: usize,\n-   |     ^^^^^^^^\n+   |     ^\n LL |     g: usize,\n-   |     ^^^^^^^^\n+   |     ^\n    |\n note: the lint level is defined here\n   --> $DIR/multiple-dead-codes-in-the-same-struct.rs:1:9\n@@ -25,10 +25,10 @@ LL | struct Bar {\n    |        --- fields in this struct\n ...\n LL |     c: usize,\n-   |     ^^^^^^^^\n+   |     ^\n ...\n LL |     e: usize,\n-   |     ^^^^^^^^\n+   |     ^\n    |\n note: the lint level is defined here\n   --> $DIR/multiple-dead-codes-in-the-same-struct.rs:8:12\n@@ -43,7 +43,7 @@ LL | struct Bar {\n    |        --- field in this struct\n ...\n LL |     b: usize,\n-   |     ^^^^^^^^\n+   |     ^\n    |\n note: the lint level is defined here\n   --> $DIR/multiple-dead-codes-in-the-same-struct.rs:6:14"}, {"sha": "446447d974a865d23868fe44c53461366ff8e1e6", "filename": "src/test/ui/lint/dead-code/type-alias.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b9775fe17893cba641a071de7e0a7c8f478c41b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Ftype-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b9775fe17893cba641a071de7e0a7c8f478c41b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Ftype-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Ftype-alias.stderr?ref=5b9775fe17893cba641a071de7e0a7c8f478c41b", "patch": "@@ -1,8 +1,8 @@\n error: type alias `Unused` is never used\n-  --> $DIR/type-alias.rs:4:1\n+  --> $DIR/type-alias.rs:4:6\n    |\n LL | type Unused = u8;\n-   | ^^^^^^^^^^^^^^^^^\n+   |      ^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/type-alias.rs:1:9"}, {"sha": "d26dd3aff95477bac8d0033b363e5637b810beaa", "filename": "src/test/ui/lint/dead-code/unused-struct-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b9775fe17893cba641a071de7e0a7c8f478c41b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Funused-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b9775fe17893cba641a071de7e0a7c8f478c41b/src%2Ftest%2Fui%2Flint%2Fdead-code%2Funused-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Funused-struct-variant.stderr?ref=5b9775fe17893cba641a071de7e0a7c8f478c41b", "patch": "@@ -5,7 +5,7 @@ LL | enum E {\n    |      - variant in this enum\n LL |     Foo(F),\n LL |     Bar(B),\n-   |     ^^^^^^\n+   |     ^^^\n    |\n note: the lint level is defined here\n   --> $DIR/unused-struct-variant.rs:1:9"}, {"sha": "7d2aadd5f808171f3975dcf4351d10d21e4c324c", "filename": "src/test/ui/lint/issue-17718-const-naming.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b9775fe17893cba641a071de7e0a7c8f478c41b/src%2Ftest%2Fui%2Flint%2Fissue-17718-const-naming.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b9775fe17893cba641a071de7e0a7c8f478c41b/src%2Ftest%2Fui%2Flint%2Fissue-17718-const-naming.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-17718-const-naming.stderr?ref=5b9775fe17893cba641a071de7e0a7c8f478c41b", "patch": "@@ -1,8 +1,8 @@\n error: constant `foo` is never used\n-  --> $DIR/issue-17718-const-naming.rs:4:1\n+  --> $DIR/issue-17718-const-naming.rs:4:7\n    |\n LL | const foo: isize = 3;\n-   | ^^^^^^^^^^^^^^^^^^^^^\n+   |       ^^^\n    |\n note: the lint level is defined here\n   --> $DIR/issue-17718-const-naming.rs:2:9"}, {"sha": "5dd5634288970617ccb68b143a31ab13e07b49f1", "filename": "src/test/ui/span/macro-span-replacement.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b9775fe17893cba641a071de7e0a7c8f478c41b/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b9775fe17893cba641a071de7e0a7c8f478c41b/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.stderr?ref=5b9775fe17893cba641a071de7e0a7c8f478c41b", "patch": "@@ -1,8 +1,8 @@\n warning: struct `S` is never constructed\n-  --> $DIR/macro-span-replacement.rs:7:14\n+  --> $DIR/macro-span-replacement.rs:7:12\n    |\n LL |         $b $a;\n-   |              ^\n+   |            ^^\n ...\n LL |     m!(S struct);\n    |     ------------ in this macro invocation"}, {"sha": "0c9981c69fcba775217bd9fa07a4926458b3fd6b", "filename": "src/test/ui/union/union-fields-1.mirunsafeck.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b9775fe17893cba641a071de7e0a7c8f478c41b/src%2Ftest%2Fui%2Funion%2Funion-fields-1.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b9775fe17893cba641a071de7e0a7c8f478c41b/src%2Ftest%2Fui%2Funion%2Funion-fields-1.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-fields-1.mirunsafeck.stderr?ref=5b9775fe17893cba641a071de7e0a7c8f478c41b", "patch": "@@ -5,7 +5,7 @@ LL | union U1 {\n    |       -- field in this union\n ...\n LL |     c: u8,\n-   |     ^^^^^\n+   |     ^\n    |\n note: the lint level is defined here\n   --> $DIR/union-fields-1.rs:4:9\n@@ -19,13 +19,13 @@ error: field `a` is never read\n LL | union U2 {\n    |       -- field in this union\n LL |     a: u8,\n-   |     ^^^^^\n+   |     ^\n \n error: field `a` is never read\n   --> $DIR/union-fields-1.rs:16:20\n    |\n LL | union NoDropLike { a: u8 }\n-   |       ----------   ^^^^^\n+   |       ----------   ^\n    |       |\n    |       field in this union\n \n@@ -36,7 +36,7 @@ LL | union U {\n    |       - field in this union\n ...\n LL |     c: u8,\n-   |     ^^^^^\n+   |     ^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "0c9981c69fcba775217bd9fa07a4926458b3fd6b", "filename": "src/test/ui/union/union-fields-1.thirunsafeck.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b9775fe17893cba641a071de7e0a7c8f478c41b/src%2Ftest%2Fui%2Funion%2Funion-fields-1.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b9775fe17893cba641a071de7e0a7c8f478c41b/src%2Ftest%2Fui%2Funion%2Funion-fields-1.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-fields-1.thirunsafeck.stderr?ref=5b9775fe17893cba641a071de7e0a7c8f478c41b", "patch": "@@ -5,7 +5,7 @@ LL | union U1 {\n    |       -- field in this union\n ...\n LL |     c: u8,\n-   |     ^^^^^\n+   |     ^\n    |\n note: the lint level is defined here\n   --> $DIR/union-fields-1.rs:4:9\n@@ -19,13 +19,13 @@ error: field `a` is never read\n LL | union U2 {\n    |       -- field in this union\n LL |     a: u8,\n-   |     ^^^^^\n+   |     ^\n \n error: field `a` is never read\n   --> $DIR/union-fields-1.rs:16:20\n    |\n LL | union NoDropLike { a: u8 }\n-   |       ----------   ^^^^^\n+   |       ----------   ^\n    |       |\n    |       field in this union\n \n@@ -36,7 +36,7 @@ LL | union U {\n    |       - field in this union\n ...\n LL |     c: u8,\n-   |     ^^^^^\n+   |     ^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "6e21584c37c06186867d74468a1c9c8494d5630e", "filename": "src/test/ui/union/union-lint-dead-code.mirunsafeck.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b9775fe17893cba641a071de7e0a7c8f478c41b/src%2Ftest%2Fui%2Funion%2Funion-lint-dead-code.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b9775fe17893cba641a071de7e0a7c8f478c41b/src%2Ftest%2Fui%2Funion%2Funion-lint-dead-code.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-lint-dead-code.mirunsafeck.stderr?ref=5b9775fe17893cba641a071de7e0a7c8f478c41b", "patch": "@@ -5,7 +5,7 @@ LL | union Foo {\n    |       --- field in this union\n LL |     x: usize,\n LL |     b: bool,\n-   |     ^^^^^^^\n+   |     ^\n    |\n note: the lint level is defined here\n   --> $DIR/union-lint-dead-code.rs:4:9"}, {"sha": "6e21584c37c06186867d74468a1c9c8494d5630e", "filename": "src/test/ui/union/union-lint-dead-code.thirunsafeck.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b9775fe17893cba641a071de7e0a7c8f478c41b/src%2Ftest%2Fui%2Funion%2Funion-lint-dead-code.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b9775fe17893cba641a071de7e0a7c8f478c41b/src%2Ftest%2Fui%2Funion%2Funion-lint-dead-code.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-lint-dead-code.thirunsafeck.stderr?ref=5b9775fe17893cba641a071de7e0a7c8f478c41b", "patch": "@@ -5,7 +5,7 @@ LL | union Foo {\n    |       --- field in this union\n LL |     x: usize,\n LL |     b: bool,\n-   |     ^^^^^^^\n+   |     ^\n    |\n note: the lint level is defined here\n   --> $DIR/union-lint-dead-code.rs:4:9"}]}