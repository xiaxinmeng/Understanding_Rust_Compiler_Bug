{"sha": "d048e15835e19841211ae7725511dc946bdde5e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwNDhlMTU4MzVlMTk4NDEyMTFhZTc3MjU1MTFkYzk0NmJkZGU1ZTI=", "commit": {"author": {"name": "daxpedda", "email": "daxpedda@users.noreply.github.com", "date": "2018-12-06T12:21:04Z"}, "committer": {"name": "daxpedda", "email": "daxpedda@users.noreply.github.com", "date": "2018-12-06T12:21:04Z"}, "message": "Improved code noted by clippy.", "tree": {"sha": "54f2f057bd7eb5f7744c0ccc2c86ad930d8cb372", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54f2f057bd7eb5f7744c0ccc2c86ad930d8cb372"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d048e15835e19841211ae7725511dc946bdde5e2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJWBAABCABAFiEEtfVYniVMfR+YKQUSxyLctqGR7qsFAlwJFDAiHGRheHBlZGRh\nQHVzZXJzLm5vcmVwbHkuZ2l0aHViLmNvbQAKCRDHIty2oZHuq2wAD/42nJa6QouN\nzAKuf5/LjgaCxcKJ9hJ5z9PIOkOEmB6HoAECe72aQtJQQa2K9WRS18a7DFfi1ezi\nHaZJ3imu+yKMrOoO+2r0DDStCac96UbUEgTFLoxUKQp39sgC5gSyxDeVZ4BfODKZ\nEnzzE83pMbA5jFOQKTOoVMm3FO0VYSpuz0K/kR4bRrNxGbkc7bNdRDhmw3UJZEnh\nvu29N2v4DE/jW1DMa8/0A8H02hqNI/RonPq1We3p1YjiPrMDZPOEJ2g0z6HuA2sx\n1J2Dz9QvN3JrDctJFQR3uTLOQWKqnhJw0jsS8dvvo6WW2MnMD2oubJqehFMHyxtv\n+FsohX8pZoglVMQYzu0RHhiDa3/knbv4RctGmh6oIhzQVsUsl/pKujFCg0ciV8WT\nOhSnwjB/YkjvZgH6Kp6r/wQXvi8Uc3jmgLVBMys0Oxf5g7nRAPBO2ouzsg1emS8n\nQRawUodZ01W7kma+wvGA7HdhKpt4DrAdQNua5/YqhulToTruFjDkPgEpMXqqoW/i\nlihnd71n7qjZe1hTs8BGspnQrkz6hG5mlMzGrM880/7hgaXwQQGxsRYM3XM+TaSR\nTeIkjZ6J9mI6KZO9fgRuEN0y148LvqEOux0n09cTYRpo0kRpiWtC9X2NPOFS7lmp\nX8c3z3/ztD1YO4VNC7VWzUoK8UiIcpQHOw==\n=wxXA\n-----END PGP SIGNATURE-----", "payload": "tree 54f2f057bd7eb5f7744c0ccc2c86ad930d8cb372\nparent 973d676cd105b3ec87e4edb99fc0fb63b374e213\nauthor daxpedda <daxpedda@users.noreply.github.com> 1544098864 +0100\ncommitter daxpedda <daxpedda@users.noreply.github.com> 1544098864 +0100\n\nImproved code noted by clippy.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d048e15835e19841211ae7725511dc946bdde5e2", "html_url": "https://github.com/rust-lang/rust/commit/d048e15835e19841211ae7725511dc946bdde5e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d048e15835e19841211ae7725511dc946bdde5e2/comments", "author": {"login": "daxpedda", "id": 1645124, "node_id": "MDQ6VXNlcjE2NDUxMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1645124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daxpedda", "html_url": "https://github.com/daxpedda", "followers_url": "https://api.github.com/users/daxpedda/followers", "following_url": "https://api.github.com/users/daxpedda/following{/other_user}", "gists_url": "https://api.github.com/users/daxpedda/gists{/gist_id}", "starred_url": "https://api.github.com/users/daxpedda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daxpedda/subscriptions", "organizations_url": "https://api.github.com/users/daxpedda/orgs", "repos_url": "https://api.github.com/users/daxpedda/repos", "events_url": "https://api.github.com/users/daxpedda/events{/privacy}", "received_events_url": "https://api.github.com/users/daxpedda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "daxpedda", "id": 1645124, "node_id": "MDQ6VXNlcjE2NDUxMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1645124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daxpedda", "html_url": "https://github.com/daxpedda", "followers_url": "https://api.github.com/users/daxpedda/followers", "following_url": "https://api.github.com/users/daxpedda/following{/other_user}", "gists_url": "https://api.github.com/users/daxpedda/gists{/gist_id}", "starred_url": "https://api.github.com/users/daxpedda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daxpedda/subscriptions", "organizations_url": "https://api.github.com/users/daxpedda/orgs", "repos_url": "https://api.github.com/users/daxpedda/repos", "events_url": "https://api.github.com/users/daxpedda/events{/privacy}", "received_events_url": "https://api.github.com/users/daxpedda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "973d676cd105b3ec87e4edb99fc0fb63b374e213", "url": "https://api.github.com/repos/rust-lang/rust/commits/973d676cd105b3ec87e4edb99fc0fb63b374e213", "html_url": "https://github.com/rust-lang/rust/commit/973d676cd105b3ec87e4edb99fc0fb63b374e213"}], "stats": {"total": 16, "additions": 3, "deletions": 13}, "files": [{"sha": "543948e39a73dce293b541cef365020c23a5df98", "filename": "clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d048e15835e19841211ae7725511dc946bdde5e2/clippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d048e15835e19841211ae7725511dc946bdde5e2/clippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_return.rs?ref=d048e15835e19841211ae7725511dc946bdde5e2", "patch": "@@ -7,6 +7,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![warn(clippy::match_same_arms)]\n use crate::rustc::hir::{intravisit::FnKind, Body, ExprKind, FnDecl};\n use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use crate::rustc::{declare_tool_lint, lint_array};\n@@ -47,7 +48,8 @@ pub struct Pass;\n impl Pass {\n     fn expr_match(cx: &LateContext<'_, '_>, expr: &rustc::hir::Expr) {\n         match &expr.node {\n-            ExprKind::Block(block, ..) => {\n+            // loops could be using `break` instead of `return`\n+            ExprKind::Block(block, ..) | ExprKind::Loop(block, ..) => {\n                 if let Some(expr) = &block.expr {\n                     Self::expr_match(cx, expr);\n                 }\n@@ -85,18 +87,6 @@ impl Pass {\n                     Self::expr_match(cx, &arm.body);\n                 }\n             },\n-            // loops could be using `break` instead of `return`\n-            ExprKind::Loop(block, ..) => {\n-                if let Some(expr) = &block.expr {\n-                    Self::expr_match(cx, expr);\n-                }\n-                // only needed in the case of `break` with `;` at the end\n-                else if let Some(stmt) = block.stmts.last() {\n-                    if let rustc::hir::StmtKind::Semi(expr, ..) = &stmt.node {\n-                        Self::expr_match(cx, expr);\n-                    }\n-                }\n-            },\n             // skip if it already has a return statement\n             ExprKind::Ret(..) => (),\n             // everything else is missing `return`"}]}