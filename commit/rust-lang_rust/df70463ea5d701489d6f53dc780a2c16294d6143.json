{"sha": "df70463ea5d701489d6f53dc780a2c16294d6143", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmNzA0NjNlYTVkNzAxNDg5ZDZmNTNkYzc4MGEyYzE2Mjk0ZDYxNDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-19T21:50:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-19T21:50:45Z"}, "message": "Auto merge of #85340 - the8472:no-inplaceiterable-on-peekable, r=yaahc\n\nremove InPlaceIterable marker from Peekable due to unsoundness\n\nThe unsoundness is not in Peekable per se, it rather is due to the\ninteraction between Peekable being able to hold an extra item\nand vec::IntoIter's clone implementation shortening the allocation.\n\nAn alternative solution would be to change IntoIter's clone implementation\nto keep enough spare capacity available.\n\nfixes #85322", "tree": {"sha": "a01a26a59164d97425941e490f60d849436c9d17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a01a26a59164d97425941e490f60d849436c9d17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df70463ea5d701489d6f53dc780a2c16294d6143", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df70463ea5d701489d6f53dc780a2c16294d6143", "html_url": "https://github.com/rust-lang/rust/commit/df70463ea5d701489d6f53dc780a2c16294d6143", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df70463ea5d701489d6f53dc780a2c16294d6143/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f94942d8421dc4b1da86d07069571ddb43127235", "url": "https://api.github.com/repos/rust-lang/rust/commits/f94942d8421dc4b1da86d07069571ddb43127235", "html_url": "https://github.com/rust-lang/rust/commit/f94942d8421dc4b1da86d07069571ddb43127235"}, {"sha": "7cb4e5180f16ad83d39da9555561360add5fb22d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cb4e5180f16ad83d39da9555561360add5fb22d", "html_url": "https://github.com/rust-lang/rust/commit/7cb4e5180f16ad83d39da9555561360add5fb22d"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "c9bdcaa78f3916436b5c05c36e70d341827d00fb", "filename": "library/alloc/benches/vec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df70463ea5d701489d6f53dc780a2c16294d6143/library%2Falloc%2Fbenches%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df70463ea5d701489d6f53dc780a2c16294d6143/library%2Falloc%2Fbenches%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fbenches%2Fvec.rs?ref=df70463ea5d701489d6f53dc780a2c16294d6143", "patch": "@@ -468,7 +468,6 @@ fn bench_in_place_recycle(b: &mut Bencher) {\n                 .enumerate()\n                 .map(|(idx, e)| idx.wrapping_add(e))\n                 .fuse()\n-                .peekable()\n                 .collect::<Vec<usize>>(),\n         );\n     });"}, {"sha": "ad69234403b9c34f99641d2900ae4a1acb261cab", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/df70463ea5d701489d6f53dc780a2c16294d6143/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df70463ea5d701489d6f53dc780a2c16294d6143/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=df70463ea5d701489d6f53dc780a2c16294d6143", "patch": "@@ -1002,7 +1002,6 @@ fn test_from_iter_specialization_with_iterator_adapters() {\n         .zip(std::iter::repeat(1usize))\n         .map(|(a, b)| a + b)\n         .map_while(Option::Some)\n-        .peekable()\n         .skip(1)\n         .map(|e| if e != usize::MAX { Ok(std::num::NonZeroUsize::new(e)) } else { Err(()) });\n     assert_in_place_trait(&iter);\n@@ -1095,6 +1094,18 @@ fn test_from_iter_specialization_panic_during_drop_leaks() {\n     }\n }\n \n+// regression test for issue #85322. Peekable previously implemented InPlaceIterable,\n+// but due to an interaction with IntoIter's current Clone implementation it failed to uphold\n+// the contract.\n+#[test]\n+fn test_collect_after_iterator_clone() {\n+    let v = vec![0; 5];\n+    let mut i = v.into_iter().map(|i| i + 1).peekable();\n+    i.peek();\n+    let v = i.clone().collect::<Vec<_>>();\n+    assert_eq!(v, [1, 1, 1, 1, 1]);\n+    assert!(v.len() <= v.capacity());\n+}\n #[test]\n fn test_cow_from() {\n     let borrowed: &[_] = &[\"borrowed\", \"(slice)\"];"}, {"sha": "69bd2996efe73df9abc8747ad3d0602264d18fa0", "filename": "library/core/src/iter/adapters/peekable.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/df70463ea5d701489d6f53dc780a2c16294d6143/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fpeekable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df70463ea5d701489d6f53dc780a2c16294d6143/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fpeekable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fpeekable.rs?ref=df70463ea5d701489d6f53dc780a2c16294d6143", "patch": "@@ -1,4 +1,4 @@\n-use crate::iter::{adapters::SourceIter, FusedIterator, InPlaceIterable, TrustedLen};\n+use crate::iter::{adapters::SourceIter, FusedIterator, TrustedLen};\n use crate::ops::{ControlFlow, Try};\n \n /// An iterator with a `peek()` that returns an optional reference to the next\n@@ -356,6 +356,3 @@ where\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }\n }\n-\n-#[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-unsafe impl<I: InPlaceIterable> InPlaceIterable for Peekable<I> {}"}]}