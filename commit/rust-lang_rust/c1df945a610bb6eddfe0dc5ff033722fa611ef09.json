{"sha": "c1df945a610bb6eddfe0dc5ff033722fa611ef09", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxZGY5NDVhNjEwYmI2ZWRkZmUwZGM1ZmYwMzM3MjJmYTYxMWVmMDk=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-03-02T22:06:07Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-03-05T19:07:22Z"}, "message": "rustc_metadata: Give decoder access to whole crate store", "tree": {"sha": "2ef3dcb35b959d70fc04403d2998564bb4bac422", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ef3dcb35b959d70fc04403d2998564bb4bac422"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1df945a610bb6eddfe0dc5ff033722fa611ef09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1df945a610bb6eddfe0dc5ff033722fa611ef09", "html_url": "https://github.com/rust-lang/rust/commit/c1df945a610bb6eddfe0dc5ff033722fa611ef09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1df945a610bb6eddfe0dc5ff033722fa611ef09/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c79f5f064725535f7520e693e69c65c3d0f2730f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c79f5f064725535f7520e693e69c65c3d0f2730f", "html_url": "https://github.com/rust-lang/rust/commit/c79f5f064725535f7520e693e69c65c3d0f2730f"}], "stats": {"total": 65, "additions": 43, "deletions": 22}, "files": [{"sha": "18b4c9ad5044ca401575d0a7e9ab3f073cd42fc8", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c1df945a610bb6eddfe0dc5ff033722fa611ef09/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1df945a610bb6eddfe0dc5ff033722fa611ef09/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=c1df945a610bb6eddfe0dc5ff033722fa611ef09", "patch": "@@ -76,6 +76,21 @@ impl<'a> LoadError<'a> {\n     }\n }\n \n+/// A reference to `CrateMetadata` that can also give access to whole crate store when necessary.\n+#[derive(Clone, Copy)]\n+crate struct CrateMetadataRef<'a> {\n+    pub cdata: &'a CrateMetadata,\n+    pub cstore: &'a CStore,\n+}\n+\n+impl std::ops::Deref for CrateMetadataRef<'_> {\n+    type Target = CrateMetadata;\n+\n+    fn deref(&self) -> &Self::Target {\n+        self.cdata\n+    }\n+}\n+\n fn dump_crates(cstore: &CStore) {\n     info!(\"resolved crates:\");\n     cstore.iter_crate_data(|cnum, data| {\n@@ -100,10 +115,11 @@ impl CStore {\n         CrateNum::new(self.metas.len() - 1)\n     }\n \n-    crate fn get_crate_data(&self, cnum: CrateNum) -> &CrateMetadata {\n-        self.metas[cnum]\n+    crate fn get_crate_data(&self, cnum: CrateNum) -> CrateMetadataRef<'_> {\n+        let cdata = self.metas[cnum]\n             .as_ref()\n-            .unwrap_or_else(|| panic!(\"Failed to get crate data for {:?}\", cnum))\n+            .unwrap_or_else(|| panic!(\"Failed to get crate data for {:?}\", cnum));\n+        CrateMetadataRef { cdata, cstore: self }\n     }\n \n     fn set_crate_data(&mut self, cnum: CrateNum, data: CrateMetadata) {\n@@ -217,7 +233,7 @@ impl<'a> CrateLoader<'a> {\n             // We're also sure to compare *paths*, not actual byte slices. The\n             // `source` stores paths which are normalized which may be different\n             // from the strings on the command line.\n-            let source = self.cstore.get_crate_data(cnum).source();\n+            let source = self.cstore.get_crate_data(cnum).cdata.source();\n             if let Some(entry) = self.sess.opts.externs.get(&name.as_str()) {\n                 // Only use `--extern crate_name=path` here, not `--extern crate_name`.\n                 if let Some(mut files) = entry.files() {"}, {"sha": "5dec7bfe60cbd9f60b8a3e4da03a828bbbe33153", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c1df945a610bb6eddfe0dc5ff033722fa611ef09/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1df945a610bb6eddfe0dc5ff033722fa611ef09/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=c1df945a610bb6eddfe0dc5ff033722fa611ef09", "patch": "@@ -1,5 +1,6 @@\n // Decoding metadata from a single crate's metadata\n \n+use crate::creader::CrateMetadataRef;\n use crate::rmeta::table::{FixedSizeEncoding, Table};\n use crate::rmeta::*;\n \n@@ -125,7 +126,7 @@ struct ImportedSourceFile {\n \n pub(super) struct DecodeContext<'a, 'tcx> {\n     opaque: opaque::Decoder<'a>,\n-    cdata: Option<&'a CrateMetadata>,\n+    cdata: Option<CrateMetadataRef<'a>>,\n     sess: Option<&'tcx Session>,\n     tcx: Option<TyCtxt<'tcx>>,\n \n@@ -141,7 +142,7 @@ pub(super) struct DecodeContext<'a, 'tcx> {\n /// Abstract over the various ways one can create metadata decoders.\n pub(super) trait Metadata<'a, 'tcx>: Copy {\n     fn raw_bytes(self) -> &'a [u8];\n-    fn cdata(self) -> Option<&'a CrateMetadata> {\n+    fn cdata(self) -> Option<CrateMetadataRef<'a>> {\n         None\n     }\n     fn sess(self) -> Option<&'tcx Session> {\n@@ -162,7 +163,7 @@ pub(super) trait Metadata<'a, 'tcx>: Copy {\n             lazy_state: LazyState::NoNode,\n             alloc_decoding_session: self\n                 .cdata()\n-                .map(|cdata| cdata.alloc_decoding_state.new_decoding_session()),\n+                .map(|cdata| cdata.cdata.alloc_decoding_state.new_decoding_session()),\n         }\n     }\n }\n@@ -185,33 +186,33 @@ impl<'a, 'tcx> Metadata<'a, 'tcx> for (&'a MetadataBlob, &'tcx Session) {\n     }\n }\n \n-impl<'a, 'tcx> Metadata<'a, 'tcx> for &'a CrateMetadata {\n+impl<'a, 'tcx> Metadata<'a, 'tcx> for &'a CrateMetadataRef<'a> {\n     fn raw_bytes(self) -> &'a [u8] {\n         self.blob.raw_bytes()\n     }\n-    fn cdata(self) -> Option<&'a CrateMetadata> {\n-        Some(self)\n+    fn cdata(self) -> Option<CrateMetadataRef<'a>> {\n+        Some(*self)\n     }\n }\n \n-impl<'a, 'tcx> Metadata<'a, 'tcx> for (&'a CrateMetadata, &'tcx Session) {\n+impl<'a, 'tcx> Metadata<'a, 'tcx> for (&'a CrateMetadataRef<'a>, &'tcx Session) {\n     fn raw_bytes(self) -> &'a [u8] {\n         self.0.raw_bytes()\n     }\n-    fn cdata(self) -> Option<&'a CrateMetadata> {\n-        Some(self.0)\n+    fn cdata(self) -> Option<CrateMetadataRef<'a>> {\n+        Some(*self.0)\n     }\n     fn sess(self) -> Option<&'tcx Session> {\n         Some(&self.1)\n     }\n }\n \n-impl<'a, 'tcx> Metadata<'a, 'tcx> for (&'a CrateMetadata, TyCtxt<'tcx>) {\n+impl<'a, 'tcx> Metadata<'a, 'tcx> for (&'a CrateMetadataRef<'a>, TyCtxt<'tcx>) {\n     fn raw_bytes(self) -> &'a [u8] {\n         self.0.raw_bytes()\n     }\n-    fn cdata(self) -> Option<&'a CrateMetadata> {\n-        Some(self.0)\n+    fn cdata(self) -> Option<CrateMetadataRef<'a>> {\n+        Some(*self.0)\n     }\n     fn tcx(self) -> Option<TyCtxt<'tcx>> {\n         Some(self.1)\n@@ -242,7 +243,7 @@ impl<'a, 'tcx> DecodeContext<'a, 'tcx> {\n         self.tcx.expect(\"missing TyCtxt in DecodeContext\")\n     }\n \n-    fn cdata(&self) -> &'a CrateMetadata {\n+    fn cdata(&self) -> CrateMetadataRef<'a> {\n         self.cdata.expect(\"missing CrateMetadata in DecodeContext\")\n     }\n \n@@ -558,7 +559,7 @@ impl CrateRoot<'_> {\n     }\n }\n \n-impl<'a, 'tcx> CrateMetadata {\n+impl CrateMetadata {\n     crate fn new(\n         sess: &Session,\n         blob: MetadataBlob,\n@@ -601,7 +602,9 @@ impl<'a, 'tcx> CrateMetadata {\n             extern_crate: Lock::new(None),\n         }\n     }\n+}\n \n+impl<'a, 'tcx> CrateMetadataRef<'a> {\n     fn is_proc_macro(&self, id: DefIndex) -> bool {\n         self.root.proc_macro_data.and_then(|data| data.decode(self).find(|x| *x == id)).is_some()\n     }\n@@ -1440,10 +1443,10 @@ impl<'a, 'tcx> CrateMetadata {\n     /// Proc macro crates don't currently export spans, so this function does not have\n     /// to work for them.\n     fn imported_source_files(\n-        &'a self,\n+        &self,\n         local_source_map: &source_map::SourceMap,\n-    ) -> &[ImportedSourceFile] {\n-        self.source_map_import_info.init_locking(|| {\n+    ) -> &'a [ImportedSourceFile] {\n+        self.cdata.source_map_import_info.init_locking(|| {\n             let external_source_map = self.root.source_map.decode(self);\n \n             external_source_map\n@@ -1540,7 +1543,9 @@ impl<'a, 'tcx> CrateMetadata {\n \n         dep_node_index\n     }\n+}\n \n+impl CrateMetadata {\n     crate fn dependencies(&self) -> LockGuard<'_, Vec<CrateNum>> {\n         self.dependencies.borrow()\n     }"}, {"sha": "c890640d432a7ac2ae0c5232c10c34d193d09593", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1df945a610bb6eddfe0dc5ff033722fa611ef09/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1df945a610bb6eddfe0dc5ff033722fa611ef09/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=c1df945a610bb6eddfe0dc5ff033722fa611ef09", "patch": "@@ -517,7 +517,7 @@ impl CrateStore for CStore {\n     }\n \n     fn def_path_table(&self, cnum: CrateNum) -> &DefPathTable {\n-        &self.get_crate_data(cnum).def_path_table\n+        &self.get_crate_data(cnum).cdata.def_path_table\n     }\n \n     fn crates_untracked(&self) -> Vec<CrateNum> {"}]}