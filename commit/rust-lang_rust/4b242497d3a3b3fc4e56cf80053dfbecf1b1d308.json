{"sha": "4b242497d3a3b3fc4e56cf80053dfbecf1b1d308", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiMjQyNDk3ZDNhM2IzZmM0ZTU2Y2Y4MDA1M2RmYmVjZjFiMWQzMDg=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-13T23:00:44Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-17T21:41:40Z"}, "message": "Code style tweaks.", "tree": {"sha": "f54dfe6a237a5e75665a9bc5c7ed61075d30c862", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f54dfe6a237a5e75665a9bc5c7ed61075d30c862"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b242497d3a3b3fc4e56cf80053dfbecf1b1d308", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b242497d3a3b3fc4e56cf80053dfbecf1b1d308", "html_url": "https://github.com/rust-lang/rust/commit/4b242497d3a3b3fc4e56cf80053dfbecf1b1d308", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b242497d3a3b3fc4e56cf80053dfbecf1b1d308/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84de8caa87b085772cbe41de0b39630ccca3afab", "url": "https://api.github.com/repos/rust-lang/rust/commits/84de8caa87b085772cbe41de0b39630ccca3afab", "html_url": "https://github.com/rust-lang/rust/commit/84de8caa87b085772cbe41de0b39630ccca3afab"}], "stats": {"total": 71, "additions": 35, "deletions": 36}, "files": [{"sha": "18ea4387bf22f64e9452361ed85d3366563fee9b", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 35, "deletions": 36, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/4b242497d3a3b3fc4e56cf80053dfbecf1b1d308/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b242497d3a3b3fc4e56cf80053dfbecf1b1d308/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=4b242497d3a3b3fc4e56cf80053dfbecf1b1d308", "patch": "@@ -918,37 +918,36 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n         }\n \n         (_, _) => {\n-            match Intrinsic::find(tcx, &name) {\n+            let intr = match Intrinsic::find(tcx, &name) {\n+                Some(intr) => intr,\n                 None => ccx.sess().span_bug(foreign_item.span, \"unknown intrinsic\"),\n-                Some(intr) => {\n-                    fn ty_to_type(ccx: &CrateContext, t: &intrinsics::Type) -> Type {\n-                        use intrinsics::Type::*;\n-                        match *t {\n-                            Integer(x) => Type::ix(ccx, x as u64),\n-                            Float(x) => {\n-                                match x {\n-                                    32 => Type::f32(ccx),\n-                                    64 => Type::f64(ccx),\n-                                    _ => unreachable!()\n-                                }\n-                            }\n-                            Pointer(_) => unimplemented!(),\n-                            Vector(ref t, length) => Type::vector(&ty_to_type(ccx, t),\n-                                                                  length as u64)\n+            };\n+            fn ty_to_type(ccx: &CrateContext, t: &intrinsics::Type) -> Type {\n+                use intrinsics::Type::*;\n+                match *t {\n+                    Integer(x) => Type::ix(ccx, x as u64),\n+                    Float(x) => {\n+                        match x {\n+                            32 => Type::f32(ccx),\n+                            64 => Type::f64(ccx),\n+                            _ => unreachable!()\n                         }\n                     }\n+                    Pointer(_) => unimplemented!(),\n+                    Vector(ref t, length) => Type::vector(&ty_to_type(ccx, t),\n+                                                          length as u64)\n+                }\n+            }\n \n-                    let inputs = intr.inputs.iter().map(|t| ty_to_type(ccx, t)).collect::<Vec<_>>();\n-                    let outputs = ty_to_type(ccx, &intr.output);\n-                    match intr.definition {\n-                        intrinsics::IntrinsicDef::Named(name) => {\n-                            let f = declare::declare_cfn(ccx,\n-                                                         name,\n-                                                         Type::func(&inputs, &outputs),\n-                                                         tcx.mk_nil());\n-                            Call(bcx, f, &llargs, None, call_debug_location)\n-                        }\n-                    }\n+            let inputs = intr.inputs.iter().map(|t| ty_to_type(ccx, t)).collect::<Vec<_>>();\n+            let outputs = ty_to_type(ccx, &intr.output);\n+            match intr.definition {\n+                intrinsics::IntrinsicDef::Named(name) => {\n+                    let f = declare::declare_cfn(ccx,\n+                                                 name,\n+                                                 Type::func(&inputs, &outputs),\n+                                                 tcx.mk_nil());\n+                    Call(bcx, f, &llargs, None, call_debug_location)\n                 }\n             }\n         }\n@@ -1330,6 +1329,15 @@ fn generic_simd_intrinsic<'blk, 'tcx, 'a>\n      call_debug_location: DebugLoc,\n      call_info: NodeIdAndSpan) -> ValueRef\n {\n+    macro_rules! require {\n+        ($cond: expr, $($fmt: tt)*) => {\n+            if !$cond {\n+                bcx.sess().span_err(call_info.span, &format!($($fmt)*));\n+                return C_null(llret_ty)\n+            }\n+        }\n+    }\n+\n     let tcx = bcx.tcx();\n     let arg_tys = match callee_ty.sty {\n         ty::TyBareFn(_, ref f) => {\n@@ -1348,15 +1356,6 @@ fn generic_simd_intrinsic<'blk, 'tcx, 'a>\n         _ => None\n     };\n \n-    macro_rules! require {\n-        ($cond: expr, $($fmt: tt)*) => {\n-            if !$cond {\n-                bcx.sess().span_err(call_info.span, &format!($($fmt)*));\n-                return C_null(llret_ty)\n-            }\n-        }\n-    }\n-\n     if let Some(cmp_op) = comparison {\n         assert_eq!(arg_tys.len(), 2);\n         require!(arg_tys[0].is_simd(tcx),"}]}