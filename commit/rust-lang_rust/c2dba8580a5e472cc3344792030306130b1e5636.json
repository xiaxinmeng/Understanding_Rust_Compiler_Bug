{"sha": "c2dba8580a5e472cc3344792030306130b1e5636", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyZGJhODU4MGE1ZTQ3MmNjMzM0NDc5MjAzMDMwNjEzMGIxZTU2MzY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-04-02T17:24:44Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-04-02T17:25:06Z"}, "message": "Merge conflicts", "tree": {"sha": "13f4e359bf5d3dc9553ccbe992dfe54ab9588e66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13f4e359bf5d3dc9553ccbe992dfe54ab9588e66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2dba8580a5e472cc3344792030306130b1e5636", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2dba8580a5e472cc3344792030306130b1e5636", "html_url": "https://github.com/rust-lang/rust/commit/c2dba8580a5e472cc3344792030306130b1e5636", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2dba8580a5e472cc3344792030306130b1e5636/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38fdd50e0b16e947c5a3879f593f51fd769deae2", "url": "https://api.github.com/repos/rust-lang/rust/commits/38fdd50e0b16e947c5a3879f593f51fd769deae2", "html_url": "https://github.com/rust-lang/rust/commit/38fdd50e0b16e947c5a3879f593f51fd769deae2"}], "stats": {"total": 56, "additions": 23, "deletions": 33}, "files": [{"sha": "3a55a64314ed9293ada85b6d6a7714edd06c2c93", "filename": "src/librustc/middle/ty_relate/mod.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c2dba8580a5e472cc3344792030306130b1e5636/src%2Flibrustc%2Fmiddle%2Fty_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2dba8580a5e472cc3344792030306130b1e5636/src%2Flibrustc%2Fmiddle%2Fty_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_relate%2Fmod.rs?ref=c2dba8580a5e472cc3344792030306130b1e5636", "patch": "@@ -122,11 +122,11 @@ fn relate_item_substs<'a,'tcx:'a,R>(relation: &mut R,\n     relate_substs(relation, opt_variances, a_subst, b_subst)\n }\n \n-fn relate_substs<'a,'tcx,R>(relation: &mut R,\n-                            variances: Option<&ty::ItemVariances>,\n-                            a_subst: &Substs<'tcx>,\n-                            b_subst: &Substs<'tcx>)\n-                            -> RelateResult<'tcx, Substs<'tcx>>\n+fn relate_substs<'a,'tcx:'a,R>(relation: &mut R,\n+                               variances: Option<&ty::ItemVariances>,\n+                               a_subst: &Substs<'tcx>,\n+                               b_subst: &Substs<'tcx>)\n+                               -> RelateResult<'tcx, Substs<'tcx>>\n     where R: TypeRelation<'a,'tcx>\n {\n     let mut substs = Substs::empty();\n@@ -161,11 +161,11 @@ fn relate_substs<'a,'tcx,R>(relation: &mut R,\n     Ok(substs)\n }\n \n-fn relate_type_params<'a,'tcx,R>(relation: &mut R,\n-                                 variances: Option<&[ty::Variance]>,\n-                                 a_tys: &[Ty<'tcx>],\n-                                 b_tys: &[Ty<'tcx>])\n-                                 -> RelateResult<'tcx, Vec<Ty<'tcx>>>\n+fn relate_type_params<'a,'tcx:'a,R>(relation: &mut R,\n+                                    variances: Option<&[ty::Variance]>,\n+                                    a_tys: &[Ty<'tcx>],\n+                                    b_tys: &[Ty<'tcx>])\n+                                    -> RelateResult<'tcx, Vec<Ty<'tcx>>>\n     where R: TypeRelation<'a,'tcx>\n {\n     if a_tys.len() != b_tys.len() {\n@@ -264,10 +264,10 @@ impl<'a,'tcx:'a> Relate<'a,'tcx> for ty::FnSig<'tcx> {\n     }\n }\n \n-fn relate_arg_vecs<'a,'tcx,R>(relation: &mut R,\n-                              a_args: &[Ty<'tcx>],\n-                              b_args: &[Ty<'tcx>])\n-                              -> RelateResult<'tcx, Vec<Ty<'tcx>>>\n+fn relate_arg_vecs<'a,'tcx:'a,R>(relation: &mut R,\n+                                 a_args: &[Ty<'tcx>],\n+                                 b_args: &[Ty<'tcx>])\n+                                 -> RelateResult<'tcx, Vec<Ty<'tcx>>>\n     where R: TypeRelation<'a,'tcx>\n {\n     if a_args.len() != b_args.len() {\n@@ -629,10 +629,10 @@ impl<'a,'tcx:'a,T> Relate<'a,'tcx> for Box<T>\n ///////////////////////////////////////////////////////////////////////////\n // Error handling\n \n-pub fn expected_found<'a,'tcx,R,T>(relation: &mut R,\n-                                   a: &T,\n-                                   b: &T)\n-                                   -> ty::expected_found<T>\n+pub fn expected_found<'a,'tcx:'a,R,T>(relation: &mut R,\n+                                      a: &T,\n+                                      b: &T)\n+                                      -> ty::expected_found<T>\n     where R: TypeRelation<'a,'tcx>, T: Clone\n {\n     expected_found_bool(relation.a_is_expected(), a, b)"}, {"sha": "d3d389c6a8bd52da51a2579ea7bf4c6408ee2c69", "filename": "src/test/auxiliary/coherence_copy_like_lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2dba8580a5e472cc3344792030306130b1e5636/src%2Ftest%2Fauxiliary%2Fcoherence_copy_like_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2dba8580a5e472cc3344792030306130b1e5636/src%2Ftest%2Fauxiliary%2Fcoherence_copy_like_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcoherence_copy_like_lib.rs?ref=c2dba8580a5e472cc3344792030306130b1e5636", "patch": "@@ -11,9 +11,7 @@\n #![crate_type = \"rlib\"]\n #![feature(fundamental)]\n \n-use std::marker::MarkerTrait;\n-\n-pub trait MyCopy : MarkerTrait { }\n+pub trait MyCopy { }\n impl MyCopy for i32 { }\n \n pub struct MyStruct<T>(T);"}, {"sha": "fcd6e5c4952074807d0ed8abe876b71956282b0a", "filename": "src/test/compile-fail/coherence_copy_like_err_fundamental_struct.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2dba8580a5e472cc3344792030306130b1e5636/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_fundamental_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2dba8580a5e472cc3344792030306130b1e5636/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_fundamental_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_fundamental_struct.rs?ref=c2dba8580a5e472cc3344792030306130b1e5636", "patch": "@@ -18,11 +18,9 @@\n \n extern crate coherence_copy_like_lib as lib;\n \n-use std::marker::MarkerTrait;\n-\n struct MyType { x: i32 }\n \n-trait MyTrait : MarkerTrait { }\n+trait MyTrait { }\n impl<T: lib::MyCopy> MyTrait for T { }\n \n // `MyFundamentalStruct` is declared fundamental, so we can test that"}, {"sha": "b5c0a7fb5f564829fda4f13331cb4089ec3ed696", "filename": "src/test/compile-fail/coherence_copy_like_err_fundamental_struct_ref.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2dba8580a5e472cc3344792030306130b1e5636/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_fundamental_struct_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2dba8580a5e472cc3344792030306130b1e5636/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_fundamental_struct_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_fundamental_struct_ref.rs?ref=c2dba8580a5e472cc3344792030306130b1e5636", "patch": "@@ -18,11 +18,9 @@\n \n extern crate coherence_copy_like_lib as lib;\n \n-use std::marker::MarkerTrait;\n-\n struct MyType { x: i32 }\n \n-trait MyTrait : MarkerTrait { }\n+trait MyTrait { }\n impl<T: lib::MyCopy> MyTrait for T { }\n \n // `MyFundamentalStruct` is declared fundamental, so we can test that"}, {"sha": "71db5225ecc08ddccfd7954c404336d66c60c85a", "filename": "src/test/run-pass/coherence_copy_like.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2dba8580a5e472cc3344792030306130b1e5636/src%2Ftest%2Frun-pass%2Fcoherence_copy_like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2dba8580a5e472cc3344792030306130b1e5636/src%2Ftest%2Frun-pass%2Fcoherence_copy_like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence_copy_like.rs?ref=c2dba8580a5e472cc3344792030306130b1e5636", "patch": "@@ -15,11 +15,9 @@\n \n extern crate coherence_copy_like_lib as lib;\n \n-use std::marker::MarkerTrait;\n-\n struct MyType { x: i32 }\n \n-trait MyTrait : MarkerTrait { }\n+trait MyTrait { }\n impl<T: lib::MyCopy> MyTrait for T { }\n impl MyTrait for MyType { }\n impl<'a> MyTrait for &'a MyType { }"}, {"sha": "0a6b9da74f218e1e60cf9c040924b0f820210631", "filename": "src/test/run-pass/traits-conditional-dispatch.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2dba8580a5e472cc3344792030306130b1e5636/src%2Ftest%2Frun-pass%2Ftraits-conditional-dispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2dba8580a5e472cc3344792030306130b1e5636/src%2Ftest%2Frun-pass%2Ftraits-conditional-dispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits-conditional-dispatch.rs?ref=c2dba8580a5e472cc3344792030306130b1e5636", "patch": "@@ -17,13 +17,11 @@\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n \n-use std::marker::MarkerTrait;\n-\n trait Get {\n     fn get(&self) -> Self;\n }\n \n-trait MyCopy : MarkerTrait { fn copy(&self) -> Self; }\n+trait MyCopy { fn copy(&self) -> Self; }\n impl MyCopy for u16 { fn copy(&self) -> Self { *self } }\n impl MyCopy for u32 { fn copy(&self) -> Self { *self } }\n impl MyCopy for i32 { fn copy(&self) -> Self { *self } }"}]}