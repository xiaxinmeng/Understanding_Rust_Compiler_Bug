{"sha": "b0d7338d6db5751258cd763e7e990852d6c32b8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwZDczMzhkNmRiNTc1MTI1OGNkNzYzZTdlOTkwODUyZDZjMzJiOGY=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-11-08T18:11:11Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-11-09T15:54:58Z"}, "message": "[MIR trans] Add support for SwitchInt", "tree": {"sha": "f9a1ca0525a3392535810d653307d54d92c53ce5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9a1ca0525a3392535810d653307d54d92c53ce5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0d7338d6db5751258cd763e7e990852d6c32b8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0d7338d6db5751258cd763e7e990852d6c32b8f", "html_url": "https://github.com/rust-lang/rust/commit/b0d7338d6db5751258cd763e7e990852d6c32b8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0d7338d6db5751258cd763e7e990852d6c32b8f/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86069e45fe8fc15bc6103ffde9b4371ce826df2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/86069e45fe8fc15bc6103ffde9b4371ce826df2c", "html_url": "https://github.com/rust-lang/rust/commit/86069e45fe8fc15bc6103ffde9b4371ce826df2c"}], "stats": {"total": 101, "additions": 71, "deletions": 30}, "files": [{"sha": "ccab9a20e75d89052f5b5855179555f610adeb02", "filename": "src/librustc_trans/trans/mir/block.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b0d7338d6db5751258cd763e7e990852d6c32b8f/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0d7338d6db5751258cd763e7e990852d6c32b8f/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs?ref=b0d7338d6db5751258cd763e7e990852d6c32b8f", "patch": "@@ -50,8 +50,15 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                 unimplemented!()\n             }\n \n-            mir::Terminator::SwitchInt { .. } => {\n-                unimplemented!()\n+            mir::Terminator::SwitchInt { ref discr, switch_ty, ref values, ref targets } => {\n+                let (otherwise, targets) = targets.split_last().unwrap();\n+                let discr = build::Load(bcx, self.trans_lvalue(bcx, discr).llval);\n+                let switch = build::Switch(bcx, discr, self.llblock(*otherwise), values.len());\n+                for (value, target) in values.iter().zip(targets) {\n+                    let llval = self.trans_constval(bcx, value, switch_ty);\n+                    let llbb = self.llblock(*target);\n+                    build::AddCase(switch, llval, llbb)\n+                }\n             }\n \n             mir::Terminator::Diverge => {"}, {"sha": "43973fe5558379a303f14deb38783230a3dc76bd", "filename": "src/librustc_trans/trans/mir/constant.rs", "status": "modified", "additions": 38, "deletions": 28, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/b0d7338d6db5751258cd763e7e990852d6c32b8f/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0d7338d6db5751258cd763e7e990852d6c32b8f/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fconstant.rs?ref=b0d7338d6db5751258cd763e7e990852d6c32b8f", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use llvm::ValueRef;\n+use middle::ty::Ty;\n use rustc::middle::const_eval::ConstVal;\n use rustc_mir::repr as mir;\n use trans::consts::{self, TrueConst};\n@@ -18,45 +19,54 @@ use trans::type_of;\n use super::MirContext;\n \n impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n+    pub fn trans_constval(&mut self,\n+                          bcx: Block<'bcx, 'tcx>,\n+                          cv: &ConstVal,\n+                          ty: Ty<'tcx>)\n+                          -> ValueRef\n+    {\n+        let ccx = bcx.ccx();\n+        let llty = type_of::type_of(ccx, ty);\n+        match *cv {\n+            ConstVal::Float(v) => common::C_floating_f64(v, llty),\n+            ConstVal::Bool(v) => common::C_bool(ccx, v),\n+            ConstVal::Int(v) => common::C_integral(llty, v as u64, true),\n+            ConstVal::Uint(v) => common::C_integral(llty, v, false),\n+            ConstVal::Str(ref v) => common::C_str_slice(ccx, v.clone()),\n+            ConstVal::ByteStr(ref v) => consts::addr_of(ccx,\n+                                                        common::C_bytes(ccx, v),\n+                                                        1,\n+                                                        \"byte_str\"),\n+            ConstVal::Struct(id) | ConstVal::Tuple(id) => {\n+                let expr = bcx.tcx().map.expect_expr(id);\n+                let (llval, _) = match consts::const_expr(ccx,\n+                                                          expr,\n+                                                          bcx.fcx.param_substs,\n+                                                          None,\n+                                                          TrueConst::Yes) {\n+                    Ok(v) => v,\n+                    Err(_) => panic!(\"constant eval failure\"),\n+                };\n+                llval\n+            }\n+            ConstVal::Function(_) => {\n+                unimplemented!()\n+            }\n+        }\n+    }\n+\n     pub fn trans_constant(&mut self,\n                           bcx: Block<'bcx, 'tcx>,\n                           constant: &mir::Constant<'tcx>)\n                           -> ValueRef\n     {\n-        let ccx = bcx.ccx();\n         let constant_ty = bcx.monomorphize(&constant.ty);\n-        let llty = type_of::type_of(ccx, constant_ty);\n         match constant.literal {\n             mir::Literal::Item { .. } => {\n                 unimplemented!()\n             }\n             mir::Literal::Value { ref value } => {\n-                match *value {\n-                    ConstVal::Float(v) => common::C_floating_f64(v, llty),\n-                    ConstVal::Bool(v) => common::C_bool(ccx, v),\n-                    ConstVal::Int(v) => common::C_integral(llty, v as u64, true),\n-                    ConstVal::Uint(v) => common::C_integral(llty, v, false),\n-                    ConstVal::Str(ref v) => common::C_str_slice(ccx, v.clone()),\n-                    ConstVal::ByteStr(ref v) => consts::addr_of(ccx,\n-                                                                common::C_bytes(ccx, v),\n-                                                                1,\n-                                                                \"byte_str\"),\n-                    ConstVal::Struct(id) | ConstVal::Tuple(id) => {\n-                        let expr = bcx.tcx().map.expect_expr(id);\n-                        let (llval, _) = match consts::const_expr(ccx,\n-                                                                  expr,\n-                                                                  bcx.fcx.param_substs,\n-                                                                  None,\n-                                                                  TrueConst::Yes) {\n-                            Ok(v) => v,\n-                            Err(_) => panic!(\"constant eval failure\"),\n-                        };\n-                        llval\n-                    }\n-                    ConstVal::Function(_) => {\n-                        unimplemented!()\n-                    }\n-                }\n+                self.trans_constval(bcx, value, constant_ty)\n             }\n         }\n     }"}, {"sha": "edde5f3c895873d9386260484924409d736762bc", "filename": "src/test/run-pass/mir_trans_switchint.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b0d7338d6db5751258cd763e7e990852d6c32b8f/src%2Ftest%2Frun-pass%2Fmir_trans_switchint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0d7338d6db5751258cd763e7e990852d6c32b8f/src%2Ftest%2Frun-pass%2Fmir_trans_switchint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_trans_switchint.rs?ref=b0d7338d6db5751258cd763e7e990852d6c32b8f", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+\n+#[rustc_mir]\n+pub fn foo(x: i8) -> i32 {\n+  match x {\n+    1 => 0,\n+    _ => 1,\n+  }\n+}\n+\n+fn main() {\n+  assert_eq!(foo(0), 1);\n+  assert_eq!(foo(1), 0);\n+}"}]}