{"sha": "186f6faf1e6f4b507d97fefcb02fd8a7cf8d716f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NmY2ZmFmMWU2ZjRiNTA3ZDk3ZmVmY2IwMmZkOGE3Y2Y4ZDcxNmY=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-07-11T22:08:43Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-07-11T22:51:10Z"}, "message": "Get cross crate static default methods working. Closes #7569.", "tree": {"sha": "b5b0c24a133e581034649a3498699e5d68d61a2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5b0c24a133e581034649a3498699e5d68d61a2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/186f6faf1e6f4b507d97fefcb02fd8a7cf8d716f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/186f6faf1e6f4b507d97fefcb02fd8a7cf8d716f", "html_url": "https://github.com/rust-lang/rust/commit/186f6faf1e6f4b507d97fefcb02fd8a7cf8d716f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/186f6faf1e6f4b507d97fefcb02fd8a7cf8d716f/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bbb4348806dab6d9b4c280d4cfd324645969eca", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bbb4348806dab6d9b4c280d4cfd324645969eca", "html_url": "https://github.com/rust-lang/rust/commit/1bbb4348806dab6d9b4c280d4cfd324645969eca"}], "stats": {"total": 71, "additions": 40, "deletions": 31}, "files": [{"sha": "b2fefdd97b8b656e3aeaab00a58ca1affa07efc2", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/186f6faf1e6f4b507d97fefcb02fd8a7cf8d716f/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/186f6faf1e6f4b507d97fefcb02fd8a7cf8d716f/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=186f6faf1e6f4b507d97fefcb02fd8a7cf8d716f", "patch": "@@ -791,7 +791,7 @@ fn encode_info_for_method(ecx: &EncodeContext,\n     if len > 0u || should_inline {\n         (ecx.encode_inlined_item)(\n            ecx, ebml_w, impl_path,\n-           ii_method(local_def(parent_id), m));\n+           ii_method(local_def(parent_id), false, m));\n     } else {\n         encode_symbol(ecx, ebml_w, m.id);\n     }\n@@ -1123,21 +1123,16 @@ fn encode_info_for_item(ecx: &EncodeContext,\n                 }\n \n                 provided(m) => {\n-                    // This is obviously a bogus assert but I don't think this\n-                    // ever worked before anyhow...near as I can tell, before\n-                    // we would emit two items.\n-                    if method_ty.explicit_self == sty_static {\n-                        tcx.sess.span_unimpl(\n-                            item.span,\n-                            fmt!(\"Method %s is both provided and static\",\n-                                 token::ident_to_str(&method_ty.ident)));\n+                    // If this is a static method, we've already encoded\n+                    // this.\n+                    if method_ty.explicit_self != sty_static {\n+                        encode_type_param_bounds(ebml_w, ecx,\n+                                                 &m.generics.ty_params);\n                     }\n-                    encode_type_param_bounds(ebml_w, ecx,\n-                                             &m.generics.ty_params);\n                     encode_method_sort(ebml_w, 'p');\n                     (ecx.encode_inlined_item)(\n                         ecx, ebml_w, path,\n-                        ii_method(local_def(item.id), m));\n+                        ii_method(local_def(item.id), true, m));\n                 }\n             }\n "}, {"sha": "2e0090f7dda04321c4500fa17bab21d11bed7afa", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/186f6faf1e6f4b507d97fefcb02fd8a7cf8d716f/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/186f6faf1e6f4b507d97fefcb02fd8a7cf8d716f/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=186f6faf1e6f4b507d97fefcb02fd8a7cf8d716f", "patch": "@@ -319,7 +319,8 @@ fn simplify_ast(ii: &ast::inlined_item) -> ast::inlined_item {\n     match *ii {\n         //hack: we're not dropping items\n         ast::ii_item(i) => ast::ii_item(fld.fold_item(i).get()),\n-        ast::ii_method(d, m) => ast::ii_method(d, fld.fold_method(m)),\n+        ast::ii_method(d, is_provided, m) =>\n+          ast::ii_method(d, is_provided, fld.fold_method(m)),\n         ast::ii_foreign(i) => ast::ii_foreign(fld.fold_foreign_item(i))\n     }\n }\n@@ -340,7 +341,8 @@ fn renumber_ast(xcx: @ExtendedDecodeContext, ii: ast::inlined_item)\n \n     match ii {\n         ast::ii_item(i) => ast::ii_item(fld.fold_item(i).get()),\n-        ast::ii_method(d, m) => ast::ii_method(xcx.tr_def_id(d), fld.fold_method(m)),\n+        ast::ii_method(d, is_provided, m) =>\n+          ast::ii_method(xcx.tr_def_id(d), is_provided, fld.fold_method(m)),\n         ast::ii_foreign(i) => ast::ii_foreign(fld.fold_foreign_item(i)),\n     }\n }"}, {"sha": "1f7b2bd46634ff30104cc68732926b9633fa6681", "filename": "src/librustc/middle/trans/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/186f6faf1e6f4b507d97fefcb02fd8a7cf8d716f/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/186f6faf1e6f4b507d97fefcb02fd8a7cf8d716f/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs?ref=186f6faf1e6f4b507d97fefcb02fd8a7cf8d716f", "patch": "@@ -88,7 +88,7 @@ pub fn maybe_instantiate_inline(ccx: @mut CrateContext, fn_id: ast::def_id,\n             ccx.sess.bug(\"maybe_get_item_ast returned a found_parent \\\n              with a non-item parent\");\n         }\n-        csearch::found(ast::ii_method(impl_did, mth)) => {\n+        csearch::found(ast::ii_method(impl_did, _is_provided, mth)) => {\n           ccx.stats.n_inlines += 1;\n           ccx.external.insert(fn_id, Some(mth.id));\n           // If this is a default method, we can't look up the"}, {"sha": "b6275ed186c82be830b0244bc957b529d6ef5c3d", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/186f6faf1e6f4b507d97fefcb02fd8a7cf8d716f/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/186f6faf1e6f4b507d97fefcb02fd8a7cf8d716f/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=186f6faf1e6f4b507d97fefcb02fd8a7cf8d716f", "patch": "@@ -1033,7 +1033,7 @@ pub enum foreign_item_ {\n #[deriving(Eq, Encodable, Decodable,IterBytes)]\n pub enum inlined_item {\n     ii_item(@item),\n-    ii_method(def_id /* impl id */, @method),\n+    ii_method(def_id /* impl id */, bool /* is provided */, @method),\n     ii_foreign(@foreign_item),\n }\n "}, {"sha": "e7eedcaa62e55314cb297a56033c848792c7debd", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/186f6faf1e6f4b507d97fefcb02fd8a7cf8d716f/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/186f6faf1e6f4b507d97fefcb02fd8a7cf8d716f/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=186f6faf1e6f4b507d97fefcb02fd8a7cf8d716f", "patch": "@@ -165,8 +165,8 @@ pub fn map_decoded_item(diag: @span_handler,\n                                               i.vis,    // Wrong but OK\n                                               @path));\n       }\n-      ii_method(impl_did, m) => {\n-        map_method(impl_did, @path, m, cx);\n+      ii_method(impl_did, is_provided, m) => {\n+        map_method(impl_did, @path, m, is_provided, cx);\n       }\n     }\n \n@@ -207,8 +207,11 @@ pub fn map_pat(pat: @pat, (cx,v): (@mut Ctx, visit::vt<@mut Ctx>)) {\n }\n \n pub fn map_method(impl_did: def_id, impl_path: @path,\n-                  m: @method, cx: @mut Ctx) {\n-    cx.map.insert(m.id, node_method(m, impl_did, impl_path));\n+                  m: @method, is_provided: bool, cx: @mut Ctx) {\n+    let entry = if is_provided {\n+        node_trait_method(@provided(m), impl_did, impl_path)\n+    } else { node_method(m, impl_did, impl_path) };\n+    cx.map.insert(m.id, entry);\n     cx.map.insert(m.self_id, node_local(special_idents::self_));\n }\n \n@@ -219,7 +222,7 @@ pub fn map_item(i: @item, (cx, v): (@mut Ctx, visit::vt<@mut Ctx>)) {\n         item_impl(_, _, _, ref ms) => {\n             let impl_did = ast_util::local_def(i.id);\n             for ms.iter().advance |m| {\n-                map_method(impl_did, extend(cx, i.ident), *m, cx);\n+                map_method(impl_did, extend(cx, i.ident), *m, false, cx);\n             }\n         }\n         item_enum(ref enum_definition, _) => {"}, {"sha": "d87955a484cf004710bee9ee1767c95d8deb593b", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/186f6faf1e6f4b507d97fefcb02fd8a7cf8d716f/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/186f6faf1e6f4b507d97fefcb02fd8a7cf8d716f/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=186f6faf1e6f4b507d97fefcb02fd8a7cf8d716f", "patch": "@@ -298,23 +298,23 @@ impl inlined_item_utils for inlined_item {\n         match *self {\n             ii_item(i) => /* FIXME (#2543) */ copy i.ident,\n             ii_foreign(i) => /* FIXME (#2543) */ copy i.ident,\n-            ii_method(_, m) => /* FIXME (#2543) */ copy m.ident,\n+            ii_method(_, _, m) => /* FIXME (#2543) */ copy m.ident,\n         }\n     }\n \n     fn id(&self) -> ast::node_id {\n         match *self {\n             ii_item(i) => i.id,\n             ii_foreign(i) => i.id,\n-            ii_method(_, m) => m.id,\n+            ii_method(_, _, m) => m.id,\n         }\n     }\n \n     fn accept<E: Copy>(&self, e: E, v: visit::vt<E>) {\n         match *self {\n             ii_item(i) => (v.visit_item)(i, (e, v)),\n             ii_foreign(i) => (v.visit_foreign_item)(i, (e, v)),\n-            ii_method(_, m) => visit::visit_method_helper(m, (e, v)),\n+            ii_method(_, _, m) => visit::visit_method_helper(m, (e, v)),\n         }\n     }\n }"}, {"sha": "6bd679f1304dabd29f9325530099b1fc3fbd6d48", "filename": "src/test/auxiliary/trait_default_method_xc_aux.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/186f6faf1e6f4b507d97fefcb02fd8a7cf8d716f/src%2Ftest%2Fauxiliary%2Ftrait_default_method_xc_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/186f6faf1e6f4b507d97fefcb02fd8a7cf8d716f/src%2Ftest%2Fauxiliary%2Ftrait_default_method_xc_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_default_method_xc_aux.rs?ref=186f6faf1e6f4b507d97fefcb02fd8a7cf8d716f", "patch": "@@ -5,7 +5,8 @@ pub struct Something { x: int }\n pub trait A {\n     fn f(&self) -> int;\n     fn g(&self) -> int { 10 }\n-    fn h(&self) -> int { 10 }\n+    fn h(&self) -> int { 11 }\n+    fn lurr(x: &Self, y: &Self) -> int { x.g() + y.h() }\n }\n \n \n@@ -19,6 +20,7 @@ impl A for Something {\n \n trait B<T> {\n     fn thing<U>(&self, x: T, y: U) -> (T, U) { (x, y) }\n+    fn staticthing<U>(z: &Self, x: T, y: U) -> (T, U) { (x, y) }\n }\n \n impl<T> B<T> for int { }"}, {"sha": "f31b46c333988ef16edcb338987f12543651dccf", "filename": "src/test/run-pass/trait-default-method-xc.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/186f6faf1e6f4b507d97fefcb02fd8a7cf8d716f/src%2Ftest%2Frun-pass%2Ftrait-default-method-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/186f6faf1e6f4b507d97fefcb02fd8a7cf8d716f/src%2Ftest%2Frun-pass%2Ftrait-default-method-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-default-method-xc.rs?ref=186f6faf1e6f4b507d97fefcb02fd8a7cf8d716f", "patch": "@@ -4,13 +4,17 @@\n #[allow(default_methods)];\n \n extern mod aux(name = \"trait_default_method_xc_aux\");\n-use aux::{A, B, TestEquality, Something};\n-\n+use aux::{A, TestEquality, Something};\n+use aux::B;\n \n fn f<T: aux::A>(i: T) {\n     assert_eq!(i.g(), 10);\n }\n \n+fn welp<T>(i: int, x: &T) -> int {\n+    i.g()\n+}\n+\n mod stuff {\n     pub struct thing { x: int }\n }\n@@ -43,23 +47,26 @@ fn main () {\n     // Some tests of random things\n     f(0);\n \n+    assert_eq!(A::lurr(&0, &1), 21);\n+\n     let a = stuff::thing { x: 0 };\n     let b = stuff::thing { x: 1 };\n     let c = Something { x: 1 };\n \n     assert_eq!(0i.g(), 10);\n     assert_eq!(a.g(), 10);\n-    assert_eq!(a.h(), 10);\n-    assert_eq!(c.h(), 10);\n+    assert_eq!(a.h(), 11);\n+    assert_eq!(c.h(), 11);\n \n-    0i.thing(3.14, 1);\n     assert_eq!(0i.thing(3.14, 1), (3.14, 1));\n+    assert_eq!(B::staticthing(&0i, 3.14, 1), (3.14, 1));\n+    assert_eq!(B::staticthing::<float, int, int>(&0i, 3.14, 1), (3.14, 1));\n \n     assert_eq!(g(0i, 3.14, 1), (3.14, 1));\n     assert_eq!(g(false, 3.14, 1), (3.14, 1));\n \n     let obj = @0i as @A;\n-    assert_eq!(obj.h(), 10);\n+    assert_eq!(obj.h(), 11);\n \n \n     // Trying out a real one"}]}