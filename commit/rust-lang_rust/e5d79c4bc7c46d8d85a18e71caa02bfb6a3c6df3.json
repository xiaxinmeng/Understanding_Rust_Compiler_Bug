{"sha": "e5d79c4bc7c46d8d85a18e71caa02bfb6a3c6df3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1ZDc5YzRiYzdjNDZkOGQ4NWExOGU3MWNhYTAyYmZiNmEzYzZkZjM=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2018-02-14T23:30:49Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2018-02-22T23:15:53Z"}, "message": "Move word type and word size usage to constants & make it of 128 bits", "tree": {"sha": "04dc57bdb5379b0d272d8679ed01db04607f7680", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04dc57bdb5379b0d272d8679ed01db04607f7680"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5d79c4bc7c46d8d85a18e71caa02bfb6a3c6df3", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEmNHc6jmXzkUyxd4xiMlBzaHUZDIFAlqPTzYACgkQiMlBzaHU\nZDLNvQ/9Ez2v2bjDuX97A1VatGEtZnAT6bLth5bXEamDyNP9utbyBXLdP/4uXwU2\n+ilY1znX6nK+aPk7jrLdf8N4buRD0wLuHW/1zlP9vYRmNAo8Vrp3bexOwSQuHw6E\nC8io3ZOMnmIPC7Katt0N6oxbwfYH9y8JvSs138ddPxYvwiswK8VWg2koK08I8dzW\nuq6p4u2qtI2xwOhXmIODUbrEiIfAcevUzFGoK3Ds/o4Xd3mpPMr/vKUvJi/gZ+Zw\nkLiHGnjw55MECyQ57mgdJ5rgahKEpKkciuvHcW34ShKPLnPd7llMan++OpPH5Exv\nQLjs/vbTcVC/FRHiP/unUiUDZW1dMmPKSwXR0ygfXEOjwXOFkfL/xOAwx0ZF6pfR\nMTrzUye9VkmtZxPSX5w+FvE2rLuGuvNu7CI98MtedHdjJSqq7MXE8bO4SyuULBrx\nq//XSn1eZwd66lAGJJfi1IE13XBPNjootGbipKvmfkiT9bMwWRtsUIJLulhrJBhn\n9qEh0AqYVYLk8lDm3MT4b0IVQsuqIv1mnGOwIVlbBI/WZwIMATzv8xhrxwU9Ku8o\nxVBnZn8Aaqi1hQAUHUZZu+v3vnoU/Zz1z0xiEkyGpRbpRTIbyGsN5B2XM29RUgpf\nrb5am6Y2JuG1NBL2q5nMXn2tbqNlOsia5PEhs2vPVrxGe+B6TSQ=\n=vCMo\n-----END PGP SIGNATURE-----", "payload": "tree 04dc57bdb5379b0d272d8679ed01db04607f7680\nparent b1f8e6fb06d7362eeb2065347a7db94e76b1cb2f\nauthor Santiago Pastorino <spastorino@gmail.com> 1518651049 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1519341353 -0300\n\nMove word type and word size usage to constants & make it of 128 bits\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5d79c4bc7c46d8d85a18e71caa02bfb6a3c6df3", "html_url": "https://github.com/rust-lang/rust/commit/e5d79c4bc7c46d8d85a18e71caa02bfb6a3c6df3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5d79c4bc7c46d8d85a18e71caa02bfb6a3c6df3/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1f8e6fb06d7362eeb2065347a7db94e76b1cb2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1f8e6fb06d7362eeb2065347a7db94e76b1cb2f", "html_url": "https://github.com/rust-lang/rust/commit/b1f8e6fb06d7362eeb2065347a7db94e76b1cb2f"}], "stats": {"total": 49, "additions": 26, "deletions": 23}, "files": [{"sha": "b565f5ebc7c0e9a8ab93be01c01b3db131d1eed3", "filename": "src/librustc_data_structures/bitvec.rs", "status": "modified", "additions": 26, "deletions": 23, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/e5d79c4bc7c46d8d85a18e71caa02bfb6a3c6df3/src%2Flibrustc_data_structures%2Fbitvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5d79c4bc7c46d8d85a18e71caa02bfb6a3c6df3/src%2Flibrustc_data_structures%2Fbitvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fbitvec.rs?ref=e5d79c4bc7c46d8d85a18e71caa02bfb6a3c6df3", "patch": "@@ -10,16 +10,19 @@\n \n use std::iter::FromIterator;\n \n+type Word = u128;\n+const WORD_BITS: usize = 128;\n+\n /// A very simple BitVector type.\n #[derive(Clone, Debug, PartialEq)]\n pub struct BitVector {\n-    data: Vec<u64>,\n+    data: Vec<Word>,\n }\n \n impl BitVector {\n     #[inline]\n     pub fn new(num_bits: usize) -> BitVector {\n-        let num_words = u64s(num_bits);\n+        let num_words = words(num_bits);\n         BitVector { data: vec![0; num_words] }\n     }\n \n@@ -78,7 +81,7 @@ impl BitVector {\n \n     #[inline]\n     pub fn grow(&mut self, num_bits: usize) {\n-        let num_words = u64s(num_bits);\n+        let num_words = words(num_bits);\n         if self.data.len() < num_words {\n             self.data.resize(num_words, 0)\n         }\n@@ -96,8 +99,8 @@ impl BitVector {\n }\n \n pub struct BitVectorIter<'a> {\n-    iter: ::std::slice::Iter<'a, u64>,\n-    current: u64,\n+    iter: ::std::slice::Iter<'a, Word>,\n+    current: Word,\n     idx: usize,\n }\n \n@@ -107,10 +110,10 @@ impl<'a> Iterator for BitVectorIter<'a> {\n         while self.current == 0 {\n             self.current = if let Some(&i) = self.iter.next() {\n                 if i == 0 {\n-                    self.idx += 64;\n+                    self.idx += WORD_BITS;\n                     continue;\n                 } else {\n-                    self.idx = u64s(self.idx) * 64;\n+                    self.idx = words(self.idx) * WORD_BITS;\n                     i\n                 }\n             } else {\n@@ -129,9 +132,9 @@ impl FromIterator<bool> for BitVector {\n     fn from_iter<I>(iter: I) -> BitVector where I: IntoIterator<Item=bool> {\n         let iter = iter.into_iter();\n         let (len, _) = iter.size_hint();\n-        // Make the minimum length for the bitvector 64 bits since that's\n+        // Make the minimum length for the bitvector WORD_BITS bits since that's\n         // the smallest non-zero size anyway.\n-        let len = if len < 64 { 64 } else { len };\n+        let len = if len < WORD_BITS { WORD_BITS } else { len };\n         let mut bv = BitVector::new(len);\n         for (idx, val) in iter.enumerate() {\n             if idx > len {\n@@ -152,26 +155,26 @@ impl FromIterator<bool> for BitVector {\n #[derive(Clone, Debug)]\n pub struct BitMatrix {\n     columns: usize,\n-    vector: Vec<u64>,\n+    vector: Vec<Word>,\n }\n \n impl BitMatrix {\n     /// Create a new `rows x columns` matrix, initially empty.\n     pub fn new(rows: usize, columns: usize) -> BitMatrix {\n         // For every element, we need one bit for every other\n-        // element. Round up to an even number of u64s.\n-        let u64s_per_row = u64s(columns);\n+        // element. Round up to an even number of words.\n+        let words_per_row = words(columns);\n         BitMatrix {\n             columns,\n-            vector: vec![0; rows * u64s_per_row],\n+            vector: vec![0; rows * words_per_row],\n         }\n     }\n \n     /// The range of bits for a given row.\n     fn range(&self, row: usize) -> (usize, usize) {\n-        let u64s_per_row = u64s(self.columns);\n-        let start = row * u64s_per_row;\n-        (start, start + u64s_per_row)\n+        let words_per_row = words(self.columns);\n+        let start = row * words_per_row;\n+        (start, start + words_per_row)\n     }\n \n     /// Sets the cell at `(row, column)` to true. Put another way, add\n@@ -208,12 +211,12 @@ impl BitMatrix {\n         let mut result = Vec::with_capacity(self.columns);\n         for (base, (i, j)) in (a_start..a_end).zip(b_start..b_end).enumerate() {\n             let mut v = self.vector[i] & self.vector[j];\n-            for bit in 0..64 {\n+            for bit in 0..WORD_BITS {\n                 if v == 0 {\n                     break;\n                 }\n                 if v & 0x1 != 0 {\n-                    result.push(base * 64 + bit);\n+                    result.push(base * WORD_BITS + bit);\n                 }\n                 v >>= 1;\n             }\n@@ -255,14 +258,14 @@ impl BitMatrix {\n }\n \n #[inline]\n-fn u64s(elements: usize) -> usize {\n-    (elements + 63) / 64\n+fn words(elements: usize) -> usize {\n+    (elements + WORD_BITS - 1) / WORD_BITS\n }\n \n #[inline]\n-fn word_mask(index: usize) -> (usize, u64) {\n-    let word = index / 64;\n-    let mask = 1 << (index % 64);\n+fn word_mask(index: usize) -> (usize, Word) {\n+    let word = index / WORD_BITS;\n+    let mask = 1 << (index % WORD_BITS);\n     (word, mask)\n }\n "}]}