{"sha": "790132523f051bd1396db9e9c46a18e8c3dcd19b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5MDEzMjUyM2YwNTFiZDEzOTZkYjllOWM0NmExOGU4YzNkY2QxOWI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-30T20:26:49Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-31T14:56:28Z"}, "message": "Support store to load forwarding for different types of the same size", "tree": {"sha": "a1fd592f975dabe351dda3f95f81e47a4315b19e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1fd592f975dabe351dda3f95f81e47a4315b19e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/790132523f051bd1396db9e9c46a18e8c3dcd19b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/790132523f051bd1396db9e9c46a18e8c3dcd19b", "html_url": "https://github.com/rust-lang/rust/commit/790132523f051bd1396db9e9c46a18e8c3dcd19b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/790132523f051bd1396db9e9c46a18e8c3dcd19b/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd5efa0921d59db36c87361bf90e19997358968e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd5efa0921d59db36c87361bf90e19997358968e", "html_url": "https://github.com/rust-lang/rust/commit/fd5efa0921d59db36c87361bf90e19997358968e"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "eeedb7542fdd0b7449bd13785e1d50de97f9cdc4", "filename": "src/optimize/stack2reg.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/790132523f051bd1396db9e9c46a18e8c3dcd19b/src%2Foptimize%2Fstack2reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/790132523f051bd1396db9e9c46a18e8c3dcd19b/src%2Foptimize%2Fstack2reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foptimize%2Fstack2reg.rs?ref=790132523f051bd1396db9e9c46a18e8c3dcd19b", "patch": "@@ -79,9 +79,16 @@ impl StackSlotUsage {\n \n     fn change_load_to_alias(&mut self, func: &mut Function, load: Inst, value: Value) {\n         let loaded_value = func.dfg.inst_results(load)[0];\n-        func.dfg.detach_results(load);\n-        func.dfg.replace(load).nop();\n-        func.dfg.change_to_alias(loaded_value, value);\n+        let loaded_type = func.dfg.value_type(loaded_value);\n+\n+        if func.dfg.value_type(value) == loaded_type {\n+            func.dfg.detach_results(load);\n+            func.dfg.replace(load).nop();\n+            func.dfg.change_to_alias(loaded_value, value);\n+        } else {\n+            func.dfg.replace(load).bitcast(loaded_type, value);\n+        }\n+\n         self.stack_load.remove(&load);\n     }\n }\n@@ -159,7 +166,6 @@ pub(super) fn optimize_function(\n         }\n \n         for load in users.stack_load.clone().into_iter() {\n-            let load_ebb = opt_ctx.ctx.func.layout.inst_ebb(load).unwrap();\n             let loaded_value = opt_ctx.ctx.func.dfg.inst_results(load)[0];\n             let loaded_type = opt_ctx.ctx.func.dfg.value_type(loaded_value);\n \n@@ -179,13 +185,9 @@ pub(super) fn optimize_function(\n                 [] => println!(\"[{}] [BUG?] Reading uninitialized memory\", name),\n                 [store] if spatial_overlap(&opt_ctx.ctx.func, store, load) == SpatialOverlap::Full && temporal_order(&opt_ctx.ctx, store, load) == TemporalOrder::DefinitivelyBefore => {\n                     // Only one store could have been the origin of the value.\n-                    let store_ebb = opt_ctx.ctx.func.layout.inst_ebb(store).unwrap();\n                     let stored_value = opt_ctx.ctx.func.dfg.inst_args(store)[0];\n-                    let stored_type = opt_ctx.ctx.func.dfg.value_type(stored_value);\n-                    if stored_type == loaded_type {\n-                        println!(\"Store to load forward {} -> {}\", store, load);\n-                        users.change_load_to_alias(&mut opt_ctx.ctx.func, load, stored_value);\n-                    }\n+                    println!(\"Store to load forward {} -> {}\", store, load);\n+                    users.change_load_to_alias(&mut opt_ctx.ctx.func, load, stored_value);\n                 }\n                 _ => {} // FIXME implement this\n             }"}]}