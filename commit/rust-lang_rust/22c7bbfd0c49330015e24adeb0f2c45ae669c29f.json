{"sha": "22c7bbfd0c49330015e24adeb0f2c45ae669c29f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyYzdiYmZkMGM0OTMzMDAxNWUyNGFkZWIwZjJjNDVhZTY2OWMyOWY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-08-15T03:40:15Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-08-16T23:09:33Z"}, "message": "Delegate `{}` to Default instead of Poly\n\nBy using a separate trait this is overridable on a per-type basis and makes room\nfor the possibility of even more arguments passed in for the future.", "tree": {"sha": "44c61eb2f97f4a828c691db400dffdf17765c911", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44c61eb2f97f4a828c691db400dffdf17765c911"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22c7bbfd0c49330015e24adeb0f2c45ae669c29f", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22c7bbfd0c49330015e24adeb0f2c45ae669c29f", "html_url": "https://github.com/rust-lang/rust/commit/22c7bbfd0c49330015e24adeb0f2c45ae669c29f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22c7bbfd0c49330015e24adeb0f2c45ae669c29f/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "109274426a7cd676b9aa1bb06afd9f86b44f6e9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/109274426a7cd676b9aa1bb06afd9f86b44f6e9b", "html_url": "https://github.com/rust-lang/rust/commit/109274426a7cd676b9aa1bb06afd9f86b44f6e9b"}], "stats": {"total": 129, "additions": 100, "deletions": 29}, "files": [{"sha": "29f55dc72601246da37b30f36613d3e1d97fa2b4", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/22c7bbfd0c49330015e24adeb0f2c45ae669c29f/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c7bbfd0c49330015e24adeb0f2c45ae669c29f/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=22c7bbfd0c49330015e24adeb0f2c45ae669c29f", "patch": "@@ -356,28 +356,46 @@ pub struct Argument<'self> {\n     priv value: &'self util::Void,\n }\n \n+/// When a format is not otherwise specified, types are formatted by ascribing\n+/// to this trait. There is not an explicit way of selecting this trait to be\n+/// used for formatting, it is only if no other format is specified.\n+#[allow(missing_doc)]\n+pub trait Default { fn fmt(&Self, &mut Formatter); }\n+\n+/// Format trait for the `b` character\n #[allow(missing_doc)]\n pub trait Bool { fn fmt(&Self, &mut Formatter); }\n+/// Format trait for the `c` character\n #[allow(missing_doc)]\n pub trait Char { fn fmt(&Self, &mut Formatter); }\n+/// Format trait for the `i` and `d` characters\n #[allow(missing_doc)]\n pub trait Signed { fn fmt(&Self, &mut Formatter); }\n+/// Format trait for the `u` character\n #[allow(missing_doc)]\n pub trait Unsigned { fn fmt(&Self, &mut Formatter); }\n+/// Format trait for the `o` character\n #[allow(missing_doc)]\n pub trait Octal { fn fmt(&Self, &mut Formatter); }\n+/// Format trait for the `b` character\n #[allow(missing_doc)]\n pub trait Binary { fn fmt(&Self, &mut Formatter); }\n+/// Format trait for the `x` character\n #[allow(missing_doc)]\n pub trait LowerHex { fn fmt(&Self, &mut Formatter); }\n+/// Format trait for the `X` character\n #[allow(missing_doc)]\n pub trait UpperHex { fn fmt(&Self, &mut Formatter); }\n+/// Format trait for the `s` character\n #[allow(missing_doc)]\n pub trait String { fn fmt(&Self, &mut Formatter); }\n+/// Format trait for the `?` character\n #[allow(missing_doc)]\n pub trait Poly { fn fmt(&Self, &mut Formatter); }\n+/// Format trait for the `p` character\n #[allow(missing_doc)]\n pub trait Pointer { fn fmt(&Self, &mut Formatter); }\n+/// Format trait for the `f` character\n #[allow(missing_doc)]\n pub trait Float { fn fmt(&Self, &mut Formatter); }\n \n@@ -855,5 +873,37 @@ impl<T> Pointer for *const T {\n     }\n }\n \n+// Implementation of Default for various core types\n+\n+macro_rules! delegate(($ty:ty to $other:ident) => {\n+    impl<'self> Default for $ty {\n+        fn fmt(me: &$ty, f: &mut Formatter) {\n+            $other::fmt(me, f)\n+        }\n+    }\n+})\n+delegate!(int to Signed)\n+delegate!( i8 to Signed)\n+delegate!(i16 to Signed)\n+delegate!(i32 to Signed)\n+delegate!(i64 to Signed)\n+delegate!(uint to Unsigned)\n+delegate!(  u8 to Unsigned)\n+delegate!( u16 to Unsigned)\n+delegate!( u32 to Unsigned)\n+delegate!( u64 to Unsigned)\n+delegate!(@str to String)\n+delegate!(~str to String)\n+delegate!(&'self str to String)\n+delegate!(bool to Bool)\n+delegate!(char to Char)\n+delegate!(float to Float)\n+delegate!(f32 to Float)\n+delegate!(f64 to Float)\n+\n+impl<T> Default for *const T {\n+    fn fmt(me: &*const T, f: &mut Formatter) { Pointer::fmt(me, f) }\n+}\n+\n // If you expected tests to be here, look instead at the run-pass/ifmt.rs test,\n // it's a lot easier than creating all of the rt::Piece structures here."}, {"sha": "ef8778abf0ed4c0b8d4f60dfa49a88ef898913e7", "filename": "src/libstd/fmt/parse.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/22c7bbfd0c49330015e24adeb0f2c45ae669c29f/src%2Flibstd%2Ffmt%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c7bbfd0c49330015e24adeb0f2c45ae669c29f/src%2Flibstd%2Ffmt%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fparse.rs?ref=22c7bbfd0c49330015e24adeb0f2c45ae669c29f", "patch": "@@ -339,7 +339,11 @@ impl<'self> Parser<'self> {\n             }\n         }\n         // Finally the actual format specifier\n-        spec.ty = self.word();\n+        if self.consume('?') {\n+            spec.ty = \"?\";\n+        } else {\n+            spec.ty = self.word();\n+        }\n         return spec;\n     }\n "}, {"sha": "35be77b95c5f9ae1b850218a627dc175d621098d", "filename": "src/libsyntax/ext/ifmt.rs", "status": "modified", "additions": 20, "deletions": 23, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/22c7bbfd0c49330015e24adeb0f2c45ae669c29f/src%2Flibsyntax%2Fext%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c7bbfd0c49330015e24adeb0f2c45ae669c29f/src%2Flibsyntax%2Fext%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fifmt.rs?ref=22c7bbfd0c49330015e24adeb0f2c45ae669c29f", "patch": "@@ -623,19 +623,16 @@ impl Context {\n \n     fn format_arg(&self, sp: span, arg: Either<uint, @str>,\n                   ident: ast::ident) -> @ast::expr {\n-        let mut ty = match arg {\n+        let ty = match arg {\n             Left(i) => self.arg_types[i].unwrap(),\n             Right(s) => *self.name_types.get(&s)\n         };\n-        // Default types to '?' if nothing else is specified.\n-        if ty == Unknown {\n-            ty = Known(@\"?\");\n-        }\n \n         let argptr = self.ecx.expr_addr_of(sp, self.ecx.expr_ident(sp, ident));\n-        match ty {\n+        let fmt_trait = match ty {\n+            Unknown => \"Default\",\n             Known(tyname) => {\n-                let fmt_trait = match tyname.as_slice() {\n+                match tyname.as_slice() {\n                     \"?\" => \"Poly\",\n                     \"b\" => \"Bool\",\n                     \"c\" => \"Char\",\n@@ -653,35 +650,35 @@ impl Context {\n                                                     `%s`\", tyname));\n                         \"Dummy\"\n                     }\n-                };\n-                let format_fn = self.ecx.path_global(sp, ~[\n-                        self.ecx.ident_of(\"std\"),\n-                        self.ecx.ident_of(\"fmt\"),\n-                        self.ecx.ident_of(fmt_trait),\n-                        self.ecx.ident_of(\"fmt\"),\n-                    ]);\n-                self.ecx.expr_call_global(sp, ~[\n-                        self.ecx.ident_of(\"std\"),\n-                        self.ecx.ident_of(\"fmt\"),\n-                        self.ecx.ident_of(\"argument\"),\n-                    ], ~[self.ecx.expr_path(format_fn), argptr])\n+                }\n             }\n             String => {\n-                self.ecx.expr_call_global(sp, ~[\n+                return self.ecx.expr_call_global(sp, ~[\n                         self.ecx.ident_of(\"std\"),\n                         self.ecx.ident_of(\"fmt\"),\n                         self.ecx.ident_of(\"argumentstr\"),\n                     ], ~[argptr])\n             }\n             Unsigned => {\n-                self.ecx.expr_call_global(sp, ~[\n+                return self.ecx.expr_call_global(sp, ~[\n                         self.ecx.ident_of(\"std\"),\n                         self.ecx.ident_of(\"fmt\"),\n                         self.ecx.ident_of(\"argumentuint\"),\n                     ], ~[argptr])\n             }\n-            Unknown => { fail!() }\n-        }\n+        };\n+\n+        let format_fn = self.ecx.path_global(sp, ~[\n+                self.ecx.ident_of(\"std\"),\n+                self.ecx.ident_of(\"fmt\"),\n+                self.ecx.ident_of(fmt_trait),\n+                self.ecx.ident_of(\"fmt\"),\n+            ]);\n+        self.ecx.expr_call_global(sp, ~[\n+                self.ecx.ident_of(\"std\"),\n+                self.ecx.ident_of(\"fmt\"),\n+                self.ecx.ident_of(\"argument\"),\n+            ], ~[self.ecx.expr_path(format_fn), argptr])\n     }\n }\n "}, {"sha": "cba28463f990687f1a1854c9c376d92463e768c0", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/22c7bbfd0c49330015e24adeb0f2c45ae669c29f/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c7bbfd0c49330015e24adeb0f2c45ae669c29f/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=22c7bbfd0c49330015e24adeb0f2c45ae669c29f", "patch": "@@ -25,16 +25,36 @@ pub fn main() {\n     macro_rules! t(($a:expr, $b:expr) => { assert_eq!($a, $b.to_owned()) })\n \n     // Make sure there's a poly formatter that takes anything\n-    t!(ifmt!(\"{}\", 1), \"1\");\n-    t!(ifmt!(\"{}\", A), \"{}\");\n-    t!(ifmt!(\"{}\", ()), \"()\");\n-    t!(ifmt!(\"{}\", @(~1, \"foo\")), \"@(~1, \\\"foo\\\")\");\n+    t!(ifmt!(\"{:?}\", 1), \"1\");\n+    t!(ifmt!(\"{:?}\", A), \"{}\");\n+    t!(ifmt!(\"{:?}\", ()), \"()\");\n+    t!(ifmt!(\"{:?}\", @(~1, \"foo\")), \"@(~1, \\\"foo\\\")\");\n \n     // Various edge cases without formats\n     t!(ifmt!(\"\"), \"\");\n     t!(ifmt!(\"hello\"), \"hello\");\n     t!(ifmt!(\"hello \\\\{\"), \"hello {\");\n \n+    // default formatters should work\n+    t!(ifmt!(\"{}\", 1i), \"1\");\n+    t!(ifmt!(\"{}\", 1i8), \"1\");\n+    t!(ifmt!(\"{}\", 1i16), \"1\");\n+    t!(ifmt!(\"{}\", 1i32), \"1\");\n+    t!(ifmt!(\"{}\", 1i64), \"1\");\n+    t!(ifmt!(\"{}\", 1u), \"1\");\n+    t!(ifmt!(\"{}\", 1u8), \"1\");\n+    t!(ifmt!(\"{}\", 1u16), \"1\");\n+    t!(ifmt!(\"{}\", 1u32), \"1\");\n+    t!(ifmt!(\"{}\", 1u64), \"1\");\n+    t!(ifmt!(\"{}\", 1.0f), \"1\");\n+    t!(ifmt!(\"{}\", 1.0f32), \"1\");\n+    t!(ifmt!(\"{}\", 1.0f64), \"1\");\n+    t!(ifmt!(\"{}\", \"a\"), \"a\");\n+    t!(ifmt!(\"{}\", ~\"a\"), \"a\");\n+    t!(ifmt!(\"{}\", @\"a\"), \"a\");\n+    t!(ifmt!(\"{}\", false), \"false\");\n+    t!(ifmt!(\"{}\", 'a'), \"a\");\n+\n     // At least exercise all the formats\n     t!(ifmt!(\"{:b}\", true), \"true\");\n     t!(ifmt!(\"{:c}\", '\u2603'), \"\u2603\");\n@@ -56,7 +76,7 @@ pub fn main() {\n     t!(ifmt!(\"{foo} {bar}\", foo=0, bar=1), \"0 1\");\n     t!(ifmt!(\"{foo} {1} {bar} {0}\", 0, 1, foo=2, bar=3), \"2 1 3 0\");\n     t!(ifmt!(\"{} {0:s}\", \"a\"), \"a a\");\n-    t!(ifmt!(\"{} {0}\", \"a\"), \"\\\"a\\\" \\\"a\\\"\");\n+    t!(ifmt!(\"{} {0}\", \"a\"), \"a a\");\n \n     // Methods should probably work\n     t!(ifmt!(\"{0, plural, =1{a#} =2{b#} zero{c#} other{d#}}\", 0u), \"c0\");"}]}