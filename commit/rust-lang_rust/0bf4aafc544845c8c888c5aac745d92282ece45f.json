{"sha": "0bf4aafc544845c8c888c5aac745d92282ece45f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiZjRhYWZjNTQ0ODQ1YzhjODg4YzVhYWM3NDVkOTIyODJlY2U0NWY=", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-10-12T22:18:41Z"}, "committer": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-11-30T20:18:55Z"}, "message": "Intra doc links for the char primitive", "tree": {"sha": "0b1b9c4a2a0b8ea8d8bc3865ef60ae21fbaf7044", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b1b9c4a2a0b8ea8d8bc3865ef60ae21fbaf7044"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bf4aafc544845c8c888c5aac745d92282ece45f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bf4aafc544845c8c888c5aac745d92282ece45f", "html_url": "https://github.com/rust-lang/rust/commit/0bf4aafc544845c8c888c5aac745d92282ece45f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bf4aafc544845c8c888c5aac745d92282ece45f/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19fb4fec508d31489d05373ece476cdb182d12ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/19fb4fec508d31489d05373ece476cdb182d12ce", "html_url": "https://github.com/rust-lang/rust/commit/19fb4fec508d31489d05373ece476cdb182d12ce"}], "stats": {"total": 51, "additions": 23, "deletions": 28}, "files": [{"sha": "3fb5f30d2e4157fbc75ef9f2a70bad18a5582c73", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 23, "deletions": 28, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/0bf4aafc544845c8c888c5aac745d92282ece45f/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf4aafc544845c8c888c5aac745d92282ece45f/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=0bf4aafc544845c8c888c5aac745d92282ece45f", "patch": "@@ -109,12 +109,10 @@ impl char {\n     /// `char`s. `from_u32()` will return `None` if the input is not a valid value\n     /// for a `char`.\n     ///\n-    /// [`u32`]: primitive.u32.html\n-    ///\n     /// For an unsafe version of this function which ignores these checks, see\n     /// [`from_u32_unchecked`].\n     ///\n-    /// [`from_u32_unchecked`]: #method.from_u32_unchecked\n+    /// [`from_u32_unchecked`]: prim@char::from_u32_unchecked()\n     ///\n     /// # Examples\n     ///\n@@ -159,15 +157,13 @@ impl char {\n     /// `char`s. `from_u32_unchecked()` will ignore this, and blindly cast to\n     /// `char`, possibly creating an invalid one.\n     ///\n-    /// [`u32`]: primitive.u32.html\n-    ///\n     /// # Safety\n     ///\n     /// This function is unsafe, as it may construct invalid `char` values.\n     ///\n     /// For a safe version of this function, see the [`from_u32`] function.\n     ///\n-    /// [`from_u32`]: #method.from_u32\n+    /// [`from_u32`]: prim@char::from_u32()\n     ///\n     /// # Examples\n     ///\n@@ -249,7 +245,7 @@ impl char {\n     /// sixteen, hexadecimal, to give some common values. Arbitrary\n     /// radices are supported.\n     ///\n-    /// Compared to `is_numeric()`, this function only recognizes the characters\n+    /// Compared to [`is_numeric()`], this function only recognizes the characters\n     /// `0-9`, `a-z` and `A-Z`.\n     ///\n     /// 'Digit' is defined to be only the following characters:\n@@ -258,9 +254,9 @@ impl char {\n     /// * `a-z`\n     /// * `A-Z`\n     ///\n-    /// For a more comprehensive understanding of 'digit', see [`is_numeric`][is_numeric].\n+    /// For a more comprehensive understanding of 'digit', see [`is_numeric()`].\n     ///\n-    /// [is_numeric]: #method.is_numeric\n+    /// [`is_numeric()`]: prim@char::is_numeric()\n     ///\n     /// # Panics\n     ///\n@@ -483,9 +479,9 @@ impl char {\n     /// * Any character in the 'printable ASCII' range `0x20` .. `0x7e`\n     ///   inclusive is not escaped.\n     /// * All other characters are given hexadecimal Unicode escapes; see\n-    ///   [`escape_unicode`][escape_unicode].\n+    ///   [`escape_unicode`].\n     ///\n-    /// [escape_unicode]: #method.escape_unicode\n+    /// [`escape_unicode`]: prim@char::escape_unicode()\n     ///\n     /// # Examples\n     ///\n@@ -504,7 +500,6 @@ impl char {\n     /// println!(\"{}\", '\"'.escape_default());\n     /// ```\n     ///\n-    ///\n     /// Both are equivalent to:\n     ///\n     /// ```\n@@ -584,10 +579,10 @@ impl char {\n     /// Returns the number of 16-bit code units this `char` would need if\n     /// encoded in UTF-16.\n     ///\n-    /// See the documentation for [`len_utf8`] for more explanation of this\n+    /// See the documentation for [`len_utf8()`] for more explanation of this\n     /// concept. This function is a mirror, but for UTF-16 instead of UTF-8.\n     ///\n-    /// [`len_utf8`]: #method.len_utf8\n+    /// [`len_utf8()`]: prim@char::len_utf8()\n     ///\n     /// # Examples\n     ///\n@@ -802,8 +797,8 @@ impl char {\n \n     /// Returns `true` if this `char` satisfies either [`is_alphabetic()`] or [`is_numeric()`].\n     ///\n-    /// [`is_alphabetic()`]: #method.is_alphabetic\n-    /// [`is_numeric()`]: #method.is_numeric\n+    /// [`is_alphabetic()`]: prim@char::is_alphabetic()\n+    /// [`is_numeric()`]: prim@char::is_numeric()\n     ///\n     /// # Examples\n     ///\n@@ -1075,10 +1070,10 @@ impl char {\n     /// ASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\n     /// but non-ASCII letters are unchanged.\n     ///\n-    /// To uppercase the value in-place, use [`make_ascii_uppercase`].\n+    /// To uppercase the value in-place, use [`make_ascii_uppercase()`].\n     ///\n     /// To uppercase ASCII characters in addition to non-ASCII characters, use\n-    /// [`to_uppercase`].\n+    /// [`to_uppercase()`].\n     ///\n     /// # Examples\n     ///\n@@ -1090,8 +1085,8 @@ impl char {\n     /// assert_eq!('\u2764', non_ascii.to_ascii_uppercase());\n     /// ```\n     ///\n-    /// [`make_ascii_uppercase`]: #method.make_ascii_uppercase\n-    /// [`to_uppercase`]: #method.to_uppercase\n+    /// [`make_ascii_uppercase()`]: prim@char::make_ascii_uppercase()\n+    /// [`to_uppercase()`]: prim@char::to_uppercase()\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn to_ascii_uppercase(&self) -> char {\n@@ -1103,10 +1098,10 @@ impl char {\n     /// ASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\n     /// but non-ASCII letters are unchanged.\n     ///\n-    /// To lowercase the value in-place, use [`make_ascii_lowercase`].\n+    /// To lowercase the value in-place, use [`make_ascii_lowercase()`].\n     ///\n     /// To lowercase ASCII characters in addition to non-ASCII characters, use\n-    /// [`to_lowercase`].\n+    /// [`to_lowercase()`].\n     ///\n     /// # Examples\n     ///\n@@ -1118,8 +1113,8 @@ impl char {\n     /// assert_eq!('\u2764', non_ascii.to_ascii_lowercase());\n     /// ```\n     ///\n-    /// [`make_ascii_lowercase`]: #method.make_ascii_lowercase\n-    /// [`to_lowercase`]: #method.to_lowercase\n+    /// [`make_ascii_lowercase()`]: prim@char::make_ascii_lowercase()\n+    /// [`to_lowercase()`]: prim@char::to_lowercase()\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn to_ascii_lowercase(&self) -> char {\n@@ -1153,7 +1148,7 @@ impl char {\n     /// but non-ASCII letters are unchanged.\n     ///\n     /// To return a new uppercased value without modifying the existing one, use\n-    /// [`to_ascii_uppercase`].\n+    /// [`to_ascii_uppercase()`].\n     ///\n     /// # Examples\n     ///\n@@ -1165,7 +1160,7 @@ impl char {\n     /// assert_eq!('A', ascii);\n     /// ```\n     ///\n-    /// [`to_ascii_uppercase`]: #method.to_ascii_uppercase\n+    /// [`to_ascii_uppercase()`]: prim@char::to_ascii_uppercase()\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn make_ascii_uppercase(&mut self) {\n@@ -1178,7 +1173,7 @@ impl char {\n     /// but non-ASCII letters are unchanged.\n     ///\n     /// To return a new lowercased value without modifying the existing one, use\n-    /// [`to_ascii_lowercase`].\n+    /// [`to_ascii_lowercase()`].\n     ///\n     /// # Examples\n     ///\n@@ -1190,7 +1185,7 @@ impl char {\n     /// assert_eq!('a', ascii);\n     /// ```\n     ///\n-    /// [`to_ascii_lowercase`]: #method.to_ascii_lowercase\n+    /// [`to_ascii_lowercase()`]: prim@char::to_ascii_lowercase()\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn make_ascii_lowercase(&mut self) {"}]}