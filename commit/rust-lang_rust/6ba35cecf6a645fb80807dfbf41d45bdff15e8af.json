{"sha": "6ba35cecf6a645fb80807dfbf41d45bdff15e8af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiYTM1Y2VjZjZhNjQ1ZmI4MDgwN2RmYmY0MWQ0NWJkZmYxNWU4YWY=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-01-26T08:40:42Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-01-28T05:06:17Z"}, "message": "Resolve: Fix an ICE that occurs when an identifier refers to an indeterminate import (i.e. one that is not resolved and not known to have failed)", "tree": {"sha": "f9590eb80505bb2b9b657b77d48734f4cf12d4fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9590eb80505bb2b9b657b77d48734f4cf12d4fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ba35cecf6a645fb80807dfbf41d45bdff15e8af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ba35cecf6a645fb80807dfbf41d45bdff15e8af", "html_url": "https://github.com/rust-lang/rust/commit/6ba35cecf6a645fb80807dfbf41d45bdff15e8af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ba35cecf6a645fb80807dfbf41d45bdff15e8af/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38e23e8f7b97f7add3b9b868766251b0aa060a14", "url": "https://api.github.com/repos/rust-lang/rust/commits/38e23e8f7b97f7add3b9b868766251b0aa060a14", "html_url": "https://github.com/rust-lang/rust/commit/38e23e8f7b97f7add3b9b868766251b0aa060a14"}], "stats": {"total": 22, "additions": 4, "deletions": 18}, "files": [{"sha": "6e812ed5434343a0d8b469073688f4ab47801fba", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6ba35cecf6a645fb80807dfbf41d45bdff15e8af/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba35cecf6a645fb80807dfbf41d45bdff15e8af/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=6ba35cecf6a645fb80807dfbf41d45bdff15e8af", "patch": "@@ -1811,14 +1811,6 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             }\n         }\n \n-        // Next, check the module's imports if necessary.\n-\n-        // If this is a search of all imports, we should be done with glob\n-        // resolution at this point.\n-        if name_search_type == PathSearch {\n-            assert_eq!(module_.glob_count.get(), 0);\n-        }\n-\n         // Check the list of resolved imports.\n         let children = module_.import_resolutions.borrow();\n         match children.get(&name) {\n@@ -2935,9 +2927,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 }\n             }\n \n-            Indeterminate => {\n-                panic!(\"unexpected indeterminate result\");\n-            }\n+            Indeterminate => return BareIdentifierPatternUnresolved,\n             Failed(err) => {\n                 match err {\n                     Some((span, msg)) => {\n@@ -3195,7 +3185,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 resolve_error(self, span, ResolutionError::FailedToResolve(&*msg));\n                 return None;\n             }\n-            Indeterminate => panic!(\"indeterminate unexpected\"),\n+            Indeterminate => return None,\n             Success((resulting_module, resulting_last_private)) => {\n                 containing_module = resulting_module;\n                 last_private = resulting_last_private;\n@@ -3258,9 +3248,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 return None;\n             }\n \n-            Indeterminate => {\n-                panic!(\"indeterminate unexpected\");\n-            }\n+            Indeterminate => return None,\n \n             Success((resulting_module, resulting_last_private)) => {\n                 containing_module = resulting_module;\n@@ -3355,9 +3343,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     }\n                 }\n             }\n-            Indeterminate => {\n-                panic!(\"unexpected indeterminate result\");\n-            }\n+            Indeterminate => None,\n             Failed(err) => {\n                 debug!(\"(resolving item path by identifier in lexical scope) failed to resolve {}\",\n                        name);"}]}