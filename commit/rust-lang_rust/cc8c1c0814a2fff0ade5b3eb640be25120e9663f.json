{"sha": "cc8c1c0814a2fff0ade5b3eb640be25120e9663f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjOGMxYzA4MTRhMmZmZjBhZGU1YjNlYjY0MGJlMjUxMjBlOTY2M2Y=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-12-19T11:36:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-12-19T11:36:42Z"}, "message": "Merge pull request #1345 from EpocSquadron/epocsquadron-documentation\n\nClarify recco to install as a soft dependency", "tree": {"sha": "630b37e7969933ab501709afe9eb00087dd59643", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/630b37e7969933ab501709afe9eb00087dd59643"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc8c1c0814a2fff0ade5b3eb640be25120e9663f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc8c1c0814a2fff0ade5b3eb640be25120e9663f", "html_url": "https://github.com/rust-lang/rust/commit/cc8c1c0814a2fff0ade5b3eb640be25120e9663f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc8c1c0814a2fff0ade5b3eb640be25120e9663f/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d61c7fc7470ba572624f14af46f519e24322112d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d61c7fc7470ba572624f14af46f519e24322112d", "html_url": "https://github.com/rust-lang/rust/commit/d61c7fc7470ba572624f14af46f519e24322112d"}, {"sha": "e40cb6a9ddcfd64145aaedb77df3748d9b48e5ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/e40cb6a9ddcfd64145aaedb77df3748d9b48e5ac", "html_url": "https://github.com/rust-lang/rust/commit/e40cb6a9ddcfd64145aaedb77df3748d9b48e5ac"}], "stats": {"total": 99, "additions": 53, "deletions": 46}, "files": [{"sha": "24b03e2027555f711fec0f79493296680fa10334", "filename": "README.md", "status": "modified", "additions": 53, "deletions": 46, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/cc8c1c0814a2fff0ade5b3eb640be25120e9663f/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/cc8c1c0814a2fff0ade5b3eb640be25120e9663f/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=cc8c1c0814a2fff0ade5b3eb640be25120e9663f", "patch": "@@ -16,52 +16,41 @@ Table of contents:\n \n ## Usage\n \n+Since this is a tool for helping the developer of a library or application\n+write better code, it is recommended not to include clippy as a hard dependency.\n+Options include using it as an optional dependency, as a cargo subcommand, or\n+as an included feature during build. All of these options are detailed below.\n+\n As a general rule clippy will only work with the *latest* Rust nightly for now.\n \n-### As a Compiler Plugin\n+### Optional dependency\n \n-Since stable Rust is backwards compatible, you should be able to\n-compile your stable programs with nightly Rust with clippy plugged in to\n-circumvent this.\n+If you want to make clippy an optional dependency, you can do the following:\n \n-Add in your `Cargo.toml`:\n+In your `Cargo.toml`:\n \n ```toml\n [dependencies]\n-clippy = \"*\"\n-```\n+clippy = {version = \"*\", optional = true}\n \n-You then need to add `#![feature(plugin)]` and `#![plugin(clippy)]` to the top\n-of your crate entry point (`main.rs` or `lib.rs`).\n+[features]\n+default = []\n+```\n \n-Sample `main.rs`:\n+And, in your `main.rs` or `lib.rs`:\n \n ```rust\n-#![feature(plugin)]\n-\n-#![plugin(clippy)]\n-\n+#![cfg_attr(feature=\"clippy\", feature(plugin))]\n \n-fn main(){\n-    let x = Some(1u8);\n-    match x {\n-        Some(y) => println!(\"{:?}\", y),\n-        _ => ()\n-    }\n-}\n+#![cfg_attr(feature=\"clippy\", plugin(clippy))]\n ```\n \n-Produces this warning:\n+Then build by enabling the feature: `cargo build --features \"clippy\"`\n \n-```terminal\n-src/main.rs:8:5: 11:6 warning: you seem to be trying to use match for destructuring a single type. Consider using `if let`, #[warn(single_match)] on by default\n-src/main.rs:8     match x {\n-src/main.rs:9         Some(y) => println!(\"{:?}\", y),\n-src/main.rs:10         _ => ()\n-src/main.rs:11     }\n-src/main.rs:8:5: 11:6 help: Try\n-if let Some(y) = x { println!(\"{:?}\", y) }\n-```\n+Instead of adding the `cfg_attr` attributes you can also run clippy on demand:\n+`cargo rustc --features clippy -- -Z no-trans -Z extra-plugins=clippy`\n+(the `-Z no trans`, while not neccessary, will stop the compilation process after\n+typechecking (and lints) have completed, which can significantly reduce the runtime).\n \n ### As a cargo subcommand (`cargo clippy`)\n \n@@ -96,34 +85,52 @@ cargo rustc -- -L /path/to/clippy_so -Z extra-plugins=clippy\n *[Note](https://github.com/Manishearth/rust-clippy/wiki#a-word-of-warning):*\n Be sure that clippy was compiled with the same version of rustc that cargo invokes here!\n \n-### Optional dependency\n+### As a Compiler Plugin\n \n-If you want to make clippy an optional dependency, you can do the following:\n+*Note:* This is not a recommended installation method.\n \n-In your `Cargo.toml`:\n+Since stable Rust is backwards compatible, you should be able to\n+compile your stable programs with nightly Rust with clippy plugged in to\n+circumvent this.\n+\n+Add in your `Cargo.toml`:\n \n ```toml\n [dependencies]\n-clippy = {version = \"*\", optional = true}\n-\n-[features]\n-default = []\n+clippy = \"*\"\n ```\n \n-And, in your `main.rs` or `lib.rs`:\n+You then need to add `#![feature(plugin)]` and `#![plugin(clippy)]` to the top\n+of your crate entry point (`main.rs` or `lib.rs`).\n+\n+Sample `main.rs`:\n \n ```rust\n-#![cfg_attr(feature=\"clippy\", feature(plugin))]\n+#![feature(plugin)]\n \n-#![cfg_attr(feature=\"clippy\", plugin(clippy))]\n+#![plugin(clippy)]\n+\n+\n+fn main(){\n+    let x = Some(1u8);\n+    match x {\n+        Some(y) => println!(\"{:?}\", y),\n+        _ => ()\n+    }\n+}\n ```\n \n-Then build by enabling the feature: `cargo build --features \"clippy\"`\n+Produces this warning:\n \n-Instead of adding the `cfg_attr` attributes you can also run clippy on demand:\n-`cargo rustc --features clippy -- -Z no-trans -Z extra-plugins=clippy`\n-(the `-Z no trans`, while not neccessary, will stop the compilation process after\n-typechecking (and lints) have completed, which can significantly reduce the runtime).\n+```terminal\n+src/main.rs:8:5: 11:6 warning: you seem to be trying to use match for destructuring a single type. Consider using `if let`, #[warn(single_match)] on by default\n+src/main.rs:8     match x {\n+src/main.rs:9         Some(y) => println!(\"{:?}\", y),\n+src/main.rs:10         _ => ()\n+src/main.rs:11     }\n+src/main.rs:8:5: 11:6 help: Try\n+if let Some(y) = x { println!(\"{:?}\", y) }\n+```\n \n ## Configuration\n "}]}