{"sha": "8b5a96ec45886bc42090fe313150e648e488eee1", "node_id": "C_kwDOAAsO6NoAKDhiNWE5NmVjNDU4ODZiYzQyMDkwZmUzMTMxNTBlNjQ4ZTQ4OGVlZTE", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-19T10:45:35Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-20T13:39:48Z"}, "message": "Some tracing cleanups", "tree": {"sha": "6e3f389b4777541a80464a74c3baa3308a64f0c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e3f389b4777541a80464a74c3baa3308a64f0c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b5a96ec45886bc42090fe313150e648e488eee1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b5a96ec45886bc42090fe313150e648e488eee1", "html_url": "https://github.com/rust-lang/rust/commit/8b5a96ec45886bc42090fe313150e648e488eee1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b5a96ec45886bc42090fe313150e648e488eee1/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a746f4ac3a489efb724cde813607f3b96c2df7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a746f4ac3a489efb724cde813607f3b96c2df7b", "html_url": "https://github.com/rust-lang/rust/commit/8a746f4ac3a489efb724cde813607f3b96c2df7b"}], "stats": {"total": 13, "additions": 5, "deletions": 8}, "files": [{"sha": "36397227d88d0e990a9aa592ec6fce718fcfb3ca", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b5a96ec45886bc42090fe313150e648e488eee1/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5a96ec45886bc42090fe313150e648e488eee1/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=8b5a96ec45886bc42090fe313150e648e488eee1", "patch": "@@ -1153,6 +1153,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         category: ConstraintCategory<'tcx>,\n     ) -> Fallible<()> {\n         let annotated_type = self.user_type_annotations[user_ty.base].inferred_ty;\n+        trace!(?annotated_type);\n         let mut curr_projected_ty = PlaceTy::from_ty(annotated_type);\n \n         let tcx = self.infcx.tcx;\n@@ -1170,10 +1171,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             );\n             curr_projected_ty = projected_ty;\n         }\n-        debug!(\n-            \"user_ty base: {:?} freshened: {:?} projs: {:?} yields: {:?}\",\n-            user_ty.base, annotated_type, user_ty.projs, curr_projected_ty\n-        );\n+        trace!(?curr_projected_ty);\n \n         let ty = curr_projected_ty.ty;\n         self.relate_types(ty, v.xform(ty::Variance::Contravariant), a, locations, category)?;"}, {"sha": "599f0b9d3fab4de99f30f25ba9fd1bf6774ed3ab", "filename": "compiler/rustc_middle/src/mir/tcx.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8b5a96ec45886bc42090fe313150e648e488eee1/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5a96ec45886bc42090fe313150e648e488eee1/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs?ref=8b5a96ec45886bc42090fe313150e648e488eee1", "patch": "@@ -32,8 +32,9 @@ impl<'tcx> PlaceTy<'tcx> {\n     /// not carry a `Ty` for `T`.)\n     ///\n     /// Note that the resulting type has not been normalized.\n+    #[instrument(level = \"debug\", skip(tcx), ret)]\n     pub fn field_ty(self, tcx: TyCtxt<'tcx>, f: Field) -> Ty<'tcx> {\n-        let answer = match self.ty.kind() {\n+        match self.ty.kind() {\n             ty::Adt(adt_def, substs) => {\n                 let variant_def = match self.variant_index {\n                     None => adt_def.non_enum_variant(),\n@@ -47,9 +48,7 @@ impl<'tcx> PlaceTy<'tcx> {\n             }\n             ty::Tuple(tys) => tys[f.index()],\n             _ => bug!(\"extracting field of non-tuple non-adt: {:?}\", self),\n-        };\n-        debug!(\"field_ty self: {:?} f: {:?} yields: {:?}\", self, f, answer);\n-        answer\n+        }\n     }\n \n     /// Convenience wrapper around `projection_ty_core` for"}]}