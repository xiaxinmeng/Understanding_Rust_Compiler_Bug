{"sha": "339786e01203f0ea00601b605899429c2b4bdf3e", "node_id": "C_kwDOAAsO6NoAKDMzOTc4NmUwMTIwM2YwZWEwMDYwMWI2MDU4OTk0MjljMmI0YmRmM2U", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-04-29T05:57:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-29T05:57:55Z"}, "message": "Rollup merge of #110958 - compiler-errors:stdlib-refinement, r=cuviper\n\nMake sure that some stdlib method signatures aren't accidental refinements\n\nIn the process of implementing https://rust-lang.github.io/rfcs/3245-refined-impls.html, I found a bunch of stdlib implementations that accidentally \"refined\" their method signatures by dropping  (unnecessary) bounds.\n\nThis isn't currently a problem, but may become one if/when method  signature refining is stabilized in the future. Shouldn't hurt to make these signatures a bit more accurate anyways.\n\nNOTE (just to be clear lol): This does not affect behavior at all, since we don't actually take advantage of refined implementations yet!", "tree": {"sha": "a6e9301322075c6407f405e51e0141732ab2eb2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6e9301322075c6407f405e51e0141732ab2eb2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/339786e01203f0ea00601b605899429c2b4bdf3e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkTLHjCRBK7hj4Ov3rIwAAvIcIAJJY3Xv6LxYCrQb3Qc1cNwWi\nWscVF+fj1LN9g92z/cpqPkMYFgcvE9ha3FtIkhk6Xf6lY1Zg0SC3tQWIDy/Jv7mg\ndRgFgZSQCqirLnJVCGcsWc+pCqFo+ApYLXiGzsKdbop0dcy1HdDHNx7qTK+R+r8O\nO9hWUk6wS+U4Nx/hKEMaclAMYwnL9h8EDGO+ypR37ARsvfP68Gos9JsuTQWDiM+h\nsOhzqPzPcm8crlHyKIFAEYUHobCg6M3MeYMkrdaF+wF1hk0t/FAa9FPURJESTES9\n1Wh13Sp5mewv0aDGp1KJ0ztApwwICSAHMmpQ0XgCJQ4uwZTWzwIb98r8bQuGZnU=\n=2dVk\n-----END PGP SIGNATURE-----\n", "payload": "tree a6e9301322075c6407f405e51e0141732ab2eb2d\nparent 650f8fddd9ba3eb2127879a7aed04bbeb4b8045d\nparent 33871c97ab67d90cfca5c22183f3a4e200d6a976\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1682747875 +0530\ncommitter GitHub <noreply@github.com> 1682747875 +0530\n\nRollup merge of #110958 - compiler-errors:stdlib-refinement, r=cuviper\n\nMake sure that some stdlib method signatures aren't accidental refinements\n\nIn the process of implementing https://rust-lang.github.io/rfcs/3245-refined-impls.html, I found a bunch of stdlib implementations that accidentally \"refined\" their method signatures by dropping  (unnecessary) bounds.\n\nThis isn't currently a problem, but may become one if/when method  signature refining is stabilized in the future. Shouldn't hurt to make these signatures a bit more accurate anyways.\n\nNOTE (just to be clear lol): This does not affect behavior at all, since we don't actually take advantage of refined implementations yet!\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/339786e01203f0ea00601b605899429c2b4bdf3e", "html_url": "https://github.com/rust-lang/rust/commit/339786e01203f0ea00601b605899429c2b4bdf3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/339786e01203f0ea00601b605899429c2b4bdf3e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "650f8fddd9ba3eb2127879a7aed04bbeb4b8045d", "url": "https://api.github.com/repos/rust-lang/rust/commits/650f8fddd9ba3eb2127879a7aed04bbeb4b8045d", "html_url": "https://github.com/rust-lang/rust/commit/650f8fddd9ba3eb2127879a7aed04bbeb4b8045d"}, {"sha": "33871c97ab67d90cfca5c22183f3a4e200d6a976", "url": "https://api.github.com/repos/rust-lang/rust/commits/33871c97ab67d90cfca5c22183f3a4e200d6a976", "html_url": "https://github.com/rust-lang/rust/commit/33871c97ab67d90cfca5c22183f3a4e200d6a976"}], "stats": {"total": 108, "additions": 84, "deletions": 24}, "files": [{"sha": "efbbc1c2331cf54ac9840047f68ca8297849b2ca", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 48, "deletions": 12, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/339786e01203f0ea00601b605899429c2b4bdf3e/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339786e01203f0ea00601b605899429c2b4bdf3e/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=339786e01203f0ea00601b605899429c2b4bdf3e", "patch": "@@ -1543,11 +1543,17 @@ impl<'a, K: 'a, V: 'a> Iterator for Iter<'a, K, V> {\n         self.next_back()\n     }\n \n-    fn min(mut self) -> Option<(&'a K, &'a V)> {\n+    fn min(mut self) -> Option<(&'a K, &'a V)>\n+    where\n+        (&'a K, &'a V): Ord,\n+    {\n         self.next()\n     }\n \n-    fn max(mut self) -> Option<(&'a K, &'a V)> {\n+    fn max(mut self) -> Option<(&'a K, &'a V)>\n+    where\n+        (&'a K, &'a V): Ord,\n+    {\n         self.next_back()\n     }\n }\n@@ -1612,11 +1618,17 @@ impl<'a, K, V> Iterator for IterMut<'a, K, V> {\n         self.next_back()\n     }\n \n-    fn min(mut self) -> Option<(&'a K, &'a mut V)> {\n+    fn min(mut self) -> Option<(&'a K, &'a mut V)>\n+    where\n+        (&'a K, &'a mut V): Ord,\n+    {\n         self.next()\n     }\n \n-    fn max(mut self) -> Option<(&'a K, &'a mut V)> {\n+    fn max(mut self) -> Option<(&'a K, &'a mut V)>\n+    where\n+        (&'a K, &'a mut V): Ord,\n+    {\n         self.next_back()\n     }\n }\n@@ -1779,11 +1791,17 @@ impl<'a, K, V> Iterator for Keys<'a, K, V> {\n         self.next_back()\n     }\n \n-    fn min(mut self) -> Option<&'a K> {\n+    fn min(mut self) -> Option<&'a K>\n+    where\n+        &'a K: Ord,\n+    {\n         self.next()\n     }\n \n-    fn max(mut self) -> Option<&'a K> {\n+    fn max(mut self) -> Option<&'a K>\n+    where\n+        &'a K: Ord,\n+    {\n         self.next_back()\n     }\n }\n@@ -2008,11 +2026,17 @@ impl<'a, K, V> Iterator for Range<'a, K, V> {\n         self.next_back()\n     }\n \n-    fn min(mut self) -> Option<(&'a K, &'a V)> {\n+    fn min(mut self) -> Option<(&'a K, &'a V)>\n+    where\n+        (&'a K, &'a V): Ord,\n+    {\n         self.next()\n     }\n \n-    fn max(mut self) -> Option<(&'a K, &'a V)> {\n+    fn max(mut self) -> Option<(&'a K, &'a V)>\n+    where\n+        (&'a K, &'a V): Ord,\n+    {\n         self.next_back()\n     }\n }\n@@ -2081,11 +2105,17 @@ impl<K, V, A: Allocator + Clone> Iterator for IntoKeys<K, V, A> {\n         self.next_back()\n     }\n \n-    fn min(mut self) -> Option<K> {\n+    fn min(mut self) -> Option<K>\n+    where\n+        K: Ord,\n+    {\n         self.next()\n     }\n \n-    fn max(mut self) -> Option<K> {\n+    fn max(mut self) -> Option<K>\n+    where\n+        K: Ord,\n+    {\n         self.next_back()\n     }\n }\n@@ -2204,11 +2234,17 @@ impl<'a, K, V> Iterator for RangeMut<'a, K, V> {\n         self.next_back()\n     }\n \n-    fn min(mut self) -> Option<(&'a K, &'a mut V)> {\n+    fn min(mut self) -> Option<(&'a K, &'a mut V)>\n+    where\n+        (&'a K, &'a mut V): Ord,\n+    {\n         self.next()\n     }\n \n-    fn max(mut self) -> Option<(&'a K, &'a mut V)> {\n+    fn max(mut self) -> Option<(&'a K, &'a mut V)>\n+    where\n+        (&'a K, &'a mut V): Ord,\n+    {\n         self.next_back()\n     }\n }"}, {"sha": "940fa30afb80fe8d5a13f12007777350b751912d", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/339786e01203f0ea00601b605899429c2b4bdf3e/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339786e01203f0ea00601b605899429c2b4bdf3e/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=339786e01203f0ea00601b605899429c2b4bdf3e", "patch": "@@ -1501,11 +1501,17 @@ impl<'a, T> Iterator for Iter<'a, T> {\n         self.next_back()\n     }\n \n-    fn min(mut self) -> Option<&'a T> {\n+    fn min(mut self) -> Option<&'a T>\n+    where\n+        &'a T: Ord,\n+    {\n         self.next()\n     }\n \n-    fn max(mut self) -> Option<&'a T> {\n+    fn max(mut self) -> Option<&'a T>\n+    where\n+        &'a T: Ord,\n+    {\n         self.next_back()\n     }\n }\n@@ -1604,11 +1610,17 @@ impl<'a, T> Iterator for Range<'a, T> {\n         self.next_back()\n     }\n \n-    fn min(mut self) -> Option<&'a T> {\n+    fn min(mut self) -> Option<&'a T>\n+    where\n+        &'a T: Ord,\n+    {\n         self.next()\n     }\n \n-    fn max(mut self) -> Option<&'a T> {\n+    fn max(mut self) -> Option<&'a T>\n+    where\n+        &'a T: Ord,\n+    {\n         self.next_back()\n     }\n }"}, {"sha": "896da37f94c02680f5a8d419fbdd439a994fd22a", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/339786e01203f0ea00601b605899429c2b4bdf3e/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339786e01203f0ea00601b605899429c2b4bdf3e/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=339786e01203f0ea00601b605899429c2b4bdf3e", "patch": "@@ -2815,7 +2815,7 @@ impl<'a, T: 'a + Copy, A: Allocator> Extend<&'a T> for VecDeque<T, A> {\n     }\n \n     #[inline]\n-    fn extend_one(&mut self, &elem: &T) {\n+    fn extend_one(&mut self, &elem: &'a T) {\n         self.push_back(elem);\n     }\n "}, {"sha": "940558974e69b20e952a10864a0704080c45bdc7", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/339786e01203f0ea00601b605899429c2b4bdf3e/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339786e01203f0ea00601b605899429c2b4bdf3e/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=339786e01203f0ea00601b605899429c2b4bdf3e", "patch": "@@ -248,7 +248,7 @@ where\n impl<'a, T, const N: usize> TryFrom<&'a [T]> for &'a [T; N] {\n     type Error = TryFromSliceError;\n \n-    fn try_from(slice: &[T]) -> Result<&[T; N], TryFromSliceError> {\n+    fn try_from(slice: &'a [T]) -> Result<&'a [T; N], TryFromSliceError> {\n         if slice.len() == N {\n             let ptr = slice.as_ptr() as *const [T; N];\n             // SAFETY: ok because we just checked that the length fits\n@@ -275,7 +275,7 @@ impl<'a, T, const N: usize> TryFrom<&'a [T]> for &'a [T; N] {\n impl<'a, T, const N: usize> TryFrom<&'a mut [T]> for &'a mut [T; N] {\n     type Error = TryFromSliceError;\n \n-    fn try_from(slice: &mut [T]) -> Result<&mut [T; N], TryFromSliceError> {\n+    fn try_from(slice: &'a mut [T]) -> Result<&'a mut [T; N], TryFromSliceError> {\n         if slice.len() == N {\n             let ptr = slice.as_mut_ptr() as *mut [T; N];\n             // SAFETY: ok because we just checked that the length fits"}, {"sha": "0171d89812feb05143a4a9960274f83d0713cadd", "filename": "library/core/src/iter/range.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/339786e01203f0ea00601b605899429c2b4bdf3e/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339786e01203f0ea00601b605899429c2b4bdf3e/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Frange.rs?ref=339786e01203f0ea00601b605899429c2b4bdf3e", "patch": "@@ -732,12 +732,18 @@ impl<A: Step> Iterator for ops::Range<A> {\n     }\n \n     #[inline]\n-    fn min(mut self) -> Option<A> {\n+    fn min(mut self) -> Option<A>\n+    where\n+        A: Ord,\n+    {\n         self.next()\n     }\n \n     #[inline]\n-    fn max(mut self) -> Option<A> {\n+    fn max(mut self) -> Option<A>\n+    where\n+        A: Ord,\n+    {\n         self.next_back()\n     }\n \n@@ -1158,12 +1164,18 @@ impl<A: Step> Iterator for ops::RangeInclusive<A> {\n     }\n \n     #[inline]\n-    fn min(mut self) -> Option<A> {\n+    fn min(mut self) -> Option<A>\n+    where\n+        A: Ord,\n+    {\n         self.next()\n     }\n \n     #[inline]\n-    fn max(mut self) -> Option<A> {\n+    fn max(mut self) -> Option<A>\n+    where\n+        A: Ord,\n+    {\n         self.next_back()\n     }\n "}, {"sha": "302bf148bd3ef4fe2acad8c659907d9cf42020df", "filename": "library/portable-simd/crates/core_simd/src/ops/deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/339786e01203f0ea00601b605899429c2b4bdf3e/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fops%2Fderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339786e01203f0ea00601b605899429c2b4bdf3e/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fops%2Fderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fops%2Fderef.rs?ref=339786e01203f0ea00601b605899429c2b4bdf3e", "patch": "@@ -71,7 +71,7 @@ macro_rules! deref_ops {\n \n                 #[inline]\n                 #[must_use = \"operator returns a new vector without mutating the inputs\"]\n-                fn $call(self, rhs: &$simd) -> Self::Output {\n+                fn $call(self, rhs: &'rhs $simd) -> Self::Output {\n                     (*self).$call(*rhs)\n                 }\n             }"}]}