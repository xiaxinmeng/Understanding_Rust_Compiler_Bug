{"sha": "5f433577826f1cc23a83c435c8eb000075e1f79f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmNDMzNTc3ODI2ZjFjYzIzYTgzYzQzNWM4ZWIwMDAwNzVlMWY3OWY=", "commit": {"author": {"name": "Alex Burka", "email": "durka42+github@gmail.com", "date": "2017-09-13T21:29:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-09-13T21:29:55Z"}, "message": "update \"since\" for discriminant_value\n\nIt's going to be backported to beta.", "tree": {"sha": "c5d64a3c3b094d74aa8a9b5bb07564a62a7d4dcc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5d64a3c3b094d74aa8a9b5bb07564a62a7d4dcc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f433577826f1cc23a83c435c8eb000075e1f79f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f433577826f1cc23a83c435c8eb000075e1f79f", "html_url": "https://github.com/rust-lang/rust/commit/5f433577826f1cc23a83c435c8eb000075e1f79f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f433577826f1cc23a83c435c8eb000075e1f79f/comments", "author": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "539f2083de809b5c8304fe7426655cfeb0e66d5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/539f2083de809b5c8304fe7426655cfeb0e66d5e", "html_url": "https://github.com/rust-lang/rust/commit/539f2083de809b5c8304fe7426655cfeb0e66d5e"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "bae1f4dee14f35b05e3a79efeddd04e47d3196aa", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5f433577826f1cc23a83c435c8eb000075e1f79f/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f433577826f1cc23a83c435c8eb000075e1f79f/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=5f433577826f1cc23a83c435c8eb000075e1f79f", "patch": "@@ -712,39 +712,39 @@ pub unsafe fn transmute_copy<T, U>(src: &T) -> U {\n /// Opaque type representing the discriminant of an enum.\n ///\n /// See the `discriminant` function in this module for more information.\n-#[stable(feature = \"discriminant_value\", since = \"1.22.0\")]\n+#[stable(feature = \"discriminant_value\", since = \"1.21.0\")]\n pub struct Discriminant<T>(u64, PhantomData<*const T>);\n \n // N.B. These trait implementations cannot be derived because we don't want any bounds on T.\n \n-#[stable(feature = \"discriminant_value\", since = \"1.22.0\")]\n+#[stable(feature = \"discriminant_value\", since = \"1.21.0\")]\n impl<T> Copy for Discriminant<T> {}\n \n-#[stable(feature = \"discriminant_value\", since = \"1.22.0\")]\n+#[stable(feature = \"discriminant_value\", since = \"1.21.0\")]\n impl<T> clone::Clone for Discriminant<T> {\n     fn clone(&self) -> Self {\n         *self\n     }\n }\n \n-#[stable(feature = \"discriminant_value\", since = \"1.22.0\")]\n+#[stable(feature = \"discriminant_value\", since = \"1.21.0\")]\n impl<T> cmp::PartialEq for Discriminant<T> {\n     fn eq(&self, rhs: &Self) -> bool {\n         self.0 == rhs.0\n     }\n }\n \n-#[stable(feature = \"discriminant_value\", since = \"1.22.0\")]\n+#[stable(feature = \"discriminant_value\", since = \"1.21.0\")]\n impl<T> cmp::Eq for Discriminant<T> {}\n \n-#[stable(feature = \"discriminant_value\", since = \"1.22.0\")]\n+#[stable(feature = \"discriminant_value\", since = \"1.21.0\")]\n impl<T> hash::Hash for Discriminant<T> {\n     fn hash<H: hash::Hasher>(&self, state: &mut H) {\n         self.0.hash(state);\n     }\n }\n \n-#[stable(feature = \"discriminant_value\", since = \"1.22.0\")]\n+#[stable(feature = \"discriminant_value\", since = \"1.21.0\")]\n impl<T> fmt::Debug for Discriminant<T> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         fmt.debug_tuple(\"Discriminant\")\n@@ -777,7 +777,7 @@ impl<T> fmt::Debug for Discriminant<T> {\n /// assert!(mem::discriminant(&Foo::B(1))     == mem::discriminant(&Foo::B(2)));\n /// assert!(mem::discriminant(&Foo::B(3))     != mem::discriminant(&Foo::C(3)));\n /// ```\n-#[stable(feature = \"discriminant_value\", since = \"1.22.0\")]\n+#[stable(feature = \"discriminant_value\", since = \"1.21.0\")]\n pub fn discriminant<T>(v: &T) -> Discriminant<T> {\n     unsafe {\n         Discriminant(intrinsics::discriminant_value(v), PhantomData)"}]}