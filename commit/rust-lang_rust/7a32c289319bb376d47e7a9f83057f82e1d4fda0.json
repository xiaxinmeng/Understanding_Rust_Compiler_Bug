{"sha": "7a32c289319bb376d47e7a9f83057f82e1d4fda0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMzJjMjg5MzE5YmIzNzZkNDdlN2E5ZjgzMDU3ZjgyZTFkNGZkYTA=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-06-16T16:33:11Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-06-16T16:33:11Z"}, "message": "Fix #2741", "tree": {"sha": "692b8af9a955244327c60cb7aad927f45bd95008", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/692b8af9a955244327c60cb7aad927f45bd95008"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a32c289319bb376d47e7a9f83057f82e1d4fda0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a32c289319bb376d47e7a9f83057f82e1d4fda0", "html_url": "https://github.com/rust-lang/rust/commit/7a32c289319bb376d47e7a9f83057f82e1d4fda0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a32c289319bb376d47e7a9f83057f82e1d4fda0/comments", "author": null, "committer": null, "parents": [{"sha": "45bab501e182860c9088c3d1eafcd596cfd0dd22", "url": "https://api.github.com/repos/rust-lang/rust/commits/45bab501e182860c9088c3d1eafcd596cfd0dd22", "html_url": "https://github.com/rust-lang/rust/commit/45bab501e182860c9088c3d1eafcd596cfd0dd22"}], "stats": {"total": 44, "additions": 35, "deletions": 9}, "files": [{"sha": "1e390b0d8960a9f1efeb44aea2b7036760f70196", "filename": "clippy_lints/src/minmax.rs", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7a32c289319bb376d47e7a9f83057f82e1d4fda0/clippy_lints%2Fsrc%2Fminmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a32c289319bb376d47e7a9f83057f82e1d4fda0/clippy_lints%2Fsrc%2Fminmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fminmax.rs?ref=7a32c289319bb376d47e7a9f83057f82e1d4fda0", "patch": "@@ -1,8 +1,9 @@\n use crate::consts::{constant_simple, Constant};\n-use rustc::lint::*;\n+use crate::utils::{match_def_path, opt_def_id, paths, sext, span_lint};\n use rustc::hir::*;\n+use rustc::lint::*;\n+use rustc::ty::{self, TyCtxt};\n use std::cmp::{Ordering, PartialOrd};\n-use crate::utils::{match_def_path, opt_def_id, paths, span_lint};\n \n /// **What it does:** Checks for expressions where `std::cmp::min` and `max` are\n /// used to clamp values, but switched so that the result is constant.\n@@ -36,21 +37,43 @@ impl LintPass for MinMaxPass {\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MinMaxPass {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let Some((outer_max, outer_c, oe)) = min_max(cx, expr) {\n-            if let Some((inner_max, inner_c, _)) = min_max(cx, oe) {\n+            if let Some((inner_max, inner_c, ie)) = min_max(cx, oe) {\n                 if outer_max == inner_max {\n                     return;\n                 }\n-                match (outer_max, outer_c.partial_cmp(&inner_c)) {\n+                match (\n+                    outer_max,\n+                    const_partial_cmp(cx.tcx, &outer_c, &inner_c, &cx.tables.expr_ty(ie).sty),\n+                ) {\n                     (_, None) | (MinMax::Max, Some(Ordering::Less)) | (MinMax::Min, Some(Ordering::Greater)) => (),\n                     _ => {\n-                        span_lint(cx, MIN_MAX, expr.span, \"this min/max combination leads to constant result\");\n+                        span_lint(\n+                            cx,\n+                            MIN_MAX,\n+                            expr.span,\n+                            \"this min/max combination leads to constant result\",\n+                        );\n                     },\n                 }\n             }\n         }\n     }\n }\n \n+// Constant::partial_cmp incorrectly orders signed integers\n+fn const_partial_cmp(tcx: TyCtxt, a: &Constant, b: &Constant, expr_ty: &ty::TypeVariants) -> Option<Ordering> {\n+    match *expr_ty {\n+        ty::TyInt(int_ty) => {\n+            if let (&Constant::Int(a), &Constant::Int(b)) = (a, b) {\n+                Some(sext(tcx, a, int_ty).cmp(&sext(tcx, b, int_ty)))\n+            } else {\n+                None\n+            }\n+        },\n+        _ => a.partial_cmp(&b),\n+    }\n+}\n+\n #[derive(PartialEq, Eq, Debug)]\n enum MinMax {\n     Min,"}, {"sha": "9b29f73b2ac2139c885b7214d55125a842f3f8bf", "filename": "tests/ui/min_max.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a32c289319bb376d47e7a9f83057f82e1d4fda0/tests%2Fui%2Fmin_max.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a32c289319bb376d47e7a9f83057f82e1d4fda0/tests%2Fui%2Fmin_max.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_max.rs?ref=7a32c289319bb376d47e7a9f83057f82e1d4fda0", "patch": "@@ -23,6 +23,9 @@ fn main() {\n \n     min(1, max(LARGE, x)); // no error, we don't lookup consts here\n \n+    let y = 2isize;\n+    min(max(y, -1), 3);\n+\n     let s;\n     s = \"Hello\";\n "}, {"sha": "b8ea183fcc942e40e07a1f6221c44f1112cf66b9", "filename": "tests/ui/min_max.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a32c289319bb376d47e7a9f83057f82e1d4fda0/tests%2Fui%2Fmin_max.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a32c289319bb376d47e7a9f83057f82e1d4fda0/tests%2Fui%2Fmin_max.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_max.stderr?ref=7a32c289319bb376d47e7a9f83057f82e1d4fda0", "patch": "@@ -31,15 +31,15 @@ error: this min/max combination leads to constant result\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this min/max combination leads to constant result\n-  --> $DIR/min_max.rs:29:5\n+  --> $DIR/min_max.rs:32:5\n    |\n-29 |     min(\"Apple\", max(\"Zoo\", s));\n+32 |     min(\"Apple\", max(\"Zoo\", s));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this min/max combination leads to constant result\n-  --> $DIR/min_max.rs:30:5\n+  --> $DIR/min_max.rs:33:5\n    |\n-30 |     max(min(s, \"Apple\"), \"Zoo\");\n+33 |     max(min(s, \"Apple\"), \"Zoo\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 7 previous errors"}]}