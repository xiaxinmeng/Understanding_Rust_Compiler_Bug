{"sha": "1055bdfb2a5ced99bb47c344c91af2f324ebbb6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwNTViZGZiMmE1Y2VkOTliYjQ3YzM0NGM5MWFmMmYzMjRlYmJiNmQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-11-05T01:22:18Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-11-11T12:44:19Z"}, "message": "Accept interpolated patterns in trait method parameters\n\nRemove some outdated messages from \"no patterns allowed\" errors", "tree": {"sha": "085fbbd4b5015fa5cd63f1b5c26e9e52771db301", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/085fbbd4b5015fa5cd63f1b5c26e9e52771db301"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1055bdfb2a5ced99bb47c344c91af2f324ebbb6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1055bdfb2a5ced99bb47c344c91af2f324ebbb6d", "html_url": "https://github.com/rust-lang/rust/commit/1055bdfb2a5ced99bb47c344c91af2f324ebbb6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1055bdfb2a5ced99bb47c344c91af2f324ebbb6d/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69ee5a8a9787336f8635ec12ed0c6199a70505e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/69ee5a8a9787336f8635ec12ed0c6199a70505e0", "html_url": "https://github.com/rust-lang/rust/commit/69ee5a8a9787336f8635ec12ed0c6199a70505e0"}], "stats": {"total": 102, "additions": 56, "deletions": 46}, "files": [{"sha": "afa704025b9ad7f8864228a61a09df65cdddf256", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 10, "deletions": 25, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1055bdfb2a5ced99bb47c344c91af2f324ebbb6d/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1055bdfb2a5ced99bb47c344c91af2f324ebbb6d/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=1055bdfb2a5ced99bb47c344c91af2f324ebbb6d", "patch": "@@ -67,13 +67,12 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n-    fn check_decl_no_pat<ReportFn: Fn(Span, bool)>(&self, decl: &FnDecl, report_err: ReportFn) {\n+    fn check_decl_no_pat<ReportFn: Fn(Span)>(&self, decl: &FnDecl, report_err: ReportFn) {\n         for arg in &decl.inputs {\n             match arg.pat.node {\n                 PatKind::Ident(BindingMode::ByValue(Mutability::Immutable), _, None) |\n                 PatKind::Wild => {}\n-                PatKind::Ident(..) => report_err(arg.pat.span, true),\n-                _ => report_err(arg.pat.span, false),\n+                _ => report_err(arg.pat.span),\n             }\n         }\n     }\n@@ -150,15 +149,9 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     fn visit_ty(&mut self, ty: &'a Ty) {\n         match ty.node {\n             TyKind::BareFn(ref bfty) => {\n-                self.check_decl_no_pat(&bfty.decl, |span, _| {\n-                    let mut err = struct_span_err!(self.session,\n-                                                   span,\n-                                                   E0561,\n-                                                   \"patterns aren't allowed in function pointer \\\n-                                                    types\");\n-                    err.span_note(span,\n-                                  \"this is a recent error, see issue #35203 for more details\");\n-                    err.emit();\n+                self.check_decl_no_pat(&bfty.decl, |span| {\n+                    struct_span_err!(self.session, span, E0561,\n+                                     \"patterns aren't allowed in function pointer types\").emit();\n                 });\n             }\n             TyKind::TraitObject(ref bounds, ..) => {\n@@ -260,7 +253,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     if let TraitItemKind::Method(ref sig, ref block) = trait_item.node {\n                         self.check_trait_fn_not_const(sig.constness);\n                         if block.is_none() {\n-                            self.check_decl_no_pat(&sig.decl, |span, _| {\n+                            self.check_decl_no_pat(&sig.decl, |span| {\n                                 self.session.buffer_lint(\n                                     lint::builtin::PATTERNS_IN_FNS_WITHOUT_BODY,\n                                     trait_item.id, span,\n@@ -299,18 +292,10 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     fn visit_foreign_item(&mut self, fi: &'a ForeignItem) {\n         match fi.node {\n             ForeignItemKind::Fn(ref decl, _) => {\n-                self.check_decl_no_pat(decl, |span, is_recent| {\n-                    let mut err = struct_span_err!(self.session,\n-                                                   span,\n-                                                   E0130,\n-                                                   \"patterns aren't allowed in foreign function \\\n-                                                    declarations\");\n-                    err.span_label(span, \"pattern not allowed in foreign function\");\n-                    if is_recent {\n-                        err.span_note(span,\n-                                      \"this is a recent error, see issue #35203 for more details\");\n-                    }\n-                    err.emit();\n+                self.check_decl_no_pat(decl, |span| {\n+                    struct_span_err!(self.session, span, E0130,\n+                                     \"patterns aren't allowed in foreign function declarations\")\n+                        .span_label(span, \"pattern not allowed in foreign function\").emit();\n                 });\n             }\n             ForeignItemKind::Static(..) | ForeignItemKind::Ty => {}"}, {"sha": "c1819307928ba0fe18af88ad93b43ebbdb1a4d94", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1055bdfb2a5ced99bb47c344c91af2f324ebbb6d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1055bdfb2a5ced99bb47c344c91af2f324ebbb6d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=1055bdfb2a5ced99bb47c344c91af2f324ebbb6d", "patch": "@@ -360,10 +360,6 @@ impl TokenType {\n     }\n }\n \n-fn is_ident_or_underscore(t: &token::Token) -> bool {\n-    t.is_ident() || *t == token::Underscore\n-}\n-\n // Returns true if `IDENT t` can start a type - `IDENT::a::b`, `IDENT<u8, u8>`,\n // `IDENT<<u8 as Trait>::AssocTy>`, `IDENT(u8, u8) -> u8`.\n fn can_continue_type_after_ident(t: &token::Token) -> bool {\n@@ -1625,23 +1621,19 @@ impl<'a> Parser<'a> {\n         Ok(MutTy { ty: t, mutbl: mutbl })\n     }\n \n-    pub fn is_named_argument(&mut self) -> bool {\n+    fn is_named_argument(&mut self) -> bool {\n         let offset = match self.token {\n-            token::BinOp(token::And) |\n-            token::AndAnd => 1,\n+            token::Interpolated(ref nt) => match nt.0 {\n+                token::NtPat(..) => return self.look_ahead(1, |t| t == &token::Colon),\n+                _ => 0,\n+            }\n+            token::BinOp(token::And) | token::AndAnd => 1,\n             _ if self.token.is_keyword(keywords::Mut) => 1,\n-            _ => 0\n+            _ => 0,\n         };\n \n-        debug!(\"parser is_named_argument offset:{}\", offset);\n-\n-        if offset == 0 {\n-            is_ident_or_underscore(&self.token)\n-                && self.look_ahead(1, |t| *t == token::Colon)\n-        } else {\n-            self.look_ahead(offset, |t| is_ident_or_underscore(t))\n-                && self.look_ahead(offset + 1, |t| *t == token::Colon)\n-        }\n+        self.look_ahead(offset, |t| t.is_ident() || t == &token::Underscore) &&\n+        self.look_ahead(offset + 1, |t| t == &token::Colon)\n     }\n \n     /// This version of parse arg doesn't necessarily require"}, {"sha": "3aabd19f6e6495993e4ed4e654d265232b2969ff", "filename": "src/test/compile-fail/no-patterns-in-args-macro.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1055bdfb2a5ced99bb47c344c91af2f324ebbb6d/src%2Ftest%2Fcompile-fail%2Fno-patterns-in-args-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1055bdfb2a5ced99bb47c344c91af2f324ebbb6d/src%2Ftest%2Fcompile-fail%2Fno-patterns-in-args-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-patterns-in-args-macro.rs?ref=1055bdfb2a5ced99bb47c344c91af2f324ebbb6d", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! m {\n+    ($pat: pat) => {\n+        trait Tr {\n+            fn trait_method($pat: u8);\n+        }\n+\n+        type A = fn($pat: u8);\n+\n+        extern {\n+            fn foreign_fn($pat: u8);\n+        }\n+    }\n+}\n+\n+mod good_pat {\n+    m!(good_pat); // OK\n+}\n+\n+mod bad_pat {\n+    m!((bad, pat));\n+    //~^ ERROR patterns aren't allowed in function pointer types\n+    //~| ERROR patterns aren't allowed in foreign function declarations\n+    //~| WARN patterns aren't allowed in methods without bodies\n+    //~| WARN this was previously accepted\n+}\n+\n+fn main() {}"}, {"sha": "081d6caaa13c9387b28f2d2eb0754c3c7b877526", "filename": "src/test/compile-fail/no-patterns-in-args.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1055bdfb2a5ced99bb47c344c91af2f324ebbb6d/src%2Ftest%2Fcompile-fail%2Fno-patterns-in-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1055bdfb2a5ced99bb47c344c91af2f324ebbb6d/src%2Ftest%2Fcompile-fail%2Fno-patterns-in-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-patterns-in-args.rs?ref=1055bdfb2a5ced99bb47c344c91af2f324ebbb6d", "patch": "@@ -11,21 +11,17 @@\n extern {\n     fn f1(mut arg: u8); //~ ERROR patterns aren't allowed in foreign function declarations\n                         //~^ NOTE pattern not allowed in foreign function\n-                        //~| NOTE this is a recent error\n     fn f2(&arg: u8); //~ ERROR patterns aren't allowed in foreign function declarations\n                      //~^ NOTE pattern not allowed in foreign function\n     fn f3(arg @ _: u8); //~ ERROR patterns aren't allowed in foreign function declarations\n                         //~^ NOTE pattern not allowed in foreign function\n-                        //~| NOTE this is a recent error\n     fn g1(arg: u8); // OK\n     fn g2(_: u8); // OK\n     // fn g3(u8); // Not yet\n }\n \n type A1 = fn(mut arg: u8); //~ ERROR patterns aren't allowed in function pointer types\n-                           //~^ NOTE this is a recent error\n type A2 = fn(&arg: u8); //~ ERROR patterns aren't allowed in function pointer types\n-                        //~^ NOTE this is a recent error\n type B1 = fn(arg: u8); // OK\n type B2 = fn(_: u8); // OK\n type B3 = fn(u8); // OK"}]}