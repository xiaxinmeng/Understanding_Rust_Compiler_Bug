{"sha": "41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxZWExNGRkYThkYTZmYjNhNmU2ZjgzYmNiYTI1N2E1ZjhkNmZhMmM=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2018-01-17T14:38:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-01-17T14:38:22Z"}, "message": "Merge pull request #2309 from rust-lang-nursery/rustc-monitor\n\nUse rustc_driver::run", "tree": {"sha": "693594da0ca77a6b807d48284e530292977c6045", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/693594da0ca77a6b807d48284e530292977c6045"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaX1/eCRBK7hj4Ov3rIwAAdHIIAIZ4poTBktayygqsGDxx0tas\nP6qdCYxhjJ4a2Y9KmI5YciPkduVivmEAa100Lh7pG2LPYV1t9rOw5NUUTqJ7VkNW\nGiiZyMGQnj4hy1bj0wuObIHmWpUOFBEWGa5Yq7lh2lWHj2Jrg5pANU4bGXzwKcxF\nH90VS583EKD2uiojOmF6LdfOm0HeKu4tsE+B3BzcN1NZBaSS2vH3BrixNvbJX38T\nAk0EbG+3gehGU3oEm2UOgExOuf9cnxTk4mpiamJKGFNleLX70DInMutdPI5yf7v8\nuUKhk0UW9w4MxDGfk51qmGjci7+Z3yCDjvhouPXJzMKz2IFGPakwOpQo0FWJncU=\n=WSqV\n-----END PGP SIGNATURE-----\n", "payload": "tree 693594da0ca77a6b807d48284e530292977c6045\nparent a2fdfc05d761bf19b208e5706d6dbcbb2df438b2\nparent 4f21b5b11207166dbd8210a0ec7510fc09734fb7\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1516199902 +0100\ncommitter GitHub <noreply@github.com> 1516199902 +0100\n\nMerge pull request #2309 from rust-lang-nursery/rustc-monitor\n\nUse rustc_driver::run"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "html_url": "https://github.com/rust-lang/rust/commit/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2fdfc05d761bf19b208e5706d6dbcbb2df438b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2fdfc05d761bf19b208e5706d6dbcbb2df438b2", "html_url": "https://github.com/rust-lang/rust/commit/a2fdfc05d761bf19b208e5706d6dbcbb2df438b2"}, {"sha": "4f21b5b11207166dbd8210a0ec7510fc09734fb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f21b5b11207166dbd8210a0ec7510fc09734fb7", "html_url": "https://github.com/rust-lang/rust/commit/4f21b5b11207166dbd8210a0ec7510fc09734fb7"}], "stats": {"total": 419, "additions": 375, "deletions": 44}, "files": [{"sha": "bc766496cfb91801d3244152559c9fd2b7a9e6bc", "filename": "src/driver.rs", "status": "modified", "additions": 40, "deletions": 43, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -12,7 +12,7 @@ extern crate rustc_plugin;\n extern crate syntax;\n \n use rustc_driver::{driver, Compilation, CompilerCalls, RustcDefaultCalls};\n-use rustc::session::{config, CompileIncomplete, Session};\n+use rustc::session::{config, Session};\n use rustc::session::config::{ErrorOutputType, Input};\n use std::path::PathBuf;\n use std::process::Command;\n@@ -153,47 +153,44 @@ pub fn main() {\n         })\n         .expect(\"need to specify SYSROOT env var during clippy compilation, or use rustup or multirust\");\n \n-    rustc_driver::in_rustc_thread(|| {\n-        // Setting RUSTC_WRAPPER causes Cargo to pass 'rustc' as the first argument.\n-        // We're invoking the compiler programmatically, so we ignore this/\n-        let mut orig_args: Vec<String> = env::args().collect();\n-        if orig_args.len() <= 1 {\n-            std::process::exit(1);\n-        }\n-        if orig_args[1] == \"rustc\" {\n-            // we still want to be able to invoke it normally though\n-            orig_args.remove(1);\n-        }\n-        // this conditional check for the --sysroot flag is there so users can call\n-        // `clippy_driver` directly\n-        // without having to pass --sysroot or anything\n-        let mut args: Vec<String> = if orig_args.iter().any(|s| s == \"--sysroot\") {\n-            orig_args.clone()\n-        } else {\n-            orig_args\n-                .clone()\n-                .into_iter()\n-                .chain(Some(\"--sysroot\".to_owned()))\n-                .chain(Some(sys_root))\n-                .collect()\n-        };\n-\n-        // this check ensures that dependencies are built but not linted and the final\n-        // crate is\n-        // linted but not built\n-        let clippy_enabled = env::var(\"CLIPPY_TESTS\")\n-            .ok()\n-            .map_or(false, |val| val == \"true\")\n-            || orig_args.iter().any(|s| s == \"--emit=metadata\");\n-\n-        if clippy_enabled {\n-            args.extend_from_slice(&[\"--cfg\".to_owned(), r#\"feature=\"cargo-clippy\"\"#.to_owned()]);\n-        }\n+    // Setting RUSTC_WRAPPER causes Cargo to pass 'rustc' as the first argument.\n+    // We're invoking the compiler programmatically, so we ignore this/\n+    let mut orig_args: Vec<String> = env::args().collect();\n+    if orig_args.len() <= 1 {\n+        std::process::exit(1);\n+    }\n+    if orig_args[1] == \"rustc\" {\n+        // we still want to be able to invoke it normally though\n+        orig_args.remove(1);\n+    }\n+    // this conditional check for the --sysroot flag is there so users can call\n+    // `clippy_driver` directly\n+    // without having to pass --sysroot or anything\n+    let mut args: Vec<String> = if orig_args.iter().any(|s| s == \"--sysroot\") {\n+        orig_args.clone()\n+    } else {\n+        orig_args\n+            .clone()\n+            .into_iter()\n+            .chain(Some(\"--sysroot\".to_owned()))\n+            .chain(Some(sys_root))\n+            .collect()\n+    };\n+\n+    // this check ensures that dependencies are built but not linted and the final\n+    // crate is\n+    // linted but not built\n+    let clippy_enabled = env::var(\"CLIPPY_TESTS\")\n+        .ok()\n+        .map_or(false, |val| val == \"true\")\n+        || orig_args.iter().any(|s| s == \"--emit=metadata\");\n+\n+    if clippy_enabled {\n+        args.extend_from_slice(&[\"--cfg\".to_owned(), r#\"feature=\"cargo-clippy\"\"#.to_owned()]);\n+    }\n \n-        let mut ccc = ClippyCompilerCalls::new(clippy_enabled);\n-        let (result, _) = rustc_driver::run_compiler(&args, &mut ccc, None, None);\n-        if let Err(CompileIncomplete::Errored(_)) = result {\n-            std::process::exit(1);\n-        }\n-    }).expect(\"rustc_thread failed\");\n+    let mut ccc = ClippyCompilerCalls::new(clippy_enabled);\n+    rustc_driver::run(move || {\n+        rustc_driver::run_compiler(&args, &mut ccc, None, None)\n+    });\n }"}, {"sha": "2b0fea0f8b9f0746e9f0496b70d36ad594044719", "filename": "tests/compile-test.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -46,7 +46,9 @@ fn config(dir: &'static str, mode: &'static str) -> compiletest::Config {\n     config.target_rustcflags = Some(format!(\"-L {0} -L {0}/deps -Dwarnings\", host_libs().display()));\n \n     config.mode = cfg_mode;\n-    config.build_base = {\n+    config.build_base = if rustc_test_suite().is_some() {\n+        PathBuf::from(\"/tmp/clippy_test_build_base\")\n+    } else {\n         let mut path = std::env::current_dir().unwrap();\n         path.push(\"target/debug/test_build_base\");\n         path"}, {"sha": "2b1e9ad66feb58340e3ad72412cfccace7ea8564", "filename": "tests/ui/absurd-extreme-comparisons.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fabsurd-extreme-comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fabsurd-extreme-comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fabsurd-extreme-comparisons.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -143,3 +143,5 @@ error: <-comparison of unit values detected. This will always be false\n    |\n    = note: `-D unit-cmp` implied by `-D warnings`\n \n+error: aborting due to 18 previous errors\n+"}, {"sha": "dda28433d7a9afdefc49cbfa9ed773151159c2ba", "filename": "tests/ui/approx_const.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fapprox_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fapprox_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fapprox_const.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -114,3 +114,5 @@ error: approximate value of `f{32, 64}::consts::SQRT_2` found. Consider using it\n 55 |     let my_sq2 = 1.4142;\n    |                  ^^^^^^\n \n+error: aborting due to 19 previous errors\n+"}, {"sha": "ad4a02e219012c65a916b14139e91dd8a66f070e", "filename": "tests/ui/arithmetic.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Farithmetic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Farithmetic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farithmetic.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -69,3 +69,5 @@ error: floating-point arithmetic detected\n 29 |     -f;\n    |     ^^\n \n+error: aborting due to 11 previous errors\n+"}, {"sha": "d730b012932ac5f317f9b05585ef963e44e6c92b", "filename": "tests/ui/array_indexing.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Farray_indexing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Farray_indexing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farray_indexing.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -116,3 +116,5 @@ error: range is out of bounds\n 44 |     &empty[..4];\n    |      ^^^^^^^^^^\n \n+error: aborting due to 19 previous errors\n+"}, {"sha": "2123507e2ef6dbded32d0f203517b93ba6bbe778", "filename": "tests/ui/assign_ops.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fassign_ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fassign_ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassign_ops.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -134,3 +134,5 @@ error: manual implementation of an assign operation\n 40 |     s = s + \"bla\";\n    |     ^^^^^^^^^^^^^ help: replace it with: `s += \"bla\"`\n \n+error: aborting due to 22 previous errors\n+"}, {"sha": "0ff211259c036f16cf525e3b5031540b39973324", "filename": "tests/ui/assign_ops2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fassign_ops2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fassign_ops2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassign_ops2.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -48,3 +48,5 @@ error: variable appears on both sides of an assignment operation\n 15 |     a &= a & 1;\n    |     ^^^^^^^^^^ help: replace it with: `a &= 1`\n \n+error: aborting due to 8 previous errors\n+"}, {"sha": "f743399a6069e341f3267fdb5ec0dbff7e784735", "filename": "tests/ui/attrs.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fattrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fattrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fattrs.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -20,3 +20,5 @@ error: the since field must contain a semver-compliant version\n 30 | #[deprecated(since = \"1\")]\n    |              ^^^^^^^^^^^\n \n+error: aborting due to 3 previous errors\n+"}, {"sha": "6aad98ff528821bddb6130405c3d3ff1c952fdad", "filename": "tests/ui/bit_masks.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fbit_masks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fbit_masks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbit_masks.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -106,3 +106,5 @@ error: ineffective bit mask: `x | 1` compared to `8`, is the same as x compared\n 55 |     x | 1 >= 8;\n    |     ^^^^^^^^^^\n \n+error: aborting due to 17 previous errors\n+"}, {"sha": "68fbe27a01eec0cf5c361e886d289e361c3d31b8", "filename": "tests/ui/blacklisted_name.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fblacklisted_name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fblacklisted_name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblacklisted_name.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -84,3 +84,5 @@ error: use of a blacklisted/placeholder name `baz`\n 35 |     if let Some(ref mut baz) = Some(42) {}\n    |                         ^^^\n \n+error: aborting due to 14 previous errors\n+"}, {"sha": "4b7d12598ecfa346dc411622215c115385a1ff3c", "filename": "tests/ui/block_in_if_condition.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fblock_in_if_condition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fblock_in_if_condition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblock_in_if_condition.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -50,3 +50,5 @@ error: this boolean expression can be simplified\n    |\n    = note: `-D nonminimal-bool` implied by `-D warnings`\n \n+error: aborting due to 5 previous errors\n+"}, {"sha": "4436980bc117fd222c98dbf99ef065c7de907b26", "filename": "tests/ui/bool_comparison.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fbool_comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fbool_comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_comparison.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -24,3 +24,5 @@ error: equality checks against false can be replaced by a negation\n 10 |     if false == x { \"yes\" } else { \"no\" };\n    |        ^^^^^^^^^^ help: try simplifying it as shown: `!x`\n \n+error: aborting due to 4 previous errors\n+"}, {"sha": "c88a7a7be608fb307625d7f5c83d7d7752569aff", "filename": "tests/ui/booleans.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fbooleans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fbooleans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbooleans.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -175,3 +175,5 @@ error: this boolean expression can be simplified\n 58 |     let _ = !c ^ c || !a.is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: try: `!c ^ c || a.is_none()`\n \n+error: aborting due to 21 previous errors\n+"}, {"sha": "2cf0ea79626c91cc4d28aed099a2803c7f18996d", "filename": "tests/ui/borrow_box.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fborrow_box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fborrow_box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_box.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -28,3 +28,5 @@ error: you seem to be trying to use `&Box<T>`. Consider using just `&T`\n 22 |     fn test4(a: &Box<bool>);\n    |                 ^^^^^^^^^^ help: try: `&bool`\n \n+error: aborting due to 4 previous errors\n+"}, {"sha": "254d07713862eb9515164423889bfbc775552e1b", "filename": "tests/ui/box_vec.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fbox_vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fbox_vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_vec.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -7,3 +7,5 @@ error: you seem to be trying to use `Box<Vec<T>>`. Consider using just `Vec<T>`\n    = note: `-D box-vec` implied by `-D warnings`\n    = help: `Vec<T>` is already on the heap, `Box<Vec<T>>` makes an extra allocation.\n \n+error: aborting due to previous error\n+"}, {"sha": "eb4c73b65c69782d6cd841fa366b564337b1cb48", "filename": "tests/ui/builtin-type-shadow.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fbuiltin-type-shadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fbuiltin-type-shadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbuiltin-type-shadow.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -17,3 +17,5 @@ error[E0308]: mismatched types\n   = note: expected type `u32`\n              found type `{integer}`\n \n+error: aborting due to 2 previous errors\n+"}, {"sha": "307edecfde1a097b5ed07b9536bc61f77b562213", "filename": "tests/ui/bytecount.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fbytecount.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fbytecount.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbytecount.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -22,3 +22,5 @@ error: You appear to be counting bytes the naive way\n 22 |     let _ = x.iter().filter(|a| b + 1 == **a).count(); // naive byte count\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Consider using the bytecount crate: `bytecount::count(x, b + 1)`\n \n+error: aborting due to 3 previous errors\n+"}, {"sha": "0a008cb68bb3d0cd62f17dfb8a5d556b3966a867", "filename": "tests/ui/cast.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fcast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fcast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -178,3 +178,5 @@ error: casting to the same type is unnecessary (`bool` -> `bool`)\n 39 |     false as bool;\n    |     ^^^^^^^^^^^^^\n \n+error: aborting due to 28 previous errors\n+"}, {"sha": "a60f838fae86b2485ef05112eff8772526b3e686", "filename": "tests/ui/cast_lossless_float.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fcast_lossless_float.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fcast_lossless_float.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_float.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -60,3 +60,5 @@ error: casting u32 to f64 may become silently lossy if types change\n 14 |     1u32 as f64;\n    |     ^^^^^^^^^^^ help: try: `f64::from(1u32)`\n \n+error: aborting due to 10 previous errors\n+"}, {"sha": "19d6176193c76fb681f92b186820cd1bb1eaa87d", "filename": "tests/ui/cast_lossless_integer.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fcast_lossless_integer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fcast_lossless_integer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_integer.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -108,3 +108,5 @@ error: casting u32 to u64 may become silently lossy if types change\n 23 |     1u32 as u64;\n    |     ^^^^^^^^^^^ help: try: `u64::from(1u32)`\n \n+error: aborting due to 18 previous errors\n+"}, {"sha": "1c4b12bcebf8d0f9cf1e52ad6f6f033c4d1e9167", "filename": "tests/ui/cast_size.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fcast_size.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fcast_size.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_size.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -120,3 +120,5 @@ error: casting i32 to usize may lose the sign of the value\n 22 |     1i32 as usize;\n    |     ^^^^^^^^^^^^^\n \n+error: aborting due to 19 previous errors\n+"}, {"sha": "fcf038fe002db9d32e7fb59641416203cdb210f2", "filename": "tests/ui/char_lit_as_u8.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fchar_lit_as_u8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fchar_lit_as_u8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchar_lit_as_u8.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -8,3 +8,5 @@ error: casting character literal to u8. `char`s are 4 bytes wide in rust, so cas\n   = help: Consider using a byte literal instead:\n           b'a'\n \n+error: aborting due to previous error\n+"}, {"sha": "46f3d3d57e0c7fbd8429091b872a5312bc2d5dc9", "filename": "tests/ui/cmp_nan.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fcmp_nan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fcmp_nan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_nan.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -72,3 +72,5 @@ error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n 21 |     y >= std::f64::NAN;\n    |     ^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 12 previous errors\n+"}, {"sha": "481a4d0f9420586a868c16b7077cd2d6bbf1fa7f", "filename": "tests/ui/cmp_null.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fcmp_null.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fcmp_null.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_null.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -12,3 +12,5 @@ error: Comparing with null is better expressed by the .is_null() method\n 16 |     if m == ptr::null_mut() {\n    |        ^^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 2 previous errors\n+"}, {"sha": "d40fb4b8add877faa25126d3efe775dcc435e751", "filename": "tests/ui/cmp_owned.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fcmp_owned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fcmp_owned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_owned.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -36,3 +36,5 @@ error: this creates an owned instance just for comparison\n 30 |         self.to_owned() == *other\n    |         ^^^^^^^^^^^^^^^ try calling implementing the comparison without allocating\n \n+error: aborting due to 6 previous errors\n+"}, {"sha": "69f2013c1dc847f05293ff40369d97ffc1ca3310", "filename": "tests/ui/collapsible_if.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fcollapsible_if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fcollapsible_if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_if.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -240,3 +240,5 @@ help: try\n 112 | }\n     |\n \n+error: aborting due to 13 previous errors\n+"}, {"sha": "829a22c233f036334a04fbd4c2ff88b283c50eef", "filename": "tests/ui/complex_types.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fcomplex_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fcomplex_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcomplex_types.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -90,3 +90,5 @@ error: very complex type used. Consider factoring parts into `type` definitions\n 40 |     let _y: Vec<Vec<Box<(u32, u32, u32, u32)>>> = vec![];\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 15 previous errors\n+"}, {"sha": "bc44cebdbbbf06fa1d3628aa670a45f19701018c", "filename": "tests/ui/conf_bad_arg.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fconf_bad_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fconf_bad_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_bad_arg.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -6,3 +6,5 @@ error[E0658]: compiler plugins are experimental and possibly buggy (see issue #2\n   |\n   = help: add #![feature(plugin)] to the crate attributes to enable\n \n+error: aborting due to previous error\n+"}, {"sha": "d42369265229e254583efe8a56e3a23070c8a921", "filename": "tests/ui/conf_bad_toml.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fconf_bad_toml.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fconf_bad_toml.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_bad_toml.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -6,3 +6,5 @@ error[E0658]: compiler plugins are experimental and possibly buggy (see issue #2\n   |\n   = help: add #![feature(plugin)] to the crate attributes to enable\n \n+error: aborting due to previous error\n+"}, {"sha": "440437d140e298fe0f86b24b568595b07a429cfe", "filename": "tests/ui/conf_bad_type.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fconf_bad_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fconf_bad_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_bad_type.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -6,3 +6,5 @@ error[E0658]: compiler plugins are experimental and possibly buggy (see issue #2\n   |\n   = help: add #![feature(plugin)] to the crate attributes to enable\n \n+error: aborting due to previous error\n+"}, {"sha": "19c8e5c977787bd793db5533c76a95792605a067", "filename": "tests/ui/conf_french_blacklisted_name.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fconf_french_blacklisted_name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fconf_french_blacklisted_name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_french_blacklisted_name.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -6,3 +6,5 @@ error[E0658]: compiler plugins are experimental and possibly buggy (see issue #2\n   |\n   = help: add #![feature(plugin)] to the crate attributes to enable\n \n+error: aborting due to previous error\n+"}, {"sha": "7a0aebb572eb959c220e0f0d05b9ca8d0078a1c2", "filename": "tests/ui/conf_path_non_string.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fconf_path_non_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fconf_path_non_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_path_non_string.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -6,3 +6,5 @@ error[E0658]: compiler plugins are experimental and possibly buggy (see issue #2\n   |\n   = help: add #![feature(plugin)] to the crate attributes to enable\n \n+error: aborting due to previous error\n+"}, {"sha": "d1957c311adaab1f7119899b433b4514f36433a9", "filename": "tests/ui/conf_unknown_key.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_unknown_key.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -6,3 +6,5 @@ error[E0658]: compiler plugins are experimental and possibly buggy (see issue #2\n   |\n   = help: add #![feature(plugin)] to the crate attributes to enable\n \n+error: aborting due to previous error\n+"}, {"sha": "db33744c7a9bf857bf2169f3167cc0d4dd5c144f", "filename": "tests/ui/const_static_lifetime.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fconst_static_lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fconst_static_lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst_static_lifetime.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -78,3 +78,5 @@ error: Constants have by default a `'static` lifetime\n 24 | const VAR_ARRAY: &'static [u8; 1] = b\"T\"; // ERROR Consider removing 'static.\n    |                  -^^^^^^^-------- help: consider removing `'static`: `&[u8; 1]`\n \n+error: aborting due to 13 previous errors\n+"}, {"sha": "9accb310d121337aea7e37ffc024ba640793d126", "filename": "tests/ui/copies.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fcopies.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fcopies.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcopies.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -33,3 +33,5 @@ error: This else block is redundant.\n             }\n             \n \n+error: aborting due to 2 previous errors\n+"}, {"sha": "973f26a96db4ecafc1048a03ebd55b44d8b27d7f", "filename": "tests/ui/cstring.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fcstring.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fcstring.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcstring.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -12,3 +12,5 @@ help: assign the `CString` to a variable to extend its lifetime\n 7 |     CString::new(\"foo\").unwrap().as_ptr();\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to previous error\n+"}, {"sha": "43676762d6c04094be8c2d7b6f2da552023e3c7c", "filename": "tests/ui/cyclomatic_complexity.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fcyclomatic_complexity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fcyclomatic_complexity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcyclomatic_complexity.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -269,3 +269,5 @@ error: the function has a cyclomatic complexity of 8\n     |\n     = help: you could split it up into multiple smaller functions\n \n+error: aborting due to 20 previous errors\n+"}, {"sha": "e671b34393b539dbc2d11a44e6e2ad96ad818ec0", "filename": "tests/ui/cyclomatic_complexity_attr_used.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fcyclomatic_complexity_attr_used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fcyclomatic_complexity_attr_used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcyclomatic_complexity_attr_used.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -13,3 +13,5 @@ error: the function has a cyclomatic complexity of 3\n    = note: `-D cyclomatic-complexity` implied by `-D warnings`\n    = help: you could split it up into multiple smaller functions\n \n+error: aborting due to previous error\n+"}, {"sha": "7d5d594cfa1c53911318ca175f0b0eee44f288b6", "filename": "tests/ui/deprecated.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fdeprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fdeprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecated.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -24,3 +24,5 @@ error: lint unstable_as_mut_slice has been removed: `Vec::as_mut_slice` has been\n 10 | #[warn(unstable_as_mut_slice)]\n    |        ^^^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 4 previous errors\n+"}, {"sha": "ffeed948ba55c6eea704aa069d4af62d9baa7c8d", "filename": "tests/ui/derive.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fderive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fderive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -106,3 +106,5 @@ note: consider deriving `Clone` or removing `Copy`\n 87 | | }\n    | |_^\n \n+error: aborting due to 7 previous errors\n+"}, {"sha": "0d7b1ca6fd66ca3488f08eba0daaae89e6cdcffb", "filename": "tests/ui/diverging_sub_expression.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fdiverging_sub_expression.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fdiverging_sub_expression.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdiverging_sub_expression.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -36,3 +36,5 @@ error: sub-expression diverges\n 37 |             _ => true || break,\n    |                          ^^^^^\n \n+error: aborting due to 6 previous errors\n+"}, {"sha": "de0422e17eddacff89b120df1e45d772680ad042", "filename": "tests/ui/dlist.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fdlist.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fdlist.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdlist.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -47,3 +47,5 @@ error: I see you're using a LinkedList! Perhaps you meant some other data struct\n    |\n    = help: a VecDeque might work\n \n+error: aborting due to 6 previous errors\n+"}, {"sha": "f38678e89aac234b8488534a00cc05f3ff97ea52", "filename": "tests/ui/doc.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fdoc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fdoc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -180,3 +180,5 @@ error: you should put bare URLs between `<`/`>` or make a proper Markdown link\n 168 | /// Not ok: http://www.unicode.org/reports/tr9/#Reordering_Resolved_Levels\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 30 previous errors\n+"}, {"sha": "fd4da8820a24cefc6a79bfde38a4eb539e581ad9", "filename": "tests/ui/double_neg.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fdouble_neg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fdouble_neg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdouble_neg.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -6,3 +6,5 @@ error: `--x` could be misinterpreted as pre-decrement by C programmers, is usual\n   |\n   = note: `-D double-neg` implied by `-D warnings`\n \n+error: aborting due to previous error\n+"}, {"sha": "a77b08528c497ba1a741e71a2fe78b56843eab6b", "filename": "tests/ui/double_parens.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fdouble_parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fdouble_parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdouble_parens.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -30,3 +30,5 @@ error: Consider removing unnecessary double parentheses\n 32 |     (())\n    |     ^^^^\n \n+error: aborting due to 5 previous errors\n+"}, {"sha": "3ea7bf9735af14cfb4e49f6fd7fde33b9038cb2c", "filename": "tests/ui/drop_forget_copy.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fdrop_forget_copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fdrop_forget_copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_forget_copy.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -72,3 +72,5 @@ note: argument has type SomeStruct\n 42 |     forget(s4);\n    |            ^^\n \n+error: aborting due to 6 previous errors\n+"}, {"sha": "1654fdd2861ad7301f3533948589c749033a0038", "filename": "tests/ui/drop_forget_ref.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fdrop_forget_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fdrop_forget_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_forget_ref.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -216,3 +216,5 @@ note: argument has type &SomeStruct\n 59 |     std::mem::forget(&SomeStruct);\n    |                      ^^^^^^^^^^^\n \n+error: aborting due to 18 previous errors\n+"}, {"sha": "c926f57f154f900a6c5a4531d52660141d408fd7", "filename": "tests/ui/duplicate_underscore_argument.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fduplicate_underscore_argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fduplicate_underscore_argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fduplicate_underscore_argument.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -6,3 +6,5 @@ error: `darth` already exists, having another argument having almost the same na\n   |\n   = note: `-D duplicate-underscore-argument` implied by `-D warnings`\n \n+error: aborting due to previous error\n+"}, {"sha": "b8a5031fbcff60e236c207eac3536fbd8d471ff7", "filename": "tests/ui/else_if_without_else.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Felse_if_without_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Felse_if_without_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Felse_if_without_else.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -18,3 +18,5 @@ error: if expression with an `else if`, but without a final `else`\n 49 | |     }\n    | |_____^ help: add an `else` block here\n \n+error: aborting due to 2 previous errors\n+"}, {"sha": "ca377cee822153808cabe921037c03485452d2ad", "filename": "tests/ui/empty_enum.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fempty_enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fempty_enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty_enum.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -11,3 +11,5 @@ help: consider using the uninhabited type `!` or a wrapper around it\n 7 | enum Empty {}\n   | ^^^^^^^^^^^^^\n \n+error: aborting due to previous error\n+"}, {"sha": "09c4a8822802a0ab01ebfd386abe70ccce98c834", "filename": "tests/ui/entry.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fentry.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fentry.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fentry.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -42,3 +42,5 @@ error: usage of `contains_key` followed by `insert` on a `BTreeMap`\n 37 |     if !m.contains_key(&k) { foo(); m.insert(k, v) } else { None };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `m.entry(k)`\n \n+error: aborting due to 7 previous errors\n+"}, {"sha": "2d53618c1b18dfe73078c225f96a09887fbc613f", "filename": "tests/ui/enum_glob_use.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fenum_glob_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fenum_glob_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum_glob_use.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -12,3 +12,5 @@ error: don't use glob imports for enum variants\n 12 | use self::Enum::*;\n    | ^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 2 previous errors\n+"}, {"sha": "e33e29ec78e1228452a834d1d42f93c01f0b48dd", "filename": "tests/ui/enum_variants.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fenum_variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fenum_variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum_variants.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -97,3 +97,5 @@ error: All variants have the same prefix: `With`\n    = note: `-D pub-enum-variant-names` implied by `-D warnings`\n    = help: remove the prefixes and use full paths to the variants instead of glob imports\n \n+error: aborting due to 10 previous errors\n+"}, {"sha": "d6a137c6fe4dfb84af5c1c1ece94ca4bb20a3902", "filename": "tests/ui/enums_clike.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fenums_clike.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fenums_clike.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenums_clike.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -48,3 +48,5 @@ error: Clike enum variant discriminant is not portable to 32-bit targets\n 37 |     A = 0x1_0000_0000,\n    |     ^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 8 previous errors\n+"}, {"sha": "46c0ac108cda2c3944993967db11877a1c789698", "filename": "tests/ui/eq_op.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Feq_op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Feq_op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feq_op.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -204,3 +204,5 @@ error: taken reference of right operand\n    |\n    = note: `-D op-ref` implied by `-D warnings`\n \n+error: aborting due to 33 previous errors\n+"}, {"sha": "310c41c541bc0ad9f624890edd3f92a352d1eb21", "filename": "tests/ui/erasing_op.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Ferasing_op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Ferasing_op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferasing_op.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -18,3 +18,5 @@ error: this operation will always return zero. This is likely not the intended o\n 11 |     0 / x;\n    |     ^^^^^\n \n+error: aborting due to 3 previous errors\n+"}, {"sha": "5dca265c2a400c4bb2a3d01b9c5b479f80d4d5fc", "filename": "tests/ui/eta.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Feta.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Feta.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -32,3 +32,5 @@ error: redundant closure found\n 18 |     let e = Some(1u8).map(|a| generic(a));\n    |                           ^^^^^^^^^^^^^^ help: remove closure as shown: `generic`\n \n+error: aborting due to 5 previous errors\n+"}, {"sha": "2e01a167c01b3a9969c310e23d8d054419759748", "filename": "tests/ui/eval_order_dependence.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Feval_order_dependence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Feval_order_dependence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feval_order_dependence.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -47,3 +47,5 @@ note: whether read occurs before this write depends on evaluation order\n 21 |         x += { x = 20; 2 };\n    |                ^^^^^^\n \n+error: aborting due to 4 previous errors\n+"}, {"sha": "7a2a0c66f2378e8be9d954f1ce8c4677db2cccf1", "filename": "tests/ui/explicit_write.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fexplicit_write.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fexplicit_write.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_write.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -36,3 +36,5 @@ error: use of `stderr().write_fmt(...).unwrap()`. Consider using `eprint!` inste\n 21 |         std::io::stderr().write_fmt(format_args!(\"test\")).unwrap();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 6 previous errors\n+"}, {"sha": "c8af77ecab3c4543b90f87f3a4e858b1ebf5b970", "filename": "tests/ui/fallible_impl_from.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Ffallible_impl_from.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Ffallible_impl_from.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffallible_impl_from.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -89,3 +89,5 @@ note: potential failure(s)\n    |             ^^^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n+error: aborting due to 4 previous errors\n+"}, {"sha": "cec03a47bfdebfd8cd0dc939fff6e01865b4201c", "filename": "tests/ui/filter_methods.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Ffilter_methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Ffilter_methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_methods.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -36,3 +36,5 @@ error: called `filter_map(p).map(q)` on an `Iterator`. This is more succinctly e\n 25 | |                                 .map(|x| x.checked_mul(2))\n    | |__________________________________________________________^\n \n+error: aborting due to 4 previous errors\n+"}, {"sha": "a764403d0397b40fc1aba4d76e0c0b993858d052", "filename": "tests/ui/float_cmp.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Ffloat_cmp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Ffloat_cmp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -95,3 +95,5 @@ note: std::f32::EPSILON and std::f64::EPSILON are available.\n 57 |     twice(x) != twice(ONE as f64);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 8 previous errors\n+"}, {"sha": "6367ec73c963083b41f7181c8f7cf869c020da4a", "filename": "tests/ui/float_cmp_const.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Ffloat_cmp_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Ffloat_cmp_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp_const.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -83,3 +83,5 @@ note: std::f32::EPSILON and std::f64::EPSILON are available.\n 25 |     v != ONE;\n    |     ^^^^^^^^\n \n+error: aborting due to 7 previous errors\n+"}, {"sha": "1e7ff40e1aca40daf264cb27720fbc5a1e74e4ab", "filename": "tests/ui/for_loop.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Ffor_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Ffor_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -565,3 +565,5 @@ error: it looks like you're manually copying between slices\n 549 | |     }\n     | |_____^ help: try replacing the loop by: `dst[..src.len()].clone_from_slice(&src[..])`\n \n+error: aborting due to 59 previous errors\n+"}, {"sha": "5f5bdc02a59209f7d4353c63ee8adf8a5f35bc5a", "filename": "tests/ui/format.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fformat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fformat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -6,3 +6,5 @@ error: useless use of `format!`\n   |\n   = note: `-D useless-format` implied by `-D warnings`\n \n+error: aborting due to previous error\n+"}, {"sha": "266de262ea0aa94bcae4ae45e88b2484eda999dd", "filename": "tests/ui/formatting.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fformatting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fformatting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformatting.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -86,3 +86,5 @@ error: possibly missing a comma here\n    |\n    = note: to remove this lint, add a comma or write the expr in a single line\n \n+error: aborting due to 10 previous errors\n+"}, {"sha": "0a97748954f348f10b35342505f34f846b6e0382", "filename": "tests/ui/functions.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Ffunctions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Ffunctions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffunctions.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -75,3 +75,5 @@ error: this public function dereferences a raw pointer but is not marked `unsafe\n 63 |         unsafe { std::ptr::read(p) };\n    |                                 ^\n \n+error: aborting due to 12 previous errors\n+"}, {"sha": "b5ada86253199fdca77a44534cf4bc3f5fe243d3", "filename": "tests/ui/get_unwrap.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fget_unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fget_unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_unwrap.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -60,3 +60,5 @@ error: called `.get_mut().unwrap()` on a VecDeque. Using `[]` is more clear and\n 40 |         *some_vecdeque.get_mut(0).unwrap() = 1;\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&mut some_vecdeque[0]`\n \n+error: aborting due to 10 previous errors\n+"}, {"sha": "1ae3f229dd88c7fb08b5279217ce9e1ab08a3ddd", "filename": "tests/ui/identity_conversion.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fidentity_conversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fidentity_conversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_conversion.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -40,3 +40,5 @@ error: identical conversion\n 39 |     let _ = String::from(\"foo\".to_string());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `String::from()`: `\"foo\".to_string()`\n \n+error: aborting due to 6 previous errors\n+"}, {"sha": "45f579ce832f97f4eeb80f73987ce2c220084b1c", "filename": "tests/ui/identity_op.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fidentity_op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fidentity_op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_op.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -48,3 +48,5 @@ error: the operation is ineffective. Consider reducing it to `u`\n 32 |     u & 255;\n    |     ^^^^^^^\n \n+error: aborting due to 8 previous errors\n+"}, {"sha": "e7bfd0275d8e46d912ad1b293f4bdd3d7683e0a8", "filename": "tests/ui/if_let_redundant_pattern_matching.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fif_let_redundant_pattern_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fif_let_redundant_pattern_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_let_redundant_pattern_matching.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -24,3 +24,5 @@ error: redundant pattern matching, consider using `is_some()`\n 17 |     if let Some(_) = Some(42) {\n    |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n \n+error: aborting due to 4 previous errors\n+"}, {"sha": "b920ef3b625065e1a6af856927da59d0579af81e", "filename": "tests/ui/if_not_else.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fif_not_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fif_not_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_not_else.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -23,3 +23,5 @@ error: Unnecessary `!=` operation\n    |\n    = help: change to `==` and swap the blocks of the if/else\n \n+error: aborting due to 2 previous errors\n+"}, {"sha": "cdba5372b3c815c3329775fa8ecf651dbf2e40a5", "filename": "tests/ui/implicit_hasher.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fimplicit_hasher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fimplicit_hasher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_hasher.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -133,3 +133,5 @@ help: consider adding a type parameter\n 78 |         pub fn $name<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32, S>) {\n    |\n \n+error: aborting due to 10 previous errors\n+"}, {"sha": "12d9e3cf0fd7ff8c4858b3cfef994cc6abc641a0", "filename": "tests/ui/inconsistent_digit_grouping.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Finconsistent_digit_grouping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Finconsistent_digit_grouping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finconsistent_digit_grouping.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -39,3 +39,5 @@ error: digits grouped inconsistently by underscores\n   |\n   = help: consider: 1.234_567_8_f32\n \n+error: aborting due to 5 previous errors\n+"}, {"sha": "f79db778488450be59bd5c6af100e049b1163c6c", "filename": "tests/ui/infinite_iter.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Finfinite_iter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Finfinite_iter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_iter.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -96,3 +96,5 @@ error: possible infinite iteration detected\n 30 |     (0..).all(|x| x == 24); // maybe infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 14 previous errors\n+"}, {"sha": "deecaffa1cf1235a4b014e5f33abfaf55f630a29", "filename": "tests/ui/int_plus_one.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fint_plus_one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fint_plus_one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fint_plus_one.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -40,3 +40,5 @@ help: change `>= y + 1` to `> y` as shown\n 14 |     y < x;\n    |     ^^^^^\n \n+error: aborting due to 4 previous errors\n+"}, {"sha": "420fed017444c39375792948c409e1755bb4746b", "filename": "tests/ui/invalid_ref.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Finvalid_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Finvalid_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid_ref.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -47,3 +47,5 @@ error: reference to uninitialized memory\n    |\n    = help: Creation of a null reference is undefined behavior; see https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n \n+error: aborting due to 6 previous errors\n+"}, {"sha": "eb46802899e71692ddbac225cd278e9d4dd93fc1", "filename": "tests/ui/invalid_upcast_comparisons.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Finvalid_upcast_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Finvalid_upcast_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid_upcast_comparisons.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -162,3 +162,5 @@ error: because of the numeric bounds on `u8` prior to casting, this expression i\n 78 |     -5 >= (u8 as i32);\n    |     ^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 27 previous errors\n+"}, {"sha": "7a16fe971f3e57463972da8b03bb196d34f78521", "filename": "tests/ui/is_unit_expr.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fis_unit_expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fis_unit_expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fis_unit_expr.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -69,3 +69,5 @@ error: This expression evaluates to the Unit type ()\n 78 |     let x3 = match None { Some(_) => {}, None => {}, };\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 6 previous errors\n+"}, {"sha": "ec1296caf83efbca8fe8a4ce6ea3b1c3cad3dfe9", "filename": "tests/ui/item_after_statement.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fitem_after_statement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fitem_after_statement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fitem_after_statement.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -12,3 +12,5 @@ error: adding items after statements is confusing, since items exist from the st\n 17 |     fn foo() { println!(\"foo\"); }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 2 previous errors\n+"}, {"sha": "6fc285274a0ba2e855b44766268b4b76d71bbec9", "filename": "tests/ui/large_digit_groups.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Flarge_digit_groups.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Flarge_digit_groups.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_digit_groups.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -47,3 +47,5 @@ error: digit groups should be smaller\n   |\n   = help: consider: 123_456.123_456_f32\n \n+error: aborting due to 6 previous errors\n+"}, {"sha": "5e938337bc004864d69a0d53284aacfc682e4ef0", "filename": "tests/ui/large_enum_variant.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Flarge_enum_variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Flarge_enum_variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_enum_variant.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -66,3 +66,5 @@ help: consider boxing the large fields to reduce the total size of the enum\n 49 |     StructLikeLarge2 { x: Box<[i32; 8000]> },\n    |                           ^^^^^^^^^^^^^^^^\n \n+error: aborting due to 6 previous errors\n+"}, {"sha": "6e3cf1b3ca1d96484d671681a7af1f7ce3802ae8", "filename": "tests/ui/len_zero.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Flen_zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Flen_zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -94,3 +94,5 @@ error: trait `DependsOnFoo` has a `len` method but no (possibly inherited) `is_e\n 191 | | }\n     | |_^\n \n+error: aborting due to 12 previous errors\n+"}, {"sha": "b912373f95c67b7af710ede2e4455260f490c543", "filename": "tests/ui/let_if_seq.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Flet_if_seq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Flet_if_seq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_if_seq.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -46,3 +46,5 @@ error: `if _ { .. } else { .. }` is an expression\n     |\n     = note: you might not need `mut` at all\n \n+error: aborting due to 4 previous errors\n+"}, {"sha": "459b2eafa26f8e1060fd5ac8ced57c2211c718c5", "filename": "tests/ui/let_return.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Flet_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Flet_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_return.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -23,3 +23,5 @@ note: this expression can be directly returned\n 15 |         let x = 5;\n    |                 ^\n \n+error: aborting due to 2 previous errors\n+"}, {"sha": "da579ec80f315eba317a32ebf597c9ed40e1c574", "filename": "tests/ui/let_unit.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Flet_unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Flet_unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_unit.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -12,3 +12,5 @@ error: this let-binding has unit value. Consider omitting `let _a =`\n 18 |         let _a = ();\n    |         ^^^^^^^^^^^^\n \n+error: aborting due to 2 previous errors\n+"}, {"sha": "23b353d13d2ee2d53103c7612f8ef64166d8c54f", "filename": "tests/ui/lifetimes.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Flifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Flifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -86,3 +86,5 @@ error: explicit lifetimes given in parameter types where they could be elided\n 120 | fn trait_bound_ok<'a, T: WithLifetime<'static>>(_: &'a u8, _: T) { unimplemented!() }\n     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 14 previous errors\n+"}, {"sha": "2f9a6813b96d097a1ac7a86fe4774e26130ccd3f", "filename": "tests/ui/lint_pass.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Flint_pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Flint_pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint_pass.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -6,3 +6,5 @@ error: the lint `MISSING_LINT` is not added to any `LintPass`\n    |\n    = note: `-D lint-without-lint-pass` implied by `-D warnings`\n \n+error: aborting due to previous error\n+"}, {"sha": "92540b7346265488b55fd16741e0559cef6f5644", "filename": "tests/ui/literals.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fliterals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fliterals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fliterals.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -86,3 +86,5 @@ help: if you mean to use an octal constant, use `0o`\n 30 |     let fail8 = 0o123;\n    |                 ^^^^^\n \n+error: aborting due to 11 previous errors\n+"}, {"sha": "c29f37918517634cf66b958b42dbe7997ec906a5", "filename": "tests/ui/map_clone.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fmap_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fmap_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -98,3 +98,5 @@ error: you seem to be using .map() to clone the contents of an Option, consider\n    = help: try\n            x.as_ref().cloned()\n \n+error: aborting due to 11 previous errors\n+"}, {"sha": "fd22247cb1f53dc2eff6467edb9879750d9cc60d", "filename": "tests/ui/matches.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fmatches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fmatches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -448,3 +448,5 @@ error: use as_mut() instead\n 329 | |     };\n     | |_____^ help: try this: `mut_owned.as_mut()`\n \n+error: aborting due to 37 previous errors\n+"}, {"sha": "6e7a44694e14f8c3d176d07d190c4ddebf9e4072", "filename": "tests/ui/mem_forget.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fmem_forget.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fmem_forget.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_forget.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -18,3 +18,5 @@ error: usage of mem::forget on Drop type\n 24 |     forgetSomething(eight);\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 3 previous errors\n+"}, {"sha": "feea8e5e512fa3a2681060267d8aa120198c7a26", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -501,3 +501,5 @@ error: used unwrap() on an Option value. If you don't want to handle the None ca\n     |\n     = note: `-D option-unwrap-used` implied by `-D warnings`\n \n+error: aborting due to 66 previous errors\n+"}, {"sha": "de4c4e16fa036b99f5f4eb135071d32ee2fa0e5c", "filename": "tests/ui/min_max.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fmin_max.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fmin_max.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_max.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -42,3 +42,5 @@ error: this min/max combination leads to constant result\n 30 |     max(min(s, \"Apple\"), \"Zoo\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 7 previous errors\n+"}, {"sha": "54834f9021c9c9904c95ebaf69edb65abf553039", "filename": "tests/ui/missing-doc.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fmissing-doc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fmissing-doc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing-doc.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -264,3 +264,5 @@ error: missing documentation for a function\n 191 |         fn also_undocumented2() {}\n     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 39 previous errors\n+"}, {"sha": "c9d3319db1b6a1aa6c187298414a3cb22b8faeff", "filename": "tests/ui/module_inception.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fmodule_inception.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fmodule_inception.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodule_inception.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -16,3 +16,5 @@ error: module has the same name as its containing module\n 14 | |     }\n    | |_____^\n \n+error: aborting due to 2 previous errors\n+"}, {"sha": "ccfca7154e042deaf5c844636f5f5d455d705534", "filename": "tests/ui/modulo_one.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fmodulo_one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fmodulo_one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodulo_one.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -6,3 +6,5 @@ error: any number modulo 1 will be 0\n   |\n   = note: `-D modulo-one` implied by `-D warnings`\n \n+error: aborting due to previous error\n+"}, {"sha": "a7cbc0b7a096fc00718347eebb8070b1a6835e6e", "filename": "tests/ui/mut_from_ref.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fmut_from_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fmut_from_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_from_ref.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -59,3 +59,5 @@ note: immutable borrow here\n 32 | fn fail_double<'a, 'b>(x: &'a u32, y: &'a u32, z: &'b mut u32) -> &'a mut u32 {\n    |                           ^^^^^^^     ^^^^^^^\n \n+error: aborting due to 5 previous errors\n+"}, {"sha": "d1f05ea8091fb448256b00b93d7d95367a489ddb", "filename": "tests/ui/mut_mut.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fmut_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fmut_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_mut.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -57,3 +57,5 @@ error: generally you want to avoid `&mut &mut _` if possible\n 35 |         let y : &mut &mut &mut u32 = &mut &mut &mut 2;\n    |                      ^^^^^^^^^^^^^\n \n+error: aborting due to 9 previous errors\n+"}, {"sha": "d7be7ae1e6fc89c07fa9146791fc8df80a31bcb9", "filename": "tests/ui/mut_range_bound.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fmut_range_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fmut_range_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_range_bound.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -30,3 +30,5 @@ error: attempt to mutate range bound within loop; note that the range of the loo\n 40 |         let n = &mut m;  // warning\n    |                      ^\n \n+error: aborting due to 5 previous errors\n+"}, {"sha": "73df19bf1583986de94f7bb945ccc655cbeef9c9", "filename": "tests/ui/mut_reference.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fmut_reference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fmut_reference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_reference.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -18,3 +18,5 @@ error: The function/method `takes_an_immutable_reference` doesn't need a mutable\n 28 |     my_struct.takes_an_immutable_reference(&mut 42);\n    |                                            ^^^^^^^\n \n+error: aborting due to 3 previous errors\n+"}, {"sha": "354f9891c1788b0089c05340e24c58c25f523ae3", "filename": "tests/ui/mutex_atomic.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fmutex_atomic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fmutex_atomic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmutex_atomic.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -44,3 +44,5 @@ error: Consider using an AtomicIsize instead of a Mutex here. If you just want t\n 16 |     Mutex::new(0i32);\n    |     ^^^^^^^^^^^^^^^^\n \n+error: aborting due to 7 previous errors\n+"}, {"sha": "63e0632445f69429278ad1650900a97e09701bb9", "filename": "tests/ui/needless_bool.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fneedless_bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fneedless_bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_bool.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -66,3 +66,5 @@ error: this if-then-else expression returns a bool literal\n 50 |     if x && y { return false } else { return true };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: you can reduce it to: `return !(x && y)`\n \n+error: aborting due to 11 previous errors\n+"}, {"sha": "fde38508b32333eec5f9b47629805d4ca6617562", "filename": "tests/ui/needless_borrow.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fneedless_borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fneedless_borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -38,3 +38,5 @@ error: this pattern creates a reference to a reference\n 50 |     let _ = v.iter().filter(|&ref a| a.is_empty());\n    |                               ^^^^^ help: change this to: `a`\n \n+error: aborting due to 6 previous errors\n+"}, {"sha": "2a8cf4348d395d692efb34cdfe218bc82b68c211", "filename": "tests/ui/needless_borrowed_ref.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fneedless_borrowed_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fneedless_borrowed_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrowed_ref.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -24,3 +24,5 @@ error: this pattern takes a reference on something that is being de-referenced\n 42 |         (&Animal::Cat(v), &ref k) | (&ref k, &Animal::Cat(v)) => (), // lifetime mismatch error if there is no '&ref'\n    |                                      ^^^^^^ help: try removing the `&ref` part and just keep: `k`\n \n+error: aborting due to 4 previous errors\n+"}, {"sha": "3e0368892a43104f546639381fede9b134080ded", "filename": "tests/ui/needless_continue.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fneedless_continue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fneedless_continue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_continue.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -55,3 +55,5 @@ error: There is no need for an explicit `else` block for this `if` expression\n            println!(\"Jabber\");\n            ...\n \n+error: aborting due to 2 previous errors\n+"}, {"sha": "33bda7d98724ea7166ab304e26ff97860978b697", "filename": "tests/ui/needless_pass_by_value.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fneedless_pass_by_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fneedless_pass_by_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -124,3 +124,5 @@ error: this argument is passed by value, but not consumed in the function body\n 101 |         _s: Self,\n     |             ^^^^ help: consider taking a reference instead: `&Self`\n \n+error: aborting due to 16 previous errors\n+"}, {"sha": "7fb4571e0c3fbee46bff8854236685bdd46a56e7", "filename": "tests/ui/needless_range_loop.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fneedless_range_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fneedless_range_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_range_loop.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -37,3 +37,5 @@ help: consider using an iterator\n 35 |     for <item> in &mut ms {\n    |\n \n+error: aborting due to 3 previous errors\n+"}, {"sha": "42dc6e6594c5b6c1c528e2d6eba12dc0c4f0c614", "filename": "tests/ui/needless_return.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fneedless_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fneedless_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -48,3 +48,5 @@ error: unneeded return statement\n 39 |     let _ = || return true;\n    |                ^^^^^^^^^^^ help: remove `return` as shown: `true`\n \n+error: aborting due to 8 previous errors\n+"}, {"sha": "3e509870d00f89a37c02bbab12d2ed08b545105e", "filename": "tests/ui/needless_update.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fneedless_update.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fneedless_update.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_update.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -6,3 +6,5 @@ error: struct update has no effect, all the fields in the struct have already be\n    |\n    = note: `-D needless-update` implied by `-D warnings`\n \n+error: aborting due to previous error\n+"}, {"sha": "1d52ba16eae8e5fd9d99fd507251eb9acc6ea50d", "filename": "tests/ui/neg_multiply.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fneg_multiply.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fneg_multiply.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneg_multiply.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -12,3 +12,5 @@ error: Negation by multiplying with -1\n 32 |     -1 * x;\n    |     ^^^^^^\n \n+error: aborting due to 2 previous errors\n+"}, {"sha": "83c10c9b19315adebf330e7e85f4f6ae5771d1a5", "filename": "tests/ui/never_loop.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fnever_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fnever_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_loop.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -90,3 +90,5 @@ error: this loop never actually loops\n 160 | |         }\n     | |_________^\n \n+error: aborting due to 9 previous errors\n+"}, {"sha": "335e60404fab195730fe0b39ed7d6058f45c385e", "filename": "tests/ui/new_without_default.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fnew_without_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fnew_without_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_without_default.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -36,3 +36,5 @@ help: try this\n 67 | }\n    |\n \n+error: aborting due to 3 previous errors\n+"}, {"sha": "5bcab9f2b5e3329c8155d99f9775199fed093106", "filename": "tests/ui/no_effect.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fno_effect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fno_effect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fno_effect.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -278,3 +278,5 @@ error: statement can be reduced\n 115 |     FooString { s: String::from(\"blah\"), };\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `String::from(\"blah\");`\n \n+error: aborting due to 46 previous errors\n+"}, {"sha": "850a3ccd9512909310a454d1febcc22b74328bdf", "filename": "tests/ui/non_expressive_names.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fnon_expressive_names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fnon_expressive_names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_expressive_names.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -149,3 +149,5 @@ error: consider choosing a more descriptive name\n 141 |     let __1___2 = 12; //~ERROR Consider a more descriptive name\n     |         ^^^^^^^\n \n+error: aborting due to 14 previous errors\n+"}, {"sha": "da2d3b9500fedc01a2c87f1897a459a04f875c87", "filename": "tests/ui/ok_expect.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fok_expect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fok_expect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fok_expect.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -30,3 +30,5 @@ error: called `ok().expect()` on a Result value. You can call `expect` directly\n 26 |     res6.ok().expect(\"meh\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 5 previous errors\n+"}, {"sha": "e1371d924eb6673fca9860aee08e66db738ad752", "filename": "tests/ui/ok_if_let.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fok_if_let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fok_if_let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fok_if_let.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -11,3 +11,5 @@ error: Matching on `Some` with `ok()` is redundant\n    = note: `-D if-let-some-result` implied by `-D warnings`\n    = help: Consider matching on `Ok(y)` and removing the call to `ok` instead\n \n+error: aborting due to previous error\n+"}, {"sha": "a4f7b3c67612f0b31b83d6ca353a46631adb21c4", "filename": "tests/ui/op_ref.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fop_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fop_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fop_ref.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -10,3 +10,5 @@ help: use the values directly\n 13 |     let foo = 5 - 6;\n    |\n \n+error: aborting due to previous error\n+"}, {"sha": "f0d419041523d89f8ebe4f5305649cc3812b168a", "filename": "tests/ui/open_options.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fopen_options.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fopen_options.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fopen_options.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -42,3 +42,5 @@ error: the method \"truncate\" is called more than once\n 15 |     OpenOptions::new().truncate(true).truncate(false).open(\"foo.txt\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 7 previous errors\n+"}, {"sha": "adf353a1c4bc11f50a4b8d43431aad51293dd96a", "filename": "tests/ui/overflow_check_conditional.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Foverflow_check_conditional.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Foverflow_check_conditional.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foverflow_check_conditional.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -48,3 +48,5 @@ error: You are trying to use classic C underflow conditions that will fail in Ru\n 32 |     if a < a - b {\n    |        ^^^^^^^^^\n \n+error: aborting due to 8 previous errors\n+"}, {"sha": "25113ed80b6e08f2f0d29916d68560bd120c7c5e", "filename": "tests/ui/panic.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fpanic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fpanic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -18,3 +18,5 @@ error: you probably are missing some parameter in your format string\n 12 |         assert!(true, \"here be missing values: {}\");\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 3 previous errors\n+"}, {"sha": "5e536cc51d28e722a7a5a2b41f186ba39fc48bee", "filename": "tests/ui/partialeq_ne_impl.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fpartialeq_ne_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fpartialeq_ne_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpartialeq_ne_impl.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -6,3 +6,5 @@ error: re-implementing `PartialEq::ne` is unnecessary\n    |\n    = note: `-D partialeq-ne-impl` implied by `-D warnings`\n \n+error: aborting due to previous error\n+"}, {"sha": "59bce3a9a8f6d427d3e0f606f1b0ff3ce5ad4e5f", "filename": "tests/ui/patterns.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fpatterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fpatterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpatterns.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -6,3 +6,5 @@ error: the `y @ _` pattern can be written as just `y`\n    |\n    = note: `-D redundant-pattern` implied by `-D warnings`\n \n+error: aborting due to previous error\n+"}, {"sha": "9f0e53ffca2baad8273d7ff52145a705326a404b", "filename": "tests/ui/precedence.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fprecedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fprecedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprecedence.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -54,3 +54,5 @@ error: unary minus has lower precedence than method call\n 16 |     -1f32.abs();\n    |     ^^^^^^^^^^^ help: consider adding parentheses to clarify your intent: `-(1f32.abs())`\n \n+error: aborting due to 9 previous errors\n+"}, {"sha": "789e1218b7804521360c16411bebb41af47ec468", "filename": "tests/ui/print.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fprint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fprint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -50,3 +50,5 @@ error: use of `Debug`-based formatting\n 31 |     print!(\"Hello {:#?}\", \"#orld\");\n    |                           ^^^^^^^\n \n+error: aborting due to 8 previous errors\n+"}, {"sha": "4f32d1b2a2d45a1b705072e066d1e65aeb425b1a", "filename": "tests/ui/print_with_newline.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fprint_with_newline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fprint_with_newline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_with_newline.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -6,3 +6,5 @@ error: using `print!()` with a format string that ends in a newline, consider us\n   |\n   = note: `-D print-with-newline` implied by `-D warnings`\n \n+error: aborting due to previous error\n+"}, {"sha": "f70b056e562639e18bfb92c8164e2c4f3269576a", "filename": "tests/ui/println_empty_string.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fprintln_empty_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fprintln_empty_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprintln_empty_string.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -6,3 +6,5 @@ error: using `println!(\"\")`\n   |\n   = note: `-D print-with-newline` implied by `-D warnings`\n \n+error: aborting due to previous error\n+"}, {"sha": "bf8608111cf273f5ef9604feddf05d9ffd50ab87", "filename": "tests/ui/ptr_arg.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fptr_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fptr_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_arg.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -76,3 +76,5 @@ help: change `y.as_str()` to\n 62 |     let c = y;\n    |             ^\n \n+error: aborting due to 6 previous errors\n+"}, {"sha": "fc51f1a07f07741d2dfa559606622cc4b52dd930", "filename": "tests/ui/range.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Frange.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Frange.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -38,3 +38,5 @@ error: Iterator::step_by(0) will panic at runtime\n 33 |     let _ = v1.iter().step_by(2/3);\n    |             ^^^^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 6 previous errors\n+"}, {"sha": "cc0038c344283d469efb7d39801848569e33fe9d", "filename": "tests/ui/range_plus_minus_one.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Frange_plus_minus_one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Frange_plus_minus_one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_plus_minus_one.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -65,3 +65,5 @@ error: an inclusive range would be more readable\n    |             help: use: `(f()+1)..=f()`\n    |             in this macro invocation\n \n+error: aborting due to 7 previous errors\n+"}, {"sha": "d2b5616a4811ef3c261c6352827d85d2cbb99177", "filename": "tests/ui/redundant_closure_call.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fredundant_closure_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fredundant_closure_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -30,3 +30,5 @@ error: Try not to call a closure in the expression where it is declared.\n 12 |     k = (|a,b| a*b)(1,5);\n    |         ^^^^^^^^^^^^^^^^\n \n+error: aborting due to 5 previous errors\n+"}, {"sha": "741c0cc103857b69f4c72e2ee73aeb1a27092999", "filename": "tests/ui/reference.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Freference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Freference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freference.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -66,3 +66,5 @@ error: immediately dereferencing a reference\n 53 |         let y = **&mut &mut x;\n    |                  ^^^^^^^^^^^^ help: try this: `&mut x`\n \n+error: aborting due to 11 previous errors\n+"}, {"sha": "433061e41fbaaacfc40c2c7ec402cca35aa32c77", "filename": "tests/ui/regex.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fregex.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fregex.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregex.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -149,3 +149,5 @@ error: trivial regex\n    |\n    = help: consider using consider using `str::is_empty`\n \n+error: aborting due to 21 previous errors\n+"}, {"sha": "fb2e71db17144b0f0ee836169097171e9cea91e6", "filename": "tests/ui/replace_consts.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Freplace_consts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Freplace_consts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freplace_consts.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -214,3 +214,5 @@ error: using `MAX`\n 47 |     { let foo = std::u128::MAX; };\n    |                 ^^^^^^^^^^^^^^ help: try this: `u128::max_value()`\n \n+error: aborting due to 35 previous errors\n+"}, {"sha": "58667e0f820b73eec81d7465c9db83dc8927f2ee", "filename": "tests/ui/serde.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fserde.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fserde.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fserde.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -10,3 +10,5 @@ error: you should not implement `visit_string` without also implementing `visit_\n    |\n    = note: `-D serde-api-misuse` implied by `-D warnings`\n \n+error: aborting due to previous error\n+"}, {"sha": "0eb5e5b2a2b30d49a42810abd9d1c51675778318", "filename": "tests/ui/shadow.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fshadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fshadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshadow.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -134,3 +134,5 @@ note: previous binding is here\n 21 |     let x = y;\n    |         ^\n \n+error: aborting due to 9 previous errors\n+"}, {"sha": "7697cbd1c64c032c249536f6bb9342527967ed46", "filename": "tests/ui/short_circuit_statement.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fshort_circuit_statement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fshort_circuit_statement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshort_circuit_statement.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -18,3 +18,5 @@ error: boolean short circuit operator in statement may be clearer using an expli\n 9 |     1 == 2 || g();\n   |     ^^^^^^^^^^^^^^ help: replace it with: `if !(1 == 2) { g(); }`\n \n+error: aborting due to 3 previous errors\n+"}, {"sha": "42ee2b9fef479f4a20f7bdce9f473e7ba0c36e21", "filename": "tests/ui/single_char_pattern.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fsingle_char_pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fsingle_char_pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_pattern.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -102,3 +102,5 @@ error: single-character string constant used as pattern\n 37 |     x.trim_right_matches(\"x\");\n    |     ---------------------^^^- help: try using a char instead: `x.trim_right_matches('x')`\n \n+error: aborting due to 17 previous errors\n+"}, {"sha": "7d73f201b692404d5250061459ff47cd97ff3947", "filename": "tests/ui/starts_ends_with.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fstarts_ends_with.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fstarts_ends_with.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstarts_ends_with.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -74,3 +74,5 @@ error: you should use the `ends_with` method\n 38 |     Some(' ') != \"\".chars().next_back();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `!\"\".ends_with(' ')`\n \n+error: aborting due to 12 previous errors\n+"}, {"sha": "4be2037ad31bbb915076214e79373575efff1975", "filename": "tests/ui/string_extend.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fstring_extend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fstring_extend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_extend.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -18,3 +18,5 @@ error: calling `.extend(_.chars())`\n 22 |     s.extend(def.chars());\n    |     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `s.push_str(&def)`\n \n+error: aborting due to 3 previous errors\n+"}, {"sha": "d098ce9df5eaf0969ca7565aa0e05bd0489834e9", "filename": "tests/ui/strings.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fstrings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fstrings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstrings.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -72,3 +72,5 @@ error: manual implementation of an assign operation\n 65 |     ; x = x + 1;\n    |       ^^^^^^^^^ help: replace it with: `x += 1`\n \n+error: aborting due to 11 previous errors\n+"}, {"sha": "25e857991b8a3a221b45ee531d7215a169803441", "filename": "tests/ui/stutter.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fstutter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fstutter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstutter.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -30,3 +30,5 @@ error: item name starts with its containing module's name\n 12 |     pub struct Foo7Bar;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 5 previous errors\n+"}, {"sha": "a01ec375e639e7ccda1823d891f7ab8f2192bad0", "filename": "tests/ui/swap.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fswap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fswap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fswap.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -65,3 +65,5 @@ error: this looks like you are trying to swap `c.0` and `a`\n    |\n    = note: or maybe you should use `std::mem::replace`?\n \n+error: aborting due to 7 previous errors\n+"}, {"sha": "979720c914d16e49299a341b44cd1d28c1ff2862", "filename": "tests/ui/temporary_assignment.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Ftemporary_assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Ftemporary_assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftemporary_assignment.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -12,3 +12,5 @@ error: assignment to temporary\n 30 |     (0, 0).0 = 1;\n    |     ^^^^^^^^^^^^\n \n+error: aborting due to 2 previous errors\n+"}, {"sha": "f360e85329f50729f17bc498ba0bee3e8b7336cc", "filename": "tests/ui/toplevel_ref_arg.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Ftoplevel_ref_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Ftoplevel_ref_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftoplevel_ref_arg.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -30,3 +30,5 @@ error: `ref` on an entire `let` pattern is discouraged, take a reference with `&\n 24 |   let ref mut z = 1 + 2;\n    |   ----^^^^^^^^^--------- help: try: `let z = &mut (1 + 2);`\n \n+error: aborting due to 5 previous errors\n+"}, {"sha": "91e4d59da9867aeac4b3b2f55127aeccd428cb36", "filename": "tests/ui/trailing_zeros.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Ftrailing_zeros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Ftrailing_zeros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrailing_zeros.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -12,3 +12,5 @@ error: bit mask could be simplified with a call to `trailing_zeros`\n 8 |     let _ = x & 0b1_1111 == 0; // suggest trailing_zeros\n   |             ^^^^^^^^^^^^^^^^^ help: try: `x.trailing_zeros() >= 5`\n \n+error: aborting due to 2 previous errors\n+"}, {"sha": "f3ac9a101ae1ba7464b4171a57c2e1a35e749d90", "filename": "tests/ui/transmute.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Ftransmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Ftransmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -204,3 +204,5 @@ error: transmute from a `&mut [u8]` to a `&mut str`\n 140 |     let _: &mut str = unsafe { std::mem::transmute(mb) };\n     |                                ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::str::from_utf8_mut(mb).unwrap()`\n \n+error: aborting due to 32 previous errors\n+"}, {"sha": "3a6a6e73f575e4044ae4038a2b0f4b75de87fae1", "filename": "tests/ui/transmute_64bit.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Ftransmute_64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Ftransmute_64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_64bit.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -12,3 +12,5 @@ error: transmute from a `f64` to a pointer\n 11 |         let _: *mut usize = std::mem::transmute(6.0f64);\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 2 previous errors\n+"}, {"sha": "b41bff7a9b06b3ad9ecf5b533961dbb06d0f018b", "filename": "tests/ui/types.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Ftypes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Ftypes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypes.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -6,3 +6,5 @@ error: casting i32 to i64 may become silently lossy if types change\n   |\n   = note: `-D cast-lossless` implied by `-D warnings`\n \n+error: aborting due to previous error\n+"}, {"sha": "9e99a44bb60c17384c2d953cf418c52a8e00467a", "filename": "tests/ui/unicode.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Funicode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Funicode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funicode.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -28,3 +28,5 @@ error: literal non-ASCII character detected\n    = help: Consider replacing the string with:\n            \"\"/u{dc}ben!\"\"\n \n+error: aborting due to 3 previous errors\n+"}, {"sha": "51ad3fca94793772efb38f3a3cc11ae09e4888a5", "filename": "tests/ui/unit_cmp.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Funit_cmp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Funit_cmp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_cmp.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -12,3 +12,5 @@ error: >-comparison of unit values detected. This will always be false\n 19 |     if { true; } > { false; } {\n    |        ^^^^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 2 previous errors\n+"}, {"sha": "486d2e350f27ec23acff12337324beeda782b6d1", "filename": "tests/ui/unnecessary_clone.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Funnecessary_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Funnecessary_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -80,3 +80,5 @@ error: called `cloned().collect()` on a slice to create a `Vec`. Calling `to_vec\n    |\n    = note: `-D iter-cloned-collect` implied by `-D warnings`\n \n+error: aborting due to 11 previous errors\n+"}, {"sha": "7e4c3a6cb9cb5e07ecfaff789dd91d40a3414d62", "filename": "tests/ui/unneeded_field_pattern.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Funneeded_field_pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Funneeded_field_pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funneeded_field_pattern.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -15,3 +15,5 @@ error: All the struct fields are matched to a wildcard pattern, consider using `\n    |\n    = help: Try with `Foo { .. }` instead\n \n+error: aborting due to 2 previous errors\n+"}, {"sha": "72cb160fafcb5a0cd8b7b67538c9b126a60269b4", "filename": "tests/ui/unreadable_literal.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Funreadable_literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Funreadable_literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funreadable_literal.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -31,3 +31,5 @@ error: long literal lacking separators\n   |\n   = help: consider: 1.234_56_f32\n \n+error: aborting due to 4 previous errors\n+"}, {"sha": "93f2ddd533fea547b3df4dad229cab21401a8524", "filename": "tests/ui/unsafe_removed_from_name.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Funsafe_removed_from_name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Funsafe_removed_from_name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe_removed_from_name.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -18,3 +18,5 @@ error: removed \"unsafe\" from the name of `Unsafe` in use as `LieAboutModSafety`\n 23 | use mod_with_some_unsafe_things::Unsafe as LieAboutModSafety;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 3 previous errors\n+"}, {"sha": "5114d375fffeb136fb8a039af64119e163d06657", "filename": "tests/ui/unused_io_amount.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Funused_io_amount.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Funused_io_amount.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_io_amount.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -39,3 +39,5 @@ error: handle read amount returned or use `Read::read_exact` instead\n 27 |     s.read(&mut buf).unwrap();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 6 previous errors\n+"}, {"sha": "19c91e2a6a3cae6f406352a64ba37bfb56cbf5fc", "filename": "tests/ui/unused_labels.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Funused_labels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Funused_labels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_labels.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -22,3 +22,5 @@ error: unused label `'same_label_in_two_fns`\n 34 | |     }\n    | |_____^\n \n+error: aborting due to 3 previous errors\n+"}, {"sha": "b1fcebe6eed5bf440666ca953a12d05376152a14", "filename": "tests/ui/unused_lt.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Funused_lt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Funused_lt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_lt.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -18,3 +18,5 @@ error: this lifetime isn't used in the function definition\n 50 |     fn x<'a>(&self) {}\n    |          ^^\n \n+error: aborting due to 3 previous errors\n+"}, {"sha": "bfd334335d88d010846f04111f43ccc3a0922a04", "filename": "tests/ui/use_self.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fuse_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fuse_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -36,3 +36,5 @@ error: unnecessary structure name repetition\n 24 |             Foo::new()\n    |             ^^^^^^^^ help: use the applicable keyword: `Self`\n \n+error: aborting due to 6 previous errors\n+"}, {"sha": "712f81c1b6ff8d4f17e33875c372c9ed8f447ea6", "filename": "tests/ui/used_underscore_binding.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fused_underscore_binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fused_underscore_binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fused_underscore_binding.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -30,3 +30,5 @@ error: used binding `_underscore_field` which is prefixed with an underscore. A\n 36 |     s._underscore_field += 1;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 5 previous errors\n+"}, {"sha": "875d830a35341a8325e6f79d27c7b20c86391794", "filename": "tests/ui/useless_asref.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fuseless_asref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fuseless_asref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_asref.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -70,3 +70,5 @@ error: this call to `as_ref` does nothing\n 106 |     foo_rt(mrt.as_ref());\n     |            ^^^^^^^^^^^^ help: try this: `mrt`\n \n+error: aborting due to 11 previous errors\n+"}, {"sha": "707a11d55cc684d8c5b52f5d708b91303187e518", "filename": "tests/ui/useless_attribute.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fuseless_attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fuseless_attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_attribute.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -6,3 +6,5 @@ error: useless lint attribute\n   |\n   = note: `-D useless-attribute` implied by `-D warnings`\n \n+error: aborting due to previous error\n+"}, {"sha": "6a47eb5b064ea559bbdb6b9372762630ce6a631f", "filename": "tests/ui/vec.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fvec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fvec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -36,3 +36,5 @@ error: useless use of `vec!`\n 49 |     for a in vec![1, 2, 3] {\n    |              ^^^^^^^^^^^^^ help: you can use a slice directly: `&[1, 2, 3]`\n \n+error: aborting due to 6 previous errors\n+"}, {"sha": "689c92d6fb694bd06dcfaa55f0d4045d222c7a32", "filename": "tests/ui/while_loop.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fwhile_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fwhile_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_loop.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -110,3 +110,5 @@ error: this loop could be written as a `for` loop\n 184 | |         }\n     | |_________^ help: try: `for v in y { .. }`\n \n+error: aborting due to 11 previous errors\n+"}, {"sha": "216fd0bb82b8907fe9b2795951a1e28996ceeea3", "filename": "tests/ui/wrong_self_convention.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fwrong_self_convention.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fwrong_self_convention.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -72,3 +72,5 @@ error: methods called `from_*` usually take no self; consider choosing a less am\n 54 |     pub fn from_i64(self) {}\n    |                     ^^^^\n \n+error: aborting due to 12 previous errors\n+"}, {"sha": "b81e59c07f1529f0dc865f223aba5bed14417938", "filename": "tests/ui/zero_div_zero.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fzero_div_zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fzero_div_zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fzero_div_zero.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -57,3 +57,5 @@ error: constant division of 0.0 with 0.0 will always result in NaN\n    |\n    = help: Consider using `std::f64::NAN` if you would like a constant representing NaN\n \n+error: aborting due to 8 previous errors\n+"}, {"sha": "5155dc401bd112ae61ee9863588dce6e7dad8873", "filename": "tests/ui/zero_ptr.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fzero_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c/tests%2Fui%2Fzero_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fzero_ptr.stderr?ref=41ea14dda8da6fb3a6e6f83bcba257a5f8d6fa2c", "patch": "@@ -12,3 +12,5 @@ error: `0 as *mut _` detected. Consider using `ptr::null_mut()`\n 7 |     let y = 0 as *mut f64;\n   |             ^^^^^^^^^^^^^\n \n+error: aborting due to 2 previous errors\n+"}]}