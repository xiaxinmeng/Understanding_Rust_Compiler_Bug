{"sha": "c9e6bda9c758538e795ab387915543e076c35805", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5ZTZiZGE5Yzc1ODUzOGU3OTVhYjM4NzkxNTU0M2UwNzZjMzU4MDU=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-11-14T04:35:44Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-11-14T04:35:44Z"}, "message": "Revert the need for initial values with arithmetic iterators", "tree": {"sha": "5a35b78b773b5f7666a8cc62c2035fe30c5d5c7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a35b78b773b5f7666a8cc62c2035fe30c5d5c7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9e6bda9c758538e795ab387915543e076c35805", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9e6bda9c758538e795ab387915543e076c35805", "html_url": "https://github.com/rust-lang/rust/commit/c9e6bda9c758538e795ab387915543e076c35805", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9e6bda9c758538e795ab387915543e076c35805/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "064e84e30be101a43d0bca5718b5d10def23745b", "url": "https://api.github.com/repos/rust-lang/rust/commits/064e84e30be101a43d0bca5718b5d10def23745b", "html_url": "https://github.com/rust-lang/rust/commit/064e84e30be101a43d0bca5718b5d10def23745b"}], "stats": {"total": 111, "additions": 71, "deletions": 40}, "files": [{"sha": "55f37fac2eb8f7834e61d06bf5c556b6888aa2a8", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9e6bda9c758538e795ab387915543e076c35805/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e6bda9c758538e795ab387915543e076c35805/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=c9e6bda9c758538e795ab387915543e076c35805", "patch": "@@ -228,7 +228,7 @@ impl Iterator<(uint, uint)> for ElementSwaps {\n     #[inline]\n     fn size_hint(&self) -> (uint, Option<uint>) {\n         // For a vector of size n, there are exactly n! permutations.\n-        let n = range(2, self.sdir.len() + 1).product(1);\n+        let n = range(2, self.sdir.len() + 1).product();\n         (n - self.swaps_made, Some(n - self.swaps_made))\n     }\n }"}, {"sha": "04fc85091faa04e0898c30740e5de8a127deef5d", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9e6bda9c758538e795ab387915543e076c35805/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e6bda9c758538e795ab387915543e076c35805/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=c9e6bda9c758538e795ab387915543e076c35805", "patch": "@@ -116,7 +116,7 @@ impl<S: Str> StrVector for [S] {\n         }\n \n         // `len` calculation may overflow but push_str will check boundaries\n-        let len = self.iter().map(|s| s.as_slice().len()).sum(0);\n+        let len = self.iter().map(|s| s.as_slice().len()).sum();\n \n         let mut result = String::with_capacity(len);\n \n@@ -140,7 +140,7 @@ impl<S: Str> StrVector for [S] {\n         // this is wrong without the guarantee that `self` is non-empty\n         // `len` calculation may overflow but push_str but will check boundaries\n         let len = sep.len() * (self.len() - 1)\n-            + self.iter().map(|s| s.as_slice().len()).sum(0);\n+            + self.iter().map(|s| s.as_slice().len()).sum();\n         let mut result = String::with_capacity(len);\n         let mut first = true;\n \n@@ -2151,7 +2151,7 @@ mod tests {\n     #[test]\n     fn test_str_container() {\n         fn sum_len(v: &[&str]) -> uint {\n-            v.iter().map(|x| x.len()).sum(0)\n+            v.iter().map(|x| x.len()).sum()\n         }\n \n         let s = String::from_str(\"01234\");"}, {"sha": "774aa8a66d2886cd5e5e2e45513bdd5000a6e94e", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 50, "deletions": 18, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/c9e6bda9c758538e795ab387915543e076c35805/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e6bda9c758538e795ab387915543e076c35805/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=c9e6bda9c758538e795ab387915543e076c35805", "patch": "@@ -63,7 +63,7 @@ use cmp;\n use cmp::Ord;\n use mem;\n use num::{ToPrimitive, Int};\n-use ops::{Add, Mul};\n+use ops::Add;\n use option::{Option, Some, None};\n use uint;\n #[deprecated = \"renamed to Extend\"] pub use self::Extend as Extendable;\n@@ -402,7 +402,7 @@ pub trait Iterator<A> {\n     ///             .inspect(|&x| println!(\"filtering {}\", x))\n     ///             .filter(|&x| x % 2 == 0)\n     ///             .inspect(|&x| println!(\"{} made it through\", x))\n-    ///             .sum(0);\n+    ///             .sum();\n     /// println!(\"{}\", sum);\n     /// ```\n     #[inline]\n@@ -784,17 +784,33 @@ pub trait AdditiveIterator<A> {\n     ///\n     /// let a = [1i, 2, 3, 4, 5];\n     /// let mut it = a.iter().map(|&x| x);\n-    /// assert!(it.sum(0) == 15);\n+    /// assert!(it.sum() == 15);\n     /// ```\n-    fn sum(&mut self, init: A) -> A;\n+    fn sum(&mut self) -> A;\n }\n \n-impl<A: Add<A, A>, T: Iterator<A>> AdditiveIterator<A> for T {\n-    #[inline]\n-    fn sum(&mut self, init: A) -> A {\n-        self.fold(init, |s, x| s + x)\n-    }\n-}\n+macro_rules! impl_additive {\n+    ($A:ty, $init:expr) => {\n+        impl<T: Iterator<$A>> AdditiveIterator<$A> for T {\n+            #[inline]\n+            fn sum(&mut self) -> $A {\n+                self.fold($init, |acc, x| acc + x)\n+            }\n+        }\n+    };\n+}\n+impl_additive!(i8,   0)\n+impl_additive!(i16,  0)\n+impl_additive!(i32,  0)\n+impl_additive!(i64,  0)\n+impl_additive!(int,  0)\n+impl_additive!(u8,   0)\n+impl_additive!(u16,  0)\n+impl_additive!(u32,  0)\n+impl_additive!(u64,  0)\n+impl_additive!(uint, 0)\n+impl_additive!(f32,  0.0)\n+impl_additive!(f64,  0.0)\n \n /// A trait for iterators over elements which can be multiplied together.\n pub trait MultiplicativeIterator<A> {\n@@ -806,21 +822,37 @@ pub trait MultiplicativeIterator<A> {\n     /// use std::iter::{count, MultiplicativeIterator};\n     ///\n     /// fn factorial(n: uint) -> uint {\n-    ///     count(1u, 1).take_while(|&i| i <= n).product(1)\n+    ///     count(1u, 1).take_while(|&i| i <= n).product()\n     /// }\n     /// assert!(factorial(0) == 1);\n     /// assert!(factorial(1) == 1);\n     /// assert!(factorial(5) == 120);\n     /// ```\n-    fn product(&mut self, init: A) -> A;\n+    fn product(&mut self) -> A;\n }\n \n-impl<A: Mul<A, A>, T: Iterator<A>> MultiplicativeIterator<A> for T {\n-    #[inline]\n-    fn product(&mut self, init: A) -> A {\n-        self.fold(init, |p, x| p * x)\n-    }\n-}\n+macro_rules! impl_multiplicative {\n+    ($A:ty, $init:expr) => {\n+        impl<T: Iterator<$A>> MultiplicativeIterator<$A> for T {\n+            #[inline]\n+            fn product(&mut self) -> $A {\n+                self.fold($init, |acc, x| acc * x)\n+            }\n+        }\n+    };\n+}\n+impl_multiplicative!(i8,   1)\n+impl_multiplicative!(i16,  1)\n+impl_multiplicative!(i32,  1)\n+impl_multiplicative!(i64,  1)\n+impl_multiplicative!(int,  1)\n+impl_multiplicative!(u8,   1)\n+impl_multiplicative!(u16,  1)\n+impl_multiplicative!(u32,  1)\n+impl_multiplicative!(u64,  1)\n+impl_multiplicative!(uint, 1)\n+impl_multiplicative!(f32,  1.0)\n+impl_multiplicative!(f64,  1.0)\n \n /// A trait for iterators over elements which can be compared to one another.\n pub trait OrdIterator<A> {"}, {"sha": "7764fb26c11c46ead3304470e6d0e7a8d4160c5e", "filename": "src/libcoretest/iter.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c9e6bda9c758538e795ab387915543e076c35805/src%2Flibcoretest%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e6bda9c758538e795ab387915543e076c35805/src%2Flibcoretest%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fiter.rs?ref=c9e6bda9c758538e795ab387915543e076c35805", "patch": "@@ -294,17 +294,17 @@ fn test_iterator_len() {\n #[test]\n fn test_iterator_sum() {\n     let v: &[_] = &[0i, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n-    assert_eq!(v[0..4].iter().map(|&x| x).sum(0), 6);\n-    assert_eq!(v.iter().map(|&x| x).sum(0), 55);\n-    assert_eq!(v[0..0].iter().map(|&x| x).sum(0), 0);\n+    assert_eq!(v[0..4].iter().map(|&x| x).sum(), 6);\n+    assert_eq!(v.iter().map(|&x| x).sum(), 55);\n+    assert_eq!(v[0..0].iter().map(|&x| x).sum(), 0);\n }\n \n #[test]\n fn test_iterator_product() {\n     let v: &[_] = &[0i, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n-    assert_eq!(v[0..4].iter().map(|&x| x).product(1), 0);\n-    assert_eq!(v[1..5].iter().map(|&x| x).product(1), 24);\n-    assert_eq!(v[0..0].iter().map(|&x| x).product(1), 1);\n+    assert_eq!(v[0..4].iter().map(|&x| x).product(), 0);\n+    assert_eq!(v[1..5].iter().map(|&x| x).product(), 24);\n+    assert_eq!(v[0..0].iter().map(|&x| x).product(), 1);\n }\n \n #[test]"}, {"sha": "a893f8e89598dc75984b70620789e3cacbc23941", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9e6bda9c758538e795ab387915543e076c35805/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e6bda9c758538e795ab387915543e076c35805/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=c9e6bda9c758538e795ab387915543e076c35805", "patch": "@@ -70,7 +70,7 @@ impl<'a> fmt::Show for Matrix<'a> {\n             pretty_printed_matrix.iter().map(|row| row[col].len()).max().unwrap_or(0u)\n         }).collect();\n \n-        let total_width = column_widths.iter().map(|n| *n).sum(0) + column_count * 3 + 1;\n+        let total_width = column_widths.iter().map(|n| *n).sum() + column_count * 3 + 1;\n         let br = String::from_char(total_width, '+');\n         try!(write!(f, \"{}\\n\", br));\n         for row in pretty_printed_matrix.into_iter() {"}, {"sha": "7b0ebe631e0e16331d82feb369fa09853c188d27", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9e6bda9c758538e795ab387915543e076c35805/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e6bda9c758538e795ab387915543e076c35805/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=c9e6bda9c758538e795ab387915543e076c35805", "patch": "@@ -756,7 +756,7 @@ fn pick_column_to_specialize(def_map: &DefMap, m: &[Match]) -> Option<uint> {\n         let total_score = m.iter()\n             .map(|row| row.pats[col])\n             .map(|pat| pat_score(def_map, pat))\n-            .sum(0);\n+            .sum();\n \n         // Irrefutable columns always go first, they'd only be duplicated in the branches.\n         if total_score == 0 {"}, {"sha": "ec289a2d80699377318497f79b670cb7c32a598a", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9e6bda9c758538e795ab387915543e076c35805/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e6bda9c758538e795ab387915543e076c35805/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=c9e6bda9c758538e795ab387915543e076c35805", "patch": "@@ -1194,7 +1194,7 @@ fn ty_of_method_or_bare_fn<'tcx, AC: AstConv<'tcx>>(\n             lifetimes_for_params.push((input_pat, accumulator));\n         }\n \n-        if lifetimes_for_params.iter().map(|&(_, ref x)| x.len()).sum(0) == 1 {\n+        if lifetimes_for_params.iter().map(|&(_, ref x)| x.len()).sum() == 1 {\n             implied_output_region =\n                 Some(lifetimes_for_params.iter()\n                                          .filter_map(|&(_, ref x)|"}, {"sha": "b0e1aeea3a182b84278a39dba63548ca27d865a6", "filename": "src/librustdoc/stability_summary.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c9e6bda9c758538e795ab387915543e076c35805/src%2Flibrustdoc%2Fstability_summary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e6bda9c758538e795ab387915543e076c35805/src%2Flibrustdoc%2Fstability_summary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fstability_summary.rs?ref=c9e6bda9c758538e795ab387915543e076c35805", "patch": "@@ -15,7 +15,6 @@\n \n use std::ops::Add;\n use std::num::Zero;\n-use std::iter::AdditiveIterator;\n \n use syntax::attr::{Deprecated, Experimental, Unstable, Stable, Frozen, Locked};\n use syntax::ast::Public;\n@@ -152,14 +151,14 @@ fn summarize_item(item: &Item) -> (Counts, Option<ModuleSummary>) {\n             let subcounts = subitems.iter().filter(|i| visible(*i))\n                                            .map(summarize_item)\n                                            .map(|s| s.val0())\n-                                           .sum(Counts::zero());\n+                                           .fold(Counts::zero(), |acc, x| acc + x);\n             (item_counts + subcounts, None)\n         }\n         // `pub` automatically\n         EnumItem(Enum { variants: ref subitems, .. }) => {\n             let subcounts = subitems.iter().map(summarize_item)\n                                            .map(|s| s.val0())\n-                                           .sum(Counts::zero());\n+                                           .fold(Counts::zero(), |acc, x| acc + x);\n             (item_counts + subcounts, None)\n         }\n         TraitItem(Trait {\n@@ -177,7 +176,7 @@ fn summarize_item(item: &Item) -> (Counts, Option<ModuleSummary>) {\n                                        .map(extract_item)\n                                        .map(summarize_item)\n                                        .map(|s| s.val0())\n-                                       .sum(Counts::zero());\n+                                       .fold(Counts::zero(), |acc, x| acc + x);\n             (item_counts + subcounts, None)\n         }\n         ModuleItem(Module { ref items, .. }) => {"}, {"sha": "9918e93909746a45115e2878dd6d55a4d1134a78", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9e6bda9c758538e795ab387915543e076c35805/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e6bda9c758538e795ab387915543e076c35805/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=c9e6bda9c758538e795ab387915543e076c35805", "patch": "@@ -356,7 +356,7 @@ impl Path {\n                         Some(vec![SEP_BYTE])\n                     } else {\n                         let n = if is_abs { comps.len() } else { comps.len() - 1} +\n-                                comps.iter().map(|v| v.len()).sum(0);\n+                                comps.iter().map(|v| v.len()).sum();\n                         let mut v = Vec::with_capacity(n);\n                         let mut it = comps.into_iter();\n                         if !is_abs {"}, {"sha": "3a5350f0a291c9d073a6fb20a189174c8cd9263b", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9e6bda9c758538e795ab387915543e076c35805/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e6bda9c758538e795ab387915543e076c35805/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=c9e6bda9c758538e795ab387915543e076c35805", "patch": "@@ -781,7 +781,7 @@ impl Path {\n                         let prefix_ = s.slice_to(prefix_len(prefix));\n                         let n = prefix_.len() +\n                                 if is_abs { comps.len() } else { comps.len() - 1} +\n-                                comps.iter().map(|v| v.len()).sum(0);\n+                                comps.iter().map(|v| v.len()).sum();\n                         let mut s = String::with_capacity(n);\n                         match prefix {\n                             Some(DiskPrefix) => {"}, {"sha": "50f257c9c859e81eb2f779a43176df4ef961be52", "filename": "src/libunicode/u_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9e6bda9c758538e795ab387915543e076c35805/src%2Flibunicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e6bda9c758538e795ab387915543e076c35805/src%2Flibunicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fu_str.rs?ref=c9e6bda9c758538e795ab387915543e076c35805", "patch": "@@ -153,7 +153,7 @@ impl UnicodeStrPrelude for str {\n \n     #[inline]\n     fn width(&self, is_cjk: bool) -> uint {\n-        self.chars().map(|c| c.width(is_cjk).unwrap_or(0)).sum(0)\n+        self.chars().map(|c| c.width(is_cjk).unwrap_or(0)).sum()\n     }\n \n     #[inline]"}, {"sha": "c5f2fbb18901726b16f4596030c9d0b06dd1ffc6", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9e6bda9c758538e795ab387915543e076c35805/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e6bda9c758538e795ab387915543e076c35805/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=c9e6bda9c758538e795ab387915543e076c35805", "patch": "@@ -105,7 +105,7 @@ fn A(i: uint, j: uint) -> f64 {\n }\n \n fn dot(v: &[f64], u: &[f64]) -> f64 {\n-    v.iter().zip(u.iter()).map(|(a, b)| *a * *b).sum(0.0)\n+    v.iter().zip(u.iter()).map(|(a, b)| *a * *b).sum()\n }\n \n // Executes a closure in parallel over the given mutable slice. The closure `f`"}, {"sha": "051d98aa1d89b93381c5dae415e3b92d3e3c1ff7", "filename": "src/test/run-pass/issue-15673.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9e6bda9c758538e795ab387915543e076c35805/src%2Ftest%2Frun-pass%2Fissue-15673.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e6bda9c758538e795ab387915543e076c35805/src%2Ftest%2Frun-pass%2Fissue-15673.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15673.rs?ref=c9e6bda9c758538e795ab387915543e076c35805", "patch": "@@ -11,5 +11,5 @@\n use std::iter::AdditiveIterator;\n fn main() {\n     let x: [u64, ..3] = [1, 2, 3];\n-    assert_eq!(6, range(0, 3).map(|i| x[i]).sum(0));\n+    assert_eq!(6, range(0, 3).map(|i| x[i]).sum());\n }"}]}