{"sha": "c74b3060372cb1057f5623a2d09d8b1599c133f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3NGIzMDYwMzcyY2IxMDU3ZjU2MjNhMmQwOWQ4YjE1OTljMTMzZjg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-01-11T16:57:18Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-01-11T16:57:18Z"}, "message": "Move all cold code to the end of the function\n\nFixes #836\n\nBenchmark #1: simple-raytracer/raytracer_cg_clif\n  Time (mean \u00b1 \u03c3):      9.250 s \u00b1  0.056 s    [User: 9.213 s, System: 0.015 s]\n  Range (min \u2026 max):    9.151 s \u2026  9.348 s    20 runs\n\nBenchmark #2: simple-raytracer/raytracer_cg_clif_cold_separated\n  Time (mean \u00b1 \u03c3):      9.179 s \u00b1  0.101 s    [User: 9.141 s, System: 0.016 s]\n  Range (min \u2026 max):    9.070 s \u2026  9.473 s    20 runs\n\nSummary\n  'simple-raytracer/raytracer_cg_clif_cold_separated' ran\n    1.01 \u00b1 0.01 times faster than 'simple-raytracer/raytracer_cg_clif'", "tree": {"sha": "a4cf86d26a9096e3c25eb5c9b12db69ed5c90e85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4cf86d26a9096e3c25eb5c9b12db69ed5c90e85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c74b3060372cb1057f5623a2d09d8b1599c133f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c74b3060372cb1057f5623a2d09d8b1599c133f8", "html_url": "https://github.com/rust-lang/rust/commit/c74b3060372cb1057f5623a2d09d8b1599c133f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c74b3060372cb1057f5623a2d09d8b1599c133f8/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38797f8badc27da40bc25cc506f24c88f06b28e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/38797f8badc27da40bc25cc506f24c88f06b28e4", "html_url": "https://github.com/rust-lang/rust/commit/38797f8badc27da40bc25cc506f24c88f06b28e4"}], "stats": {"total": 60, "additions": 56, "deletions": 4}, "files": [{"sha": "c983daabdc10181e67128050d84cc117848f41a6", "filename": "src/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c74b3060372cb1057f5623a2d09d8b1599c133f8/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c74b3060372cb1057f5623a2d09d8b1599c133f8/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=c74b3060372cb1057f5623a2d09d8b1599c133f8", "patch": "@@ -506,6 +506,7 @@ fn codegen_call_inner<'tcx>(\n     args: Vec<CValue<'tcx>>,\n     ret_place: Option<CPlace<'tcx>>,\n ) {\n+    // FIXME mark the current ebb as cold when calling a `#[cold]` function.\n     let fn_sig = fx\n         .tcx\n         .normalize_erasing_late_bound_regions(ParamEnv::reveal_all(), &fn_ty.fn_sig(fx.tcx));"}, {"sha": "db10443df1e338687807e76a7606feb14bf4f52d", "filename": "src/base.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c74b3060372cb1057f5623a2d09d8b1599c133f8/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c74b3060372cb1057f5623a2d09d8b1599c133f8/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=c74b3060372cb1057f5623a2d09d8b1599c133f8", "patch": "@@ -32,6 +32,12 @@ pub fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n     // Predefine ebb's\n     let start_ebb = bcx.create_ebb();\n     let ebb_map: IndexVec<BasicBlock, Ebb> = (0..mir.basic_blocks().len()).map(|_| bcx.create_ebb()).collect();\n+    let mut cold_ebbs = EntitySet::new();\n+    for (bb, &ebb) in ebb_map.iter_enumerated() {\n+        if mir.basic_blocks()[bb].is_cleanup {\n+            cold_ebbs.insert(ebb);\n+        }\n+    }\n \n     // Make FunctionCx\n     let pointer_type = cx.module.target_config().pointer_type();\n@@ -49,6 +55,7 @@ pub fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n         ebb_map,\n         local_map: HashMap::new(),\n         caller_location: None, // set by `codegen_fn_prelude`\n+        cold_ebbs,\n \n         clif_comments,\n         constants_cx: &mut cx.constants_cx,\n@@ -73,6 +80,7 @@ pub fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n     let mut clif_comments = fx.clif_comments;\n     let source_info_set = fx.source_info_set;\n     let local_map = fx.local_map;\n+    let cold_ebbs = fx.cold_ebbs;\n \n     #[cfg(debug_assertions)]\n     crate::pretty_clif::write_clif_file(cx.tcx, \"unopt\", instance, &context.func, &clif_comments, None);\n@@ -82,7 +90,7 @@ pub fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n \n     // Perform rust specific optimizations\n     tcx.sess.time(\"optimize clif ir\", || {\n-        crate::optimize::optimize_function(tcx, instance, context, &mut clif_comments);\n+        crate::optimize::optimize_function(tcx, instance, context, &cold_ebbs, &mut clif_comments);\n     });\n \n     // Define function\n@@ -191,17 +199,18 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n                     }\n                 }\n                 let cond = trans_operand(fx, cond).load_scalar(fx);\n+\n                 let target = fx.get_ebb(*target);\n                 let failure = fx.bcx.create_ebb();\n+                fx.cold_ebbs.insert(failure);\n+\n                 if *expected {\n                     fx.bcx.ins().brz(cond, failure, &[]);\n                 } else {\n                     fx.bcx.ins().brnz(cond, failure, &[]);\n                 };\n                 fx.bcx.ins().jump(target, &[]);\n \n-                // FIXME insert bb after all other bb's to reduce the amount of jumps in the common\n-                // case and improve code locality.\n                 fx.bcx.switch_to_block(failure);\n                 trap_panic(\n                     fx,"}, {"sha": "201467c62a009c0900d601c5c62e0384198fd705", "filename": "src/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c74b3060372cb1057f5623a2d09d8b1599c133f8/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c74b3060372cb1057f5623a2d09d8b1599c133f8/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=c74b3060372cb1057f5623a2d09d8b1599c133f8", "patch": "@@ -270,6 +270,9 @@ pub struct FunctionCx<'clif, 'tcx, B: Backend + 'static> {\n     /// When `#[track_caller]` is used, the implicit caller location is stored in this variable.\n     pub caller_location: Option<CValue<'tcx>>,\n \n+    /// See [crate::optimize::code_layout] for more information.\n+    pub cold_ebbs: EntitySet<Ebb>,\n+\n     pub clif_comments: crate::pretty_clif::CommentWriter,\n     pub constants_cx: &'clif mut crate::constant::ConstantCx,\n     pub vtables: &'clif mut HashMap<(Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>), DataId>,"}, {"sha": "e4eb4147ce3e7b16491ebd417f95b399507d0805", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c74b3060372cb1057f5623a2d09d8b1599c133f8/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c74b3060372cb1057f5623a2d09d8b1599c133f8/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=c74b3060372cb1057f5623a2d09d8b1599c133f8", "patch": "@@ -95,6 +95,7 @@ mod prelude {\n     pub use rustc_codegen_ssa::{CodegenResults, CompiledModule, ModuleKind};\n \n     pub use cranelift_codegen::Context;\n+    pub use cranelift_codegen::entity::EntitySet;\n     pub use cranelift_codegen::ir::{AbiParam, Ebb, ExternalName, FuncRef, Inst, InstBuilder, MemFlags, Signature, SourceLoc, StackSlot, StackSlotData, StackSlotKind, TrapCode, Type, Value};\n     pub use cranelift_codegen::ir::condcodes::{FloatCC, IntCC};\n     pub use cranelift_codegen::ir::function::Function;"}, {"sha": "947b61d42e0b9bfb27428a2521bd34e28004d993", "filename": "src/optimize/code_layout.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c74b3060372cb1057f5623a2d09d8b1599c133f8/src%2Foptimize%2Fcode_layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c74b3060372cb1057f5623a2d09d8b1599c133f8/src%2Foptimize%2Fcode_layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foptimize%2Fcode_layout.rs?ref=c74b3060372cb1057f5623a2d09d8b1599c133f8", "patch": "@@ -0,0 +1,34 @@\n+//! This optimization moves cold code to the end of the function.\n+//!\n+//! Some code is executed much less often than other code. For example panicking or the\n+//! landingpads for unwinding. By moving this cold code to the end of the function the average\n+//! amount of jumps is reduced and the code locality is improved.\n+//!\n+//! # Undefined behaviour\n+//!\n+//! This optimization doesn't assume anything that isn't already assumed by Cranelift itself.\n+\n+use crate::prelude::*;\n+\n+pub fn optimize_function(ctx: &mut Context, cold_ebbs: &EntitySet<Ebb>) {\n+    // FIXME Move the ebb in place instead of remove and append once\n+    // bytecodealliance/cranelift#1339 is implemented.\n+\n+    let mut ebb_insts = HashMap::new();\n+    for ebb in cold_ebbs.keys().filter(|&ebb| cold_ebbs.contains(ebb)) {\n+        let insts = ctx.func.layout.ebb_insts(ebb).collect::<Vec<_>>();\n+        for &inst in &insts {\n+            ctx.func.layout.remove_inst(inst);\n+        }\n+        ebb_insts.insert(ebb, insts);\n+        ctx.func.layout.remove_ebb(ebb);\n+    }\n+\n+    // And then append them at the back again.\n+    for ebb in cold_ebbs.keys().filter(|&ebb| cold_ebbs.contains(ebb)) {\n+        ctx.func.layout.append_ebb(ebb);\n+        for inst in ebb_insts.remove(&ebb).unwrap() {\n+            ctx.func.layout.append_inst(inst, ebb);\n+        }\n+    }\n+}"}, {"sha": "ba9839e84be12306effbe2f8acba7a45311d6a6d", "filename": "src/optimize/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c74b3060372cb1057f5623a2d09d8b1599c133f8/src%2Foptimize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c74b3060372cb1057f5623a2d09d8b1599c133f8/src%2Foptimize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foptimize%2Fmod.rs?ref=c74b3060372cb1057f5623a2d09d8b1599c133f8", "patch": "@@ -1,13 +1,18 @@\n use crate::prelude::*;\n \n+mod code_layout;\n mod stack2reg;\n \n pub fn optimize_function<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     instance: Instance<'tcx>,\n     ctx: &mut Context,\n+    cold_ebbs: &EntitySet<Ebb>,\n     clif_comments: &mut crate::pretty_clif::CommentWriter,\n ) {\n+    // The code_layout optimization is very cheap.\n+    self::code_layout::optimize_function(ctx, cold_ebbs);\n+\n     if tcx.sess.opts.optimize == rustc_session::config::OptLevel::No {\n         return; // FIXME classify optimizations over opt levels\n     }"}, {"sha": "b1afa9ab8bb1531e91d06f312c62561d4a31eb07", "filename": "src/optimize/stack2reg.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c74b3060372cb1057f5623a2d09d8b1599c133f8/src%2Foptimize%2Fstack2reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c74b3060372cb1057f5623a2d09d8b1599c133f8/src%2Foptimize%2Fstack2reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foptimize%2Fstack2reg.rs?ref=c74b3060372cb1057f5623a2d09d8b1599c133f8", "patch": "@@ -13,7 +13,6 @@ use std::collections::{BTreeMap, HashSet};\n use std::ops::Not;\n \n use cranelift_codegen::cursor::{Cursor, FuncCursor};\n-use cranelift_codegen::entity::EntitySet;\n use cranelift_codegen::ir::{InstructionData, Opcode, ValueDef};\n use cranelift_codegen::ir::immediates::Offset32;\n "}]}