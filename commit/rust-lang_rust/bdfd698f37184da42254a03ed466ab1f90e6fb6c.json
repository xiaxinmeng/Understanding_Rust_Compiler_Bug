{"sha": "bdfd698f37184da42254a03ed466ab1f90e6fb6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkZmQ2OThmMzcxODRkYTQyMjU0YTAzZWQ0NjZhYjFmOTBlNmZiNmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-16T18:35:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-16T18:35:17Z"}, "message": "Auto merge of #63640 - Centril:rollup-yeb8o66, r=Centril\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #60492 (Add custom nth_back for Chain)\n - #61780 (Finalize the error type for `try_reserve`)\n - #63495 ( Remove redundant `ty` fields from `mir::Constant` and `hair::pattern::PatternRange`.)\n - #63525 (Make sure that all file loading happens via SourceMap)\n - #63595 (add sparc64-unknown-openbsd target)\n - #63604 (Some update for vxWorks)\n - #63613 (Hygienize use of built-in macros in the standard library)\n - #63632 (A couple of comment fixes.)\n - #63634 (ci: properly set the job name in CPU stats)\n - #63636 (ci: move linkcheck from mingw-2 to mingw-1)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "43da66e41e36d1b5f1b460ef1e7a1875e506e846", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43da66e41e36d1b5f1b460ef1e7a1875e506e846"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdfd698f37184da42254a03ed466ab1f90e6fb6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdfd698f37184da42254a03ed466ab1f90e6fb6c", "html_url": "https://github.com/rust-lang/rust/commit/bdfd698f37184da42254a03ed466ab1f90e6fb6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdfd698f37184da42254a03ed466ab1f90e6fb6c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a32ad0dd51f8451aa6e39d7e9ea89483cb8fcfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a32ad0dd51f8451aa6e39d7e9ea89483cb8fcfa", "html_url": "https://github.com/rust-lang/rust/commit/9a32ad0dd51f8451aa6e39d7e9ea89483cb8fcfa"}, {"sha": "6b0a83862ce7f0fa0bd5d729b3b89b6ad25f8221", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b0a83862ce7f0fa0bd5d729b3b89b6ad25f8221", "html_url": "https://github.com/rust-lang/rust/commit/6b0a83862ce7f0fa0bd5d729b3b89b6ad25f8221"}], "stats": {"total": 926, "additions": 377, "deletions": 549}, "files": [{"sha": "070858cd185ece4b42c23ae2c122e9f5db006049", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -1138,19 +1138,12 @@ dependencies = [\n \n [[package]]\n name = \"hashbrown\"\n-version = \"0.4.0\"\n+version = \"0.5.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"compiler_builtins 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-std-workspace-alloc 1.0.0\",\n  \"rustc-std-workspace-core 1.0.0\",\n-]\n-\n-[[package]]\n-name = \"hashbrown\"\n-version = \"0.5.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n  \"serde 1.0.92 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -3534,7 +3527,7 @@ dependencies = [\n  \"core 0.0.0\",\n  \"dlmalloc 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fortanix-sgx-abi 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"hashbrown 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"hashbrown 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"panic_abort 0.0.0\",\n  \"panic_unwind 0.0.0\",\n@@ -4450,7 +4443,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum globset 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ef4feaabe24a0a658fd9cf4a9acf6ed284f045c77df0f49020ba3245cfb7b454\"\n \"checksum h2 0.1.25 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a539b63339fbbb00e081e84b6e11bd1d9634a82d91da2984a18ac74a8823f392\"\n \"checksum handlebars 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"df044dd42cdb7e32f28557b661406fc0f2494be75199779998810dbc35030e0d\"\n-\"checksum hashbrown 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9529213c67695ca2d146e6f263b7b72df8fa973368beadf767e8ed80c03f2f36\"\n \"checksum hashbrown 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e1de41fb8dba9714efd92241565cdff73f78508c95697dd56787d3cba27e2353\"\n \"checksum heck 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ea04fa3ead4e05e51a7c806fc07271fdbde4e246a6c6d1efd52e72230b771b82\"\n \"checksum hex 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"805026a5d0141ffc30abb3be3173848ad46a1b1664fe632428479619a3644d77\""}, {"sha": "a4cb81d3d1b1b02716417c3c26752f7284b3a2f5", "filename": "src/bootstrap/cc_detect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Fbootstrap%2Fcc_detect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Fbootstrap%2Fcc_detect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcc_detect.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -46,7 +46,7 @@ fn cc2ar(cc: &Path, target: &str) -> Option<PathBuf> {\n     } else if target.contains(\"openbsd\") {\n         Some(PathBuf::from(\"ar\"))\n     } else if target.contains(\"vxworks\") {\n-        Some(PathBuf::from(\"vx-ar\"))\n+        Some(PathBuf::from(\"wr-ar\"))\n     } else {\n         let parent = cc.parent().unwrap();\n         let file = cc.file_name().unwrap().to_str().unwrap();"}, {"sha": "e0a1f46078d32295977e3b6f7832de077d2d21c9", "filename": "src/bootstrap/mk/Makefile.in", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Fbootstrap%2Fmk%2FMakefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Fbootstrap%2Fmk%2FMakefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmk%2FMakefile.in?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -81,5 +81,14 @@ ci-subset-1:\n ci-subset-2:\n \t$(Q)$(BOOTSTRAP) test $(TESTS_IN_2)\n \n+TESTS_IN_MINGW_2 := \\\n+\tsrc/test/ui \\\n+\tsrc/test/compile-fail\n+\n+ci-mingw-subset-1:\n+\t$(Q)$(BOOTSTRAP) test $(TESTS_IN_MINGW_2:%=--exclude %)\n+ci-mingw-subset-2:\n+\t$(Q)$(BOOTSTRAP) test $(TESTS_IN_MINGW_2)\n+\n \n .PHONY: dist"}, {"sha": "77c9cda58b8e6d8312ed9a9c7c8fdb4f9d92d344", "filename": "src/ci/azure-pipelines/auto.yml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Fci%2Fazure-pipelines%2Fauto.yml", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Fci%2Fazure-pipelines%2Fauto.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fauto.yml?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -272,7 +272,7 @@ jobs:\n       i686-mingw-1:\n         MSYS_BITS: 32\n         RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu\n-        SCRIPT: make ci-subset-1\n+        SCRIPT: make ci-mingw-subset-1\n         MINGW_URL: https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc\n         MINGW_ARCHIVE: i686-6.3.0-release-posix-dwarf-rt_v5-rev2.7z\n         MINGW_DIR: mingw32\n@@ -282,13 +282,13 @@ jobs:\n       i686-mingw-2:\n         MSYS_BITS: 32\n         RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu\n-        SCRIPT: make ci-subset-2\n+        SCRIPT: make ci-mingw-subset-2\n         MINGW_URL: https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc\n         MINGW_ARCHIVE: i686-6.3.0-release-posix-dwarf-rt_v5-rev2.7z\n         MINGW_DIR: mingw32\n       x86_64-mingw-1:\n         MSYS_BITS: 64\n-        SCRIPT: make ci-subset-1\n+        SCRIPT: make ci-mingw-subset-1\n         RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu\n         MINGW_URL: https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc\n         MINGW_ARCHIVE: x86_64-6.3.0-release-posix-seh-rt_v5-rev2.7z\n@@ -298,7 +298,7 @@ jobs:\n         NO_LLVM_ASSERTIONS: 1\n       x86_64-mingw-2:\n         MSYS_BITS: 64\n-        SCRIPT: make ci-subset-2\n+        SCRIPT: make ci-mingw-subset-2\n         RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu\n         MINGW_URL: https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc\n         MINGW_ARCHIVE: x86_64-6.3.0-release-posix-seh-rt_v5-rev2.7z"}, {"sha": "ac6b344a45e66a8b32433980992bb7b6de6943fa", "filename": "src/ci/azure-pipelines/steps/run.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Fci%2Fazure-pipelines%2Fsteps%2Frun.yml", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Fci%2Fazure-pipelines%2Fsteps%2Frun.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fsteps%2Frun.yml?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -199,7 +199,7 @@ steps:\n # Upload CPU usage statistics that we've been gathering this whole time. Always\n # execute this step in case we want to inspect failed builds, but don't let\n # errors here ever fail the build since this is just informational.\n-- bash: aws s3 cp --acl public-read cpu-usage.csv s3://$DEPLOY_BUCKET/rustc-builds/$BUILD_SOURCEVERSION/cpu-$SYSTEM_JOBNAME.csv\n+- bash: aws s3 cp --acl public-read cpu-usage.csv s3://$DEPLOY_BUCKET/rustc-builds/$BUILD_SOURCEVERSION/cpu-$CI_JOB_NAME.csv\n   env:\n     AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)\n   condition: variables['AWS_SECRET_ACCESS_KEY']"}, {"sha": "f1f22fe48c58ab0c4343a82dbd7ecfd26708c9c3", "filename": "src/liballoc/collections/mod.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Fliballoc%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Fliballoc%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fmod.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -41,32 +41,35 @@ pub use linked_list::LinkedList;\n #[doc(no_inline)]\n pub use vec_deque::VecDeque;\n \n-use crate::alloc::{AllocErr, LayoutErr};\n+use crate::alloc::{Layout, LayoutErr};\n \n-/// Augments `AllocErr` with a CapacityOverflow variant.\n+/// The error type for `try_reserve` methods.\n #[derive(Clone, PartialEq, Eq, Debug)]\n #[unstable(feature = \"try_reserve\", reason = \"new API\", issue=\"48043\")]\n-pub enum CollectionAllocErr {\n+pub enum TryReserveError {\n     /// Error due to the computed capacity exceeding the collection's maximum\n     /// (usually `isize::MAX` bytes).\n     CapacityOverflow,\n-    /// Error due to the allocator (see the `AllocErr` type's docs).\n-    AllocErr,\n-}\n \n-#[unstable(feature = \"try_reserve\", reason = \"new API\", issue=\"48043\")]\n-impl From<AllocErr> for CollectionAllocErr {\n-    #[inline]\n-    fn from(AllocErr: AllocErr) -> Self {\n-        CollectionAllocErr::AllocErr\n-    }\n+    /// The memory allocator returned an error\n+    AllocError {\n+        /// The layout of allocation request that failed\n+        layout: Layout,\n+\n+        #[doc(hidden)]\n+        #[unstable(feature = \"container_error_extra\", issue = \"0\", reason = \"\\\n+            Enable exposing the allocator\u2019s custom error value \\\n+            if an associated type is added in the future: \\\n+            https://github.com/rust-lang/wg-allocators/issues/23\")]\n+        non_exhaustive: (),\n+    },\n }\n \n #[unstable(feature = \"try_reserve\", reason = \"new API\", issue=\"48043\")]\n-impl From<LayoutErr> for CollectionAllocErr {\n+impl From<LayoutErr> for TryReserveError {\n     #[inline]\n     fn from(_: LayoutErr) -> Self {\n-        CollectionAllocErr::CapacityOverflow\n+        TryReserveError::CapacityOverflow\n     }\n }\n "}, {"sha": "2fc87413367adddc5b3cd212c4db4046c2825005", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -18,7 +18,7 @@ use core::ptr::{self, NonNull};\n use core::slice;\n use core::hash::{Hash, Hasher};\n \n-use crate::collections::CollectionAllocErr;\n+use crate::collections::TryReserveError;\n use crate::raw_vec::RawVec;\n use crate::vec::Vec;\n \n@@ -576,10 +576,10 @@ impl<T> VecDeque<T> {\n     ///\n     /// ```\n     /// #![feature(try_reserve)]\n-    /// use std::collections::CollectionAllocErr;\n+    /// use std::collections::TryReserveError;\n     /// use std::collections::VecDeque;\n     ///\n-    /// fn process_data(data: &[u32]) -> Result<VecDeque<u32>, CollectionAllocErr> {\n+    /// fn process_data(data: &[u32]) -> Result<VecDeque<u32>, TryReserveError> {\n     ///     let mut output = VecDeque::new();\n     ///\n     ///     // Pre-reserve the memory, exiting if we can't\n@@ -595,7 +595,7 @@ impl<T> VecDeque<T> {\n     /// # process_data(&[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");\n     /// ```\n     #[unstable(feature = \"try_reserve\", reason = \"new API\", issue=\"48043\")]\n-    pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), CollectionAllocErr>  {\n+    pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), TryReserveError>  {\n         self.try_reserve(additional)\n     }\n \n@@ -614,10 +614,10 @@ impl<T> VecDeque<T> {\n     ///\n     /// ```\n     /// #![feature(try_reserve)]\n-    /// use std::collections::CollectionAllocErr;\n+    /// use std::collections::TryReserveError;\n     /// use std::collections::VecDeque;\n     ///\n-    /// fn process_data(data: &[u32]) -> Result<VecDeque<u32>, CollectionAllocErr> {\n+    /// fn process_data(data: &[u32]) -> Result<VecDeque<u32>, TryReserveError> {\n     ///     let mut output = VecDeque::new();\n     ///\n     ///     // Pre-reserve the memory, exiting if we can't\n@@ -633,12 +633,12 @@ impl<T> VecDeque<T> {\n     /// # process_data(&[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");\n     /// ```\n     #[unstable(feature = \"try_reserve\", reason = \"new API\", issue=\"48043\")]\n-    pub fn try_reserve(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {\n+    pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {\n         let old_cap = self.cap();\n         let used_cap = self.len() + 1;\n         let new_cap = used_cap.checked_add(additional)\n             .and_then(|needed_cap| needed_cap.checked_next_power_of_two())\n-            .ok_or(CollectionAllocErr::CapacityOverflow)?;\n+            .ok_or(TryReserveError::CapacityOverflow)?;\n \n         if new_cap > old_cap {\n             self.buf.try_reserve_exact(used_cap, new_cap - used_cap)?;"}, {"sha": "4a48945adc37a4bf313a00fe38cd06fce4296d0f", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -87,6 +87,7 @@\n #![feature(const_in_array_repeat_expressions)]\n #![feature(dispatch_from_dyn)]\n #![feature(core_intrinsics)]\n+#![feature(container_error_extra)]\n #![feature(dropck_eyepatch)]\n #![feature(exact_size_is_empty)]\n #![feature(fmt_internals)]"}, {"sha": "0b5e186d4c77b17c5ae683437df783fea53bd320", "filename": "src/liballoc/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Fliballoc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Fliballoc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fmacros.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -98,5 +98,5 @@ macro_rules! vec {\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n macro_rules! format {\n-    ($($arg:tt)*) => ($crate::fmt::format(format_args!($($arg)*)))\n+    ($($arg:tt)*) => ($crate::fmt::format(::core::format_args!($($arg)*)))\n }"}, {"sha": "bc8a38f6b3aad530a9a0eb95d826f1696cd9d8e5", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -7,8 +7,8 @@ use core::ops::Drop;\n use core::ptr::{self, NonNull, Unique};\n use core::slice;\n \n-use crate::alloc::{Alloc, Layout, Global, handle_alloc_error};\n-use crate::collections::CollectionAllocErr::{self, *};\n+use crate::alloc::{Alloc, Layout, Global, AllocErr, handle_alloc_error};\n+use crate::collections::TryReserveError::{self, *};\n use crate::boxed::Box;\n \n #[cfg(test)]\n@@ -385,7 +385,7 @@ impl<T, A: Alloc> RawVec<T, A> {\n \n     /// The same as `reserve_exact`, but returns on errors instead of panicking or aborting.\n     pub fn try_reserve_exact(&mut self, used_capacity: usize, needed_extra_capacity: usize)\n-           -> Result<(), CollectionAllocErr> {\n+           -> Result<(), TryReserveError> {\n \n         self.reserve_internal(used_capacity, needed_extra_capacity, Fallible, Exact)\n     }\n@@ -413,7 +413,7 @@ impl<T, A: Alloc> RawVec<T, A> {\n     pub fn reserve_exact(&mut self, used_capacity: usize, needed_extra_capacity: usize) {\n         match self.reserve_internal(used_capacity, needed_extra_capacity, Infallible, Exact) {\n             Err(CapacityOverflow) => capacity_overflow(),\n-            Err(AllocErr) => unreachable!(),\n+            Err(AllocError { .. }) => unreachable!(),\n             Ok(()) => { /* yay */ }\n          }\n      }\n@@ -422,7 +422,7 @@ impl<T, A: Alloc> RawVec<T, A> {\n     /// needed_extra_capacity` elements. This logic is used in amortized reserve methods.\n     /// Returns `(new_capacity, new_alloc_size)`.\n     fn amortized_new_size(&self, used_capacity: usize, needed_extra_capacity: usize)\n-        -> Result<usize, CollectionAllocErr> {\n+        -> Result<usize, TryReserveError> {\n \n         // Nothing we can really do about these checks :(\n         let required_cap = used_capacity.checked_add(needed_extra_capacity)\n@@ -435,7 +435,7 @@ impl<T, A: Alloc> RawVec<T, A> {\n \n     /// The same as `reserve`, but returns on errors instead of panicking or aborting.\n     pub fn try_reserve(&mut self, used_capacity: usize, needed_extra_capacity: usize)\n-        -> Result<(), CollectionAllocErr> {\n+        -> Result<(), TryReserveError> {\n         self.reserve_internal(used_capacity, needed_extra_capacity, Fallible, Amortized)\n     }\n \n@@ -494,7 +494,7 @@ impl<T, A: Alloc> RawVec<T, A> {\n     pub fn reserve(&mut self, used_capacity: usize, needed_extra_capacity: usize) {\n         match self.reserve_internal(used_capacity, needed_extra_capacity, Infallible, Amortized) {\n             Err(CapacityOverflow) => capacity_overflow(),\n-            Err(AllocErr) => unreachable!(),\n+            Err(AllocError { .. }) => unreachable!(),\n             Ok(()) => { /* yay */ }\n         }\n     }\n@@ -640,10 +640,8 @@ impl<T, A: Alloc> RawVec<T, A> {\n         needed_extra_capacity: usize,\n         fallibility: Fallibility,\n         strategy: ReserveStrategy,\n-    ) -> Result<(), CollectionAllocErr> {\n+    ) -> Result<(), TryReserveError> {\n         unsafe {\n-            use crate::alloc::AllocErr;\n-\n             // NOTE: we don't early branch on ZSTs here because we want this\n             // to actually catch \"asking for more than usize::MAX\" in that case.\n             // If we make it past the first branch then we are guaranteed to\n@@ -672,12 +670,16 @@ impl<T, A: Alloc> RawVec<T, A> {\n                 None => self.a.alloc(new_layout),\n             };\n \n-            match (&res, fallibility) {\n+            let ptr = match (res, fallibility) {\n                 (Err(AllocErr), Infallible) => handle_alloc_error(new_layout),\n-                _ => {}\n-            }\n+                (Err(AllocErr), Fallible) => return Err(TryReserveError::AllocError {\n+                    layout: new_layout,\n+                    non_exhaustive: (),\n+                }),\n+                (Ok(ptr), _) => ptr,\n+            };\n \n-            self.ptr = res?.cast().into();\n+            self.ptr = ptr.cast().into();\n             self.cap = new_cap;\n \n             Ok(())\n@@ -737,7 +739,7 @@ unsafe impl<#[may_dangle] T, A: Alloc> Drop for RawVec<T, A> {\n // all 4GB in user-space. e.g., PAE or x32\n \n #[inline]\n-fn alloc_guard(alloc_size: usize) -> Result<(), CollectionAllocErr> {\n+fn alloc_guard(alloc_size: usize) -> Result<(), TryReserveError> {\n     if mem::size_of::<usize>() < 8 && alloc_size > core::isize::MAX as usize {\n         Err(CapacityOverflow)\n     } else {"}, {"sha": "b65f191836e9dcc9548bac74f9894520f5df463a", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -56,7 +56,7 @@ use core::ptr;\n use core::str::{pattern::Pattern, lossy};\n \n use crate::borrow::{Cow, ToOwned};\n-use crate::collections::CollectionAllocErr;\n+use crate::collections::TryReserveError;\n use crate::boxed::Box;\n use crate::str::{self, from_boxed_utf8_unchecked, FromStr, Utf8Error, Chars};\n use crate::vec::Vec;\n@@ -937,9 +937,9 @@ impl String {\n     ///\n     /// ```\n     /// #![feature(try_reserve)]\n-    /// use std::collections::CollectionAllocErr;\n+    /// use std::collections::TryReserveError;\n     ///\n-    /// fn process_data(data: &str) -> Result<String, CollectionAllocErr> {\n+    /// fn process_data(data: &str) -> Result<String, TryReserveError> {\n     ///     let mut output = String::new();\n     ///\n     ///     // Pre-reserve the memory, exiting if we can't\n@@ -953,7 +953,7 @@ impl String {\n     /// # process_data(\"rust\").expect(\"why is the test harness OOMing on 4 bytes?\");\n     /// ```\n     #[unstable(feature = \"try_reserve\", reason = \"new API\", issue=\"48043\")]\n-    pub fn try_reserve(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {\n+    pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {\n         self.vec.try_reserve(additional)\n     }\n \n@@ -975,9 +975,9 @@ impl String {\n     ///\n     /// ```\n     /// #![feature(try_reserve)]\n-    /// use std::collections::CollectionAllocErr;\n+    /// use std::collections::TryReserveError;\n     ///\n-    /// fn process_data(data: &str) -> Result<String, CollectionAllocErr> {\n+    /// fn process_data(data: &str) -> Result<String, TryReserveError> {\n     ///     let mut output = String::new();\n     ///\n     ///     // Pre-reserve the memory, exiting if we can't\n@@ -991,7 +991,7 @@ impl String {\n     /// # process_data(\"rust\").expect(\"why is the test harness OOMing on 4 bytes?\");\n     /// ```\n     #[unstable(feature = \"try_reserve\", reason = \"new API\", issue=\"48043\")]\n-    pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), CollectionAllocErr>  {\n+    pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), TryReserveError>  {\n         self.vec.try_reserve_exact(additional)\n     }\n "}, {"sha": "55edf56345b59a4cb270129610b0318a9f2163dd", "filename": "src/liballoc/tests/string.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Fliballoc%2Ftests%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Fliballoc%2Ftests%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstring.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -1,5 +1,5 @@\n use std::borrow::Cow;\n-use std::collections::CollectionAllocErr::*;\n+use std::collections::TryReserveError::*;\n use std::mem::size_of;\n use std::{usize, isize};\n \n@@ -566,11 +566,11 @@ fn test_try_reserve() {\n             } else { panic!(\"usize::MAX should trigger an overflow!\") }\n         } else {\n             // Check isize::MAX + 1 is an OOM\n-            if let Err(AllocErr) = empty_string.try_reserve(MAX_CAP + 1) {\n+            if let Err(AllocError { .. }) = empty_string.try_reserve(MAX_CAP + 1) {\n             } else { panic!(\"isize::MAX + 1 should trigger an OOM!\") }\n \n             // Check usize::MAX is an OOM\n-            if let Err(AllocErr) = empty_string.try_reserve(MAX_USIZE) {\n+            if let Err(AllocError { .. }) = empty_string.try_reserve(MAX_USIZE) {\n             } else { panic!(\"usize::MAX should trigger an OOM!\") }\n         }\n     }\n@@ -590,7 +590,7 @@ fn test_try_reserve() {\n             if let Err(CapacityOverflow) = ten_bytes.try_reserve(MAX_CAP - 9) {\n             } else { panic!(\"isize::MAX + 1 should trigger an overflow!\"); }\n         } else {\n-            if let Err(AllocErr) = ten_bytes.try_reserve(MAX_CAP - 9) {\n+            if let Err(AllocError { .. }) = ten_bytes.try_reserve(MAX_CAP - 9) {\n             } else { panic!(\"isize::MAX + 1 should trigger an OOM!\") }\n         }\n         // Should always overflow in the add-to-len\n@@ -629,10 +629,10 @@ fn test_try_reserve_exact() {\n             if let Err(CapacityOverflow) = empty_string.try_reserve_exact(MAX_USIZE) {\n             } else { panic!(\"usize::MAX should trigger an overflow!\") }\n         } else {\n-            if let Err(AllocErr) = empty_string.try_reserve_exact(MAX_CAP + 1) {\n+            if let Err(AllocError { .. }) = empty_string.try_reserve_exact(MAX_CAP + 1) {\n             } else { panic!(\"isize::MAX + 1 should trigger an OOM!\") }\n \n-            if let Err(AllocErr) = empty_string.try_reserve_exact(MAX_USIZE) {\n+            if let Err(AllocError { .. }) = empty_string.try_reserve_exact(MAX_USIZE) {\n             } else { panic!(\"usize::MAX should trigger an OOM!\") }\n         }\n     }\n@@ -651,7 +651,7 @@ fn test_try_reserve_exact() {\n             if let Err(CapacityOverflow) = ten_bytes.try_reserve_exact(MAX_CAP - 9) {\n             } else { panic!(\"isize::MAX + 1 should trigger an overflow!\"); }\n         } else {\n-            if let Err(AllocErr) = ten_bytes.try_reserve_exact(MAX_CAP - 9) {\n+            if let Err(AllocError { .. }) = ten_bytes.try_reserve_exact(MAX_CAP - 9) {\n             } else { panic!(\"isize::MAX + 1 should trigger an OOM!\") }\n         }\n         if let Err(CapacityOverflow) = ten_bytes.try_reserve_exact(MAX_USIZE) {"}, {"sha": "29a22aa0315b048199497108d04b2bb1eac04e46", "filename": "src/liballoc/tests/vec.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Fliballoc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Fliballoc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -2,7 +2,7 @@ use std::borrow::Cow;\n use std::mem::size_of;\n use std::{usize, isize};\n use std::vec::{Drain, IntoIter};\n-use std::collections::CollectionAllocErr::*;\n+use std::collections::TryReserveError::*;\n \n struct DropCounter<'a> {\n     count: &'a mut u32,\n@@ -1121,11 +1121,11 @@ fn test_try_reserve() {\n             } else { panic!(\"usize::MAX should trigger an overflow!\") }\n         } else {\n             // Check isize::MAX + 1 is an OOM\n-            if let Err(AllocErr) = empty_bytes.try_reserve(MAX_CAP + 1) {\n+            if let Err(AllocError { .. }) = empty_bytes.try_reserve(MAX_CAP + 1) {\n             } else { panic!(\"isize::MAX + 1 should trigger an OOM!\") }\n \n             // Check usize::MAX is an OOM\n-            if let Err(AllocErr) = empty_bytes.try_reserve(MAX_USIZE) {\n+            if let Err(AllocError { .. }) = empty_bytes.try_reserve(MAX_USIZE) {\n             } else { panic!(\"usize::MAX should trigger an OOM!\") }\n         }\n     }\n@@ -1145,7 +1145,7 @@ fn test_try_reserve() {\n             if let Err(CapacityOverflow) = ten_bytes.try_reserve(MAX_CAP - 9) {\n             } else { panic!(\"isize::MAX + 1 should trigger an overflow!\"); }\n         } else {\n-            if let Err(AllocErr) = ten_bytes.try_reserve(MAX_CAP - 9) {\n+            if let Err(AllocError { .. }) = ten_bytes.try_reserve(MAX_CAP - 9) {\n             } else { panic!(\"isize::MAX + 1 should trigger an OOM!\") }\n         }\n         // Should always overflow in the add-to-len\n@@ -1168,7 +1168,7 @@ fn test_try_reserve() {\n             if let Err(CapacityOverflow) = ten_u32s.try_reserve(MAX_CAP/4 - 9) {\n             } else { panic!(\"isize::MAX + 1 should trigger an overflow!\"); }\n         } else {\n-            if let Err(AllocErr) = ten_u32s.try_reserve(MAX_CAP/4 - 9) {\n+            if let Err(AllocError { .. }) = ten_u32s.try_reserve(MAX_CAP/4 - 9) {\n             } else { panic!(\"isize::MAX + 1 should trigger an OOM!\") }\n         }\n         // Should fail in the mul-by-size\n@@ -1209,10 +1209,10 @@ fn test_try_reserve_exact() {\n             if let Err(CapacityOverflow) = empty_bytes.try_reserve_exact(MAX_USIZE) {\n             } else { panic!(\"usize::MAX should trigger an overflow!\") }\n         } else {\n-            if let Err(AllocErr) = empty_bytes.try_reserve_exact(MAX_CAP + 1) {\n+            if let Err(AllocError { .. }) = empty_bytes.try_reserve_exact(MAX_CAP + 1) {\n             } else { panic!(\"isize::MAX + 1 should trigger an OOM!\") }\n \n-            if let Err(AllocErr) = empty_bytes.try_reserve_exact(MAX_USIZE) {\n+            if let Err(AllocError { .. }) = empty_bytes.try_reserve_exact(MAX_USIZE) {\n             } else { panic!(\"usize::MAX should trigger an OOM!\") }\n         }\n     }\n@@ -1231,7 +1231,7 @@ fn test_try_reserve_exact() {\n             if let Err(CapacityOverflow) = ten_bytes.try_reserve_exact(MAX_CAP - 9) {\n             } else { panic!(\"isize::MAX + 1 should trigger an overflow!\"); }\n         } else {\n-            if let Err(AllocErr) = ten_bytes.try_reserve_exact(MAX_CAP - 9) {\n+            if let Err(AllocError { .. }) = ten_bytes.try_reserve_exact(MAX_CAP - 9) {\n             } else { panic!(\"isize::MAX + 1 should trigger an OOM!\") }\n         }\n         if let Err(CapacityOverflow) = ten_bytes.try_reserve_exact(MAX_USIZE) {\n@@ -1252,7 +1252,7 @@ fn test_try_reserve_exact() {\n             if let Err(CapacityOverflow) = ten_u32s.try_reserve_exact(MAX_CAP/4 - 9) {\n             } else { panic!(\"isize::MAX + 1 should trigger an overflow!\"); }\n         } else {\n-            if let Err(AllocErr) = ten_u32s.try_reserve_exact(MAX_CAP/4 - 9) {\n+            if let Err(AllocError { .. }) = ten_u32s.try_reserve_exact(MAX_CAP/4 - 9) {\n             } else { panic!(\"isize::MAX + 1 should trigger an OOM!\") }\n         }\n         if let Err(CapacityOverflow) = ten_u32s.try_reserve_exact(MAX_USIZE - 20) {"}, {"sha": "d49b553fc0217a5161e9493220d25003b2221856", "filename": "src/liballoc/tests/vec_deque.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Fliballoc%2Ftests%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Fliballoc%2Ftests%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec_deque.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -1,6 +1,6 @@\n use std::fmt::Debug;\n use std::collections::{VecDeque, vec_deque::Drain};\n-use std::collections::CollectionAllocErr::*;\n+use std::collections::TryReserveError::*;\n use std::mem::size_of;\n use std::{usize, isize};\n \n@@ -1168,7 +1168,7 @@ fn test_try_reserve() {\n             // VecDeque starts with capacity 7, always adds 1 to the capacity\n             // and also rounds the number to next power of 2 so this is the\n             // furthest we can go without triggering CapacityOverflow\n-            if let Err(AllocErr) = empty_bytes.try_reserve(MAX_CAP) {\n+            if let Err(AllocError { .. }) = empty_bytes.try_reserve(MAX_CAP) {\n             } else { panic!(\"isize::MAX + 1 should trigger an OOM!\") }\n         }\n     }\n@@ -1188,7 +1188,7 @@ fn test_try_reserve() {\n             if let Err(CapacityOverflow) = ten_bytes.try_reserve(MAX_CAP - 9) {\n             } else { panic!(\"isize::MAX + 1 should trigger an overflow!\"); }\n         } else {\n-            if let Err(AllocErr) = ten_bytes.try_reserve(MAX_CAP - 9) {\n+            if let Err(AllocError { .. }) = ten_bytes.try_reserve(MAX_CAP - 9) {\n             } else { panic!(\"isize::MAX + 1 should trigger an OOM!\") }\n         }\n         // Should always overflow in the add-to-len\n@@ -1211,7 +1211,7 @@ fn test_try_reserve() {\n             if let Err(CapacityOverflow) = ten_u32s.try_reserve(MAX_CAP/4 - 9) {\n             } else { panic!(\"isize::MAX + 1 should trigger an overflow!\"); }\n         } else {\n-            if let Err(AllocErr) = ten_u32s.try_reserve(MAX_CAP/4 - 9) {\n+            if let Err(AllocError { .. }) = ten_u32s.try_reserve(MAX_CAP/4 - 9) {\n             } else { panic!(\"isize::MAX + 1 should trigger an OOM!\") }\n         }\n         // Should fail in the mul-by-size\n@@ -1256,7 +1256,7 @@ fn test_try_reserve_exact() {\n             // VecDeque starts with capacity 7, always adds 1 to the capacity\n             // and also rounds the number to next power of 2 so this is the\n             // furthest we can go without triggering CapacityOverflow\n-            if let Err(AllocErr) = empty_bytes.try_reserve_exact(MAX_CAP) {\n+            if let Err(AllocError { .. }) = empty_bytes.try_reserve_exact(MAX_CAP) {\n             } else { panic!(\"isize::MAX + 1 should trigger an OOM!\") }\n         }\n     }\n@@ -1275,7 +1275,7 @@ fn test_try_reserve_exact() {\n             if let Err(CapacityOverflow) = ten_bytes.try_reserve_exact(MAX_CAP - 9) {\n             } else { panic!(\"isize::MAX + 1 should trigger an overflow!\"); }\n         } else {\n-            if let Err(AllocErr) = ten_bytes.try_reserve_exact(MAX_CAP - 9) {\n+            if let Err(AllocError { .. }) = ten_bytes.try_reserve_exact(MAX_CAP - 9) {\n             } else { panic!(\"isize::MAX + 1 should trigger an OOM!\") }\n         }\n         if let Err(CapacityOverflow) = ten_bytes.try_reserve_exact(MAX_USIZE) {\n@@ -1296,7 +1296,7 @@ fn test_try_reserve_exact() {\n             if let Err(CapacityOverflow) = ten_u32s.try_reserve_exact(MAX_CAP/4 - 9) {\n             } else { panic!(\"isize::MAX + 1 should trigger an overflow!\"); }\n         } else {\n-            if let Err(AllocErr) = ten_u32s.try_reserve_exact(MAX_CAP/4 - 9) {\n+            if let Err(AllocError { .. }) = ten_u32s.try_reserve_exact(MAX_CAP/4 - 9) {\n             } else { panic!(\"isize::MAX + 1 should trigger an OOM!\") }\n         }\n         if let Err(CapacityOverflow) = ten_u32s.try_reserve_exact(MAX_USIZE - 20) {"}, {"sha": "d2798955c46a97105cec55fa5e5f3b4de2def63b", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -70,7 +70,7 @@ use core::ptr::{self, NonNull};\n use core::slice::{self, SliceIndex};\n \n use crate::borrow::{ToOwned, Cow};\n-use crate::collections::CollectionAllocErr;\n+use crate::collections::TryReserveError;\n use crate::boxed::Box;\n use crate::raw_vec::RawVec;\n \n@@ -498,9 +498,9 @@ impl<T> Vec<T> {\n     ///\n     /// ```\n     /// #![feature(try_reserve)]\n-    /// use std::collections::CollectionAllocErr;\n+    /// use std::collections::TryReserveError;\n     ///\n-    /// fn process_data(data: &[u32]) -> Result<Vec<u32>, CollectionAllocErr> {\n+    /// fn process_data(data: &[u32]) -> Result<Vec<u32>, TryReserveError> {\n     ///     let mut output = Vec::new();\n     ///\n     ///     // Pre-reserve the memory, exiting if we can't\n@@ -516,7 +516,7 @@ impl<T> Vec<T> {\n     /// # process_data(&[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");\n     /// ```\n     #[unstable(feature = \"try_reserve\", reason = \"new API\", issue=\"48043\")]\n-    pub fn try_reserve(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {\n+    pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {\n         self.buf.try_reserve(self.len, additional)\n     }\n \n@@ -538,9 +538,9 @@ impl<T> Vec<T> {\n     ///\n     /// ```\n     /// #![feature(try_reserve)]\n-    /// use std::collections::CollectionAllocErr;\n+    /// use std::collections::TryReserveError;\n     ///\n-    /// fn process_data(data: &[u32]) -> Result<Vec<u32>, CollectionAllocErr> {\n+    /// fn process_data(data: &[u32]) -> Result<Vec<u32>, TryReserveError> {\n     ///     let mut output = Vec::new();\n     ///\n     ///     // Pre-reserve the memory, exiting if we can't\n@@ -556,7 +556,7 @@ impl<T> Vec<T> {\n     /// # process_data(&[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");\n     /// ```\n     #[unstable(feature = \"try_reserve\", reason = \"new API\", issue=\"48043\")]\n-    pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), CollectionAllocErr>  {\n+    pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), TryReserveError>  {\n         self.buf.try_reserve_exact(self.len, additional)\n     }\n "}, {"sha": "0b9f7f6b609e7cee770fca3167c5417fc9816613", "filename": "src/libcore/iter/adapters/chain.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibcore%2Fiter%2Fadapters%2Fchain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibcore%2Fiter%2Fadapters%2Fchain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fchain.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -207,6 +207,29 @@ impl<A, B> DoubleEndedIterator for Chain<A, B> where\n         }\n     }\n \n+    #[inline]\n+    fn nth_back(&mut self, mut n: usize) -> Option<A::Item> {\n+        match self.state {\n+            ChainState::Both | ChainState::Back => {\n+                for x in self.b.by_ref().rev() {\n+                    if n == 0 {\n+                        return Some(x)\n+                    }\n+                    n -= 1;\n+                }\n+                if let ChainState::Both = self.state {\n+                    self.state = ChainState::Front;\n+                }\n+            }\n+            ChainState::Front => {}\n+        }\n+        if let ChainState::Front = self.state {\n+            self.a.nth_back(n)\n+        } else {\n+            None\n+        }\n+    }\n+\n     fn try_rfold<Acc, F, R>(&mut self, init: Acc, mut f: F) -> R where\n         Self: Sized, F: FnMut(Acc, Self::Item) -> R, R: Try<Ok=Acc>\n     {"}, {"sha": "e114f3af0c5155bb5d75dbc024d02b177a3fb86c", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -2,21 +2,21 @@\n ///\n /// For details, see `std::macros`.\n #[macro_export]\n-#[allow_internal_unstable(core_panic, __rust_unstable_column)]\n+#[allow_internal_unstable(core_panic)]\n #[stable(feature = \"core\", since = \"1.6.0\")]\n macro_rules! panic {\n     () => (\n         $crate::panic!(\"explicit panic\")\n     );\n     ($msg:expr) => ({\n-        $crate::panicking::panic(&($msg, file!(), line!(), __rust_unstable_column!()))\n+        $crate::panicking::panic(&($msg, $crate::file!(), $crate::line!(), $crate::column!()))\n     });\n     ($msg:expr,) => (\n         $crate::panic!($msg)\n     );\n     ($fmt:expr, $($arg:tt)+) => ({\n-        $crate::panicking::panic_fmt(format_args!($fmt, $($arg)+),\n-                                     &(file!(), line!(), __rust_unstable_column!()))\n+        $crate::panicking::panic_fmt($crate::format_args!($fmt, $($arg)+),\n+                                     &($crate::file!(), $crate::line!(), $crate::column!()))\n     });\n }\n \n@@ -70,7 +70,7 @@ macro_rules! assert_eq {\n                     panic!(r#\"assertion failed: `(left == right)`\n   left: `{:?}`,\n  right: `{:?}`: {}\"#, &*left_val, &*right_val,\n-                           format_args!($($arg)+))\n+                           $crate::format_args!($($arg)+))\n                 }\n             }\n         }\n@@ -127,7 +127,7 @@ macro_rules! assert_ne {\n                     panic!(r#\"assertion failed: `(left != right)`\n   left: `{:?}`,\n  right: `{:?}`: {}\"#, &*left_val, &*right_val,\n-                           format_args!($($arg)+))\n+                           $crate::format_args!($($arg)+))\n                 }\n             }\n         }\n@@ -181,7 +181,7 @@ macro_rules! assert_ne {\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n macro_rules! debug_assert {\n-    ($($arg:tt)*) => (if cfg!(debug_assertions) { assert!($($arg)*); })\n+    ($($arg:tt)*) => (if $crate::cfg!(debug_assertions) { $crate::assert!($($arg)*); })\n }\n \n /// Asserts that two expressions are equal to each other.\n@@ -208,7 +208,7 @@ macro_rules! debug_assert {\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n macro_rules! debug_assert_eq {\n-    ($($arg:tt)*) => (if cfg!(debug_assertions) { $crate::assert_eq!($($arg)*); })\n+    ($($arg:tt)*) => (if $crate::cfg!(debug_assertions) { $crate::assert_eq!($($arg)*); })\n }\n \n /// Asserts that two expressions are not equal to each other.\n@@ -235,7 +235,7 @@ macro_rules! debug_assert_eq {\n #[macro_export]\n #[stable(feature = \"assert_ne\", since = \"1.13.0\")]\n macro_rules! debug_assert_ne {\n-    ($($arg:tt)*) => (if cfg!(debug_assertions) { $crate::assert_ne!($($arg)*); })\n+    ($($arg:tt)*) => (if $crate::cfg!(debug_assertions) { $crate::assert_ne!($($arg)*); })\n }\n \n /// Unwraps a result or propagates its error.\n@@ -386,7 +386,7 @@ macro_rules! r#try {\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n macro_rules! write {\n-    ($dst:expr, $($arg:tt)*) => ($dst.write_fmt(format_args!($($arg)*)))\n+    ($dst:expr, $($arg:tt)*) => ($dst.write_fmt($crate::format_args!($($arg)*)))\n }\n \n /// Write formatted data into a buffer, with a newline appended.\n@@ -446,7 +446,7 @@ macro_rules! writeln {\n         $crate::writeln!($dst)\n     );\n     ($dst:expr, $($arg:tt)*) => (\n-        $dst.write_fmt(format_args_nl!($($arg)*))\n+        $dst.write_fmt($crate::format_args_nl!($($arg)*))\n     );\n }\n \n@@ -515,7 +515,7 @@ macro_rules! unreachable {\n         $crate::unreachable!($msg)\n     });\n     ($fmt:expr, $($arg:tt)*) => ({\n-        panic!(concat!(\"internal error: entered unreachable code: \", $fmt), $($arg)*)\n+        panic!($crate::concat!(\"internal error: entered unreachable code: \", $fmt), $($arg)*)\n     });\n }\n \n@@ -573,7 +573,7 @@ macro_rules! unreachable {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n macro_rules! unimplemented {\n     () => (panic!(\"not yet implemented\"));\n-    ($($arg:tt)+) => (panic!(\"not yet implemented: {}\", format_args!($($arg)+)));\n+    ($($arg:tt)+) => (panic!(\"not yet implemented: {}\", $crate::format_args!($($arg)+)));\n }\n \n /// Indicates unfinished code.\n@@ -632,7 +632,7 @@ macro_rules! unimplemented {\n #[unstable(feature = \"todo_macro\", issue = \"59277\")]\n macro_rules! todo {\n     () => (panic!(\"not yet implemented\"));\n-    ($($arg:tt)+) => (panic!(\"not yet implemented: {}\", format_args!($($arg)+)));\n+    ($($arg:tt)+) => (panic!(\"not yet implemented: {}\", $crate::format_args!($($arg)+)));\n }\n \n /// Definitions of built-in macros.\n@@ -927,13 +927,6 @@ pub(crate) mod builtin {\n     #[macro_export]\n     macro_rules! column { () => { /* compiler built-in */ } }\n \n-    /// Same as `column`, but less likely to be shadowed.\n-    #[unstable(feature = \"__rust_unstable_column\", issue = \"0\",\n-               reason = \"internal implementation detail of the `panic` macro\")]\n-    #[rustc_builtin_macro]\n-    #[macro_export]\n-    macro_rules! __rust_unstable_column { () => { /* compiler built-in */ } }\n-\n     /// Expands to the file name in which it was invoked.\n     ///\n     /// With [`line!`] and [`column!`], these macros provide debugging information for"}, {"sha": "7cc279a9ef2ecb83ce3ac3916b6f0b9273617861", "filename": "src/libcore/prelude/v1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibcore%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibcore%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude%2Fv1.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -56,7 +56,6 @@ pub use crate::hash::macros::Hash;\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[doc(no_inline)]\n pub use crate::{\n-    __rust_unstable_column,\n     asm,\n     assert,\n     cfg,"}, {"sha": "bff781373046347b128c161702b003a9460d5cae", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -103,6 +103,22 @@ fn test_iterator_chain_nth() {\n     assert_eq!(it.next(), None);\n }\n \n+#[test]\n+fn test_iterator_chain_nth_back() {\n+    let xs = [0, 1, 2, 3, 4, 5];\n+    let ys = [30, 40, 50, 60];\n+    let zs = [];\n+    let expected = [0, 1, 2, 3, 4, 5, 30, 40, 50, 60];\n+    for (i, x) in expected.iter().rev().enumerate() {\n+        assert_eq!(Some(x), xs.iter().chain(&ys).nth_back(i));\n+    }\n+    assert_eq!(zs.iter().chain(&xs).nth_back(0), Some(&5));\n+\n+    let mut it = xs.iter().chain(&zs);\n+    assert_eq!(it.nth_back(5), Some(&0));\n+    assert_eq!(it.next(), None);\n+}\n+\n #[test]\n fn test_iterator_chain_last() {\n     let xs = [0, 1, 2, 3, 4, 5];"}, {"sha": "de84fcd7160dffd729e8a27f0cb0307006e21ad3", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -178,8 +178,7 @@ pub trait MetadataLoader {\n                           -> Result<MetadataRef, String>;\n }\n \n-/// A store of Rust crates, through with their metadata\n-/// can be accessed.\n+/// A store of Rust crates, through which their metadata can be accessed.\n ///\n /// Note that this trait should probably not be expanding today. All new\n /// functionality should be driven through queries instead!"}, {"sha": "11701a66377442f60f640bf1e01556df179c7ebd", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -2197,7 +2197,6 @@ impl<'tcx> Operand<'tcx> {\n         let ty = tcx.type_of(def_id).subst(tcx, substs);\n         Operand::Constant(box Constant {\n             span,\n-            ty,\n             user_ty: None,\n             literal: ty::Const::zero_sized(tcx, ty),\n         })\n@@ -2476,7 +2475,6 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n #[derive(Copy, Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, HashStable)]\n pub struct Constant<'tcx> {\n     pub span: Span,\n-    pub ty: Ty<'tcx>,\n \n     /// Optional user-given type: for something like\n     /// `collect::<Vec<_>>`, this would be present and would\n@@ -3385,12 +3383,11 @@ impl<'tcx> TypeFoldable<'tcx> for Constant<'tcx> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         Constant {\n             span: self.span.clone(),\n-            ty: self.ty.fold_with(folder),\n             user_ty: self.user_ty.fold_with(folder),\n             literal: self.literal.fold_with(folder),\n         }\n     }\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        self.ty.visit_with(visitor) || self.literal.visit_with(visitor)\n+        self.literal.visit_with(visitor)\n     }\n }"}, {"sha": "e9f7636ba85ae72b92bd730e0cfd51c1d9c22058", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -252,7 +252,7 @@ impl<'tcx> Operand<'tcx> {\n         match self {\n             &Operand::Copy(ref l) |\n             &Operand::Move(ref l) => l.ty(local_decls, tcx).ty,\n-            &Operand::Constant(ref c) => c.ty,\n+            &Operand::Constant(ref c) => c.literal.ty,\n         }\n     }\n }"}, {"sha": "2d16e7bcc83716aae59408ad7eb39434aec7e84b", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -782,13 +782,11 @@ macro_rules! make_mir_visitor {\n                               location: Location) {\n                 let Constant {\n                     span,\n-                    ty,\n                     user_ty,\n                     literal,\n                 } = constant;\n \n                 self.visit_span(span);\n-                self.visit_ty(ty, TyContext::Location(location));\n                 drop(user_ty); // no visit method for this\n                 self.visit_const(literal, location);\n             }"}, {"sha": "e63f1b91dd7d51d48d38b53ae615232d3487b6df", "filename": "src/librustc_codegen_ssa/mir/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -221,7 +221,7 @@ impl<'mir, 'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> Visitor<'tcx>\n             mir::TerminatorKind::Call {\n                 func: mir::Operand::Constant(ref c),\n                 ref args, ..\n-            } => match c.ty.sty {\n+            } => match c.literal.ty.sty {\n                 ty::FnDef(did, _) => Some((did, args)),\n                 _ => None,\n             },"}, {"sha": "dbce5ce4896a718f72e6ac17fd630262b807712a", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -651,7 +651,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                             let (llval, ty) = self.simd_shuffle_indices(\n                                 &bx,\n                                 constant.span,\n-                                constant.ty,\n+                                constant.literal.ty,\n                                 c,\n                             );\n                             return OperandRef {"}, {"sha": "254b73da44261bd349b5f639e7c32fec6854c800", "filename": "src/librustc_codegen_ssa/mir/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -466,7 +466,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             }\n \n             mir::Operand::Constant(ref constant) => {\n-                let ty = self.monomorphize(&constant.ty);\n                 self.eval_mir_constant(constant)\n                     .map(|c| OperandRef::from_const(bx, c))\n                     .unwrap_or_else(|err| {\n@@ -481,6 +480,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         // the above error (or silence it under some conditions) will not cause UB\n                         bx.abort();\n                         // We've errored, so we don't have to produce working code.\n+                        let ty = self.monomorphize(&constant.literal.ty);\n                         let layout = bx.cx().layout_of(ty);\n                         bx.load_operand(PlaceRef::new_sized(\n                             bx.cx().const_undef(bx.cx().type_ptr_to(bx.cx().backend_type(layout))),"}, {"sha": "8391822bb7579cc9d6017857a2a51b6b4abbd1ce", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -250,8 +250,11 @@ fn main() {\n     let llvm_use_libcxx = env::var_os(\"LLVM_USE_LIBCXX\");\n \n     let stdcppname = if target.contains(\"openbsd\") {\n-        // llvm-config on OpenBSD doesn't mention stdlib=libc++\n-        \"c++\"\n+        if target.contains(\"sparc64\") {\n+            \"estdc++\"\n+        } else {\n+            \"c++\"\n+        }\n     } else if target.contains(\"freebsd\") {\n         \"c++\"\n     } else if target.contains(\"darwin\") {"}, {"sha": "4ac0a5b94c0d897c0cd2e1144afec5e202a43d76", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -70,7 +70,7 @@ pub struct CrateMetadata {\n     // whichever `TyCtxt` is being used to decode those values.\n     pub root: schema::CrateRoot<'static>,\n \n-    /// For each public item in this crate, we encode a key. When the\n+    /// For each definition in this crate, we encode a key. When the\n     /// crate is loaded, we read all the keys and put them in this\n     /// hashmap, which gives the reverse mapping. This allows us to\n     /// quickly retrace a `DefPath`, which is needed for incremental"}, {"sha": "9ff0c6ca6a546b6566e036c3f736d703a7e0560d", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 4, "deletions": 40, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -272,12 +272,11 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n \n     fn visit_constant(&mut self, constant: &Constant<'tcx>, location: Location) {\n         self.super_constant(constant, location);\n-        self.sanitize_constant(constant, location);\n-        self.sanitize_type(constant, constant.ty);\n+        self.sanitize_type(constant, constant.literal.ty);\n \n         if let Some(annotation_index) = constant.user_ty {\n             if let Err(terr) = self.cx.relate_type_and_user_type(\n-                constant.ty,\n+                constant.literal.ty,\n                 ty::Variance::Invariant,\n                 &UserTypeProjection { base: annotation_index, projs: vec![], },\n                 location.to_locations(),\n@@ -289,7 +288,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n                     constant,\n                     \"bad constant user type {:?} vs {:?}: {:?}\",\n                     annotation,\n-                    constant.ty,\n+                    constant.literal.ty,\n                     terr,\n                 );\n             }\n@@ -299,7 +298,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n                     location.to_locations(),\n                     ConstraintCategory::Boring,\n                     self.cx.param_env.and(type_op::ascribe_user_type::AscribeUserType::new(\n-                        constant.ty, def_id, UserSubsts { substs, user_self_ty: None },\n+                        constant.literal.ty, def_id, UserSubsts { substs, user_self_ty: None },\n                     )),\n                 ) {\n                     span_mirbug!(\n@@ -403,41 +402,6 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n         }\n     }\n \n-    /// Checks that the constant's `ty` field matches up with what would be\n-    /// expected from its literal. Unevaluated constants and well-formed\n-    /// constraints are checked by `visit_constant`.\n-    fn sanitize_constant(&mut self, constant: &Constant<'tcx>, location: Location) {\n-        debug!(\n-            \"sanitize_constant(constant={:?}, location={:?})\",\n-            constant, location\n-        );\n-\n-        let literal = constant.literal;\n-\n-        if let ConstValue::Unevaluated(..) = literal.val {\n-            return;\n-        }\n-\n-        debug!(\"sanitize_constant: expected_ty={:?}\", literal.ty);\n-\n-        if let Err(terr) = self.cx.eq_types(\n-            literal.ty,\n-            constant.ty,\n-            location.to_locations(),\n-            ConstraintCategory::Boring,\n-        ) {\n-            span_mirbug!(\n-                self,\n-                constant,\n-                \"constant {:?} should have type {:?} but has {:?} ({:?})\",\n-                constant,\n-                literal.ty,\n-                constant.ty,\n-                terr,\n-            );\n-        }\n-    }\n-\n     /// Checks that the types internal to the `place` match up with\n     /// what would be expected.\n     fn sanitize_place("}, {"sha": "39bdc871d83c6deed23df26d770f9dd5eed88716", "filename": "src/librustc_mir/build/expr/as_constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_constant.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -38,9 +38,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         inferred_ty: ty,\n                     })\n                 });\n+                assert_eq!(literal.ty, ty);\n                 Constant {\n                     span,\n-                    ty,\n                     user_ty,\n                     literal,\n                 }"}, {"sha": "1a186fa932ddb116e8a40556fbfc18999a6b0d3e", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -591,7 +591,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let n = (!0u128) >> (128 - bits);\n         let literal = ty::Const::from_bits(self.hir.tcx(), n, param_ty);\n \n-        self.literal_operand(span, ty, literal)\n+        self.literal_operand(span, literal)\n     }\n \n     // Helper to get the minimum value of the appropriate type\n@@ -602,6 +602,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let n = 1 << (bits - 1);\n         let literal = ty::Const::from_bits(self.hir.tcx(), n, param_ty);\n \n-        self.literal_operand(span, ty, literal)\n+        self.literal_operand(span, literal)\n     }\n }"}, {"sha": "889861b85674861b2d4caf181d900c081494da0a", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -114,7 +114,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     destination,\n                     Constant {\n                         span: expr_span,\n-                        ty: this.hir.bool_ty(),\n                         user_ty: None,\n                         literal: this.hir.true_literal(),\n                     },\n@@ -126,7 +125,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     destination,\n                     Constant {\n                         span: expr_span,\n-                        ty: this.hir.bool_ty(),\n                         user_ty: None,\n                         literal: this.hir.false_literal(),\n                     },"}, {"sha": "3473155a3ea3ed8c82a4b0861499b6e3e2aff182", "filename": "src/librustc_mir/build/matches/simplify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -108,8 +108,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 Err(match_pair)\n             }\n \n-            PatternKind::Range(PatternRange { lo, hi, ty, end }) => {\n-                let (range, bias) = match ty.sty {\n+            PatternKind::Range(PatternRange { lo, hi, end }) => {\n+                let (range, bias) = match lo.ty.sty {\n                     ty::Char => {\n                         (Some(('\\u{0000}' as u128, '\\u{10FFFF}' as u128, Size::from_bits(32))), 0)\n                     }"}, {"sha": "65e92d422b0222202f340b75a39c60bddd2ab541", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -63,7 +63,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n \n             PatternKind::Range(range) => {\n-                assert!(range.ty == match_pair.pattern.ty);\n+                assert_eq!(range.lo.ty, match_pair.pattern.ty);\n+                assert_eq!(range.hi.ty, match_pair.pattern.ty);\n                 Test {\n                     span: match_pair.pattern.span,\n                     kind: TestKind::Range(range),\n@@ -270,22 +271,23 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     );\n                 } else {\n                     if let [success, fail] = *make_target_blocks(self) {\n+                        assert_eq!(value.ty, ty);\n+                        let expect = self.literal_operand(test.span, value);\n                         let val = Operand::Copy(place.clone());\n-                        let expect = self.literal_operand(test.span, ty, value);\n                         self.compare(block, success, fail, source_info, BinOp::Eq, expect, val);\n                     } else {\n                         bug!(\"`TestKind::Eq` should have two target blocks\");\n                     }\n                 }\n             }\n \n-            TestKind::Range(PatternRange { ref lo, ref hi, ty, ref end }) => {\n+            TestKind::Range(PatternRange { ref lo, ref hi, ref end }) => {\n                 let lower_bound_success = self.cfg.start_new_block();\n                 let target_blocks = make_target_blocks(self);\n \n                 // Test `val` by computing `lo <= val && val <= hi`, using primitive comparisons.\n-                let lo = self.literal_operand(test.span, ty, lo);\n-                let hi = self.literal_operand(test.span, ty, hi);\n+                let lo = self.literal_operand(test.span, lo);\n+                let hi = self.literal_operand(test.span, hi);\n                 let val = Operand::Copy(place.clone());\n \n                 if let [success, fail] = *target_blocks {\n@@ -387,7 +389,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     ) {\n         use rustc::middle::lang_items::EqTraitLangItem;\n \n-        let mut expect = self.literal_operand(source_info.span, value.ty, value);\n+        let mut expect = self.literal_operand(source_info.span, value);\n         let mut val = Operand::Copy(place.clone());\n \n         // If we're using `b\"...\"` as a pattern, we need to insert an\n@@ -440,7 +442,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         };\n \n         let eq_def_id = self.hir.tcx().require_lang_item(EqTraitLangItem);\n-        let (mty, method) = self.hir.trait_method(eq_def_id, sym::eq, deref_ty, &[deref_ty.into()]);\n+        let method = self.hir.trait_method(eq_def_id, sym::eq, deref_ty, &[deref_ty.into()]);\n \n         let bool_ty = self.hir.bool_ty();\n         let eq_result = self.temp(bool_ty, source_info.span);\n@@ -449,7 +451,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         self.cfg.terminate(block, source_info, TerminatorKind::Call {\n             func: Operand::Constant(box Constant {\n                 span: source_info.span,\n-                ty: mty,\n \n                 // FIXME(#54571): This constant comes from user input (a\n                 // constant in a pattern).  Are there forms where users can add\n@@ -656,8 +657,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n                     let tcx = self.hir.tcx();\n \n-                    let lo = compare_const_vals(tcx, test.lo, pat.hi, self.hir.param_env, test.ty)?;\n-                    let hi = compare_const_vals(tcx, test.hi, pat.lo, self.hir.param_env, test.ty)?;\n+                    let test_ty = test.lo.ty;\n+                    let lo = compare_const_vals(tcx, test.lo, pat.hi, self.hir.param_env, test_ty)?;\n+                    let hi = compare_const_vals(tcx, test.hi, pat.lo, self.hir.param_env, test_ty)?;\n \n                     match (test.end, pat.end, lo, hi) {\n                         // pat < test\n@@ -774,8 +776,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n         let tcx = self.hir.tcx();\n \n-        let a = compare_const_vals(tcx, range.lo, value, self.hir.param_env, range.ty)?;\n-        let b = compare_const_vals(tcx, value, range.hi, self.hir.param_env, range.ty)?;\n+        let a = compare_const_vals(tcx, range.lo, value, self.hir.param_env, range.lo.ty)?;\n+        let b = compare_const_vals(tcx, value, range.hi, self.hir.param_env, range.lo.ty)?;\n \n         match (b, range.end) {\n             (Less, _) |"}, {"sha": "d038310dd4454cadd4cbe432befcd97c791f2fc9", "filename": "src/librustc_mir/build/misc.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -26,12 +26,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// without any user type annotation.\n     pub fn literal_operand(&mut self,\n                            span: Span,\n-                           ty: Ty<'tcx>,\n                            literal: &'tcx ty::Const<'tcx>)\n                            -> Operand<'tcx> {\n         let constant = box Constant {\n             span,\n-            ty,\n             user_ty: None,\n             literal,\n         };\n@@ -47,7 +45,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     pub fn zero_literal(&mut self, span: Span, ty: Ty<'tcx>) -> Operand<'tcx> {\n         let literal = ty::Const::from_bits(self.hir.tcx(), 0, ty::ParamEnv::empty().and(ty));\n \n-        self.literal_operand(span, ty, literal)\n+        self.literal_operand(span, literal)\n     }\n \n     pub fn push_usize(&mut self,\n@@ -61,7 +59,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             block, source_info, &temp,\n             Constant {\n                 span: source_info.span,\n-                ty: self.hir.usize_ty(),\n                 user_ty: None,\n                 literal: self.hir.usize_literal(value),\n             });"}, {"sha": "a33d7207ed4e1453d2917f966b7f59e278b63dad", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -927,7 +927,7 @@ fn convert_path_expr<'a, 'tcx>(\n             ExprKind::Literal {\n                 literal: cx.tcx.mk_const(ty::Const {\n                     val: ConstValue::Unevaluated(def_id, substs),\n-                    ty: cx.tcx.type_of(def_id),\n+                    ty: cx.tables().node_type(expr.hir_id),\n                 }),\n                 user_ty,\n             }"}, {"sha": "740dc2011cab1cddd65cea770aac1f777b53e540", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -170,13 +170,13 @@ impl<'a, 'tcx> Cx<'a, 'tcx> {\n                         method_name: Symbol,\n                         self_ty: Ty<'tcx>,\n                         params: &[Kind<'tcx>])\n-                        -> (Ty<'tcx>, &'tcx ty::Const<'tcx>) {\n+                        -> &'tcx ty::Const<'tcx> {\n         let substs = self.tcx.mk_substs_trait(self_ty, params);\n         for item in self.tcx.associated_items(trait_def_id) {\n             if item.kind == ty::AssocKind::Method && item.ident.name == method_name {\n                 let method_ty = self.tcx.type_of(item.def_id);\n                 let method_ty = method_ty.subst(self.tcx, substs);\n-                return (method_ty, ty::Const::zero_sized(self.tcx, method_ty));\n+                return ty::Const::zero_sized(self.tcx, method_ty);\n             }\n         }\n "}, {"sha": "1833ee30624bb798293d1d50c51164500b197175", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -609,7 +609,6 @@ impl<'tcx> Witness<'tcx> {\n                         ConstantRange(lo, hi, ty, end) => PatternKind::Range(PatternRange {\n                             lo: ty::Const::from_bits(cx.tcx, lo, ty::ParamEnv::empty().and(ty)),\n                             hi: ty::Const::from_bits(cx.tcx, hi, ty::ParamEnv::empty().and(ty)),\n-                            ty,\n                             end,\n                         }),\n                         _ => PatternKind::Wild,\n@@ -880,10 +879,10 @@ impl<'tcx> IntRange<'tcx> {\n         let range = loop {\n             match pat.kind {\n                 box PatternKind::Constant { value } => break ConstantValue(value),\n-                box PatternKind::Range(PatternRange { lo, hi, ty, end }) => break ConstantRange(\n-                    lo.eval_bits(tcx, param_env, ty),\n-                    hi.eval_bits(tcx, param_env, ty),\n-                    ty,\n+                box PatternKind::Range(PatternRange { lo, hi, end }) => break ConstantRange(\n+                    lo.eval_bits(tcx, param_env, lo.ty),\n+                    hi.eval_bits(tcx, param_env, hi.ty),\n+                    lo.ty,\n                     end,\n                 ),\n                 box PatternKind::AscribeUserType { ref subpattern, .. } => {\n@@ -1339,11 +1338,11 @@ fn pat_constructors<'tcx>(cx: &mut MatchCheckCtxt<'_, 'tcx>,\n             Some(vec![Variant(adt_def.variants[variant_index].def_id)])\n         }\n         PatternKind::Constant { value } => Some(vec![ConstantValue(value)]),\n-        PatternKind::Range(PatternRange { lo, hi, ty, end }) =>\n+        PatternKind::Range(PatternRange { lo, hi, end }) =>\n             Some(vec![ConstantRange(\n-                lo.eval_bits(cx.tcx, cx.param_env, ty),\n-                hi.eval_bits(cx.tcx, cx.param_env, ty),\n-                ty,\n+                lo.eval_bits(cx.tcx, cx.param_env, lo.ty),\n+                hi.eval_bits(cx.tcx, cx.param_env, hi.ty),\n+                lo.ty,\n                 end,\n             )]),\n         PatternKind::Array { .. } => match pcx.ty.sty {\n@@ -1656,7 +1655,7 @@ fn constructor_covered_by_range<'tcx>(\n ) -> Result<bool, ErrorReported> {\n     let (from, to, end, ty) = match pat.kind {\n         box PatternKind::Constant { value } => (value, value, RangeEnd::Included, value.ty),\n-        box PatternKind::Range(PatternRange { lo, hi, end, ty }) => (lo, hi, end, ty),\n+        box PatternKind::Range(PatternRange { lo, hi, end }) => (lo, hi, end, lo.ty),\n         _ => bug!(\"`constructor_covered_by_range` called with {:?}\", pat),\n     };\n     trace!(\"constructor_covered_by_range {:#?}, {:#?}, {:#?}, {}\", ctor, from, to, ty);"}, {"sha": "bebb0719af8081336752daf1ecaa2f2be77de04f", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -181,7 +181,6 @@ pub enum PatternKind<'tcx> {\n pub struct PatternRange<'tcx> {\n     pub lo: &'tcx ty::Const<'tcx>,\n     pub hi: &'tcx ty::Const<'tcx>,\n-    pub ty: Ty<'tcx>,\n     pub end: RangeEnd,\n }\n \n@@ -296,7 +295,7 @@ impl<'tcx> fmt::Display for Pattern<'tcx> {\n             PatternKind::Constant { value } => {\n                 write!(f, \"{}\", value)\n             }\n-            PatternKind::Range(PatternRange { lo, hi, ty: _, end }) => {\n+            PatternKind::Range(PatternRange { lo, hi, end }) => {\n                 write!(f, \"{}\", lo)?;\n                 match end {\n                     RangeEnd::Included => write!(f, \"..=\")?,\n@@ -442,6 +441,8 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n \n                 let mut kind = match (lo, hi) {\n                     (PatternKind::Constant { value: lo }, PatternKind::Constant { value: hi }) => {\n+                        assert_eq!(lo.ty, ty);\n+                        assert_eq!(hi.ty, ty);\n                         let cmp = compare_const_vals(\n                             self.tcx,\n                             lo,\n@@ -451,7 +452,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                         );\n                         match (end, cmp) {\n                             (RangeEnd::Excluded, Some(Ordering::Less)) =>\n-                                PatternKind::Range(PatternRange { lo, hi, ty, end }),\n+                                PatternKind::Range(PatternRange { lo, hi, end }),\n                             (RangeEnd::Excluded, _) => {\n                                 span_err!(\n                                     self.tcx.sess,\n@@ -465,7 +466,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                                 PatternKind::Constant { value: lo }\n                             }\n                             (RangeEnd::Included, Some(Ordering::Less)) => {\n-                                PatternKind::Range(PatternRange { lo, hi, ty, end })\n+                                PatternKind::Range(PatternRange { lo, hi, end })\n                             }\n                             (RangeEnd::Included, _) => {\n                                 let mut err = struct_span_err!(\n@@ -1416,17 +1417,7 @@ impl<'tcx> PatternFoldable<'tcx> for PatternKind<'tcx> {\n             } => PatternKind::Constant {\n                 value,\n             },\n-            PatternKind::Range(PatternRange {\n-                lo,\n-                hi,\n-                ty,\n-                end,\n-            }) => PatternKind::Range(PatternRange {\n-                lo,\n-                hi,\n-                ty: ty.fold_with(folder),\n-                end,\n-            }),\n+            PatternKind::Range(range) => PatternKind::Range(range),\n             PatternKind::Slice {\n                 ref prefix,\n                 ref slice,"}, {"sha": "063e7796371580306d3e30277b70bbcdeaf2fd39", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -445,7 +445,6 @@ impl CloneShimBuilder<'tcx> {\n         let func_ty = tcx.mk_fn_def(self.def_id, substs);\n         let func = Operand::Constant(box Constant {\n             span: self.span,\n-            ty: func_ty,\n             user_ty: None,\n             literal: ty::Const::zero_sized(tcx, func_ty),\n         });\n@@ -505,7 +504,6 @@ impl CloneShimBuilder<'tcx> {\n     fn make_usize(&self, value: u64) -> Box<Constant<'tcx>> {\n         box Constant {\n             span: self.span,\n-            ty: self.tcx.types.usize,\n             user_ty: None,\n             literal: ty::Const::from_usize(self.tcx, value),\n         }\n@@ -745,7 +743,6 @@ fn build_call_shim<'tcx>(\n             let ty = tcx.type_of(def_id);\n             (Operand::Constant(box Constant {\n                 span,\n-                ty,\n                 user_ty: None,\n                 literal: ty::Const::zero_sized(tcx, ty),\n              }),"}, {"sha": "c3c432d606644ed77a4a3bf53ce98c0b749313fa", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -539,7 +539,6 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         Operand::Constant(Box::new(\n             Constant {\n                 span,\n-                ty,\n                 user_ty: None,\n                 literal: self.tcx.mk_const(*ty::Const::from_scalar(\n                     self.tcx,"}, {"sha": "4480d1e0a05b85ce882bc1dc27171552739a5cc2", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -527,7 +527,6 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n     fn constant_bool(&self, span: Span, val: bool) -> Rvalue<'tcx> {\n         Rvalue::Use(Operand::Constant(Box::new(Constant {\n             span,\n-            ty: self.tcx.types.bool,\n             user_ty: None,\n             literal: ty::Const::from_bool(self.tcx, val),\n         })))"}, {"sha": "f6941880240316ad55507409437844938fb52828", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -975,7 +975,6 @@ fn insert_panic_block<'tcx>(\n     let term = TerminatorKind::Assert {\n         cond: Operand::Constant(box Constant {\n             span: body.span,\n-            ty: tcx.types.bool,\n             user_ty: None,\n             literal: ty::Const::from_bool(tcx, false),\n         }),"}, {"sha": "bc7bd39be488e35684356634eb789a289607f23c", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -328,7 +328,7 @@ impl Inliner<'tcx> {\n                 }\n \n                 TerminatorKind::Call {func: Operand::Constant(ref f), .. } => {\n-                    if let ty::FnDef(def_id, _) = f.ty.sty {\n+                    if let ty::FnDef(def_id, _) = f.literal.ty.sty {\n                         // Don't give intrinsics the extra penalty for calls\n                         let f = tcx.fn_sig(def_id);\n                         if f.abi() == Abi::RustIntrinsic || f.abi() == Abi::PlatformIntrinsic {"}, {"sha": "b2d063a1f4e10392291c04ca0f3d3dbaa7f47954", "filename": "src/librustc_mir/transform/instcombine.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -97,8 +97,7 @@ impl Visitor<'tcx> for OptimizationFinder<'b, 'tcx> {\n             let place_ty = place.ty(&self.body.local_decls, self.tcx).ty;\n             if let ty::Array(_, len) = place_ty.sty {\n                 let span = self.body.source_info(location).span;\n-                let ty = self.tcx.types.usize;\n-                let constant = Constant { span, ty, literal: len, user_ty: None };\n+                let constant = Constant { span, literal: len, user_ty: None };\n                 self.optimizations.arrays_lengths.insert(location, constant);\n             }\n         }"}, {"sha": "0eed43b10868e3b48262e7eb0603b0703b06b80c", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -249,7 +249,7 @@ trait Qualif {\n                 if let ConstValue::Unevaluated(def_id, _) = constant.literal.val {\n                     // Don't peek inside trait associated constants.\n                     if cx.tcx.trait_of_item(def_id).is_some() {\n-                        Self::in_any_value_of_ty(cx, constant.ty).unwrap_or(false)\n+                        Self::in_any_value_of_ty(cx, constant.literal.ty).unwrap_or(false)\n                     } else {\n                         let (bits, _) = cx.tcx.at(constant.span).mir_const_qualif(def_id);\n \n@@ -258,7 +258,7 @@ trait Qualif {\n                         // Just in case the type is more specific than\n                         // the definition, e.g., impl associated const\n                         // with type parameters, take it into account.\n-                        qualif && Self::mask_for_ty(cx, constant.ty)\n+                        qualif && Self::mask_for_ty(cx, constant.literal.ty)\n                     }\n                 } else {\n                     false"}, {"sha": "598de3a77e61c22ce6745325bc62b45b5aba46b9", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -224,7 +224,7 @@ fn is_rustc_peek<'a, 'tcx>(\n     if let Some(mir::Terminator { ref kind, source_info, .. }) = *terminator {\n         if let mir::TerminatorKind::Call { func: ref oper, ref args, .. } = *kind {\n             if let mir::Operand::Constant(ref func) = *oper {\n-                if let ty::FnDef(def_id, _) = func.ty.sty {\n+                if let ty::FnDef(def_id, _) = func.literal.ty.sty {\n                     let abi = tcx.fn_sig(def_id).abi();\n                     let name = tcx.item_name(def_id);\n                     if abi == Abi::RustIntrinsic && name == sym::rustc_peek {"}, {"sha": "c5561a1ae0d1548215fc2d803078f95bbeb689fc", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -970,7 +970,6 @@ where\n     fn constant_usize(&self, val: u16) -> Operand<'tcx> {\n         Operand::Constant(box Constant {\n             span: self.source_info.span,\n-            ty: self.tcx().types.usize,\n             user_ty: None,\n             literal: ty::Const::from_usize(self.tcx(), val.into()),\n         })"}, {"sha": "ac2701971dfd55e369228d51ea08812c3f0b54e0", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -397,10 +397,9 @@ impl ExtraComments<'tcx> {\n impl Visitor<'tcx> for ExtraComments<'tcx> {\n     fn visit_constant(&mut self, constant: &Constant<'tcx>, location: Location) {\n         self.super_constant(constant, location);\n-        let Constant { span, ty, user_ty, literal } = constant;\n+        let Constant { span, user_ty, literal } = constant;\n         self.push(\"mir::Constant\");\n         self.push(&format!(\"+ span: {:?}\", span));\n-        self.push(&format!(\"+ ty: {:?}\", ty));\n         if let Some(user_ty) = user_ty {\n             self.push(&format!(\"+ user_ty: {:?}\", user_ty));\n         }"}, {"sha": "65caeac5ed1adca7bb7cba28e93a691e4b6303e2", "filename": "src/librustc_target/spec/aarch64_wrs_vxworks.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_target%2Fspec%2Faarch64_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_target%2Fspec%2Faarch64_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_wrs_vxworks.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -9,15 +9,14 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        target_env: \"gnu\".to_string(),\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n         target_os: \"vxworks\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n+        target_env: \"gnu\".to_string(),\n+        target_vendor: \"wrs\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             abi_blacklist: super::arm_base::abi_blacklist(),\n-            target_mcount: \"\\u{1}_mcount\".to_string(),\n             .. base\n         },\n     })"}, {"sha": "bde903de102212370bff818009362b10a427688c", "filename": "src/librustc_target/spec/arm_wrs_vxworks_sf.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9a32ad0dd51f8451aa6e39d7e9ea89483cb8fcfa/src%2Flibrustc_target%2Fspec%2Farm_wrs_vxworks_sf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a32ad0dd51f8451aa6e39d7e9ea89483cb8fcfa/src%2Flibrustc_target%2Fspec%2Farm_wrs_vxworks_sf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farm_wrs_vxworks_sf.rs?ref=9a32ad0dd51f8451aa6e39d7e9ea89483cb8fcfa", "patch": "@@ -1,25 +0,0 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n-\n-pub fn target() -> TargetResult {\n-    let mut base = super::vxworks_base::opts();\n-    base.max_atomic_width = Some(64);\n-    Ok(Target {\n-        llvm_target: \"arm-unknown-linux-gnueabi\".to_string(),\n-        target_endian: \"little\".to_string(),\n-        target_pointer_width: \"32\".to_string(),\n-        target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n-        target_os: \"vxworks\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n-\n-        options: TargetOptions {\n-            features: \"+strict-align,+v6\".to_string(),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n-            target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n-            .. base\n-        },\n-    })\n-}"}, {"sha": "06c51ae61068f3ef83db158cba14cae036d7016c", "filename": "src/librustc_target/spec/armv7_wrs_vxworks.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9a32ad0dd51f8451aa6e39d7e9ea89483cb8fcfa/src%2Flibrustc_target%2Fspec%2Farmv7_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a32ad0dd51f8451aa6e39d7e9ea89483cb8fcfa/src%2Flibrustc_target%2Fspec%2Farmv7_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_wrs_vxworks.rs?ref=9a32ad0dd51f8451aa6e39d7e9ea89483cb8fcfa", "patch": "@@ -1,31 +0,0 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n-\n-// This target is for glibc Linux on ARMv7 without NEON or\n-// thumb-mode. See the thumbv7neon variant for enabling both.\n-\n-pub fn target() -> TargetResult {\n-    let base = super::vxworks_base::opts();\n-    Ok(Target {\n-        llvm_target: \"armv7-unknown-linux-gnueabihf\".to_string(),\n-        target_endian: \"little\".to_string(),\n-        target_pointer_width: \"32\".to_string(),\n-        target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n-        target_os: \"vxworks\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n-\n-        options: TargetOptions {\n-            // Info about features at https://wiki.debian.org/ArmHardFloatPort\n-            features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n-            cpu: \"generic\".to_string(),\n-            max_atomic_width: Some(64),\n-            abi_blacklist: super::arm_base::abi_blacklist(),\n-            target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n-            position_independent_executables: false,\n-            .. base\n-        }\n-    })\n-}"}, {"sha": "9e3b24dd327dcf4630c3a5b06bd89ddd88a431d2", "filename": "src/librustc_target/spec/armv7_wrs_vxworks_eabihf.rs", "status": "renamed", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_target%2Fspec%2Farmv7_wrs_vxworks_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_target%2Fspec%2Farmv7_wrs_vxworks_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_wrs_vxworks_eabihf.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -1,8 +1,5 @@\n use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n-// This target is for glibc Linux on ARMv7 without NEON or\n-// thumb-mode. See the thumbv7neon variant for enabling both.\n-\n pub fn target() -> TargetResult {\n     let base = super::vxworks_base::opts();\n     Ok(Target {\n@@ -14,17 +11,14 @@ pub fn target() -> TargetResult {\n         arch: \"arm\".to_string(),\n         target_os: \"vxworks\".to_string(),\n         target_env: \"gnu\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n+        target_vendor: \"wrs\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n-\n         options: TargetOptions {\n             // Info about features at https://wiki.debian.org/ArmHardFloatPort\n             features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n             cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n             abi_blacklist: super::arm_base::abi_blacklist(),\n-            target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n-            position_independent_executables: false,\n             .. base\n         }\n     })", "previous_filename": "src/librustc_target/spec/arm_wrs_vxworks.rs"}, {"sha": "355250e6eca7f152fe03701c8dc8dd277cf9bf2c", "filename": "src/librustc_target/spec/i586_wrs_vxworks.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a32ad0dd51f8451aa6e39d7e9ea89483cb8fcfa/src%2Flibrustc_target%2Fspec%2Fi586_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a32ad0dd51f8451aa6e39d7e9ea89483cb8fcfa/src%2Flibrustc_target%2Fspec%2Fi586_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi586_wrs_vxworks.rs?ref=9a32ad0dd51f8451aa6e39d7e9ea89483cb8fcfa", "patch": "@@ -1,8 +0,0 @@\n-use crate::spec::TargetResult;\n-\n-pub fn target() -> TargetResult {\n-    let mut base = super::i686_wrs_vxworks::target()?;\n-    base.options.cpu = \"pentium\".to_string();\n-    base.llvm_target = \"i586-unknown-linux-gnu\".to_string();\n-    Ok(base)\n-}"}, {"sha": "c5f9583a358563b2e27c9e26e2d8cbefe30c1f79", "filename": "src/librustc_target/spec/i686_wrs_vxworks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_target%2Fspec%2Fi686_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_target%2Fspec%2Fi686_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_wrs_vxworks.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -16,7 +16,7 @@ pub fn target() -> TargetResult {\n         arch: \"x86\".to_string(),\n         target_os: \"vxworks\".to_string(),\n         target_env: \"gnu\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n+        target_vendor: \"wrs\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     })"}, {"sha": "4b1ff5ccbe8aa238d4cdbab86ea4cbc6e666779b", "filename": "src/librustc_target/spec/i686_wrs_vxworks_gnu.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9a32ad0dd51f8451aa6e39d7e9ea89483cb8fcfa/src%2Flibrustc_target%2Fspec%2Fi686_wrs_vxworks_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a32ad0dd51f8451aa6e39d7e9ea89483cb8fcfa/src%2Flibrustc_target%2Fspec%2Fi686_wrs_vxworks_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_wrs_vxworks_gnu.rs?ref=9a32ad0dd51f8451aa6e39d7e9ea89483cb8fcfa", "patch": "@@ -1,23 +0,0 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n-\n-pub fn target() -> TargetResult {\n-    let mut base = super::vxworks_base::opts();\n-    base.cpu = \"pentium4\".to_string();\n-    base.max_atomic_width = Some(64);\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n-    base.stack_probes = true;\n-\n-    Ok(Target {\n-        llvm_target: \"i686-unknown-linux-gnu\".to_string(),\n-        target_endian: \"little\".to_string(),\n-        target_pointer_width: \"32\".to_string(),\n-        target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128\".to_string(),\n-        arch: \"x86\".to_string(),\n-        target_os: \"vxworks\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n-        options: base,\n-    })\n-}"}, {"sha": "539e28f7088e354188441f1ba88ef8c6e866f308", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -398,6 +398,7 @@ supported_targets! {\n \n     (\"aarch64-unknown-openbsd\", aarch64_unknown_openbsd),\n     (\"i686-unknown-openbsd\", i686_unknown_openbsd),\n+    (\"sparc64-unknown-openbsd\", sparc64_unknown_openbsd),\n     (\"x86_64-unknown-openbsd\", x86_64_unknown_openbsd),\n \n     (\"aarch64-unknown-netbsd\", aarch64_unknown_netbsd),\n@@ -492,10 +493,9 @@ supported_targets! {\n \n     (\"nvptx64-nvidia-cuda\", nvptx64_nvidia_cuda),\n \n-    (\"x86_64-wrs-vxworks\", x86_64_wrs_vxworks),\n     (\"i686-wrs-vxworks\", i686_wrs_vxworks),\n-    (\"i586-wrs-vxworks\", i586_wrs_vxworks),\n-    (\"armv7-wrs-vxworks\", armv7_wrs_vxworks),\n+    (\"x86_64-wrs-vxworks\", x86_64_wrs_vxworks),\n+    (\"armv7-wrs-vxworks-eabihf\", armv7_wrs_vxworks_eabihf),\n     (\"aarch64-wrs-vxworks\", aarch64_wrs_vxworks),\n     (\"powerpc-wrs-vxworks\", powerpc_wrs_vxworks),\n     (\"powerpc-wrs-vxworks-spe\", powerpc_wrs_vxworks_spe),"}, {"sha": "27a84b953dd07453749392326243eb3229bb7116", "filename": "src/librustc_target/spec/powerpc64_wrs_vxworks.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_target%2Fspec%2Fpowerpc64_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_target%2Fspec%2Fpowerpc64_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fpowerpc64_wrs_vxworks.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -15,10 +15,9 @@ pub fn target() -> TargetResult {\n         arch: \"powerpc64\".to_string(),\n         target_os: \"vxworks\".to_string(),\n         target_env: \"gnu\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n+        target_vendor: \"wrs\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n-            target_mcount: \"_mcount\".to_string(),\n             .. base\n         },\n     })"}, {"sha": "c2dae8535a2870b2fb58b624e0a4d6a348872136", "filename": "src/librustc_target/spec/powerpc64_wrs_vxworks_gnusf.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9a32ad0dd51f8451aa6e39d7e9ea89483cb8fcfa/src%2Flibrustc_target%2Fspec%2Fpowerpc64_wrs_vxworks_gnusf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a32ad0dd51f8451aa6e39d7e9ea89483cb8fcfa/src%2Flibrustc_target%2Fspec%2Fpowerpc64_wrs_vxworks_gnusf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fpowerpc64_wrs_vxworks_gnusf.rs?ref=9a32ad0dd51f8451aa6e39d7e9ea89483cb8fcfa", "patch": "@@ -1,26 +0,0 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n-\n-pub fn target() -> TargetResult {\n-    let mut base = super::vxworks_base::opts();\n-    base.cpu = \"ppc64\".to_string();\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n-    base.max_atomic_width = Some(64);\n-\n-    Ok(Target {\n-        llvm_target: \"powerpc64-unknown-linux-gnu\".to_string(),\n-        target_endian: \"big\".to_string(),\n-        target_pointer_width: \"64\".to_string(),\n-        target_c_int_width: \"32\".to_string(),\n-        data_layout: \"E-m:e-i64:64-n32:64\".to_string(),\n-        arch: \"powerpc64\".to_string(),\n-        target_os: \"vxworks\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n-        options: TargetOptions {\n-            features: \"-hard-float\".to_string(),\n-            target_mcount: \"_mcount\".to_string(),\n-            .. base\n-        },\n-    })\n-}"}, {"sha": "a4d2897f892282ec3a8547bff3f647fd94888cc1", "filename": "src/librustc_target/spec/powerpc_wrs_vxworks.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_target%2Fspec%2Fpowerpc_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_target%2Fspec%2Fpowerpc_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fpowerpc_wrs_vxworks.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -19,7 +19,6 @@ pub fn target() -> TargetResult {\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             features: \"+secure-plt\".to_string(),\n-            target_mcount: \"_mcount\".to_string(),\n             .. base\n         },\n     })"}, {"sha": "43723ea7c0cc8404c0a3a93fe89d97c24a270c32", "filename": "src/librustc_target/spec/powerpc_wrs_vxworks_gnusf.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9a32ad0dd51f8451aa6e39d7e9ea89483cb8fcfa/src%2Flibrustc_target%2Fspec%2Fpowerpc_wrs_vxworks_gnusf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a32ad0dd51f8451aa6e39d7e9ea89483cb8fcfa/src%2Flibrustc_target%2Fspec%2Fpowerpc_wrs_vxworks_gnusf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fpowerpc_wrs_vxworks_gnusf.rs?ref=9a32ad0dd51f8451aa6e39d7e9ea89483cb8fcfa", "patch": "@@ -1,26 +0,0 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n-\n-pub fn target() -> TargetResult {\n-    let mut base = super::vxworks_base::opts();\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"--secure-plt\".to_string());\n-    base.max_atomic_width = Some(32);\n-\n-    Ok(Target {\n-        llvm_target: \"powerpc-unknown-linux-gnu\".to_string(),\n-        target_endian: \"big\".to_string(),\n-        target_pointer_width: \"32\".to_string(),\n-        target_c_int_width: \"32\".to_string(),\n-        data_layout: \"E-m:e-p:32:32-i64:64-n32\".to_string(),\n-        arch: \"powerpc\".to_string(),\n-        target_os: \"vxworks\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"wrs\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n-        options: TargetOptions {\n-            features: \"+secure-plt,-hard-float\".to_string(),\n-            target_mcount: \"_mcount\".to_string(),\n-            .. base\n-        },\n-    })\n-}"}, {"sha": "8f236235867e57bba34a2ed93c893d541065ee80", "filename": "src/librustc_target/spec/powerpc_wrs_vxworks_gnuspesf.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9a32ad0dd51f8451aa6e39d7e9ea89483cb8fcfa/src%2Flibrustc_target%2Fspec%2Fpowerpc_wrs_vxworks_gnuspesf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a32ad0dd51f8451aa6e39d7e9ea89483cb8fcfa/src%2Flibrustc_target%2Fspec%2Fpowerpc_wrs_vxworks_gnuspesf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fpowerpc_wrs_vxworks_gnuspesf.rs?ref=9a32ad0dd51f8451aa6e39d7e9ea89483cb8fcfa", "patch": "@@ -1,27 +0,0 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n-\n-pub fn target() -> TargetResult {\n-    let mut base = super::vxworks_base::opts();\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-mspe\".to_string());\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"--secure-plt\".to_string());\n-    base.max_atomic_width = Some(32);\n-\n-    Ok(Target {\n-        llvm_target: \"powerpc-unknown-linux-gnuspe\".to_string(),\n-        target_endian: \"big\".to_string(),\n-        target_pointer_width: \"32\".to_string(),\n-        target_c_int_width: \"32\".to_string(),\n-        data_layout: \"E-m:e-p:32:32-i64:64-n32\".to_string(),\n-        arch: \"powerpc\".to_string(),\n-        target_os: \"vxworks\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"wrs\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n-        options: TargetOptions {\n-            // feature msync would disable instruction 'fsync' which is not supported by fsl_p1p2\n-            features: \"+secure-plt,+msync,-hard-float\".to_string(),\n-            target_mcount: \"_mcount\".to_string(),\n-            .. base\n-        },\n-    })\n-}"}, {"sha": "90118a148524236648edd3978aefd53d70fe8785", "filename": "src/librustc_target/spec/powerpc_wrs_vxworks_spe.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_target%2Fspec%2Fpowerpc_wrs_vxworks_spe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_target%2Fspec%2Fpowerpc_wrs_vxworks_spe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fpowerpc_wrs_vxworks_spe.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -20,7 +20,6 @@ pub fn target() -> TargetResult {\n         options: TargetOptions {\n             // feature msync would disable instruction 'fsync' which is not supported by fsl_p1p2\n             features: \"+secure-plt,+msync\".to_string(),\n-            target_mcount: \"_mcount\".to_string(),\n             .. base\n         },\n     })"}, {"sha": "229e0621e0dc1cef92bc52cf3e2ca415685d3d20", "filename": "src/librustc_target/spec/sparc64_unknown_openbsd.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_target%2Fspec%2Fsparc64_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_target%2Fspec%2Fsparc64_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fsparc64_unknown_openbsd.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -0,0 +1,22 @@\n+use crate::spec::{LinkerFlavor, Target, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    let mut base = super::openbsd_base::opts();\n+    base.cpu = \"v9\".to_string();\n+    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n+    base.max_atomic_width = Some(64);\n+\n+    Ok(Target {\n+        llvm_target: \"sparc64-unknown-openbsd\".to_string(),\n+        target_endian: \"big\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: \"E-m:e-i64:64-n32:64-S128\".to_string(),\n+        arch: \"sparc64\".to_string(),\n+        target_os: \"openbsd\".to_string(),\n+        target_env: String::new(),\n+        target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n+        options: base,\n+    })\n+}"}, {"sha": "16acd411dca8177c9f51039147a03d8e08f37238", "filename": "src/librustc_target/spec/vxworks_base.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_target%2Fspec%2Fvxworks_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_target%2Fspec%2Fvxworks_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fvxworks_base.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -1,7 +1,11 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, TargetOptions, RelroLevel};\n+use crate::spec::{LinkArgs, LinkerFlavor, TargetOptions};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n+    let mut args_crt = LinkArgs::new();\n+    args_crt.insert(LinkerFlavor::Gcc, vec![\n+        \"--static-crt\".to_string(),\n+    ]);\n     let mut args = LinkArgs::new();\n     args.insert(LinkerFlavor::Gcc, vec![\n         // We want to be able to strip as much executable code as possible\n@@ -12,30 +16,25 @@ pub fn opts() -> TargetOptions {\n         // following libraries so we're sure to pass it as one of the first\n         // arguments.\n         \"-Wl,--as-needed\".to_string(),\n-\n-        // Always enable NX protection when it is available\n-        \"-Wl,-z,noexecstack\".to_string(),\n-    ]);\n-\n-    let mut late_lk_args = LinkArgs::new();\n-    late_lk_args.insert(LinkerFlavor::Gcc, vec![\n-        \"-lnet\".to_string(),\n-        \"-lunix\".to_string(),\n     ]);\n \n     TargetOptions {\n-        linker: Some(\"vx-cxx\".to_string()),\n+        linker: Some(\"wr-c++\".to_string()),\n         exe_suffix: \".vxe\".to_string(),\n-        late_link_args: late_lk_args,\n         dynamic_linking: true,\n         executables: true,\n         target_family: Some(\"unix\".to_string()),\n         linker_is_gnu: true,\n         has_rpath: true,\n         pre_link_args: args,\n-        position_independent_executables: true,\n-        relro_level: RelroLevel::Full,\n+        position_independent_executables: false,\n         has_elf_tls: true,\n+        pre_link_args_crt: args_crt,\n+        crt_static_default: true,\n+        crt_static_respected: true,\n+        crt_static_allows_dylibs: true,\n+        // VxWorks needs to implement this to support profiling\n+        target_mcount: \"_mcount\".to_string(),\n         .. Default::default()\n     }\n }"}, {"sha": "1ab2f3a47c481abc55db7a07d7047e216d80fb9b", "filename": "src/librustc_target/spec/x86_64_wrs_vxworks.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_target%2Fspec%2Fx86_64_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibrustc_target%2Fspec%2Fx86_64_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_wrs_vxworks.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -6,6 +6,7 @@ pub fn target() -> TargetResult {\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n     base.stack_probes = true;\n+    base.disable_redzone = true;\n \n     Ok(Target {\n         llvm_target: \"x86_64-unknown-linux-gnu\".to_string(),"}, {"sha": "3288d0b4df2ee48683752d947483eb2f57eefec0", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -23,7 +23,7 @@ libc = { version = \"0.2.51\", default-features = false, features = ['rustc-dep-of\n compiler_builtins = { version = \"0.1.16\" }\n profiler_builtins = { path = \"../libprofiler_builtins\", optional = true }\n unwind = { path = \"../libunwind\" }\n-hashbrown = { version = \"0.4.0\", features = ['rustc-dep-of-std'] }\n+hashbrown = { version = \"0.5.0\", features = ['rustc-dep-of-std'] }\n \n [dependencies.backtrace]\n version = \"0.3.34\""}, {"sha": "a0538986a22421b4fc0cc1cac02738b006f036ef", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -6,7 +6,7 @@ use hashbrown::hash_map as base;\n \n use crate::borrow::Borrow;\n use crate::cell::Cell;\n-use crate::collections::CollectionAllocErr;\n+use crate::collections::TryReserveError;\n use crate::fmt::{self, Debug};\n #[allow(deprecated)]\n use crate::hash::{BuildHasher, Hash, Hasher, SipHasher13};\n@@ -588,7 +588,7 @@ where\n     /// ```\n     #[inline]\n     #[unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")]\n-    pub fn try_reserve(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {\n+    pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {\n         self.base\n             .try_reserve(additional)\n             .map_err(map_collection_alloc_err)\n@@ -2542,10 +2542,13 @@ fn map_entry<'a, K: 'a, V: 'a>(raw: base::RustcEntry<'a, K, V>) -> Entry<'a, K,\n }\n \n #[inline]\n-fn map_collection_alloc_err(err: hashbrown::CollectionAllocErr) -> CollectionAllocErr {\n+fn map_collection_alloc_err(err: hashbrown::CollectionAllocErr) -> TryReserveError {\n     match err {\n-        hashbrown::CollectionAllocErr::CapacityOverflow => CollectionAllocErr::CapacityOverflow,\n-        hashbrown::CollectionAllocErr::AllocErr => CollectionAllocErr::AllocErr,\n+        hashbrown::CollectionAllocErr::CapacityOverflow => TryReserveError::CapacityOverflow,\n+        hashbrown::CollectionAllocErr::AllocErr { layout } => TryReserveError::AllocError {\n+            layout,\n+            non_exhaustive: (),\n+        },\n     }\n }\n \n@@ -2605,7 +2608,7 @@ mod test_map {\n     use super::RandomState;\n     use crate::cell::RefCell;\n     use rand::{thread_rng, Rng};\n-    use realstd::collections::CollectionAllocErr::*;\n+    use realstd::collections::TryReserveError::*;\n     use realstd::usize;\n \n     // https://github.com/rust-lang/rust/issues/62301\n@@ -3405,7 +3408,7 @@ mod test_map {\n             panic!(\"usize::MAX should trigger an overflow!\");\n         }\n \n-        if let Err(AllocErr) = empty_bytes.try_reserve(MAX_USIZE / 8) {\n+        if let Err(AllocError { .. }) = empty_bytes.try_reserve(MAX_USIZE / 8) {\n         } else {\n             panic!(\"usize::MAX / 8 should trigger an OOM!\")\n         }"}, {"sha": "26db651ef8911d8194532f0f71a4a870586f3373", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -1,5 +1,5 @@\n use crate::borrow::Borrow;\n-use crate::collections::CollectionAllocErr;\n+use crate::collections::TryReserveError;\n use crate::fmt;\n use crate::hash::{Hash, BuildHasher};\n use crate::iter::{Chain, FromIterator, FusedIterator};\n@@ -383,7 +383,7 @@ impl<T, S> HashSet<T, S>\n     /// ```\n     #[inline]\n     #[unstable(feature = \"try_reserve\", reason = \"new API\", issue=\"48043\")]\n-    pub fn try_reserve(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {\n+    pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {\n         self.map.try_reserve(additional)\n     }\n "}, {"sha": "f5957466be841009683e087023f5527bd8951e3a", "filename": "src/libstd/collections/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibstd%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibstd%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fmod.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -427,7 +427,7 @@ pub use self::hash_map::HashMap;\n pub use self::hash_set::HashSet;\n \n #[unstable(feature = \"try_reserve\", reason = \"new API\", issue=\"48043\")]\n-pub use alloc_crate::collections::CollectionAllocErr;\n+pub use alloc_crate::collections::TryReserveError;\n \n mod hash;\n "}, {"sha": "c3882bacf87eb0bcdbadcc9eb6a144772cac95a6", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -228,7 +228,6 @@\n // std is implemented with unstable features, many of which are internal\n // compiler details that will never be stable\n // NB: the following list is sorted to minimize merge conflicts.\n-#![feature(__rust_unstable_column)]\n #![feature(alloc_error_handler)]\n #![feature(alloc_layout_extra)]\n #![feature(allocator_api)]\n@@ -251,6 +250,7 @@\n #![feature(concat_idents)]\n #![feature(const_cstr_unchecked)]\n #![feature(const_raw_ptr_deref)]\n+#![feature(container_error_extra)]\n #![feature(core_intrinsics)]\n #![feature(custom_test_frameworks)]\n #![feature(doc_alias)]\n@@ -550,7 +550,6 @@ pub use core::{\n     option_env,\n     stringify,\n     // Unstable\n-    __rust_unstable_column,\n     asm,\n     concat_idents,\n     format_args_nl,"}, {"sha": "cbeaf20b13adc923fc5a913e378fdb76a56a316b", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -53,20 +53,20 @@\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow_internal_unstable(__rust_unstable_column, libstd_sys_internals)]\n+#[allow_internal_unstable(libstd_sys_internals)]\n macro_rules! panic {\n     () => ({\n         $crate::panic!(\"explicit panic\")\n     });\n     ($msg:expr) => ({\n-        $crate::rt::begin_panic($msg, &(file!(), line!(), __rust_unstable_column!()))\n+        $crate::rt::begin_panic($msg, &($crate::file!(), $crate::line!(), $crate::column!()))\n     });\n     ($msg:expr,) => ({\n         $crate::panic!($msg)\n     });\n     ($fmt:expr, $($arg:tt)+) => ({\n-        $crate::rt::begin_panic_fmt(&format_args!($fmt, $($arg)+),\n-                                    &(file!(), line!(), __rust_unstable_column!()))\n+        $crate::rt::begin_panic_fmt(&$crate::format_args!($fmt, $($arg)+),\n+                                    &($crate::file!(), $crate::line!(), $crate::column!()))\n     });\n }\n \n@@ -113,7 +113,7 @@ macro_rules! panic {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow_internal_unstable(print_internals)]\n macro_rules! print {\n-    ($($arg:tt)*) => ($crate::io::_print(format_args!($($arg)*)));\n+    ($($arg:tt)*) => ($crate::io::_print($crate::format_args!($($arg)*)));\n }\n \n /// Prints to the standard output, with a newline.\n@@ -147,7 +147,7 @@ macro_rules! print {\n macro_rules! println {\n     () => ($crate::print!(\"\\n\"));\n     ($($arg:tt)*) => ({\n-        $crate::io::_print(format_args_nl!($($arg)*));\n+        $crate::io::_print($crate::format_args_nl!($($arg)*));\n     })\n }\n \n@@ -176,7 +176,7 @@ macro_rules! println {\n #[stable(feature = \"eprint\", since = \"1.19.0\")]\n #[allow_internal_unstable(print_internals)]\n macro_rules! eprint {\n-    ($($arg:tt)*) => ($crate::io::_eprint(format_args!($($arg)*)));\n+    ($($arg:tt)*) => ($crate::io::_eprint($crate::format_args!($($arg)*)));\n }\n \n /// Prints to the standard error, with a newline.\n@@ -206,7 +206,7 @@ macro_rules! eprint {\n macro_rules! eprintln {\n     () => ($crate::eprint!(\"\\n\"));\n     ($($arg:tt)*) => ({\n-        $crate::io::_eprint(format_args_nl!($($arg)*));\n+        $crate::io::_eprint($crate::format_args_nl!($($arg)*));\n     })\n }\n \n@@ -337,15 +337,15 @@ macro_rules! eprintln {\n #[stable(feature = \"dbg_macro\", since = \"1.32.0\")]\n macro_rules! dbg {\n     () => {\n-        $crate::eprintln!(\"[{}:{}]\", file!(), line!());\n+        $crate::eprintln!(\"[{}:{}]\", $crate::file!(), $crate::line!());\n     };\n     ($val:expr) => {\n         // Use of `match` here is intentional because it affects the lifetimes\n         // of temporaries - https://stackoverflow.com/a/48732525/1063961\n         match $val {\n             tmp => {\n                 $crate::eprintln!(\"[{}:{}] {} = {:#?}\",\n-                    file!(), line!(), stringify!($val), &tmp);\n+                    $crate::file!(), $crate::line!(), $crate::stringify!($val), &tmp);\n                 tmp\n             }\n         }"}, {"sha": "3e4cf91127fc5b87ad1d99594260f1f3c327466e", "filename": "src/libstd/prelude/v1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibstd%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibstd%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fv1.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -40,7 +40,6 @@ pub use crate::result::Result::{self, Ok, Err};\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[doc(no_inline)]\n pub use core::prelude::v1::{\n-    __rust_unstable_column,\n     asm,\n     assert,\n     cfg,"}, {"sha": "dac402921b95c2b0ac379d8796e2cc77e96abe24", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -25,7 +25,6 @@ use syntax_pos::{Span, DUMMY_SP, FileName};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n-use std::fs;\n use std::io::ErrorKind;\n use std::{iter, mem};\n use std::ops::DerefMut;\n@@ -1241,13 +1240,11 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                     }\n \n                     let filename = self.cx.resolve_path(&*file.as_str(), it.span());\n-                    match fs::read_to_string(&filename) {\n-                        Ok(src) => {\n-                            let src_interned = Symbol::intern(&src);\n-\n-                            // Add this input file to the code map to make it available as\n-                            // dependency information\n-                            self.cx.source_map().new_source_file(filename.into(), src);\n+                    match self.cx.source_map().load_file(&filename) {\n+                        Ok(source_file) => {\n+                            let src = source_file.src.as_ref()\n+                                .expect(\"freshly loaded file should have a source\");\n+                            let src_interned = Symbol::intern(src.as_str());\n \n                             let include_info = vec![\n                                 ast::NestedMetaItem::MetaItem("}, {"sha": "7190cfd72a959af92d34022f04d7cea89c0817e4", "filename": "src/libsyntax/source_map.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibsyntax%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibsyntax%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsource_map.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -171,6 +171,26 @@ impl SourceMap {\n         Ok(self.new_source_file(filename, src))\n     }\n \n+    /// Loads source file as a binary blob.\n+    ///\n+    /// Unlike `load_file`, guarantees that no normalization like BOM-removal\n+    /// takes place.\n+    pub fn load_binary_file(&self, path: &Path) -> io::Result<Vec<u8>> {\n+        // Ideally, this should use `self.file_loader`, but it can't\n+        // deal with binary files yet.\n+        let bytes = fs::read(path)?;\n+\n+        // We need to add file to the `SourceMap`, so that it is present\n+        // in dep-info. There's also an edge case that file might be both\n+        // loaded as a binary via `include_bytes!` and as proper `SourceFile`\n+        // via `mod`, so we try to use real file contents and not just an\n+        // empty string.\n+        let text = std::str::from_utf8(&bytes).unwrap_or(\"\")\n+            .to_string();\n+        self.new_source_file(path.to_owned().into(), text);\n+        Ok(bytes)\n+    }\n+\n     pub fn files(&self) -> MappedLockGuard<'_, Vec<Lrc<SourceFile>>> {\n         LockGuard::map(self.files.borrow(), |files| &mut files.source_files)\n     }"}, {"sha": "4add2261c6cda1f4605b97f22b3022f7adb7fa88", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -57,7 +57,6 @@ pub fn register_builtin_macros(resolver: &mut dyn syntax::ext::base::Resolver, e\n     }\n \n     register_bang! {\n-        __rust_unstable_column: source_util::expand_column,\n         asm: asm::expand_asm,\n         assert: assert::expand_assert,\n         cfg: cfg::expand_cfg,"}, {"sha": "e008ed710e4d07e1ea270bb1aa67d4fe26170705", "filename": "src/libsyntax_ext/source_util.rs", "status": "modified", "additions": 11, "deletions": 26, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibsyntax_ext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibsyntax_ext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fsource_util.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -9,8 +9,6 @@ use syntax::tokenstream;\n use smallvec::SmallVec;\n use syntax_pos::{self, Pos, Span};\n \n-use std::fs;\n-use std::io::ErrorKind;\n use rustc_data_structures::sync::Lrc;\n \n // These macros all relate to the file system; they either return\n@@ -114,20 +112,17 @@ pub fn expand_include_str(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::To\n         None => return DummyResult::any(sp)\n     };\n     let file = cx.resolve_path(file, sp);\n-    match fs::read_to_string(&file) {\n-        Ok(src) => {\n-            let interned_src = Symbol::intern(&src);\n-\n-            // Add this input file to the code map to make it available as\n-            // dependency information\n-            cx.source_map().new_source_file(file.into(), src);\n-\n-            base::MacEager::expr(cx.expr_str(sp, interned_src))\n+    match cx.source_map().load_binary_file(&file) {\n+        Ok(bytes) => match std::str::from_utf8(&bytes) {\n+            Ok(src) => {\n+                let interned_src = Symbol::intern(&src);\n+                base::MacEager::expr(cx.expr_str(sp, interned_src))\n+            }\n+            Err(_) => {\n+                cx.span_err(sp, &format!(\"{} wasn't a utf-8 file\", file.display()));\n+                DummyResult::any(sp)\n+            }\n         },\n-        Err(ref e) if e.kind() == ErrorKind::InvalidData => {\n-            cx.span_err(sp, &format!(\"{} wasn't a utf-8 file\", file.display()));\n-            DummyResult::any(sp)\n-        }\n         Err(e) => {\n             cx.span_err(sp, &format!(\"couldn't read {}: {}\", file.display(), e));\n             DummyResult::any(sp)\n@@ -142,18 +137,8 @@ pub fn expand_include_bytes(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::\n         None => return DummyResult::any(sp)\n     };\n     let file = cx.resolve_path(file, sp);\n-    match fs::read(&file) {\n+    match cx.source_map().load_binary_file(&file) {\n         Ok(bytes) => {\n-            // Add the contents to the source map if it contains UTF-8.\n-            let (contents, bytes) = match String::from_utf8(bytes) {\n-                Ok(s) => {\n-                    let bytes = s.as_bytes().to_owned();\n-                    (s, bytes)\n-                },\n-                Err(e) => (String::new(), e.into_bytes()),\n-            };\n-            cx.source_map().new_source_file(file.into(), contents);\n-\n             base::MacEager::expr(cx.expr_lit(sp, ast::LitKind::ByteStr(Lrc::new(bytes))))\n         },\n         Err(e) => {"}, {"sha": "27fc66d3b09e6b4a6cb2d388e0117f109efa78e0", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -609,7 +609,6 @@ symbols! {\n         rust_eh_personality,\n         rust_eh_unwind_resume,\n         rust_oom,\n-        __rust_unstable_column,\n         rvalue_static_promotion,\n         sanitizer_runtime,\n         _Self,"}, {"sha": "f24d957d67b7588ed323aebdc9ce123a91f6966f", "filename": "src/libunwind/build.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibunwind%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Flibunwind%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Fbuild.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -23,7 +23,11 @@ fn main() {\n     } else if target.contains(\"netbsd\") {\n         println!(\"cargo:rustc-link-lib=gcc_s\");\n     } else if target.contains(\"openbsd\") {\n-        println!(\"cargo:rustc-link-lib=c++abi\");\n+        if target.contains(\"sparc64\") {\n+            println!(\"cargo:rustc-link-lib=gcc\");\n+        } else {\n+            println!(\"cargo:rustc-link-lib=c++abi\");\n+        }\n     } else if target.contains(\"solaris\") {\n         println!(\"cargo:rustc-link-lib=gcc_s\");\n     } else if target.contains(\"dragonfly\") {"}, {"sha": "489dc8ad1118cda0191fe8529129674a4583179c", "filename": "src/test/ui/.gitattributes", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Ftest%2Fui%2F.gitattributes", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Ftest%2Fui%2F.gitattributes", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2F.gitattributes?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -1,2 +1,3 @@\n lexer-crlf-line-endings-string-literal-doc-comment.rs -text\n trailing-carriage-return-in-string.rs -text\n+*.bin -text"}, {"sha": "64fd1a4a78d96c3179243de951c99861dded5791", "filename": "src/test/ui/async-await/issues/issue-63388-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.nll.stderr?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -4,7 +4,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     ) -> &dyn Foo\n    |          ^^^^^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#27r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#22r\n \n error: lifetime may not live long enough\n   --> $DIR/issue-63388-1.rs:15:5"}, {"sha": "dc3fbed593b796d07925ca5089eb0b89bf3a1eb5", "filename": "src/test/ui/dropck/dropck_trait_cycle_checked.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Ftest%2Fui%2Fdropck%2Fdropck_trait_cycle_checked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Ftest%2Fui%2Fdropck%2Fdropck_trait_cycle_checked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck_trait_cycle_checked.stderr?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -2,7 +2,7 @@ error[E0597]: `o2` does not live long enough\n   --> $DIR/dropck_trait_cycle_checked.rs:111:13\n    |\n LL |     let (o1, o2, o3): (Box<dyn Obj>, Box<dyn Obj>, Box<dyn Obj>) = (O::new(), O::new(), O::new());\n-   |                                                                               -------- cast requires that `o2` is borrowed for `'static`\n+   |                                                                     -------- cast requires that `o2` is borrowed for `'static`\n LL |     o1.set0(&o2);\n    |             ^^^ borrowed value does not live long enough\n ...\n@@ -13,7 +13,7 @@ error[E0597]: `o3` does not live long enough\n   --> $DIR/dropck_trait_cycle_checked.rs:112:13\n    |\n LL |     let (o1, o2, o3): (Box<dyn Obj>, Box<dyn Obj>, Box<dyn Obj>) = (O::new(), O::new(), O::new());\n-   |                                                                                         -------- cast requires that `o3` is borrowed for `'static`\n+   |                                                                     -------- cast requires that `o3` is borrowed for `'static`\n LL |     o1.set0(&o2);\n LL |     o1.set1(&o3);\n    |             ^^^ borrowed value does not live long enough\n@@ -37,7 +37,7 @@ error[E0597]: `o3` does not live long enough\n   --> $DIR/dropck_trait_cycle_checked.rs:114:13\n    |\n LL |     let (o1, o2, o3): (Box<dyn Obj>, Box<dyn Obj>, Box<dyn Obj>) = (O::new(), O::new(), O::new());\n-   |                                                                                         -------- cast requires that `o3` is borrowed for `'static`\n+   |                                                                               -------- cast requires that `o3` is borrowed for `'static`\n ...\n LL |     o2.set1(&o3);\n    |             ^^^ borrowed value does not live long enough\n@@ -49,7 +49,7 @@ error[E0597]: `o1` does not live long enough\n   --> $DIR/dropck_trait_cycle_checked.rs:115:13\n    |\n LL |     let (o1, o2, o3): (Box<dyn Obj>, Box<dyn Obj>, Box<dyn Obj>) = (O::new(), O::new(), O::new());\n-   |                                                                     -------- cast requires that `o1` is borrowed for `'static`\n+   |                                                                                         -------- cast requires that `o1` is borrowed for `'static`\n ...\n LL |     o3.set0(&o1);\n    |             ^^^ borrowed value does not live long enough\n@@ -61,7 +61,7 @@ error[E0597]: `o2` does not live long enough\n   --> $DIR/dropck_trait_cycle_checked.rs:116:13\n    |\n LL |     let (o1, o2, o3): (Box<dyn Obj>, Box<dyn Obj>, Box<dyn Obj>) = (O::new(), O::new(), O::new());\n-   |                                                                               -------- cast requires that `o2` is borrowed for `'static`\n+   |                                                                                         -------- cast requires that `o2` is borrowed for `'static`\n ...\n LL |     o3.set1(&o2);\n    |             ^^^ borrowed value does not live long enough"}, {"sha": "ce4e0b8311a31a78c537a7282133ab4f9306cdad", "filename": "src/test/ui/include-macros/data.bin", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Ftest%2Fui%2Finclude-macros%2Fdata.bin", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Ftest%2Fui%2Finclude-macros%2Fdata.bin", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finclude-macros%2Fdata.bin?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -0,0 +1,2 @@\n+\ufeffThis file starts with BOM.\r\n+Lines are separated by \\r\\n.\r"}, {"sha": "889f08e606ec9a7b610d409e316b6fc8c1bb30a0", "filename": "src/test/ui/include-macros/normalization.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Ftest%2Fui%2Finclude-macros%2Fnormalization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Ftest%2Fui%2Finclude-macros%2Fnormalization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finclude-macros%2Fnormalization.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -0,0 +1,12 @@\n+// run-pass\n+\n+fn main() {\n+    assert_eq!(\n+        &include_bytes!(\"data.bin\")[..],\n+        &b\"\\xEF\\xBB\\xBFThis file starts with BOM.\\r\\nLines are separated by \\\\r\\\\n.\\r\\n\"[..],\n+    );\n+    assert_eq!(\n+        include_str!(\"data.bin\"),\n+        \"\\u{FEFF}This file starts with BOM.\\r\\nLines are separated by \\\\r\\\\n.\\r\\n\",\n+    );\n+}"}, {"sha": "202a9235adbace98ed0df1f04f76f7d78adce6f8", "filename": "src/test/ui/macros/trace-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.stderr?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -5,5 +5,5 @@ LL |     println!(\"Hello, World!\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expanding `println! { \"Hello, World!\" }`\n-   = note: to `{ $crate :: io :: _print (format_args_nl ! (\"Hello, World!\")) ; }`\n+   = note: to `{ $crate :: io :: _print ($crate :: format_args_nl ! (\"Hello, World!\")) ; }`\n "}, {"sha": "053806ead2d12bcc50c1923793923ac3a21bb94d", "filename": "src/test/ui/rust-unstable-column-gated.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a32ad0dd51f8451aa6e39d7e9ea89483cb8fcfa/src%2Ftest%2Fui%2Frust-unstable-column-gated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a32ad0dd51f8451aa6e39d7e9ea89483cb8fcfa/src%2Ftest%2Fui%2Frust-unstable-column-gated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-unstable-column-gated.rs?ref=9a32ad0dd51f8451aa6e39d7e9ea89483cb8fcfa", "patch": "@@ -1,4 +0,0 @@\n-fn main() {\n-    println!(\"{}\", __rust_unstable_column!());\n-    //~^ ERROR use of unstable library feature '__rust_unstable_column'\n-}"}, {"sha": "7db1b01fb0e63053dd036876e4390d84f520febd", "filename": "src/test/ui/rust-unstable-column-gated.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9a32ad0dd51f8451aa6e39d7e9ea89483cb8fcfa/src%2Ftest%2Fui%2Frust-unstable-column-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a32ad0dd51f8451aa6e39d7e9ea89483cb8fcfa/src%2Ftest%2Fui%2Frust-unstable-column-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-unstable-column-gated.stderr?ref=9a32ad0dd51f8451aa6e39d7e9ea89483cb8fcfa", "patch": "@@ -1,11 +0,0 @@\n-error[E0658]: use of unstable library feature '__rust_unstable_column': internal implementation detail of the `panic` macro\n-  --> $DIR/rust-unstable-column-gated.rs:2:20\n-   |\n-LL |     println!(\"{}\", __rust_unstable_column!());\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add `#![feature(__rust_unstable_column)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "e33001b9244da498e104e368cd59837de7041fcf", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -4,7 +4,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n    |                                             ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:10:50\n@@ -30,7 +30,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n    |                                                          ^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:19:62"}, {"sha": "3e58c973019758312630e9098034f8b55054f438", "filename": "src/test/ui/self/elision/lt-ref-self-async.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -4,7 +4,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                                          ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#28r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:15:47\n@@ -24,7 +24,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                                                ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#28r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:21:53\n@@ -44,7 +44,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                                         ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#28r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:25:62\n@@ -64,7 +64,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                                         ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#28r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:29:62\n@@ -84,7 +84,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                                                  ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#28r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:33:71\n@@ -104,7 +104,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                                              ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#28r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:37:67"}, {"sha": "b8a538088109fe1155f5e8d691f083f812932472", "filename": "src/test/ui/self/elision/ref-mut-self-async.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -4,7 +4,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n    |                                              ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:15:51\n@@ -24,7 +24,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n    |                                                    ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:21:57\n@@ -44,7 +44,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n    |                                                             ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:25:66\n@@ -64,7 +64,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n    |                                                             ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:29:66\n@@ -84,7 +84,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n    |                                                                      ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:33:75\n@@ -104,7 +104,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n    |                                                                      ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:37:75"}, {"sha": "cee008de6671fb4347b286b2fadf77802c7faf43", "filename": "src/test/ui/self/elision/ref-mut-struct-async.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -4,7 +4,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n    |                                                        ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct-async.rs:15:61\n@@ -24,7 +24,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n    |                                                                 ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct-async.rs:19:70\n@@ -44,7 +44,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n    |                                                                 ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct-async.rs:23:70\n@@ -64,7 +64,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n    |                                                                          ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct-async.rs:27:79\n@@ -84,7 +84,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n    |                                                                          ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct-async.rs:31:79"}, {"sha": "c3c15485b229ce57cd01b9a3710b7d2ba9a45728", "filename": "src/test/ui/self/elision/ref-self-async.nll.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -4,7 +4,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                                          ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-self-async.rs:24:47\n@@ -24,7 +24,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                                                ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-self-async.rs:30:53\n@@ -44,7 +44,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                                         ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-self-async.rs:34:62\n@@ -64,7 +64,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                                         ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-self-async.rs:38:62\n@@ -84,7 +84,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                                                  ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-self-async.rs:42:71\n@@ -104,7 +104,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                                                  ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-self-async.rs:46:71\n@@ -124,7 +124,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n    |                                                                     ^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-self-async.rs:50:73"}, {"sha": "ff50f6825bc6b01d75333dcccbc3ba75abfd2de5", "filename": "src/test/ui/self/elision/ref-struct-async.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -4,7 +4,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n    |                                                    ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-struct-async.rs:15:57\n@@ -24,7 +24,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n    |                                                             ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-struct-async.rs:19:66\n@@ -44,7 +44,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n    |                                                             ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-struct-async.rs:23:66\n@@ -64,7 +64,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n    |                                                                      ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-struct-async.rs:27:75\n@@ -84,7 +84,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n    |                                                                  ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-struct-async.rs:31:71"}, {"sha": "3da6be74129f457d356f7279d16b24f8dc0cd8dd", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfd698f37184da42254a03ed466ab1f90e6fb6c/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=bdfd698f37184da42254a03ed466ab1f90e6fb6c", "patch": "@@ -1659,10 +1659,10 @@ impl<'test> TestCx<'test> {\n             _ if self.config.target.contains(\"vxworks\") => {\n                 let aux_dir = self.aux_output_dir_name();\n                 let ProcArgs { prog, args } = self.make_run_args();\n-                let mut vx_run = Command::new(\"vx-run\");\n-                vx_run.args(&[&prog]).args(args).envs(env.clone());\n+                let mut wr_run = Command::new(\"wr-run\");\n+                wr_run.args(&[&prog]).args(args).envs(env.clone());\n                 self.compose_and_run(\n-                    vx_run,\n+                    wr_run,\n                     self.config.run_lib_path.to_str().unwrap(),\n                     Some(aux_dir.to_str().unwrap()),\n                     None,"}]}