{"sha": "3aaaf924cb649ecc3b1a59653f47d1735fa7cb5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhYWFmOTI0Y2I2NDllY2MzYjFhNTk2NTNmNDdkMTczNWZhN2NiNWQ=", "commit": {"author": {"name": "Leander Tentrup", "email": "leander.tentrup@gmail.com", "date": "2020-06-07T20:57:24Z"}, "committer": {"name": "Leander Tentrup", "email": "leander.tentrup@gmail.com", "date": "2020-06-07T20:57:24Z"}, "message": "Fix bug in lexer for format specifier where the `type` and `width` were not correctly distinguished", "tree": {"sha": "31d78ed2f7c23ff467b6fe7cd213b57acd4edbe1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31d78ed2f7c23ff467b6fe7cd213b57acd4edbe1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3aaaf924cb649ecc3b1a59653f47d1735fa7cb5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3aaaf924cb649ecc3b1a59653f47d1735fa7cb5d", "html_url": "https://github.com/rust-lang/rust/commit/3aaaf924cb649ecc3b1a59653f47d1735fa7cb5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3aaaf924cb649ecc3b1a59653f47d1735fa7cb5d/comments", "author": {"login": "ltentrup", "id": 201808, "node_id": "MDQ6VXNlcjIwMTgwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/201808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ltentrup", "html_url": "https://github.com/ltentrup", "followers_url": "https://api.github.com/users/ltentrup/followers", "following_url": "https://api.github.com/users/ltentrup/following{/other_user}", "gists_url": "https://api.github.com/users/ltentrup/gists{/gist_id}", "starred_url": "https://api.github.com/users/ltentrup/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ltentrup/subscriptions", "organizations_url": "https://api.github.com/users/ltentrup/orgs", "repos_url": "https://api.github.com/users/ltentrup/repos", "events_url": "https://api.github.com/users/ltentrup/events{/privacy}", "received_events_url": "https://api.github.com/users/ltentrup/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ltentrup", "id": 201808, "node_id": "MDQ6VXNlcjIwMTgwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/201808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ltentrup", "html_url": "https://github.com/ltentrup", "followers_url": "https://api.github.com/users/ltentrup/followers", "following_url": "https://api.github.com/users/ltentrup/following{/other_user}", "gists_url": "https://api.github.com/users/ltentrup/gists{/gist_id}", "starred_url": "https://api.github.com/users/ltentrup/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ltentrup/subscriptions", "organizations_url": "https://api.github.com/users/ltentrup/orgs", "repos_url": "https://api.github.com/users/ltentrup/repos", "events_url": "https://api.github.com/users/ltentrup/events{/privacy}", "received_events_url": "https://api.github.com/users/ltentrup/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc340f12a39e7cd8b495b84c009052c4d441d867", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc340f12a39e7cd8b495b84c009052c4d441d867", "html_url": "https://github.com/rust-lang/rust/commit/dc340f12a39e7cd8b495b84c009052c4d441d867"}], "stats": {"total": 39, "additions": 24, "deletions": 15}, "files": [{"sha": "6a5cf0e7449bb8dce24cf83041e62a45c7f1a5a3", "filename": "crates/ra_ide/src/snapshots/highlight_strings.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3aaaf924cb649ecc3b1a59653f47d1735fa7cb5d/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_strings.html", "raw_url": "https://github.com/rust-lang/rust/raw/3aaaf924cb649ecc3b1a59653f47d1735fa7cb5d/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_strings.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_strings.html?ref=3aaaf924cb649ecc3b1a59653f47d1735fa7cb5d", "patch": "@@ -63,7 +63,7 @@\n     <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">^</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span>, <span class=\"string_literal\">\"x\"</span>);\n     <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">&gt;</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span>, <span class=\"string_literal\">\"x\"</span>);\n     <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">+</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span>, <span class=\"numeric_literal\">5</span>);\n-    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">#</span><span class=\"variable\">x</span><span class=\"string_literal\">}!\"</span>, <span class=\"numeric_literal\">27</span>);\n+    <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">#</span><span class=\"variable\">x</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span>, <span class=\"numeric_literal\">27</span>);\n     <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span>, <span class=\"numeric_literal\">5</span>);\n     <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span>, -<span class=\"numeric_literal\">5</span>);\n     <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">#</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">10</span><span class=\"variable\">x</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span>, <span class=\"numeric_literal\">27</span>);"}, {"sha": "56378385a1a967bb1581356be14f788db727b615", "filename": "crates/ra_syntax/src/ast/tokens.rs", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3aaaf924cb649ecc3b1a59653f47d1735fa7cb5d/crates%2Fra_syntax%2Fsrc%2Fast%2Ftokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aaaf924cb649ecc3b1a59653f47d1735fa7cb5d/crates%2Fra_syntax%2Fsrc%2Fast%2Ftokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Ftokens.rs?ref=3aaaf924cb649ecc3b1a59653f47d1735fa7cb5d", "patch": "@@ -335,16 +335,26 @@ pub trait HasFormatSpecifier: AstToken {\n                             }\n                             c if c == '_' || c.is_alphabetic() => {\n                                 read_identifier(&mut chars, &mut callback);\n-                                if chars.peek().and_then(|next| next.1.as_ref().ok()).copied()\n-                                    != Some('$')\n-                                {\n-                                    continue;\n-                                }\n-                                skip_char_and_emit(\n-                                    &mut chars,\n-                                    FormatSpecifier::DollarSign,\n-                                    &mut callback,\n-                                );\n+                                // can be either width (indicated by dollar sign, or type in which case\n+                                // the next sign has to be `}`)\n+                                let next =\n+                                    chars.peek().and_then(|next| next.1.as_ref().ok()).copied();\n+                                match next {\n+                                    Some('$') => skip_char_and_emit(\n+                                        &mut chars,\n+                                        FormatSpecifier::DollarSign,\n+                                        &mut callback,\n+                                    ),\n+                                    Some('}') => {\n+                                        skip_char_and_emit(\n+                                            &mut chars,\n+                                            FormatSpecifier::Close,\n+                                            &mut callback,\n+                                        );\n+                                        continue;\n+                                    }\n+                                    _ => continue,\n+                                };\n                             }\n                             _ => {}\n                         }\n@@ -416,12 +426,11 @@ pub trait HasFormatSpecifier: AstToken {\n                         }\n                     }\n \n-                    let mut cloned = chars.clone().take(2);\n-                    let first = cloned.next().and_then(|next| next.1.as_ref().ok()).copied();\n-                    if first != Some('}') {\n+                    if let Some((_, Ok('}'))) = chars.peek() {\n+                        skip_char_and_emit(&mut chars, FormatSpecifier::Close, &mut callback);\n+                    } else {\n                         continue;\n                     }\n-                    skip_char_and_emit(&mut chars, FormatSpecifier::Close, &mut callback);\n                 }\n                 _ => {\n                     while let Some((_, Ok(next_char))) = chars.peek() {"}]}