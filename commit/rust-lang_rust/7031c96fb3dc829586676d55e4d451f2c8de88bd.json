{"sha": "7031c96fb3dc829586676d55e4d451f2c8de88bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwMzFjOTZmYjNkYzgyOTU4NjY3NmQ1NWU0ZDQ1MWYyYzhkZTg4YmQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-04-25T17:07:25Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-04-25T17:07:53Z"}, "message": "Call panic lang item on failed TerminatorKind::Assert\n\nFixes #164", "tree": {"sha": "404178259b8c91cb72553b2c69af96d13eda11a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/404178259b8c91cb72553b2c69af96d13eda11a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7031c96fb3dc829586676d55e4d451f2c8de88bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7031c96fb3dc829586676d55e4d451f2c8de88bd", "html_url": "https://github.com/rust-lang/rust/commit/7031c96fb3dc829586676d55e4d451f2c8de88bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7031c96fb3dc829586676d55e4d451f2c8de88bd/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dbbfe668fa78f83d72bae264cfd712ff7a900d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dbbfe668fa78f83d72bae264cfd712ff7a900d1", "html_url": "https://github.com/rust-lang/rust/commit/7dbbfe668fa78f83d72bae264cfd712ff7a900d1"}], "stats": {"total": 122, "additions": 79, "deletions": 43}, "files": [{"sha": "0b0039a1370a4fb6d609f9fb1443c6c390ab7335", "filename": "example/arbitrary_self_types_pointers_and_wrappers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7031c96fb3dc829586676d55e4d451f2c8de88bd/example%2Farbitrary_self_types_pointers_and_wrappers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7031c96fb3dc829586676d55e4d451f2c8de88bd/example%2Farbitrary_self_types_pointers_and_wrappers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Farbitrary_self_types_pointers_and_wrappers.rs?ref=7031c96fb3dc829586676d55e4d451f2c8de88bd", "patch": "@@ -13,7 +13,7 @@ use mini_core::*;\n macro_rules! assert_eq {\n     ($l:expr, $r: expr) => {\n         if $l != $r {\n-            panic(&(stringify!($l != $r), file!(), line!(), 0));\n+            panic(stringify!($l != $r));\n         }\n     }\n }"}, {"sha": "60085d35ae1641e504fdcf24e14df72a23bba3f9", "filename": "example/mini_core.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7031c96fb3dc829586676d55e4d451f2c8de88bd/example%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7031c96fb3dc829586676d55e4d451f2c8de88bd/example%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core.rs?ref=7031c96fb3dc829586676d55e4d451f2c8de88bd", "patch": "@@ -1,7 +1,7 @@\n #![feature(\n     no_core, lang_items, intrinsics, unboxed_closures, type_ascription, extern_types,\n     untagged_unions, decl_macro, rustc_attrs, transparent_unions, optin_builtin_traits,\n-    thread_local,\n+    thread_local, track_caller\n )]\n #![no_core]\n #![allow(dead_code)]\n@@ -394,9 +394,19 @@ pub trait FnMut<Args>: FnOnce<Args> {\n }\n \n #[lang = \"panic\"]\n-pub fn panic(&(_msg, _file, _line, _col): &(&'static str, &'static str, u32, u32)) -> ! {\n+#[track_caller]\n+pub fn panic(msg: &str) -> ! {\n     unsafe {\n-        libc::puts(\"Panicking\\0\" as *const str as *const u8);\n+        libc::puts(\"Panicking\\n\\0\" as *const str as *const u8);\n+        intrinsics::abort();\n+    }\n+}\n+\n+#[lang = \"panic_bounds_check\"]\n+#[track_caller]\n+fn panic_bounds_check(index: usize, len: usize) -> ! {\n+    unsafe {\n+        libc::printf(\"index out of bounds: the len is %d but the index is %d\\n\\0\" as *const str as *const i8, len, index);\n         intrinsics::abort();\n     }\n }"}, {"sha": "93eda4be31a9bb56f6794cfa4b7bd3ac14a53277", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7031c96fb3dc829586676d55e4d451f2c8de88bd/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7031c96fb3dc829586676d55e4d451f2c8de88bd/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=7031c96fb3dc829586676d55e4d451f2c8de88bd", "patch": "@@ -97,15 +97,15 @@ static NUM_REF: &'static u8 = unsafe { &NUM };\n macro_rules! assert {\n     ($e:expr) => {\n         if !$e {\n-            panic(&(stringify!(! $e), file!(), line!(), 0));\n+            panic(stringify!(! $e));\n         }\n     };\n }\n \n macro_rules! assert_eq {\n     ($l:expr, $r: expr) => {\n         if $l != $r {\n-            panic(&(stringify!($l != $r), file!(), line!(), 0));\n+            panic(stringify!($l != $r));\n         }\n     }\n }"}, {"sha": "f4a2fd566aca3756a8077cd13ab9fc197c714322", "filename": "src/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7031c96fb3dc829586676d55e4d451f2c8de88bd/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7031c96fb3dc829586676d55e4d451f2c8de88bd/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=7031c96fb3dc829586676d55e4d451f2c8de88bd", "patch": "@@ -206,7 +206,7 @@ impl<'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n         func_ref\n     }\n \n-    fn lib_call(\n+    pub(crate) fn lib_call(\n         &mut self,\n         name: &str,\n         input_tys: Vec<types::Type>,"}, {"sha": "b97279fb23563b5667a5aadde0e56ce03d7cdab2", "filename": "src/base.rs", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7031c96fb3dc829586676d55e4d451f2c8de88bd/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7031c96fb3dc829586676d55e4d451f2c8de88bd/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=7031c96fb3dc829586676d55e4d451f2c8de88bd", "patch": "@@ -241,14 +241,36 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n                 fx.bcx.ins().jump(target, &[]);\n \n                 fx.bcx.switch_to_block(failure);\n-                trap_panic(\n-                    fx,\n-                    format!(\n-                        \"[panic] Assert {:?} at {:?} failed.\",\n-                        msg,\n-                        bb_data.terminator().source_info.span\n-                    ),\n-                );\n+\n+                let location = fx.get_caller_location(bb_data.terminator().source_info.span).load_scalar(fx);\n+\n+                let args;\n+                let lang_item = match msg {\n+                    AssertKind::BoundsCheck { ref len, ref index } => {\n+                        let len = trans_operand(fx, len).load_scalar(fx);\n+                        let index = trans_operand(fx, index).load_scalar(fx);\n+                        args = [index, len, location];\n+                        rustc_hir::lang_items::PanicBoundsCheckFnLangItem\n+                    }\n+                    _ => {\n+                        let msg_str = msg.description();\n+                        let msg_ptr = fx.anonymous_str(\"assert\", msg_str);\n+                        let msg_len = fx.bcx.ins().iconst(fx.pointer_type, i64::try_from(msg_str.len()).unwrap());\n+                        args = [msg_ptr, msg_len, location];\n+                        rustc_hir::lang_items::PanicFnLangItem\n+                    }\n+                };\n+\n+                let def_id = fx.tcx.lang_items().require(lang_item).unwrap_or_else(|s| {\n+                    fx.tcx.sess.span_fatal(bb_data.terminator().source_info.span, &s)\n+                });\n+\n+                let instance = Instance::mono(fx.tcx, def_id);\n+                let symbol_name = fx.tcx.symbol_name(instance).name.as_str();\n+\n+                fx.lib_call(&*symbol_name, vec![fx.pointer_type, fx.pointer_type, fx.pointer_type], vec![], &args);\n+\n+                crate::trap::trap_unreachable(fx, \"panic lang item returned\");\n             }\n \n             TerminatorKind::SwitchInt {"}, {"sha": "0547e02b439724ac8789c4bd5699834b95b7b390", "filename": "src/common.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7031c96fb3dc829586676d55e4d451f2c8de88bd/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7031c96fb3dc829586676d55e4d451f2c8de88bd/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=7031c96fb3dc829586676d55e4d451f2c8de88bd", "patch": "@@ -410,4 +410,35 @@ impl<'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n     pub(crate) fn triple(&self) -> &target_lexicon::Triple {\n         self.module.isa().triple()\n     }\n+\n+    pub(crate) fn anonymous_str(&mut self, prefix: &str, msg: &str) -> Value {\n+        use std::collections::hash_map::DefaultHasher;\n+        use std::hash::{Hash, Hasher};\n+\n+        let mut hasher = DefaultHasher::new();\n+        msg.hash(&mut hasher);\n+        let msg_hash = hasher.finish();\n+        let mut data_ctx = DataContext::new();\n+        data_ctx.define(msg.as_bytes().to_vec().into_boxed_slice());\n+        let msg_id = self\n+            .module\n+            .declare_data(\n+                &format!(\"__{}_{:08x}\", prefix, msg_hash),\n+                Linkage::Local,\n+                false,\n+                false,\n+                None,\n+            )\n+            .unwrap();\n+\n+        // Ignore DuplicateDefinition error, as the data will be the same\n+        let _ = self.module.define_data(msg_id, &data_ctx);\n+\n+        let local_msg_id = self.module.declare_data_in_func(msg_id, self.bcx.func);\n+        #[cfg(debug_assertions)]\n+        {\n+            self.add_comment(local_msg_id, msg);\n+        }\n+        self.bcx.ins().global_value(self.pointer_type, local_msg_id)\n+    }\n }"}, {"sha": "bf644cd5f2f16a2b3fc73a941d89bbc7fc8f42b5", "filename": "src/trap.rs", "status": "modified", "additions": 1, "deletions": 28, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7031c96fb3dc829586676d55e4d451f2c8de88bd/src%2Ftrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7031c96fb3dc829586676d55e4d451f2c8de88bd/src%2Ftrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftrap.rs?ref=7031c96fb3dc829586676d55e4d451f2c8de88bd", "patch": "@@ -1,6 +1,3 @@\n-use std::collections::hash_map::DefaultHasher;\n-use std::hash::{Hash, Hasher};\n-\n use crate::prelude::*;\n \n fn codegen_print(fx: &mut FunctionCx<'_, '_, impl cranelift_module::Backend>, msg: &str) {\n@@ -24,31 +21,7 @@ fn codegen_print(fx: &mut FunctionCx<'_, '_, impl cranelift_module::Backend>, ms\n \n     let symbol_name = fx.tcx.symbol_name(fx.instance);\n     let real_msg = format!(\"trap at {:?} ({}): {}\\0\", fx.instance, symbol_name, msg);\n-    let mut hasher = DefaultHasher::new();\n-    real_msg.hash(&mut hasher);\n-    let msg_hash = hasher.finish();\n-    let mut data_ctx = DataContext::new();\n-    data_ctx.define(real_msg.as_bytes().to_vec().into_boxed_slice());\n-    let msg_id = fx\n-        .module\n-        .declare_data(\n-            &format!(\"__trap_{:08x}\", msg_hash),\n-            Linkage::Local,\n-            false,\n-            false,\n-            None,\n-        )\n-        .unwrap();\n-\n-    // Ignore DuplicateDefinition error, as the data will be the same\n-    let _ = fx.module.define_data(msg_id, &data_ctx);\n-\n-    let local_msg_id = fx.module.declare_data_in_func(msg_id, fx.bcx.func);\n-    #[cfg(debug_assertions)]\n-    {\n-        fx.add_comment(local_msg_id, msg);\n-    }\n-    let msg_ptr = fx.bcx.ins().global_value(pointer_ty(fx.tcx), local_msg_id);\n+    let msg_ptr = fx.anonymous_str(\"trap\", &real_msg);\n     fx.bcx.ins().call(puts, &[msg_ptr]);\n }\n "}]}