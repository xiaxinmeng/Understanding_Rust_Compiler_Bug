{"sha": "2446a215954a99f9d33019fad7d415ef9c083502", "node_id": "C_kwDOAAsO6NoAKDI0NDZhMjE1OTU0YTk5ZjlkMzMwMTlmYWQ3ZDQxNWVmOWMwODM1MDI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-01T06:18:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-01T06:18:39Z"}, "message": "Auto merge of #91324 - eggyal:avoid-uneccesary-clone-of-annotatable, r=Aaron1011\n\nAvoid uneccessary clone of Annotatable\n\nAddresses FIXME comment created in #82608\n\nr? `@Aaron1011`", "tree": {"sha": "09bda74e07e02dff3e0f876b1753ac323a750dcd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09bda74e07e02dff3e0f876b1753ac323a750dcd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2446a215954a99f9d33019fad7d415ef9c083502", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2446a215954a99f9d33019fad7d415ef9c083502", "html_url": "https://github.com/rust-lang/rust/commit/2446a215954a99f9d33019fad7d415ef9c083502", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2446a215954a99f9d33019fad7d415ef9c083502/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d384ff79308c4eb0a3679817cd0def0147ad8612", "url": "https://api.github.com/repos/rust-lang/rust/commits/d384ff79308c4eb0a3679817cd0def0147ad8612", "html_url": "https://github.com/rust-lang/rust/commit/d384ff79308c4eb0a3679817cd0def0147ad8612"}, {"sha": "d05e4d2c9bc096932dae8502a72fe831b9872ae3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d05e4d2c9bc096932dae8502a72fe831b9872ae3", "html_url": "https://github.com/rust-lang/rust/commit/d05e4d2c9bc096932dae8502a72fe831b9872ae3"}], "stats": {"total": 52, "additions": 30, "deletions": 22}, "files": [{"sha": "8cc761dfd513aa73da18d9136d4c6ff64233e495", "filename": "compiler/rustc_builtin_macros/src/cfg_eval.rs", "status": "modified", "additions": 30, "deletions": 22, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/2446a215954a99f9d33019fad7d415ef9c083502/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2446a215954a99f9d33019fad7d415ef9c083502/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs?ref=2446a215954a99f9d33019fad7d415ef9c083502", "patch": "@@ -11,7 +11,7 @@ use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_expand::config::StripUnconfigured;\n use rustc_expand::configure;\n use rustc_feature::Features;\n-use rustc_parse::parser::ForceCollect;\n+use rustc_parse::parser::{ForceCollect, Parser};\n use rustc_session::utils::FlattenNonterminals;\n use rustc_session::Session;\n use rustc_span::symbol::sym;\n@@ -138,8 +138,34 @@ impl CfgEval<'_, '_> {\n         // the location of `#[cfg]` and `#[cfg_attr]` in the token stream. The tokenization\n         // process is lossless, so this process is invisible to proc-macros.\n \n-        // FIXME - get rid of this clone\n-        let nt = annotatable.clone().into_nonterminal();\n+        let parse_annotatable_with: fn(&mut Parser<'_>) -> _ = match annotatable {\n+            Annotatable::Item(_) => {\n+                |parser| Annotatable::Item(parser.parse_item(ForceCollect::Yes).unwrap().unwrap())\n+            }\n+            Annotatable::TraitItem(_) => |parser| {\n+                Annotatable::TraitItem(\n+                    parser.parse_trait_item(ForceCollect::Yes).unwrap().unwrap().unwrap(),\n+                )\n+            },\n+            Annotatable::ImplItem(_) => |parser| {\n+                Annotatable::ImplItem(\n+                    parser.parse_impl_item(ForceCollect::Yes).unwrap().unwrap().unwrap(),\n+                )\n+            },\n+            Annotatable::ForeignItem(_) => |parser| {\n+                Annotatable::ForeignItem(\n+                    parser.parse_foreign_item(ForceCollect::Yes).unwrap().unwrap().unwrap(),\n+                )\n+            },\n+            Annotatable::Stmt(_) => |parser| {\n+                Annotatable::Stmt(P(parser.parse_stmt(ForceCollect::Yes).unwrap().unwrap()))\n+            },\n+            Annotatable::Expr(_) => {\n+                |parser| Annotatable::Expr(parser.parse_expr_force_collect().unwrap())\n+            }\n+            _ => unreachable!(),\n+        };\n+        let nt = annotatable.into_nonterminal();\n \n         let mut orig_tokens = rustc_parse::nt_to_tokenstream(\n             &nt,\n@@ -173,25 +199,7 @@ impl CfgEval<'_, '_> {\n         let mut parser =\n             rustc_parse::stream_to_parser(&self.cfg.sess.parse_sess, orig_tokens, None);\n         parser.capture_cfg = true;\n-        annotatable = match annotatable {\n-            Annotatable::Item(_) => {\n-                Annotatable::Item(parser.parse_item(ForceCollect::Yes).unwrap().unwrap())\n-            }\n-            Annotatable::TraitItem(_) => Annotatable::TraitItem(\n-                parser.parse_trait_item(ForceCollect::Yes).unwrap().unwrap().unwrap(),\n-            ),\n-            Annotatable::ImplItem(_) => Annotatable::ImplItem(\n-                parser.parse_impl_item(ForceCollect::Yes).unwrap().unwrap().unwrap(),\n-            ),\n-            Annotatable::ForeignItem(_) => Annotatable::ForeignItem(\n-                parser.parse_foreign_item(ForceCollect::Yes).unwrap().unwrap().unwrap(),\n-            ),\n-            Annotatable::Stmt(_) => {\n-                Annotatable::Stmt(P(parser.parse_stmt(ForceCollect::Yes).unwrap().unwrap()))\n-            }\n-            Annotatable::Expr(_) => Annotatable::Expr(parser.parse_expr_force_collect().unwrap()),\n-            _ => unreachable!(),\n-        };\n+        annotatable = parse_annotatable_with(&mut parser);\n \n         // Now that we have our re-parsed `AttrAnnotatedTokenStream`, recursively configuring\n         // our attribute target will correctly the tokens as well."}]}