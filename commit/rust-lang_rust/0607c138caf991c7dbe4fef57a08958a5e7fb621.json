{"sha": "0607c138caf991c7dbe4fef57a08958a5e7fb621", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2MDdjMTM4Y2FmOTkxYzdkYmU0ZmVmNTdhMDg5NThhNWU3ZmI2MjE=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2013-12-28T00:17:36Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2013-12-29T04:16:03Z"}, "message": "Stop using @ExtCtxt", "tree": {"sha": "f27a13d037186d1882cba2d85b39c1a7a26f4b7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f27a13d037186d1882cba2d85b39c1a7a26f4b7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0607c138caf991c7dbe4fef57a08958a5e7fb621", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0607c138caf991c7dbe4fef57a08958a5e7fb621", "html_url": "https://github.com/rust-lang/rust/commit/0607c138caf991c7dbe4fef57a08958a5e7fb621", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0607c138caf991c7dbe4fef57a08958a5e7fb621/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b90989a728210d8199cb66f27818906b4a5ed943", "url": "https://api.github.com/repos/rust-lang/rust/commits/b90989a728210d8199cb66f27818906b4a5ed943", "html_url": "https://github.com/rust-lang/rust/commit/b90989a728210d8199cb66f27818906b4a5ed943"}], "stats": {"total": 305, "additions": 152, "deletions": 153}, "files": [{"sha": "ed899561bc9198d94cb554a33f552cdd6d1c7c78", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=0607c138caf991c7dbe4fef57a08958a5e7fb621", "patch": "@@ -40,7 +40,7 @@ struct Test {\n struct TestCtxt {\n     sess: session::Session,\n     path: RefCell<~[ast::Ident]>,\n-    ext_cx: @ExtCtxt,\n+    ext_cx: ExtCtxt,\n     testfns: RefCell<~[Test]>,\n     is_extra: bool,\n     config: ast::CrateConfig,\n@@ -163,8 +163,7 @@ fn generate_test_harness(sess: session::Session, crate: ast::Crate)\n         config: crate.config.clone(),\n     };\n \n-    let ext_cx = cx.ext_cx;\n-    ext_cx.bt_push(ExpnInfo {\n+    cx.ext_cx.bt_push(ExpnInfo {\n         call_site: dummy_sp(),\n         callee: NameAndSpan {\n             name: @\"test\",\n@@ -177,7 +176,7 @@ fn generate_test_harness(sess: session::Session, crate: ast::Crate)\n         cx: cx\n     };\n     let res = fold.fold_crate(crate);\n-    ext_cx.bt_pop();\n+    cx.ext_cx.bt_pop();\n     return res;\n }\n \n@@ -313,7 +312,7 @@ fn mk_test_module(cx: &TestCtxt) -> @ast::item {\n \n     // The synthesized main function which will call the console test runner\n     // with our list of tests\n-    let mainfn = (quote_item!(cx.ext_cx,\n+    let mainfn = (quote_item!(&cx.ext_cx,\n         pub fn main() {\n             #[main];\n             extra::test::test_main_static(::std::os::args(), TESTS);\n@@ -377,7 +376,7 @@ fn mk_tests(cx: &TestCtxt) -> @ast::item {\n     // The vector of test_descs for this crate\n     let test_descs = mk_test_descs(cx);\n \n-    (quote_item!(cx.ext_cx,\n+    (quote_item!(&cx.ext_cx,\n         pub static TESTS : &'static [self::extra::test::TestDescAndFn] =\n             $test_descs\n         ;\n@@ -438,24 +437,24 @@ fn mk_test_desc_and_fn_rec(cx: &TestCtxt, test: &Test) -> @ast::Expr {\n     };\n \n     let t_expr = if test.bench {\n-        quote_expr!(cx.ext_cx, self::extra::test::StaticBenchFn($fn_expr) )\n+        quote_expr!(&cx.ext_cx, self::extra::test::StaticBenchFn($fn_expr) )\n     } else {\n-        quote_expr!(cx.ext_cx, self::extra::test::StaticTestFn($fn_expr) )\n+        quote_expr!(&cx.ext_cx, self::extra::test::StaticTestFn($fn_expr) )\n     };\n \n     let ignore_expr = if test.ignore {\n-        quote_expr!(cx.ext_cx, true )\n+        quote_expr!(&cx.ext_cx, true )\n     } else {\n-        quote_expr!(cx.ext_cx, false )\n+        quote_expr!(&cx.ext_cx, false )\n     };\n \n     let fail_expr = if test.should_fail {\n-        quote_expr!(cx.ext_cx, true )\n+        quote_expr!(&cx.ext_cx, true )\n     } else {\n-        quote_expr!(cx.ext_cx, false )\n+        quote_expr!(&cx.ext_cx, false )\n     };\n \n-    let e = quote_expr!(cx.ext_cx,\n+    let e = quote_expr!(&cx.ext_cx,\n         self::extra::test::TestDescAndFn {\n             desc: self::extra::test::TestDesc {\n                 name: self::extra::test::StaticTestName($name_expr),"}, {"sha": "b8d01f56e4db577bddb1dfffb63c58e24423e7a3", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=0607c138caf991c7dbe4fef57a08958a5e7fb621", "patch": "@@ -75,7 +75,7 @@ struct ListenerFn {\n \n struct ReadyCtx {\n     sess: session::Session,\n-    ext_cx: @ExtCtxt,\n+    ext_cx: ExtCtxt,\n     path: ~[ast::Ident],\n     fns: ~[ListenerFn]\n }"}, {"sha": "fdde336ffa724e8b36de6070e865622c7183b892", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=0607c138caf991c7dbe4fef57a08958a5e7fb621", "patch": "@@ -37,7 +37,7 @@ fn next_state(s: State) -> Option<State> {\n     }\n }\n \n-pub fn expand_asm(cx: @ExtCtxt, sp: Span, tts: &[ast::token_tree])\n+pub fn expand_asm(cx: &ExtCtxt, sp: Span, tts: &[ast::token_tree])\n                -> base::MacResult {\n     let p = parse::new_parser_from_tts(cx.parse_sess(),\n                                        cx.cfg(),"}, {"sha": "87d09ea3f8ed819beca280b307df6df979e8deda", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=0607c138caf991c7dbe4fef57a08958a5e7fb621", "patch": "@@ -35,7 +35,7 @@ pub struct MacroDef {\n     ext: SyntaxExtension\n }\n \n-pub type ItemDecorator = extern \"Rust\" fn(@ExtCtxt,\n+pub type ItemDecorator = extern \"Rust\" fn(&ExtCtxt,\n                                           Span,\n                                           @ast::MetaItem,\n                                           ~[@ast::item])\n@@ -48,15 +48,15 @@ pub struct SyntaxExpanderTT {\n \n pub trait SyntaxExpanderTTTrait {\n     fn expand(&self,\n-              ecx: @ExtCtxt,\n+              ecx: &ExtCtxt,\n               span: Span,\n               token_tree: &[ast::token_tree],\n               context: ast::SyntaxContext)\n               -> MacResult;\n }\n \n pub type SyntaxExpanderTTFunNoCtxt =\n-    extern \"Rust\" fn(ecx: @ExtCtxt,\n+    extern \"Rust\" fn(ecx: &ExtCtxt,\n                      span: codemap::Span,\n                      token_tree: &[ast::token_tree])\n                      -> MacResult;\n@@ -67,7 +67,7 @@ enum SyntaxExpanderTTExpander {\n \n impl SyntaxExpanderTTTrait for SyntaxExpanderTT {\n     fn expand(&self,\n-              ecx: @ExtCtxt,\n+              ecx: &ExtCtxt,\n               span: Span,\n               token_tree: &[ast::token_tree],\n               _: ast::SyntaxContext)\n@@ -92,7 +92,7 @@ pub struct SyntaxExpanderTTItem {\n \n pub trait SyntaxExpanderTTItemTrait {\n     fn expand(&self,\n-              cx: @ExtCtxt,\n+              cx: &ExtCtxt,\n               sp: Span,\n               ident: ast::Ident,\n               token_tree: ~[ast::token_tree],\n@@ -102,7 +102,7 @@ pub trait SyntaxExpanderTTItemTrait {\n \n impl SyntaxExpanderTTItemTrait for SyntaxExpanderTTItem {\n     fn expand(&self,\n-              cx: @ExtCtxt,\n+              cx: &ExtCtxt,\n               sp: Span,\n               ident: ast::Ident,\n               token_tree: ~[ast::token_tree],\n@@ -119,15 +119,15 @@ impl SyntaxExpanderTTItemTrait for SyntaxExpanderTTItem {\n     }\n }\n \n-pub type SyntaxExpanderTTItemFun = extern \"Rust\" fn(@ExtCtxt,\n+pub type SyntaxExpanderTTItemFun = extern \"Rust\" fn(&ExtCtxt,\n                                                     Span,\n                                                     ast::Ident,\n                                                     ~[ast::token_tree],\n                                                     ast::SyntaxContext)\n                                                     -> MacResult;\n \n pub type SyntaxExpanderTTItemFunNoCtxt =\n-    extern \"Rust\" fn(@ExtCtxt, Span, ast::Ident, ~[ast::token_tree])\n+    extern \"Rust\" fn(&ExtCtxt, Span, ast::Ident, ~[ast::token_tree])\n                      -> MacResult;\n \n pub trait AnyMacro {\n@@ -319,8 +319,8 @@ pub struct ExtCtxt {\n \n impl ExtCtxt {\n     pub fn new(parse_sess: @mut parse::ParseSess, cfg: ast::CrateConfig)\n-               -> @ExtCtxt {\n-        @ExtCtxt {\n+               -> ExtCtxt {\n+        ExtCtxt {\n             parse_sess: parse_sess,\n             cfg: cfg,\n             backtrace: @mut None,\n@@ -329,7 +329,7 @@ impl ExtCtxt {\n         }\n     }\n \n-    pub fn expand_expr(@self, mut e: @ast::Expr) -> @ast::Expr {\n+    pub fn expand_expr(&self, mut e: @ast::Expr) -> @ast::Expr {\n         loop {\n             match e.node {\n                 ast::ExprMac(..) => {\n@@ -417,7 +417,7 @@ impl ExtCtxt {\n     }\n }\n \n-pub fn expr_to_str(cx: @ExtCtxt, expr: @ast::Expr, err_msg: &str) -> (@str, ast::StrStyle) {\n+pub fn expr_to_str(cx: &ExtCtxt, expr: @ast::Expr, err_msg: &str) -> (@str, ast::StrStyle) {\n     match expr.node {\n       ast::ExprLit(l) => match l.node {\n         ast::lit_str(s, style) => (s, style),\n@@ -427,14 +427,14 @@ pub fn expr_to_str(cx: @ExtCtxt, expr: @ast::Expr, err_msg: &str) -> (@str, ast:\n     }\n }\n \n-pub fn check_zero_tts(cx: @ExtCtxt, sp: Span, tts: &[ast::token_tree],\n+pub fn check_zero_tts(cx: &ExtCtxt, sp: Span, tts: &[ast::token_tree],\n                       name: &str) {\n     if tts.len() != 0 {\n         cx.span_fatal(sp, format!(\"{} takes no arguments\", name));\n     }\n }\n \n-pub fn get_single_str_from_tts(cx: @ExtCtxt,\n+pub fn get_single_str_from_tts(cx: &ExtCtxt,\n                                sp: Span,\n                                tts: &[ast::token_tree],\n                                name: &str)\n@@ -450,7 +450,7 @@ pub fn get_single_str_from_tts(cx: @ExtCtxt,\n     }\n }\n \n-pub fn get_exprs_from_tts(cx: @ExtCtxt,\n+pub fn get_exprs_from_tts(cx: &ExtCtxt,\n                           sp: Span,\n                           tts: &[ast::token_tree]) -> ~[@ast::Expr] {\n     let p = parse::new_parser_from_tts(cx.parse_sess(),"}, {"sha": "007c06938c60edbd2b636cabe676e123f8e1089a", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=0607c138caf991c7dbe4fef57a08958a5e7fb621", "patch": "@@ -15,7 +15,7 @@ use ast_util;\n use codemap::{Span, respan, dummy_sp};\n use ext::base::ExtCtxt;\n use ext::quote::rt::*;\n-use fold;\n+use fold::ast_fold;\n use opt_vec;\n use opt_vec::OptVec;\n \n@@ -236,7 +236,7 @@ pub trait AstBuilder {\n                      vis: ast::visibility, path: ~[ast::Ident]) -> ast::view_item;\n }\n \n-impl AstBuilder for @ExtCtxt {\n+impl<'a> AstBuilder for &'a ExtCtxt {\n     fn path(&self, span: Span, strs: ~[ast::Ident]) -> ast::Path {\n         self.path_all(span, false, strs, opt_vec::Empty, ~[])\n     }\n@@ -903,11 +903,11 @@ impl AstBuilder for @ExtCtxt {\n     }\n }\n \n-struct Duplicator {\n-    cx: @ExtCtxt,\n+struct Duplicator<'a> {\n+    cx: &'a ExtCtxt,\n }\n \n-impl fold::ast_fold for Duplicator {\n+impl<'a> ast_fold for Duplicator<'a> {\n     fn new_id(&self, _: NodeId) -> NodeId {\n         ast::DUMMY_NODE_ID\n     }\n@@ -920,14 +920,14 @@ pub trait Duplicate {\n     // These functions just duplicate AST nodes.\n     //\n \n-    fn duplicate(&self, cx: @ExtCtxt) -> Self;\n+    fn duplicate(&self, cx: &ExtCtxt) -> Self;\n }\n \n impl Duplicate for @ast::Expr {\n-    fn duplicate(&self, cx: @ExtCtxt) -> @ast::Expr {\n-        let folder = @Duplicator {\n+    fn duplicate(&self, cx: &ExtCtxt) -> @ast::Expr {\n+        let folder = Duplicator {\n             cx: cx,\n-        } as @fold::ast_fold;\n+        };\n         folder.fold_expr(*self)\n     }\n }"}, {"sha": "1ceb2a1668eaf677f3fa9cc39388facd7c05dce2", "filename": "src/libsyntax/ext/bytes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fbytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fbytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbytes.rs?ref=0607c138caf991c7dbe4fef57a08958a5e7fb621", "patch": "@@ -18,7 +18,7 @@ use ext::build::AstBuilder;\n \n use std::char;\n \n-pub fn expand_syntax_ext(cx: @ExtCtxt, sp: Span, tts: &[ast::token_tree]) -> base::MacResult {\n+pub fn expand_syntax_ext(cx: &ExtCtxt, sp: Span, tts: &[ast::token_tree]) -> base::MacResult {\n     // Gather all argument expressions\n     let exprs = get_exprs_from_tts(cx, sp, tts);\n     let mut bytes = ~[];"}, {"sha": "2ca8917ed8fc6c4c69e2e081c0e985628649b8e6", "filename": "src/libsyntax/ext/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fcfg.rs?ref=0607c138caf991c7dbe4fef57a08958a5e7fb621", "patch": "@@ -25,7 +25,7 @@ use parse;\n use parse::token;\n use parse::attr::parser_attr;\n \n-pub fn expand_cfg(cx: @ExtCtxt, sp: Span, tts: &[ast::token_tree]) -> base::MacResult {\n+pub fn expand_cfg(cx: &ExtCtxt, sp: Span, tts: &[ast::token_tree]) -> base::MacResult {\n     let p = parse::new_parser_from_tts(cx.parse_sess(), cx.cfg(), tts.to_owned());\n \n     let mut cfgs = ~[];"}, {"sha": "b6a81a8bea5435f2cf57aef92ad6a2300abab579", "filename": "src/libsyntax/ext/concat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fconcat.rs?ref=0607c138caf991c7dbe4fef57a08958a5e7fb621", "patch": "@@ -15,7 +15,7 @@ use codemap;\n use ext::base;\n use ext::build::AstBuilder;\n \n-pub fn expand_syntax_ext(cx: @base::ExtCtxt,\n+pub fn expand_syntax_ext(cx: &base::ExtCtxt,\n                          sp: codemap::Span,\n                          tts: &[ast::token_tree]) -> base::MacResult {\n     let es = base::get_exprs_from_tts(cx, sp, tts);"}, {"sha": "6b204a243cb1e612dc41720a520be9b1e0e01f52", "filename": "src/libsyntax/ext/concat_idents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fconcat_idents.rs?ref=0607c138caf991c7dbe4fef57a08958a5e7fb621", "patch": "@@ -16,7 +16,7 @@ use opt_vec;\n use parse::token;\n use parse::token::{str_to_ident};\n \n-pub fn expand_syntax_ext(cx: @ExtCtxt, sp: Span, tts: &[ast::token_tree])\n+pub fn expand_syntax_ext(cx: &ExtCtxt, sp: Span, tts: &[ast::token_tree])\n     -> base::MacResult {\n     let mut res_str = ~\"\";\n     for (i, e) in tts.iter().enumerate() {"}, {"sha": "c3c57082684b65f9755ead8c7944cde743acc659", "filename": "src/libsyntax/ext/deriving/clone.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs?ref=0607c138caf991c7dbe4fef57a08958a5e7fb621", "patch": "@@ -14,7 +14,7 @@ use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n use ext::deriving::generic::*;\n \n-pub fn expand_deriving_clone(cx: @ExtCtxt,\n+pub fn expand_deriving_clone(cx: &ExtCtxt,\n                              span: Span,\n                              mitem: @MetaItem,\n                              in_items: ~[@item])\n@@ -42,7 +42,7 @@ pub fn expand_deriving_clone(cx: @ExtCtxt,\n     trait_def.expand(mitem, in_items)\n }\n \n-pub fn expand_deriving_deep_clone(cx: @ExtCtxt,\n+pub fn expand_deriving_deep_clone(cx: &ExtCtxt,\n                                   span: Span,\n                                   mitem: @MetaItem,\n                                   in_items: ~[@item])\n@@ -74,7 +74,7 @@ pub fn expand_deriving_deep_clone(cx: @ExtCtxt,\n \n fn cs_clone(\n     name: &str,\n-    cx: @ExtCtxt, span: Span,\n+    cx: &ExtCtxt, span: Span,\n     substr: &Substructure) -> @Expr {\n     let clone_ident = substr.method_ident;\n     let ctor_ident;"}, {"sha": "f7b249fc8d8bb50da211e3644b13d532ddd6e6b5", "filename": "src/libsyntax/ext/deriving/cmp/eq.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs?ref=0607c138caf991c7dbe4fef57a08958a5e7fb621", "patch": "@@ -14,17 +14,17 @@ use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n use ext::deriving::generic::*;\n \n-pub fn expand_deriving_eq(cx: @ExtCtxt,\n+pub fn expand_deriving_eq(cx: &ExtCtxt,\n                           span: Span,\n                           mitem: @MetaItem,\n                           in_items: ~[@item]) -> ~[@item] {\n     // structures are equal if all fields are equal, and non equal, if\n     // any fields are not equal or if the enum variants are different\n-    fn cs_eq(cx: @ExtCtxt, span: Span, substr: &Substructure) -> @Expr {\n+    fn cs_eq(cx: &ExtCtxt, span: Span, substr: &Substructure) -> @Expr {\n         cs_and(|cx, span, _, _| cx.expr_bool(span, false),\n                                  cx, span, substr)\n     }\n-    fn cs_ne(cx: @ExtCtxt, span: Span, substr: &Substructure) -> @Expr {\n+    fn cs_ne(cx: &ExtCtxt, span: Span, substr: &Substructure) -> @Expr {\n         cs_or(|cx, span, _, _| cx.expr_bool(span, true),\n               cx, span, substr)\n     }"}, {"sha": "c1e4e1e2b641d8b6028bf1fe1801622c693a38c8", "filename": "src/libsyntax/ext/deriving/cmp/ord.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs?ref=0607c138caf991c7dbe4fef57a08958a5e7fb621", "patch": "@@ -15,7 +15,7 @@ use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n use ext::deriving::generic::*;\n \n-pub fn expand_deriving_ord(cx: @ExtCtxt,\n+pub fn expand_deriving_ord(cx: &ExtCtxt,\n                            span: Span,\n                            mitem: @MetaItem,\n                            in_items: ~[@item]) -> ~[@item] {\n@@ -51,7 +51,7 @@ pub fn expand_deriving_ord(cx: @ExtCtxt,\n }\n \n /// Strict inequality.\n-fn cs_op(less: bool, equal: bool, cx: @ExtCtxt, span: Span, substr: &Substructure) -> @Expr {\n+fn cs_op(less: bool, equal: bool, cx: &ExtCtxt, span: Span, substr: &Substructure) -> @Expr {\n     let op = if less {ast::BiLt} else {ast::BiGt};\n     cs_fold(\n         false, // need foldr,"}, {"sha": "0b4d2659fd1fe6f6ab6095fc507db041e9254a60", "filename": "src/libsyntax/ext/deriving/cmp/totaleq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs?ref=0607c138caf991c7dbe4fef57a08958a5e7fb621", "patch": "@@ -14,11 +14,11 @@ use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n use ext::deriving::generic::*;\n \n-pub fn expand_deriving_totaleq(cx: @ExtCtxt,\n+pub fn expand_deriving_totaleq(cx: &ExtCtxt,\n                                span: Span,\n                                mitem: @MetaItem,\n                                in_items: ~[@item]) -> ~[@item] {\n-    fn cs_equals(cx: @ExtCtxt, span: Span, substr: &Substructure) -> @Expr {\n+    fn cs_equals(cx: &ExtCtxt, span: Span, substr: &Substructure) -> @Expr {\n         cs_and(|cx, span, _, _| cx.expr_bool(span, false),\n                cx, span, substr)\n     }"}, {"sha": "3c58bfa01a96fa4a39d5f8fd271fb7ac73f9b295", "filename": "src/libsyntax/ext/deriving/cmp/totalord.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs?ref=0607c138caf991c7dbe4fef57a08958a5e7fb621", "patch": "@@ -16,7 +16,7 @@ use ext::build::AstBuilder;\n use ext::deriving::generic::*;\n use std::cmp::{Ordering, Equal, Less, Greater};\n \n-pub fn expand_deriving_totalord(cx: @ExtCtxt,\n+pub fn expand_deriving_totalord(cx: &ExtCtxt,\n                                 span: Span,\n                                 mitem: @MetaItem,\n                                 in_items: ~[@item]) -> ~[@item] {\n@@ -44,7 +44,7 @@ pub fn expand_deriving_totalord(cx: @ExtCtxt,\n }\n \n \n-pub fn ordering_const(cx: @ExtCtxt, span: Span, cnst: Ordering) -> ast::Path {\n+pub fn ordering_const(cx: &ExtCtxt, span: Span, cnst: Ordering) -> ast::Path {\n     let cnst = match cnst {\n         Less => \"Less\",\n         Equal => \"Equal\",\n@@ -56,7 +56,7 @@ pub fn ordering_const(cx: @ExtCtxt, span: Span, cnst: Ordering) -> ast::Path {\n                      cx.ident_of(cnst)])\n }\n \n-pub fn cs_cmp(cx: @ExtCtxt, span: Span,\n+pub fn cs_cmp(cx: &ExtCtxt, span: Span,\n               substr: &Substructure) -> @Expr {\n     let test_id = cx.ident_of(\"__test\");\n     let equals_path = ordering_const(cx, span, Equal);"}, {"sha": "de995af9ae3a5c56faa4f1e6bb0ea9f71891a169", "filename": "src/libsyntax/ext/deriving/decodable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs?ref=0607c138caf991c7dbe4fef57a08958a5e7fb621", "patch": "@@ -19,7 +19,7 @@ use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n use ext::deriving::generic::*;\n \n-pub fn expand_deriving_decodable(cx: @ExtCtxt,\n+pub fn expand_deriving_decodable(cx: &ExtCtxt,\n                                  span: Span,\n                                  mitem: @MetaItem,\n                                  in_items: ~[@item]) -> ~[@item] {\n@@ -51,7 +51,7 @@ pub fn expand_deriving_decodable(cx: @ExtCtxt,\n     trait_def.expand(mitem, in_items)\n }\n \n-fn decodable_substructure(cx: @ExtCtxt, span: Span,\n+fn decodable_substructure(cx: &ExtCtxt, span: Span,\n                           substr: &Substructure) -> @Expr {\n     let decoder = substr.nonself_args[0];\n     let recurse = ~[cx.ident_of(\"extra\"),\n@@ -132,7 +132,7 @@ fn decodable_substructure(cx: @ExtCtxt, span: Span,\n /// Create a decoder for a single enum variant/struct:\n /// - `outer_pat_ident` is the name of this enum variant/struct\n /// - `getarg` should retrieve the `uint`-th field with name `@str`.\n-fn decode_static_fields(cx: @ExtCtxt,\n+fn decode_static_fields(cx: &ExtCtxt,\n                         outer_span: Span,\n                         outer_pat_ident: Ident,\n                         fields: &StaticFields,"}, {"sha": "ba2df120796c3ad54c99a0eb993c8eace919250e", "filename": "src/libsyntax/ext/deriving/default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs?ref=0607c138caf991c7dbe4fef57a08958a5e7fb621", "patch": "@@ -14,7 +14,7 @@ use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n use ext::deriving::generic::*;\n \n-pub fn expand_deriving_default(cx: @ExtCtxt,\n+pub fn expand_deriving_default(cx: &ExtCtxt,\n                             span: Span,\n                             mitem: @MetaItem,\n                             in_items: ~[@item])\n@@ -41,7 +41,7 @@ pub fn expand_deriving_default(cx: @ExtCtxt,\n     trait_def.expand(mitem, in_items)\n }\n \n-fn default_substructure(cx: @ExtCtxt, span: Span, substr: &Substructure) -> @Expr {\n+fn default_substructure(cx: &ExtCtxt, span: Span, substr: &Substructure) -> @Expr {\n     let default_ident = ~[\n         cx.ident_of(\"std\"),\n         cx.ident_of(\"default\"),"}, {"sha": "a6cba59aea518bb63b91b224ace9e90e60e8f7e2", "filename": "src/libsyntax/ext/deriving/encodable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs?ref=0607c138caf991c7dbe4fef57a08958a5e7fb621", "patch": "@@ -81,7 +81,7 @@ use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n use ext::deriving::generic::*;\n \n-pub fn expand_deriving_encodable(cx: @ExtCtxt,\n+pub fn expand_deriving_encodable(cx: &ExtCtxt,\n                                  span: Span,\n                                  mitem: @MetaItem,\n                                  in_items: ~[@item]) -> ~[@item] {\n@@ -113,7 +113,7 @@ pub fn expand_deriving_encodable(cx: @ExtCtxt,\n     trait_def.expand(mitem, in_items)\n }\n \n-fn encodable_substructure(cx: @ExtCtxt, span: Span,\n+fn encodable_substructure(cx: &ExtCtxt, span: Span,\n                           substr: &Substructure) -> @Expr {\n     let encoder = substr.nonself_args[0];\n     // throw an underscore in front to suppress unused variable warnings"}, {"sha": "2eb0fe30b4b0764f237f7a36bd1c67a3d9564715", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=0607c138caf991c7dbe4fef57a08958a5e7fb621", "patch": "@@ -190,7 +190,7 @@ mod ty;\n \n pub struct TraitDef<'a> {\n     /// The extension context\n-    cx: @ExtCtxt,\n+    cx: &'a ExtCtxt,\n     /// The span for the current #[deriving(Foo)] header.\n     span: Span,\n \n@@ -300,15 +300,15 @@ Combine the values of all the fields together. The last argument is\n all the fields of all the structures, see above for details.\n */\n pub type CombineSubstructureFunc<'a> =\n-    'a |@ExtCtxt, Span, &Substructure| -> @Expr;\n+    'a |&ExtCtxt, Span, &Substructure| -> @Expr;\n \n /**\n Deal with non-matching enum variants, the arguments are a list\n representing each variant: (variant index, ast::variant instance,\n [variant fields]), and a list of the nonself args of the type\n */\n pub type EnumNonMatchFunc<'a> =\n-    'a |@ExtCtxt,\n+    'a |&ExtCtxt,\n            Span,\n            &[(uint, P<ast::variant>, ~[(Span, Option<Ident>, @Expr)])],\n            &[@Expr]|\n@@ -1076,10 +1076,10 @@ Fold the fields. `use_foldl` controls whether this is done\n left-to-right (`true`) or right-to-left (`false`).\n */\n pub fn cs_fold(use_foldl: bool,\n-               f: |@ExtCtxt, Span, @Expr, @Expr, &[@Expr]| -> @Expr,\n+               f: |&ExtCtxt, Span, @Expr, @Expr, &[@Expr]| -> @Expr,\n                base: @Expr,\n                enum_nonmatch_f: EnumNonMatchFunc,\n-               cx: @ExtCtxt,\n+               cx: &ExtCtxt,\n                trait_span: Span,\n                substructure: &Substructure)\n                -> @Expr {\n@@ -1115,9 +1115,9 @@ f(cx, span, ~[self_1.method(__arg_1_1, __arg_2_1),\n ~~~\n */\n #[inline]\n-pub fn cs_same_method(f: |@ExtCtxt, Span, ~[@Expr]| -> @Expr,\n+pub fn cs_same_method(f: |&ExtCtxt, Span, ~[@Expr]| -> @Expr,\n                       enum_nonmatch_f: EnumNonMatchFunc,\n-                      cx: @ExtCtxt,\n+                      cx: &ExtCtxt,\n                       trait_span: Span,\n                       substructure: &Substructure)\n                       -> @Expr {\n@@ -1149,10 +1149,10 @@ fields. `use_foldl` controls whether this is done left-to-right\n */\n #[inline]\n pub fn cs_same_method_fold(use_foldl: bool,\n-                           f: |@ExtCtxt, Span, @Expr, @Expr| -> @Expr,\n+                           f: |&ExtCtxt, Span, @Expr, @Expr| -> @Expr,\n                            base: @Expr,\n                            enum_nonmatch_f: EnumNonMatchFunc,\n-                           cx: @ExtCtxt,\n+                           cx: &ExtCtxt,\n                            trait_span: Span,\n                            substructure: &Substructure)\n                            -> @Expr {\n@@ -1179,7 +1179,7 @@ on all the fields.\n #[inline]\n pub fn cs_binop(binop: ast::BinOp, base: @Expr,\n                 enum_nonmatch_f: EnumNonMatchFunc,\n-                cx: @ExtCtxt, trait_span: Span,\n+                cx: &ExtCtxt, trait_span: Span,\n                 substructure: &Substructure) -> @Expr {\n     cs_same_method_fold(\n         true, // foldl is good enough\n@@ -1197,7 +1197,7 @@ pub fn cs_binop(binop: ast::BinOp, base: @Expr,\n /// cs_binop with binop == or\n #[inline]\n pub fn cs_or(enum_nonmatch_f: EnumNonMatchFunc,\n-             cx: @ExtCtxt, span: Span,\n+             cx: &ExtCtxt, span: Span,\n              substructure: &Substructure) -> @Expr {\n     cs_binop(ast::BiOr, cx.expr_bool(span, false),\n              enum_nonmatch_f,\n@@ -1207,7 +1207,7 @@ pub fn cs_or(enum_nonmatch_f: EnumNonMatchFunc,\n /// cs_binop with binop == and\n #[inline]\n pub fn cs_and(enum_nonmatch_f: EnumNonMatchFunc,\n-              cx: @ExtCtxt, span: Span,\n+              cx: &ExtCtxt, span: Span,\n               substructure: &Substructure) -> @Expr {\n     cs_binop(ast::BiAnd, cx.expr_bool(span, true),\n              enum_nonmatch_f,"}, {"sha": "8b2ad95e45c5b3f11504c8df890e441be31f5f23", "filename": "src/libsyntax/ext/deriving/iter_bytes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs?ref=0607c138caf991c7dbe4fef57a08958a5e7fb621", "patch": "@@ -15,7 +15,7 @@ use ext::build::AstBuilder;\n use ext::deriving::generic::*;\n \n \n-pub fn expand_deriving_iter_bytes(cx: @ExtCtxt,\n+pub fn expand_deriving_iter_bytes(cx: &ExtCtxt,\n                                   span: Span,\n                                   mitem: @MetaItem,\n                                   in_items: ~[@item]) -> ~[@item] {\n@@ -45,7 +45,7 @@ pub fn expand_deriving_iter_bytes(cx: @ExtCtxt,\n     trait_def.expand(mitem, in_items)\n }\n \n-fn iter_bytes_substructure(cx: @ExtCtxt, span: Span, substr: &Substructure) -> @Expr {\n+fn iter_bytes_substructure(cx: &ExtCtxt, span: Span, substr: &Substructure) -> @Expr {\n     let (lsb0, f)= match substr.nonself_args {\n         [l, f] => (l, f),\n         _ => cx.span_bug(span, \"Incorrect number of arguments in `deriving(IterBytes)`\")"}, {"sha": "1e8b79c8f350b117560648005a84bb2d5f3947f0", "filename": "src/libsyntax/ext/deriving/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs?ref=0607c138caf991c7dbe4fef57a08958a5e7fb621", "patch": "@@ -46,20 +46,20 @@ pub mod totalord;\n \n pub mod generic;\n \n-pub type ExpandDerivingStructDefFn<'a> = 'a |@ExtCtxt,\n+pub type ExpandDerivingStructDefFn<'a> = 'a |&ExtCtxt,\n                                                    Span,\n                                                    x: &struct_def,\n                                                    Ident,\n                                                    y: &Generics|\n                                                    -> @item;\n-pub type ExpandDerivingEnumDefFn<'a> = 'a |@ExtCtxt,\n+pub type ExpandDerivingEnumDefFn<'a> = 'a |&ExtCtxt,\n                                                  Span,\n                                                  x: &enum_def,\n                                                  Ident,\n                                                  y: &Generics|\n                                                  -> @item;\n \n-pub fn expand_meta_deriving(cx: @ExtCtxt,\n+pub fn expand_meta_deriving(cx: &ExtCtxt,\n                             _span: Span,\n                             mitem: @MetaItem,\n                             in_items: ~[@item])"}, {"sha": "ba2d85f357a7d6627300d94fcb07b5ca1924a648", "filename": "src/libsyntax/ext/deriving/primitive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs?ref=0607c138caf991c7dbe4fef57a08958a5e7fb621", "patch": "@@ -15,7 +15,7 @@ use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n use ext::deriving::generic::*;\n \n-pub fn expand_deriving_from_primitive(cx: @ExtCtxt,\n+pub fn expand_deriving_from_primitive(cx: &ExtCtxt,\n                                       span: Span,\n                                       mitem: @MetaItem,\n                                       in_items: ~[@item]) -> ~[@item] {\n@@ -64,7 +64,7 @@ pub fn expand_deriving_from_primitive(cx: @ExtCtxt,\n     trait_def.expand(mitem, in_items)\n }\n \n-fn cs_from(name: &str, cx: @ExtCtxt, span: Span, substr: &Substructure) -> @Expr {\n+fn cs_from(name: &str, cx: &ExtCtxt, span: Span, substr: &Substructure) -> @Expr {\n     let n = match substr.nonself_args {\n         [n] => n,\n         _ => cx.span_bug(span, \"Incorrect number of arguments in `deriving(FromPrimitive)`\")"}, {"sha": "1491797c8083f438251087b529b0767813f88bb7", "filename": "src/libsyntax/ext/deriving/rand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs?ref=0607c138caf991c7dbe4fef57a08958a5e7fb621", "patch": "@@ -16,7 +16,7 @@ use ext::build::{AstBuilder};\n use ext::deriving::generic::*;\n use opt_vec;\n \n-pub fn expand_deriving_rand(cx: @ExtCtxt,\n+pub fn expand_deriving_rand(cx: &ExtCtxt,\n                             span: Span,\n                             mitem: @MetaItem,\n                             in_items: ~[@item])\n@@ -50,7 +50,7 @@ pub fn expand_deriving_rand(cx: @ExtCtxt,\n     trait_def.expand(mitem, in_items)\n }\n \n-fn rand_substructure(cx: @ExtCtxt, span: Span, substr: &Substructure) -> @Expr {\n+fn rand_substructure(cx: &ExtCtxt, span: Span, substr: &Substructure) -> @Expr {\n     let rng = match substr.nonself_args {\n         [rng] => ~[ rng ],\n         _ => cx.bug(\"Incorrect number of arguments to `rand` in `deriving(Rand)`\")\n@@ -130,7 +130,7 @@ fn rand_substructure(cx: @ExtCtxt, span: Span, substr: &Substructure) -> @Expr {\n         _ => cx.bug(\"Non-static method in `deriving(Rand)`\")\n     };\n \n-    fn rand_thing(cx: @ExtCtxt,\n+    fn rand_thing(cx: &ExtCtxt,\n                   span: Span,\n                   ctor_ident: Ident,\n                   summary: &StaticFields,"}, {"sha": "25700f93a33cd5d8cbe6acf5020028fd69837f7a", "filename": "src/libsyntax/ext/deriving/to_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fderiving%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fderiving%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fto_str.rs?ref=0607c138caf991c7dbe4fef57a08958a5e7fb621", "patch": "@@ -15,7 +15,7 @@ use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n use ext::deriving::generic::*;\n \n-pub fn expand_deriving_to_str(cx: @ExtCtxt,\n+pub fn expand_deriving_to_str(cx: &ExtCtxt,\n                               span: Span,\n                               mitem: @MetaItem,\n                               in_items: ~[@item])\n@@ -47,7 +47,7 @@ pub fn expand_deriving_to_str(cx: @ExtCtxt,\n // doesn't invoke the to_str() method on each field. Hence we mirror\n // the logic of the repr_to_str() method, but with tweaks to call to_str()\n // on sub-fields.\n-fn to_str_substructure(cx: @ExtCtxt, span: Span,\n+fn to_str_substructure(cx: &ExtCtxt, span: Span,\n                        substr: &Substructure) -> @Expr {\n     let to_str = cx.ident_of(\"to_str\");\n "}, {"sha": "10e07520a84903757319589331a26d7948dcb961", "filename": "src/libsyntax/ext/deriving/ty.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs?ref=0607c138caf991c7dbe4fef57a08958a5e7fb621", "patch": "@@ -58,15 +58,15 @@ impl<'a> Path<'a> {\n     }\n \n     pub fn to_ty(&self,\n-                 cx: @ExtCtxt,\n+                 cx: &ExtCtxt,\n                  span: Span,\n                  self_ty: Ident,\n                  self_generics: &Generics)\n                  -> P<ast::Ty> {\n         cx.ty_path(self.to_path(cx, span, self_ty, self_generics), None)\n     }\n     pub fn to_path(&self,\n-                   cx: @ExtCtxt,\n+                   cx: &ExtCtxt,\n                    span: Span,\n                    self_ty: Ident,\n                    self_generics: &Generics)\n@@ -110,14 +110,14 @@ pub fn nil_ty() -> Ty<'static> {\n     Tuple(~[])\n }\n \n-fn mk_lifetime(cx: @ExtCtxt, span: Span, lt: &Option<&str>) -> Option<ast::Lifetime> {\n+fn mk_lifetime(cx: &ExtCtxt, span: Span, lt: &Option<&str>) -> Option<ast::Lifetime> {\n     match *lt {\n         Some(ref s) => Some(cx.lifetime(span, cx.ident_of(*s))),\n         None => None\n     }\n }\n \n-fn mk_lifetimes(cx: @ExtCtxt, span: Span, lt: &Option<&str>) -> OptVec<ast::Lifetime> {\n+fn mk_lifetimes(cx: &ExtCtxt, span: Span, lt: &Option<&str>) -> OptVec<ast::Lifetime> {\n     match *lt {\n         Some(ref s) => opt_vec::with(cx.lifetime(span, cx.ident_of(*s))),\n         None => opt_vec::Empty\n@@ -126,7 +126,7 @@ fn mk_lifetimes(cx: @ExtCtxt, span: Span, lt: &Option<&str>) -> OptVec<ast::Life\n \n impl<'a> Ty<'a> {\n     pub fn to_ty(&self,\n-                 cx: @ExtCtxt,\n+                 cx: &ExtCtxt,\n                  span: Span,\n                  self_ty: Ident,\n                  self_generics: &Generics)\n@@ -164,7 +164,7 @@ impl<'a> Ty<'a> {\n     }\n \n     pub fn to_path(&self,\n-                   cx: @ExtCtxt,\n+                   cx: &ExtCtxt,\n                    span: Span,\n                    self_ty: Ident,\n                    self_generics: &Generics)\n@@ -189,7 +189,7 @@ impl<'a> Ty<'a> {\n }\n \n \n-fn mk_ty_param(cx: @ExtCtxt, span: Span, name: &str, bounds: &[Path],\n+fn mk_ty_param(cx: &ExtCtxt, span: Span, name: &str, bounds: &[Path],\n                self_ident: Ident, self_generics: &Generics) -> ast::TyParam {\n     let bounds = opt_vec::from(\n         bounds.map(|b| {\n@@ -219,7 +219,7 @@ impl<'a> LifetimeBounds<'a> {\n         }\n     }\n     pub fn to_generics(&self,\n-                       cx: @ExtCtxt,\n+                       cx: &ExtCtxt,\n                        span: Span,\n                        self_ty: Ident,\n                        self_generics: &Generics)\n@@ -239,7 +239,7 @@ impl<'a> LifetimeBounds<'a> {\n }\n \n \n-pub fn get_explicit_self(cx: @ExtCtxt, span: Span, self_ptr: &Option<PtrTy>)\n+pub fn get_explicit_self(cx: &ExtCtxt, span: Span, self_ptr: &Option<PtrTy>)\n     -> (@Expr, ast::explicit_self) {\n     let self_path = cx.expr_self(span);\n     match *self_ptr {"}, {"sha": "c406dbf0d0117886a48e785b8b88844c7238ab31", "filename": "src/libsyntax/ext/deriving/zero.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fderiving%2Fzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fderiving%2Fzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fzero.rs?ref=0607c138caf991c7dbe4fef57a08958a5e7fb621", "patch": "@@ -14,7 +14,7 @@ use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n use ext::deriving::generic::*;\n \n-pub fn expand_deriving_zero(cx: @ExtCtxt,\n+pub fn expand_deriving_zero(cx: &ExtCtxt,\n                             span: Span,\n                             mitem: @MetaItem,\n                             in_items: ~[@item])\n@@ -57,7 +57,7 @@ pub fn expand_deriving_zero(cx: @ExtCtxt,\n     trait_def.expand(mitem, in_items)\n }\n \n-fn zero_substructure(cx: @ExtCtxt, span: Span, substr: &Substructure) -> @Expr {\n+fn zero_substructure(cx: &ExtCtxt, span: Span, substr: &Substructure) -> @Expr {\n     let zero_ident = ~[\n         cx.ident_of(\"std\"),\n         cx.ident_of(\"num\"),"}, {"sha": "b5f5f8c41d023e8feb4fc4ba7bd85db8b94f219c", "filename": "src/libsyntax/ext/env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fenv.rs?ref=0607c138caf991c7dbe4fef57a08958a5e7fb621", "patch": "@@ -22,7 +22,7 @@ use ext::build::AstBuilder;\n \n use std::os;\n \n-pub fn expand_option_env(cx: @ExtCtxt, sp: Span, tts: &[ast::token_tree])\n+pub fn expand_option_env(cx: &ExtCtxt, sp: Span, tts: &[ast::token_tree])\n     -> base::MacResult {\n     let var = get_single_str_from_tts(cx, sp, tts, \"option_env!\");\n \n@@ -33,7 +33,7 @@ pub fn expand_option_env(cx: @ExtCtxt, sp: Span, tts: &[ast::token_tree])\n     MRExpr(e)\n }\n \n-pub fn expand_env(cx: @ExtCtxt, sp: Span, tts: &[ast::token_tree])\n+pub fn expand_env(cx: &ExtCtxt, sp: Span, tts: &[ast::token_tree])\n     -> base::MacResult {\n     let exprs = get_exprs_from_tts(cx, sp, tts);\n "}, {"sha": "9f9c245fe481d882a479f9744bef090732877664", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=0607c138caf991c7dbe4fef57a08958a5e7fb621", "patch": "@@ -32,7 +32,7 @@ use util::small_vector::SmallVector;\n use std::vec;\n \n pub fn expand_expr(extsbox: @mut SyntaxEnv,\n-                   cx: @ExtCtxt,\n+                   cx: &ExtCtxt,\n                    e: @ast::Expr,\n                    fld: &MacroExpander)\n                    -> @ast::Expr {\n@@ -214,7 +214,7 @@ pub fn expand_expr(extsbox: @mut SyntaxEnv,\n // NB: there is some redundancy between this and expand_item, below, and\n // they might benefit from some amount of semantic and language-UI merger.\n pub fn expand_mod_items(extsbox: @mut SyntaxEnv,\n-                        cx: @ExtCtxt,\n+                        cx: &ExtCtxt,\n                         module_: &ast::_mod,\n                         fld: &MacroExpander)\n                         -> ast::_mod {\n@@ -271,7 +271,7 @@ static special_block_name : &'static str = \" block\";\n \n // When we enter a module, record it, for the sake of `module!`\n pub fn expand_item(extsbox: @mut SyntaxEnv,\n-                   cx: @ExtCtxt,\n+                   cx: &ExtCtxt,\n                    it: @ast::item,\n                    fld: &MacroExpander)\n                    -> SmallVector<@ast::item> {\n@@ -298,7 +298,7 @@ pub fn contains_macro_escape(attrs: &[ast::Attribute]) -> bool {\n // Support for item-position macro invocations, exactly the same\n // logic as for expression-position macro invocations.\n pub fn expand_item_mac(extsbox: @mut SyntaxEnv,\n-                       cx: @ExtCtxt,\n+                       cx: &ExtCtxt,\n                        it: @ast::item,\n                        fld: &MacroExpander)\n                        -> SmallVector<@ast::item> {\n@@ -407,7 +407,7 @@ fn insert_macro(exts: SyntaxEnv, name: ast::Name, transformer: @Transformer) {\n \n // expand a stmt\n pub fn expand_stmt(extsbox: @mut SyntaxEnv,\n-                   cx: @ExtCtxt,\n+                   cx: &ExtCtxt,\n                    s: &Stmt,\n                    fld: &MacroExpander)\n                    -> SmallVector<@Stmt> {\n@@ -625,7 +625,7 @@ pub fn new_name_finder(idents: ~[ast::Ident]) -> NewNameFinderContext {\n \n // expand a block. pushes a new exts_frame, then calls expand_block_elts\n pub fn expand_block(extsbox: @mut SyntaxEnv,\n-                    _: @ExtCtxt,\n+                    _: &ExtCtxt,\n                     blk: &Block,\n                     fld: &MacroExpander)\n                     -> P<Block> {\n@@ -690,7 +690,7 @@ pub fn renames_to_fold(renames: @mut ~[(ast::Ident,ast::Name)]) -> @ast_fold {\n     } as @ast_fold\n }\n \n-pub fn new_span(cx: @ExtCtxt, sp: Span) -> Span {\n+pub fn new_span(cx: &ExtCtxt, sp: Span) -> Span {\n     /* this discards information in the case of macro-defining macros */\n     Span {\n         lo: sp.lo,\n@@ -949,12 +949,12 @@ pub fn inject_std_macros(parse_sess: @mut parse::ParseSess,\n     injector.fold_crate(c)\n }\n \n-pub struct MacroExpander {\n+pub struct MacroExpander<'a> {\n     extsbox: @mut SyntaxEnv,\n-    cx: @ExtCtxt,\n+    cx: &'a ExtCtxt,\n }\n \n-impl ast_fold for MacroExpander {\n+impl<'a> ast_fold for MacroExpander<'a> {\n     fn fold_expr(&self, expr: @ast::Expr) -> @ast::Expr {\n         expand_expr(self.extsbox,\n                     self.cx,\n@@ -1005,10 +1005,10 @@ pub fn expand_crate(parse_sess: @mut parse::ParseSess,\n     // every method/element of AstFoldFns in fold.rs.\n     let extsbox = syntax_expander_table();\n     let cx = ExtCtxt::new(parse_sess, cfg.clone());\n-    let expander = @MacroExpander {\n+    let expander = MacroExpander {\n         extsbox: @mut extsbox,\n-        cx: cx,\n-    } as @ast_fold;\n+        cx: &cx,\n+    };\n \n     let ret = expander.fold_crate(c);\n     parse_sess.span_diagnostic.handler().abort_if_errors();\n@@ -1159,7 +1159,7 @@ pub fn mtwt_cancel_outer_mark(tts: &[ast::token_tree], ctxt: ast::SyntaxContext)\n     mark_tts(tts,outer_mark)\n }\n \n-fn original_span(cx: @ExtCtxt) -> @codemap::ExpnInfo {\n+fn original_span(cx: &ExtCtxt) -> @codemap::ExpnInfo {\n     let mut relevant_info = cx.backtrace();\n     let mut einfo = relevant_info.unwrap();\n     loop {"}, {"sha": "f2eab3f1cbc4c43553560e0bdcede0f6a9478d8f", "filename": "src/libsyntax/ext/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ffmt.rs?ref=0607c138caf991c7dbe4fef57a08958a5e7fb621", "patch": "@@ -15,7 +15,7 @@ use codemap::Span;\n use ext::base;\n use ext::build::AstBuilder;\n \n-pub fn expand_syntax_ext(ecx: @base::ExtCtxt, sp: Span,\n+pub fn expand_syntax_ext(ecx: &base::ExtCtxt, sp: Span,\n                          _tts: &[ast::token_tree]) -> base::MacResult {\n     ecx.span_err(sp, \"`fmt!` is deprecated, use `format!` instead\");\n     ecx.parse_sess.span_diagnostic.span_note(sp,"}, {"sha": "2b51203eca5bba049e985b10bba8ff07c4c001af", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=0607c138caf991c7dbe4fef57a08958a5e7fb621", "patch": "@@ -28,8 +28,8 @@ enum ArgumentType {\n     String,\n }\n \n-struct Context {\n-    ecx: @ExtCtxt,\n+struct Context<'a> {\n+    ecx: &'a ExtCtxt,\n     fmtsp: Span,\n \n     // Parsed argument expressions and the types that we've found so far for\n@@ -50,7 +50,7 @@ struct Context {\n     next_arg: uint,\n }\n \n-impl Context {\n+impl<'a> Context<'a> {\n     /// Parses the arguments from the given list of tokens, returning None if\n     /// there's a parse error so we can continue parsing other format! expressions.\n     fn parse_args(&mut self, sp: Span,\n@@ -722,7 +722,7 @@ impl Context {\n     }\n }\n \n-pub fn expand_args(ecx: @ExtCtxt, sp: Span,\n+pub fn expand_args(ecx: &ExtCtxt, sp: Span,\n                    tts: &[ast::token_tree]) -> base::MacResult {\n     let mut cx = Context {\n         ecx: ecx,"}, {"sha": "7dfd487b379fcfad27329283bf7dff73ffbebd6f", "filename": "src/libsyntax/ext/log_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Flog_syntax.rs?ref=0607c138caf991c7dbe4fef57a08958a5e7fb621", "patch": "@@ -15,7 +15,7 @@ use ext::base;\n use print;\n use parse::token::{get_ident_interner};\n \n-pub fn expand_syntax_ext(cx: @ExtCtxt,\n+pub fn expand_syntax_ext(cx: &ExtCtxt,\n                          sp: codemap::Span,\n                          tt: &[ast::token_tree])\n                       -> base::MacResult {"}, {"sha": "f6086734003e86bcd4d5fcc1e8f44e149c03f107", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=0607c138caf991c7dbe4fef57a08958a5e7fb621", "patch": "@@ -40,11 +40,11 @@ pub mod rt {\n     pub use codemap::{BytePos, Span, dummy_spanned};\n \n     pub trait ToTokens {\n-        fn to_tokens(&self, _cx: @ExtCtxt) -> ~[token_tree];\n+        fn to_tokens(&self, _cx: &ExtCtxt) -> ~[token_tree];\n     }\n \n     impl ToTokens for ~[token_tree] {\n-        fn to_tokens(&self, _cx: @ExtCtxt) -> ~[token_tree] {\n+        fn to_tokens(&self, _cx: &ExtCtxt) -> ~[token_tree] {\n             (*self).clone()\n         }\n     }\n@@ -56,7 +56,7 @@ pub mod rt {\n         pub fn to_source() -> ~str;\n \n         // If you can make source, you can definitely make tokens.\n-        pub fn to_tokens(cx: @ExtCtxt) -> ~[token_tree] {\n+        pub fn to_tokens(cx: &ExtCtxt) -> ~[token_tree] {\n             cx.parse_tts(self.to_source())\n         }\n     }\n@@ -199,7 +199,7 @@ pub mod rt {\n     macro_rules! impl_to_tokens(\n         ($t:ty) => (\n             impl ToTokens for $t {\n-                fn to_tokens(&self, cx: @ExtCtxt) -> ~[token_tree] {\n+                fn to_tokens(&self, cx: &ExtCtxt) -> ~[token_tree] {\n                     cx.parse_tts(self.to_source())\n                 }\n             }\n@@ -209,7 +209,7 @@ pub mod rt {\n     macro_rules! impl_to_tokens_self(\n         ($t:ty) => (\n             impl<'a> ToTokens for $t {\n-                fn to_tokens(&self, cx: @ExtCtxt) -> ~[token_tree] {\n+                fn to_tokens(&self, cx: &ExtCtxt) -> ~[token_tree] {\n                     cx.parse_tts(self.to_source())\n                 }\n             }\n@@ -289,22 +289,22 @@ pub mod rt {\n \n }\n \n-pub fn expand_quote_tokens(cx: @ExtCtxt,\n+pub fn expand_quote_tokens(cx: &ExtCtxt,\n                            sp: Span,\n                            tts: &[ast::token_tree]) -> base::MacResult {\n     let (cx_expr, expr) = expand_tts(cx, sp, tts);\n     let expanded = expand_wrapper(cx, sp, cx_expr, expr);\n     base::MRExpr(expanded)\n }\n \n-pub fn expand_quote_expr(cx: @ExtCtxt,\n+pub fn expand_quote_expr(cx: &ExtCtxt,\n                          sp: Span,\n                          tts: &[ast::token_tree]) -> base::MacResult {\n     let expanded = expand_parse_call(cx, sp, \"parse_expr\", ~[], tts);\n     base::MRExpr(expanded)\n }\n \n-pub fn expand_quote_item(cx: @ExtCtxt,\n+pub fn expand_quote_item(cx: &ExtCtxt,\n                          sp: Span,\n                          tts: &[ast::token_tree]) -> base::MacResult {\n     let e_attrs = cx.expr_vec_uniq(sp, ~[]);\n@@ -313,7 +313,7 @@ pub fn expand_quote_item(cx: @ExtCtxt,\n     base::MRExpr(expanded)\n }\n \n-pub fn expand_quote_pat(cx: @ExtCtxt,\n+pub fn expand_quote_pat(cx: &ExtCtxt,\n                         sp: Span,\n                         tts: &[ast::token_tree]) -> base::MacResult {\n     let e_refutable = cx.expr_lit(sp, ast::lit_bool(true));\n@@ -322,7 +322,7 @@ pub fn expand_quote_pat(cx: @ExtCtxt,\n     base::MRExpr(expanded)\n }\n \n-pub fn expand_quote_ty(cx: @ExtCtxt,\n+pub fn expand_quote_ty(cx: &ExtCtxt,\n                        sp: Span,\n                        tts: &[ast::token_tree]) -> base::MacResult {\n     let e_param_colons = cx.expr_lit(sp, ast::lit_bool(false));\n@@ -331,7 +331,7 @@ pub fn expand_quote_ty(cx: @ExtCtxt,\n     base::MRExpr(expanded)\n }\n \n-pub fn expand_quote_stmt(cx: @ExtCtxt,\n+pub fn expand_quote_stmt(cx: &ExtCtxt,\n                          sp: Span,\n                          tts: &[ast::token_tree]) -> base::MacResult {\n     let e_attrs = cx.expr_vec_uniq(sp, ~[]);\n@@ -349,15 +349,15 @@ fn id_ext(str: &str) -> ast::Ident {\n }\n \n // Lift an ident to the expr that evaluates to that ident.\n-fn mk_ident(cx: @ExtCtxt, sp: Span, ident: ast::Ident) -> @ast::Expr {\n+fn mk_ident(cx: &ExtCtxt, sp: Span, ident: ast::Ident) -> @ast::Expr {\n     let e_str = cx.expr_str(sp, cx.str_of(ident));\n     cx.expr_method_call(sp,\n                         cx.expr_ident(sp, id_ext(\"ext_cx\")),\n                         id_ext(\"ident_of\"),\n                         ~[e_str])\n }\n \n-fn mk_binop(cx: @ExtCtxt, sp: Span, bop: token::binop) -> @ast::Expr {\n+fn mk_binop(cx: &ExtCtxt, sp: Span, bop: token::binop) -> @ast::Expr {\n     let name = match bop {\n         PLUS => \"PLUS\",\n         MINUS => \"MINUS\",\n@@ -373,7 +373,7 @@ fn mk_binop(cx: @ExtCtxt, sp: Span, bop: token::binop) -> @ast::Expr {\n     cx.expr_ident(sp, id_ext(name))\n }\n \n-fn mk_token(cx: @ExtCtxt, sp: Span, tok: &token::Token) -> @ast::Expr {\n+fn mk_token(cx: &ExtCtxt, sp: Span, tok: &token::Token) -> @ast::Expr {\n \n     match *tok {\n         BINOP(binop) => {\n@@ -528,7 +528,7 @@ fn mk_token(cx: @ExtCtxt, sp: Span, tok: &token::Token) -> @ast::Expr {\n }\n \n \n-fn mk_tt(cx: @ExtCtxt, sp: Span, tt: &ast::token_tree)\n+fn mk_tt(cx: &ExtCtxt, sp: Span, tt: &ast::token_tree)\n     -> ~[@ast::Stmt] {\n \n     match *tt {\n@@ -570,7 +570,7 @@ fn mk_tt(cx: @ExtCtxt, sp: Span, tt: &ast::token_tree)\n     }\n }\n \n-fn mk_tts(cx: @ExtCtxt, sp: Span, tts: &[ast::token_tree])\n+fn mk_tts(cx: &ExtCtxt, sp: Span, tts: &[ast::token_tree])\n     -> ~[@ast::Stmt] {\n     let mut ss = ~[];\n     for tt in tts.iter() {\n@@ -579,7 +579,7 @@ fn mk_tts(cx: @ExtCtxt, sp: Span, tts: &[ast::token_tree])\n     ss\n }\n \n-fn expand_tts(cx: @ExtCtxt,\n+fn expand_tts(cx: &ExtCtxt,\n               sp: Span,\n               tts: &[ast::token_tree]) -> (@ast::Expr, @ast::Expr) {\n \n@@ -652,7 +652,7 @@ fn expand_tts(cx: @ExtCtxt,\n     (cx_expr, block)\n }\n \n-fn expand_wrapper(cx: @ExtCtxt,\n+fn expand_wrapper(cx: &ExtCtxt,\n                   sp: Span,\n                   cx_expr: @ast::Expr,\n                   expr: @ast::Expr) -> @ast::Expr {\n@@ -667,7 +667,7 @@ fn expand_wrapper(cx: @ExtCtxt,\n     cx.expr_block(cx.block_all(sp, uses, ~[stmt_let_ext_cx], Some(expr)))\n }\n \n-fn expand_parse_call(cx: @ExtCtxt,\n+fn expand_parse_call(cx: &ExtCtxt,\n                      sp: Span,\n                      parse_method: &str,\n                      arg_exprs: ~[@ast::Expr],"}, {"sha": "cf11bdcce64fadbf32044412053f21cdc40b6fed", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=0607c138caf991c7dbe4fef57a08958a5e7fb621", "patch": "@@ -28,7 +28,7 @@ use std::str;\n // a given file into the current one.\n \n /* line!(): expands to the current line number */\n-pub fn expand_line(cx: @ExtCtxt, sp: Span, tts: &[ast::token_tree])\n+pub fn expand_line(cx: &ExtCtxt, sp: Span, tts: &[ast::token_tree])\n     -> base::MacResult {\n     base::check_zero_tts(cx, sp, tts, \"line!\");\n \n@@ -39,7 +39,7 @@ pub fn expand_line(cx: @ExtCtxt, sp: Span, tts: &[ast::token_tree])\n }\n \n /* col!(): expands to the current column number */\n-pub fn expand_col(cx: @ExtCtxt, sp: Span, tts: &[ast::token_tree])\n+pub fn expand_col(cx: &ExtCtxt, sp: Span, tts: &[ast::token_tree])\n     -> base::MacResult {\n     base::check_zero_tts(cx, sp, tts, \"col!\");\n \n@@ -51,7 +51,7 @@ pub fn expand_col(cx: @ExtCtxt, sp: Span, tts: &[ast::token_tree])\n /* file!(): expands to the current filename */\n /* The filemap (`loc.file`) contains a bunch more information we could spit\n  * out if we wanted. */\n-pub fn expand_file(cx: @ExtCtxt, sp: Span, tts: &[ast::token_tree])\n+pub fn expand_file(cx: &ExtCtxt, sp: Span, tts: &[ast::token_tree])\n     -> base::MacResult {\n     base::check_zero_tts(cx, sp, tts, \"file!\");\n \n@@ -61,13 +61,13 @@ pub fn expand_file(cx: @ExtCtxt, sp: Span, tts: &[ast::token_tree])\n     base::MRExpr(cx.expr_str(topmost.call_site, filename))\n }\n \n-pub fn expand_stringify(cx: @ExtCtxt, sp: Span, tts: &[ast::token_tree])\n+pub fn expand_stringify(cx: &ExtCtxt, sp: Span, tts: &[ast::token_tree])\n     -> base::MacResult {\n     let s = pprust::tts_to_str(tts, get_ident_interner());\n     base::MRExpr(cx.expr_str(sp, s.to_managed()))\n }\n \n-pub fn expand_mod(cx: @ExtCtxt, sp: Span, tts: &[ast::token_tree])\n+pub fn expand_mod(cx: &ExtCtxt, sp: Span, tts: &[ast::token_tree])\n     -> base::MacResult {\n     base::check_zero_tts(cx, sp, tts, \"module_path!\");\n     base::MRExpr(cx.expr_str(sp,\n@@ -77,7 +77,7 @@ pub fn expand_mod(cx: @ExtCtxt, sp: Span, tts: &[ast::token_tree])\n // include! : parse the given file as an expr\n // This is generally a bad idea because it's going to behave\n // unhygienically.\n-pub fn expand_include(cx: @ExtCtxt, sp: Span, tts: &[ast::token_tree])\n+pub fn expand_include(cx: &ExtCtxt, sp: Span, tts: &[ast::token_tree])\n     -> base::MacResult {\n     let file = get_single_str_from_tts(cx, sp, tts, \"include!\");\n     // The file will be added to the code map by the parser\n@@ -88,7 +88,7 @@ pub fn expand_include(cx: @ExtCtxt, sp: Span, tts: &[ast::token_tree])\n }\n \n // include_str! : read the given file, insert it as a literal string expr\n-pub fn expand_include_str(cx: @ExtCtxt, sp: Span, tts: &[ast::token_tree])\n+pub fn expand_include_str(cx: &ExtCtxt, sp: Span, tts: &[ast::token_tree])\n     -> base::MacResult {\n     let file = get_single_str_from_tts(cx, sp, tts, \"include_str!\");\n     let file = res_rel_file(cx, sp, &Path::new(file));\n@@ -120,7 +120,7 @@ pub fn expand_include_str(cx: @ExtCtxt, sp: Span, tts: &[ast::token_tree])\n     }\n }\n \n-pub fn expand_include_bin(cx: @ExtCtxt, sp: Span, tts: &[ast::token_tree])\n+pub fn expand_include_bin(cx: &ExtCtxt, sp: Span, tts: &[ast::token_tree])\n         -> base::MacResult\n {\n     use std::at_vec;\n@@ -167,7 +167,7 @@ fn topmost_expn_info(expn_info: @codemap::ExpnInfo) -> @codemap::ExpnInfo {\n \n // resolve a file-system path to an absolute file-system path (if it\n // isn't already)\n-fn res_rel_file(cx: @ExtCtxt, sp: codemap::Span, arg: &Path) -> Path {\n+fn res_rel_file(cx: &ExtCtxt, sp: codemap::Span, arg: &Path) -> Path {\n     // NB: relative paths are resolved relative to the compilation unit\n     if !arg.is_absolute() {\n         let mut cu = Path::new(cx.codemap().span_to_filename(sp));"}, {"sha": "cd172495d705b07e858b61b3d96f2d76f001eff7", "filename": "src/libsyntax/ext/trace_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftrace_macros.rs?ref=0607c138caf991c7dbe4fef57a08958a5e7fb621", "patch": "@@ -16,7 +16,7 @@ use parse::lexer::{new_tt_reader, reader};\n use parse::parser::Parser;\n use parse::token::keywords;\n \n-pub fn expand_trace_macros(cx: @ExtCtxt,\n+pub fn expand_trace_macros(cx: &ExtCtxt,\n                            sp: Span,\n                            tt: &[ast::token_tree])\n                         -> base::MacResult {"}, {"sha": "63517ca2269d8aea9dd4c0ac62cdfb91d9435ba1", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=0607c138caf991c7dbe4fef57a08958a5e7fb621", "patch": "@@ -83,7 +83,7 @@ struct MacroRulesSyntaxExpanderTTFun {\n \n impl SyntaxExpanderTTTrait for MacroRulesSyntaxExpanderTTFun {\n     fn expand(&self,\n-              cx: @ExtCtxt,\n+              cx: &ExtCtxt,\n               sp: Span,\n               arg: &[ast::token_tree],\n               _: ast::SyntaxContext)\n@@ -93,7 +93,7 @@ impl SyntaxExpanderTTTrait for MacroRulesSyntaxExpanderTTFun {\n }\n \n // Given `lhses` and `rhses`, this is the new macro we create\n-fn generic_extension(cx: @ExtCtxt,\n+fn generic_extension(cx: &ExtCtxt,\n                      sp: Span,\n                      name: Ident,\n                      arg: &[ast::token_tree],\n@@ -168,7 +168,7 @@ fn generic_extension(cx: @ExtCtxt,\n // this procedure performs the expansion of the\n // macro_rules! macro. It parses the RHS and adds\n // an extension to the current context.\n-pub fn add_new_extension(cx: @ExtCtxt,\n+pub fn add_new_extension(cx: &ExtCtxt,\n                          sp: Span,\n                          name: Ident,\n                          arg: ~[ast::token_tree],"}, {"sha": "dc95faa19864766dc30bc1dea4d2b92c21fac9b3", "filename": "src/test/run-pass-fulldeps/quote-tokens.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0607c138caf991c7dbe4fef57a08958a5e7fb621/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs?ref=0607c138caf991c7dbe4fef57a08958a5e7fb621", "patch": "@@ -16,7 +16,7 @@ extern mod syntax;\n \n use syntax::ext::base::ExtCtxt;\n \n-fn syntax_extension(cx: @ExtCtxt) {\n+fn syntax_extension(cx: &ExtCtxt) {\n     let e_toks : ~[syntax::ast::token_tree] = quote_tokens!(cx, 1 + 2);\n     let p_toks : ~[syntax::ast::token_tree] = quote_tokens!(cx, (x, 1 .. 4, *));\n "}]}