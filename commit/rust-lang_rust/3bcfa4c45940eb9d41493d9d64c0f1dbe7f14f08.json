{"sha": "3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08", "node_id": "C_kwDOAAsO6NoAKDNiY2ZhNGM0NTk0MGViOWQ0MTQ5M2Q5ZDY0YzBmMWRiZTdmMTRmMDg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-07T14:39:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-07T14:39:06Z"}, "message": "Rollup merge of #105267 - compiler-errors:issue-104613, r=oli-obk\n\nDon't ICE in ExprUseVisitor on FRU for non-existent struct\n\nFixes #104613\nFixes #105202", "tree": {"sha": "8674f6b46d935cdcebb263920243734f7e0a0707", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8674f6b46d935cdcebb263920243734f7e0a0707"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjkKWKCRBK7hj4Ov3rIwAAfPcIAKWXpZWvOtjI/yKKYTbT/kxW\nu7uZ+WWNy9P3u9jYAojPjL2ZAng4R9SBqaBOVV1DJkTBPQt2bjgZuwih4xH7cQ92\nT6Si2vIE8IJiZzHM2nj1jtV9maW6wbmzO4M9CmBnR3w4j+i7UVSiDW0X1MSmYvGq\nkG3LNZvyQO43vgzDygaWAvuXsOF1hWk9qX6zTWdG5PB0TVW4x3M+TMvnAC2oaNUA\nqvbLAEWHRYo1vrmeOcAwq8sq9v0W6AOExL5XHTi69PDJ98up5bqtg5KDY8vmfUMX\nmvyIYSNj27CeX+z9DVns/z1UT6eizAmgjEKTqHoYKuqjfK2Jdu8jFnJJAEQM0aE=\n=xFJa\n-----END PGP SIGNATURE-----\n", "payload": "tree 8674f6b46d935cdcebb263920243734f7e0a0707\nparent 91b8f34ac2272e3c94a97bebc033abe8e2f17101\nparent 1c81540206b10a2b5b709540ba5ac138eaaa5261\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1670423946 +0100\ncommitter GitHub <noreply@github.com> 1670423946 +0100\n\nRollup merge of #105267 - compiler-errors:issue-104613, r=oli-obk\n\nDon't ICE in ExprUseVisitor on FRU for non-existent struct\n\nFixes #104613\nFixes #105202\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08", "html_url": "https://github.com/rust-lang/rust/commit/3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91b8f34ac2272e3c94a97bebc033abe8e2f17101", "url": "https://api.github.com/repos/rust-lang/rust/commits/91b8f34ac2272e3c94a97bebc033abe8e2f17101", "html_url": "https://github.com/rust-lang/rust/commit/91b8f34ac2272e3c94a97bebc033abe8e2f17101"}, {"sha": "1c81540206b10a2b5b709540ba5ac138eaaa5261", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c81540206b10a2b5b709540ba5ac138eaaa5261", "html_url": "https://github.com/rust-lang/rust/commit/1c81540206b10a2b5b709540ba5ac138eaaa5261"}], "stats": {"total": 104, "additions": 85, "deletions": 19}, "files": [{"sha": "ed87b94a040d0f87b4d665898481ea2efa3c10d9", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08", "patch": "@@ -1647,6 +1647,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // the fields with the base_expr. This could cause us to hit errors later\n         // when certain fields are assumed to exist that in fact do not.\n         if error_happened {\n+            if let Some(base_expr) = base_expr {\n+                self.check_expr(base_expr);\n+            }\n             return;\n         }\n "}, {"sha": "03b174c77955fb400eab47aa6071b3cec6bef94a", "filename": "compiler/rustc_hir_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08", "patch": "@@ -523,6 +523,11 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n         // Consume the expressions supplying values for each field.\n         for field in fields {\n             self.consume_expr(field.expr);\n+\n+            // The struct path probably didn't resolve\n+            if self.mc.typeck_results.opt_field_index(field.hir_id).is_none() {\n+                self.tcx().sess.delay_span_bug(field.span, \"couldn't resolve index for field\");\n+            }\n         }\n \n         let with_expr = match *opt_with {\n@@ -540,9 +545,9 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n             ty::Adt(adt, substs) if adt.is_struct() => {\n                 // Consume those fields of the with expression that are needed.\n                 for (f_index, with_field) in adt.non_enum_variant().fields.iter().enumerate() {\n-                    let is_mentioned = fields.iter().any(|f| {\n-                        self.tcx().field_index(f.hir_id, self.mc.typeck_results) == f_index\n-                    });\n+                    let is_mentioned = fields\n+                        .iter()\n+                        .any(|f| self.mc.typeck_results.opt_field_index(f.hir_id) == Some(f_index));\n                     if !is_mentioned {\n                         let field_place = self.mc.cat_projection(\n                             &*with_expr,"}, {"sha": "d0d34d8d2b40ee23be061701dc4bf7926d070f32", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08", "patch": "@@ -259,7 +259,7 @@ impl<'tcx> LateLintPass<'tcx> for NonShorthandFieldPatterns {\n                 }\n                 if let PatKind::Binding(binding_annot, _, ident, None) = fieldpat.pat.kind {\n                     if cx.tcx.find_field_index(ident, &variant)\n-                        == Some(cx.tcx.field_index(fieldpat.hir_id, cx.typeck_results()))\n+                        == Some(cx.typeck_results().field_index(fieldpat.hir_id))\n                     {\n                         cx.struct_span_lint(\n                             NON_SHORTHAND_FIELD_PATTERNS,"}, {"sha": "af573376a26bc433a88b067a83989f7fc115d939", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08", "patch": "@@ -667,6 +667,14 @@ impl<'tcx> TypeckResults<'tcx> {\n         LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.field_indices }\n     }\n \n+    pub fn field_index(&self, id: hir::HirId) -> usize {\n+        self.field_indices().get(id).cloned().expect(\"no index for a field\")\n+    }\n+\n+    pub fn opt_field_index(&self, id: hir::HirId) -> Option<usize> {\n+        self.field_indices().get(id).cloned()\n+    }\n+\n     pub fn user_provided_types(&self) -> LocalTableInContext<'_, CanonicalUserType<'tcx>> {\n         LocalTableInContext { hir_owner: self.hir_owner, data: &self.user_provided_types }\n     }"}, {"sha": "c062e508ee3df26ed93a1fd7b48aa34f6625b126", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08", "patch": "@@ -2142,10 +2142,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n-    pub fn field_index(self, hir_id: hir::HirId, typeck_results: &TypeckResults<'_>) -> usize {\n-        typeck_results.field_indices().get(hir_id).cloned().expect(\"no index for a field\")\n-    }\n-\n     pub fn find_field_index(self, ident: Ident, variant: &VariantDef) -> Option<usize> {\n         variant\n             .fields"}, {"sha": "261b95ba95b0e36781448e9fdc7be376773f99cb", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08", "patch": "@@ -704,7 +704,7 @@ impl<'tcx> Cx<'tcx> {\n             hir::ExprKind::Field(ref source, ..) => ExprKind::Field {\n                 lhs: self.mirror_expr(source),\n                 variant_index: VariantIdx::new(0),\n-                name: Field::new(tcx.field_index(expr.hir_id, self.typeck_results)),\n+                name: Field::new(self.typeck_results.field_index(expr.hir_id)),\n             },\n             hir::ExprKind::Cast(ref source, ref cast_ty) => {\n                 // Check for a user-given type annotation on this `cast`\n@@ -1079,7 +1079,7 @@ impl<'tcx> Cx<'tcx> {\n         fields\n             .iter()\n             .map(|field| FieldExpr {\n-                name: Field::new(self.tcx.field_index(field.hir_id, self.typeck_results)),\n+                name: Field::new(self.typeck_results.field_index(field.hir_id)),\n                 expr: self.mirror_expr(field.expr),\n             })\n             .collect()"}, {"sha": "48a231a6cd6b7c4648396131e1743e0a71065b04", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08", "patch": "@@ -321,7 +321,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n                 let subpatterns = fields\n                     .iter()\n                     .map(|field| FieldPat {\n-                        field: Field::new(self.tcx.field_index(field.hir_id, self.typeck_results)),\n+                        field: Field::new(self.typeck_results.field_index(field.hir_id)),\n                         pattern: self.lower_pattern(&field.pat),\n                     })\n                     .collect();"}, {"sha": "a71ae717a508d37ee42db75d1a5add8a994fac0b", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08", "patch": "@@ -124,7 +124,7 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n     fn handle_field_access(&mut self, lhs: &hir::Expr<'_>, hir_id: hir::HirId) {\n         match self.typeck_results().expr_ty_adjusted(lhs).kind() {\n             ty::Adt(def, _) => {\n-                let index = self.tcx.field_index(hir_id, self.typeck_results());\n+                let index = self.typeck_results().field_index(hir_id);\n                 self.insert_def_id(def.non_enum_variant().fields[index].did);\n             }\n             ty::Tuple(..) => {}\n@@ -208,7 +208,7 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n             if let PatKind::Wild = pat.pat.kind {\n                 continue;\n             }\n-            let index = self.tcx.field_index(pat.hir_id, self.typeck_results());\n+            let index = self.typeck_results().field_index(pat.hir_id);\n             self.insert_def_id(variant.fields[index].did);\n         }\n     }\n@@ -341,7 +341,7 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n     fn mark_as_used_if_union(&mut self, adt: ty::AdtDef<'tcx>, fields: &[hir::ExprField<'_>]) {\n         if adt.is_union() && adt.non_enum_variant().fields.len() > 1 && adt.did().is_local() {\n             for field in fields {\n-                let index = self.tcx.field_index(field.hir_id, self.typeck_results());\n+                let index = self.typeck_results().field_index(field.hir_id);\n                 self.insert_def_id(adt.non_enum_variant().fields[index].did);\n             }\n         }"}, {"sha": "a254c892478cf19815f2ccf79e670f3db96f08dd", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08", "patch": "@@ -1065,9 +1065,9 @@ impl<'tcx> Visitor<'tcx> for NamePrivacyVisitor<'tcx> {\n                 // are checked for privacy (RFC 736). Rather than computing the set of\n                 // unmentioned fields, just check them all.\n                 for (vf_index, variant_field) in variant.fields.iter().enumerate() {\n-                    let field = fields.iter().find(|f| {\n-                        self.tcx.field_index(f.hir_id, self.typeck_results()) == vf_index\n-                    });\n+                    let field = fields\n+                        .iter()\n+                        .find(|f| self.typeck_results().field_index(f.hir_id) == vf_index);\n                     let (use_ctxt, span) = match field {\n                         Some(field) => (field.ident.span, field.span),\n                         None => (base.span, base.span),\n@@ -1077,7 +1077,7 @@ impl<'tcx> Visitor<'tcx> for NamePrivacyVisitor<'tcx> {\n             } else {\n                 for field in fields {\n                     let use_ctxt = field.ident.span;\n-                    let index = self.tcx.field_index(field.hir_id, self.typeck_results());\n+                    let index = self.typeck_results().field_index(field.hir_id);\n                     self.check_field(use_ctxt, field.span, adt, &variant.fields[index], false);\n                 }\n             }\n@@ -1093,7 +1093,7 @@ impl<'tcx> Visitor<'tcx> for NamePrivacyVisitor<'tcx> {\n             let variant = adt.variant_of_res(res);\n             for field in fields {\n                 let use_ctxt = field.ident.span;\n-                let index = self.tcx.field_index(field.hir_id, self.typeck_results());\n+                let index = self.typeck_results().field_index(field.hir_id);\n                 self.check_field(use_ctxt, field.span, adt, &variant.fields[index], false);\n             }\n         }"}, {"sha": "28ad7767583cfbd3d994c37179783ad51d8326d6", "filename": "src/test/ui/async-await/drop-track-bad-field-in-fru.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08/src%2Ftest%2Fui%2Fasync-await%2Fdrop-track-bad-field-in-fru.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08/src%2Ftest%2Fui%2Fasync-await%2Fdrop-track-bad-field-in-fru.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-track-bad-field-in-fru.rs?ref=3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08", "patch": "@@ -0,0 +1,10 @@\n+// compile-flags: -Zdrop-tracking\n+// edition: 2021\n+\n+fn main() {}\n+\n+async fn foo() {\n+    None { value: (), ..Default::default() }.await;\n+    //~^ ERROR `Option<_>` is not a future\n+    //~| ERROR variant `Option<_>::None` has no field named `value`\n+}"}, {"sha": "819b64ad77f5dd1b1f06a51ae52fa02ba38b0aab", "filename": "src/test/ui/async-await/drop-track-bad-field-in-fru.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08/src%2Ftest%2Fui%2Fasync-await%2Fdrop-track-bad-field-in-fru.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08/src%2Ftest%2Fui%2Fasync-await%2Fdrop-track-bad-field-in-fru.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-track-bad-field-in-fru.stderr?ref=3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08", "patch": "@@ -0,0 +1,23 @@\n+error[E0559]: variant `Option<_>::None` has no field named `value`\n+  --> $DIR/drop-track-bad-field-in-fru.rs:7:12\n+   |\n+LL |     None { value: (), ..Default::default() }.await;\n+   |            ^^^^^ `Option<_>::None` does not have this field\n+\n+error[E0277]: `Option<_>` is not a future\n+  --> $DIR/drop-track-bad-field-in-fru.rs:7:45\n+   |\n+LL |     None { value: (), ..Default::default() }.await;\n+   |                                             ^^^^^^\n+   |                                             |\n+   |                                             `Option<_>` is not a future\n+   |                                             help: remove the `.await`\n+   |\n+   = help: the trait `Future` is not implemented for `Option<_>`\n+   = note: Option<_> must be a future or must implement `IntoFuture` to be awaited\n+   = note: required for `Option<_>` to implement `IntoFuture`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0277, E0559.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "c9fdca4577279d244effc4bff1dad0b11a90f36a", "filename": "src/test/ui/structs/unresolved-struct-with-fru.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08/src%2Ftest%2Fui%2Fstructs%2Funresolved-struct-with-fru.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08/src%2Ftest%2Fui%2Fstructs%2Funresolved-struct-with-fru.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Funresolved-struct-with-fru.rs?ref=3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08", "patch": "@@ -0,0 +1,12 @@\n+struct S {\n+    a: u32,\n+}\n+\n+fn main() {\n+    let s1 = S { a: 1 };\n+\n+    let _ = || {\n+        let s2 = Oops { a: 2, ..s1 };\n+        //~^ ERROR cannot find struct, variant or union type `Oops` in this scope\n+    };\n+}"}, {"sha": "a5796a222256d89dfacdf425574d8ee11390d9e0", "filename": "src/test/ui/structs/unresolved-struct-with-fru.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08/src%2Ftest%2Fui%2Fstructs%2Funresolved-struct-with-fru.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08/src%2Ftest%2Fui%2Fstructs%2Funresolved-struct-with-fru.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Funresolved-struct-with-fru.stderr?ref=3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08", "patch": "@@ -0,0 +1,9 @@\n+error[E0422]: cannot find struct, variant or union type `Oops` in this scope\n+  --> $DIR/unresolved-struct-with-fru.rs:9:18\n+   |\n+LL |         let s2 = Oops { a: 2, ..s1 };\n+   |                  ^^^^ not found in this scope\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0422`."}]}