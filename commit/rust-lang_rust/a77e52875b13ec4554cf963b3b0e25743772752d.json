{"sha": "a77e52875b13ec4554cf963b3b0e25743772752d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3N2U1Mjg3NWIxM2VjNDU1NGNmOTYzYjNiMGUyNTc0Mzc3Mjc1MmQ=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-03-14T04:08:47Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-03-15T08:21:20Z"}, "message": "Change json dumper (and a few other bits and pieces) to use rls-data rather than its own data structures", "tree": {"sha": "8b680a61e070d671170ae4e6c3c0b717b14da863", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b680a61e070d671170ae4e6c3c0b717b14da863"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a77e52875b13ec4554cf963b3b0e25743772752d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a77e52875b13ec4554cf963b3b0e25743772752d", "html_url": "https://github.com/rust-lang/rust/commit/a77e52875b13ec4554cf963b3b0e25743772752d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a77e52875b13ec4554cf963b3b0e25743772752d/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fee1f64434d5e6e13b803a218bf51796222c89f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/fee1f64434d5e6e13b803a218bf51796222c89f3", "html_url": "https://github.com/rust-lang/rust/commit/fee1f64434d5e6e13b803a218bf51796222c89f3"}], "stats": {"total": 659, "additions": 261, "deletions": 398}, "files": [{"sha": "59340ae87ee5da6e607b7e48ce976efd988b9228", "filename": "src/librustc_save_analysis/csv_dumper.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a77e52875b13ec4554cf963b3b0e25743772752d/src%2Flibrustc_save_analysis%2Fcsv_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a77e52875b13ec4554cf963b3b0e25743772752d/src%2Flibrustc_save_analysis%2Fcsv_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fcsv_dumper.rs?ref=a77e52875b13ec4554cf963b3b0e25743772752d", "patch": "@@ -13,6 +13,8 @@ use std::io::Write;\n use super::external_data::*;\n use super::dump::Dump;\n \n+use rls_data::{SpanData, CratePreludeData};\n+\n pub struct CsvDumper<'b, W: 'b> {\n     output: &'b mut W\n }\n@@ -429,6 +431,6 @@ fn make_values_str(pairs: &[(&'static str, &str)]) -> String {\n fn span_extent_str(span: SpanData) -> String {\n     format!(\"file_name,\\\"{}\\\",file_line,{},file_col,{},byte_start,{},\\\n              file_line_end,{},file_col_end,{},byte_end,{}\",\n-             span.file_name, span.line_start, span.column_start, span.byte_start,\n-             span.line_end, span.column_end, span.byte_end)\n+             span.file_name.to_str().unwrap(), span.line_start.0, span.column_start.0,\n+             span.byte_start, span.line_end.0, span.column_end.0, span.byte_end)\n }"}, {"sha": "6a80b703d9da379b7d385dfcd67e5fea25ff4547", "filename": "src/librustc_save_analysis/data.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a77e52875b13ec4554cf963b3b0e25743772752d/src%2Flibrustc_save_analysis%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a77e52875b13ec4554cf963b3b0e25743772752d/src%2Flibrustc_save_analysis%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdata.rs?ref=a77e52875b13ec4554cf963b3b0e25743772752d", "patch": "@@ -18,6 +18,8 @@ use rustc::hir::def_id::{CrateNum, DefId};\n use syntax::ast::{self, Attribute, NodeId};\n use syntax_pos::Span;\n \n+use rls_data::ExternalCrateData;\n+\n pub struct CrateData {\n     pub name: String,\n     pub number: u32,\n@@ -115,14 +117,6 @@ pub struct CratePreludeData {\n     pub span: Span,\n }\n \n-/// Data for external crates in the prelude of a crate.\n-#[derive(Debug, RustcEncodable)]\n-pub struct ExternalCrateData {\n-    pub name: String,\n-    pub num: CrateNum,\n-    pub file_name: String,\n-}\n-\n /// Data for enum declarations.\n #[derive(Clone, Debug, RustcEncodable)]\n pub struct EnumData {"}, {"sha": "84e1fb03f624e821068f2111b3fcefc67ee51eeb", "filename": "src/librustc_save_analysis/dump.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a77e52875b13ec4554cf963b3b0e25743772752d/src%2Flibrustc_save_analysis%2Fdump.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a77e52875b13ec4554cf963b3b0e25743772752d/src%2Flibrustc_save_analysis%2Fdump.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump.rs?ref=a77e52875b13ec4554cf963b3b0e25743772752d", "patch": "@@ -10,6 +10,8 @@\n \n use super::external_data::*;\n \n+use rls_data::CratePreludeData;\n+\n pub trait Dump {\n     fn crate_prelude(&mut self, CratePreludeData) {}\n     fn enum_data(&mut self, EnumData) {}"}, {"sha": "85bef9f3170ac78b6d5b3bd828b100fd47ad8fa8", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a77e52875b13ec4554cf963b3b0e25743772752d/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a77e52875b13ec4554cf963b3b0e25743772752d/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=a77e52875b13ec4554cf963b3b0e25743772752d", "patch": "@@ -54,6 +54,8 @@ use super::external_data::{Lower, make_def_id};\n use super::span_utils::SpanUtils;\n use super::recorder;\n \n+use rls_data::ExternalCrateData;\n+\n macro_rules! down_cast_data {\n     ($id:ident, $kind:ident, $sp:expr) => {\n         let $id = if let super::Data::$kind(data) = $id {"}, {"sha": "3555887007499ae702d2f2cc125525ea8a3f06fe", "filename": "src/librustc_save_analysis/external_data.rs", "status": "modified", "additions": 45, "deletions": 64, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/a77e52875b13ec4554cf963b3b0e25743772752d/src%2Flibrustc_save_analysis%2Fexternal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a77e52875b13ec4554cf963b3b0e25743772752d/src%2Flibrustc_save_analysis%2Fexternal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fexternal_data.rs?ref=a77e52875b13ec4554cf963b3b0e25743772752d", "patch": "@@ -17,8 +17,12 @@ use syntax::print::pprust;\n use syntax::symbol::Symbol;\n use syntax_pos::Span;\n \n+use std::path::PathBuf;\n+\n use data::{self, Visibility, SigElement};\n \n+use rls_data::{SpanData, CratePreludeData};\n+\n // FIXME: this should be pub(crate), but the current snapshot doesn't allow it yet\n pub trait Lower {\n     type Target;\n@@ -36,41 +40,26 @@ pub fn null_def_id() -> DefId {\n     }\n }\n \n-#[derive(Clone, Debug, RustcEncodable)]\n-pub struct SpanData {\n-    pub file_name: String,\n-    pub byte_start: u32,\n-    pub byte_end: u32,\n-    /// 1-based.\n-    pub line_start: usize,\n-    pub line_end: usize,\n-    /// 1-based, character offset.\n-    pub column_start: usize,\n-    pub column_end: usize,\n-}\n-\n-impl SpanData {\n-    pub fn from_span(span: Span, cm: &CodeMap) -> SpanData {\n-        let start = cm.lookup_char_pos(span.lo);\n-        let end = cm.lookup_char_pos(span.hi);\n-\n-        SpanData {\n-            file_name: start.file.name.clone(),\n-            byte_start: span.lo.0,\n-            byte_end: span.hi.0,\n-            line_start: start.line,\n-            line_end: end.line,\n-            column_start: start.col.0 + 1,\n-            column_end: end.col.0 + 1,\n-        }\n+pub fn span_from_span(span: Span, cm: &CodeMap) -> SpanData {\n+    let start = cm.lookup_char_pos(span.lo);\n+    let end = cm.lookup_char_pos(span.hi);\n+\n+    SpanData {\n+        file_name: start.file.name.clone().into(),\n+        byte_start: span.lo.0,\n+        byte_end: span.hi.0,\n+        line_start: start.line,\n+        line_end: end.line,\n+        column_start: start.col.0 + 1,\n+        column_end: end.col.0 + 1,\n     }\n }\n \n /// Represent an arbitrary attribute on a code element\n #[derive(Clone, Debug, RustcEncodable)]\n pub struct Attribute {\n-    value: String,\n-    span: SpanData,\n+    pub value: String,\n+    pub span: SpanData,\n }\n \n impl Lower for Vec<ast::Attribute> {\n@@ -93,20 +82,12 @@ impl Lower for Vec<ast::Attribute> {\n \n             Attribute {\n                 value: value,\n-                span: SpanData::from_span(attr.span, tcx.sess.codemap()),\n+                span: span_from_span(attr.span, tcx.sess.codemap()),\n             }\n         }).collect()\n     }\n }\n \n-#[derive(Debug, RustcEncodable)]\n-pub struct CratePreludeData {\n-    pub crate_name: String,\n-    pub crate_root: String,\n-    pub external_crates: Vec<data::ExternalCrateData>,\n-    pub span: SpanData,\n-}\n-\n impl Lower for data::CratePreludeData {\n     type Target = CratePreludeData;\n \n@@ -115,7 +96,7 @@ impl Lower for data::CratePreludeData {\n             crate_name: self.crate_name,\n             crate_root: self.crate_root,\n             external_crates: self.external_crates,\n-            span: SpanData::from_span(self.span, tcx.sess.codemap()),\n+            span: span_from_span(self.span, tcx.sess.codemap()),\n         }\n     }\n }\n@@ -145,7 +126,7 @@ impl Lower for data::EnumData {\n             name: self.name,\n             value: self.value,\n             qualname: self.qualname,\n-            span: SpanData::from_span(self.span, tcx.sess.codemap()),\n+            span: span_from_span(self.span, tcx.sess.codemap()),\n             scope: make_def_id(self.scope, &tcx.hir),\n             variants: self.variants.into_iter().map(|id| make_def_id(id, &tcx.hir)).collect(),\n             visibility: self.visibility,\n@@ -176,7 +157,7 @@ impl Lower for data::ExternCrateData {\n             name: self.name,\n             crate_num: self.crate_num,\n             location: self.location,\n-            span: SpanData::from_span(self.span, tcx.sess.codemap()),\n+            span: span_from_span(self.span, tcx.sess.codemap()),\n             scope: make_def_id(self.scope, &tcx.hir),\n         }\n     }\n@@ -195,7 +176,7 @@ impl Lower for data::FunctionCallData {\n \n     fn lower(self, tcx: TyCtxt) -> FunctionCallData {\n         FunctionCallData {\n-            span: SpanData::from_span(self.span, tcx.sess.codemap()),\n+            span: span_from_span(self.span, tcx.sess.codemap()),\n             scope: make_def_id(self.scope, &tcx.hir),\n             ref_id: self.ref_id,\n         }\n@@ -228,7 +209,7 @@ impl Lower for data::FunctionData {\n             name: self.name,\n             qualname: self.qualname,\n             declaration: self.declaration,\n-            span: SpanData::from_span(self.span, tcx.sess.codemap()),\n+            span: span_from_span(self.span, tcx.sess.codemap()),\n             scope: make_def_id(self.scope, &tcx.hir),\n             value: self.value,\n             visibility: self.visibility,\n@@ -253,7 +234,7 @@ impl Lower for data::FunctionRefData {\n \n     fn lower(self, tcx: TyCtxt) -> FunctionRefData {\n         FunctionRefData {\n-            span: SpanData::from_span(self.span, tcx.sess.codemap()),\n+            span: span_from_span(self.span, tcx.sess.codemap()),\n             scope: make_def_id(self.scope, &tcx.hir),\n             ref_id: self.ref_id,\n         }\n@@ -274,7 +255,7 @@ impl Lower for data::ImplData {\n     fn lower(self, tcx: TyCtxt) -> ImplData {\n         ImplData {\n             id: make_def_id(self.id, &tcx.hir),\n-            span: SpanData::from_span(self.span, tcx.sess.codemap()),\n+            span: span_from_span(self.span, tcx.sess.codemap()),\n             scope: make_def_id(self.scope, &tcx.hir),\n             trait_ref: self.trait_ref,\n             self_ref: self.self_ref,\n@@ -294,7 +275,7 @@ impl Lower for data::InheritanceData {\n \n     fn lower(self, tcx: TyCtxt) -> InheritanceData {\n         InheritanceData {\n-            span: SpanData::from_span(self.span, tcx.sess.codemap()),\n+            span: span_from_span(self.span, tcx.sess.codemap()),\n             base_id: self.base_id,\n             deriv_id: make_def_id(self.deriv_id, &tcx.hir)\n         }\n@@ -315,7 +296,7 @@ impl Lower for data::MacroData {\n \n     fn lower(self, tcx: TyCtxt) -> MacroData {\n         MacroData {\n-            span: SpanData::from_span(self.span, tcx.sess.codemap()),\n+            span: span_from_span(self.span, tcx.sess.codemap()),\n             name: self.name,\n             qualname: self.qualname,\n             docs: self.docs,\n@@ -340,10 +321,10 @@ impl Lower for data::MacroUseData {\n \n     fn lower(self, tcx: TyCtxt) -> MacroUseData {\n         MacroUseData {\n-            span: SpanData::from_span(self.span, tcx.sess.codemap()),\n+            span: span_from_span(self.span, tcx.sess.codemap()),\n             name: self.name,\n             qualname: self.qualname,\n-            callee_span: SpanData::from_span(self.callee_span, tcx.sess.codemap()),\n+            callee_span: span_from_span(self.callee_span, tcx.sess.codemap()),\n             scope: make_def_id(self.scope, &tcx.hir),\n         }\n     }\n@@ -363,7 +344,7 @@ impl Lower for data::MethodCallData {\n \n     fn lower(self, tcx: TyCtxt) -> MethodCallData {\n         MethodCallData {\n-            span: SpanData::from_span(self.span, tcx.sess.codemap()),\n+            span: span_from_span(self.span, tcx.sess.codemap()),\n             scope: make_def_id(self.scope, &tcx.hir),\n             ref_id: self.ref_id,\n             decl_id: self.decl_id,\n@@ -393,7 +374,7 @@ impl Lower for data::MethodData {\n \n     fn lower(self, tcx: TyCtxt) -> MethodData {\n         MethodData {\n-            span: SpanData::from_span(self.span, tcx.sess.codemap()),\n+            span: span_from_span(self.span, tcx.sess.codemap()),\n             name: self.name,\n             scope: make_def_id(self.scope, &tcx.hir),\n             id: make_def_id(self.id, &tcx.hir),\n@@ -433,7 +414,7 @@ impl Lower for data::ModData {\n             id: make_def_id(self.id, &tcx.hir),\n             name: self.name,\n             qualname: self.qualname,\n-            span: SpanData::from_span(self.span, tcx.sess.codemap()),\n+            span: span_from_span(self.span, tcx.sess.codemap()),\n             scope: make_def_id(self.scope, &tcx.hir),\n             filename: self.filename,\n             items: self.items.into_iter().map(|id| make_def_id(id, &tcx.hir)).collect(),\n@@ -459,7 +440,7 @@ impl Lower for data::ModRefData {\n \n     fn lower(self, tcx: TyCtxt) -> ModRefData {\n         ModRefData {\n-            span: SpanData::from_span(self.span, tcx.sess.codemap()),\n+            span: span_from_span(self.span, tcx.sess.codemap()),\n             scope: make_def_id(self.scope, &tcx.hir),\n             ref_id: self.ref_id,\n             qualname: self.qualname,\n@@ -488,7 +469,7 @@ impl Lower for data::StructData {\n \n     fn lower(self, tcx: TyCtxt) -> StructData {\n         StructData {\n-            span: SpanData::from_span(self.span, tcx.sess.codemap()),\n+            span: span_from_span(self.span, tcx.sess.codemap()),\n             name: self.name,\n             id: make_def_id(self.id, &tcx.hir),\n             ctor_id: make_def_id(self.ctor_id, &tcx.hir),\n@@ -524,7 +505,7 @@ impl Lower for data::StructVariantData {\n \n     fn lower(self, tcx: TyCtxt) -> StructVariantData {\n         StructVariantData {\n-            span: SpanData::from_span(self.span, tcx.sess.codemap()),\n+            span: span_from_span(self.span, tcx.sess.codemap()),\n             name: self.name,\n             id: make_def_id(self.id, &tcx.hir),\n             qualname: self.qualname,\n@@ -559,7 +540,7 @@ impl Lower for data::TraitData {\n \n     fn lower(self, tcx: TyCtxt) -> TraitData {\n         TraitData {\n-            span: SpanData::from_span(self.span, tcx.sess.codemap()),\n+            span: span_from_span(self.span, tcx.sess.codemap()),\n             name: self.name,\n             id: make_def_id(self.id, &tcx.hir),\n             qualname: self.qualname,\n@@ -594,7 +575,7 @@ impl Lower for data::TupleVariantData {\n \n     fn lower(self, tcx: TyCtxt) -> TupleVariantData {\n         TupleVariantData {\n-            span: SpanData::from_span(self.span, tcx.sess.codemap()),\n+            span: span_from_span(self.span, tcx.sess.codemap()),\n             id: make_def_id(self.id, &tcx.hir),\n             name: self.name,\n             qualname: self.qualname,\n@@ -631,7 +612,7 @@ impl Lower for data::TypeDefData {\n         TypeDefData {\n             id: make_def_id(self.id, &tcx.hir),\n             name: self.name,\n-            span: SpanData::from_span(self.span, tcx.sess.codemap()),\n+            span: span_from_span(self.span, tcx.sess.codemap()),\n             qualname: self.qualname,\n             value: self.value,\n             visibility: self.visibility,\n@@ -657,7 +638,7 @@ impl Lower for data::TypeRefData {\n \n     fn lower(self, tcx: TyCtxt) -> TypeRefData {\n         TypeRefData {\n-            span: SpanData::from_span(self.span, tcx.sess.codemap()),\n+            span: span_from_span(self.span, tcx.sess.codemap()),\n             scope: make_def_id(self.scope, &tcx.hir),\n             ref_id: self.ref_id,\n             qualname: self.qualname,\n@@ -681,7 +662,7 @@ impl Lower for data::UseData {\n     fn lower(self, tcx: TyCtxt) -> UseData {\n         UseData {\n             id: make_def_id(self.id, &tcx.hir),\n-            span: SpanData::from_span(self.span, tcx.sess.codemap()),\n+            span: span_from_span(self.span, tcx.sess.codemap()),\n             name: self.name,\n             mod_id: self.mod_id,\n             scope: make_def_id(self.scope, &tcx.hir),\n@@ -705,7 +686,7 @@ impl Lower for data::UseGlobData {\n     fn lower(self, tcx: TyCtxt) -> UseGlobData {\n         UseGlobData {\n             id: make_def_id(self.id, &tcx.hir),\n-            span: SpanData::from_span(self.span, tcx.sess.codemap()),\n+            span: span_from_span(self.span, tcx.sess.codemap()),\n             names: self.names,\n             scope: make_def_id(self.scope, &tcx.hir),\n             visibility: self.visibility,\n@@ -740,7 +721,7 @@ impl Lower for data::VariableData {\n             kind: self.kind,\n             name: self.name,\n             qualname: self.qualname,\n-            span: SpanData::from_span(self.span, tcx.sess.codemap()),\n+            span: span_from_span(self.span, tcx.sess.codemap()),\n             scope: make_def_id(self.scope, &tcx.hir),\n             value: self.value,\n             type_value: self.type_value,\n@@ -769,7 +750,7 @@ impl Lower for data::VariableRefData {\n     fn lower(self, tcx: TyCtxt) -> VariableRefData {\n         VariableRefData {\n             name: self.name,\n-            span: SpanData::from_span(self.span, tcx.sess.codemap()),\n+            span: span_from_span(self.span, tcx.sess.codemap()),\n             scope: make_def_id(self.scope, &tcx.hir),\n             ref_id: self.ref_id,\n         }\n@@ -793,7 +774,7 @@ impl Lower for data::Signature {\n \n     fn lower(self, tcx: TyCtxt) -> Signature {\n         Signature {\n-            span: SpanData::from_span(self.span, tcx.sess.codemap()),\n+            span: span_from_span(self.span, tcx.sess.codemap()),\n             text: self.text,\n             ident_start: self.ident_start,\n             ident_end: self.ident_end,"}, {"sha": "b779e8245ed6aef526b13c461666dec18cc851b4", "filename": "src/librustc_save_analysis/json_api_dumper.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a77e52875b13ec4554cf963b3b0e25743772752d/src%2Flibrustc_save_analysis%2Fjson_api_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a77e52875b13ec4554cf963b3b0e25743772752d/src%2Flibrustc_save_analysis%2Fjson_api_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_api_dumper.rs?ref=a77e52875b13ec4554cf963b3b0e25743772752d", "patch": "@@ -18,6 +18,8 @@ use data::{VariableKind, Visibility, SigElement};\n use dump::Dump;\n use super::Format;\n \n+use rls_data::{SpanData, CratePreludeData};\n+\n \n // A dumper to dump a restricted set of JSON information, designed for use with\n // libraries distributed without their source. Clients are likely to use type"}, {"sha": "8a4146ad1050711e9025a15051544146cdd3b58c", "filename": "src/librustc_save_analysis/json_dumper.rs", "status": "modified", "additions": 204, "deletions": 324, "changes": 528, "blob_url": "https://github.com/rust-lang/rust/blob/a77e52875b13ec4554cf963b3b0e25743772752d/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a77e52875b13ec4554cf963b3b0e25743772752d/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_dumper.rs?ref=a77e52875b13ec4554cf963b3b0e25743772752d", "patch": "@@ -13,8 +13,12 @@ use std::io::Write;\n use rustc::hir::def_id::DefId;\n use rustc_serialize::json::as_json;\n \n+use rls_data::{self, Id, Analysis, Import, ImportKind, Def, DefKind, Ref, RefKind, MacroRef,\n+               Relation, RelationKind, Signature, SigElement, CratePreludeData};\n+\n+use external_data;\n use external_data::*;\n-use data::{VariableKind, SigElement};\n+use data::{self, VariableKind};\n use dump::Dump;\n use super::Format;\n \n@@ -40,7 +44,7 @@ impl<'b, W: Write> Drop for JsonDumper<'b, W> {\n macro_rules! impl_fn {\n     ($fn_name: ident, $data_type: ident, $bucket: ident) => {\n         fn $fn_name(&mut self, data: $data_type) {\n-            self.result.$bucket.push(From::from(data));\n+            self.result.$bucket.push(data.into());\n         }\n     }\n }\n@@ -75,21 +79,22 @@ impl<'b, W: Write + 'b> Dump for JsonDumper<'b, W> {\n     impl_fn!(macro_use, MacroUseData, macro_refs);\n \n     fn mod_data(&mut self, data: ModData) {\n-        let id: Id = From::from(data.id);\n+        let id: Id = id_from_def_id(data.id);\n         let mut def = Def {\n             kind: DefKind::Mod,\n             id: id,\n-            span: data.span,\n+            span: data.span.into(),\n             name: data.name,\n             qualname: data.qualname,\n             value: data.filename,\n-            children: data.items.into_iter().map(|id| From::from(id)).collect(),\n+            parent: None,\n+            children: data.items.into_iter().map(|id| id_from_def_id(id)).collect(),\n             decl_id: None,\n             docs: data.docs,\n-            sig: Some(From::from(data.sig)),\n-            attributes: data.attributes,\n+            sig: Some(data.sig.into()),\n+            attributes: data.attributes.into_iter().map(|a| a.into()).collect(),\n         };\n-        if def.span.file_name != def.value {\n+        if data.span.file_name.to_str().unwrap() != def.value {\n             // If the module is an out-of-line defintion, then we'll make the\n             // defintion the first character in the module's file and turn the\n             // the declaration into a reference to it.\n@@ -99,8 +104,8 @@ impl<'b, W: Write + 'b> Dump for JsonDumper<'b, W> {\n                 ref_id: id,\n             };\n             self.result.refs.push(rf);\n-            def.span = SpanData {\n-                file_name: def.value.clone(),\n+            def.span = rls_data::SpanData {\n+                file_name: def.value.clone().into(),\n                 byte_start: 0,\n                 byte_end: 0,\n                 line_start: 1,\n@@ -115,11 +120,11 @@ impl<'b, W: Write + 'b> Dump for JsonDumper<'b, W> {\n \n     fn impl_data(&mut self, data: ImplData) {\n         if data.self_ref.is_some() {\n-            self.result.relations.push(From::from(data));\n+            self.result.relations.push(data.into());\n         }\n     }\n     fn inheritance(&mut self, data: InheritanceData) {\n-        self.result.relations.push(From::from(data));\n+        self.result.relations.push(data.into());\n     }\n }\n \n@@ -129,476 +134,351 @@ impl<'b, W: Write + 'b> Dump for JsonDumper<'b, W> {\n // method, but not the supplied method). In both cases, we are currently\n // ignoring it.\n \n-#[derive(Debug, RustcEncodable)]\n-struct Analysis {\n-    kind: Format,\n-    prelude: Option<CratePreludeData>,\n-    imports: Vec<Import>,\n-    defs: Vec<Def>,\n-    refs: Vec<Ref>,\n-    macro_refs: Vec<MacroRef>,\n-    relations: Vec<Relation>,\n-}\n-\n-impl Analysis {\n-    fn new() -> Analysis {\n-        Analysis {\n-            kind: Format::Json,\n-            prelude: None,\n-            imports: vec![],\n-            defs: vec![],\n-            refs: vec![],\n-            macro_refs: vec![],\n-            relations: vec![],\n-        }\n-    }\n-}\n-\n // DefId::index is a newtype and so the JSON serialisation is ugly. Therefore\n // we use our own Id which is the same, but without the newtype.\n-#[derive(Clone, Copy, Debug, RustcEncodable)]\n-struct Id {\n-    krate: u32,\n-    index: u32,\n+fn id_from_def_id(id: DefId) -> Id {\n+    Id {\n+        krate: id.krate.as_u32(),\n+        index: id.index.as_u32(),\n+    }\n }\n \n-impl From<DefId> for Id {\n-    fn from(id: DefId) -> Id {\n-        Id {\n-            krate: id.krate.as_u32(),\n-            index: id.index.as_u32(),\n+impl Into<rls_data::Attribute> for Attribute {\n+    fn into(self) -> rls_data::Attribute {\n+        rls_data::Attribute {\n+            value: self.value,\n+            span: self.span,\n         }\n     }\n }\n \n-#[derive(Debug, RustcEncodable)]\n-struct Import {\n-    kind: ImportKind,\n-    ref_id: Option<Id>,\n-    span: SpanData,\n-    name: String,\n-    value: String,\n-}\n-\n-#[derive(Debug, RustcEncodable)]\n-enum ImportKind {\n-    ExternCrate,\n-    Use,\n-    GlobUse,\n-}\n-\n-impl From<ExternCrateData> for Import {\n-    fn from(data: ExternCrateData) -> Import {\n+impl Into<Import> for ExternCrateData {\n+    fn into(self) -> Import {\n         Import {\n             kind: ImportKind::ExternCrate,\n             ref_id: None,\n-            span: data.span,\n-            name: data.name,\n+            span: self.span,\n+            name: self.name,\n             value: String::new(),\n         }\n     }\n }\n-impl From<UseData> for Import {\n-    fn from(data: UseData) -> Import {\n+impl Into<Import> for UseData {\n+    fn into(self) -> Import {\n         Import {\n             kind: ImportKind::Use,\n-            ref_id: data.mod_id.map(|id| From::from(id)),\n-            span: data.span,\n-            name: data.name,\n+            ref_id: self.mod_id.map(|id| id_from_def_id(id)),\n+            span: self.span,\n+            name: self.name,\n             value: String::new(),\n         }\n     }\n }\n-impl From<UseGlobData> for Import {\n-    fn from(data: UseGlobData) -> Import {\n+impl Into<Import> for UseGlobData {\n+    fn into(self) -> Import {\n         Import {\n             kind: ImportKind::GlobUse,\n             ref_id: None,\n-            span: data.span,\n+            span: self.span,\n             name: \"*\".to_owned(),\n-            value: data.names.join(\", \"),\n+            value: self.names.join(\", \"),\n         }\n     }\n }\n \n-#[derive(Debug, RustcEncodable)]\n-struct Def {\n-    kind: DefKind,\n-    id: Id,\n-    span: SpanData,\n-    name: String,\n-    qualname: String,\n-    value: String,\n-    children: Vec<Id>,\n-    decl_id: Option<Id>,\n-    docs: String,\n-    sig: Option<JsonSignature>,\n-    attributes: Vec<Attribute>,\n-}\n-\n-#[derive(Debug, RustcEncodable)]\n-enum DefKind {\n-    // value = variant names\n-    Enum,\n-    // value = enum name + variant name + types\n-    Tuple,\n-    // value = [enum name +] name + fields\n-    Struct,\n-    // value = signature\n-    Trait,\n-    // value = type + generics\n-    Function,\n-    // value = type + generics\n-    Method,\n-    // No id, no value.\n-    Macro,\n-    // value = file_name\n-    Mod,\n-    // value = aliased type\n-    Type,\n-    // value = type and init expression (for all variable kinds).\n-    Local,\n-    Static,\n-    Const,\n-    Field,\n-}\n-\n-impl From<EnumData> for Def {\n-    fn from(data: EnumData) -> Def {\n+impl Into<Def> for EnumData {\n+    fn into(self) -> Def {\n         Def {\n             kind: DefKind::Enum,\n-            id: From::from(data.id),\n-            span: data.span,\n-            name: data.name,\n-            qualname: data.qualname,\n-            value: data.value,\n-            children: data.variants.into_iter().map(|id| From::from(id)).collect(),\n+            id: id_from_def_id(self.id),\n+            span: self.span,\n+            name: self.name,\n+            qualname: self.qualname,\n+            value: self.value,\n+            parent: None,\n+            children: self.variants.into_iter().map(|id| id_from_def_id(id)).collect(),\n             decl_id: None,\n-            docs: data.docs,\n-            sig: Some(From::from(data.sig)),\n-            attributes: data.attributes,\n+            docs: self.docs,\n+            sig: Some(self.sig.into()),\n+            attributes: self.attributes.into_iter().map(|a| a.into()).collect(),\n         }\n     }\n }\n \n-impl From<TupleVariantData> for Def {\n-    fn from(data: TupleVariantData) -> Def {\n+impl Into<Def> for TupleVariantData {\n+    fn into(self) -> Def {\n         Def {\n             kind: DefKind::Tuple,\n-            id: From::from(data.id),\n-            span: data.span,\n-            name: data.name,\n-            qualname: data.qualname,\n-            value: data.value,\n+            id: id_from_def_id(self.id),\n+            span: self.span,\n+            name: self.name,\n+            qualname: self.qualname,\n+            value: self.value,\n+            parent: None,\n             children: vec![],\n             decl_id: None,\n-            docs: data.docs,\n-            sig: Some(From::from(data.sig)),\n-            attributes: data.attributes,\n+            docs: self.docs,\n+            sig: Some(self.sig.into()),\n+            attributes: self.attributes.into_iter().map(|a| a.into()).collect(),\n         }\n     }\n }\n-impl From<StructVariantData> for Def {\n-    fn from(data: StructVariantData) -> Def {\n+impl Into<Def> for StructVariantData {\n+    fn into(self) -> Def {\n         Def {\n             kind: DefKind::Struct,\n-            id: From::from(data.id),\n-            span: data.span,\n-            name: data.name,\n-            qualname: data.qualname,\n-            value: data.value,\n+            id: id_from_def_id(self.id),\n+            span: self.span,\n+            name: self.name,\n+            qualname: self.qualname,\n+            value: self.value,\n+            parent: None,\n             children: vec![],\n             decl_id: None,\n-            docs: data.docs,\n-            sig: Some(From::from(data.sig)),\n-            attributes: data.attributes,\n+            docs: self.docs,\n+            sig: Some(self.sig.into()),\n+            attributes: self.attributes.into_iter().map(|a| a.into()).collect(),\n         }\n     }\n }\n-impl From<StructData> for Def {\n-    fn from(data: StructData) -> Def {\n+impl Into<Def> for StructData {\n+    fn into(self) -> Def {\n         Def {\n             kind: DefKind::Struct,\n-            id: From::from(data.id),\n-            span: data.span,\n-            name: data.name,\n-            qualname: data.qualname,\n-            value: data.value,\n-            children: data.fields.into_iter().map(|id| From::from(id)).collect(),\n+            id: id_from_def_id(self.id),\n+            span: self.span,\n+            name: self.name,\n+            qualname: self.qualname,\n+            value: self.value,\n+            parent: None,\n+            children: self.fields.into_iter().map(|id| id_from_def_id(id)).collect(),\n             decl_id: None,\n-            docs: data.docs,\n-            sig: Some(From::from(data.sig)),\n-            attributes: data.attributes,\n+            docs: self.docs,\n+            sig: Some(self.sig.into()),\n+            attributes: self.attributes.into_iter().map(|a| a.into()).collect(),\n         }\n     }\n }\n-impl From<TraitData> for Def {\n-    fn from(data: TraitData) -> Def {\n+impl Into<Def> for TraitData {\n+    fn into(self) -> Def {\n         Def {\n             kind: DefKind::Trait,\n-            id: From::from(data.id),\n-            span: data.span,\n-            name: data.name,\n-            qualname: data.qualname,\n-            value: data.value,\n-            children: data.items.into_iter().map(|id| From::from(id)).collect(),\n+            id: id_from_def_id(self.id),\n+            span: self.span,\n+            name: self.name,\n+            qualname: self.qualname,\n+            value: self.value,\n+            parent: None,\n+            children: self.items.into_iter().map(|id| id_from_def_id(id)).collect(),\n             decl_id: None,\n-            docs: data.docs,\n-            sig: Some(From::from(data.sig)),\n-            attributes: data.attributes,\n+            docs: self.docs,\n+            sig: Some(self.sig.into()),\n+            attributes: self.attributes.into_iter().map(|a| a.into()).collect(),\n         }\n     }\n }\n-impl From<FunctionData> for Def {\n-    fn from(data: FunctionData) -> Def {\n+impl Into<Def> for FunctionData {\n+    fn into(self) -> Def {\n         Def {\n             kind: DefKind::Function,\n-            id: From::from(data.id),\n-            span: data.span,\n-            name: data.name,\n-            qualname: data.qualname,\n-            value: data.value,\n+            id: id_from_def_id(self.id),\n+            span: self.span,\n+            name: self.name,\n+            qualname: self.qualname,\n+            value: self.value,\n+            parent: None,\n             children: vec![],\n             decl_id: None,\n-            docs: data.docs,\n-            sig: Some(From::from(data.sig)),\n-            attributes: data.attributes,\n+            docs: self.docs,\n+            sig: Some(self.sig.into()),\n+            attributes: self.attributes.into_iter().map(|a| a.into()).collect(),\n         }\n     }\n }\n-impl From<MethodData> for Def {\n-    fn from(data: MethodData) -> Def {\n+impl Into<Def> for MethodData {\n+    fn into(self) -> Def {\n         Def {\n             kind: DefKind::Method,\n-            id: From::from(data.id),\n-            span: data.span,\n-            name: data.name,\n-            qualname: data.qualname,\n-            value: data.value,\n+            id: id_from_def_id(self.id),\n+            span: self.span,\n+            name: self.name,\n+            qualname: self.qualname,\n+            value: self.value,\n+            parent: None,\n             children: vec![],\n-            decl_id: data.decl_id.map(|id| From::from(id)),\n-            docs: data.docs,\n-            sig: Some(From::from(data.sig)),\n-            attributes: data.attributes,\n+            decl_id: self.decl_id.map(|id| id_from_def_id(id)),\n+            docs: self.docs,\n+            sig: Some(self.sig.into()),\n+            attributes: self.attributes.into_iter().map(|a| a.into()).collect(),\n         }\n     }\n }\n-impl From<MacroData> for Def {\n-    fn from(data: MacroData) -> Def {\n+impl Into<Def> for MacroData {\n+    fn into(self) -> Def {\n         Def {\n             kind: DefKind::Macro,\n-            id: From::from(null_def_id()),\n-            span: data.span,\n-            name: data.name,\n-            qualname: data.qualname,\n+            id: id_from_def_id(null_def_id()),\n+            span: self.span,\n+            name: self.name,\n+            qualname: self.qualname,\n             value: String::new(),\n+            parent: None,\n             children: vec![],\n             decl_id: None,\n-            docs: data.docs,\n+            docs: self.docs,\n             sig: None,\n             attributes: vec![],\n         }\n     }\n }\n-impl From<TypeDefData> for Def {\n-    fn from(data: TypeDefData) -> Def {\n+impl Into<Def> for TypeDefData {\n+    fn into(self) -> Def {\n         Def {\n             kind: DefKind::Type,\n-            id: From::from(data.id),\n-            span: data.span,\n-            name: data.name,\n-            qualname: data.qualname,\n-            value: data.value,\n+            id: id_from_def_id(self.id),\n+            span: self.span,\n+            name: self.name,\n+            qualname: self.qualname,\n+            value: self.value,\n+            parent: None,\n             children: vec![],\n             decl_id: None,\n             docs: String::new(),\n-            sig: data.sig.map(|s| From::from(s)),\n-            attributes: data.attributes,\n+            sig: self.sig.map(|s| s.into()),\n+            attributes: self.attributes.into_iter().map(|a| a.into()).collect(),\n         }\n     }\n }\n-impl From<VariableData> for Def {\n-    fn from(data: VariableData) -> Def {\n+impl Into<Def> for VariableData {\n+    fn into(self) -> Def {\n         Def {\n-            kind: match data.kind {\n+            kind: match self.kind {\n                 VariableKind::Static => DefKind::Static,\n                 VariableKind::Const => DefKind::Const,\n                 VariableKind::Local => DefKind::Local,\n                 VariableKind::Field => DefKind::Field,\n             },\n-            id: From::from(data.id),\n-            span: data.span,\n-            name: data.name,\n-            qualname: data.qualname,\n-            value: data.type_value,\n+            id: id_from_def_id(self.id),\n+            span: self.span,\n+            name: self.name,\n+            qualname: self.qualname,\n+            value: self.type_value,\n+            parent: None,\n             children: vec![],\n             decl_id: None,\n-            docs: data.docs,\n+            docs: self.docs,\n             sig: None,\n-            attributes: data.attributes,\n+            attributes: self.attributes.into_iter().map(|a| a.into()).collect(),\n         }\n     }\n }\n \n-#[derive(Debug, RustcEncodable)]\n-enum RefKind {\n-    Function,\n-    Mod,\n-    Type,\n-    Variable,\n-}\n-\n-#[derive(Debug, RustcEncodable)]\n-struct Ref {\n-    kind: RefKind,\n-    span: SpanData,\n-    ref_id: Id,\n-}\n-\n-impl From<FunctionRefData> for Ref {\n-    fn from(data: FunctionRefData) -> Ref {\n+impl Into<Ref> for FunctionRefData {\n+    fn into(self) -> Ref {\n         Ref {\n             kind: RefKind::Function,\n-            span: data.span,\n-            ref_id: From::from(data.ref_id),\n+            span: self.span,\n+            ref_id: id_from_def_id(self.ref_id),\n         }\n     }\n }\n-impl From<FunctionCallData> for Ref {\n-    fn from(data: FunctionCallData) -> Ref {\n+impl Into<Ref> for FunctionCallData {\n+    fn into(self) -> Ref {\n         Ref {\n             kind: RefKind::Function,\n-            span: data.span,\n-            ref_id: From::from(data.ref_id),\n+            span: self.span,\n+            ref_id: id_from_def_id(self.ref_id),\n         }\n     }\n }\n-impl From<MethodCallData> for Ref {\n-    fn from(data: MethodCallData) -> Ref {\n+impl Into<Ref> for MethodCallData {\n+    fn into(self) -> Ref {\n         Ref {\n             kind: RefKind::Function,\n-            span: data.span,\n-            ref_id: From::from(data.ref_id.or(data.decl_id).unwrap_or(null_def_id())),\n+            span: self.span,\n+            ref_id: id_from_def_id(self.ref_id.or(self.decl_id).unwrap_or(null_def_id())),\n         }\n     }\n }\n-impl From<ModRefData> for Ref {\n-    fn from(data: ModRefData) -> Ref {\n+impl Into<Ref> for ModRefData {\n+    fn into(self) -> Ref {\n         Ref {\n             kind: RefKind::Mod,\n-            span: data.span,\n-            ref_id: From::from(data.ref_id.unwrap_or(null_def_id())),\n+            span: self.span,\n+            ref_id: id_from_def_id(self.ref_id.unwrap_or(null_def_id())),\n         }\n     }\n }\n-impl From<TypeRefData> for Ref {\n-    fn from(data: TypeRefData) -> Ref {\n+impl Into<Ref> for TypeRefData {\n+    fn into(self) -> Ref {\n         Ref {\n             kind: RefKind::Type,\n-            span: data.span,\n-            ref_id: From::from(data.ref_id.unwrap_or(null_def_id())),\n+            span: self.span,\n+            ref_id: id_from_def_id(self.ref_id.unwrap_or(null_def_id())),\n         }\n     }\n }\n-impl From<VariableRefData> for Ref {\n-    fn from(data: VariableRefData) -> Ref {\n+impl Into<Ref> for VariableRefData {\n+    fn into(self) -> Ref {\n         Ref {\n             kind: RefKind::Variable,\n-            span: data.span,\n-            ref_id: From::from(data.ref_id),\n+            span: self.span,\n+            ref_id: id_from_def_id(self.ref_id),\n         }\n     }\n }\n \n-#[derive(Debug, RustcEncodable)]\n-struct MacroRef {\n-    span: SpanData,\n-    qualname: String,\n-    callee_span: SpanData,\n-}\n-\n-impl From<MacroUseData> for MacroRef {\n-    fn from(data: MacroUseData) -> MacroRef {\n+impl Into<MacroRef> for MacroUseData {\n+    fn into(self) -> MacroRef {\n         MacroRef {\n-            span: data.span,\n-            qualname: data.qualname,\n-            callee_span: data.callee_span,\n+            span: self.span,\n+            qualname: self.qualname,\n+            callee_span: self.callee_span.into(),\n         }\n     }\n }\n \n-#[derive(Debug, RustcEncodable)]\n-struct Relation {\n-    span: SpanData,\n-    kind: RelationKind,\n-    from: Id,\n-    to: Id,\n-}\n-\n-#[derive(Debug, RustcEncodable)]\n-enum RelationKind {\n-    Impl,\n-    SuperTrait,\n-}\n-\n-impl From<ImplData> for Relation {\n-    fn from(data: ImplData) -> Relation {\n+impl Into<Relation> for ImplData {\n+    fn into(self) -> Relation {\n         Relation {\n-            span: data.span,\n+            span: self.span,\n             kind: RelationKind::Impl,\n-            from: From::from(data.self_ref.unwrap_or(null_def_id())),\n-            to: From::from(data.trait_ref.unwrap_or(null_def_id())),\n+            from: id_from_def_id(self.self_ref.unwrap_or(null_def_id())),\n+            to: id_from_def_id(self.trait_ref.unwrap_or(null_def_id())),\n         }\n     }\n }\n \n-impl From<InheritanceData> for Relation {\n-    fn from(data: InheritanceData) -> Relation {\n+impl Into<Relation> for InheritanceData {\n+    fn into(self) -> Relation {\n         Relation {\n-            span: data.span,\n+            span: self.span,\n             kind: RelationKind::SuperTrait,\n-            from: From::from(data.base_id),\n-            to: From::from(data.deriv_id),\n+            from: id_from_def_id(self.base_id),\n+            to: id_from_def_id(self.deriv_id),\n         }\n     }\n }\n \n-#[derive(Debug, RustcEncodable)]\n-pub struct JsonSignature {\n-    span: SpanData,\n-    text: String,\n-    ident_start: usize,\n-    ident_end: usize,\n-    defs: Vec<JsonSigElement>,\n-    refs: Vec<JsonSigElement>,\n-}\n-\n-impl From<Signature> for JsonSignature {\n-    fn from(data: Signature) -> JsonSignature {\n-        JsonSignature {\n-            span: data.span,\n-            text: data.text,\n-            ident_start: data.ident_start,\n-            ident_end: data.ident_end,\n-            defs: data.defs.into_iter().map(|s| From::from(s)).collect(),\n-            refs: data.refs.into_iter().map(|s| From::from(s)).collect(),\n+impl Into<Signature> for external_data::Signature {\n+    fn into(self) -> Signature {\n+        Signature {\n+            span: self.span,\n+            text: self.text,\n+            ident_start: self.ident_start,\n+            ident_end: self.ident_end,\n+            defs: self.defs.into_iter().map(|s| s.into()).collect(),\n+            refs: self.refs.into_iter().map(|s| s.into()).collect(),\n         }\n     }\n }\n \n-#[derive(Debug, RustcEncodable)]\n-pub struct JsonSigElement {\n-    id: Id,\n-    start: usize,\n-    end: usize,\n-}\n-\n-impl From<SigElement> for JsonSigElement {\n-    fn from(data: SigElement) -> JsonSigElement {\n-        JsonSigElement {\n-            id: From::from(data.id),\n-            start: data.start,\n-            end: data.end,\n+impl Into<SigElement> for data::SigElement {\n+    fn into(self) -> SigElement {\n+        SigElement {\n+            id: id_from_def_id(self.id),\n+            start: self.start,\n+            end: self.end,\n         }\n     }\n }"}]}