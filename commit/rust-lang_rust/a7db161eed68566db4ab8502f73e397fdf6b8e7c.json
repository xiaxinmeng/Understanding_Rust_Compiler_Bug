{"sha": "a7db161eed68566db4ab8502f73e397fdf6b8e7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3ZGIxNjFlZWQ2ODU2NmRiNGFiODUwMmY3M2UzOTdmZGY2YjhlN2M=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-26T17:33:55Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-26T19:29:27Z"}, "message": "Revert \"Revert \"libcore: De-mode at_vec\"\"\n\nThis reverts commit fe09451a5a34931e11fa67ee83ac8deaa8d585be.", "tree": {"sha": "4c3230f6c181ed8574324663304c1483155415dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c3230f6c181ed8574324663304c1483155415dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7db161eed68566db4ab8502f73e397fdf6b8e7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7db161eed68566db4ab8502f73e397fdf6b8e7c", "html_url": "https://github.com/rust-lang/rust/commit/a7db161eed68566db4ab8502f73e397fdf6b8e7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7db161eed68566db4ab8502f73e397fdf6b8e7c/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "101bc62ad91927e7fd9cf58ee431adf06574e2a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/101bc62ad91927e7fd9cf58ee431adf06574e2a7", "html_url": "https://github.com/rust-lang/rust/commit/101bc62ad91927e7fd9cf58ee431adf06574e2a7"}], "stats": {"total": 36, "additions": 20, "deletions": 16}, "files": [{"sha": "d7fee2cd856c571dc9b86831456fd90182f5aeb1", "filename": "src/libcore/at_vec.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a7db161eed68566db4ab8502f73e397fdf6b8e7c/src%2Flibcore%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7db161eed68566db4ab8502f73e397fdf6b8e7c/src%2Flibcore%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fat_vec.rs?ref=a7db161eed68566db4ab8502f73e397fdf6b8e7c", "patch": "@@ -1,5 +1,9 @@\n //! Managed vectors\n \n+// NB: transitionary, de-mode-ing.\n+#[forbid(deprecated_mode)];\n+#[forbid(deprecated_pattern)];\n+\n use ptr::addr_of;\n \n /// Code for dealing with @-vectors. This is pretty incomplete, and\n@@ -21,7 +25,7 @@ extern mod rusti {\n \n /// Returns the number of elements the vector can hold without reallocating\n #[inline(always)]\n-pub pure fn capacity<T>(&&v: @[const T]) -> uint {\n+pub pure fn capacity<T>(v: @[const T]) -> uint {\n     unsafe {\n         let repr: **raw::VecRepr =\n             ::cast::reinterpret_cast(&addr_of(v));\n@@ -43,7 +47,7 @@ pub pure fn capacity<T>(&&v: @[const T]) -> uint {\n  */\n #[inline(always)]\n pub pure fn build_sized<A>(size: uint,\n-                           builder: fn(push: pure fn(+v: A))) -> @[A] {\n+                           builder: &fn(push: pure fn(+v: A))) -> @[A] {\n     let mut vec = @[];\n     unsafe { raw::reserve(vec, size); }\n     builder(|+x| unsafe { raw::push(vec, move x) });\n@@ -61,7 +65,7 @@ pub pure fn build_sized<A>(size: uint,\n  *             onto the vector being constructed.\n  */\n #[inline(always)]\n-pub pure fn build<A>(builder: fn(push: pure fn(+v: A))) -> @[A] {\n+pub pure fn build<A>(builder: &fn(push: pure fn(+v: A))) -> @[A] {\n     build_sized(4, builder)\n }\n \n@@ -78,8 +82,8 @@ pub pure fn build<A>(builder: fn(push: pure fn(+v: A))) -> @[A] {\n  *             onto the vector being constructed.\n  */\n #[inline(always)]\n-pub pure fn build_sized_opt<A>(size: Option<uint>,\n-                           builder: fn(push: pure fn(+v: A))) -> @[A] {\n+pub pure fn build_sized_opt<A>(+size: Option<uint>,\n+                               builder: &fn(push: pure fn(+v: A))) -> @[A] {\n     build_sized(size.get_default(4), builder)\n }\n \n@@ -94,10 +98,10 @@ pub pure fn append<T: Copy>(lhs: @[T], rhs: &[const T]) -> @[T] {\n \n \n /// Apply a function to each element of a vector and return the results\n-pub pure fn map<T, U>(v: &[T], f: fn(T) -> U) -> @[U] {\n+pub pure fn map<T, U>(v: &[T], f: &fn(x: &T) -> U) -> @[U] {\n     do build_sized(v.len()) |push| {\n         for vec::each(v) |elem| {\n-            push(f(*elem));\n+            push(f(elem));\n         }\n     }\n }\n@@ -121,10 +125,10 @@ pub pure fn from_fn<T>(n_elts: uint, op: iter::InitOp<T>) -> @[T] {\n  * Creates an immutable vector of size `n_elts` and initializes the elements\n  * to the value `t`.\n  */\n-pub pure fn from_elem<T: Copy>(n_elts: uint, t: T) -> @[T] {\n+pub pure fn from_elem<T: Copy>(n_elts: uint, t: &T) -> @[T] {\n     do build_sized(n_elts) |push| {\n         let mut i: uint = 0u;\n-        while i < n_elts { push(t); i += 1u; }\n+        while i < n_elts { push(copy *t); i += 1u; }\n     }\n }\n \n@@ -155,13 +159,13 @@ pub mod raw {\n      * the vector is actually the specified size.\n      */\n     #[inline(always)]\n-    pub unsafe fn set_len<T>(&&v: @[const T], new_len: uint) {\n+    pub unsafe fn set_len<T>(v: @[const T], new_len: uint) {\n         let repr: **VecRepr = ::cast::reinterpret_cast(&addr_of(v));\n         (**repr).unboxed.fill = new_len * sys::size_of::<T>();\n     }\n \n     #[inline(always)]\n-    pub unsafe fn push<T>(&v: @[const T], +initval: T) {\n+    pub unsafe fn push<T>(v: @[const T], +initval: T) {\n         let repr: **VecRepr = ::cast::reinterpret_cast(&addr_of(v));\n         let fill = (**repr).unboxed.fill;\n         if (**repr).unboxed.alloc > fill {\n@@ -173,7 +177,7 @@ pub mod raw {\n     }\n     // This doesn't bother to make sure we have space.\n     #[inline(always)] // really pretty please\n-    pub unsafe fn push_fast<T>(&v: @[const T], +initval: T) {\n+    pub unsafe fn push_fast<T>(v: @[const T], +initval: T) {\n         let repr: **VecRepr = ::cast::reinterpret_cast(&addr_of(v));\n         let fill = (**repr).unboxed.fill;\n         (**repr).unboxed.fill += sys::size_of::<T>();\n@@ -182,7 +186,7 @@ pub mod raw {\n         rusti::move_val_init(*p, move initval);\n     }\n \n-    pub unsafe fn push_slow<T>(&v: @[const T], +initval: T) {\n+    pub unsafe fn push_slow<T>(v: @[const T], +initval: T) {\n         reserve_at_least(v, v.len() + 1u);\n         push_fast(v, move initval);\n     }\n@@ -198,7 +202,7 @@ pub mod raw {\n      * * v - A vector\n      * * n - The number of elements to reserve space for\n      */\n-    pub unsafe fn reserve<T>(&v: @[const T], n: uint) {\n+    pub unsafe fn reserve<T>(v: @[const T], n: uint) {\n         // Only make the (slow) call into the runtime if we have to\n         if capacity(v) < n {\n             let ptr = addr_of(v) as **VecRepr;\n@@ -222,7 +226,7 @@ pub mod raw {\n      * * v - A vector\n      * * n - The number of elements to reserve space for\n      */\n-    pub unsafe fn reserve_at_least<T>(&v: @[const T], n: uint) {\n+    pub unsafe fn reserve_at_least<T>(v: @[const T], n: uint) {\n         reserve(v, uint::next_power_of_two(n));\n     }\n "}, {"sha": "00091d0ed41d09124a99733df20dd5dbf3e00a42", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7db161eed68566db4ab8502f73e397fdf6b8e7c/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7db161eed68566db4ab8502f73e397fdf6b8e7c/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=a7db161eed68566db4ab8502f73e397fdf6b8e7c", "patch": "@@ -7,7 +7,7 @@ The iteration traits and common implementation\n use cmp::{Eq, Ord};\n \n /// A function used to initialize the elements of a sequence\n-type InitOp<T> = fn(uint) -> T;\n+type InitOp<T> = &fn(uint) -> T;\n \n trait BaseIter<A> {\n     pure fn each(blk: fn(v: &A) -> bool);"}]}