{"sha": "c544f9a137bd675fd6e9cc4c244ff4366ededb50", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1NDRmOWExMzdiZDY3NWZkNmU5Y2M0YzI0NGZmNDM2NmVkZWRiNTA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-24T05:22:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-24T05:22:23Z"}, "message": "Merge #4940\n\n4940: Add support for marking doctest items as distinct from normal code r=ltentrup a=Nashenas88\n\nThis adds `HighlightTag::Generic | HighlightModifier::Injected` as the default highlight for all elements within a doctest. Please feel free to suggest that a new tag be created or a different one used.\r\n\r\n![Screenshot from 2020-06-23 09-18-13](https://user-images.githubusercontent.com/1673130/85408493-9752ce00-b532-11ea-94fe-197353ccc778.png)\r\n\r\nFixes #4929 \r\nFixes #4939\n\nCo-authored-by: Paul Daniel Faria <Nashenas88@users.noreply.github.com>\nCo-authored-by: Paul Daniel Faria <nashenas88@users.noreply.github.com>", "tree": {"sha": "dbf501f61f5e77234901aff49ebd2a0bbf5ae4cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbf501f61f5e77234901aff49ebd2a0bbf5ae4cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c544f9a137bd675fd6e9cc4c244ff4366ededb50", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe8uMPCRBK7hj4Ov3rIwAAdHIIAFiSaP130hq7JfRiVdut0Hxl\nbO/JvUahjF+8rdMaTf6LJugEb2/PNLQDraUZQia/Z+kqWN8NCqIT/cNB0fgd+5V+\nwIAdKvze7rS8nwvNSPtn14JOUBeNKiZQa0Z8uKPJWgX1f31XPTdeACKhrw8Yg7lW\n+6jryhXMvl+E8+PijhGFqXpQU8dKyGQhpUMV27WmdRiyd9rOat0slFXRZhLFNtvD\nN37q31MOkpdTOup4qaTafGKbcrtr3ygAFh/nC/FbXKpyqrof+g4dBWommvB1l4lv\nSmSR4Ooz0e100poSMQZxmmMx60xoPBhzjYGs80Yx4JWXc+fk0vFC5+WT+3UyuHU=\n=c+4H\n-----END PGP SIGNATURE-----\n", "payload": "tree dbf501f61f5e77234901aff49ebd2a0bbf5ae4cd\nparent 471d44e72c54882cff2e00c662ee74d8c7c94234\nparent 0d87eee3a9d3950cd02a80bf3974b4b165c5a76c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1592976143 +0000\ncommitter GitHub <noreply@github.com> 1592976143 +0000\n\nMerge #4940\n\n4940: Add support for marking doctest items as distinct from normal code r=ltentrup a=Nashenas88\n\nThis adds `HighlightTag::Generic | HighlightModifier::Injected` as the default highlight for all elements within a doctest. Please feel free to suggest that a new tag be created or a different one used.\r\n\r\n![Screenshot from 2020-06-23 09-18-13](https://user-images.githubusercontent.com/1673130/85408493-9752ce00-b532-11ea-94fe-197353ccc778.png)\r\n\r\nFixes #4929 \r\nFixes #4939\n\nCo-authored-by: Paul Daniel Faria <Nashenas88@users.noreply.github.com>\nCo-authored-by: Paul Daniel Faria <nashenas88@users.noreply.github.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c544f9a137bd675fd6e9cc4c244ff4366ededb50", "html_url": "https://github.com/rust-lang/rust/commit/c544f9a137bd675fd6e9cc4c244ff4366ededb50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c544f9a137bd675fd6e9cc4c244ff4366ededb50/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "471d44e72c54882cff2e00c662ee74d8c7c94234", "url": "https://api.github.com/repos/rust-lang/rust/commits/471d44e72c54882cff2e00c662ee74d8c7c94234", "html_url": "https://github.com/rust-lang/rust/commit/471d44e72c54882cff2e00c662ee74d8c7c94234"}, {"sha": "0d87eee3a9d3950cd02a80bf3974b4b165c5a76c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d87eee3a9d3950cd02a80bf3974b4b165c5a76c", "html_url": "https://github.com/rust-lang/rust/commit/0d87eee3a9d3950cd02a80bf3974b4b165c5a76c"}], "stats": {"total": 131, "additions": 92, "deletions": 39}, "files": [{"sha": "e8155def75eb6ccf9e52bf627b6a86bb5830372d", "filename": "crates/ra_ide/src/snapshots/highlight_doctest.html", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c544f9a137bd675fd6e9cc4c244ff4366ededb50/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_doctest.html", "raw_url": "https://github.com/rust-lang/rust/raw/c544f9a137bd675fd6e9cc4c244ff4366ededb50/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_doctest.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_doctest.html?ref=c544f9a137bd675fd6e9cc4c244ff4366ededb50", "patch": "@@ -5,6 +5,8 @@\n \n .lifetime           { color: #DFAF8F; font-style: italic; }\n .comment            { color: #7F9F7F; }\n+.documentation      { color: #629755; }\n+.injected           { opacity: 0.65 ; }\n .struct, .enum      { color: #7CB8BB; }\n .enum_variant       { color: #BDE0F3; }\n .string_literal     { color: #CC9393; }\n@@ -33,7 +35,7 @@\n .control            { font-style: italic; }\n </style>\n <pre><code><span class=\"comment documentation\">/// ```</span>\n-<span class=\"comment documentation\">/// </span><span class=\"keyword\">let</span> _ = <span class=\"string_literal\">\"early doctests should not go boom\"</span>;\n+<span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"generic injected\"> _ = </span><span class=\"string_literal injected\">\"early doctests should not go boom\"</span><span class=\"generic injected\">;</span>\n <span class=\"comment documentation\">/// ```</span>\n <span class=\"keyword\">struct</span> <span class=\"struct declaration\">Foo</span> {\n     <span class=\"field declaration\">bar</span>: <span class=\"builtin_type\">bool</span>,\n@@ -47,8 +49,8 @@\n     <span class=\"comment documentation\">/// # Examples</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// ```</span>\n-    <span class=\"comment documentation\">/// #</span> <span class=\"attribute\">#![</span><span class=\"function attribute\">allow</span><span class=\"attribute\">(unused_mut)]</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">foo</span>: <span class=\"struct\">Foo</span> = <span class=\"struct\">Foo</span>::<span class=\"function\">new</span>();\n+    <span class=\"comment documentation\">/// #</span><span class=\"generic injected\"> </span><span class=\"attribute injected\">#![</span><span class=\"function attribute injected\">allow</span><span class=\"attribute injected\">(unused_mut)]</span>\n+    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"generic injected\"> </span><span class=\"keyword injected\">mut</span><span class=\"generic injected\"> </span><span class=\"variable declaration injected mutable\">foo</span><span class=\"generic injected\">: </span><span class=\"struct injected\">Foo</span><span class=\"generic injected\"> = </span><span class=\"struct injected\">Foo</span><span class=\"generic injected\">::</span><span class=\"function injected\">new</span><span class=\"generic injected\">();</span>\n     <span class=\"comment documentation\">/// ```</span>\n     <span class=\"keyword\">pub</span> <span class=\"keyword\">const</span> <span class=\"keyword\">fn</span> <span class=\"function declaration\">new</span>() -&gt; <span class=\"struct\">Foo</span> {\n         <span class=\"struct\">Foo</span> { <span class=\"field\">bar</span>: <span class=\"bool_literal\">true</span> }\n@@ -59,26 +61,26 @@\n     <span class=\"comment documentation\">/// # Examples</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// ```</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"keyword\">use</span> <span class=\"module\">x</span>::<span class=\"module\">y</span>;\n+    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">use</span><span class=\"generic injected\"> </span><span class=\"module injected\">x</span><span class=\"generic injected\">::</span><span class=\"module injected\">y</span><span class=\"generic injected\">;</span>\n     <span class=\"comment documentation\">///</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"keyword\">let</span> <span class=\"variable declaration\">foo</span> = <span class=\"struct\">Foo</span>::<span class=\"function\">new</span>();\n+    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"generic injected\"> </span><span class=\"variable declaration injected\">foo</span><span class=\"generic injected\"> = </span><span class=\"struct injected\">Foo</span><span class=\"generic injected\">::</span><span class=\"function injected\">new</span><span class=\"generic injected\">();</span>\n     <span class=\"comment documentation\">///</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"comment\">// calls bar on foo</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"macro\">assert!</span>(foo.bar());\n+    <span class=\"comment documentation\">/// </span><span class=\"comment injected\">// calls bar on foo</span>\n+    <span class=\"comment documentation\">/// </span><span class=\"macro injected\">assert!</span><span class=\"generic injected\">(foo.bar());</span>\n     <span class=\"comment documentation\">///</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"keyword\">let</span> <span class=\"variable declaration\">bar</span> = <span class=\"variable\">foo</span>.<span class=\"field\">bar</span> || <span class=\"struct\">Foo</span>::<span class=\"constant\">bar</span>;\n+    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"generic injected\"> </span><span class=\"variable declaration injected\">bar</span><span class=\"generic injected\"> = </span><span class=\"variable injected\">foo</span><span class=\"generic injected\">.</span><span class=\"field injected\">bar</span><span class=\"generic injected\"> || </span><span class=\"struct injected\">Foo</span><span class=\"generic injected\">::</span><span class=\"constant injected\">bar</span><span class=\"generic injected\">;</span>\n     <span class=\"comment documentation\">///</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"comment\">/* multi-line\n-    </span><span class=\"comment documentation\">/// </span><span class=\"comment\">       comment */</span>\n+    <span class=\"comment documentation\">/// </span><span class=\"comment injected\">/* multi-line\n+    </span><span class=\"comment documentation\">/// </span><span class=\"comment injected\">       comment */</span>\n     <span class=\"comment documentation\">///</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"keyword\">let</span> <span class=\"variable declaration\">multi_line_string</span> = <span class=\"string_literal\">\"Foo\n-    </span><span class=\"comment documentation\">/// </span><span class=\"string_literal\">  bar\n-    </span><span class=\"comment documentation\">/// </span><span class=\"string_literal\">         \"</span>;\n+    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"generic injected\"> </span><span class=\"variable declaration injected\">multi_line_string</span><span class=\"generic injected\"> = </span><span class=\"string_literal injected\">\"Foo\n+    </span><span class=\"comment documentation\">/// </span><span class=\"string_literal injected\">  bar\n+    </span><span class=\"comment documentation\">/// </span><span class=\"string_literal injected\">         \"</span><span class=\"generic injected\">;</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// ```</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// ```rust,no_run</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"keyword\">let</span> <span class=\"variable declaration\">foobar</span> = <span class=\"struct\">Foo</span>::<span class=\"function\">new</span>().<span class=\"function\">bar</span>();\n+    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"generic injected\"> </span><span class=\"variable declaration injected\">foobar</span><span class=\"generic injected\"> = </span><span class=\"struct injected\">Foo</span><span class=\"generic injected\">::</span><span class=\"function injected\">new</span><span class=\"generic injected\">().</span><span class=\"function injected\">bar</span><span class=\"generic injected\">();</span>\n     <span class=\"comment documentation\">/// ```</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// ```sh</span>\n@@ -90,7 +92,7 @@\n }\n \n <span class=\"comment documentation\">/// ```</span>\n-<span class=\"comment documentation\">/// </span><span class=\"macro\">noop!</span>(<span class=\"numeric_literal\">1</span>);\n+<span class=\"comment documentation\">/// </span><span class=\"macro injected\">noop!</span><span class=\"generic injected\">(</span><span class=\"numeric_literal injected\">1</span><span class=\"generic injected\">);</span>\n <span class=\"comment documentation\">/// ```</span>\n <span class=\"macro\">macro_rules!</span> <span class=\"macro declaration\">noop</span> {\n     ($expr:expr) =&gt; {"}, {"sha": "1b0349bae2ee83a4e30f24444d4e454e487a8a3c", "filename": "crates/ra_ide/src/snapshots/highlight_injection.html", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c544f9a137bd675fd6e9cc4c244ff4366ededb50/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_injection.html", "raw_url": "https://github.com/rust-lang/rust/raw/c544f9a137bd675fd6e9cc4c244ff4366ededb50/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_injection.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_injection.html?ref=c544f9a137bd675fd6e9cc4c244ff4366ededb50", "patch": "@@ -5,6 +5,8 @@\n \n .lifetime           { color: #DFAF8F; font-style: italic; }\n .comment            { color: #7F9F7F; }\n+.documentation      { color: #629755; }\n+.injected           { opacity: 0.65 ; }\n .struct, .enum      { color: #7CB8BB; }\n .enum_variant       { color: #BDE0F3; }\n .string_literal     { color: #CC9393; }"}, {"sha": "d184b569102401c8831c1f806d3634ad2b26e6a2", "filename": "crates/ra_ide/src/snapshots/highlight_strings.html", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c544f9a137bd675fd6e9cc4c244ff4366ededb50/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_strings.html", "raw_url": "https://github.com/rust-lang/rust/raw/c544f9a137bd675fd6e9cc4c244ff4366ededb50/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_strings.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_strings.html?ref=c544f9a137bd675fd6e9cc4c244ff4366ededb50", "patch": "@@ -5,6 +5,8 @@\n \n .lifetime           { color: #DFAF8F; font-style: italic; }\n .comment            { color: #7F9F7F; }\n+.documentation      { color: #629755; }\n+.injected           { opacity: 0.65 ; }\n .struct, .enum      { color: #7CB8BB; }\n .enum_variant       { color: #BDE0F3; }\n .string_literal     { color: #CC9393; }"}, {"sha": "6936e949fe8e5a10653a2630b00f69885d124333", "filename": "crates/ra_ide/src/snapshots/highlight_unsafe.html", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c544f9a137bd675fd6e9cc4c244ff4366ededb50/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_unsafe.html", "raw_url": "https://github.com/rust-lang/rust/raw/c544f9a137bd675fd6e9cc4c244ff4366ededb50/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_unsafe.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlight_unsafe.html?ref=c544f9a137bd675fd6e9cc4c244ff4366ededb50", "patch": "@@ -5,6 +5,8 @@\n \n .lifetime           { color: #DFAF8F; font-style: italic; }\n .comment            { color: #7F9F7F; }\n+.documentation      { color: #629755; }\n+.injected           { opacity: 0.65 ; }\n .struct, .enum      { color: #7CB8BB; }\n .enum_variant       { color: #BDE0F3; }\n .string_literal     { color: #CC9393; }"}, {"sha": "8d0b38f958dcea4887e97477cfc5d756c8348a28", "filename": "crates/ra_ide/src/snapshots/highlighting.html", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c544f9a137bd675fd6e9cc4c244ff4366ededb50/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/c544f9a137bd675fd6e9cc4c244ff4366ededb50/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html?ref=c544f9a137bd675fd6e9cc4c244ff4366ededb50", "patch": "@@ -5,6 +5,8 @@\n \n .lifetime           { color: #DFAF8F; font-style: italic; }\n .comment            { color: #7F9F7F; }\n+.documentation      { color: #629755; }\n+.injected           { opacity: 0.65 ; }\n .struct, .enum      { color: #7CB8BB; }\n .enum_variant       { color: #BDE0F3; }\n .string_literal     { color: #CC9393; }"}, {"sha": "9516c7441040ac94306656a7c4f809b53a48a17e", "filename": "crates/ra_ide/src/snapshots/rainbow_highlighting.html", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c544f9a137bd675fd6e9cc4c244ff4366ededb50/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/c544f9a137bd675fd6e9cc4c244ff4366ededb50/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html?ref=c544f9a137bd675fd6e9cc4c244ff4366ededb50", "patch": "@@ -5,6 +5,8 @@\n \n .lifetime           { color: #DFAF8F; font-style: italic; }\n .comment            { color: #7F9F7F; }\n+.documentation      { color: #629755; }\n+.injected           { opacity: 0.65 ; }\n .struct, .enum      { color: #7CB8BB; }\n .enum_variant       { color: #BDE0F3; }\n .string_literal     { color: #CC9393; }"}, {"sha": "028b559022cbd04ada0c8acb1dedc1f26233e3a0", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 46, "deletions": 18, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/c544f9a137bd675fd6e9cc4c244ff4366ededb50/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c544f9a137bd675fd6e9cc4c244ff4366ededb50/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=c544f9a137bd675fd6e9cc4c244ff4366ededb50", "patch": "@@ -236,7 +236,7 @@ pub(crate) fn highlight(\n                             });\n                         }\n                     }\n-                    stack.pop_and_inject(false);\n+                    stack.pop_and_inject(None);\n                 }\n             } else if let Some(string) =\n                 element_to_highlight.as_token().cloned().and_then(ast::RawString::cast)\n@@ -324,16 +324,27 @@ impl HighlightedRangeStack {\n         cloned\n     }\n \n+    /// Remove the `HighlightRange` of `parent` that's currently covered by `child`.\n+    fn intersect_partial(parent: &mut HighlightedRange, child: &HighlightedRange) {\n+        assert!(\n+            parent.range.start() <= child.range.start()\n+                && parent.range.end() >= child.range.start()\n+                && child.range.end() > parent.range.end()\n+        );\n+\n+        parent.range = TextRange::new(parent.range.start(), child.range.start());\n+    }\n+\n     /// Similar to `pop`, but can modify arbitrary prior ranges (where `pop`)\n     /// can only modify the last range currently on the stack.\n     /// Can be used to do injections that span multiple ranges, like the\n     /// doctest injection below.\n-    /// If `delete` is set to true, the parent range is deleted instead of\n-    /// intersected.\n+    /// If `overwrite_parent` is non-optional, the highlighting of the parent range\n+    /// is overwritten with the argument.\n     ///\n     /// Note that `pop` can be simulated by `pop_and_inject(false)` but the\n     /// latter is computationally more expensive.\n-    fn pop_and_inject(&mut self, delete: bool) {\n+    fn pop_and_inject(&mut self, overwrite_parent: Option<Highlight>) {\n         let mut children = self.stack.pop().unwrap();\n         let prev = self.stack.last_mut().unwrap();\n         children.sort_by_key(|range| range.range.start());\n@@ -343,26 +354,45 @@ impl HighlightedRangeStack {\n             if let Some(idx) =\n                 prev.iter().position(|parent| parent.range.contains_range(child.range))\n             {\n+                if let Some(tag) = overwrite_parent {\n+                    prev[idx].highlight = tag;\n+                }\n+\n                 let cloned = Self::intersect(&mut prev[idx], &child);\n-                let insert_idx = if delete || prev[idx].range.is_empty() {\n+                let insert_idx = if prev[idx].range.is_empty() {\n                     prev.remove(idx);\n                     idx\n                 } else {\n                     idx + 1\n                 };\n                 prev.insert(insert_idx, child);\n-                if !delete && !cloned.range.is_empty() {\n+                if !cloned.range.is_empty() {\n                     prev.insert(insert_idx + 1, cloned);\n                 }\n-            } else if let Some(_idx) =\n-                prev.iter().position(|parent| parent.range.contains(child.range.start()))\n-            {\n-                unreachable!(\"child range should be completely contained in parent range\");\n             } else {\n-                let idx = prev\n-                    .binary_search_by_key(&child.range.start(), |range| range.range.start())\n-                    .unwrap_or_else(|x| x);\n-                prev.insert(idx, child);\n+                let maybe_idx =\n+                    prev.iter().position(|parent| parent.range.contains(child.range.start()));\n+                match (overwrite_parent, maybe_idx) {\n+                    (Some(_), Some(idx)) => {\n+                        Self::intersect_partial(&mut prev[idx], &child);\n+                        let insert_idx = if prev[idx].range.is_empty() {\n+                            prev.remove(idx);\n+                            idx\n+                        } else {\n+                            idx + 1\n+                        };\n+                        prev.insert(insert_idx, child);\n+                    }\n+                    (_, None) => {\n+                        let idx = prev\n+                            .binary_search_by_key(&child.range.start(), |range| range.range.start())\n+                            .unwrap_or_else(|x| x);\n+                        prev.insert(idx, child);\n+                    }\n+                    _ => {\n+                        unreachable!(\"child range should be completely contained in parent range\");\n+                    }\n+                }\n             }\n         }\n     }\n@@ -516,11 +546,9 @@ fn highlight_element(\n             let ty = sema.type_of_expr(&expr)?;\n             if !ty.is_raw_ptr() {\n                 return None;\n+            } else {\n+                HighlightTag::Operator | HighlightModifier::Unsafe\n             }\n-\n-            let mut h = Highlight::new(HighlightTag::Operator);\n-            h |= HighlightModifier::Unsafe;\n-            h\n         }\n         T![!] if element.parent().and_then(ast::MacroCall::cast).is_some() => {\n             Highlight::new(HighlightTag::Macro)"}, {"sha": "0c74f7370158162953d990d7e691d0ff99eba104", "filename": "crates/ra_ide/src/syntax_highlighting/html.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c544f9a137bd675fd6e9cc4c244ff4366ededb50/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c544f9a137bd675fd6e9cc4c244ff4366ededb50/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs?ref=c544f9a137bd675fd6e9cc4c244ff4366ededb50", "patch": "@@ -64,6 +64,8 @@ pre                 { color: #DCDCCC; background: #3F3F3F; font-size: 22px; padd\n \n .lifetime           { color: #DFAF8F; font-style: italic; }\n .comment            { color: #7F9F7F; }\n+.documentation      { color: #629755; }\n+.injected           { opacity: 0.65 ; }\n .struct, .enum      { color: #7CB8BB; }\n .enum_variant       { color: #BDE0F3; }\n .string_literal     { color: #CC9393; }"}, {"sha": "181c21256e0107de67f7b0260342f75d23c81c23", "filename": "crates/ra_ide/src/syntax_highlighting/injection.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c544f9a137bd675fd6e9cc4c244ff4366ededb50/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c544f9a137bd675fd6e9cc4c244ff4366ededb50/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs?ref=c544f9a137bd675fd6e9cc4c244ff4366ededb50", "patch": "@@ -8,8 +8,8 @@ use ra_syntax::{ast, AstToken, SyntaxNode, SyntaxToken, TextRange, TextSize};\n use stdx::SepBy;\n \n use crate::{\n-    call_info::ActiveParameter, Analysis, HighlightModifier, HighlightTag, HighlightedRange,\n-    RootDatabase,\n+    call_info::ActiveParameter, Analysis, Highlight, HighlightModifier, HighlightTag,\n+    HighlightedRange, RootDatabase,\n };\n \n use super::HighlightedRangeStack;\n@@ -172,6 +172,7 @@ pub(super) fn highlight_doc_comment(\n                 h.range.end() + end_offset.unwrap_or(start_offset) - h.range.start(),\n             );\n \n+            h.highlight |= HighlightModifier::Injected;\n             stack.add(h);\n         }\n     }\n@@ -181,6 +182,7 @@ pub(super) fn highlight_doc_comment(\n     for comment in new_comments {\n         stack.add(comment);\n     }\n-    stack.pop_and_inject(false);\n-    stack.pop_and_inject(true);\n+    stack.pop_and_inject(None);\n+    stack\n+        .pop_and_inject(Some(Highlight::from(HighlightTag::Generic) | HighlightModifier::Injected));\n }"}, {"sha": "e8e251cfc00093870dbd67752ce8e72767aee457", "filename": "crates/ra_ide/src/syntax_highlighting/tags.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c544f9a137bd675fd6e9cc4c244ff4366ededb50/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c544f9a137bd675fd6e9cc4c244ff4366ededb50/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs?ref=c544f9a137bd675fd6e9cc4c244ff4366ededb50", "patch": "@@ -27,6 +27,7 @@ pub enum HighlightTag {\n     Field,\n     FormatSpecifier,\n     Function,\n+    Generic,\n     Keyword,\n     Lifetime,\n     Macro,\n@@ -57,6 +58,7 @@ pub enum HighlightModifier {\n     /// not.\n     Definition,\n     Documentation,\n+    Injected,\n     Mutable,\n     Unsafe,\n }\n@@ -77,6 +79,7 @@ impl HighlightTag {\n             HighlightTag::Field => \"field\",\n             HighlightTag::FormatSpecifier => \"format_specifier\",\n             HighlightTag::Function => \"function\",\n+            HighlightTag::Generic => \"generic\",\n             HighlightTag::Keyword => \"keyword\",\n             HighlightTag::Lifetime => \"lifetime\",\n             HighlightTag::Macro => \"macro\",\n@@ -110,6 +113,7 @@ impl HighlightModifier {\n         HighlightModifier::ControlFlow,\n         HighlightModifier::Definition,\n         HighlightModifier::Documentation,\n+        HighlightModifier::Injected,\n         HighlightModifier::Mutable,\n         HighlightModifier::Unsafe,\n     ];\n@@ -120,6 +124,7 @@ impl HighlightModifier {\n             HighlightModifier::ControlFlow => \"control\",\n             HighlightModifier::Definition => \"declaration\",\n             HighlightModifier::Documentation => \"documentation\",\n+            HighlightModifier::Injected => \"injected\",\n             HighlightModifier::Mutable => \"mutable\",\n             HighlightModifier::Unsafe => \"unsafe\",\n         }"}, {"sha": "10fe40cb50723d0c321a7e958f9c81460f4ececd", "filename": "crates/rust-analyzer/src/semantic_tokens.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c544f9a137bd675fd6e9cc4c244ff4366ededb50/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c544f9a137bd675fd6e9cc4c244ff4366ededb50/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs?ref=c544f9a137bd675fd6e9cc4c244ff4366ededb50", "patch": "@@ -39,13 +39,14 @@ define_semantic_token_types![\n     (BOOLEAN, \"boolean\"),\n     (BUILTIN_TYPE, \"builtinType\"),\n     (ENUM_MEMBER, \"enumMember\"),\n+    (ESCAPE_SEQUENCE, \"escapeSequence\"),\n+    (FORMAT_SPECIFIER, \"formatSpecifier\"),\n+    (GENERIC, \"generic\"),\n     (LIFETIME, \"lifetime\"),\n     (SELF_KEYWORD, \"selfKeyword\"),\n     (TYPE_ALIAS, \"typeAlias\"),\n     (UNION, \"union\"),\n     (UNRESOLVED_REFERENCE, \"unresolvedReference\"),\n-    (FORMAT_SPECIFIER, \"formatSpecifier\"),\n-    (ESCAPE_SEQUENCE, \"escapeSequence\"),\n ];\n \n macro_rules! define_semantic_token_modifiers {\n@@ -68,6 +69,7 @@ macro_rules! define_semantic_token_modifiers {\n define_semantic_token_modifiers![\n     (CONSTANT, \"constant\"),\n     (CONTROL_FLOW, \"controlFlow\"),\n+    (INJECTED, \"injected\"),\n     (MUTABLE, \"mutable\"),\n     (UNSAFE, \"unsafe\"),\n     (ATTRIBUTE_MODIFIER, \"attribute\"),"}, {"sha": "da9887a9a316599a2047abdafaa549962471de7b", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c544f9a137bd675fd6e9cc4c244ff4366ededb50/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c544f9a137bd675fd6e9cc4c244ff4366ededb50/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=c544f9a137bd675fd6e9cc4c244ff4366ededb50", "patch": "@@ -295,6 +295,7 @@ fn semantic_token_type_and_modifiers(\n         HighlightTag::SelfType => lsp_types::SemanticTokenType::TYPE,\n         HighlightTag::Field => lsp_types::SemanticTokenType::PROPERTY,\n         HighlightTag::Function => lsp_types::SemanticTokenType::FUNCTION,\n+        HighlightTag::Generic => semantic_tokens::GENERIC,\n         HighlightTag::Module => lsp_types::SemanticTokenType::NAMESPACE,\n         HighlightTag::Constant => {\n             mods |= semantic_tokens::CONSTANT;\n@@ -331,6 +332,7 @@ fn semantic_token_type_and_modifiers(\n             HighlightModifier::Attribute => semantic_tokens::ATTRIBUTE_MODIFIER,\n             HighlightModifier::Definition => lsp_types::SemanticTokenModifier::DECLARATION,\n             HighlightModifier::Documentation => lsp_types::SemanticTokenModifier::DOCUMENTATION,\n+            HighlightModifier::Injected => semantic_tokens::INJECTED,\n             HighlightModifier::ControlFlow => semantic_tokens::CONTROL_FLOW,\n             HighlightModifier::Mutable => semantic_tokens::MUTABLE,\n             HighlightModifier::Unsafe => semantic_tokens::UNSAFE,"}]}