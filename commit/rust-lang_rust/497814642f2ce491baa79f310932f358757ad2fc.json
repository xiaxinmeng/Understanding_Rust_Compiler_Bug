{"sha": "497814642f2ce491baa79f310932f358757ad2fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5NzgxNDY0MmYyY2U0OTFiYWE3OWYzMTA5MzJmMzU4NzU3YWQyZmM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-16T23:31:49Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-17T05:12:34Z"}, "message": "rustdoc: Make fold polymorphic on a context type\n\nThis will allow it to be instantiated for non-sendable contexts", "tree": {"sha": "76b3b9dd4a5d4149aa84f94cf53911369a68f795", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76b3b9dd4a5d4149aa84f94cf53911369a68f795"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/497814642f2ce491baa79f310932f358757ad2fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/497814642f2ce491baa79f310932f358757ad2fc", "html_url": "https://github.com/rust-lang/rust/commit/497814642f2ce491baa79f310932f358757ad2fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/497814642f2ce491baa79f310932f358757ad2fc/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5457b4d3fbdcedef80176eeb44d2acd575bf5d3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5457b4d3fbdcedef80176eeb44d2acd575bf5d3f", "html_url": "https://github.com/rust-lang/rust/commit/5457b4d3fbdcedef80176eeb44d2acd575bf5d3f"}], "stats": {"total": 96, "additions": 60, "deletions": 36}, "files": [{"sha": "e4fd440d0fd5fd80c196fb019be9f7adb59e7dc6", "filename": "src/rustdoc/fold.rs", "status": "modified", "additions": 60, "deletions": 36, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/497814642f2ce491baa79f310932f358757ad2fc/src%2Frustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/497814642f2ce491baa79f310932f358757ad2fc/src%2Frustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ffold.rs?ref=497814642f2ce491baa79f310932f358757ad2fc", "patch": "@@ -1,34 +1,57 @@\n export fold;\n export fold_crate, fold_mod, fold_fn, fold_modlist, fold_fnlist;\n export default_seq_fold;\n+export default_seq_fold_fn;\n \n-tag fold = t;\n+tag fold<T> = t<T>;\n \n-type fold_crate = fn~(fold: fold, doc: doc::cratedoc) -> doc::cratedoc;\n-type fold_mod = fn~(fold: fold, doc: doc::moddoc) -> doc::moddoc;\n-type fold_fn = fn~(fold: fold, doc: doc::fndoc) -> doc::fndoc;\n-type fold_modlist = fn~(fold: fold, list: doc::modlist) -> doc::modlist;\n-type fold_fnlist = fn~(fold: fold, list: doc::fnlist) -> doc::fnlist;\n+type fold_crate<T> = fn~(\n+    fold: fold<T>,\n+    doc: doc::cratedoc\n+) -> doc::cratedoc;\n+\n+type fold_mod<T> = fn~(\n+    fold: fold<T>,\n+    doc: doc::moddoc\n+) -> doc::moddoc;\n+\n+type fold_fn<T> = fn~(\n+    fold: fold<T>,\n+    doc: doc::fndoc\n+) -> doc::fndoc;\n+\n+type fold_modlist<T> = fn~(\n+    fold: fold<T>,\n+    list: doc::modlist\n+) -> doc::modlist;\n+\n+type fold_fnlist<T> = fn~(\n+    fold: fold<T>,\n+    list: doc::fnlist\n+) -> doc::fnlist;\n \n-type t = {\n-    fold_crate: fold_crate,\n-    fold_mod: fold_mod,\n-    fold_fn: fold_fn,\n-    fold_modlist: fold_modlist,\n-    fold_fnlist: fold_fnlist\n+type t<T> = {\n+    ctxt: T,\n+    fold_crate: fold_crate<T>,\n+    fold_mod: fold_mod<T>,\n+    fold_fn: fold_fn<T>,\n+    fold_modlist: fold_modlist<T>,\n+    fold_fnlist: fold_fnlist<T>\n };\n \n \n // This exists because fn types don't infer correctly as record\n // initializers, but they do as function arguments\n-fn mk_fold(\n-    fold_crate: fold_crate,\n-    fold_mod: fold_mod,\n-    fold_fn: fold_fn,\n-    fold_modlist: fold_modlist,\n-    fold_fnlist: fold_fnlist\n-) -> fold {\n+fn mk_fold<T:copy>(\n+    ctxt: T,\n+    fold_crate: fold_crate<T>,\n+    fold_mod: fold_mod<T>,\n+    fold_fn: fold_fn<T>,\n+    fold_modlist: fold_modlist<T>,\n+    fold_fnlist: fold_fnlist<T>\n+) -> fold<T> {\n     fold({\n+        ctxt: ctxt,\n         fold_crate: fold_crate,\n         fold_mod: fold_mod,\n         fold_fn: fold_fn,\n@@ -37,27 +60,28 @@ fn mk_fold(\n     })\n }\n \n-fn default_seq_fold() -> fold {\n+fn default_seq_fold<T:copy>(ctxt: T) -> fold<T> {\n     mk_fold(\n-        default_seq_fold_crate,\n-        default_seq_fold_mod,\n-        default_seq_fold_fn,\n-        default_seq_fold_modlist,\n-        default_seq_fold_fnlist\n+        ctxt,\n+        {|f, d| default_seq_fold_crate(f, d)},\n+        {|f, d| default_seq_fold_mod(f, d)},\n+        {|f, d| default_seq_fold_fn(f, d)},\n+        {|f, d| default_seq_fold_modlist(f, d)},\n+        {|f, d| default_seq_fold_fnlist(f, d)}\n     )\n }\n \n-fn default_seq_fold_crate(\n-    fold: fold,\n+fn default_seq_fold_crate<T>(\n+    fold: fold<T>,\n     doc: doc::cratedoc\n ) -> doc::cratedoc {\n     ~{\n         topmod: fold.fold_mod(fold, doc.topmod)\n     }\n }\n \n-fn default_seq_fold_mod(\n-    fold: fold,\n+fn default_seq_fold_mod<T>(\n+    fold: fold<T>,\n     doc: doc::moddoc\n ) -> doc::moddoc {\n     ~{\n@@ -67,24 +91,24 @@ fn default_seq_fold_mod(\n     }\n }\n \n-fn default_seq_fold_fn(\n-    _fold: fold,\n+fn default_seq_fold_fn<T>(\n+    _fold: fold<T>,\n     doc: doc::fndoc\n ) -> doc::fndoc {\n     doc\n }\n \n-fn default_seq_fold_modlist(\n-    fold: fold,\n+fn default_seq_fold_modlist<T>(\n+    fold: fold<T>,\n     list: doc::modlist\n ) -> doc::modlist {\n     doc::modlist(vec::map(*list) {|doc|\n         fold.fold_mod(fold, doc)\n     })\n }\n \n-fn default_seq_fold_fnlist(\n-    fold: fold,\n+fn default_seq_fold_fnlist<T>(\n+    fold: fold<T>,\n     list: doc::fnlist\n ) -> doc::fnlist {\n     doc::fnlist(vec::map(*list) {|doc|\n@@ -99,7 +123,7 @@ mod tests {\n         let source = \"mod a { fn b() { } mod c { fn d() { } } }\";\n         let ast = parse::from_str(source);\n         let doc = extract::extract(ast, \"\");\n-        let fld = default_seq_fold();\n+        let fld = default_seq_fold(());\n         let folded = fld.fold_crate(fld, doc);\n         assert doc == folded;\n     }"}]}