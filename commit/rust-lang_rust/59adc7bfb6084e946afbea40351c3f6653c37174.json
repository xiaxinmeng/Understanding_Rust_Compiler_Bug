{"sha": "59adc7bfb6084e946afbea40351c3f6653c37174", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5YWRjN2JmYjYwODRlOTQ2YWZiZWE0MDM1MWMzZjY2NTNjMzcxNzQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-27T12:41:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-27T12:41:38Z"}, "message": "Merge #4596\n\n4596: Strip leading underscores of argument names in function/method r=matklad a=kuy\n\nCloses #4510 \r\n\r\n### Goal\r\n\r\nWhen I select a function/method from completions, I get a snippet that doesn't contain leading underscores of argument names.\r\n\r\n### Solution\r\n\r\n- Option 1: All signatures don't contain underscores\r\n- Option 2: Keep same signature, but inserted snippet doesn't contain underscores\r\n\r\nI choose Option 2 because I think that leading underscores is a part of \"signature\". Users should get correct signatures. On the other hand, trimming underscores is an assist by IDE.\r\n\r\n### Other impls.\r\n\r\nrls: Complete argument names with underscores (same as actual ra)\r\nIntelliJ Rust: Doesn't complete argument names\r\nVSCode (TypeScript): Doesn't complete argument names\r\n\r\n### Working example\r\n\r\n![Screen Shot 2020-05-25 at 0 03 21](https://user-images.githubusercontent.com/151614/82757771-a05e5b80-9e1d-11ea-9dbc-1263c960e2ae.png)\r\n\n\nCo-authored-by: Yuki Kodama <endflow.net@gmail.com>", "tree": {"sha": "dad3828436c3f8ee65bd2a2e18d04aa3a094d786", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dad3828436c3f8ee65bd2a2e18d04aa3a094d786"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59adc7bfb6084e946afbea40351c3f6653c37174", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJezmACCRBK7hj4Ov3rIwAAdHIIAFiL9W7Du5JvnP3ksixkPsY0\nm8mwttgmlhDMqevn6Nt4vllcFWeUxadWzv65p/pXbjbl1xq0iGhu4cb7u0ToBxm4\nxLTNGo80YJEOXz2tQyQ/BTT+VtiWvn3xb1Ed2Hm1E3G0+zqai7QeK901wwjC2uGl\neqGFNV6tPcSD7bQbKC3A6HNokouMaexyu5qRsIgF7JWB+bxTolTwj99SDBH9ShGS\n2VdMyG0lzXz959PjGLQZkaD+s84TqJzav6ufYDtkL6HoeHx9YmArJg/YynQxFJU7\nkVErchyRTQmj6mLruzXbaYQn45l7TG/13zVqfPHfjZ6UhF4AThGbb5btSnamJx0=\n=D+Bv\n-----END PGP SIGNATURE-----\n", "payload": "tree dad3828436c3f8ee65bd2a2e18d04aa3a094d786\nparent 3c5112b079211640ed865ed1d26d8cd2f041c8c4\nparent fd83f469e9643c7a9da2d9e4c796bd89c441458d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1590583298 +0000\ncommitter GitHub <noreply@github.com> 1590583298 +0000\n\nMerge #4596\n\n4596: Strip leading underscores of argument names in function/method r=matklad a=kuy\n\nCloses #4510 \r\n\r\n### Goal\r\n\r\nWhen I select a function/method from completions, I get a snippet that doesn't contain leading underscores of argument names.\r\n\r\n### Solution\r\n\r\n- Option 1: All signatures don't contain underscores\r\n- Option 2: Keep same signature, but inserted snippet doesn't contain underscores\r\n\r\nI choose Option 2 because I think that leading underscores is a part of \"signature\". Users should get correct signatures. On the other hand, trimming underscores is an assist by IDE.\r\n\r\n### Other impls.\r\n\r\nrls: Complete argument names with underscores (same as actual ra)\r\nIntelliJ Rust: Doesn't complete argument names\r\nVSCode (TypeScript): Doesn't complete argument names\r\n\r\n### Working example\r\n\r\n![Screen Shot 2020-05-25 at 0 03 21](https://user-images.githubusercontent.com/151614/82757771-a05e5b80-9e1d-11ea-9dbc-1263c960e2ae.png)\r\n\n\nCo-authored-by: Yuki Kodama <endflow.net@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59adc7bfb6084e946afbea40351c3f6653c37174", "html_url": "https://github.com/rust-lang/rust/commit/59adc7bfb6084e946afbea40351c3f6653c37174", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59adc7bfb6084e946afbea40351c3f6653c37174/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c5112b079211640ed865ed1d26d8cd2f041c8c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c5112b079211640ed865ed1d26d8cd2f041c8c4", "html_url": "https://github.com/rust-lang/rust/commit/3c5112b079211640ed865ed1d26d8cd2f041c8c4"}, {"sha": "fd83f469e9643c7a9da2d9e4c796bd89c441458d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd83f469e9643c7a9da2d9e4c796bd89c441458d", "html_url": "https://github.com/rust-lang/rust/commit/fd83f469e9643c7a9da2d9e4c796bd89c441458d"}], "stats": {"total": 60, "additions": 59, "deletions": 1}, "files": [{"sha": "61565c84fe2bb1af35b802d2f621f747f0cd727e", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 59, "deletions": 1, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/59adc7bfb6084e946afbea40351c3f6653c37174/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59adc7bfb6084e946afbea40351c3f6653c37174/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=59adc7bfb6084e946afbea40351c3f6653c37174", "patch": "@@ -211,7 +211,7 @@ impl Completions {\n             .parameter_names\n             .iter()\n             .skip(if function_signature.has_self_param { 1 } else { 0 })\n-            .cloned()\n+            .map(|name| name.trim_start_matches('_').into())\n             .collect();\n \n         builder = builder.add_call_parens(ctx, name, Params::Named(params));\n@@ -669,6 +669,37 @@ mod tests {\n         ]\n         \"###\n         );\n+        assert_debug_snapshot!(\n+            do_reference_completion(\n+                r\"\n+                fn with_ignored_args(_foo: i32, ___bar: bool, ho_ge_: String) {}\n+                fn main() { with_<|> }\n+                \"\n+            ),\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"main()\",\n+                source_range: 110..115,\n+                delete: 110..115,\n+                insert: \"main()$0\",\n+                kind: Function,\n+                lookup: \"main\",\n+                detail: \"fn main()\",\n+            },\n+            CompletionItem {\n+                label: \"with_ignored_args(\u2026)\",\n+                source_range: 110..115,\n+                delete: 110..115,\n+                insert: \"with_ignored_args(${1:foo}, ${2:bar}, ${3:ho_ge_})$0\",\n+                kind: Function,\n+                lookup: \"with_ignored_args\",\n+                detail: \"fn with_ignored_args(_foo: i32, ___bar: bool, ho_ge_: String)\",\n+                trigger_call_info: true,\n+            },\n+        ]\n+        \"###\n+        );\n         assert_debug_snapshot!(\n             do_reference_completion(\n                 r\"\n@@ -695,6 +726,33 @@ mod tests {\n         ]\n         \"###\n         );\n+        assert_debug_snapshot!(\n+            do_reference_completion(\n+                r\"\n+                struct S {}\n+                impl S {\n+                    fn foo_ignored_args(&self, _a: bool, b: i32) {}\n+                }\n+                fn bar(s: &S) {\n+                    s.f<|>\n+                }\n+                \"\n+            ),\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"foo_ignored_args(\u2026)\",\n+                source_range: 194..195,\n+                delete: 194..195,\n+                insert: \"foo_ignored_args(${1:a}, ${2:b})$0\",\n+                kind: Method,\n+                lookup: \"foo_ignored_args\",\n+                detail: \"fn foo_ignored_args(&self, _a: bool, b: i32)\",\n+                trigger_call_info: true,\n+            },\n+        ]\n+        \"###\n+        );\n     }\n \n     #[test]"}]}