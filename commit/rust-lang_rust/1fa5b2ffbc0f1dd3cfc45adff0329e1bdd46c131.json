{"sha": "1fa5b2ffbc0f1dd3cfc45adff0329e1bdd46c131", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmYTViMmZmYmMwZjFkZDNjZmM0NWFkZmYwMzI5ZTFiZGQ0NmMxMzE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-08T17:25:35Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-08T17:25:35Z"}, "message": "smol strings", "tree": {"sha": "5ebfc103a7d5c69705fdfc1166dbf60e61a9e441", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ebfc103a7d5c69705fdfc1166dbf60e61a9e441"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fa5b2ffbc0f1dd3cfc45adff0329e1bdd46c131", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fa5b2ffbc0f1dd3cfc45adff0329e1bdd46c131", "html_url": "https://github.com/rust-lang/rust/commit/1fa5b2ffbc0f1dd3cfc45adff0329e1bdd46c131", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fa5b2ffbc0f1dd3cfc45adff0329e1bdd46c131/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc4c90aa2cf4da819dd324a7bbf8b36f6a068a6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc4c90aa2cf4da819dd324a7bbf8b36f6a068a6d", "html_url": "https://github.com/rust-lang/rust/commit/cc4c90aa2cf4da819dd324a7bbf8b36f6a068a6d"}], "stats": {"total": 68, "additions": 65, "deletions": 3}, "files": [{"sha": "91b0c9c552531eb27454835ba4c12d25058dbfaa", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1fa5b2ffbc0f1dd3cfc45adff0329e1bdd46c131/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fa5b2ffbc0f1dd3cfc45adff0329e1bdd46c131/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=1fa5b2ffbc0f1dd3cfc45adff0329e1bdd46c131", "patch": "@@ -35,6 +35,7 @@ mod grammar;\n mod parser_impl;\n \n mod syntax_kinds;\n+mod smol_str;\n mod yellow;\n /// Utilities for simple uses of the parser.\n pub mod utils;"}, {"sha": "2a330c343d2ea5fc17dfb2689799e0c12b0d360d", "filename": "src/smol_str.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/1fa5b2ffbc0f1dd3cfc45adff0329e1bdd46c131/src%2Fsmol_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fa5b2ffbc0f1dd3cfc45adff0329e1bdd46c131/src%2Fsmol_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsmol_str.rs?ref=1fa5b2ffbc0f1dd3cfc45adff0329e1bdd46c131", "patch": "@@ -0,0 +1,60 @@\n+use std::{sync::Arc};\n+\n+const INLINE_CAP: usize = 22;\n+\n+#[derive(Clone, Debug)]\n+pub(crate) enum SmolStr {\n+    Heap(Arc<str>),\n+    Inline {\n+        len: u8,\n+        buf: [u8; INLINE_CAP],\n+    },\n+}\n+\n+impl SmolStr {\n+    pub fn new(text: &str) -> SmolStr {\n+        let len = text.len();\n+        if len <= INLINE_CAP {\n+            let mut buf = [0; INLINE_CAP];\n+            buf[..len].copy_from_slice(text.as_bytes());\n+            SmolStr::Inline { len: len as u8, buf }\n+        } else {\n+            SmolStr::Heap(\n+                text.to_string().into_boxed_str().into()\n+            )\n+        }\n+    }\n+\n+    pub fn as_str(&self) -> &str {\n+        match self {\n+            SmolStr::Heap(data) => &*data,\n+            SmolStr::Inline { len, buf } => {\n+                let len = *len as usize;\n+                let buf = &buf[..len];\n+                unsafe { ::std::str::from_utf8_unchecked(buf) }\n+            }\n+        }\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    #[test]\n+    #[cfg(target_pointer_width = \"64\")]\n+    fn smol_str_is_smol() {\n+        assert_eq!(::std::mem::size_of::<SmolStr>(), 8 + 8 + 8)\n+    }\n+\n+    #[test]\n+    fn test_round_trip() {\n+        let mut text = String::new();\n+        for n in 0..256 {\n+            let smol = SmolStr::new(&text);\n+            assert_eq!(smol.as_str(), text.as_str());\n+            text.push_str(&n.to_string());\n+        }\n+    }\n+}\n+"}, {"sha": "26df76af68b751429414ceb5ebf6649c39f49919", "filename": "src/yellow/green.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1fa5b2ffbc0f1dd3cfc45adff0329e1bdd46c131/src%2Fyellow%2Fgreen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fa5b2ffbc0f1dd3cfc45adff0329e1bdd46c131/src%2Fyellow%2Fgreen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fyellow%2Fgreen.rs?ref=1fa5b2ffbc0f1dd3cfc45adff0329e1bdd46c131", "patch": "@@ -1,5 +1,6 @@\n use std::sync::Arc;\n use {\n+    smol_str::SmolStr,\n     SyntaxKind::{self, *},\n     TextUnit,\n };\n@@ -116,7 +117,7 @@ pub(crate) enum GreenLeaf {\n     },\n     Token {\n         kind: SyntaxKind,\n-        text: Option<Arc<str>>,\n+        text: Option<SmolStr>,\n     },\n }\n \n@@ -137,7 +138,7 @@ impl GreenLeaf {\n                 debug_assert_eq!(t, text);\n                 None\n             }\n-            None => Some(text.to_owned().into_boxed_str().into()),\n+            None => Some(SmolStr::new(text)),\n         };\n         GreenLeaf::Token { kind, text }\n     }\n@@ -159,7 +160,7 @@ impl GreenLeaf {\n             }\n             GreenLeaf::Token { kind, text } => match text {\n                 None => kind.static_text().unwrap(),\n-                Some(t) => t,\n+                Some(t) => t.as_str(),\n             },\n         }\n     }"}]}