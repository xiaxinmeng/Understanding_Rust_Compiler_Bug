{"sha": "5699f683a40aa905a21207fa482b4e1da93f1643", "node_id": "C_kwDOAAsO6NoAKDU2OTlmNjgzYTQwYWE5MDVhMjEyMDdmYTQ4MmI0ZTFkYTkzZjE2NDM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-13T05:44:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-13T05:44:17Z"}, "message": "Rollup merge of #93886 - clarfonthey:stable_ascii_escape, r=Mark-Simulacrum\n\nStabilise inherent_ascii_escape (FCP in #77174)\n\nImplements #77174, which completed its FCP.\n\nThis does *not* deprecate any existing methods or structs, as that is tracked in #93887. That stated, people should prefer using `u8::escape_ascii` to `std::ascii::escape_default`.", "tree": {"sha": "aeb9b6b24f56cecce8f89b4b238acf33e4ace31b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aeb9b6b24f56cecce8f89b4b238acf33e4ace31b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5699f683a40aa905a21207fa482b4e1da93f1643", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiCJqxCRBK7hj4Ov3rIwAABHIIADpwDkvQN9DzWfahWq+DhB50\nfe0BlPSqtdYeYdsScZR8OXgf61fmT1kDe4m3H4px8DuEEszglV1hNdU7/+KAiZsG\nh1CCYBEjCE+JmYbWwcYtgsLqol7kzDgnRj3WOe2Yth92YEMrlQifeWuaOliCvFDD\nWxkpFl8x468O3Z1iB5G65y+Ib9XaKh6qGt5isLIQIrLeS6sWOyl6mgxGuVcsH86Y\nXND5xFyjNHlwVo53mUEHuVFpDFn7eJbN3JKwX67vCpxZgeSml6IohY3OJB9FoXyd\nIGKmp+4oyJx8YkZqJl0hSDDFCysnuYpjDoIN6FbgaEdNnfejQyTrUZMoxe0sovA=\n=suAt\n-----END PGP SIGNATURE-----\n", "payload": "tree aeb9b6b24f56cecce8f89b4b238acf33e4ace31b\nparent b90a369f7c2660cb10cee6d0ee79cf4cdead08ee\nparent de6e9731764af14b27b6158834454344da49c37d\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1644731057 +0100\ncommitter GitHub <noreply@github.com> 1644731057 +0100\n\nRollup merge of #93886 - clarfonthey:stable_ascii_escape, r=Mark-Simulacrum\n\nStabilise inherent_ascii_escape (FCP in #77174)\n\nImplements #77174, which completed its FCP.\n\nThis does *not* deprecate any existing methods or structs, as that is tracked in #93887. That stated, people should prefer using `u8::escape_ascii` to `std::ascii::escape_default`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5699f683a40aa905a21207fa482b4e1da93f1643", "html_url": "https://github.com/rust-lang/rust/commit/5699f683a40aa905a21207fa482b4e1da93f1643", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5699f683a40aa905a21207fa482b4e1da93f1643/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b90a369f7c2660cb10cee6d0ee79cf4cdead08ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/b90a369f7c2660cb10cee6d0ee79cf4cdead08ee", "html_url": "https://github.com/rust-lang/rust/commit/b90a369f7c2660cb10cee6d0ee79cf4cdead08ee"}, {"sha": "de6e9731764af14b27b6158834454344da49c37d", "url": "https://api.github.com/repos/rust-lang/rust/commits/de6e9731764af14b27b6158834454344da49c37d", "html_url": "https://github.com/rust-lang/rust/commit/de6e9731764af14b27b6158834454344da49c37d"}], "stats": {"total": 29, "additions": 13, "deletions": 16}, "files": [{"sha": "ce75859f963f65165f575d0aa59ffe9a61eb868f", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5699f683a40aa905a21207fa482b4e1da93f1643/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5699f683a40aa905a21207fa482b4e1da93f1643/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=5699f683a40aa905a21207fa482b4e1da93f1643", "patch": "@@ -112,7 +112,6 @@\n #![feature(extend_one)]\n #![feature(fmt_internals)]\n #![feature(fn_traits)]\n-#![feature(inherent_ascii_escape)]\n #![feature(inplace_iteration)]\n #![feature(iter_advance_by)]\n #![feature(layout_for_ptr)]"}, {"sha": "f0397d08f95a8f4e03875c77c9eed85a197aff5c", "filename": "library/alloc/src/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5699f683a40aa905a21207fa482b4e1da93f1643/library%2Falloc%2Fsrc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5699f683a40aa905a21207fa482b4e1da93f1643/library%2Falloc%2Fsrc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fslice.rs?ref=5699f683a40aa905a21207fa482b4e1da93f1643", "patch": "@@ -108,7 +108,7 @@ pub use core::slice::ArrayChunks;\n pub use core::slice::ArrayChunksMut;\n #[unstable(feature = \"array_windows\", issue = \"75027\")]\n pub use core::slice::ArrayWindows;\n-#[unstable(feature = \"inherent_ascii_escape\", issue = \"77174\")]\n+#[stable(feature = \"inherent_ascii_escape\", since = \"1.60.0\")]\n pub use core::slice::EscapeAscii;\n #[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]\n pub use core::slice::SliceIndex;"}, {"sha": "72105888f9447f2eac6c277754d157d38dd0b6c3", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5699f683a40aa905a21207fa482b4e1da93f1643/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5699f683a40aa905a21207fa482b4e1da93f1643/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=5699f683a40aa905a21207fa482b4e1da93f1643", "patch": "@@ -791,7 +791,6 @@ impl u8 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(inherent_ascii_escape)]\n     ///\n     /// assert_eq!(\"0\", b'0'.escape_ascii().to_string());\n     /// assert_eq!(\"\\\\t\", b'\\t'.escape_ascii().to_string());\n@@ -804,10 +803,10 @@ impl u8 {\n     /// ```\n     #[must_use = \"this returns the escaped byte as an iterator, \\\n                   without modifying the original\"]\n-    #[unstable(feature = \"inherent_ascii_escape\", issue = \"77174\")]\n+    #[stable(feature = \"inherent_ascii_escape\", since = \"1.60.0\")]\n     #[inline]\n-    pub fn escape_ascii(&self) -> ascii::EscapeDefault {\n-        ascii::escape_default(*self)\n+    pub fn escape_ascii(self) -> ascii::EscapeDefault {\n+        ascii::escape_default(self)\n     }\n \n     pub(crate) fn is_utf8_char_boundary(self) -> bool {"}, {"sha": "304ba7ee5544f9abf264751ba7320372fb470368", "filename": "library/core/src/slice/ascii.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5699f683a40aa905a21207fa482b4e1da93f1643/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5699f683a40aa905a21207fa482b4e1da93f1643/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs?ref=5699f683a40aa905a21207fa482b4e1da93f1643", "patch": "@@ -68,15 +68,14 @@ impl [u8] {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(inherent_ascii_escape)]\n     ///\n     /// let s = b\"0\\t\\r\\n'\\\"\\\\\\x9d\";\n     /// let escaped = s.escape_ascii().to_string();\n     /// assert_eq!(escaped, \"0\\\\t\\\\r\\\\n\\\\'\\\\\\\"\\\\\\\\\\\\x9d\");\n     /// ```\n     #[must_use = \"this returns the escaped bytes as an iterator, \\\n                   without modifying the original\"]\n-    #[unstable(feature = \"inherent_ascii_escape\", issue = \"77174\")]\n+    #[stable(feature = \"inherent_ascii_escape\", since = \"1.60.0\")]\n     pub fn escape_ascii(&self) -> EscapeAscii<'_> {\n         EscapeAscii { inner: self.iter().flat_map(EscapeByte) }\n     }\n@@ -93,13 +92,13 @@ impl_fn_for_zst! {\n ///\n /// This `struct` is created by the [`slice::escape_ascii`] method. See its\n /// documentation for more information.\n-#[unstable(feature = \"inherent_ascii_escape\", issue = \"77174\")]\n+#[stable(feature = \"inherent_ascii_escape\", since = \"1.60.0\")]\n #[derive(Clone)]\n pub struct EscapeAscii<'a> {\n     inner: iter::FlatMap<super::Iter<'a, u8>, ascii::EscapeDefault, EscapeByte>,\n }\n \n-#[unstable(feature = \"inherent_ascii_escape\", issue = \"77174\")]\n+#[stable(feature = \"inherent_ascii_escape\", since = \"1.60.0\")]\n impl<'a> iter::Iterator for EscapeAscii<'a> {\n     type Item = u8;\n     #[inline]\n@@ -131,23 +130,23 @@ impl<'a> iter::Iterator for EscapeAscii<'a> {\n     }\n }\n \n-#[unstable(feature = \"inherent_ascii_escape\", issue = \"77174\")]\n+#[stable(feature = \"inherent_ascii_escape\", since = \"1.60.0\")]\n impl<'a> iter::DoubleEndedIterator for EscapeAscii<'a> {\n     fn next_back(&mut self) -> Option<u8> {\n         self.inner.next_back()\n     }\n }\n-#[unstable(feature = \"inherent_ascii_escape\", issue = \"77174\")]\n+#[stable(feature = \"inherent_ascii_escape\", since = \"1.60.0\")]\n impl<'a> iter::ExactSizeIterator for EscapeAscii<'a> {}\n-#[unstable(feature = \"inherent_ascii_escape\", issue = \"77174\")]\n+#[stable(feature = \"inherent_ascii_escape\", since = \"1.60.0\")]\n impl<'a> iter::FusedIterator for EscapeAscii<'a> {}\n-#[unstable(feature = \"inherent_ascii_escape\", issue = \"77174\")]\n+#[stable(feature = \"inherent_ascii_escape\", since = \"1.60.0\")]\n impl<'a> fmt::Display for EscapeAscii<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.clone().try_for_each(|b| f.write_char(b as char))\n     }\n }\n-#[unstable(feature = \"inherent_ascii_escape\", issue = \"77174\")]\n+#[stable(feature = \"inherent_ascii_escape\", since = \"1.60.0\")]\n impl<'a> fmt::Debug for EscapeAscii<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"EscapeAscii\").finish_non_exhaustive()"}, {"sha": "cd38c3a75473d4c1393823bb1afab8ef61812654", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5699f683a40aa905a21207fa482b4e1da93f1643/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5699f683a40aa905a21207fa482b4e1da93f1643/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=5699f683a40aa905a21207fa482b4e1da93f1643", "patch": "@@ -81,7 +81,7 @@ pub use index::SliceIndex;\n #[unstable(feature = \"slice_range\", issue = \"76393\")]\n pub use index::range;\n \n-#[unstable(feature = \"inherent_ascii_escape\", issue = \"77174\")]\n+#[stable(feature = \"inherent_ascii_escape\", since = \"1.60.0\")]\n pub use ascii::EscapeAscii;\n \n /// Calculates the direction and split point of a one-sided range."}]}