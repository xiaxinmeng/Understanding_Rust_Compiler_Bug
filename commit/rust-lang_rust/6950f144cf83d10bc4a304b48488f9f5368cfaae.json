{"sha": "6950f144cf83d10bc4a304b48488f9f5368cfaae", "node_id": "C_kwDOAAsO6NoAKDY5NTBmMTQ0Y2Y4M2QxMGJjNGEzMDRiNDg0ODhmOWY1MzY4Y2ZhYWU", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-06-09T02:26:51Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-06-09T02:26:51Z"}, "message": "rustdoc: show tuple impls as `impl Trait for (T, ...)`\n\nThis commit adds a new unstable attribute, `#[doc(tuple_varadic)]`, that\nshows a 1-tuple as `(T, ...)` instead of just `(T,)`, and links to a section\nin the tuple primitive docs that talks about these.", "tree": {"sha": "cdb01e93a5aa5912f6ef07deef7ba8c622027f67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdb01e93a5aa5912f6ef07deef7ba8c622027f67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6950f144cf83d10bc4a304b48488f9f5368cfaae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6950f144cf83d10bc4a304b48488f9f5368cfaae", "html_url": "https://github.com/rust-lang/rust/commit/6950f144cf83d10bc4a304b48488f9f5368cfaae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6950f144cf83d10bc4a304b48488f9f5368cfaae/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a935670055d87e17c381542f4eaab481e8bf17b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a935670055d87e17c381542f4eaab481e8bf17b", "html_url": "https://github.com/rust-lang/rust/commit/7a935670055d87e17c381542f4eaab481e8bf17b"}], "stats": {"total": 155, "additions": 111, "deletions": 44}, "files": [{"sha": "1777438d304eabc6d74b24f819ab9b060bed89d0", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6950f144cf83d10bc4a304b48488f9f5368cfaae/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6950f144cf83d10bc4a304b48488f9f5368cfaae/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=6950f144cf83d10bc4a304b48488f9f5368cfaae", "patch": "@@ -401,6 +401,11 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                     let msg = \"`#[doc(keyword)]` is meant for internal use only\";\n                     gate_feature_post!(self, rustdoc_internals, attr.span, msg);\n                 }\n+\n+                if nested_meta.has_name(sym::tuple_varadic) {\n+                    let msg = \"`#[doc(tuple_varadic)]` is meant for internal use only\";\n+                    gate_feature_post!(self, rustdoc_internals, attr.span, msg);\n+                }\n             }\n         }\n "}, {"sha": "ea8c1b45a60a70dbb13dea0787e0b3d205a255e3", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/6950f144cf83d10bc4a304b48488f9f5368cfaae/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6950f144cf83d10bc4a304b48488f9f5368cfaae/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=6950f144cf83d10bc4a304b48488f9f5368cfaae", "patch": "@@ -804,6 +804,37 @@ impl CheckAttrVisitor<'_> {\n         true\n     }\n \n+    fn check_doc_tuple_varadic(&self, meta: &NestedMetaItem, hir_id: HirId) -> bool {\n+        match self.tcx.hir().find(hir_id).and_then(|node| match node {\n+            hir::Node::Item(item) => Some(&item.kind),\n+            _ => None,\n+        }) {\n+            Some(ItemKind::Impl(ref i)) => {\n+                if !matches!(&i.self_ty.kind, hir::TyKind::Tup([_])) {\n+                    self.tcx\n+                        .sess\n+                        .struct_span_err(\n+                            meta.span(),\n+                            \"`#[doc(tuple_varadic)]` can only be used on unary tuples\",\n+                        )\n+                        .emit();\n+                    return false;\n+                }\n+            }\n+            _ => {\n+                self.tcx\n+                    .sess\n+                    .struct_span_err(\n+                        meta.span(),\n+                        \"`#[doc(keyword = \\\"...\\\")]` can only be used on impl blocks\",\n+                    )\n+                    .emit();\n+                return false;\n+            }\n+        }\n+        true\n+    }\n+\n     /// Checks `#[doc(inline)]`/`#[doc(no_inline)]` attributes. Returns `true` if valid.\n     ///\n     /// A doc inlining attribute is invalid if it is applied to a non-`use` item, or\n@@ -1064,6 +1095,13 @@ impl CheckAttrVisitor<'_> {\n                             is_valid = false\n                         }\n \n+                        sym::tuple_varadic\n+                            if !self.check_attr_not_crate_level(meta, hir_id, \"tuple_varadic\")\n+                                || !self.check_doc_tuple_varadic(meta, hir_id) =>\n+                        {\n+                            is_valid = false\n+                        }\n+\n                         sym::html_favicon_url\n                         | sym::html_logo_url\n                         | sym::html_playground_url\n@@ -1117,7 +1155,8 @@ impl CheckAttrVisitor<'_> {\n                         | sym::no_inline\n                         | sym::notable_trait\n                         | sym::passes\n-                        | sym::plugins => {}\n+                        | sym::plugins\n+                        | sym::tuple_varadic => {}\n \n                         sym::test => {\n                             if !self.check_test_attr(meta, hir_id) {"}, {"sha": "37e905f7f562b194383768413a61520a80db288c", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6950f144cf83d10bc4a304b48488f9f5368cfaae/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6950f144cf83d10bc4a304b48488f9f5368cfaae/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=6950f144cf83d10bc4a304b48488f9f5368cfaae", "patch": "@@ -1439,6 +1439,7 @@ symbols! {\n         tuple,\n         tuple_from_req,\n         tuple_indexing,\n+        tuple_varadic,\n         two_phase,\n         ty,\n         type_alias_enum_variants,"}, {"sha": "6c76e1488397cab387027fbe2e6e837d47cf8ed7", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6950f144cf83d10bc4a304b48488f9f5368cfaae/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6950f144cf83d10bc4a304b48488f9f5368cfaae/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=6950f144cf83d10bc4a304b48488f9f5368cfaae", "patch": "@@ -2335,6 +2335,7 @@ macro_rules! tuple {\n \n macro_rules! maybe_tuple_doc {\n     ($a:ident @ #[$meta:meta] $item:item) => {\n+        #[cfg_attr(not(bootstrap), doc(tuple_varadic))]\n         #[doc = \"This trait is implemented for tuples up to twelve items long.\"]\n         #[$meta]\n         $item"}, {"sha": "d79258d2ed99a23cbc7ac05822fcb5e924b8ad8b", "filename": "library/core/src/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6950f144cf83d10bc4a304b48488f9f5368cfaae/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6950f144cf83d10bc4a304b48488f9f5368cfaae/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs?ref=6950f144cf83d10bc4a304b48488f9f5368cfaae", "patch": "@@ -900,6 +900,7 @@ mod impls {\n \n     macro_rules! maybe_tuple_doc {\n         ($a:ident @ #[$meta:meta] $item:item) => {\n+            #[cfg_attr(not(bootstrap), doc(tuple_varadic))]\n             #[doc = \"This trait is implemented for tuples up to twelve items long.\"]\n             #[$meta]\n             $item"}, {"sha": "26f9528dd22ee047ddc558df119ad233c4973b3e", "filename": "library/core/src/primitive_docs.rs", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6950f144cf83d10bc4a304b48488f9f5368cfaae/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6950f144cf83d10bc4a304b48488f9f5368cfaae/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprimitive_docs.rs?ref=6950f144cf83d10bc4a304b48488f9f5368cfaae", "patch": "@@ -916,24 +916,11 @@ mod prim_str {}\n ///\n /// # Trait implementations\n ///\n-/// If every type inside a tuple implements one of the following traits, then a\n-/// tuple itself also implements it.\n-///\n-/// * [`Clone`]\n-/// * [`Copy`]\n-/// * [`PartialEq`]\n-/// * [`Eq`]\n-/// * [`PartialOrd`]\n-/// * [`Ord`]\n-/// * [`Debug`]\n-/// * [`Default`]\n-/// * [`Hash`]\n-///\n-/// [`Debug`]: fmt::Debug\n-/// [`Hash`]: hash::Hash\n-///\n-/// Due to a temporary restriction in Rust's type system, these traits are only\n-/// implemented on tuples of arity 12 or less. In the future, this may change.\n+/// In this documentation the shorthand `(T, ...)` is used to represent all\n+/// tuples up to length twelve. When that is used, any trait bounds expressed\n+/// on `T` applies to each field of the tuple independently. Note that this is\n+/// a convenience notation to avoid repetitive documentation, not valid\n+/// Rust syntax.\n ///\n /// # Examples\n ///\n@@ -978,6 +965,7 @@ impl<T, U> (T, U) {}\n // Fake impl that's only really used for docs.\n #[cfg(doc)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[doc(tuple_varadic)]\n /// This trait is implemented on arbitrary-length tuples.\n impl<T: Clone> Clone for (T,) {\n     fn clone(&self) -> Self {\n@@ -988,6 +976,7 @@ impl<T: Clone> Clone for (T,) {\n // Fake impl that's only really used for docs.\n #[cfg(doc)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[doc(tuple_varadic)]\n /// This trait is implemented on arbitrary-length tuples.\n impl<T: Copy> Copy for (T,) {\n     // empty"}, {"sha": "9ddefc651baab7257478512af07daaf5fdf00757", "filename": "library/core/src/tuple.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6950f144cf83d10bc4a304b48488f9f5368cfaae/library%2Fcore%2Fsrc%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6950f144cf83d10bc4a304b48488f9f5368cfaae/library%2Fcore%2Fsrc%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftuple.rs?ref=6950f144cf83d10bc4a304b48488f9f5368cfaae", "patch": "@@ -105,6 +105,7 @@ macro_rules! tuple_impls {\n \n macro_rules! maybe_tuple_doc {\n     ($a:ident @ #[$meta:meta] $item:item) => {\n+        #[cfg_attr(not(bootstrap), doc(tuple_varadic))]\n         #[doc = \"This trait is implemented for tuples up to twelve items long.\"]\n         #[$meta]\n         $item"}, {"sha": "26f9528dd22ee047ddc558df119ad233c4973b3e", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6950f144cf83d10bc4a304b48488f9f5368cfaae/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6950f144cf83d10bc4a304b48488f9f5368cfaae/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=6950f144cf83d10bc4a304b48488f9f5368cfaae", "patch": "@@ -916,24 +916,11 @@ mod prim_str {}\n ///\n /// # Trait implementations\n ///\n-/// If every type inside a tuple implements one of the following traits, then a\n-/// tuple itself also implements it.\n-///\n-/// * [`Clone`]\n-/// * [`Copy`]\n-/// * [`PartialEq`]\n-/// * [`Eq`]\n-/// * [`PartialOrd`]\n-/// * [`Ord`]\n-/// * [`Debug`]\n-/// * [`Default`]\n-/// * [`Hash`]\n-///\n-/// [`Debug`]: fmt::Debug\n-/// [`Hash`]: hash::Hash\n-///\n-/// Due to a temporary restriction in Rust's type system, these traits are only\n-/// implemented on tuples of arity 12 or less. In the future, this may change.\n+/// In this documentation the shorthand `(T, ...)` is used to represent all\n+/// tuples up to length twelve. When that is used, any trait bounds expressed\n+/// on `T` applies to each field of the tuple independently. Note that this is\n+/// a convenience notation to avoid repetitive documentation, not valid\n+/// Rust syntax.\n ///\n /// # Examples\n ///\n@@ -978,6 +965,7 @@ impl<T, U> (T, U) {}\n // Fake impl that's only really used for docs.\n #[cfg(doc)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[doc(tuple_varadic)]\n /// This trait is implemented on arbitrary-length tuples.\n impl<T: Clone> Clone for (T,) {\n     fn clone(&self) -> Self {\n@@ -988,6 +976,7 @@ impl<T: Clone> Clone for (T,) {\n // Fake impl that's only really used for docs.\n #[cfg(doc)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[doc(tuple_varadic)]\n /// This trait is implemented on arbitrary-length tuples.\n impl<T: Copy> Copy for (T,) {\n     // empty"}, {"sha": "d8f6a9c3ff07ca1d840c3fcb6e122ff3849ceb4b", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6950f144cf83d10bc4a304b48488f9f5368cfaae/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6950f144cf83d10bc4a304b48488f9f5368cfaae/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=6950f144cf83d10bc4a304b48488f9f5368cfaae", "patch": "@@ -500,7 +500,11 @@ pub(crate) fn build_impl(\n             for_,\n             items: trait_items,\n             polarity,\n-            kind: ImplKind::Normal,\n+            kind: if utils::has_doc_flag(tcx, did, sym::tuple_varadic) {\n+                ImplKind::TupleVaradic\n+            } else {\n+                ImplKind::Normal\n+            },\n         }),\n         box merged_attrs,\n         cx,"}, {"sha": "b15ef424cb644964874f302b57358cf1ab004bec", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6950f144cf83d10bc4a304b48488f9f5368cfaae/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6950f144cf83d10bc4a304b48488f9f5368cfaae/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=6950f144cf83d10bc4a304b48488f9f5368cfaae", "patch": "@@ -1999,7 +1999,11 @@ fn clean_impl<'tcx>(\n             for_,\n             items,\n             polarity: tcx.impl_polarity(def_id),\n-            kind: ImplKind::Normal,\n+            kind: if utils::has_doc_flag(tcx, def_id.to_def_id(), sym::tuple_varadic) {\n+                ImplKind::TupleVaradic\n+            } else {\n+                ImplKind::Normal\n+            },\n         });\n         Item::from_hir_id_and_parts(hir_id, None, kind, cx)\n     };"}, {"sha": "95c84e68b8336de64b47daf3c581215f8104c0ac", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6950f144cf83d10bc4a304b48488f9f5368cfaae/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6950f144cf83d10bc4a304b48488f9f5368cfaae/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=6950f144cf83d10bc4a304b48488f9f5368cfaae", "patch": "@@ -2394,6 +2394,7 @@ impl Impl {\n pub(crate) enum ImplKind {\n     Normal,\n     Auto,\n+    TupleVaradic,\n     Blanket(Box<Type>),\n }\n \n@@ -2406,6 +2407,10 @@ impl ImplKind {\n         matches!(self, ImplKind::Blanket(_))\n     }\n \n+    pub(crate) fn is_tuple_varadic(&self) -> bool {\n+        matches!(self, ImplKind::TupleVaradic)\n+    }\n+\n     pub(crate) fn as_blanket_ty(&self) -> Option<&Type> {\n         match self {\n             ImplKind::Blanket(ty) => Some(ty),"}, {"sha": "2f433c2313b74a3f89685687a949d7738f586506", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6950f144cf83d10bc4a304b48488f9f5368cfaae/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6950f144cf83d10bc4a304b48488f9f5368cfaae/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=6950f144cf83d10bc4a304b48488f9f5368cfaae", "patch": "@@ -713,6 +713,16 @@ fn primitive_link(\n     prim: clean::PrimitiveType,\n     name: &str,\n     cx: &Context<'_>,\n+) -> fmt::Result {\n+    primitive_link_fragment(f, prim, name, \"\", cx)\n+}\n+\n+fn primitive_link_fragment(\n+    f: &mut fmt::Formatter<'_>,\n+    prim: clean::PrimitiveType,\n+    name: &str,\n+    fragment: &str,\n+    cx: &Context<'_>,\n ) -> fmt::Result {\n     let m = &cx.cache();\n     let mut needs_termination = false;\n@@ -723,7 +733,7 @@ fn primitive_link(\n                 let len = if len == 0 { 0 } else { len - 1 };\n                 write!(\n                     f,\n-                    \"<a class=\\\"primitive\\\" href=\\\"{}primitive.{}.html\\\">\",\n+                    \"<a class=\\\"primitive\\\" href=\\\"{}primitive.{}.html{fragment}\\\">\",\n                     \"../\".repeat(len),\n                     prim.as_sym()\n                 )?;\n@@ -754,7 +764,7 @@ fn primitive_link(\n                 };\n                 if let Some(mut loc) = loc {\n                     loc.push_fmt(format_args!(\"primitive.{}.html\", prim.as_sym()));\n-                    write!(f, \"<a class=\\\"primitive\\\" href=\\\"{}\\\">\", loc.finish())?;\n+                    write!(f, \"<a class=\\\"primitive\\\" href=\\\"{}{fragment}\\\">\", loc.finish())?;\n                     needs_termination = true;\n                 }\n             }\n@@ -1064,7 +1074,11 @@ impl clean::Impl {\n                 write!(f, \" for \")?;\n             }\n \n-            if let Some(ty) = self.kind.as_blanket_ty() {\n+            if let clean::Type::Tuple(types) = &self.for_ &&\n+                let [clean::Type::Generic(name)] = &types[..] &&\n+                (self.kind.is_tuple_varadic() || self.kind.is_auto()) {\n+                primitive_link_fragment(f, PrimitiveType::Tuple, &format!(\"({name}, ...)\"), \"#trait-implementations-1\", cx)?;\n+            } else if let Some(ty) = self.kind.as_blanket_ty() {\n                 fmt_type(ty, f, use_absolute, cx)?;\n             } else {\n                 fmt_type(&self.for_, f, use_absolute, cx)?;"}, {"sha": "4fde63c99d4b962f662b7b535959df45470c7f03", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6950f144cf83d10bc4a304b48488f9f5368cfaae/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6950f144cf83d10bc4a304b48488f9f5368cfaae/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=6950f144cf83d10bc4a304b48488f9f5368cfaae", "patch": "@@ -552,7 +552,7 @@ impl FromWithTcx<clean::Impl> for Impl {\n         let trait_ = trait_.map(|path| clean::Type::Path { path }.into_tcx(tcx));\n         // FIXME: use something like ImplKind in JSON?\n         let (synthetic, blanket_impl) = match kind {\n-            clean::ImplKind::Normal => (false, None),\n+            clean::ImplKind::Normal | clean::ImplKind::TupleVaradic => (false, None),\n             clean::ImplKind::Auto => (true, None),\n             clean::ImplKind::Blanket(ty) => (false, Some(*ty)),\n         };"}, {"sha": "e40a3044b9469d5237a7b5136f22aa664e28771f", "filename": "src/test/ui/feature-gates/feature-gate-rustdoc_internals.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6950f144cf83d10bc4a304b48488f9f5368cfaae/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustdoc_internals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6950f144cf83d10bc4a304b48488f9f5368cfaae/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustdoc_internals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustdoc_internals.rs?ref=6950f144cf83d10bc4a304b48488f9f5368cfaae", "patch": "@@ -2,4 +2,9 @@\n /// wonderful\n mod foo {}\n \n+trait Mine {}\n+\n+#[doc(tuple_varadic)]  //~ ERROR: `#[doc(tuple_varadic)]` is meant for internal use only\n+impl<T> Mine for (T,) {}\n+\n fn main() {}"}, {"sha": "00dab359e73506594c76e09c7a7551032a5f88d4", "filename": "src/test/ui/feature-gates/feature-gate-rustdoc_internals.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6950f144cf83d10bc4a304b48488f9f5368cfaae/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustdoc_internals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6950f144cf83d10bc4a304b48488f9f5368cfaae/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustdoc_internals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustdoc_internals.stderr?ref=6950f144cf83d10bc4a304b48488f9f5368cfaae", "patch": "@@ -7,6 +7,15 @@ LL | #[doc(keyword = \"match\")]\n    = note: see issue #90418 <https://github.com/rust-lang/rust/issues/90418> for more information\n    = help: add `#![feature(rustdoc_internals)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error[E0658]: `#[doc(tuple_varadic)]` is meant for internal use only\n+  --> $DIR/feature-gate-rustdoc_internals.rs:7:1\n+   |\n+LL | #[doc(tuple_varadic)]\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #90418 <https://github.com/rust-lang/rust/issues/90418> for more information\n+   = help: add `#![feature(rustdoc_internals)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}]}