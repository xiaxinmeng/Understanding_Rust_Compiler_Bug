{"sha": "f0beb8c0592a887b31e91df55266a4ebc12320aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwYmViOGMwNTkyYTg4N2IzMWU5MWRmNTUyNjZhNGViYzEyMzIwYWE=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-03-21T11:55:28Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-03-21T11:55:28Z"}, "message": "Switch CoherenceInfo from oldmap", "tree": {"sha": "910fa9a1c1795553e4d4e0d110f169e60a2afe6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/910fa9a1c1795553e4d4e0d110f169e60a2afe6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0beb8c0592a887b31e91df55266a4ebc12320aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0beb8c0592a887b31e91df55266a4ebc12320aa", "html_url": "https://github.com/rust-lang/rust/commit/f0beb8c0592a887b31e91df55266a4ebc12320aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0beb8c0592a887b31e91df55266a4ebc12320aa/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dad5c3029dd6a3e2d40f5b983c5ceab9a79c4287", "url": "https://api.github.com/repos/rust-lang/rust/commits/dad5c3029dd6a3e2d40f5b983c5ceab9a79c4287", "html_url": "https://github.com/rust-lang/rust/commit/dad5c3029dd6a3e2d40f5b983c5ceab9a79c4287"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "4113d99a143e32af1aea824a63e12d475fc67ae5", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0beb8c0592a887b31e91df55266a4ebc12320aa/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0beb8c0592a887b31e91df55266a4ebc12320aa/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=f0beb8c0592a887b31e91df55266a4ebc12320aa", "patch": "@@ -241,7 +241,7 @@ pub fn lookup_vtable(vcx: &VtableContext,\n                     // Nothing found. Continue.\n                 }\n                 Some(implementations) => {\n-                    let implementations: &mut ~[@Impl] = implementations;\n+                    let implementations: &mut ~[@Impl] = *implementations;\n                     // implementations is the list of all impls in scope for\n                     // trait_ty. (Usually, there's just one.)\n                     for uint::range(0, implementations.len()) |i| {"}, {"sha": "a9d00eb985b310639c2ac92210b0c65f24ea6aa3", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f0beb8c0592a887b31e91df55266a4ebc12320aa/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0beb8c0592a887b31e91df55266a4ebc12320aa/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=f0beb8c0592a887b31e91df55266a4ebc12320aa", "patch": "@@ -56,7 +56,7 @@ use syntax::visit::{visit_mod};\n use util::ppaux::ty_to_str;\n \n use core::result::Ok;\n-use core::hashmap::linear::LinearSet;\n+use core::hashmap::linear::{LinearMap, LinearSet};\n use core::uint;\n use std::oldmap::HashMap;\n \n@@ -142,18 +142,17 @@ pub fn method_to_MethodInfo(ast_method: @method) -> @MethodInfo {\n pub struct CoherenceInfo {\n     // Contains implementations of methods that are inherent to a type.\n     // Methods in these implementations don't need to be exported.\n-    inherent_methods: HashMap<def_id,@mut ~[@Impl]>,\n+    inherent_methods: @mut LinearMap<def_id, @mut ~[@Impl]>,\n \n     // Contains implementations of methods associated with a trait. For these,\n     // the associated trait must be imported at the call site.\n-    extension_methods: HashMap<def_id,@mut ~[@Impl]>,\n-\n+    extension_methods: @mut LinearMap<def_id, @mut ~[@Impl]>,\n }\n \n pub fn CoherenceInfo() -> CoherenceInfo {\n     CoherenceInfo {\n-        inherent_methods: HashMap(),\n-        extension_methods: HashMap(),\n+        inherent_methods: @mut LinearMap::new(),\n+        extension_methods: @mut LinearMap::new(),\n     }\n }\n \n@@ -380,7 +379,7 @@ pub impl CoherenceChecker {\n                     .insert(base_def_id, implementation_list);\n             }\n             Some(existing_implementation_list) => {\n-                implementation_list = existing_implementation_list;\n+                implementation_list = *existing_implementation_list;\n             }\n         }\n \n@@ -397,7 +396,7 @@ pub impl CoherenceChecker {\n                     .insert(trait_id, implementation_list);\n             }\n             Some(existing_implementation_list) => {\n-                implementation_list = existing_implementation_list;\n+                implementation_list = *existing_implementation_list;\n             }\n         }\n \n@@ -472,7 +471,7 @@ pub impl CoherenceChecker {\n \n         match extension_methods.find(&trait_def_id) {\n             Some(impls) => {\n-                let impls: &mut ~[@Impl] = impls;\n+                let impls: &mut ~[@Impl] = *impls;\n                 for uint::range(0, impls.len()) |i| {\n                     f(impls[i]);\n                 }"}]}