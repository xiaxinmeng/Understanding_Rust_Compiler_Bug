{"sha": "42e757192d9a4855e15f3244864fe305cd88359b", "node_id": "C_kwDOAAsO6NoAKDQyZTc1NzE5MmQ5YTQ4NTVlMTVmMzI0NDg2NGZlMzA1Y2Q4ODM1OWI", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2023-05-30T12:00:10Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2023-05-30T12:00:10Z"}, "message": "Bump to latest beta compiler", "tree": {"sha": "db3368d7c8165a4ce590e61ef44b58d96a547e1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db3368d7c8165a4ce590e61ef44b58d96a547e1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42e757192d9a4855e15f3244864fe305cd88359b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42e757192d9a4855e15f3244864fe305cd88359b", "html_url": "https://github.com/rust-lang/rust/commit/42e757192d9a4855e15f3244864fe305cd88359b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42e757192d9a4855e15f3244864fe305cd88359b/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f9b394c8a24803e57ba892fa00e539742ebafc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f9b394c8a24803e57ba892fa00e539742ebafc0", "html_url": "https://github.com/rust-lang/rust/commit/4f9b394c8a24803e57ba892fa00e539742ebafc0"}], "stats": {"total": 896, "additions": 418, "deletions": 478}, "files": [{"sha": "8c4f6a73d7fea3edf07dd1775f062f7b14aca16b", "filename": "library/alloc/src/alloc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42e757192d9a4855e15f3244864fe305cd88359b/library%2Falloc%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e757192d9a4855e15f3244864fe305cd88359b/library%2Falloc%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Falloc.rs?ref=42e757192d9a4855e15f3244864fe305cd88359b", "patch": "@@ -38,7 +38,6 @@ extern \"Rust\" {\n     #[rustc_nounwind]\n     fn __rust_alloc_zeroed(size: usize, align: usize) -> *mut u8;\n \n-    #[cfg(not(bootstrap))]\n     static __rust_no_alloc_shim_is_unstable: u8;\n }\n \n@@ -96,7 +95,6 @@ pub unsafe fn alloc(layout: Layout) -> *mut u8 {\n     unsafe {\n         // Make sure we don't accidentally allow omitting the allocator shim in\n         // stable code until it is actually stabilized.\n-        #[cfg(not(bootstrap))]\n         core::ptr::read_volatile(&__rust_no_alloc_shim_is_unstable);\n \n         __rust_alloc(layout.size(), layout.align())"}, {"sha": "50c7516b7fe8dd5464724d5567706b21b17b45a6", "filename": "library/core/src/ffi/c_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42e757192d9a4855e15f3244864fe305cd88359b/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e757192d9a4855e15f3244864fe305cd88359b/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs?ref=42e757192d9a4855e15f3244864fe305cd88359b", "patch": "@@ -81,7 +81,7 @@ use crate::str;\n #[derive(Hash)]\n #[stable(feature = \"core_c_str\", since = \"1.64.0\")]\n #[rustc_has_incoherent_inherent_impls]\n-#[cfg_attr(not(bootstrap), lang = \"CStr\")]\n+#[lang = \"CStr\"]\n // FIXME:\n // `fn from` in `impl From<&CStr> for Box<CStr>` current implementation relies\n // on `CStr` being layout-compatible with `[u8]`."}, {"sha": "86ea154a8868ea730b6962d1fa7e1df6fbd06fa9", "filename": "library/core/src/ffi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42e757192d9a4855e15f3244864fe305cd88359b/library%2Fcore%2Fsrc%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e757192d9a4855e15f3244864fe305cd88359b/library%2Fcore%2Fsrc%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi%2Fmod.rs?ref=42e757192d9a4855e15f3244864fe305cd88359b", "patch": "@@ -202,7 +202,7 @@ mod c_long_definition {\n //     would be uninhabited and at least dereferencing such pointers would\n //     be UB.\n #[doc = include_str!(\"c_void.md\")]\n-#[cfg_attr(not(bootstrap), lang = \"c_void\")]\n+#[lang = \"c_void\"]\n #[cfg_attr(not(doc), repr(u8))] // work around https://github.com/rust-lang/rust/issues/90435\n #[stable(feature = \"core_c_void\", since = \"1.30.0\")]\n pub enum c_void {"}, {"sha": "6dca1fe1e69615600d11788dc8ab382411155378", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/42e757192d9a4855e15f3244864fe305cd88359b/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e757192d9a4855e15f3244864fe305cd88359b/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=42e757192d9a4855e15f3244864fe305cd88359b", "patch": "@@ -1385,7 +1385,6 @@ extern \"rust-intrinsic\" {\n     ///\n     /// This is not expected to ever be exposed directly to users, rather it\n     /// may eventually be exposed through some more-constrained API.\n-    #[cfg(not(bootstrap))]\n     #[rustc_const_stable(feature = \"const_transmute\", since = \"1.56.0\")]\n     #[rustc_nounwind]\n     pub fn transmute_unchecked<Src, Dst>(src: Src) -> Dst;\n@@ -1425,19 +1424,11 @@ extern \"rust-intrinsic\" {\n     /// returned value will result in undefined behavior.\n     ///\n     /// The stabilized version of this intrinsic is [`pointer::offset`].\n-    #[cfg(not(bootstrap))]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     #[rustc_nounwind]\n     pub fn offset<Ptr, Delta>(dst: Ptr, offset: Delta) -> Ptr;\n \n-    /// The bootstrap version of this is more restricted.\n-    #[cfg(bootstrap)]\n-    #[must_use = \"returns a new pointer rather than modifying its argument\"]\n-    #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n-    #[rustc_nounwind]\n-    pub fn offset<T>(dst: *const T, offset: isize) -> *const T;\n-\n     /// Calculates the offset from a pointer, potentially wrapping.\n     ///\n     /// This is implemented as an intrinsic to avoid converting to and from an\n@@ -2270,7 +2261,6 @@ extern \"rust-intrinsic\" {\n     /// This intrinsic can *only* be called where the pointer is a local without\n     /// projections (`write_via_move(ptr, x)`, not `write_via_move(*ptr, x)`) so\n     /// that it trivially obeys runtime-MIR rules about derefs in operands.\n-    #[cfg(not(bootstrap))]\n     #[rustc_const_unstable(feature = \"const_ptr_write\", issue = \"86302\")]\n     #[rustc_nounwind]\n     pub fn write_via_move<T>(ptr: *mut T, value: T);\n@@ -2832,24 +2822,3 @@ pub const unsafe fn write_bytes<T>(dst: *mut T, val: u8, count: usize) {\n         write_bytes(dst, val, count)\n     }\n }\n-\n-/// Polyfill for bootstrap\n-#[cfg(bootstrap)]\n-pub const unsafe fn transmute_unchecked<Src, Dst>(src: Src) -> Dst {\n-    use crate::mem::*;\n-    // SAFETY: It's a transmute -- the caller promised it's fine.\n-    unsafe { transmute_copy(&ManuallyDrop::new(src)) }\n-}\n-\n-/// Polyfill for bootstrap\n-#[cfg(bootstrap)]\n-pub const unsafe fn write_via_move<T>(ptr: *mut T, value: T) {\n-    use crate::mem::*;\n-    // SAFETY: the caller must guarantee that `dst` is valid for writes.\n-    // `dst` cannot overlap `src` because the caller has mutable access\n-    // to `dst` while `src` is owned by this function.\n-    unsafe {\n-        copy_nonoverlapping::<T>(&value, ptr, 1);\n-        forget(value);\n-    }\n-}"}, {"sha": "2d2d5d491758874f127817bf2c1d64f5a3bb1751", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/42e757192d9a4855e15f3244864fe305cd88359b/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e757192d9a4855e15f3244864fe305cd88359b/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=42e757192d9a4855e15f3244864fe305cd88359b", "patch": "@@ -971,15 +971,14 @@ pub trait Tuple {}\n pub trait PointerLike {}\n \n /// A marker for types which can be used as types of `const` generic parameters.\n-#[cfg_attr(not(bootstrap), lang = \"const_param_ty\")]\n+#[lang = \"const_param_ty\"]\n #[unstable(feature = \"adt_const_params\", issue = \"95174\")]\n #[rustc_on_unimplemented(message = \"`{Self}` can't be used as a const parameter type\")]\n pub trait ConstParamTy: StructuralEq {}\n \n /// Derive macro generating an impl of the trait `ConstParamTy`.\n #[rustc_builtin_macro]\n #[unstable(feature = \"adt_const_params\", issue = \"95174\")]\n-#[cfg(not(bootstrap))]\n pub macro ConstParamTy($item:item) {\n     /* compiler built-in */\n }"}, {"sha": "39c9a04eea92b36e3bbe6fcfce4554f71188023e", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/42e757192d9a4855e15f3244864fe305cd88359b/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e757192d9a4855e15f3244864fe305cd88359b/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=42e757192d9a4855e15f3244864fe305cd88359b", "patch": "@@ -968,7 +968,7 @@ pub const fn replace<T>(dest: &mut T, src: T) -> T {\n /// Integers and other types implementing [`Copy`] are unaffected by `drop`.\n ///\n /// ```\n-/// # #![cfg_attr(not(bootstrap), allow(dropping_copy_types))]\n+/// # #![allow(dropping_copy_types)]\n /// #[derive(Copy, Clone)]\n /// struct Foo(u8);\n ///\n@@ -1316,7 +1316,6 @@ impl<T> SizedTypeProperties for T {}\n ///\n /// assert_eq!(mem::offset_of!(NestedA, b.0), 0);\n /// ```\n-#[cfg(not(bootstrap))]\n #[unstable(feature = \"offset_of\", issue = \"106655\")]\n #[allow_internal_unstable(builtin_syntax)]\n pub macro offset_of($Container:ty, $($fields:tt).+ $(,)?) {"}, {"sha": "c579c3672a72d17fc0e69d82795c6a0b658ca1d3", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/42e757192d9a4855e15f3244864fe305cd88359b/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e757192d9a4855e15f3244864fe305cd88359b/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=42e757192d9a4855e15f3244864fe305cd88359b", "patch": "@@ -916,16 +916,8 @@ impl<T: ?Sized> *const T {\n     where\n         T: Sized,\n     {\n-        #[cfg(bootstrap)]\n         // SAFETY: the caller must uphold the safety contract for `offset`.\n-        unsafe {\n-            self.offset(count as isize)\n-        }\n-        #[cfg(not(bootstrap))]\n-        // SAFETY: the caller must uphold the safety contract for `offset`.\n-        unsafe {\n-            intrinsics::offset(self, count)\n-        }\n+        unsafe { intrinsics::offset(self, count) }\n     }\n \n     /// Calculates the offset from a pointer in bytes (convenience for `.byte_offset(count as isize)`)."}, {"sha": "c6f43857887c96e02e71bc25caea546a07a6673d", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/42e757192d9a4855e15f3244864fe305cd88359b/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e757192d9a4855e15f3244864fe305cd88359b/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=42e757192d9a4855e15f3244864fe305cd88359b", "patch": "@@ -473,20 +473,10 @@ impl<T: ?Sized> *mut T {\n     where\n         T: Sized,\n     {\n-        #[cfg(bootstrap)]\n         // SAFETY: the caller must uphold the safety contract for `offset`.\n         // The obtained pointer is valid for writes since the caller must\n         // guarantee that it points to the same allocated object as `self`.\n-        unsafe {\n-            intrinsics::offset(self, count) as *mut T\n-        }\n-        #[cfg(not(bootstrap))]\n-        // SAFETY: the caller must uphold the safety contract for `offset`.\n-        // The obtained pointer is valid for writes since the caller must\n-        // guarantee that it points to the same allocated object as `self`.\n-        unsafe {\n-            intrinsics::offset(self, count)\n-        }\n+        unsafe { intrinsics::offset(self, count) }\n     }\n \n     /// Calculates the offset from a pointer in bytes.\n@@ -1026,16 +1016,8 @@ impl<T: ?Sized> *mut T {\n     where\n         T: Sized,\n     {\n-        #[cfg(bootstrap)]\n-        // SAFETY: the caller must uphold the safety contract for `offset`.\n-        unsafe {\n-            self.offset(count as isize)\n-        }\n-        #[cfg(not(bootstrap))]\n         // SAFETY: the caller must uphold the safety contract for `offset`.\n-        unsafe {\n-            intrinsics::offset(self, count)\n-        }\n+        unsafe { intrinsics::offset(self, count) }\n     }\n \n     /// Calculates the offset from a pointer in bytes (convenience for `.byte_offset(count as isize)`)."}, {"sha": "64193e115589059a510916ad142c5e7a11d0506f", "filename": "library/core/tests/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42e757192d9a4855e15f3244864fe305cd88359b/library%2Fcore%2Ftests%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e757192d9a4855e15f3244864fe305cd88359b/library%2Fcore%2Ftests%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fclone.rs?ref=42e757192d9a4855e15f3244864fe305cd88359b", "patch": "@@ -1,5 +1,5 @@\n #[test]\n-#[cfg_attr(not(bootstrap), allow(suspicious_double_ref_op))]\n+#[allow(suspicious_double_ref_op)]\n fn test_borrowed_clone() {\n     let x = 5;\n     let y: &i32 = &x;"}, {"sha": "3e6d31fcd2fb81e1f871f9b1cf4ec52984a14ec4", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42e757192d9a4855e15f3244864fe305cd88359b/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e757192d9a4855e15f3244864fe305cd88359b/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=42e757192d9a4855e15f3244864fe305cd88359b", "patch": "@@ -109,7 +109,7 @@\n #![feature(utf8_chunks)]\n #![feature(is_ascii_octdigit)]\n #![feature(get_many_mut)]\n-#![cfg_attr(not(bootstrap), feature(offset_of))]\n+#![feature(offset_of)]\n #![deny(unsafe_op_in_unsafe_fn)]\n #![deny(fuzzy_provenance_casts)]\n "}, {"sha": "5c2e18745ea21d7719bc61b4993613944c31d5e6", "filename": "library/core/tests/mem.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/42e757192d9a4855e15f3244864fe305cd88359b/library%2Fcore%2Ftests%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e757192d9a4855e15f3244864fe305cd88359b/library%2Fcore%2Ftests%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fmem.rs?ref=42e757192d9a4855e15f3244864fe305cd88359b", "patch": "@@ -366,7 +366,6 @@ fn const_maybe_uninit() {\n }\n \n #[test]\n-#[cfg(not(bootstrap))]\n fn offset_of() {\n     #[repr(C)]\n     struct Foo {\n@@ -391,7 +390,7 @@ fn offset_of() {\n     struct Generic<T> {\n         x: u8,\n         y: u32,\n-        z: T\n+        z: T,\n     }\n \n     trait Trait {}\n@@ -409,7 +408,6 @@ fn offset_of() {\n }\n \n #[test]\n-#[cfg(not(bootstrap))]\n fn offset_of_union() {\n     #[repr(C)]\n     union Foo {\n@@ -429,7 +427,6 @@ fn offset_of_union() {\n }\n \n #[test]\n-#[cfg(not(bootstrap))]\n fn offset_of_dst() {\n     #[repr(C)]\n     struct Alpha {\n@@ -469,7 +466,6 @@ fn offset_of_dst() {\n }\n \n #[test]\n-#[cfg(not(bootstrap))]\n fn offset_of_packed() {\n     #[repr(C, packed)]\n     struct Foo {\n@@ -482,7 +478,6 @@ fn offset_of_packed() {\n }\n \n #[test]\n-#[cfg(not(bootstrap))]\n fn offset_of_projection() {\n     #[repr(C)]\n     struct Foo {\n@@ -503,7 +498,6 @@ fn offset_of_projection() {\n }\n \n #[test]\n-#[cfg(not(bootstrap))]\n fn offset_of_alias() {\n     #[repr(C)]\n     struct Foo {\n@@ -518,7 +512,6 @@ fn offset_of_alias() {\n }\n \n #[test]\n-#[cfg(not(bootstrap))]\n fn const_offset_of() {\n     #[repr(C)]\n     struct Foo {\n@@ -534,7 +527,6 @@ fn const_offset_of() {\n }\n \n #[test]\n-#[cfg(not(bootstrap))]\n fn offset_of_without_const_promotion() {\n     #[repr(C)]\n     struct Foo<SuppressConstPromotion> {\n@@ -555,7 +547,6 @@ fn offset_of_without_const_promotion() {\n }\n \n #[test]\n-#[cfg(not(bootstrap))]\n fn offset_of_addr() {\n     #[repr(C)]\n     struct Foo {"}, {"sha": "89ad4e0a649c1e56dfdbe8d91eaf4c456cf38915", "filename": "src/stage0.json", "status": "modified", "additions": 408, "deletions": 398, "changes": 806, "blob_url": "https://github.com/rust-lang/rust/blob/42e757192d9a4855e15f3244864fe305cd88359b/src%2Fstage0.json", "raw_url": "https://github.com/rust-lang/rust/raw/42e757192d9a4855e15f3244864fe305cd88359b/src%2Fstage0.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.json?ref=42e757192d9a4855e15f3244864fe305cd88359b"}]}