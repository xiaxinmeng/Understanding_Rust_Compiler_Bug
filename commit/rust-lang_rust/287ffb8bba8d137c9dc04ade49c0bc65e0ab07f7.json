{"sha": "287ffb8bba8d137c9dc04ade49c0bc65e0ab07f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4N2ZmYjhiYmE4ZDEzN2M5ZGMwNGFkZTQ5YzBiYzY1ZTBhYjA3Zjc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-04-19T06:46:09Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-04-19T06:46:40Z"}, "message": "test another version of 'creating a shared ref must not leak the Unique'", "tree": {"sha": "430ca3776cf222c9e4ab4bed982cf23a53fb1ad3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/430ca3776cf222c9e4ab4bed982cf23a53fb1ad3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/287ffb8bba8d137c9dc04ade49c0bc65e0ab07f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/287ffb8bba8d137c9dc04ade49c0bc65e0ab07f7", "html_url": "https://github.com/rust-lang/rust/commit/287ffb8bba8d137c9dc04ade49c0bc65e0ab07f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/287ffb8bba8d137c9dc04ade49c0bc65e0ab07f7/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a5e54127243f4ff9f847e91356c3a73f18126f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a5e54127243f4ff9f847e91356c3a73f18126f2", "html_url": "https://github.com/rust-lang/rust/commit/0a5e54127243f4ff9f847e91356c3a73f18126f2"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "25d0878c045531b5561154a98b418d6acbde3a97", "filename": "tests/compile-fail/stacked_borrows/illegal_read7.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/287ffb8bba8d137c9dc04ade49c0bc65e0ab07f7/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/287ffb8bba8d137c9dc04ade49c0bc65e0ab07f7/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read7.rs?ref=287ffb8bba8d137c9dc04ade49c0bc65e0ab07f7", "patch": "@@ -0,0 +1,20 @@\n+// Creating a shared reference does not leak the data to raw pointers,\n+// not even when interior mutability is involved.\n+\n+use std::cell::Cell;\n+use std::ptr;\n+\n+fn main() { unsafe {\n+    let x = &mut Cell::new(0);\n+    let raw = x as *mut Cell<i32>;\n+    let x = &mut *raw;\n+    let _shr = &*x;\n+    // The state here is interesting because the top of the stack is [Unique, SharedReadWrite],\n+    // just like if we had done `x as *mut _`.\n+    // If we said that reading from a lower item is fine if the top item is `SharedReadWrite`\n+    // (one way to maybe preserve a stack discipline), then we could now read from `raw`\n+    // without invalidating `x`.  That would be bad!  It would mean that creating `shr`\n+    // leaked `x` to `raw`.\n+    let _val = ptr::read(raw);\n+    let _val = *x.get_mut(); //~ ERROR borrow stack\n+} }"}]}