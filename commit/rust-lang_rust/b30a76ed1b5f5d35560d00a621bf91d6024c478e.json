{"sha": "b30a76ed1b5f5d35560d00a621bf91d6024c478e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzMGE3NmVkMWI1ZjVkMzU1NjBkMDBhNjIxYmY5MWQ2MDI0YzQ3OGU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-11-08T22:25:41Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-11-09T05:14:09Z"}, "message": "correct calling convention for x86_64", "tree": {"sha": "4d579053bc54119090560172ca775dcbd3b03b4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d579053bc54119090560172ca775dcbd3b03b4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b30a76ed1b5f5d35560d00a621bf91d6024c478e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b30a76ed1b5f5d35560d00a621bf91d6024c478e", "html_url": "https://github.com/rust-lang/rust/commit/b30a76ed1b5f5d35560d00a621bf91d6024c478e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b30a76ed1b5f5d35560d00a621bf91d6024c478e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8c0c2b871a9a0c39a1294327490700104cd0918", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8c0c2b871a9a0c39a1294327490700104cd0918", "html_url": "https://github.com/rust-lang/rust/commit/a8c0c2b871a9a0c39a1294327490700104cd0918"}], "stats": {"total": 173, "additions": 107, "deletions": 66}, "files": [{"sha": "5632df932f37d9f23be40955752adb4e21db1489", "filename": "src/rt/arch/x86_64/_context.S", "status": "modified", "additions": 46, "deletions": 30, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/b30a76ed1b5f5d35560d00a621bf91d6024c478e/src%2Frt%2Farch%2Fx86_64%2F_context.S", "raw_url": "https://github.com/rust-lang/rust/raw/b30a76ed1b5f5d35560d00a621bf91d6024c478e/src%2Frt%2Farch%2Fx86_64%2F_context.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2F_context.S?ref=b30a76ed1b5f5d35560d00a621bf91d6024c478e", "patch": "@@ -1,4 +1,6 @@\n-\t.text\n+#include \"x86_64_regs.h\"\n+\n+        .text\n \n /*\n According to ABI documentation found at\n@@ -46,54 +48,68 @@ First four arguments:\n .globl swap_registers\n swap_registers:\n         // n.b. when we enter, the return address is at the top of\n-        // the stack (i.e., 0(%RSP)).  We\n+        // the stack (i.e., 0(%RSP)) and the argument is in\n+        // RUSTRT_ARG0_S.  We\n         // simply save all NV registers into oregs.\n         // We then restore all NV registers from regs.  This restores\n         // the old stack pointer, which should include the proper\n         // return address. We can therefore just return normally to\n         // jump back into the old code.\n+\n+#       if defined(RUSTRT_ARG0_S)\n+        mov RUSTRT_ARG0_S, %rdi\n+        mov RUSTRT_ARG1_S, %rsi\n+#       endif\n         \n         // Save instruction pointer:\n         pop %rax\n-        mov %rax, 56(%rdi)\n+        mov %rax, (RUSTRT_IP*8)(%rdi)\n \n         // Save non-volatile integer registers:\n         //   (including RSP)\n-        mov %rbx,   0(%rdi)\n-        mov %rsp,   8(%rdi)\n-        mov %rbp,  16(%rdi)\n-        mov %r12,  24(%rdi)\n-        mov %r13,  32(%rdi)\n-        mov %r14,  40(%rdi)\n-        mov %r15,  48(%rdi)\n+        mov %rbx, (RUSTRT_RBX*8)(%rdi)\n+        mov %rsp, (RUSTRT_RSP*8)(%rdi)\n+        mov %rbp, (RUSTRT_RBP*8)(%rdi)\n+        mov %r12, (RUSTRT_R12*8)(%rdi)\n+        mov %r13, (RUSTRT_R13*8)(%rdi)\n+        mov %r14, (RUSTRT_R14*8)(%rdi)\n+        mov %r15, (RUSTRT_R15*8)(%rdi)\n+\n+        // Save relevant argument registers:\n+        mov %rcx, (RUSTRT_RCX*8)(%rdi)\n+        mov %rdi, (RUSTRT_RDI*8)(%rdi)\n \n         // Save non-volatile XMM registers:\n-        movapd %xmm0,  64(%rdi)\n-        movapd %xmm1,  80(%rdi)\n-        movapd %xmm2,  96(%rdi)\n-        movapd %xmm3, 112(%rdi)\n-        movapd %xmm4, 128(%rdi)\n-        movapd %xmm5, 144(%rdi)\n+        movapd %xmm0, (RUSTRT_XMM0*8)(%rdi)\n+        movapd %xmm1, (RUSTRT_XMM1*8)(%rdi)\n+        movapd %xmm2, (RUSTRT_XMM2*8)(%rdi)\n+        movapd %xmm3, (RUSTRT_XMM3*8)(%rdi)\n+        movapd %xmm4, (RUSTRT_XMM4*8)(%rdi)\n+        movapd %xmm5, (RUSTRT_XMM5*8)(%rdi)\n \n         // Restore non-volatile integer registers:\n         //   (including RSP)\n-        mov  0(%rsi), %rbx\n-        mov  8(%rsi), %rsp\n-        mov 16(%rsi), %rbp\n-        mov 24(%rsi), %r12\n-        mov 32(%rsi), %r13\n-        mov 40(%rsi), %r14\n-        mov 48(%rsi), %r15\n+        mov (RUSTRT_RBX*8)(%rsi), %rbx\n+        mov (RUSTRT_RSP*8)(%rsi), %rsp\n+        mov (RUSTRT_RBP*8)(%rsi), %rbp\n+        mov (RUSTRT_R12*8)(%rsi), %r12\n+        mov (RUSTRT_R13*8)(%rsi), %r13\n+        mov (RUSTRT_R14*8)(%rsi), %r14\n+        mov (RUSTRT_R15*8)(%rsi), %r15\n+\n+        // Restore relevant argument registers:\n+        mov (RUSTRT_RCX*8)(%rdi), %rcx\n+        mov (RUSTRT_RDI*8)(%rdi), %rdi\n \n         // Restore non-volatile XMM registers:\n-        movapd  64(%rsi), %xmm0\n-        movapd  80(%rsi), %xmm1\n-        movapd  96(%rsi), %xmm2\n-        movapd 112(%rsi), %xmm3\n-        movapd 128(%rsi), %xmm4\n-        movapd 144(%rsi), %xmm5\n+        movapd (RUSTRT_XMM0*8)(%rsi), %xmm0\n+        movapd (RUSTRT_XMM1*8)(%rsi), %xmm1\n+        movapd (RUSTRT_XMM2*8)(%rsi), %xmm2\n+        movapd (RUSTRT_XMM3*8)(%rsi), %xmm3\n+        movapd (RUSTRT_XMM4*8)(%rsi), %xmm4\n+        movapd (RUSTRT_XMM5*8)(%rsi), %xmm5\n \n         // Jump to the instruction pointer\n         // found in regs:\n-        jmp *56(%rsi)\n+        jmp *(RUSTRT_IP*8)(%rsi)\n "}, {"sha": "09577dbd15143d3eb394d0a87724d0cd04e3c5aa", "filename": "src/rt/arch/x86_64/context.cpp", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b30a76ed1b5f5d35560d00a621bf91d6024c478e/src%2Frt%2Farch%2Fx86_64%2Fcontext.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b30a76ed1b5f5d35560d00a621bf91d6024c478e/src%2Frt%2Farch%2Fx86_64%2Fcontext.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2Fcontext.cpp?ref=b30a76ed1b5f5d35560d00a621bf91d6024c478e", "patch": "@@ -25,14 +25,11 @@ void context::call(void *f, void *arg, void *stack) {\n   // given function.\n   swap(*this);\n \n-  // set up the trampoline frame\n-  uint64_t *sp = (uint64_t *)stack;\n+  // set up the stack\n+  uint32_t *sp = (uint32_t *)stack;\n+  sp = align_down(sp);\n \n-  // Shift the stack pointer so the alignment works out right.\n-  sp = align_down(sp) - 3;\n-  *--sp = (uint64_t)arg;\n-  *--sp = 0xdeadbeef;\n-\n-  regs.regs[RSP] = (uint64_t)sp;\n-  regs.ip = (uint64_t)f;\n+  regs.data[RUSTRT_ARG0] = (uint64_t)arg;\n+  regs.data[RUSTRT_RSP] = (uint64_t)sp;\n+  regs.data[RUSTRT_IP] = (uint64_t)f;\n }"}, {"sha": "5d764cfdb0ae108e35fc5243238df6e1ade17e5f", "filename": "src/rt/arch/x86_64/context.h", "status": "modified", "additions": 26, "deletions": 27, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/b30a76ed1b5f5d35560d00a621bf91d6024c478e/src%2Frt%2Farch%2Fx86_64%2Fcontext.h", "raw_url": "https://github.com/rust-lang/rust/raw/b30a76ed1b5f5d35560d00a621bf91d6024c478e/src%2Frt%2Farch%2Fx86_64%2Fcontext.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2Fcontext.h?ref=b30a76ed1b5f5d35560d00a621bf91d6024c478e", "patch": "@@ -20,42 +20,41 @@ T align_down(T sp)\n     return (T)((uint64_t)sp & ~(16 - 1));\n }\n \n+// The struct in which we store the saved data.  This is mostly the\n+// volatile registers and instruction pointer, but it also includes\n+// RCX/RDI which are used to pass arguments.  The indices for each\n+// register are found in <x86_64_regs.h>:\n+#include \"x86_64_regs.h\"\n struct registers_t {\n-    uint64_t regs[7];  // Space for the volatile regs: rbx, rsp, rbp, r12:r15\n-    uint64_t ip;\n-\n-    // n.b.: These must be 16-byte aligned or movapd is unhappy.\n-    __m128 xmms[6]; // Space for the volatile regs: xmm0:xmm5\n+    uint64_t data[RUSTRT_MAX];\n };\n \n class context {\n public:\n-  static const int RSP = 1;\n-\n-  registers_t regs;\n-\n-  context();\n-\n-  context *next;\n-\n-  void swap(context &out);\n-  void call(void *f, void *arg, void *sp);\n-  void call(void *f, void *sp);\n-\n-  // Note that this doesn't actually adjust esp. Instead, we adjust esp when\n-  // we actually do the call. This is needed for exception safety -- if the\n-  // function being called causes the task to fail, then we have to avoid\n-  // leaking space on the C stack.\n-  inline void *alloc_stack(size_t nbytes) {\n-    uint32_t bot = regs.regs[RSP];\n-    uint32_t top = align_down(bot - nbytes);\n+    registers_t regs;\n+    \n+    context();\n+    \n+    context *next;\n+    \n+    void swap(context &out);\n+    void call(void *f, void *arg, void *sp);\n+    void call(void *f, void *sp);\n+    \n+    // Note that this doesn't actually adjust esp. Instead, we adjust esp when\n+    // we actually do the call. This is needed for exception safety -- if the\n+    // function being called causes the task to fail, then we have to avoid\n+    // leaking space on the C stack.\n+    inline void *alloc_stack(size_t nbytes) {\n+        uint32_t bot = regs.data[RUSTRT_RSP];\n+        uint32_t top = align_down(bot - nbytes);\n \n #ifdef HAVE_VALGRIND\n-    (void)VALGRIND_MAKE_MEM_UNDEFINED(top - 4, bot - top + 4);\n+        (void)VALGRIND_MAKE_MEM_UNDEFINED(top - 4, bot - top + 4);\n #endif\n \n-    return reinterpret_cast<void *>(top);\n-  }\n+        return reinterpret_cast<void *>(top);\n+    }\n };\n \n #endif"}, {"sha": "084ab03fdc4ac6d68efc4fda91a878a44a466d59", "filename": "src/rt/arch/x86_64/x86_64_regs.h", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b30a76ed1b5f5d35560d00a621bf91d6024c478e/src%2Frt%2Farch%2Fx86_64%2Fx86_64_regs.h", "raw_url": "https://github.com/rust-lang/rust/raw/b30a76ed1b5f5d35560d00a621bf91d6024c478e/src%2Frt%2Farch%2Fx86_64%2Fx86_64_regs.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2Fx86_64_regs.h?ref=b30a76ed1b5f5d35560d00a621bf91d6024c478e", "patch": "@@ -0,0 +1,29 @@\n+#define RUSTRT_RBX  0\n+#define RUSTRT_RSP  1\n+#define RUSTRT_RBP  2\n+#define RUSTRT_RDI  3\n+#define RUSTRT_RCX  4\n+#define RUSTRT_R12  5\n+#define RUSTRT_R13  6\n+#define RUSTRT_R14  7\n+#define RUSTRT_R15  8\n+#define RUSTRT_IP   9\n+#define RUSTRT_XMM0 10\n+#define RUSTRT_XMM1 12\n+#define RUSTRT_XMM2 14\n+#define RUSTRT_XMM3 16\n+#define RUSTRT_XMM4 18\n+#define RUSTRT_XMM5 20\n+#define RUSTRT_MAX  22\n+\n+// ARG0 is the register in which the first argument goes.\n+// Naturally this depends on your operating system.\n+#if defined(__MINGW32__) || defined(_WINDOWS)\n+#   define RUSTRT_ARG0 RUSTRT_RCX  \n+#   define RUSTRT_ARG0_S %rcx\n+#   define RUSTRT_ARG1_S %rdx\n+#else\n+#   define RUSTRT_ARG0 RUSTRT_RDI  \n+#endif\n+\n+"}]}