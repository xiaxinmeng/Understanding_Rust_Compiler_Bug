{"sha": "e17f4fc1d4545f5c17b21805c5145b05495484ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxN2Y0ZmMxZDQ1NDVmNWMxN2IyMTgwNWM1MTQ1YjA1NDk1NDg0ZWU=", "commit": {"author": {"name": "Sean McArthur", "email": "sean.monstar@gmail.com", "date": "2015-03-31T00:56:48Z"}, "committer": {"name": "Sean McArthur", "email": "sean.monstar@gmail.com", "date": "2015-03-31T01:08:58Z"}, "message": "convert: remove FromError, use From<E> instead\n\nThis removes the FromError trait, since it can now be expressed using\nthe new convert::Into trait. All implementations of FromError<E> where\nchanged to From<E>, and `try!` was changed to use From::from instead.\n\nBecause this removes FromError, it is a breaking change, but fixing it\nsimply requires changing the words `FromError` to `From`, and\n`from_error` to `from`.\n\n[breaking-change]", "tree": {"sha": "73738e0f820177de7d6052ad15e01c868d7a24ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73738e0f820177de7d6052ad15e01c868d7a24ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e17f4fc1d4545f5c17b21805c5145b05495484ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e17f4fc1d4545f5c17b21805c5145b05495484ee", "html_url": "https://github.com/rust-lang/rust/commit/e17f4fc1d4545f5c17b21805c5145b05495484ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e17f4fc1d4545f5c17b21805c5145b05495484ee/comments", "author": {"login": "seanmonstar", "id": 51479, "node_id": "MDQ6VXNlcjUxNDc5", "avatar_url": "https://avatars.githubusercontent.com/u/51479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seanmonstar", "html_url": "https://github.com/seanmonstar", "followers_url": "https://api.github.com/users/seanmonstar/followers", "following_url": "https://api.github.com/users/seanmonstar/following{/other_user}", "gists_url": "https://api.github.com/users/seanmonstar/gists{/gist_id}", "starred_url": "https://api.github.com/users/seanmonstar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seanmonstar/subscriptions", "organizations_url": "https://api.github.com/users/seanmonstar/orgs", "repos_url": "https://api.github.com/users/seanmonstar/repos", "events_url": "https://api.github.com/users/seanmonstar/events{/privacy}", "received_events_url": "https://api.github.com/users/seanmonstar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "seanmonstar", "id": 51479, "node_id": "MDQ6VXNlcjUxNDc5", "avatar_url": "https://avatars.githubusercontent.com/u/51479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seanmonstar", "html_url": "https://github.com/seanmonstar", "followers_url": "https://api.github.com/users/seanmonstar/followers", "following_url": "https://api.github.com/users/seanmonstar/following{/other_user}", "gists_url": "https://api.github.com/users/seanmonstar/gists{/gist_id}", "starred_url": "https://api.github.com/users/seanmonstar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seanmonstar/subscriptions", "organizations_url": "https://api.github.com/users/seanmonstar/orgs", "repos_url": "https://api.github.com/users/seanmonstar/repos", "events_url": "https://api.github.com/users/seanmonstar/events{/privacy}", "received_events_url": "https://api.github.com/users/seanmonstar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9de34a84bb300bab1bf0227f577331620cd60511", "url": "https://api.github.com/repos/rust-lang/rust/commits/9de34a84bb300bab1bf0227f577331620cd60511", "html_url": "https://github.com/rust-lang/rust/commit/9de34a84bb300bab1bf0227f577331620cd60511"}], "stats": {"total": 80, "additions": 30, "deletions": 50}, "files": [{"sha": "94a497dfe85f3f04efa965aafeb15b80ebeaf31e", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e17f4fc1d4545f5c17b21805c5145b05495484ee/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17f4fc1d4545f5c17b21805c5145b05495484ee/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=e17f4fc1d4545f5c17b21805c5145b05495484ee", "patch": "@@ -51,7 +51,7 @@ use core::prelude::*;\n use core::any::Any;\n use core::cmp::Ordering;\n use core::default::Default;\n-use core::error::{Error, FromError};\n+use core::error::Error;\n use core::fmt;\n use core::hash::{self, Hash};\n use core::mem;\n@@ -322,8 +322,8 @@ impl<I: DoubleEndedIterator + ?Sized> DoubleEndedIterator for Box<I> {\n impl<I: ExactSizeIterator + ?Sized> ExactSizeIterator for Box<I> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, E: Error + 'a> FromError<E> for Box<Error + 'a> {\n-    fn from_error(err: E) -> Box<Error + 'a> {\n+impl<'a, E: Error + 'a> From<E> for Box<Error + 'a> {\n+    fn from(err: E) -> Box<Error + 'a> {\n         Box::new(err)\n     }\n }"}, {"sha": "3680daa2d5ece50ba7b95060050604f1c74d3e88", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e17f4fc1d4545f5c17b21805c5145b05495484ee/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17f4fc1d4545f5c17b21805c5145b05495484ee/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=e17f4fc1d4545f5c17b21805c5145b05495484ee", "patch": "@@ -99,6 +99,13 @@ impl<'a, T: ?Sized, U: ?Sized> AsMut<U> for &'a mut T where T: AsMut<U> {\n //     }\n // }\n \n+// From itself is always itself\n+impl<T> From<T> for T {\n+    fn from(t: T) -> T {\n+        t\n+    }\n+}\n+\n // From implies Into\n impl<T, U> Into<U> for T where U: From<T> {\n     fn into(self) -> U {"}, {"sha": "73ec19f1a14914fb027e7b43c9c0c8f56f5c8266", "filename": "src/libcore/error.rs", "status": "modified", "additions": 4, "deletions": 31, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e17f4fc1d4545f5c17b21805c5145b05495484ee/src%2Flibcore%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17f4fc1d4545f5c17b21805c5145b05495484ee/src%2Flibcore%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ferror.rs?ref=e17f4fc1d4545f5c17b21805c5145b05495484ee", "patch": "@@ -34,17 +34,6 @@\n //! particular implementation, but also reveal some of its implementation for\n //! debugging via `cause` chains.\n //!\n-//! # The `FromError` trait\n-//!\n-//! `FromError` is a simple trait that expresses conversions between different\n-//! error types. To provide maximum flexibility, it does not require either of\n-//! the types to actually implement the `Error` trait, although this will be the\n-//! common case.\n-//!\n-//! The main use of this trait is in the `try!` macro, which uses it to\n-//! automatically convert a given error to the error specified in a function's\n-//! return type.\n-//!\n //! For example,\n //!\n //! ```\n@@ -59,14 +48,14 @@\n //!     Map(MapError)\n //! }\n //!\n-//! impl FromError<IoError> for MyError {\n-//!     fn from_error(err: IoError) -> MyError {\n+//! impl From<IoError> for MyError {\n+//!     fn from(err: IoError) -> MyError {\n //!         MyError::Io(err)\n //!     }\n //! }\n //!\n-//! impl FromError<MapError> for MyError {\n-//!     fn from_error(err: MapError) -> MyError {\n+//! impl From<MapError> for MyError {\n+//!     fn from(err: MapError) -> MyError {\n //!         MyError::Map(err)\n //!     }\n //! }\n@@ -100,19 +89,3 @@ pub trait Error: Debug + Display {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn cause(&self) -> Option<&Error> { None }\n }\n-\n-/// A trait for types that can be converted from a given error type `E`.\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub trait FromError<E> {\n-    /// Perform the conversion.\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn from_error(err: E) -> Self;\n-}\n-\n-// Any type is convertable from itself\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<E> FromError<E> for E {\n-    fn from_error(err: E) -> E {\n-        err\n-    }\n-}"}, {"sha": "19626aa505620f7261f22d1d3c83a3d51792fc58", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e17f4fc1d4545f5c17b21805c5145b05495484ee/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17f4fc1d4545f5c17b21805c5145b05495484ee/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=e17f4fc1d4545f5c17b21805c5145b05495484ee", "patch": "@@ -156,7 +156,7 @@ macro_rules! debug_assert_eq {\n \n /// Short circuiting evaluation on Err\n ///\n-/// `libstd` contains a more general `try!` macro that uses `FromError`.\n+/// `libstd` contains a more general `try!` macro that uses `From<E>`.\n #[macro_export]\n macro_rules! try {\n     ($e:expr) => ({"}, {"sha": "cd7f66f50c865b07b035916fe761440a84f4917e", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e17f4fc1d4545f5c17b21805c5145b05495484ee/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17f4fc1d4545f5c17b21805c5145b05495484ee/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=e17f4fc1d4545f5c17b21805c5145b05495484ee", "patch": "@@ -365,8 +365,8 @@ impl std::error::Error for EncoderError {\n     fn description(&self) -> &str { \"encoder error\" }\n }\n \n-impl std::error::FromError<fmt::Error> for EncoderError {\n-    fn from_error(err: fmt::Error) -> EncoderError { EncoderError::FmtError(err) }\n+impl From<fmt::Error> for EncoderError {\n+    fn from(err: fmt::Error) -> EncoderError { EncoderError::FmtError(err) }\n }\n \n pub type EncodeResult = Result<(), EncoderError>;"}, {"sha": "f5c7d1d18d5f705f7943a679cfbea4db12781f40", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e17f4fc1d4545f5c17b21805c5145b05495484ee/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17f4fc1d4545f5c17b21805c5145b05495484ee/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=e17f4fc1d4545f5c17b21805c5145b05495484ee", "patch": "@@ -12,7 +12,7 @@\n \n use convert::Into;\n use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};\n-use error::{Error, FromError};\n+use error::Error;\n use fmt;\n use io;\n use iter::Iterator;\n@@ -298,17 +298,17 @@ impl fmt::Display for NulError {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl FromError<NulError> for io::Error {\n-    fn from_error(_: NulError) -> io::Error {\n+impl From<NulError> for io::Error {\n+    fn from(_: NulError) -> io::Error {\n         io::Error::new(io::ErrorKind::InvalidInput,\n                        \"data provided contains a nul byte\", None)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow(deprecated)]\n-impl FromError<NulError> for old_io::IoError {\n-    fn from_error(_: NulError) -> old_io::IoError {\n+impl From<NulError> for old_io::IoError {\n+    fn from(_: NulError) -> old_io::IoError {\n         old_io::IoError {\n             kind: old_io::IoErrorKind::InvalidInput,\n             desc: \"data provided contains a nul byte\","}, {"sha": "f03ed7a3dde55c16bdc8eb7587362a247268d8f6", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e17f4fc1d4545f5c17b21805c5145b05495484ee/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17f4fc1d4545f5c17b21805c5145b05495484ee/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=e17f4fc1d4545f5c17b21805c5145b05495484ee", "patch": "@@ -16,7 +16,7 @@ use prelude::v1::*;\n use io::prelude::*;\n \n use cmp;\n-use error::{self, FromError};\n+use error;\n use fmt;\n use io::{self, DEFAULT_BUF_SIZE, Error, ErrorKind};\n use ptr;\n@@ -264,8 +264,8 @@ impl<W> IntoInnerError<W> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<W> FromError<IntoInnerError<W>> for Error {\n-    fn from_error(iie: IntoInnerError<W>) -> Error { iie.1 }\n+impl<W> From<IntoInnerError<W>> for Error {\n+    fn from(iie: IntoInnerError<W>) -> Error { iie.1 }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "8810681109359928db649ab37b17b11f74138be0", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e17f4fc1d4545f5c17b21805c5145b05495484ee/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17f4fc1d4545f5c17b21805c5145b05495484ee/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=e17f4fc1d4545f5c17b21805c5145b05495484ee", "patch": "@@ -97,7 +97,7 @@ macro_rules! try {\n     ($expr:expr) => (match $expr {\n         $crate::result::Result::Ok(val) => val,\n         $crate::result::Result::Err(err) => {\n-            return $crate::result::Result::Err($crate::error::FromError::from_error(err))\n+            return $crate::result::Result::Err($crate::convert::From::from(err))\n         }\n     })\n }"}, {"sha": "9aebdbe9eececcb0f4e98cdab71080e3ae15f63b", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e17f4fc1d4545f5c17b21805c5145b05495484ee/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17f4fc1d4545f5c17b21805c5145b05495484ee/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=e17f4fc1d4545f5c17b21805c5145b05495484ee", "patch": "@@ -40,7 +40,7 @@ use boxed::Box;\n use clone::Clone;\n use convert::From;\n use env;\n-use error::{FromError, Error};\n+use error::Error;\n use ffi::{OsString, OsStr};\n use fmt;\n use iter::Iterator;"}, {"sha": "cea2def30f1bcf552fca73791439f1c7cda6c2c0", "filename": "src/libstd/sync/poison.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e17f4fc1d4545f5c17b21805c5145b05495484ee/src%2Flibstd%2Fsync%2Fpoison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17f4fc1d4545f5c17b21805c5145b05495484ee/src%2Flibstd%2Fsync%2Fpoison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fpoison.rs?ref=e17f4fc1d4545f5c17b21805c5145b05495484ee", "patch": "@@ -11,7 +11,7 @@\n use prelude::v1::*;\n \n use cell::UnsafeCell;\n-use error::{Error, FromError};\n+use error::{Error};\n use fmt;\n use thread;\n \n@@ -144,8 +144,8 @@ impl<T> PoisonError<T> {\n     pub fn get_mut(&mut self) -> &mut T { &mut self.guard }\n }\n \n-impl<T> FromError<PoisonError<T>> for TryLockError<T> {\n-    fn from_error(err: PoisonError<T>) -> TryLockError<T> {\n+impl<T> From<PoisonError<T>> for TryLockError<T> {\n+    fn from(err: PoisonError<T>) -> TryLockError<T> {\n         TryLockError::Poisoned(err)\n     }\n }"}]}