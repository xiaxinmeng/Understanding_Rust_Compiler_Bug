{"sha": "958d5638254958ea42652de7444b63f2e67e7fe3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1OGQ1NjM4MjU0OTU4ZWE0MjY1MmRlNzQ0NGI2M2YyZTY3ZTdmZTM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-07-16T22:48:16Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-07-17T03:25:52Z"}, "message": "trans: Clean up handling the LLVM data layout\n\nTurns out for OSX our data layout was subtly wrong and the LLVM update must have\nexposed this. Instead of fixing this I've removed all data layouts from the\ncompiler to just use the defaults that LLVM provides for all targets. All data\nlayouts (and a number of dead modules) are removed from the compiler here.\nCustom target specifications can still provide a custom data layout, but it is\nnow an optional key as the default will be used if one isn't specified.", "tree": {"sha": "7c7d91d57f427a2c26abc2d3be24a63809cb3873", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c7d91d57f427a2c26abc2d3be24a63809cb3873"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/958d5638254958ea42652de7444b63f2e67e7fe3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/958d5638254958ea42652de7444b63f2e67e7fe3", "html_url": "https://github.com/rust-lang/rust/commit/958d5638254958ea42652de7444b63f2e67e7fe3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/958d5638254958ea42652de7444b63f2e67e7fe3/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74e198126b19efb7871aa673ae17483753f067b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/74e198126b19efb7871aa673ae17483753f067b0", "html_url": "https://github.com/rust-lang/rust/commit/74e198126b19efb7871aa673ae17483753f067b0"}], "stats": {"total": 636, "additions": 95, "deletions": 541}, "files": [{"sha": "7d50e6f6917ccf47b77cdb723f558b9943ed636c", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=958d5638254958ea42652de7444b63f2e67e7fe3", "patch": "@@ -99,14 +99,8 @@ pub mod diagnostics;\n \n pub mod back {\n     pub use rustc_back::abi;\n-    pub use rustc_back::arm;\n-    pub use rustc_back::mips;\n-    pub use rustc_back::mipsel;\n     pub use rustc_back::rpath;\n     pub use rustc_back::svh;\n-    pub use rustc_back::target_strs;\n-    pub use rustc_back::x86;\n-    pub use rustc_back::x86_64;\n }\n \n pub mod ast_map;"}, {"sha": "9e288f6ddb2bfaa7b985831bba59939b47a03f31", "filename": "src/librustc_back/arm.rs", "status": "removed", "additions": 0, "deletions": 77, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/74e198126b19efb7871aa673ae17483753f067b0/src%2Flibrustc_back%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e198126b19efb7871aa673ae17483753f067b0/src%2Flibrustc_back%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Farm.rs?ref=74e198126b19efb7871aa673ae17483753f067b0", "patch": "@@ -1,77 +0,0 @@\n-// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use target_strs;\n-use syntax::abi;\n-\n-pub fn get_target_strs(target_triple: String, target_os: abi::Os) -> target_strs::t {\n-    let cc_args = if target_triple.contains(\"thumb\") {\n-        vec!(\"-mthumb\".to_string())\n-    } else {\n-        vec!(\"-marm\".to_string())\n-    };\n-    return target_strs::t {\n-        module_asm: \"\".to_string(),\n-\n-        data_layout: match target_os {\n-          abi::OsMacos => {\n-            \"e-p:32:32:32\\\n-                -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n-                -f32:32:32-f64:64:64\\\n-                -v64:64:64-v128:64:128\\\n-                -a:0:64-n32\".to_string()\n-          }\n-\n-          abi::OsiOS => {\n-            \"e-p:32:32:32\\\n-                -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n-                -f32:32:32-f64:64:64\\\n-                -v64:64:64-v128:64:128\\\n-                -a:0:64-n32\".to_string()\n-          }\n-\n-          abi::OsWindows => {\n-            \"e-p:32:32:32\\\n-                -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n-                -f32:32:32-f64:64:64\\\n-                -v64:64:64-v128:64:128\\\n-                -a:0:64-n32\".to_string()\n-          }\n-\n-          abi::OsLinux => {\n-            \"e-p:32:32:32\\\n-                -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n-                -f32:32:32-f64:64:64\\\n-                -v64:64:64-v128:64:128\\\n-                -a:0:64-n32\".to_string()\n-          }\n-\n-          abi::OsAndroid => {\n-            \"e-p:32:32:32\\\n-                -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n-                -f32:32:32-f64:64:64\\\n-                -v64:64:64-v128:64:128\\\n-                -a:0:64-n32\".to_string()\n-          }\n-\n-          abi::OsFreebsd | abi::OsDragonfly | abi::OsBitrig | abi::OsOpenbsd | abi::OsNetbsd => {\n-            \"e-p:32:32:32\\\n-                -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n-                -f32:32:32-f64:64:64\\\n-                -v64:64:64-v128:64:128\\\n-                -a:0:64-n32\".to_string()\n-          }\n-        },\n-\n-        target_triple: target_triple,\n-\n-        cc_args: cc_args,\n-    };\n-}"}, {"sha": "ecba37c23153d8c97f149f48a54463dcc50f88d6", "filename": "src/librustc_back/lib.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Flib.rs?ref=958d5638254958ea42652de7444b63f2e67e7fe3", "patch": "@@ -52,13 +52,7 @@ extern crate rustc_llvm;\n \n pub mod abi;\n pub mod tempdir;\n-pub mod arm;\n-pub mod mips;\n-pub mod mipsel;\n pub mod rpath;\n pub mod sha2;\n pub mod svh;\n-pub mod target_strs;\n-pub mod x86;\n-pub mod x86_64;\n pub mod target;"}, {"sha": "e1edff817d6c1f27cf9e37285a5a4e4c1f58bb38", "filename": "src/librustc_back/mips.rs", "status": "removed", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/74e198126b19efb7871aa673ae17483753f067b0/src%2Flibrustc_back%2Fmips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e198126b19efb7871aa673ae17483753f067b0/src%2Flibrustc_back%2Fmips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fmips.rs?ref=74e198126b19efb7871aa673ae17483753f067b0", "patch": "@@ -1,72 +0,0 @@\n-// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use target_strs;\n-use syntax::abi;\n-\n-pub fn get_target_strs(target_triple: String, target_os: abi::Os) -> target_strs::t {\n-    return target_strs::t {\n-        module_asm: \"\".to_string(),\n-\n-        data_layout: match target_os {\n-          abi::OsMacos => {\n-            \"E-p:32:32:32\\\n-                -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n-                -f32:32:32-f64:64:64\\\n-                -v64:64:64-v128:64:128\\\n-                -a:0:64-n32\".to_string()\n-          }\n-\n-          abi::OsiOS => {\n-            \"E-p:32:32:32\\\n-                -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n-                -f32:32:32-f64:64:64\\\n-                -v64:64:64-v128:64:128\\\n-                -a:0:64-n32\".to_string()\n-          }\n-\n-          abi::OsWindows => {\n-            \"E-p:32:32:32\\\n-                -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n-                -f32:32:32-f64:64:64\\\n-                -v64:64:64-v128:64:128\\\n-                -a:0:64-n32\".to_string()\n-          }\n-\n-          abi::OsLinux => {\n-            \"E-p:32:32:32\\\n-                -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n-                -f32:32:32-f64:64:64\\\n-                -v64:64:64-v128:64:128\\\n-                -a:0:64-n32\".to_string()\n-          }\n-\n-          abi::OsAndroid => {\n-            \"E-p:32:32:32\\\n-                -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n-                -f32:32:32-f64:64:64\\\n-                -v64:64:64-v128:64:128\\\n-                -a:0:64-n32\".to_string()\n-          }\n-\n-          abi::OsBitrig | abi::OsDragonfly | abi::OsFreebsd | abi::OsNetbsd | abi::OsOpenbsd => {\n-            \"E-p:32:32:32\\\n-                -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n-                -f32:32:32-f64:64:64\\\n-                -v64:64:64-v128:64:128\\\n-                -a:0:64-n32\".to_string()\n-          }\n-        },\n-\n-        target_triple: target_triple,\n-\n-        cc_args: Vec::new(),\n-    };\n-}"}, {"sha": "ca52a9e56ff52978b7ed9c68801219182fe98249", "filename": "src/librustc_back/mipsel.rs", "status": "removed", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/74e198126b19efb7871aa673ae17483753f067b0/src%2Flibrustc_back%2Fmipsel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e198126b19efb7871aa673ae17483753f067b0/src%2Flibrustc_back%2Fmipsel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fmipsel.rs?ref=74e198126b19efb7871aa673ae17483753f067b0", "patch": "@@ -1,72 +0,0 @@\n-// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use target_strs;\n-use syntax::abi;\n-\n-pub fn get_target_strs(target_triple: String, target_os: abi::Os) -> target_strs::t {\n-    return target_strs::t {\n-        module_asm: \"\".to_string(),\n-\n-        data_layout: match target_os {\n-          abi::OsMacos => {\n-            \"e-p:32:32:32\\\n-                -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n-                -f32:32:32-f64:64:64\\\n-                -v64:64:64-v128:64:128\\\n-                -a:0:64-n32\".to_string()\n-          }\n-\n-          abi::OsiOS => {\n-            \"e-p:32:32:32\\\n-                -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n-                -f32:32:32-f64:64:64\\\n-                -v64:64:64-v128:64:128\\\n-                -a:0:64-n32\".to_string()\n-          }\n-\n-          abi::OsWindows => {\n-            \"e-p:32:32:32\\\n-                -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n-                -f32:32:32-f64:64:64\\\n-                -v64:64:64-v128:64:128\\\n-                -a:0:64-n32\".to_string()\n-          }\n-\n-          abi::OsLinux => {\n-            \"e-p:32:32:32\\\n-                -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n-                -f32:32:32-f64:64:64\\\n-                -v64:64:64-v128:64:128\\\n-                -a:0:64-n32\".to_string()\n-          }\n-\n-          abi::OsAndroid => {\n-            \"e-p:32:32:32\\\n-                -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n-                -f32:32:32-f64:64:64\\\n-                -v64:64:64-v128:64:128\\\n-                -a:0:64-n32\".to_string()\n-          }\n-\n-          abi::OsFreebsd | abi::OsDragonfly | abi::OsBitrig | abi::OsOpenbsd | abi::OsNetbsd => {\n-            \"e-p:32:32:32\\\n-                -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n-                -f32:32:32-f64:64:64\\\n-                -v64:64:64-v128:64:128\\\n-                -a:0:64-n32\".to_string()\n-          }\n-        },\n-\n-        target_triple: target_triple,\n-\n-        cc_args: Vec::new(),\n-    };\n-}"}, {"sha": "e87cb43128d24fc1efffd5d53c16b3673fc91d95", "filename": "src/librustc_back/target/aarch64_apple_ios.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Faarch64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Faarch64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Faarch64_apple_ios.rs?ref=958d5638254958ea42652de7444b63f2e67e7fe3", "patch": "@@ -13,10 +13,6 @@ use super::apple_ios_base::{opts, Arch};\n \n pub fn target() -> Target {\n     Target {\n-        // reference layout: e-m:o-i64:64-i128:128-n32:64-S128\n-        data_layout: \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n-                      i128:128-f32:32:32-f64:64:64-v64:64:64-v128:128:128-\\\n-                      a:0:64-n32:64-S128\".to_string(),\n         llvm_target: \"arm64-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),"}, {"sha": "8c350e8b28750ef3ec9f04682a257de05b715468", "filename": "src/librustc_back/target/aarch64_linux_android.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Faarch64_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Faarch64_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Faarch64_linux_android.rs?ref=958d5638254958ea42652de7444b63f2e67e7fe3", "patch": "@@ -12,9 +12,6 @@ use target::Target;\n \n pub fn target() -> Target {\n     Target {\n-        data_layout: \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n-                      f32:32:32-f64:64:64-v64:64:64-v128:128:128-a:0:64-\\\n-                      n32:64-S128\".to_string(),\n         llvm_target: \"aarch64-linux-android\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),"}, {"sha": "ed79caf486942158402e23ce2d47ce527b923ab8", "filename": "src/librustc_back/target/aarch64_unknown_linux_gnu.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_linux_gnu.rs?ref=958d5638254958ea42652de7444b63f2e67e7fe3", "patch": "@@ -13,9 +13,6 @@ use target::Target;\n pub fn target() -> Target {\n     let base = super::linux_base::opts();\n     Target {\n-        data_layout: \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n-                      f32:32:32-f64:64:64-v64:64:64-v128:128:128-a:0:64-\\\n-                      n32:64-S128\".to_string(),\n         llvm_target: \"aarch64-unknown-linux-gnu\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),"}, {"sha": "0770fe70e8a5780b69c6e28739fca356d9def1fa", "filename": "src/librustc_back/target/arm_linux_androideabi.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Farm_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Farm_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farm_linux_androideabi.rs?ref=958d5638254958ea42652de7444b63f2e67e7fe3", "patch": "@@ -15,9 +15,6 @@ pub fn target() -> Target {\n     base.features = \"+v7\".to_string();\n \n     Target {\n-        data_layout: \"e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n-                      f32:32:32-f64:64:64-v64:64:64-v128:64:128-a:0:64-\\\n-                      n32\".to_string(),\n         llvm_target: \"arm-linux-androideabi\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),"}, {"sha": "084f989277f317024220d1290a180deda2339d2d", "filename": "src/librustc_back/target/arm_unknown_linux_gnueabi.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabi.rs?ref=958d5638254958ea42652de7444b63f2e67e7fe3", "patch": "@@ -13,11 +13,6 @@ use target::{Target, TargetOptions};\n pub fn target() -> Target {\n     let base = super::linux_base::opts();\n     Target {\n-        data_layout: \"e-p:32:32:32\\\n-                      -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n-                      -f32:32:32-f64:64:64\\\n-                      -v64:64:64-v128:64:128\\\n-                      -a:0:64-n32\".to_string(),\n         llvm_target: \"arm-unknown-linux-gnueabi\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),"}, {"sha": "08f1aa5ade848c6c9d6503c44d463b3b61f0a9db", "filename": "src/librustc_back/target/arm_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabihf.rs?ref=958d5638254958ea42652de7444b63f2e67e7fe3", "patch": "@@ -13,11 +13,6 @@ use target::{Target, TargetOptions};\n pub fn target() -> Target {\n     let base = super::linux_base::opts();\n     Target {\n-        data_layout: \"e-p:32:32:32\\\n-                      -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n-                      -f32:32:32-f64:64:64\\\n-                      -v64:64:64-v128:64:128\\\n-                      -a:0:64-n32\".to_string(),\n         llvm_target: \"arm-unknown-linux-gnueabihf\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),"}, {"sha": "a6d649ea162f93be4cab857075cf4af188055781", "filename": "src/librustc_back/target/armv7_apple_ios.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Farmv7_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Farmv7_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farmv7_apple_ios.rs?ref=958d5638254958ea42652de7444b63f2e67e7fe3", "patch": "@@ -13,7 +13,6 @@ use super::apple_ios_base::{opts, Arch};\n \n pub fn target() -> Target {\n     Target {\n-        data_layout: \"e-p:32:32-f64:32:64-v64:32:64-v128:32:128-a:0:32-n32-S32\".to_string(),\n         llvm_target: \"armv7-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),"}, {"sha": "264385512added148a0519249939a5bcfee2711e", "filename": "src/librustc_back/target/armv7s_apple_ios.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Farmv7s_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Farmv7s_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farmv7s_apple_ios.rs?ref=958d5638254958ea42652de7444b63f2e67e7fe3", "patch": "@@ -13,7 +13,6 @@ use super::apple_ios_base::{opts, Arch};\n \n pub fn target() -> Target {\n     Target {\n-        data_layout: \"e-p:32:32-f64:32:64-v64:32:64-v128:32:128-a:0:32-n32-S32\".to_string(),\n         llvm_target: \"armv7s-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),"}, {"sha": "d17aa915461df369a192a5bf13c88f303cea204a", "filename": "src/librustc_back/target/i386_apple_ios.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Fi386_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Fi386_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi386_apple_ios.rs?ref=958d5638254958ea42652de7444b63f2e67e7fe3", "patch": "@@ -13,11 +13,6 @@ use super::apple_ios_base::{opts, Arch};\n \n pub fn target() -> Target {\n     Target {\n-        data_layout: \"e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16\\\n-                      -i32:32:32-i64:32:64\\\n-                      -f32:32:32-f64:32:64-v64:64:64\\\n-                      -v128:128:128-a:0:64-f80:128:128\\\n-                      -n8:16:32\".to_string(),\n         llvm_target: \"i386-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),"}, {"sha": "9fe15e76942863c7ada3bf69aa878905f8e3ccb2", "filename": "src/librustc_back/target/i686_apple_darwin.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Fi686_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Fi686_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_apple_darwin.rs?ref=958d5638254958ea42652de7444b63f2e67e7fe3", "patch": "@@ -16,11 +16,6 @@ pub fn target() -> Target {\n     base.pre_link_args.push(\"-m32\".to_string());\n \n     Target {\n-        data_layout: \"e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16\\\n-                      -i32:32:32-i64:32:64\\\n-                      -f32:32:32-f64:32:64-v64:64:64\\\n-                      -v128:128:128-a:0:64-f80:128:128\\\n-                      -n8:16:32\".to_string(),\n         llvm_target: \"i686-apple-darwin\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),"}, {"sha": "ae1b4d450a58e93792f636f42e9ac966720a0308", "filename": "src/librustc_back/target/i686_pc_windows_gnu.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Fi686_pc_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Fi686_pc_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_pc_windows_gnu.rs?ref=958d5638254958ea42652de7444b63f2e67e7fe3", "patch": "@@ -24,7 +24,6 @@ pub fn target() -> Target {\n     options.pre_link_args.push(\"-shared-libgcc\".to_string());\n \n     Target {\n-        data_layout: \"e-p:32:32-f64:64:64-i64:64:64-f80:32:32-n8:16:32\".to_string(),\n         llvm_target: \"i686-pc-windows-gnu\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),"}, {"sha": "f2ae799bd2438185bcae77d0f17f785c003dae3a", "filename": "src/librustc_back/target/i686_pc_windows_msvc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Fi686_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Fi686_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_pc_windows_msvc.rs?ref=958d5638254958ea42652de7444b63f2e67e7fe3", "patch": "@@ -15,7 +15,6 @@ pub fn target() -> Target {\n     base.cpu = \"i686\".to_string();\n \n     Target {\n-        data_layout: \"e-p:32:32-f64:64:64-i64:64:64-f80:32:32-n8:16:32\".to_string(),\n         llvm_target: \"i686-pc-windows-msvc\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),"}, {"sha": "f2478e6d0dbfeb37cfe8765013a60a5aafc2d2c7", "filename": "src/librustc_back/target/i686_unknown_dragonfly.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_dragonfly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_dragonfly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_dragonfly.rs?ref=958d5638254958ea42652de7444b63f2e67e7fe3", "patch": "@@ -16,7 +16,6 @@ pub fn target() -> Target {\n     base.pre_link_args.push(\"-m32\".to_string());\n \n     Target {\n-        data_layout: \"e-p:32:32-f64:32:64-i64:32:64-f80:32:32-n8:16:32\".to_string(),\n         llvm_target: \"i686-unknown-dragonfly\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),"}, {"sha": "68fee41e2cfa531c31f09f4c3a88f23cafda7c11", "filename": "src/librustc_back/target/i686_unknown_freebsd.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_freebsd.rs?ref=958d5638254958ea42652de7444b63f2e67e7fe3", "patch": "@@ -17,7 +17,6 @@ pub fn target() -> Target {\n     base.morestack = false;\n \n     Target {\n-        data_layout: \"e-p:32:32-f64:32:64-i64:32:64-f80:32:32-n8:16:32\".to_string(),\n         llvm_target: \"i686-unknown-freebsd\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),"}, {"sha": "074d5b2b9ed228d5be4995a2f78c5e0d55b77b18", "filename": "src/librustc_back/target/i686_unknown_linux_gnu.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_linux_gnu.rs?ref=958d5638254958ea42652de7444b63f2e67e7fe3", "patch": "@@ -16,7 +16,6 @@ pub fn target() -> Target {\n     base.pre_link_args.push(\"-m32\".to_string());\n \n     Target {\n-        data_layout: \"e-p:32:32-f64:32:64-i64:32:64-f80:32:32-n8:16:32\".to_string(),\n         llvm_target: \"i686-unknown-linux-gnu\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),"}, {"sha": "3f3da6d6c9136aa86448c17ead7d1d761b37b021", "filename": "src/librustc_back/target/mips_unknown_linux_gnu.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_gnu.rs?ref=958d5638254958ea42652de7444b63f2e67e7fe3", "patch": "@@ -12,11 +12,6 @@ use target::Target;\n \n pub fn target() -> Target {\n     Target {\n-        data_layout: \"E-p:32:32:32\\\n-                      -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n-                      -f32:32:32-f64:64:64\\\n-                      -v64:64:64-v128:64:128\\\n-                      -a:0:64-n32\".to_string(),\n         llvm_target: \"mips-unknown-linux-gnu\".to_string(),\n         target_endian: \"big\".to_string(),\n         target_pointer_width: \"32\".to_string(),"}, {"sha": "d7f286c8aa4085beda3357ee7c6cbb9b062a2785", "filename": "src/librustc_back/target/mipsel_unknown_linux_gnu.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_gnu.rs?ref=958d5638254958ea42652de7444b63f2e67e7fe3", "patch": "@@ -12,11 +12,6 @@ use target::Target;\n \n pub fn target() -> Target {\n     Target {\n-        data_layout: \"e-p:32:32:32\\\n-                      -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n-                      -f32:32:32-f64:64:64\\\n-                      -v64:64:64-v128:64:128\\\n-                      -a:0:64-n32\".to_string(),\n         llvm_target: \"mipsel-unknown-linux-gnu\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),"}, {"sha": "39e42913ff6745e4389001908b80804bb95e2a16", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=958d5638254958ea42652de7444b63f2e67e7fe3", "patch": "@@ -67,8 +67,6 @@ mod windows_msvc_base;\n /// Every field here must be specified, and has no default value.\n #[derive(Clone, Debug)]\n pub struct Target {\n-    /// [Data layout](http://llvm.org/docs/LangRef.html#data-layout) to pass to LLVM.\n-    pub data_layout: String,\n     /// Target triple to pass to LLVM.\n     pub llvm_target: String,\n     /// String to use as the `target_endian` `cfg` variable.\n@@ -92,6 +90,8 @@ pub struct Target {\n /// these try to take \"minimal defaults\" that don't assume anything about the runtime they run in.\n #[derive(Clone, Debug)]\n pub struct TargetOptions {\n+    /// [Data layout](http://llvm.org/docs/LangRef.html#data-layout) to pass to LLVM.\n+    pub data_layout: String,\n     /// Linker to invoke. Defaults to \"cc\".\n     pub linker: String,\n     /// Archive utility to use when managing archives. Defaults to \"ar\".\n@@ -178,6 +178,7 @@ impl Default for TargetOptions {\n     /// incomplete, and if used for compilation, will certainly not work.\n     fn default() -> TargetOptions {\n         TargetOptions {\n+            data_layout: String::new(),\n             linker: \"cc\".to_string(),\n             ar: \"ar\".to_string(),\n             pre_link_args: Vec::new(),\n@@ -245,7 +246,6 @@ impl Target {\n         };\n \n         let mut base = Target {\n-            data_layout: get_req_field(\"data-layout\"),\n             llvm_target: get_req_field(\"llvm-target\"),\n             target_endian: get_req_field(\"target-endian\"),\n             target_pointer_width: get_req_field(\"target-pointer-width\"),\n@@ -289,6 +289,7 @@ impl Target {\n         key!(staticlib_prefix);\n         key!(staticlib_suffix);\n         key!(features);\n+        key!(data_layout);\n         key!(dynamic_linking, bool);\n         key!(executables, bool);\n         key!(morestack, bool);"}, {"sha": "896824eba0e56b627bbb4ce14ae0caf6f745d11d", "filename": "src/librustc_back/target/powerpc_unknown_linux_gnu.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Fpowerpc_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Fpowerpc_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fpowerpc_unknown_linux_gnu.rs?ref=958d5638254958ea42652de7444b63f2e67e7fe3", "patch": "@@ -15,7 +15,6 @@ pub fn target() -> Target {\n     base.pre_link_args.push(\"-m32\".to_string());\n \n     Target {\n-        data_layout: \"E-S8-p:32:32-f64:32:64-i64:32:64-f80:32:32-n8:16:32\".to_string(),\n         llvm_target: \"powerpc-unknown-linux-gnu\".to_string(),\n         target_endian: \"big\".to_string(),\n         target_pointer_width: \"32\".to_string(),"}, {"sha": "ef40c2f2006e1628086bdb2906f30d6748b6118b", "filename": "src/librustc_back/target/x86_64_apple_darwin.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_darwin.rs?ref=958d5638254958ea42652de7444b63f2e67e7fe3", "patch": "@@ -17,9 +17,6 @@ pub fn target() -> Target {\n     base.pre_link_args.push(\"-m64\".to_string());\n \n     Target {\n-        data_layout: \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n-                      f32:32:32-f64:64:64-v64:64:64-v128:128:128-a:0:64-\\\n-                      s0:64:64-f80:128:128-n8:16:32:64\".to_string(),\n         llvm_target: \"x86_64-apple-darwin\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),"}, {"sha": "7aca8c554dab63dd27c6d9b980dc1a1f3b464ceb", "filename": "src/librustc_back/target/x86_64_apple_ios.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_ios.rs?ref=958d5638254958ea42652de7444b63f2e67e7fe3", "patch": "@@ -13,9 +13,6 @@ use super::apple_ios_base::{opts, Arch};\n \n pub fn target() -> Target {\n     Target {\n-        data_layout: \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n-                      f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-\\\n-                      s0:64:64-f80:128:128-n8:16:32:64\".to_string(),\n         llvm_target: \"x86_64-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),"}, {"sha": "e4d7b4bc9b024fab54df64f1d57958039c556098", "filename": "src/librustc_back/target/x86_64_pc_windows_gnu.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_gnu.rs?ref=958d5638254958ea42652de7444b63f2e67e7fe3", "patch": "@@ -18,10 +18,6 @@ pub fn target() -> Target {\n     base.pre_link_args.push(\"-m64\".to_string());\n \n     Target {\n-        // FIXME: Test this. Copied from linux (#2398)\n-        data_layout: \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n-                      f32:32:32-f64:64:64-v64:64:64-v128:128:128-a:0:64-\\\n-                      s0:64:64-f80:128:128-n8:16:32:64-S128\".to_string(),\n         llvm_target: \"x86_64-pc-windows-gnu\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),"}, {"sha": "addaaeb1b636da2cf7353eed6b96eeca3942cd43", "filename": "src/librustc_back/target/x86_64_pc_windows_msvc.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_msvc.rs?ref=958d5638254958ea42652de7444b63f2e67e7fe3", "patch": "@@ -15,13 +15,6 @@ pub fn target() -> Target {\n     base.cpu = \"x86-64\".to_string();\n \n     Target {\n-        // This is currently in sync with the specification for\n-        // x86_64-pc-windows-gnu but there's a comment in that file questioning\n-        // whether this is valid or not. Sounds like the two should stay in sync\n-        // at least for now.\n-        data_layout: \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n-                      f32:32:32-f64:64:64-v64:64:64-v128:128:128-a:0:64-\\\n-                      s0:64:64-f80:128:128-n8:16:32:64-S128\".to_string(),\n         llvm_target: \"x86_64-pc-windows-msvc\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),"}, {"sha": "6ecf885aba38eff9cf1f1e9441001c32ccf3a3ca", "filename": "src/librustc_back/target/x86_64_unknown_bitrig.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_bitrig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_bitrig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_bitrig.rs?ref=958d5638254958ea42652de7444b63f2e67e7fe3", "patch": "@@ -15,9 +15,6 @@ pub fn target() -> Target {\n     base.pre_link_args.push(\"-m64\".to_string());\n \n     Target {\n-        data_layout: \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n-                     f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-\\\n-                     s0:64:64-f80:128:128-n8:16:32:64-S128\".to_string(),\n         llvm_target: \"x86_64-unknown-bitrig\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),"}, {"sha": "f0e665967ec6f3fd2b77304ce1ec28f584b79543", "filename": "src/librustc_back/target/x86_64_unknown_dragonfly.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_dragonfly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_dragonfly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_dragonfly.rs?ref=958d5638254958ea42652de7444b63f2e67e7fe3", "patch": "@@ -16,9 +16,6 @@ pub fn target() -> Target {\n     base.pre_link_args.push(\"-m64\".to_string());\n \n     Target {\n-        data_layout: \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n-                     f32:32:32-f64:64:64-v64:64:64-v128:128:128-a:0:64-\\\n-                     s0:64:64-f80:128:128-n8:16:32:64-S128\".to_string(),\n         llvm_target: \"x86_64-unknown-dragonfly\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),"}, {"sha": "f742ebfde1d2c314fdf2e28e54c72d38e76f8613", "filename": "src/librustc_back/target/x86_64_unknown_freebsd.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_freebsd.rs?ref=958d5638254958ea42652de7444b63f2e67e7fe3", "patch": "@@ -16,9 +16,6 @@ pub fn target() -> Target {\n     base.pre_link_args.push(\"-m64\".to_string());\n \n     Target {\n-        data_layout: \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n-                     f32:32:32-f64:64:64-v64:64:64-v128:128:128-a:0:64-\\\n-                     s0:64:64-f80:128:128-n8:16:32:64-S128\".to_string(),\n         llvm_target: \"x86_64-unknown-freebsd\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),"}, {"sha": "4749e481fd85534724ff1bba722cd73ffc9e557f", "filename": "src/librustc_back/target/x86_64_unknown_linux_gnu.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_gnu.rs?ref=958d5638254958ea42652de7444b63f2e67e7fe3", "patch": "@@ -16,9 +16,6 @@ pub fn target() -> Target {\n     base.pre_link_args.push(\"-m64\".to_string());\n \n     Target {\n-        data_layout: \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n-                      f32:32:32-f64:64:64-v64:64:64-v128:128:128-a:0:64-\\\n-                      s0:64:64-f80:128:128-n8:16:32:64-S128\".to_string(),\n         llvm_target: \"x86_64-unknown-linux-gnu\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),"}, {"sha": "c66192c28b13d7ce1ef2ddddd1f03dd891ba679c", "filename": "src/librustc_back/target/x86_64_unknown_linux_musl.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_musl.rs?ref=958d5638254958ea42652de7444b63f2e67e7fe3", "patch": "@@ -70,9 +70,6 @@ pub fn target() -> Target {\n     base.position_independent_executables = false;\n \n     Target {\n-        data_layout: \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n-                      f32:32:32-f64:64:64-v64:64:64-v128:128:128-a:0:64-\\\n-                      s0:64:64-f80:128:128-n8:16:32:64-S128\".to_string(),\n         llvm_target: \"x86_64-unknown-linux-musl\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),"}, {"sha": "e13e58e3a186d163d22cc7a3dfc3c0491dad20c9", "filename": "src/librustc_back/target/x86_64_unknown_netbsd.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_netbsd.rs?ref=958d5638254958ea42652de7444b63f2e67e7fe3", "patch": "@@ -15,9 +15,6 @@ pub fn target() -> Target {\n     base.pre_link_args.push(\"-m64\".to_string());\n \n     Target {\n-        data_layout: \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n-                     f32:32:32-f64:64:64-v64:64:64-v128:128:128-a:0:64-\\\n-                     s0:64:64-f80:128:128-n8:16:32:64-S128\".to_string(),\n         llvm_target: \"x86_64-unknown-netbsd\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),"}, {"sha": "a404db48b22bb38875769d86e8d82b675e46ccf8", "filename": "src/librustc_back/target/x86_64_unknown_openbsd.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_openbsd.rs?ref=958d5638254958ea42652de7444b63f2e67e7fe3", "patch": "@@ -15,9 +15,6 @@ pub fn target() -> Target {\n     base.pre_link_args.push(\"-m64\".to_string());\n \n     Target {\n-        data_layout: \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n-                     f32:32:32-f64:64:64-v64:64:64-v128:128:128-a:0:64-\\\n-                     s0:64:64-f80:128:128-n8:16:32:64-S128\".to_string(),\n         llvm_target: \"x86_64-unknown-openbsd\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),"}, {"sha": "7928f3d8db098167d7571824ea1b7d5666835a21", "filename": "src/librustc_back/target_strs.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/74e198126b19efb7871aa673ae17483753f067b0/src%2Flibrustc_back%2Ftarget_strs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e198126b19efb7871aa673ae17483753f067b0/src%2Flibrustc_back%2Ftarget_strs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget_strs.rs?ref=74e198126b19efb7871aa673ae17483753f067b0", "patch": "@@ -1,18 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![allow(non_camel_case_types)]\n-\n-pub struct t {\n-    pub module_asm: String,\n-    pub data_layout: String,\n-    pub target_triple: String,\n-    pub cc_args: Vec<String> ,\n-}"}, {"sha": "46e0a83ac033b681387cdc07c188c676cdefc3d8", "filename": "src/librustc_back/x86.rs", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/74e198126b19efb7871aa673ae17483753f067b0/src%2Flibrustc_back%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e198126b19efb7871aa673ae17483753f067b0/src%2Flibrustc_back%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fx86.rs?ref=74e198126b19efb7871aa673ae17483753f067b0", "patch": "@@ -1,58 +0,0 @@\n-// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use target_strs;\n-use syntax::abi;\n-\n-pub fn get_target_strs(target_triple: String, target_os: abi::Os)\n-                       -> target_strs::t {\n-    return target_strs::t {\n-        module_asm: \"\".to_string(),\n-\n-        data_layout: match target_os {\n-          abi::OsMacos => {\n-            \"e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16\\\n-                -i32:32:32-i64:32:64\\\n-                -f32:32:32-f64:32:64-v64:64:64\\\n-                -v128:128:128-a:0:64-f80:128:128\\\n-                -n8:16:32\".to_string()\n-          }\n-\n-          abi::OsiOS => {\n-            \"e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16\\\n-                -i32:32:32-i64:32:64\\\n-                -f32:32:32-f64:32:64-v64:64:64\\\n-                -v128:128:128-a:0:64-f80:128:128\\\n-                -n8:16:32\".to_string()\n-          }\n-\n-          abi::OsWindows => {\n-            \"e-p:32:32-f64:64:64-i64:64:64-f80:32:32-n8:16:32\".to_string()\n-          }\n-\n-          abi::OsLinux => {\n-            \"e-p:32:32-f64:32:64-i64:32:64-f80:32:32-n8:16:32\".to_string()\n-          }\n-          abi::OsAndroid => {\n-            \"e-p:32:32-f64:32:64-i64:32:64-f80:32:32-n8:16:32\".to_string()\n-          }\n-\n-          abi::OsFreebsd | abi::OsDragonfly | abi::OsBitrig | abi::OsOpenbsd | abi::OsNetbsd => {\n-            \"e-p:32:32-f64:32:64-i64:32:64-f80:32:32-n8:16:32\".to_string()\n-          }\n-\n-        },\n-\n-        target_triple: target_triple,\n-\n-        cc_args: vec!(\"-m32\".to_string()),\n-    };\n-}"}, {"sha": "abdcd56444213e121fbb7f023a6df1674716d554", "filename": "src/librustc_back/x86_64.rs", "status": "removed", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/74e198126b19efb7871aa673ae17483753f067b0/src%2Flibrustc_back%2Fx86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e198126b19efb7871aa673ae17483753f067b0/src%2Flibrustc_back%2Fx86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fx86_64.rs?ref=74e198126b19efb7871aa673ae17483753f067b0", "patch": "@@ -1,62 +0,0 @@\n-// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use target_strs;\n-use syntax::abi;\n-\n-pub fn get_target_strs(target_triple: String, target_os: abi::Os) -> target_strs::t {\n-    return target_strs::t {\n-        module_asm: \"\".to_string(),\n-\n-        data_layout: match target_os {\n-          abi::OsMacos => {\n-            \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n-                f32:32:32-f64:64:64-v64:64:64-v128:128:128-a:0:64-\\\n-                s0:64:64-f80:128:128-n8:16:32:64\".to_string()\n-          }\n-\n-          abi::OsiOS => {\n-            \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n-                f32:32:32-f64:64:64-v64:64:64-v128:128:128-a:0:64-\\\n-                s0:64:64-f80:128:128-n8:16:32:64\".to_string()\n-          }\n-\n-          abi::OsWindows => {\n-            // FIXME: Test this. Copied from Linux (#2398)\n-            \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n-                f32:32:32-f64:64:64-v64:64:64-v128:128:128-a:0:64-\\\n-                s0:64:64-f80:128:128-n8:16:32:64-S128\".to_string()\n-          }\n-\n-          abi::OsLinux => {\n-            \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n-                f32:32:32-f64:64:64-v64:64:64-v128:128:128-a:0:64-\\\n-                s0:64:64-f80:128:128-n8:16:32:64-S128\".to_string()\n-          }\n-          abi::OsAndroid => {\n-            \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n-                f32:32:32-f64:64:64-v64:64:64-v128:128:128-a:0:64-\\\n-                s0:64:64-f80:128:128-n8:16:32:64-S128\".to_string()\n-          }\n-\n-          abi::OsBitrig | abi::OsDragonfly | abi::OsFreebsd | abi::OsNetbsd | abi::OsOpenbsd => {\n-            \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n-                f32:32:32-f64:64:64-v64:64:64-v128:128:128-a:0:64-\\\n-                s0:64:64-f80:128:128-n8:16:32:64-S128\".to_string()\n-          }\n-\n-        },\n-\n-        target_triple: target_triple,\n-\n-        cc_args: vec!(\"-m64\".to_string()),\n-    };\n-}"}, {"sha": "7734704b021a851a66b5396343acfdbd0671b1c9", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=958d5638254958ea42652de7444b63f2e67e7fe3", "patch": "@@ -2134,6 +2134,10 @@ extern {\n                                     Name: *const c_char,\n                                     Child: ArchiveChildRef) -> RustArchiveMemberRef;\n     pub fn LLVMRustArchiveMemberFree(Member: RustArchiveMemberRef);\n+\n+    pub fn LLVMRustSetDataLayoutFromTargetMachine(M: ModuleRef,\n+                                                  TM: TargetMachineRef);\n+    pub fn LLVMRustGetModuleDataLayout(M: ModuleRef) -> TargetDataRef;\n }\n \n // LLVM requires symbols from this library, but apparently they're not printed"}, {"sha": "1f97a9b93edf5d9cb49db077e4fa3adffbfadcf3", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 40, "deletions": 49, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=958d5638254958ea42652de7444b63f2e67e7fe3", "patch": "@@ -163,7 +163,7 @@ fn get_llvm_opt_level(optimize: config::OptLevel) -> llvm::CodeGenOptLevel {\n     }\n }\n \n-fn create_target_machine(sess: &Session) -> TargetMachineRef {\n+pub fn create_target_machine(sess: &Session) -> TargetMachineRef {\n     let reloc_model_arg = match sess.opts.cg.relocation_model {\n         Some(ref s) => &s[..],\n         None => &sess.target.target.options.relocation_model[..],\n@@ -591,10 +591,6 @@ pub fn run_passes(sess: &Session,\n     // Sanity check\n     assert!(trans.modules.len() == sess.opts.cg.codegen_units);\n \n-    unsafe {\n-        configure_llvm(sess);\n-    }\n-\n     let tm = create_target_machine(sess);\n \n     // Figure out what we actually need to build.\n@@ -943,10 +939,7 @@ pub fn run_assembler(sess: &Session, outputs: &OutputFilenames) {\n     }\n }\n \n-unsafe fn configure_llvm(sess: &Session) {\n-    use std::sync::Once;\n-    static INIT: Once = Once::new();\n-\n+pub unsafe fn configure_llvm(sess: &Session) {\n     let mut llvm_c_strs = Vec::new();\n     let mut llvm_args = Vec::new();\n \n@@ -968,46 +961,44 @@ unsafe fn configure_llvm(sess: &Session) {\n         }\n     }\n \n-    INIT.call_once(|| {\n-        llvm::LLVMInitializePasses();\n-\n-        // Only initialize the platforms supported by Rust here, because\n-        // using --llvm-root will have multiple platforms that rustllvm\n-        // doesn't actually link to and it's pointless to put target info\n-        // into the registry that Rust cannot generate machine code for.\n-        llvm::LLVMInitializeX86TargetInfo();\n-        llvm::LLVMInitializeX86Target();\n-        llvm::LLVMInitializeX86TargetMC();\n-        llvm::LLVMInitializeX86AsmPrinter();\n-        llvm::LLVMInitializeX86AsmParser();\n-\n-        llvm::LLVMInitializeARMTargetInfo();\n-        llvm::LLVMInitializeARMTarget();\n-        llvm::LLVMInitializeARMTargetMC();\n-        llvm::LLVMInitializeARMAsmPrinter();\n-        llvm::LLVMInitializeARMAsmParser();\n-\n-        llvm::LLVMInitializeAArch64TargetInfo();\n-        llvm::LLVMInitializeAArch64Target();\n-        llvm::LLVMInitializeAArch64TargetMC();\n-        llvm::LLVMInitializeAArch64AsmPrinter();\n-        llvm::LLVMInitializeAArch64AsmParser();\n-\n-        llvm::LLVMInitializeMipsTargetInfo();\n-        llvm::LLVMInitializeMipsTarget();\n-        llvm::LLVMInitializeMipsTargetMC();\n-        llvm::LLVMInitializeMipsAsmPrinter();\n-        llvm::LLVMInitializeMipsAsmParser();\n-\n-        llvm::LLVMInitializePowerPCTargetInfo();\n-        llvm::LLVMInitializePowerPCTarget();\n-        llvm::LLVMInitializePowerPCTargetMC();\n-        llvm::LLVMInitializePowerPCAsmPrinter();\n-        llvm::LLVMInitializePowerPCAsmParser();\n-\n-        llvm::LLVMRustSetLLVMOptions(llvm_args.len() as c_int,\n-                                     llvm_args.as_ptr());\n-    });\n+    llvm::LLVMInitializePasses();\n+\n+    // Only initialize the platforms supported by Rust here, because\n+    // using --llvm-root will have multiple platforms that rustllvm\n+    // doesn't actually link to and it's pointless to put target info\n+    // into the registry that Rust cannot generate machine code for.\n+    llvm::LLVMInitializeX86TargetInfo();\n+    llvm::LLVMInitializeX86Target();\n+    llvm::LLVMInitializeX86TargetMC();\n+    llvm::LLVMInitializeX86AsmPrinter();\n+    llvm::LLVMInitializeX86AsmParser();\n+\n+    llvm::LLVMInitializeARMTargetInfo();\n+    llvm::LLVMInitializeARMTarget();\n+    llvm::LLVMInitializeARMTargetMC();\n+    llvm::LLVMInitializeARMAsmPrinter();\n+    llvm::LLVMInitializeARMAsmParser();\n+\n+    llvm::LLVMInitializeAArch64TargetInfo();\n+    llvm::LLVMInitializeAArch64Target();\n+    llvm::LLVMInitializeAArch64TargetMC();\n+    llvm::LLVMInitializeAArch64AsmPrinter();\n+    llvm::LLVMInitializeAArch64AsmParser();\n+\n+    llvm::LLVMInitializeMipsTargetInfo();\n+    llvm::LLVMInitializeMipsTarget();\n+    llvm::LLVMInitializeMipsTargetMC();\n+    llvm::LLVMInitializeMipsAsmPrinter();\n+    llvm::LLVMInitializeMipsAsmParser();\n+\n+    llvm::LLVMInitializePowerPCTargetInfo();\n+    llvm::LLVMInitializePowerPCTarget();\n+    llvm::LLVMInitializePowerPCTargetMC();\n+    llvm::LLVMInitializePowerPCAsmPrinter();\n+    llvm::LLVMInitializePowerPCAsmParser();\n+\n+    llvm::LLVMRustSetLLVMOptions(llvm_args.len() as c_int,\n+                                 llvm_args.as_ptr());\n }\n \n unsafe fn populate_llvm_passes(fpm: llvm::PassManagerRef,"}, {"sha": "af894b218eff8e87e76c7103da155d91e5a9df27", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=958d5638254958ea42652de7444b63f2e67e7fe3", "patch": "@@ -68,14 +68,8 @@ pub use rustc::util;\n \n pub mod back {\n     pub use rustc_back::abi;\n-    pub use rustc_back::arm;\n-    pub use rustc_back::mips;\n-    pub use rustc_back::mipsel;\n     pub use rustc_back::rpath;\n     pub use rustc_back::svh;\n-    pub use rustc_back::target_strs;\n-    pub use rustc_back::x86;\n-    pub use rustc_back::x86_64;\n \n     pub mod archive;\n     pub mod linker;"}, {"sha": "4aeba2fe062872fc93a519ef83bbff8c07c3e5c2", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=958d5638254958ea42652de7444b63f2e67e7fe3", "patch": "@@ -2666,6 +2666,8 @@ pub fn trans_crate(tcx: &ty::ctxt, analysis: ty::CrateAnalysis) -> CrateTranslat\n                 // cannot proceed despite the Once not running more than once.\n                 POISONED = true;\n             }\n+\n+            ::back::write::configure_llvm(&tcx.sess);\n         });\n \n         if POISONED {"}, {"sha": "5a4bd7ff3a18468847b5bcb47ef974c1b7557ad5", "filename": "src/librustc_trans/trans/context.rs", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs?ref=958d5638254958ea42652de7444b63f2e67e7fe3", "patch": "@@ -10,8 +10,6 @@\n \n use llvm;\n use llvm::{ContextRef, ModuleRef, ValueRef, BuilderRef};\n-use llvm::TargetData;\n-use llvm::mk_target_data;\n use metadata::common::LinkMeta;\n use middle::def::ExportMap;\n use middle::traits;\n@@ -83,7 +81,6 @@ pub struct SharedCrateContext<'a, 'tcx: 'a> {\n pub struct LocalCrateContext<'tcx> {\n     llmod: ModuleRef,\n     llcx: ContextRef,\n-    td: TargetData,\n     tn: TypeNames,\n     externs: RefCell<ExternMap>,\n     item_vals: RefCell<NodeMap<ValueRef>>,\n@@ -226,9 +223,15 @@ unsafe fn create_context_and_module(sess: &Session, mod_name: &str) -> (ContextR\n     let mod_name = CString::new(mod_name).unwrap();\n     let llmod = llvm::LLVMModuleCreateWithNameInContext(mod_name.as_ptr(), llcx);\n \n-    let data_layout = sess.target.target.data_layout.as_bytes();\n-    let data_layout = CString::new(data_layout).unwrap();\n-    llvm::LLVMSetDataLayout(llmod, data_layout.as_ptr());\n+    let custom_data_layout = &sess.target.target.options.data_layout[..];\n+    if custom_data_layout.len() > 0 {\n+        let data_layout = CString::new(custom_data_layout).unwrap();\n+        llvm::LLVMSetDataLayout(llmod, data_layout.as_ptr());\n+    } else {\n+        let tm = ::back::write::create_target_machine(sess);\n+        llvm::LLVMRustSetDataLayoutFromTargetMachine(llmod, tm);\n+        llvm::LLVMRustDisposeTargetMachine(tm);\n+    }\n \n     let llvm_target = sess.target.target.llvm_target.as_bytes();\n     let llvm_target = CString::new(llvm_target).unwrap();\n@@ -419,13 +422,6 @@ impl<'tcx> LocalCrateContext<'tcx> {\n         unsafe {\n             let (llcx, llmod) = create_context_and_module(&shared.tcx.sess, name);\n \n-            let td = mk_target_data(&shared.tcx\n-                                          .sess\n-                                          .target\n-                                          .target\n-                                          .data_layout\n-                                          );\n-\n             let dbg_cx = if shared.tcx.sess.opts.debuginfo != NoDebugInfo {\n                 Some(debuginfo::CrateDebugContext::new(llmod))\n             } else {\n@@ -435,7 +431,6 @@ impl<'tcx> LocalCrateContext<'tcx> {\n             let mut local_ccx = LocalCrateContext {\n                 llmod: llmod,\n                 llcx: llcx,\n-                td: td,\n                 tn: TypeNames::new(),\n                 externs: RefCell::new(FnvHashMap()),\n                 item_vals: RefCell::new(NodeMap()),\n@@ -581,8 +576,8 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n         self.local.llcx\n     }\n \n-    pub fn td<'a>(&'a self) -> &'a TargetData {\n-        &self.local.td\n+    pub fn td(&self) -> llvm::TargetDataRef {\n+        unsafe { llvm::LLVMRustGetModuleDataLayout(self.llmod()) }\n     }\n \n     pub fn tn<'a>(&'a self) -> &'a TypeNames {"}, {"sha": "691fba42d57051e9aa74757d0b28fd8f1630e494", "filename": "src/librustc_trans/trans/machine.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_trans%2Ftrans%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Flibrustc_trans%2Ftrans%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmachine.rs?ref=958d5638254958ea42652de7444b63f2e67e7fe3", "patch": "@@ -27,15 +27,15 @@ pub type llalign = u32;\n // Returns the number of bytes clobbered by a Store to this type.\n pub fn llsize_of_store(cx: &CrateContext, ty: Type) -> llsize {\n     unsafe {\n-        return llvm::LLVMStoreSizeOfType(cx.td().lltd, ty.to_ref());\n+        return llvm::LLVMStoreSizeOfType(cx.td(), ty.to_ref());\n     }\n }\n \n // Returns the number of bytes between successive elements of type T in an\n // array of T. This is the \"ABI\" size. It includes any ABI-mandated padding.\n pub fn llsize_of_alloc(cx: &CrateContext, ty: Type) -> llsize {\n     unsafe {\n-        return llvm::LLVMABISizeOfType(cx.td().lltd, ty.to_ref());\n+        return llvm::LLVMABISizeOfType(cx.td(), ty.to_ref());\n     }\n }\n \n@@ -51,7 +51,7 @@ pub fn llsize_of_alloc(cx: &CrateContext, ty: Type) -> llsize {\n // below.\n pub fn llsize_of_real(cx: &CrateContext, ty: Type) -> llsize {\n     unsafe {\n-        let nbits = llvm::LLVMSizeOfTypeInBits(cx.td().lltd, ty.to_ref());\n+        let nbits = llvm::LLVMSizeOfTypeInBits(cx.td(), ty.to_ref());\n         if nbits & 7 != 0 {\n             // Not an even number of bytes, spills into \"next\" byte.\n             1 + (nbits >> 3)\n@@ -64,7 +64,7 @@ pub fn llsize_of_real(cx: &CrateContext, ty: Type) -> llsize {\n /// Returns the \"real\" size of the type in bits.\n pub fn llbitsize_of_real(cx: &CrateContext, ty: Type) -> llbits {\n     unsafe {\n-        llvm::LLVMSizeOfTypeInBits(cx.td().lltd, ty.to_ref())\n+        llvm::LLVMSizeOfTypeInBits(cx.td(), ty.to_ref())\n     }\n }\n \n@@ -86,7 +86,7 @@ pub fn llsize_of(cx: &CrateContext, ty: Type) -> ValueRef {\n // allocations inside a stack frame, which LLVM has a free hand in.\n pub fn llalign_of_pref(cx: &CrateContext, ty: Type) -> llalign {\n     unsafe {\n-        return llvm::LLVMPreferredAlignmentOfType(cx.td().lltd, ty.to_ref());\n+        return llvm::LLVMPreferredAlignmentOfType(cx.td(), ty.to_ref());\n     }\n }\n \n@@ -95,13 +95,13 @@ pub fn llalign_of_pref(cx: &CrateContext, ty: Type) -> llalign {\n // and similar ABI-mandated things.\n pub fn llalign_of_min(cx: &CrateContext, ty: Type) -> llalign {\n     unsafe {\n-        return llvm::LLVMABIAlignmentOfType(cx.td().lltd, ty.to_ref());\n+        return llvm::LLVMABIAlignmentOfType(cx.td(), ty.to_ref());\n     }\n }\n \n pub fn llelement_offset(cx: &CrateContext, struct_ty: Type, element: usize) -> u64 {\n     unsafe {\n-        return llvm::LLVMOffsetOfElement(cx.td().lltd,\n+        return llvm::LLVMOffsetOfElement(cx.td(),\n                                          struct_ty.to_ref(),\n                                          element as u32);\n     }"}, {"sha": "6513fdfd2f2c19251df063caab0ada32cd271089", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/958d5638254958ea42652de7444b63f2e67e7fe3/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=958d5638254958ea42652de7444b63f2e67e7fe3", "patch": "@@ -21,6 +21,8 @@\n #else\n #include \"llvm/Target/TargetLibraryInfo.h\"\n #endif\n+#include \"llvm/Target/TargetMachine.h\"\n+#include \"llvm/Target/TargetSubtargetInfo.h\"\n #include \"llvm/Transforms/IPO/PassManagerBuilder.h\"\n \n \n@@ -327,3 +329,28 @@ LLVMRustMarkAllFunctionsNounwind(LLVMModuleRef M) {\n         }\n     }\n }\n+\n+extern \"C\" void\n+LLVMRustSetDataLayoutFromTargetMachine(LLVMModuleRef Module,\n+                                       LLVMTargetMachineRef TMR) {\n+    TargetMachine *Target = unwrap(TMR);\n+#if LLVM_VERSION_MINOR >= 7\n+    if (const DataLayout *DL = Target->getDataLayout())\n+        unwrap(Module)->setDataLayout(*DL);\n+#elif LLVM_VERSION_MINOR >= 6\n+    if (const DataLayout *DL = Target->getSubtargetImpl()->getDataLayout())\n+        unwrap(Module)->setDataLayout(DL);\n+#else\n+    if (const DataLayout *DL = Target->getDataLayout())\n+        unwrap(Module)->setDataLayout(DL);\n+#endif\n+}\n+\n+extern \"C\" LLVMTargetDataRef\n+LLVMRustGetModuleDataLayout(LLVMModuleRef M) {\n+#if LLVM_VERSION_MINOR >= 7\n+    return wrap(&unwrap(M)->getDataLayout());\n+#else\n+    return wrap(unwrap(M)->getDataLayout());\n+#endif\n+}"}]}