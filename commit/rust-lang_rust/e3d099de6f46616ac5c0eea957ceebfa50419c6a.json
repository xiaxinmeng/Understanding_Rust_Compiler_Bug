{"sha": "e3d099de6f46616ac5c0eea957ceebfa50419c6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzZDA5OWRlNmY0NjYxNmFjNWMwZWVhOTU3Y2VlYmZhNTA0MTljNmE=", "commit": {"author": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2015-01-18T16:18:29Z"}, "committer": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2015-01-18T18:18:48Z"}, "message": "Fix #21356", "tree": {"sha": "59186e9ce913c33986412bc209b258d1134103bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59186e9ce913c33986412bc209b258d1134103bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3d099de6f46616ac5c0eea957ceebfa50419c6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3d099de6f46616ac5c0eea957ceebfa50419c6a", "html_url": "https://github.com/rust-lang/rust/commit/e3d099de6f46616ac5c0eea957ceebfa50419c6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3d099de6f46616ac5c0eea957ceebfa50419c6a/comments", "author": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcaeb6aa23ecba2dc2af870668a9239136d20fa3", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcaeb6aa23ecba2dc2af870668a9239136d20fa3", "html_url": "https://github.com/rust-lang/rust/commit/dcaeb6aa23ecba2dc2af870668a9239136d20fa3"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "957e59cbcdd41b3de89a23ae707736f3b1d4899d", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e3d099de6f46616ac5c0eea957ceebfa50419c6a/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3d099de6f46616ac5c0eea957ceebfa50419c6a/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=e3d099de6f46616ac5c0eea957ceebfa50419c6a", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use ast::{TokenTree, TtDelimited, TtSequence, TtToken};\n-use ast;\n+use ast::{self, TokenTree, TtDelimited, TtSequence, TtToken};\n use codemap::{Span, DUMMY_SP};\n use ext::base::{ExtCtxt, MacResult, SyntaxExtension};\n use ext::base::{NormalTT, TTMacroExpander};\n@@ -19,9 +18,8 @@ use ext::tt::macro_parser::{parse, parse_or_else};\n use parse::lexer::{new_tt_reader, new_tt_reader_with_doc_flag};\n use parse::parser::Parser;\n use parse::attr::ParserAttr;\n-use parse::token::{special_idents, gensym_ident, NtTT, Token};\n+use parse::token::{self, special_idents, gensym_ident, NtTT, Token};\n use parse::token::Token::*;\n-use parse::token;\n use print;\n use ptr::P;\n \n@@ -333,16 +331,20 @@ fn check_matcher<'a, I>(cx: &mut ExtCtxt, matcher: I, follow: &Token)\n \n                 let tok = if let TtToken(_, ref tok) = *token { tok } else { unreachable!() };\n                 // If T' is in the set FOLLOW(NT), continue. Else, reject.\n-                match &next_token {\n-                    &Eof => return Some((sp, tok.clone())),\n-                    _ if is_in_follow(cx, &next_token, frag_spec.as_str()) => continue,\n-                    next => {\n+                match (&next_token, is_in_follow(cx, &next_token, frag_spec.as_str())) {\n+                    (&Eof, _) => return Some((sp, tok.clone())),\n+                    (_, Ok(true)) => continue,\n+                    (next, Ok(false)) => {\n                         cx.span_err(sp, format!(\"`${0}:{1}` is followed by `{2}`, which \\\n                                                  is not allowed for `{1}` fragments\",\n                                                  name.as_str(), frag_spec.as_str(),\n                                                  token_to_string(next)).as_slice());\n                         continue\n                     },\n+                    (_, Err(msg)) => {\n+                        cx.span_err(sp, msg.as_slice());\n+                        continue\n+                    }\n                 }\n             },\n             TtSequence(sp, ref seq) => {\n@@ -409,12 +411,12 @@ fn check_matcher<'a, I>(cx: &mut ExtCtxt, matcher: I, follow: &Token)\n     last\n }\n \n-fn is_in_follow(cx: &ExtCtxt, tok: &Token, frag: &str) -> bool {\n+fn is_in_follow(_: &ExtCtxt, tok: &Token, frag: &str) -> Result<bool, String> {\n     if let &CloseDelim(_) = tok {\n-        return true;\n+        return Ok(true);\n     }\n \n-    match frag {\n+    Ok(match frag {\n         \"item\" => {\n             // since items *must* be followed by either a `;` or a `}`, we can\n             // accept anything after them\n@@ -453,7 +455,6 @@ fn is_in_follow(cx: &ExtCtxt, tok: &Token, frag: &str) -> bool {\n             // harmless\n             true\n         },\n-        _ => cx.bug(format!(\"unrecognized builtin nonterminal {}\",\n-                            frag).as_slice()),\n-    }\n+        _ => return Err(format!(\"unrecognized builtin nonterminal `{}`\", frag)),\n+    })\n }"}]}