{"sha": "c54f43a5d18c89f65f22a179e8e6d05ce9c1d36c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1NGY0M2E1ZDE4Yzg5ZjY1ZjIyYTE3OWU4ZTZkMDVjZTljMWQzNmM=", "commit": {"author": {"name": "Michael Sproul", "email": "micsproul@gmail.com", "date": "2015-04-15T08:12:28Z"}, "committer": {"name": "Michael Sproul", "email": "micsproul@gmail.com", "date": "2015-04-17T11:35:24Z"}, "message": "Update/add messages for E0{267,268,296,303}.", "tree": {"sha": "2852f446a4fbe1340f66b8afe486e87d0c6683d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2852f446a4fbe1340f66b8afe486e87d0c6683d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c54f43a5d18c89f65f22a179e8e6d05ce9c1d36c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c54f43a5d18c89f65f22a179e8e6d05ce9c1d36c", "html_url": "https://github.com/rust-lang/rust/commit/c54f43a5d18c89f65f22a179e8e6d05ce9c1d36c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c54f43a5d18c89f65f22a179e8e6d05ce9c1d36c/comments", "author": {"login": "michaelsproul", "id": 4452260, "node_id": "MDQ6VXNlcjQ0NTIyNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelsproul", "html_url": "https://github.com/michaelsproul", "followers_url": "https://api.github.com/users/michaelsproul/followers", "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}", "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions", "organizations_url": "https://api.github.com/users/michaelsproul/orgs", "repos_url": "https://api.github.com/users/michaelsproul/repos", "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelsproul/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelsproul", "id": 4452260, "node_id": "MDQ6VXNlcjQ0NTIyNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelsproul", "html_url": "https://github.com/michaelsproul", "followers_url": "https://api.github.com/users/michaelsproul/followers", "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}", "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions", "organizations_url": "https://api.github.com/users/michaelsproul/orgs", "repos_url": "https://api.github.com/users/michaelsproul/repos", "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelsproul/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd5eed4b8136849537d1b2c8655bd29dc976d89a", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd5eed4b8136849537d1b2c8655bd29dc976d89a", "html_url": "https://github.com/rust-lang/rust/commit/dd5eed4b8136849537d1b2c8655bd29dc976d89a"}], "stats": {"total": 39, "additions": 29, "deletions": 10}, "files": [{"sha": "fedcd582cd990c750775b1186428c8cb459ff3df", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 29, "deletions": 10, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c54f43a5d18c89f65f22a179e8e6d05ce9c1d36c/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c54f43a5d18c89f65f22a179e8e6d05ce9c1d36c/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=c54f43a5d18c89f65f22a179e8e6d05ce9c1d36c", "patch": "@@ -217,6 +217,26 @@ use Method::*;\n enum Method { GET, POST }\n \"##,\n \n+E0267: r##\"\n+This error indicates the use of loop keyword (break or continue) inside a\n+closure but outside of any loop. Break and continue can be used as normal\n+inside closures as long as they are also contained within a loop. To halt the\n+execution of a closure you should instead use a return statement.\n+\"##,\n+\n+E0268: r##\"\n+This error indicates the use of loop keyword (break or continue) outside of a\n+loop. Without a loop to break out of or continue in, no sensible action can be\n+taken.\n+\"##,\n+\n+E0296: r##\"\n+This error indicates that the given recursion limit could not be parsed. Ensure\n+that the value provided is a positive integer between quotes, like so:\n+\n+#![recursion_limit=\"1000\"]\n+\"##,\n+\n E0297: r##\"\n Patterns used to bind names must be irrefutable. That is, they must guarantee\n that a name will be extracted in all cases. Instead of pattern matching the\n@@ -277,21 +297,23 @@ In certain cases it is possible for sub-bindings to violate memory safety.\n Updates to the borrow checker in a future version of Rust may remove this\n restriction, but for now patterns must be rewritten without sub-bindings.\n \n-// Code like this...\n-match Some(5) {\n-    ref op_num @ Some(num) => ...\n+// Before.\n+match Some(\"hi\".to_string()) {\n+    ref op_string_ref @ Some(ref s) => ...\n     None => ...\n }\n \n-// ... should be updated to code like this.\n-match Some(5) {\n-    Some(num) => {\n-        let op_num = &Some(num);\n+// After.\n+match Some(\"hi\".to_string()) {\n+    Some(ref s) => {\n+        let op_string_ref = &Some(&s);\n         ...\n     }\n     None => ...\n }\n \n+The `op_string_ref` binding has type &Option<&String> in both cases.\n+\n See also https://github.com/rust-lang/rust/issues/14587\n \"##,\n \n@@ -338,8 +360,6 @@ register_diagnostics! {\n     E0264, // unknown external lang item\n     E0265, // recursive constant\n     E0266, // expected item\n-    E0267, // thing inside of a closure\n-    E0268, // thing outside of a loop\n     E0269, // not all control paths return a value\n     E0270, // computation may converge in a function marked as diverging\n     E0271, // type mismatch resolving\n@@ -357,7 +377,6 @@ register_diagnostics! {\n     E0283, // cannot resolve type\n     E0284, // cannot resolve type\n     E0285, // overflow evaluation builtin bounds\n-    E0296, // malformed recursion limit attribute\n     E0298, // mismatched types between arms\n     E0299, // mismatched types between arms\n     E0300, // unexpanded macro"}]}