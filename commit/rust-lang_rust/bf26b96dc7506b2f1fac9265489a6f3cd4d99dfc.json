{"sha": "bf26b96dc7506b2f1fac9265489a6f3cd4d99dfc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmMjZiOTZkYzc1MDZiMmYxZmFjOTI2NTQ4OWE2ZjNjZDRkOTlkZmM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-12-05T16:06:03Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-12-05T16:06:03Z"}, "message": "Update to latest rustc changes", "tree": {"sha": "7774683aac18397b2ac26aba7d45da89a31e55dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7774683aac18397b2ac26aba7d45da89a31e55dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf26b96dc7506b2f1fac9265489a6f3cd4d99dfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf26b96dc7506b2f1fac9265489a6f3cd4d99dfc", "html_url": "https://github.com/rust-lang/rust/commit/bf26b96dc7506b2f1fac9265489a6f3cd4d99dfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf26b96dc7506b2f1fac9265489a6f3cd4d99dfc/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd77411a1841f4b19ee80c5f1c623b605ac22594", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd77411a1841f4b19ee80c5f1c623b605ac22594", "html_url": "https://github.com/rust-lang/rust/commit/fd77411a1841f4b19ee80c5f1c623b605ac22594"}], "stats": {"total": 32, "additions": 18, "deletions": 14}, "files": [{"sha": "dcca7ec10a30d375ef04c727be553fb2d9653843", "filename": ".gitignore", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bf26b96dc7506b2f1fac9265489a6f3cd4d99dfc/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/bf26b96dc7506b2f1fac9265489a6f3cd4d99dfc/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=bf26b96dc7506b2f1fac9265489a6f3cd4d99dfc", "patch": "@@ -4,3 +4,4 @@ tex/*/out\n *.dot\n *.mir\n *.rs.bk\n+Cargo.lock"}, {"sha": "9d1f615e8d1b18be82794deb4fd8eecf3827744e", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf26b96dc7506b2f1fac9265489a6f3cd4d99dfc/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bf26b96dc7506b2f1fac9265489a6f3cd4d99dfc/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=bf26b96dc7506b2f1fac9265489a6f3cd4d99dfc", "patch": "@@ -29,7 +29,7 @@ cargo_metadata = { version = \"0.2\", optional = true }\n cargo_miri = [\"cargo_metadata\"]\n \n [dev-dependencies]\n-compiletest_rs = { version = \"0.3\", features = [\"tmp\"] }\n+compiletest_rs = { version = \"0.3.3\", features = [\"tmp\"] }\n \n [workspace]\n exclude = [\"xargo\", \"cargo-miri-test\", \"rustc_tests\"]"}, {"sha": "adb235edb67bb61ec029cb21b6962e9370455d71", "filename": "miri/fn_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf26b96dc7506b2f1fac9265489a6f3cd4d99dfc/miri%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf26b96dc7506b2f1fac9265489a6f3cd4d99dfc/miri%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Ffn_call.rs?ref=bf26b96dc7506b2f1fac9265489a6f3cd4d99dfc", "patch": "@@ -187,7 +187,7 @@ impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, super::Evaluator>\n                             .to_owned(),\n                     ),\n                 )?;\n-                let arg_dest = self.eval_lvalue(&mir::Lvalue::Local(arg_local))?;\n+                let arg_dest = self.eval_lvalue(&mir::Place::Local(arg_local))?;\n                 self.write_ptr(arg_dest, data, u8_ptr_ty)?;\n \n                 assert!(args.next().is_none(), \"__rust_maybe_catch_panic argument has more arguments than expected\");"}, {"sha": "b03518468b6915d682c685c37abadfa5ec786612", "filename": "miri/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bf26b96dc7506b2f1fac9265489a6f3cd4d99dfc/miri%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf26b96dc7506b2f1fac9265489a6f3cd4d99dfc/miri%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Flib.rs?ref=bf26b96dc7506b2f1fac9265489a6f3cd4d99dfc", "patch": "@@ -87,7 +87,7 @@ pub fn eval_main<'a, 'tcx: 'a>(\n \n             // First argument: pointer to main()\n             let main_ptr = ecx.memory_mut().create_fn_alloc(main_instance);\n-            let dest = ecx.eval_lvalue(&mir::Lvalue::Local(args.next().unwrap()))?;\n+            let dest = ecx.eval_lvalue(&mir::Place::Local(args.next().unwrap()))?;\n             let main_ty = main_instance.def.def_ty(ecx.tcx);\n             let main_ptr_ty = ecx.tcx.mk_fn_ptr(main_ty.fn_sig(ecx.tcx));\n             ecx.write_value(\n@@ -99,13 +99,13 @@ pub fn eval_main<'a, 'tcx: 'a>(\n             )?;\n \n             // Second argument (argc): 1\n-            let dest = ecx.eval_lvalue(&mir::Lvalue::Local(args.next().unwrap()))?;\n+            let dest = ecx.eval_lvalue(&mir::Place::Local(args.next().unwrap()))?;\n             let ty = ecx.tcx.types.isize;\n             ecx.write_primval(dest, PrimVal::Bytes(1), ty)?;\n \n             // FIXME: extract main source file path\n             // Third argument (argv): &[b\"foo\"]\n-            let dest = ecx.eval_lvalue(&mir::Lvalue::Local(args.next().unwrap()))?;\n+            let dest = ecx.eval_lvalue(&mir::Place::Local(args.next().unwrap()))?;\n             let ty = ecx.tcx.mk_imm_ptr(ecx.tcx.mk_imm_ptr(ecx.tcx.types.u8));\n             let foo = ecx.memory.allocate_cached(b\"foo\\0\");\n             let ptr_size = ecx.memory.pointer_size();\n@@ -261,7 +261,7 @@ impl<'tcx> Machine<'tcx> for Evaluator {\n         let usize = ecx.tcx.types.usize;\n \n         // First argument: size\n-        let dest = ecx.eval_lvalue(&mir::Lvalue::Local(args.next().unwrap()))?;\n+        let dest = ecx.eval_lvalue(&mir::Place::Local(args.next().unwrap()))?;\n         ecx.write_value(\n             ValTy {\n                 value: Value::ByVal(PrimVal::Bytes(size as u128)),\n@@ -271,7 +271,7 @@ impl<'tcx> Machine<'tcx> for Evaluator {\n         )?;\n \n         // Second argument: align\n-        let dest = ecx.eval_lvalue(&mir::Lvalue::Local(args.next().unwrap()))?;\n+        let dest = ecx.eval_lvalue(&mir::Place::Local(args.next().unwrap()))?;\n         ecx.write_value(\n             ValTy {\n                 value: Value::ByVal(PrimVal::Bytes(align as u128)),"}, {"sha": "8ec31f00e7f1c5b443f94658c153037cf0f8e35c", "filename": "miri/tls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf26b96dc7506b2f1fac9265489a6f3cd4d99dfc/miri%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf26b96dc7506b2f1fac9265489a6f3cd4d99dfc/miri%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Ftls.rs?ref=bf26b96dc7506b2f1fac9265489a6f3cd4d99dfc", "patch": "@@ -125,7 +125,7 @@ impl<'a, 'tcx: 'a> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, Evaluator> {\n             let arg_local = self.frame().mir.args_iter().next().ok_or(\n                 EvalErrorKind::AbiViolation(\"TLS dtor does not take enough arguments.\".to_owned()),\n             )?;\n-            let dest = self.eval_lvalue(&mir::Lvalue::Local(arg_local))?;\n+            let dest = self.eval_lvalue(&mir::Place::Local(arg_local))?;\n             let ty = self.tcx.mk_mut_ptr(self.tcx.types.u8);\n             self.write_ptr(dest, ptr, ty)?;\n "}, {"sha": "c30c9b439a46b495c1b91c6ccc8043abd137fbc6", "filename": "tests/compile-fail/invalid_bool.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf26b96dc7506b2f1fac9265489a6f3cd4d99dfc/tests%2Fcompile-fail%2Finvalid_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf26b96dc7506b2f1fac9265489a6f3cd4d99dfc/tests%2Fcompile-fail%2Finvalid_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_bool.rs?ref=bf26b96dc7506b2f1fac9265489a6f3cd4d99dfc", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n-    let b = unsafe { std::mem::transmute::<u8, bool>(2) };\n-    if b { unreachable!() } else { unreachable!() } //~ ERROR: invalid boolean value read\n+    let b = unsafe { std::mem::transmute::<u8, bool>(2) }; //~ ERROR: invalid boolean value read\n+    if b { unreachable!() } else { unreachable!() }\n }"}, {"sha": "4fee6e692bada0913b093aeb2892fac4f610d8ea", "filename": "tests/compile-fail/match_char.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf26b96dc7506b2f1fac9265489a6f3cd4d99dfc/tests%2Fcompile-fail%2Fmatch_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf26b96dc7506b2f1fac9265489a6f3cd4d99dfc/tests%2Fcompile-fail%2Fmatch_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmatch_char.rs?ref=bf26b96dc7506b2f1fac9265489a6f3cd4d99dfc", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n     assert!(std::char::from_u32(-1_i32 as u32).is_none());\n-    match unsafe { std::mem::transmute::<i32, char>(-1) } {\n-        'a' => {}, //~ERROR tried to interpret an invalid 32-bit value as a char: 4294967295\n+    match unsafe { std::mem::transmute::<i32, char>(-1) } { //~ERROR tried to interpret an invalid 32-bit value as a char: 4294967295\n+        'a' => {},\n         'b' => {},\n         _ => {},\n     }"}, {"sha": "71306cc62bf7f7dfdf507e7ba53bc7fe9b298037", "filename": "tests/compile-fail/never_say_never.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf26b96dc7506b2f1fac9265489a6f3cd4d99dfc/tests%2Fcompile-fail%2Fnever_say_never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf26b96dc7506b2f1fac9265489a6f3cd4d99dfc/tests%2Fcompile-fail%2Fnever_say_never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnever_say_never.rs?ref=bf26b96dc7506b2f1fac9265489a6f3cd4d99dfc", "patch": "@@ -7,7 +7,7 @@\n fn main() {\n     let y = &5;\n     let x: ! = unsafe {\n-        *(y as *const _ as *const !) //~ ERROR tried to access a dead local variable\n+        *(y as *const _ as *const !) //~ ERROR entered unreachable code\n     };\n     f(x)\n }"}, {"sha": "064386b3d010ce0b6ac78ee511328264785d76b2", "filename": "tests/compile-fail/reference_to_packed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf26b96dc7506b2f1fac9265489a6f3cd4d99dfc/tests%2Fcompile-fail%2Freference_to_packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf26b96dc7506b2f1fac9265489a6f3cd4d99dfc/tests%2Fcompile-fail%2Freference_to_packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freference_to_packed.rs?ref=bf26b96dc7506b2f1fac9265489a6f3cd4d99dfc", "patch": "@@ -14,6 +14,6 @@ fn main() {\n         x: 42,\n         y: 99,\n     };\n-    let p = &foo.x;\n+    let p = unsafe { &foo.x };\n     let i = *p; //~ ERROR tried to access memory with alignment 1, but alignment 4 is required\n }"}, {"sha": "dc807bfde7a349bacb80b40376d4e830baeb9f9e", "filename": "tests/run-pass/issue-36278-prefix-nesting.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bf26b96dc7506b2f1fac9265489a6f3cd4d99dfc/tests%2Frun-pass%2Fissue-36278-prefix-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf26b96dc7506b2f1fac9265489a6f3cd4d99dfc/tests%2Frun-pass%2Fissue-36278-prefix-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-36278-prefix-nesting.rs?ref=bf26b96dc7506b2f1fac9265489a6f3cd4d99dfc", "patch": "@@ -22,7 +22,10 @@ fn main() {\n     let size_of_sized; let size_of_unsized;\n     let x: Box<Ack<[u8; 0]>> = Box::new(P([0; SZ], P([0; SZ], [0; 0])));\n     size_of_sized = mem::size_of_val::<Ack<_>>(&x);\n+    let align_of_sized = mem::align_of_val::<Ack<_>>(&x);\n     let y: Box<Ack<[u8   ]>> = x;\n     size_of_unsized = mem::size_of_val::<Ack<_>>(&y);\n     assert_eq!(size_of_sized, size_of_unsized);\n+    assert_eq!(align_of_sized, 1);\n+    assert_eq!(mem::align_of_val::<Ack<_>>(&y), 1);\n }"}]}