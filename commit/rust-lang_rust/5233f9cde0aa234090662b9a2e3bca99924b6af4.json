{"sha": "5233f9cde0aa234090662b9a2e3bca99924b6af4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyMzNmOWNkZTBhYTIzNDA5MDY2MmI5YTJlM2JjYTk5OTI0YjZhZjQ=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-10-28T05:41:58Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-10-28T05:41:58Z"}, "message": "Add support for `crate` shorthand for `pub(crate)`", "tree": {"sha": "60a6acd2b63b55db0e9bf09a2005f08bc2bf02c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60a6acd2b63b55db0e9bf09a2005f08bc2bf02c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5233f9cde0aa234090662b9a2e3bca99924b6af4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5233f9cde0aa234090662b9a2e3bca99924b6af4", "html_url": "https://github.com/rust-lang/rust/commit/5233f9cde0aa234090662b9a2e3bca99924b6af4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5233f9cde0aa234090662b9a2e3bca99924b6af4/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2a5c78e4b0930134ba1a6a2fb2ee2045ee23abd", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2a5c78e4b0930134ba1a6a2fb2ee2045ee23abd", "html_url": "https://github.com/rust-lang/rust/commit/e2a5c78e4b0930134ba1a6a2fb2ee2045ee23abd"}], "stats": {"total": 91, "additions": 62, "deletions": 29}, "files": [{"sha": "f2041542cc4b3231cdfb2399b2b738821c268b95", "filename": "Cargo.lock", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/5233f9cde0aa234090662b9a2e3bca99924b6af4/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/5233f9cde0aa234090662b9a2e3bca99924b6af4/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=5233f9cde0aa234090662b9a2e3bca99924b6af4", "patch": "@@ -1,24 +1,3 @@\n-[root]\n-name = \"rustfmt-nightly\"\n-version = \"0.2.9\"\n-dependencies = [\n- \"diff 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"getopts 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.32 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"strings 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"toml 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-segmentation 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"aho-corasick\"\n version = \"0.6.3\"\n@@ -115,6 +94,27 @@ name = \"regex-syntax\"\n version = \"0.4.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"rustfmt-nightly\"\n+version = \"0.2.9\"\n+dependencies = [\n+ \"diff 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"getopts 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.32 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"strings 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"toml 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-segmentation 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"serde\"\n version = \"1.0.15\""}, {"sha": "562986da6a9c1a662bfbed7c4d79d698fb750580", "filename": "src/items.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5233f9cde0aa234090662b9a2e3bca99924b6af4/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5233f9cde0aa234090662b9a2e3bca99924b6af4/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=5233f9cde0aa234090662b9a2e3bca99924b6af4", "patch": "@@ -14,7 +14,7 @@ use std::borrow::Cow;\n use std::cmp::min;\n \n use syntax::{abi, ast, ptr, symbol};\n-use syntax::ast::ImplItem;\n+use syntax::ast::{CrateSugar, ImplItem};\n use syntax::codemap::{BytePos, Span};\n use syntax::visit;\n \n@@ -1765,10 +1765,12 @@ fn rewrite_fn_base(\n     }\n \n     // Skip `pub(crate)`.\n-    let lo_after_visibility = if let ast::Visibility::Crate(s) = fn_sig.visibility {\n-        context.codemap.span_after(mk_sp(s.hi(), span.hi()), \")\")\n-    } else {\n-        span.lo()\n+    let lo_after_visibility = match fn_sig.visibility {\n+        ast::Visibility::Crate(s, CrateSugar::PubCrate) => {\n+            context.codemap.span_after(mk_sp(s.hi(), span.hi()), \")\")\n+        }\n+        ast::Visibility::Crate(s, CrateSugar::JustCrate) => s.hi(),\n+        _ => span.lo(),\n     };\n     // A conservative estimation, to goal is to be over all parens in generics\n     let args_start = fn_sig"}, {"sha": "3bdadf460e21b60a7cd24862c8cd4c6996922777", "filename": "src/utils.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5233f9cde0aa234090662b9a2e3bca99924b6af4/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5233f9cde0aa234090662b9a2e3bca99924b6af4/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=5233f9cde0aa234090662b9a2e3bca99924b6af4", "patch": "@@ -11,8 +11,8 @@\n use std::borrow::Cow;\n \n use syntax::{abi, ptr};\n-use syntax::ast::{self, Attribute, MetaItem, MetaItemKind, NestedMetaItem, NestedMetaItemKind,\n-                  Path, Visibility};\n+use syntax::ast::{self, Attribute, CrateSugar, MetaItem, MetaItemKind, NestedMetaItem,\n+                  NestedMetaItemKind, Path, Visibility};\n use syntax::codemap::{BytePos, Span, NO_EXPANSION};\n \n use rewrite::RewriteContext;\n@@ -37,7 +37,8 @@ pub fn format_visibility(vis: &Visibility) -> Cow<'static, str> {\n     match *vis {\n         Visibility::Public => Cow::from(\"pub \"),\n         Visibility::Inherited => Cow::from(\"\"),\n-        Visibility::Crate(_) => Cow::from(\"pub(crate) \"),\n+        Visibility::Crate(_, CrateSugar::PubCrate) => Cow::from(\"pub(crate) \"),\n+        Visibility::Crate(_, CrateSugar::JustCrate) => Cow::from(\"crate \"),\n         Visibility::Restricted { ref path, .. } => {\n             let Path { ref segments, .. } = **path;\n             let mut segments_iter = segments.iter().map(|seg| seg.identifier.name.to_string());"}, {"sha": "ff08b04c704f88839d7f255ebdb211319644dc72", "filename": "tests/source/fn-simple.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5233f9cde0aa234090662b9a2e3bca99924b6af4/tests%2Fsource%2Ffn-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5233f9cde0aa234090662b9a2e3bca99924b6af4/tests%2Fsource%2Ffn-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffn-simple.rs?ref=5233f9cde0aa234090662b9a2e3bca99924b6af4", "patch": "@@ -62,3 +62,5 @@ mod foo {\n \n // #2082\n pub(crate) fn init() {}\n+\n+crate fn init() {}"}, {"sha": "30051fa72ee7d0e6a70027ccdb614bfb1aa1f266", "filename": "tests/source/pub-restricted.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5233f9cde0aa234090662b9a2e3bca99924b6af4/tests%2Fsource%2Fpub-restricted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5233f9cde0aa234090662b9a2e3bca99924b6af4/tests%2Fsource%2Fpub-restricted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fpub-restricted.rs?ref=5233f9cde0aa234090662b9a2e3bca99924b6af4", "patch": "@@ -24,6 +24,19 @@ pub(  crate  ) enum WriteState<D> {\n     WriteData(Writer<D>),\n }\n \n+  crate   enum WriteState<D> {\n+    WriteId {\n+        id: U64Writer,\n+        size: U64Writer,\n+        payload: Option<Writer<D>>,\n+    },\n+    WriteSize {\n+        size: U64Writer,\n+        payload: Option<Writer<D>>,\n+    },\n+    WriteData(Writer<D>),\n+}\n+\n pub(in  ::global::  path :: to::some_mod  ) enum WriteState<D> {\n     WriteId {\n         id: U64Writer,"}, {"sha": "6bbdf4be95ded168526cfa7b62144415236e4f5b", "filename": "tests/target/fn-simple.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5233f9cde0aa234090662b9a2e3bca99924b6af4/tests%2Ftarget%2Ffn-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5233f9cde0aa234090662b9a2e3bca99924b6af4/tests%2Ftarget%2Ffn-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-simple.rs?ref=5233f9cde0aa234090662b9a2e3bca99924b6af4", "patch": "@@ -104,3 +104,5 @@ mod foo {\n \n // #2082\n pub(crate) fn init() {}\n+\n+crate fn init() {}"}, {"sha": "8cc2ade612afa71e390295adc4ba2a413bf9c4e9", "filename": "tests/target/pub-restricted.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5233f9cde0aa234090662b9a2e3bca99924b6af4/tests%2Ftarget%2Fpub-restricted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5233f9cde0aa234090662b9a2e3bca99924b6af4/tests%2Ftarget%2Fpub-restricted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fpub-restricted.rs?ref=5233f9cde0aa234090662b9a2e3bca99924b6af4", "patch": "@@ -24,6 +24,19 @@ pub(crate) enum WriteState<D> {\n     WriteData(Writer<D>),\n }\n \n+crate enum WriteState<D> {\n+    WriteId {\n+        id: U64Writer,\n+        size: U64Writer,\n+        payload: Option<Writer<D>>,\n+    },\n+    WriteSize {\n+        size: U64Writer,\n+        payload: Option<Writer<D>>,\n+    },\n+    WriteData(Writer<D>),\n+}\n+\n pub(in global::path::to::some_mod) enum WriteState<D> {\n     WriteId {\n         id: U64Writer,"}]}