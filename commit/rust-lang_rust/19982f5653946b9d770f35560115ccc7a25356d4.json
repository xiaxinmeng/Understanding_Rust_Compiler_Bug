{"sha": "19982f5653946b9d770f35560115ccc7a25356d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5OTgyZjU2NTM5NDZiOWQ3NzBmMzU1NjAxMTVjY2M3YTI1MzU2ZDQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-19T02:46:19Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-20T07:28:12Z"}, "message": "Rc: refactor away PhantomData noise.", "tree": {"sha": "1971d148ee9ba2c13cdbaa600c1dcd8da0f66fa4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1971d148ee9ba2c13cdbaa600c1dcd8da0f66fa4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19982f5653946b9d770f35560115ccc7a25356d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19982f5653946b9d770f35560115ccc7a25356d4", "html_url": "https://github.com/rust-lang/rust/commit/19982f5653946b9d770f35560115ccc7a25356d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19982f5653946b9d770f35560115ccc7a25356d4/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "689c64c469152ab6de15c3950d5fe92ba95257f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/689c64c469152ab6de15c3950d5fe92ba95257f2", "html_url": "https://github.com/rust-lang/rust/commit/689c64c469152ab6de15c3950d5fe92ba95257f2"}], "stats": {"total": 53, "additions": 30, "deletions": 23}, "files": [{"sha": "f9af752cae6cb2197827c1deee4ec67940ebf39d", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 30, "deletions": 23, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/19982f5653946b9d770f35560115ccc7a25356d4/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19982f5653946b9d770f35560115ccc7a25356d4/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=19982f5653946b9d770f35560115ccc7a25356d4", "patch": "@@ -286,6 +286,19 @@ impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Rc<U>> for Rc<T> {}\n #[unstable(feature = \"dispatch_from_dyn\", issue = \"0\")]\n impl<T: ?Sized + Unsize<U>, U: ?Sized> DispatchFromDyn<Rc<U>> for Rc<T> {}\n \n+impl<T: ?Sized> Rc<T> {\n+    fn from_inner(ptr: NonNull<RcBox<T>>) -> Self {\n+        Self {\n+            ptr,\n+            phantom: PhantomData,\n+        }\n+    }\n+\n+    unsafe fn from_ptr(ptr: *mut RcBox<T>) -> Self {\n+        Self::from_inner(NonNull::new_unchecked(ptr))\n+    }\n+}\n+\n impl<T> Rc<T> {\n     /// Constructs a new `Rc<T>`.\n     ///\n@@ -298,18 +311,15 @@ impl<T> Rc<T> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new(value: T) -> Rc<T> {\n-        Rc {\n-            // there is an implicit weak pointer owned by all the strong\n-            // pointers, which ensures that the weak destructor never frees\n-            // the allocation while the strong destructor is running, even\n-            // if the weak pointer is stored inside the strong one.\n-            ptr: Box::into_raw_non_null(box RcBox {\n-                strong: Cell::new(1),\n-                weak: Cell::new(1),\n-                value,\n-            }),\n-            phantom: PhantomData,\n-        }\n+        // There is an implicit weak pointer owned by all the strong\n+        // pointers, which ensures that the weak destructor never frees\n+        // the allocation while the strong destructor is running, even\n+        // if the weak pointer is stored inside the strong one.\n+        Self::from_inner(Box::into_raw_non_null(box RcBox {\n+            strong: Cell::new(1),\n+            weak: Cell::new(1),\n+            value,\n+        }))\n     }\n \n     /// Constructs a new `Pin<Rc<T>>`. If `T` does not implement `Unpin`, then\n@@ -422,10 +432,7 @@ impl<T: ?Sized> Rc<T> {\n         let fake_ptr = ptr as *mut RcBox<T>;\n         let rc_ptr = set_data_ptr(fake_ptr, (ptr as *mut u8).offset(-offset));\n \n-        Rc {\n-            ptr: NonNull::new_unchecked(rc_ptr),\n-            phantom: PhantomData,\n-        }\n+        Self::from_ptr(rc_ptr)\n     }\n \n     /// Consumes the `Rc`, returning the wrapped pointer as `NonNull<T>`.\n@@ -683,7 +690,7 @@ impl Rc<dyn Any> {\n         if (*self).is::<T>() {\n             let ptr = self.ptr.cast::<RcBox<T>>();\n             forget(self);\n-            Ok(Rc { ptr, phantom: PhantomData })\n+            Ok(Rc::from_inner(ptr))\n         } else {\n             Err(self)\n         }\n@@ -731,7 +738,7 @@ impl<T: ?Sized> Rc<T> {\n             // Free the allocation without dropping its contents\n             box_free(box_unique);\n \n-            Rc { ptr: NonNull::new_unchecked(ptr), phantom: PhantomData }\n+            Self::from_ptr(ptr)\n         }\n     }\n }\n@@ -758,7 +765,7 @@ impl<T> Rc<[T]> {\n             &mut (*ptr).value as *mut [T] as *mut T,\n             v.len());\n \n-        Rc { ptr: NonNull::new_unchecked(ptr), phantom: PhantomData }\n+        Self::from_ptr(ptr)\n     }\n }\n \n@@ -800,7 +807,7 @@ impl<T: Clone> RcFromSlice<T> for Rc<[T]> {\n             // Pointer to first element\n             let elems = &mut (*ptr).value as *mut [T] as *mut T;\n \n-            let mut guard = Guard{\n+            let mut guard = Guard {\n                 mem: NonNull::new_unchecked(mem),\n                 elems: elems,\n                 layout: layout,\n@@ -815,7 +822,7 @@ impl<T: Clone> RcFromSlice<T> for Rc<[T]> {\n             // All clear. Forget the guard so it doesn't free the new RcBox.\n             forget(guard);\n \n-            Rc { ptr: NonNull::new_unchecked(ptr), phantom: PhantomData }\n+            Self::from_ptr(ptr)\n         }\n     }\n }\n@@ -907,7 +914,7 @@ impl<T: ?Sized> Clone for Rc<T> {\n     #[inline]\n     fn clone(&self) -> Rc<T> {\n         self.inc_strong();\n-        Rc { ptr: self.ptr, phantom: PhantomData }\n+        Self::from_inner(self.ptr)\n     }\n }\n \n@@ -1463,7 +1470,7 @@ impl<T: ?Sized> Weak<T> {\n             None\n         } else {\n             inner.inc_strong();\n-            Some(Rc { ptr: self.ptr, phantom: PhantomData })\n+            Some(Rc::from_inner(self.ptr))\n         }\n     }\n "}]}