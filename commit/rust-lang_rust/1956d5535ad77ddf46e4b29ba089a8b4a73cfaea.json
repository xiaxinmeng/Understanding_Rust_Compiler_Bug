{"sha": "1956d5535ad77ddf46e4b29ba089a8b4a73cfaea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5NTZkNTUzNWFkNzdkZGY0NmU0YjI5YmEwODlhOGI0YTczY2ZhZWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-03T20:31:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-03T20:31:21Z"}, "message": "Auto merge of #46435 - cuviper:min-llvm-3.9, r=rkruppe\n\nAssume at least LLVM 3.9 in rustllvm and rustc_llvm\n\nWe bumped the minimum LLVM to 3.9 in #45326.  This just cleans up the conditional code in the `rustllvm` C++ wrappers to assume that minimum, and similarly cleans up the `rustc_llvm` build script.", "tree": {"sha": "e9c9fa22c52bf5a67db80829ab984aadc5da650d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9c9fa22c52bf5a67db80829ab984aadc5da650d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1956d5535ad77ddf46e4b29ba089a8b4a73cfaea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1956d5535ad77ddf46e4b29ba089a8b4a73cfaea", "html_url": "https://github.com/rust-lang/rust/commit/1956d5535ad77ddf46e4b29ba089a8b4a73cfaea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1956d5535ad77ddf46e4b29ba089a8b4a73cfaea/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2b11f30b2946119c23594bc2b3bec3c38d3ae9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2b11f30b2946119c23594bc2b3bec3c38d3ae9a", "html_url": "https://github.com/rust-lang/rust/commit/f2b11f30b2946119c23594bc2b3bec3c38d3ae9a"}, {"sha": "5c4452aaaf339fa4e4188f2e156af7251eed4119", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c4452aaaf339fa4e4188f2e156af7251eed4119", "html_url": "https://github.com/rust-lang/rust/commit/5c4452aaaf339fa4e4188f2e156af7251eed4119"}], "stats": {"total": 193, "additions": 13, "deletions": 180}, "files": [{"sha": "47ca30db0c20a82557d8608438d590e85a5c77ad", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 12, "deletions": 32, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/1956d5535ad77ddf46e4b29ba089a8b4a73cfaea/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1956d5535ad77ddf46e4b29ba089a8b4a73cfaea/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=1956d5535ad77ddf46e4b29ba089a8b4a73cfaea", "patch": "@@ -17,27 +17,14 @@ use std::path::{PathBuf, Path};\n \n use build_helper::output;\n \n-fn detect_llvm_link(major: u32, minor: u32, llvm_config: &Path)\n-    -> (&'static str, Option<&'static str>) {\n-    if major > 3 || (major == 3 && minor >= 9) {\n-        // Force the link mode we want, preferring static by default, but\n-        // possibly overridden by `configure --enable-llvm-link-shared`.\n-        if env::var_os(\"LLVM_LINK_SHARED\").is_some() {\n-            return (\"dylib\", Some(\"--link-shared\"));\n-        } else {\n-            return (\"static\", Some(\"--link-static\"));\n-        }\n-    } else if major == 3 && minor == 8 {\n-        // Find out LLVM's default linking mode.\n-        let mut mode_cmd = Command::new(llvm_config);\n-        mode_cmd.arg(\"--shared-mode\");\n-        if output(&mut mode_cmd).trim() == \"shared\" {\n-            return (\"dylib\", None);\n-        } else {\n-            return (\"static\", None);\n-        }\n+fn detect_llvm_link() -> (&'static str, &'static str) {\n+    // Force the link mode we want, preferring static by default, but\n+    // possibly overridden by `configure --enable-llvm-link-shared`.\n+    if env::var_os(\"LLVM_LINK_SHARED\").is_some() {\n+        (\"dylib\", \"--link-shared\")\n+    } else {\n+        (\"static\", \"--link-static\")\n     }\n-    (\"static\", None)\n }\n \n fn main() {\n@@ -96,11 +83,11 @@ fn main() {\n     let version_output = output(&mut version_cmd);\n     let mut parts = version_output.split('.').take(2)\n         .filter_map(|s| s.parse::<u32>().ok());\n-    let (major, minor) =\n+    let (major, _minor) =\n         if let (Some(major), Some(minor)) = (parts.next(), parts.next()) {\n             (major, minor)\n         } else {\n-            (3, 7)\n+            (3, 9)\n         };\n \n     if major > 3 {\n@@ -171,17 +158,13 @@ fn main() {\n        .cpp_link_stdlib(None) // we handle this below\n        .compile(\"rustllvm\");\n \n-    let (llvm_kind, llvm_link_arg) = detect_llvm_link(major, minor, &llvm_config);\n+    let (llvm_kind, llvm_link_arg) = detect_llvm_link();\n \n     // Link in all LLVM libraries, if we're uwring the \"wrong\" llvm-config then\n     // we don't pick up system libs because unfortunately they're for the host\n     // of llvm-config, not the target that we're attempting to link.\n     let mut cmd = Command::new(&llvm_config);\n-    cmd.arg(\"--libs\");\n-\n-    if let Some(link_arg) = llvm_link_arg {\n-        cmd.arg(link_arg);\n-    }\n+    cmd.arg(llvm_link_arg).arg(\"--libs\");\n \n     if !is_crossed {\n         cmd.arg(\"--system-libs\");\n@@ -230,10 +213,7 @@ fn main() {\n     // hack around this by replacing the host triple with the target and pray\n     // that those -L directories are the same!\n     let mut cmd = Command::new(&llvm_config);\n-    if let Some(link_arg) = llvm_link_arg {\n-        cmd.arg(link_arg);\n-    }\n-    cmd.arg(\"--ldflags\");\n+    cmd.arg(llvm_link_arg).arg(\"--ldflags\");\n     for lib in output(&mut cmd).split_whitespace() {\n         if lib.starts_with(\"-LIBPATH:\") {\n             println!(\"cargo:rustc-link-search=native={}\", &lib[9..]);"}, {"sha": "b110013ceaed34134fbe7642a18e763cd0847b57", "filename": "src/rustllvm/ArchiveWrapper.cpp", "status": "modified", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/1956d5535ad77ddf46e4b29ba089a8b4a73cfaea/src%2Frustllvm%2FArchiveWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/1956d5535ad77ddf46e4b29ba089a8b4a73cfaea/src%2Frustllvm%2FArchiveWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FArchiveWrapper.cpp?ref=1956d5535ad77ddf46e4b29ba089a8b4a73cfaea", "patch": "@@ -24,11 +24,7 @@ struct RustArchiveMember {\n \n   RustArchiveMember()\n       : Filename(nullptr), Name(nullptr),\n-#if LLVM_VERSION_GE(3, 8)\n         Child(nullptr, nullptr, nullptr)\n-#else\n-        Child(nullptr, nullptr)\n-#endif\n   {\n   }\n   ~RustArchiveMember() {}\n@@ -38,13 +34,9 @@ struct RustArchiveIterator {\n   bool First;\n   Archive::child_iterator Cur;\n   Archive::child_iterator End;\n-#if LLVM_VERSION_GE(3, 9)\n   Error Err;\n \n   RustArchiveIterator() : First(true), Err(Error::success()) {}\n-#else\n-  RustArchiveIterator() : First(true) {}\n-#endif\n };\n \n enum class LLVMRustArchiveKind {\n@@ -84,19 +76,11 @@ extern \"C\" LLVMRustArchiveRef LLVMRustOpenArchive(char *Path) {\n     return nullptr;\n   }\n \n-#if LLVM_VERSION_LE(3, 8)\n-  ErrorOr<std::unique_ptr<Archive>> ArchiveOr =\n-#else\n   Expected<std::unique_ptr<Archive>> ArchiveOr =\n-#endif\n       Archive::create(BufOr.get()->getMemBufferRef());\n \n   if (!ArchiveOr) {\n-#if LLVM_VERSION_LE(3, 8)\n-    LLVMRustSetLastError(ArchiveOr.getError().message().c_str());\n-#else\n     LLVMRustSetLastError(toString(ArchiveOr.takeError()).c_str());\n-#endif\n     return nullptr;\n   }\n \n@@ -114,16 +98,12 @@ extern \"C\" LLVMRustArchiveIteratorRef\n LLVMRustArchiveIteratorNew(LLVMRustArchiveRef RustArchive) {\n   Archive *Archive = RustArchive->getBinary();\n   RustArchiveIterator *RAI = new RustArchiveIterator();\n-#if LLVM_VERSION_LE(3, 8)\n-  RAI->Cur = Archive->child_begin();\n-#else\n   RAI->Cur = Archive->child_begin(RAI->Err);\n   if (RAI->Err) {\n     LLVMRustSetLastError(toString(std::move(RAI->Err)).c_str());\n     delete RAI;\n     return nullptr;\n   }\n-#endif\n   RAI->End = Archive->child_end();\n   return RAI;\n }\n@@ -141,29 +121,18 @@ LLVMRustArchiveIteratorNext(LLVMRustArchiveIteratorRef RAI) {\n   // but instead advance it *before* fetching the child in all later calls.\n   if (!RAI->First) {\n     ++RAI->Cur;\n-#if LLVM_VERSION_GE(3, 9)\n     if (RAI->Err) {\n       LLVMRustSetLastError(toString(std::move(RAI->Err)).c_str());\n       return nullptr;\n     }\n-#endif\n   } else {\n     RAI->First = false;\n   }\n \n   if (RAI->Cur == RAI->End)\n     return nullptr;\n \n-#if LLVM_VERSION_EQ(3, 8)\n-  const ErrorOr<Archive::Child> *Cur = RAI->Cur.operator->();\n-  if (!*Cur) {\n-    LLVMRustSetLastError(Cur->getError().message().c_str());\n-    return nullptr;\n-  }\n-  const Archive::Child &Child = Cur->get();\n-#else\n   const Archive::Child &Child = *RAI->Cur.operator->();\n-#endif\n   Archive::Child *Ret = new Archive::Child(Child);\n \n   return Ret;\n@@ -239,18 +208,13 @@ LLVMRustWriteArchive(char *Dst, size_t NumMembers,\n                      const LLVMRustArchiveMemberRef *NewMembers,\n                      bool WriteSymbtab, LLVMRustArchiveKind RustKind) {\n \n-#if LLVM_VERSION_LE(3, 8)\n-  std::vector<NewArchiveIterator> Members;\n-#else\n   std::vector<NewArchiveMember> Members;\n-#endif\n   auto Kind = fromRust(RustKind);\n \n   for (size_t I = 0; I < NumMembers; I++) {\n     auto Member = NewMembers[I];\n     assert(Member->Name);\n     if (Member->Filename) {\n-#if LLVM_VERSION_GE(3, 9)\n       Expected<NewArchiveMember> MOrErr =\n           NewArchiveMember::getFile(Member->Filename, true);\n       if (!MOrErr) {\n@@ -261,30 +225,17 @@ LLVMRustWriteArchive(char *Dst, size_t NumMembers,\n       MOrErr->MemberName = sys::path::filename(MOrErr->MemberName);\n #endif\n       Members.push_back(std::move(*MOrErr));\n-#elif LLVM_VERSION_EQ(3, 8)\n-      Members.push_back(NewArchiveIterator(Member->Filename));\n-#else\n-      Members.push_back(NewArchiveIterator(Member->Filename, Member->Name));\n-#endif\n     } else {\n-#if LLVM_VERSION_LE(3, 8)\n-      Members.push_back(NewArchiveIterator(Member->Child, Member->Name));\n-#else\n       Expected<NewArchiveMember> MOrErr =\n           NewArchiveMember::getOldMember(Member->Child, true);\n       if (!MOrErr) {\n         LLVMRustSetLastError(toString(MOrErr.takeError()).c_str());\n         return LLVMRustResult::Failure;\n       }\n       Members.push_back(std::move(*MOrErr));\n-#endif\n     }\n   }\n-#if LLVM_VERSION_GE(3, 8)\n   auto Pair = writeArchive(Dst, Members, WriteSymbtab, Kind, true, false);\n-#else\n-  auto Pair = writeArchive(Dst, Members, WriteSymbtab, Kind, true);\n-#endif\n   if (!Pair.second)\n     return LLVMRustResult::Success;\n   LLVMRustSetLastError(Pair.second.message().c_str());"}, {"sha": "1797e19c549cf41a490adae82445b988b905865d", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1956d5535ad77ddf46e4b29ba089a8b4a73cfaea/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/1956d5535ad77ddf46e4b29ba089a8b4a73cfaea/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=1956d5535ad77ddf46e4b29ba089a8b4a73cfaea", "patch": "@@ -59,9 +59,6 @@ extern \"C\" void LLVMInitializePasses() {\n   initializeVectorization(Registry);\n   initializeIPO(Registry);\n   initializeAnalysis(Registry);\n-#if LLVM_VERSION_EQ(3, 7)\n-  initializeIPA(Registry);\n-#endif\n   initializeTransformUtils(Registry);\n   initializeInstCombine(Registry);\n   initializeInstrumentation(Registry);\n@@ -273,18 +270,10 @@ enum class LLVMRustRelocMode {\n   ROPIRWPI,\n };\n \n-#if LLVM_VERSION_LE(3, 8)\n-static Reloc::Model fromRust(LLVMRustRelocMode RustReloc) {\n-#else\n static Optional<Reloc::Model> fromRust(LLVMRustRelocMode RustReloc) {\n-#endif\n   switch (RustReloc) {\n   case LLVMRustRelocMode::Default:\n-#if LLVM_VERSION_LE(3, 8)\n-    return Reloc::Default;\n-#else\n     return None;\n-#endif\n   case LLVMRustRelocMode::Static:\n     return Reloc::Static;\n   case LLVMRustRelocMode::PIC:\n@@ -390,9 +379,6 @@ extern \"C\" LLVMTargetMachineRef LLVMRustCreateTargetMachine(\n   }\n \n   TargetOptions Options;\n-#if LLVM_VERSION_LE(3, 8)\n-  Options.PositionIndependentExecutable = PositionIndependentExecutable;\n-#endif\n \n   Options.FloatABIType = FloatABI::Default;\n   if (UseSoftFloat) {\n@@ -720,10 +706,6 @@ extern \"C\" void LLVMRustRunRestrictionPass(LLVMModuleRef M, char **Symbols,\n                                            size_t Len) {\n   llvm::legacy::PassManager passes;\n \n-#if LLVM_VERSION_LE(3, 8)\n-  ArrayRef<const char *> Ref(Symbols, Len);\n-  passes.add(llvm::createInternalizePass(Ref));\n-#else\n   auto PreserveFunctions = [=](const GlobalValue &GV) {\n     for (size_t I = 0; I < Len; I++) {\n       if (GV.getName() == Symbols[I]) {\n@@ -734,7 +716,6 @@ extern \"C\" void LLVMRustRunRestrictionPass(LLVMModuleRef M, char **Symbols,\n   };\n \n   passes.add(llvm::createInternalizePass(PreserveFunctions));\n-#endif\n \n   passes.run(*unwrap(M));\n }\n@@ -770,9 +751,7 @@ extern \"C\" LLVMTargetDataRef LLVMRustGetModuleDataLayout(LLVMModuleRef M) {\n }\n \n extern \"C\" void LLVMRustSetModulePIELevel(LLVMModuleRef M) {\n-#if LLVM_VERSION_GE(3, 9)\n   unwrap(M)->setPIELevel(PIELevel::Level::Large);\n-#endif\n }\n \n extern \"C\" bool"}, {"sha": "ee48d49da46919d396930d5683e7755b3e753c6b", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 1, "deletions": 74, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/1956d5535ad77ddf46e4b29ba089a8b4a73cfaea/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/1956d5535ad77ddf46e4b29ba089a8b4a73cfaea/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=1956d5535ad77ddf46e4b29ba089a8b4a73cfaea", "patch": "@@ -609,9 +609,6 @@ LLVMRustDIBuilderCreateSubroutineType(LLVMRustDIBuilderRef Builder,\n                                       LLVMMetadataRef File,\n                                       LLVMMetadataRef ParameterTypes) {\n   return wrap(Builder->createSubroutineType(\n-#if LLVM_VERSION_EQ(3, 7)\n-      unwrapDI<DIFile>(File),\n-#endif\n       DITypeRefArray(unwrap<MDTuple>(ParameterTypes))));\n }\n \n@@ -621,7 +618,6 @@ extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateFunction(\n     LLVMMetadataRef Ty, bool IsLocalToUnit, bool IsDefinition,\n     unsigned ScopeLine, LLVMRustDIFlags Flags, bool IsOptimized,\n     LLVMValueRef Fn, LLVMMetadataRef TParam, LLVMMetadataRef Decl) {\n-#if LLVM_VERSION_GE(3, 8)\n   DITemplateParameterArray TParams =\n       DITemplateParameterArray(unwrap<MDTuple>(TParam));\n   DISubprogram *Sub = Builder->createFunction(\n@@ -631,13 +627,6 @@ extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateFunction(\n       unwrapDIPtr<DISubprogram>(Decl));\n   unwrap<Function>(Fn)->setSubprogram(Sub);\n   return wrap(Sub);\n-#else\n-  return wrap(Builder->createFunction(\n-      unwrapDI<DIScope>(Scope), Name, LinkageName, unwrapDI<DIFile>(File),\n-      LineNo, unwrapDI<DISubroutineType>(Ty), IsLocalToUnit, IsDefinition,\n-      ScopeLine, fromRust(Flags), IsOptimized, unwrap<Function>(Fn),\n-      unwrapDIPtr<MDNode>(TParam), unwrapDIPtr<MDNode>(Decl)));\n-#endif\n }\n \n extern \"C\" LLVMMetadataRef\n@@ -741,7 +730,6 @@ extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateVariable(\n     const char *Name, LLVMMetadataRef File, unsigned LineNo,\n     LLVMMetadataRef Ty, bool AlwaysPreserve, LLVMRustDIFlags Flags,\n     unsigned ArgNo, uint32_t AlignInBits) {\n-#if LLVM_VERSION_GE(3, 8)\n   if (Tag == 0x100) { // DW_TAG_auto_variable\n     return wrap(Builder->createAutoVariable(\n         unwrapDI<DIDescriptor>(Scope), Name, unwrapDI<DIFile>(File), LineNo,\n@@ -756,11 +744,6 @@ extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateVariable(\n         unwrapDI<DIDescriptor>(Scope), Name, ArgNo, unwrapDI<DIFile>(File),\n         LineNo, unwrapDI<DIType>(Ty), AlwaysPreserve, fromRust(Flags)));\n   }\n-#else\n-  return wrap(Builder->createLocalVariable(\n-      Tag, unwrapDI<DIDescriptor>(Scope), Name, unwrapDI<DIFile>(File), LineNo,\n-      unwrapDI<DIType>(Ty), AlwaysPreserve, fromRust(Flags), ArgNo));\n-#endif\n }\n \n extern \"C\" LLVMMetadataRef\n@@ -935,11 +918,8 @@ extern \"C\" bool LLVMRustLinkInExternalBitcode(LLVMModuleRef DstRef, char *BC,\n   DiagnosticPrinterRawOStream DP(Stream);\n #if LLVM_VERSION_GE(4, 0)\n   if (Linker::linkModules(*Dst, std::move(Src))) {\n-#elif LLVM_VERSION_GE(3, 8)\n-  if (Linker::linkModules(*Dst, std::move(Src.get()))) {\n #else\n-  if (Linker::LinkModules(Dst, Src->get(),\n-                          [&](const DiagnosticInfo &DI) { DI.print(DP); })) {\n+  if (Linker::linkModules(*Dst, std::move(Src.get()))) {\n #endif\n     LLVMRustSetLastError(Err.c_str());\n     return false;\n@@ -1086,20 +1066,14 @@ static LLVMRustDiagnosticKind toRust(DiagnosticKind Kind) {\n     return LLVMRustDiagnosticKind::OptimizationRemarkMissed;\n   case DK_OptimizationRemarkAnalysis:\n     return LLVMRustDiagnosticKind::OptimizationRemarkAnalysis;\n-#if LLVM_VERSION_GE(3, 8)\n   case DK_OptimizationRemarkAnalysisFPCommute:\n     return LLVMRustDiagnosticKind::OptimizationRemarkAnalysisFPCommute;\n   case DK_OptimizationRemarkAnalysisAliasing:\n     return LLVMRustDiagnosticKind::OptimizationRemarkAnalysisAliasing;\n-#endif\n   default:\n-#if LLVM_VERSION_GE(3, 9)\n     return (Kind >= DK_FirstRemark && Kind <= DK_LastRemark)\n                ? LLVMRustDiagnosticKind::OptimizationRemarkOther\n                : LLVMRustDiagnosticKind::Other;\n-#else\n-    return LLVMRustDiagnosticKind::Other;\n-#endif\n   }\n }\n \n@@ -1144,10 +1118,8 @@ extern \"C\" LLVMTypeKind LLVMRustGetTypeKind(LLVMTypeRef Ty) {\n     return LLVMVectorTypeKind;\n   case Type::X86_MMXTyID:\n     return LLVMX86_MMXTypeKind;\n-#if LLVM_VERSION_GE(3, 8)\n   case Type::TokenTyID:\n     return LLVMTokenTypeKind;\n-#endif\n   }\n   report_fatal_error(\"Unhandled TypeID.\");\n }\n@@ -1184,79 +1156,56 @@ extern \"C\" LLVMValueRef LLVMRustBuildCleanupPad(LLVMBuilderRef B,\n                                                 unsigned ArgCount,\n                                                 LLVMValueRef *LLArgs,\n                                                 const char *Name) {\n-#if LLVM_VERSION_GE(3, 8)\n   Value **Args = unwrap(LLArgs);\n   if (ParentPad == nullptr) {\n     Type *Ty = Type::getTokenTy(unwrap(B)->getContext());\n     ParentPad = wrap(Constant::getNullValue(Ty));\n   }\n   return wrap(unwrap(B)->CreateCleanupPad(\n       unwrap(ParentPad), ArrayRef<Value *>(Args, ArgCount), Name));\n-#else\n-  return nullptr;\n-#endif\n }\n \n extern \"C\" LLVMValueRef LLVMRustBuildCleanupRet(LLVMBuilderRef B,\n                                                 LLVMValueRef CleanupPad,\n                                                 LLVMBasicBlockRef UnwindBB) {\n-#if LLVM_VERSION_GE(3, 8)\n   CleanupPadInst *Inst = cast<CleanupPadInst>(unwrap(CleanupPad));\n   return wrap(unwrap(B)->CreateCleanupRet(Inst, unwrap(UnwindBB)));\n-#else\n-  return nullptr;\n-#endif\n }\n \n extern \"C\" LLVMValueRef\n LLVMRustBuildCatchPad(LLVMBuilderRef B, LLVMValueRef ParentPad,\n                       unsigned ArgCount, LLVMValueRef *LLArgs, const char *Name) {\n-#if LLVM_VERSION_GE(3, 8)\n   Value **Args = unwrap(LLArgs);\n   return wrap(unwrap(B)->CreateCatchPad(\n       unwrap(ParentPad), ArrayRef<Value *>(Args, ArgCount), Name));\n-#else\n-  return nullptr;\n-#endif\n }\n \n extern \"C\" LLVMValueRef LLVMRustBuildCatchRet(LLVMBuilderRef B,\n                                               LLVMValueRef Pad,\n                                               LLVMBasicBlockRef BB) {\n-#if LLVM_VERSION_GE(3, 8)\n   return wrap(unwrap(B)->CreateCatchRet(cast<CatchPadInst>(unwrap(Pad)),\n                                               unwrap(BB)));\n-#else\n-  return nullptr;\n-#endif\n }\n \n extern \"C\" LLVMValueRef LLVMRustBuildCatchSwitch(LLVMBuilderRef B,\n                                                  LLVMValueRef ParentPad,\n                                                  LLVMBasicBlockRef BB,\n                                                  unsigned NumHandlers,\n                                                  const char *Name) {\n-#if LLVM_VERSION_GE(3, 8)\n   if (ParentPad == nullptr) {\n     Type *Ty = Type::getTokenTy(unwrap(B)->getContext());\n     ParentPad = wrap(Constant::getNullValue(Ty));\n   }\n   return wrap(unwrap(B)->CreateCatchSwitch(unwrap(ParentPad), unwrap(BB),\n                                                  NumHandlers, Name));\n-#else\n-  return nullptr;\n-#endif\n }\n \n extern \"C\" void LLVMRustAddHandler(LLVMValueRef CatchSwitchRef,\n                                    LLVMBasicBlockRef Handler) {\n-#if LLVM_VERSION_GE(3, 8)\n   Value *CatchSwitch = unwrap(CatchSwitchRef);\n   cast<CatchSwitchInst>(CatchSwitch)->addHandler(unwrap(Handler));\n-#endif\n }\n \n-#if LLVM_VERSION_GE(3, 8)\n extern \"C\" OperandBundleDef *LLVMRustBuildOperandBundleDef(const char *Name,\n                                                            LLVMValueRef *Inputs,\n                                                            unsigned NumInputs) {\n@@ -1288,28 +1237,6 @@ LLVMRustBuildInvoke(LLVMBuilderRef B, LLVMValueRef Fn, LLVMValueRef *Args,\n                                       makeArrayRef(unwrap(Args), NumArgs),\n                                       Bundles, Name));\n }\n-#else\n-extern \"C\" void *LLVMRustBuildOperandBundleDef(const char *Name,\n-                                               LLVMValueRef *Inputs,\n-                                               unsigned NumInputs) {\n-  return nullptr;\n-}\n-\n-extern \"C\" void LLVMRustFreeOperandBundleDef(void *Bundle) {}\n-\n-extern \"C\" LLVMValueRef LLVMRustBuildCall(LLVMBuilderRef B, LLVMValueRef Fn,\n-                                          LLVMValueRef *Args, unsigned NumArgs,\n-                                          void *Bundle, const char *Name) {\n-  return LLVMBuildCall(B, Fn, Args, NumArgs, Name);\n-}\n-\n-extern \"C\" LLVMValueRef\n-LLVMRustBuildInvoke(LLVMBuilderRef B, LLVMValueRef Fn, LLVMValueRef *Args,\n-                    unsigned NumArgs, LLVMBasicBlockRef Then,\n-                    LLVMBasicBlockRef Catch, void *Bundle, const char *Name) {\n-  return LLVMBuildInvoke(B, Fn, Args, NumArgs, Then, Catch, Name);\n-}\n-#endif\n \n extern \"C\" void LLVMRustPositionBuilderAtStart(LLVMBuilderRef B,\n                                                LLVMBasicBlockRef BB) {"}, {"sha": "8c2f855c226bacd92a62b0c572bd8f42e16c7712", "filename": "src/rustllvm/rustllvm.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1956d5535ad77ddf46e4b29ba089a8b4a73cfaea/src%2Frustllvm%2Frustllvm.h", "raw_url": "https://github.com/rust-lang/rust/raw/1956d5535ad77ddf46e4b29ba089a8b4a73cfaea/src%2Frustllvm%2Frustllvm.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.h?ref=1956d5535ad77ddf46e4b29ba089a8b4a73cfaea", "patch": "@@ -57,11 +57,7 @@\n \n #define LLVM_VERSION_LT(major, minor) (!LLVM_VERSION_GE((major), (minor)))\n \n-#if LLVM_VERSION_GE(3, 7)\n #include \"llvm/IR/LegacyPassManager.h\"\n-#else\n-#include \"llvm/PassManager.h\"\n-#endif\n \n #if LLVM_VERSION_GE(4, 0)\n #include \"llvm/Bitcode/BitcodeReader.h\""}]}