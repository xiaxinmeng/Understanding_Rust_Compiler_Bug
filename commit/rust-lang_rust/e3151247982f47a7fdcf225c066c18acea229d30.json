{"sha": "e3151247982f47a7fdcf225c066c18acea229d30", "node_id": "C_kwDOAAsO6NoAKGUzMTUxMjQ3OTgyZjQ3YTdmZGNmMjI1YzA2NmMxOGFjZWEyMjlkMzA", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-05-03T20:55:00Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-05-03T20:59:23Z"}, "message": "Remove \"Sort methods by trait definition\" assist\n\nIt was replaced by the \"Sort items by trait definition\" assist.", "tree": {"sha": "6dcf054cb53953d31e2fe0be9e87bcea5b3e5d0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6dcf054cb53953d31e2fe0be9e87bcea5b3e5d0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3151247982f47a7fdcf225c066c18acea229d30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3151247982f47a7fdcf225c066c18acea229d30", "html_url": "https://github.com/rust-lang/rust/commit/e3151247982f47a7fdcf225c066c18acea229d30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3151247982f47a7fdcf225c066c18acea229d30/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b20a05fc6cdd6223793bffe498e1b1fb2e5b09e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b20a05fc6cdd6223793bffe498e1b1fb2e5b09e", "html_url": "https://github.com/rust-lang/rust/commit/2b20a05fc6cdd6223793bffe498e1b1fb2e5b09e"}], "stats": {"total": 291, "additions": 24, "deletions": 267}, "files": [{"sha": "c0991c6080dea04c7ffc3ed84b8258a176de4933", "filename": "crates/ide-assists/src/handlers/reorder_impl.rs", "status": "removed", "additions": 0, "deletions": 217, "changes": 217, "blob_url": "https://github.com/rust-lang/rust/blob/2b20a05fc6cdd6223793bffe498e1b1fb2e5b09e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freorder_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b20a05fc6cdd6223793bffe498e1b1fb2e5b09e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freorder_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freorder_impl.rs?ref=2b20a05fc6cdd6223793bffe498e1b1fb2e5b09e", "patch": "@@ -1,217 +0,0 @@\n-use hir::{PathResolution, Semantics};\n-use ide_db::{FxHashMap, RootDatabase};\n-use itertools::Itertools;\n-use syntax::{\n-    ast::{self, HasName},\n-    ted, AstNode,\n-};\n-\n-use crate::{utils::get_methods, AssistContext, AssistId, AssistKind, Assists};\n-\n-// Assist: reorder_impl\n-//\n-// Reorder the methods of an `impl Trait`. The methods will be ordered\n-// in the same order as in the trait definition.\n-//\n-// ```\n-// trait Foo {\n-//     fn a() {}\n-//     fn b() {}\n-//     fn c() {}\n-// }\n-//\n-// struct Bar;\n-// $0impl Foo for Bar {\n-//     fn b() {}\n-//     fn c() {}\n-//     fn a() {}\n-// }\n-// ```\n-// ->\n-// ```\n-// trait Foo {\n-//     fn a() {}\n-//     fn b() {}\n-//     fn c() {}\n-// }\n-//\n-// struct Bar;\n-// impl Foo for Bar {\n-//     fn a() {}\n-//     fn b() {}\n-//     fn c() {}\n-// }\n-// ```\n-pub(crate) fn reorder_impl(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let impl_ast = ctx.find_node_at_offset::<ast::Impl>()?;\n-    let items = impl_ast.assoc_item_list()?;\n-    let methods = get_methods(&items);\n-\n-    let path = impl_ast\n-        .trait_()\n-        .and_then(|t| match t {\n-            ast::Type::PathType(path) => Some(path),\n-            _ => None,\n-        })?\n-        .path()?;\n-\n-    let ranks = compute_method_ranks(&path, ctx)?;\n-    let sorted: Vec<_> = methods\n-        .iter()\n-        .cloned()\n-        .sorted_by_key(|f| {\n-            f.name().and_then(|n| ranks.get(&n.to_string()).copied()).unwrap_or(usize::max_value())\n-        })\n-        .collect();\n-\n-    // Don't edit already sorted methods:\n-    if methods == sorted {\n-        cov_mark::hit!(not_applicable_if_sorted);\n-        return None;\n-    }\n-\n-    let target = items.syntax().text_range();\n-    acc.add(\n-        AssistId(\"reorder_impl\", AssistKind::RefactorRewrite),\n-        \"Sort methods by trait definition\",\n-        target,\n-        |builder| {\n-            let methods = methods.into_iter().map(|fn_| builder.make_mut(fn_)).collect::<Vec<_>>();\n-            methods\n-                .into_iter()\n-                .zip(sorted)\n-                .for_each(|(old, new)| ted::replace(old.syntax(), new.clone_for_update().syntax()));\n-        },\n-    )\n-}\n-\n-fn compute_method_ranks(path: &ast::Path, ctx: &AssistContext) -> Option<FxHashMap<String, usize>> {\n-    let td = trait_definition(path, &ctx.sema)?;\n-\n-    Some(\n-        td.items(ctx.db())\n-            .iter()\n-            .flat_map(|i| match i {\n-                hir::AssocItem::Function(f) => Some(f),\n-                _ => None,\n-            })\n-            .enumerate()\n-            .map(|(idx, func)| (func.name(ctx.db()).to_string(), idx))\n-            .collect(),\n-    )\n-}\n-\n-fn trait_definition(path: &ast::Path, sema: &Semantics<RootDatabase>) -> Option<hir::Trait> {\n-    match sema.resolve_path(path)? {\n-        PathResolution::Def(hir::ModuleDef::Trait(trait_)) => Some(trait_),\n-        _ => None,\n-    }\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use crate::tests::{check_assist, check_assist_not_applicable};\n-\n-    use super::*;\n-\n-    #[test]\n-    fn not_applicable_if_sorted() {\n-        cov_mark::check!(not_applicable_if_sorted);\n-        check_assist_not_applicable(\n-            reorder_impl,\n-            r#\"\n-trait Bar {\n-    fn a() {}\n-    fn z() {}\n-    fn b() {}\n-}\n-struct Foo;\n-$0impl Bar for Foo {\n-    fn a() {}\n-    fn z() {}\n-    fn b() {}\n-}\n-        \"#,\n-        )\n-    }\n-\n-    #[test]\n-    fn not_applicable_if_empty() {\n-        check_assist_not_applicable(\n-            reorder_impl,\n-            r#\"\n-trait Bar {};\n-struct Foo;\n-$0impl Bar for Foo {}\n-        \"#,\n-        )\n-    }\n-\n-    #[test]\n-    fn reorder_impl_trait_functions() {\n-        check_assist(\n-            reorder_impl,\n-            r#\"\n-trait Bar {\n-    fn a() {}\n-    fn c() {}\n-    fn b() {}\n-    fn d() {}\n-}\n-\n-struct Foo;\n-$0impl Bar for Foo {\n-    fn d() {}\n-    fn b() {}\n-    fn c() {}\n-    fn a() {}\n-}\n-        \"#,\n-            r#\"\n-trait Bar {\n-    fn a() {}\n-    fn c() {}\n-    fn b() {}\n-    fn d() {}\n-}\n-\n-struct Foo;\n-impl Bar for Foo {\n-    fn a() {}\n-    fn c() {}\n-    fn b() {}\n-    fn d() {}\n-}\n-        \"#,\n-        )\n-    }\n-\n-    #[test]\n-    fn reorder_impl_trait_methods_uneven_ident_lengths() {\n-        check_assist(\n-            reorder_impl,\n-            r#\"\n-trait Bar {\n-    fn foo(&mut self) {}\n-    fn fooo(&mut self) {}\n-}\n-\n-struct Foo;\n-impl Bar for Foo {\n-    fn fooo(&mut self) {}\n-    fn foo(&mut self) {$0}\n-}\"#,\n-            r#\"\n-trait Bar {\n-    fn foo(&mut self) {}\n-    fn fooo(&mut self) {}\n-}\n-\n-struct Foo;\n-impl Bar for Foo {\n-    fn foo(&mut self) {}\n-    fn fooo(&mut self) {}\n-}\"#,\n-        )\n-    }\n-}"}, {"sha": "2bda3a1817078fb49caadc994fe8fe962f61f41a", "filename": "crates/ide-assists/src/handlers/reorder_impl_items.rs", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e3151247982f47a7fdcf225c066c18acea229d30/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freorder_impl_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3151247982f47a7fdcf225c066c18acea229d30/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freorder_impl_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freorder_impl_items.rs?ref=e3151247982f47a7fdcf225c066c18acea229d30", "patch": "@@ -47,13 +47,6 @@ pub(crate) fn reorder_impl_items(acc: &mut Assists, ctx: &AssistContext) -> Opti\n     let items = impl_ast.assoc_item_list()?;\n     let assoc_items = items.assoc_items().collect::<Vec<_>>();\n \n-    // If all items are either function or macro calls, then reorder_impl assist can be used\n-    if assoc_items.iter().all(|i| matches!(i, ast::AssocItem::Fn(_) | ast::AssocItem::MacroCall(_)))\n-    {\n-        cov_mark::hit!(not_applicable_if_all_functions);\n-        return None;\n-    }\n-\n     let path = impl_ast\n         .trait_()\n         .and_then(|t| match t {\n@@ -152,23 +145,41 @@ $0impl Bar for Foo {\n     }\n \n     #[test]\n-    fn not_applicable_if_all_functions() {\n-        cov_mark::check!(not_applicable_if_all_functions);\n-        check_assist_not_applicable(\n+    fn reorder_impl_trait_functions() {\n+        check_assist(\n             reorder_impl_items,\n             r#\"\n trait Bar {\n     fn a() {}\n-    fn z() {}\n+    fn c() {}\n     fn b() {}\n+    fn d() {}\n }\n+\n struct Foo;\n $0impl Bar for Foo {\n+    fn d() {}\n+    fn b() {}\n+    fn c() {}\n     fn a() {}\n-    fn z() {}\n+}\n+\"#,\n+            r#\"\n+trait Bar {\n+    fn a() {}\n+    fn c() {}\n     fn b() {}\n+    fn d() {}\n }\n-        \"#,\n+\n+struct Foo;\n+impl Bar for Foo {\n+    fn a() {}\n+    fn c() {}\n+    fn b() {}\n+    fn d() {}\n+}\n+\"#,\n         )\n     }\n "}, {"sha": "42bbc70b5328ebc43c3f9ad877df0ba15072aa17", "filename": "crates/ide-assists/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3151247982f47a7fdcf225c066c18acea229d30/crates%2Fide-assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3151247982f47a7fdcf225c066c18acea229d30/crates%2Fide-assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Flib.rs?ref=e3151247982f47a7fdcf225c066c18acea229d30", "patch": "@@ -169,7 +169,6 @@ mod handlers {\n     mod remove_mut;\n     mod remove_unused_param;\n     mod reorder_fields;\n-    mod reorder_impl;\n     mod reorder_impl_items;\n     mod replace_try_expr_with_match;\n     mod replace_derive_with_manual_impl;\n@@ -257,7 +256,6 @@ mod handlers {\n             remove_mut::remove_mut,\n             remove_unused_param::remove_unused_param,\n             reorder_fields::reorder_fields,\n-            reorder_impl::reorder_impl,\n             reorder_impl_items::reorder_impl_items,\n             replace_try_expr_with_match::replace_try_expr_with_match,\n             replace_derive_with_manual_impl::replace_derive_with_manual_impl,"}, {"sha": "eed50a8562db825d4c88d1aeca0b2cb797304cf1", "filename": "crates/ide-assists/src/tests/generated.rs", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e3151247982f47a7fdcf225c066c18acea229d30/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3151247982f47a7fdcf225c066c18acea229d30/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=e3151247982f47a7fdcf225c066c18acea229d30", "patch": "@@ -1736,41 +1736,6 @@ const test: Foo = Foo {foo: 1, bar: 0}\n     )\n }\n \n-#[test]\n-fn doctest_reorder_impl() {\n-    check_doc_test(\n-        \"reorder_impl\",\n-        r#####\"\n-trait Foo {\n-    fn a() {}\n-    fn b() {}\n-    fn c() {}\n-}\n-\n-struct Bar;\n-$0impl Foo for Bar {\n-    fn b() {}\n-    fn c() {}\n-    fn a() {}\n-}\n-\"#####,\n-        r#####\"\n-trait Foo {\n-    fn a() {}\n-    fn b() {}\n-    fn c() {}\n-}\n-\n-struct Bar;\n-impl Foo for Bar {\n-    fn a() {}\n-    fn b() {}\n-    fn c() {}\n-}\n-\"#####,\n-    )\n-}\n-\n #[test]\n fn doctest_reorder_impl_items() {\n     check_doc_test("}]}