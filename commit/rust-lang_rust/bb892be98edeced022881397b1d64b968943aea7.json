{"sha": "bb892be98edeced022881397b1d64b968943aea7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiODkyYmU5OGVkZWNlZDAyMjg4MTM5N2IxZDY0Yjk2ODk0M2FlYTc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-04-25T01:05:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-25T01:05:22Z"}, "message": "Rollup merge of #60038 - michaelwoerister:pgo-updates-2, r=alexcrichton\n\nAdd codegen test for PGO instrumentation.\n\nThis PR adds a codegen test that makes sure that LLVM actually generates instrumentation code when we enable PGO instrumentation in `rustc`.\n\nThe second commit updates a test case to the new commandline option syntax introduced in #59874. Without the fix the test still works, but it confusingly creates a directory called `test.profraw`, which usually is the name of the _file_ where profiling data is collected.", "tree": {"sha": "43224d29b29d4e93edbf5cdc6562a3f25077fe84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43224d29b29d4e93edbf5cdc6562a3f25077fe84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb892be98edeced022881397b1d64b968943aea7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcwQfSCRBK7hj4Ov3rIwAAdHIIAJafm140L5jHk90vQVf6t5p8\nVu9kh4fKkfzyx1DKI9l5a2bOVjT4h8RxJdM0pGyFYeyU1Eu8vJgWsRRNE8El6TLt\nd0a+VcXX+OxJHqUmJJpmEnLX+/3U/QgglRYSaeI8RDz+M3yDr53OIufkWu2dkMB5\nAhWXJQi+kdIacs+yTbTu9XMY7W1bfwMIUiSdOY3h23fH6+ydCkqhQA+NfIKPLtJm\nmO1IfXFTIStPrZf3D3/Dy8b1Zk2uqBuxJT6BiDtzR3foyLynDCpajZPrI0kZ+BTS\nPE+IU8GsVRvX6PDB/I//C1HOecY7fylyCp19Xx05ip5koUMvf52fJdxrvWw+lZk=\n=Jips\n-----END PGP SIGNATURE-----\n", "payload": "tree 43224d29b29d4e93edbf5cdc6562a3f25077fe84\nparent a552bebaf60cfdce1a53241ce78462415ae3125c\nparent ff976fe0f13491f0e6d3f7cbd52ab409fd93165a\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1556154322 +0200\ncommitter GitHub <noreply@github.com> 1556154322 +0200\n\nRollup merge of #60038 - michaelwoerister:pgo-updates-2, r=alexcrichton\n\nAdd codegen test for PGO instrumentation.\n\nThis PR adds a codegen test that makes sure that LLVM actually generates instrumentation code when we enable PGO instrumentation in `rustc`.\n\nThe second commit updates a test case to the new commandline option syntax introduced in #59874. Without the fix the test still works, but it confusingly creates a directory called `test.profraw`, which usually is the name of the _file_ where profiling data is collected.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb892be98edeced022881397b1d64b968943aea7", "html_url": "https://github.com/rust-lang/rust/commit/bb892be98edeced022881397b1d64b968943aea7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb892be98edeced022881397b1d64b968943aea7/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a552bebaf60cfdce1a53241ce78462415ae3125c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a552bebaf60cfdce1a53241ce78462415ae3125c", "html_url": "https://github.com/rust-lang/rust/commit/a552bebaf60cfdce1a53241ce78462415ae3125c"}, {"sha": "ff976fe0f13491f0e6d3f7cbd52ab409fd93165a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff976fe0f13491f0e6d3f7cbd52ab409fd93165a", "html_url": "https://github.com/rust-lang/rust/commit/ff976fe0f13491f0e6d3f7cbd52ab409fd93165a"}], "stats": {"total": 114, "additions": 71, "deletions": 43}, "files": [{"sha": "a443b7b5863e58b83aedd2d40ba5061650371d55", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb892be98edeced022881397b1d64b968943aea7/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb892be98edeced022881397b1d64b968943aea7/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=bb892be98edeced022881397b1d64b968943aea7", "patch": "@@ -1268,11 +1268,11 @@ impl Step for Compiletest {\n         builder.add_rust_test_threads(&mut cmd);\n \n         if builder.config.sanitizers {\n-            cmd.env(\"SANITIZER_SUPPORT\", \"1\");\n+            cmd.env(\"RUSTC_SANITIZER_SUPPORT\", \"1\");\n         }\n \n         if builder.config.profiler {\n-            cmd.env(\"PROFILER_SUPPORT\", \"1\");\n+            cmd.env(\"RUSTC_PROFILER_SUPPORT\", \"1\");\n         }\n \n         cmd.env(\"RUST_TEST_TMPDIR\", builder.out.join(\"tmp\"));"}, {"sha": "8493ef565d888f32730c00c72f543ade5957bdf7", "filename": "src/test/codegen/pgo-instrumentation.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bb892be98edeced022881397b1d64b968943aea7/src%2Ftest%2Fcodegen%2Fpgo-instrumentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb892be98edeced022881397b1d64b968943aea7/src%2Ftest%2Fcodegen%2Fpgo-instrumentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fpgo-instrumentation.rs?ref=bb892be98edeced022881397b1d64b968943aea7", "patch": "@@ -0,0 +1,20 @@\n+// Test that `-Zpgo-gen` creates expected instrumentation artifacts in LLVM IR.\n+\n+// needs-profiler-support\n+// compile-flags: -Z pgo-gen -Ccodegen-units=1\n+\n+// CHECK: @__llvm_profile_raw_version =\n+// CHECK: @__profc_{{.*}}pgo_instrumentation{{.*}}some_function{{.*}} = private global\n+// CHECK: @__profd_{{.*}}pgo_instrumentation{{.*}}some_function{{.*}} = private global\n+// CHECK: @__profc_{{.*}}pgo_instrumentation{{.*}}main{{.*}} = private global\n+// CHECK: @__profd_{{.*}}pgo_instrumentation{{.*}}main{{.*}} = private global\n+// CHECK: @__llvm_profile_filename = {{.*}}\"default_%m.profraw\\00\"{{.*}}\n+\n+#[inline(never)]\n+fn some_function() {\n+\n+}\n+\n+fn main() {\n+    some_function();\n+}"}, {"sha": "48181bcbdc6d363f636140483c79c2eafcd9b267", "filename": "src/test/run-make-fulldeps/pgo-gen-lto/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb892be98edeced022881397b1d64b968943aea7/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-lto%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/bb892be98edeced022881397b1d64b968943aea7/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-lto%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-lto%2FMakefile?ref=bb892be98edeced022881397b1d64b968943aea7", "patch": "@@ -1,8 +1,8 @@\n+# needs-profiler-support\n+\n -include ../tools.mk\n \n all:\n-ifeq ($(PROFILER_SUPPORT),1)\n \t$(RUSTC) -Copt-level=3 -Clto=fat -Z pgo-gen=\"$(TMPDIR)\" test.rs\n \t$(call RUN,test) || exit 1\n \t[ -e \"$(TMPDIR)\"/default_*.profraw ] || (echo \"No .profraw file\"; exit 1)\n-endif"}, {"sha": "20977edb88e87ad8b2467863c04bdff8a1cb4493", "filename": "src/test/run-make-fulldeps/pgo-gen-no-imp-symbols/Makefile", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb892be98edeced022881397b1d64b968943aea7/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-no-imp-symbols%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/bb892be98edeced022881397b1d64b968943aea7/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-no-imp-symbols%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-no-imp-symbols%2FMakefile?ref=bb892be98edeced022881397b1d64b968943aea7", "patch": "@@ -1,11 +1,11 @@\n+# needs-profiler-support\n+\n -include ../tools.mk\n \n all:\n-ifeq ($(PROFILER_SUPPORT),1)\n-\t$(RUSTC) -O -Ccodegen-units=1 -Z pgo-gen=\"$(TMPDIR)/test.profraw\" --emit=llvm-ir test.rs\n+\t$(RUSTC) -O -Ccodegen-units=1 -Z pgo-gen=\"$(TMPDIR)\" --emit=llvm-ir test.rs\n \t# We expect symbols starting with \"__llvm_profile_\".\n \t$(CGREP) \"__llvm_profile_\" < $(TMPDIR)/test.ll\n \t# We do NOT expect the \"__imp_\" version of these symbols.\n \t$(CGREP) -v \"__imp___llvm_profile_\" < $(TMPDIR)/test.ll # 64 bit\n \t$(CGREP) -v \"__imp____llvm_profile_\" < $(TMPDIR)/test.ll # 32 bit\n-endif"}, {"sha": "ce44c10a7c2d2c5e8f50724fb7ba8db6dccb83a0", "filename": "src/test/run-make-fulldeps/pgo-gen/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb892be98edeced022881397b1d64b968943aea7/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/bb892be98edeced022881397b1d64b968943aea7/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen%2FMakefile?ref=bb892be98edeced022881397b1d64b968943aea7", "patch": "@@ -1,8 +1,8 @@\n+# needs-profiler-support\n+\n -include ../tools.mk\n \n all:\n-ifeq ($(PROFILER_SUPPORT),1)\n \t$(RUSTC) -g -Z pgo-gen=\"$(TMPDIR)\" test.rs\n \t$(call RUN,test) || exit 1\n \t[ -e \"$(TMPDIR)\"/default_*.profraw ] || (echo \"No .profraw file\"; exit 1)\n-endif"}, {"sha": "c12712590e48fdc1cf18640ca7b35b98536fbede", "filename": "src/test/run-make-fulldeps/profile/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb892be98edeced022881397b1d64b968943aea7/src%2Ftest%2Frun-make-fulldeps%2Fprofile%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/bb892be98edeced022881397b1d64b968943aea7/src%2Ftest%2Frun-make-fulldeps%2Fprofile%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fprofile%2FMakefile?ref=bb892be98edeced022881397b1d64b968943aea7", "patch": "@@ -1,9 +1,9 @@\n+# needs-profiler-support\n+\n -include ../tools.mk\n \n all:\n-ifeq ($(PROFILER_SUPPORT),1)\n \t$(RUSTC) -g -Z profile test.rs\n \t$(call RUN,test) || exit 1\n \t[ -e \"$(TMPDIR)/test.gcno\" ] || (echo \"No .gcno file\"; exit 1)\n \t[ -e \"$(TMPDIR)/test.gcda\" ] || (echo \"No .gcda file\"; exit 1)\n-endif"}, {"sha": "51d8a4a947adc553d035d7c4164a0be2a12105c2", "filename": "src/test/run-make-fulldeps/sanitizer-address/Makefile", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb892be98edeced022881397b1d64b968943aea7/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-address%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/bb892be98edeced022881397b1d64b968943aea7/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-address%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-address%2FMakefile?ref=bb892be98edeced022881397b1d64b968943aea7", "patch": "@@ -1,15 +1,15 @@\n+# needs-sanitizer-support\n+\n -include ../tools.mk\n \n LOG := $(TMPDIR)/log.txt\n \n # NOTE the address sanitizer only supports x86_64 linux and macOS\n \n ifeq ($(TARGET),x86_64-apple-darwin)\n-ASAN_SUPPORT=$(SANITIZER_SUPPORT)\n EXTRA_RUSTFLAG=-C rpath\n else\n ifeq ($(TARGET),x86_64-unknown-linux-gnu)\n-ASAN_SUPPORT=$(SANITIZER_SUPPORT)\n \n # Apparently there are very specific Linux kernels, notably the one that's\n # currently on Travis CI, which contain a buggy commit that triggers failures in\n@@ -23,7 +23,5 @@ endif\n endif\n \n all:\n-ifeq ($(ASAN_SUPPORT),1)\n \t$(RUSTC) -g -Z sanitizer=address -Z print-link-args $(EXTRA_RUSTFLAG) overflow.rs | $(CGREP) librustc_asan\n \t$(TMPDIR)/overflow 2>&1 | $(CGREP) stack-buffer-overflow\n-endif"}, {"sha": "35317dca1e824b5a3b8cf3575991d0618d6cea78", "filename": "src/test/run-make-fulldeps/sanitizer-cdylib-link/Makefile", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bb892be98edeced022881397b1d64b968943aea7/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-cdylib-link%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/bb892be98edeced022881397b1d64b968943aea7/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-cdylib-link%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-cdylib-link%2FMakefile?ref=bb892be98edeced022881397b1d64b968943aea7", "patch": "@@ -1,3 +1,7 @@\n+# needs-sanitizer-support\n+# only-x86_64\n+# only-linux\n+\n -include ../tools.mk\n \n LOG := $(TMPDIR)/log.txt\n@@ -7,16 +11,10 @@ LOG := $(TMPDIR)/log.txt\n # are compiled with address sanitizer, and we assert that a fault in the cdylib\n # is correctly detected.\n \n-ifeq ($(TARGET),x86_64-unknown-linux-gnu)\n-ASAN_SUPPORT=$(SANITIZER_SUPPORT)\n-\n # See comment in sanitizer-address/Makefile for why this is here\n EXTRA_RUSTFLAG=-C relocation-model=dynamic-no-pic\n-endif\n \n all:\n-ifeq ($(ASAN_SUPPORT),1)\n \t$(RUSTC) -g -Z sanitizer=address --crate-type cdylib --target $(TARGET) $(EXTRA_RUSTFLAG) library.rs\n \t$(RUSTC) -g -Z sanitizer=address --crate-type bin --target $(TARGET) $(EXTRA_RUSTFLAG) -llibrary program.rs\n \tLD_LIBRARY_PATH=$(TMPDIR) $(TMPDIR)/program 2>&1 | $(CGREP) stack-buffer-overflow\n-endif"}, {"sha": "24d2ebd8f48aa00dbe89de9109909822620f04db", "filename": "src/test/run-make-fulldeps/sanitizer-dylib-link/Makefile", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bb892be98edeced022881397b1d64b968943aea7/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-dylib-link%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/bb892be98edeced022881397b1d64b968943aea7/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-dylib-link%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-dylib-link%2FMakefile?ref=bb892be98edeced022881397b1d64b968943aea7", "patch": "@@ -1,3 +1,7 @@\n+# needs-sanitizer-support\n+# only-x86_64\n+# only-linux\n+\n -include ../tools.mk\n \n LOG := $(TMPDIR)/log.txt\n@@ -7,16 +11,10 @@ LOG := $(TMPDIR)/log.txt\n # are compiled with address sanitizer, and we assert that a fault in the dylib\n # is correctly detected.\n \n-ifeq ($(TARGET),x86_64-unknown-linux-gnu)\n-ASAN_SUPPORT=$(SANITIZER_SUPPORT)\n-\n # See comment in sanitizer-address/Makefile for why this is here\n EXTRA_RUSTFLAG=-C relocation-model=dynamic-no-pic\n-endif\n \n all:\n-ifeq ($(ASAN_SUPPORT),1)\n \t$(RUSTC) -g -Z sanitizer=address --crate-type dylib --target $(TARGET) $(EXTRA_RUSTFLAG) library.rs\n \t$(RUSTC) -g -Z sanitizer=address --crate-type bin --target $(TARGET) $(EXTRA_RUSTFLAG) -llibrary program.rs\n \tLD_LIBRARY_PATH=$(TMPDIR) $(TMPDIR)/program 2>&1 | $(CGREP) stack-buffer-overflow\n-endif"}, {"sha": "9581ac565ea0221441fd88ce1feb1200c8d9a94b", "filename": "src/test/run-make-fulldeps/sanitizer-invalid-cratetype/Makefile", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb892be98edeced022881397b1d64b968943aea7/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-invalid-cratetype%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/bb892be98edeced022881397b1d64b968943aea7/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-invalid-cratetype%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-invalid-cratetype%2FMakefile?ref=bb892be98edeced022881397b1d64b968943aea7", "patch": "@@ -1,18 +1,16 @@\n+# needs-sanitizer-support\n+\n -include ../tools.mk\n \n # NOTE the address sanitizer only supports x86_64 linux and macOS\n \n ifeq ($(TARGET),x86_64-apple-darwin)\n-ASAN_SUPPORT=$(SANITIZER_SUPPORT)\n EXTRA_RUSTFLAG=-C rpath\n else\n ifeq ($(TARGET),x86_64-unknown-linux-gnu)\n-ASAN_SUPPORT=$(SANITIZER_SUPPORT)\n EXTRA_RUSTFLAG=\n endif\n endif\n \n all:\n-ifeq ($(ASAN_SUPPORT),1)\n \t$(RUSTC) -Z sanitizer=address --crate-type proc-macro --target $(TARGET) hello.rs 2>&1 | $(CGREP) '-Z sanitizer'\n-endif"}, {"sha": "101e8272ab91e40114655aef9eeed17c77b28fe4", "filename": "src/test/run-make-fulldeps/sanitizer-leak/Makefile", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb892be98edeced022881397b1d64b968943aea7/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-leak%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/bb892be98edeced022881397b1d64b968943aea7/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-leak%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-leak%2FMakefile?ref=bb892be98edeced022881397b1d64b968943aea7", "patch": "@@ -1,12 +1,11 @@\n -include ../tools.mk\n \n+# needs-sanitizer-support\n # only-linux\n # only-x86_64\n # ignore-test\n # FIXME(#46126) ThinLTO for libstd broke this test\n \n all:\n-ifdef SANITIZER_SUPPORT\n \t$(RUSTC) -C opt-level=1 -g -Z sanitizer=leak -Z print-link-args leak.rs | $(CGREP) librustc_lsan\n \t$(TMPDIR)/leak 2>&1 | $(CGREP) 'detected memory leaks'\n-endif"}, {"sha": "b3376f8a72358d3dd80e3e07c5ae5a2c7d523e9c", "filename": "src/test/run-make-fulldeps/sanitizer-memory/Makefile", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb892be98edeced022881397b1d64b968943aea7/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-memory%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/bb892be98edeced022881397b1d64b968943aea7/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-memory%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-memory%2FMakefile?ref=bb892be98edeced022881397b1d64b968943aea7", "patch": "@@ -1,10 +1,9 @@\n -include ../tools.mk\n \n+# needs-sanitizer-support\n # only-linux\n # only-x86_64\n \n all:\n-ifdef SANITIZER_SUPPORT\n \t$(RUSTC) -g -Z sanitizer=memory -Z print-link-args uninit.rs | $(CGREP) librustc_msan\n \t$(TMPDIR)/uninit 2>&1 | $(CGREP) use-of-uninitialized-value\n-endif"}, {"sha": "200dc1be4dee6bdfa171dad4a861f219acf4d4b9", "filename": "src/test/run-make-fulldeps/sanitizer-staticlib-link/Makefile", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bb892be98edeced022881397b1d64b968943aea7/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-staticlib-link%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/bb892be98edeced022881397b1d64b968943aea7/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-staticlib-link%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-staticlib-link%2FMakefile?ref=bb892be98edeced022881397b1d64b968943aea7", "patch": "@@ -1,18 +1,15 @@\n+# needs-sanitizer-support\n+# only-x86_64\n+# only-linux\n+\n -include ../tools.mk\n \n # This test builds a staticlib, then an executable that links to it.\n-# The staticlib and executable both  are compiled with address sanitizer, \n+# The staticlib and executable both  are compiled with address sanitizer,\n # and we assert that a fault in the staticlib is correctly detected.\n \n-ifeq ($(TARGET),x86_64-unknown-linux-gnu)\n-ASAN_SUPPORT=$(SANITIZER_SUPPORT)\n-EXTRA_RUSTFLAG=\n-endif\n-\n all:\n-ifeq ($(ASAN_SUPPORT),1)\n \t$(RUSTC) -g -Z sanitizer=address --crate-type staticlib --target $(TARGET) library.rs\n \t$(CC) program.c $(call STATICLIB,library) $(call OUT_EXE,program) $(EXTRACFLAGS) $(EXTRACXXFLAGS)\n \tLD_LIBRARY_PATH=$(TMPDIR) $(TMPDIR)/program 2>&1 | $(CGREP) stack-buffer-overflow\n-endif\n "}, {"sha": "fb6ada89171abadb3ab66a0eb07bef55d63dfa0b", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bb892be98edeced022881397b1d64b968943aea7/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb892be98edeced022881397b1d64b968943aea7/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=bb892be98edeced022881397b1d64b968943aea7", "patch": "@@ -88,6 +88,9 @@ impl EarlyProps {\n             }\n         }\n \n+        let rustc_has_profiler_support = env::var_os(\"RUSTC_PROFILER_SUPPORT\").is_some();\n+        let rustc_has_sanitizer_support = env::var_os(\"RUSTC_SANITIZER_SUPPORT\").is_some();\n+\n         iter_header(testfile, None, &mut |ln| {\n             // we should check if any only-<platform> exists and if it exists\n             // and does not matches the current platform, skip the test\n@@ -116,6 +119,16 @@ impl EarlyProps {\n                    config.parse_needs_matching_clang(ln) {\n                     props.ignore = Ignore::Ignore;\n                 }\n+\n+                if !rustc_has_profiler_support &&\n+                   config.parse_needs_profiler_support(ln) {\n+                    props.ignore = Ignore::Ignore;\n+                }\n+\n+                if !rustc_has_sanitizer_support &&\n+                   config.parse_needs_sanitizer_support(ln) {\n+                    props.ignore = Ignore::Ignore;\n+                }\n             }\n \n             if (config.mode == common::DebugInfoGdb || config.mode == common::DebugInfoBoth) &&\n@@ -748,6 +761,14 @@ impl Config {\n         self.parse_name_directive(line, \"needs-matching-clang\")\n     }\n \n+    fn parse_needs_profiler_support(&self, line: &str) -> bool {\n+        self.parse_name_directive(line, \"needs-profiler-support\")\n+    }\n+\n+    fn parse_needs_sanitizer_support(&self, line: &str) -> bool {\n+        self.parse_name_directive(line, \"needs-sanitizer-support\")\n+    }\n+\n     /// Parses a name-value directive which contains config-specific information, e.g., `ignore-x86`\n     /// or `normalize-stderr-32bit`.\n     fn parse_cfg_name_directive(&self, line: &str, prefix: &str) -> ParsedNameDirective {"}]}