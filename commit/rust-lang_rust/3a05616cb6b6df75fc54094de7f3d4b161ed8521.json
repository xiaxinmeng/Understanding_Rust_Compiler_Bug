{"sha": "3a05616cb6b6df75fc54094de7f3d4b161ed8521", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhMDU2MTZjYjZiNmRmNzVmYzU0MDk0ZGU3ZjNkNGIxNjFlZDg1MjE=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-09-26T21:44:08Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-10-15T22:38:18Z"}, "message": "minimize the rust-std component\n\nThis splits out a rustc-dev component with the compiler crates, and\nkeeps the status quo of default installed files on nightly. The default\nchanging to not install compiler libraries by default is left for a\nfuture pull request.\n\nHowever, on stable and beta, this does remove the compiler libraries\nfrom the set of libraries installed by default, as they are never needed\nthere (per our stability story, they \"cannot\" be used).", "tree": {"sha": "e27c9476f2cfc150e41265862c980f9602c68271", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e27c9476f2cfc150e41265862c980f9602c68271"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a05616cb6b6df75fc54094de7f3d4b161ed8521", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a05616cb6b6df75fc54094de7f3d4b161ed8521", "html_url": "https://github.com/rust-lang/rust/commit/3a05616cb6b6df75fc54094de7f3d4b161ed8521", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a05616cb6b6df75fc54094de7f3d4b161ed8521/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "446e5e57b667c841ba3ebb4b41b44fb98bd3af4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/446e5e57b667c841ba3ebb4b41b44fb98bd3af4b", "html_url": "https://github.com/rust-lang/rust/commit/446e5e57b667c841ba3ebb4b41b44fb98bd3af4b"}], "stats": {"total": 145, "additions": 112, "deletions": 33}, "files": [{"sha": "7e3ae7f2cc907231ed943258ee59f90e119c6d9d", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3a05616cb6b6df75fc54094de7f3d4b161ed8521/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a05616cb6b6df75fc54094de7f3d4b161ed8521/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=3a05616cb6b6df75fc54094de7f3d4b161ed8521", "patch": "@@ -443,6 +443,7 @@ impl<'a> Builder<'a> {\n                 dist::Rustc,\n                 dist::DebuggerScripts,\n                 dist::Std,\n+                dist::RustcDev,\n                 dist::Analysis,\n                 dist::Src,\n                 dist::PlainSourceTarball,"}, {"sha": "e5a43dcb29f6386a2ec3471071477a4a1161cf24", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 96, "deletions": 33, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/3a05616cb6b6df75fc54094de7f3d4b161ed8521/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a05616cb6b6df75fc54094de7f3d4b161ed8521/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=3a05616cb6b6df75fc54094de7f3d4b161ed8521", "patch": "@@ -637,6 +637,28 @@ impl Step for DebuggerScripts {\n     }\n }\n \n+fn skip_host_target_lib(builder: &Builder<'_>, compiler: Compiler) -> bool {\n+    // The only true set of target libraries came from the build triple, so\n+    // let's reduce redundant work by only producing archives from that host.\n+    if compiler.host != builder.config.build {\n+        builder.info(\"\\tskipping, not a build host\");\n+        true\n+    } else {\n+        false\n+    }\n+}\n+\n+/// Copy stamped files into an image's `target/lib` directory.\n+fn copy_target_libs(builder: &Builder<'_>, target: &str, image: &Path, stamp: &Path) {\n+    let dst = image.join(\"lib/rustlib\").join(target).join(\"lib\");\n+    t!(fs::create_dir_all(&dst));\n+    for (path, host) in builder.read_stamp_file(stamp) {\n+        if !host || builder.config.build == target {\n+            builder.copy(&path, &dst.join(path.file_name().unwrap()));\n+        }\n+    }\n+}\n+\n #[derive(Debug, PartialOrd, Ord, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Std {\n     pub compiler: Compiler,\n@@ -667,44 +689,19 @@ impl Step for Std {\n         let target = self.target;\n \n         let name = pkgname(builder, \"rust-std\");\n-\n-        // The only true set of target libraries came from the build triple, so\n-        // let's reduce redundant work by only producing archives from that host.\n-        if compiler.host != builder.config.build {\n-            builder.info(\"\\tskipping, not a build host\");\n-            return distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target));\n+        let archive = distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target));\n+        if skip_host_target_lib(builder, compiler) {\n+            return archive;\n         }\n \n-        // We want to package up as many target libraries as possible\n-        // for the `rust-std` package, so if this is a host target we\n-        // depend on librustc and otherwise we just depend on libtest.\n-        if builder.hosts.iter().any(|t| t == target) {\n-            builder.ensure(compile::Rustc { compiler, target });\n-        } else {\n-            builder.ensure(compile::Std { compiler, target });\n-        }\n+        builder.ensure(compile::Std { compiler, target });\n \n         let image = tmpdir(builder).join(format!(\"{}-{}-image\", name, target));\n         let _ = fs::remove_dir_all(&image);\n \n-        let dst = image.join(\"lib/rustlib\").join(target);\n-        t!(fs::create_dir_all(&dst));\n-        let mut src = builder.sysroot_libdir(compiler, target).to_path_buf();\n-        src.pop(); // Remove the trailing /lib folder from the sysroot_libdir\n-        builder.cp_filtered(&src, &dst, &|path| {\n-            if let Some(name) = path.file_name().and_then(|s| s.to_str()) {\n-                if name == builder.config.rust_codegen_backends_dir.as_str() {\n-                    return false\n-                }\n-                if name == \"bin\" {\n-                    return false\n-                }\n-                if name.contains(\"LLVM\") {\n-                    return false\n-                }\n-            }\n-            true\n-        });\n+        let compiler_to_use = builder.compiler_for(compiler.stage, compiler.host, target);\n+        let stamp = compile::libstd_stamp(builder, compiler_to_use, target);\n+        copy_target_libs(builder, &target, &image, &stamp);\n \n         let mut cmd = rust_installer(builder);\n         cmd.arg(\"generate\")\n@@ -723,7 +720,73 @@ impl Step for Std {\n         let _time = timeit(builder);\n         builder.run(&mut cmd);\n         builder.remove_dir(&image);\n-        distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target))\n+        archive\n+    }\n+}\n+\n+#[derive(Debug, PartialOrd, Ord, Copy, Clone, Hash, PartialEq, Eq)]\n+pub struct RustcDev {\n+    pub compiler: Compiler,\n+    pub target: Interned<String>,\n+}\n+\n+impl Step for RustcDev {\n+    type Output = PathBuf;\n+    const DEFAULT: bool = true;\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.path(\"rustc-dev\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        run.builder.ensure(RustcDev {\n+            compiler: run.builder.compiler_for(\n+                run.builder.top_stage,\n+                run.builder.config.build,\n+                run.target,\n+            ),\n+            target: run.target,\n+        });\n+    }\n+\n+    fn run(self, builder: &Builder<'_>) -> PathBuf {\n+        let compiler = self.compiler;\n+        let target = self.target;\n+\n+        let name = pkgname(builder, \"rustc-dev\");\n+        let archive = distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target));\n+        if skip_host_target_lib(builder, compiler) {\n+            return archive;\n+        }\n+\n+        builder.ensure(compile::Rustc { compiler, target });\n+\n+        let image = tmpdir(builder).join(format!(\"{}-{}-image\", name, target));\n+        let _ = fs::remove_dir_all(&image);\n+\n+        let compiler_to_use = builder.compiler_for(compiler.stage, compiler.host, target);\n+        let stamp = compile::librustc_stamp(builder, compiler_to_use, target);\n+        copy_target_libs(builder, &target, &image, &stamp);\n+\n+        let mut cmd = rust_installer(builder);\n+        cmd.arg(\"generate\")\n+           .arg(\"--product-name=Rust\")\n+           .arg(\"--rel-manifest-dir=rustlib\")\n+           .arg(\"--success-message=Rust-is-ready-to-develop.\")\n+           .arg(\"--image-dir\").arg(&image)\n+           .arg(\"--work-dir\").arg(&tmpdir(builder))\n+           .arg(\"--output-dir\").arg(&distdir(builder))\n+           .arg(format!(\"--package-name={}-{}\", name, target))\n+           .arg(format!(\"--component-name=rustc-dev-{}\", target))\n+           .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n+\n+        builder.info(&format!(\"Dist rustc-dev stage{} ({} -> {})\",\n+            compiler.stage, &compiler.host, target));\n+        let _time = timeit(builder);\n+        builder.run(&mut cmd);\n+        builder.remove_dir(&image);\n+        archive\n     }\n }\n "}, {"sha": "97e758f9b82386fc291df9bc7bb2d94ee8efeefb", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3a05616cb6b6df75fc54094de7f3d4b161ed8521/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a05616cb6b6df75fc54094de7f3d4b161ed8521/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=3a05616cb6b6df75fc54094de7f3d4b161ed8521", "patch": "@@ -399,6 +399,7 @@ impl Builder {\n     fn add_packages_to(&mut self, manifest: &mut Manifest) {\n         let mut package = |name, targets| self.package(name, &mut manifest.pkg, targets);\n         package(\"rustc\", HOSTS);\n+        package(\"rustc-dev\", HOSTS);\n         package(\"cargo\", HOSTS);\n         package(\"rust-mingw\", MINGW);\n         package(\"rust-std\", TARGETS);\n@@ -481,6 +482,15 @@ impl Builder {\n             components.push(host_component(\"rust-mingw\"));\n         }\n \n+        // The compiler libraries are not stable for end users, but `rustc-dev` was only recently\n+        // split out of `rust-std`. We'll include it by default as a transition for nightly users,\n+        // but ship it as an optional component on the beta and stable channels.\n+        if self.rust_release == \"nightly\" {\n+            components.push(host_component(\"rustc-dev\"));\n+        } else {\n+            extensions.push(host_component(\"rustc-dev\"));\n+        }\n+\n         // Tools are always present in the manifest,\n         // but might be marked as unavailable if they weren't built.\n         extensions.extend(vec![\n@@ -498,6 +508,11 @@ impl Builder {\n                 .filter(|&&target| target != host)\n                 .map(|target| Component::from_str(\"rust-std\", target))\n         );\n+        extensions.extend(\n+            HOSTS.iter()\n+                .filter(|&&target| target != host)\n+                .map(|target| Component::from_str(\"rustc-dev\", target))\n+        );\n         extensions.push(Component::from_str(\"rust-src\", \"*\"));\n \n         // If the components/extensions don't actually exist for this"}]}