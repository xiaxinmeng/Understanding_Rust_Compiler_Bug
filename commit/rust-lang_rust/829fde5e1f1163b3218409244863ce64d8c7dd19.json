{"sha": "829fde5e1f1163b3218409244863ce64d8c7dd19", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyOWZkZTVlMWYxMTYzYjMyMTg0MDkyNDQ4NjNjZTY0ZDhjN2RkMTk=", "commit": {"author": {"name": "Takayuki", "email": "takoyaki0316@gmail.com", "date": "2021-05-04T16:44:38Z"}, "committer": {"name": "Takayuki", "email": "takoyaki0316@gmail.com", "date": "2021-05-04T16:44:38Z"}, "message": "move unneeded_field_pattern to its own module", "tree": {"sha": "30a6d9d54f76a1956d6bed489cc400847661eeac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30a6d9d54f76a1956d6bed489cc400847661eeac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/829fde5e1f1163b3218409244863ce64d8c7dd19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/829fde5e1f1163b3218409244863ce64d8c7dd19", "html_url": "https://github.com/rust-lang/rust/commit/829fde5e1f1163b3218409244863ce64d8c7dd19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/829fde5e1f1163b3218409244863ce64d8c7dd19/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0a106e25214a16cb01c87f7f01fd7c95d3534c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0a106e25214a16cb01c87f7f01fd7c95d3534c2", "html_url": "https://github.com/rust-lang/rust/commit/c0a106e25214a16cb01c87f7f01fd7c95d3534c2"}], "stats": {"total": 141, "additions": 75, "deletions": 66}, "files": [{"sha": "ee1bff8bf8aaa947b881cb215455f3998fdd15c2", "filename": "clippy_lints/src/misc_early/mod.rs", "status": "modified", "additions": 3, "deletions": 66, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/829fde5e1f1163b3218409244863ce64d8c7dd19/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/829fde5e1f1163b3218409244863ce64d8c7dd19/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs?ref=829fde5e1f1163b3218409244863ce64d8c7dd19", "patch": "@@ -1,9 +1,10 @@\n mod builtin_type_shadow;\n mod double_neg;\n mod redundant_pattern;\n+mod unneeded_field_pattern;\n mod unneeded_wildcard_pattern;\n \n-use clippy_utils::diagnostics::{span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then};\n+use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::source::snippet_opt;\n use rustc_ast::ast::{Expr, Generics, Lit, LitFloatType, LitIntType, LitKind, NodeId, Pat, PatKind};\n use rustc_ast::visit::FnKind;\n@@ -271,71 +272,7 @@ impl EarlyLintPass for MiscEarlyLints {\n     }\n \n     fn check_pat(&mut self, cx: &EarlyContext<'_>, pat: &Pat) {\n-        if let PatKind::Struct(ref npat, ref pfields, _) = pat.kind {\n-            let mut wilds = 0;\n-            let type_name = npat\n-                .segments\n-                .last()\n-                .expect(\"A path must have at least one segment\")\n-                .ident\n-                .name;\n-\n-            for field in pfields {\n-                if let PatKind::Wild = field.pat.kind {\n-                    wilds += 1;\n-                }\n-            }\n-            if !pfields.is_empty() && wilds == pfields.len() {\n-                span_lint_and_help(\n-                    cx,\n-                    UNNEEDED_FIELD_PATTERN,\n-                    pat.span,\n-                    \"all the struct fields are matched to a wildcard pattern, consider using `..`\",\n-                    None,\n-                    &format!(\"try with `{} {{ .. }}` instead\", type_name),\n-                );\n-                return;\n-            }\n-            if wilds > 0 {\n-                for field in pfields {\n-                    if let PatKind::Wild = field.pat.kind {\n-                        wilds -= 1;\n-                        if wilds > 0 {\n-                            span_lint(\n-                                cx,\n-                                UNNEEDED_FIELD_PATTERN,\n-                                field.span,\n-                                \"you matched a field with a wildcard pattern, consider using `..` instead\",\n-                            );\n-                        } else {\n-                            let mut normal = vec![];\n-\n-                            for field in pfields {\n-                                match field.pat.kind {\n-                                    PatKind::Wild => {},\n-                                    _ => {\n-                                        if let Ok(n) = cx.sess().source_map().span_to_snippet(field.span) {\n-                                            normal.push(n);\n-                                        }\n-                                    },\n-                                }\n-                            }\n-\n-                            span_lint_and_help(\n-                                cx,\n-                                UNNEEDED_FIELD_PATTERN,\n-                                field.span,\n-                                \"you matched a field with a wildcard pattern, consider using `..` \\\n-                                 instead\",\n-                                None,\n-                                &format!(\"try with `{} {{ {}, .. }}`\", type_name, normal[..].join(\", \")),\n-                            );\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-\n+        unneeded_field_pattern::check(cx, pat);\n         redundant_pattern::check(cx, pat);\n         unneeded_wildcard_pattern::check(cx, pat);\n     }"}, {"sha": "329a0009a3e2cfc014aa00a1a92f8b37996926ed", "filename": "clippy_lints/src/misc_early/unneeded_field_pattern.rs", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/829fde5e1f1163b3218409244863ce64d8c7dd19/clippy_lints%2Fsrc%2Fmisc_early%2Funneeded_field_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/829fde5e1f1163b3218409244863ce64d8c7dd19/clippy_lints%2Fsrc%2Fmisc_early%2Funneeded_field_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early%2Funneeded_field_pattern.rs?ref=829fde5e1f1163b3218409244863ce64d8c7dd19", "patch": "@@ -0,0 +1,72 @@\n+use clippy_utils::diagnostics::{span_lint, span_lint_and_help};\n+use rustc_ast::ast::{Pat, PatKind};\n+use rustc_lint::{EarlyContext, LintContext};\n+\n+use super::UNNEEDED_FIELD_PATTERN;\n+\n+pub(super) fn check(cx: &EarlyContext<'_>, pat: &Pat) {\n+    if let PatKind::Struct(ref npat, ref pfields, _) = pat.kind {\n+        let mut wilds = 0;\n+        let type_name = npat\n+            .segments\n+            .last()\n+            .expect(\"A path must have at least one segment\")\n+            .ident\n+            .name;\n+\n+        for field in pfields {\n+            if let PatKind::Wild = field.pat.kind {\n+                wilds += 1;\n+            }\n+        }\n+        if !pfields.is_empty() && wilds == pfields.len() {\n+            span_lint_and_help(\n+                cx,\n+                UNNEEDED_FIELD_PATTERN,\n+                pat.span,\n+                \"all the struct fields are matched to a wildcard pattern, consider using `..`\",\n+                None,\n+                &format!(\"try with `{} {{ .. }}` instead\", type_name),\n+            );\n+            return;\n+        }\n+        if wilds > 0 {\n+            for field in pfields {\n+                if let PatKind::Wild = field.pat.kind {\n+                    wilds -= 1;\n+                    if wilds > 0 {\n+                        span_lint(\n+                            cx,\n+                            UNNEEDED_FIELD_PATTERN,\n+                            field.span,\n+                            \"you matched a field with a wildcard pattern, consider using `..` instead\",\n+                        );\n+                    } else {\n+                        let mut normal = vec![];\n+\n+                        for field in pfields {\n+                            match field.pat.kind {\n+                                PatKind::Wild => {},\n+                                _ => {\n+                                    if let Ok(n) = cx.sess().source_map().span_to_snippet(field.span) {\n+                                        normal.push(n);\n+                                    }\n+                                },\n+                            }\n+                        }\n+\n+                        span_lint_and_help(\n+                            cx,\n+                            UNNEEDED_FIELD_PATTERN,\n+                            field.span,\n+                            \"you matched a field with a wildcard pattern, consider using `..` \\\n+                             instead\",\n+                            None,\n+                            &format!(\"try with `{} {{ {}, .. }}`\", type_name, normal[..].join(\", \")),\n+                        );\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}]}