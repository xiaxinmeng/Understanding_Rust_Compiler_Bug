{"sha": "5e8a89b2e5a036688d12eb6da4a1b97cadb6949f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlOGE4OWIyZTVhMDM2Njg4ZDEyZWI2ZGE0YTFiOTdjYWRiNjk0OWY=", "commit": {"author": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-03-02T12:13:17Z"}, "committer": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-03-12T12:23:11Z"}, "message": "Reduce the duplication in the relation logic for constants", "tree": {"sha": "37a3712caf4b6a596177a957ad08141cd9cd8fd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37a3712caf4b6a596177a957ad08141cd9cd8fd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e8a89b2e5a036688d12eb6da4a1b97cadb6949f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e8a89b2e5a036688d12eb6da4a1b97cadb6949f", "html_url": "https://github.com/rust-lang/rust/commit/5e8a89b2e5a036688d12eb6da4a1b97cadb6949f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e8a89b2e5a036688d12eb6da4a1b97cadb6949f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d917faa9905432a4ca18fdab29d3d8b951b7d97", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d917faa9905432a4ca18fdab29d3d8b951b7d97", "html_url": "https://github.com/rust-lang/rust/commit/4d917faa9905432a4ca18fdab29d3d8b951b7d97"}], "stats": {"total": 112, "additions": 45, "deletions": 67}, "files": [{"sha": "8814a334fbb90e2ae56a05ee2c896ce0754647c2", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 45, "deletions": 67, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/5e8a89b2e5a036688d12eb6da4a1b97cadb6949f/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e8a89b2e5a036688d12eb6da4a1b97cadb6949f/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=5e8a89b2e5a036688d12eb6da4a1b97cadb6949f", "patch": "@@ -4,13 +4,12 @@\n //! types or regions but can be other things. Examples of type relations are\n //! subtyping, type equality, etc.\n \n-use crate::mir::interpret::{get_slice_bytes, ConstValue};\n+use crate::mir::interpret::{get_slice_bytes, ConstValue, GlobalAlloc, Scalar};\n use crate::ty::error::{ExpectedFound, TypeError};\n use crate::ty::subst::{GenericArg, GenericArgKind, SubstsRef};\n use crate::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc_hir as ast;\n use rustc_hir::def_id::DefId;\n-use rustc_span::DUMMY_SP;\n use rustc_target::spec::abi;\n use std::iter;\n \n@@ -513,93 +512,71 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n     // Currently, the values that can be unified are primitive types,\n     // and those that derive both `PartialEq` and `Eq`, corresponding\n     // to structural-match types.\n-    match (a.val, b.val) {\n+    let is_match = match (a.val, b.val) {\n         (ty::ConstKind::Infer(_), _) | (_, ty::ConstKind::Infer(_)) => {\n             // The caller should handle these cases!\n             bug!(\"var types encountered in super_relate_consts: {:?} {:?}\", a, b)\n         }\n \n-        (ty::ConstKind::Error(_), _) => Ok(a),\n-        (_, ty::ConstKind::Error(_)) => Ok(b),\n+        (ty::ConstKind::Error(_), _) => return Ok(a),\n+        (_, ty::ConstKind::Error(_)) => return Ok(b),\n \n-        (ty::ConstKind::Param(a_p), ty::ConstKind::Param(b_p)) if a_p.index == b_p.index => {\n-            return Ok(a);\n-        }\n-        (ty::ConstKind::Placeholder(p1), ty::ConstKind::Placeholder(p2)) if p1 == p2 => {\n-            return Ok(a);\n-        }\n+        (ty::ConstKind::Param(a_p), ty::ConstKind::Param(b_p)) => a_p.index == b_p.index,\n+        (ty::ConstKind::Placeholder(p1), ty::ConstKind::Placeholder(p2)) => p1 == p2,\n         (ty::ConstKind::Value(a_val), ty::ConstKind::Value(b_val)) => {\n             match (a_val, b_val) {\n-                (ConstValue::Scalar(a_val), ConstValue::Scalar(b_val)) => {\n-                    if a_val == b_val {\n-                        Ok(a)\n-                    } else if let ty::FnPtr(_) = a.ty.kind() {\n-                        let a_instance = tcx.global_alloc(a_val.assert_ptr().alloc_id).unwrap_fn();\n-                        let b_instance = tcx.global_alloc(b_val.assert_ptr().alloc_id).unwrap_fn();\n-                        if a_instance == b_instance {\n-                            Ok(a)\n-                        } else {\n-                            Err(TypeError::ConstMismatch(expected_found(relation, a, b)))\n+                (\n+                    ConstValue::Scalar(Scalar::Int(a_val)),\n+                    ConstValue::Scalar(Scalar::Int(b_val)),\n+                ) => a_val == b_val,\n+                (\n+                    ConstValue::Scalar(Scalar::Ptr(a_val)),\n+                    ConstValue::Scalar(Scalar::Ptr(b_val)),\n+                ) => {\n+                    a_val == b_val\n+                        || match (\n+                            tcx.global_alloc(a_val.alloc_id),\n+                            tcx.global_alloc(b_val.alloc_id),\n+                        ) {\n+                            (\n+                                GlobalAlloc::Function(a_instance),\n+                                GlobalAlloc::Function(b_instance),\n+                            ) => a_instance == b_instance,\n+                            _ => false,\n                         }\n-                    } else {\n-                        Err(TypeError::ConstMismatch(expected_found(relation, a, b)))\n-                    }\n                 }\n \n                 (ConstValue::Slice { .. }, ConstValue::Slice { .. }) => {\n-                    let a_bytes = get_slice_bytes(&tcx, a_val);\n-                    let b_bytes = get_slice_bytes(&tcx, b_val);\n-                    if a_bytes == b_bytes {\n-                        Ok(a)\n-                    } else {\n-                        Err(TypeError::ConstMismatch(expected_found(relation, a, b)))\n-                    }\n+                    get_slice_bytes(&tcx, a_val) == get_slice_bytes(&tcx, b_val)\n                 }\n \n                 (ConstValue::ByRef { .. }, ConstValue::ByRef { .. }) => {\n-                    match a.ty.kind() {\n-                        ty::Array(..) | ty::Adt(..) | ty::Tuple(..) => {\n-                            let a_destructured = tcx.destructure_const(relation.param_env().and(a));\n-                            let b_destructured = tcx.destructure_const(relation.param_env().and(b));\n-\n-                            // Both the variant and each field have to be equal.\n-                            if a_destructured.variant == b_destructured.variant {\n-                                for (a_field, b_field) in\n-                                    a_destructured.fields.iter().zip(b_destructured.fields.iter())\n-                                {\n-                                    relation.consts(a_field, b_field)?;\n-                                }\n-\n-                                Ok(a)\n-                            } else {\n-                                Err(TypeError::ConstMismatch(expected_found(relation, a, b)))\n-                            }\n-                        }\n-                        // FIXME(const_generics): There are probably some `TyKind`s\n-                        // which should be handled here.\n-                        _ => {\n-                            tcx.sess.delay_span_bug(\n-                                DUMMY_SP,\n-                                &format!(\"unexpected consts: a: {:?}, b: {:?}\", a, b),\n-                            );\n-                            Err(TypeError::ConstMismatch(expected_found(relation, a, b)))\n+                    let a_destructured = tcx.destructure_const(relation.param_env().and(a));\n+                    let b_destructured = tcx.destructure_const(relation.param_env().and(b));\n+\n+                    // Both the variant and each field have to be equal.\n+                    if a_destructured.variant == b_destructured.variant {\n+                        for (a_field, b_field) in\n+                            a_destructured.fields.iter().zip(b_destructured.fields.iter())\n+                        {\n+                            relation.consts(a_field, b_field)?;\n                         }\n+\n+                        true\n+                    } else {\n+                        false\n                     }\n                 }\n \n-                _ => Err(TypeError::ConstMismatch(expected_found(relation, a, b))),\n+                _ => false,\n             }\n         }\n \n         (\n             ty::ConstKind::Unevaluated(a_def, a_substs, None),\n             ty::ConstKind::Unevaluated(b_def, b_substs, None),\n         ) if tcx.features().const_evaluatable_checked && !relation.visit_ct_substs() => {\n-            if tcx.try_unify_abstract_consts(((a_def, a_substs), (b_def, b_substs))) {\n-                Ok(a)\n-            } else {\n-                Err(TypeError::ConstMismatch(expected_found(relation, a, b)))\n-            }\n+            tcx.try_unify_abstract_consts(((a_def, a_substs), (b_def, b_substs)))\n         }\n \n         // While this is slightly incorrect, it shouldn't matter for `min_const_generics`\n@@ -611,13 +588,14 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n         ) if a_def == b_def && a_promoted == b_promoted => {\n             let substs =\n                 relation.relate_with_variance(ty::Variance::Invariant, a_substs, b_substs)?;\n-            Ok(tcx.mk_const(ty::Const {\n+            return Ok(tcx.mk_const(ty::Const {\n                 val: ty::ConstKind::Unevaluated(a_def, substs, a_promoted),\n                 ty: a.ty,\n-            }))\n+            }));\n         }\n-        _ => Err(TypeError::ConstMismatch(expected_found(relation, a, b))),\n-    }\n+        _ => false,\n+    };\n+    if is_match { Ok(a) } else { Err(TypeError::ConstMismatch(expected_found(relation, a, b))) }\n }\n \n impl<'tcx> Relate<'tcx> for &'tcx ty::List<ty::Binder<ty::ExistentialPredicate<'tcx>>> {"}]}