{"sha": "b3a7953cae4f14f74934cc64ba7ccf7b3eb6cd08", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzYTc5NTNjYWU0ZjE0Zjc0OTM0Y2M2NGJhN2NjZjdiM2ViNmNkMDg=", "commit": {"author": {"name": "James Leitch", "email": "rickvanprim@gmail.com", "date": "2021-04-19T19:26:04Z"}, "committer": {"name": "James Leitch", "email": "rickvanprim@gmail.com", "date": "2021-04-19T19:26:04Z"}, "message": "Code review feedback.", "tree": {"sha": "258daac81f857d6023b5f8e31b4c9b31fb4b6646", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/258daac81f857d6023b5f8e31b4c9b31fb4b6646"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3a7953cae4f14f74934cc64ba7ccf7b3eb6cd08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3a7953cae4f14f74934cc64ba7ccf7b3eb6cd08", "html_url": "https://github.com/rust-lang/rust/commit/b3a7953cae4f14f74934cc64ba7ccf7b3eb6cd08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3a7953cae4f14f74934cc64ba7ccf7b3eb6cd08/comments", "author": {"login": "rickvanprim", "id": 13792812, "node_id": "MDQ6VXNlcjEzNzkyODEy", "avatar_url": "https://avatars.githubusercontent.com/u/13792812?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rickvanprim", "html_url": "https://github.com/rickvanprim", "followers_url": "https://api.github.com/users/rickvanprim/followers", "following_url": "https://api.github.com/users/rickvanprim/following{/other_user}", "gists_url": "https://api.github.com/users/rickvanprim/gists{/gist_id}", "starred_url": "https://api.github.com/users/rickvanprim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rickvanprim/subscriptions", "organizations_url": "https://api.github.com/users/rickvanprim/orgs", "repos_url": "https://api.github.com/users/rickvanprim/repos", "events_url": "https://api.github.com/users/rickvanprim/events{/privacy}", "received_events_url": "https://api.github.com/users/rickvanprim/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rickvanprim", "id": 13792812, "node_id": "MDQ6VXNlcjEzNzkyODEy", "avatar_url": "https://avatars.githubusercontent.com/u/13792812?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rickvanprim", "html_url": "https://github.com/rickvanprim", "followers_url": "https://api.github.com/users/rickvanprim/followers", "following_url": "https://api.github.com/users/rickvanprim/following{/other_user}", "gists_url": "https://api.github.com/users/rickvanprim/gists{/gist_id}", "starred_url": "https://api.github.com/users/rickvanprim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rickvanprim/subscriptions", "organizations_url": "https://api.github.com/users/rickvanprim/orgs", "repos_url": "https://api.github.com/users/rickvanprim/repos", "events_url": "https://api.github.com/users/rickvanprim/events{/privacy}", "received_events_url": "https://api.github.com/users/rickvanprim/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5c194f3f7c1dd38d4743ca65d5a55dfb5b648fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5c194f3f7c1dd38d4743ca65d5a55dfb5b648fc", "html_url": "https://github.com/rust-lang/rust/commit/b5c194f3f7c1dd38d4743ca65d5a55dfb5b648fc"}], "stats": {"total": 31, "additions": 16, "deletions": 15}, "files": [{"sha": "1682d8bde23548f38073682be12b6cd00dfdea5b", "filename": "crates/flycheck/src/lib.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b3a7953cae4f14f74934cc64ba7ccf7b3eb6cd08/crates%2Fflycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3a7953cae4f14f74934cc64ba7ccf7b3eb6cd08/crates%2Fflycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2Fsrc%2Flib.rs?ref=b3a7953cae4f14f74934cc64ba7ccf7b3eb6cd08", "patch": "@@ -319,13 +319,13 @@ impl CargoActor {\n \n             read_at_least_one_message = true;\n \n-            // Try to deserialize a message from Cargo.\n-            {\n-                let mut deserializer = serde_json::Deserializer::from_str(&message);\n-                deserializer.disable_recursion_limit();\n-                if let Ok(message) = cargo_metadata::Message::deserialize(&mut deserializer) {\n+            // Try to deserialize a message from Cargo or Rustc.\n+            let mut deserializer = serde_json::Deserializer::from_str(&message);\n+            deserializer.disable_recursion_limit();\n+            if let Ok(message) = JsonMessage::deserialize(&mut deserializer) {\n+                match message {\n                     // Skip certain kinds of messages to only spend time on what's useful\n-                    match message {\n+                    JsonMessage::Cargo(message) => match message {\n                         cargo_metadata::Message::CompilerArtifact(artifact) if !artifact.fresh => {\n                             self.sender.send(CargoMessage::CompilerArtifact(artifact)).unwrap()\n                         }\n@@ -338,18 +338,12 @@ impl CargoActor {\n                         | cargo_metadata::Message::BuildFinished(_)\n                         | cargo_metadata::Message::TextLine(_)\n                         | _ => (),\n+                    },\n+                    JsonMessage::Rustc(message) => {\n+                        self.sender.send(CargoMessage::Diagnostic(message)).unwrap()\n                     }\n                 }\n             }\n-\n-            // Try to deserialize a Diagnostic directly from Rustc.\n-            {\n-                let mut deserializer = serde_json::Deserializer::from_str(&message);\n-                deserializer.disable_recursion_limit();\n-                if let Ok(message) = Diagnostic::deserialize(&mut deserializer) {\n-                    self.sender.send(CargoMessage::Diagnostic(message)).unwrap()\n-                }\n-            }\n         }\n         Ok(read_at_least_one_message)\n     }\n@@ -359,3 +353,10 @@ enum CargoMessage {\n     CompilerArtifact(cargo_metadata::Artifact),\n     Diagnostic(Diagnostic),\n }\n+\n+#[derive(Deserialize)]\n+#[serde(untagged)]\n+enum JsonMessage {\n+    Cargo(cargo_metadata::Message),\n+    Rustc(Diagnostic),\n+}"}]}