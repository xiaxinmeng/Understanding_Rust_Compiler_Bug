{"sha": "b5729bd60095fb5ca884936775e031cf19900760", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1NzI5YmQ2MDA5NWZiNWNhODg0OTM2Nzc1ZTAzMWNmMTk5MDA3NjA=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-07-17T02:16:19Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-07-17T19:40:59Z"}, "message": "Support attributes on class ctors and dtors\n\nCloses #2660", "tree": {"sha": "591beb6a1ac38db9db8ec22f1b2d264dc2017f5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/591beb6a1ac38db9db8ec22f1b2d264dc2017f5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5729bd60095fb5ca884936775e031cf19900760", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5729bd60095fb5ca884936775e031cf19900760", "html_url": "https://github.com/rust-lang/rust/commit/b5729bd60095fb5ca884936775e031cf19900760", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5729bd60095fb5ca884936775e031cf19900760/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf9a9d1ae8ed74a69b529f526eed1462813817cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf9a9d1ae8ed74a69b529f526eed1462813817cd", "html_url": "https://github.com/rust-lang/rust/commit/cf9a9d1ae8ed74a69b529f526eed1462813817cd"}], "stats": {"total": 160, "additions": 109, "deletions": 51}, "files": [{"sha": "65ff9245fd189330a1995d2b591f6fdb0c9e4bbf", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5729bd60095fb5ca884936775e031cf19900760/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5729bd60095fb5ca884936775e031cf19900760/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=b5729bd60095fb5ca884936775e031cf19900760", "patch": "@@ -657,6 +657,7 @@ type class_ctor = spanned<class_ctor_>;\n \n #[auto_serialize]\n type class_ctor_ = {id: node_id,\n+                    attrs: ~[attribute],\n                     self_id: node_id,\n                     dec: fn_decl,\n                     body: blk};\n@@ -666,6 +667,7 @@ type class_dtor = spanned<class_dtor_>;\n \n #[auto_serialize]\n type class_dtor_ = {id: node_id,\n+                    attrs: ~[attribute],\n                     self_id: node_id,\n                     body: blk};\n "}, {"sha": "4820ac2f4a91d724ddf38f1fc3466898cb8e1157", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b5729bd60095fb5ca884936775e031cf19900760/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5729bd60095fb5ca884936775e031cf19900760/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=b5729bd60095fb5ca884936775e031cf19900760", "patch": "@@ -126,8 +126,9 @@ fn map_fn(fk: visit::fn_kind, decl: fn_decl, body: blk,\n         cx.local_id += 1u;\n     }\n     alt fk {\n-      visit::fk_ctor(nm, tps, self_id, parent_id) {\n+      visit::fk_ctor(nm, attrs, tps, self_id, parent_id) {\n           let ct = @{node: {id: id,\n+                            attrs: attrs,\n                             self_id: self_id,\n                             dec: /* FIXME (#2543) */ copy decl,\n                             body: /* FIXME (#2543) */ copy body},\n@@ -136,16 +137,15 @@ fn map_fn(fk: visit::fn_kind, decl: fn_decl, body: blk,\n                                       /* FIXME (#2543) */ copy tps,\n                                       ct, parent_id,\n                                       @/* FIXME (#2543) */ copy cx.path));\n-       }\n-      visit::fk_dtor(tps, self_id, parent_id) {\n-          let dt = @{node: {id: id, self_id: self_id,\n+      }\n+      visit::fk_dtor(tps, attrs, self_id, parent_id) {\n+          let dt = @{node: {id: id, attrs: attrs, self_id: self_id,\n                      body: /* FIXME (#2543) */ copy body}, span: sp};\n           cx.map.insert(id, node_dtor(/* FIXME (#2543) */ copy tps, dt,\n                                       parent_id,\n                                       @/* FIXME (#2543) */ copy cx.path));\n-       }\n-\n-       _ {}\n+      }\n+      _ {}\n     }\n     visit::visit_fn(fk, decl, body, sp, id, cx, v);\n }"}, {"sha": "7a0a0725d956cc347630480cf6f2ddedd8c6f448", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5729bd60095fb5ca884936775e031cf19900760/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5729bd60095fb5ca884936775e031cf19900760/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=b5729bd60095fb5ca884936775e031cf19900760", "patch": "@@ -464,13 +464,13 @@ fn id_visitor(vfn: fn@(node_id)) -> visit::vt<()> {\n             vfn(id);\n \n             alt fk {\n-              visit::fk_ctor(nm, tps, self_id, parent_id) {\n+              visit::fk_ctor(nm, _, tps, self_id, parent_id) {\n                 vec::iter(tps, |tp| vfn(tp.id));\n                 vfn(id);\n                 vfn(self_id);\n                 vfn(parent_id.node);\n               }\n-              visit::fk_dtor(tps, self_id, parent_id) {\n+              visit::fk_dtor(tps, _, self_id, parent_id) {\n                 vec::iter(tps, |tp| vfn(tp.id));\n                 vfn(id);\n                 vfn(self_id);"}, {"sha": "f802d176e40d2378b75ce63dabe0fe5f0043369f", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b5729bd60095fb5ca884936775e031cf19900760/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5729bd60095fb5ca884936775e031cf19900760/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=b5729bd60095fb5ca884936775e031cf19900760", "patch": "@@ -16,6 +16,7 @@ export wrap;\n export fold_ty_param;\n export fold_ty_params;\n export fold_fn_decl;\n+export extensions;\n \n iface ast_fold {\n     fn fold_crate(crate) -> crate;\n@@ -701,6 +702,12 @@ impl of ast_fold for ast_fold_precursor {\n     }\n }\n \n+impl extensions for ast_fold {\n+    fn fold_attributes(attrs: ~[attribute]) -> ~[attribute] {\n+        attrs.map(|x| fold_attribute_(x, self))\n+    }\n+}\n+\n fn make_fold(afp: ast_fold_precursor) -> ast_fold {\n     afp as ast_fold\n }"}, {"sha": "74210f74d4d71782e19cf5eff2351a7ed1d01322", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 32, "deletions": 27, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/b5729bd60095fb5ca884936775e031cf19900760/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5729bd60095fb5ca884936775e031cf19900760/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=b5729bd60095fb5ca884936775e031cf19900760", "patch": "@@ -96,8 +96,8 @@ enum pexpr {\n   So that we can distinguish a class ctor or dtor\n   from other class members\n  */\n-enum class_contents { ctor_decl(fn_decl, blk, codemap::span),\n-                      dtor_decl(blk, codemap::span),\n+enum class_contents { ctor_decl(fn_decl, ~[attribute], blk, codemap::span),\n+                      dtor_decl(blk, ~[attribute], codemap::span),\n                       members(~[@class_member]) }\n \n type arg_or_capture_item = either<arg, capture_item>;\n@@ -2145,31 +2145,34 @@ class parser {\n         self.expect(token::LBRACE);\n         let mut ms: ~[@class_member] = ~[];\n         let ctor_id = self.get_id();\n-        let mut the_ctor : option<(fn_decl, blk, codemap::span)> = none;\n-        let mut the_dtor : option<(blk, codemap::span)> = none;\n+        let mut the_ctor : option<(fn_decl, ~[attribute], blk,\n+                                   codemap::span)> = none;\n+        let mut the_dtor : option<(blk, ~[attribute], codemap::span)> = none;\n         while self.token != token::RBRACE {\n             alt self.parse_class_item(class_path) {\n-              ctor_decl(a_fn_decl, blk, s) {\n-                the_ctor = some((a_fn_decl, blk, s));\n+              ctor_decl(a_fn_decl, attrs, blk, s) {\n+                the_ctor = some((a_fn_decl, attrs, blk, s));\n               }\n-              dtor_decl(blk, s) {\n-                the_dtor = some((blk, s));\n+              dtor_decl(blk, attrs, s) {\n+                the_dtor = some((blk, attrs, s));\n               }\n               members(mms) { ms = vec::append(ms, mms); }\n             }\n         }\n         let actual_dtor = do option::map(the_dtor) |dtor| {\n-            let (d_body, d_s) = dtor;\n+            let (d_body, d_attrs, d_s) = dtor;\n             {node: {id: self.get_id(),\n+                    attrs: d_attrs,\n                     self_id: self.get_id(),\n                     body: d_body},\n              span: d_s}};\n         self.bump();\n         alt the_ctor {\n-          some((ct_d, ct_b, ct_s)) {\n+          some((ct_d, ct_attrs, ct_b, ct_s)) {\n             (class_name,\n              item_class(ty_params, traits, ms, {\n                  node: {id: ctor_id,\n+                        attrs: ct_attrs,\n                         self_id: self.get_id(),\n                         dec: ct_d,\n                         body: ct_b},\n@@ -2198,35 +2201,27 @@ class parser {\n         }\n     }\n \n-    fn parse_ctor(result_ty: ast::ty_) -> class_contents {\n-        // FIXME (#2660): Can ctors/dtors have attrs?\n+    fn parse_ctor(attrs: ~[attribute],\n+                  result_ty: ast::ty_) -> class_contents {\n         let lo = self.last_span.lo;\n         let (decl_, _) = self.parse_fn_decl(impure_fn, |p| p.parse_arg());\n         let decl = {output: @{id: self.get_id(),\n                               node: result_ty, span: decl_.output.span}\n                     with decl_};\n         let body = self.parse_block();\n-        ctor_decl(decl, body, mk_sp(lo, self.last_span.hi))\n+        ctor_decl(decl, attrs, body, mk_sp(lo, self.last_span.hi))\n     }\n \n-    fn parse_dtor() -> class_contents {\n-        // FIXME (#2660): Can ctors/dtors have attrs?\n+    fn parse_dtor(attrs: ~[attribute]) -> class_contents {\n         let lo = self.last_span.lo;\n         let body = self.parse_block();\n-        dtor_decl(body, mk_sp(lo, self.last_span.hi))\n+        dtor_decl(body, attrs, mk_sp(lo, self.last_span.hi))\n     }\n \n     fn parse_class_item(class_name_with_tps: @path)\n         -> class_contents {\n-        if self.eat_keyword(~\"new\") {\n-            // result type is always the type of the class\n-            ret self.parse_ctor(ty_path(class_name_with_tps,\n-                                        self.get_id()));\n-        }\n-        else if self.eat_keyword(~\"drop\") {\n-            ret self.parse_dtor();\n-        }\n-        else if self.eat_keyword(~\"priv\") {\n+\n+        if self.eat_keyword(~\"priv\") {\n             self.expect(token::LBRACE);\n             let mut results = ~[];\n             while self.token != token::RBRACE {\n@@ -2235,9 +2230,19 @@ class parser {\n             self.bump();\n             ret members(results);\n         }\n+\n+        let attrs = self.parse_outer_attributes();\n+\n+        if self.eat_keyword(~\"new\") {\n+            // result type is always the type of the class\n+           ret self.parse_ctor(attrs, ty_path(class_name_with_tps,\n+                                        self.get_id()));\n+        }\n+        else if self.eat_keyword(~\"drop\") {\n+           ret self.parse_dtor(attrs);\n+        }\n         else {\n-            // Probably need to parse attrs\n-            ret members(~[self.parse_single_class_item(public)]);\n+           ret members(~[self.parse_single_class_item(public)]);\n         }\n     }\n "}, {"sha": "b8cbeabef1579a2efbcb163c7ace827328fdf290", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b5729bd60095fb5ca884936775e031cf19900760/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5729bd60095fb5ca884936775e031cf19900760/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=b5729bd60095fb5ca884936775e031cf19900760", "patch": "@@ -195,7 +195,7 @@ fn head(s: ps, w: ~str) {\n     // outer-box is consistent\n     cbox(s, indent_unit);\n     // head-box is inconsistent\n-    ibox(s, str::len(w) + 1u);\n+    ibox(s, str::len(w) + 1);\n     // keyword that starts the head\n     word_nbsp(s, w);\n }\n@@ -500,13 +500,19 @@ fn print_item(s: ps, &&item: @ast::item) {\n           bopen(s);\n           hardbreak_if_not_bol(s);\n           maybe_print_comment(s, ctor.span.lo);\n-          head(s, ~\"new\");\n-          print_fn_args_and_ret(s, ctor.node.dec, ~[]);\n+          print_outer_attributes(s, ctor.node.attrs);\n+          /* Doesn't call head because there shouldn't be a space after new */\n+          cbox(s, indent_unit);\n+          ibox(s, 4);\n+          word(s.s, ~\"new(\");\n+          print_fn_args(s, ctor.node.dec, ~[]);\n+          word(s.s, ~\")\");\n           space(s.s);\n           print_block(s, ctor.node.body);\n           do option::iter(m_dtor) |dtor| {\n             hardbreak_if_not_bol(s);\n             maybe_print_comment(s, dtor.span.lo);\n+            print_outer_attributes(s, dtor.node.attrs);\n             head(s, ~\"drop\");\n             print_block(s, dtor.node.body);\n           }"}, {"sha": "ead8e981d7a1b6900457f6d016e2b8b209c1a3c1", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b5729bd60095fb5ca884936775e031cf19900760/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5729bd60095fb5ca884936775e031cf19900760/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=b5729bd60095fb5ca884936775e031cf19900760", "patch": "@@ -17,17 +17,17 @@ enum fn_kind {\n     fk_method(ident, ~[ty_param], @method),\n     fk_anon(proto, capture_clause),  //< an anonymous function like fn@(...)\n     fk_fn_block(capture_clause),     //< a block {||...}\n-    fk_ctor(ident, ~[ty_param], node_id /* self id */,\n+    fk_ctor(ident, ~[attribute], ~[ty_param], node_id /* self id */,\n             def_id /* parent class id */), // class constructor\n-    fk_dtor(~[ty_param], node_id /* self id */,\n+    fk_dtor(~[ty_param], ~[attribute], node_id /* self id */,\n             def_id /* parent class id */) // class destructor\n \n }\n \n fn name_of_fn(fk: fn_kind) -> ident {\n     alt fk {\n       fk_item_fn(name, _) | fk_method(name, _, _)\n-          | fk_ctor(name, _, _, _) { /* FIXME (#2543) */ copy name }\n+          | fk_ctor(name, _, _, _, _) { /* FIXME (#2543) */ copy name }\n       fk_anon(*) | fk_fn_block(*) { @~\"anon\" }\n       fk_dtor(*)                  { @~\"drop\" }\n     }\n@@ -36,7 +36,7 @@ fn name_of_fn(fk: fn_kind) -> ident {\n fn tps_of_fn(fk: fn_kind) -> ~[ty_param] {\n     alt fk {\n       fk_item_fn(_, tps) | fk_method(_, tps, _)\n-              | fk_ctor(_, tps, _, _) | fk_dtor(tps, _, _) {\n+          | fk_ctor(_, _, tps, _, _) | fk_dtor(tps, _, _, _) {\n           /* FIXME (#2543) */ copy tps\n       }\n       fk_anon(*) | fk_fn_block(*) { ~[] }\n@@ -271,16 +271,17 @@ fn visit_method_helper<E>(m: @method, e: E, v: vt<E>) {\n fn visit_class_ctor_helper<E>(ctor: class_ctor, nm: ident, tps: ~[ty_param],\n                               parent_id: def_id, e: E, v: vt<E>) {\n     v.visit_fn(fk_ctor(/* FIXME (#2543) */ copy nm,\n+                       ctor.node.attrs,\n                        /* FIXME (#2543) */ copy tps,\n-                       ctor.node.self_id, parent_id), ctor.node.dec,\n-               ctor.node.body, ctor.span, ctor.node.id, e, v)\n+                       ctor.node.self_id, parent_id),\n+        ctor.node.dec, ctor.node.body, ctor.span, ctor.node.id, e, v)\n \n }\n \n fn visit_class_dtor_helper<E>(dtor: class_dtor, tps: ~[ty_param],\n                               parent_id: def_id, e: E, v: vt<E>) {\n-    v.visit_fn(fk_dtor(/* FIXME (#2543) */ copy tps, dtor.node.self_id,\n-                       parent_id), ast_util::dtor_dec(),\n+    v.visit_fn(fk_dtor(/* FIXME (#2543) */ copy tps, dtor.node.attrs,\n+                       dtor.node.self_id, parent_id), ast_util::dtor_dec(),\n                dtor.node.body, dtor.span, dtor.node.id, e, v)\n \n }"}, {"sha": "3b7eb8e241c0da8e28adc214afdf3b43075c54b4", "filename": "src/rustc/middle/astencode.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b5729bd60095fb5ca884936775e031cf19900760/src%2Frustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5729bd60095fb5ca884936775e031cf19900760/src%2Frustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fastencode.rs?ref=b5729bd60095fb5ca884936775e031cf19900760", "patch": "@@ -3,6 +3,7 @@ import util::ppaux::ty_to_str;\n import dvec::extensions;\n import syntax::ast;\n import syntax::fold;\n+import syntax::fold::*;\n import syntax::visit;\n import syntax::ast_map;\n import syntax::ast_util;\n@@ -295,21 +296,25 @@ fn renumber_ast(xcx: extended_decode_ctxt, ii: ast::inlined_item)\n       }\n       ast::ii_ctor(ctor, nm, tps, parent_id) {\n         let ctor_body = fld.fold_block(ctor.node.body);\n+        let ctor_attrs = fld.fold_attributes(ctor.node.attrs);\n         let ctor_decl = fold::fold_fn_decl(ctor.node.dec, fld);\n         let new_params = fold::fold_ty_params(tps, fld);\n         let ctor_id = fld.new_id(ctor.node.id);\n         let new_parent = xcx.tr_def_id(parent_id);\n-        ast::ii_ctor({node: {body: ctor_body, dec: ctor_decl, id: ctor_id\n+        ast::ii_ctor({node: {body: ctor_body, attrs: ctor_attrs,\n+                dec: ctor_decl, id: ctor_id\n                               with ctor.node}\n             with ctor}, nm, new_params, new_parent)\n       }\n       ast::ii_dtor(dtor, nm, tps, parent_id) {\n         let dtor_body = fld.fold_block(dtor.node.body);\n+        let dtor_attrs = fld.fold_attributes(dtor.node.attrs);\n         let new_params = fold::fold_ty_params(tps, fld);\n         let dtor_id = fld.new_id(dtor.node.id);\n         let new_parent = xcx.tr_def_id(parent_id);\n         let new_self = fld.new_id(dtor.node.self_id);\n-        ast::ii_dtor({node: {id: dtor_id, self_id: new_self, body: dtor_body}\n+        ast::ii_dtor({node: {id: dtor_id, attrs: dtor_attrs,\n+                self_id: new_self, body: dtor_body}\n                         with dtor},\n           nm, new_params, new_parent)\n       }"}, {"sha": "847febdef8646885e65ef0140a5f67f31f9f2acb", "filename": "src/rustc/middle/trans/reachable.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b5729bd60095fb5ca884936775e031cf19900760/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5729bd60095fb5ca884936775e031cf19900760/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs?ref=b5729bd60095fb5ca884936775e031cf19900760", "patch": "@@ -111,10 +111,14 @@ fn traverse_public_item(cx: ctx, item: @item) {\n       }\n       item_class(tps, _traits, items, ctor, m_dtor) {\n         cx.rmap.insert(ctor.node.id, ());\n+        if tps.len() > 0u || attr::find_inline_attr(ctor.node.attrs)\n+                 != attr::ia_none {\n+            traverse_inline_body(cx, ctor.node.body);\n+        }\n         do option::iter(m_dtor) |dtor| {\n             cx.rmap.insert(dtor.node.id, ());\n-            // dtors don't have attrs\n-            if tps.len() > 0u {\n+            if tps.len() > 0u || attr::find_inline_attr(dtor.node.attrs)\n+                     != attr::ia_none {\n                 traverse_inline_body(cx, dtor.node.body);\n             }\n         }"}, {"sha": "36e1ca621f934cac22a88517feed5759003fda64", "filename": "src/test/run-pass/class-attributes-1.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b5729bd60095fb5ca884936775e031cf19900760/src%2Ftest%2Frun-pass%2Fclass-attributes-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5729bd60095fb5ca884936775e031cf19900760/src%2Ftest%2Frun-pass%2Fclass-attributes-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-attributes-1.rs?ref=b5729bd60095fb5ca884936775e031cf19900760", "patch": "@@ -0,0 +1,11 @@\n+// pp-exact - Make sure we actually print the attributes\n+\n+class cat {\n+    #[cat_maker]\n+    new(name: ~str) { self.name = name; }\n+    #[cat_dropper]\n+    drop { #error[\"%s landed on hir feet\", self.name]; }\n+    let name: ~str;\n+}\n+\n+fn main() { let _kitty = cat(~\"Spotty\"); }"}, {"sha": "8c75d7f6b5a9bdf226001d45fd8adaece3b80511", "filename": "src/test/run-pass/class-attributes-2.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b5729bd60095fb5ca884936775e031cf19900760/src%2Ftest%2Frun-pass%2Fclass-attributes-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5729bd60095fb5ca884936775e031cf19900760/src%2Ftest%2Frun-pass%2Fclass-attributes-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-attributes-2.rs?ref=b5729bd60095fb5ca884936775e031cf19900760", "patch": "@@ -0,0 +1,17 @@\n+class cat {\n+  let name: ~str;\n+  #[cat_maker]\n+  /**\n+     Maybe it should technically be a kitten_maker.\n+  */\n+  new(name: ~str) { self.name = name; }\n+  #[cat_dropper]\n+  /**\n+     Actually, cats don't always land on their feet when you drop them.\n+  */\n+  drop { #error(\"%s landed on hir feet\", self.name); }\n+}\n+\n+fn main() {\n+  let _kitty = cat(~\"Spotty\");\n+}"}]}