{"sha": "71201234d2ed3f20637fc373df063e7750cbc0ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxMjAxMjM0ZDJlZDNmMjA2MzdmYzM3M2RmMDYzZTc3NTBjYmMwYWQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-17T16:33:44Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-17T19:50:23Z"}, "message": "rollup merge of #19720: csouth3/vecmap-newtypes\n\nUsing a type alias for iterator implementations is fragile since this\nexposes the implementation to users of the iterator, and any changes\ncould break existing code.\n\nThis commit changes the iterators of `VecMap` to use\nproper new types, rather than type aliases.  However, since it is\nfair-game to treat a type-alias as the aliased type, this is a:\n\n[breaking-change].", "tree": {"sha": "9c594a091c6ccaf1679e9285193a59d191695fc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c594a091c6ccaf1679e9285193a59d191695fc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71201234d2ed3f20637fc373df063e7750cbc0ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71201234d2ed3f20637fc373df063e7750cbc0ad", "html_url": "https://github.com/rust-lang/rust/commit/71201234d2ed3f20637fc373df063e7750cbc0ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71201234d2ed3f20637fc373df063e7750cbc0ad/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66c297d847ce06a8982d4d322221b17a3cd04f90", "url": "https://api.github.com/repos/rust-lang/rust/commits/66c297d847ce06a8982d4d322221b17a3cd04f90", "html_url": "https://github.com/rust-lang/rust/commit/66c297d847ce06a8982d4d322221b17a3cd04f90"}, {"sha": "81f9a319265ddbe6b7823b50c29e3aff076d82c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/81f9a319265ddbe6b7823b50c29e3aff076d82c1", "html_url": "https://github.com/rust-lang/rust/commit/81f9a319265ddbe6b7823b50c29e3aff076d82c1"}], "stats": {"total": 59, "additions": 45, "deletions": 14}, "files": [{"sha": "60390e9375347c9fff7173c3c8dc764407654bde", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 45, "deletions": 14, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/71201234d2ed3f20637fc373df063e7750cbc0ad/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71201234d2ed3f20637fc373df063e7750cbc0ad/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=71201234d2ed3f20637fc373df063e7750cbc0ad", "patch": "@@ -19,7 +19,7 @@ use core::default::Default;\n use core::fmt;\n use core::hash::{Hash, Writer};\n use core::iter;\n-use core::iter::{Enumerate, FilterMap};\n+use core::iter::{Enumerate, FilterMap, Map};\n use core::mem::replace;\n use core::ops::FnOnce;\n \n@@ -144,7 +144,7 @@ impl<V> VecMap<V> {\n     pub fn keys<'r>(&'r self) -> Keys<'r, V> {\n         fn first<A, B>((a, _): (A, B)) -> A { a }\n \n-        self.iter().map(first)\n+        Keys { iter: self.iter().map(first) }\n     }\n \n     /// Returns an iterator visiting all values in ascending order by the keys.\n@@ -153,7 +153,7 @@ impl<V> VecMap<V> {\n     pub fn values<'r>(&'r self) -> Values<'r, V> {\n         fn second<A, B>((_, b): (A, B)) -> B { b }\n \n-        self.iter().map(second)\n+        Values { iter: self.iter().map(second) }\n     }\n \n     /// Returns an iterator visiting all key-value pairs in ascending order by the keys.\n@@ -240,7 +240,7 @@ impl<V> VecMap<V> {\n         }\n \n         let values = replace(&mut self.v, vec!());\n-        values.into_iter().enumerate().filter_map(filter)\n+        MoveItems { iter: values.into_iter().enumerate().filter_map(filter) }\n     }\n \n     /// Return the number of elements in the map.\n@@ -603,7 +603,7 @@ macro_rules! double_ended_iterator {\n     }\n }\n \n-/// Forward iterator over a map.\n+/// An iterator over the key-value pairs of a map.\n pub struct Entries<'a, V:'a> {\n     front: uint,\n     back: uint,\n@@ -613,7 +613,7 @@ pub struct Entries<'a, V:'a> {\n iterator!(impl Entries -> (uint, &'a V), as_ref)\n double_ended_iterator!(impl Entries -> (uint, &'a V), as_ref)\n \n-/// Forward iterator over the key-value pairs of a map, with the\n+/// An iterator over the key-value pairs of a map, with the\n /// values being mutable.\n pub struct MutEntries<'a, V:'a> {\n     front: uint,\n@@ -624,19 +624,50 @@ pub struct MutEntries<'a, V:'a> {\n iterator!(impl MutEntries -> (uint, &'a mut V), as_mut)\n double_ended_iterator!(impl MutEntries -> (uint, &'a mut V), as_mut)\n \n-/// Forward iterator over the keys of a map\n-pub type Keys<'a, V> = iter::Map<(uint, &'a V), uint, Entries<'a, V>, fn((uint, &'a V)) -> uint>;\n+/// An iterator over the keys of a map.\n+pub struct Keys<'a, V: 'a> {\n+    iter: Map<(uint, &'a V), uint, Entries<'a, V>, fn((uint, &'a V)) -> uint>\n+}\n \n-/// Forward iterator over the values of a map\n-pub type Values<'a, V> =\n-    iter::Map<(uint, &'a V), &'a V, Entries<'a, V>, fn((uint, &'a V)) -> &'a V>;\n+/// An iterator over the values of a map.\n+pub struct Values<'a, V: 'a> {\n+    iter: Map<(uint, &'a V), &'a V, Entries<'a, V>, fn((uint, &'a V)) -> &'a V>\n+}\n \n-/// Iterator over the key-value pairs of a map, the iterator consumes the map\n-pub type MoveItems<V> = FilterMap<\n+/// A consuming iterator over the key-value pairs of a map.\n+pub struct MoveItems<V> {\n+    iter: FilterMap<\n     (uint, Option<V>),\n     (uint, V),\n     Enumerate<vec::MoveItems<Option<V>>>,\n-    fn((uint, Option<V>)) -> Option<(uint, V)>>;\n+    fn((uint, Option<V>)) -> Option<(uint, V)>>\n+}\n+\n+impl<'a, V> Iterator<uint> for Keys<'a, V> {\n+    fn next(&mut self) -> Option<uint> { self.iter.next() }\n+    fn size_hint(&self) -> (uint, Option<uint>) { self.iter.size_hint() }\n+}\n+impl<'a, V> DoubleEndedIterator<uint> for Keys<'a, V> {\n+    fn next_back(&mut self) -> Option<uint> { self.iter.next_back() }\n+}\n+\n+\n+impl<'a, V> Iterator<&'a V> for Values<'a, V> {\n+    fn next(&mut self) -> Option<(&'a V)> { self.iter.next() }\n+    fn size_hint(&self) -> (uint, Option<uint>) { self.iter.size_hint() }\n+}\n+impl<'a, V> DoubleEndedIterator<&'a V> for Values<'a, V> {\n+    fn next_back(&mut self) -> Option<(&'a V)> { self.iter.next_back() }\n+}\n+\n+\n+impl<V> Iterator<(uint, V)> for MoveItems<V> {\n+    fn next(&mut self) -> Option<(uint, V)> { self.iter.next() }\n+    fn size_hint(&self) -> (uint, Option<uint>) { self.iter.size_hint() }\n+}\n+impl<V> DoubleEndedIterator<(uint, V)> for MoveItems<V> {\n+    fn next_back(&mut self) -> Option<(uint, V)> { self.iter.next_back() }\n+}\n \n #[cfg(test)]\n mod test_map {"}]}