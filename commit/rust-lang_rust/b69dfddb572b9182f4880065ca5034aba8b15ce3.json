{"sha": "b69dfddb572b9182f4880065ca5034aba8b15ce3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2OWRmZGRiNTcyYjkxODJmNDg4MDA2NWNhNTAzNGFiYThiMTVjZTM=", "commit": {"author": {"name": "JmPotato", "email": "ghzpotato@gmail.com", "date": "2020-08-11T06:35:15Z"}, "committer": {"name": "JmPotato", "email": "ghzpotato@gmail.com", "date": "2020-08-11T06:35:15Z"}, "message": "Remove redundant dependencies\n\nSigned-off-by: JmPotato <ghzpotato@gmail.com>", "tree": {"sha": "a4b9d99f71b4ac4db9dfa92e335928490e9a4c65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4b9d99f71b4ac4db9dfa92e335928490e9a4c65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b69dfddb572b9182f4880065ca5034aba8b15ce3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b69dfddb572b9182f4880065ca5034aba8b15ce3", "html_url": "https://github.com/rust-lang/rust/commit/b69dfddb572b9182f4880065ca5034aba8b15ce3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b69dfddb572b9182f4880065ca5034aba8b15ce3/comments", "author": {"login": "JmPotato", "id": 1446531, "node_id": "MDQ6VXNlcjE0NDY1MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1446531?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JmPotato", "html_url": "https://github.com/JmPotato", "followers_url": "https://api.github.com/users/JmPotato/followers", "following_url": "https://api.github.com/users/JmPotato/following{/other_user}", "gists_url": "https://api.github.com/users/JmPotato/gists{/gist_id}", "starred_url": "https://api.github.com/users/JmPotato/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JmPotato/subscriptions", "organizations_url": "https://api.github.com/users/JmPotato/orgs", "repos_url": "https://api.github.com/users/JmPotato/repos", "events_url": "https://api.github.com/users/JmPotato/events{/privacy}", "received_events_url": "https://api.github.com/users/JmPotato/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JmPotato", "id": 1446531, "node_id": "MDQ6VXNlcjE0NDY1MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1446531?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JmPotato", "html_url": "https://github.com/JmPotato", "followers_url": "https://api.github.com/users/JmPotato/followers", "following_url": "https://api.github.com/users/JmPotato/following{/other_user}", "gists_url": "https://api.github.com/users/JmPotato/gists{/gist_id}", "starred_url": "https://api.github.com/users/JmPotato/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JmPotato/subscriptions", "organizations_url": "https://api.github.com/users/JmPotato/orgs", "repos_url": "https://api.github.com/users/JmPotato/repos", "events_url": "https://api.github.com/users/JmPotato/events{/privacy}", "received_events_url": "https://api.github.com/users/JmPotato/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ace75f95905564a34f46be57ead51828844da745", "url": "https://api.github.com/repos/rust-lang/rust/commits/ace75f95905564a34f46be57ead51828844da745", "html_url": "https://github.com/rust-lang/rust/commit/ace75f95905564a34f46be57ead51828844da745"}], "stats": {"total": 7, "additions": 2, "deletions": 5}, "files": [{"sha": "a094ec4f7aef0331a1ef11064b8c0764214adabf", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b69dfddb572b9182f4880065ca5034aba8b15ce3/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b69dfddb572b9182f4880065ca5034aba8b15ce3/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b69dfddb572b9182f4880065ca5034aba8b15ce3", "patch": "@@ -912,7 +912,6 @@ dependencies = [\n  \"ra_db\",\n  \"ra_fmt\",\n  \"ra_hir\",\n- \"ra_hir_expand\",\n  \"ra_ide_db\",\n  \"ra_prof\",\n  \"ra_syntax\","}, {"sha": "bd2905f080af30b0e6c1a2ca1302bd2b2b1fbb28", "filename": "crates/ra_assists/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b69dfddb572b9182f4880065ca5034aba8b15ce3/crates%2Fra_assists%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b69dfddb572b9182f4880065ca5034aba8b15ce3/crates%2Fra_assists%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2FCargo.toml?ref=b69dfddb572b9182f4880065ca5034aba8b15ce3", "patch": "@@ -22,5 +22,4 @@ ra_prof = { path = \"../ra_prof\" }\n ra_db = { path = \"../ra_db\" }\n ra_ide_db = { path = \"../ra_ide_db\" }\n hir = { path = \"../ra_hir\", package = \"ra_hir\" }\n-hir_expand = { path = \"../ra_hir_expand\", package = \"ra_hir_expand\" }\n test_utils = { path = \"../test_utils\" }"}, {"sha": "6c92124eda1b40f321e46a2d33396b69ee7ef32f", "filename": "crates/ra_assists/src/ast_transform.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b69dfddb572b9182f4880065ca5034aba8b15ce3/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b69dfddb572b9182f4880065ca5034aba8b15ce3/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_transform.rs?ref=b69dfddb572b9182f4880065ca5034aba8b15ce3", "patch": "@@ -2,7 +2,6 @@\n use rustc_hash::FxHashMap;\n \n use hir::{HirDisplay, PathResolution, SemanticsScope};\n-use hir_expand::hygiene::Hygiene;\n use ra_syntax::{\n     algo::SyntaxRewriter,\n     ast::{self, AstNode},\n@@ -111,7 +110,7 @@ impl<'a> SubstituteTypeParams<'a> {\n             ast::Type::PathType(path_type) => path_type.path()?,\n             _ => return None,\n         };\n-        let path = hir::Path::from_src(path, &Hygiene::new_unhygienic())?;\n+        let path = hir::Path::from_src(path, &hir::Hygiene::new_unhygienic())?;\n         let resolution = self.source_scope.resolve_hir_path(&path)?;\n         match resolution {\n             hir::PathResolution::TypeParam(tp) => Some(self.substs.get(&tp)?.syntax().clone()),\n@@ -151,7 +150,7 @@ impl<'a> QualifyPaths<'a> {\n             // don't try to qualify `Fn(Foo) -> Bar` paths, they are in prelude anyway\n             return None;\n         }\n-        let hir_path = hir::Path::from_src(p.clone(), &Hygiene::new_unhygienic())?;\n+        let hir_path = hir::Path::from_src(p.clone(), &hir::Hygiene::new_unhygienic())?;\n         let resolution = self.source_scope.resolve_hir_path(&hir_path)?;\n         match resolution {\n             PathResolution::Def(def) => {"}]}