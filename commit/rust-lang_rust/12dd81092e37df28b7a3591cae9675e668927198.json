{"sha": "12dd81092e37df28b7a3591cae9675e668927198", "node_id": "C_kwDOAAsO6NoAKDEyZGQ4MTA5MmUzN2RmMjhiN2EzNTkxY2FlOTY3NWU2Njg5MjcxOTg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-17T23:15:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-17T23:15:37Z"}, "message": "Auto merge of #12574 - Veykril:completion, r=Veykril\n\nminor: Simplify", "tree": {"sha": "3d7f1647b8cf5a2e2e30d4dfef2945a050a275cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d7f1647b8cf5a2e2e30d4dfef2945a050a275cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12dd81092e37df28b7a3591cae9675e668927198", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12dd81092e37df28b7a3591cae9675e668927198", "html_url": "https://github.com/rust-lang/rust/commit/12dd81092e37df28b7a3591cae9675e668927198", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12dd81092e37df28b7a3591cae9675e668927198/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69f30964ea52dfd4bcd9c6116759316418ed259d", "url": "https://api.github.com/repos/rust-lang/rust/commits/69f30964ea52dfd4bcd9c6116759316418ed259d", "html_url": "https://github.com/rust-lang/rust/commit/69f30964ea52dfd4bcd9c6116759316418ed259d"}, {"sha": "0665428b4ec177cc3969f5c2ce4ddd54812afda4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0665428b4ec177cc3969f5c2ce4ddd54812afda4", "html_url": "https://github.com/rust-lang/rust/commit/0665428b4ec177cc3969f5c2ce4ddd54812afda4"}], "stats": {"total": 122, "additions": 47, "deletions": 75}, "files": [{"sha": "6152ccb711fb543510e1dd49726bd482d7581681", "filename": "crates/ide-completion/src/completions/expr.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/12dd81092e37df28b7a3591cae9675e668927198/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12dd81092e37df28b7a3591cae9675e668927198/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs?ref=12dd81092e37df28b7a3591cae9675e668927198", "patch": "@@ -4,14 +4,14 @@ use hir::ScopeDef;\n use ide_db::FxHashSet;\n \n use crate::{\n-    context::{NameRefContext, NameRefKind, PathCompletionCtx, PathKind, Qualified},\n+    context::{PathCompletionCtx, PathKind, Qualified},\n     CompletionContext, Completions,\n };\n \n pub(crate) fn complete_expr_path(\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n-    name_ref_ctx: &NameRefContext,\n+    path_ctx: &PathCompletionCtx,\n ) {\n     let _p = profile::span(\"complete_expr_path\");\n \n@@ -23,22 +23,18 @@ pub(crate) fn complete_expr_path(\n         after_if_expr,\n         wants_mut_token,\n         in_condition,\n-    ) = match name_ref_ctx {\n-        &NameRefContext {\n+    ) = match path_ctx {\n+        &PathCompletionCtx {\n             kind:\n-                Some(NameRefKind::Path(PathCompletionCtx {\n-                    kind:\n-                        PathKind::Expr {\n-                            in_block_expr,\n-                            in_loop_body,\n-                            after_if_expr,\n-                            in_condition,\n-                            ref ref_expr_parent,\n-                            ref is_func_update,\n-                        },\n-                    ref qualified,\n-                    ..\n-                })),\n+                PathKind::Expr {\n+                    in_block_expr,\n+                    in_loop_body,\n+                    after_if_expr,\n+                    in_condition,\n+                    ref ref_expr_parent,\n+                    ref is_func_update,\n+                },\n+            ref qualified,\n             ..\n         } if ctx.qualifier_ctx.none() => (\n             qualified,"}, {"sha": "6d346c5fd4b89648312b238d9373e3522f41acc9", "filename": "crates/ide-completion/src/completions/field.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/12dd81092e37df28b7a3591cae9675e668927198/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12dd81092e37df28b7a3591cae9675e668927198/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffield.rs?ref=12dd81092e37df28b7a3591cae9675e668927198", "patch": "@@ -1,29 +1,22 @@\n //! Completion of field list position.\n \n use crate::{\n-    context::{\n-        NameContext, NameKind, NameRefContext, NameRefKind, PathCompletionCtx, PathKind, Qualified,\n-        TypeLocation,\n-    },\n+    context::{NameContext, NameKind, PathCompletionCtx, PathKind, Qualified, TypeLocation},\n     CompletionContext, Completions,\n };\n \n pub(crate) fn complete_field_list_tuple_variant(\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n-    name_ref_ctx: &NameRefContext,\n+    path_ctx: &PathCompletionCtx,\n ) {\n-    match name_ref_ctx {\n-        NameRefContext {\n-            kind:\n-                Some(NameRefKind::Path(PathCompletionCtx {\n-                    has_macro_bang: false,\n-                    qualified: Qualified::No,\n-                    parent: None,\n-                    kind: PathKind::Type { location: TypeLocation::TupleField },\n-                    has_type_args: false,\n-                    ..\n-                })),\n+    match path_ctx {\n+        PathCompletionCtx {\n+            has_macro_bang: false,\n+            qualified: Qualified::No,\n+            parent: None,\n+            kind: PathKind::Type { location: TypeLocation::TupleField },\n+            has_type_args: false,\n             ..\n         } => {\n             if ctx.qualifier_ctx.vis_node.is_none() {"}, {"sha": "f4402a3f87a32ffd2200dfecae8a1356a68ca6b0", "filename": "crates/ide-completion/src/completions/item_list.rs", "status": "modified", "additions": 15, "deletions": 35, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/12dd81092e37df28b7a3591cae9675e668927198/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12dd81092e37df28b7a3591cae9675e668927198/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs?ref=12dd81092e37df28b7a3591cae9675e668927198", "patch": "@@ -2,7 +2,7 @@\n \n use crate::{\n     completions::module_or_fn_macro,\n-    context::{ItemListKind, NameRefContext, NameRefKind, PathCompletionCtx, PathKind, Qualified},\n+    context::{ItemListKind, PathCompletionCtx, PathKind, Qualified},\n     CompletionContext, Completions,\n };\n \n@@ -11,45 +11,25 @@ pub(crate) mod trait_impl;\n pub(crate) fn complete_item_list(\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n-    name_ref_ctx: &NameRefContext,\n+    path_ctx: &PathCompletionCtx,\n ) {\n     let _p = profile::span(\"complete_item_list\");\n-\n-    let (qualified, item_list_kind, is_trivial_path) = match name_ref_ctx {\n-        NameRefContext {\n-            kind:\n-                Some(NameRefKind::Path(\n-                    ctx @ PathCompletionCtx { kind: PathKind::Item { kind }, qualified, .. },\n-                )),\n-            ..\n-        } => (qualified, Some(kind), ctx.is_trivial_path()),\n-        NameRefContext {\n-            kind:\n-                Some(NameRefKind::Path(\n-                    ctx @ PathCompletionCtx {\n-                        kind: PathKind::Expr { in_block_expr: true, .. },\n-                        qualified,\n-                        ..\n-                    },\n-                )),\n-            ..\n-        } => (qualified, None, ctx.is_trivial_path()),\n+    let qualified = match path_ctx {\n+        PathCompletionCtx { kind: PathKind::Item { kind }, qualified, .. } => {\n+            if path_ctx.is_trivial_path() {\n+                add_keywords(acc, ctx, Some(kind));\n+            }\n+            qualified\n+        }\n+        PathCompletionCtx { kind: PathKind::Expr { in_block_expr: true, .. }, .. }\n+            if path_ctx.is_trivial_path() =>\n+        {\n+            add_keywords(acc, ctx, None);\n+            return;\n+        }\n         _ => return,\n     };\n \n-    if matches!(item_list_kind, Some(ItemListKind::TraitImpl)) {\n-        trait_impl::complete_trait_impl_name_ref(acc, ctx, name_ref_ctx);\n-    }\n-\n-    if is_trivial_path {\n-        add_keywords(acc, ctx, item_list_kind);\n-    }\n-\n-    if item_list_kind.is_none() {\n-        // this is already handled by expression\n-        return;\n-    }\n-\n     match qualified {\n         Qualified::With {\n             resolution: Some(hir::PathResolution::Def(hir::ModuleDef::Module(module))),"}, {"sha": "b5022dab932d6879c531663dc446b9e24ad6abcf", "filename": "crates/ide-completion/src/lib.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/12dd81092e37df28b7a3591cae9675e668927198/crates%2Fide-completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12dd81092e37df28b7a3591cae9675e668927198/crates%2Fide-completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Flib.rs?ref=12dd81092e37df28b7a3591cae9675e668927198", "patch": "@@ -171,22 +171,25 @@ pub fn completions(\n                 completions::item_list::trait_impl::complete_trait_impl_name(acc, ctx, name_ctx);\n                 completions::mod_::complete_mod(acc, ctx, name_ctx);\n             }\n-            IdentContext::NameRef(name_ref_ctx @ NameRefContext { kind, .. }) => {\n-                completions::expr::complete_expr_path(acc, ctx, name_ref_ctx);\n-                completions::field::complete_field_list_tuple_variant(acc, ctx, name_ref_ctx);\n-                completions::item_list::complete_item_list(acc, ctx, name_ref_ctx);\n-                completions::use_::complete_use_tree(acc, ctx, name_ref_ctx);\n+            IdentContext::NameRef(name_ctx @ NameRefContext { kind, .. }) => {\n+                completions::item_list::trait_impl::complete_trait_impl_name_ref(\n+                    acc, ctx, name_ctx,\n+                );\n+                completions::use_::complete_use_tree(acc, ctx, name_ctx);\n \n                 match kind {\n                     Some(NameRefKind::Path(path_ctx)) => {\n-                        completions::flyimport::import_on_the_fly_path(acc, ctx, path_ctx);\n-                        completions::record::complete_record_expr_func_update(acc, ctx, path_ctx);\n                         completions::attribute::complete_attribute(acc, ctx, path_ctx);\n                         completions::attribute::complete_derive(acc, ctx, path_ctx);\n                         completions::dot::complete_undotted_self(acc, ctx, path_ctx);\n+                        completions::expr::complete_expr_path(acc, ctx, path_ctx);\n+                        completions::field::complete_field_list_tuple_variant(acc, ctx, path_ctx);\n+                        completions::flyimport::import_on_the_fly_path(acc, ctx, path_ctx);\n+                        completions::item_list::complete_item_list(acc, ctx, path_ctx);\n                         completions::pattern::pattern_path_completion(acc, ctx, path_ctx);\n                         completions::r#type::complete_inferred_type(acc, ctx, path_ctx);\n                         completions::r#type::complete_type_path(acc, ctx, path_ctx);\n+                        completions::record::complete_record_expr_func_update(acc, ctx, path_ctx);\n                         completions::snippet::complete_expr_snippet(acc, ctx, path_ctx);\n                         completions::snippet::complete_item_snippet(acc, ctx, path_ctx);\n                         completions::vis::complete_vis_path(acc, ctx, path_ctx);"}]}