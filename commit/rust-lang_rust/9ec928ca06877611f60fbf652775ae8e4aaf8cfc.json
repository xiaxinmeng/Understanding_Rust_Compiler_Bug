{"sha": "9ec928ca06877611f60fbf652775ae8e4aaf8cfc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllYzkyOGNhMDY4Nzc2MTFmNjBmYmY2NTI3NzVhZThlNGFhZjhjZmM=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-09-10T02:28:02Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-09-28T00:11:12Z"}, "message": "[const-prop] Replace some `Binaryp` handling with use of `InterpCx`", "tree": {"sha": "6da7914bc58180f1c3df422549664ab95f896116", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6da7914bc58180f1c3df422549664ab95f896116"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ec928ca06877611f60fbf652775ae8e4aaf8cfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ec928ca06877611f60fbf652775ae8e4aaf8cfc", "html_url": "https://github.com/rust-lang/rust/commit/9ec928ca06877611f60fbf652775ae8e4aaf8cfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ec928ca06877611f60fbf652775ae8e4aaf8cfc/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11eb91f412b2693c970216099b9d910498b0b789", "url": "https://api.github.com/repos/rust-lang/rust/commits/11eb91f412b2693c970216099b9d910498b0b789", "html_url": "https://github.com/rust-lang/rust/commit/11eb91f412b2693c970216099b9d910498b0b789"}], "stats": {"total": 62, "additions": 24, "deletions": 38}, "files": [{"sha": "06117dc6a7ee4f7b8f846ca30f511f5522296386", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 24, "deletions": 38, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/9ec928ca06877611f60fbf652775ae8e4aaf8cfc/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ec928ca06877611f60fbf652775ae8e4aaf8cfc/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=9ec928ca06877611f60fbf652775ae8e4aaf8cfc", "patch": "@@ -351,30 +351,13 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             }\n             Rvalue::BinaryOp(op, ref left, ref right) => {\n                 trace!(\"rvalue binop {:?} for {:?} and {:?}\", op, left, right);\n-                let right = self.eval_operand(right, source_info)?;\n-                let def_id = if self.tcx.is_closure(self.source.def_id()) {\n-                    self.tcx.closure_base_def_id(self.source.def_id())\n-                } else {\n-                    self.source.def_id()\n-                };\n-                let generics = self.tcx.generics_of(def_id);\n-                if generics.requires_monomorphization(self.tcx) {\n-                    // FIXME: can't handle code with generics\n-                    return None;\n-                }\n \n                 let r = self.use_ecx(source_info, |this| {\n-                    this.ecx.read_immediate(right)\n+                    this.ecx.read_immediate(this.ecx.eval_operand(right, None)?)\n                 })?;\n                 if op == BinOp::Shr || op == BinOp::Shl {\n-                    let left_ty = left.ty(&self.local_decls, self.tcx);\n-                    let left_bits = self\n-                        .tcx\n-                        .layout_of(self.param_env.and(left_ty))\n-                        .unwrap()\n-                        .size\n-                        .bits();\n-                    let right_size = right.layout.size;\n+                    let left_bits = place_layout.size.bits();\n+                    let right_size = r.layout.size;\n                     let r_bits = r.to_scalar().and_then(|r| r.to_bits(right_size));\n                     if r_bits.ok().map_or(false, |b| b >= left_bits as u128) {\n                         let source_scope_local_data = match self.source_scope_local_data {\n@@ -395,26 +378,29 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                         return None;\n                     }\n                 }\n-                let left = self.eval_operand(left, source_info)?;\n-                let l = self.use_ecx(source_info, |this| {\n-                    this.ecx.read_immediate(left)\n-                })?;\n                 trace!(\"const evaluating {:?} for {:?} and {:?}\", op, left, right);\n-                let (val, overflow, _ty) = self.use_ecx(source_info, |this| {\n-                    this.ecx.overflowing_binary_op(op, l, r)\n+                let val = self.use_ecx(source_info, |this| {\n+                    let l = this.ecx.read_immediate(this.ecx.eval_operand(left, None)?)?;\n+                    let (val, overflow, _ty) = this.ecx.overflowing_binary_op(op, l, r)?;\n+\n+                    // We check overflow in debug mode already\n+                    // so should only check in release mode.\n+                    if !this.tcx.sess.overflow_checks() && overflow {\n+                        let err = err_panic!(Overflow(op)).into();\n+                        return Err(err);\n+                    }\n+\n+                    let val = ImmTy {\n+                        imm: Immediate::Scalar(val.into()),\n+                        layout: place_layout,\n+                    };\n+\n+                    let dest = this.ecx.eval_place(place)?;\n+                    this.ecx.write_immediate(*val, dest)?;\n+\n+                    Ok(val)\n                 })?;\n-                // We check overflow in debug mode already\n-                // so should only check in release mode.\n-                if !self.tcx.sess.overflow_checks() && overflow {\n-                    let err = err_panic!(Overflow(op)).into();\n-                    let _: Option<()> = self.use_ecx(source_info, |_| Err(err));\n-                    return None;\n-                }\n-                let res = ImmTy {\n-                    imm: Immediate::Scalar(val.into()),\n-                    layout: place_layout,\n-                };\n-                Some(res.into())\n+                Some(val.into())\n             },\n         }\n     }"}]}