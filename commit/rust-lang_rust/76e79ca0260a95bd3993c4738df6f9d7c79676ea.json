{"sha": "76e79ca0260a95bd3993c4738df6f9d7c79676ea", "node_id": "C_kwDOAAsO6NoAKDc2ZTc5Y2EwMjYwYTk1YmQzOTkzYzQ3MzhkZjZmOWQ3Yzc5Njc2ZWE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-16T01:07:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-16T01:07:42Z"}, "message": "Auto merge of #111044 - jmillikin:nonzero-negation, r=dtolnay\n\nStabilize feature `nonzero_negation_ops`\n\nFixes #102443\n\nACP: https://github.com/rust-lang/libs-team/issues/105", "tree": {"sha": "6e96af73ffeb287e980802ef7e27808890685eba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e96af73ffeb287e980802ef7e27808890685eba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76e79ca0260a95bd3993c4738df6f9d7c79676ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76e79ca0260a95bd3993c4738df6f9d7c79676ea", "html_url": "https://github.com/rust-lang/rust/commit/76e79ca0260a95bd3993c4738df6f9d7c79676ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76e79ca0260a95bd3993c4738df6f9d7c79676ea/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea54255501221b26bf2242c09cbd0924dc8ee1ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea54255501221b26bf2242c09cbd0924dc8ee1ea", "html_url": "https://github.com/rust-lang/rust/commit/ea54255501221b26bf2242c09cbd0924dc8ee1ea"}, {"sha": "bfa3e8add4ad842e5765a3b9c1e0bf9f53b5a23f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfa3e8add4ad842e5765a3b9c1e0bf9f53b5a23f", "html_url": "https://github.com/rust-lang/rust/commit/bfa3e8add4ad842e5765a3b9c1e0bf9f53b5a23f"}], "stats": {"total": 30, "additions": 12, "deletions": 18}, "files": [{"sha": "38a1c42d9e825cb55c06e7c78c778a03bd001b37", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/76e79ca0260a95bd3993c4738df6f9d7c79676ea/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76e79ca0260a95bd3993c4738df6f9d7c79676ea/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=76e79ca0260a95bd3993c4738df6f9d7c79676ea", "patch": "@@ -756,8 +756,6 @@ macro_rules! nonzero_signed_operations {\n                 /// # Example\n                 ///\n                 /// ```\n-                /// #![feature(nonzero_negation_ops)]\n-                ///\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 /// # fn main() { test().unwrap(); }\n                 /// # fn test() -> Option<()> {\n@@ -771,7 +769,8 @@ macro_rules! nonzero_signed_operations {\n                 /// ```\n                 #[must_use]\n                 #[inline]\n-                #[unstable(feature = \"nonzero_negation_ops\", issue = \"102443\")]\n+                #[stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n+                #[rustc_const_stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n                 pub const fn is_positive(self) -> bool {\n                     self.get().is_positive()\n                 }\n@@ -782,8 +781,6 @@ macro_rules! nonzero_signed_operations {\n                 /// # Example\n                 ///\n                 /// ```\n-                /// #![feature(nonzero_negation_ops)]\n-                ///\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 /// # fn main() { test().unwrap(); }\n                 /// # fn test() -> Option<()> {\n@@ -797,7 +794,8 @@ macro_rules! nonzero_signed_operations {\n                 /// ```\n                 #[must_use]\n                 #[inline]\n-                #[unstable(feature = \"nonzero_negation_ops\", issue = \"102443\")]\n+                #[stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n+                #[rustc_const_stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n                 pub const fn is_negative(self) -> bool {\n                     self.get().is_negative()\n                 }\n@@ -807,8 +805,6 @@ macro_rules! nonzero_signed_operations {\n                 /// # Example\n                 ///\n                 /// ```\n-                /// #![feature(nonzero_negation_ops)]\n-                ///\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 /// # fn main() { test().unwrap(); }\n                 /// # fn test() -> Option<()> {\n@@ -823,7 +819,8 @@ macro_rules! nonzero_signed_operations {\n                 /// # }\n                 /// ```\n                 #[inline]\n-                #[unstable(feature = \"nonzero_negation_ops\", issue = \"102443\")]\n+                #[stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n+                #[rustc_const_stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n                 pub const fn checked_neg(self) -> Option<$Ty> {\n                     if let Some(result) = self.get().checked_neg() {\n                         // SAFETY: negation of nonzero cannot yield zero values.\n@@ -840,8 +837,6 @@ macro_rules! nonzero_signed_operations {\n                 /// # Example\n                 ///\n                 /// ```\n-                /// #![feature(nonzero_negation_ops)]\n-                ///\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 /// # fn main() { test().unwrap(); }\n                 /// # fn test() -> Option<()> {\n@@ -856,7 +851,8 @@ macro_rules! nonzero_signed_operations {\n                 /// # }\n                 /// ```\n                 #[inline]\n-                #[unstable(feature = \"nonzero_negation_ops\", issue = \"102443\")]\n+                #[stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n+                #[rustc_const_stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n                 pub const fn overflowing_neg(self) -> ($Ty, bool) {\n                     let (result, overflow) = self.get().overflowing_neg();\n                     // SAFETY: negation of nonzero cannot yield zero values.\n@@ -869,8 +865,6 @@ macro_rules! nonzero_signed_operations {\n                 /// # Example\n                 ///\n                 /// ```\n-                /// #![feature(nonzero_negation_ops)]\n-                ///\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 /// # fn main() { test().unwrap(); }\n                 /// # fn test() -> Option<()> {\n@@ -890,7 +884,8 @@ macro_rules! nonzero_signed_operations {\n                 /// # }\n                 /// ```\n                 #[inline]\n-                #[unstable(feature = \"nonzero_negation_ops\", issue = \"102443\")]\n+                #[stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n+                #[rustc_const_stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n                 pub const fn saturating_neg(self) -> $Ty {\n                     if let Some(result) = self.checked_neg() {\n                         return result;\n@@ -907,8 +902,6 @@ macro_rules! nonzero_signed_operations {\n                 /// # Example\n                 ///\n                 /// ```\n-                /// #![feature(nonzero_negation_ops)]\n-                ///\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 /// # fn main() { test().unwrap(); }\n                 /// # fn test() -> Option<()> {\n@@ -923,7 +916,8 @@ macro_rules! nonzero_signed_operations {\n                 /// # }\n                 /// ```\n                 #[inline]\n-                #[unstable(feature = \"nonzero_negation_ops\", issue = \"102443\")]\n+                #[stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n+                #[rustc_const_stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n                 pub const fn wrapping_neg(self) -> $Ty {\n                     let result = self.get().wrapping_neg();\n                     // SAFETY: negation of nonzero cannot yield zero values."}]}