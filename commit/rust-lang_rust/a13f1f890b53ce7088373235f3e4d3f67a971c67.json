{"sha": "a13f1f890b53ce7088373235f3e4d3f67a971c67", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExM2YxZjg5MGI1M2NlNzA4ODM3MzIzNWYzZTRkM2Y2N2E5NzFjNjc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-27T15:40:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-27T15:40:46Z"}, "message": "Rollup merge of #62979 - Mark-Simulacrum:json-dumper-pretty, r=Xanewok\n\nCleanup save-analysis JsonDumper", "tree": {"sha": "1860af35162778b9f5ec5cd66e0b1598123f6c4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1860af35162778b9f5ec5cd66e0b1598123f6c4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a13f1f890b53ce7088373235f3e4d3f67a971c67", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdPHB+CRBK7hj4Ov3rIwAAdHIIAJ0N63tKZmzgsmXH8A26Rjz9\nWc8begJBt3sktqzwiL5baScUtjmzMoxXt3u6q6M6Vq46GExwm/Ouvo/eRPPGNln6\nRcL6N/U9Gm+O6JcWsiJDDawgDnHuJJe3PgLecu0RsnLU+OdjY8vOH1yJB/DaDTn6\nUiUX9rv0IAND+VbmB45R91cgEg47Fi6kMPXIaWYyHpB3o2cVslKQWpwmEc8SdDr+\nUx8PMa+AdhIBZqFmtcmN4irY5d9SjdYQT/QvS+TI3yWOOIAyHsVbjakUwUVFola4\nzC9KoPZxr99sIRfO6pHG8Qz4G6XcOcpM+VJeTFLCBGrRS+moJn35wBEY8kfW24Q=\n=Rdrd\n-----END PGP SIGNATURE-----\n", "payload": "tree 1860af35162778b9f5ec5cd66e0b1598123f6c4c\nparent 4b8031cf2cb6e7ebd738a68ecd79501dee791da7\nparent 68c0ba284d3729a02392d7379673fb196c4a3711\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1564242046 +0200\ncommitter GitHub <noreply@github.com> 1564242046 +0200\n\nRollup merge of #62979 - Mark-Simulacrum:json-dumper-pretty, r=Xanewok\n\nCleanup save-analysis JsonDumper\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a13f1f890b53ce7088373235f3e4d3f67a971c67", "html_url": "https://github.com/rust-lang/rust/commit/a13f1f890b53ce7088373235f3e4d3f67a971c67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a13f1f890b53ce7088373235f3e4d3f67a971c67/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b8031cf2cb6e7ebd738a68ecd79501dee791da7", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b8031cf2cb6e7ebd738a68ecd79501dee791da7", "html_url": "https://github.com/rust-lang/rust/commit/4b8031cf2cb6e7ebd738a68ecd79501dee791da7"}, {"sha": "68c0ba284d3729a02392d7379673fb196c4a3711", "url": "https://api.github.com/repos/rust-lang/rust/commits/68c0ba284d3729a02392d7379673fb196c4a3711", "html_url": "https://github.com/rust-lang/rust/commit/68c0ba284d3729a02392d7379673fb196c4a3711"}], "stats": {"total": 113, "additions": 35, "deletions": 78}, "files": [{"sha": "2b349613dc54f3e1135cd4abaa67b4378423a949", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a13f1f890b53ce7088373235f3e4d3f67a971c67/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13f1f890b53ce7088373235f3e4d3f67a971c67/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=a13f1f890b53ce7088373235f3e4d3f67a971c67", "patch": "@@ -10,7 +10,7 @@\n //!\n //! SpanUtils is used to manipulate spans. In particular, to extract sub-spans\n //! from spans (e.g., the span for `bar` from the above example path).\n-//! DumpVisitor walks the AST and processes it, and JsonDumper is used for\n+//! DumpVisitor walks the AST and processes it, and Dumper is used for\n //! recording the output.\n \n use rustc::hir::def::{Res, DefKind as HirDefKind};\n@@ -38,7 +38,7 @@ use syntax_pos::*;\n \n use crate::{escape, generated_code, id_from_def_id, id_from_node_id, lower_attributes,\n             PathCollector, SaveContext};\n-use crate::json_dumper::{Access, DumpOutput, JsonDumper};\n+use crate::dumper::{Access, Dumper};\n use crate::span_utils::SpanUtils;\n use crate::sig;\n \n@@ -75,10 +75,10 @@ macro_rules! access_from_vis {\n     };\n }\n \n-pub struct DumpVisitor<'l, 'tcx, 'll, O: DumpOutput> {\n+pub struct DumpVisitor<'l, 'tcx, 'll> {\n     save_ctxt: SaveContext<'l, 'tcx>,\n     tcx: TyCtxt<'tcx>,\n-    dumper: &'ll mut JsonDumper<O>,\n+    dumper: &'ll mut Dumper,\n \n     span: SpanUtils<'l>,\n \n@@ -92,11 +92,11 @@ pub struct DumpVisitor<'l, 'tcx, 'll, O: DumpOutput> {\n     // macro_calls: FxHashSet<Span>,\n }\n \n-impl<'l, 'tcx, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n+impl<'l, 'tcx, 'll> DumpVisitor<'l, 'tcx, 'll> {\n     pub fn new(\n         save_ctxt: SaveContext<'l, 'tcx>,\n-        dumper: &'ll mut JsonDumper<O>,\n-    ) -> DumpVisitor<'l, 'tcx, 'll, O> {\n+        dumper: &'ll mut Dumper,\n+    ) -> DumpVisitor<'l, 'tcx, 'll> {\n         let span_utils = SpanUtils::new(&save_ctxt.tcx.sess);\n         DumpVisitor {\n             tcx: save_ctxt.tcx,\n@@ -111,7 +111,7 @@ impl<'l, 'tcx, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n \n     fn nest_scope<F>(&mut self, scope_id: NodeId, f: F)\n     where\n-        F: FnOnce(&mut DumpVisitor<'l, 'tcx, 'll, O>),\n+        F: FnOnce(&mut DumpVisitor<'l, 'tcx, 'll>),\n     {\n         let parent_scope = self.cur_scope;\n         self.cur_scope = scope_id;\n@@ -121,7 +121,7 @@ impl<'l, 'tcx, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n \n     fn nest_tables<F>(&mut self, item_id: NodeId, f: F)\n     where\n-        F: FnOnce(&mut DumpVisitor<'l, 'tcx, 'll, O>),\n+        F: FnOnce(&mut DumpVisitor<'l, 'tcx, 'll>),\n     {\n         let item_def_id = self.tcx.hir().local_def_id_from_node_id(item_id);\n         if self.tcx.has_typeck_tables(item_def_id) {\n@@ -1311,7 +1311,7 @@ impl<'l, 'tcx, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n     }\n }\n \n-impl<'l, 'tcx, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll, O> {\n+impl<'l, 'tcx, 'll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll> {\n     fn visit_mod(&mut self, m: &'l ast::Mod, span: Span, attrs: &[ast::Attribute], id: NodeId) {\n         // Since we handle explicit modules ourselves in visit_item, this should\n         // only get called for the root module of a crate."}, {"sha": "6fb55e6c9905540ac99b921964fb0caa82057ec1", "filename": "src/librustc_save_analysis/dumper.rs", "status": "renamed", "additions": 7, "deletions": 54, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/a13f1f890b53ce7088373235f3e4d3f67a971c67/src%2Flibrustc_save_analysis%2Fdumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13f1f890b53ce7088373235f3e4d3f67a971c67/src%2Flibrustc_save_analysis%2Fdumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdumper.rs?ref=a13f1f890b53ce7088373235f3e4d3f67a971c67", "patch": "@@ -1,80 +1,33 @@\n-use std::io::Write;\n-\n use rls_data::config::Config;\n use rls_data::{self, Analysis, CompilationOptions, CratePreludeData, Def, DefKind, Impl, Import,\n                MacroRef, Ref, RefKind, Relation};\n use rls_span::{Column, Row};\n \n-use log::error;\n-\n #[derive(Debug)]\n pub struct Access {\n     pub reachable: bool,\n     pub public: bool,\n }\n \n-pub struct JsonDumper<O: DumpOutput> {\n+pub struct Dumper {\n     result: Analysis,\n     config: Config,\n-    output: O,\n-}\n-\n-pub trait DumpOutput {\n-    fn dump(&mut self, result: &Analysis);\n-}\n-\n-pub struct WriteOutput<'b, W: Write> {\n-    output: &'b mut W,\n-}\n-\n-impl<'b, W: Write> DumpOutput for WriteOutput<'b, W> {\n-    fn dump(&mut self, result: &Analysis) {\n-        if let Err(e) = serde_json::to_writer(self.output.by_ref(), result) {\n-            error!(\"Can't serialize save-analysis: {:?}\", e);\n-        }\n-    }\n-}\n-\n-pub struct CallbackOutput<'b> {\n-    callback: &'b mut dyn FnMut(&Analysis),\n-}\n-\n-impl<'b> DumpOutput for CallbackOutput<'b> {\n-    fn dump(&mut self, result: &Analysis) {\n-        (self.callback)(result)\n-    }\n }\n \n-impl<'b, W: Write> JsonDumper<WriteOutput<'b, W>> {\n-    pub fn new(writer: &'b mut W, config: Config) -> JsonDumper<WriteOutput<'b, W>> {\n-        JsonDumper {\n-            output: WriteOutput { output: writer },\n+impl Dumper {\n+    pub fn new(config: Config) -> Dumper {\n+        Dumper {\n             config: config.clone(),\n             result: Analysis::new(config),\n         }\n     }\n-}\n-\n-impl<'b> JsonDumper<CallbackOutput<'b>> {\n-    pub fn with_callback(\n-        callback: &'b mut dyn FnMut(&Analysis),\n-        config: Config,\n-    ) -> JsonDumper<CallbackOutput<'b>> {\n-        JsonDumper {\n-            output: CallbackOutput { callback },\n-            config: config.clone(),\n-            result: Analysis::new(config),\n-        }\n-    }\n-}\n \n-impl<O: DumpOutput> Drop for JsonDumper<O> {\n-    fn drop(&mut self) {\n-        self.output.dump(&self.result);\n+    pub fn to_output(self, f: impl FnOnce(&Analysis)) {\n+        f(&self.result)\n     }\n }\n \n-impl<'b, O: DumpOutput + 'b> JsonDumper<O> {\n+impl Dumper {\n     pub fn crate_prelude(&mut self, data: CratePreludeData) {\n         self.result.prelude = Some(data)\n     }", "previous_filename": "src/librustc_save_analysis/json_dumper.rs"}, {"sha": "ade5e2eca60ba56d2848dfb60a5153368a658b88", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a13f1f890b53ce7088373235f3e4d3f67a971c67/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13f1f890b53ce7088373235f3e4d3f67a971c67/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=a13f1f890b53ce7088373235f3e4d3f67a971c67", "patch": "@@ -7,7 +7,7 @@\n #![recursion_limit=\"256\"]\n \n \n-mod json_dumper;\n+mod dumper;\n mod dump_visitor;\n #[macro_use]\n mod span_utils;\n@@ -39,7 +39,7 @@ use syntax::visit::{self, Visitor};\n use syntax::print::pprust::{arg_to_string, ty_to_string};\n use syntax_pos::*;\n \n-use json_dumper::JsonDumper;\n+use dumper::Dumper;\n use dump_visitor::DumpVisitor;\n use span_utils::SpanUtils;\n \n@@ -1075,17 +1075,19 @@ impl<'a> SaveHandler for DumpHandler<'a> {\n         input: &'l Input,\n     ) {\n         let sess = &save_ctxt.tcx.sess;\n-        let file_name = {\n-            let (mut output, file_name) = self.output_file(&save_ctxt);\n-            let mut dumper = JsonDumper::new(&mut output, save_ctxt.config.clone());\n-            let mut visitor = DumpVisitor::new(save_ctxt, &mut dumper);\n+        let (output, file_name) = self.output_file(&save_ctxt);\n+        let mut dumper = Dumper::new(save_ctxt.config.clone());\n+        let mut visitor = DumpVisitor::new(save_ctxt, &mut dumper);\n \n-            visitor.dump_crate_info(cratename, krate);\n-            visitor.dump_compilation_options(input, cratename);\n-            visit::walk_crate(&mut visitor, krate);\n+        visitor.dump_crate_info(cratename, krate);\n+        visitor.dump_compilation_options(input, cratename);\n+        visit::walk_crate(&mut visitor, krate);\n \n-            file_name\n-        };\n+        dumper.to_output(|analysis| {\n+            if let Err(e) = serde_json::to_writer(output, analysis) {\n+                error!(\"Can't serialize save-analysis: {:?}\", e);\n+            }\n+        });\n \n         if sess.opts.debugging_opts.emit_artifact_notifications {\n             sess.parse_sess.span_diagnostic\n@@ -1107,17 +1109,19 @@ impl<'b> SaveHandler for CallbackHandler<'b> {\n         cratename: &str,\n         input: &'l Input,\n     ) {\n-        // We're using the JsonDumper here because it has the format of the\n+        // We're using the Dumper here because it has the format of the\n         // save-analysis results that we will pass to the callback. IOW, we are\n-        // using the JsonDumper to collect the save-analysis results, but not\n+        // using the Dumper to collect the save-analysis results, but not\n         // actually to dump them to a file. This is all a bit convoluted and\n         // there is certainly a simpler design here trying to get out (FIXME).\n-        let mut dumper = JsonDumper::with_callback(self.callback, save_ctxt.config.clone());\n+        let mut dumper = Dumper::new(save_ctxt.config.clone());\n         let mut visitor = DumpVisitor::new(save_ctxt, &mut dumper);\n \n         visitor.dump_crate_info(cratename, krate);\n         visitor.dump_compilation_options(input, cratename);\n         visit::walk_crate(&mut visitor, krate);\n+\n+        dumper.to_output(|a| (self.callback)(a))\n     }\n }\n "}]}