{"sha": "683e5e64f42b6c74596015c5d19e2eab186fe68d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4M2U1ZTY0ZjQyYjZjNzQ1OTYwMTVjNWQxOWUyZWFiMTg2ZmU2OGQ=", "commit": {"author": {"name": "Erlend Tobiassen", "email": "erlend.tobiassen@gmail.com", "date": "2019-01-27T13:51:26Z"}, "committer": {"name": "Erlend Tobiassen", "email": "erlend.tobiassen@gmail.com", "date": "2019-01-27T14:15:56Z"}, "message": "Test non standard crate root", "tree": {"sha": "4cb6df38e804232bf504e9dd4b92694a5310beb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cb6df38e804232bf504e9dd4b92694a5310beb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/683e5e64f42b6c74596015c5d19e2eab186fe68d", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJPBAABCgA5FiEEve4ZOr7ty1/KyouLtIuFNqj1hbIFAlxNvRwbHGVybGVuZC50\nb2JpYXNzZW5AZ21haWwuY29tAAoJELSLhTao9YWyDFwP/RjA9eYuViEbgpma/K4b\nwljGSQYe+E8L4Cw3FAXKrpkZ72lSShpNcKSS5S2B5rSxRZfi3kO96g+36T+WiDlT\nq3t/ydrX3PApN00Yag3O9u9+TDGJEKWkZBxQG7So5eKaYUfyA23o6clQ8XMFimBr\nbrT7gEouyGXDO9uMiNhPlke1ao3HZ7q8PVclc6WFKQZiPEgG5XdyFo5KhOOgl/Uk\n0DB7NlR+tLw1ZrQFxbADkCi+85Zmj/CuTWD7dG7ECbfnqTfavv2CxVB7CfEt0IfC\n5v+eg/FYVrMyKIJEJpwJIWzQVSu/GpLfohfsW0OlTUlRLHd3YjVB1E/fp+YO2h7N\n6HjOEwCxYIGVmHbMpd4KKu6r43Aj9iqTQRkxzKh7QUPkIg7KqIbP5xmqUJKCZB2y\nmOKwtlE/rD8OC5TzUQgP52wfCi0ZvlcNDuEEyiXEasHV9RjobGYgLCqbqZsASBJa\nZygC8Hvm8IslMFoOa6KCxUGSwcI/J3NEz7nK/g5Qh+FeXpNrDY5PC+E94p7KRvkn\nb3c+lExGmSf3vEBf6ShqgpIoXwJkjvmXzAM6h/gefGwz22/PpfAgZQWY2OdN8+uA\nBY3ccQo1OAvMiFS+CytHurHL9xQF/QwPjyXcIZAAlsVza5rQ3HrQnS8IHYmfhmz6\n/tevMSN3BOf0xKM/pHDwgmW1\n=XTaa\n-----END PGP SIGNATURE-----", "payload": "tree 4cb6df38e804232bf504e9dd4b92694a5310beb4\nparent 964086e0d4874d7e60eb3607220e486ec4b51f86\nauthor Erlend Tobiassen <erlend.tobiassen@gmail.com> 1548597086 +0100\ncommitter Erlend Tobiassen <erlend.tobiassen@gmail.com> 1548598556 +0100\n\nTest non standard crate root\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/683e5e64f42b6c74596015c5d19e2eab186fe68d", "html_url": "https://github.com/rust-lang/rust/commit/683e5e64f42b6c74596015c5d19e2eab186fe68d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/683e5e64f42b6c74596015c5d19e2eab186fe68d/comments", "author": {"login": "regiontog", "id": 9137819, "node_id": "MDQ6VXNlcjkxMzc4MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/9137819?v=4", "gravatar_id": "", "url": "https://api.github.com/users/regiontog", "html_url": "https://github.com/regiontog", "followers_url": "https://api.github.com/users/regiontog/followers", "following_url": "https://api.github.com/users/regiontog/following{/other_user}", "gists_url": "https://api.github.com/users/regiontog/gists{/gist_id}", "starred_url": "https://api.github.com/users/regiontog/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/regiontog/subscriptions", "organizations_url": "https://api.github.com/users/regiontog/orgs", "repos_url": "https://api.github.com/users/regiontog/repos", "events_url": "https://api.github.com/users/regiontog/events{/privacy}", "received_events_url": "https://api.github.com/users/regiontog/received_events", "type": "User", "site_admin": false}, "committer": {"login": "regiontog", "id": 9137819, "node_id": "MDQ6VXNlcjkxMzc4MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/9137819?v=4", "gravatar_id": "", "url": "https://api.github.com/users/regiontog", "html_url": "https://github.com/regiontog", "followers_url": "https://api.github.com/users/regiontog/followers", "following_url": "https://api.github.com/users/regiontog/following{/other_user}", "gists_url": "https://api.github.com/users/regiontog/gists{/gist_id}", "starred_url": "https://api.github.com/users/regiontog/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/regiontog/subscriptions", "organizations_url": "https://api.github.com/users/regiontog/orgs", "repos_url": "https://api.github.com/users/regiontog/repos", "events_url": "https://api.github.com/users/regiontog/events{/privacy}", "received_events_url": "https://api.github.com/users/regiontog/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "964086e0d4874d7e60eb3607220e486ec4b51f86", "url": "https://api.github.com/repos/rust-lang/rust/commits/964086e0d4874d7e60eb3607220e486ec4b51f86", "html_url": "https://github.com/rust-lang/rust/commit/964086e0d4874d7e60eb3607220e486ec4b51f86"}], "stats": {"total": 54, "additions": 48, "deletions": 6}, "files": [{"sha": "2bba11e42eafbd7d4bbd78c9b05ba92000b7b50c", "filename": "crates/ra_hir/src/mock.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/683e5e64f42b6c74596015c5d19e2eab186fe68d/crates%2Fra_hir%2Fsrc%2Fmock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/683e5e64f42b6c74596015c5d19e2eab186fe68d/crates%2Fra_hir%2Fsrc%2Fmock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmock.rs?ref=683e5e64f42b6c74596015c5d19e2eab186fe68d", "patch": "@@ -2,7 +2,8 @@ use std::{sync::Arc, panic};\n \n use parking_lot::Mutex;\n use ra_db::{\n-    CheckCanceled, FilePosition, FileId, CrateGraph, SourceRoot, SourceRootId, SourceDatabase, salsa,\n+    mock::FileMap, CheckCanceled, CrateGraph, FileId, FilePosition, SourceDatabase,\n+    SourceRoot, SourceRootId, salsa\n };\n use relative_path::RelativePathBuf;\n use test_utils::{parse_fixture, CURSOR_MARKER, extract_offset};\n@@ -17,7 +18,7 @@ pub(crate) struct MockDatabase {\n     events: Mutex<Option<Vec<salsa::Event<MockDatabase>>>>,\n     runtime: salsa::Runtime<MockDatabase>,\n     interner: Arc<HirInterner>,\n-    file_counter: u32,\n+    file_map: Arc<FileMap>,\n }\n \n impl panic::RefUnwindSafe for MockDatabase {}\n@@ -43,6 +44,10 @@ impl MockDatabase {\n         (db, position)\n     }\n \n+    pub(crate) fn file_id(&self, file: &str) -> FileId {\n+        self.file_map.file_id(file)\n+    }\n+\n     fn from_fixture(fixture: &str) -> (MockDatabase, SourceRoot, Option<FilePosition>) {\n         let mut db = MockDatabase::default();\n \n@@ -89,8 +94,7 @@ impl MockDatabase {\n         let is_crate_root = path == \"/lib.rs\" || path == \"/main.rs\";\n \n         let path = RelativePathBuf::from_path(&path[1..]).unwrap();\n-        let file_id = FileId(self.file_counter);\n-        self.file_counter += 1;\n+        let file_id = Arc::make_mut(&mut self.file_map).add(path.clone());\n         let text = Arc::new(text.to_string());\n         self.set_file_text(file_id, text);\n         self.set_file_relative_path(file_id, path.clone());\n@@ -137,7 +141,7 @@ impl Default for MockDatabase {\n             events: Default::default(),\n             runtime: salsa::Runtime::default(),\n             interner: Default::default(),\n-            file_counter: 0,\n+            file_map: Default::default(),\n         };\n         db.set_crate_graph(Default::default());\n         db\n@@ -150,7 +154,7 @@ impl salsa::ParallelDatabase for MockDatabase {\n             events: Default::default(),\n             runtime: self.runtime.snapshot(self),\n             interner: Arc::clone(&self.interner),\n-            file_counter: self.file_counter,\n+            file_map: Arc::clone(&self.file_map),\n         })\n     }\n }"}, {"sha": "5b161cf4977cd7417345b96d92fc813033335f67", "filename": "crates/ra_hir/src/nameres/tests.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/683e5e64f42b6c74596015c5d19e2eab186fe68d/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/683e5e64f42b6c74596015c5d19e2eab186fe68d/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs?ref=683e5e64f42b6c74596015c5d19e2eab186fe68d", "patch": "@@ -19,6 +19,19 @@ fn item_map(fixture: &str) -> (Arc<ItemMap>, ModuleId) {\n     (db.item_map(krate.crate_id), module_id)\n }\n \n+fn item_map_custom_crate_root(fixture: &str, root: &str) -> (Arc<ItemMap>, ModuleId) {\n+    let (mut db, pos) = MockDatabase::with_position(fixture);\n+\n+    let mut crate_graph = CrateGraph::default();\n+    crate_graph.add_crate_root(db.file_id(root));\n+    db.set_crate_graph(Arc::new(crate_graph));\n+\n+    let module = crate::source_binder::module_from_position(&db, dbg!(pos)).unwrap();\n+    let krate = module.krate(&db).unwrap();\n+    let module_id = module.module_id;\n+    (db.item_map(krate.crate_id), module_id)\n+}\n+\n fn check_module_item_map(map: &ItemMap, module_id: ModuleId, expected: &str) {\n     let mut lines = map[module_id]\n         .items\n@@ -133,6 +146,31 @@ fn re_exports() {\n     );\n }\n \n+#[test]\n+fn module_resolution_works_for_non_standard_filenames() {\n+    let (item_map, module_id) = item_map_custom_crate_root(\n+        \"\n+        //- /my_library.rs\n+        mod foo;\n+\n+        use self::foo::Bar;\n+        <|>\n+\n+        //- /foo/mod.rs\n+        pub struct Bar;\n+    \",\n+        \"/my_library.rs\",\n+    );\n+    check_module_item_map(\n+        &item_map,\n+        module_id,\n+        \"\n+            Bar: t v\n+            foo: t\n+        \",\n+    );\n+}\n+\n #[test]\n fn name_res_works_for_broken_modules() {\n     covers!(name_res_works_for_broken_modules);"}]}