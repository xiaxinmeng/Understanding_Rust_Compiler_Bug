{"sha": "dd5850b8faf04e1b98542cf0813920385a6cc4db", "node_id": "C_kwDOAAsO6NoAKGRkNTg1MGI4ZmFmMDRlMWI5ODU0MmNmMDgxMzkyMDM4NWE2Y2M0ZGI", "commit": {"author": {"name": "Jhonny Bill Mena", "email": "jhonnybillm@gmail.com", "date": "2022-09-05T21:26:57Z"}, "committer": {"name": "Jhonny Bill Mena", "email": "jhonnybillm@gmail.com", "date": "2022-09-05T21:26:57Z"}, "message": "UPDATE - accept start_point and snippet instead of SourceMap", "tree": {"sha": "025035c986318e24d26f3d7a9036183131d67663", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/025035c986318e24d26f3d7a9036183131d67663"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd5850b8faf04e1b98542cf0813920385a6cc4db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd5850b8faf04e1b98542cf0813920385a6cc4db", "html_url": "https://github.com/rust-lang/rust/commit/dd5850b8faf04e1b98542cf0813920385a6cc4db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd5850b8faf04e1b98542cf0813920385a6cc4db/comments", "author": {"login": "JhonnyBillM", "id": 18747072, "node_id": "MDQ6VXNlcjE4NzQ3MDcy", "avatar_url": "https://avatars.githubusercontent.com/u/18747072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JhonnyBillM", "html_url": "https://github.com/JhonnyBillM", "followers_url": "https://api.github.com/users/JhonnyBillM/followers", "following_url": "https://api.github.com/users/JhonnyBillM/following{/other_user}", "gists_url": "https://api.github.com/users/JhonnyBillM/gists{/gist_id}", "starred_url": "https://api.github.com/users/JhonnyBillM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JhonnyBillM/subscriptions", "organizations_url": "https://api.github.com/users/JhonnyBillM/orgs", "repos_url": "https://api.github.com/users/JhonnyBillM/repos", "events_url": "https://api.github.com/users/JhonnyBillM/events{/privacy}", "received_events_url": "https://api.github.com/users/JhonnyBillM/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JhonnyBillM", "id": 18747072, "node_id": "MDQ6VXNlcjE4NzQ3MDcy", "avatar_url": "https://avatars.githubusercontent.com/u/18747072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JhonnyBillM", "html_url": "https://github.com/JhonnyBillM", "followers_url": "https://api.github.com/users/JhonnyBillM/followers", "following_url": "https://api.github.com/users/JhonnyBillM/following{/other_user}", "gists_url": "https://api.github.com/users/JhonnyBillM/gists{/gist_id}", "starred_url": "https://api.github.com/users/JhonnyBillM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JhonnyBillM/subscriptions", "organizations_url": "https://api.github.com/users/JhonnyBillM/orgs", "repos_url": "https://api.github.com/users/JhonnyBillM/repos", "events_url": "https://api.github.com/users/JhonnyBillM/events{/privacy}", "received_events_url": "https://api.github.com/users/JhonnyBillM/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31e9f40bcf638d73985974d64402b2ba1622a46b", "url": "https://api.github.com/repos/rust-lang/rust/commits/31e9f40bcf638d73985974d64402b2ba1622a46b", "html_url": "https://github.com/rust-lang/rust/commit/31e9f40bcf638d73985974d64402b2ba1622a46b"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "e1404ab15efa37add14cfed8823837b20c016c7a", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd5850b8faf04e1b98542cf0813920385a6cc4db/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd5850b8faf04e1b98542cf0813920385a6cc4db/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=dd5850b8faf04e1b98542cf0813920385a6cc4db", "patch": "@@ -67,7 +67,7 @@ fn handle_errors(sess: &ParseSess, span: Span, error: AttrError) {\n                 span,\n                 reason,\n                 is_bytestr,\n-                source_map: sess.source_map(),\n+                start_point_span: sess.source_map().start_point(span),\n             });\n         }\n     }"}, {"sha": "085175d4bed1fbbe9669eaa1fa21f51bd1cf082b", "filename": "compiler/rustc_attr/src/session_diagnostics.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dd5850b8faf04e1b98542cf0813920385a6cc4db/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd5850b8faf04e1b98542cf0813920385a6cc4db/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs?ref=dd5850b8faf04e1b98542cf0813920385a6cc4db", "patch": "@@ -6,7 +6,7 @@ use rustc_errors::{\n };\n use rustc_macros::SessionDiagnostic;\n use rustc_session::SessionDiagnostic;\n-use rustc_span::{source_map::SourceMap, Span, Symbol};\n+use rustc_span::{Span, Symbol};\n \n use crate::UnsupportedLiteralReason;\n \n@@ -202,14 +202,14 @@ pub(crate) struct InvalidReprHintNoValue {\n }\n \n // Error code: E0565\n-pub(crate) struct UnsupportedLiteral<'a> {\n+pub(crate) struct UnsupportedLiteral {\n     pub span: Span,\n     pub reason: UnsupportedLiteralReason,\n     pub is_bytestr: bool,\n-    pub source_map: &'a SourceMap,\n+    pub start_point_span: Span,\n }\n \n-impl<'a> SessionDiagnostic<'a> for UnsupportedLiteral<'a> {\n+impl<'a> SessionDiagnostic<'a> for UnsupportedLiteral {\n     fn into_diagnostic(self, handler: &'a Handler) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         let mut diag = handler.struct_span_err_with_code(\n             self.span,\n@@ -227,7 +227,7 @@ impl<'a> SessionDiagnostic<'a> for UnsupportedLiteral<'a> {\n         );\n         if self.is_bytestr {\n             diag.span_suggestion(\n-                self.source_map.start_point(self.span),\n+                self.start_point_span,\n                 fluent::attr::unsupported_literal_suggestion,\n                 \"\",\n                 Applicability::MaybeIncorrect,"}, {"sha": "a9152bdc59787a2f586138c43e550ce83178566c", "filename": "compiler/rustc_typeck/src/astconv/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd5850b8faf04e1b98542cf0813920385a6cc4db/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd5850b8faf04e1b98542cf0813920385a6cc4db/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs?ref=dd5850b8faf04e1b98542cf0813920385a6cc4db", "patch": "@@ -29,7 +29,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         self.tcx().sess.emit_err(MissingTypeParams {\n             span,\n             def_span: self.tcx().def_span(def_id),\n-            source_map: self.tcx().sess.source_map(),\n+            span_snippet: self.tcx().sess.source_map().span_to_snippet(span).ok(),\n             missing_type_params,\n             empty_generic_args,\n         });"}, {"sha": "d280fa5156bdb350504c88a1951d14b3c847d921", "filename": "compiler/rustc_typeck/src/errors.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dd5850b8faf04e1b98542cf0813920385a6cc4db/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd5850b8faf04e1b98542cf0813920385a6cc4db/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs?ref=dd5850b8faf04e1b98542cf0813920385a6cc4db", "patch": "@@ -3,7 +3,7 @@ use rustc_errors::{error_code, Applicability, DiagnosticBuilder, ErrorGuaranteed\n use rustc_macros::{LintDiagnostic, SessionDiagnostic, SessionSubdiagnostic};\n use rustc_middle::ty::Ty;\n use rustc_session::SessionDiagnostic;\n-use rustc_span::{source_map::SourceMap, symbol::Ident, Span, Symbol};\n+use rustc_span::{symbol::Ident, Span, Symbol};\n \n #[derive(SessionDiagnostic)]\n #[diag(typeck::field_multiply_specified_in_initializer, code = \"E0062\")]\n@@ -241,16 +241,16 @@ pub struct UnconstrainedOpaqueType {\n     pub name: Symbol,\n }\n \n-pub struct MissingTypeParams<'a> {\n+pub struct MissingTypeParams {\n     pub span: Span,\n     pub def_span: Span,\n+    pub span_snippet: Option<String>,\n     pub missing_type_params: Vec<Symbol>,\n     pub empty_generic_args: bool,\n-    pub source_map: &'a SourceMap,\n }\n \n // Manual implementation of `SessionDiagnostic` to be able to call `span_to_snippet`.\n-impl<'a> SessionDiagnostic<'a> for MissingTypeParams<'a> {\n+impl<'a> SessionDiagnostic<'a> for MissingTypeParams {\n     fn into_diagnostic(self, handler: &'a Handler) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         let mut err = handler.struct_span_err_with_code(\n             self.span,\n@@ -270,8 +270,8 @@ impl<'a> SessionDiagnostic<'a> for MissingTypeParams<'a> {\n         err.span_label(self.def_span, rustc_errors::fluent::typeck::label);\n \n         let mut suggested = false;\n-        if let (Ok(snippet), true) = (\n-            self.source_map.span_to_snippet(self.span),\n+        if let (Some(snippet), true) = (\n+            self.span_snippet,\n             // Don't suggest setting the type params if there are some already: the order is\n             // tricky to get right and the user will already know what the syntax is.\n             self.empty_generic_args,"}]}