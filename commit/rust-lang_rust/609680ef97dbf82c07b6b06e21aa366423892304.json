{"sha": "609680ef97dbf82c07b6b06e21aa366423892304", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwOTY4MGVmOTdkYmY4MmMwN2I2YjA2ZTIxYWEzNjY0MjM4OTIzMDQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-30T15:52:53Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-30T15:52:53Z"}, "message": "Rename EnumDef -> Enum", "tree": {"sha": "34296539101d8db4a484c472a45a1e30503791ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34296539101d8db4a484c472a45a1e30503791ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/609680ef97dbf82c07b6b06e21aa366423892304", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/609680ef97dbf82c07b6b06e21aa366423892304", "html_url": "https://github.com/rust-lang/rust/commit/609680ef97dbf82c07b6b06e21aa366423892304", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/609680ef97dbf82c07b6b06e21aa366423892304/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "216a5344c8ef3c3e430d2761dc8b1a7b60250a15", "url": "https://api.github.com/repos/rust-lang/rust/commits/216a5344c8ef3c3e430d2761dc8b1a7b60250a15", "html_url": "https://github.com/rust-lang/rust/commit/216a5344c8ef3c3e430d2761dc8b1a7b60250a15"}], "stats": {"total": 166, "additions": 83, "deletions": 83}, "files": [{"sha": "44f3e8ee307d696bce02022cc0ee5c4934186c91", "filename": "crates/ra_assists/src/handlers/change_visibility.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs?ref=609680ef97dbf82c07b6b06e21aa366423892304", "patch": "@@ -1,7 +1,7 @@\n use ra_syntax::{\n     ast::{self, NameOwner, VisibilityOwner},\n     AstNode,\n-    SyntaxKind::{CONST_DEF, ENUM_DEF, FN, MODULE, STATIC_DEF, STRUCT, TRAIT_DEF, VISIBILITY},\n+    SyntaxKind::{CONST_DEF, ENUM, FN, MODULE, STATIC_DEF, STRUCT, TRAIT_DEF, VISIBILITY},\n     T,\n };\n use test_utils::mark;\n@@ -36,7 +36,7 @@ fn add_vis(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n \n     let (offset, target) = if let Some(keyword) = item_keyword {\n         let parent = keyword.parent();\n-        let def_kws = vec![CONST_DEF, STATIC_DEF, FN, MODULE, STRUCT, ENUM_DEF, TRAIT_DEF];\n+        let def_kws = vec![CONST_DEF, STATIC_DEF, FN, MODULE, STRUCT, ENUM, TRAIT_DEF];\n         // Parent is not a definition, can't add visibility\n         if !def_kws.iter().any(|&def_kw| def_kw == parent.kind()) {\n             return None;"}, {"sha": "84ac75fa86aa14d6f626b4fde72177d2a498a115", "filename": "crates/ra_assists/src/handlers/move_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs?ref=609680ef97dbf82c07b6b06e21aa366423892304", "patch": "@@ -40,7 +40,7 @@ pub(crate) fn move_bounds_to_where_clause(acc: &mut Assists, ctx: &AssistContext\n             ast::Fn(it) => it.body()?.syntax().clone().into(),\n             ast::TraitDef(it) => it.assoc_item_list()?.syntax().clone().into(),\n             ast::ImplDef(it) => it.assoc_item_list()?.syntax().clone().into(),\n-            ast::EnumDef(it) => it.variant_list()?.syntax().clone().into(),\n+            ast::Enum(it) => it.variant_list()?.syntax().clone().into(),\n             ast::Struct(it) => {\n                 it.syntax().children_with_tokens()\n                     .find(|it| it.kind() == RECORD_FIELD_LIST || it.kind() == T![;])?"}, {"sha": "88399f7247f3860dc672fb887c3d2acf3368d179", "filename": "crates/ra_hir/src/has_source.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_hir%2Fsrc%2Fhas_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_hir%2Fsrc%2Fhas_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fhas_source.rs?ref=609680ef97dbf82c07b6b06e21aa366423892304", "patch": "@@ -69,8 +69,8 @@ impl HasSource for Union {\n     }\n }\n impl HasSource for Enum {\n-    type Ast = ast::EnumDef;\n-    fn source(self, db: &dyn HirDatabase) -> InFile<ast::EnumDef> {\n+    type Ast = ast::Enum;\n+    fn source(self, db: &dyn HirDatabase) -> InFile<ast::Enum> {\n         self.id.lookup(db.upcast()).source(db.upcast())\n     }\n }"}, {"sha": "f8e70fe27483b621ea50dc049b2588be87962f73", "filename": "crates/ra_hir/src/semantics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics.rs?ref=609680ef97dbf82c07b6b06e21aa366423892304", "patch": "@@ -581,7 +581,7 @@ macro_rules! to_def_impls {\n to_def_impls![\n     (crate::Module, ast::Module, module_to_def),\n     (crate::Struct, ast::Struct, struct_to_def),\n-    (crate::Enum, ast::EnumDef, enum_to_def),\n+    (crate::Enum, ast::Enum, enum_to_def),\n     (crate::Union, ast::Union, union_to_def),\n     (crate::Trait, ast::TraitDef, trait_to_def),\n     (crate::ImplDef, ast::ImplDef, impl_to_def),"}, {"sha": "9f81b952f97d82e016690f7e7ab09a2c9bca6cce", "filename": "crates/ra_hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=609680ef97dbf82c07b6b06e21aa366423892304", "patch": "@@ -77,7 +77,7 @@ impl SourceToDefCtx<'_, '_> {\n     pub(super) fn struct_to_def(&mut self, src: InFile<ast::Struct>) -> Option<StructId> {\n         self.to_def(src, keys::STRUCT)\n     }\n-    pub(super) fn enum_to_def(&mut self, src: InFile<ast::EnumDef>) -> Option<EnumId> {\n+    pub(super) fn enum_to_def(&mut self, src: InFile<ast::Enum>) -> Option<EnumId> {\n         self.to_def(src, keys::ENUM)\n     }\n     pub(super) fn union_to_def(&mut self, src: InFile<ast::Union>) -> Option<UnionId> {\n@@ -170,7 +170,7 @@ impl SourceToDefCtx<'_, '_> {\n                         let def = self.struct_to_def(container.with_value(it))?;\n                         VariantId::from(def).into()\n                     },\n-                    ast::EnumDef(it) => {\n+                    ast::Enum(it) => {\n                         let def = self.enum_to_def(container.with_value(it))?;\n                         def.into()\n                     },\n@@ -206,7 +206,7 @@ impl SourceToDefCtx<'_, '_> {\n                 match (container.value) {\n                     ast::Fn(it) => self.fn_to_def(container.with_value(it))?.into(),\n                     ast::Struct(it) => self.struct_to_def(container.with_value(it))?.into(),\n-                    ast::EnumDef(it) => self.enum_to_def(container.with_value(it))?.into(),\n+                    ast::Enum(it) => self.enum_to_def(container.with_value(it))?.into(),\n                     ast::TraitDef(it) => self.trait_to_def(container.with_value(it))?.into(),\n                     ast::TypeAlias(it) => self.type_alias_to_def(container.with_value(it))?.into(),\n                     ast::ImplDef(it) => self.impl_to_def(container.with_value(it))?.into(),"}, {"sha": "df98ded62db44be9d481535d62190f985d9b3371", "filename": "crates/ra_hir_def/src/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fadt.rs?ref=609680ef97dbf82c07b6b06e21aa366423892304", "patch": "@@ -124,7 +124,7 @@ impl HasChildSource for EnumId {\n fn lower_enum(\n     db: &dyn DefDatabase,\n     trace: &mut Trace<EnumVariantData, ast::EnumVariant>,\n-    ast: &InFile<ast::EnumDef>,\n+    ast: &InFile<ast::Enum>,\n     module_id: ModuleId,\n ) {\n     let expander = CfgExpander::new(db, ast.file_id, module_id.krate);"}, {"sha": "105299f704bbf48ee5e65b03c61bbd90bb326b9d", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=609680ef97dbf82c07b6b06e21aa366423892304", "patch": "@@ -656,7 +656,7 @@ impl ExprCollector<'_> {\n                         let id = self.find_inner_item(&def)?;\n                         (StructLoc { container, id }.intern(self.db).into(), def.name())\n                     }\n-                    ast::Item::EnumDef(def) => {\n+                    ast::Item::Enum(def) => {\n                         let id = self.find_inner_item(&def)?;\n                         (EnumLoc { container, id }.intern(self.db).into(), def.name())\n                     }"}, {"sha": "24ad4118700f29009c786aae80c158b1f5d70788", "filename": "crates/ra_hir_def/src/item_tree.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs?ref=609680ef97dbf82c07b6b06e21aa366423892304", "patch": "@@ -416,7 +416,7 @@ mod_items! {\n     Function in functions -> ast::Fn,\n     Struct in structs -> ast::Struct,\n     Union in unions -> ast::Union,\n-    Enum in enums -> ast::EnumDef,\n+    Enum in enums -> ast::Enum,\n     Const in consts -> ast::ConstDef,\n     Static in statics -> ast::StaticDef,\n     Trait in traits -> ast::TraitDef,\n@@ -543,7 +543,7 @@ pub struct Enum {\n     pub visibility: RawVisibilityId,\n     pub generic_params: GenericParamsId,\n     pub variants: IdRange<Variant>,\n-    pub ast_id: FileAstId<ast::EnumDef>,\n+    pub ast_id: FileAstId<ast::Enum>,\n }\n \n #[derive(Debug, Clone, Eq, PartialEq)]"}, {"sha": "da72384166a6aa09cd5f58845d611ba7f0732c35", "filename": "crates/ra_hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=609680ef97dbf82c07b6b06e21aa366423892304", "patch": "@@ -80,7 +80,7 @@ impl Ctx {\n         match item {\n             ast::Item::Struct(_)\n             | ast::Item::Union(_)\n-            | ast::Item::EnumDef(_)\n+            | ast::Item::Enum(_)\n             | ast::Item::Fn(_)\n             | ast::Item::TypeAlias(_)\n             | ast::Item::ConstDef(_)\n@@ -105,7 +105,7 @@ impl Ctx {\n         let items = match item {\n             ast::Item::Struct(ast) => self.lower_struct(ast).map(Into::into),\n             ast::Item::Union(ast) => self.lower_union(ast).map(Into::into),\n-            ast::Item::EnumDef(ast) => self.lower_enum(ast).map(Into::into),\n+            ast::Item::Enum(ast) => self.lower_enum(ast).map(Into::into),\n             ast::Item::Fn(ast) => self.lower_function(ast).map(Into::into),\n             ast::Item::TypeAlias(ast) => self.lower_type_alias(ast).map(Into::into),\n             ast::Item::StaticDef(ast) => self.lower_static(ast).map(Into::into),\n@@ -246,7 +246,7 @@ impl Ctx {\n         Some(id(self.data().unions.alloc(res)))\n     }\n \n-    fn lower_enum(&mut self, enum_: &ast::EnumDef) -> Option<FileItemTreeId<Enum>> {\n+    fn lower_enum(&mut self, enum_: &ast::Enum) -> Option<FileItemTreeId<Enum>> {\n         let visibility = self.lower_visibility(enum_);\n         let name = enum_.name()?.as_name();\n         let generic_params = self.lower_generic_params(GenericsOwner::Enum, enum_);"}, {"sha": "bf3474c518c0bd6639531a53750ec721f0205888", "filename": "crates/ra_hir_def/src/item_tree/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs?ref=609680ef97dbf82c07b6b06e21aa366423892304", "patch": "@@ -250,7 +250,7 @@ fn smoke() {\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"struct2\"))] }, input: None }]) }]\n             Struct { name: Name(Text(\"Struct2\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(3), fields: Record(IdRange::<ra_hir_def::item_tree::Field>(1..2)), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::Struct>(5), kind: Record }\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"en\"))] }, input: None }]) }]\n-            Enum { name: Name(Text(\"En\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), variants: IdRange::<ra_hir_def::item_tree::Variant>(0..1), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::EnumDef>(6) }\n+            Enum { name: Name(Text(\"En\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), variants: IdRange::<ra_hir_def::item_tree::Variant>(0..1), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::Enum>(6) }\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"un\"))] }, input: None }]) }]\n             Union { name: Name(Text(\"Un\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), fields: Record(IdRange::<ra_hir_def::item_tree::Field>(3..4)), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::Union>(7) }\n         \"##]],"}, {"sha": "2695e8c24d28054fcfd35f8c878220e9ab7b3e64", "filename": "crates/ra_hir_def/src/keys.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs?ref=609680ef97dbf82c07b6b06e21aa366423892304", "patch": "@@ -22,7 +22,7 @@ pub const IMPL: Key<ast::ImplDef, ImplId> = Key::new();\n pub const TRAIT: Key<ast::TraitDef, TraitId> = Key::new();\n pub const STRUCT: Key<ast::Struct, StructId> = Key::new();\n pub const UNION: Key<ast::Union, UnionId> = Key::new();\n-pub const ENUM: Key<ast::EnumDef, EnumId> = Key::new();\n+pub const ENUM: Key<ast::Enum, EnumId> = Key::new();\n \n pub const ENUM_VARIANT: Key<ast::EnumVariant, EnumVariantId> = Key::new();\n pub const TUPLE_FIELD: Key<ast::TupleField, FieldId> = Key::new();"}, {"sha": "69fa907cb89b90aa8f1ae15aa6a9504830162a5c", "filename": "crates/ra_hir_expand/src/builtin_derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs?ref=609680ef97dbf82c07b6b06e21aa366423892304", "patch": "@@ -73,7 +73,7 @@ fn parse_adt(tt: &tt::Subtree) -> Result<BasicAdtInfo, mbe::ExpandError> {\n     let (name, params) = match_ast! {\n         match node {\n             ast::Struct(it) => (it.name(), it.generic_param_list()),\n-            ast::EnumDef(it) => (it.name(), it.generic_param_list()),\n+            ast::Enum(it) => (it.name(), it.generic_param_list()),\n             ast::Union(it) => (it.name(), it.generic_param_list()),\n             _ => {\n                 debug!(\"unexpected node is {:?}\", node);"}, {"sha": "02fefd6bb2af65fa1f1045f5643c1363e29cc2a7", "filename": "crates/ra_ide/src/display/navigation_target.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=609680ef97dbf82c07b6b06e21aa366423892304", "patch": "@@ -381,7 +381,7 @@ pub(crate) fn docs_from_symbol(db: &RootDatabase, symbol: &FileSymbol) -> Option\n         match node {\n             ast::Fn(it) => it.doc_comment_text(),\n             ast::Struct(it) => it.doc_comment_text(),\n-            ast::EnumDef(it) => it.doc_comment_text(),\n+            ast::Enum(it) => it.doc_comment_text(),\n             ast::TraitDef(it) => it.doc_comment_text(),\n             ast::Module(it) => it.doc_comment_text(),\n             ast::TypeAlias(it) => it.doc_comment_text(),\n@@ -406,7 +406,7 @@ pub(crate) fn description_from_symbol(db: &RootDatabase, symbol: &FileSymbol) ->\n         match node {\n             ast::Fn(it) => it.short_label(),\n             ast::Struct(it) => it.short_label(),\n-            ast::EnumDef(it) => it.short_label(),\n+            ast::Enum(it) => it.short_label(),\n             ast::TraitDef(it) => it.short_label(),\n             ast::Module(it) => it.short_label(),\n             ast::TypeAlias(it) => it.short_label(),\n@@ -446,7 +446,7 @@ fn foo() { enum FooInner { } }\n                         5..13,\n                     ),\n                     name: \"FooInner\",\n-                    kind: ENUM_DEF,\n+                    kind: ENUM,\n                     container_name: None,\n                     description: Some(\n                         \"enum FooInner\",\n@@ -462,7 +462,7 @@ fn foo() { enum FooInner { } }\n                         34..42,\n                     ),\n                     name: \"FooInner\",\n-                    kind: ENUM_DEF,\n+                    kind: ENUM,\n                     container_name: Some(\n                         \"foo\",\n                     ),"}, {"sha": "5bf70937fa715d79accf5450a4ab18c9bdaa2691", "filename": "crates/ra_ide/src/display/short_label.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fshort_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fshort_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fshort_label.rs?ref=609680ef97dbf82c07b6b06e21aa366423892304", "patch": "@@ -25,7 +25,7 @@ impl ShortLabel for ast::Union {\n     }\n }\n \n-impl ShortLabel for ast::EnumDef {\n+impl ShortLabel for ast::Enum {\n     fn short_label(&self) -> Option<String> {\n         short_label_from_node(self, \"enum \")\n     }"}, {"sha": "c909f96aa49924168e16e0ddd489776ce07645a9", "filename": "crates/ra_ide/src/file_structure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_ide%2Fsrc%2Ffile_structure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_ide%2Fsrc%2Ffile_structure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ffile_structure.rs?ref=609680ef97dbf82c07b6b06e21aa366423892304", "patch": "@@ -128,7 +128,7 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n             },\n             ast::Struct(it) => decl(it),\n             ast::Union(it) => decl(it),\n-            ast::EnumDef(it) => decl(it),\n+            ast::Enum(it) => decl(it),\n             ast::EnumVariant(it) => decl(it),\n             ast::TraitDef(it) => decl(it),\n             ast::Module(it) => decl(it),\n@@ -308,7 +308,7 @@ fn very_obsolete() {}\n                         label: \"E\",\n                         navigation_range: 165..166,\n                         node_range: 160..180,\n-                        kind: ENUM_DEF,\n+                        kind: ENUM,\n                         detail: None,\n                         deprecated: false,\n                     },"}, {"sha": "e2f7e63736c1db0ce4cda11fa11b8b6230c63711", "filename": "crates/ra_ide/src/goto_implementation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_ide%2Fsrc%2Fgoto_implementation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_ide%2Fsrc%2Fgoto_implementation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_implementation.rs?ref=609680ef97dbf82c07b6b06e21aa366423892304", "patch": "@@ -45,7 +45,7 @@ fn impls_for_def(\n ) -> Option<Vec<NavigationTarget>> {\n     let ty = match node {\n         ast::AdtDef::Struct(def) => sema.to_def(def)?.ty(sema.db),\n-        ast::AdtDef::EnumDef(def) => sema.to_def(def)?.ty(sema.db),\n+        ast::AdtDef::Enum(def) => sema.to_def(def)?.ty(sema.db),\n         ast::AdtDef::Union(def) => sema.to_def(def)?.ty(sema.db),\n     };\n "}, {"sha": "7e2833bd5e242d07a9d3dd45a1441361453eda2d", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=609680ef97dbf82c07b6b06e21aa366423892304", "patch": "@@ -706,7 +706,7 @@ fn highlight_name_by_syntax(name: ast::Name) -> Highlight {\n \n     let tag = match parent.kind() {\n         STRUCT => HighlightTag::Struct,\n-        ENUM_DEF => HighlightTag::Enum,\n+        ENUM => HighlightTag::Enum,\n         UNION => HighlightTag::Union,\n         TRAIT_DEF => HighlightTag::Trait,\n         TYPE_ALIAS => HighlightTag::TypeAlias,"}, {"sha": "586b3d75098b9c003a2d8cccbfe629288dcf9bc2", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=609680ef97dbf82c07b6b06e21aa366423892304", "patch": "@@ -158,7 +158,7 @@ pub fn classify_name(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Option\n                 let def: hir::Union = sema.to_def(&it)?;\n                 Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n             },\n-            ast::EnumDef(it) => {\n+            ast::Enum(it) => {\n                 let def: hir::Enum = sema.to_def(&it)?;\n                 Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n             },"}, {"sha": "646d338aec39e82f27917c1d7b7ee87edc59e3e9", "filename": "crates/ra_ide_db/src/symbol_index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs?ref=609680ef97dbf82c07b6b06e21aa366423892304", "patch": "@@ -344,7 +344,7 @@ impl Query {\n }\n \n fn is_type(kind: SyntaxKind) -> bool {\n-    matches!(kind, STRUCT | ENUM_DEF | TRAIT_DEF | TYPE_ALIAS)\n+    matches!(kind, STRUCT | ENUM | TRAIT_DEF | TYPE_ALIAS)\n }\n \n /// The actual data that is stored in the index. It should be as compact as\n@@ -399,7 +399,7 @@ fn to_symbol(node: &SyntaxNode) -> Option<(SmolStr, SyntaxNodePtr, TextRange)> {\n         match node {\n             ast::Fn(it) => decl(it),\n             ast::Struct(it) => decl(it),\n-            ast::EnumDef(it) => decl(it),\n+            ast::Enum(it) => decl(it),\n             ast::TraitDef(it) => decl(it),\n             ast::Module(it) => decl(it),\n             ast::TypeAlias(it) => decl(it),"}, {"sha": "707e84f42ddfa3dad86e8300809f69cd7a1b7314", "filename": "crates/ra_mbe/src/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Ftests.rs?ref=609680ef97dbf82c07b6b06e21aa366423892304", "patch": "@@ -1467,7 +1467,7 @@ macro_rules! quick_error {\n         buf [ ]\n         queue [ ]\n     ) => {\n-        quick_error!(ENUM_DEFINITION [enum $name $( #[$meta] )*]\n+        quick_error!(ENUMINITION [enum $name $( #[$meta] )*]\n             body []\n             queue [$(\n                 $( #[$imeta] )*\n@@ -1489,7 +1489,7 @@ quick_error ! (SORT [enum Wrapped # [derive (Debug)]] items [\n \"#,\n     );\n \n-    assert_eq!(expanded.to_string(), \"quick_error ! (ENUM_DEFINITION [enum Wrapped # [derive (Debug)]] body [] queue [=> One : UNIT [] => Two : TUPLE [s : String]]) ;\");\n+    assert_eq!(expanded.to_string(), \"quick_error ! (ENUMINITION [enum Wrapped # [derive (Debug)]] body [] queue [=> One : UNIT [] => Two : TUPLE [s : String]]) ;\");\n }\n \n #[test]"}, {"sha": "aeb7ce86b9d8dc07c47334e2c9e000fdf5cd15f1", "filename": "crates/ra_parser/src/grammar/items/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs?ref=609680ef97dbf82c07b6b06e21aa366423892304", "patch": "@@ -64,7 +64,7 @@ pub(super) fn enum_def(p: &mut Parser, m: Marker) {\n     } else {\n         p.error(\"expected `{`\")\n     }\n-    m.complete(p, ENUM_DEF);\n+    m.complete(p, ENUM);\n }\n \n pub(crate) fn enum_variant_list(p: &mut Parser) {"}, {"sha": "fde9e55f1ef3e373094ca2c460d840edee5aaf40", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=609680ef97dbf82c07b6b06e21aa366423892304", "patch": "@@ -125,7 +125,7 @@ pub enum SyntaxKind {\n     SOURCE_FILE,\n     STRUCT,\n     UNION,\n-    ENUM_DEF,\n+    ENUM,\n     FN,\n     RET_TYPE,\n     EXTERN_CRATE,"}, {"sha": "1d1452546f70d7761c44f79975155509e94908a1", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=609680ef97dbf82c07b6b06e21aa366423892304", "patch": "@@ -44,14 +44,14 @@ impl ConstDef {\n     pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![;]) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct EnumDef {\n+pub struct Enum {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for EnumDef {}\n-impl ast::NameOwner for EnumDef {}\n-impl ast::VisibilityOwner for EnumDef {}\n-impl ast::GenericParamsOwner for EnumDef {}\n-impl EnumDef {\n+impl ast::AttrsOwner for Enum {}\n+impl ast::NameOwner for Enum {}\n+impl ast::VisibilityOwner for Enum {}\n+impl ast::GenericParamsOwner for Enum {}\n+impl Enum {\n     pub fn enum_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![enum]) }\n     pub fn variant_list(&self) -> Option<EnumVariantList> { support::child(&self.syntax) }\n }\n@@ -1273,7 +1273,7 @@ impl MetaItem {\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum Item {\n     ConstDef(ConstDef),\n-    EnumDef(EnumDef),\n+    Enum(Enum),\n     ExternBlock(ExternBlock),\n     ExternCrate(ExternCrate),\n     Fn(Fn),\n@@ -1392,7 +1392,7 @@ impl ast::VisibilityOwner for ExternItem {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum AdtDef {\n     Struct(Struct),\n-    EnumDef(EnumDef),\n+    Enum(Enum),\n     Union(Union),\n }\n impl ast::AttrsOwner for AdtDef {}\n@@ -1432,8 +1432,8 @@ impl AstNode for ConstDef {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for EnumDef {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == ENUM_DEF }\n+impl AstNode for Enum {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == ENUM }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2777,8 +2777,8 @@ impl AstNode for MetaItem {\n impl From<ConstDef> for Item {\n     fn from(node: ConstDef) -> Item { Item::ConstDef(node) }\n }\n-impl From<EnumDef> for Item {\n-    fn from(node: EnumDef) -> Item { Item::EnumDef(node) }\n+impl From<Enum> for Item {\n+    fn from(node: Enum) -> Item { Item::Enum(node) }\n }\n impl From<ExternBlock> for Item {\n     fn from(node: ExternBlock) -> Item { Item::ExternBlock(node) }\n@@ -2819,15 +2819,15 @@ impl From<Use> for Item {\n impl AstNode for Item {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n-            CONST_DEF | ENUM_DEF | EXTERN_BLOCK | EXTERN_CRATE | FN | IMPL_DEF | MACRO_CALL\n+            CONST_DEF | ENUM | EXTERN_BLOCK | EXTERN_CRATE | FN | IMPL_DEF | MACRO_CALL\n             | MODULE | STATIC_DEF | STRUCT | TRAIT_DEF | TYPE_ALIAS | UNION | USE => true,\n             _ => false,\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         let res = match syntax.kind() {\n             CONST_DEF => Item::ConstDef(ConstDef { syntax }),\n-            ENUM_DEF => Item::EnumDef(EnumDef { syntax }),\n+            ENUM => Item::Enum(Enum { syntax }),\n             EXTERN_BLOCK => Item::ExternBlock(ExternBlock { syntax }),\n             EXTERN_CRATE => Item::ExternCrate(ExternCrate { syntax }),\n             FN => Item::Fn(Fn { syntax }),\n@@ -2847,7 +2847,7 @@ impl AstNode for Item {\n     fn syntax(&self) -> &SyntaxNode {\n         match self {\n             Item::ConstDef(it) => &it.syntax,\n-            Item::EnumDef(it) => &it.syntax,\n+            Item::Enum(it) => &it.syntax,\n             Item::ExternBlock(it) => &it.syntax,\n             Item::ExternCrate(it) => &it.syntax,\n             Item::Fn(it) => &it.syntax,\n@@ -3375,23 +3375,23 @@ impl AstNode for ExternItem {\n impl From<Struct> for AdtDef {\n     fn from(node: Struct) -> AdtDef { AdtDef::Struct(node) }\n }\n-impl From<EnumDef> for AdtDef {\n-    fn from(node: EnumDef) -> AdtDef { AdtDef::EnumDef(node) }\n+impl From<Enum> for AdtDef {\n+    fn from(node: Enum) -> AdtDef { AdtDef::Enum(node) }\n }\n impl From<Union> for AdtDef {\n     fn from(node: Union) -> AdtDef { AdtDef::Union(node) }\n }\n impl AstNode for AdtDef {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n-            STRUCT | ENUM_DEF | UNION => true,\n+            STRUCT | ENUM | UNION => true,\n             _ => false,\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         let res = match syntax.kind() {\n             STRUCT => AdtDef::Struct(Struct { syntax }),\n-            ENUM_DEF => AdtDef::EnumDef(EnumDef { syntax }),\n+            ENUM => AdtDef::Enum(Enum { syntax }),\n             UNION => AdtDef::Union(Union { syntax }),\n             _ => return None,\n         };\n@@ -3400,7 +3400,7 @@ impl AstNode for AdtDef {\n     fn syntax(&self) -> &SyntaxNode {\n         match self {\n             AdtDef::Struct(it) => &it.syntax,\n-            AdtDef::EnumDef(it) => &it.syntax,\n+            AdtDef::Enum(it) => &it.syntax,\n             AdtDef::Union(it) => &it.syntax,\n         }\n     }\n@@ -3470,7 +3470,7 @@ impl std::fmt::Display for ConstDef {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for EnumDef {\n+impl std::fmt::Display for Enum {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }"}, {"sha": "02e6e52c2434289efa057a01b7e32dea87e4a632", "filename": "crates/ra_syntax/src/ast/node_ext.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=609680ef97dbf82c07b6b06e21aa366423892304", "patch": "@@ -248,11 +248,11 @@ impl ast::RecordFieldPat {\n }\n \n impl ast::EnumVariant {\n-    pub fn parent_enum(&self) -> ast::EnumDef {\n+    pub fn parent_enum(&self) -> ast::Enum {\n         self.syntax()\n             .parent()\n             .and_then(|it| it.parent())\n-            .and_then(ast::EnumDef::cast)\n+            .and_then(ast::Enum::cast)\n             .expect(\"EnumVariants are always nested in Enums\")\n     }\n     pub fn kind(&self) -> StructKind {\n@@ -479,7 +479,7 @@ impl ast::DocCommentsOwner for ast::Struct {}\n impl ast::DocCommentsOwner for ast::Union {}\n impl ast::DocCommentsOwner for ast::RecordField {}\n impl ast::DocCommentsOwner for ast::TupleField {}\n-impl ast::DocCommentsOwner for ast::EnumDef {}\n+impl ast::DocCommentsOwner for ast::Enum {}\n impl ast::DocCommentsOwner for ast::EnumVariant {}\n impl ast::DocCommentsOwner for ast::TraitDef {}\n impl ast::DocCommentsOwner for ast::Module {}"}, {"sha": "faffd0d32b8568d9f3b5143a9fa27b93476ec422", "filename": "crates/ra_syntax/src/parsing/text_tree_sink.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs?ref=609680ef97dbf82c07b6b06e21aa366423892304", "patch": "@@ -146,7 +146,7 @@ fn n_attached_trivias<'a>(\n     trivias: impl Iterator<Item = (SyntaxKind, &'a str)>,\n ) -> usize {\n     match kind {\n-        MACRO_CALL | CONST_DEF | TYPE_ALIAS | STRUCT | ENUM_DEF | ENUM_VARIANT | FN | TRAIT_DEF\n+        MACRO_CALL | CONST_DEF | TYPE_ALIAS | STRUCT | ENUM | ENUM_VARIANT | FN | TRAIT_DEF\n         | MODULE | RECORD_FIELD | STATIC_DEF => {\n             let mut res = 0;\n             let mut trivias = trivias.enumerate().peekable();"}, {"sha": "94456e48ca4bd5c93ee6029d562ec9b0a1a613c0", "filename": "crates/ra_syntax/test_data/parser/err/0025_nope.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0025_nope.rast", "raw_url": "https://github.com/rust-lang/rust/raw/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0025_nope.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0025_nope.rast?ref=609680ef97dbf82c07b6b06e21aa366423892304", "patch": "@@ -11,7 +11,7 @@ SOURCE_FILE@0..575\n     BLOCK_EXPR@10..574\n       L_CURLY@10..11 \"{\"\n       WHITESPACE@11..16 \"\\n    \"\n-      ENUM_DEF@16..152\n+      ENUM@16..152\n         ENUM_KW@16..20 \"enum\"\n         WHITESPACE@20..21 \" \"\n         NAME@21..25\n@@ -79,7 +79,7 @@ SOURCE_FILE@0..575\n           INT_NUMBER@184..185 \"1\"\n         SEMICOLON@185..186 \";\"\n       WHITESPACE@186..191 \"\\n    \"\n-      ENUM_DEF@191..223\n+      ENUM@191..223\n         ENUM_KW@191..195 \"enum\"\n         WHITESPACE@195..196 \" \"\n         NAME@196..201\n@@ -95,7 +95,7 @@ SOURCE_FILE@0..575\n           WHITESPACE@217..222 \"\\n    \"\n           R_CURLY@222..223 \"}\"\n       WHITESPACE@223..229 \"\\n\\n    \"\n-      ENUM_DEF@229..300\n+      ENUM@229..300\n         ENUM_KW@229..233 \"enum\"\n         WHITESPACE@233..234 \" \"\n         NAME@234..239\n@@ -132,7 +132,7 @@ SOURCE_FILE@0..575\n         BLOCK_EXPR@306..459\n           L_CURLY@306..307 \"{\"\n           WHITESPACE@307..316 \"\\n        \"\n-          ENUM_DEF@316..453\n+          ENUM@316..453\n             COMMENT@316..329 \"// fail again\"\n             WHITESPACE@329..338 \"\\n        \"\n             ENUM_KW@338..342 \"enum\""}, {"sha": "25e6cc1701ee2acb1dbedf456e870e83e1abf035", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0118_impl_inner_attributes.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0118_impl_inner_attributes.rast", "raw_url": "https://github.com/rust-lang/rust/raw/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0118_impl_inner_attributes.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0118_impl_inner_attributes.rast?ref=609680ef97dbf82c07b6b06e21aa366423892304", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..94\n-  ENUM_DEF@0..8\n+  ENUM@0..8\n     ENUM_KW@0..4 \"enum\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..6"}, {"sha": "9cc8172e0745a22bf09f20163f4690b29116de0f", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0134_nocontentexpr_after_item.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0134_nocontentexpr_after_item.rast", "raw_url": "https://github.com/rust-lang/rust/raw/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0134_nocontentexpr_after_item.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0134_nocontentexpr_after_item.rast?ref=609680ef97dbf82c07b6b06e21aa366423892304", "patch": "@@ -11,7 +11,7 @@ SOURCE_FILE@0..111\n     BLOCK_EXPR@21..110\n       L_CURLY@21..22 \"{\"\n       WHITESPACE@22..27 \"\\n    \"\n-      ENUM_DEF@27..75\n+      ENUM@27..75\n         ENUM_KW@27..31 \"enum\"\n         WHITESPACE@31..32 \" \"\n         NAME@32..41"}, {"sha": "0331558d29e704376828d2dcc2bd939165f22c97", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0157_variant_discriminant.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0157_variant_discriminant.rast", "raw_url": "https://github.com/rust-lang/rust/raw/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0157_variant_discriminant.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0157_variant_discriminant.rast?ref=609680ef97dbf82c07b6b06e21aa366423892304", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..23\n-  ENUM_DEF@0..22\n+  ENUM@0..22\n     ENUM_KW@0..4 \"enum\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..6"}, {"sha": "1ffcffc1a04806115ab4de509a0a00e0687a57d2", "filename": "crates/ra_syntax/test_data/parser/ok/0019_enums.rast", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0019_enums.rast", "raw_url": "https://github.com/rust-lang/rust/raw/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0019_enums.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0019_enums.rast?ref=609680ef97dbf82c07b6b06e21aa366423892304", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..182\n-  ENUM_DEF@0..11\n+  ENUM@0..11\n     ENUM_KW@0..4 \"enum\"\n     WHITESPACE@4..5 \" \"\n     NAME@5..7\n@@ -10,7 +10,7 @@ SOURCE_FILE@0..182\n       WHITESPACE@9..10 \"\\n\"\n       R_CURLY@10..11 \"}\"\n   WHITESPACE@11..13 \"\\n\\n\"\n-  ENUM_DEF@13..27\n+  ENUM@13..27\n     ENUM_KW@13..17 \"enum\"\n     WHITESPACE@17..18 \" \"\n     NAME@18..20\n@@ -27,7 +27,7 @@ SOURCE_FILE@0..182\n       WHITESPACE@25..26 \"\\n\"\n       R_CURLY@26..27 \"}\"\n   WHITESPACE@27..29 \"\\n\\n\"\n-  ENUM_DEF@29..46\n+  ENUM@29..46\n     ENUM_KW@29..33 \"enum\"\n     WHITESPACE@33..34 \" \"\n     NAME@34..36\n@@ -42,7 +42,7 @@ SOURCE_FILE@0..182\n       WHITESPACE@44..45 \"\\n\"\n       R_CURLY@45..46 \"}\"\n   WHITESPACE@46..48 \"\\n\\n\"\n-  ENUM_DEF@48..66\n+  ENUM@48..66\n     ENUM_KW@48..52 \"enum\"\n     WHITESPACE@52..53 \" \"\n     NAME@53..55\n@@ -58,7 +58,7 @@ SOURCE_FILE@0..182\n       WHITESPACE@64..65 \"\\n\"\n       R_CURLY@65..66 \"}\"\n   WHITESPACE@66..68 \"\\n\\n\"\n-  ENUM_DEF@68..181\n+  ENUM@68..181\n     ENUM_KW@68..72 \"enum\"\n     WHITESPACE@72..73 \" \"\n     NAME@73..75"}, {"sha": "9db4f0aa1016032ed0febc3c949d4e3ba6e3d345", "filename": "crates/ra_syntax/test_data/parser/ok/0047_minus_in_inner_pattern.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0047_minus_in_inner_pattern.rast", "raw_url": "https://github.com/rust-lang/rust/raw/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0047_minus_in_inner_pattern.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0047_minus_in_inner_pattern.rast?ref=609680ef97dbf82c07b6b06e21aa366423892304", "patch": "@@ -256,7 +256,7 @@ SOURCE_FILE@0..395\n       WHITESPACE@339..340 \"\\n\"\n       R_CURLY@340..341 \"}\"\n   WHITESPACE@341..343 \"\\n\\n\"\n-  ENUM_DEF@343..367\n+  ENUM@343..367\n     ENUM_KW@343..347 \"enum\"\n     WHITESPACE@347..348 \" \"\n     NAME@348..349"}, {"sha": "df4969b8078f1aaa2eea2186e114d1fe085b1b90", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=609680ef97dbf82c07b6b06e21aa366423892304", "patch": "@@ -926,7 +926,7 @@ pub(crate) fn handle_code_lens(\n                         it.kind,\n                         SyntaxKind::TRAIT_DEF\n                             | SyntaxKind::STRUCT\n-                            | SyntaxKind::ENUM_DEF\n+                            | SyntaxKind::ENUM\n                             | SyntaxKind::UNION\n                     )\n                 })"}, {"sha": "62acbfb9189fcb79642299acc63b1cf4ae6c1c77", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609680ef97dbf82c07b6b06e21aa366423892304/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=609680ef97dbf82c07b6b06e21aa366423892304", "patch": "@@ -33,7 +33,7 @@ pub(crate) fn symbol_kind(syntax_kind: SyntaxKind) -> lsp_types::SymbolKind {\n     match syntax_kind {\n         SyntaxKind::FN => lsp_types::SymbolKind::Function,\n         SyntaxKind::STRUCT => lsp_types::SymbolKind::Struct,\n-        SyntaxKind::ENUM_DEF => lsp_types::SymbolKind::Enum,\n+        SyntaxKind::ENUM => lsp_types::SymbolKind::Enum,\n         SyntaxKind::ENUM_VARIANT => lsp_types::SymbolKind::EnumMember,\n         SyntaxKind::TRAIT_DEF => lsp_types::SymbolKind::Interface,\n         SyntaxKind::MACRO_CALL => lsp_types::SymbolKind::Function,"}, {"sha": "fe8381e4172a52166ef4c1b1927957df9e9f5a7c", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/609680ef97dbf82c07b6b06e21aa366423892304/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609680ef97dbf82c07b6b06e21aa366423892304/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=609680ef97dbf82c07b6b06e21aa366423892304", "patch": "@@ -95,7 +95,7 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"SOURCE_FILE\",\n         \"STRUCT\",\n         \"UNION\",\n-        \"ENUM_DEF\",\n+        \"ENUM\",\n         \"FN\",\n         \"RET_TYPE\",\n         \"EXTERN_CRATE\","}, {"sha": "9c6797cb765eb239bd4378d6451c07447867ecb7", "filename": "xtask/src/codegen/rust.ungram", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/609680ef97dbf82c07b6b06e21aa366423892304/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/609680ef97dbf82c07b6b06e21aa366423892304/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Frust.ungram?ref=609680ef97dbf82c07b6b06e21aa366423892304", "patch": "@@ -5,7 +5,7 @@ SourceFile =\n \n Item =\n   ConstDef\n-| EnumDef\n+| Enum\n | ExternBlock\n | ExternCrate\n | Fn\n@@ -98,11 +98,7 @@ FieldList =\n   RecordFieldList\n | TupleFieldList\n \n-Union =\n-  Attr* Visibility? 'union' Name GenericParamList? WhereClause?\n-  RecordFieldList\n-\n-EnumDef =\n+Enum =\n   Attr* Visibility? 'enum' Name GenericParamList? WhereClause?\n   variant_list:EnumVariantList\n \n@@ -112,6 +108,10 @@ EnumVariantList =\n EnumVariant =\n   Attr* Visibility? Name FieldList ('=' Expr)?\n \n+Union =\n+  Attr* Visibility? 'union' Name GenericParamList? WhereClause?\n+  RecordFieldList\n+\n TraitDef =\n   Attr* Visibility? 'unsafe'? 'auto'? 'trait' Name GenericParamList\n   (':' TypeBoundList?)? WhereClause\n@@ -454,7 +454,7 @@ MetaItem =\n \n AdtDef =\n   Struct\n-| EnumDef\n+| Enum\n | Union\n \n TypeRef ="}]}