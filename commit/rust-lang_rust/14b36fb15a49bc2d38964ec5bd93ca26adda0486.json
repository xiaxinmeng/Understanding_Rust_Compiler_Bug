{"sha": "14b36fb15a49bc2d38964ec5bd93ca26adda0486", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0YjM2ZmIxNWE0OWJjMmQzODk2NGVjNWJkOTNjYTI2YWRkYTA0ODY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-01-07T20:41:55Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-01-25T19:48:10Z"}, "message": "std: Stabilize fixed-width integer atomics\n\nThis commit stabilizes the `Atomic{I,U}{8,16,32,64}` APIs in the\n`std::sync::atomic` and `core::sync::atomic` modules. Proposed in #56753\nand tracked in #32976 this feature has been unstable for quite some time\nand is hopefully ready to go over the finish line now!\n\nThe API is being stabilized as-is. The API of `AtomicU8` and friends\nmirrors that of `AtomicUsize`. A list of changes made here are:\n\n* A portability documentation section has been added to describe the\n  current state of affairs.\n* Emulation of smaller-size atomics with larger-size atomics has been\n  documented.\n* As an added bonus, `ATOMIC_*_INIT` is now scheduled for deprecation\n  across the board in 1.34.0 now that `const` functions can be invoked\n  in statics.\n\nNote that the 128-bit atomic types are omitted from this stabilization\nexplicitly. They have far less platform support than the other atomic\ntypes, and will likely require further discussion about their best\nlocation.\n\nCloses #32976\nCloses #56753", "tree": {"sha": "a5797cf2738ee05f8beddb7d21b45cde0b86a335", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5797cf2738ee05f8beddb7d21b45cde0b86a335"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14b36fb15a49bc2d38964ec5bd93ca26adda0486", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14b36fb15a49bc2d38964ec5bd93ca26adda0486", "html_url": "https://github.com/rust-lang/rust/commit/14b36fb15a49bc2d38964ec5bd93ca26adda0486", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14b36fb15a49bc2d38964ec5bd93ca26adda0486/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b1669d96cee9dec9035a50fdf0a967a68605f98", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b1669d96cee9dec9035a50fdf0a967a68605f98", "html_url": "https://github.com/rust-lang/rust/commit/0b1669d96cee9dec9035a50fdf0a967a68605f98"}], "stats": {"total": 151, "additions": 96, "deletions": 55}, "files": [{"sha": "b9ebf19b23cab36c1fde5299d1dcbeab7f282fe6", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 96, "deletions": 55, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/14b36fb15a49bc2d38964ec5bd93ca26adda0486/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b36fb15a49bc2d38964ec5bd93ca26adda0486/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=14b36fb15a49bc2d38964ec5bd93ca26adda0486", "patch": "@@ -5,13 +5,16 @@\n //! types.\n //!\n //! This module defines atomic versions of a select number of primitive\n-//! types, including [`AtomicBool`], [`AtomicIsize`], and [`AtomicUsize`].\n+//! types, including [`AtomicBool`], [`AtomicIsize`], [`AtomicUsize`],\n+//! [`AtomicI8`], [`AtomicU16`], etc.\n //! Atomic types present operations that, when used correctly, synchronize\n //! updates between threads.\n //!\n //! [`AtomicBool`]: struct.AtomicBool.html\n //! [`AtomicIsize`]: struct.AtomicIsize.html\n //! [`AtomicUsize`]: struct.AtomicUsize.html\n+//! [`AtomicI8`]: struct.AtomicI8.html\n+//! [`AtomicU16`]: struct.AtomicU16.html\n //!\n //! Each method takes an [`Ordering`] which represents the strength of\n //! the memory barrier for that operation. These orderings are the\n@@ -31,11 +34,46 @@\n //! [`Sync`]: ../../marker/trait.Sync.html\n //! [arc]: ../../../std/sync/struct.Arc.html\n //!\n-//! Most atomic types may be stored in static variables, initialized using\n-//! the provided static initializers like [`ATOMIC_BOOL_INIT`]. Atomic statics\n+//! Atomic types may be stored in static variables, initialized using\n+//! the constant initializers like [`AtomicBool::new`]. Atomic statics\n //! are often used for lazy global initialization.\n //!\n-//! [`ATOMIC_BOOL_INIT`]: constant.ATOMIC_BOOL_INIT.html\n+//! [`AtomicBool::new`]: struct.AtomicBool.html#method.new\n+//!\n+//! # Portability\n+//!\n+//! All atomic types in this module are guaranteed to be [lock-free] if they're\n+//! available. This means they don't internally acquire a global mutex. Atomic\n+//! types and operations are not guaranteed to be wait-free. This means that\n+//! operations like `fetch_or` may be implemented with a compare-and-swap loop.\n+//!\n+//! Atomic operations may be implemented at the instruction layer with\n+//! larger-size atomics. For example some platforms use 4-byte atomic\n+//! instructions to implement `AtomicI8`. Note that this emulation should not\n+//! have an impact on correctness of code, it's just something to be aware of.\n+//!\n+//! The atomic types in this module may not be available on all platforms. The\n+//! atomic types here are all widely available, however, and can generally be\n+//! relied upon existing. Some notable exceptions are:\n+//!\n+//! * PowerPC and MIPS platforms with 32-bit pointers do not have `AtomicU64` or\n+//!   `AtomicI64` types.\n+//! * ARM platforms like `armv5te` that aren't for Linux do not have any atomics\n+//!   at all.\n+//! * ARM targets with `thumbv6m` do not have atomic operations at all.\n+//!\n+//! Note that future platforms may be added that also do not have support for\n+//! some atomic operations. Maximally portable code will want to be careful\n+//! about which atomic types are used. `AtomicUsize` and `AtomicIsize` are\n+//! generally the most portable, but even then they're not available everywhere.\n+//! For reference, the `std` library requires pointer-sized atomics, although\n+//! `core` does not.\n+//!\n+//! Currently you'll need to use `#[cfg(target_arch)]` primarily to\n+//! conditionally compile in code with atomics. There is an unstable\n+//! `#[cfg(target_has_atomic)]` as well which may be stabilized in the future.\n+//!\n+//! [lock-free]: https://en.wikipedia.org/wiki/Non-blocking_algorithm\n //!\n //! # Examples\n //!\n@@ -66,9 +104,9 @@\n //! Keep a global count of live threads:\n //!\n //! ```\n-//! use std::sync::atomic::{AtomicUsize, Ordering, ATOMIC_USIZE_INIT};\n+//! use std::sync::atomic::{AtomicUsize, Ordering};\n //!\n-//! static GLOBAL_THREAD_COUNT: AtomicUsize = ATOMIC_USIZE_INIT;\n+//! static GLOBAL_THREAD_COUNT: AtomicUsize = AtomicUsize::new(0);\n //!\n //! let old_thread_count = GLOBAL_THREAD_COUNT.fetch_add(1, Ordering::SeqCst);\n //! println!(\"live threads: {}\", old_thread_count + 1);\n@@ -252,6 +290,7 @@ pub enum Ordering {\n /// [`AtomicBool`]: struct.AtomicBool.html\n #[cfg(target_has_atomic = \"8\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_deprecated(since = \"1.34.0\", reason = \"the `new` function is now preferred\")]\n pub const ATOMIC_BOOL_INIT: AtomicBool = AtomicBool::new(false);\n \n #[cfg(target_has_atomic = \"8\")]\n@@ -1097,7 +1136,8 @@ macro_rules! atomic_int {\n         /// `](\n         #[doc = $int_ref]\n         /// ). For more about the differences between atomic types and\n-        /// non-atomic types, please see the [module-level documentation].\n+        /// non-atomic types as well as information about the portability of\n+        /// this type, please see the [module-level documentation].\n         ///\n         /// [module-level documentation]: index.html\n         #[$stable]\n@@ -1108,6 +1148,7 @@ macro_rules! atomic_int {\n \n         /// An atomic integer initialized to `0`.\n         #[$stable]\n+        #[rustc_deprecated(since = \"1.34.0\", reason = \"the `new` function is now preferred\")]\n         pub const $atomic_init: $atomic_type = $atomic_type::new(0);\n \n         #[$stable]\n@@ -1827,12 +1868,12 @@ assert_eq!(min_foo, 12);\n \n #[cfg(target_has_atomic = \"8\")]\n atomic_int! {\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     \"i8\", \"../../../std/primitive.i8.html\",\n     \"#![feature(integer_atomics)]\\n\\n\",\n     atomic_min, atomic_max,\n@@ -1841,12 +1882,12 @@ atomic_int! {\n }\n #[cfg(target_has_atomic = \"8\")]\n atomic_int! {\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     \"u8\", \"../../../std/primitive.u8.html\",\n     \"#![feature(integer_atomics)]\\n\\n\",\n     atomic_umin, atomic_umax,\n@@ -1855,12 +1896,12 @@ atomic_int! {\n }\n #[cfg(target_has_atomic = \"16\")]\n atomic_int! {\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     \"i16\", \"../../../std/primitive.i16.html\",\n     \"#![feature(integer_atomics)]\\n\\n\",\n     atomic_min, atomic_max,\n@@ -1869,12 +1910,12 @@ atomic_int! {\n }\n #[cfg(target_has_atomic = \"16\")]\n atomic_int! {\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     \"u16\", \"../../../std/primitive.u16.html\",\n     \"#![feature(integer_atomics)]\\n\\n\",\n     atomic_umin, atomic_umax,\n@@ -1883,12 +1924,12 @@ atomic_int! {\n }\n #[cfg(target_has_atomic = \"32\")]\n atomic_int! {\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     \"i32\", \"../../../std/primitive.i32.html\",\n     \"#![feature(integer_atomics)]\\n\\n\",\n     atomic_min, atomic_max,\n@@ -1897,12 +1938,12 @@ atomic_int! {\n }\n #[cfg(target_has_atomic = \"32\")]\n atomic_int! {\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     \"u32\", \"../../../std/primitive.u32.html\",\n     \"#![feature(integer_atomics)]\\n\\n\",\n     atomic_umin, atomic_umax,\n@@ -1911,12 +1952,12 @@ atomic_int! {\n }\n #[cfg(target_has_atomic = \"64\")]\n atomic_int! {\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     \"i64\", \"../../../std/primitive.i64.html\",\n     \"#![feature(integer_atomics)]\\n\\n\",\n     atomic_min, atomic_max,\n@@ -1925,12 +1966,12 @@ atomic_int! {\n }\n #[cfg(target_has_atomic = \"64\")]\n atomic_int! {\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     \"u64\", \"../../../std/primitive.u64.html\",\n     \"#![feature(integer_atomics)]\\n\\n\",\n     atomic_umin, atomic_umax,"}]}