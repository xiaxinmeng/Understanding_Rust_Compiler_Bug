{"sha": "05723cb50ddf91a57109c4dae6c99ec15cdc3d30", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1NzIzY2I1MGRkZjkxYTU3MTA5YzRkYWU2Yzk5ZWMxNWNkYzNkMzA=", "commit": {"author": {"name": "Matthew Sanetra", "email": "matthewsanetra@gmail.com", "date": "2020-10-01T18:05:39Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2020-10-28T12:45:45Z"}, "message": "Add check if param name is similar to fn name", "tree": {"sha": "5be1066c0af5635ac79fc5a3626f1b711b6df725", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5be1066c0af5635ac79fc5a3626f1b711b6df725"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05723cb50ddf91a57109c4dae6c99ec15cdc3d30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05723cb50ddf91a57109c4dae6c99ec15cdc3d30", "html_url": "https://github.com/rust-lang/rust/commit/05723cb50ddf91a57109c4dae6c99ec15cdc3d30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05723cb50ddf91a57109c4dae6c99ec15cdc3d30/comments", "author": {"login": "matthewsanetra", "id": 41018997, "node_id": "MDQ6VXNlcjQxMDE4OTk3", "avatar_url": "https://avatars.githubusercontent.com/u/41018997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewsanetra", "html_url": "https://github.com/matthewsanetra", "followers_url": "https://api.github.com/users/matthewsanetra/followers", "following_url": "https://api.github.com/users/matthewsanetra/following{/other_user}", "gists_url": "https://api.github.com/users/matthewsanetra/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewsanetra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewsanetra/subscriptions", "organizations_url": "https://api.github.com/users/matthewsanetra/orgs", "repos_url": "https://api.github.com/users/matthewsanetra/repos", "events_url": "https://api.github.com/users/matthewsanetra/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewsanetra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53c7aead8fbd50156a0082f4f35b9cba961a65ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/53c7aead8fbd50156a0082f4f35b9cba961a65ca", "html_url": "https://github.com/rust-lang/rust/commit/53c7aead8fbd50156a0082f4f35b9cba961a65ca"}], "stats": {"total": 108, "additions": 106, "deletions": 2}, "files": [{"sha": "b6113bda21df0f48560270dc5b062166f79451ab", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 106, "deletions": 2, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/05723cb50ddf91a57109c4dae6c99ec15cdc3d30/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05723cb50ddf91a57109c4dae6c99ec15cdc3d30/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=05723cb50ddf91a57109c4dae6c99ec15cdc3d30", "patch": "@@ -1,6 +1,6 @@\n use assists::utils::FamousDefs;\n use either::Either;\n-use hir::{known, HirDisplay, Semantics};\n+use hir::{known, Callable, HirDisplay, Semantics};\n use ide_db::RootDatabase;\n use stdx::to_lower_snake_case;\n use syntax::{\n@@ -170,7 +170,7 @@ fn get_param_name_hints(\n             };\n             Some((param_name, arg))\n         })\n-        .filter(|(param_name, arg)| should_show_param_name_hint(sema, &callable, &param_name, &arg))\n+        .filter(|(param_name, arg)| should_show_param_name_hint(sema, &callable, param_name, &arg))\n         .map(|(param_name, arg)| InlayHint {\n             range: arg.syntax().text_range(),\n             kind: InlayKind::ParameterHint,\n@@ -334,9 +334,11 @@ fn should_show_param_name_hint(\n         | hir::CallableKind::TupleEnumVariant(_)\n         | hir::CallableKind::Closure => None,\n     };\n+\n     if param_name.is_empty()\n         || Some(param_name) == fn_name.as_ref().map(|s| s.trim_start_matches('_'))\n         || is_argument_similar_to_param_name(sema, argument, param_name)\n+        || is_param_name_similar_to_fn_name(param_name, callable, fn_name.as_ref())\n         || param_name.starts_with(\"ra_fixture\")\n     {\n         return false;\n@@ -364,6 +366,26 @@ fn is_argument_similar_to_param_name(\n     }\n }\n \n+fn is_param_name_similar_to_fn_name(\n+    param_name: &str,\n+    callable: &Callable,\n+    fn_name: Option<&String>,\n+) -> bool {\n+    // if it's the only parameter, don't show it if:\n+    // - is the same as the function name, or\n+    // - the function ends with '_' + param_name\n+\n+    match (callable.n_params(), fn_name) {\n+        (1, Some(function)) => {\n+            function == param_name\n+                || (function.len() > param_name.len()\n+                    && function.ends_with(param_name)\n+                    && function[..function.len() - param_name.len()].ends_with('_'))\n+        }\n+        _ => false,\n+    }\n+}\n+\n fn is_enum_name_similar_to_param_name(\n     sema: &Semantics<RootDatabase>,\n     argument: &ast::Expr,\n@@ -456,6 +478,88 @@ fn main() {\n         );\n     }\n \n+    #[test]\n+    fn param_name_similar_to_fn_name_still_hints() {\n+        check_with_config(\n+            InlayHintsConfig {\n+                parameter_hints: true,\n+                type_hints: false,\n+                chaining_hints: false,\n+                max_length: None,\n+            },\n+            r#\"\n+fn max(x: i32, y: i32) -> i32 { x + y }\n+fn main() {\n+    let _x = max(\n+        4,\n+      //^ x\n+        4,\n+      //^ y\n+    );\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn param_name_similar_to_fn_name() {\n+        check_with_config(\n+            InlayHintsConfig {\n+                parameter_hints: true,\n+                type_hints: false,\n+                chaining_hints: false,\n+                max_length: None,\n+            },\n+            r#\"\n+fn param_with_underscore(with_underscore: i32) -> i32 { with_underscore }\n+fn main() {\n+    let _x = param_with_underscore(\n+        4,\n+    );\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn param_name_same_as_fn_name() {\n+        check_with_config(\n+            InlayHintsConfig {\n+                parameter_hints: true,\n+                type_hints: false,\n+                chaining_hints: false,\n+                max_length: None,\n+            },\n+            r#\"\n+fn foo(foo: i32) -> i32 { foo }\n+fn main() {\n+    let _x = foo(\n+        4,\n+    );\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn never_hide_param_when_multiple_params() {\n+        check_with_config(\n+            InlayHintsConfig {\n+                parameter_hints: true,\n+                type_hints: false,\n+                chaining_hints: false,\n+                max_length: None,\n+            },\n+            r#\"\n+fn foo(bar: i32, baz: i32) -> i32 { bar + baz }\n+fn main() {\n+    let _x = foo(\n+        4,\n+      //^ bar\n+        8,\n+      //^ baz\n+    );\n+}\"#,\n+        );\n+    }\n+\n     #[test]\n     fn hints_disabled() {\n         check_with_config("}]}