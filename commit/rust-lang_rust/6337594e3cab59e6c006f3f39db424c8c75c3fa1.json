{"sha": "6337594e3cab59e6c006f3f39db424c8c75c3fa1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzMzc1OTRlM2NhYjU5ZTZjMDA2ZjNmMzlkYjQyNGM4Yzc1YzNmYTE=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-12-06T21:18:01Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-16T19:07:25Z"}, "message": "Iterate on variances_of.", "tree": {"sha": "3c7fedea078f05fcb44549bbbad5bba9e57c865d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c7fedea078f05fcb44549bbbad5bba9e57c865d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6337594e3cab59e6c006f3f39db424c8c75c3fa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6337594e3cab59e6c006f3f39db424c8c75c3fa1", "html_url": "https://github.com/rust-lang/rust/commit/6337594e3cab59e6c006f3f39db424c8c75c3fa1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6337594e3cab59e6c006f3f39db424c8c75c3fa1/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9", "html_url": "https://github.com/rust-lang/rust/commit/2ccf06302c08d7d4911aad40e66a9a3ee731c6f9"}], "stats": {"total": 58, "additions": 39, "deletions": 19}, "files": [{"sha": "e3bb4cf5da0c6ba91e03827e8ace77f606d60446", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 39, "deletions": 19, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/6337594e3cab59e6c006f3f39db424c8c75c3fa1/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6337594e3cab59e6c006f3f39db424c8c75c3fa1/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=6337594e3cab59e6c006f3f39db424c8c75c3fa1", "patch": "@@ -836,6 +836,41 @@ fn should_encode_mir(tcx: TyCtxt<'_>, def_id: LocalDefId) -> (bool, bool) {\n     }\n }\n \n+fn should_encode_variances(def_kind: DefKind) -> bool {\n+    match def_kind {\n+        DefKind::Struct\n+        | DefKind::Union\n+        | DefKind::Enum\n+        | DefKind::Variant\n+        | DefKind::Fn\n+        | DefKind::Ctor(..)\n+        | DefKind::AssocFn => true,\n+        DefKind::Mod\n+        | DefKind::Field\n+        | DefKind::AssocTy\n+        | DefKind::AssocConst\n+        | DefKind::TyParam\n+        | DefKind::ConstParam\n+        | DefKind::Static\n+        | DefKind::Const\n+        | DefKind::ForeignMod\n+        | DefKind::TyAlias\n+        | DefKind::OpaqueTy\n+        | DefKind::Impl\n+        | DefKind::Trait\n+        | DefKind::TraitAlias\n+        | DefKind::Macro(..)\n+        | DefKind::ForeignTy\n+        | DefKind::Use\n+        | DefKind::LifetimeParam\n+        | DefKind::AnonConst\n+        | DefKind::GlobalAsm\n+        | DefKind::Closure\n+        | DefKind::Generator\n+        | DefKind::ExternCrate => false,\n+    }\n+}\n+\n impl EncodeContext<'a, 'tcx> {\n     fn encode_def_ids(&mut self) {\n         if self.is_proc_macro {\n@@ -864,6 +899,10 @@ impl EncodeContext<'a, 'tcx> {\n                 self.encode_const_stability(def_id);\n                 self.encode_deprecation(def_id);\n             }\n+            if should_encode_variances(def_kind) {\n+                let v = self.tcx.variances_of(def_id);\n+                record!(self.tables.variances[def_id] <- v);\n+            }\n         }\n         let inherent_impls = tcx.crate_inherent_impls(LOCAL_CRATE);\n         for (def_id, implementations) in inherent_impls.inherent_impls.iter() {\n@@ -878,11 +917,6 @@ impl EncodeContext<'a, 'tcx> {\n         }\n     }\n \n-    fn encode_variances_of(&mut self, def_id: DefId) {\n-        debug!(\"EncodeContext::encode_variances_of({:?})\", def_id);\n-        record!(self.tables.variances[def_id] <- self.tcx.variances_of(def_id));\n-    }\n-\n     fn encode_item_type(&mut self, def_id: DefId) {\n         debug!(\"EncodeContext::encode_item_type({:?})\", def_id);\n         record!(self.tables.ty[def_id] <- self.tcx.type_of(def_id));\n@@ -913,8 +947,6 @@ impl EncodeContext<'a, 'tcx> {\n             if let Some(ctor_def_id) = variant.ctor_def_id {\n                 record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(ctor_def_id));\n             }\n-            // FIXME(eddyb) is this ever used?\n-            self.encode_variances_of(def_id);\n         }\n         self.encode_generics(def_id);\n         self.encode_explicit_predicates(def_id);\n@@ -939,7 +971,6 @@ impl EncodeContext<'a, 'tcx> {\n         self.encode_item_type(def_id);\n         if variant.ctor_kind == CtorKind::Fn {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n-            self.encode_variances_of(def_id);\n         }\n         self.encode_generics(def_id);\n         self.encode_explicit_predicates(def_id);\n@@ -1023,7 +1054,6 @@ impl EncodeContext<'a, 'tcx> {\n         self.encode_item_type(def_id);\n         if variant.ctor_kind == CtorKind::Fn {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n-            self.encode_variances_of(def_id);\n         }\n         self.encode_generics(def_id);\n         self.encode_explicit_predicates(def_id);\n@@ -1128,7 +1158,6 @@ impl EncodeContext<'a, 'tcx> {\n         }\n         if trait_item.kind == ty::AssocKind::Fn {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n-            self.encode_variances_of(def_id);\n         }\n         self.encode_generics(def_id);\n         self.encode_explicit_predicates(def_id);\n@@ -1189,7 +1218,6 @@ impl EncodeContext<'a, 'tcx> {\n         self.encode_item_type(def_id);\n         if impl_item.kind == ty::AssocKind::Fn {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n-            self.encode_variances_of(def_id);\n         }\n         self.encode_generics(def_id);\n         self.encode_explicit_predicates(def_id);\n@@ -1458,13 +1486,6 @@ impl EncodeContext<'a, 'tcx> {\n                 record!(self.tables.impl_trait_ref[def_id] <- trait_ref);\n             }\n         }\n-        match item.kind {\n-            hir::ItemKind::Enum(..)\n-            | hir::ItemKind::Struct(..)\n-            | hir::ItemKind::Union(..)\n-            | hir::ItemKind::Fn(..) => self.encode_variances_of(def_id),\n-            _ => {}\n-        }\n         match item.kind {\n             hir::ItemKind::Static(..)\n             | hir::ItemKind::Const(..)\n@@ -1822,7 +1843,6 @@ impl EncodeContext<'a, 'tcx> {\n         self.encode_item_type(def_id);\n         if let hir::ForeignItemKind::Fn(..) = nitem.kind {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n-            self.encode_variances_of(def_id);\n         }\n         self.encode_generics(def_id);\n         self.encode_explicit_predicates(def_id);"}]}