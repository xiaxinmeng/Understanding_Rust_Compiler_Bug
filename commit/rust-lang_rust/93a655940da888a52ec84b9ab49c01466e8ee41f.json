{"sha": "93a655940da888a52ec84b9ab49c01466e8ee41f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzYTY1NTk0MGRhODg4YTUyZWM4NGI5YWI0OWMwMTQ2NmU4ZWU0MWY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas@schievink.net", "date": "2015-12-24T20:30:27Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas@schievink.net", "date": "2015-12-24T20:30:27Z"}, "message": "ast_map => hir_map", "tree": {"sha": "56f5207ad0235a7ed4fe71a6719266039e87c315", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56f5207ad0235a7ed4fe71a6719266039e87c315"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93a655940da888a52ec84b9ab49c01466e8ee41f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93a655940da888a52ec84b9ab49c01466e8ee41f", "html_url": "https://github.com/rust-lang/rust/commit/93a655940da888a52ec84b9ab49c01466e8ee41f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93a655940da888a52ec84b9ab49c01466e8ee41f/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ce1dafd1d58852a88f38a0f63cb11236a7470cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ce1dafd1d58852a88f38a0f63cb11236a7470cb", "html_url": "https://github.com/rust-lang/rust/commit/4ce1dafd1d58852a88f38a0f63cb11236a7470cb"}], "stats": {"total": 42, "additions": 20, "deletions": 22}, "files": [{"sha": "f6dce8af435c90a15b00eea02d0700db1687d41e", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/93a655940da888a52ec84b9ab49c01466e8ee41f/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93a655940da888a52ec84b9ab49c01466e8ee41f/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=93a655940da888a52ec84b9ab49c01466e8ee41f", "patch": "@@ -121,7 +121,7 @@ pub fn compile_input(sess: Session,\n         }\n \n         let arenas = ty::CtxtArenas::new();\n-        let ast_map = make_map(&sess, &mut hir_forest);\n+        let hir_map = make_map(&sess, &mut hir_forest);\n \n         write_out_deps(&sess, &outputs, &id);\n \n@@ -130,9 +130,9 @@ pub fn compile_input(sess: Session,\n                                 CompileState::state_after_write_deps(input,\n                                                                      &sess,\n                                                                      outdir,\n-                                                                     &ast_map,\n+                                                                     &hir_map,\n                                                                      &expanded_crate,\n-                                                                     &ast_map.krate(),\n+                                                                     &hir_map.krate(),\n                                                                      &id[..],\n                                                                      &lcx));\n \n@@ -146,7 +146,7 @@ pub fn compile_input(sess: Session,\n \n         phase_3_run_analysis_passes(&sess,\n                                     &cstore,\n-                                    ast_map,\n+                                    hir_map,\n                                     &arenas,\n                                     &id,\n                                     control.make_glob_map,\n@@ -341,15 +341,15 @@ impl<'a, 'ast, 'tcx> CompileState<'a, 'ast, 'tcx> {\n     fn state_after_write_deps(input: &'a Input,\n                               session: &'a Session,\n                               out_dir: &'a Option<PathBuf>,\n-                              ast_map: &'a hir_map::Map<'ast>,\n+                              hir_map: &'a hir_map::Map<'ast>,\n                               krate: &'a ast::Crate,\n                               hir_crate: &'a hir::Crate,\n                               crate_name: &'a str,\n                               lcx: &'a LoweringContext<'a>)\n                               -> CompileState<'a, 'ast, 'tcx> {\n         CompileState {\n             crate_name: Some(crate_name),\n-            ast_map: Some(ast_map),\n+            ast_map: Some(hir_map),\n             krate: Some(krate),\n             hir_crate: Some(hir_crate),\n             lcx: Some(lcx),\n@@ -670,22 +670,20 @@ pub fn assign_node_ids(sess: &Session, krate: ast::Crate) -> ast::Crate {\n }\n \n pub fn make_map<'ast>(sess: &Session,\n-                      forest: &'ast mut front::map::Forest)\n-                      -> front::map::Map<'ast> {\n-    // Construct the 'ast'-map\n-    let map = time(sess.time_passes(),\n-                   \"indexing hir\",\n-                   move || front::map::map_crate(forest));\n-\n-    map\n+                      forest: &'ast mut hir_map::Forest)\n+                      -> hir_map::Map<'ast> {\n+    // Construct the HIR map\n+    time(sess.time_passes(),\n+         \"indexing hir\",\n+         move || hir_map::map_crate(forest))\n }\n \n /// Run the resolution, typechecking, region checking and other\n /// miscellaneous analysis passes on the crate. Return various\n /// structures carrying the results of the analysis.\n pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n                                                cstore: &CStore,\n-                                               ast_map: front::map::Map<'tcx>,\n+                                               hir_map: hir_map::Map<'tcx>,\n                                                arenas: &'tcx ty::CtxtArenas<'tcx>,\n                                                name: &str,\n                                                make_glob_map: resolve::MakeGlobMap,\n@@ -694,15 +692,15 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n     where F: for<'a> FnOnce(&'a ty::ctxt<'tcx>, MirMap<'tcx>, ty::CrateAnalysis) -> R\n {\n     let time_passes = sess.time_passes();\n-    let krate = ast_map.krate();\n+    let krate = hir_map.krate();\n \n     time(time_passes,\n          \"external crate/lib resolution\",\n-         || LocalCrateReader::new(sess, cstore, &ast_map).read_crates(krate));\n+         || LocalCrateReader::new(sess, cstore, &hir_map).read_crates(krate));\n \n     let lang_items = time(time_passes,\n                           \"language item collection\",\n-                          || middle::lang_items::collect_language_items(&sess, &ast_map));\n+                          || middle::lang_items::collect_language_items(&sess, &hir_map));\n \n     let resolve::CrateMap {\n         def_map,\n@@ -713,15 +711,15 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n         glob_map,\n     } = time(time_passes,\n              \"resolution\",\n-             || resolve::resolve_crate(sess, &ast_map, make_glob_map));\n+             || resolve::resolve_crate(sess, &hir_map, make_glob_map));\n \n     let named_region_map = time(time_passes,\n                                 \"lifetime resolution\",\n                                 || middle::resolve_lifetime::krate(sess, krate, &def_map.borrow()));\n \n     time(time_passes,\n          \"looking for entry point\",\n-         || middle::entry::find_entry_point(sess, &ast_map));\n+         || middle::entry::find_entry_point(sess, &hir_map));\n \n     sess.plugin_registrar_fn.set(time(time_passes, \"looking for plugin registrar\", || {\n         plugin::build::find_plugin_registrar(sess.diagnostic(), krate)\n@@ -737,13 +735,13 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n \n     time(time_passes,\n          \"static item recursion checking\",\n-         || middle::check_static_recursion::check_crate(sess, krate, &def_map.borrow(), &ast_map));\n+         || middle::check_static_recursion::check_crate(sess, krate, &def_map.borrow(), &hir_map));\n \n     ty::ctxt::create_and_enter(sess,\n                                arenas,\n                                def_map,\n                                named_region_map,\n-                               ast_map,\n+                               hir_map,\n                                freevars,\n                                region_map,\n                                lang_items,"}]}