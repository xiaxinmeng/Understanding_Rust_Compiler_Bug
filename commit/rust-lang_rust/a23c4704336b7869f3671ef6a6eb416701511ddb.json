{"sha": "a23c4704336b7869f3671ef6a6eb416701511ddb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyM2M0NzA0MzM2Yjc4NjlmMzY3MWVmNmE2ZWI0MTY3MDE1MTFkZGI=", "commit": {"author": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2016-12-01T23:57:16Z"}, "committer": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2016-12-02T00:56:49Z"}, "message": "Tighten up error checking of library renames.", "tree": {"sha": "009df1b2f726ea4c29cd8e4cd6ae9e2d4413d0fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/009df1b2f726ea4c29cd8e4cd6ae9e2d4413d0fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a23c4704336b7869f3671ef6a6eb416701511ddb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a23c4704336b7869f3671ef6a6eb416701511ddb", "html_url": "https://github.com/rust-lang/rust/commit/a23c4704336b7869f3671ef6a6eb416701511ddb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a23c4704336b7869f3671ef6a6eb416701511ddb/comments", "author": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9a6f8c8eddba12c72a8caa73bdb236f089bda3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9a6f8c8eddba12c72a8caa73bdb236f089bda3c", "html_url": "https://github.com/rust-lang/rust/commit/a9a6f8c8eddba12c72a8caa73bdb236f089bda3c"}], "stats": {"total": 107, "additions": 85, "deletions": 22}, "files": [{"sha": "e46162f39d98ac0d84d756a93790f008b3a11c94", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 37, "deletions": 5, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a23c4704336b7869f3671ef6a6eb416701511ddb/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a23c4704336b7869f3671ef6a6eb416701511ddb/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=a23c4704336b7869f3671ef6a6eb416701511ddb", "patch": "@@ -946,19 +946,51 @@ impl<'a> middle::cstore::CrateLoader for CrateLoader<'a> {\n         }\n \n         // Process libs passed on the command line\n+        // First, check for errors\n+        let mut renames = FxHashSet();\n+        for &(ref name, ref new_name, _) in &self.sess.opts.libs {\n+            if let &Some(ref new_name) = new_name {\n+                if new_name.is_empty() {\n+                    self.sess.err(\n+                        &format!(\"an empty renaming target was specified for library `{}`\",name));\n+                } else if !self.cstore.get_used_libraries().borrow().iter()\n+                                                           .any(|lib| lib.name == name as &str) {\n+                    self.sess.err(&format!(\"renaming of the library `{}` was specified, \\\n+                                            however this crate contains no #[link(...)] \\\n+                                            attributes referencing this library.\", name));\n+                } else if renames.contains(name) {\n+                    self.sess.err(&format!(\"multiple renamings were specified for library `{}` .\",\n+                                            name));\n+                } else {\n+                    renames.insert(name);\n+                }\n+            }\n+        }\n+        // Update kind and, optionally, the name of all native libaries\n+        // (there may be more than one) with the specified name.\n         for &(ref name, ref new_name, kind) in &self.sess.opts.libs {\n-            // First, try to update existing lib(s) added via #[link(...)]\n-            let new_name = new_name.as_ref().map(|s| &**s); // &Option<String> -> Option<&str>\n-            if !self.cstore.update_used_library(name, new_name, kind) {\n+            let mut found = false;\n+            for lib in self.cstore.get_used_libraries().borrow_mut().iter_mut() {\n+                if lib.name == name as &str {\n+                    lib.kind = kind;\n+                    if let &Some(ref new_name) = new_name {\n+                        lib.name = Symbol::intern(new_name);\n+                    }\n+                    found = true;\n+                    break;\n+                }\n+            }\n+            if !found {\n                 // Add if not found\n+                let new_name = new_name.as_ref().map(|s| &**s); // &Option<String> -> Option<&str>\n                 let lib = NativeLibrary {\n-                    name: Symbol::intern(name),\n+                    name: Symbol::intern(new_name.unwrap_or(name)),\n                     kind: kind,\n                     cfg: None,\n                     foreign_items: Vec::new(),\n                 };\n                 register_native_lib(self.sess, self.cstore, None, lib);\n-             }\n+            }\n         }\n         self.register_statically_included_foreign_items();\n         self.register_dllimport_foreign_items();"}, {"sha": "279ef5bfb727614fbab91821a4afbb611d814518", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a23c4704336b7869f3671ef6a6eb416701511ddb/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a23c4704336b7869f3671ef6a6eb416701511ddb/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=a23c4704336b7869f3671ef6a6eb416701511ddb", "patch": "@@ -232,23 +232,6 @@ impl CStore {\n         self.used_libraries.borrow_mut().push(lib);\n     }\n \n-    // Update kind and, optionally, the name of all native libaries (there may be more than one)\n-    // with the specified name.\n-    pub fn update_used_library(&self, name: &str, new_name: Option<&str>,\n-                               new_kind: NativeLibraryKind) -> bool {\n-        let mut found = false;\n-        for item in self.used_libraries.borrow_mut().iter_mut() {\n-            if item.name == name {\n-                item.kind = new_kind;\n-                if let Some(new_name) = new_name {\n-                    item.name = Symbol::intern(new_name);\n-                }\n-                found = true;\n-            }\n-        }\n-        found\n-    }\n-\n     pub fn get_used_libraries(&self) -> &RefCell<Vec<NativeLibrary>> {\n         &self.used_libraries\n     }"}, {"sha": "810efdedfd6c693e9a2f9c2eaccb7e7056c70e4a", "filename": "src/test/compile-fail/rfc1717/missing-link-attr.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a23c4704336b7869f3671ef6a6eb416701511ddb/src%2Ftest%2Fcompile-fail%2Frfc1717%2Fmissing-link-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a23c4704336b7869f3671ef6a6eb416701511ddb/src%2Ftest%2Fcompile-fail%2Frfc1717%2Fmissing-link-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc1717%2Fmissing-link-attr.rs?ref=a23c4704336b7869f3671ef6a6eb416701511ddb", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -l foo:bar\n+// error-pattern: renaming of the library `foo` was specified\n+\n+#![crate_type = \"lib\"]"}, {"sha": "e75c1a14b24d3ccd8485d6e532bf8f7436ada545", "filename": "src/test/compile-fail/rfc1717/multiple-renames.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a23c4704336b7869f3671ef6a6eb416701511ddb/src%2Ftest%2Fcompile-fail%2Frfc1717%2Fmultiple-renames.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a23c4704336b7869f3671ef6a6eb416701511ddb/src%2Ftest%2Fcompile-fail%2Frfc1717%2Fmultiple-renames.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc1717%2Fmultiple-renames.rs?ref=a23c4704336b7869f3671ef6a6eb416701511ddb", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -l foo:bar -l foo:baz\n+// error-pattern: multiple renamings were specified for library\n+\n+#![crate_type = \"lib\"]\n+\n+#[link(name = \"foo\")]\n+extern \"C\" {}"}, {"sha": "ab8c238bc27a38cdbdbce7c4d81ef3550508190a", "filename": "src/test/compile-fail/rfc1717/rename-to-empty.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a23c4704336b7869f3671ef6a6eb416701511ddb/src%2Ftest%2Fcompile-fail%2Frfc1717%2Frename-to-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a23c4704336b7869f3671ef6a6eb416701511ddb/src%2Ftest%2Fcompile-fail%2Frfc1717%2Frename-to-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc1717%2Frename-to-empty.rs?ref=a23c4704336b7869f3671ef6a6eb416701511ddb", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -l foo:\n+// error-pattern: an empty renaming target was specified for library\n+\n+#![crate_type = \"lib\"]\n+\n+#[link(name = \"foo\")]\n+extern \"C\" {}"}]}