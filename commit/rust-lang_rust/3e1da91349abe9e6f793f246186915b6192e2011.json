{"sha": "3e1da91349abe9e6f793f246186915b6192e2011", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlMWRhOTEzNDlhYmU5ZTZmNzkzZjI0NjE4NjkxNWI2MTkyZTIwMTE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-19T05:10:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-19T05:10:10Z"}, "message": "Rollup merge of #65576 - sunfishcode:main-needs-argc-argv, r=alexcrichton\n\nDon't add `argc` and `argv` arguments to `main` on WASI.\n\nAdd a target setting to allow targets to specify whether the generated\n`main` function should be passed `argc` and `argv` arguments. Set it\nto false on wasm32-wasi, since WASI's `args::args()` calls into the\nWASI APIs itself. This will allow the WASI toolchain to avoid linking\nand running command-line argument initialization code when the arguments\naren't actually needed.", "tree": {"sha": "e79b95fd297e775f68d88839f20dd8c3dfe67ed8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e79b95fd297e775f68d88839f20dd8c3dfe67ed8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e1da91349abe9e6f793f246186915b6192e2011", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdqpqyCRBK7hj4Ov3rIwAAdHIIAK33GLR1bW2J1+eeiU4kosA2\nUALiaRX+AHQzvAWK8KG1b9rw9/kPR2tXS0+KTiLKmQih1QY4swErWAC/U9hh83N0\n5GVxdEqU++0BlW9o1fhZRGssJayXS808YURE7abPuaMv+wEYefeTqQs10HQIBiUU\nhfPuCrHyA/uZWRIVf7X+r7PebldaD4QxyK1EoA0Q5S8vbOiomDBAhisZK5B09wxH\nOiHX7t5V8H2sN8youB90YMSLd5jRARaqBV7om44TO8SLpuXFtJtkArW8jDY4/NKv\naROcvEPxitI9h2OsPf6oUJNfN4R7gVAJE2Yt0vx6AuSZ/NZTzsT53JvFAwG4xec=\n=o2KZ\n-----END PGP SIGNATURE-----\n", "payload": "tree e79b95fd297e775f68d88839f20dd8c3dfe67ed8\nparent ed4c2c2a5f869dbb47d3079437f2f1e1a0aab027\nparent b25e3238c76a4df767b4a929011ed47c479ed115\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1571461810 +0200\ncommitter GitHub <noreply@github.com> 1571461810 +0200\n\nRollup merge of #65576 - sunfishcode:main-needs-argc-argv, r=alexcrichton\n\nDon't add `argc` and `argv` arguments to `main` on WASI.\n\nAdd a target setting to allow targets to specify whether the generated\n`main` function should be passed `argc` and `argv` arguments. Set it\nto false on wasm32-wasi, since WASI's `args::args()` calls into the\nWASI APIs itself. This will allow the WASI toolchain to avoid linking\nand running command-line argument initialization code when the arguments\naren't actually needed.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e1da91349abe9e6f793f246186915b6192e2011", "html_url": "https://github.com/rust-lang/rust/commit/3e1da91349abe9e6f793f246186915b6192e2011", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e1da91349abe9e6f793f246186915b6192e2011/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed4c2c2a5f869dbb47d3079437f2f1e1a0aab027", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed4c2c2a5f869dbb47d3079437f2f1e1a0aab027", "html_url": "https://github.com/rust-lang/rust/commit/ed4c2c2a5f869dbb47d3079437f2f1e1a0aab027"}, {"sha": "b25e3238c76a4df767b4a929011ed47c479ed115", "url": "https://api.github.com/repos/rust-lang/rust/commits/b25e3238c76a4df767b4a929011ed47c479ed115", "html_url": "https://github.com/rust-lang/rust/commit/b25e3238c76a4df767b4a929011ed47c479ed115"}], "stats": {"total": 35, "additions": 28, "deletions": 7}, "files": [{"sha": "546972903e9b5fe9c9a92e4292cd33246b5d91fa", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3e1da91349abe9e6f793f246186915b6192e2011/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e1da91349abe9e6f793f246186915b6192e2011/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=3e1da91349abe9e6f793f246186915b6192e2011", "patch": "@@ -414,8 +414,11 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(cx: &'\n         rust_main_def_id: DefId,\n         use_start_lang_item: bool,\n     ) {\n-        let llfty =\n-            cx.type_func(&[cx.type_int(), cx.type_ptr_to(cx.type_i8p())], cx.type_int());\n+        let llfty = if cx.sess().target.target.options.main_needs_argc_argv {\n+            cx.type_func(&[cx.type_int(), cx.type_ptr_to(cx.type_i8p())], cx.type_int())\n+        } else {\n+            cx.type_func(&[], cx.type_int())\n+        };\n \n         let main_ret_ty = cx.tcx().fn_sig(rust_main_def_id).output();\n         // Given that `main()` has no arguments,\n@@ -445,11 +448,19 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(cx: &'\n \n         bx.insert_reference_to_gdb_debug_scripts_section_global();\n \n-        // Params from native main() used as args for rust start function\n-        let param_argc = bx.get_param(0);\n-        let param_argv = bx.get_param(1);\n-        let arg_argc = bx.intcast(param_argc, cx.type_isize(), true);\n-        let arg_argv = param_argv;\n+        let (arg_argc, arg_argv) = if cx.sess().target.target.options.main_needs_argc_argv {\n+            // Params from native main() used as args for rust start function\n+            let param_argc = bx.get_param(0);\n+            let param_argv = bx.get_param(1);\n+            let arg_argc = bx.intcast(param_argc, cx.type_isize(), true);\n+            let arg_argv = param_argv;\n+            (arg_argc, arg_argv)\n+        } else {\n+            // The Rust start function doesn't need argc and argv, so just pass zeros.\n+            let arg_argc = bx.const_int(cx.type_int(), 0);\n+            let arg_argv = bx.const_null(cx.type_ptr_to(cx.type_i8p()));\n+            (arg_argc, arg_argv)\n+        };\n \n         let (start_fn, args) = if use_start_lang_item {\n             let start_def_id = cx.tcx().require_lang_item(StartFnLangItem, None);"}, {"sha": "c5277c4f90e7ae42e908715938c4b79afbcebbcf", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e1da91349abe9e6f793f246186915b6192e2011/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e1da91349abe9e6f793f246186915b6192e2011/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=3e1da91349abe9e6f793f246186915b6192e2011", "patch": "@@ -691,6 +691,9 @@ pub struct TargetOptions {\n     /// defined in libgcc. If this option is enabled, the target must provide\n     /// `eh_unwind_resume` lang item.\n     pub custom_unwind_resume: bool,\n+    /// Whether the runtime startup code requires the `main` function be passed\n+    /// `argc` and `argv` values.\n+    pub main_needs_argc_argv: bool,\n \n     /// Flag indicating whether ELF TLS (e.g., #[thread_local]) is available for\n     /// this target.\n@@ -849,6 +852,7 @@ impl Default for TargetOptions {\n             link_env_remove: Vec::new(),\n             archive_format: \"gnu\".to_string(),\n             custom_unwind_resume: false,\n+            main_needs_argc_argv: true,\n             allow_asm: true,\n             has_elf_tls: false,\n             obj_is_bitcode: false,\n@@ -1159,6 +1163,7 @@ impl Target {\n         key!(archive_format);\n         key!(allow_asm, bool);\n         key!(custom_unwind_resume, bool);\n+        key!(main_needs_argc_argv, bool);\n         key!(has_elf_tls, bool);\n         key!(obj_is_bitcode, bool);\n         key!(no_integrated_as, bool);\n@@ -1376,6 +1381,7 @@ impl ToJson for Target {\n         target_option_val!(archive_format);\n         target_option_val!(allow_asm);\n         target_option_val!(custom_unwind_resume);\n+        target_option_val!(main_needs_argc_argv);\n         target_option_val!(has_elf_tls);\n         target_option_val!(obj_is_bitcode);\n         target_option_val!(no_integrated_as);"}, {"sha": "d5ef230dcf7d23c5da16e34a71684249c6be4bc5", "filename": "src/librustc_target/spec/wasm32_wasi.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e1da91349abe9e6f793f246186915b6192e2011/src%2Flibrustc_target%2Fspec%2Fwasm32_wasi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e1da91349abe9e6f793f246186915b6192e2011/src%2Flibrustc_target%2Fspec%2Fwasm32_wasi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwasm32_wasi.rs?ref=3e1da91349abe9e6f793f246186915b6192e2011", "patch": "@@ -101,6 +101,10 @@ pub fn target() -> Result<Target, String> {\n     // without a main function.\n     options.crt_static_allows_dylibs = true;\n \n+    // WASI's `sys::args::init` function ignores its arguments; instead,\n+    // `args::args()` makes the WASI API calls itself.\n+    options.main_needs_argc_argv = false;\n+\n     Ok(Target {\n         llvm_target: \"wasm32-wasi\".to_string(),\n         target_endian: \"little\".to_string(),"}]}