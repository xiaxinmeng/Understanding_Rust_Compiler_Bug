{"sha": "9666d31bcf57190864fc61a95d2dab7ae3e51cdf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2NjZkMzFiY2Y1NzE5MDg2NGZjNjFhOTVkMmRhYjdhZTNlNTFjZGY=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2020-04-16T12:34:37Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2020-04-16T12:34:37Z"}, "message": "Respond to code review feedback\n\n- Remove reads of indirect `Place`s\n- Add comments explaining what the algorithm does", "tree": {"sha": "217a0c85e1b7855b917bc7d3564012eadeca6233", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/217a0c85e1b7855b917bc7d3564012eadeca6233"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9666d31bcf57190864fc61a95d2dab7ae3e51cdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9666d31bcf57190864fc61a95d2dab7ae3e51cdf", "html_url": "https://github.com/rust-lang/rust/commit/9666d31bcf57190864fc61a95d2dab7ae3e51cdf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9666d31bcf57190864fc61a95d2dab7ae3e51cdf/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da8f3bbf32e6a67b1c1370465592776a1d999ad0", "url": "https://api.github.com/repos/rust-lang/rust/commits/da8f3bbf32e6a67b1c1370465592776a1d999ad0", "html_url": "https://github.com/rust-lang/rust/commit/da8f3bbf32e6a67b1c1370465592776a1d999ad0"}], "stats": {"total": 10, "additions": 9, "deletions": 1}, "files": [{"sha": "c4971b2565511d17c7e5e89af74ba69666c8c696", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9666d31bcf57190864fc61a95d2dab7ae3e51cdf/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9666d31bcf57190864fc61a95d2dab7ae3e51cdf/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=9666d31bcf57190864fc61a95d2dab7ae3e51cdf", "patch": "@@ -307,6 +307,8 @@ impl<'tcx> MirPass<'tcx> for SimplifyLocals {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>) {\n         trace!(\"running SimplifyLocals on {:?}\", source);\n \n+        // First, we're going to get a count of *actual* uses for every `Local`.\n+        // Take a look at `DeclMarker::visit_local()` to see exactly what is ignored.\n         let mut used_locals = {\n             let read_only_cache = read_only!(body);\n             let mut marker = DeclMarker::new(body);\n@@ -317,6 +319,11 @@ impl<'tcx> MirPass<'tcx> for SimplifyLocals {\n \n         let arg_count = body.arg_count;\n \n+        // Next, we're going to remove any `Local` with zero actual uses. When we remove those\n+        // `Locals`, we're also going to subtract any uses of other `Locals` from the `used_locals`\n+        // count. For example, if we removed `_2 = discriminant(_1)`, then we'll subtract one from\n+        // `use_counts[_1]`. That in turn might make `_1` unused, so we loop until we hit a\n+        // fixedpoint where there are no more unused locals.\n         loop {\n             let mut remove_statements = RemoveStatements::new(&mut used_locals, arg_count, tcx);\n             remove_statements.visit_body(body);\n@@ -326,6 +333,7 @@ impl<'tcx> MirPass<'tcx> for SimplifyLocals {\n             }\n         }\n \n+        // Finally, we'll actually do the work of shrinking `body.local_decls` and remapping the `Local`s.\n         let map = make_local_map(&mut body.local_decls, used_locals, arg_count);\n \n         // Only bother running the `LocalUpdater` if we actually found locals to remove.\n@@ -402,7 +410,7 @@ impl<'a, 'tcx> Visitor<'tcx> for DeclMarker<'a, 'tcx> {\n \n                 fn can_skip_operand(o: &Operand<'_>) -> bool {\n                     match o {\n-                        Operand::Copy(p) | Operand::Move(p) => !p.is_indirect(),\n+                        Operand::Copy(_) | Operand::Move(_) => true,\n                         Operand::Constant(c) => can_skip_constant(c.literal),\n                     }\n                 }"}]}