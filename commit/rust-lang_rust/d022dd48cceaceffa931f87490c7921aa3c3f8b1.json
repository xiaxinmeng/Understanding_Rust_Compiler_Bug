{"sha": "d022dd48cceaceffa931f87490c7921aa3c3f8b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwMjJkZDQ4Y2NlYWNlZmZhOTMxZjg3NDkwYzc5MjFhYTNjM2Y4YjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-24T12:05:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-24T12:05:47Z"}, "message": "Auto merge of #51023 - kennytm:rollup, r=kennytm\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #50864 (Add NetBSD/arm target specs)\n - #50956 (rust-gdb: work around the re-used -d argument in cgdb)\n - #50964 (Make sure that queries have predictable symbol names.)\n - #50965 (Update LLVM to pull in another wasm fix)\n - #50972 (Add -Z no-parallel-llvm flag)\n - #50979 (Fix span for type-only arguments)\n - #50981 (Shrink `LiveNode`.)\n - #50995 (move type out of unsafe block)\n - #51011 ( rustdoc: hide macro export statements from docs)\n\nFailed merges:", "tree": {"sha": "013703f4727458d33748f5aca0fa05aacec34bc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/013703f4727458d33748f5aca0fa05aacec34bc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d022dd48cceaceffa931f87490c7921aa3c3f8b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d022dd48cceaceffa931f87490c7921aa3c3f8b1", "html_url": "https://github.com/rust-lang/rust/commit/d022dd48cceaceffa931f87490c7921aa3c3f8b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d022dd48cceaceffa931f87490c7921aa3c3f8b1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a76bff86e6f4b56b2c3fd1704ce8535ed207dd78", "url": "https://api.github.com/repos/rust-lang/rust/commits/a76bff86e6f4b56b2c3fd1704ce8535ed207dd78", "html_url": "https://github.com/rust-lang/rust/commit/a76bff86e6f4b56b2c3fd1704ce8535ed207dd78"}, {"sha": "98606cfe126b1ac7b68e25814c3e20c6b0b3b17c", "url": "https://api.github.com/repos/rust-lang/rust/commits/98606cfe126b1ac7b68e25814c3e20c6b0b3b17c", "html_url": "https://github.com/rust-lang/rust/commit/98606cfe126b1ac7b68e25814c3e20c6b0b3b17c"}], "stats": {"total": 182, "additions": 137, "deletions": 45}, "files": [{"sha": "93292c658bad251f2d2874ef8bd60e4b5183863e", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d022dd48cceaceffa931f87490c7921aa3c3f8b1/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d022dd48cceaceffa931f87490c7921aa3c3f8b1/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=d022dd48cceaceffa931f87490c7921aa3c3f8b1", "patch": "@@ -596,8 +596,10 @@ impl Step for Openssl {\n             \"arm-linux-androideabi\" => \"android\",\n             \"arm-unknown-linux-gnueabi\" => \"linux-armv4\",\n             \"arm-unknown-linux-gnueabihf\" => \"linux-armv4\",\n+            \"armv6-unknown-netbsd-eabihf\" => \"BSD-generic32\",\n             \"armv7-linux-androideabi\" => \"android-armv7\",\n             \"armv7-unknown-linux-gnueabihf\" => \"linux-armv4\",\n+            \"armv7-unknown-netbsd-eabihf\" => \"BSD-generic32\",\n             \"i586-unknown-linux-gnu\" => \"linux-elf\",\n             \"i586-unknown-linux-musl\" => \"linux-elf\",\n             \"i686-apple-darwin\" => \"darwin-i386-cc\","}, {"sha": "6835d6aa90874b7b7372dc8d68e557246a644696", "filename": "src/etc/rust-gdb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d022dd48cceaceffa931f87490c7921aa3c3f8b1/src%2Fetc%2Frust-gdb", "raw_url": "https://github.com/rust-lang/rust/raw/d022dd48cceaceffa931f87490c7921aa3c3f8b1/src%2Fetc%2Frust-gdb", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Frust-gdb?ref=d022dd48cceaceffa931f87490c7921aa3c3f8b1", "patch": "@@ -21,6 +21,6 @@ GDB_PYTHON_MODULE_DIRECTORY=\"$RUSTC_SYSROOT/lib/rustlib/etc\"\n # different/specific command (defaults to `gdb`).\n RUST_GDB=\"${RUST_GDB:-gdb}\"\n PYTHONPATH=\"$PYTHONPATH:$GDB_PYTHON_MODULE_DIRECTORY\" ${RUST_GDB} \\\n-  -d \"$GDB_PYTHON_MODULE_DIRECTORY\" \\\n+  --directory=\"$GDB_PYTHON_MODULE_DIRECTORY\" \\\n   -iex \"add-auto-load-safe-path $GDB_PYTHON_MODULE_DIRECTORY\" \\\n   \"$@\""}, {"sha": "13d808ede5f65727408b92cc04a8ab3ebd11ce3b", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d022dd48cceaceffa931f87490c7921aa3c3f8b1/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d022dd48cceaceffa931f87490c7921aa3c3f8b1/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=d022dd48cceaceffa931f87490c7921aa3c3f8b1", "patch": "@@ -2246,13 +2246,11 @@ impl str {\n     #[inline(always)]\n     #[rustc_const_unstable(feature=\"const_str_as_bytes\")]\n     pub const fn as_bytes(&self) -> &[u8] {\n-        unsafe {\n-            union Slices<'a> {\n-                str: &'a str,\n-                slice: &'a [u8],\n-            }\n-            Slices { str: self }.slice\n+        union Slices<'a> {\n+            str: &'a str,\n+            slice: &'a [u8],\n         }\n+        unsafe { Slices { str: self }.slice }\n     }\n \n     /// Converts a mutable string slice to a mutable byte slice. To convert the"}, {"sha": "06c264725a9bb3e178fc4d53a497726bfa0be914", "filename": "src/libpanic_unwind/gcc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d022dd48cceaceffa931f87490c7921aa3c3f8b1/src%2Flibpanic_unwind%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d022dd48cceaceffa931f87490c7921aa3c3f8b1/src%2Flibpanic_unwind%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fgcc.rs?ref=d022dd48cceaceffa931f87490c7921aa3c3f8b1", "patch": "@@ -143,7 +143,7 @@ const UNWIND_DATA_REG: (i32, i32) = (24, 25); // I0, I1\n // The personality routine for most of our targets, except ARM, which has a slightly different ABI\n // (however, iOS goes here as it uses SjLj unwinding).  Also, the 64-bit Windows implementation\n // lives in seh64_gnu.rs\n-#[cfg(all(any(target_os = \"ios\", not(target_arch = \"arm\"))))]\n+#[cfg(all(any(target_os = \"ios\", target_os = \"netbsd\", not(target_arch = \"arm\"))))]\n #[lang = \"eh_personality\"]\n #[no_mangle]\n #[allow(unused)]\n@@ -184,7 +184,7 @@ unsafe extern \"C\" fn rust_eh_personality(version: c_int,\n \n // ARM EHABI personality routine.\n // http://infocenter.arm.com/help/topic/com.arm.doc.ihi0038b/IHI0038B_ehabi.pdf\n-#[cfg(all(target_arch = \"arm\", not(target_os = \"ios\")))]\n+#[cfg(all(target_arch = \"arm\", not(target_os = \"ios\"), not(target_os = \"netbsd\")))]\n #[lang = \"eh_personality\"]\n #[no_mangle]\n unsafe extern \"C\" fn rust_eh_personality(state: uw::_Unwind_State,"}, {"sha": "ad39f48972f69bff28969f87140d6aa8573f3243", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d022dd48cceaceffa931f87490c7921aa3c3f8b1/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d022dd48cceaceffa931f87490c7921aa3c3f8b1/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=d022dd48cceaceffa931f87490c7921aa3c3f8b1", "patch": "@@ -51,8 +51,8 @@\n //! enclosing function.  On the way down the tree, it identifies those AST\n //! nodes and variable IDs that will be needed for the liveness analysis\n //! and assigns them contiguous IDs.  The liveness id for an AST node is\n-//! called a `live_node` (it's a newtype'd usize) and the id for a variable\n-//! is called a `variable` (another newtype'd usize).\n+//! called a `live_node` (it's a newtype'd u32) and the id for a variable\n+//! is called a `variable` (another newtype'd u32).\n //!\n //! On the way back up the tree, as we are about to exit from a function\n //! declaration we allocate a `liveness` instance.  Now that we know\n@@ -112,7 +112,7 @@ use lint;\n use util::nodemap::{NodeMap, NodeSet};\n \n use std::collections::VecDeque;\n-use std::{fmt, usize};\n+use std::{fmt, u32};\n use std::io::prelude::*;\n use std::io;\n use std::rc::Rc;\n@@ -134,23 +134,17 @@ enum LoopKind<'a> {\n }\n \n #[derive(Copy, Clone, PartialEq)]\n-struct Variable(usize);\n+struct Variable(u32);\n \n-#[derive(Copy, PartialEq)]\n-struct LiveNode(usize);\n+#[derive(Copy, Clone, PartialEq)]\n+struct LiveNode(u32);\n \n impl Variable {\n-    fn get(&self) -> usize { let Variable(v) = *self; v }\n+    fn get(&self) -> usize { self.0 as usize }\n }\n \n impl LiveNode {\n-    fn get(&self) -> usize { let LiveNode(v) = *self; v }\n-}\n-\n-impl Clone for LiveNode {\n-    fn clone(&self) -> LiveNode {\n-        LiveNode(self.get())\n-    }\n+    fn get(&self) -> usize { self.0 as usize }\n }\n \n #[derive(Copy, Clone, PartialEq, Debug)]\n@@ -233,11 +227,11 @@ impl fmt::Debug for Variable {\n \n impl LiveNode {\n     fn is_valid(&self) -> bool {\n-        self.get() != usize::MAX\n+        self.0 != u32::MAX\n     }\n }\n \n-fn invalid_node() -> LiveNode { LiveNode(usize::MAX) }\n+fn invalid_node() -> LiveNode { LiveNode(u32::MAX) }\n \n struct CaptureInfo {\n     ln: LiveNode,\n@@ -285,7 +279,7 @@ impl<'a, 'tcx> IrMaps<'a, 'tcx> {\n     }\n \n     fn add_live_node(&mut self, lnk: LiveNodeKind) -> LiveNode {\n-        let ln = LiveNode(self.num_live_nodes);\n+        let ln = LiveNode(self.num_live_nodes as u32);\n         self.lnks.push(lnk);\n         self.num_live_nodes += 1;\n \n@@ -303,7 +297,7 @@ impl<'a, 'tcx> IrMaps<'a, 'tcx> {\n     }\n \n     fn add_variable(&mut self, vk: VarKind) -> Variable {\n-        let v = Variable(self.num_vars);\n+        let v = Variable(self.num_vars as u32);\n         self.var_kinds.push(vk);\n         self.num_vars += 1;\n \n@@ -708,7 +702,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n         for var_idx in 0..self.ir.num_vars {\n             let idx = node_base_idx + var_idx;\n             if test(idx).is_valid() {\n-                write!(wr, \" {:?}\", Variable(var_idx))?;\n+                write!(wr, \" {:?}\", Variable(var_idx as u32))?;\n             }\n         }\n         Ok(())\n@@ -848,7 +842,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n         debug!(\"^^ liveness computation results for body {} (entry={:?})\",\n                {\n                    for ln_idx in 0..self.ir.num_live_nodes {\n-                       debug!(\"{:?}\", self.ln_str(LiveNode(ln_idx)));\n+                       debug!(\"{:?}\", self.ln_str(LiveNode(ln_idx as u32)));\n                    }\n                    body.id\n                },"}, {"sha": "b3f1b9c8e627c7e25f777980d7cb5c4df31825aa", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d022dd48cceaceffa931f87490c7921aa3c3f8b1/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d022dd48cceaceffa931f87490c7921aa3c3f8b1/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=d022dd48cceaceffa931f87490c7921aa3c3f8b1", "patch": "@@ -1337,6 +1337,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"enable the experimental Chalk-based trait solving engine\"),\n     cross_lang_lto: CrossLangLto = (CrossLangLto::Disabled, parse_cross_lang_lto, [TRACKED],\n           \"generate build artifacts that are compatible with linker-based LTO.\"),\n+    no_parallel_llvm: bool = (false, parse_bool, [UNTRACKED],\n+          \"don't run LLVM in parallel (while keeping codegen-units and ThinLTO)\"),\n }\n \n pub fn default_lib_output() -> CrateType {"}, {"sha": "4a9d44b7403b9a09a3fb688712ad96aacd4d776e", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d022dd48cceaceffa931f87490c7921aa3c3f8b1/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d022dd48cceaceffa931f87490c7921aa3c3f8b1/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=d022dd48cceaceffa931f87490c7921aa3c3f8b1", "patch": "@@ -701,6 +701,16 @@ macro_rules! define_maps {\n             })*\n         }\n \n+        // This module and the functions in it exist only to provide a\n+        // predictable symbol name prefix for query providers. This is helpful\n+        // for analyzing queries in profilers.\n+        pub(super) mod __query_compute {\n+            $(#[inline(never)]\n+            pub fn $name<F: FnOnce() -> R, R>(f: F) -> R {\n+                f()\n+            })*\n+        }\n+\n         $(impl<$tcx> QueryConfig<$tcx> for queries::$name<$tcx> {\n             type Key = $K;\n             type Value = $V;\n@@ -722,9 +732,12 @@ macro_rules! define_maps {\n                 DepNode::new(tcx, $node(*key))\n             }\n \n+            #[inline]\n             fn compute(tcx: TyCtxt<'_, 'tcx, '_>, key: Self::Key) -> Self::Value {\n-                let provider = tcx.maps.providers[key.map_crate()].$name;\n-                provider(tcx.global_tcx(), key)\n+                __query_compute::$name(move || {\n+                    let provider = tcx.maps.providers[key.map_crate()].$name;\n+                    provider(tcx.global_tcx(), key)\n+                })\n             }\n \n             fn handle_cycle_error(tcx: TyCtxt<'_, 'tcx, '_>) -> Self::Value {"}, {"sha": "baab3c618be58e84a5c6e3820c907976be1d5301", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d022dd48cceaceffa931f87490c7921aa3c3f8b1/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d022dd48cceaceffa931f87490c7921aa3c3f8b1/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=d022dd48cceaceffa931f87490c7921aa3c3f8b1", "patch": "@@ -1738,7 +1738,9 @@ fn start_executing_work(tcx: TyCtxt,\n                             .binary_search_by_key(&cost, |&(_, cost)| cost)\n                             .unwrap_or_else(|e| e);\n                         work_items.insert(insertion_index, (work, cost));\n-                        helper.request_token();\n+                        if !cgcx.opts.debugging_opts.no_parallel_llvm {\n+                            helper.request_token();\n+                        }\n                     }\n                 }\n \n@@ -1842,7 +1844,9 @@ fn start_executing_work(tcx: TyCtxt,\n                     };\n                     work_items.insert(insertion_index, (llvm_work_item, cost));\n \n-                    helper.request_token();\n+                    if !cgcx.opts.debugging_opts.no_parallel_llvm {\n+                        helper.request_token();\n+                    }\n                     assert_eq!(main_thread_worker_state,\n                                MainThreadWorkerState::Codegenning);\n                     main_thread_worker_state = MainThreadWorkerState::Idle;"}, {"sha": "38f0f34211daf33bef336bbf378e47eaf9ff801b", "filename": "src/librustc_target/spec/armv6_unknown_netbsd_eabihf.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d022dd48cceaceffa931f87490c7921aa3c3f8b1/src%2Flibrustc_target%2Fspec%2Farmv6_unknown_netbsd_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d022dd48cceaceffa931f87490c7921aa3c3f8b1/src%2Flibrustc_target%2Fspec%2Farmv6_unknown_netbsd_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv6_unknown_netbsd_eabihf.rs?ref=d022dd48cceaceffa931f87490c7921aa3c3f8b1", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    let mut base = super::netbsd_base::opts();\n+    base.max_atomic_width = Some(64);\n+    Ok(Target {\n+        llvm_target: \"armv6-unknown-netbsdelf-eabihf\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        arch: \"arm\".to_string(),\n+        target_os: \"netbsd\".to_string(),\n+        target_env: \"eabihf\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n+\n+        options: TargetOptions {\n+            features: \"+v6,+vfp2\".to_string(),\n+            abi_blacklist: super::arm_base::abi_blacklist(),\n+            .. base\n+        }\n+    })\n+}"}, {"sha": "412c3546115199009bd99129a0ae54bc1d8d3b7e", "filename": "src/librustc_target/spec/armv7_unknown_netbsd_eabihf.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d022dd48cceaceffa931f87490c7921aa3c3f8b1/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d022dd48cceaceffa931f87490c7921aa3c3f8b1/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs?ref=d022dd48cceaceffa931f87490c7921aa3c3f8b1", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    let base = super::netbsd_base::opts();\n+    Ok(Target {\n+        llvm_target: \"armv7-unknown-netbsdelf-eabihf\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        arch: \"arm\".to_string(),\n+        target_os: \"netbsd\".to_string(),\n+        target_env: \"eabihf\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n+\n+        options: TargetOptions {\n+            features: \"+v7,+vfp3,+d16,+thumb2,-neon\".to_string(),\n+            cpu: \"generic\".to_string(),\n+            max_atomic_width: Some(64),\n+            abi_blacklist: super::arm_base::abi_blacklist(),\n+            .. base\n+        }\n+    })\n+}"}, {"sha": "a0cbfe2fefae07a5c9bb587caace281cb46ee521", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d022dd48cceaceffa931f87490c7921aa3c3f8b1/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d022dd48cceaceffa931f87490c7921aa3c3f8b1/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=d022dd48cceaceffa931f87490c7921aa3c3f8b1", "patch": "@@ -317,6 +317,8 @@ supported_targets! {\n     (\"i686-unknown-openbsd\", i686_unknown_openbsd),\n     (\"x86_64-unknown-openbsd\", x86_64_unknown_openbsd),\n \n+    (\"armv6-unknown-netbsd-eabihf\", armv6_unknown_netbsd_eabihf),\n+    (\"armv7-unknown-netbsd-eabihf\", armv7_unknown_netbsd_eabihf),\n     (\"i686-unknown-netbsd\", i686_unknown_netbsd),\n     (\"powerpc-unknown-netbsd\", powerpc_unknown_netbsd),\n     (\"sparc64-unknown-netbsd\", sparc64_unknown_netbsd),"}, {"sha": "f112f3ca2ae53038691efed628e811fda429860d", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d022dd48cceaceffa931f87490c7921aa3c3f8b1/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d022dd48cceaceffa931f87490c7921aa3c3f8b1/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=d022dd48cceaceffa931f87490c7921aa3c3f8b1", "patch": "@@ -97,6 +97,9 @@ pub fn try_inline(cx: &DocContext, def: Def, name: ast::Name, visited: &mut FxHa\n             record_extern_fqn(cx, did, clean::TypeKind::Const);\n             clean::ConstantItem(build_const(cx, did))\n         }\n+        // Macros are eagerly inlined back in visit_ast, don't show their export statements\n+        // FIXME(50647): the eager inline does not take doc(hidden)/doc(no_inline) into account\n+        Def::Macro(..) => return Some(Vec::new()),\n         _ => return None,\n     };\n     cx.renderinfo.borrow_mut().inlined.insert(did);"}, {"sha": "8c2555c4b3de27ce9cd9cbf7dd7239be25f0ebda", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d022dd48cceaceffa931f87490c7921aa3c3f8b1/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d022dd48cceaceffa931f87490c7921aa3c3f8b1/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=d022dd48cceaceffa931f87490c7921aa3c3f8b1", "patch": "@@ -219,6 +219,8 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n         if let Some(exports) = self.cx.tcx.module_exports(def_id) {\n             for export in exports.iter().filter(|e| e.vis == Visibility::Public) {\n                 if let Def::Macro(def_id, ..) = export.def {\n+                    // FIXME(50647): this eager macro inlining does not take\n+                    // doc(hidden)/doc(no_inline) into account\n                     if def_id.krate == LOCAL_CRATE {\n                         continue // These are `krate.exported_macros`, handled in `self.visit()`.\n                     }\n@@ -237,6 +239,7 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n                         unreachable!()\n                     };\n \n+                    debug!(\"inlining macro {}\", def.ident.name);\n                     om.macros.push(Macro {\n                         def_id,\n                         attrs: def.attrs.clone().into(),\n@@ -561,6 +564,7 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n \n     // convert each exported_macro into a doc item\n     fn visit_local_macro(&self, def: &hir::MacroDef) -> Macro {\n+        debug!(\"visit_local_macro: {}\", def.name);\n         let tts = def.body.trees().collect::<Vec<_>>();\n         // Extract the spans of all matchers. They represent the \"interface\" of the macro.\n         let matchers = tts.chunks(4).map(|arm| arm[0].span()).collect();"}, {"sha": "5a3e5586495cfd1b155a5ab6782a37b87fdf64cb", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d022dd48cceaceffa931f87490c7921aa3c3f8b1/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d022dd48cceaceffa931f87490c7921aa3c3f8b1/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d022dd48cceaceffa931f87490c7921aa3c3f8b1", "patch": "@@ -1772,27 +1772,27 @@ impl<'a> Parser<'a> {\n     pub fn parse_arg_general(&mut self, require_name: bool) -> PResult<'a, Arg> {\n         maybe_whole!(self, NtArg, |x| x);\n \n-        let pat = if require_name || self.is_named_argument() {\n+        let (pat, ty) = if require_name || self.is_named_argument() {\n             debug!(\"parse_arg_general parse_pat (require_name:{})\",\n                    require_name);\n             let pat = self.parse_pat()?;\n \n             self.expect(&token::Colon)?;\n-            pat\n+            (pat, self.parse_ty()?)\n         } else {\n             debug!(\"parse_arg_general ident_to_pat\");\n             let ident = Ident::new(keywords::Invalid.name(), self.prev_span);\n-            P(Pat {\n+            let ty = self.parse_ty()?;\n+            let pat = P(Pat {\n                 id: ast::DUMMY_NODE_ID,\n                 node: PatKind::Ident(BindingMode::ByValue(Mutability::Immutable), ident, None),\n-                span: ident.span,\n-            })\n+                span: ty.span,\n+            });\n+            (pat, ty)\n         };\n \n-        let t = self.parse_ty()?;\n-\n         Ok(Arg {\n-            ty: t,\n+            ty,\n             pat,\n             id: ast::DUMMY_NODE_ID,\n         })"}, {"sha": "73a259bd4438e90edf46788f7be470412d4e0ec8", "filename": "src/libunwind/libunwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d022dd48cceaceffa931f87490c7921aa3c3f8b1/src%2Flibunwind%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d022dd48cceaceffa931f87490c7921aa3c3f8b1/src%2Flibunwind%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Flibunwind.rs?ref=d022dd48cceaceffa931f87490c7921aa3c3f8b1", "patch": "@@ -93,7 +93,7 @@ extern \"C\" {\n }\n \n cfg_if! {\n-if #[cfg(all(any(target_os = \"ios\", not(target_arch = \"arm\"))))] {\n+if #[cfg(all(any(target_os = \"ios\", target_os = \"netbsd\", not(target_arch = \"arm\"))))] {\n     // Not ARM EHABI\n     #[repr(C)]\n     #[derive(Copy, Clone, PartialEq)]"}, {"sha": "9ad4b7e8d7d1618fc9686aa8d3d0b4de3b7a6f36", "filename": "src/llvm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm?ref=d022dd48cceaceffa931f87490c7921aa3c3f8b1", "patch": "@@ -1 +1 @@\n-Subproject commit 56c931901cfb85cd6f7ed44c7d7520a8de1edf97\n+Subproject commit 9ad4b7e8d7d1618fc9686aa8d3d0b4de3b7a6f36"}, {"sha": "a6e707cc2adea7bc28bc4cb87df31cf7c339f10e", "filename": "src/test/rustdoc/pub-use-extern-macros.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d022dd48cceaceffa931f87490c7921aa3c3f8b1/src%2Ftest%2Frustdoc%2Fpub-use-extern-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d022dd48cceaceffa931f87490c7921aa3c3f8b1/src%2Ftest%2Frustdoc%2Fpub-use-extern-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fpub-use-extern-macros.rs?ref=d022dd48cceaceffa931f87490c7921aa3c3f8b1", "patch": "@@ -15,14 +15,15 @@\n extern crate macros;\n \n // @has pub_use_extern_macros/macro.bar.html\n+// @!has pub_use_extern_macros/index.html '//code' 'pub use macros::bar;'\n pub use macros::bar;\n \n // @has pub_use_extern_macros/macro.baz.html\n-// @!has pub_use_extern_macros/index.html 'pub use macros::baz;'\n+// @!has pub_use_extern_macros/index.html '//code' 'pub use macros::baz;'\n #[doc(inline)]\n pub use macros::baz;\n \n // @has pub_use_extern_macros/macro.quux.html\n-// @!has pub_use_extern_macros/index.html 'pub use macros::quux;'\n+// @!has pub_use_extern_macros/index.html '//code' 'pub use macros::quux;'\n #[doc(hidden)]\n pub use macros::quux;"}]}