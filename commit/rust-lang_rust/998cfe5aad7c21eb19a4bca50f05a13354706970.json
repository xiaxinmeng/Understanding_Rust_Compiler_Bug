{"sha": "998cfe5aad7c21eb19a4bca50f05a13354706970", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5OGNmZTVhYWQ3YzIxZWIxOWE0YmNhNTBmMDVhMTMzNTQ3MDY5NzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-27T05:53:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-27T05:53:31Z"}, "message": "Auto merge of #85305 - MarcusDunn:master, r=pnkfelix\n\nStabilize bindings_after_at\n\nattempting to stabilze bindings_after_at [#65490](https://github.com/rust-lang/rust/issues/65490), im pretty new to the whole thing so any pointers are greatly appreciated.", "tree": {"sha": "ee8badadc1ee8a83eaa8460acdab1dae8a903093", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee8badadc1ee8a83eaa8460acdab1dae8a903093"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/998cfe5aad7c21eb19a4bca50f05a13354706970", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/998cfe5aad7c21eb19a4bca50f05a13354706970", "html_url": "https://github.com/rust-lang/rust/commit/998cfe5aad7c21eb19a4bca50f05a13354706970", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/998cfe5aad7c21eb19a4bca50f05a13354706970/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d6bf861f8c264d3d5a023e4a20c6007d1ee9018", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d6bf861f8c264d3d5a023e4a20c6007d1ee9018", "html_url": "https://github.com/rust-lang/rust/commit/7d6bf861f8c264d3d5a023e4a20c6007d1ee9018"}, {"sha": "c2af4cb9a3ce0c6a5ea9c52ac8988715842db4d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2af4cb9a3ce0c6a5ea9c52ac8988715842db4d7", "html_url": "https://github.com/rust-lang/rust/commit/c2af4cb9a3ce0c6a5ea9c52ac8988715842db4d7"}], "stats": {"total": 563, "additions": 228, "deletions": 335}, "files": [{"sha": "6cde7d2bbd22a0b03f1bf532f501417bca5cebfa", "filename": "compiler/rustc_ast_passes/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -4,7 +4,7 @@\n //!\n //! The crate also contains other misc AST visitors, e.g. `node_count` and `show_span`.\n \n-#![feature(bindings_after_at)]\n+#![cfg_attr(bootstrap, feature(bindings_after_at))]\n #![feature(iter_is_partitioned)]\n #![feature(box_patterns)]\n #![recursion_limit = \"256\"]"}, {"sha": "c593009ce674a9ef85d50fda3da867d3ad1ba372", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -287,6 +287,9 @@ declare_features! (\n     (accepted, const_fn_unsize, \"1.54.0\", Some(64992), None),\n     /// Allows `impl Trait` with multiple unrelated lifetimes.\n     (accepted, member_constraints, \"1.54.0\", Some(61997), None),\n+    /// Allows bindings in the subpattern of a binding pattern.\n+    /// For example, you can write `x @ Some(y)`.\n+    (accepted, bindings_after_at, \"1.54.0\", Some(65490), None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: accepted features"}, {"sha": "952fe3f9f818808f2f047ce2045c0fdd5ffb2feb", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -526,10 +526,6 @@ declare_features! (\n     /// Allows using `&mut` in constant functions.\n     (active, const_mut_refs, \"1.41.0\", Some(57349), None),\n \n-    /// Allows bindings in the subpattern of a binding pattern.\n-    /// For example, you can write `x @ Some(y)`.\n-    (active, bindings_after_at, \"1.41.0\", Some(65490), None),\n-\n     /// Allows `impl const Trait for T` syntax.\n     (active, const_trait_impl, \"1.42.0\", Some(67792), None),\n "}, {"sha": "6c14410a4cc70180b98c59615bdac79d03bc9f88", "filename": "compiler/rustc_mir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Flib.rs?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -8,7 +8,7 @@ Rust MIR: a lowered representation of Rust.\n #![feature(in_band_lifetimes)]\n #![feature(array_windows)]\n #![feature(assert_matches)]\n-#![feature(bindings_after_at)]\n+#![cfg_attr(bootstrap, feature(bindings_after_at))]\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]"}, {"sha": "a2e9ed1e37cd7e6490688044aa3ab8cfd0bd827c", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 48, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -16,9 +16,8 @@ use rustc_middle::thir::PatKind;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_session::lint::builtin::BINDINGS_WITH_VARIANT_NAME;\n use rustc_session::lint::builtin::{IRREFUTABLE_LET_PATTERNS, UNREACHABLE_PATTERNS};\n-use rustc_session::parse::feature_err;\n use rustc_session::Session;\n-use rustc_span::{sym, Span};\n+use rustc_span::Span;\n use std::slice;\n \n crate fn check_match(tcx: TyCtxt<'_>, def_id: DefId) {\n@@ -115,9 +114,6 @@ impl PatCtxt<'_, '_> {\n impl<'tcx> MatchVisitor<'_, 'tcx> {\n     fn check_patterns(&mut self, pat: &Pat<'_>) {\n         pat.walk_always(|pat| check_borrow_conflicts_in_at_patterns(self, pat));\n-        if !self.tcx.features().bindings_after_at {\n-            check_legality_of_bindings_in_at_patterns(self, pat);\n-        }\n         check_for_bindings_named_same_as_variants(self, pat);\n     }\n \n@@ -732,46 +728,3 @@ fn check_borrow_conflicts_in_at_patterns(cx: &MatchVisitor<'_, '_>, pat: &Pat<'_\n         err.emit();\n     }\n }\n-\n-/// Forbids bindings in `@` patterns. This used to be is necessary for memory safety,\n-/// because of the way rvalues were handled in the borrow check. (See issue #14587.)\n-fn check_legality_of_bindings_in_at_patterns(cx: &MatchVisitor<'_, '_>, pat: &Pat<'_>) {\n-    AtBindingPatternVisitor { cx, bindings_allowed: true }.visit_pat(pat);\n-\n-    struct AtBindingPatternVisitor<'a, 'b, 'tcx> {\n-        cx: &'a MatchVisitor<'b, 'tcx>,\n-        bindings_allowed: bool,\n-    }\n-\n-    impl<'v> Visitor<'v> for AtBindingPatternVisitor<'_, '_, '_> {\n-        type Map = intravisit::ErasedMap<'v>;\n-\n-        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-            NestedVisitorMap::None\n-        }\n-\n-        fn visit_pat(&mut self, pat: &Pat<'_>) {\n-            match pat.kind {\n-                hir::PatKind::Binding(.., ref subpat) => {\n-                    if !self.bindings_allowed {\n-                        feature_err(\n-                            &self.cx.tcx.sess.parse_sess,\n-                            sym::bindings_after_at,\n-                            pat.span,\n-                            \"pattern bindings after an `@` are unstable\",\n-                        )\n-                        .emit();\n-                    }\n-\n-                    if subpat.is_some() {\n-                        let bindings_were_allowed = self.bindings_allowed;\n-                        self.bindings_allowed = false;\n-                        intravisit::walk_pat(self, pat);\n-                        self.bindings_allowed = bindings_were_allowed;\n-                    }\n-                }\n-                _ => intravisit::walk_pat(self, pat),\n-            }\n-        }\n-    }\n-}"}, {"sha": "ed3b51dc14a7864bd8c07c7b26b36e89c9d96074", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -2,7 +2,7 @@\n \n #![feature(array_windows)]\n #![feature(crate_visibility_modifier)]\n-#![feature(bindings_after_at)]\n+#![cfg_attr(bootstrap, feature(bindings_after_at))]\n #![feature(box_syntax)]\n #![feature(box_patterns)]\n #![recursion_limit = \"256\"]"}, {"sha": "faf00816994abc31d29f303cc64f3af1731e6139", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -56,7 +56,7 @@ This API is completely unstable and subject to change.\n */\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n-#![feature(bindings_after_at)]\n+#![cfg_attr(bootstrap, feature(bindings_after_at))]\n #![feature(bool_to_option)]\n #![feature(box_syntax)]\n #![feature(crate_visibility_modifier)]"}, {"sha": "f04180127b1cdd0cee9513f2dc1d507f3010bfaa", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -85,6 +85,7 @@\n #![feature(allow_internal_unstable)]\n #![feature(arbitrary_self_types)]\n #![feature(async_stream)]\n+#![cfg_attr(bootstrap, feature(bindings_after_at))]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(cfg_sanitize)]\n@@ -145,7 +146,6 @@\n #![feature(associated_type_bounds)]\n #![feature(slice_group_by)]\n #![feature(decl_macro)]\n-#![feature(bindings_after_at)]\n // Allow testing this library\n \n #[cfg(test)]"}, {"sha": null, "filename": "src/etc/pre-commit.sh", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Fetc%2Fpre-commit.sh", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Fetc%2Fpre-commit.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fpre-commit.sh?ref=998cfe5aad7c21eb19a4bca50f05a13354706970"}, {"sha": "baf31bd89f40aa32205010d8c65bb678c72ed917", "filename": "src/test/ui/borrowck/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.rs?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -1,5 +1,4 @@\n // Tests using a combination of pattern features has the expected borrow checking behavior\n-#![feature(bindings_after_at)]\n #![feature(box_patterns)]\n \n enum Test {"}, {"sha": "d4f81930843bfa5f52786449030dc0bc6fc2e393", "filename": "src/test/ui/borrowck/bindings-after-at-or-patterns-slice-patterns-box-patterns.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.stderr?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -1,5 +1,5 @@\n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:37:9\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:36:9\n    |\n LL |         ref foo @ [.., ref mut bar] => (),\n    |         -------^^^^^^^^-----------^\n@@ -8,7 +8,7 @@ LL |         ref foo @ [.., ref mut bar] => (),\n    |         immutable borrow, by `foo`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:121:9\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:120:9\n    |\n LL |         ref foo @ Some(box ref mut s) => (),\n    |         -------^^^^^^^^^^^^---------^\n@@ -17,7 +17,7 @@ LL |         ref foo @ Some(box ref mut s) => (),\n    |         immutable borrow, by `foo`, occurs here\n \n error[E0382]: borrow of moved value: `x`\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:19:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:18:5\n    |\n LL | fn bindings_after_at_slice_patterns_move_binding(x: [String; 4]) {\n    |                                                  - move occurs because `x` has type `[String; 4]`, which does not implement the `Copy` trait\n@@ -29,7 +29,7 @@ LL |     &x;\n    |     ^^ value borrowed here after move\n \n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:29:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:28:5\n    |\n LL |         ref mut foo @ [.., _] => Some(foo),\n    |         --------------------- mutable borrow occurs here\n@@ -41,7 +41,7 @@ LL |     drop(r);\n    |          - mutable borrow later used here\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:51:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:50:5\n    |\n LL |         [ref foo @ .., ref bar] => Some(foo),\n    |          ------------ immutable borrow occurs here\n@@ -53,7 +53,7 @@ LL |     drop(r);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:63:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:62:5\n    |\n LL |         ref foo @ [.., ref bar] => Some(foo),\n    |         ----------------------- immutable borrow occurs here\n@@ -65,7 +65,7 @@ LL |     drop(r);\n    |          - immutable borrow later used here\n \n error[E0382]: borrow of moved value: `x`\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:77:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:76:5\n    |\n LL | fn bindings_after_at_or_patterns_move(x: Option<Test>) {\n    |                                       - move occurs because `x` has type `Option<Test>`, which does not implement the `Copy` trait\n@@ -80,7 +80,7 @@ LL |     &x;\n    |     ^^ value borrowed here after move\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:87:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:86:5\n    |\n LL |         ref foo @ Some(Test::Foo | Test::Bar) => Some(foo),\n    |         ------------------------------------- immutable borrow occurs here\n@@ -92,7 +92,7 @@ LL |     drop(r);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:99:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:98:5\n    |\n LL |         ref mut foo @ Some(Test::Foo | Test::Bar) => Some(foo),\n    |         ----------------------------------------- mutable borrow occurs here\n@@ -104,7 +104,7 @@ LL |     drop(r);\n    |          - mutable borrow later used here\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:113:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:112:5\n    |\n LL |         ref foo @ Some(box ref s) => Some(foo),\n    |         ------------------------- immutable borrow occurs here\n@@ -116,7 +116,7 @@ LL |     drop(r);\n    |          - immutable borrow later used here\n \n error[E0382]: borrow of moved value: `x`\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:135:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:134:5\n    |\n LL | fn bindings_after_at_slice_patterns_or_patterns_moves(x: [Option<Test>; 4]) {\n    |                                                       - move occurs because `x` has type `[Option<Test>; 4]`, which does not implement the `Copy` trait\n@@ -131,7 +131,7 @@ LL |     &x;\n    |     ^^ value borrowed here after move\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:145:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:144:5\n    |\n LL |         ref a @ [ref b @ .., Some(Test::Foo | Test::Bar)] => Some(a),\n    |         ------------------------------------------------- immutable borrow occurs here\n@@ -143,7 +143,7 @@ LL |     drop(r);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:157:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:156:5\n    |\n LL |         ref a @ [ref b @ .., Some(Test::Foo | Test::Bar)] => Some(b),\n    |                  ---------- immutable borrow occurs here\n@@ -155,7 +155,7 @@ LL |     drop(r);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:171:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:170:5\n    |\n LL |         [_, ref a @ Some(box ref b), ..] => Some(a),\n    |             ----------------------- immutable borrow occurs here\n@@ -167,7 +167,7 @@ LL |     drop(r);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:187:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:186:5\n    |\n LL |         [_, ref a @ Some(box Test::Foo | box Test::Bar), ..] => Some(a),\n    |             ------------------------------------------- immutable borrow occurs here\n@@ -179,7 +179,7 @@ LL |     drop(r);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:201:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:200:5\n    |\n LL |         [_, ref mut a @ Some(box Test::Foo | box Test::Bar), ..] => Some(a),\n    |             ----------------------------------------------- mutable borrow occurs here\n@@ -191,7 +191,7 @@ LL |     drop(r);\n    |          - mutable borrow later used here\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:215:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:214:5\n    |\n LL |         ref a @ [_, ref b @ Some(box Test::Foo | box Test::Bar), ..] => Some(a),\n    |         ------------------------------------------------------------ immutable borrow occurs here"}, {"sha": "7bb43d5b50360467fa4ec60004e0e2428efbabae", "filename": "src/test/ui/drop/dynamic-drop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -2,7 +2,6 @@\n // ignore-wasm32-bare compiled with panic=abort by default\n \n #![feature(generators, generator_trait)]\n-#![feature(bindings_after_at)]\n \n #![allow(unused_assignments)]\n #![allow(unused_variables)]"}, {"sha": "2b349f0ed5f997e8ee9d7dc0f3ca6417cc5a3138", "filename": "src/test/ui/pattern/bindings-after-at/bind-by-copy.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-copy.rs?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -2,8 +2,6 @@\n \n // Test copy\n \n-#![feature(bindings_after_at)]\n-\n struct A { a: i32, b: i32 }\n struct B { a: i32, b: C }\n struct D { a: i32, d: C }"}, {"sha": "9d1f08d6eea39fdf899d1c07f326d24bdf346e00", "filename": "src/test/ui/pattern/bindings-after-at/bind-by-move-neither-can-live-while-the-other-survives-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -2,8 +2,6 @@\n // It checks that you cannot use an AND-pattern (`binding @ pat`)\n // where one side is by-ref and the other is by-move.\n \n-#![feature(bindings_after_at)]\n-\n struct X {\n     x: (),\n }"}, {"sha": "6ff0dadf0d1f3da7e78b9caaf48996d2e457fe80", "filename": "src/test/ui/pattern/bindings-after-at/bind-by-move-neither-can-live-while-the-other-survives-1.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -1,5 +1,5 @@\n error: cannot move out of value because it is borrowed\n-  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:14:14\n+  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:12:14\n    |\n LL |         Some(ref _y @ _z) => {}\n    |              ------^^^--\n@@ -8,7 +8,7 @@ LL |         Some(ref _y @ _z) => {}\n    |              value borrowed, by `_y`, here\n \n error: borrow of moved value\n-  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:21:14\n+  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:19:14\n    |\n LL |         Some(_z @ ref _y) => {}\n    |              --^^^------\n@@ -18,7 +18,7 @@ LL |         Some(_z @ ref _y) => {}\n    |              move occurs because `_z` has type `X` which does not implement the `Copy` trait\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:28:14\n+  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:26:14\n    |\n LL |         Some(ref mut _y @ _z) => {}\n    |              ----------^^^--\n@@ -27,7 +27,7 @@ LL |         Some(ref mut _y @ _z) => {}\n    |              value borrowed, by `_y`, here\n \n error: borrow of moved value\n-  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:35:14\n+  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:33:14\n    |\n LL |         Some(_z @ ref mut _y) => {}\n    |              --^^^----------\n@@ -37,7 +37,7 @@ LL |         Some(_z @ ref mut _y) => {}\n    |              move occurs because `_z` has type `X` which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value\n-  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:14:14\n+  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:12:14\n    |\n LL |         Some(ref _y @ _z) => {}\n    |              ^^^^^^^^^--\n@@ -52,7 +52,7 @@ LL |         Some(ref _y @ ref _z) => {}\n    |                       ^^^\n \n error[E0382]: borrow of moved value\n-  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:28:14\n+  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:26:14\n    |\n LL |         Some(ref mut _y @ _z) => {}\n    |              ^^^^^^^^^^^^^--"}, {"sha": "1816a74a0ba3d02a15b3ea3ec4c95399db256070", "filename": "src/test/ui/pattern/bindings-after-at/bind-by-move-no-subbindings-fun-param.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-no-subbindings-fun-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-no-subbindings-fun-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-no-subbindings-fun-param.rs?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -1,7 +1,5 @@\n // See issue #12534.\n \n-#![feature(bindings_after_at)]\n-\n fn main() {}\n \n struct A(Box<u8>);"}, {"sha": "ee0885a014aa44c15ccdbb2d2f20d4e1b2584a55", "filename": "src/test/ui/pattern/bindings-after-at/bind-by-move-no-subbindings-fun-param.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-no-subbindings-fun-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-no-subbindings-fun-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-no-subbindings-fun-param.stderr?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of partially moved value\n-  --> $DIR/bind-by-move-no-subbindings-fun-param.rs:9:6\n+  --> $DIR/bind-by-move-no-subbindings-fun-param.rs:7:6\n    |\n LL | fn f(a @ A(u): A) -> Box<u8> {\n    |      ^^^^^^-^"}, {"sha": "a61d682152407cd3d7463963c6f16da5e5cfe282", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-move-and-move.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.rs?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -1,7 +1,5 @@\n // Test that moving on both sides of an `@` pattern is not allowed.\n \n-#![feature(bindings_after_at)]\n-\n fn main() {\n     struct U; // Not copy!\n "}, {"sha": "8e00bf5c328be6fcac7781d88d090c0447ceec45", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-move-and-move.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:13:9\n+  --> $DIR/borrowck-move-and-move.rs:11:9\n    |\n LL |     let a @ b = U;\n    |         ^^^^-   - move occurs because value has type `U`, which does not implement the `Copy` trait\n@@ -8,7 +8,7 @@ LL |     let a @ b = U;\n    |         value used here after move\n \n error[E0382]: use of partially moved value\n-  --> $DIR/borrowck-move-and-move.rs:15:9\n+  --> $DIR/borrowck-move-and-move.rs:13:9\n    |\n LL |     let a @ (b, c) = (U, U);\n    |         ^^^^^^^^-^\n@@ -19,7 +19,7 @@ LL |     let a @ (b, c) = (U, U);\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value\n-  --> $DIR/borrowck-move-and-move.rs:17:9\n+  --> $DIR/borrowck-move-and-move.rs:15:9\n    |\n LL |     let a @ (b, c) = (u(), u());\n    |         ^^^^^^^^-^\n@@ -30,7 +30,7 @@ LL |     let a @ (b, c) = (u(), u());\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:20:16\n+  --> $DIR/borrowck-move-and-move.rs:18:16\n    |\n LL |     match Ok(U) {\n    |           ----- move occurs because value has type `Result<U, U>`, which does not implement the `Copy` trait\n@@ -41,7 +41,7 @@ LL |         a @ Ok(b) | a @ Err(b) => {}\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:20:29\n+  --> $DIR/borrowck-move-and-move.rs:18:29\n    |\n LL |     match Ok(U) {\n    |           ----- move occurs because value has type `Result<U, U>`, which does not implement the `Copy` trait\n@@ -52,7 +52,7 @@ LL |         a @ Ok(b) | a @ Err(b) => {}\n    |                     value moved here\n \n error[E0382]: use of partially moved value\n-  --> $DIR/borrowck-move-and-move.rs:27:9\n+  --> $DIR/borrowck-move-and-move.rs:25:9\n    |\n LL |         xs @ [a, .., b] => {}\n    |         ^^^^^^^^^^^^^-^\n@@ -63,7 +63,7 @@ LL |         xs @ [a, .., b] => {}\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value\n-  --> $DIR/borrowck-move-and-move.rs:31:9\n+  --> $DIR/borrowck-move-and-move.rs:29:9\n    |\n LL |         xs @ [_, ys @ .., _] => {}\n    |         ^^^^^^^^^-------^^^^\n@@ -74,7 +74,7 @@ LL |         xs @ [_, ys @ .., _] => {}\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:24:12\n+  --> $DIR/borrowck-move-and-move.rs:22:12\n    |\n LL |     fn fun(a @ b: U) {}\n    |            ^^^^-"}, {"sha": "fbdefd9d36c90b0b4e4cf3b9ebf613cdfcd42817", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-at-and-box-pass.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box-pass.rs?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -2,7 +2,6 @@\n \n // Test `@` patterns combined with `box` patterns.\n \n-#![feature(bindings_after_at)]\n #![feature(box_patterns)]\n \n #[derive(Copy, Clone)]"}, {"sha": "45aa65e67a9fa7449d2edda861567caf5a75eff0", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-at-and-box.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.rs?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -1,6 +1,5 @@\n // Test `@` patterns combined with `box` patterns.\n \n-#![feature(bindings_after_at)]\n #![feature(box_patterns)]\n \n #[derive(Copy, Clone)]"}, {"sha": "4b2048855ebb42ea383307b3044892872c6e85d0", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-at-and-box.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -1,5 +1,5 @@\n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-at-and-box.rs:32:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:31:9\n    |\n LL |     let ref a @ box b = Box::new(NC);\n    |         -----^^^^^^^-\n@@ -8,7 +8,7 @@ LL |     let ref a @ box b = Box::new(NC);\n    |         value borrowed, by `a`, here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:35:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:34:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(nc());\n    |         -----^^^^^^^---------\n@@ -17,7 +17,7 @@ LL |     let ref a @ box ref mut b = Box::new(nc());\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:37:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:36:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         -----^^^^^^^---------\n@@ -26,7 +26,7 @@ LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:39:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:38:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         -----^^^^^^^---------\n@@ -35,7 +35,7 @@ LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:43:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:42:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         -----^^^^^^^---------\n@@ -44,7 +44,7 @@ LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:49:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:48:9\n    |\n LL |     let ref mut a @ box ref b = Box::new(NC);\n    |         ---------^^^^^^^-----\n@@ -53,7 +53,7 @@ LL |     let ref mut a @ box ref b = Box::new(NC);\n    |         mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:63:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:62:9\n    |\n LL |         ref mut a @ box ref b => {\n    |         ---------^^^^^^^-----\n@@ -62,7 +62,7 @@ LL |         ref mut a @ box ref b => {\n    |         mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:55:11\n+  --> $DIR/borrowck-pat-at-and-box.rs:54:11\n    |\n LL |     fn f5(ref mut a @ box ref b: Box<NC>) {\n    |           ---------^^^^^^^-----\n@@ -71,7 +71,7 @@ LL |     fn f5(ref mut a @ box ref b: Box<NC>) {\n    |           mutable borrow, by `a`, occurs here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-at-and-box.rs:32:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:31:9\n    |\n LL |     let ref a @ box b = Box::new(NC);\n    |         ^^^^^^^^^^^^-\n@@ -82,7 +82,7 @@ LL |     let ref a @ box b = Box::new(NC);\n    = note: move occurs because value has type `NC`, which does not implement the `Copy` trait\n \n error[E0502]: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:39:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:38:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         ^^^^^^^^^^^^---------\n@@ -94,7 +94,7 @@ LL |     *b = NC;\n    |     ------- mutable borrow later used here\n \n error[E0502]: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:43:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:42:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         ^^^^^^^^^^^^---------\n@@ -106,7 +106,7 @@ LL |     *b = NC;\n    |     ------- mutable borrow later used here\n \n error[E0502]: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:49:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:48:9\n    |\n LL |     let ref mut a @ box ref b = Box::new(NC);\n    |         ^^^^^^^^^^^^^^^^-----\n@@ -118,7 +118,7 @@ LL |     drop(b);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:63:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:62:9\n    |\n LL |         ref mut a @ box ref b => {\n    |         ^^^^^^^^^^^^^^^^-----\n@@ -130,7 +130,7 @@ LL |             drop(b);\n    |                  - immutable borrow later used here\n \n error[E0502]: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:55:11\n+  --> $DIR/borrowck-pat-at-and-box.rs:54:11\n    |\n LL |     fn f5(ref mut a @ box ref b: Box<NC>) {\n    |           ^^^^^^^^^^^^^^^^-----"}, {"sha": "0108861cfce3ca09fb1e90a7dc031e226370f1b6", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-copy-bindings-in-at.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-copy-bindings-in-at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-copy-bindings-in-at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-copy-bindings-in-at.rs?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -2,8 +2,6 @@\n \n // Test `Copy` bindings in the rhs of `@` patterns.\n \n-#![feature(bindings_after_at)]\n-\n #[derive(Copy, Clone)]\n struct C;\n "}, {"sha": "82f16fca65fee6ec25381978db786161f0c941e4", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref-inverse-promotion.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse-promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse-promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse-promotion.rs?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -1,8 +1,6 @@\n // Test that `by_move_binding @ pat_with_by_ref_bindings` is prevented even with promotion.\n // Currently this logic exists in THIR match checking as opposed to borrowck.\n \n-#![feature(bindings_after_at)]\n-\n fn main() {\n     struct U;\n     let a @ ref b = U; //~ ERROR borrow of moved value"}, {"sha": "be4e81c61aa626fb19ff70255e95c0251ceb9d61", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref-inverse-promotion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse-promotion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse-promotion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse-promotion.stderr?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -1,5 +1,5 @@\n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse-promotion.rs:8:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse-promotion.rs:6:9\n    |\n LL |     let a @ ref b = U;\n    |         -^^^-----"}, {"sha": "06dc6e1c4da1f2e04324aae7e87c09a75be56036", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref-inverse.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.rs?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -1,7 +1,5 @@\n // Test that `by_move_binding @ pat_with_by_ref_bindings` is prevented.\n \n-#![feature(bindings_after_at)]\n-\n fn main() {\n     struct U;\n "}, {"sha": "bc2c1625fd0ef7275da5b1526ff92d4da7d45b9c", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref-inverse.stderr", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -1,5 +1,5 @@\n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:24:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:22:9\n    |\n LL |     let a @ ref b = U;\n    |         -^^^-----\n@@ -9,7 +9,7 @@ LL |     let a @ ref b = U;\n    |         move occurs because `a` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:26:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:24:9\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    |         -^^^^^^^^^^^^---------^^^^^^-----^\n@@ -20,7 +20,7 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    |         move occurs because `a` has type `(U, U)` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:26:14\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:24:14\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    |              -----^^^---------\n@@ -30,7 +30,7 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    |              move occurs because `b` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:26:33\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:24:33\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    |                                 -^^^-----\n@@ -40,7 +40,7 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    |                                 move occurs because `d` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:31:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:29:9\n    |\n LL |     let a @ [ref mut b, ref c] = [U, U];\n    |         -^^^^---------^^-----^\n@@ -51,7 +51,7 @@ LL |     let a @ [ref mut b, ref c] = [U, U];\n    |         move occurs because `a` has type `[U; 2]` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:33:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:31:9\n    |\n LL |     let a @ ref b = u();\n    |         -^^^-----\n@@ -61,7 +61,7 @@ LL |     let a @ ref b = u();\n    |         move occurs because `a` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:35:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:33:9\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    |         -^^^^^^^^^^^^---------^^^^^^-----^\n@@ -72,7 +72,7 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    |         move occurs because `a` has type `(U, U)` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:35:14\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:33:14\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    |              -----^^^---------\n@@ -82,7 +82,7 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    |              move occurs because `b` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:35:33\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:33:33\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    |                                 -^^^-----\n@@ -92,7 +92,7 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    |                                 move occurs because `d` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:40:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:38:9\n    |\n LL |     let a @ [ref mut b, ref c] = [u(), u()];\n    |         -^^^^---------^^-----^\n@@ -103,7 +103,7 @@ LL |     let a @ [ref mut b, ref c] = [u(), u()];\n    |         move occurs because `a` has type `[U; 2]` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:44:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:42:9\n    |\n LL |         a @ Some(ref b) => {}\n    |         -^^^^^^^^-----^\n@@ -113,7 +113,7 @@ LL |         a @ Some(ref b) => {}\n    |         move occurs because `a` has type `Option<U>` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:49:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:47:9\n    |\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |         -^^^^^^^^^^^^^^^^^---------^^^^^^-----^^\n@@ -124,7 +124,7 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |         move occurs because `a` has type `Option<(U, U)>` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:49:19\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:47:19\n    |\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                   -----^^^---------\n@@ -134,7 +134,7 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                   move occurs because `b` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:49:38\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:47:38\n    |\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                                      -^^^-----\n@@ -144,7 +144,7 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                                      move occurs because `d` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:57:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:55:9\n    |\n LL |         mut a @ Some([ref b, ref mut c]) => {}\n    |         -----^^^^^^^^^-----^^---------^^\n@@ -155,7 +155,7 @@ LL |         mut a @ Some([ref b, ref mut c]) => {}\n    |         move occurs because `a` has type `Option<[U; 2]>` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:63:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:61:9\n    |\n LL |         a @ Some(ref b) => {}\n    |         -^^^^^^^^-----^\n@@ -165,7 +165,7 @@ LL |         a @ Some(ref b) => {}\n    |         move occurs because `a` has type `Option<U>` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:69:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:67:9\n    |\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |         -^^^^^^^^^^^^^^^^^---------^^^^^^-----^^\n@@ -176,7 +176,7 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |         move occurs because `a` has type `Option<(U, U)>` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:69:19\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:67:19\n    |\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                   -----^^^---------\n@@ -186,7 +186,7 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                   move occurs because `b` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:69:38\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:67:38\n    |\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                                      -^^^-----\n@@ -196,7 +196,7 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                                      move occurs because `d` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:77:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:75:9\n    |\n LL |         mut a @ Some([ref b, ref mut c]) => {}\n    |         -----^^^^^^^^^-----^^---------^^\n@@ -207,7 +207,7 @@ LL |         mut a @ Some([ref b, ref mut c]) => {}\n    |         move occurs because `a` has type `Option<[U; 2]>` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:13:11\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:11:11\n    |\n LL |     fn f1(a @ ref b: U) {}\n    |           -^^^-----\n@@ -217,7 +217,7 @@ LL |     fn f1(a @ ref b: U) {}\n    |           move occurs because `a` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:16:11\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:14:11\n    |\n LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    |           -----^^^^^^^^-----^^^^^^^^^^-----^\n@@ -228,7 +228,7 @@ LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    |           move occurs because `a` has type `(U, U)` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:16:20\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:14:20\n    |\n LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    |                    -^^^-----\n@@ -238,7 +238,7 @@ LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    |                    move occurs because `b` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:16:31\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:14:31\n    |\n LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    |                               -----^^^-----\n@@ -248,7 +248,7 @@ LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    |                               move occurs because `d` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:21:11\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:19:11\n    |\n LL |     fn f3(a @ [ref mut b, ref c]: [U; 2]) {}\n    |           -^^^^---------^^-----^\n@@ -259,7 +259,7 @@ LL |     fn f3(a @ [ref mut b, ref c]: [U; 2]) {}\n    |           move occurs because `a` has type `[U; 2]` which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:26:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:24:9\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^---------^\n@@ -270,7 +270,7 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n \n error[E0382]: use of partially moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:35:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:33:9\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^---------^\n@@ -281,7 +281,7 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:49:38\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:47:38\n    |\n LL |     match Some((U, U)) {\n    |           ------------ move occurs because value has type `Option<(U, U)>`, which does not implement the `Copy` trait\n@@ -292,7 +292,7 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |         value moved here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:57:30\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:55:30\n    |\n LL |     match Some([U, U]) {\n    |           ------------ move occurs because value has type `Option<[U; 2]>`, which does not implement the `Copy` trait\n@@ -303,7 +303,7 @@ LL |         mut a @ Some([ref b, ref mut c]) => {}\n    |         value moved here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:63:18\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:61:18\n    |\n LL |     match Some(u()) {\n    |           --------- move occurs because value has type `Option<U>`, which does not implement the `Copy` trait\n@@ -314,7 +314,7 @@ LL |         a @ Some(ref b) => {}\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:69:38\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:67:38\n    |\n LL |     match Some((u(), u())) {\n    |           ---------------- move occurs because value has type `Option<(U, U)>`, which does not implement the `Copy` trait\n@@ -325,7 +325,7 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |         value moved here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:77:30\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:75:30\n    |\n LL |     match Some([u(), u()]) {\n    |           ---------------- move occurs because value has type `Option<[U; 2]>`, which does not implement the `Copy` trait\n@@ -336,7 +336,7 @@ LL |         mut a @ Some([ref b, ref mut c]) => {}\n    |         value moved here\n \n error[E0382]: use of partially moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:16:11\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:14:11\n    |\n LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    |           ^^^^^^^^^^^^^^^^^^^^-------------^"}, {"sha": "0b0a7801049fe588917fc5f8549f5ef0a4c6ec90", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.rs?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -1,7 +1,5 @@\n // Test that `ref mut? @ pat_with_by_move_bindings` is prevented.\n \n-#![feature(bindings_after_at)]\n-\n fn main() {\n     struct U;\n "}, {"sha": "e6a1e5ef07ce41bc96b7d9c18d5dd4d637869e17", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref.stderr", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -1,5 +1,5 @@\n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:26:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:24:9\n    |\n LL |     let ref a @ b = U;\n    |         -----^^^-\n@@ -8,7 +8,7 @@ LL |     let ref a @ b = U;\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:28:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:26:9\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (U, U);\n    |         -----^^^^^^^^^^^^-----^^^^^^^^^^-^\n@@ -18,7 +18,7 @@ LL |     let ref a @ (ref b @ mut c, ref d @ e) = (U, U);\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:28:18\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:26:18\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (U, U);\n    |                  -----^^^-----\n@@ -27,7 +27,7 @@ LL |     let ref a @ (ref b @ mut c, ref d @ e) = (U, U);\n    |                  value borrowed, by `b`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:28:33\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:26:33\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (U, U);\n    |                                 -----^^^-\n@@ -36,7 +36,7 @@ LL |     let ref a @ (ref b @ mut c, ref d @ e) = (U, U);\n    |                                 value borrowed, by `d`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:32:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:30:9\n    |\n LL |     let ref mut a @ [b, mut c] = [U, U];\n    |         ---------^^^^-^^-----^\n@@ -46,7 +46,7 @@ LL |     let ref mut a @ [b, mut c] = [U, U];\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:35:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:33:9\n    |\n LL |     let ref a @ b = u();\n    |         -----^^^-\n@@ -55,7 +55,7 @@ LL |     let ref a @ b = u();\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:38:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:36:9\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n    |         -----^^^^^^^^^^^^-----^^^^^^^^^^-^\n@@ -65,7 +65,7 @@ LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:38:18\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:36:18\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n    |                  -----^^^-----\n@@ -74,7 +74,7 @@ LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n    |                  value borrowed, by `b`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:38:33\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:36:33\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n    |                                 -----^^^-\n@@ -83,7 +83,7 @@ LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n    |                                 value borrowed, by `d`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:44:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:42:9\n    |\n LL |     let ref mut a @ [b, mut c] = [u(), u()];\n    |         ---------^^^^-^^-----^\n@@ -93,7 +93,7 @@ LL |     let ref mut a @ [b, mut c] = [u(), u()];\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:49:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:47:9\n    |\n LL |         ref a @ Some(b) => {}\n    |         -----^^^^^^^^-^\n@@ -102,7 +102,7 @@ LL |         ref a @ Some(b) => {}\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:54:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:52:9\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |         -----^^^^^^^^^^^^^^^^^-----^^^^^^^^^^-^^\n@@ -112,7 +112,7 @@ LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:54:23\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:52:23\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                       -----^^^-----\n@@ -121,7 +121,7 @@ LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                       value borrowed, by `b`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:54:38\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:52:38\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                                      -----^^^-\n@@ -130,7 +130,7 @@ LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                                      value borrowed, by `d`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:61:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:59:9\n    |\n LL |         ref mut a @ Some([b, mut c]) => {}\n    |         ---------^^^^^^^^^-^^-----^^\n@@ -140,7 +140,7 @@ LL |         ref mut a @ Some([b, mut c]) => {}\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:66:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:64:9\n    |\n LL |         ref a @ Some(b) => {}\n    |         -----^^^^^^^^-^\n@@ -149,7 +149,7 @@ LL |         ref a @ Some(b) => {}\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:71:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:69:9\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |         -----^^^^^^^^^^^^^^^^^-----^^^^^^^^^^-^^\n@@ -159,7 +159,7 @@ LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:71:23\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:69:23\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                       -----^^^-----\n@@ -168,7 +168,7 @@ LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                       value borrowed, by `b`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:71:38\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:69:38\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                                      -----^^^-\n@@ -177,7 +177,7 @@ LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                                      value borrowed, by `d`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:80:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:78:9\n    |\n LL |         ref mut a @ Some([b, mut c]) => {}\n    |         ---------^^^^^^^^^-^^-----^^\n@@ -187,7 +187,7 @@ LL |         ref mut a @ Some([b, mut c]) => {}\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:13:11\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:11:11\n    |\n LL |     fn f1(ref a @ b: U) {}\n    |           -----^^^-\n@@ -196,7 +196,7 @@ LL |     fn f1(ref a @ b: U) {}\n    |           value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:16:11\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:14:11\n    |\n LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n    |           -----^^^^^^^^^^^^-----^^^^^^^^^^-^\n@@ -206,7 +206,7 @@ LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n    |           value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:16:20\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:14:20\n    |\n LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n    |                    -----^^^-----\n@@ -215,7 +215,7 @@ LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n    |                    value borrowed, by `b`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:16:35\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:14:35\n    |\n LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n    |                                   -----^^^-\n@@ -224,7 +224,7 @@ LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n    |                                   value borrowed, by `d`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:22:11\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:20:11\n    |\n LL |     fn f3(ref mut a @ [b, mut c]: [U; 2]) {}\n    |           ---------^^^^-^^-----^\n@@ -234,7 +234,7 @@ LL |     fn f3(ref mut a @ [b, mut c]: [U; 2]) {}\n    |           value borrowed, by `a`, here\n \n error[E0382]: borrow of partially moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:32:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:30:9\n    |\n LL |     let ref mut a @ [b, mut c] = [U, U];\n    |         ^^^^^^^^^^^^^^^^-----^\n@@ -245,7 +245,7 @@ LL |     let ref mut a @ [b, mut c] = [U, U];\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:35:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:33:9\n    |\n LL |     let ref a @ b = u();\n    |         ^^^^^^^^-   --- move occurs because value has type `U`, which does not implement the `Copy` trait\n@@ -254,7 +254,7 @@ LL |     let ref a @ b = u();\n    |         value borrowed here after move\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:38:18\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:36:18\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n    |                  ^^^^^^^^-----\n@@ -265,7 +265,7 @@ LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n    = note: move occurs because value has type `U`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:38:33\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:36:33\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n    |                                 ^^^^^^^^-\n@@ -276,7 +276,7 @@ LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n    = note: move occurs because value has type `U`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of partially moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:44:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:42:9\n    |\n LL |     let ref mut a @ [b, mut c] = [u(), u()];\n    |         ^^^^^^^^^^^^^^^^-----^\n@@ -287,7 +287,7 @@ LL |     let ref mut a @ [b, mut c] = [u(), u()];\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:71:23\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:69:23\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                       ^^^^^^^^-----\n@@ -302,7 +302,7 @@ LL |         ref a @ Some((ref b @ ref mut c, ref d @ e)) => {}\n    |                               ^^^\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:71:38\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:69:38\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                                      ^^^^^^^^-\n@@ -317,7 +317,7 @@ LL |         ref a @ Some((ref b @ mut c, ref d @ ref e)) => {}\n    |                                              ^^^\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:13:11\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:11:11\n    |\n LL |     fn f1(ref a @ b: U) {}\n    |           ^^^^^^^^-\n@@ -327,7 +327,7 @@ LL |     fn f1(ref a @ b: U) {}\n    |           move occurs because value has type `U`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:16:20\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:14:20\n    |\n LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n    |                    ^^^^^^^^-----\n@@ -338,7 +338,7 @@ LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n    = note: move occurs because value has type `U`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:16:35\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:14:35\n    |\n LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n    |                                   ^^^^^^^^-\n@@ -349,7 +349,7 @@ LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n    = note: move occurs because value has type `U`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of partially moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:22:11\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:20:11\n    |\n LL |     fn f3(ref mut a @ [b, mut c]: [U; 2]) {}\n    |           ^^^^^^^^^^^^^^^^-----^"}, {"sha": "df213f688c2825c7cb7fbf4a09a07ee657f3626a", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-both-sides.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-both-sides.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-both-sides.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-both-sides.rs?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -3,8 +3,6 @@\n // Test that `ref` patterns may be used on both sides\n // of an `@` pattern according to NLL borrowck.\n \n-#![feature(bindings_after_at)]\n-\n fn main() {\n     struct U; // Not copy!\n "}, {"sha": "6bc0d346c111a5e2905b836a1f079c2b40ea0fde", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-and-ref.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.rs?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -1,5 +1,3 @@\n-#![feature(bindings_after_at)]\n-\n enum Option<T> {\n     None,\n     Some(T),"}, {"sha": "2ae78d1084e0e4263eb423b8664cdb55b68f109d", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-and-ref.stderr", "status": "modified", "additions": 47, "deletions": 47, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -1,5 +1,5 @@\n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:10:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:8:9\n    |\n LL |         ref mut z @ &mut Some(ref a) => {\n    |         ---------^^^^^^^^^^^^^-----^\n@@ -8,7 +8,7 @@ LL |         ref mut z @ &mut Some(ref a) => {\n    |         mutable borrow, by `z`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:35:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:33:9\n    |\n LL |     let ref mut a @ (ref b @ ref mut c) = u(); // sub-in-sub\n    |         ---------^^^^-----------------^\n@@ -18,7 +18,7 @@ LL |     let ref mut a @ (ref b @ ref mut c) = u(); // sub-in-sub\n    |         first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:35:22\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:33:22\n    |\n LL |     let ref mut a @ (ref b @ ref mut c) = u(); // sub-in-sub\n    |                      -----^^^---------\n@@ -27,7 +27,7 @@ LL |     let ref mut a @ (ref b @ ref mut c) = u(); // sub-in-sub\n    |                      immutable borrow, by `b`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:39:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:37:9\n    |\n LL |     let ref a @ ref mut b = U;\n    |         -----^^^---------\n@@ -36,7 +36,7 @@ LL |     let ref a @ ref mut b = U;\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:41:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:39:9\n    |\n LL |     let ref mut a @ ref b = U;\n    |         ---------^^^-----\n@@ -45,7 +45,7 @@ LL |     let ref mut a @ ref b = U;\n    |         mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:43:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:41:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n@@ -55,7 +55,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:45:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:43:9\n    |\n LL |     let ref mut a @ (ref b, ref c) = (U, U);\n    |         ---------^^^^-----^^-----^\n@@ -65,7 +65,7 @@ LL |     let ref mut a @ (ref b, ref c) = (U, U);\n    |         mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:48:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:46:9\n    |\n LL |     let ref mut a @ ref b = u();\n    |         ---------^^^-----\n@@ -74,7 +74,7 @@ LL |     let ref mut a @ ref b = u();\n    |         mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:53:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:51:9\n    |\n LL |     let ref a @ ref mut b = u();\n    |         -----^^^---------\n@@ -83,7 +83,7 @@ LL |     let ref a @ ref mut b = u();\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:59:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:57:9\n    |\n LL |     let ref mut a @ ref b = U;\n    |         ---------^^^-----\n@@ -92,7 +92,7 @@ LL |     let ref mut a @ ref b = U;\n    |         mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:63:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:61:9\n    |\n LL |     let ref a @ ref mut b = U;\n    |         -----^^^---------\n@@ -101,7 +101,7 @@ LL |     let ref a @ ref mut b = U;\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:69:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:67:9\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n    |         ---------^^^^^^-----^\n@@ -110,7 +110,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n    |         mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:69:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:67:33\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n    |                                 ---------^^^^^^^-----^\n@@ -119,7 +119,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n    |                                 mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:78:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:76:9\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |         -----^^^^^^---------^\n@@ -128,7 +128,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:78:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:76:33\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |                                 -----^^^^^^^---------^\n@@ -137,7 +137,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |                                 immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:89:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:87:9\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false } => {}\n    |         -----^^^^^^---------^\n@@ -146,7 +146,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false }\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:89:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:87:33\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false } => {}\n    |                                 -----^^^^^^^---------^\n@@ -155,7 +155,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false }\n    |                                 immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:96:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:94:9\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); false } => {}\n    |         ---------^^^^^^-----^\n@@ -164,7 +164,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); fa\n    |         mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:96:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:94:33\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); false } => {}\n    |                                 ---------^^^^^^^-----^\n@@ -173,7 +173,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); fa\n    |                                 mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:103:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:101:9\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n    |         -----^^^^^^---------^\n@@ -182,7 +182,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:103:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:101:33\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n    |                                 -----^^^^^^^---------^\n@@ -191,7 +191,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false\n    |                                 immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:111:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:109:9\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n    |         ---------^^^^^^-----^\n@@ -200,7 +200,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false\n    |         mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:111:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:109:33\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n    |                                 ---------^^^^^^^-----^\n@@ -209,7 +209,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false\n    |                                 mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:119:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:117:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n@@ -219,7 +219,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:125:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:123:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n@@ -229,7 +229,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:131:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:129:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n@@ -239,7 +239,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:136:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:134:9\n    |\n LL |     let ref mut a @ (ref b, ref c) = (U, U);\n    |         ---------^^^^-----^^-----^\n@@ -249,7 +249,7 @@ LL |     let ref mut a @ (ref b, ref c) = (U, U);\n    |         mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:24:11\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:22:11\n    |\n LL |     fn f1(ref a @ ref mut b: U) {}\n    |           -----^^^---------\n@@ -258,7 +258,7 @@ LL |     fn f1(ref a @ ref mut b: U) {}\n    |           immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:26:11\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:24:11\n    |\n LL |     fn f2(ref mut a @ ref b: U) {}\n    |           ---------^^^-----\n@@ -267,7 +267,7 @@ LL |     fn f2(ref mut a @ ref b: U) {}\n    |           mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:28:11\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:26:11\n    |\n LL |     fn f3(ref a @ [ref b, ref mut mid @ .., ref c]: [U; 4]) {}\n    |           -----^^^^^^^^^^^----------------^^^^^^^^\n@@ -276,7 +276,7 @@ LL |     fn f3(ref a @ [ref b, ref mut mid @ .., ref c]: [U; 4]) {}\n    |           immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:30:22\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:28:22\n    |\n LL |     fn f4_also_moved(ref a @ ref mut b @ c: U) {}\n    |                      -----^^^-------------\n@@ -286,7 +286,7 @@ LL |     fn f4_also_moved(ref a @ ref mut b @ c: U) {}\n    |                      immutable borrow, by `a`, occurs here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:30:30\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:28:30\n    |\n LL |     fn f4_also_moved(ref a @ ref mut b @ c: U) {}\n    |                              ---------^^^-\n@@ -295,7 +295,7 @@ LL |     fn f4_also_moved(ref a @ ref mut b @ c: U) {}\n    |                              value borrowed, by `b`, here\n \n error[E0502]: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:10:31\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:8:31\n    |\n LL |         ref mut z @ &mut Some(ref a) => {\n    |         ----------------------^^^^^-\n@@ -307,7 +307,7 @@ LL |             **z = None;\n    |             ---------- mutable borrow later used here\n \n error[E0502]: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:48:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:46:9\n    |\n LL |     let ref mut a @ ref b = u();\n    |         ^^^^^^^^^^^^-----\n@@ -319,7 +319,7 @@ LL |     drop(b);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:53:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:51:9\n    |\n LL |     let ref a @ ref mut b = u();\n    |         ^^^^^^^^---------\n@@ -331,7 +331,7 @@ LL |     *b = u();\n    |     -------- mutable borrow later used here\n \n error[E0502]: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:78:20\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:76:20\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |         -----------^^^^^^^^^-\n@@ -343,7 +343,7 @@ LL |             drop(a);\n    |                  - immutable borrow later used here\n \n error[E0502]: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:78:45\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:76:45\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |                                 ------------^^^^^^^^^-\n@@ -355,55 +355,55 @@ LL |             drop(a);\n    |                  - immutable borrow later used here\n \n error[E0594]: cannot assign to `*b`, as it is immutable for the pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:89:61\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:87:61\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false } => {}\n    |                                                             ^^^^^^ cannot assign\n    |\n    = note: variables bound in patterns are immutable until the end of the pattern guard\n \n error[E0594]: cannot assign to `*a`, as it is immutable for the pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:96:61\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:94:61\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); false } => {}\n    |                                                             ^^^^^^^^^^^ cannot assign\n    |\n    = note: variables bound in patterns are immutable until the end of the pattern guard\n \n error[E0507]: cannot move out of `b` in pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:103:66\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:101:66\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n    |                                                                  ^ move occurs because `b` has type `&mut U`, which does not implement the `Copy` trait\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n error[E0507]: cannot move out of `b` in pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:103:66\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:101:66\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n    |                                                                  ^ move occurs because `b` has type `&mut U`, which does not implement the `Copy` trait\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n error[E0507]: cannot move out of `a` in pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:111:66\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:109:66\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n    |                                                                  ^ move occurs because `a` has type `&mut Result<U, U>`, which does not implement the `Copy` trait\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n error[E0507]: cannot move out of `a` in pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:111:66\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:109:66\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n    |                                                                  ^ move occurs because `a` has type `&mut Result<U, U>`, which does not implement the `Copy` trait\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n error[E0502]: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:119:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:117:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         ^^^^^^^^^---------^^^^^^^^^^^^\n@@ -415,7 +415,7 @@ LL |     *b = U;\n    |     ------ mutable borrow later used here\n \n error[E0502]: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:125:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:123:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         ^^^^^^^^^---------^^^^^^^^^^^^\n@@ -427,7 +427,7 @@ LL |     *b = U;\n    |     ------ mutable borrow later used here\n \n error[E0502]: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:131:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:129:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         ^^^^^^^^^---------^^^^^^^^^^^^\n@@ -439,7 +439,7 @@ LL |     *b = U;\n    |     ------ mutable borrow later used here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:30:30\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:28:30\n    |\n LL |     fn f4_also_moved(ref a @ ref mut b @ c: U) {}\n    |                      --------^^^^^^^^^^^^-"}, {"sha": "99739c7bce0412091437e44209c35053875ca428", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-twice.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.rs?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -1,7 +1,5 @@\n // Test that `ref mut x @ ref mut y` and varieties of that are not allowed.\n \n-#![feature(bindings_after_at)]\n-\n fn main() {\n     struct U;\n "}, {"sha": "aa02230419b5e4956577a2b7cb0319c66a98feb8", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-twice.stderr", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -1,5 +1,5 @@\n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:28:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:26:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n@@ -8,7 +8,7 @@ LL |     let ref mut a @ ref mut b = U;\n    |         first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:31:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:29:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n@@ -17,7 +17,7 @@ LL |     let ref mut a @ ref mut b = U;\n    |         first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:35:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:33:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n@@ -26,7 +26,7 @@ LL |     let ref mut a @ ref mut b = U;\n    |         first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:38:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:36:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n@@ -35,7 +35,7 @@ LL |     let ref mut a @ ref mut b = U;\n    |         first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:41:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:39:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n@@ -44,7 +44,7 @@ LL |     let ref mut a @ ref mut b = U;\n    |         first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:46:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:44:9\n    |\n LL |       let ref mut a @ (\n    |           ^--------\n@@ -66,7 +66,7 @@ LL | |     ) = (U, [U, U, U]);\n    | |_____^\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:56:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:54:9\n    |\n LL |       let ref mut a @ (\n    |           ^--------\n@@ -88,7 +88,7 @@ LL | |         ) = (u(), [u(), u(), u()]);\n    | |_________^\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:66:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:64:9\n    |\n LL |     let a @ (ref mut b, ref mut c) = (U, U);\n    |         -^^^^---------^^---------^\n@@ -99,7 +99,7 @@ LL |     let a @ (ref mut b, ref mut c) = (U, U);\n    |         move occurs because `a` has type `(U, U)` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:69:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:67:9\n    |\n LL |     let a @ (b, [c, d]) = &mut val; // Same as ^--\n    |         -^^^^-^^^-^^-^^\n@@ -111,7 +111,7 @@ LL |     let a @ (b, [c, d]) = &mut val; // Same as ^--\n    |         move occurs because `a` has type `&mut (U, [U; 2])` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:72:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:70:9\n    |\n LL |     let a @ &mut ref mut b = &mut U;\n    |         -^^^^^^^^---------\n@@ -121,7 +121,7 @@ LL |     let a @ &mut ref mut b = &mut U;\n    |         move occurs because `a` has type `&mut U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:74:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:72:9\n    |\n LL |     let a @ &mut (ref mut b, ref mut c) = &mut (U, U);\n    |         -^^^^^^^^^---------^^---------^\n@@ -132,7 +132,7 @@ LL |     let a @ &mut (ref mut b, ref mut c) = &mut (U, U);\n    |         move occurs because `a` has type `&mut (U, U)` which does not implement the `Copy` trait\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:78:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:76:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------^^^^^^---------^\n@@ -141,7 +141,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:78:37\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:76:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ---------^^^^^^^---------^\n@@ -150,7 +150,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:84:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:82:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------^^^^^^---------^\n@@ -159,7 +159,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:84:37\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:82:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ---------^^^^^^^---------^\n@@ -168,7 +168,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:91:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:89:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------^^^^^^---------^\n@@ -177,7 +177,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:91:37\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:89:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ---------^^^^^^^---------^\n@@ -186,7 +186,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:103:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:101:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------^^^^^^---------^\n@@ -195,7 +195,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:103:37\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:101:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ---------^^^^^^^---------^\n@@ -204,7 +204,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:10:11\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:8:11\n    |\n LL |     fn f1(ref mut a @ ref mut b: U) {}\n    |           ---------^^^---------\n@@ -213,7 +213,7 @@ LL |     fn f1(ref mut a @ ref mut b: U) {}\n    |           first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:12:11\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:10:11\n    |\n LL |     fn f2(ref mut a @ ref mut b: U) {}\n    |           ---------^^^---------\n@@ -222,7 +222,7 @@ LL |     fn f2(ref mut a @ ref mut b: U) {}\n    |           first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:15:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:13:9\n    |\n LL |           ref mut a @ [\n    |           ^--------\n@@ -240,7 +240,7 @@ LL | |         ] : [[U; 4]; 5]\n    | |_________^\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:23:22\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:21:22\n    |\n LL |     fn f4_also_moved(ref mut a @ ref mut b @ c: U) {}\n    |                      ---------^^^-------------\n@@ -250,7 +250,7 @@ LL |     fn f4_also_moved(ref mut a @ ref mut b @ c: U) {}\n    |                      first mutable borrow, by `a`, occurs here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:23:34\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:21:34\n    |\n LL |     fn f4_also_moved(ref mut a @ ref mut b @ c: U) {}\n    |                                  ---------^^^-\n@@ -259,7 +259,7 @@ LL |     fn f4_also_moved(ref mut a @ ref mut b @ c: U) {}\n    |                                  value borrowed, by `b`, here\n \n error[E0499]: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:31:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:29:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ^^^^^^^^^^^^---------\n@@ -271,7 +271,7 @@ LL |     drop(b);\n    |          - first borrow later used here\n \n error[E0499]: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:41:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:39:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ^^^^^^^^^^^^---------\n@@ -283,7 +283,7 @@ LL |     *b = U;\n    |     ------ first borrow later used here\n \n error[E0499]: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:91:24\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:89:24\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------------^^^^^^^^^-\n@@ -295,7 +295,7 @@ LL |             *a = Err(U);\n    |             ----------- first borrow later used here\n \n error[E0499]: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:91:53\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:89:53\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ----------------^^^^^^^^^-\n@@ -307,7 +307,7 @@ LL |             *a = Err(U);\n    |             ----------- first borrow later used here\n \n error[E0499]: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:103:24\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:101:24\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------------^^^^^^^^^-\n@@ -319,7 +319,7 @@ LL |             drop(a);\n    |                  - first borrow later used here\n \n error[E0499]: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:103:53\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:101:53\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ----------------^^^^^^^^^-\n@@ -331,7 +331,7 @@ LL |             drop(a);\n    |                  - first borrow later used here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:23:34\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:21:34\n    |\n LL |     fn f4_also_moved(ref mut a @ ref mut b @ c: U) {}\n    |                      ------------^^^^^^^^^^^^-"}, {"sha": "9db37253c5368f862d56853178d697c99fb98835", "filename": "src/test/ui/pattern/bindings-after-at/box-patterns.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbox-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbox-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbox-patterns.rs?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -2,7 +2,6 @@\n \n // run-pass\n \n-#![feature(bindings_after_at)]\n #![feature(box_patterns)]\n \n #[derive(Debug, PartialEq)]"}, {"sha": "1e2c2968c4b7aef54066556d366c265d76492365", "filename": "src/test/ui/pattern/bindings-after-at/copy-and-move-mixed.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.rs?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -1,7 +1,5 @@\n // Test that mixing `Copy` and non-`Copy` types in `@` patterns is forbidden.\n \n-#![feature(bindings_after_at)]\n-\n #[derive(Copy, Clone)]\n struct C;\n "}, {"sha": "d290144b6155a6fa9cbf449c530737a8460f3200", "filename": "src/test/ui/pattern/bindings-after-at/copy-and-move-mixed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.stderr?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of partially moved value\n-  --> $DIR/copy-and-move-mixed.rs:14:9\n+  --> $DIR/copy-and-move-mixed.rs:12:9\n    |\n LL |     let a @ NC(b, c @ NC(d, e)) = NC(C, NC(C, C));\n    |         ^^^^^^^^^^------------^"}, {"sha": "dfd4d02854dac2b3ee0de1affbb5124055cd896e", "filename": "src/test/ui/pattern/bindings-after-at/default-binding-modes-both-sides-independent.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.rs?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -7,7 +7,6 @@\n // If `binding` is allowed to influence `subpat`,\n // this would create problems for the generalization aforementioned.\n \n-#![feature(bindings_after_at)]\n \n fn main() {\n     struct NotCopy;"}, {"sha": "d78faa682b5078f5590a78e8743183de2597cd84", "filename": "src/test/ui/pattern/bindings-after-at/default-binding-modes-both-sides-independent.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -1,5 +1,5 @@\n error: cannot move out of value because it is borrowed\n-  --> $DIR/default-binding-modes-both-sides-independent.rs:27:9\n+  --> $DIR/default-binding-modes-both-sides-independent.rs:26:9\n    |\n LL |     let ref a @ b = NotCopy;\n    |         -----^^^-\n@@ -8,7 +8,7 @@ LL |     let ref a @ b = NotCopy;\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/default-binding-modes-both-sides-independent.rs:30:9\n+  --> $DIR/default-binding-modes-both-sides-independent.rs:29:9\n    |\n LL |     let ref mut a @ b = NotCopy;\n    |         ---------^^^-\n@@ -17,7 +17,7 @@ LL |     let ref mut a @ b = NotCopy;\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/default-binding-modes-both-sides-independent.rs:35:12\n+  --> $DIR/default-binding-modes-both-sides-independent.rs:34:12\n    |\n LL |         Ok(ref a @ b) | Err(b @ ref a) => {\n    |            -----^^^-\n@@ -26,7 +26,7 @@ LL |         Ok(ref a @ b) | Err(b @ ref a) => {\n    |            value borrowed, by `a`, here\n \n error: borrow of moved value\n-  --> $DIR/default-binding-modes-both-sides-independent.rs:35:29\n+  --> $DIR/default-binding-modes-both-sides-independent.rs:34:29\n    |\n LL |         Ok(ref a @ b) | Err(b @ ref a) => {\n    |                             -^^^-----\n@@ -36,7 +36,7 @@ LL |         Ok(ref a @ b) | Err(b @ ref a) => {\n    |                             move occurs because `b` has type `NotCopy` which does not implement the `Copy` trait\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/default-binding-modes-both-sides-independent.rs:43:9\n+  --> $DIR/default-binding-modes-both-sides-independent.rs:42:9\n    |\n LL |         ref a @ b => {\n    |         -----^^^-\n@@ -45,7 +45,7 @@ LL |         ref a @ b => {\n    |         value borrowed, by `a`, here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/default-binding-modes-both-sides-independent.rs:30:9\n+  --> $DIR/default-binding-modes-both-sides-independent.rs:29:9\n    |\n LL |     let ref mut a @ b = NotCopy;\n    |         ^^^^^^^^^^^^-   ------- move occurs because value has type `NotCopy`, which does not implement the `Copy` trait"}, {"sha": "d655f15af1ebab8300b94d8197dc707df7d05dbf", "filename": "src/test/ui/pattern/bindings-after-at/feature-gate-bindings_after_at.rs", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7d6bf861f8c264d3d5a023e4a20c6007d1ee9018/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Ffeature-gate-bindings_after_at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d6bf861f8c264d3d5a023e4a20c6007d1ee9018/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Ffeature-gate-bindings_after_at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Ffeature-gate-bindings_after_at.rs?ref=7d6bf861f8c264d3d5a023e4a20c6007d1ee9018", "patch": "@@ -1,3 +0,0 @@\n-fn main() {\n-    let x @ y = 0; //~ ERROR pattern bindings after an `@` are unstable\n-}"}, {"sha": "b976ef4861e3729aa49ed7d5ba4928ee7881764d", "filename": "src/test/ui/pattern/bindings-after-at/feature-gate-bindings_after_at.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7d6bf861f8c264d3d5a023e4a20c6007d1ee9018/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Ffeature-gate-bindings_after_at.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d6bf861f8c264d3d5a023e4a20c6007d1ee9018/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Ffeature-gate-bindings_after_at.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Ffeature-gate-bindings_after_at.stderr?ref=7d6bf861f8c264d3d5a023e4a20c6007d1ee9018", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: pattern bindings after an `@` are unstable\n-  --> $DIR/feature-gate-bindings_after_at.rs:2:13\n-   |\n-LL |     let x @ y = 0;\n-   |             ^\n-   |\n-   = note: see issue #65490 <https://github.com/rust-lang/rust/issues/65490> for more information\n-   = help: add `#![feature(bindings_after_at)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "fe7d1eba1d9f26577a2532a5c56aedd7adb6a04a", "filename": "src/test/ui/pattern/bindings-after-at/nested-binding-mode-lint.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-binding-mode-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-binding-mode-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-binding-mode-lint.rs?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -1,6 +1,5 @@\n // check-pass\n \n-#![feature(bindings_after_at)]\n #![deny(unused_mut)]\n \n fn main() {"}, {"sha": "e7d99534d6ab05c129f36ddc4d44cbb17dd454fa", "filename": "src/test/ui/pattern/bindings-after-at/nested-binding-modes-mut.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-binding-modes-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-binding-modes-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-binding-modes-mut.rs?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -1,5 +1,3 @@\n-#![feature(bindings_after_at)]\n-\n fn main() {\n     let mut is_mut @ not_mut = 42;\n     &mut is_mut;"}, {"sha": "3180bd0afc10492fecd61808999343a6e57e4c58", "filename": "src/test/ui/pattern/bindings-after-at/nested-binding-modes-mut.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-binding-modes-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-binding-modes-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-binding-modes-mut.stderr?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -1,5 +1,5 @@\n error[E0596]: cannot borrow `not_mut` as mutable, as it is not declared as mutable\n-  --> $DIR/nested-binding-modes-mut.rs:6:5\n+  --> $DIR/nested-binding-modes-mut.rs:4:5\n    |\n LL |     let mut is_mut @ not_mut = 42;\n    |                      ------- help: consider changing this to be mutable: `mut not_mut`\n@@ -8,7 +8,7 @@ LL |     &mut not_mut;\n    |     ^^^^^^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `not_mut` as mutable, as it is not declared as mutable\n-  --> $DIR/nested-binding-modes-mut.rs:11:5\n+  --> $DIR/nested-binding-modes-mut.rs:9:5\n    |\n LL |     let not_mut @ mut is_mut = 42;\n    |         -------------------- help: consider changing this to be mutable: `mut not_mut`"}, {"sha": "adfb0387f46a24720cfebaf34300edad063b427d", "filename": "src/test/ui/pattern/bindings-after-at/nested-binding-modes-ref.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-binding-modes-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-binding-modes-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-binding-modes-ref.rs?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -1,5 +1,3 @@\n-#![feature(bindings_after_at)]\n-\n fn main() {\n     let ref is_ref @ is_val = 42;\n     *is_ref;"}, {"sha": "b378fe356ce102b8e339a3384245587cec3ce304", "filename": "src/test/ui/pattern/bindings-after-at/nested-binding-modes-ref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-binding-modes-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-binding-modes-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-binding-modes-ref.stderr?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -1,11 +1,11 @@\n error[E0614]: type `{integer}` cannot be dereferenced\n-  --> $DIR/nested-binding-modes-ref.rs:6:5\n+  --> $DIR/nested-binding-modes-ref.rs:4:5\n    |\n LL |     *is_val;\n    |     ^^^^^^^\n \n error[E0614]: type `{integer}` cannot be dereferenced\n-  --> $DIR/nested-binding-modes-ref.rs:11:5\n+  --> $DIR/nested-binding-modes-ref.rs:9:5\n    |\n LL |     *is_val;\n    |     ^^^^^^^"}, {"sha": "f06563d56cb06df497dd1279cb43b8272d70fb8f", "filename": "src/test/ui/pattern/bindings-after-at/nested-patterns.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-patterns.rs?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n \n-#![feature(bindings_after_at)]\n \n struct A { a: u8, b: u8 }\n "}, {"sha": "5c7769ce604cf6606e67192893f074dd1857b45f", "filename": "src/test/ui/pattern/bindings-after-at/nested-type-ascription-syntactically-invalid.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-type-ascription-syntactically-invalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-type-ascription-syntactically-invalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-type-ascription-syntactically-invalid.rs?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -1,7 +1,6 @@\n // Here we check that type ascription is syntactically invalid when\n // not in the top position of a ascribing a let binding or function parameter.\n \n-#![feature(bindings_after_at)]\n \n // This has no effect.\n // We include it to demonstrate that this is the case:"}, {"sha": "27660ae406e291b5cd6a7c219cc507172ae9903d", "filename": "src/test/ui/pattern/bindings-after-at/nested-type-ascription-syntactically-invalid.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-type-ascription-syntactically-invalid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-type-ascription-syntactically-invalid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-type-ascription-syntactically-invalid.stderr?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -1,23 +1,23 @@\n error: expected one of `!`, `(`, `+`, `::`, `;`, `<`, or `=`, found `@`\n-  --> $DIR/nested-type-ascription-syntactically-invalid.rs:19:15\n+  --> $DIR/nested-type-ascription-syntactically-invalid.rs:18:15\n    |\n LL |     let a: u8 @ b = 0;\n    |               ^ expected one of 7 possible tokens\n \n error: expected one of `)`, `,`, `@`, or `|`, found `:`\n-  --> $DIR/nested-type-ascription-syntactically-invalid.rs:25:15\n+  --> $DIR/nested-type-ascription-syntactically-invalid.rs:24:15\n    |\n LL |     let a @ (b: u8);\n    |               ^ expected one of `)`, `,`, `@`, or `|`\n \n error: expected one of `!`, `(`, `+`, `::`, `;`, `<`, or `=`, found `)`\n-  --> $DIR/nested-type-ascription-syntactically-invalid.rs:25:19\n+  --> $DIR/nested-type-ascription-syntactically-invalid.rs:24:19\n    |\n LL |     let a @ (b: u8);\n    |                   ^ expected one of 7 possible tokens\n \n error: expected one of `!`, `(`, `+`, `::`, `;`, `<`, or `=`, found `@`\n-  --> $DIR/nested-type-ascription-syntactically-invalid.rs:32:15\n+  --> $DIR/nested-type-ascription-syntactically-invalid.rs:31:15\n    |\n LL |     let a: T1 @ Outer(b: T2);\n    |               ^ expected one of 7 possible tokens"}, {"sha": "383e377a5ebbb45b8c0cfb8885d2fab99d1f5a9b", "filename": "src/test/ui/pattern/bindings-after-at/or-patterns-box-patterns.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2For-patterns-box-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2For-patterns-box-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2For-patterns-box-patterns.rs?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -2,7 +2,6 @@\n \n // run-pass\n \n-#![feature(bindings_after_at)]\n #![feature(box_patterns)]\n \n #[derive(Debug, PartialEq)]"}, {"sha": "d315f7ee3b68a60b0cd84b5ec192f7d27eea55f1", "filename": "src/test/ui/pattern/bindings-after-at/or-patterns-slice-patterns.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2For-patterns-slice-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2For-patterns-slice-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2For-patterns-slice-patterns.rs?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -2,7 +2,6 @@\n \n // run-pass\n \n-#![feature(bindings_after_at)]\n \n #[derive(Debug, PartialEq)]\n enum MatchArm {"}, {"sha": "fcc361489994fb29aad4a36bc08e69fe8de4f27b", "filename": "src/test/ui/pattern/bindings-after-at/or-patterns.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2For-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2For-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2For-patterns.rs?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -2,7 +2,6 @@\n \n // run-pass\n \n-#![feature(bindings_after_at)]\n \n #[derive(Debug, PartialEq)]\n enum MatchArm {"}, {"sha": "f167a3952ee9c3885e50d7a7c0178bf56c4a2319", "filename": "src/test/ui/pattern/bindings-after-at/pat-at-same-name-both.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fpat-at-same-name-both.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fpat-at-same-name-both.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fpat-at-same-name-both.rs?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -1,7 +1,6 @@\n // Test that `binding @ subpat` acts as a product context with respect to duplicate binding names.\n // The code that is tested here lives in resolve (see `resolve_pattern_inner`).\n \n-#![feature(bindings_after_at)]\n \n fn main() {\n     fn f(a @ a @ a: ()) {}"}, {"sha": "a165549f6b436c85f97eac61aea7f2155e261fcb", "filename": "src/test/ui/pattern/bindings-after-at/pat-at-same-name-both.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fpat-at-same-name-both.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fpat-at-same-name-both.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fpat-at-same-name-both.stderr?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -1,59 +1,59 @@\n error[E0415]: identifier `a` is bound more than once in this parameter list\n-  --> $DIR/pat-at-same-name-both.rs:7:14\n+  --> $DIR/pat-at-same-name-both.rs:6:14\n    |\n LL |     fn f(a @ a @ a: ()) {}\n    |              ^ used as parameter more than once\n \n error[E0415]: identifier `a` is bound more than once in this parameter list\n-  --> $DIR/pat-at-same-name-both.rs:7:18\n+  --> $DIR/pat-at-same-name-both.rs:6:18\n    |\n LL |     fn f(a @ a @ a: ()) {}\n    |                  ^ used as parameter more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/pat-at-same-name-both.rs:12:20\n+  --> $DIR/pat-at-same-name-both.rs:11:20\n    |\n LL |         Ok(a @ b @ a)\n    |                    ^ used in a pattern more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/pat-at-same-name-both.rs:14:23\n+  --> $DIR/pat-at-same-name-both.rs:13:23\n    |\n LL |         | Err(a @ b @ a)\n    |                       ^ used in a pattern more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/pat-at-same-name-both.rs:19:13\n+  --> $DIR/pat-at-same-name-both.rs:18:13\n    |\n LL |     let a @ a @ a = ();\n    |             ^ used in a pattern more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/pat-at-same-name-both.rs:19:17\n+  --> $DIR/pat-at-same-name-both.rs:18:17\n    |\n LL |     let a @ a @ a = ();\n    |                 ^ used in a pattern more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/pat-at-same-name-both.rs:22:21\n+  --> $DIR/pat-at-same-name-both.rs:21:21\n    |\n LL |     let ref a @ ref a = ();\n    |                     ^ used in a pattern more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/pat-at-same-name-both.rs:24:29\n+  --> $DIR/pat-at-same-name-both.rs:23:29\n    |\n LL |     let ref mut a @ ref mut a = ();\n    |                             ^ used in a pattern more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/pat-at-same-name-both.rs:27:17\n+  --> $DIR/pat-at-same-name-both.rs:26:17\n    |\n LL |     let a @ (Ok(a) | Err(a)) = Ok(());\n    |                 ^ used in a pattern more than once\n \n error[E0416]: identifier `a` is bound more than once in the same pattern\n-  --> $DIR/pat-at-same-name-both.rs:27:26\n+  --> $DIR/pat-at-same-name-both.rs:26:26\n    |\n LL |     let a @ (Ok(a) | Err(a)) = Ok(());\n    |                          ^ used in a pattern more than once"}, {"sha": "4f4c96e450b644b7e2a3a6ec5c969b9287b550ae", "filename": "src/test/ui/pattern/bindings-after-at/slice-patterns.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fslice-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fslice-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fslice-patterns.rs?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -2,7 +2,6 @@\n \n // run-pass\n \n-#![feature(bindings_after_at)]\n \n #[derive(Debug, PartialEq)]\n enum MatchArm {"}, {"sha": "ff7b625a68e4a82eddfcdc9ec56cf8c267110a42", "filename": "src/test/ui/pattern/move-ref-patterns/by-move-sub-pat-unreachable.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fby-move-sub-pat-unreachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998cfe5aad7c21eb19a4bca50f05a13354706970/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fby-move-sub-pat-unreachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fby-move-sub-pat-unreachable.rs?ref=998cfe5aad7c21eb19a4bca50f05a13354706970", "patch": "@@ -4,8 +4,6 @@\n \n // check-pass\n \n-#![feature(bindings_after_at)]\n-\n fn main() {\n     return;\n "}]}