{"sha": "969f588025ab2c3224757e282ef78a546c4f56c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2OWY1ODgwMjVhYjJjMzIyNDc1N2UyODJlZjc4YTU0NmM0ZjU2YzQ=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-01-19T17:58:04Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-01-19T17:58:04Z"}, "message": "Generics -> GenericParams", "tree": {"sha": "0f0059a98b6ac1e9cdba23524ed40e0095da62d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f0059a98b6ac1e9cdba23524ed40e0095da62d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/969f588025ab2c3224757e282ef78a546c4f56c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/969f588025ab2c3224757e282ef78a546c4f56c4", "html_url": "https://github.com/rust-lang/rust/commit/969f588025ab2c3224757e282ef78a546c4f56c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/969f588025ab2c3224757e282ef78a546c4f56c4/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e4b5ecec4fa4f6a20bb4d47f09de602e9c29608", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e4b5ecec4fa4f6a20bb4d47f09de602e9c29608", "html_url": "https://github.com/rust-lang/rust/commit/9e4b5ecec4fa4f6a20bb4d47f09de602e9c29608"}], "stats": {"total": 82, "additions": 41, "deletions": 41}, "files": [{"sha": "88eda5ed0fd31088e856df08bda0b4e239d88d83", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/969f588025ab2c3224757e282ef78a546c4f56c4/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/969f588025ab2c3224757e282ef78a546c4f56c4/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=969f588025ab2c3224757e282ef78a546c4f56c4", "patch": "@@ -12,7 +12,7 @@ use crate::{\n     expr::BodySyntaxMapping,\n     ty::InferenceResult,\n     adt::VariantData,\n-    generics::Generics,\n+    generics::GenericParams,\n     code_model_impl::def_id_to_ast,\n };\n \n@@ -203,8 +203,8 @@ impl Struct {\n         def_id_to_ast(db, self.def_id)\n     }\n \n-    pub fn generics(&self, db: &impl HirDatabase) -> Arc<Generics> {\n-        db.generics(self.def_id)\n+    pub fn generic_params(&self, db: &impl HirDatabase) -> Arc<GenericParams> {\n+        db.generic_params(self.def_id)\n     }\n }\n \n@@ -234,8 +234,8 @@ impl Enum {\n         def_id_to_ast(db, self.def_id)\n     }\n \n-    pub fn generics(&self, db: &impl HirDatabase) -> Arc<Generics> {\n-        db.generics(self.def_id)\n+    pub fn generic_params(&self, db: &impl HirDatabase) -> Arc<GenericParams> {\n+        db.generic_params(self.def_id)\n     }\n }\n \n@@ -349,8 +349,8 @@ impl Function {\n         db.infer(self.def_id)\n     }\n \n-    pub fn generics(&self, db: &impl HirDatabase) -> Arc<Generics> {\n-        db.generics(self.def_id)\n+    pub fn generic_params(&self, db: &impl HirDatabase) -> Arc<GenericParams> {\n+        db.generic_params(self.def_id)\n     }\n }\n \n@@ -398,8 +398,8 @@ impl Trait {\n         def_id_to_ast(db, self.def_id)\n     }\n \n-    pub fn generics(&self, db: &impl HirDatabase) -> Arc<Generics> {\n-        db.generics(self.def_id)\n+    pub fn generic_params(&self, db: &impl HirDatabase) -> Arc<GenericParams> {\n+        db.generic_params(self.def_id)\n     }\n }\n \n@@ -417,7 +417,7 @@ impl Type {\n         def_id_to_ast(db, self.def_id)\n     }\n \n-    pub fn generics(&self, db: &impl HirDatabase) -> Arc<Generics> {\n-        db.generics(self.def_id)\n+    pub fn generic_params(&self, db: &impl HirDatabase) -> Arc<GenericParams> {\n+        db.generic_params(self.def_id)\n     }\n }"}, {"sha": "f383701d7710d298a1959b7253e8929a266b90d6", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/969f588025ab2c3224757e282ef78a546c4f56c4/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/969f588025ab2c3224757e282ef78a546c4f56c4/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=969f588025ab2c3224757e282ef78a546c4f56c4", "patch": "@@ -14,7 +14,7 @@ use crate::{\n     ty::{InferenceResult, Ty, method_resolution::CrateImplBlocks},\n     adt::{StructData, EnumData, EnumVariantData},\n     impl_block::ModuleImplBlocks,\n-    generics::Generics,\n+    generics::GenericParams,\n };\n \n #[salsa::query_group]\n@@ -102,8 +102,8 @@ pub trait HirDatabase:\n     #[salsa::invoke(crate::expr::body_syntax_mapping)]\n     fn body_syntax_mapping(&self, def_id: DefId) -> Arc<crate::expr::BodySyntaxMapping>;\n \n-    #[salsa::invoke(crate::generics::Generics::generics_query)]\n-    fn generics(&self, def_id: DefId) -> Arc<Generics>;\n+    #[salsa::invoke(crate::generics::GenericParams::generic_params_query)]\n+    fn generic_params(&self, def_id: DefId) -> Arc<GenericParams>;\n \n     #[salsa::invoke(crate::FnSignature::fn_signature_query)]\n     fn fn_signature(&self, def_id: DefId) -> Arc<FnSignature>;"}, {"sha": "d8248ad4917ddcff0f8195ec2286333d535693fb", "filename": "crates/ra_hir/src/generics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/969f588025ab2c3224757e282ef78a546c4f56c4/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/969f588025ab2c3224757e282ef78a546c4f56c4/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fgenerics.rs?ref=969f588025ab2c3224757e282ef78a546c4f56c4", "patch": "@@ -18,14 +18,14 @@ pub struct GenericParam {\n \n /// Data about the generic parameters of a function, struct, impl, etc.\n #[derive(Clone, PartialEq, Eq, Debug, Default)]\n-pub struct Generics {\n+pub struct GenericParams {\n     pub(crate) params: Vec<GenericParam>,\n }\n \n-impl Generics {\n-    pub(crate) fn generics_query(db: &impl HirDatabase, def_id: DefId) -> Arc<Generics> {\n+impl GenericParams {\n+    pub(crate) fn generic_params_query(db: &impl HirDatabase, def_id: DefId) -> Arc<GenericParams> {\n         let (_file_id, node) = def_id.source(db);\n-        let mut generics = Generics::default();\n+        let mut generics = GenericParams::default();\n         if let Some(type_param_list) = node.children().find_map(TypeParamList::cast) {\n             for (idx, type_param) in type_param_list.type_params().enumerate() {\n                 let name = type_param"}, {"sha": "6e6f2f04bd21fb0c229be1ca1178d38a28258d29", "filename": "crates/ra_hir/src/mock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/969f588025ab2c3224757e282ef78a546c4f56c4/crates%2Fra_hir%2Fsrc%2Fmock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/969f588025ab2c3224757e282ef78a546c4f56c4/crates%2Fra_hir%2Fsrc%2Fmock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmock.rs?ref=969f588025ab2c3224757e282ef78a546c4f56c4", "patch": "@@ -243,7 +243,7 @@ salsa::database_storage! {\n             fn body_hir() for db::BodyHirQuery;\n             fn body_syntax_mapping() for db::BodySyntaxMappingQuery;\n             fn fn_signature() for db::FnSignatureQuery;\n-            fn generics() for db::GenericsQuery;\n+            fn generic_params() for db::GenericParamsQuery;\n         }\n     }\n }"}, {"sha": "3170ed24eb44621c8cfd5d4d6b3e1fb46f08ab5f", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/969f588025ab2c3224757e282ef78a546c4f56c4/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/969f588025ab2c3224757e282ef78a546c4f56c4/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=969f588025ab2c3224757e282ef78a546c4f56c4", "patch": "@@ -37,7 +37,7 @@ use crate::{\n     type_ref::{TypeRef, Mutability},\n     name::KnownName,\n     expr::{Body, Expr, BindingAnnotation, Literal, ExprId, Pat, PatId, UnaryOp, BinaryOp, Statement, FieldPat},\n-    generics::Generics,\n+    generics::GenericParams,\n     path::GenericArg,\n };\n \n@@ -283,7 +283,7 @@ impl Ty {\n         // resolver architecture\n         module: &Module,\n         impl_block: Option<&ImplBlock>,\n-        generics: &Generics,\n+        generics: &GenericParams,\n         type_ref: &TypeRef,\n     ) -> Self {\n         match type_ref {\n@@ -335,7 +335,7 @@ impl Ty {\n         db: &impl HirDatabase,\n         module: &Module,\n         impl_block: Option<&ImplBlock>,\n-        generics: &Generics,\n+        generics: &GenericParams,\n         type_ref: Option<&TypeRef>,\n     ) -> Self {\n         type_ref.map_or(Ty::Unknown, |t| {\n@@ -347,7 +347,7 @@ impl Ty {\n         db: &impl HirDatabase,\n         module: &Module,\n         impl_block: Option<&ImplBlock>,\n-        generics: &Generics,\n+        generics: &GenericParams,\n         path: &Path,\n     ) -> Self {\n         if let Some(name) = path.as_ident() {\n@@ -357,7 +357,7 @@ impl Ty {\n                 return Ty::Float(float_ty);\n             } else if name.as_known_name() == Some(KnownName::SelfType) {\n                 // TODO pass the impl block's generics?\n-                let generics = &Generics::default();\n+                let generics = &GenericParams::default();\n                 return Ty::from_hir_opt(\n                     db,\n                     module,\n@@ -397,7 +397,7 @@ impl Ty {\n         // the scope of the segment...\n         module: &Module,\n         impl_block: Option<&ImplBlock>,\n-        outer_generics: &Generics,\n+        outer_generics: &GenericParams,\n         path: &Path,\n         resolved: DefId,\n     ) -> Substs {\n@@ -408,10 +408,10 @@ impl Ty {\n             .last()\n             .expect(\"path should have at least one segment\");\n         let (def_generics, segment) = match def {\n-            Def::Struct(s) => (s.generics(db), last),\n-            Def::Enum(e) => (e.generics(db), last),\n-            Def::Function(f) => (f.generics(db), last),\n-            Def::Trait(t) => (t.generics(db), last),\n+            Def::Struct(s) => (s.generic_params(db), last),\n+            Def::Enum(e) => (e.generic_params(db), last),\n+            Def::Function(f) => (f.generic_params(db), last),\n+            Def::Trait(t) => (t.generic_params(db), last),\n             Def::EnumVariant(ev) => {\n                 // the generic args for an enum variant may be either specified\n                 // on the segment referring to the enum, or on the segment\n@@ -426,7 +426,7 @@ impl Ty {\n                     // Option::None::<T>\n                     last\n                 };\n-                (ev.parent_enum(db).generics(db), segment)\n+                (ev.parent_enum(db).generic_params(db), segment)\n             }\n             _ => return Substs::empty(),\n         };\n@@ -607,7 +607,7 @@ fn type_for_fn(db: &impl HirDatabase, f: Function) -> Ty {\n     let signature = f.signature(db);\n     let module = f.module(db);\n     let impl_block = f.impl_block(db);\n-    let generics = f.generics(db);\n+    let generics = f.generic_params(db);\n     let input = signature\n         .params()\n         .iter()\n@@ -624,7 +624,7 @@ fn type_for_fn(db: &impl HirDatabase, f: Function) -> Ty {\n     Ty::FnPtr(Arc::new(sig))\n }\n \n-fn make_substs(generics: &Generics) -> Substs {\n+fn make_substs(generics: &GenericParams) -> Substs {\n     Substs(\n         generics\n             .params\n@@ -636,7 +636,7 @@ fn make_substs(generics: &Generics) -> Substs {\n }\n \n fn type_for_struct(db: &impl HirDatabase, s: Struct) -> Ty {\n-    let generics = s.generics(db);\n+    let generics = s.generic_params(db);\n     Ty::Adt {\n         def_id: s.def_id(),\n         name: s.name(db).unwrap_or_else(Name::missing),\n@@ -645,7 +645,7 @@ fn type_for_struct(db: &impl HirDatabase, s: Struct) -> Ty {\n }\n \n pub(crate) fn type_for_enum(db: &impl HirDatabase, s: Enum) -> Ty {\n-    let generics = s.generics(db);\n+    let generics = s.generic_params(db);\n     Ty::Adt {\n         def_id: s.def_id(),\n         name: s.name(db).unwrap_or_else(Name::missing),\n@@ -684,8 +684,8 @@ pub(super) fn type_for_def(db: &impl HirDatabase, def_id: DefId) -> Ty {\n pub(super) fn type_for_field(db: &impl HirDatabase, def_id: DefId, field: Name) -> Option<Ty> {\n     let def = def_id.resolve(db);\n     let (variant_data, generics) = match def {\n-        Def::Struct(s) => (s.variant_data(db), s.generics(db)),\n-        Def::EnumVariant(ev) => (ev.variant_data(db), ev.parent_enum(db).generics(db)),\n+        Def::Struct(s) => (s.variant_data(db), s.generic_params(db)),\n+        Def::EnumVariant(ev) => (ev.variant_data(db), ev.parent_enum(db).generic_params(db)),\n         // TODO: unions\n         _ => panic!(\n             \"trying to get type for field in non-struct/variant {:?}\",\n@@ -880,7 +880,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n \n     fn make_ty(&mut self, type_ref: &TypeRef) -> Ty {\n         // TODO provide generics of function\n-        let generics = Generics::default();\n+        let generics = GenericParams::default();\n         let ty = Ty::from_hir(\n             self.db,\n             &self.module,\n@@ -1075,7 +1075,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         };\n         // TODO remove the duplication between here and `Ty::from_path`?\n         // TODO provide generics of function\n-        let generics = Generics::default();\n+        let generics = GenericParams::default();\n         let substs = Ty::substs_from_path(\n             self.db,\n             &self.module,"}, {"sha": "9f65c5fe1da713a9936c4f91a011cda9fefd93fa", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/969f588025ab2c3224757e282ef78a546c4f56c4/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/969f588025ab2c3224757e282ef78a546c4f56c4/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=969f588025ab2c3224757e282ef78a546c4f56c4", "patch": "@@ -11,7 +11,7 @@ use ra_db::SourceRootId;\n use crate::{\n     HirDatabase, DefId, module_tree::ModuleId, Module, Crate, Name, Function,\n     impl_block::{ImplId, ImplBlock, ImplItem},\n-    generics::Generics\n+    generics::GenericParams\n };\n use super::Ty;\n \n@@ -69,7 +69,7 @@ impl CrateImplBlocks {\n                 // ignore for now\n             } else {\n                 // TODO provide generics of impl\n-                let generics = Generics::default();\n+                let generics = GenericParams::default();\n                 let target_ty = Ty::from_hir(\n                     db,\n                     &module,"}, {"sha": "a1b6668995f120f0882547099aa37825427201ab", "filename": "crates/ra_ide_api/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/969f588025ab2c3224757e282ef78a546c4f56c4/crates%2Fra_ide_api%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/969f588025ab2c3224757e282ef78a546c4f56c4/crates%2Fra_ide_api%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdb.rs?ref=969f588025ab2c3224757e282ef78a546c4f56c4", "patch": "@@ -129,7 +129,7 @@ salsa::database_storage! {\n             fn body_hir() for hir::db::BodyHirQuery;\n             fn body_syntax_mapping() for hir::db::BodySyntaxMappingQuery;\n             fn fn_signature() for hir::db::FnSignatureQuery;\n-            fn generics() for hir::db::GenericsQuery;\n+            fn generic_params() for hir::db::GenericParamsQuery;\n         }\n     }\n }"}]}