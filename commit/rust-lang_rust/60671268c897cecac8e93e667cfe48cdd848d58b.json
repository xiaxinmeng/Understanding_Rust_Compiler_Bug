{"sha": "60671268c897cecac8e93e667cfe48cdd848d58b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwNjcxMjY4Yzg5N2NlY2FjOGU5M2U2NjdjZmU0OGNkZDg0OGQ1OGI=", "commit": {"author": {"name": "Daniel Henry-Mantilla", "email": "daniel.henry.mantilla@gmail.com", "date": "2019-10-29T22:32:51Z"}, "committer": {"name": "Daniel Henry-Mantilla", "email": "daniel.henry.mantilla@gmail.com", "date": "2019-10-29T22:56:04Z"}, "message": "Improved MaybeUninit::get_{ref,mut} documentation", "tree": {"sha": "ee3d75010605f88bd9c04eab1308406ef3a155c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee3d75010605f88bd9c04eab1308406ef3a155c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60671268c897cecac8e93e667cfe48cdd848d58b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60671268c897cecac8e93e667cfe48cdd848d58b", "html_url": "https://github.com/rust-lang/rust/commit/60671268c897cecac8e93e667cfe48cdd848d58b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60671268c897cecac8e93e667cfe48cdd848d58b/comments", "author": {"login": "danielhenrymantilla", "id": 9920355, "node_id": "MDQ6VXNlcjk5MjAzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/9920355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielhenrymantilla", "html_url": "https://github.com/danielhenrymantilla", "followers_url": "https://api.github.com/users/danielhenrymantilla/followers", "following_url": "https://api.github.com/users/danielhenrymantilla/following{/other_user}", "gists_url": "https://api.github.com/users/danielhenrymantilla/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielhenrymantilla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielhenrymantilla/subscriptions", "organizations_url": "https://api.github.com/users/danielhenrymantilla/orgs", "repos_url": "https://api.github.com/users/danielhenrymantilla/repos", "events_url": "https://api.github.com/users/danielhenrymantilla/events{/privacy}", "received_events_url": "https://api.github.com/users/danielhenrymantilla/received_events", "type": "User", "site_admin": false}, "committer": {"login": "danielhenrymantilla", "id": 9920355, "node_id": "MDQ6VXNlcjk5MjAzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/9920355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielhenrymantilla", "html_url": "https://github.com/danielhenrymantilla", "followers_url": "https://api.github.com/users/danielhenrymantilla/followers", "following_url": "https://api.github.com/users/danielhenrymantilla/following{/other_user}", "gists_url": "https://api.github.com/users/danielhenrymantilla/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielhenrymantilla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielhenrymantilla/subscriptions", "organizations_url": "https://api.github.com/users/danielhenrymantilla/orgs", "repos_url": "https://api.github.com/users/danielhenrymantilla/repos", "events_url": "https://api.github.com/users/danielhenrymantilla/events{/privacy}", "received_events_url": "https://api.github.com/users/danielhenrymantilla/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd2df8f97db8319e0eea433bfbc68244150d7bea", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd2df8f97db8319e0eea433bfbc68244150d7bea", "html_url": "https://github.com/rust-lang/rust/commit/dd2df8f97db8319e0eea433bfbc68244150d7bea"}], "stats": {"total": 159, "additions": 151, "deletions": 8}, "files": [{"sha": "e72a922a418f57131885fed7470f044b1ea14e36", "filename": "src/libcore/mem/maybe_uninit.rs", "status": "modified", "additions": 151, "deletions": 8, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/60671268c897cecac8e93e667cfe48cdd848d58b/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60671268c897cecac8e93e667cfe48cdd848d58b/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs?ref=60671268c897cecac8e93e667cfe48cdd848d58b", "patch": "@@ -509,26 +509,169 @@ impl<T> MaybeUninit<T> {\n         self.as_ptr().read()\n     }\n \n-    /// Gets a reference to the contained value.\n+    /// Gets a shared reference to the contained value.\n+    ///\n+    /// This can be useful when we want to access a `MaybeUninit` that has been\n+    /// initialized but don't have ownership of the `MaybeUninit` (preventing the use\n+    /// of `.assume_init()`).\n     ///\n     /// # Safety\n     ///\n-    /// It is up to the caller to guarantee that the `MaybeUninit<T>` really is in an initialized\n-    /// state. Calling this when the content is not yet fully initialized causes undefined\n-    /// behavior.\n+    /// Calling this when the content is not yet fully initialized causes undefined\n+    /// behavior: it is up to the caller to guarantee that the `MaybeUninit<T>` really\n+    /// is in an initialized state.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ### Correct usage of this method:\n+    ///\n+    /// ```rust\n+    /// use ::std::mem::MaybeUninit;\n+    ///\n+    /// let mut x = MaybeUninit::<Vec<u32>>::uninit();\n+    /// // Initialize `x`:\n+    /// unsafe { x.as_mut_ptr().write(vec![1, 2, 3]); }\n+    /// /* The above line can also be done without unsafe:\n+    /// x = MaybeUninit::new(vec![1, 2, 3]); // */\n+    /// // Now that our `MaybeUninit<_>` is known to be initialized, it is okay to\n+    /// // create a shared reference to it:\n+    /// let x: &Vec<u32> = unsafe {\n+    ///     // # Safety\n+    ///     //\n+    ///     //   - `x` has been initialized.\n+    ///     x.get_ref()\n+    /// };\n+    /// assert_eq!(x, &vec![1, 2, 3]);\n+    /// ```\n+    ///\n+    /// ### *Incorrect* usages of this method:\n+    ///\n+    /// ```rust,no_run\n+    /// use std::mem::MaybeUninit;\n+    ///\n+    /// let x = MaybeUninit::<Vec<u32>>::uninit();\n+    /// let x_vec: &Vec<u32> = unsafe { x.get_ref() };\n+    /// // We have created a reference to an uninitialized vector! This is undefined behavior.\n+    /// ```\n+    ///\n+    /// ```rust,no_run\n+    /// use std::{cell::Cell, mem::MaybeUninit};\n+    ///\n+    /// let b = MaybeUninit::<Cell<bool>>::uninit();\n+    /// // Initialize the `MaybeUninit` using `Cell::set`:\n+    /// unsafe {\n+    ///     b.get_ref().set(true);\n+    ///  // ^^^^^^^^^^^\n+    ///  // Reference to an uninitialized `Cell<bool>`: UB!\n+    /// }\n+    /// ```\n     #[unstable(feature = \"maybe_uninit_ref\", issue = \"63568\")]\n     #[inline(always)]\n     pub unsafe fn get_ref(&self) -> &T {\n         &*self.value\n     }\n \n-    /// Gets a mutable reference to the contained value.\n+    /// Gets a mutable (unique) reference to the contained value.\n+    ///\n+    /// This can be useful when we want to access a `MaybeUninit` that has been\n+    /// initialized but don't have ownership of the `MaybeUninit` (preventing the use\n+    /// of `.assume_init()`).\n     ///\n     /// # Safety\n     ///\n-    /// It is up to the caller to guarantee that the `MaybeUninit<T>` really is in an initialized\n-    /// state. Calling this when the content is not yet fully initialized causes undefined\n-    /// behavior.\n+    /// Calling this when the content is not yet fully initialized causes undefined\n+    /// behavior: it is up to the caller to guarantee that the `MaybeUninit<T>` really\n+    /// is in an initialized state. For instance, `.get_mut()` cannot be used to\n+    /// initialize a `MaybeUninit`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ### Correct usage of this method:\n+    ///\n+    /// ```rust\n+    /// use ::std::mem::MaybeUninit;\n+    ///\n+    /// # unsafe extern \"C\" fn initialize_buffer (buf: *mut [u8; 2048]) { *buf = [0; 2048] }\n+    /// # #[cfg(FALSE)]\n+    /// extern \"C\" {\n+    ///     /// Initializes *all* the bytes of the input buffer.\n+    ///     fn initialize_buffer (buf: *mut [u8; 2048]);\n+    /// }\n+    ///\n+    /// let mut buf = MaybeUninit::<[u8; 2048]>::uninit();\n+    /// // Initialize `buf`:\n+    /// unsafe { initialize_buffer(buf.as_mut_ptr()); }\n+    /// // Now we know that `buf` has been initialized; so we could `.assume_init()` it.\n+    /// // However, using `.assume_init()` may trigger a `memcpy` of the 2048 bytes.\n+    /// // To assert our buffer has been initialized without copying it, we upgrade\n+    /// // the `&mut MaybeUninit<[u8; 2048]>` to a `&mut [u8; 2048]`:\n+    /// let buf: &mut [u8; 2048] = unsafe {\n+    ///     // # Safety\n+    ///     //\n+    ///     //   - `buf` has been initialized.\n+    ///     buf.get_mut()\n+    /// };\n+    /// // Now we can use `buf` as a normal slice:\n+    /// buf.sort_unstable();\n+    /// assert!(buf.is_sorted());\n+    /// ```\n+    ///\n+    /// ### *Incorrect* usages of this method:\n+    ///\n+    /// Do not use `.get_mut()` to initialize a value\n+    ///\n+    /// ```rust,no_run\n+    /// use std::mem::MaybeUninit;\n+    ///\n+    /// let mut b = MaybeUninit::<bool>::uninit();\n+    /// unsafe {\n+    ///     *b.get_mut() = true;\n+    ///     // We have created a (mutable) reference to an uninitialized `bool`!\n+    ///     // This is undefined behavior.\n+    /// }\n+    /// ```\n+    ///\n+    /// For instance, you cannot [`Read`] into an uninitialized buffer.\n+    ///\n+    /// [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html\n+    ///\n+    /// ```rust,no_run\n+    /// use std::{io, mem::MaybeUninit};\n+    ///\n+    /// fn read_chunk (reader: &'_ mut dyn io::Read) -> io::Result<[u8; 64]>\n+    /// {\n+    ///     let mut buffer = MaybeUninit::<[u8; 64]>::uninit();\n+    ///     reader.read_exact(unsafe { buffer.get_mut() })?;\n+    ///                             // ^^^^^^^^^^^^^^^^\n+    ///                             // (mutable) reference to uninitialized memory!\n+    ///                             // This is undefined behavior.\n+    ///     Ok(buffer.assume_init())\n+    /// }\n+    /// ```\n+    ///\n+    /// Nor can you use direct field access to do field-by-field gradual initialization.\n+    ///\n+    /// ```rust,no_run\n+    /// use std::mem::MaybeUninit;\n+    ///\n+    /// struct Foo {\n+    ///     a: u32,\n+    ///     b: u8,\n+    /// }\n+    ///\n+    /// let foo: Foo = unsafe {\n+    ///     let foo = MaybeUninit::<Foo>::uninit();\n+    ///     ptr::write(&mut foo.get_mut().a as *mut u32, 1337);\n+    ///                  // ^^^^^^^^^^^^^\n+    ///                  // (mutable) reference to uninitialized memory!\n+    ///                  // This is undefined behavior.\n+    ///     ptr::write(&mut foo.get_mut().b as *mut u8, 42);\n+    ///                  // ^^^^^^^^^^^^^\n+    ///                  // (mutable) reference to uninitialized memory!\n+    ///                  // This is undefined behavior.\n+    ///     foo.assume_init()\n+    /// };\n+    /// ```\n     // FIXME(#53491): We currently rely on the above being incorrect, i.e., we have references\n     // to uninitialized data (e.g., in `libcore/fmt/float.rs`).  We should make\n     // a final decision about the rules before stabilization."}]}