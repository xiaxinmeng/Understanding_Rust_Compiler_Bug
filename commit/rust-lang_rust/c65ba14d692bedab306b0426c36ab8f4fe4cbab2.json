{"sha": "c65ba14d692bedab306b0426c36ab8f4fe4cbab2", "node_id": "C_kwDOAAsO6NoAKGM2NWJhMTRkNjkyYmVkYWIzMDZiMDQyNmMzNmFiOGY0ZmU0Y2JhYjI", "commit": {"author": {"name": "Pascal Seitz", "email": "pascal.seitz@gmail.com", "date": "2022-03-13T02:03:50Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2022-05-08T18:22:35Z"}, "message": "Fixes #5260\n\nFixes #5260 by checking if it is part of a type '::'", "tree": {"sha": "28fc0b1c8259cb360ae9dc726a6f74415981077a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28fc0b1c8259cb360ae9dc726a6f74415981077a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c65ba14d692bedab306b0426c36ab8f4fe4cbab2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c65ba14d692bedab306b0426c36ab8f4fe4cbab2", "html_url": "https://github.com/rust-lang/rust/commit/c65ba14d692bedab306b0426c36ab8f4fe4cbab2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c65ba14d692bedab306b0426c36ab8f4fe4cbab2/comments", "author": {"login": "PSeitz", "id": 1109503, "node_id": "MDQ6VXNlcjExMDk1MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/1109503?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PSeitz", "html_url": "https://github.com/PSeitz", "followers_url": "https://api.github.com/users/PSeitz/followers", "following_url": "https://api.github.com/users/PSeitz/following{/other_user}", "gists_url": "https://api.github.com/users/PSeitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/PSeitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PSeitz/subscriptions", "organizations_url": "https://api.github.com/users/PSeitz/orgs", "repos_url": "https://api.github.com/users/PSeitz/repos", "events_url": "https://api.github.com/users/PSeitz/events{/privacy}", "received_events_url": "https://api.github.com/users/PSeitz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cc1f5ed5b04ea6512b710e231c147b4546f8e52", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cc1f5ed5b04ea6512b710e231c147b4546f8e52", "html_url": "https://github.com/rust-lang/rust/commit/3cc1f5ed5b04ea6512b710e231c147b4546f8e52"}], "stats": {"total": 74, "additions": 66, "deletions": 8}, "files": [{"sha": "eb195b1f7628f70037e06e8184ea47c6844befc3", "filename": "src/comment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c65ba14d692bedab306b0426c36ab8f4fe4cbab2/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c65ba14d692bedab306b0426c36ab8f4fe4cbab2/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=c65ba14d692bedab306b0426c36ab8f4fe4cbab2", "patch": "@@ -796,7 +796,7 @@ impl<'a> CommentRewrite<'a> {\n         // 1) wrap_comments = true is configured\n         // 2) The comment is not the start of a markdown header doc comment\n         // 3) The comment width exceeds the shape's width\n-        // 4) No URLS were found in the commnet\n+        // 4) No URLS were found in the comment\n         let should_wrap_comment = self.fmt.config.wrap_comments()\n             && !is_markdown_header_doc_comment\n             && unicode_str_width(line) > self.fmt.shape.width"}, {"sha": "78b72a50cb2f96250ec94b1c86579d1246798424", "filename": "src/string.rs", "status": "modified", "additions": 38, "deletions": 7, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/c65ba14d692bedab306b0426c36ab8f4fe4cbab2/src%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c65ba14d692bedab306b0426c36ab8f4fe4cbab2/src%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstring.rs?ref=c65ba14d692bedab306b0426c36ab8f4fe4cbab2", "patch": "@@ -315,27 +315,45 @@ fn break_string(max_width: usize, trim_end: bool, line_end: &str, input: &[&str]\n         // Found a whitespace and what is on its left side is big enough.\n         Some(index) if index >= MIN_STRING => break_at(index),\n         // No whitespace found, try looking for a punctuation instead\n-        _ => match input[0..max_width_index_in_input]\n-            .iter()\n-            .rposition(|grapheme| is_punctuation(grapheme))\n+        _ => match (0..max_width_index_in_input)\n+            .rev()\n+            .skip_while(|pos| !is_valid_linebreak(input, *pos))\n+            .next()\n         {\n             // Found a punctuation and what is on its left side is big enough.\n             Some(index) if index >= MIN_STRING => break_at(index),\n             // Either no boundary character was found to the left of `input[max_chars]`, or the line\n             // got too small. We try searching for a boundary character to the right.\n-            _ => match input[max_width_index_in_input..]\n-                .iter()\n-                .position(|grapheme| is_whitespace(grapheme) || is_punctuation(grapheme))\n+            _ => match (max_width_index_in_input..input.len())\n+                .skip_while(|pos| !is_valid_linebreak(input, *pos))\n+                .next()\n             {\n                 // A boundary was found after the line limit\n-                Some(index) => break_at(max_width_index_in_input + index),\n+                Some(index) => break_at(index),\n                 // No boundary to the right, the input cannot be broken\n                 None => SnippetState::EndOfInput(input.concat()),\n             },\n         },\n     }\n }\n \n+fn is_valid_linebreak(input: &[&str], pos: usize) -> bool {\n+    let is_whitespace = is_whitespace(input[pos]);\n+    if is_whitespace {\n+        return true;\n+    }\n+    let is_punctuation = is_punctuation(input[pos]);\n+    if is_punctuation && !is_part_of_type(input, pos) {\n+        return true;\n+    }\n+    false\n+}\n+\n+fn is_part_of_type(input: &[&str], pos: usize) -> bool {\n+    input.get(pos..=pos + 1) == Some(&[\":\", \":\"])\n+        || input.get(pos.saturating_sub(1)..=pos) == Some(&[\":\", \":\"])\n+}\n+\n fn is_new_line(grapheme: &str) -> bool {\n     let bytes = grapheme.as_bytes();\n     bytes.starts_with(b\"\\n\") || bytes.starts_with(b\"\\r\\n\")\n@@ -369,6 +387,19 @@ mod test {\n         rewrite_string(\"eq_\", &fmt, 2);\n     }\n \n+    #[test]\n+    fn line_break_at_valid_points_test() {\n+        let string = \"[TheName](Dont::break::my::type::That::would::be::very::nice) break here\";\n+        let graphemes = UnicodeSegmentation::graphemes(&*string, false).collect::<Vec<&str>>();\n+        assert_eq!(\n+            break_string(20, false, \"\", &graphemes[..]),\n+            SnippetState::LineEnd(\n+                \"[TheName](Dont::break::my::type::That::would::be::very::nice) \".to_string(),\n+                62\n+            )\n+        );\n+    }\n+\n     #[test]\n     fn should_break_on_whitespace() {\n         let string = \"Placerat felis. Mauris porta ante sagittis purus.\";"}, {"sha": "c0606817290cde01b0455d168b5e7f0fc5d78800", "filename": "tests/source/issue-5260.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c65ba14d692bedab306b0426c36ab8f4fe4cbab2/tests%2Fsource%2Fissue-5260.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c65ba14d692bedab306b0426c36ab8f4fe4cbab2/tests%2Fsource%2Fissue-5260.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-5260.rs?ref=c65ba14d692bedab306b0426c36ab8f4fe4cbab2", "patch": "@@ -0,0 +1,14 @@\n+// rustfmt-wrap_comments: true\n+\n+/// [MyType](VeryLongPathToMyType::NoLineBreak::Here::Okay::ThatWouldBeNice::Thanks)\n+fn documented_with_longtype() {\n+    // # We're using a long type link, rustfmt should not break line\n+    // on the type when `wrap_comments = true`\n+}\n+\n+/// VeryLongPathToMyType::JustMyType::But::VeryVery::Long::NoLineBreak::Here::Okay::ThatWouldBeNice::Thanks\n+fn documented_with_verylongtype() {\n+    // # We're using a long type link, rustfmt should not break line\n+    // on the type when `wrap_comments = true`\n+}\n+"}, {"sha": "171f6fa51b78ee068a37ee18d84861b8e1ac8bde", "filename": "tests/target/issue-5260.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c65ba14d692bedab306b0426c36ab8f4fe4cbab2/tests%2Ftarget%2Fissue-5260.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c65ba14d692bedab306b0426c36ab8f4fe4cbab2/tests%2Ftarget%2Fissue-5260.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-5260.rs?ref=c65ba14d692bedab306b0426c36ab8f4fe4cbab2", "patch": "@@ -0,0 +1,13 @@\n+// rustfmt-wrap_comments: true\n+\n+/// [MyType](VeryLongPathToMyType::NoLineBreak::Here::Okay::ThatWouldBeNice::Thanks)\n+fn documented_with_longtype() {\n+    // # We're using a long type link, rustfmt should not break line\n+    // on the type when `wrap_comments = true`\n+}\n+\n+/// VeryLongPathToMyType::JustMyType::But::VeryVery::Long::NoLineBreak::Here::Okay::ThatWouldBeNice::Thanks\n+fn documented_with_verylongtype() {\n+    // # We're using a long type link, rustfmt should not break line\n+    // on the type when `wrap_comments = true`\n+}"}]}