{"sha": "ede055c2be77ef4326ac96c255f7b6b7a37f3a18", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkZTA1NWMyYmU3N2VmNDMyNmFjOTZjMjU1ZjdiNmI3YTM3ZjNhMTg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-20T03:24:09Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-20T03:24:09Z"}, "message": "fix checking alignment of pointer loads", "tree": {"sha": "f7eb95f8df952e0a5aee8b83b4bca386442c5f00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7eb95f8df952e0a5aee8b83b4bca386442c5f00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ede055c2be77ef4326ac96c255f7b6b7a37f3a18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ede055c2be77ef4326ac96c255f7b6b7a37f3a18", "html_url": "https://github.com/rust-lang/rust/commit/ede055c2be77ef4326ac96c255f7b6b7a37f3a18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ede055c2be77ef4326ac96c255f7b6b7a37f3a18/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9818bf8187b9a9d9ce9828a3fa1213fc08bdd94", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9818bf8187b9a9d9ce9828a3fa1213fc08bdd94", "html_url": "https://github.com/rust-lang/rust/commit/f9818bf8187b9a9d9ce9828a3fa1213fc08bdd94"}], "stats": {"total": 24, "additions": 15, "deletions": 9}, "files": [{"sha": "5bcd83689337ba7e6d221d4bca4a820f397cd198", "filename": "src/eval_context.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ede055c2be77ef4326ac96c255f7b6b7a37f3a18/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede055c2be77ef4326ac96c255f7b6b7a37f3a18/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=ede055c2be77ef4326ac96c255f7b6b7a37f3a18", "patch": "@@ -1101,6 +1101,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         dest: Lvalue<'tcx>,\n         dest_ty: Ty<'tcx>,\n     ) -> EvalResult<'tcx> {\n+        //trace!(\"Writing {:?} to {:?} at type {:?}\", src_val, dest, dest_ty);\n         // Note that it is really important that the type here is the right one, and matches the type things are read at.\n         // In case `src_val` is a `ByValPair`, we don't do any magic here to handle padding properly, which is only\n         // correct if we never look at this data with the wrong type.\n@@ -1378,7 +1379,10 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 // if we transmute a ptr to an isize, reading it back into a primval shouldn't panic\n                 // Due to read_ptr ignoring the sign, we need to jump around some hoops\n                 match self.memory.read_int(ptr.to_ptr()?, size) {\n-                    Err(EvalError::ReadPointerAsBytes) if size == self.memory.pointer_size() => self.memory.read_ptr(ptr.to_ptr()?)?.into_inner_primval(),\n+                    Err(EvalError::ReadPointerAsBytes) if size == self.memory.pointer_size() =>\n+                        // Reading as an int failed because we are seeing ptr bytes *and* we are actually reading at ptr size.\n+                        // Let's try again, reading a ptr this time.\n+                        self.memory.read_ptr(ptr.to_ptr()?)?.into_inner_primval(),\n                     other => PrimVal::from_i128(other?),\n                 }\n             }\n@@ -1393,11 +1397,11 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     U128 => 16,\n                     Us => self.memory.pointer_size(),\n                 };\n-                if size == self.memory.pointer_size() {\n-                    // if we transmute a ptr to an usize, reading it back into a primval shouldn't panic\n-                    self.memory.read_ptr(ptr.to_ptr()?)?.into_inner_primval()\n-                } else {\n-                    PrimVal::from_u128(self.memory.read_uint(ptr.to_ptr()?, size)?)\n+                // if we transmute a ptr to an usize, reading it back into a primval shouldn't panic\n+                // for consistency's sake, we use the same code as above\n+                match self.memory.read_uint(ptr.to_ptr()?, size) {\n+                    Err(EvalError::ReadPointerAsBytes) if size == self.memory.pointer_size() => self.memory.read_ptr(ptr.to_ptr()?)?.into_inner_primval(),\n+                    other => PrimVal::from_u128(other?),\n                 }\n             }\n "}, {"sha": "71f4c329b5be0ca58b183d9fc3f04682f374b218", "filename": "src/memory.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ede055c2be77ef4326ac96c255f7b6b7a37f3a18/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede055c2be77ef4326ac96c255f7b6b7a37f3a18/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=ede055c2be77ef4326ac96c255f7b6b7a37f3a18", "patch": "@@ -720,12 +720,14 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n \n     pub fn read_ptr(&self, ptr: MemoryPointer) -> EvalResult<'tcx, Pointer> {\n         let size = self.pointer_size();\n-        if self.check_defined(ptr, size).is_err() {\n-            return Ok(PrimVal::Undef.into());\n-        }\n         self.check_relocation_edges(ptr, size)?; // Make sure we don't read part of a pointer as a pointer\n         let endianess = self.endianess();\n         let bytes = self.get_bytes_unchecked(ptr, size, size)?;\n+        // Undef check happens *after* we established that the alignment is correct.\n+        // We must not return Ok() for unaligned pointers!\n+        if self.check_defined(ptr, size).is_err() {\n+            return Ok(PrimVal::Undef.into());\n+        }\n         let offset = read_target_uint(endianess, bytes).unwrap();\n         assert_eq!(offset as u64 as u128, offset);\n         let offset = offset as u64;"}]}