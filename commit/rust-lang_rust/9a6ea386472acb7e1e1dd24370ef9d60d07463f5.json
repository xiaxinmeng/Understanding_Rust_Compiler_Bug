{"sha": "9a6ea386472acb7e1e1dd24370ef9d60d07463f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNmVhMzg2NDcyYWNiN2UxZTFkZDI0MzcwZWY5ZDYwZDA3NDYzZjU=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-10-11T17:07:45Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-10-11T17:20:26Z"}, "message": "Add hack to keep `actix-web` and `actori-web` compiling\n\nThis extends the existing `ident_name_compatibility_hack` to handle the\n`tuple_from_req` macro defined in `actix-web` (and its fork\n`actori-web`).", "tree": {"sha": "77c2ffb97715c0b5fc702a6006ecfaa869282456", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77c2ffb97715c0b5fc702a6006ecfaa869282456"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a6ea386472acb7e1e1dd24370ef9d60d07463f5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl+DPvIACgkQtAh+UQ6Y\nsWRfow//SkWBSCLNeZ2Pi8QqT2Svo41kuzmQj0IgFYFR9I8w7XIzVcztaEjkk5N3\n8mL2YNZIBtnaALBF2ILwP9G14DGoyEukjKWfXNgUCO343H/ZEnvVxLfbe8bsiT6C\ne6ok9Geo3GGUENlxnT5FWW6AiNrKANBY8NWDdfkUaaPy/DbUjN3SRxA3zRbDsHvk\nLIH4TCKmAU81/T0LHLvxFLcPUGZt9xBORTOLR59Y1TXU9ZwpYypWZTaomrt5N45W\n4GlNRTgU0N/L7jMCNgqnOoTIMRcMGog79q/vbBOfQ9TZI6V9lG4JQEQJytO+g1PX\ne4cfzFRxz6H0+kMY9elmj6pvzoa2/DkXH7Ap5JSvkkUss8yyvLShW0NMGYvBLtLb\ncTN1v1uGQSIBOWBnWUMzGJKDeXP0z2mX8lRTvCyTr+b6HBwNYNhWHLQ+xgBRyuFf\nJUOo1+2N2mz6lezphyeD6XBebRjJs90Nl5oDu5nhUwipccq39tWy+cKTcD4f6mAA\n+FxiYZywy6J9+VS5frL7DC9Po1q+tEAtEuHl2CLU11OBS4XNSDhc+HzKy132n4ZF\nbk79Uk2TQ4YyQ5n5rVvUlYr58nIR84lzBc8ethQnkI6HZL3OO522on3LMrIhg8+a\nFH0F3rXDpyE8RDvprZTU5XnpiyXp57CvvSKAAjiMbUwdL5a7xAM=\n=N3vi\n-----END PGP SIGNATURE-----", "payload": "tree 77c2ffb97715c0b5fc702a6006ecfaa869282456\nparent 477ce31d37af4630f61620ea5422276f0aa79582\nauthor Aaron Hill <aa1ronham@gmail.com> 1602436065 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1602436826 -0400\n\nAdd hack to keep `actix-web` and `actori-web` compiling\n\nThis extends the existing `ident_name_compatibility_hack` to handle the\n`tuple_from_req` macro defined in `actix-web` (and its fork\n`actori-web`).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a6ea386472acb7e1e1dd24370ef9d60d07463f5", "html_url": "https://github.com/rust-lang/rust/commit/9a6ea386472acb7e1e1dd24370ef9d60d07463f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a6ea386472acb7e1e1dd24370ef9d60d07463f5/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "477ce31d37af4630f61620ea5422276f0aa79582", "url": "https://api.github.com/repos/rust-lang/rust/commits/477ce31d37af4630f61620ea5422276f0aa79582", "html_url": "https://github.com/rust-lang/rust/commit/477ce31d37af4630f61620ea5422276f0aa79582"}], "stats": {"total": 82, "additions": 77, "deletions": 5}, "files": [{"sha": "9635750fb40bc5185c1f7248dfcf87a3eaea5fa1", "filename": "compiler/rustc_ast/src/token.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9a6ea386472acb7e1e1dd24370ef9d60d07463f5/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a6ea386472acb7e1e1dd24370ef9d60d07463f5/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs?ref=9a6ea386472acb7e1e1dd24370ef9d60d07463f5", "patch": "@@ -810,25 +810,36 @@ impl Nonterminal {\n             if let ExpnKind::Macro(_, macro_name) = orig_span.ctxt().outer_expn_data().kind {\n                 let filename = source_map.span_to_filename(orig_span);\n                 if let FileName::Real(RealFileName::Named(path)) = filename {\n-                    let matches_prefix = |prefix| {\n-                        // Check for a path that ends with 'prefix*/src/lib.rs'\n+                    let matches_prefix = |prefix, filename| {\n+                        // Check for a path that ends with 'prefix*/src/<filename>'\n                         let mut iter = path.components().rev();\n-                        iter.next().and_then(|p| p.as_os_str().to_str()) == Some(\"lib.rs\")\n+                        iter.next().and_then(|p| p.as_os_str().to_str()) == Some(filename)\n                             && iter.next().and_then(|p| p.as_os_str().to_str()) == Some(\"src\")\n                             && iter\n                                 .next()\n                                 .and_then(|p| p.as_os_str().to_str())\n                                 .map_or(false, |p| p.starts_with(prefix))\n                     };\n \n-                    if (macro_name == sym::impl_macros && matches_prefix(\"time-macros-impl\"))\n-                        || (macro_name == sym::arrays && matches_prefix(\"js-sys\"))\n+                    if (macro_name == sym::impl_macros\n+                        && matches_prefix(\"time-macros-impl\", \"lib.rs\"))\n+                        || (macro_name == sym::arrays && matches_prefix(\"js-sys\", \"lib.rs\"))\n                     {\n                         let snippet = source_map.span_to_snippet(orig_span);\n                         if snippet.as_deref() == Ok(\"$name\") {\n                             return Some((*ident, *is_raw));\n                         }\n                     }\n+\n+                    if macro_name == sym::tuple_from_req\n+                        && (matches_prefix(\"actix-web\", \"extract.rs\")\n+                            || matches_prefix(\"actori-web\", \"extract.rs\"))\n+                    {\n+                        let snippet = source_map.span_to_snippet(orig_span);\n+                        if snippet.as_deref() == Ok(\"$T\") {\n+                            return Some((*ident, *is_raw));\n+                        }\n+                    }\n                 }\n             }\n         }"}, {"sha": "28fef65da070aa095da5ebc36f586c20f02dc47c", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a6ea386472acb7e1e1dd24370ef9d60d07463f5/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a6ea386472acb7e1e1dd24370ef9d60d07463f5/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=9a6ea386472acb7e1e1dd24370ef9d60d07463f5", "patch": "@@ -1114,6 +1114,7 @@ symbols! {\n         try_trait,\n         tt,\n         tuple,\n+        tuple_from_req,\n         tuple_indexing,\n         two_phase,\n         ty,"}, {"sha": "2d4f6010012df08ba599f39c4b1ce04973386cc8", "filename": "src/test/ui/proc-macro/group-compat-hack/actix-web-2.0.0/src/extract.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9a6ea386472acb7e1e1dd24370ef9d60d07463f5/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Factix-web-2.0.0%2Fsrc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a6ea386472acb7e1e1dd24370ef9d60d07463f5/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Factix-web-2.0.0%2Fsrc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Factix-web-2.0.0%2Fsrc%2Fextract.rs?ref=9a6ea386472acb7e1e1dd24370ef9d60d07463f5", "patch": "@@ -0,0 +1,7 @@\n+// ignore-test this is not a test\n+\n+macro_rules! tuple_from_req {\n+    ($T:ident) => {\n+        #[my_macro] struct Three($T);\n+    }\n+}"}, {"sha": "2d4f6010012df08ba599f39c4b1ce04973386cc8", "filename": "src/test/ui/proc-macro/group-compat-hack/actix-web/src/extract.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9a6ea386472acb7e1e1dd24370ef9d60d07463f5/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Factix-web%2Fsrc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a6ea386472acb7e1e1dd24370ef9d60d07463f5/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Factix-web%2Fsrc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Factix-web%2Fsrc%2Fextract.rs?ref=9a6ea386472acb7e1e1dd24370ef9d60d07463f5", "patch": "@@ -0,0 +1,7 @@\n+// ignore-test this is not a test\n+\n+macro_rules! tuple_from_req {\n+    ($T:ident) => {\n+        #[my_macro] struct Three($T);\n+    }\n+}"}, {"sha": "9ec6aba63f35fee0d89eced1e2e6ac86fc72579d", "filename": "src/test/ui/proc-macro/group-compat-hack/actori-web-2.0.0/src/extract.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9a6ea386472acb7e1e1dd24370ef9d60d07463f5/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Factori-web-2.0.0%2Fsrc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a6ea386472acb7e1e1dd24370ef9d60d07463f5/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Factori-web-2.0.0%2Fsrc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Factori-web-2.0.0%2Fsrc%2Fextract.rs?ref=9a6ea386472acb7e1e1dd24370ef9d60d07463f5", "patch": "@@ -0,0 +1,7 @@\n+// ignore-test this is not a test\n+\n+macro_rules! tuple_from_req {\n+    ($T:ident) => {\n+        #[my_macro] struct Four($T);\n+    }\n+}"}, {"sha": "9ec6aba63f35fee0d89eced1e2e6ac86fc72579d", "filename": "src/test/ui/proc-macro/group-compat-hack/actori-web/src/extract.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9a6ea386472acb7e1e1dd24370ef9d60d07463f5/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Factori-web%2Fsrc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a6ea386472acb7e1e1dd24370ef9d60d07463f5/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Factori-web%2Fsrc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Factori-web%2Fsrc%2Fextract.rs?ref=9a6ea386472acb7e1e1dd24370ef9d60d07463f5", "patch": "@@ -0,0 +1,7 @@\n+// ignore-test this is not a test\n+\n+macro_rules! tuple_from_req {\n+    ($T:ident) => {\n+        #[my_macro] struct Four($T);\n+    }\n+}"}, {"sha": "652fabf34ac3d9b1012c8e9329a2e5298bf8ab95", "filename": "src/test/ui/proc-macro/group-compat-hack/group-compat-hack.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9a6ea386472acb7e1e1dd24370ef9d60d07463f5/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a6ea386472acb7e1e1dd24370ef9d60d07463f5/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.rs?ref=9a6ea386472acb7e1e1dd24370ef9d60d07463f5", "patch": "@@ -45,5 +45,33 @@ mod with_version {\n     other!(Foo);\n }\n \n+mod actix_web_test {\n+    include!(\"actix-web/src/extract.rs\");\n+\n+    struct Foo;\n+    tuple_from_req!(Foo);\n+}\n+\n+mod actix_web_version_test {\n+    include!(\"actix-web-2.0.0/src/extract.rs\");\n+\n+    struct Foo;\n+    tuple_from_req!(Foo);\n+}\n+\n+mod actori_web_test {\n+    include!(\"actori-web/src/extract.rs\");\n+\n+    struct Foo;\n+    tuple_from_req!(Foo);\n+}\n+\n+mod actori_web_version_test {\n+    include!(\"actori-web-2.0.0/src/extract.rs\");\n+\n+    struct Foo;\n+    tuple_from_req!(Foo);\n+}\n+\n \n fn main() {}"}, {"sha": "c6b18ab674baacb55cca44b20d6f7c7395cd3a0c", "filename": "src/test/ui/proc-macro/group-compat-hack/group-compat-hack.stdout", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a6ea386472acb7e1e1dd24370ef9d60d07463f5/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/9a6ea386472acb7e1e1dd24370ef9d60d07463f5/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stdout?ref=9a6ea386472acb7e1e1dd24370ef9d60d07463f5", "patch": "@@ -4,3 +4,7 @@ Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/gro\n Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:21: 5:27 (#20) }, Ident { ident: \"One\", span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:28: 5:31 (#20) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:43:18: 43:21 (#0) }], span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:31: 5:38 (#20) }, Punct { ch: ';', spacing: Alone, span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:38: 5:39 (#20) }]\n Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/js-sys-0.3.17/src/lib.rs:5:21: 5:27 (#24) }, Ident { ident: \"Two\", span: $DIR/js-sys-0.3.17/src/lib.rs:5:28: 5:31 (#24) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:44:13: 44:16 (#0) }], span: $DIR/js-sys-0.3.17/src/lib.rs:5:31: 5:38 (#24) }, Punct { ch: ';', spacing: Alone, span: $DIR/js-sys-0.3.17/src/lib.rs:5:38: 5:39 (#24) }]\n Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/group-compat-hack.rs:38:25: 38:31 (#28) }, Ident { ident: \"Three\", span: $DIR/group-compat-hack.rs:38:32: 38:37 (#28) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:45:12: 45:15 (#0) }], span: $DIR/group-compat-hack.rs:38:38: 38:43 (#28) }], span: $DIR/group-compat-hack.rs:38:37: 38:44 (#28) }, Punct { ch: ';', spacing: Alone, span: $DIR/group-compat-hack.rs:38:44: 38:45 (#28) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actix-web/src/extract.rs:5:21: 5:27 (#33) }, Ident { ident: \"Three\", span: $DIR/actix-web/src/extract.rs:5:28: 5:33 (#33) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:52:21: 52:24 (#0) }], span: $DIR/actix-web/src/extract.rs:5:33: 5:37 (#33) }, Punct { ch: ';', spacing: Alone, span: $DIR/actix-web/src/extract.rs:5:37: 5:38 (#33) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actix-web-2.0.0/src/extract.rs:5:21: 5:27 (#38) }, Ident { ident: \"Three\", span: $DIR/actix-web-2.0.0/src/extract.rs:5:28: 5:33 (#38) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:59:21: 59:24 (#0) }], span: $DIR/actix-web-2.0.0/src/extract.rs:5:33: 5:37 (#38) }, Punct { ch: ';', spacing: Alone, span: $DIR/actix-web-2.0.0/src/extract.rs:5:37: 5:38 (#38) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actori-web/src/extract.rs:5:21: 5:27 (#43) }, Ident { ident: \"Four\", span: $DIR/actori-web/src/extract.rs:5:28: 5:32 (#43) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:66:21: 66:24 (#0) }], span: $DIR/actori-web/src/extract.rs:5:32: 5:36 (#43) }, Punct { ch: ';', spacing: Alone, span: $DIR/actori-web/src/extract.rs:5:36: 5:37 (#43) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actori-web-2.0.0/src/extract.rs:5:21: 5:27 (#48) }, Ident { ident: \"Four\", span: $DIR/actori-web-2.0.0/src/extract.rs:5:28: 5:32 (#48) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:73:21: 73:24 (#0) }], span: $DIR/actori-web-2.0.0/src/extract.rs:5:32: 5:36 (#48) }, Punct { ch: ';', spacing: Alone, span: $DIR/actori-web-2.0.0/src/extract.rs:5:36: 5:37 (#48) }]"}]}