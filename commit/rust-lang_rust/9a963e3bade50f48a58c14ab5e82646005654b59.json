{"sha": "9a963e3bade50f48a58c14ab5e82646005654b59", "node_id": "C_kwDOAAsO6NoAKDlhOTYzZTNiYWRlNTBmNDhhNThjMTRhYjVlODI2NDYwMDU2NTRiNTk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-23T13:39:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-23T13:39:11Z"}, "message": "Auto merge of #102056 - b-naber:unevaluated, r=lcnr\n\nIntroduce mir::Unevaluated\n\nPreviously the distinction between unevaluated constants in the type-system and in mir was not explicit and a little confusing. Probably better to introduce its own type for that.\n\nr? `@lcnr`", "tree": {"sha": "40481df7cbf1d7b6ff59d9c6a5acbde1e4745f51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40481df7cbf1d7b6ff59d9c6a5acbde1e4745f51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a963e3bade50f48a58c14ab5e82646005654b59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a963e3bade50f48a58c14ab5e82646005654b59", "html_url": "https://github.com/rust-lang/rust/commit/9a963e3bade50f48a58c14ab5e82646005654b59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a963e3bade50f48a58c14ab5e82646005654b59/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d44e09cb1db2788f59159c4b9055e339ed2181d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d44e09cb1db2788f59159c4b9055e339ed2181d", "html_url": "https://github.com/rust-lang/rust/commit/4d44e09cb1db2788f59159c4b9055e339ed2181d"}, {"sha": "a705e65605868adb0879734a984b445d3c40fd6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a705e65605868adb0879734a984b445d3c40fd6f", "html_url": "https://github.com/rust-lang/rust/commit/a705e65605868adb0879734a984b445d3c40fd6f"}], "stats": {"total": 376, "additions": 220, "deletions": 156}, "files": [{"sha": "e12805b093cc7487f9e0774fdc531fe4be0c18a8", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=9a963e3bade50f48a58c14ab5e82646005654b59", "patch": "@@ -5,7 +5,6 @@ use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::interpret::{\n     read_target_uint, AllocId, ConstAllocation, ConstValue, ErrorHandled, GlobalAlloc, Scalar,\n };\n-use rustc_middle::ty::ConstKind;\n use rustc_span::DUMMY_SP;\n \n use cranelift_codegen::ir::GlobalValueData;\n@@ -42,15 +41,7 @@ pub(crate) fn check_constants(fx: &mut FunctionCx<'_, '_, '_>) -> bool {\n     let mut all_constants_ok = true;\n     for constant in &fx.mir.required_consts {\n         let unevaluated = match fx.monomorphize(constant.literal) {\n-            ConstantKind::Ty(ct) => match ct.kind() {\n-                ConstKind::Unevaluated(uv) => uv.expand(),\n-                ConstKind::Value(_) => continue,\n-                ConstKind::Param(_)\n-                | ConstKind::Infer(_)\n-                | ConstKind::Bound(_, _)\n-                | ConstKind::Placeholder(_)\n-                | ConstKind::Error(_) => unreachable!(\"{:?}\", ct),\n-            },\n+            ConstantKind::Ty(_) => unreachable!(),\n             ConstantKind::Unevaluated(uv, _) => uv,\n             ConstantKind::Val(..) => continue,\n         };\n@@ -118,7 +109,7 @@ pub(crate) fn codegen_constant<'tcx>(\n ) -> CValue<'tcx> {\n     let (const_val, ty) = match fx.monomorphize(constant.literal) {\n         ConstantKind::Ty(const_) => unreachable!(\"{:?}\", const_),\n-        ConstantKind::Unevaluated(ty::Unevaluated { def, substs, promoted }, ty)\n+        ConstantKind::Unevaluated(mir::UnevaluatedConst { def, substs, promoted }, ty)\n             if fx.tcx.is_static(def.did) =>\n         {\n             assert!(substs.is_empty());"}, {"sha": "60deb0abd344db06d1a933b2c741c08b71050569", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=9a963e3bade50f48a58c14ab5e82646005654b59", "patch": "@@ -5,6 +5,7 @@\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir::LangItem;\n use rustc_infer::infer::TyCtxtInferExt;\n+use rustc_middle::mir;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, subst::SubstsRef, AdtDef, Ty};\n use rustc_span::DUMMY_SP;\n@@ -350,29 +351,22 @@ where\n     // FIXME(valtrees): check whether const qualifs should behave the same\n     // way for type and mir constants.\n     let uneval = match constant.literal {\n-        ConstantKind::Ty(ct) if matches!(ct.kind(), ty::ConstKind::Unevaluated(_)) => {\n-            let ty::ConstKind::Unevaluated(uv) = ct.kind() else { unreachable!() };\n-\n-            Some(uv.expand())\n-        }\n-        ConstantKind::Ty(_) => None,\n+        ConstantKind::Ty(ct) if matches!(ct.kind(), ty::ConstKind::Param(_)) => None,\n+        ConstantKind::Ty(c) => bug!(\"expected ConstKind::Param here, found {:?}\", c),\n         ConstantKind::Unevaluated(uv, _) => Some(uv),\n         ConstantKind::Val(..) => None,\n     };\n \n-    if let Some(ty::Unevaluated { def, substs: _, promoted }) = uneval {\n+    if let Some(mir::UnevaluatedConst { def, substs: _, promoted }) = uneval {\n         // Use qualifs of the type for the promoted. Promoteds in MIR body should be possible\n         // only for `NeedsNonConstDrop` with precise drop checking. This is the only const\n         // check performed after the promotion. Verify that with an assertion.\n         assert!(promoted.is_none() || Q::ALLOW_PROMOTED);\n \n         // Don't peek inside trait associated constants.\n         if promoted.is_none() && cx.tcx.trait_of_item(def.did).is_none() {\n-            let qualifs = if let Some((did, param_did)) = def.as_const_arg() {\n-                cx.tcx.at(constant.span).mir_const_qualif_const_arg((did, param_did))\n-            } else {\n-                cx.tcx.at(constant.span).mir_const_qualif(def.did)\n-            };\n+            assert_eq!(def.const_param_did, None, \"expected associated const: {def:?}\");\n+            let qualifs = cx.tcx.at(constant.span).mir_const_qualif(def.did);\n \n             if !Q::in_qualifs(&qualifs) {\n                 return false;"}, {"sha": "4b219300739c0812a42d38daf9a1d362d3b380a5", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=9a963e3bade50f48a58c14ab5e82646005654b59", "patch": "@@ -13,6 +13,7 @@\n //! move analysis runs after promotion on broken MIR.\n \n use rustc_hir as hir;\n+use rustc_middle::mir;\n use rustc_middle::mir::traversal::ReversePostorderIter;\n use rustc_middle::mir::visit::{MutVisitor, MutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n@@ -840,7 +841,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                 promoted.span = span;\n                 promoted.local_decls[RETURN_PLACE] = LocalDecl::new(ty, span);\n                 let substs = tcx.erase_regions(InternalSubsts::identity_for_item(tcx, def.did));\n-                let uneval = ty::Unevaluated { def, substs, promoted: Some(promoted_id) };\n+                let uneval = mir::UnevaluatedConst { def, substs, promoted: Some(promoted_id) };\n \n                 Operand::Constant(Box::new(Constant {\n                     span,"}, {"sha": "9488f1f6bfc482f40a79158db27174471a597689", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=9a963e3bade50f48a58c14ab5e82646005654b59", "patch": "@@ -734,9 +734,7 @@ impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n                     }\n                 }\n             }\n-            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }) => {\n-                assert_eq!(promoted, ());\n-\n+            ty::ConstKind::Unevaluated(ty::UnevaluatedConst { def, substs }) => {\n                 let substs = self.relate_with_variance(\n                     ty::Variance::Invariant,\n                     ty::VarianceDiagInfo::default(),\n@@ -745,7 +743,7 @@ impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n                 )?;\n                 Ok(self.tcx().mk_const(ty::ConstS {\n                     ty: c.ty(),\n-                    kind: ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }),\n+                    kind: ty::ConstKind::Unevaluated(ty::UnevaluatedConst { def, substs }),\n                 }))\n             }\n             _ => relate::super_relate_consts(self, c, c),\n@@ -949,9 +947,7 @@ impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n                     }\n                 }\n             }\n-            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }) => {\n-                assert_eq!(promoted, ());\n-\n+            ty::ConstKind::Unevaluated(ty::UnevaluatedConst { def, substs }) => {\n                 let substs = self.relate_with_variance(\n                     ty::Variance::Invariant,\n                     ty::VarianceDiagInfo::default(),\n@@ -961,7 +957,7 @@ impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n \n                 Ok(self.tcx().mk_const(ty::ConstS {\n                     ty: c.ty(),\n-                    kind: ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }),\n+                    kind: ty::ConstKind::Unevaluated(ty::UnevaluatedConst { def, substs }),\n                 }))\n             }\n             _ => relate::super_relate_consts(self, c, c),"}, {"sha": "55cf9b7a2ea1879d685245ade7a7ab80f935ba4d", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=9a963e3bade50f48a58c14ab5e82646005654b59", "patch": "@@ -705,8 +705,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     #[instrument(skip(self), level = \"debug\")]\n     pub fn try_unify_abstract_consts(\n         &self,\n-        a: ty::Unevaluated<'tcx, ()>,\n-        b: ty::Unevaluated<'tcx, ()>,\n+        a: ty::UnevaluatedConst<'tcx>,\n+        b: ty::UnevaluatedConst<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> bool {\n         // Reject any attempt to unify two unevaluated constants that contain inference\n@@ -1690,7 +1690,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     pub fn try_const_eval_resolve(\n         &self,\n         param_env: ty::ParamEnv<'tcx>,\n-        unevaluated: ty::Unevaluated<'tcx, ()>,\n+        unevaluated: ty::UnevaluatedConst<'tcx>,\n         ty: Ty<'tcx>,\n         span: Option<Span>,\n     ) -> Result<ty::Const<'tcx>, ErrorHandled> {\n@@ -1725,7 +1725,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     pub fn const_eval_resolve(\n         &self,\n         mut param_env: ty::ParamEnv<'tcx>,\n-        unevaluated: ty::Unevaluated<'tcx, ()>,\n+        unevaluated: ty::UnevaluatedConst<'tcx>,\n         span: Option<Span>,\n     ) -> EvalToValTreeResult<'tcx> {\n         let mut substs = self.resolve_vars_if_possible(unevaluated.substs);\n@@ -1756,8 +1756,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         debug!(?param_env_erased);\n         debug!(?substs_erased);\n \n-        let unevaluated =\n-            ty::Unevaluated { def: unevaluated.def, substs: substs_erased, promoted: () };\n+        let unevaluated = ty::UnevaluatedConst { def: unevaluated.def, substs: substs_erased };\n \n         // The return value is the evaluated value which doesn't contain any reference to inference\n         // variables, thus we don't need to substitute back the original values."}, {"sha": "734c31192c7c3b88068cec4f0e4b3d5310776b69", "filename": "compiler/rustc_middle/src/mir/interpret/queries.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs?ref=9a963e3bade50f48a58c14ab5e82646005654b59", "patch": "@@ -36,7 +36,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn const_eval_resolve(\n         self,\n         param_env: ty::ParamEnv<'tcx>,\n-        ct: ty::Unevaluated<'tcx>,\n+        ct: mir::UnevaluatedConst<'tcx>,\n         span: Option<Span>,\n     ) -> EvalToConstValueResult<'tcx> {\n         // Cannot resolve `Unevaluated` constants that contain inference\n@@ -49,7 +49,11 @@ impl<'tcx> TyCtxt<'tcx> {\n             bug!(\"did not expect inference variables here\");\n         }\n \n-        match ty::Instance::resolve_opt_const_arg(self, param_env, ct.def, ct.substs) {\n+        match ty::Instance::resolve_opt_const_arg(\n+            self, param_env,\n+            // FIXME: maybe have a seperate version for resolving mir::UnevaluatedConst?\n+            ct.def, ct.substs,\n+        ) {\n             Ok(Some(instance)) => {\n                 let cid = GlobalId { instance, promoted: ct.promoted };\n                 self.const_eval_global_id(param_env, cid, span)\n@@ -63,7 +67,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn const_eval_resolve_for_typeck(\n         self,\n         param_env: ty::ParamEnv<'tcx>,\n-        ct: ty::Unevaluated<'tcx, ()>,\n+        ct: ty::UnevaluatedConst<'tcx>,\n         span: Option<Span>,\n     ) -> EvalToValTreeResult<'tcx> {\n         // Cannot resolve `Unevaluated` constants that contain inference"}, {"sha": "78a167888158301136ba6cd44c341f532bb4a926", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=9a963e3bade50f48a58c14ab5e82646005654b59", "patch": "@@ -2055,7 +2055,7 @@ pub enum ConstantKind<'tcx> {\n     Ty(ty::Const<'tcx>),\n \n     /// An unevaluated mir constant which is not part of the type system.\n-    Unevaluated(ty::Unevaluated<'tcx, Option<Promoted>>, Ty<'tcx>),\n+    Unevaluated(UnevaluatedConst<'tcx>, Ty<'tcx>),\n \n     /// This constant cannot go back into the type system, as it represents\n     /// something the type system cannot handle (e.g. pointers).\n@@ -2315,12 +2315,11 @@ impl<'tcx> ConstantKind<'tcx> {\n             ty::InlineConstSubsts::new(tcx, ty::InlineConstSubstsParts { parent_substs, ty })\n                 .substs;\n \n-        let uneval = ty::Unevaluated {\n+        let uneval = UnevaluatedConst {\n             def: ty::WithOptConstParam::unknown(def_id).to_global(),\n             substs,\n             promoted: None,\n         };\n-\n         debug_assert!(!uneval.has_free_regions());\n \n         Self::Unevaluated(uneval, ty)\n@@ -2404,7 +2403,7 @@ impl<'tcx> ConstantKind<'tcx> {\n \n         let hir_id = tcx.hir().local_def_id_to_hir_id(def.did);\n         let span = tcx.hir().span(hir_id);\n-        let uneval = ty::Unevaluated::new(def.to_global(), substs);\n+        let uneval = UnevaluatedConst::new(def.to_global(), substs);\n         debug!(?span, ?param_env);\n \n         match tcx.const_eval_resolve(param_env, uneval, Some(span)) {\n@@ -2417,7 +2416,7 @@ impl<'tcx> ConstantKind<'tcx> {\n                 // Error was handled in `const_eval_resolve`. Here we just create a\n                 // new unevaluated const and error hard later in codegen\n                 Self::Unevaluated(\n-                    ty::Unevaluated {\n+                    UnevaluatedConst {\n                         def: def.to_global(),\n                         substs: InternalSubsts::identity_for_item(tcx, def.did.to_def_id()),\n                         promoted: None,\n@@ -2440,6 +2439,34 @@ impl<'tcx> ConstantKind<'tcx> {\n     }\n }\n \n+/// An unevaluated (potentially generic) constant used in MIR.\n+#[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable, Lift)]\n+#[derive(Hash, HashStable)]\n+pub struct UnevaluatedConst<'tcx> {\n+    pub def: ty::WithOptConstParam<DefId>,\n+    pub substs: SubstsRef<'tcx>,\n+    pub promoted: Option<Promoted>,\n+}\n+\n+impl<'tcx> UnevaluatedConst<'tcx> {\n+    // FIXME: probably should get rid of this method. It's also wrong to\n+    // shrink and then later expand a promoted.\n+    #[inline]\n+    pub fn shrink(self) -> ty::UnevaluatedConst<'tcx> {\n+        ty::UnevaluatedConst { def: self.def, substs: self.substs }\n+    }\n+}\n+\n+impl<'tcx> UnevaluatedConst<'tcx> {\n+    #[inline]\n+    pub fn new(\n+        def: ty::WithOptConstParam<DefId>,\n+        substs: SubstsRef<'tcx>,\n+    ) -> UnevaluatedConst<'tcx> {\n+        UnevaluatedConst { def, substs, promoted: Default::default() }\n+    }\n+}\n+\n /// A collection of projections into user types.\n ///\n /// They are projections because a binding can occur a part of a"}, {"sha": "05dcfba77b23347603cc1933758263c16b53967b", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=9a963e3bade50f48a58c14ab5e82646005654b59", "patch": "@@ -466,10 +466,9 @@ impl<'tcx> Visitor<'tcx> for ExtraComments<'tcx> {\n                     ty::ConstKind::Param(p) => format!(\"Param({})\", p),\n                     ty::ConstKind::Unevaluated(uv) => {\n                         format!(\n-                            \"Unevaluated({}, {:?}, {:?})\",\n+                            \"Unevaluated({}, {:?})\",\n                             self.tcx.def_path_str(uv.def.did),\n                             uv.substs,\n-                            uv.promoted,\n                         )\n                     }\n                     ty::ConstKind::Value(val) => format!(\"Value({})\", fmt_valtree(&val)),"}, {"sha": "8e18cad442ed9f46a3c6cf6cdcbcaf2a065d025f", "filename": "compiler/rustc_middle/src/mir/type_foldable.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs?ref=9a963e3bade50f48a58c14ab5e82646005654b59", "patch": "@@ -3,6 +3,7 @@\n use rustc_ast::InlineAsmTemplatePiece;\n \n use super::*;\n+use crate::mir;\n use crate::ty;\n \n TrivialTypeTraversalAndLiftImpls! {\n@@ -50,6 +51,25 @@ impl<'tcx, R: Idx, C: Idx> TypeFoldable<'tcx> for BitMatrix<R, C> {\n     }\n }\n \n+impl<'tcx> TypeFoldable<'tcx> for mir::UnevaluatedConst<'tcx> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+        folder.try_fold_mir_unevaluated(self)\n+    }\n+}\n+\n+impl<'tcx> TypeSuperFoldable<'tcx> for mir::UnevaluatedConst<'tcx> {\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n+        self,\n+        folder: &mut F,\n+    ) -> Result<Self, F::Error> {\n+        Ok(mir::UnevaluatedConst {\n+            def: self.def,\n+            substs: self.substs.try_fold_with(folder)?,\n+            promoted: self.promoted,\n+        })\n+    }\n+}\n+\n impl<'tcx> TypeFoldable<'tcx> for ConstantKind<'tcx> {\n     #[inline(always)]\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {"}, {"sha": "a136ca4d8c37f0219a620a838c07b21371ac03d0", "filename": "compiler/rustc_middle/src/mir/type_visitable.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs?ref=9a963e3bade50f48a58c14ab5e82646005654b59", "patch": "@@ -1,13 +1,26 @@\n //! `TypeVisitable` implementations for MIR types\n \n use super::*;\n+use crate::mir;\n \n impl<'tcx, R: Idx, C: Idx> TypeVisitable<'tcx> for BitMatrix<R, C> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::CONTINUE\n     }\n }\n \n+impl<'tcx> TypeVisitable<'tcx> for mir::UnevaluatedConst<'tcx> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        visitor.visit_mir_unevaluated(*self)\n+    }\n+}\n+\n+impl<'tcx> TypeSuperVisitable<'tcx> for mir::UnevaluatedConst<'tcx> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        self.substs.visit_with(visitor)\n+    }\n+}\n+\n impl<'tcx> TypeVisitable<'tcx> for ConstantKind<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_mir_const(*self)"}, {"sha": "b4ae13edf08d2075f6b6f1502a62852b8f861c95", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=9a963e3bade50f48a58c14ab5e82646005654b59", "patch": "@@ -381,7 +381,7 @@ rustc_queries! {\n     }\n \n     query try_unify_abstract_consts(key:\n-        ty::ParamEnvAnd<'tcx, (ty::Unevaluated<'tcx, ()>, ty::Unevaluated<'tcx, ()>\n+        ty::ParamEnvAnd<'tcx, (ty::UnevaluatedConst<'tcx>, ty::UnevaluatedConst<'tcx>\n     )>) -> bool {\n         desc {\n             |tcx| \"trying to unify the generic constants {} and {}\","}, {"sha": "641e53f2a154c1975de2430ec2566485ec36a507", "filename": "compiler/rustc_middle/src/ty/abstract_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs?ref=9a963e3bade50f48a58c14ab5e82646005654b59", "patch": "@@ -30,7 +30,7 @@ pub struct AbstractConst<'tcx> {\n impl<'tcx> AbstractConst<'tcx> {\n     pub fn new(\n         tcx: TyCtxt<'tcx>,\n-        uv: ty::Unevaluated<'tcx, ()>,\n+        uv: ty::UnevaluatedConst<'tcx>,\n     ) -> Result<Option<AbstractConst<'tcx>>, ErrorGuaranteed> {\n         let inner = tcx.thir_abstract_const_opt_const_arg(uv.def)?;\n         debug!(\"AbstractConst::new({:?}) = {:?}\", uv, inner);"}, {"sha": "315e3794f15e9149fd0f0a11f9029e2015bdc744", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=9a963e3bade50f48a58c14ab5e82646005654b59", "patch": "@@ -78,10 +78,9 @@ impl<'tcx> Const<'tcx> {\n         match Self::try_eval_lit_or_param(tcx, ty, expr) {\n             Some(v) => v,\n             None => tcx.mk_const(ty::ConstS {\n-                kind: ty::ConstKind::Unevaluated(ty::Unevaluated {\n+                kind: ty::ConstKind::Unevaluated(ty::UnevaluatedConst {\n                     def: def.to_global(),\n                     substs: InternalSubsts::identity_for_item(tcx, def.did.to_def_id()),\n-                    promoted: (),\n                 }),\n                 ty,\n             }),"}, {"sha": "c444ec23563ce816001225d482b8d874cd964bf2", "filename": "compiler/rustc_middle/src/ty/consts/kind.rs", "status": "modified", "additions": 15, "deletions": 24, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs?ref=9a963e3bade50f48a58c14ab5e82646005654b59", "patch": "@@ -1,7 +1,7 @@\n use std::convert::TryInto;\n \n+use crate::mir;\n use crate::mir::interpret::{AllocId, ConstValue, Scalar};\n-use crate::mir::Promoted;\n use crate::ty::subst::{InternalSubsts, SubstsRef};\n use crate::ty::ParamEnv;\n use crate::ty::{self, TyCtxt, TypeVisitable};\n@@ -12,40 +12,34 @@ use rustc_target::abi::Size;\n \n use super::ScalarInt;\n \n-/// An unevaluated, potentially generic, constant.\n+/// An unevaluated (potentially generic) constant used in the type-system.\n #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable, Lift)]\n #[derive(Hash, HashStable)]\n-pub struct Unevaluated<'tcx, P = Option<Promoted>> {\n+pub struct UnevaluatedConst<'tcx> {\n     pub def: ty::WithOptConstParam<DefId>,\n     pub substs: SubstsRef<'tcx>,\n-    pub promoted: P,\n }\n \n-impl rustc_errors::IntoDiagnosticArg for Unevaluated<'_> {\n+impl rustc_errors::IntoDiagnosticArg for UnevaluatedConst<'_> {\n     fn into_diagnostic_arg(self) -> rustc_errors::DiagnosticArgValue<'static> {\n         format!(\"{:?}\", self).into_diagnostic_arg()\n     }\n }\n \n-impl<'tcx> Unevaluated<'tcx> {\n+impl<'tcx> UnevaluatedConst<'tcx> {\n     #[inline]\n-    pub fn shrink(self) -> Unevaluated<'tcx, ()> {\n-        debug_assert_eq!(self.promoted, None);\n-        Unevaluated { def: self.def, substs: self.substs, promoted: () }\n+    pub fn expand(self) -> mir::UnevaluatedConst<'tcx> {\n+        mir::UnevaluatedConst { def: self.def, substs: self.substs, promoted: None }\n     }\n }\n \n-impl<'tcx> Unevaluated<'tcx, ()> {\n+impl<'tcx> UnevaluatedConst<'tcx> {\n     #[inline]\n-    pub fn expand(self) -> Unevaluated<'tcx> {\n-        Unevaluated { def: self.def, substs: self.substs, promoted: None }\n-    }\n-}\n-\n-impl<'tcx, P: Default> Unevaluated<'tcx, P> {\n-    #[inline]\n-    pub fn new(def: ty::WithOptConstParam<DefId>, substs: SubstsRef<'tcx>) -> Unevaluated<'tcx, P> {\n-        Unevaluated { def, substs, promoted: Default::default() }\n+    pub fn new(\n+        def: ty::WithOptConstParam<DefId>,\n+        substs: SubstsRef<'tcx>,\n+    ) -> UnevaluatedConst<'tcx> {\n+        UnevaluatedConst { def, substs }\n     }\n }\n \n@@ -67,7 +61,7 @@ pub enum ConstKind<'tcx> {\n \n     /// Used in the HIR by using `Unevaluated` everywhere and later normalizing to one of the other\n     /// variants when the code is monomorphic enough for that.\n-    Unevaluated(Unevaluated<'tcx, ()>),\n+    Unevaluated(UnevaluatedConst<'tcx>),\n \n     /// Used to hold computed value.\n     Value(ty::ValTree<'tcx>),\n@@ -185,8 +179,6 @@ impl<'tcx> ConstKind<'tcx> {\n         if let ConstKind::Unevaluated(unevaluated) = self {\n             use crate::mir::interpret::ErrorHandled;\n \n-            assert_eq!(unevaluated.promoted, ());\n-\n             // HACK(eddyb) this erases lifetimes even though `const_eval_resolve`\n             // also does later, but we want to do it before checking for\n             // inference variables.\n@@ -204,10 +196,9 @@ impl<'tcx> ConstKind<'tcx> {\n             // FIXME(eddyb, skinny121) pass `InferCtxt` into here when it's available, so that\n             // we can call `infcx.const_eval_resolve` which handles inference variables.\n             let param_env_and = if param_env_and.needs_infer() {\n-                tcx.param_env(unevaluated.def.did).and(ty::Unevaluated {\n+                tcx.param_env(unevaluated.def.did).and(ty::UnevaluatedConst {\n                     def: unevaluated.def,\n                     substs: InternalSubsts::identity_for_item(tcx, unevaluated.def.did),\n-                    promoted: (),\n                 })\n             } else {\n                 param_env_and"}, {"sha": "a6d0678e99d6d681e92f3877cfd827aac9b17d74", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=9a963e3bade50f48a58c14ab5e82646005654b59", "patch": "@@ -34,7 +34,7 @@ impl FlagComputation {\n         result.flags\n     }\n \n-    pub fn for_unevaluated_const(uv: ty::Unevaluated<'_>) -> TypeFlags {\n+    pub fn for_unevaluated_const(uv: ty::UnevaluatedConst<'_>) -> TypeFlags {\n         let mut result = FlagComputation::new();\n         result.add_unevaluated_const(uv);\n         result.flags\n@@ -313,7 +313,7 @@ impl FlagComputation {\n         }\n     }\n \n-    fn add_unevaluated_const<P>(&mut self, ct: ty::Unevaluated<'_, P>) {\n+    fn add_unevaluated_const(&mut self, ct: ty::UnevaluatedConst<'_>) {\n         self.add_substs(ct.substs);\n         self.add_flags(TypeFlags::HAS_CT_PROJECTION);\n     }"}, {"sha": "e4234442faef547bd18329ee53404a3fe816f855", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=9a963e3bade50f48a58c14ab5e82646005654b59", "patch": "@@ -128,7 +128,17 @@ pub trait TypeFolder<'tcx>: FallibleTypeFolder<'tcx, Error = !> {\n         c.super_fold_with(self)\n     }\n \n-    fn fold_unevaluated(&mut self, uv: ty::Unevaluated<'tcx>) -> ty::Unevaluated<'tcx> {\n+    fn fold_ty_unevaluated(\n+        &mut self,\n+        uv: ty::UnevaluatedConst<'tcx>,\n+    ) -> ty::UnevaluatedConst<'tcx> {\n+        uv.super_fold_with(self)\n+    }\n+\n+    fn fold_mir_unevaluated(\n+        &mut self,\n+        uv: mir::UnevaluatedConst<'tcx>,\n+    ) -> mir::UnevaluatedConst<'tcx> {\n         uv.super_fold_with(self)\n     }\n \n@@ -172,10 +182,17 @@ pub trait FallibleTypeFolder<'tcx>: Sized {\n         c.try_super_fold_with(self)\n     }\n \n-    fn try_fold_unevaluated(\n+    fn try_fold_ty_unevaluated(\n+        &mut self,\n+        c: ty::UnevaluatedConst<'tcx>,\n+    ) -> Result<ty::UnevaluatedConst<'tcx>, Self::Error> {\n+        c.try_super_fold_with(self)\n+    }\n+\n+    fn try_fold_mir_unevaluated(\n         &mut self,\n-        c: ty::Unevaluated<'tcx>,\n-    ) -> Result<ty::Unevaluated<'tcx>, Self::Error> {\n+        c: mir::UnevaluatedConst<'tcx>,\n+    ) -> Result<mir::UnevaluatedConst<'tcx>, Self::Error> {\n         c.try_super_fold_with(self)\n     }\n \n@@ -225,11 +242,18 @@ where\n         Ok(self.fold_const(c))\n     }\n \n-    fn try_fold_unevaluated(\n+    fn try_fold_ty_unevaluated(\n+        &mut self,\n+        c: ty::UnevaluatedConst<'tcx>,\n+    ) -> Result<ty::UnevaluatedConst<'tcx>, !> {\n+        Ok(self.fold_ty_unevaluated(c))\n+    }\n+\n+    fn try_fold_mir_unevaluated(\n         &mut self,\n-        c: ty::Unevaluated<'tcx>,\n-    ) -> Result<ty::Unevaluated<'tcx>, !> {\n-        Ok(self.fold_unevaluated(c))\n+        c: mir::UnevaluatedConst<'tcx>,\n+    ) -> Result<mir::UnevaluatedConst<'tcx>, !> {\n+        Ok(self.fold_mir_unevaluated(c))\n     }\n \n     fn try_fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> Result<ty::Predicate<'tcx>, !> {"}, {"sha": "63dd213a0854f9fc6cc4c3ba22520f728558b051", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=9a963e3bade50f48a58c14ab5e82646005654b59", "patch": "@@ -73,7 +73,7 @@ pub use self::closure::{\n     CAPTURE_STRUCT_LOCAL,\n };\n pub use self::consts::{\n-    Const, ConstInt, ConstKind, ConstS, InferConst, ScalarInt, Unevaluated, ValTree,\n+    Const, ConstInt, ConstKind, ConstS, InferConst, ScalarInt, UnevaluatedConst, ValTree,\n };\n pub use self::context::{\n     tls, CanonicalUserType, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations,\n@@ -682,7 +682,7 @@ pub enum PredicateKind<'tcx> {\n     Coerce(CoercePredicate<'tcx>),\n \n     /// Constant initializer must evaluate successfully.\n-    ConstEvaluatable(ty::Unevaluated<'tcx, ()>),\n+    ConstEvaluatable(ty::UnevaluatedConst<'tcx>),\n \n     /// Constants must be equal. The first component is the const that is expected.\n     ConstEquate(Const<'tcx>, Const<'tcx>),"}, {"sha": "b76e89998080065db65280987ad3385ed552d6e9", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=9a963e3bade50f48a58c14ab5e82646005654b59", "patch": "@@ -1201,9 +1201,7 @@ pub trait PrettyPrinter<'tcx>:\n         }\n \n         match ct.kind() {\n-            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }) => {\n-                assert_eq!(promoted, ());\n-\n+            ty::ConstKind::Unevaluated(ty::UnevaluatedConst { def, substs }) => {\n                 match self.tcx().def_kind(def.did) {\n                     DefKind::Static(..) | DefKind::Const | DefKind::AssocConst => {\n                         p!(print_value_path(def.did, substs))"}, {"sha": "cdb618e030afec2385a25d702ee32a20b21ccc92", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=9a963e3bade50f48a58c14ab5e82646005654b59", "patch": "@@ -621,23 +621,15 @@ pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(\n         // While this is slightly incorrect, it shouldn't matter for `min_const_generics`\n         // and is the better alternative to waiting until `generic_const_exprs` can\n         // be stabilized.\n-        (ty::ConstKind::Unevaluated(au), ty::ConstKind::Unevaluated(bu))\n-            if au.def == bu.def && au.promoted == bu.promoted =>\n-        {\n-            assert_eq!(au.promoted, ());\n-\n+        (ty::ConstKind::Unevaluated(au), ty::ConstKind::Unevaluated(bu)) if au.def == bu.def => {\n             let substs = relation.relate_with_variance(\n                 ty::Variance::Invariant,\n                 ty::VarianceDiagInfo::default(),\n                 au.substs,\n                 bu.substs,\n             )?;\n             return Ok(tcx.mk_const(ty::ConstS {\n-                kind: ty::ConstKind::Unevaluated(ty::Unevaluated {\n-                    def: au.def,\n-                    substs,\n-                    promoted: (),\n-                }),\n+                kind: ty::ConstKind::Unevaluated(ty::UnevaluatedConst { def: au.def, substs }),\n                 ty: a.ty(),\n             }));\n         }"}, {"sha": "3b42f4b51fc49a5a833238ee9848abdab5b4b068", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 7, "deletions": 23, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=9a963e3bade50f48a58c14ab5e82646005654b59", "patch": "@@ -829,45 +829,29 @@ impl<'tcx> TypeVisitable<'tcx> for InferConst<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for ty::Unevaluated<'tcx> {\n+impl<'tcx> TypeFoldable<'tcx> for ty::UnevaluatedConst<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n-        folder.try_fold_unevaluated(self)\n+        folder.try_fold_ty_unevaluated(self)\n     }\n }\n \n-impl<'tcx> TypeVisitable<'tcx> for ty::Unevaluated<'tcx> {\n+impl<'tcx> TypeVisitable<'tcx> for ty::UnevaluatedConst<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        visitor.visit_unevaluated(*self)\n+        visitor.visit_ty_unevaluated(*self)\n     }\n }\n \n-impl<'tcx> TypeSuperFoldable<'tcx> for ty::Unevaluated<'tcx> {\n+impl<'tcx> TypeSuperFoldable<'tcx> for ty::UnevaluatedConst<'tcx> {\n     fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n-        Ok(ty::Unevaluated {\n-            def: self.def,\n-            substs: self.substs.try_fold_with(folder)?,\n-            promoted: self.promoted,\n-        })\n+        Ok(ty::UnevaluatedConst { def: self.def, substs: self.substs.try_fold_with(folder)? })\n     }\n }\n \n-impl<'tcx> TypeSuperVisitable<'tcx> for ty::Unevaluated<'tcx> {\n+impl<'tcx> TypeSuperVisitable<'tcx> for ty::UnevaluatedConst<'tcx> {\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.substs.visit_with(visitor)\n     }\n }\n-\n-impl<'tcx> TypeFoldable<'tcx> for ty::Unevaluated<'tcx, ()> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n-        Ok(self.expand().try_fold_with(folder)?.shrink())\n-    }\n-}\n-\n-impl<'tcx> TypeVisitable<'tcx> for ty::Unevaluated<'tcx, ()> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        self.expand().visit_with(visitor)\n-    }\n-}"}, {"sha": "9c3b6a794e19a4095a369be165721fd0389e7161", "filename": "compiler/rustc_middle/src/ty/visit.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs?ref=9a963e3bade50f48a58c14ab5e82646005654b59", "patch": "@@ -199,7 +199,17 @@ pub trait TypeVisitor<'tcx>: Sized {\n         c.super_visit_with(self)\n     }\n \n-    fn visit_unevaluated(&mut self, uv: ty::Unevaluated<'tcx>) -> ControlFlow<Self::BreakTy> {\n+    fn visit_ty_unevaluated(\n+        &mut self,\n+        uv: ty::UnevaluatedConst<'tcx>,\n+    ) -> ControlFlow<Self::BreakTy> {\n+        uv.super_visit_with(self)\n+    }\n+\n+    fn visit_mir_unevaluated(\n+        &mut self,\n+        uv: mir::UnevaluatedConst<'tcx>,\n+    ) -> ControlFlow<Self::BreakTy> {\n         uv.super_visit_with(self)\n     }\n \n@@ -597,7 +607,10 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n \n     #[inline]\n     #[instrument(level = \"trace\", ret)]\n-    fn visit_unevaluated(&mut self, uv: ty::Unevaluated<'tcx>) -> ControlFlow<Self::BreakTy> {\n+    fn visit_ty_unevaluated(\n+        &mut self,\n+        uv: ty::UnevaluatedConst<'tcx>,\n+    ) -> ControlFlow<Self::BreakTy> {\n         let flags = FlagComputation::for_unevaluated_const(uv);\n         trace!(r.flags=?flags);\n         if flags.intersects(self.flags) {\n@@ -607,6 +620,19 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n         }\n     }\n \n+    fn visit_mir_unevaluated(\n+        &mut self,\n+        uv: mir::UnevaluatedConst<'tcx>,\n+    ) -> ControlFlow<Self::BreakTy> {\n+        let flags = FlagComputation::for_unevaluated_const(uv.shrink());\n+        trace!(r.flags=?flags);\n+        if flags.intersects(self.flags) {\n+            ControlFlow::Break(FoundFlags)\n+        } else {\n+            ControlFlow::CONTINUE\n+        }\n+    }\n+\n     #[inline]\n     #[instrument(level = \"trace\", ret)]\n     fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "37dc1ad9f0d4e90fefaa028f825c2683d9c01656", "filename": "compiler/rustc_mir_build/src/build/expr/as_constant.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs?ref=9a963e3bade50f48a58c14ab5e82646005654b59", "patch": "@@ -2,6 +2,7 @@\n \n use crate::build::{parse_float_into_constval, Builder};\n use rustc_ast as ast;\n+use rustc_middle::mir;\n use rustc_middle::mir::interpret::{\n     Allocation, ConstValue, LitToConstError, LitToConstInput, Scalar,\n };\n@@ -66,7 +67,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     })\n                 });\n \n-                let uneval = ty::Unevaluated::new(ty::WithOptConstParam::unknown(def_id), substs);\n+                let uneval =\n+                    mir::UnevaluatedConst::new(ty::WithOptConstParam::unknown(def_id), substs);\n                 let literal = ConstantKind::Unevaluated(uneval, ty);\n \n                 Constant { user_ty, span, literal }\n@@ -79,7 +81,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 Constant { user_ty: None, span, literal }\n             }\n             ExprKind::ConstBlock { did: def_id, substs } => {\n-                let uneval = ty::Unevaluated::new(ty::WithOptConstParam::unknown(def_id), substs);\n+                let uneval =\n+                    mir::UnevaluatedConst::new(ty::WithOptConstParam::unknown(def_id), substs);\n                 let literal = ConstantKind::Unevaluated(uneval, ty);\n \n                 Constant { user_ty: None, span, literal }"}, {"sha": "973f55437eeb336e84c40c33ead26a570218f0ae", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=9a963e3bade50f48a58c14ab5e82646005654b59", "patch": "@@ -16,8 +16,8 @@ use rustc_index::bit_set::BitSet;\n use rustc_index::vec::IndexVec;\n use rustc_middle::mir::visit::Visitor;\n use rustc_middle::mir::{\n-    AssertKind, BinOp, Body, Constant, ConstantKind, Local, LocalDecl, Location, Operand, Place,\n-    Rvalue, SourceInfo, SourceScope, SourceScopeData, Statement, StatementKind, Terminator,\n+    self, AssertKind, BinOp, Body, Constant, ConstantKind, Local, LocalDecl, Location, Operand,\n+    Place, Rvalue, SourceInfo, SourceScope, SourceScopeData, Statement, StatementKind, Terminator,\n     TerminatorKind, UnOp, RETURN_PLACE,\n };\n use rustc_middle::ty::layout::{LayoutError, LayoutOf, LayoutOfHelpers, TyAndLayout};\n@@ -301,7 +301,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                     let lint_only = match c.literal {\n                         ConstantKind::Ty(ct) => ct.needs_subst(),\n                         ConstantKind::Unevaluated(\n-                            ty::Unevaluated { def: _, substs: _, promoted: Some(_) },\n+                            mir::UnevaluatedConst { def: _, substs: _, promoted: Some(_) },\n                             _,\n                         ) => {\n                             // Promoteds must lint and not error as the user didn't ask for them"}, {"sha": "852557ba7969fd3bda90c23bffcf7d0845bd4b75", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=9a963e3bade50f48a58c14ab5e82646005654b59", "patch": "@@ -605,7 +605,7 @@ impl<'tcx> Inliner<'tcx> {\n                 caller_body.required_consts.extend(\n                     callee_body.required_consts.iter().copied().filter(|&ct| match ct.literal {\n                         ConstantKind::Ty(_) => {\n-                            bug!(\"should never encounter ty::Unevaluated in `required_consts`\")\n+                            bug!(\"should never encounter ty::UnevaluatedConst in `required_consts`\")\n                         }\n                         ConstantKind::Val(..) | ConstantKind::Unevaluated(..) => true,\n                     }),"}, {"sha": "b7e3ca571e10bb0e64aa0137a0c903e7466949f3", "filename": "compiler/rustc_monomorphize/src/polymorphize.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs?ref=9a963e3bade50f48a58c14ab5e82646005654b59", "patch": "@@ -8,6 +8,7 @@\n use rustc_hir::{def::DefKind, def_id::DefId, ConstContext};\n use rustc_index::bit_set::FiniteBitSet;\n use rustc_middle::mir::{\n+    self,\n     visit::{TyContext, Visitor},\n     Constant, ConstantKind, Local, LocalDecl, Location,\n };\n@@ -299,11 +300,9 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n                 self.unused_parameters.clear(param.index);\n                 ControlFlow::CONTINUE\n             }\n-            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted })\n+            ty::ConstKind::Unevaluated(ty::UnevaluatedConst { def, substs })\n                 if matches!(self.tcx.def_kind(def.did), DefKind::AnonConst) =>\n             {\n-                assert_eq!(promoted, ());\n-\n                 self.visit_child_body(def.did, substs);\n                 ControlFlow::CONTINUE\n             }\n@@ -318,7 +317,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n \n         match constant {\n             ConstantKind::Ty(ct) => ct.visit_with(self),\n-            ConstantKind::Unevaluated(ty::Unevaluated { def, substs: _, promoted: Some(p) }, _)\n+            ConstantKind::Unevaluated(mir::UnevaluatedConst { def, substs: _, promoted: Some(p) }, _)\n                 // Avoid considering `T` unused when constants are of the form:\n                 //   `<Self as Foo<T>>::foo::promoted[p]`\n                 if self.def_id == def.did && !self.tcx.generics_of(def.did).has_self =>"}, {"sha": "f1c2d03b9be3f2b2986fbe02060860fc4976c222", "filename": "compiler/rustc_query_impl/src/keys.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs?ref=9a963e3bade50f48a58c14ab5e82646005654b59", "patch": "@@ -276,7 +276,7 @@ impl<'tcx> Key for (DefId, SubstsRef<'tcx>) {\n     }\n }\n \n-impl<'tcx> Key for (ty::Unevaluated<'tcx, ()>, ty::Unevaluated<'tcx, ()>) {\n+impl<'tcx> Key for (ty::UnevaluatedConst<'tcx>, ty::UnevaluatedConst<'tcx>) {\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         (self.0).def.did.krate == LOCAL_CRATE"}, {"sha": "617934685949b57a609a42ec1b1f1b0b6fa78e9c", "filename": "compiler/rustc_trait_selection/src/errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_trait_selection%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_trait_selection%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ferrors.rs?ref=9a963e3bade50f48a58c14ab5e82646005654b59", "patch": "@@ -1,6 +1,6 @@\n use rustc_errors::{fluent, ErrorGuaranteed, Handler, IntoDiagnostic};\n use rustc_macros::Diagnostic;\n-use rustc_middle::ty::{PolyTraitRef, Ty, Unevaluated};\n+use rustc_middle::ty::{self, PolyTraitRef, Ty};\n use rustc_session::Limit;\n use rustc_span::{Span, Symbol};\n \n@@ -18,7 +18,7 @@ pub struct DumpVTableEntries<'a> {\n pub struct UnableToConstructConstantValue<'a> {\n     #[primary_span]\n     pub span: Span,\n-    pub unevaluated: Unevaluated<'a>,\n+    pub unevaluated: ty::UnevaluatedConst<'a>,\n }\n \n #[derive(Diagnostic)]"}, {"sha": "6ed4f1b8c4988eb78a408ead8dd7a56edf593d8f", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=9a963e3bade50f48a58c14ab5e82646005654b59", "patch": "@@ -834,7 +834,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n                                     let reported =\n                                         tcx.sess.emit_err(UnableToConstructConstantValue {\n                                             span: tcx.def_span(def_id),\n-                                            unevaluated: unevaluated.expand(),\n+                                            unevaluated: unevaluated,\n                                         });\n                                     Err(ErrorHandled::Reported(reported))\n                                 }"}, {"sha": "dc585fca34f8c7817b1f16bea5e11d04ff8773d4", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=9a963e3bade50f48a58c14ab5e82646005654b59", "patch": "@@ -138,7 +138,7 @@ impl<'tcx> ConstUnifyCtxt<'tcx> {\n #[instrument(skip(tcx), level = \"debug\")]\n pub fn try_unify_abstract_consts<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    (a, b): (ty::Unevaluated<'tcx, ()>, ty::Unevaluated<'tcx, ()>),\n+    (a, b): (ty::UnevaluatedConst<'tcx>, ty::UnevaluatedConst<'tcx>),\n     param_env: ty::ParamEnv<'tcx>,\n ) -> bool {\n     (|| {\n@@ -161,7 +161,7 @@ pub fn try_unify_abstract_consts<'tcx>(\n #[instrument(skip(infcx), level = \"debug\")]\n pub fn is_const_evaluatable<'cx, 'tcx>(\n     infcx: &InferCtxt<'cx, 'tcx>,\n-    uv: ty::Unevaluated<'tcx, ()>,\n+    uv: ty::UnevaluatedConst<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     span: Span,\n ) -> Result<(), NotConstEvaluatable> {"}, {"sha": "2773b61e9ba620ad129afebe0a1b54513599f11a", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=9a963e3bade50f48a58c14ab5e82646005654b59", "patch": "@@ -838,7 +838,10 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeVisitable<'tcx>>(\n             }\n         }\n \n-        fn visit_unevaluated(&mut self, uv: ty::Unevaluated<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        fn visit_ty_unevaluated(\n+            &mut self,\n+            uv: ty::UnevaluatedConst<'tcx>,\n+        ) -> ControlFlow<Self::BreakTy> {\n             // Constants can only influence object safety if they reference `Self`.\n             // This is only possible for unevaluated constants, so we walk these here.\n             //\n@@ -852,7 +855,7 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeVisitable<'tcx>>(\n             // This shouldn't really matter though as we can't really use any\n             // constants which are not considered const evaluatable.\n             use rustc_middle::ty::abstract_const::Node;\n-            if let Ok(Some(ct)) = AbstractConst::new(self.tcx, uv.shrink()) {\n+            if let Ok(Some(ct)) = AbstractConst::new(self.tcx, uv) {\n                 walk_abstract_const(self.tcx, ct, |node| match node.root(self.tcx) {\n                     Node::Leaf(leaf) => self.visit_const(leaf),\n                     Node::Cast(_, _, ty) => self.visit_ty(ty),"}, {"sha": "07b65a9748d7cd6e940f67fdb8cdb278b1c0419b", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=9a963e3bade50f48a58c14ab5e82646005654b59", "patch": "@@ -2141,7 +2141,7 @@ fn confirm_impl_candidate<'cx, 'tcx>(\n         let identity_substs =\n             crate::traits::InternalSubsts::identity_for_item(tcx, assoc_ty.item.def_id);\n         let did = ty::WithOptConstParam::unknown(assoc_ty.item.def_id);\n-        let kind = ty::ConstKind::Unevaluated(ty::Unevaluated::new(did, identity_substs));\n+        let kind = ty::ConstKind::Unevaluated(ty::UnevaluatedConst::new(did, identity_substs));\n         ty.map_bound(|ty| tcx.mk_const(ty::ConstS { ty, kind }).into())\n     } else {\n         ty.map_bound(|ty| ty.into())"}, {"sha": "493ef3351135513651167789c33b37da4b9d105d", "filename": "compiler/rustc_ty_utils/src/consts.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs?ref=9a963e3bade50f48a58c14ab5e82646005654b59", "patch": "@@ -258,7 +258,8 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n                 self.nodes.push(Node::Leaf(ty::Const::from_value(self.tcx, val, node.ty)))\n             }\n             &ExprKind::NamedConst { def_id, substs, user_ty: _ } => {\n-                let uneval = ty::Unevaluated::new(ty::WithOptConstParam::unknown(def_id), substs);\n+                let uneval =\n+                    ty::UnevaluatedConst::new(ty::WithOptConstParam::unknown(def_id), substs);\n \n                 let constant = self\n                     .tcx"}, {"sha": "e4124185d153d536e8b1881c98a85db1ed9e94cf", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=9a963e3bade50f48a58c14ab5e82646005654b59", "patch": "@@ -1113,10 +1113,12 @@ fn check_type_defn<'tcx, F>(\n                 wfcx.register_obligation(traits::Obligation::new(\n                     cause,\n                     wfcx.param_env,\n-                    ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(ty::Unevaluated::new(\n-                        ty::WithOptConstParam::unknown(discr_def_id.to_def_id()),\n-                        discr_substs,\n-                    )))\n+                    ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(\n+                        ty::UnevaluatedConst::new(\n+                            ty::WithOptConstParam::unknown(discr_def_id.to_def_id()),\n+                            discr_substs,\n+                        ),\n+                    ))\n                     .to_predicate(tcx),\n                 ));\n             }"}, {"sha": "359a79e9979edc40cee49682e60d30b1ff5ff35f", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a963e3bade50f48a58c14ab5e82646005654b59/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=9a963e3bade50f48a58c14ab5e82646005654b59", "patch": "@@ -2393,7 +2393,6 @@ fn const_evaluatable_predicates_of<'tcx>(\n             let def_id = self.tcx.hir().local_def_id(c.hir_id);\n             let ct = ty::Const::from_anon_const(self.tcx, def_id);\n             if let ty::ConstKind::Unevaluated(uv) = ct.kind() {\n-                assert_eq!(uv.promoted, ());\n                 let span = self.tcx.hir().span(c.hir_id);\n                 self.preds.insert((\n                     ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(uv))"}, {"sha": "edcd81061f831791219808d5834d991ebc4e4923", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a963e3bade50f48a58c14ab5e82646005654b59/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a963e3bade50f48a58c14ab5e82646005654b59/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=9a963e3bade50f48a58c14ab5e82646005654b59", "patch": "@@ -234,8 +234,7 @@ pub(crate) fn name_from_pat(p: &hir::Pat<'_>) -> Symbol {\n \n pub(crate) fn print_const(cx: &DocContext<'_>, n: ty::Const<'_>) -> String {\n     match n.kind() {\n-        ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs: _, promoted }) => {\n-            assert_eq!(promoted, ());\n+        ty::ConstKind::Unevaluated(ty::UnevaluatedConst { def, substs: _ }) => {\n             let s = if let Some(def) = def.as_local() {\n                 print_const_expr(cx.tcx, cx.tcx.hir().body_owned_by(def.did))\n             } else {"}, {"sha": "35ad0df69c0b4083d8fc887fbf3224390c3693f5", "filename": "src/test/mir-opt/issue_99325.main.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a963e3bade50f48a58c14ab5e82646005654b59/src%2Ftest%2Fmir-opt%2Fissue_99325.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9a963e3bade50f48a58c14ab5e82646005654b59/src%2Ftest%2Fmir-opt%2Fissue_99325.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_99325.main.mir_map.0.mir?ref=9a963e3bade50f48a58c14ab5e82646005654b59", "patch": "@@ -2,7 +2,7 @@\n \n | User Type Annotations\n | 0: user_ty: Canonical { max_universe: U0, variables: [], value: TypeOf(DefId(0:3 ~ issue_99325[8f58]::function_with_bytes), UserSubsts { substs: [Const { ty: &'static [u8; 4], kind: Value(Branch([Leaf(0x41), Leaf(0x41), Leaf(0x41), Leaf(0x41)])) }], user_self_ty: None }) }, span: $DIR/issue-99325.rs:10:16: 10:46, inferred_ty: fn() -> &'static [u8] {function_with_bytes::<&*b\"AAAA\">}\n-| 1: user_ty: Canonical { max_universe: U0, variables: [], value: TypeOf(DefId(0:3 ~ issue_99325[8f58]::function_with_bytes), UserSubsts { substs: [Const { ty: &'static [u8; 4], kind: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:8 ~ issue_99325[8f58]::main::{constant#1}), const_param_did: Some(DefId(0:4 ~ issue_99325[8f58]::function_with_bytes::BYTES)) }, substs: [], promoted: () }) }], user_self_ty: None }) }, span: $DIR/issue-99325.rs:11:16: 11:68, inferred_ty: fn() -> &'static [u8] {function_with_bytes::<&*b\"AAAA\">}\n+| 1: user_ty: Canonical { max_universe: U0, variables: [], value: TypeOf(DefId(0:3 ~ issue_99325[8f58]::function_with_bytes), UserSubsts { substs: [Const { ty: &'static [u8; 4], kind: Unevaluated(UnevaluatedConst { def: WithOptConstParam { did: DefId(0:8 ~ issue_99325[8f58]::main::{constant#1}), const_param_did: Some(DefId(0:4 ~ issue_99325[8f58]::function_with_bytes::BYTES)) }, substs: [] }) }], user_self_ty: None }) }, span: $DIR/issue-99325.rs:11:16: 11:68, inferred_ty: fn() -> &'static [u8] {function_with_bytes::<&*b\"AAAA\">}\n |\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/issue-99325.rs:+0:15: +0:15"}, {"sha": "b15884527321ce8e3bb86ef704289bcd9d4e9420", "filename": "src/tools/clippy/clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a963e3bade50f48a58c14ab5e82646005654b59/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a963e3bade50f48a58c14ab5e82646005654b59/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=9a963e3bade50f48a58c14ab5e82646005654b59", "patch": "@@ -195,7 +195,7 @@ fn is_value_unfrozen_expr<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId, def_id: D\n \n     let result = cx.tcx.const_eval_resolve(\n         cx.param_env,\n-        ty::Unevaluated::new(ty::WithOptConstParam::unknown(def_id), substs),\n+        mir::UnevaluatedConst::new(ty::WithOptConstParam::unknown(def_id), substs),\n         None,\n     );\n     is_value_unfrozen_raw(cx, result, ty)"}, {"sha": "fa6766f7cfe19ee1ca1c39d572f41e3145133b6b", "filename": "src/tools/clippy/clippy_utils/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a963e3bade50f48a58c14ab5e82646005654b59/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a963e3bade50f48a58c14ab5e82646005654b59/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs?ref=9a963e3bade50f48a58c14ab5e82646005654b59", "patch": "@@ -424,7 +424,7 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n                     .tcx\n                     .const_eval_resolve(\n                         self.param_env,\n-                        ty::Unevaluated::new(ty::WithOptConstParam::unknown(def_id), substs),\n+                        mir::UnevaluatedConst::new(ty::WithOptConstParam::unknown(def_id), substs),\n                         None,\n                     )\n                     .ok()"}]}