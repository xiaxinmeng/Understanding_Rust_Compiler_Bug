{"sha": "2366c464a7aac7e35d9a6f0c43832d31ffd8b4b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzNjZjNDY0YTdhYWM3ZTM1ZDlhNmYwYzQzODMyZDMxZmZkOGI0Yjg=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2017-06-09T20:34:18Z"}, "committer": {"name": "Georg Brandl", "email": "g.brandl@fz-juelich.de", "date": "2017-06-12T08:50:28Z"}, "message": "Add dedicated docstrings to Sum/Product impl of Result\n\n(and fix a minor grammar typo below)", "tree": {"sha": "c72c34d3881b6eeb22c2dcad0ab028301453f754", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c72c34d3881b6eeb22c2dcad0ab028301453f754"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2366c464a7aac7e35d9a6f0c43832d31ffd8b4b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2366c464a7aac7e35d9a6f0c43832d31ffd8b4b8", "html_url": "https://github.com/rust-lang/rust/commit/2366c464a7aac7e35d9a6f0c43832d31ffd8b4b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2366c464a7aac7e35d9a6f0c43832d31ffd8b4b8/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fe923d43455f362408aad30ffc86a6ab71ff7c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fe923d43455f362408aad30ffc86a6ab71ff7c6", "html_url": "https://github.com/rust-lang/rust/commit/5fe923d43455f362408aad30ffc86a6ab71ff7c6"}], "stats": {"total": 22, "additions": 21, "deletions": 1}, "files": [{"sha": "679cf3a9b23eea9eb38fd05aab601072e687fa3f", "filename": "src/libcore/iter/traits.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2366c464a7aac7e35d9a6f0c43832d31ffd8b4b8/src%2Flibcore%2Fiter%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2366c464a7aac7e35d9a6f0c43832d31ffd8b4b8/src%2Flibcore%2Fiter%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits.rs?ref=2366c464a7aac7e35d9a6f0c43832d31ffd8b4b8", "patch": "@@ -798,6 +798,23 @@ impl<I, T, E> Iterator for ResultShunt<I, E>\n impl<T, U, E> Sum<Result<U, E>> for Result<T, E>\n     where T: Sum<U>,\n {\n+    /// Takes each element in the `Iterator`: if it is an `Err`, no further\n+    /// elements are taken, and the `Err` is returned. Should no `Err` occur,\n+    /// the sum of all elements is returned.\n+    ///\n+    /// # Examples\n+    ///\n+    /// This sums up every integer in a vector, rejecting the sum if a negative\n+    /// element is encountered:\n+    ///\n+    /// ```\n+    /// let v = vec![1, 2];\n+    /// let res: Result<i32, &'static str> = v.iter().map(|&x: &i32|\n+    ///     if x < 0 { Err(\"Negative element found\") }\n+    ///     else { Ok(x) }\n+    /// ).sum();\n+    /// assert_eq!(res, Ok(3));\n+    /// ```\n     fn sum<I>(iter: I) -> Result<T, E>\n         where I: Iterator<Item = Result<U, E>>,\n     {\n@@ -809,6 +826,9 @@ impl<T, U, E> Sum<Result<U, E>> for Result<T, E>\n impl<T, U, E> Product<Result<U, E>> for Result<T, E>\n     where T: Product<U>,\n {\n+    /// Takes each element in the `Iterator`: if it is an `Err`, no further\n+    /// elements are taken, and the `Err` is returned. Should no `Err` occur,\n+    /// the product of all elements is returned.\n     fn product<I>(iter: I) -> Result<T, E>\n         where I: Iterator<Item = Result<U, E>>,\n     {\n@@ -819,7 +839,7 @@ impl<T, U, E> Product<Result<U, E>> for Result<T, E>\n /// An iterator that always continues to yield `None` when exhausted.\n ///\n /// Calling next on a fused iterator that has returned `None` once is guaranteed\n-/// to return [`None`] again. This trait is should be implemented by all iterators\n+/// to return [`None`] again. This trait should be implemented by all iterators\n /// that behave this way because it allows for some significant optimizations.\n ///\n /// Note: In general, you should not use `FusedIterator` in generic bounds if"}]}