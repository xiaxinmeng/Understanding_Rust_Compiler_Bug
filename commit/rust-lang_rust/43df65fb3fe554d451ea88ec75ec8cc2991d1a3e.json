{"sha": "43df65fb3fe554d451ea88ec75ec8cc2991d1a3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzZGY2NWZiM2ZlNTU0ZDQ1MWVhODhlYzc1ZWM4Y2MyOTkxZDFhM2U=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-03-01T03:55:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-03-01T03:55:27Z"}, "message": "Rollup merge of #39936 - djzin:inclusive_rangeargument, r=alexcrichton\n\nimpl RangeArgument for RangeInclusive and add appropriate tests\n\nNow that `RangeArgument` returns a `Bound`, the impl for `RangeInclusive` is natural to implement and all that's required are tests around it.", "tree": {"sha": "ba1fb2f32f65317f8ab67f5288fd716313029a14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba1fb2f32f65317f8ab67f5288fd716313029a14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43df65fb3fe554d451ea88ec75ec8cc2991d1a3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43df65fb3fe554d451ea88ec75ec8cc2991d1a3e", "html_url": "https://github.com/rust-lang/rust/commit/43df65fb3fe554d451ea88ec75ec8cc2991d1a3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43df65fb3fe554d451ea88ec75ec8cc2991d1a3e/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ba49ab39f942af3846cf0d8599674b0adde94b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ba49ab39f942af3846cf0d8599674b0adde94b5", "html_url": "https://github.com/rust-lang/rust/commit/4ba49ab39f942af3846cf0d8599674b0adde94b5"}, {"sha": "43382903a19ce209dee136e5f983003062b7ce78", "url": "https://api.github.com/repos/rust-lang/rust/commits/43382903a19ce209dee136e5f983003062b7ce78", "html_url": "https://github.com/rust-lang/rust/commit/43382903a19ce209dee136e5f983003062b7ce78"}], "stats": {"total": 116, "additions": 115, "deletions": 1}, "files": [{"sha": "e4b94a1d70ee4189fe3ce610721aa52cf0bd096c", "filename": "src/libcollections/range.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/43df65fb3fe554d451ea88ec75ec8cc2991d1a3e/src%2Flibcollections%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43df65fb3fe554d451ea88ec75ec8cc2991d1a3e/src%2Flibcollections%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Frange.rs?ref=43df65fb3fe554d451ea88ec75ec8cc2991d1a3e", "patch": "@@ -14,7 +14,7 @@\n \n //! Range syntax.\n \n-use core::ops::{RangeFull, Range, RangeTo, RangeFrom};\n+use core::ops::{RangeFull, Range, RangeTo, RangeFrom, RangeInclusive, RangeToInclusive};\n use Bound::{self, Excluded, Included, Unbounded};\n \n /// **RangeArgument** is implemented by Rust's built-in range types, produced\n@@ -105,6 +105,32 @@ impl<T> RangeArgument<T> for Range<T> {\n     }\n }\n \n+#[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n+impl<T> RangeArgument<T> for RangeInclusive<T> {\n+    fn start(&self) -> Bound<&T> {\n+        match *self {\n+            RangeInclusive::Empty{ ref at }            => Included(at),\n+            RangeInclusive::NonEmpty { ref start, .. } => Included(start),\n+        }\n+    }\n+    fn end(&self) -> Bound<&T> {\n+        match *self {\n+            RangeInclusive::Empty{ ref at }            => Excluded(at),\n+            RangeInclusive::NonEmpty { ref end, .. }   => Included(end),\n+        }\n+    }\n+}\n+\n+#[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n+impl<T> RangeArgument<T> for RangeToInclusive<T> {\n+    fn start(&self) -> Bound<&T> {\n+        Unbounded\n+    }\n+    fn end(&self) -> Bound<&T> {\n+        Included(&self.end)\n+    }\n+}\n+\n impl<T> RangeArgument<T> for (Bound<T>, Bound<T>) {\n     fn start(&self) -> Bound<&T> {\n         match *self {"}, {"sha": "2c899d96940ece9e222adc3ff21600f7f164c708", "filename": "src/libcollectionstest/btree/map.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/43df65fb3fe554d451ea88ec75ec8cc2991d1a3e/src%2Flibcollectionstest%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43df65fb3fe554d451ea88ec75ec8cc2991d1a3e/src%2Flibcollectionstest%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fbtree%2Fmap.rs?ref=43df65fb3fe554d451ea88ec75ec8cc2991d1a3e", "patch": "@@ -178,6 +178,43 @@ fn test_range_small() {\n     assert_eq!(j, size - 2);\n }\n \n+#[test]\n+fn test_range_inclusive() {\n+    let size = 500;\n+\n+    let map: BTreeMap<_, _> = (0...size).map(|i| (i, i)).collect();\n+\n+    fn check<'a, L, R>(lhs: L, rhs: R)\n+        where L: IntoIterator<Item=(&'a i32, &'a i32)>,\n+              R: IntoIterator<Item=(&'a i32, &'a i32)>,\n+    {\n+        let lhs: Vec<_> = lhs.into_iter().collect();\n+        let rhs: Vec<_> = rhs.into_iter().collect();\n+        assert_eq!(lhs, rhs);\n+    }\n+\n+    check(map.range(size + 1...size + 1), vec![]);\n+    check(map.range(size...size), vec![(&size, &size)]);\n+    check(map.range(size...size + 1), vec![(&size, &size)]);\n+    check(map.range(0...0), vec![(&0, &0)]);\n+    check(map.range(0...size - 1), map.range(..size));\n+    check(map.range(-1...-1), vec![]);\n+    check(map.range(-1...size), map.range(..));\n+    check(map.range(...size), map.range(..));\n+    check(map.range(...200), map.range(..201));\n+    check(map.range(5...8), vec![(&5, &5), (&6, &6), (&7, &7), (&8, &8)]);\n+    check(map.range(-1...0), vec![(&0, &0)]);\n+    check(map.range(-1...2), vec![(&0, &0), (&1, &1), (&2, &2)]);\n+}\n+\n+#[test]\n+fn test_range_inclusive_max_value() {\n+    let max = ::std::usize::MAX;\n+    let map: BTreeMap<_, _> = vec![(max, 0)].into_iter().collect();\n+\n+    assert_eq!(map.range(max...max).collect::<Vec<_>>(), &[(&max, &0)]);\n+}\n+\n #[test]\n fn test_range_equal_empty_cases() {\n     let map: BTreeMap<_, _> = (0..5).map(|i| (i, i)).collect();"}, {"sha": "849d2401691691eb013d0e57736fd29db0d5a496", "filename": "src/libcollectionstest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/43df65fb3fe554d451ea88ec75ec8cc2991d1a3e/src%2Flibcollectionstest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43df65fb3fe554d451ea88ec75ec8cc2991d1a3e/src%2Flibcollectionstest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Flib.rs?ref=43df65fb3fe554d451ea88ec75ec8cc2991d1a3e", "patch": "@@ -14,6 +14,7 @@\n #![feature(binary_heap_peek_mut_pop)]\n #![feature(box_syntax)]\n #![feature(btree_range)]\n+#![feature(inclusive_range_syntax)]\n #![feature(collection_placement)]\n #![feature(collections)]\n #![feature(collections_bound)]"}, {"sha": "06d70800d392560e8c99e44fd65edc878c95a114", "filename": "src/libcollectionstest/vec.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/43df65fb3fe554d451ea88ec75ec8cc2991d1a3e/src%2Flibcollectionstest%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43df65fb3fe554d451ea88ec75ec8cc2991d1a3e/src%2Flibcollectionstest%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fvec.rs?ref=43df65fb3fe554d451ea88ec75ec8cc2991d1a3e", "patch": "@@ -507,6 +507,56 @@ fn test_drain_range() {\n     assert_eq!(v, &[(), ()]);\n }\n \n+#[test]\n+fn test_drain_inclusive_range() {\n+    let mut v = vec!['a', 'b', 'c', 'd', 'e'];\n+    for _ in v.drain(1...3) {\n+    }\n+    assert_eq!(v, &['a', 'e']);\n+\n+    let mut v: Vec<_> = (0...5).map(|x| x.to_string()).collect();\n+    for _ in v.drain(1...5) {\n+    }\n+    assert_eq!(v, &[\"0\".to_string()]);\n+\n+    let mut v: Vec<String> = (0...5).map(|x| x.to_string()).collect();\n+    for _ in v.drain(0...5) {\n+    }\n+    assert_eq!(v, Vec::<String>::new());\n+\n+    let mut v: Vec<_> = (0...5).map(|x| x.to_string()).collect();\n+    for _ in v.drain(0...3) {\n+    }\n+    assert_eq!(v, &[\"4\".to_string(), \"5\".to_string()]);\n+\n+    let mut v: Vec<_> = (0...1).map(|x| x.to_string()).collect();\n+    for _ in v.drain(...0) {\n+    }\n+    assert_eq!(v, &[\"1\".to_string()]);\n+}\n+\n+#[test]\n+fn test_drain_max_vec_size() {\n+    let mut v = Vec::<()>::with_capacity(usize::max_value());\n+    unsafe { v.set_len(usize::max_value()); }\n+    for _ in v.drain(usize::max_value() - 1..) {\n+    }\n+    assert_eq!(v.len(), usize::max_value() - 1);\n+\n+    let mut v = Vec::<()>::with_capacity(usize::max_value());\n+    unsafe { v.set_len(usize::max_value()); }\n+    for _ in v.drain(usize::max_value() - 1...usize::max_value() - 1) {\n+    }\n+    assert_eq!(v.len(), usize::max_value() - 1);\n+}\n+\n+#[test]\n+#[should_panic]\n+fn test_drain_inclusive_out_of_bounds() {\n+    let mut v = vec![1, 2, 3, 4, 5];\n+    v.drain(5...5);\n+}\n+\n #[test]\n fn test_into_boxed_slice() {\n     let xs = vec![1, 2, 3];"}]}