{"sha": "d5b2e907444cb202407771eee9dd41c2518c1724", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1YjJlOTA3NDQ0Y2IyMDI0MDc3NzFlZWU5ZGQ0MWMyNTE4YzE3MjQ=", "commit": {"author": {"name": "Aravind Gollakota", "email": "aravindprasant@gmail.com", "date": "2018-04-19T08:15:36Z"}, "committer": {"name": "Aravind Gollakota", "email": "aravindprasant@gmail.com", "date": "2018-04-27T01:28:30Z"}, "message": "Retry canonical trait query in standard mode if overflow occurs\n\nThis is slightly hacky and hopefully only a somewhat temporary solution.", "tree": {"sha": "dd7854dcf82de0db96b20902e01fc7764b92aef6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd7854dcf82de0db96b20902e01fc7764b92aef6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5b2e907444cb202407771eee9dd41c2518c1724", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5b2e907444cb202407771eee9dd41c2518c1724", "html_url": "https://github.com/rust-lang/rust/commit/d5b2e907444cb202407771eee9dd41c2518c1724", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5b2e907444cb202407771eee9dd41c2518c1724/comments", "author": {"login": "aravind-pg", "id": 6913107, "node_id": "MDQ6VXNlcjY5MTMxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/6913107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aravind-pg", "html_url": "https://github.com/aravind-pg", "followers_url": "https://api.github.com/users/aravind-pg/followers", "following_url": "https://api.github.com/users/aravind-pg/following{/other_user}", "gists_url": "https://api.github.com/users/aravind-pg/gists{/gist_id}", "starred_url": "https://api.github.com/users/aravind-pg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aravind-pg/subscriptions", "organizations_url": "https://api.github.com/users/aravind-pg/orgs", "repos_url": "https://api.github.com/users/aravind-pg/repos", "events_url": "https://api.github.com/users/aravind-pg/events{/privacy}", "received_events_url": "https://api.github.com/users/aravind-pg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aravind-pg", "id": 6913107, "node_id": "MDQ6VXNlcjY5MTMxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/6913107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aravind-pg", "html_url": "https://github.com/aravind-pg", "followers_url": "https://api.github.com/users/aravind-pg/followers", "following_url": "https://api.github.com/users/aravind-pg/following{/other_user}", "gists_url": "https://api.github.com/users/aravind-pg/gists{/gist_id}", "starred_url": "https://api.github.com/users/aravind-pg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aravind-pg/subscriptions", "organizations_url": "https://api.github.com/users/aravind-pg/orgs", "repos_url": "https://api.github.com/users/aravind-pg/repos", "events_url": "https://api.github.com/users/aravind-pg/events{/privacy}", "received_events_url": "https://api.github.com/users/aravind-pg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cb0372160d4c97b967aa46e05ceb850be0cce44", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cb0372160d4c97b967aa46e05ceb850be0cce44", "html_url": "https://github.com/rust-lang/rust/commit/5cb0372160d4c97b967aa46e05ceb850be0cce44"}], "stats": {"total": 65, "additions": 41, "deletions": 24}, "files": [{"sha": "4e028cac49abe18474503d907447d865a88038f5", "filename": "src/librustc/traits/query/evaluate_obligation.rs", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d5b2e907444cb202407771eee9dd41c2518c1724/src%2Flibrustc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b2e907444cb202407771eee9dd41c2518c1724/src%2Flibrustc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fevaluate_obligation.rs?ref=d5b2e907444cb202407771eee9dd41c2518c1724", "patch": "@@ -10,7 +10,8 @@\n \n use infer::InferCtxt;\n use infer::canonical::{Canonical, Canonicalize};\n-use traits::{EvaluationResult, PredicateObligation};\n+use traits::{EvaluationResult, PredicateObligation, SelectionContext,\n+             TraitQueryMode, OverflowError};\n use traits::query::CanonicalPredicateGoal;\n use ty::{ParamEnvAnd, Predicate, TyCtxt};\n \n@@ -21,10 +22,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n     ) -> bool {\n-        let (c_pred, _) =\n-            self.canonicalize_query(&obligation.param_env.and(obligation.predicate));\n-\n-        self.tcx.global_tcx().evaluate_obligation(c_pred).may_apply()\n+        self.evaluate_obligation(obligation).may_apply()\n     }\n \n     /// Evaluates whether the predicate can be satisfied in the given\n@@ -34,11 +32,29 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n     ) -> bool {\n+        self.evaluate_obligation(obligation) == EvaluationResult::EvaluatedToOk\n+    }\n+\n+    // Helper function that canonicalizes and runs the query, as well as handles\n+    // overflow.\n+    fn evaluate_obligation(\n+        &self,\n+        obligation: &PredicateObligation<'tcx>,\n+    ) -> EvaluationResult {\n         let (c_pred, _) =\n             self.canonicalize_query(&obligation.param_env.and(obligation.predicate));\n-\n-        self.tcx.global_tcx().evaluate_obligation(c_pred) ==\n-            EvaluationResult::EvaluatedToOk\n+        // Run canonical query. If overflow occurs, rerun from scratch but this time\n+        // in standard trait query mode so that overflow is handled appropriately\n+        // within `SelectionContext`.\n+        match self.tcx.global_tcx().evaluate_obligation(c_pred) {\n+            Ok(result) => result,\n+            Err(OverflowError) => {\n+                let mut selcx =\n+                    SelectionContext::with_query_mode(&self, TraitQueryMode::Standard);\n+                selcx.evaluate_obligation_recursively(obligation)\n+                     .expect(\"Overflow should be caught earlier in standard query mode\")\n+            }\n+        }\n     }\n }\n "}, {"sha": "4ba3655bb644abec51a0c615aedd4d0d58e55ba9", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d5b2e907444cb202407771eee9dd41c2518c1724/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b2e907444cb202407771eee9dd41c2518c1724/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=d5b2e907444cb202407771eee9dd41c2518c1724", "patch": "@@ -425,6 +425,8 @@ impl_stable_hash_for!(enum self::EvaluationResult {\n /// Indicates that trait evaluation caused overflow.\n pub struct OverflowError;\n \n+impl_stable_hash_for!(struct OverflowError { });\n+\n impl<'tcx> From<OverflowError> for SelectionError<'tcx> {\n     fn from(OverflowError: OverflowError) -> SelectionError<'tcx> {\n         SelectionError::Overflow\n@@ -568,20 +570,23 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n \n         let stack = self.push_stack(TraitObligationStackList::empty(), obligation);\n \n-        // `select` is currently only called in standard query mode\n-        assert!(self.query_mode == TraitQueryMode::Standard);\n-\n         let candidate = match self.candidate_from_obligation(&stack) {\n-            Err(SelectionError::Overflow) =>\n-                bug!(\"Overflow should be caught earlier in standard query mode\"),\n+            Err(SelectionError::Overflow) => {\n+                // In standard mode, overflow must have been caught and reported\n+                // earlier.\n+                assert!(self.query_mode == TraitQueryMode::Canonical);\n+                return Err(SelectionError::Overflow);\n+            },\n             Err(e) => { return Err(e); },\n             Ok(None) => { return Ok(None); },\n             Ok(Some(candidate)) => candidate\n         };\n \n         match self.confirm_candidate(obligation, candidate) {\n-            Err(SelectionError::Overflow) =>\n-                bug!(\"Overflow should be caught earlier in standard query mode\"),\n+            Err(SelectionError::Overflow) => {\n+                assert!(self.query_mode == TraitQueryMode::Canonical);\n+                return Err(SelectionError::Overflow);\n+            },\n             Err(e) => Err(e),\n             Ok(candidate) => Ok(Some(candidate))\n         }"}, {"sha": "cb929225bcdcfd59486b8bf8d4eccc94786885a2", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d5b2e907444cb202407771eee9dd41c2518c1724/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b2e907444cb202407771eee9dd41c2518c1724/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=d5b2e907444cb202407771eee9dd41c2518c1724", "patch": "@@ -436,8 +436,9 @@ define_maps! { <'tcx>\n \n     /// Do not call this query directly: invoke `infcx.predicate_may_hold()` or\n     /// `infcx.predicate_must_hold()` instead.\n-    [] fn evaluate_obligation:\n-        EvaluateObligation(CanonicalPredicateGoal<'tcx>) -> traits::EvaluationResult,\n+    [] fn evaluate_obligation: EvaluateObligation(\n+        CanonicalPredicateGoal<'tcx>\n+    ) -> Result<traits::EvaluationResult, traits::OverflowError>,\n \n     [] fn substitute_normalize_and_test_predicates:\n         substitute_normalize_and_test_predicates_node((DefId, &'tcx Substs<'tcx>)) -> bool,"}, {"sha": "21259bbcd38ff9df779a2e9d7923079e05126fe7", "filename": "src/librustc_traits/evaluate_obligation.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d5b2e907444cb202407771eee9dd41c2518c1724/src%2Flibrustc_traits%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b2e907444cb202407771eee9dd41c2518c1724/src%2Flibrustc_traits%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fevaluate_obligation.rs?ref=d5b2e907444cb202407771eee9dd41c2518c1724", "patch": "@@ -17,7 +17,7 @@ use syntax::codemap::DUMMY_SP;\n crate fn evaluate_obligation<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     goal: CanonicalPredicateGoal<'tcx>,\n-) -> EvaluationResult {\n+) -> Result<EvaluationResult, OverflowError> {\n     tcx.infer_ctxt().enter(|ref infcx| {\n         let (\n             ParamEnvAnd {\n@@ -30,11 +30,6 @@ crate fn evaluate_obligation<'tcx>(\n         let mut selcx = SelectionContext::with_query_mode(&infcx, TraitQueryMode::Canonical);\n         let obligation = Obligation::new(ObligationCause::dummy(), param_env, predicate);\n \n-        match selcx.evaluate_obligation_recursively(&obligation) {\n-            Ok(result) => result,\n-            Err(OverflowError) => {\n-                infcx.report_overflow_error(&obligation, true)\n-            }\n-        }\n+        selcx.evaluate_obligation_recursively(&obligation)\n     })\n }"}]}