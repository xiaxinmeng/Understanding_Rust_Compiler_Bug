{"sha": "a183ac6f90dc43a550a8afa5c01fdc797cf3d1d4", "node_id": "C_kwDOAAsO6NoAKGExODNhYzZmOTBkYzQzYTU1MGE4YWZhNWMwMWZkYzc5N2NmM2QxZDQ", "commit": {"author": {"name": "Zachary Mayhew", "email": "mayhew.zachary2003@gmail.com", "date": "2023-05-05T03:31:04Z"}, "committer": {"name": "Zachary Mayhew", "email": "mayhew.zachary2003@gmail.com", "date": "2023-05-05T15:17:14Z"}, "message": "add hint for =< as <=", "tree": {"sha": "b09d978fcc0e25710dfb67feab533cd8b8f254d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b09d978fcc0e25710dfb67feab533cd8b8f254d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a183ac6f90dc43a550a8afa5c01fdc797cf3d1d4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEE5Qoh8FhsXiJpTnFIhIDS+0CiWHEFAmRVHgEACgkQhIDS+0Ci\nWHHzKwv/Rs+c15VnI9bMDYRvwNz74EEilvaCb6asmVhGjlmrytnmGPIrDYUq0k+C\nXMDz9PMVG9Lew8XSHpku7Qcv952JPRqCEISHIA7woTeG9OADurUDyba0671V8B5Q\nJHLHe2ufehJOi5Cw2LwaKlPJ5psWVd7XDph+9z+mHj3iL2E7Nv6OfXBXNMaNh7Wi\nEKCBPg0AOu6pI19ZJiK8YSBm1dnBi21qemkTHykz+U8Jwwzfab9srufJaKJIXHBB\nygsgMxutLzYjMjrt8KyH7+ZGg3QUq5LuCsWYUMVYPTQ3j0O8xdWuBbmH1zlj5Mdz\n1s3N6XsKSPdh00+m1MlE9PswSmsGkdLcbg+vlCGElx3L39ApJ/uG2aKXEpVzkz4C\natLVBF/5aAnuvWGjyaO6yLSUAszVdDWq+L8P85+/A8PQCInqJVYqkzHwpSefp/16\nccUnofRFgUu+HfEjO87n9qEoPPRTI1sZOm2GCo/GVSpSzL7+CrR5pK9aUJvXAINa\nbMLfrYeQ\n=DKij\n-----END PGP SIGNATURE-----", "payload": "tree b09d978fcc0e25710dfb67feab533cd8b8f254d1\nparent 74c4821045c68d42bb8b8a7c998bdb5c2a72bd0d\nauthor Zachary Mayhew <mayhew.zachary2003@gmail.com> 1683257464 -0400\ncommitter Zachary Mayhew <mayhew.zachary2003@gmail.com> 1683299834 -0400\n\nadd hint for =< as <=\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a183ac6f90dc43a550a8afa5c01fdc797cf3d1d4", "html_url": "https://github.com/rust-lang/rust/commit/a183ac6f90dc43a550a8afa5c01fdc797cf3d1d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a183ac6f90dc43a550a8afa5c01fdc797cf3d1d4/comments", "author": {"login": "zacklukem", "id": 8787486, "node_id": "MDQ6VXNlcjg3ODc0ODY=", "avatar_url": "https://avatars.githubusercontent.com/u/8787486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zacklukem", "html_url": "https://github.com/zacklukem", "followers_url": "https://api.github.com/users/zacklukem/followers", "following_url": "https://api.github.com/users/zacklukem/following{/other_user}", "gists_url": "https://api.github.com/users/zacklukem/gists{/gist_id}", "starred_url": "https://api.github.com/users/zacklukem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zacklukem/subscriptions", "organizations_url": "https://api.github.com/users/zacklukem/orgs", "repos_url": "https://api.github.com/users/zacklukem/repos", "events_url": "https://api.github.com/users/zacklukem/events{/privacy}", "received_events_url": "https://api.github.com/users/zacklukem/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zacklukem", "id": 8787486, "node_id": "MDQ6VXNlcjg3ODc0ODY=", "avatar_url": "https://avatars.githubusercontent.com/u/8787486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zacklukem", "html_url": "https://github.com/zacklukem", "followers_url": "https://api.github.com/users/zacklukem/followers", "following_url": "https://api.github.com/users/zacklukem/following{/other_user}", "gists_url": "https://api.github.com/users/zacklukem/gists{/gist_id}", "starred_url": "https://api.github.com/users/zacklukem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zacklukem/subscriptions", "organizations_url": "https://api.github.com/users/zacklukem/orgs", "repos_url": "https://api.github.com/users/zacklukem/repos", "events_url": "https://api.github.com/users/zacklukem/events{/privacy}", "received_events_url": "https://api.github.com/users/zacklukem/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74c4821045c68d42bb8b8a7c998bdb5c2a72bd0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/74c4821045c68d42bb8b8a7c998bdb5c2a72bd0d", "html_url": "https://github.com/rust-lang/rust/commit/74c4821045c68d42bb8b8a7c998bdb5c2a72bd0d"}], "stats": {"total": 80, "additions": 79, "deletions": 1}, "files": [{"sha": "dd1b0ddc025d8afd3c06dc276e407e3d565422ec", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a183ac6f90dc43a550a8afa5c01fdc797cf3d1d4/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a183ac6f90dc43a550a8afa5c01fdc797cf3d1d4/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=a183ac6f90dc43a550a8afa5c01fdc797cf3d1d4", "patch": "@@ -1448,8 +1448,19 @@ impl<'a> Parser<'a> {\n     }\n \n     fn parse_expr_path_start(&mut self) -> PResult<'a, P<Expr>> {\n+        let maybe_eq_tok = self.prev_token.clone();\n         let (qself, path) = if self.eat_lt() {\n-            let (qself, path) = self.parse_qpath(PathStyle::Expr)?;\n+            let lt_span = self.prev_token.span;\n+            let (qself, path) = self.parse_qpath(PathStyle::Expr).map_err(|mut err| {\n+                // Suggests using '<=' if there is an error parsing qpath when the previous token\n+                // is an '=' token. Only emits suggestion if the '<' token and '=' token are\n+                // directly adjacent (i.e. '=<')\n+                if maybe_eq_tok.kind == TokenKind::Eq && maybe_eq_tok.span.hi() == lt_span.lo() {\n+                    let eq_lt = maybe_eq_tok.span.to(lt_span);\n+                    err.span_suggestion(eq_lt, \"did you mean\", \"<=\", Applicability::Unspecified);\n+                }\n+                err\n+            })?;\n             (Some(qself), path)\n         } else {\n             (None, self.parse_path(PathStyle::Expr)?)"}, {"sha": "23c6c59d7a62b90f3720a6abce15fa84a38ebae0", "filename": "tests/ui/parser/eq-less-to-less-eq.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a183ac6f90dc43a550a8afa5c01fdc797cf3d1d4/tests%2Fui%2Fparser%2Feq-less-to-less-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a183ac6f90dc43a550a8afa5c01fdc797cf3d1d4/tests%2Fui%2Fparser%2Feq-less-to-less-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Feq-less-to-less-eq.rs?ref=a183ac6f90dc43a550a8afa5c01fdc797cf3d1d4", "patch": "@@ -0,0 +1,33 @@\n+fn foo() {\n+    let a = 0;\n+    let b = 4;\n+    if a =< b { //~ERROR\n+        println!(\"yay!\");\n+    }\n+}\n+\n+fn bar() {\n+    let a = 0;\n+    let b = 4;\n+    if a = <b { //~ERROR\n+        println!(\"yay!\");\n+    }\n+}\n+\n+fn baz() {\n+    let a = 0;\n+    let b = 4;\n+    if a = < b { //~ERROR\n+        println!(\"yay!\");\n+    }\n+}\n+\n+fn qux() {\n+    let a = 0;\n+    let b = 4;\n+    if a =< i32>::abs(-4) { //~ERROR: mismatched types\n+        println!(\"yay!\");\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "4717d8287ff7b3523ac7f8df19e9bc7f9d341714", "filename": "tests/ui/parser/eq-less-to-less-eq.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a183ac6f90dc43a550a8afa5c01fdc797cf3d1d4/tests%2Fui%2Fparser%2Feq-less-to-less-eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a183ac6f90dc43a550a8afa5c01fdc797cf3d1d4/tests%2Fui%2Fparser%2Feq-less-to-less-eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Feq-less-to-less-eq.stderr?ref=a183ac6f90dc43a550a8afa5c01fdc797cf3d1d4", "patch": "@@ -0,0 +1,34 @@\n+error: expected one of `!`, `(`, `+`, `::`, `<`, `>`, or `as`, found `{`\n+  --> $DIR/eq-less-to-less-eq.rs:4:15\n+   |\n+LL |     if a =< b {\n+   |          --   ^ expected one of 7 possible tokens\n+   |          |\n+   |          help: did you mean: `<=`\n+\n+error: expected one of `!`, `(`, `+`, `::`, `<`, `>`, or `as`, found `{`\n+  --> $DIR/eq-less-to-less-eq.rs:12:15\n+   |\n+LL |     if a = <b {\n+   |               ^ expected one of 7 possible tokens\n+\n+error: expected one of `!`, `(`, `+`, `::`, `<`, `>`, or `as`, found `{`\n+  --> $DIR/eq-less-to-less-eq.rs:20:16\n+   |\n+LL |     if a = < b {\n+   |                ^ expected one of 7 possible tokens\n+\n+error[E0308]: mismatched types\n+  --> $DIR/eq-less-to-less-eq.rs:28:8\n+   |\n+LL |     if a =< i32>::abs(-4) {\n+   |        ^^^^^^^^^^^^^^^^^^ expected `bool`, found `()`\n+   |\n+help: you might have meant to compare for equality\n+   |\n+LL |     if a ==< i32>::abs(-4) {\n+   |           +\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}