{"sha": "883932c6baf7acd28ab712b80ddeda960f6e37da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4MzkzMmM2YmFmN2FjZDI4YWI3MTJiODBkZGVkYTk2MGY2ZTM3ZGE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-11T05:49:43Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-11T07:58:58Z"}, "message": "Ban `...X` pats, harden tests, and improve diagnostics.\n\nAlso fix a bug with the span passed in `mk_range`.", "tree": {"sha": "5c1310e44a4392e926b333bc4adcf602aa1b82c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c1310e44a4392e926b333bc4adcf602aa1b82c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/883932c6baf7acd28ab712b80ddeda960f6e37da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/883932c6baf7acd28ab712b80ddeda960f6e37da", "html_url": "https://github.com/rust-lang/rust/commit/883932c6baf7acd28ab712b80ddeda960f6e37da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/883932c6baf7acd28ab712b80ddeda960f6e37da/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6217972644588a3be4fecb85b195f17b0220047", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6217972644588a3be4fecb85b195f17b0220047", "html_url": "https://github.com/rust-lang/rust/commit/e6217972644588a3be4fecb85b195f17b0220047"}], "stats": {"total": 381, "additions": 260, "deletions": 121}, "files": [{"sha": "bdb55a713f1dcc6309df35f3985f553ae5d7c613", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/883932c6baf7acd28ab712b80ddeda960f6e37da/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883932c6baf7acd28ab712b80ddeda960f6e37da/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=883932c6baf7acd28ab712b80ddeda960f6e37da", "patch": "@@ -1966,7 +1966,7 @@ impl<'a> Parser<'a> {\n         limits: RangeLimits,\n     ) -> PResult<'a, ExprKind> {\n         if end.is_none() && limits == RangeLimits::Closed {\n-            self.error_inclusive_range_with_no_end(self.token.span);\n+            self.error_inclusive_range_with_no_end(self.prev_span);\n             Ok(ExprKind::Err)\n         } else {\n             Ok(ExprKind::Range(start, end, limits))"}, {"sha": "0c2cfc20daf0fd1b8043badf7bb27337d81d6646", "filename": "src/librustc_parse/parser/pat.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/883932c6baf7acd28ab712b80ddeda960f6e37da/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883932c6baf7acd28ab712b80ddeda960f6e37da/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpat.rs?ref=883932c6baf7acd28ab712b80ddeda960f6e37da", "patch": "@@ -661,14 +661,34 @@ impl<'a> Parser<'a> {\n     pub(super) fn error_inclusive_range_with_no_end(&self, span: Span) {\n         use rustc_error_codes::E0586;\n         struct_span_err!(self.sess.span_diagnostic, span, E0586, \"inclusive range with no end\")\n-            .help(\"inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\")\n+            .span_suggestion_short(\n+                span,\n+                \"use `..` instead\",\n+                \"..\".to_string(),\n+                Applicability::MachineApplicable,\n+            )\n+            .note(\"inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\")\n             .emit();\n     }\n \n-    /// Parse a range-to pattern, e.g. `..X` and `..=X` where `X` remains to be parsed.\n-    fn parse_pat_range_to(&mut self, re: Spanned<RangeEnd>) -> PResult<'a, PatKind> {\n+    /// Parse a range-to pattern, `..X` or `..=X` where `X` remains to be parsed.\n+    ///\n+    /// The form `...X` is prohibited to reduce confusion with the potential\n+    /// expression syntax `...expr` for splatting in expressions.\n+    fn parse_pat_range_to(&mut self, mut re: Spanned<RangeEnd>) -> PResult<'a, PatKind> {\n         let end = self.parse_pat_range_end()?;\n         self.sess.gated_spans.gate(sym::half_open_range_patterns, re.span.to(self.prev_span));\n+        if let RangeEnd::Included(ref mut syn @ RangeSyntax::DotDotDot) = &mut re.node {\n+            *syn = RangeSyntax::DotDotEq;\n+            self.struct_span_err(re.span, \"range-to patterns with `...` are not allowed\")\n+                .span_suggestion_short(\n+                    re.span,\n+                    \"use `..=` instead\",\n+                    \"..=\".to_string(),\n+                    Applicability::MachineApplicable,\n+                )\n+                .emit();\n+        }\n         Ok(PatKind::Range(None, Some(end), re))\n     }\n "}, {"sha": "0bbf9a6080349f4a0d4f6f135803f3538024fcd8", "filename": "src/test/ui/error-codes/E0586.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/883932c6baf7acd28ab712b80ddeda960f6e37da/src%2Ftest%2Fui%2Ferror-codes%2FE0586.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/883932c6baf7acd28ab712b80ddeda960f6e37da/src%2Ftest%2Fui%2Ferror-codes%2FE0586.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0586.stderr?ref=883932c6baf7acd28ab712b80ddeda960f6e37da", "patch": "@@ -1,10 +1,10 @@\n error[E0586]: inclusive range with no end\n-  --> $DIR/E0586.rs:3:22\n+  --> $DIR/E0586.rs:3:19\n    |\n LL |     let x = &tmp[1..=];\n-   |                      ^\n+   |                   ^^^ help: use `..` instead\n    |\n-   = help: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+   = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error: aborting due to previous error\n "}, {"sha": "1733012b9c54fb12283dcae2986fb0c82b1def0f", "filename": "src/test/ui/half-open-range-patterns/feature-gate-half-open-range-patterns.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/883932c6baf7acd28ab712b80ddeda960f6e37da/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Ffeature-gate-half-open-range-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883932c6baf7acd28ab712b80ddeda960f6e37da/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Ffeature-gate-half-open-range-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Ffeature-gate-half-open-range-patterns.rs?ref=883932c6baf7acd28ab712b80ddeda960f6e37da", "patch": "@@ -8,6 +8,7 @@ fn foo() {\n     //~^ ERROR half-open range patterns are unstable\n     if let ...5 = 0 {}\n     //~^ ERROR half-open range patterns are unstable\n+    //~| ERROR range-to patterns with `...` are not allowed\n     if let ..5 = 0 {}\n     //~^ ERROR half-open range patterns are unstable\n     if let 5.. = 0 {}"}, {"sha": "99db339cf74e1404f08fa86f4537c4ee927e0b10", "filename": "src/test/ui/half-open-range-patterns/feature-gate-half-open-range-patterns.stderr", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/883932c6baf7acd28ab712b80ddeda960f6e37da/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Ffeature-gate-half-open-range-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/883932c6baf7acd28ab712b80ddeda960f6e37da/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Ffeature-gate-half-open-range-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Ffeature-gate-half-open-range-patterns.stderr?ref=883932c6baf7acd28ab712b80ddeda960f6e37da", "patch": "@@ -1,18 +1,24 @@\n+error: range-to patterns with `...` are not allowed\n+  --> $DIR/feature-gate-half-open-range-patterns.rs:9:12\n+   |\n+LL |     if let ...5 = 0 {}\n+   |            ^^^ help: use `..=` instead\n+\n error[E0586]: inclusive range with no end\n-  --> $DIR/feature-gate-half-open-range-patterns.rs:15:13\n+  --> $DIR/feature-gate-half-open-range-patterns.rs:16:13\n    |\n LL |     if let 5..= = 0 {}\n-   |             ^^^\n+   |             ^^^ help: use `..` instead\n    |\n-   = help: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+   = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/feature-gate-half-open-range-patterns.rs:18:13\n+  --> $DIR/feature-gate-half-open-range-patterns.rs:19:13\n    |\n LL |     if let 5... = 0 {}\n-   |             ^^^\n+   |             ^^^ help: use `..` instead\n    |\n-   = help: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+   = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error[E0658]: half-open range patterns are unstable\n   --> $DIR/feature-gate-half-open-range-patterns.rs:7:12\n@@ -33,7 +39,7 @@ LL |     if let ...5 = 0 {}\n    = help: add `#![feature(half_open_range_patterns)]` to the crate attributes to enable\n \n error[E0658]: half-open range patterns are unstable\n-  --> $DIR/feature-gate-half-open-range-patterns.rs:11:12\n+  --> $DIR/feature-gate-half-open-range-patterns.rs:12:12\n    |\n LL |     if let ..5 = 0 {}\n    |            ^^^\n@@ -42,7 +48,7 @@ LL |     if let ..5 = 0 {}\n    = help: add `#![feature(half_open_range_patterns)]` to the crate attributes to enable\n \n error[E0658]: half-open range patterns are unstable\n-  --> $DIR/feature-gate-half-open-range-patterns.rs:13:12\n+  --> $DIR/feature-gate-half-open-range-patterns.rs:14:12\n    |\n LL |     if let 5.. = 0 {}\n    |            ^^^\n@@ -51,7 +57,7 @@ LL |     if let 5.. = 0 {}\n    = help: add `#![feature(half_open_range_patterns)]` to the crate attributes to enable\n \n error[E0658]: half-open range patterns are unstable\n-  --> $DIR/feature-gate-half-open-range-patterns.rs:15:12\n+  --> $DIR/feature-gate-half-open-range-patterns.rs:16:12\n    |\n LL |     if let 5..= = 0 {}\n    |            ^^^^\n@@ -60,15 +66,15 @@ LL |     if let 5..= = 0 {}\n    = help: add `#![feature(half_open_range_patterns)]` to the crate attributes to enable\n \n error[E0658]: half-open range patterns are unstable\n-  --> $DIR/feature-gate-half-open-range-patterns.rs:18:12\n+  --> $DIR/feature-gate-half-open-range-patterns.rs:19:12\n    |\n LL |     if let 5... = 0 {}\n    |            ^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/67264\n    = help: add `#![feature(half_open_range_patterns)]` to the crate attributes to enable\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 9 previous errors\n \n Some errors have detailed explanations: E0586, E0658.\n For more information about an error, try `rustc --explain E0586`."}, {"sha": "daed775cf7c01cecf3cdfd1f02c6cbcc928c2825", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-inclusive-dotdotdot-bad-syntax.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/883932c6baf7acd28ab712b80ddeda960f6e37da/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-dotdotdot-bad-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883932c6baf7acd28ab712b80ddeda960f6e37da/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-dotdotdot-bad-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-dotdotdot-bad-syntax.rs?ref=883932c6baf7acd28ab712b80ddeda960f6e37da", "patch": "@@ -0,0 +1,32 @@\n+// Test that `...X` range-to patterns are syntactically invalid.\n+//\n+// See https://github.com/rust-lang/rust/pull/67258#issuecomment-565656155\n+// for the reason why. To summarize, we might want to introduce `...expr` as\n+// an expression form for splatting (or \"untupling\") in an expression context.\n+// While there is no syntactic ambiguity with `...X` in a pattern context,\n+// there's a potential confusion factor here, and we would prefer to keep patterns\n+// and expressions in-sync. As such, we do not allow `...X` in patterns either.\n+\n+#![feature(half_open_range_patterns)]\n+\n+fn main() {}\n+\n+#[cfg(FALSE)]\n+fn syntax() {\n+    match scrutinee {\n+        ...X => {} //~ ERROR range-to patterns with `...` are not allowed\n+        ...0 => {} //~ ERROR range-to patterns with `...` are not allowed\n+        ...'a' => {} //~ ERROR range-to patterns with `...` are not allowed\n+        ...0.0f32 => {} //~ ERROR range-to patterns with `...` are not allowed\n+    }\n+}\n+\n+fn syntax2() {\n+    macro_rules! mac {\n+        ($e:expr) => {\n+            let ...$e; //~ ERROR range-to patterns with `...` are not allowed\n+        }\n+    }\n+\n+    mac!(0);\n+}"}, {"sha": "ba2e7ea8b5354cd2b70bf7af8c140270dd155965", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-inclusive-dotdotdot-bad-syntax.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/883932c6baf7acd28ab712b80ddeda960f6e37da/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-dotdotdot-bad-syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/883932c6baf7acd28ab712b80ddeda960f6e37da/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-dotdotdot-bad-syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-dotdotdot-bad-syntax.stderr?ref=883932c6baf7acd28ab712b80ddeda960f6e37da", "patch": "@@ -0,0 +1,35 @@\n+error: range-to patterns with `...` are not allowed\n+  --> $DIR/half-open-range-pats-inclusive-dotdotdot-bad-syntax.rs:17:9\n+   |\n+LL |         ...X => {}\n+   |         ^^^ help: use `..=` instead\n+\n+error: range-to patterns with `...` are not allowed\n+  --> $DIR/half-open-range-pats-inclusive-dotdotdot-bad-syntax.rs:18:9\n+   |\n+LL |         ...0 => {}\n+   |         ^^^ help: use `..=` instead\n+\n+error: range-to patterns with `...` are not allowed\n+  --> $DIR/half-open-range-pats-inclusive-dotdotdot-bad-syntax.rs:19:9\n+   |\n+LL |         ...'a' => {}\n+   |         ^^^ help: use `..=` instead\n+\n+error: range-to patterns with `...` are not allowed\n+  --> $DIR/half-open-range-pats-inclusive-dotdotdot-bad-syntax.rs:20:9\n+   |\n+LL |         ...0.0f32 => {}\n+   |         ^^^ help: use `..=` instead\n+\n+error: range-to patterns with `...` are not allowed\n+  --> $DIR/half-open-range-pats-inclusive-dotdotdot-bad-syntax.rs:27:17\n+   |\n+LL |             let ...$e;\n+   |                 ^^^ help: use `..=` instead\n+...\n+LL |     mac!(0);\n+   |     -------- in this macro invocation\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "9ace0c357b2d4a2dc1a1d77838328ecfc28c184d", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-inclusive-no-end.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/883932c6baf7acd28ab712b80ddeda960f6e37da/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-no-end.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883932c6baf7acd28ab712b80ddeda960f6e37da/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-no-end.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-no-end.rs?ref=883932c6baf7acd28ab712b80ddeda960f6e37da", "patch": "@@ -13,3 +13,14 @@ fn foo() {\n     if let X... = 1 {} //~ ERROR inclusive range with no end\n     if let X..= = 1 {} //~ ERROR inclusive range with no end\n }\n+\n+fn bar() {\n+    macro_rules! mac {\n+        ($e:expr) => {\n+            let $e...; //~ ERROR inclusive range with no end\n+            let $e..=; //~ ERROR inclusive range with no end\n+        }\n+    }\n+\n+    mac!(0);\n+}"}, {"sha": "2bdb8ea57668ad4af8f87fafe6cdff76086f8baa", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-inclusive-no-end.stderr", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/883932c6baf7acd28ab712b80ddeda960f6e37da/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-no-end.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/883932c6baf7acd28ab712b80ddeda960f6e37da/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-no-end.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-no-end.stderr?ref=883932c6baf7acd28ab712b80ddeda960f6e37da", "patch": "@@ -2,34 +2,56 @@ error[E0586]: inclusive range with no end\n   --> $DIR/half-open-range-pats-inclusive-no-end.rs:10:13\n    |\n LL |     if let 0... = 1 {}\n-   |             ^^^\n+   |             ^^^ help: use `..` instead\n    |\n-   = help: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+   = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error[E0586]: inclusive range with no end\n   --> $DIR/half-open-range-pats-inclusive-no-end.rs:11:13\n    |\n LL |     if let 0..= = 1 {}\n-   |             ^^^\n+   |             ^^^ help: use `..` instead\n    |\n-   = help: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+   = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error[E0586]: inclusive range with no end\n   --> $DIR/half-open-range-pats-inclusive-no-end.rs:13:13\n    |\n LL |     if let X... = 1 {}\n-   |             ^^^\n+   |             ^^^ help: use `..` instead\n    |\n-   = help: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+   = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error[E0586]: inclusive range with no end\n   --> $DIR/half-open-range-pats-inclusive-no-end.rs:14:13\n    |\n LL |     if let X..= = 1 {}\n-   |             ^^^\n+   |             ^^^ help: use `..` instead\n    |\n-   = help: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+   = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n-error: aborting due to 4 previous errors\n+error[E0586]: inclusive range with no end\n+  --> $DIR/half-open-range-pats-inclusive-no-end.rs:20:19\n+   |\n+LL |             let $e...;\n+   |                   ^^^ help: use `..` instead\n+...\n+LL |     mac!(0);\n+   |     -------- in this macro invocation\n+   |\n+   = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+\n+error[E0586]: inclusive range with no end\n+  --> $DIR/half-open-range-pats-inclusive-no-end.rs:21:19\n+   |\n+LL |             let $e..=;\n+   |                   ^^^ help: use `..` instead\n+...\n+LL |     mac!(0);\n+   |     -------- in this macro invocation\n+   |\n+   = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0586`."}, {"sha": "f054bbea4e3e7c99d1219b0ee384147c26af359c", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-ref-ambiguous-interp.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/883932c6baf7acd28ab712b80ddeda960f6e37da/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-ref-ambiguous-interp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883932c6baf7acd28ab712b80ddeda960f6e37da/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-ref-ambiguous-interp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-ref-ambiguous-interp.rs?ref=883932c6baf7acd28ab712b80ddeda960f6e37da", "patch": "@@ -20,5 +20,7 @@ fn syntax() {\n         &..=0 | _ => {}\n         //~^ ERROR the range pattern here has ambiguous interpretation\n         &...0 | _ => {}\n+        //~^ ERROR the range pattern here has ambiguous interpretation\n+        //~| ERROR range-to patterns with `...` are not allowed\n     }\n }"}, {"sha": "a5f7c390627bad950c83155ab21e18a6fdfb6698", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-ref-ambiguous-interp.stderr", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/883932c6baf7acd28ab712b80ddeda960f6e37da/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-ref-ambiguous-interp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/883932c6baf7acd28ab712b80ddeda960f6e37da/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-ref-ambiguous-interp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-ref-ambiguous-interp.stderr?ref=883932c6baf7acd28ab712b80ddeda960f6e37da", "patch": "@@ -8,9 +8,9 @@ error[E0586]: inclusive range with no end\n   --> $DIR/half-open-range-pats-ref-ambiguous-interp.rs:10:11\n    |\n LL |         &0..= | _ => {}\n-   |           ^^^\n+   |           ^^^ help: use `..` instead\n    |\n-   = help: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+   = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error: the range pattern here has ambiguous interpretation\n   --> $DIR/half-open-range-pats-ref-ambiguous-interp.rs:10:10\n@@ -22,9 +22,9 @@ error[E0586]: inclusive range with no end\n   --> $DIR/half-open-range-pats-ref-ambiguous-interp.rs:13:11\n    |\n LL |         &0... | _ => {}\n-   |           ^^^\n+   |           ^^^ help: use `..` instead\n    |\n-   = help: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+   = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error: the range pattern here has ambiguous interpretation\n   --> $DIR/half-open-range-pats-ref-ambiguous-interp.rs:18:10\n@@ -38,6 +38,18 @@ error: the range pattern here has ambiguous interpretation\n LL |         &..=0 | _ => {}\n    |          ^^^^ help: add parentheses to clarify the precedence: `(..=0)`\n \n-error: aborting due to 6 previous errors\n+error: range-to patterns with `...` are not allowed\n+  --> $DIR/half-open-range-pats-ref-ambiguous-interp.rs:22:10\n+   |\n+LL |         &...0 | _ => {}\n+   |          ^^^ help: use `..=` instead\n+\n+error: the range pattern here has ambiguous interpretation\n+  --> $DIR/half-open-range-pats-ref-ambiguous-interp.rs:22:10\n+   |\n+LL |         &...0 | _ => {}\n+   |          ^^^^ help: add parentheses to clarify the precedence: `(..=0)`\n+\n+error: aborting due to 8 previous errors\n \n For more information about this error, try `rustc --explain E0586`."}, {"sha": "8bb98d3b5c56fd10480ea3db32cf1b02b9b89797", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-syntactic-pass.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/883932c6baf7acd28ab712b80ddeda960f6e37da/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-syntactic-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883932c6baf7acd28ab712b80ddeda960f6e37da/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-syntactic-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-syntactic-pass.rs?ref=883932c6baf7acd28ab712b80ddeda960f6e37da", "patch": "@@ -11,22 +11,20 @@ fn main() {}\n fn syntax() {\n     match scrutinee {\n         X.. | 0.. | 'a'.. | 0.0f32.. => {}\n-        ..=X | ...X | ..X => {}\n-        ..=0 | ...0 | ..0 => {}\n-        ..='a' | ...'a' | ..'a' => {}\n-        ..=0.0f32 | ...0.0f32 | ..0.0f32 => {}\n+        ..=X | ..X => {}\n+        ..=0 | ..0 => {}\n+        ..='a' | ..'a' => {}\n+        ..=0.0f32 | ..0.0f32 => {}\n     }\n+}\n \n+fn syntax2() {\n     macro_rules! mac {\n         ($e:expr) => {\n-            let ..$e;\n-            let ...$e;\n-            let ..=$e;\n-            let $e..;\n-            let $e...;\n-            let $e..=;\n+            match 0u8 { ..$e => {}, _ => {} }\n+            match 0u8 { ..=$e => {}, _ => {} }\n+            match 0u8 { $e.. => {}, _ => {} }\n         }\n     }\n-\n-    mac!(0);\n+    mac!(42u8);\n }"}, {"sha": "21e5c03eb1605b254f76db7f8ef7bccefc56e51e", "filename": "src/test/ui/impossible_range.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/883932c6baf7acd28ab712b80ddeda960f6e37da/src%2Ftest%2Fui%2Fimpossible_range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883932c6baf7acd28ab712b80ddeda960f6e37da/src%2Ftest%2Fui%2Fimpossible_range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpossible_range.rs?ref=883932c6baf7acd28ab712b80ddeda960f6e37da", "patch": "@@ -1,17 +1,17 @@\n-// Make sure that invalid ranges generate an error during HIR lowering, not an ICE\n+// Make sure that invalid ranges generate an error during parsing, not an ICE\n \n pub fn main() {\n     ..;\n     0..;\n     ..1;\n     0..1;\n     ..=; //~ERROR inclusive range with no end\n-         //~^HELP bounded at the end\n+         //~^HELP use `..` instead\n }\n \n fn _foo1() {\n     ..=1;\n     0..=1;\n     0..=; //~ERROR inclusive range with no end\n-          //~^HELP bounded at the end\n+          //~^HELP use `..` instead\n }"}, {"sha": "ea2ab0f299d1b9f3c759e9e3f6e43ab06f6c0508", "filename": "src/test/ui/impossible_range.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/883932c6baf7acd28ab712b80ddeda960f6e37da/src%2Ftest%2Fui%2Fimpossible_range.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/883932c6baf7acd28ab712b80ddeda960f6e37da/src%2Ftest%2Fui%2Fimpossible_range.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpossible_range.stderr?ref=883932c6baf7acd28ab712b80ddeda960f6e37da", "patch": "@@ -1,18 +1,18 @@\n error[E0586]: inclusive range with no end\n-  --> $DIR/impossible_range.rs:8:8\n+  --> $DIR/impossible_range.rs:8:5\n    |\n LL |     ..=;\n-   |        ^\n+   |     ^^^ help: use `..` instead\n    |\n-   = help: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+   = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/impossible_range.rs:15:9\n+  --> $DIR/impossible_range.rs:15:6\n    |\n LL |     0..=;\n-   |         ^\n+   |      ^^^ help: use `..` instead\n    |\n-   = help: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+   = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4775b9b7bc003593d9c76ca2a06268b5e060ceb8", "filename": "src/test/ui/parser/attr-stmt-expr-attr-bad.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/883932c6baf7acd28ab712b80ddeda960f6e37da/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/883932c6baf7acd28ab712b80ddeda960f6e37da/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.stderr?ref=883932c6baf7acd28ab712b80ddeda960f6e37da", "patch": "@@ -342,9 +342,9 @@ error[E0586]: inclusive range with no end\n   --> $DIR/attr-stmt-expr-attr-bad.rs:94:35\n    |\n LL | #[cfg(FALSE)] fn e() { match 0 { 0..=#[attr] 10 => () } }\n-   |                                   ^^^\n+   |                                   ^^^ help: use `..` instead\n    |\n-   = help: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+   = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error: expected one of `=>`, `if`, or `|`, found `#`\n   --> $DIR/attr-stmt-expr-attr-bad.rs:94:38\n@@ -356,9 +356,9 @@ error[E0586]: inclusive range with no end\n   --> $DIR/attr-stmt-expr-attr-bad.rs:97:35\n    |\n LL | #[cfg(FALSE)] fn e() { match 0 { 0..=#[attr] -10 => () } }\n-   |                                   ^^^\n+   |                                   ^^^ help: use `..` instead\n    |\n-   = help: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+   = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error: expected one of `=>`, `if`, or `|`, found `#`\n   --> $DIR/attr-stmt-expr-attr-bad.rs:97:38\n@@ -376,9 +376,9 @@ error[E0586]: inclusive range with no end\n   --> $DIR/attr-stmt-expr-attr-bad.rs:102:35\n    |\n LL | #[cfg(FALSE)] fn e() { match 0 { 0..=#[attr] FOO => () } }\n-   |                                   ^^^\n+   |                                   ^^^ help: use `..` instead\n    |\n-   = help: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+   = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error: expected one of `=>`, `if`, or `|`, found `#`\n   --> $DIR/attr-stmt-expr-attr-bad.rs:102:38"}, {"sha": "7c3b906b47f9f4b8723ccbba0ca8ca4065049596", "filename": "src/test/ui/parser/range_inclusive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/883932c6baf7acd28ab712b80ddeda960f6e37da/src%2Ftest%2Fui%2Fparser%2Frange_inclusive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883932c6baf7acd28ab712b80ddeda960f6e37da/src%2Ftest%2Fui%2Fparser%2Frange_inclusive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frange_inclusive.rs?ref=883932c6baf7acd28ab712b80ddeda960f6e37da", "patch": "@@ -2,5 +2,5 @@\n \n pub fn main() {\n     for _ in 1..= {} //~ERROR inclusive range with no end\n-                     //~^HELP bounded at the end\n+                     //~^HELP use `..` instead\n }"}, {"sha": "1dd479945968104d4c270154d978c91038e5b16f", "filename": "src/test/ui/parser/range_inclusive.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/883932c6baf7acd28ab712b80ddeda960f6e37da/src%2Ftest%2Fui%2Fparser%2Frange_inclusive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/883932c6baf7acd28ab712b80ddeda960f6e37da/src%2Ftest%2Fui%2Fparser%2Frange_inclusive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frange_inclusive.stderr?ref=883932c6baf7acd28ab712b80ddeda960f6e37da", "patch": "@@ -1,10 +1,10 @@\n error[E0586]: inclusive range with no end\n-  --> $DIR/range_inclusive.rs:4:19\n+  --> $DIR/range_inclusive.rs:4:15\n    |\n LL |     for _ in 1..= {}\n-   |                   ^\n+   |               ^^^ help: use `..` instead\n    |\n-   = help: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+   = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error: aborting due to previous error\n "}, {"sha": "e07ea6221d7c95637e7b103756d16164c2a5a81b", "filename": "src/test/ui/parser/recover-range-pats.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/883932c6baf7acd28ab712b80ddeda960f6e37da/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883932c6baf7acd28ab712b80ddeda960f6e37da/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.rs?ref=883932c6baf7acd28ab712b80ddeda960f6e37da", "patch": "@@ -107,15 +107,15 @@ fn inclusive_to() {\n \n fn inclusive2_to() {\n     if let ...3 = 0 {}\n-    //~^ ERROR `...` range patterns are deprecated\n+    //~^ ERROR range-to patterns with `...` are not allowed\n     if let ...Y = 0 {}\n-    //~^ ERROR `...` range patterns are deprecated\n+    //~^ ERROR range-to patterns with `...` are not allowed\n     if let ...true = 0 {}\n-    //~^ ERROR `...` range patterns are deprecated\n+    //~^ ERROR range-to patterns with `...` are not allowed\n     //~| ERROR only char and numeric types\n     if let ....3 = 0 {}\n     //~^ ERROR float literals must have an integer part\n-    //~| ERROR `...` range patterns are deprecated\n+    //~| ERROR range-to patterns with `...` are not allowed\n     //~| ERROR mismatched types\n }\n \n@@ -135,7 +135,7 @@ fn with_macro_expr_var() {\n         ($e:expr) => {\n             let ..$e;\n             let ...$e;\n-            //~^ ERROR `...` range patterns are deprecated\n+            //~^ ERROR range-to patterns with `...` are not allowed\n             let ..=$e;\n             let $e..;\n             let $e...; //~ ERROR inclusive range with no end"}, {"sha": "f43f9bf3012183b870a61dcc7502e375d36f6a2e", "filename": "src/test/ui/parser/recover-range-pats.stderr", "status": "modified", "additions": 53, "deletions": 53, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/883932c6baf7acd28ab712b80ddeda960f6e37da/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/883932c6baf7acd28ab712b80ddeda960f6e37da/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr?ref=883932c6baf7acd28ab712b80ddeda960f6e37da", "patch": "@@ -44,25 +44,25 @@ error[E0586]: inclusive range with no end\n   --> $DIR/recover-range-pats.rs:69:13\n    |\n LL |     if let 0..= = 0 {}\n-   |             ^^^\n+   |             ^^^ help: use `..` instead\n    |\n-   = help: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+   = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error[E0586]: inclusive range with no end\n   --> $DIR/recover-range-pats.rs:70:13\n    |\n LL |     if let X..= = 0 {}\n-   |             ^^^\n+   |             ^^^ help: use `..` instead\n    |\n-   = help: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+   = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error[E0586]: inclusive range with no end\n   --> $DIR/recover-range-pats.rs:71:16\n    |\n LL |     if let true..= = 0 {}\n-   |                ^^^\n+   |                ^^^ help: use `..` instead\n    |\n-   = help: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+   = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error: float literals must have an integer part\n   --> $DIR/recover-range-pats.rs:73:12\n@@ -74,33 +74,33 @@ error[E0586]: inclusive range with no end\n   --> $DIR/recover-range-pats.rs:73:14\n    |\n LL |     if let .0..= = 0 {}\n-   |              ^^^\n+   |              ^^^ help: use `..` instead\n    |\n-   = help: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+   = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error[E0586]: inclusive range with no end\n   --> $DIR/recover-range-pats.rs:79:13\n    |\n LL |     if let 0... = 0 {}\n-   |             ^^^\n+   |             ^^^ help: use `..` instead\n    |\n-   = help: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+   = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error[E0586]: inclusive range with no end\n   --> $DIR/recover-range-pats.rs:80:13\n    |\n LL |     if let X... = 0 {}\n-   |             ^^^\n+   |             ^^^ help: use `..` instead\n    |\n-   = help: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+   = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error[E0586]: inclusive range with no end\n   --> $DIR/recover-range-pats.rs:81:16\n    |\n LL |     if let true... = 0 {}\n-   |                ^^^\n+   |                ^^^ help: use `..` instead\n    |\n-   = help: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+   = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error: float literals must have an integer part\n   --> $DIR/recover-range-pats.rs:83:12\n@@ -112,9 +112,9 @@ error[E0586]: inclusive range with no end\n   --> $DIR/recover-range-pats.rs:83:14\n    |\n LL |     if let .0... = 0 {}\n-   |              ^^^\n+   |              ^^^ help: use `..` instead\n    |\n-   = help: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+   = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error: float literals must have an integer part\n   --> $DIR/recover-range-pats.rs:93:15\n@@ -128,33 +128,66 @@ error: float literals must have an integer part\n LL |     if let ..=.0 = 0 {}\n    |               ^^ help: must have an integer part: `0.0`\n \n+error: range-to patterns with `...` are not allowed\n+  --> $DIR/recover-range-pats.rs:109:12\n+   |\n+LL |     if let ...3 = 0 {}\n+   |            ^^^ help: use `..=` instead\n+\n+error: range-to patterns with `...` are not allowed\n+  --> $DIR/recover-range-pats.rs:111:12\n+   |\n+LL |     if let ...Y = 0 {}\n+   |            ^^^ help: use `..=` instead\n+\n+error: range-to patterns with `...` are not allowed\n+  --> $DIR/recover-range-pats.rs:113:12\n+   |\n+LL |     if let ...true = 0 {}\n+   |            ^^^ help: use `..=` instead\n+\n error: float literals must have an integer part\n   --> $DIR/recover-range-pats.rs:116:15\n    |\n LL |     if let ....3 = 0 {}\n    |               ^^ help: must have an integer part: `0.3`\n \n+error: range-to patterns with `...` are not allowed\n+  --> $DIR/recover-range-pats.rs:116:12\n+   |\n+LL |     if let ....3 = 0 {}\n+   |            ^^^ help: use `..=` instead\n+\n+error: range-to patterns with `...` are not allowed\n+  --> $DIR/recover-range-pats.rs:137:17\n+   |\n+LL |             let ...$e;\n+   |                 ^^^ help: use `..=` instead\n+...\n+LL |     mac!(0);\n+   |     -------- in this macro invocation\n+\n error[E0586]: inclusive range with no end\n   --> $DIR/recover-range-pats.rs:141:19\n    |\n LL |             let $e...;\n-   |                   ^^^\n+   |                   ^^^ help: use `..` instead\n ...\n LL |     mac!(0);\n    |     -------- in this macro invocation\n    |\n-   = help: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+   = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error[E0586]: inclusive range with no end\n   --> $DIR/recover-range-pats.rs:142:19\n    |\n LL |             let $e..=;\n-   |                   ^^^\n+   |                   ^^^ help: use `..` instead\n ...\n LL |     mac!(0);\n    |     -------- in this macro invocation\n    |\n-   = help: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+   = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error: `...` range patterns are deprecated\n   --> $DIR/recover-range-pats.rs:42:13\n@@ -210,30 +243,6 @@ error: `...` range patterns are deprecated\n LL |     if let X... .0 = 0 {}\n    |             ^^^ help: use `..=` for an inclusive range\n \n-error: `...` range patterns are deprecated\n-  --> $DIR/recover-range-pats.rs:109:12\n-   |\n-LL |     if let ...3 = 0 {}\n-   |            ^^^ help: use `..=` for an inclusive range\n-\n-error: `...` range patterns are deprecated\n-  --> $DIR/recover-range-pats.rs:111:12\n-   |\n-LL |     if let ...Y = 0 {}\n-   |            ^^^ help: use `..=` for an inclusive range\n-\n-error: `...` range patterns are deprecated\n-  --> $DIR/recover-range-pats.rs:113:12\n-   |\n-LL |     if let ...true = 0 {}\n-   |            ^^^ help: use `..=` for an inclusive range\n-\n-error: `...` range patterns are deprecated\n-  --> $DIR/recover-range-pats.rs:116:12\n-   |\n-LL |     if let ....3 = 0 {}\n-   |            ^^^ help: use `..=` for an inclusive range\n-\n error: `...` range patterns are deprecated\n   --> $DIR/recover-range-pats.rs:126:20\n    |\n@@ -243,15 +252,6 @@ LL |             let $e1...$e2;\n LL |     mac2!(0, 1);\n    |     ------------ in this macro invocation\n \n-error: `...` range patterns are deprecated\n-  --> $DIR/recover-range-pats.rs:137:17\n-   |\n-LL |             let ...$e;\n-   |                 ^^^ help: use `..=` for an inclusive range\n-...\n-LL |     mac!(0);\n-   |     -------- in this macro invocation\n-\n error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:20:12\n    |"}]}