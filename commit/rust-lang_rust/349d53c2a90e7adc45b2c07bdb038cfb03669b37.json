{"sha": "349d53c2a90e7adc45b2c07bdb038cfb03669b37", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0OWQ1M2MyYTkwZTdhZGM0NWIyYzA3YmRiMDM4Y2ZiMDM2NjliMzc=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-05-29T00:38:18Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-06-30T22:52:33Z"}, "message": "Added miri error for evaluating foreign statics.\n\nUpdated tests accordingly.", "tree": {"sha": "79406fd168572f1a3a49f1fc5dfcab8fccf05d5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79406fd168572f1a3a49f1fc5dfcab8fccf05d5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/349d53c2a90e7adc45b2c07bdb038cfb03669b37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/349d53c2a90e7adc45b2c07bdb038cfb03669b37", "html_url": "https://github.com/rust-lang/rust/commit/349d53c2a90e7adc45b2c07bdb038cfb03669b37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/349d53c2a90e7adc45b2c07bdb038cfb03669b37/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13931762e9832d215bb6ffcfbe4cbd126050b91c", "url": "https://api.github.com/repos/rust-lang/rust/commits/13931762e9832d215bb6ffcfbe4cbd126050b91c", "html_url": "https://github.com/rust-lang/rust/commit/13931762e9832d215bb6ffcfbe4cbd126050b91c"}], "stats": {"total": 50, "additions": 27, "deletions": 23}, "files": [{"sha": "5753557a102aa95e664ae9dd3cff1b36a2d53ec2", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/349d53c2a90e7adc45b2c07bdb038cfb03669b37/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349d53c2a90e7adc45b2c07bdb038cfb03669b37/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=349d53c2a90e7adc45b2c07bdb038cfb03669b37", "patch": "@@ -521,6 +521,7 @@ for ::mir::interpret::EvalErrorKind<'gcx, O> {\n             InvalidNullPointerUsage |\n             ReadPointerAsBytes |\n             ReadBytesAsPointer |\n+            ReadForeignStatic |\n             InvalidPointerMath |\n             ReadUndefBytes |\n             DeadLocal |"}, {"sha": "2363e2870ec47db8c5cfecaedff53b098920509f", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/349d53c2a90e7adc45b2c07bdb038cfb03669b37/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349d53c2a90e7adc45b2c07bdb038cfb03669b37/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=349d53c2a90e7adc45b2c07bdb038cfb03669b37", "patch": "@@ -188,6 +188,7 @@ pub enum EvalErrorKind<'tcx, O> {\n     InvalidNullPointerUsage,\n     ReadPointerAsBytes,\n     ReadBytesAsPointer,\n+    ReadForeignStatic,\n     InvalidPointerMath,\n     ReadUndefBytes,\n     DeadLocal,\n@@ -304,6 +305,8 @@ impl<'tcx, O> EvalErrorKind<'tcx, O> {\n                 \"a raw memory access tried to access part of a pointer value as raw bytes\",\n             ReadBytesAsPointer =>\n                 \"a memory access tried to interpret some bytes as a pointer\",\n+            ReadForeignStatic =>\n+                \"tried to read foreign (extern) static\",\n             InvalidPointerMath =>\n                 \"attempted to do invalid arithmetic on pointers that would leak base addresses, e.g. comparing pointers into different allocations\",\n             ReadUndefBytes =>"}, {"sha": "c84999a7e5990c6df750c963d2a833758d5a288d", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/349d53c2a90e7adc45b2c07bdb038cfb03669b37/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349d53c2a90e7adc45b2c07bdb038cfb03669b37/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=349d53c2a90e7adc45b2c07bdb038cfb03669b37", "patch": "@@ -506,6 +506,7 @@ impl<'a, 'tcx, O: Lift<'tcx>> Lift<'tcx> for interpret::EvalErrorKind<'a, O> {\n             InvalidNullPointerUsage => InvalidNullPointerUsage,\n             ReadPointerAsBytes => ReadPointerAsBytes,\n             ReadBytesAsPointer => ReadBytesAsPointer,\n+            ReadForeignStatic => ReadForeignStatic,\n             InvalidPointerMath => InvalidPointerMath,\n             ReadUndefBytes => ReadUndefBytes,\n             DeadLocal => DeadLocal,"}, {"sha": "749c0d04ae91f71a19f138287626e4b6a654e784", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/349d53c2a90e7adc45b2c07bdb038cfb03669b37/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349d53c2a90e7adc45b2c07bdb038cfb03669b37/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=349d53c2a90e7adc45b2c07bdb038cfb03669b37", "patch": "@@ -374,7 +374,7 @@ impl<'mir, 'tcx> super::Machine<'mir, 'tcx> for CompileTimeEvaluator {\n             Ok(None)\n         } else {\n             Err(\n-                ConstEvalError::NeedsRfc(\"Pointer arithmetic or comparison\".to_string()).into(),\n+                ConstEvalError::NeedsRfc(\"pointer arithmetic or comparison\".to_string()).into(),\n             )\n         }\n     }\n@@ -404,7 +404,7 @@ impl<'mir, 'tcx> super::Machine<'mir, 'tcx> for CompileTimeEvaluator {\n         _dest: Place,\n     ) -> EvalResult<'tcx> {\n         Err(\n-            ConstEvalError::NeedsRfc(\"Heap allocations via `box` keyword\".to_string()).into(),\n+            ConstEvalError::NeedsRfc(\"heap allocations via `box` keyword\".to_string()).into(),\n         )\n     }\n "}, {"sha": "daa30fb187ca6c55716d89734b00fe11236a4b40", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/349d53c2a90e7adc45b2c07bdb038cfb03669b37/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349d53c2a90e7adc45b2c07bdb038cfb03669b37/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=349d53c2a90e7adc45b2c07bdb038cfb03669b37", "patch": "@@ -279,6 +279,9 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n /// Allocation accessors\n impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n     fn const_eval_static(&self, def_id: DefId) -> EvalResult<'tcx, &'tcx Allocation> {\n+        if self.tcx.is_foreign_item(def_id) {\n+            return err!(ReadForeignStatic);\n+        }\n         let instance = Instance::mono(self.tcx.tcx, def_id);\n         let gid = GlobalId {\n             instance,"}, {"sha": "341cc7bb49116d8bfb3ef1f28968f8cd44616ce1", "filename": "src/test/compile-fail/const-fn-not-safe-for-const.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/349d53c2a90e7adc45b2c07bdb038cfb03669b37/src%2Ftest%2Fcompile-fail%2Fconst-fn-not-safe-for-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349d53c2a90e7adc45b2c07bdb038cfb03669b37/src%2Ftest%2Fcompile-fail%2Fconst-fn-not-safe-for-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-fn-not-safe-for-const.rs?ref=349d53c2a90e7adc45b2c07bdb038cfb03669b37", "patch": "@@ -29,7 +29,6 @@ static Y: u32 = 0;\n const fn get_Y() -> u32 {\n     Y\n         //~^ ERROR E0013\n-        //~| ERROR cannot refer to statics by value\n }\n \n const fn get_Y_addr() -> &'static u32 {\n@@ -49,5 +48,4 @@ const fn get() -> u32 {\n     //~| ERROR let bindings in constant functions are unstable\n }\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "1516e18a86f9fef06dc2ffc0c6572619e22613b1", "filename": "src/test/compile-fail/issue-14227.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/349d53c2a90e7adc45b2c07bdb038cfb03669b37/src%2Ftest%2Fcompile-fail%2Fissue-14227.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349d53c2a90e7adc45b2c07bdb038cfb03669b37/src%2Ftest%2Fcompile-fail%2Fissue-14227.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14227.rs?ref=349d53c2a90e7adc45b2c07bdb038cfb03669b37", "patch": "@@ -13,6 +13,7 @@\n extern {\n     pub static symbol: ();\n }\n-static CRASH: () = symbol; //~ cannot refer to other statics by value\n+static CRASH: () = symbol;\n+//~^ ERROR constant evaluation error\n \n fn main() {}"}, {"sha": "586cfebcd161c06af2f3fba81f2dcab51c2dd9b2", "filename": "src/test/compile-fail/issue-17718-references.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/349d53c2a90e7adc45b2c07bdb038cfb03669b37/src%2Ftest%2Fcompile-fail%2Fissue-17718-references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349d53c2a90e7adc45b2c07bdb038cfb03669b37/src%2Ftest%2Fcompile-fail%2Fissue-17718-references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-references.rs?ref=349d53c2a90e7adc45b2c07bdb038cfb03669b37", "patch": "@@ -22,14 +22,13 @@ static T4: &'static usize = &S;\n \n const T5: usize = C;\n const T6: usize = S; //~ ERROR: constants cannot refer to statics\n-//~^ cannot refer to statics\n static T7: usize = C;\n-static T8: usize = S; //~ ERROR: cannot refer to other statics by value\n+static T8: usize = S;\n \n const T9: Struct = Struct { a: C };\n-const T10: Struct = Struct { a: S }; //~ ERROR: cannot refer to statics by value\n+const T10: Struct = Struct { a: S };\n //~^ ERROR: constants cannot refer to statics\n static T11: Struct = Struct { a: C };\n-static T12: Struct = Struct { a: S }; //~ ERROR: cannot refer to other statics by value\n+static T12: Struct = Struct { a: S };\n \n fn main() {}"}, {"sha": "4179048b46118bbb6fa76277280376dc20059efb", "filename": "src/test/compile-fail/issue-28324.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/349d53c2a90e7adc45b2c07bdb038cfb03669b37/src%2Ftest%2Fcompile-fail%2Fissue-28324.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349d53c2a90e7adc45b2c07bdb038cfb03669b37/src%2Ftest%2Fcompile-fail%2Fissue-28324.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28324.rs?ref=349d53c2a90e7adc45b2c07bdb038cfb03669b37", "patch": "@@ -15,6 +15,6 @@ extern {\n }\n \n pub static BAZ: u32 = *&error_message_count;\n-//~^ ERROR cannot refer to other statics by value\n+//~^ ERROR constant evaluation error\n \n fn main() {}"}, {"sha": "62e26f28b066782b29447ee6e4d023cf2c38eb70", "filename": "src/test/compile-fail/thread-local-in-ctfe.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/349d53c2a90e7adc45b2c07bdb038cfb03669b37/src%2Ftest%2Fcompile-fail%2Fthread-local-in-ctfe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349d53c2a90e7adc45b2c07bdb038cfb03669b37/src%2Ftest%2Fcompile-fail%2Fthread-local-in-ctfe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fthread-local-in-ctfe.rs?ref=349d53c2a90e7adc45b2c07bdb038cfb03669b37", "patch": "@@ -15,22 +15,19 @@ static A: u32 = 1;\n \n static B: u32 = A;\n //~^ ERROR thread-local statics cannot be accessed at compile-time\n-//~| ERROR cannot refer to other statics by value\n \n static C: &u32 = &A;\n //~^ ERROR thread-local statics cannot be accessed at compile-time\n \n const D: u32 = A;\n //~^ ERROR thread-local statics cannot be accessed at compile-time\n-//~| ERROR cannot refer to statics by value\n \n const E: &u32 = &A;\n //~^ ERROR thread-local statics cannot be accessed at compile-time\n \n const fn f() -> u32 {\n     A\n     //~^ ERROR thread-local statics cannot be accessed at compile-time\n-    //~| ERROR cannot refer to statics by value\n }\n \n fn main() {}"}, {"sha": "242d8c20cd75950bb527be637b511da4ae14b398", "filename": "src/test/run-pass/issue-17450.rs", "status": "renamed", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/349d53c2a90e7adc45b2c07bdb038cfb03669b37/src%2Ftest%2Frun-pass%2Fissue-17450.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349d53c2a90e7adc45b2c07bdb038cfb03669b37/src%2Ftest%2Frun-pass%2Fissue-17450.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17450.rs?ref=349d53c2a90e7adc45b2c07bdb038cfb03669b37", "patch": "@@ -11,9 +11,6 @@\n #![allow(dead_code, warnings)]\n \n static mut x: isize = 3;\n-static mut y: isize = unsafe {\n-    x\n-//~^ ERROR cannot refer to other statics by value, use the address-of operator or a constant instea\n-};\n+static mut y: isize = unsafe { x };\n \n fn main() {}", "previous_filename": "src/test/compile-fail/issue-17450.rs"}, {"sha": "cafc037525782e57f1f9239b2ab7a42cc4939df2", "filename": "src/test/run-pass/issue-17718-borrow-interior.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/349d53c2a90e7adc45b2c07bdb038cfb03669b37/src%2Ftest%2Frun-pass%2Fissue-17718-borrow-interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349d53c2a90e7adc45b2c07bdb038cfb03669b37/src%2Ftest%2Frun-pass%2Fissue-17718-borrow-interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17718-borrow-interior.rs?ref=349d53c2a90e7adc45b2c07bdb038cfb03669b37", "patch": "@@ -10,12 +10,18 @@\n \n struct S { a: usize }\n \n-static A: S  = S { a: 3 };\n+static A: S = S { a: 3 };\n static B: &'static usize = &A.a;\n static C: &'static usize = &(A.a);\n \n static D: [usize; 1] = [1];\n static E: usize = D[0];\n static F: &'static usize = &D[0];\n \n-fn main() {}\n+fn main() {\n+    assert_eq!(*B, A.a);\n+    assert_eq!(*B, A.a);\n+\n+    assert_eq!(E, D[0]);\n+    assert_eq!(*F, D[0]);\n+}"}, {"sha": "e1aef8996196d1b30921d9a94842937a4bb4fe50", "filename": "src/test/run-pass/issue-34194.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/349d53c2a90e7adc45b2c07bdb038cfb03669b37/src%2Ftest%2Frun-pass%2Fissue-34194.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349d53c2a90e7adc45b2c07bdb038cfb03669b37/src%2Ftest%2Frun-pass%2Fissue-34194.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-34194.rs?ref=349d53c2a90e7adc45b2c07bdb038cfb03669b37", "patch": "@@ -16,6 +16,5 @@ struct A {\n \n static B: &'static A = &A { a: &() };\n static C: &'static A = &B;\n-//~^ ERROR cannot refer to other statics by value\n \n fn main() {}", "previous_filename": "src/test/compile-fail/issue-34194.rs"}, {"sha": "32a9a055d49b897bf2b12d9d63eb18bf8db0e4ba", "filename": "src/test/run-pass/issue-6991.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/349d53c2a90e7adc45b2c07bdb038cfb03669b37/src%2Ftest%2Frun-pass%2Fissue-6991.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349d53c2a90e7adc45b2c07bdb038cfb03669b37/src%2Ftest%2Frun-pass%2Fissue-6991.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6991.rs?ref=349d53c2a90e7adc45b2c07bdb038cfb03669b37", "patch": "@@ -10,6 +10,5 @@\n \n static x: &'static usize = &1;\n static y: usize = *x;\n-//~^ ERROR cannot refer to other statics by value,\n-//         use the address-of operator or a constant instead\n+\n fn main() {}", "previous_filename": "src/test/compile-fail/issue-6991.rs"}]}