{"sha": "586d17d330fa320deb1c2d738fb90d1235a7ade1", "node_id": "C_kwDOAAsO6NoAKDU4NmQxN2QzMzBmYTMyMGRlYjFjMmQ3MzhmYjkwZDEyMzVhN2FkZTE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2023-04-28T11:35:50Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2023-04-28T14:00:08Z"}, "message": "share BinOp::Offset between CTFE and Miri", "tree": {"sha": "bc6c7b8b3235b5fa908df1da031af02075bff5ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc6c7b8b3235b5fa908df1da031af02075bff5ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/586d17d330fa320deb1c2d738fb90d1235a7ade1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/586d17d330fa320deb1c2d738fb90d1235a7ade1", "html_url": "https://github.com/rust-lang/rust/commit/586d17d330fa320deb1c2d738fb90d1235a7ade1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/586d17d330fa320deb1c2d738fb90d1235a7ade1/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b8110e1469d459a196f6feb60d82dec48c3cfc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b8110e1469d459a196f6feb60d82dec48c3cfc2", "html_url": "https://github.com/rust-lang/rust/commit/8b8110e1469d459a196f6feb60d82dec48c3cfc2"}], "stats": {"total": 54, "additions": 29, "deletions": 25}, "files": [{"sha": "814b67b46ec7a239e726a45add6304d62f662d03", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/586d17d330fa320deb1c2d738fb90d1235a7ade1/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/586d17d330fa320deb1c2d738fb90d1235a7ade1/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=586d17d330fa320deb1c2d738fb90d1235a7ade1", "patch": "@@ -559,20 +559,11 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n     }\n \n     fn binary_ptr_op(\n-        ecx: &InterpCx<'mir, 'tcx, Self>,\n-        bin_op: mir::BinOp,\n-        left: &ImmTy<'tcx>,\n-        right: &ImmTy<'tcx>,\n+        _ecx: &InterpCx<'mir, 'tcx, Self>,\n+        _bin_op: mir::BinOp,\n+        _left: &ImmTy<'tcx>,\n+        _right: &ImmTy<'tcx>,\n     ) -> InterpResult<'tcx, (Scalar, bool, Ty<'tcx>)> {\n-        if bin_op == mir::BinOp::Offset {\n-            let ptr = left.to_scalar().to_pointer(ecx)?;\n-            let offset_count = right.to_scalar().to_target_isize(ecx)?;\n-            let pointee_ty = left.layout.ty.builtin_deref(true).unwrap().ty;\n-\n-            let offset_ptr = ecx.ptr_offset_inbounds(ptr, pointee_ty, offset_count)?;\n-            return Ok((Scalar::from_maybe_pointer(offset_ptr, ecx), false, left.layout.ty));\n-        }\n-\n         throw_unsup_format!(\"pointer arithmetic or comparison is not supported at compile-time\");\n     }\n "}, {"sha": "7186148daf0ba80c8f73abcf1abe28db2698a136", "filename": "compiler/rustc_const_eval/src/interpret/operator.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/586d17d330fa320deb1c2d738fb90d1235a7ade1/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/586d17d330fa320deb1c2d738fb90d1235a7ade1/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs?ref=586d17d330fa320deb1c2d738fb90d1235a7ade1", "patch": "@@ -299,6 +299,30 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         Ok((val, false, ty))\n     }\n \n+    fn binary_ptr_op(\n+        &self,\n+        bin_op: mir::BinOp,\n+        left: &ImmTy<'tcx, M::Provenance>,\n+        right: &ImmTy<'tcx, M::Provenance>,\n+    ) -> InterpResult<'tcx, (Scalar<M::Provenance>, bool, Ty<'tcx>)> {\n+        use rustc_middle::mir::BinOp::*;\n+\n+        match bin_op {\n+            // Pointer ops that are always supported.\n+            Offset => {\n+                let ptr = left.to_scalar().to_pointer(self)?;\n+                let offset_count = right.to_scalar().to_target_isize(self)?;\n+                let pointee_ty = left.layout.ty.builtin_deref(true).unwrap().ty;\n+\n+                let offset_ptr = self.ptr_offset_inbounds(ptr, pointee_ty, offset_count)?;\n+                Ok((Scalar::from_maybe_pointer(offset_ptr, self), false, left.layout.ty))\n+            }\n+\n+            // Fall back to machine hook so Miri can support more pointer ops.\n+            _ => M::binary_ptr_op(self, bin_op, left, right),\n+        }\n+    }\n+\n     /// Returns the result of the specified operation, whether it overflowed, and\n     /// the result type.\n     pub fn overflowing_binary_op(\n@@ -368,7 +392,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     right.layout.ty\n                 );\n \n-                M::binary_ptr_op(self, bin_op, left, right)\n+                self.binary_ptr_op(bin_op, left, right)\n             }\n             _ => span_bug!(\n                 self.cur_span(),"}, {"sha": "368aa2bacdc8ca4673473965cabf35dbcd03aa0a", "filename": "src/tools/miri/src/operator.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/586d17d330fa320deb1c2d738fb90d1235a7ade1/src%2Ftools%2Fmiri%2Fsrc%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/586d17d330fa320deb1c2d738fb90d1235a7ade1/src%2Ftools%2Fmiri%2Fsrc%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Foperator.rs?ref=586d17d330fa320deb1c2d738fb90d1235a7ade1", "patch": "@@ -53,17 +53,6 @@ impl<'mir, 'tcx> EvalContextExt<'tcx> for super::MiriInterpCx<'mir, 'tcx> {\n                 (Scalar::from_bool(res), false, self.tcx.types.bool)\n             }\n \n-            Offset => {\n-                assert!(left.layout.ty.is_unsafe_ptr());\n-                let ptr = left.to_scalar().to_pointer(self)?;\n-                let offset = right.to_scalar().to_target_isize(self)?;\n-\n-                let pointee_ty =\n-                    left.layout.ty.builtin_deref(true).expect(\"Offset called on non-ptr type\").ty;\n-                let ptr = self.ptr_offset_inbounds(ptr, pointee_ty, offset)?;\n-                (Scalar::from_maybe_pointer(ptr, self), false, left.layout.ty)\n-            }\n-\n             // Some more operations are possible with atomics.\n             // The return value always has the provenance of the *left* operand.\n             Add | Sub | BitOr | BitAnd | BitXor => {"}]}