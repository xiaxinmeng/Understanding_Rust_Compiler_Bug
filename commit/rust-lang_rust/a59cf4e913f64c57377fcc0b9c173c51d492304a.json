{"sha": "a59cf4e913f64c57377fcc0b9c173c51d492304a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1OWNmNGU5MTNmNjRjNTczNzdmY2MwYjljMTczYzUxZDQ5MjMwNGE=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-14T15:22:53Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-14T15:22:53Z"}, "message": "Remove `ty_to_def_id`", "tree": {"sha": "bea0a34112edaefdf875c0d3d8b1e4125be00a08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bea0a34112edaefdf875c0d3d8b1e4125be00a08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a59cf4e913f64c57377fcc0b9c173c51d492304a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a59cf4e913f64c57377fcc0b9c173c51d492304a", "html_url": "https://github.com/rust-lang/rust/commit/a59cf4e913f64c57377fcc0b9c173c51d492304a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a59cf4e913f64c57377fcc0b9c173c51d492304a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c946c2539e9690fab5dbf7ac217ec696ac263cf3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c946c2539e9690fab5dbf7ac217ec696ac263cf3", "html_url": "https://github.com/rust-lang/rust/commit/c946c2539e9690fab5dbf7ac217ec696ac263cf3"}], "stats": {"total": 31, "additions": 11, "deletions": 20}, "files": [{"sha": "180469a5d848ad4d5f099d77366da6a2717f037b", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a59cf4e913f64c57377fcc0b9c173c51d492304a/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59cf4e913f64c57377fcc0b9c173c51d492304a/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=a59cf4e913f64c57377fcc0b9c173c51d492304a", "patch": "@@ -469,13 +469,9 @@ impl<'a, 'tcx> DeadVisitor<'a, 'tcx> {\n \n     fn should_warn_about_field(&mut self, field: &hir::StructField) -> bool {\n         let field_type = self.tcx.type_of(self.tcx.hir.local_def_id(field.id));\n-        let is_marker_field = match field_type.ty_to_def_id() {\n-            Some(def_id) => self.tcx.lang_items().items().iter().any(|item| *item == Some(def_id)),\n-            _ => false\n-        };\n         !field.is_positional()\n             && !self.symbol_is_live(field.id, None)\n-            && !is_marker_field\n+            && !field_type.is_phantom_data()\n             && !has_allow_dead_code_or_lang_attr(self.tcx, field.id, &field.attrs)\n     }\n "}, {"sha": "a5caacea986183a3e15245b30b414f36490f8df8", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a59cf4e913f64c57377fcc0b9c173c51d492304a/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59cf4e913f64c57377fcc0b9c173c51d492304a/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=a59cf4e913f64c57377fcc0b9c173c51d492304a", "patch": "@@ -391,7 +391,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             flags.push((name, Some(value)));\n         }\n \n-        if let Some(true) = self_ty.ty_to_def_id().map(|def_id| def_id.is_local()) {\n+        if let Some(true) = self_ty.ty_adt_def().map(|def| def.did.is_local()) {\n             flags.push((\"crate_local\".to_string(), None));\n         }\n \n@@ -775,7 +775,13 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 }\n                 let found_trait_ty = found_trait_ref.self_ty();\n \n-                let found_did = found_trait_ty.ty_to_def_id();\n+                let found_did = match found_trait_ty.sty {\n+                    ty::TyClosure(did, _) |\n+                    ty::TyForeign(did) |\n+                    ty::TyFnDef(did, _) => Some(did),\n+                    ty::TyAdt(def, _) => Some(def.did),\n+                    _ => None,\n+                };\n                 let found_span = found_did.and_then(|did| {\n                     self.tcx.hir.span_if_local(did)\n                 }).map(|sp| self.tcx.sess.codemap().def_span(sp)); // the sp could be an fn def"}, {"sha": "934bf9a416a95f3e9a9f68d03a13c0976e63bd8d", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a59cf4e913f64c57377fcc0b9c173c51d492304a/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59cf4e913f64c57377fcc0b9c173c51d492304a/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=a59cf4e913f64c57377fcc0b9c173c51d492304a", "patch": "@@ -1767,17 +1767,6 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n-    pub fn ty_to_def_id(&self) -> Option<DefId> {\n-        match self.sty {\n-            TyDynamic(ref tt, ..) => tt.principal().map(|p| p.def_id()),\n-            TyAdt(def, _) => Some(def.did),\n-            TyForeign(did) => Some(did),\n-            TyClosure(id, _) => Some(id),\n-            TyFnDef(id, _) => Some(id),\n-            _ => None,\n-        }\n-    }\n-\n     pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> {\n         match self.sty {\n             TyAdt(adt, _) => Some(adt),"}, {"sha": "6149785b0485cdfab6463f6c0c50e0fbba6dbe6d", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a59cf4e913f64c57377fcc0b9c173c51d492304a/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59cf4e913f64c57377fcc0b9c173c51d492304a/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=a59cf4e913f64c57377fcc0b9c173c51d492304a", "patch": "@@ -591,8 +591,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDebugImplementations {\n         if self.impling_types.is_none() {\n             let mut impls = NodeSet();\n             cx.tcx.for_each_impl(debug, |d| {\n-                if let Some(ty_def) = cx.tcx.type_of(d).ty_to_def_id() {\n-                    if let Some(node_id) = cx.tcx.hir.as_local_node_id(ty_def) {\n+                if let Some(ty_def) = cx.tcx.type_of(d).ty_adt_def() {\n+                    if let Some(node_id) = cx.tcx.hir.as_local_node_id(ty_def.did) {\n                         impls.insert(node_id);\n                     }\n                 }"}]}