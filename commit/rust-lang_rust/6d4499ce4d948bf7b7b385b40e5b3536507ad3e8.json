{"sha": "6d4499ce4d948bf7b7b385b40e5b3536507ad3e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkNDQ5OWNlNGQ5NDhiZjdiN2IzODViNDBlNWIzNTM2NTA3YWQzZTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-25T19:04:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-25T19:04:11Z"}, "message": "auto merge of #5424 : luqmana/rust/inline-rt, r=brson\n\nAs per #2521. Inlining seems to improve performance slightly:\r\n\r\n                 Inlined          Not Inlined\r\n    x86:         13.5482            14.4112\r\n    x86_64:      17.4712            18.0696\r\n\r\n(Average of 5 runs timed with `time`)\r\n\r\n```Rust\r\n\r\nfn foo() -> int {\r\n    int::from_str(~\"28098\").unwrap()\r\n}\r\n\r\nfn main() {\r\n    for 1000000.times {\r\n        foo();\r\n        foo();\r\n        foo();\r\n        foo();\r\n        foo();\r\n    }\r\n}\r\n```\r\n\r\nAll run on:\r\n\r\n    Linux 3.2.0-0.bpo.4-amd64 #1 SMP Debian 3.2.35-2~bpo60+1 x86_64 GNU/Linux\r\n\r\nThe MIPS and ARM bits I didn't inline since I'm not as familiar with them and I also can't test them. All green on try.", "tree": {"sha": "8db8ed6265295920b856021d30e18596621b6082", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8db8ed6265295920b856021d30e18596621b6082"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d4499ce4d948bf7b7b385b40e5b3536507ad3e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d4499ce4d948bf7b7b385b40e5b3536507ad3e8", "html_url": "https://github.com/rust-lang/rust/commit/6d4499ce4d948bf7b7b385b40e5b3536507ad3e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d4499ce4d948bf7b7b385b40e5b3536507ad3e8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f4273854438e8f9b034e1342f30392f70c0eaae", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f4273854438e8f9b034e1342f30392f70c0eaae", "html_url": "https://github.com/rust-lang/rust/commit/6f4273854438e8f9b034e1342f30392f70c0eaae"}, {"sha": "a692777224150e2dadb5ec02c6ecd5c10ce0dd98", "url": "https://api.github.com/repos/rust-lang/rust/commits/a692777224150e2dadb5ec02c6ecd5c10ce0dd98", "html_url": "https://github.com/rust-lang/rust/commit/a692777224150e2dadb5ec02c6ecd5c10ce0dd98"}], "stats": {"total": 341, "additions": 217, "deletions": 124}, "files": [{"sha": "cd79884760777b02bf027749204d8b43faef9e98", "filename": "src/rt/arch/arm/sp.h", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6d4499ce4d948bf7b7b385b40e5b3536507ad3e8/src%2Frt%2Farch%2Farm%2Fsp.h", "raw_url": "https://github.com/rust-lang/rust/raw/6d4499ce4d948bf7b7b385b40e5b3536507ad3e8/src%2Frt%2Farch%2Farm%2Fsp.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Farm%2Fsp.h?ref=6d4499ce4d948bf7b7b385b40e5b3536507ad3e8", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Getting the stack pointer and getting/setting sp limit.\n+\n+#ifndef SP_H\n+#define SP_H\n+\n+#include \"../../rust_globals.h\"\n+\n+// Gets a pointer to the vicinity of the current stack pointer\n+extern \"C\" uintptr_t get_sp();\n+\n+// Gets the pointer to the end of the Rust stack from a platform-\n+// specific location in the thread control block\n+extern \"C\" CDECL uintptr_t get_sp_limit();\n+\n+// Records the pointer to the end of the Rust stack in a platform-\n+// specific location in the thread control block\n+extern \"C\" CDECL void record_sp_limit(void *limit);\n+\n+#endif"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/rt/arch/i386/record_sp.S", "status": "modified", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/6d4499ce4d948bf7b7b385b40e5b3536507ad3e8/src%2Frt%2Farch%2Fi386%2Frecord_sp.S", "raw_url": "https://github.com/rust-lang/rust/raw/6d4499ce4d948bf7b7b385b40e5b3536507ad3e8/src%2Frt%2Farch%2Fi386%2Frecord_sp.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fi386%2Frecord_sp.S?ref=6d4499ce4d948bf7b7b385b40e5b3536507ad3e8", "patch": "@@ -1,60 +0,0 @@\n-.text\n-\n-#if defined(__APPLE__) || defined(_WIN32)\n-#define RECORD_SP_LIMIT    _record_sp_limit\n-#define GET_SP_LIMIT       _get_sp_limit\n-#define GET_SP             _get_sp\n-#else\n-#define RECORD_SP_LIMIT    record_sp_limit\n-#define GET_SP_LIMIT       get_sp_limit\n-#define GET_SP             get_sp\n-#endif\n-\n-.globl RECORD_SP_LIMIT\n-.globl GET_SP_LIMIT\n-.globl GET_SP\n-\n-#if defined(__linux__) || defined(__FreeBSD__)\n-RECORD_SP_LIMIT:\n-\tmovl 4(%esp), %eax\n-\tmovl %eax, %gs:48\n-\tret\n-#endif\n-\n-#if defined(__APPLE__)\n-RECORD_SP_LIMIT:\n-\tmovl $0x48+90*4, %eax\n-\tmovl 4(%esp), %ecx\n-\tmovl %ecx, %gs:(%eax)\n-\tret\n-#endif\n-\n-#if defined(_WIN32)\n-RECORD_SP_LIMIT:\n-\tmovl 4(%esp), %eax\n-\tmovl %eax, %fs:0x14\n-\tret\n-#endif\n-\n-#if defined(__linux__) || defined(__FreeBSD__)\n-GET_SP_LIMIT:\n-\tmovl %gs:48, %eax\n-\tret\n-#endif\n-\n-#if defined(__APPLE__)\n-GET_SP_LIMIT:\n-\tmovl $0x48+90*4, %ecx\n-\tmovl %gs:(%ecx), %eax\n-\tret\n-#endif\n-\n-#if defined(_WIN32)\n-GET_SP_LIMIT:\n-\tmovl %fs:0x14, %eax\n-\tret\n-#endif\n-\n-GET_SP:\n-\tmovl %esp, %eax\n-\tret"}, {"sha": "4f4c84c817573ca5e97bbe76265f53496e2f551f", "filename": "src/rt/arch/i386/sp.h", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/6d4499ce4d948bf7b7b385b40e5b3536507ad3e8/src%2Frt%2Farch%2Fi386%2Fsp.h", "raw_url": "https://github.com/rust-lang/rust/raw/6d4499ce4d948bf7b7b385b40e5b3536507ad3e8/src%2Frt%2Farch%2Fi386%2Fsp.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fi386%2Fsp.h?ref=6d4499ce4d948bf7b7b385b40e5b3536507ad3e8", "patch": "@@ -0,0 +1,71 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Getting the stack pointer and getting/setting sp limit.\n+\n+#ifndef SP_H\n+#define SP_H\n+\n+#include \"../../rust_globals.h\"\n+\n+// Gets a pointer to the vicinity of the current stack pointer\n+extern \"C\" ALWAYS_INLINE uintptr_t get_sp() {\n+    uintptr_t sp;\n+    asm volatile (\n+        \"movl %%esp, %0\"\n+        : \"=m\"(sp));\n+    return sp;\n+}\n+\n+// Gets the pointer to the end of the Rust stack from a platform-\n+// specific location in the thread control block\n+extern \"C\" CDECL ALWAYS_INLINE uintptr_t get_sp_limit() {\n+    uintptr_t limit;\n+\n+#if defined(__linux__) || defined(__FreeBSD__)\n+    asm volatile (\n+        \"movl %%gs:48, %0\"\n+        : \"=r\"(limit));\n+#elif defined(__APPLE__)\n+    asm volatile (\n+        \"movl $0x48+90*4, %%ecx\\n\\t\"\n+        \"movl %%gs:(%%ecx), %0\"\n+        :  \"=r\"(limit)\n+        :: \"ecx\");\n+#elif defined(_WIN32)\n+    asm volatile (\n+        \"movl %%fs:0x14, %0\"\n+        : \"=r\"(limit));\n+#endif\n+\n+    return limit;\n+}\n+\n+// Records the pointer to the end of the Rust stack in a platform-\n+// specific location in the thread control block\n+extern \"C\" CDECL ALWAYS_INLINE void record_sp_limit(void *limit) {\n+#if defined(__linux__) || defined(__FreeBSD__)\n+    asm volatile (\n+        \"movl %0, %%gs:48\"\n+        :: \"r\"(limit));\n+#elif defined(__APPLE__)\n+    asm volatile (\n+        \"movl $0x48+90*4, %%eax\\n\\t\"\n+        \"movl %0, %%gs:(%%eax)\"\n+        :: \"r\"(limit)\n+        :  \"eax\");\n+#elif defined(_WIN32)\n+    asm volatile (\n+        \"movl %0, %%fs:0x14\"\n+        :: \"r\"(limit));\n+#endif\n+}\n+\n+#endif"}, {"sha": "cd79884760777b02bf027749204d8b43faef9e98", "filename": "src/rt/arch/mips/sp.h", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6d4499ce4d948bf7b7b385b40e5b3536507ad3e8/src%2Frt%2Farch%2Fmips%2Fsp.h", "raw_url": "https://github.com/rust-lang/rust/raw/6d4499ce4d948bf7b7b385b40e5b3536507ad3e8/src%2Frt%2Farch%2Fmips%2Fsp.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fmips%2Fsp.h?ref=6d4499ce4d948bf7b7b385b40e5b3536507ad3e8", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Getting the stack pointer and getting/setting sp limit.\n+\n+#ifndef SP_H\n+#define SP_H\n+\n+#include \"../../rust_globals.h\"\n+\n+// Gets a pointer to the vicinity of the current stack pointer\n+extern \"C\" uintptr_t get_sp();\n+\n+// Gets the pointer to the end of the Rust stack from a platform-\n+// specific location in the thread control block\n+extern \"C\" CDECL uintptr_t get_sp_limit();\n+\n+// Records the pointer to the end of the Rust stack in a platform-\n+// specific location in the thread control block\n+extern \"C\" CDECL void record_sp_limit(void *limit);\n+\n+#endif"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/rt/arch/x86_64/record_sp.S", "status": "modified", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/6d4499ce4d948bf7b7b385b40e5b3536507ad3e8/src%2Frt%2Farch%2Fx86_64%2Frecord_sp.S", "raw_url": "https://github.com/rust-lang/rust/raw/6d4499ce4d948bf7b7b385b40e5b3536507ad3e8/src%2Frt%2Farch%2Fx86_64%2Frecord_sp.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2Frecord_sp.S?ref=6d4499ce4d948bf7b7b385b40e5b3536507ad3e8", "patch": "@@ -1,52 +0,0 @@\n-.text\n-\n-#if defined(__APPLE__) || defined(_WIN32)\n-#define RECORD_SP_LIMIT    _record_sp_limit\n-#define GET_SP_LIMIT       _get_sp_limit\n-#define GET_SP             _get_sp\n-#else\n-#define RECORD_SP_LIMIT    record_sp_limit\n-#define GET_SP_LIMIT       get_sp_limit\n-#define GET_SP             get_sp\n-#endif\n-\n-.globl RECORD_SP_LIMIT\n-.globl GET_SP_LIMIT\n-.globl GET_SP\n-\n-#if defined(__linux__)\n-RECORD_SP_LIMIT:\n-\tmovq %rdi, %fs:112\n-\tret\n-#elif defined(__APPLE__)\n-RECORD_SP_LIMIT:\n-\tmovq $0x60+90*8, %rsi\n-\tmovq %rdi, %gs:(%rsi)\n-\tret\n-#elif defined(__FreeBSD__)\n-RECORD_SP_LIMIT:\n-\tmovq %rdi, %fs:24\n-\tret\n-#else\n-RECORD_SP_LIMIT:\n-\tret\n-#endif\n-\n-#if defined(__linux__)\n-GET_SP_LIMIT:\n-\tmovq %fs:112, %rax\n-\tret\n-#elif defined(__APPLE__)\n-GET_SP_LIMIT:\n-\tmovq $0x60+90*8, %rsi\n-\tmovq %gs:(%rsi), %rax\n-\tret\n-#elif defined(__FreeBSD__)\n-GET_SP_LIMIT:\n-\tmovq %fs:24, %rax\n-\tret\n-#endif\n-\n-GET_SP:\n-\tmovq %rsp, %rax\n-\tret"}, {"sha": "bf011f4d01976aee960105858f1805aafa28e29b", "filename": "src/rt/arch/x86_64/sp.h", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/6d4499ce4d948bf7b7b385b40e5b3536507ad3e8/src%2Frt%2Farch%2Fx86_64%2Fsp.h", "raw_url": "https://github.com/rust-lang/rust/raw/6d4499ce4d948bf7b7b385b40e5b3536507ad3e8/src%2Frt%2Farch%2Fx86_64%2Fsp.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2Fsp.h?ref=6d4499ce4d948bf7b7b385b40e5b3536507ad3e8", "patch": "@@ -0,0 +1,71 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Getting the stack pointer and getting/setting sp limit.\n+\n+#ifndef SP_H\n+#define SP_H\n+\n+#include \"../../rust_globals.h\"\n+\n+// Gets a pointer to the vicinity of the current stack pointer\n+extern \"C\" ALWAYS_INLINE uintptr_t get_sp() {\n+    uintptr_t sp;\n+    asm volatile (\n+        \"movq %%rsp, %0\"\n+        : \"=m\"(sp));\n+    return sp;\n+}\n+\n+// Gets the pointer to the end of the Rust stack from a platform-\n+// specific location in the thread control block\n+extern \"C\" CDECL ALWAYS_INLINE uintptr_t get_sp_limit() {\n+    uintptr_t limit;\n+\n+#if defined(__linux__)\n+    asm volatile (\n+        \"movq %%fs:112, %0\"\n+        : \"=r\"(limit));\n+#elif defined(__APPLE__)\n+    asm volatile (\n+        \"movq $0x60+90*8, %%rsi\\n\\t\"\n+        \"movq %%gs:(%%rsi), %0\"\n+        :  \"=r\"(limit)\n+        :: \"rsi\");\n+#elif defined(__FreeBSD__)\n+    asm volatile (\n+        \"movq %%fs:24, %0\"\n+        : \"=r\"(limit));\n+#endif\n+\n+    return limit;\n+}\n+\n+// Records the pointer to the end of the Rust stack in a platform-\n+// specific location in the thread control block\n+extern \"C\" CDECL ALWAYS_INLINE void record_sp_limit(void *limit) {\n+#if defined(__linux__)\n+    asm volatile (\n+        \"movq %0, %%fs:112\"\n+        :: \"r\"(limit));\n+#elif defined(__APPLE__)\n+    asm volatile (\n+        \"movq $0x60+90*8, %%rsi\\n\\t\"\n+        \"movq %0, %%gs:(%%rsi)\"\n+        :: \"r\"(limit)\n+        :  \"rsi\");\n+#elif defined(__FreeBSD__)\n+    asm volatile (\n+        \"movq %0, %%fs:24\"\n+        :: \"r\"(limit));\n+#endif\n+}\n+\n+#endif"}, {"sha": "ff57af08337132bf02d42c71822405f841a08ce2", "filename": "src/rt/rust_globals.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6d4499ce4d948bf7b7b385b40e5b3536507ad3e8/src%2Frt%2Frust_globals.h", "raw_url": "https://github.com/rust-lang/rust/raw/6d4499ce4d948bf7b7b385b40e5b3536507ad3e8/src%2Frt%2Frust_globals.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_globals.h?ref=6d4499ce4d948bf7b7b385b40e5b3536507ad3e8", "patch": "@@ -11,6 +11,22 @@\n #ifndef RUST_GLOBALS_H\n #define RUST_GLOBALS_H\n \n+#if defined(__cplusplus)\n+#define INLINE inline\n+#elif defined(_MSC_VER) || defined(__GNUC__)\n+#define INLINE __inline__\n+#else\n+#define INLINE inline\n+#endif\n+\n+#if defined(__GNUC__)\n+#define ALWAYS_INLINE __attribute((always_inline)) INLINE\n+#elif defined(_MSC_VER)\n+#define ALWAYS_INLINE __forceinline\n+#else\n+#define ALWAYS_INLINE INLINE\n+#endif\n+\n #ifndef __STDC_LIMIT_MACROS\n #define __STDC_LIMIT_MACROS 1\n #endif"}, {"sha": "00d20fefc0ee5c0ebb728b2cdfb07de7a27754d5", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6d4499ce4d948bf7b7b385b40e5b3536507ad3e8/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/6d4499ce4d948bf7b7b385b40e5b3536507ad3e8/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=6d4499ce4d948bf7b7b385b40e5b3536507ad3e8", "patch": "@@ -118,6 +118,7 @@\n #include \"rust_stack.h\"\n #include \"rust_type.h\"\n #include \"rust_sched_loop.h\"\n+#include \"sp.h\"\n \n // The amount of extra space at the end of each stack segment, available\n // to the rt, compiler and dynamic linker for running small functions\n@@ -419,15 +420,6 @@ template <typename T> struct task_owned {\n     }\n };\n \n-// This stuff is on the stack-switching fast path\n-\n-// Records the pointer to the end of the Rust stack in a platform-\n-// specific location in the thread control block\n-extern \"C\" CDECL void      record_sp_limit(void *limit);\n-extern \"C\" CDECL uintptr_t get_sp_limit();\n-// Gets a pointer to the vicinity of the current stack pointer\n-extern \"C\" uintptr_t       get_sp();\n-\n // This is the function that switches between the C and the Rust stack by\n // calling another function with a single void* argument while changing the\n // stack pointer. It has a funny name because gdb doesn't normally like to\n@@ -600,9 +592,6 @@ rust_task::prev_stack() {\n     record_stack_limit();\n }\n \n-extern \"C\" CDECL void\n-record_sp_limit(void *limit);\n-\n // The LLVM-generated segmented-stack function prolog compares the amount of\n // stack needed for each frame to the end-of-stack pointer stored in the\n // TCB. As an optimization, when the frame size is less than 256 bytes, it"}]}