{"sha": "b9b0d374d3fee6ba204943edff750e5d5739c82a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5YjBkMzc0ZDNmZWU2YmEyMDQ5NDNlZGZmNzUwZTVkNTczOWM4MmE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-10T02:06:06Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-10T02:45:05Z"}, "message": "libstd: Implement cells as a nicer replacement for the option dance", "tree": {"sha": "d2f4f8487165322871f35db89e7ce524a5b68b61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2f4f8487165322871f35db89e7ce524a5b68b61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9b0d374d3fee6ba204943edff750e5d5739c82a", "comment_count": 2, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9b0d374d3fee6ba204943edff750e5d5739c82a", "html_url": "https://github.com/rust-lang/rust/commit/b9b0d374d3fee6ba204943edff750e5d5739c82a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9b0d374d3fee6ba204943edff750e5d5739c82a/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "758dd786f65a86a160c76889ebd3d5fc1b206445", "url": "https://api.github.com/repos/rust-lang/rust/commits/758dd786f65a86a160c76889ebd3d5fc1b206445", "html_url": "https://github.com/rust-lang/rust/commit/758dd786f65a86a160c76889ebd3d5fc1b206445"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "d32a47a8ab52cc5f7951b9670e95503c25a1e44e", "filename": "src/libstd/cell.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b9b0d374d3fee6ba204943edff750e5d5739c82a/src%2Flibstd%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9b0d374d3fee6ba204943edff750e5d5739c82a/src%2Flibstd%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcell.rs?ref=b9b0d374d3fee6ba204943edff750e5d5739c82a", "patch": "@@ -0,0 +1,42 @@\n+/// A dynamic, mutable location.\n+///\n+/// Similar to a mutable option type, but friendlier.\n+\n+struct Cell<T> {\n+    mut value: option<T>;\n+}\n+\n+/// Creates a new full cell with the given value.\n+fn Cell<T>(+value: T) -> Cell<T> {\n+    Cell { value: some(move value) }\n+}\n+\n+fn empty_cell<T>() -> Cell<T> {\n+    Cell { value: none }\n+}\n+\n+impl<T> Cell<T> {\n+    /// Yields the value, failing if the cell is empty.\n+    fn take() -> T {\n+        let value = none;\n+        value <-> self.value;\n+        if value.is_none() {\n+            fail \"attempt to take an empty cell\";\n+        }\n+        return option::unwrap(value);\n+    }\n+\n+    /// Returns the value, failing if the cell is full.\n+    fn put_back(+value: T) {\n+        if self.value.is_none() {\n+            fail \"attempt to put a value back into a full cell\";\n+        }\n+        self.value = some(move value);\n+    }\n+\n+    /// Returns true if the cell is empty and false if the cell is full.\n+    fn is_empty() -> bool {\n+        self.value.is_none()\n+    }\n+}\n+"}]}