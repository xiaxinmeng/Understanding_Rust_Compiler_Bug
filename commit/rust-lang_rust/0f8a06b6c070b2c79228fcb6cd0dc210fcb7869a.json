{"sha": "0f8a06b6c070b2c79228fcb6cd0dc210fcb7869a", "node_id": "C_kwDOAAsO6NoAKDBmOGEwNmI2YzA3MGIyYzc5MjI4ZmNiNmNkMGRjMjEwZmNiNzg2OWE", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-04-14T10:14:19Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-04-14T10:14:19Z"}, "message": "use a shared headers cache", "tree": {"sha": "d21bca88f3f622abc90a7527585eca11b7331ed8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d21bca88f3f622abc90a7527585eca11b7331ed8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f8a06b6c070b2c79228fcb6cd0dc210fcb7869a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmQ5J4EACgkQzXazX3c0\ndp6l/Q/+NewG454v1lVwT7a5+SDNk8CcM6gbB2A/ShJNsNdDe4gamWMhtFTlKoY4\nqDnt3kQKh4B8AgkxBVgAC+v8/MfvZK04nT3i0WEVOXe+jN9mYzTveQhdR5af/NdM\nmabt6IGcOgqfgamS8jqeaYlsXMJ7F1+OIcnCek/r/DGTUtFr2/WtIcOvjpr9LHPq\nlaTCli8PzaWBf6GtVrAZGzCHmlDjIjOkRbrUrtZD+ROrPZJNLce9z8EomvyRCXzB\n6YJerDXtvioMmPVevFYXfVJZ2E/BLE2+EteTrA8eODZSgJ/aPv9SWSq6uQ6yXXOX\nP1N0zPzvau1tVdkc0TYbSrmtDxlZw2UMty2aCCz14QmsJcyLiEu3Yuvgjy+lK5bD\nDEjsFyCYONLSNmoC9kffA+cx+lxrEtoLx1Idd9Ax/p7lX1FYWVFgaYwhP0WwTwa6\n+S9S5HOVG4VbLTxyQFhlVE0nlZqDOKAtIQqoj6BSzEqs7yHe5fyst6G7dUZeMTX/\n4h0YD3+jgg3TMaiRjZdO6EdHjECrIJq7QkZ3rnJ+BcnNK9QgDuNB52ktbuE6lsAc\n3BEJxbGflP8twDExlnrPHQ4pPJ84b58ziMeWk7W2oHdCVRBebuzdn/uD7vYRlsPe\nAi6gFlW4Nx159eXmBs+ghNYxsvwcTyz8YNuTU5WjQYLtm96ffGU=\n=8QEE\n-----END PGP SIGNATURE-----", "payload": "tree d21bca88f3f622abc90a7527585eca11b7331ed8\nparent 0f364ac3821a58411407f2fd1547ae823f8f0143\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1681467259 +0200\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1681467259 +0200\n\nuse a shared headers cache\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f8a06b6c070b2c79228fcb6cd0dc210fcb7869a", "html_url": "https://github.com/rust-lang/rust/commit/0f8a06b6c070b2c79228fcb6cd0dc210fcb7869a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f8a06b6c070b2c79228fcb6cd0dc210fcb7869a/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f364ac3821a58411407f2fd1547ae823f8f0143", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f364ac3821a58411407f2fd1547ae823f8f0143", "html_url": "https://github.com/rust-lang/rust/commit/0f364ac3821a58411407f2fd1547ae823f8f0143"}], "stats": {"total": 37, "additions": 28, "deletions": 9}, "files": [{"sha": "02382f8d4c64937cf3be8fb5947104723096a20a", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0f8a06b6c070b2c79228fcb6cd0dc210fcb7869a/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f8a06b6c070b2c79228fcb6cd0dc210fcb7869a/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=0f8a06b6c070b2c79228fcb6cd0dc210fcb7869a", "patch": "@@ -11,13 +11,24 @@ use tracing::*;\n use crate::common::{Config, Debugger, FailMode, Mode, PassMode};\n use crate::header::cfg::parse_cfg_name_directive;\n use crate::header::cfg::MatchOutcome;\n+use crate::header::needs::CachedNeedsConditions;\n use crate::{extract_cdb_version, extract_gdb_version};\n \n mod cfg;\n mod needs;\n #[cfg(test)]\n mod tests;\n \n+pub struct HeadersCache {\n+    needs: CachedNeedsConditions,\n+}\n+\n+impl HeadersCache {\n+    pub fn load(config: &Config) -> Self {\n+        Self { needs: CachedNeedsConditions::load(config) }\n+    }\n+}\n+\n /// Properties which must be known very early, before actually running\n /// the test.\n #[derive(Default)]\n@@ -849,6 +860,7 @@ where\n \n pub fn make_test_description<R: Read>(\n     config: &Config,\n+    cache: &HeadersCache,\n     name: test::TestName,\n     path: &Path,\n     src: R,\n@@ -859,8 +871,6 @@ pub fn make_test_description<R: Read>(\n     let mut ignore_message = None;\n     let mut should_fail = false;\n \n-    let needs_cache = needs::CachedNeedsConditions::load(config);\n-\n     iter_header(path, src, &mut |revision, ln, line_number| {\n         if revision.is_some() && revision != cfg {\n             return;\n@@ -888,7 +898,7 @@ pub fn make_test_description<R: Read>(\n \n         decision!(cfg::handle_ignore(config, ln));\n         decision!(cfg::handle_only(config, ln));\n-        decision!(needs::handle_needs(&needs_cache, config, ln));\n+        decision!(needs::handle_needs(&cache.needs, config, ln));\n         decision!(ignore_llvm(config, ln));\n         decision!(ignore_cdb(config, ln));\n         decision!(ignore_gdb(config, ln));"}, {"sha": "9af7bd5e20145bb73ab8f6e90a536840797a4484", "filename": "src/tools/compiletest/src/header/tests.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f8a06b6c070b2c79228fcb6cd0dc210fcb7869a/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f8a06b6c070b2c79228fcb6cd0dc210fcb7869a/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs?ref=0f8a06b6c070b2c79228fcb6cd0dc210fcb7869a", "patch": "@@ -2,7 +2,7 @@ use std::io::Read;\n use std::path::Path;\n \n use crate::common::{Config, Debugger};\n-use crate::header::{parse_normalization_string, EarlyProps};\n+use crate::header::{parse_normalization_string, EarlyProps, HeadersCache};\n \n fn make_test_description<R: Read>(\n     config: &Config,\n@@ -11,8 +11,10 @@ fn make_test_description<R: Read>(\n     src: R,\n     cfg: Option<&str>,\n ) -> test::TestDesc {\n+    let cache = HeadersCache::load(config);\n     let mut poisoned = false;\n-    let test = crate::header::make_test_description(config, name, path, src, cfg, &mut poisoned);\n+    let test =\n+        crate::header::make_test_description(config, &cache, name, path, src, cfg, &mut poisoned);\n     if poisoned {\n         panic!(\"poisoned!\");\n     }"}, {"sha": "0e49822c1b7c3a110f07869587bd84b950c6b9a4", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0f8a06b6c070b2c79228fcb6cd0dc210fcb7869a/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f8a06b6c070b2c79228fcb6cd0dc210fcb7869a/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=0f8a06b6c070b2c79228fcb6cd0dc210fcb7869a", "patch": "@@ -25,6 +25,7 @@ use tracing::*;\n use walkdir::WalkDir;\n \n use self::header::{make_test_description, EarlyProps};\n+use crate::header::HeadersCache;\n use std::sync::Arc;\n \n #[cfg(test)]\n@@ -556,9 +557,11 @@ pub fn make_tests(\n         panic!(\"modified_tests got error from dir: {}, error: {}\", config.src_base.display(), err)\n     });\n \n+    let cache = HeadersCache::load(&config);\n     let mut poisoned = false;\n     collect_tests_from_dir(\n         config.clone(),\n+        &cache,\n         &config.src_base,\n         &PathBuf::new(),\n         &inputs,\n@@ -636,6 +639,7 @@ fn modified_tests(config: &Config, dir: &Path) -> Result<Vec<PathBuf>, String> {\n \n fn collect_tests_from_dir(\n     config: Arc<Config>,\n+    cache: &HeadersCache,\n     dir: &Path,\n     relative_dir_path: &Path,\n     inputs: &Stamp,\n@@ -654,7 +658,7 @@ fn collect_tests_from_dir(\n             file: dir.to_path_buf(),\n             relative_dir: relative_dir_path.parent().unwrap().to_path_buf(),\n         };\n-        tests.extend(make_test(config, &paths, inputs, poisoned));\n+        tests.extend(make_test(config, cache, &paths, inputs, poisoned));\n         return Ok(());\n     }\n \n@@ -680,13 +684,14 @@ fn collect_tests_from_dir(\n             let paths =\n                 TestPaths { file: file_path, relative_dir: relative_dir_path.to_path_buf() };\n \n-            tests.extend(make_test(config.clone(), &paths, inputs, poisoned))\n+            tests.extend(make_test(config.clone(), cache, &paths, inputs, poisoned))\n         } else if file_path.is_dir() {\n             let relative_file_path = relative_dir_path.join(file.file_name());\n             if &file_name != \"auxiliary\" {\n                 debug!(\"found directory: {:?}\", file_path.display());\n                 collect_tests_from_dir(\n                     config.clone(),\n+                    cache,\n                     &file_path,\n                     &relative_file_path,\n                     inputs,\n@@ -718,6 +723,7 @@ pub fn is_test(file_name: &OsString) -> bool {\n \n fn make_test(\n     config: Arc<Config>,\n+    cache: &HeadersCache,\n     testpaths: &TestPaths,\n     inputs: &Stamp,\n     poisoned: &mut bool,\n@@ -745,8 +751,9 @@ fn make_test(\n                 std::fs::File::open(&test_path).expect(\"open test file to parse ignores\");\n             let cfg = revision.map(|v| &**v);\n             let test_name = crate::make_test_name(&config, testpaths, revision);\n-            let mut desc =\n-                make_test_description(&config, test_name, &test_path, src_file, cfg, poisoned);\n+            let mut desc = make_test_description(\n+                &config, cache, test_name, &test_path, src_file, cfg, poisoned,\n+            );\n             // Ignore tests that already run and are up to date with respect to inputs.\n             if !config.force_rerun {\n                 desc.ignore |= is_up_to_date("}]}