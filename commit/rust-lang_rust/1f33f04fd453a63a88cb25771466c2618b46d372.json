{"sha": "1f33f04fd453a63a88cb25771466c2618b46d372", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmMzNmMDRmZDQ1M2E2M2E4OGNiMjU3NzE0NjZjMjYxOGI0NmQzNzI=", "commit": {"author": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-06T20:44:47Z"}, "committer": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-27T21:23:32Z"}, "message": "Move pthread_create and related shims to a separate file.", "tree": {"sha": "38a117d31d9c64b35e8e0f96ebd6a9a931c78b58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38a117d31d9c64b35e8e0f96ebd6a9a931c78b58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f33f04fd453a63a88cb25771466c2618b46d372", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f33f04fd453a63a88cb25771466c2618b46d372", "html_url": "https://github.com/rust-lang/rust/commit/1f33f04fd453a63a88cb25771466c2618b46d372", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f33f04fd453a63a88cb25771466c2618b46d372/comments", "author": null, "committer": null, "parents": [{"sha": "aef4c955995468d7efec81b951a1414bd3278a23", "url": "https://api.github.com/repos/rust-lang/rust/commits/aef4c955995468d7efec81b951a1414bd3278a23", "html_url": "https://github.com/rust-lang/rust/commit/aef4c955995468d7efec81b951a1414bd3278a23"}], "stats": {"total": 152, "additions": 93, "deletions": 59}, "files": [{"sha": "d8b3397c8e9ba46993776f7e2a8497de1c46798a", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f33f04fd453a63a88cb25771466c2618b46d372/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f33f04fd453a63a88cb25771466c2618b46d372/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=1f33f04fd453a63a88cb25771466c2618b46d372", "patch": "@@ -42,6 +42,7 @@ pub use crate::shims::intrinsics::EvalContextExt as IntrinsicsEvalContextExt;\n pub use crate::shims::os_str::EvalContextExt as OsStrEvalContextExt;\n pub use crate::shims::panic::{CatchUnwindData, EvalContextExt as PanicEvalContextExt};\n pub use crate::shims::sync::{EvalContextExt as SyncEvalContextExt};\n+pub use crate::shims::threads::EvalContextExt as ThreadShimsEvalContextExt;\n pub use crate::shims::time::EvalContextExt as TimeEvalContextExt;\n pub use crate::shims::tls::{EvalContextExt as TlsEvalContextExt, TlsData};\n pub use crate::shims::EvalContextExt as ShimsEvalContextExt;"}, {"sha": "7d2cb16afee4241fff63a2b53b586e117d21c4f2", "filename": "src/shims/foreign_items/posix.rs", "status": "modified", "additions": 7, "deletions": 55, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/1f33f04fd453a63a88cb25771466c2618b46d372/src%2Fshims%2Fforeign_items%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f33f04fd453a63a88cb25771466c2618b46d372/src%2Fshims%2Fforeign_items%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix.rs?ref=1f33f04fd453a63a88cb25771466c2618b46d372", "patch": "@@ -6,7 +6,6 @@ use std::convert::TryFrom;\n use log::trace;\n \n use crate::*;\n-use rustc_index::vec::Idx;\n use rustc_middle::mir;\n use rustc_target::abi::{Align, LayoutOf, Size};\n \n@@ -316,66 +315,19 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Threading\n             \"pthread_create\" => {\n-                println!(\"WARNING: The thread support is experimental. \\\n-                          For example, Miri does not detect data races yet.\");\n                 assert_eq!(args.len(), 4);\n-                let func = args[2];\n-                let fn_ptr = this.read_scalar(func)?.not_undef()?;\n-                let fn_val = this.memory.get_fn(fn_ptr)?;\n-                let instance = match fn_val {\n-                    rustc_mir::interpret::FnVal::Instance(instance) => instance,\n-                    _ => unreachable!(),\n-                };\n-                let thread_info_place = this.deref_operand(args[0])?;\n-                let thread_info_type = args[0].layout.ty\n-                    .builtin_deref(true)\n-                    .ok_or_else(|| err_ub_format!(\n-                        \"wrong signature used for `pthread_create`: first argument must be a raw pointer.\"\n-                    ))?\n-                    .ty;\n-                let thread_info_layout = this.layout_of(thread_info_type)?;\n-                let func_arg = match *args[3] {\n-                    rustc_mir::interpret::Operand::Immediate(immediate) => immediate,\n-                    _ => unreachable!(),\n-                };\n-                let func_args = [func_arg];\n-                let ret_place =\n-                    this.allocate(this.layout_of(this.tcx.types.usize)?, MiriMemoryKind::Machine.into());\n-                let new_thread_id = this.create_thread()?;\n-                let old_thread_id = this.set_active_thread(new_thread_id)?;\n-                this.call_function(\n-                    instance,\n-                    &func_args[..],\n-                    Some(ret_place.into()),\n-                    StackPopCleanup::None { cleanup: true },\n-                )?;\n-                this.set_active_thread(old_thread_id)?;\n-                this.write_scalar(\n-                    Scalar::from_uint(new_thread_id.index() as u128, thread_info_layout.size),\n-                    thread_info_place.into(),\n-                )?;\n-\n-                // Return success (`0`).\n-                this.write_null(dest)?;\n+                let result = this.pthread_create(args[0], args[1], args[2], args[3])?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_join\" => {\n                 assert_eq!(args.len(), 2);\n-                assert!(\n-                    this.is_null(this.read_scalar(args[1])?.not_undef()?)?,\n-                    \"Miri supports pthread_join only with retval==NULL\"\n-                );\n-                let thread = this.read_scalar(args[0])?.not_undef()?.to_machine_usize(this)?;\n-                this.join_thread(thread.into())?;\n-\n-                // Return success (`0`).\n-                this.write_null(dest)?;\n+                let result = this.pthread_join(args[0], args[1])?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_detach\" => {\n-                let thread = this.read_scalar(args[0])?.not_undef()?.to_machine_usize(this)?;\n-                this.detach_thread(thread.into())?;\n-\n-                // Return success (`0`).\n-                this.write_null(dest)?;\n+                assert_eq!(args.len(), 1);\n+                let result = this.pthread_detach(args[0])?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n \n             \"pthread_attr_getguardsize\" => {"}, {"sha": "118058dd32e743f695dd6f1ee9295cf51fb72b12", "filename": "src/shims/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f33f04fd453a63a88cb25771466c2618b46d372/src%2Fshims%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f33f04fd453a63a88cb25771466c2618b46d372/src%2Fshims%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fmod.rs?ref=1f33f04fd453a63a88cb25771466c2618b46d372", "patch": "@@ -6,6 +6,7 @@ pub mod intrinsics;\n pub mod os_str;\n pub mod panic;\n pub mod sync;\n+pub mod threads;\n pub mod time;\n pub mod tls;\n "}, {"sha": "6e1087dd81d860e92dabd21f051d5a1d92881311", "filename": "src/shims/threads.rs", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/1f33f04fd453a63a88cb25771466c2618b46d372/src%2Fshims%2Fthreads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f33f04fd453a63a88cb25771466c2618b46d372/src%2Fshims%2Fthreads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fthreads.rs?ref=1f33f04fd453a63a88cb25771466c2618b46d372", "patch": "@@ -0,0 +1,84 @@\n+use crate::*;\n+use rustc_index::vec::Idx;\n+use rustc_target::abi::LayoutOf;\n+\n+impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+    fn pthread_create(\n+        &mut self,\n+        thread: OpTy<'tcx, Tag>,\n+        _attr: OpTy<'tcx, Tag>,\n+        start_routine: OpTy<'tcx, Tag>,\n+        arg: OpTy<'tcx, Tag>,\n+    ) -> InterpResult<'tcx, i32> {\n+        println!(\n+            \"WARNING: The thread support is experimental. \\\n+                  For example, Miri does not detect data races yet.\"\n+        );\n+\n+        let this = self.eval_context_mut();\n+\n+        let new_thread_id = this.create_thread()?;\n+        let old_thread_id = this.set_active_thread(new_thread_id)?;\n+\n+        let thread_info_place = this.deref_operand(thread)?;\n+        let thread_info_type = thread.layout.ty\n+            .builtin_deref(true)\n+            .ok_or_else(|| err_ub_format!(\n+                \"wrong signature used for `pthread_create`: first argument must be a raw pointer.\"\n+            ))?\n+            .ty;\n+        let thread_info_layout = this.layout_of(thread_info_type)?;\n+        this.write_scalar(\n+            Scalar::from_uint(new_thread_id.index() as u128, thread_info_layout.size),\n+            thread_info_place.into(),\n+        )?;\n+\n+        let fn_ptr = this.read_scalar(start_routine)?.not_undef()?;\n+        let instance = this.memory.get_fn(fn_ptr)?.as_instance()?;\n+\n+        let func_arg = match *arg {\n+            rustc_mir::interpret::Operand::Immediate(immediate) => immediate,\n+            _ => unreachable!(),\n+        };\n+        let func_args = [func_arg];\n+\n+        let ret_place =\n+            this.allocate(this.layout_of(this.tcx.types.usize)?, MiriMemoryKind::Machine.into());\n+\n+        this.call_function(\n+            instance,\n+            &func_args[..],\n+            Some(ret_place.into()),\n+            StackPopCleanup::None { cleanup: true },\n+        )?;\n+\n+        this.set_active_thread(old_thread_id)?;\n+\n+        Ok(0)\n+    }\n+    fn pthread_join(\n+        &mut self,\n+        thread: OpTy<'tcx, Tag>,\n+        retval: OpTy<'tcx, Tag>,\n+    ) -> InterpResult<'tcx, i32> {\n+        let this = self.eval_context_mut();\n+\n+        if !this.is_null(this.read_scalar(retval)?.not_undef()?)? {\n+            throw_unsup_format!(\"Miri supports pthread_join only with retval==NULL\");\n+        }\n+\n+        let thread_id = this.read_scalar(thread)?.not_undef()?.to_machine_usize(this)?;\n+        this.join_thread(thread_id.into())?;\n+\n+        Ok(0)\n+    }\n+    fn pthread_detach(&mut self, thread: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n+        let this = self.eval_context_mut();\n+\n+        let thread_id = this.read_scalar(thread)?.not_undef()?.to_machine_usize(this)?;\n+        this.detach_thread(thread_id.into())?;\n+\n+        Ok(0)\n+    }\n+}"}, {"sha": "9d982359bfbb1cced3ae40ec80c19711b7c485d7", "filename": "src/threads.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f33f04fd453a63a88cb25771466c2618b46d372/src%2Fthreads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f33f04fd453a63a88cb25771466c2618b46d372/src%2Fthreads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fthreads.rs?ref=1f33f04fd453a63a88cb25771466c2618b46d372", "patch": "@@ -91,9 +91,6 @@ pub struct ThreadSet<'mir, 'tcx> {\n     ///\n     /// Note that this vector also contains terminated threads.\n     threads: IndexVec<ThreadId, Thread<'mir, 'tcx>>,\n-\n-    /// List of threads that just terminated. TODO: Cleanup.\n-    terminated_threads: Vec<ThreadId>,\n }\n \n impl<'mir, 'tcx> Default for ThreadSet<'mir, 'tcx> {\n@@ -103,7 +100,6 @@ impl<'mir, 'tcx> Default for ThreadSet<'mir, 'tcx> {\n         Self {\n             active_thread: ThreadId::new(0),\n             threads: threads,\n-            terminated_threads: Default::default(),\n         }\n     }\n }"}]}