{"sha": "c04559fe9eb14e59cfe35c2676cd5d93a5eab326", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwNDU1OWZlOWViMTRlNTljZmUzNWMyNjc2Y2Q1ZDkzYTVlYWIzMjY=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-11-01T18:17:58Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-11-03T04:09:35Z"}, "message": "Added WF checking for trait alias definitions.", "tree": {"sha": "1f9b88d88f54fe90d5d1e5e438c7fc6ca210d82b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f9b88d88f54fe90d5d1e5e438c7fc6ca210d82b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c04559fe9eb14e59cfe35c2676cd5d93a5eab326", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c04559fe9eb14e59cfe35c2676cd5d93a5eab326", "html_url": "https://github.com/rust-lang/rust/commit/c04559fe9eb14e59cfe35c2676cd5d93a5eab326", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c04559fe9eb14e59cfe35c2676cd5d93a5eab326/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a62d0785a6b0770f2241a3e91853d842609d4d7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a62d0785a6b0770f2241a3e91853d842609d4d7c", "html_url": "https://github.com/rust-lang/rust/commit/a62d0785a6b0770f2241a3e91853d842609d4d7c"}], "stats": {"total": 135, "additions": 64, "deletions": 71}, "files": [{"sha": "527ba276de2732556ea7c4211facc15e06a6db0e", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c04559fe9eb14e59cfe35c2676cd5d93a5eab326/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c04559fe9eb14e59cfe35c2676cd5d93a5eab326/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=c04559fe9eb14e59cfe35c2676cd5d93a5eab326", "patch": "@@ -153,6 +153,9 @@ pub fn check_item_well_formed<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: Def\n         hir::ItemKind::Trait(..) => {\n             check_trait(tcx, item);\n         }\n+        hir::ItemKind::TraitAlias(..) => {\n+            check_trait(tcx, item);\n+        }\n         _ => {}\n     }\n }"}, {"sha": "447f4b1b9de98c5a1cea961dceafcdbd05ded060", "filename": "src/test/ui/traits/trait-alias-fail1.stderr", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/a62d0785a6b0770f2241a3e91853d842609d4d7c/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-fail1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62d0785a6b0770f2241a3e91853d842609d4d7c/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-fail1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-fail1.stderr?ref=a62d0785a6b0770f2241a3e91853d842609d4d7c", "patch": "@@ -1,46 +0,0 @@\n-error: type parameters on the left side of a trait alias cannot be bounded\n-  --> $DIR/trait-alias-fail1.rs:14:20\n-   |\n-LL | trait BoundedAlias<T: Clone = ()> = Default;\n-   |                    ^\n-\n-error: type parameters on the left side of a trait alias cannot have defaults\n-  --> $DIR/trait-alias-fail1.rs:14:20\n-   |\n-LL | trait BoundedAlias<T: Clone = ()> = Default;\n-   |                    ^\n-\n-error[E0404]: expected trait, found trait alias `CloneDefault`\n-  --> $DIR/trait-alias-fail1.rs:19:6\n-   |\n-LL | impl CloneDefault for () {}\n-   |      ^^^^^^^^^^^^ not a trait\n-\n-error[E0658]: trait aliases are experimental (see issue #41517)\n-  --> $DIR/trait-alias-fail1.rs:13:1\n-   |\n-LL | trait CloneDefault<T> = Default where T: Clone;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(trait_alias)] to the crate attributes to enable\n-\n-error[E0658]: trait aliases are experimental (see issue #41517)\n-  --> $DIR/trait-alias-fail1.rs:14:1\n-   |\n-LL | trait BoundedAlias<T: Clone = ()> = Default;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(trait_alias)] to the crate attributes to enable\n-\n-error[E0658]: trait aliases are experimental (see issue #41517)\n-  --> $DIR/trait-alias-fail1.rs:17:1\n-   |\n-LL | trait B<T> = A<T>; // FIXME: parameter T should need a bound here, or semantics should be changed\n-   | ^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(trait_alias)] to the crate attributes to enable\n-\n-error: aborting due to 6 previous errors\n-\n-Some errors occurred: E0404, E0658.\n-For more information about an error, try `rustc --explain E0404`."}, {"sha": "6ebd8b5e73174f730519b7a61a5cb005c47cb519", "filename": "src/test/ui/traits/trait-alias-fail2.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a62d0785a6b0770f2241a3e91853d842609d4d7c/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-fail2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62d0785a6b0770f2241a3e91853d842609d4d7c/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-fail2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-fail2.stderr?ref=a62d0785a6b0770f2241a3e91853d842609d4d7c", "patch": "@@ -1,19 +0,0 @@\n-error[E0658]: trait aliases are experimental (see issue #41517)\n-  --> $DIR/trait-alias-fail2.rs:13:1\n-   |\n-LL | trait EqAlias = Eq;\n-   | ^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(trait_alias)] to the crate attributes to enable\n-\n-error[E0658]: trait aliases are experimental (see issue #41517)\n-  --> $DIR/trait-alias-fail2.rs:14:1\n-   |\n-LL | trait IteratorAlias = Iterator;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(trait_alias)] to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "bf3483000e3bc5cd6385c09fea8e565566a9528c", "filename": "src/test/ui/traits/trait-alias-impl.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c04559fe9eb14e59cfe35c2676cd5d93a5eab326/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c04559fe9eb14e59cfe35c2676cd5d93a5eab326/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-impl.rs?ref=c04559fe9eb14e59cfe35c2676cd5d93a5eab326", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(trait_alias)]\n+\n+trait DefaultAlias = Default;\n+\n+impl DefaultAlias for () {}\n+\n+fn main() {}"}, {"sha": "9ad625176b148148d9f665acafd50df4a3cdcce0", "filename": "src/test/ui/traits/trait-alias-impl.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c04559fe9eb14e59cfe35c2676cd5d93a5eab326/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c04559fe9eb14e59cfe35c2676cd5d93a5eab326/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-impl.stderr?ref=c04559fe9eb14e59cfe35c2676cd5d93a5eab326", "patch": "@@ -0,0 +1,9 @@\n+error[E0404]: expected trait, found trait alias `DefaultAlias`\n+  --> $DIR/trait-alias-impl.rs:15:6\n+   |\n+LL | impl DefaultAlias for () {}\n+   |      ^^^^^^^^^^^^ not a trait\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0404`."}, {"sha": "3adcd8436d8a1c2c9075aaf5b7bbfe67552660da", "filename": "src/test/ui/traits/trait-alias-objects.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c04559fe9eb14e59cfe35c2676cd5d93a5eab326/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c04559fe9eb14e59cfe35c2676cd5d93a5eab326/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-objects.rs?ref=c04559fe9eb14e59cfe35c2676cd5d93a5eab326", "previous_filename": "src/test/ui/traits/trait-alias-fail2.rs"}, {"sha": "8f9681e898fe8a11e6e7cad3daac44f023a4c5b1", "filename": "src/test/ui/traits/trait-alias-objects.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c04559fe9eb14e59cfe35c2676cd5d93a5eab326/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-objects.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c04559fe9eb14e59cfe35c2676cd5d93a5eab326/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-objects.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-objects.stderr?ref=c04559fe9eb14e59cfe35c2676cd5d93a5eab326", "patch": "@@ -0,0 +1,18 @@\n+error[E0038]: the trait `EqAlias` cannot be made into an object\n+  --> $DIR/trait-alias-objects.rs:17:13\n+   |\n+LL |     let _: &dyn EqAlias = &123;\n+   |             ^^^^^^^^^^^ the trait `EqAlias` cannot be made into an object\n+   |\n+   = note: the trait cannot use `Self` as a type parameter in the supertraits or where-clauses\n+\n+error[E0191]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) must be specified\n+  --> $DIR/trait-alias-objects.rs:18:13\n+   |\n+LL |     let _: &dyn IteratorAlias = &vec![123].into_iter();\n+   |             ^^^^^^^^^^^^^^^^^ missing associated type `Item` value\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors occurred: E0038, E0191.\n+For more information about an error, try `rustc --explain E0038`."}, {"sha": "8c8ce1221ba3559fbc3bad9b8895ffdf414c613f", "filename": "src/test/ui/traits/trait-alias-wf.rs", "status": "renamed", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c04559fe9eb14e59cfe35c2676cd5d93a5eab326/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-wf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c04559fe9eb14e59cfe35c2676cd5d93a5eab326/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-wf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-wf.rs?ref=c04559fe9eb14e59cfe35c2676cd5d93a5eab326", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2017-2018 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,13 +10,8 @@\n \n #![feature(trait_alias)]\n \n-trait CloneDefault<T> = Default where T: Clone;\n-trait BoundedAlias<T: Clone = ()> = Default;\n-\n trait Foo {}\n trait A<T: Foo> {}\n trait B<T> = A<T>; // T cannot be unbounded\n \n-impl CloneDefault for () {}\n-\n fn main() {}", "previous_filename": "src/test/ui/traits/trait-alias-fail1.rs"}, {"sha": "e8c81c87796f3cbbfc6202e53202a272c754dfec", "filename": "src/test/ui/traits/trait-alias-wf.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c04559fe9eb14e59cfe35c2676cd5d93a5eab326/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c04559fe9eb14e59cfe35c2676cd5d93a5eab326/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-wf.stderr?ref=c04559fe9eb14e59cfe35c2676cd5d93a5eab326", "patch": "@@ -0,0 +1,16 @@\n+error[E0277]: the trait bound `T: Foo` is not satisfied\n+  --> $DIR/trait-alias-wf.rs:15:1\n+   |\n+LL | trait B<T> = A<T>; // T cannot be unbounded\n+   | ^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `T`\n+   |\n+   = help: consider adding a `where T: Foo` bound\n+note: required by `A`\n+  --> $DIR/trait-alias-wf.rs:14:1\n+   |\n+LL | trait A<T: Foo> {}\n+   | ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}