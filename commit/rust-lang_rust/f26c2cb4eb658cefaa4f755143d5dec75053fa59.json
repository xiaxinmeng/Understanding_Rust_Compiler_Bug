{"sha": "f26c2cb4eb658cefaa4f755143d5dec75053fa59", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyNmMyY2I0ZWI2NThjZWZhYTRmNzU1MTQzZDVkZWM3NTA1M2ZhNTk=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-04-19T07:55:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-19T07:55:44Z"}, "message": "Merge pull request #699 from RalfJung/stacked-borrows-2\n\ntest another version of 'creating a shared ref must not leak the Unique'", "tree": {"sha": "430ca3776cf222c9e4ab4bed982cf23a53fb1ad3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/430ca3776cf222c9e4ab4bed982cf23a53fb1ad3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f26c2cb4eb658cefaa4f755143d5dec75053fa59", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcuX8ACRBK7hj4Ov3rIwAAdHIIAH0r2ImAYt/od52QMOqwb9h8\ngrx2A/576mcY5449nrgzuqcCi3CteYNOe1WHEPLuR6woF/Nj3elfjC7Wiy3Lx2M5\n4eUo2QwUuOBcq78G1gn5D7rGWsp+DlXZ5t0hTRKZwM+IjK/pJcHKcIrMTl+mSaSO\newUEZt13S89if/6qe5lq/VtWl8jpV4zxuqpGoPBcdjzqXfQy9/KYu5eSPscR/Psj\nQXX+VvrDDlIBX9e/OpPLGDEoZhVwOwQHEJk5WYSgCbOFh8tE8d8566dDf1qDplsB\nWXK16Lt7BfDB92HsvD7u3w2AoEIdxgUcTKptASPyWn+4mBv1EeO4v+vZhRMsEpU=\n=WEeG\n-----END PGP SIGNATURE-----\n", "payload": "tree 430ca3776cf222c9e4ab4bed982cf23a53fb1ad3\nparent 5adfa1d56a9a458b98f81838a052872f5ca50a08\nparent 287ffb8bba8d137c9dc04ade49c0bc65e0ab07f7\nauthor Oliver Scherer <github35764891676564198441@oli-obk.de> 1555660544 +0200\ncommitter GitHub <noreply@github.com> 1555660544 +0200\n\nMerge pull request #699 from RalfJung/stacked-borrows-2\n\ntest another version of 'creating a shared ref must not leak the Unique'"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f26c2cb4eb658cefaa4f755143d5dec75053fa59", "html_url": "https://github.com/rust-lang/rust/commit/f26c2cb4eb658cefaa4f755143d5dec75053fa59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f26c2cb4eb658cefaa4f755143d5dec75053fa59/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5adfa1d56a9a458b98f81838a052872f5ca50a08", "url": "https://api.github.com/repos/rust-lang/rust/commits/5adfa1d56a9a458b98f81838a052872f5ca50a08", "html_url": "https://github.com/rust-lang/rust/commit/5adfa1d56a9a458b98f81838a052872f5ca50a08"}, {"sha": "287ffb8bba8d137c9dc04ade49c0bc65e0ab07f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/287ffb8bba8d137c9dc04ade49c0bc65e0ab07f7", "html_url": "https://github.com/rust-lang/rust/commit/287ffb8bba8d137c9dc04ade49c0bc65e0ab07f7"}], "stats": {"total": 25, "additions": 25, "deletions": 0}, "files": [{"sha": "bac35796ed135bb9098b62f70e00a6719545972b", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f26c2cb4eb658cefaa4f755143d5dec75053fa59/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f26c2cb4eb658cefaa4f755143d5dec75053fa59/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=f26c2cb4eb658cefaa4f755143d5dec75053fa59", "patch": "@@ -625,6 +625,11 @@ trait EvalContextPrivExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n         };\n \n         // Reborrow.\n+        // TODO: With `two_phase == true`, this performs a weak reborrow for a `Unique`. That\n+        // can lead to some possibly surprising effects, if the parent permission is\n+        // `SharedReadWrite` then we now have a `Unique` in the middle of them, which \"splits\"\n+        // them in terms of what remains valid when the `Unique` gets used.  Is that really\n+        // what we want?\n         this.reborrow(place, size, kind, new_tag, /*force_weak:*/ two_phase, protect)?;\n         let new_place = place.replace_tag(new_tag);\n         // Handle two-phase borrows."}, {"sha": "25d0878c045531b5561154a98b418d6acbde3a97", "filename": "tests/compile-fail/stacked_borrows/illegal_read7.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f26c2cb4eb658cefaa4f755143d5dec75053fa59/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f26c2cb4eb658cefaa4f755143d5dec75053fa59/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_read7.rs?ref=f26c2cb4eb658cefaa4f755143d5dec75053fa59", "patch": "@@ -0,0 +1,20 @@\n+// Creating a shared reference does not leak the data to raw pointers,\n+// not even when interior mutability is involved.\n+\n+use std::cell::Cell;\n+use std::ptr;\n+\n+fn main() { unsafe {\n+    let x = &mut Cell::new(0);\n+    let raw = x as *mut Cell<i32>;\n+    let x = &mut *raw;\n+    let _shr = &*x;\n+    // The state here is interesting because the top of the stack is [Unique, SharedReadWrite],\n+    // just like if we had done `x as *mut _`.\n+    // If we said that reading from a lower item is fine if the top item is `SharedReadWrite`\n+    // (one way to maybe preserve a stack discipline), then we could now read from `raw`\n+    // without invalidating `x`.  That would be bad!  It would mean that creating `shr`\n+    // leaked `x` to `raw`.\n+    let _val = ptr::read(raw);\n+    let _val = *x.get_mut(); //~ ERROR borrow stack\n+} }"}]}