{"sha": "7de3dea2b76786077ad51b31d167867e5ecdfdbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkZTNkZWEyYjc2Nzg2MDc3YWQ1MWIzMWQxNjc4NjdlNWVjZGZkYmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-18T11:57:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-18T11:57:46Z"}, "message": "Auto merge of #53175 - matthewjasper:more-return-stuff, r=nikomatsakis\n\n[NLL] Returns are interesting for free regions\n\nBased on #53088 - creating now to get feedback.\n\nCloses #51175\n\n* Make assigning to the return type interesting.\n* Use \"returning this value\" instead of \"return\" in error messages.\n* Prefer one of the explanations that we have a name for to a generic interesting cause in some cases.\n* Treat causes that involve the destination of a call like assignments.", "tree": {"sha": "b6195737fbae2677c046a09e8bcaff827856f078", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6195737fbae2677c046a09e8bcaff827856f078"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7de3dea2b76786077ad51b31d167867e5ecdfdbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7de3dea2b76786077ad51b31d167867e5ecdfdbc", "html_url": "https://github.com/rust-lang/rust/commit/7de3dea2b76786077ad51b31d167867e5ecdfdbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7de3dea2b76786077ad51b31d167867e5ecdfdbc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5b6b95aef94169b5dbe4dbb1357d4bab1fc9800", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5b6b95aef94169b5dbe4dbb1357d4bab1fc9800", "html_url": "https://github.com/rust-lang/rust/commit/d5b6b95aef94169b5dbe4dbb1357d4bab1fc9800"}, {"sha": "a19db49c863f28103a3ae64423b88574ccf700ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/a19db49c863f28103a3ae64423b88574ccf700ff", "html_url": "https://github.com/rust-lang/rust/commit/a19db49c863f28103a3ae64423b88574ccf700ff"}], "stats": {"total": 411, "additions": 235, "deletions": 176}, "files": [{"sha": "ca208a434314f5161d61cee8bf9c5ebda0ca779f", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 48, "deletions": 11, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -14,7 +14,7 @@ use rustc::hir::def_id::DefId;\n use rustc::infer::error_reporting::nice_region_error::NiceRegionError;\n use rustc::infer::InferCtxt;\n use rustc::mir::{self, Location, Mir, Place, Rvalue, StatementKind, TerminatorKind};\n-use rustc::ty::RegionVid;\n+use rustc::ty::{TyCtxt, RegionVid};\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_errors::Diagnostic;\n use std::collections::VecDeque;\n@@ -42,7 +42,7 @@ impl fmt::Display for ConstraintCategory {\n         // Must end with a space. Allows for empty names to be provided.\n         match self {\n             ConstraintCategory::Assignment => write!(f, \"assignment \"),\n-            ConstraintCategory::Return => write!(f, \"return \"),\n+            ConstraintCategory::Return => write!(f, \"returning this value \"),\n             ConstraintCategory::Cast => write!(f, \"cast \"),\n             ConstraintCategory::CallArgument => write!(f, \"argument \"),\n             _ => write!(f, \"\"),\n@@ -67,6 +67,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     fn best_blame_constraint(\n         &self,\n         mir: &Mir<'tcx>,\n+        tcx: TyCtxt<'_, '_, 'tcx>,\n         from_region: RegionVid,\n         target_test: impl Fn(RegionVid) -> bool,\n     ) -> (ConstraintCategory, Span, RegionVid) {\n@@ -92,7 +93,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // Classify each of the constraints along the path.\n         let mut categorized_path: Vec<(ConstraintCategory, Span)> = path\n             .iter()\n-            .map(|&index| self.classify_constraint(index, mir))\n+            .map(|&index| self.classify_constraint(index, mir, tcx))\n             .collect();\n         debug!(\n             \"best_blame_constraint: categorized_path={:#?}\",\n@@ -123,13 +124,15 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             let constraint = &self.constraints[path[i]];\n \n             let constraint_sup_scc = self.constraint_sccs.scc(constraint.sup);\n-            if constraint_sup_scc == target_scc {\n-                return false;\n-            }\n \n             match categorized_path[i].0 {\n                 ConstraintCategory::Boring => false,\n-                _ => true,\n+                ConstraintCategory::Other => {\n+                    // other isn't interesting when the two lifetimes\n+                    // are unified.\n+                    constraint_sup_scc != self.constraint_sccs.scc(constraint.sub)\n+                }\n+                _ => constraint_sup_scc != target_scc,\n             }\n         });\n         if let Some(i) = best_choice {\n@@ -231,6 +234,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         &self,\n         index: ConstraintIndex,\n         mir: &Mir<'tcx>,\n+        tcx: TyCtxt<'_, '_, 'tcx>,\n     ) -> (ConstraintCategory, Span) {\n         let constraint = self.constraints[index];\n         debug!(\"classify_constraint: constraint={:?}\", constraint);\n@@ -254,7 +258,34 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 debug!(\"classify_constraint: terminator.kind={:?}\", terminator.kind);\n                 match terminator.kind {\n                     TerminatorKind::DropAndReplace { .. } => ConstraintCategory::Assignment,\n-                    TerminatorKind::Call { .. } => ConstraintCategory::CallArgument,\n+                    // Classify calls differently depending on whether or not\n+                    // the sub region appears in the destination type (so the\n+                    // sup region is in the return type). If the return type\n+                    // contains the sub-region, then this is either an\n+                    // assignment or a return, depending on whether we are\n+                    // writing to the RETURN_PLACE or not.\n+                    //\n+                    // The idea here is that the region is being propagated\n+                    // from an input into the output place, so it's a kind of\n+                    // assignment. Otherwise, if the sub-region only appears in\n+                    // the argument types, then use the CallArgument\n+                    // classification.\n+                    TerminatorKind::Call { destination: Some((ref place, _)), .. } => {\n+                        if tcx.any_free_region_meets(\n+                            &place.ty(mir, tcx).to_ty(tcx),\n+                            |region| self.to_region_vid(region) == constraint.sub,\n+                        ) {\n+                            match place {\n+                                Place::Local(mir::RETURN_PLACE) => ConstraintCategory::Return,\n+                                _ => ConstraintCategory::Assignment,\n+                            }\n+                        } else {\n+                            ConstraintCategory::CallArgument\n+                        }\n+                    }\n+                    TerminatorKind::Call { destination: None, .. } => {\n+                        ConstraintCategory::CallArgument\n+                    }\n                     _ => ConstraintCategory::Other,\n                 }\n             } else {\n@@ -304,7 +335,12 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     ) {\n         debug!(\"report_error(fr={:?}, outlived_fr={:?})\", fr, outlived_fr);\n \n-        let (category, span, _) = self.best_blame_constraint(mir, fr, |r| r == outlived_fr);\n+        let (category, span, _) = self.best_blame_constraint(\n+            mir,\n+            infcx.tcx,\n+            fr,\n+            |r| r == outlived_fr\n+        );\n \n         // Check if we can use one of the \"nice region errors\".\n         if let (Some(f), Some(o)) = (self.to_error_region(fr), self.to_error_region(outlived_fr)) {\n@@ -417,7 +453,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 diag.span_label(span, format!(\n                     \"{} was supposed to return data with lifetime `{}` but it is returning \\\n                     data with lifetime `{}`\",\n-                    mir_def_name, fr_name, outlived_fr_name,\n+                    mir_def_name, outlived_fr_name, fr_name\n                 ));\n             },\n             _ => {\n@@ -446,10 +482,11 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     crate fn find_outlives_blame_span(\n         &self,\n         mir: &Mir<'tcx>,\n+        tcx: TyCtxt<'_, '_, 'tcx>,\n         fr1: RegionVid,\n         fr2: RegionVid,\n     ) -> Span {\n-        let (_, span, _) = self.best_blame_constraint(mir, fr1, |r| r == fr2);\n+        let (_, span, _) = self.best_blame_constraint(mir, tcx, fr1, |r| r == fr2);\n         span\n     }\n }"}, {"sha": "fbecab2dd1f5e0b24a1f2b19fa5f99fad9e7dc67", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -587,7 +587,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             infcx.extract_type_name(&return_ty)\n         });\n \n-                let mir_node_id = tcx.hir.as_local_node_id(mir_def_id).expect(\"non-local mir\");\n+        let mir_node_id = tcx.hir.as_local_node_id(mir_def_id).expect(\"non-local mir\");\n \n         let (return_span, mir_description) = if let hir::ExprKind::Closure(_, _, _, span, gen_move)\n             = tcx.hir.expect_expr(mir_node_id).node"}, {"sha": "ebcc044093a6589ae5344a61fd083dcdd4994977", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -1040,7 +1040,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 longer_fr, shorter_fr,\n             );\n \n-            let blame_span = self.find_outlives_blame_span(mir, longer_fr, shorter_fr);\n+            let blame_span = self.find_outlives_blame_span(mir, infcx.tcx, longer_fr, shorter_fr);\n \n             if let Some(propagated_outlives_requirements) = propagated_outlives_requirements {\n                 // Shrink `fr` until we find a non-local region (if we do).\n@@ -1128,7 +1128,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         };\n \n         // Find the code to blame for the fact that `longer_fr` outlives `error_fr`.\n-        let span = self.find_outlives_blame_span(mir, longer_fr, error_region);\n+        let span = self.find_outlives_blame_span(mir, infcx.tcx, longer_fr, error_region);\n \n         // Obviously, this error message is far from satisfactory.\n         // At present, though, it only appears in unit tests --"}, {"sha": "9f790612124e67445ef78ae034b49b7edbf4a18d", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -877,8 +877,9 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 // they are not caused by the user, but rather artifacts\n                 // of lowering. Assignments to other sorts of places *are* interesting\n                 // though.\n-                let is_temp = if let Place::Local(l) = place {\n-                    !mir.local_decls[*l].is_user_variable.is_some()\n+                let is_temp = if let Place::Local(l) = *place {\n+                    l != RETURN_PLACE &&\n+                    !mir.local_decls[l].is_user_variable.is_some()\n                 } else {\n                     false\n                 };\n@@ -1119,7 +1120,19 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         match *destination {\n             Some((ref dest, _target_block)) => {\n                 let dest_ty = dest.ty(mir, tcx).to_ty(tcx);\n-                let locations = term_location.interesting();\n+                let is_temp = if let Place::Local(l) = *dest {\n+                    l != RETURN_PLACE &&\n+                    !mir.local_decls[l].is_user_variable.is_some()\n+                } else {\n+                    false\n+                };\n+\n+                let locations = if is_temp {\n+                    term_location.boring()\n+                } else {\n+                    term_location.interesting()\n+                };\n+\n                 if let Err(terr) = self.sub_types(sig.output(), dest_ty, locations) {\n                     span_mirbug!(\n                         self,"}, {"sha": "ac758a8926f28e3612ee820dcbc369f587b581b1", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.krisskross.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.krisskross.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.krisskross.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.krisskross.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -18,7 +18,7 @@ LL | fn transmute<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n    |              |\n    |              lifetime `'a` defined here\n LL |    let a = bar(foo, y);\n-   |            ^^^^^^^^^^^ argument requires that `'b` must outlive `'a`\n+   |            ^^^^^^^^^^^ assignment requires that `'b` must outlive `'a`\n \n error: unsatisfied lifetime constraints\n   --> $DIR/project-fn-ret-contravariant.rs:54:12\n@@ -29,7 +29,7 @@ LL | fn transmute<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n    |              lifetime `'a` defined here\n LL |    let a = bar(foo, y);\n LL |    let b = bar(foo, x);\n-   |            ^^^^^^^^^^^ argument requires that `'a` must outlive `'b`\n+   |            ^^^^^^^^^^^ assignment requires that `'a` must outlive `'b`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "75c35d077c4c430a045f3f26c7a813bb83c5cd3d", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.transmute.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -4,13 +4,13 @@ warning: not reporting region error due to nll\n LL |    bar(foo, x) //[transmute]~ ERROR E0495\n    |        ^^^\n \n-error: borrowed data escapes outside of function\n+error: unsatisfied lifetime constraints\n   --> $DIR/project-fn-ret-contravariant.rs:48:4\n    |\n LL | fn baz<'a,'b>(x: &'a u32) -> &'static u32 {\n-   |               - `x` is a reference that is only valid in the function body\n+   |        -- lifetime `'a` defined here\n LL |    bar(foo, x) //[transmute]~ ERROR E0495\n-   |    ^^^^^^^^^^^ `x` escapes the function body here\n+   |    ^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "4b2ba24eb0eb8f289f13cec74567b002bd628af5", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.krisskross.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -18,7 +18,7 @@ LL | fn transmute<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n    |              |\n    |              lifetime `'a` defined here\n LL |    let a = bar(foo, y); //[krisskross]~ ERROR E0623\n-   |            ^^^^^^^^^^^ argument requires that `'b` must outlive `'a`\n+   |            ^^^^^^^^^^^ assignment requires that `'b` must outlive `'a`\n \n error: unsatisfied lifetime constraints\n   --> $DIR/project-fn-ret-invariant.rs:64:12\n@@ -29,7 +29,7 @@ LL | fn transmute<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n    |              lifetime `'a` defined here\n LL |    let a = bar(foo, y); //[krisskross]~ ERROR E0623\n LL |    let b = bar(foo, x);\n-   |            ^^^^^^^^^^^ argument requires that `'a` must outlive `'b`\n+   |            ^^^^^^^^^^^ assignment requires that `'a` must outlive `'b`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "604974a25008d1c04075d2d5dab30c63eda274af", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.transmute.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -4,14 +4,14 @@ warning: not reporting region error due to nll\n LL |    bar(foo, x) //[transmute]~ ERROR E0495\n    |        ^^^\n \n-error: borrowed data escapes outside of function\n+error: unsatisfied lifetime constraints\n   --> $DIR/project-fn-ret-invariant.rs:58:4\n    |\n LL | fn baz<'a,'b>(x: Type<'a>) -> Type<'static> {\n-   |               - `x` is a reference that is only valid in the function body\n+   |        -- lifetime `'a` defined here\n ...\n LL |    bar(foo, x) //[transmute]~ ERROR E0495\n-   |    ^^^^^^^^^^^ `x` escapes the function body here\n+   |    ^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "ae706ef64dd22171c11352374f86ce3d1cdd9de4", "filename": "src/test/ui/borrowck/borrowck-describe-lvalue.ast.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.ast.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -35,7 +35,7 @@ LL | |                    //[mir]~^ ERROR cannot borrow `x` as mutable more than\n LL | |                    *y = 1;\n LL | |                    drop(y);\n LL | |                 }\n-   | |_________________^ requires that `'1` must outlive `'2`\n+   | |_________________^ returning this value requires that `'1` must outlive `'2`\n    |\n    = note: closure implements `FnMut`, so references to captured variables can't escape the closure\n "}, {"sha": "ae706ef64dd22171c11352374f86ce3d1cdd9de4", "filename": "src/test/ui/borrowck/borrowck-describe-lvalue.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.mir.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -35,7 +35,7 @@ LL | |                    //[mir]~^ ERROR cannot borrow `x` as mutable more than\n LL | |                    *y = 1;\n LL | |                    drop(y);\n LL | |                 }\n-   | |_________________^ requires that `'1` must outlive `'2`\n+   | |_________________^ returning this value requires that `'1` must outlive `'2`\n    |\n    = note: closure implements `FnMut`, so references to captured variables can't escape the closure\n "}, {"sha": "b7aad5c2b80dc450127c294ec5bedf6ac35a2939", "filename": "src/test/ui/borrowck/borrowck-reborrow-from-shorter-lived-andmut.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -5,14 +5,14 @@ LL |     S { pointer: &mut *p.pointer }\n    |                  ^^^^^^^^^^^^^^^\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/borrowck-reborrow-from-shorter-lived-andmut.rs:19:18\n+  --> $DIR/borrowck-reborrow-from-shorter-lived-andmut.rs:19:5\n    |\n LL | fn copy_borrowed_ptr<'a,'b>(p: &'a mut S<'b>) -> S<'b> {\n    |                      -- -- lifetime `'b` defined here\n    |                      |\n    |                      lifetime `'a` defined here\n LL |     S { pointer: &mut *p.pointer }\n-   |                  ^^^^^^^^^^^^^^^ requires that `'a` must outlive `'b`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n \n error: aborting due to previous error\n "}, {"sha": "caedc79d80732999637095b617c6e7833bed7e28", "filename": "src/test/ui/error-codes/E0621-does-not-trigger-for-closures.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Ferror-codes%2FE0621-does-not-trigger-for-closures.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Ferror-codes%2FE0621-does-not-trigger-for-closures.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0621-does-not-trigger-for-closures.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -5,10 +5,10 @@ LL |     invoke(&x, |a, b| if a > b { a } else { b }); //~ ERROR E0495\n    |     ^^^^^^\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/E0621-does-not-trigger-for-closures.rs:25:26\n+  --> $DIR/E0621-does-not-trigger-for-closures.rs:25:45\n    |\n LL |     invoke(&x, |a, b| if a > b { a } else { b }); //~ ERROR E0495\n-   |                    --    ^^^^^ requires that `'1` must outlive `'2`\n+   |                    --                       ^ returning this value requires that `'1` must outlive `'2`\n    |                    ||\n    |                    |return type of closure is &'2 i32\n    |                    has type `&'1 i32`"}, {"sha": "97cb2cc16e45ec13d8f0ca1099ed9a193cfca237", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -40,13 +40,13 @@ error: unsatisfied lifetime constraints\n   --> $DIR/must_outlive_least_region_or_bound.rs:16:44\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n-   |             -- lifetime `'a` defined here  ^ return requires that `'a` must outlive `'static`\n+   |             -- lifetime `'a` defined here  ^ returning this value requires that `'a` must outlive `'static`\n \n error: unsatisfied lifetime constraints\n   --> $DIR/must_outlive_least_region_or_bound.rs:22:69\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n-   |               -- lifetime `'a` defined here                         ^ return requires that `'a` must outlive `'static`\n+   |               -- lifetime `'a` defined here                         ^ returning this value requires that `'a` must outlive `'static`\n \n error: unsatisfied lifetime constraints\n   --> $DIR/must_outlive_least_region_or_bound.rs:29:5\n@@ -57,7 +57,7 @@ LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32\n    |                          lifetime `'a` defined here\n LL |     //~^ ERROR lifetime mismatch\n LL |     move |_| println!(\"{}\", y)\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n \n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/must_outlive_least_region_or_bound.rs:34:5"}, {"sha": "c07921bce2d72cb2eefd72e94c8bb518160fa606", "filename": "src/test/ui/in-band-lifetimes/mismatched.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -22,7 +22,7 @@ error: unsatisfied lifetime constraints\n   --> $DIR/mismatched.rs:16:46\n    |\n LL | fn foo2(x: &'a u32, y: &'b u32) -> &'a u32 { y } //~ ERROR lifetime mismatch\n-   |             --          --                   ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n+   |             --          --                   ^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n    |             |           |\n    |             |           lifetime `'b` defined here\n    |             lifetime `'a` defined here"}, {"sha": "cf3e44f7874aa8007ca2e6945bbc121471aa91ea", "filename": "src/test/ui/issues/issue-14285.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fissues%2Fissue-14285.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fissues%2Fissue-14285.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14285.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -5,12 +5,12 @@ LL |     B(a)    //~ ERROR 22:5: 22:9: explicit lifetime required in the type of\n    |       ^\n \n error[E0621]: explicit lifetime required in the type of `a`\n-  --> $DIR/issue-14285.rs:22:7\n+  --> $DIR/issue-14285.rs:22:5\n    |\n LL | fn foo<'a>(a: &Foo) -> B<'a> {\n    |               ---- help: add explicit lifetime `'a` to the type of `a`: `&'a (dyn Foo + 'a)`\n LL |     B(a)    //~ ERROR 22:5: 22:9: explicit lifetime required in the type of `a` [E0621]\n-   |       ^ lifetime `'a` required\n+   |     ^^^^ lifetime `'a` required\n \n error: aborting due to previous error\n "}, {"sha": "8dd18fa0cab89c66c6be8d9a85a8d76e2d92bf5f", "filename": "src/test/ui/issues/issue-15034.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fissues%2Fissue-15034.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fissues%2Fissue-15034.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15034.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -5,12 +5,12 @@ LL |         Parser { lexer: lexer }\n    |         ^^^^^^\n \n error[E0621]: explicit lifetime required in the type of `lexer`\n-  --> $DIR/issue-15034.rs:27:25\n+  --> $DIR/issue-15034.rs:27:9\n    |\n LL |     pub fn new(lexer: &'a mut Lexer) -> Parser<'a> {\n    |                       ------------- help: add explicit lifetime `'a` to the type of `lexer`: `&'a mut Lexer<'a>`\n LL |         Parser { lexer: lexer }\n-   |                         ^^^^^ lifetime `'a` required\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^ lifetime `'a` required\n \n error: aborting due to previous error\n "}, {"sha": "3cd7ce8cd54092d3f0cf328efd9ac53a375c79a0", "filename": "src/test/ui/issues/issue-3154.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fissues%2Fissue-3154.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fissues%2Fissue-3154.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3154.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -11,12 +11,12 @@ LL |     thing{ x: x } //~ ERROR 16:5: 16:18: explicit lifetime required in the\n    |     ^^^^^\n \n error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/issue-3154.rs:16:15\n+  --> $DIR/issue-3154.rs:16:5\n    |\n LL | fn thing<'a,Q>(x: &Q) -> thing<'a,Q> {\n    |                   -- help: add explicit lifetime `'a` to the type of `x`: `&'a Q`\n LL |     thing{ x: x } //~ ERROR 16:5: 16:18: explicit lifetime required in the type of `x` [E0621]\n-   |               ^ lifetime `'a` required\n+   |     ^^^^^^^^^^^^^ lifetime `'a` required\n \n error: aborting due to previous error\n "}, {"sha": "3a579c04de176c3d47d406e82855a067f8b09260", "filename": "src/test/ui/issues/issue-40510-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -7,7 +7,7 @@ LL |     || {\n    |     |return type of closure is &'2 mut std::boxed::Box<()>\n    |     lifetime `'1` represents this closure's body\n LL |         &mut x\n-   |         ^^^^^^ return requires that `'1` must outlive `'2`\n+   |         ^^^^^^ returning this value requires that `'1` must outlive `'2`\n    |\n    = note: closure implements `FnMut`, so references to captured variables can't escape the closure\n "}, {"sha": "84ab2a8216deb48aac547bd11c20e01983b92eef", "filename": "src/test/ui/issues/issue-40510-3.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -9,7 +9,7 @@ LL |       || {\n LL | /         || {\n LL | |             x.push(())\n LL | |         }\n-   | |_________^ requires that `'1` must outlive `'2`\n+   | |_________^ returning this value requires that `'1` must outlive `'2`\n    |\n    = note: closure implements `FnMut`, so references to captured variables can't escape the closure\n "}, {"sha": "df43158ec9c7cdd47cfa1f28f1370622d0d8a46f", "filename": "src/test/ui/issues/issue-49824.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fissues%2Fissue-49824.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fissues%2Fissue-49824.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49824.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -9,7 +9,7 @@ LL |       || {\n LL | /         || {\n LL | |             let _y = &mut x;\n LL | |         }\n-   | |_________^ requires that `'1` must outlive `'2`\n+   | |_________^ returning this value requires that `'1` must outlive `'2`\n    |\n    = note: closure implements `FnMut`, so references to captured variables can't escape the closure\n "}, {"sha": "7a04aeb963547a0ff07317866c62ddea5b7d610f", "filename": "src/test/ui/issues/issue-52213.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fissues%2Fissue-52213.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fissues%2Fissue-52213.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52213.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -5,15 +5,15 @@ LL |     match (&t,) { //~ ERROR cannot infer an appropriate lifetime\n    |           ^^^^^\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/issue-52213.rs:13:11\n+  --> $DIR/issue-52213.rs:13:20\n    |\n LL | fn transmute_lifetime<'a, 'b, T>(t: &'a (T,)) -> &'b T {\n    |                       --  -- lifetime `'b` defined here\n    |                       |\n    |                       lifetime `'a` defined here\n LL |     match (&t,) { //~ ERROR cannot infer an appropriate lifetime\n LL |         ((u,),) => u,\n-   |           ^ requires that `'a` must outlive `'b`\n+   |                    ^ returning this value requires that `'a` must outlive `'b`\n \n error: aborting due to previous error\n "}, {"sha": "2dfa46dc2288e7aeefd3bd465457d2b5ba51a38f", "filename": "src/test/ui/issues/issue-52533-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fissues%2Fissue-52533-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fissues%2Fissue-52533-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52533-1.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -8,7 +8,7 @@ error: unsatisfied lifetime constraints\n   --> $DIR/issue-52533-1.rs:19:18\n    |\n LL |     gimme(|x, y| y)\n-   |            -  -  ^ closure was supposed to return data with lifetime `'1` but it is returning data with lifetime `'2`\n+   |            -  -  ^ closure was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |            |  |\n    |            |  has type `&Foo<'_, '1, u32>`\n    |            has type `&Foo<'_, '2, u32>`"}, {"sha": "17218429822e85832be15163b47f7492cd823199", "filename": "src/test/ui/issues/issue-52533.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fissues%2Fissue-52533.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fissues%2Fissue-52533.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52533.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -8,7 +8,7 @@ error: unsatisfied lifetime constraints\n   --> $DIR/issue-52533.rs:15:16\n    |\n LL |     foo(|a, b| b)\n-   |          -  -  ^ closure was supposed to return data with lifetime `'1` but it is returning data with lifetime `'2`\n+   |          -  -  ^ closure was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |          |  |\n    |          |  has type `&'1 u32`\n    |          has type `&'2 u32`"}, {"sha": "3fb0252315cbfe4cc6c0a66eaf9883a02a0bc866", "filename": "src/test/ui/lifetimes/lifetime-errors/42701_one_named_and_one_anonymous.nll.stderr", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2F42701_one_named_and_one_anonymous.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2F42701_one_named_and_one_anonymous.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2F42701_one_named_and_one_anonymous.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -5,17 +5,13 @@ LL |         &*x //~ ERROR explicit lifetime\n    |         ^^^\n \n error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/42701_one_named_and_one_anonymous.rs:16:5\n+  --> $DIR/42701_one_named_and_one_anonymous.rs:20:9\n    |\n-LL |   fn foo2<'a>(a: &'a Foo, x: &i32) -> &'a i32 {\n-   |                              ---- help: add explicit lifetime `'a` to the type of `x`: `&'a i32`\n-LL | /     if true {\n-LL | |         let p: &i32 = &a.field;\n-LL | |         &*p\n-LL | |     } else {\n-LL | |         &*x //~ ERROR explicit lifetime\n-LL | |     }\n-   | |_____^ lifetime `'a` required\n+LL | fn foo2<'a>(a: &'a Foo, x: &i32) -> &'a i32 {\n+   |                            ---- help: add explicit lifetime `'a` to the type of `x`: `&'a i32`\n+...\n+LL |         &*x //~ ERROR explicit lifetime\n+   |         ^^^ lifetime `'a` required\n \n error: aborting due to previous error\n "}, {"sha": "817d7c8736375e063aa73ff406131d7fd47e5a14", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-early-bound-in-struct.nll.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-early-bound-in-struct.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-early-bound-in-struct.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-early-bound-in-struct.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -5,12 +5,13 @@ LL |                     other //~ ERROR explicit lifetime\n    |                     ^^^^^\n \n error[E0621]: explicit lifetime required in the type of `other`\n-  --> $DIR/ex1-return-one-existing-name-early-bound-in-struct.rs:18:15\n+  --> $DIR/ex1-return-one-existing-name-early-bound-in-struct.rs:21:21\n    |\n LL |     fn bar(&self, other: Foo) -> Foo<'a> {\n    |                          --- help: add explicit lifetime `'a` to the type of `other`: `Foo<'a>`\n-LL |         match *self {\n-   |               ^^^^^ lifetime `'a` required\n+...\n+LL |                     other //~ ERROR explicit lifetime\n+   |                     ^^^^^ lifetime `'a` required\n \n error: aborting due to previous error\n "}, {"sha": "a10c38a88d4c4f8f4d527cacd8bf08ceebbd9ba4", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-if-else-2.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-2.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -5,12 +5,12 @@ LL |     if x > y { x } else { y } //~ ERROR explicit lifetime\n    |                ^\n \n error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/ex1-return-one-existing-name-if-else-2.rs:12:8\n+  --> $DIR/ex1-return-one-existing-name-if-else-2.rs:12:16\n    |\n LL | fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n    |               ---- help: add explicit lifetime `'a` to the type of `x`: `&'a i32`\n LL |     if x > y { x } else { y } //~ ERROR explicit lifetime\n-   |        ^^^^^ lifetime `'a` required\n+   |                ^ lifetime `'a` required\n \n error: aborting due to previous error\n "}, {"sha": "e33b89c56d5d803cba229847747e24b85c1ed2d0", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-if-else-3.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-3.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -5,12 +5,12 @@ LL |     if x > y { x } else { y } //~ ERROR explicit lifetime\n    |                           ^\n \n error[E0621]: explicit lifetime required in parameter type\n-  --> $DIR/ex1-return-one-existing-name-if-else-3.rs:11:16\n+  --> $DIR/ex1-return-one-existing-name-if-else-3.rs:12:27\n    |\n LL | fn foo<'a>((x, y): (&'a i32, &i32)) -> &'a i32 {\n-   |                ^   --------------- help: add explicit lifetime `'a` to type: `(&'a i32, &'a i32)`\n-   |                |\n-   |                lifetime `'a` required\n+   |                    --------------- help: add explicit lifetime `'a` to type: `(&'a i32, &'a i32)`\n+LL |     if x > y { x } else { y } //~ ERROR explicit lifetime\n+   |                           ^ lifetime `'a` required\n \n error: aborting due to previous error\n "}, {"sha": "a3b2c3f6f19c322add0f1144a0aff6f5c27d2320", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl-2.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-2.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -5,12 +5,12 @@ LL |    if x > y { x } else { y } //~ ERROR explicit lifetime\n    |               ^\n \n error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/ex1-return-one-existing-name-if-else-using-impl-2.rs:14:7\n+  --> $DIR/ex1-return-one-existing-name-if-else-using-impl-2.rs:14:15\n    |\n LL | fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n    |               ---- help: add explicit lifetime `'a` to the type of `x`: `&'a i32`\n LL |    if x > y { x } else { y } //~ ERROR explicit lifetime\n-   |       ^^^^^ lifetime `'a` required\n+   |               ^ lifetime `'a` required\n \n error: aborting due to previous error\n "}, {"sha": "e13a710508d05757d6b92d3c2fdbe1f90088f42a", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl-3.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -5,13 +5,13 @@ LL |     if true { &self.field } else { x } //~ ERROR explicit lifetime\n    |                                    ^\n \n error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/ex1-return-one-existing-name-if-else-using-impl-3.rs:18:5\n+  --> $DIR/ex1-return-one-existing-name-if-else-using-impl-3.rs:18:36\n    |\n LL |   fn foo<'a>(&'a self, x: &i32) -> &i32 {\n    |                           ---- help: add explicit lifetime `'a` to the type of `x`: `&'a i32`\n LL | \n LL |     if true { &self.field } else { x } //~ ERROR explicit lifetime\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime `'a` required\n+   |                                    ^ lifetime `'a` required\n \n error: aborting due to previous error\n "}, {"sha": "4ce3a613c315e84ad10bb79584c26957d3c1d870", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -5,15 +5,15 @@ LL |         if x > y { x } else { y } //~ ERROR lifetime mismatch\n    |                    ^\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/ex1-return-one-existing-name-if-else-using-impl.rs:21:12\n+  --> $DIR/ex1-return-one-existing-name-if-else-using-impl.rs:21:20\n    |\n LL |     fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n    |            --     - let's call the lifetime of this reference `'1`\n    |            |\n    |            lifetime `'a` defined here\n LL | \n LL |         if x > y { x } else { y } //~ ERROR lifetime mismatch\n-   |            ^^^^^ requires that `'1` must outlive `'a`\n+   |                    ^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'1`\n \n error: aborting due to previous error\n "}, {"sha": "5b4b28acee7c8c6698fcfe1dbd47767f731569e9", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-if-else.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -5,12 +5,12 @@ LL |     if x > y { x } else { y } //~ ERROR explicit lifetime\n    |                           ^\n \n error[E0621]: explicit lifetime required in the type of `y`\n-  --> $DIR/ex1-return-one-existing-name-if-else.rs:12:8\n+  --> $DIR/ex1-return-one-existing-name-if-else.rs:12:27\n    |\n LL | fn foo<'a>(x: &'a i32, y: &i32) -> &'a i32 {\n    |                           ---- help: add explicit lifetime `'a` to the type of `y`: `&'a i32`\n LL |     if x > y { x } else { y } //~ ERROR explicit lifetime\n-   |        ^^^^^ lifetime `'a` required\n+   |                           ^ lifetime `'a` required\n \n error: aborting due to previous error\n "}, {"sha": "272ae0b12519af7756bb36f662a0807a0defe2fa", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-return-type-is-anon.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -13,7 +13,7 @@ LL |   fn foo<'a>(&self, x: &'a i32) -> &i32 {\n    |          lifetime `'a` defined here\n LL | \n LL |     x //~ ERROR lifetime mismatch\n-   |     ^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'1`\n+   |     ^ function was supposed to return data with lifetime `'1` but it is returning data with lifetime `'a`\n \n error: aborting due to previous error\n "}, {"sha": "2106546325b2de30cca7df15b051fafa43416345", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-self-is-anon.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -5,15 +5,15 @@ LL |         if true { x } else { self } //~ ERROR lifetime mismatch\n    |                              ^^^^\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/ex1-return-one-existing-name-self-is-anon.rs:18:9\n+  --> $DIR/ex1-return-one-existing-name-self-is-anon.rs:18:30\n    |\n LL |     fn foo<'a>(&self, x: &'a Foo) -> &'a Foo {\n    |            --  - let's call the lifetime of this reference `'1`\n    |            |\n    |            lifetime `'a` defined here\n LL | \n LL |         if true { x } else { self } //~ ERROR lifetime mismatch\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'1` must outlive `'a`\n+   |                              ^^^^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'1`\n \n error: aborting due to previous error\n "}, {"sha": "9680e8c2f69359a80339b47aac93aa3e8acbe5cb", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-return-type-is-anon.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -12,7 +12,7 @@ LL |   fn foo<'a>(&self, x: &i32) -> &i32 {\n    |              |\n    |              let's call the lifetime of this reference `'2`\n LL |     x //~ ERROR lifetime mismatch\n-   |     ^ function was supposed to return data with lifetime `'1` but it is returning data with lifetime `'2`\n+   |     ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: aborting due to previous error\n "}, {"sha": "6fbe8e982093e851aaae1b3e25e7d9218fd0e6cd", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-self-is-anon.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -5,14 +5,14 @@ LL |         if true { x } else { self } //~ ERROR lifetime mismatch\n    |                   ^\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/ex3-both-anon-regions-self-is-anon.rs:17:9\n+  --> $DIR/ex3-both-anon-regions-self-is-anon.rs:17:19\n    |\n LL |     fn foo<'a>(&self, x: &Foo) -> &Foo {\n    |                -         - let's call the lifetime of this reference `'1`\n    |                |\n    |                let's call the lifetime of this reference `'2`\n LL |         if true { x } else { self } //~ ERROR lifetime mismatch\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'1` must outlive `'2`\n+   |                   ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: aborting due to previous error\n "}, {"sha": "d3f5cdca1759e47a04642f7a6ff7ef97f3b72f98", "filename": "src/test/ui/lub-if.nll.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Flub-if.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Flub-if.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-if.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -11,20 +11,22 @@ LL |         s  //~ ERROR E0312\n    |         ^\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/lub-if.rs:34:8\n+  --> $DIR/lub-if.rs:38:9\n    |\n LL | pub fn opt_str2<'a>(maybestr: &'a Option<String>) -> &'static str {\n    |                 -- lifetime `'a` defined here\n-LL |     if maybestr.is_none() {\n-   |        ^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n+...\n+LL |         s  //~ ERROR E0312\n+   |         ^ returning this value requires that `'a` must outlive `'static`\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/lub-if.rs:43:8\n+  --> $DIR/lub-if.rs:45:9\n    |\n LL | pub fn opt_str3<'a>(maybestr: &'a Option<String>) -> &'static str {\n    |                 -- lifetime `'a` defined here\n-LL |     if maybestr.is_some() {\n-   |        ^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n+...\n+LL |         s  //~ ERROR E0312\n+   |         ^ returning this value requires that `'a` must outlive `'static`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bbddcc7d8b36a4b77262658ab4483953c01bb8f8", "filename": "src/test/ui/lub-match.nll.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Flub-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Flub-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-match.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -11,20 +11,22 @@ LL |             s //~ ERROR E0312\n    |             ^\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/lub-match.rs:36:11\n+  --> $DIR/lub-match.rs:40:13\n    |\n LL | pub fn opt_str2<'a>(maybestr: &'a Option<String>) -> &'static str {\n    |                 -- lifetime `'a` defined here\n-LL |     match *maybestr {\n-   |           ^^^^^^^^^ requires that `'a` must outlive `'static`\n+...\n+LL |             s //~ ERROR E0312\n+   |             ^ returning this value requires that `'a` must outlive `'static`\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/lub-match.rs:46:11\n+  --> $DIR/lub-match.rs:49:13\n    |\n LL | pub fn opt_str3<'a>(maybestr: &'a Option<String>) -> &'static str {\n    |                 -- lifetime `'a` defined here\n-LL |     match *maybestr {\n-   |           ^^^^^^^^^ requires that `'a` must outlive `'static`\n+...\n+LL |             s //~ ERROR E0312\n+   |             ^ returning this value requires that `'a` must outlive `'static`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "26fcaa65d77f9d37df687db9cc267d5ce3c1f99b", "filename": "src/test/ui/match/match-ref-mut-invariance.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -15,7 +15,7 @@ LL |       fn bar<'a>(&'a mut self) -> &'a mut &'a i32 {\n    | |            lifetime `'a` defined here\n LL | |         match self.0 { ref mut x => x } //~ ERROR mismatched types\n LL | |     }\n-   | |_____^ requires that `'a` must outlive `'b`\n+   | |_____^ returning this value requires that `'a` must outlive `'b`\n \n error: aborting due to previous error\n "}, {"sha": "b1ec6adee9ea0a6bccff129062f1b020acf71b64", "filename": "src/test/ui/match/match-ref-mut-let-invariance.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -16,7 +16,7 @@ LL |       fn bar<'a>(&'a mut self) -> &'a mut &'a i32 {\n LL | |         let ref mut x = self.0;\n LL | |         x //~ ERROR mismatched types\n LL | |     }\n-   | |_____^ requires that `'a` must outlive `'b`\n+   | |_____^ returning this value requires that `'a` must outlive `'b`\n \n error: aborting due to previous error\n "}, {"sha": "00d79a9ed7e844b0ddf755b0f1d3eeeff221ea0a", "filename": "src/test/ui/nll/closure-requirements/region-lbr-named-does-not-outlive-static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-named-does-not-outlive-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-named-does-not-outlive-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-named-does-not-outlive-static.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -10,7 +10,7 @@ error: unsatisfied lifetime constraints\n LL | fn foo<'a>(x: &'a u32) -> &'static u32 {\n    |        -- lifetime `'a` defined here\n LL |     &*x\n-   |     ^^^ requires that `'a` must outlive `'static`\n+   |     ^^^ returning this value requires that `'a` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "bcdae17c47ce079baf8281dad4123b527e1ed254", "filename": "src/test/ui/nll/closure-requirements/region-lbr1-does-not-outlive-ebr2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr1-does-not-outlive-ebr2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr1-does-not-outlive-ebr2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr1-does-not-outlive-ebr2.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -12,7 +12,7 @@ LL | fn foo<'a, 'b>(x: &'a u32, y: &'b u32) -> &'b u32 {\n    |        |\n    |        lifetime `'a` defined here\n LL |     &*x\n-   |     ^^^ requires that `'a` must outlive `'b`\n+   |     ^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n \n error: aborting due to previous error\n "}, {"sha": "8dc10de702f7aadf52d15bc339e45cda1991db16", "filename": "src/test/ui/nll/closure-requirements/return-wrong-bound-region.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -19,7 +19,7 @@ error: unsatisfied lifetime constraints\n   --> $DIR/return-wrong-bound-region.rs:21:23\n    |\n LL |     expect_sig(|a, b| b); // ought to return `a`\n-   |                 -  -  ^ closure was supposed to return data with lifetime `'1` but it is returning data with lifetime `'2`\n+   |                 -  -  ^ closure was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |                 |  |\n    |                 |  has type `&'1 i32`\n    |                 has type `&'2 i32`"}, {"sha": "a48516efdc21b9cd02591d62983e2e8abfa06eac", "filename": "src/test/ui/nll/issue-48238.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fnll%2Fissue-48238.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fnll%2Fissue-48238.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-48238.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -2,7 +2,7 @@ error: unsatisfied lifetime constraints\n   --> $DIR/issue-48238.rs:21:13\n    |\n LL |     move || use_val(&orig); //~ ERROR\n-   |     ------- ^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n+   |     ------- ^^^^^^^^^^^^^^ returning this value requires that `'1` must outlive `'2`\n    |     |     |\n    |     |     return type of closure is &'2 u8\n    |     lifetime `'1` represents this closure's body"}, {"sha": "a111699c3f70de36cc4a01faacf2bda4bfb4e833", "filename": "src/test/ui/nll/mir_check_cast_closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_closure.rs?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -14,9 +14,9 @@\n \n fn bar<'a, 'b>() -> fn(&'a u32, &'b u32) -> &'a u32 {\n     let g: fn(_, _) -> _ = |_x, y| y;\n-    //~^ ERROR unsatisfied lifetime constraints\n     g\n     //~^ WARNING not reporting region error due to nll\n+    //~^^ ERROR unsatisfied lifetime constraints\n }\n \n fn main() {}"}, {"sha": "6805dbf6f30550c4dcfc28240967ad129eeeb079", "filename": "src/test/ui/nll/mir_check_cast_closure.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_closure.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -1,18 +1,19 @@\n warning: not reporting region error due to nll\n-  --> $DIR/mir_check_cast_closure.rs:18:5\n+  --> $DIR/mir_check_cast_closure.rs:17:5\n    |\n LL |     g\n    |     ^\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/mir_check_cast_closure.rs:16:28\n+  --> $DIR/mir_check_cast_closure.rs:17:5\n    |\n LL | fn bar<'a, 'b>() -> fn(&'a u32, &'b u32) -> &'a u32 {\n    |        --  -- lifetime `'b` defined here\n    |        |\n    |        lifetime `'a` defined here\n LL |     let g: fn(_, _) -> _ = |_x, y| y;\n-   |                            ^^^^^^^^^ cast requires that `'b` must outlive `'a`\n+LL |     g\n+   |     ^ returning this value requires that `'b` must outlive `'a`\n \n error: aborting due to previous error\n "}, {"sha": "c6e5fb397b9e6d09460b922eccf3de90240dd385", "filename": "src/test/ui/nll/mir_check_cast_reify.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_reify.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_reify.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_reify.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -4,14 +4,14 @@ warning: not reporting region error due to nll\n LL |     let f: fn(_) -> _ = foo;\n    |                         ^^^\n \n-error: borrowed data escapes outside of function\n+error: unsatisfied lifetime constraints\n   --> $DIR/mir_check_cast_reify.rs:48:5\n    |\n LL | fn bar<'a>(x: &'a u32) -> &'static u32 {\n-   |            - `x` is a reference that is only valid in the function body\n+   |        -- lifetime `'a` defined here\n ...\n LL |     f(x)\n-   |     ^^^^ `x` escapes the function body here\n+   |     ^^^^ returning this value requires that `'a` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "e8315d341a7f3cce9a4cb2ff89d22c86fb60621d", "filename": "src/test/ui/nll/mir_check_cast_unsafe_fn.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsafe_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsafe_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsafe_fn.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -4,14 +4,14 @@ warning: not reporting region error due to nll\n LL |     let g: unsafe fn(_) -> _ = f;\n    |                                ^\n \n-error: borrowed data escapes outside of function\n+error: unsatisfied lifetime constraints\n   --> $DIR/mir_check_cast_unsafe_fn.rs:20:14\n    |\n LL | fn bar<'a>(input: &'a u32, f: fn(&'a u32) -> &'a u32) -> &'static u32 {\n-   |            ----- `input` is a reference that is only valid in the function body\n+   |        -- lifetime `'a` defined here\n ...\n LL |     unsafe { g(input) }\n-   |              ^^^^^^^^ `input` escapes the function body here\n+   |              ^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "4219c07673a45879330567bd163ea786f22732e8", "filename": "src/test/ui/nll/mir_check_cast_unsize.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsize.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -15,7 +15,7 @@ LL | |     //~^ ERROR unsatisfied lifetime constraints\n LL | |     x\n LL | |     //~^ WARNING not reporting region error due to nll\n LL | | }\n-   | |_^ return requires that `'a` must outlive `'static`\n+   | |_^ returning this value requires that `'a` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "0d21dddc7c9bcb26d43f996c9bb911e1b14165db", "filename": "src/test/ui/object-lifetime/object-lifetime-default-elision.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -18,7 +18,7 @@ LL | |     // for<'a,'b,'c>fn(&'a (SomeTrait+'c)) -> &'b (SomeTrait+'a)\n ...  |\n LL | |         //~| ERROR cannot infer\n LL | | }\n-   | |_^ return requires that `'a` must outlive `'b`\n+   | |_^ returning this value requires that `'a` must outlive `'b`\n \n error: aborting due to previous error\n "}, {"sha": "14a3cbf9e2948f2f3ef03166eca2b60aebd77e9d", "filename": "src/test/ui/object-lifetime/object-lifetime-default-mybox.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-mybox.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-mybox.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-mybox.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -19,7 +19,7 @@ LL | fn load1<'a,'b>(a: &'a MyBox<SomeTrait>,\n    |          lifetime `'a` defined here\n ...\n LL |     a //~ ERROR lifetime mismatch\n-   |     ^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n+   |     ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n \n error: borrowed data escapes outside of function\n   --> $DIR/object-lifetime-default-mybox.rs:41:5"}, {"sha": "135a115cecfa5d9e2e641150d76a8a70403a674e", "filename": "src/test/ui/regions/region-object-lifetime-2.nll.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-2.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -4,13 +4,15 @@ warning: not reporting region error due to nll\n LL |     x.borrowed() //~ ERROR cannot infer\n    |       ^^^^^^^^\n \n-error: borrowed data escapes outside of function\n+error: unsatisfied lifetime constraints\n   --> $DIR/region-object-lifetime-2.rs:20:5\n    |\n LL | fn borrowed_receiver_different_lifetimes<'a,'b>(x: &'a Foo) -> &'b () {\n-   |                                                 - `x` is a reference that is only valid in the function body\n+   |                                          -- -- lifetime `'b` defined here\n+   |                                          |\n+   |                                          lifetime `'a` defined here\n LL |     x.borrowed() //~ ERROR cannot infer\n-   |     ^^^^^^^^^^^^ `x` escapes the function body here\n+   |     ^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'b`\n \n error: aborting due to previous error\n "}, {"sha": "8338cf6a6069c5e79dc49298735e0600a68b236b", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -67,7 +67,7 @@ LL |   fn d<'a,'b>(v: &'a [u8]) -> Box<Foo+'b> {\n LL | |     Box::new(v)\n LL | |         //~^ ERROR cannot infer an appropriate lifetime due to conflicting\n LL | | }\n-   | |_^ return requires that `'a` must outlive `'b`\n+   | |_^ returning this value requires that `'a` must outlive `'b`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "a59a485f444cab821823919716bbc257d15b1f05", "filename": "src/test/ui/regions/regions-bounds.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-bounds.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-bounds.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounds.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -18,7 +18,7 @@ LL | fn a_fn1<'a,'b>(e: an_enum<'a>) -> an_enum<'b> {\n    |          |\n    |          lifetime `'a` defined here\n LL |     return e; //~ ERROR mismatched types\n-   |            ^ return requires that `'a` must outlive `'b`\n+   |            ^ returning this value requires that `'a` must outlive `'b`\n \n error: unsatisfied lifetime constraints\n   --> $DIR/regions-bounds.rs:23:12\n@@ -28,7 +28,7 @@ LL | fn a_fn3<'a,'b>(e: a_class<'a>) -> a_class<'b> {\n    |          |\n    |          lifetime `'a` defined here\n LL |     return e; //~ ERROR mismatched types\n-   |            ^ return requires that `'a` must outlive `'b`\n+   |            ^ returning this value requires that `'a` must outlive `'b`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "701becc24d7184ebb9bb67d4725fcc9199807687", "filename": "src/test/ui/regions/regions-close-object-into-object-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -13,7 +13,7 @@ LL |   fn g<'a, T: 'static>(v: Box<A<T>+'a>) -> Box<X+'static> {\n    | |      lifetime `'a` defined here\n LL | |     box B(&*v) as Box<X> //~ ERROR cannot infer\n LL | | }\n-   | |_^ return requires that `'a` must outlive `'static`\n+   | |_^ returning this value requires that `'a` must outlive `'static`\n \n error[E0597]: `*v` does not live long enough\n   --> $DIR/regions-close-object-into-object-2.rs:20:11"}, {"sha": "e01ae145e90d92977fffd26c1f754f7c6132db51", "filename": "src/test/ui/regions/regions-close-object-into-object-4.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -37,7 +37,7 @@ LL |   fn i<'a, T, U>(v: Box<A<U>+'a>) -> Box<X+'static> {\n    | |      lifetime `'a` defined here\n LL | |     box B(&*v) as Box<X> //~ ERROR cannot infer\n LL | | }\n-   | |_^ return requires that `'a` must outlive `'static`\n+   | |_^ returning this value requires that `'a` must outlive `'static`\n \n error[E0310]: the parameter type `U` may not live long enough\n   --> $DIR/regions-close-object-into-object-4.rs:20:5"}, {"sha": "462e4152ce3bad74137544ad29a9c464c7fb34d0", "filename": "src/test/ui/regions/regions-creating-enums3.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums3.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -5,14 +5,14 @@ LL |     ast::add(x, y) //~ ERROR 17:5: 17:19: lifetime mismatch [E0623]\n    |     ^^^^^^^^\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/regions-creating-enums3.rs:17:14\n+  --> $DIR/regions-creating-enums3.rs:17:5\n    |\n LL | fn mk_add_bad1<'a,'b>(x: &'a ast<'a>, y: &'b ast<'b>) -> ast<'a> {\n    |                -- -- lifetime `'b` defined here\n    |                |\n    |                lifetime `'a` defined here\n LL |     ast::add(x, y) //~ ERROR 17:5: 17:19: lifetime mismatch [E0623]\n-   |              ^ requires that `'b` must outlive `'a`\n+   |     ^^^^^^^^^^^^^^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n \n error: aborting due to previous error\n "}, {"sha": "b82fdfd5c65c41e6b6255a6dbc9deb5fe230931a", "filename": "src/test/ui/regions/regions-creating-enums4.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -5,14 +5,14 @@ LL |     ast::add(x, y) //~ ERROR cannot infer\n    |     ^^^^^^^^\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/regions-creating-enums4.rs:17:14\n+  --> $DIR/regions-creating-enums4.rs:17:5\n    |\n LL | fn mk_add_bad2<'a,'b>(x: &'a ast<'a>, y: &'a ast<'a>, z: &ast) -> ast<'b> {\n    |                -- -- lifetime `'b` defined here\n    |                |\n    |                lifetime `'a` defined here\n LL |     ast::add(x, y) //~ ERROR cannot infer\n-   |              ^ requires that `'a` must outlive `'b`\n+   |     ^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'b`\n \n error: aborting due to previous error\n "}, {"sha": "cd2da8f3c6e72a2cb3f8a4ba1bad55c37d0a914e", "filename": "src/test/ui/regions/regions-early-bound-error-method.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error-method.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error-method.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error-method.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -12,7 +12,7 @@ LL | impl<'a> Box<'a> {\n LL |     fn or<'b,G:GetRef<'b>>(&self, g2: G) -> &'a isize {\n    |           -- lifetime `'b` defined here\n LL |         g2.get()\n-   |         ^^^^^^^^ argument requires that `'b` must outlive `'a`\n+   |         ^^^^^^^^ returning this value requires that `'b` must outlive `'a`\n \n error: aborting due to previous error\n "}, {"sha": "7ba615117353038445fea4812c2bec417d4f00b9", "filename": "src/test/ui/regions/regions-early-bound-error.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -12,7 +12,7 @@ LL | fn get<'a,'b,G:GetRef<'a, isize>>(g1: G, b: &'b isize) -> &'b isize {\n    |        |\n    |        lifetime `'a` defined here\n LL |     g1.get()\n-   |     ^^^^^^^^ argument requires that `'a` must outlive `'b`\n+   |     ^^^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n \n error: aborting due to previous error\n "}, {"sha": "4603d1516e0f79fdda51c9948214fdd8ab51b619", "filename": "src/test/ui/regions/regions-escape-method.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-escape-method.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-escape-method.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-escape-method.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -8,7 +8,7 @@ error: unsatisfied lifetime constraints\n   --> $DIR/regions-escape-method.rs:25:13\n    |\n LL |     s.f(|p| p) //~ ERROR cannot infer\n-   |          -- ^ return requires that `'1` must outlive `'2`\n+   |          -- ^ returning this value requires that `'1` must outlive `'2`\n    |          ||\n    |          |return type of closure is &'2 i32\n    |          has type `&'1 i32`"}, {"sha": "381f46286478026524162c16b91109af723065fa", "filename": "src/test/ui/regions/regions-escape-via-trait-or-not.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-escape-via-trait-or-not.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-escape-via-trait-or-not.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-escape-via-trait-or-not.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -8,7 +8,7 @@ error: unsatisfied lifetime constraints\n   --> $DIR/regions-escape-via-trait-or-not.rs:28:14\n    |\n LL |     with(|o| o) //~ ERROR cannot infer\n-   |           -- ^ return requires that `'1` must outlive `'2`\n+   |           -- ^ returning this value requires that `'1` must outlive `'2`\n    |           ||\n    |           |return type of closure is &'2 isize\n    |           has type `&'1 isize`"}, {"sha": "3ef1be10f0fdc02f6a393f3d665f0bbb4ed4de78", "filename": "src/test/ui/regions/regions-free-region-ordering-callee.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-callee.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-callee.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-callee.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -19,7 +19,7 @@ LL | fn ordering2<'a, 'b>(x: &'a &'b usize, y: &'a usize) -> &'b usize {\n    |              lifetime `'a` defined here\n LL |     // However, it is not safe to assume that 'b <= 'a\n LL |     &*y //~ ERROR 23:5: 23:8: lifetime mismatch [E0623]\n-   |     ^^^ requires that `'a` must outlive `'b`\n+   |     ^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n \n error: unsatisfied lifetime constraints\n   --> $DIR/regions-free-region-ordering-callee.rs:28:24"}, {"sha": "0bc4bf4a951e8c6bdf811ecbafd2d0210fa6ada6", "filename": "src/test/ui/regions/regions-free-region-ordering-incorrect.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-incorrect.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-incorrect.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-incorrect.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -15,7 +15,7 @@ LL | /     match self.next {\n LL | |       Some(ref next) => next.get(),\n LL | |       None => &self.val //~ ERROR cannot infer\n LL | |     }\n-   | |_____^ requires that `'a` must outlive `'b`\n+   | |_____^ returning this value requires that `'a` must outlive `'b`\n \n error: aborting due to previous error\n "}, {"sha": "a82ce96bfbfbf6c6fd6725048330b9e74e5c2476", "filename": "src/test/ui/regions/regions-glb-free-free.nll.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-glb-free-free.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-glb-free-free.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-glb-free-free.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -5,13 +5,17 @@ LL |             Flag { //~ ERROR 25:13: 30:14: explicit lifetime required in th\n    |             ^^^^\n \n error[E0621]: explicit lifetime required in the type of `s`\n-  --> $DIR/regions-glb-free-free.rs:26:23\n+  --> $DIR/regions-glb-free-free.rs:25:13\n    |\n-LL |         pub fn set_desc(self, s: &str) -> Flag<'a> {\n-   |                                  ---- help: add explicit lifetime `'a` to the type of `s`: `&'a str`\n-LL |             Flag { //~ ERROR 25:13: 30:14: explicit lifetime required in the type of `s` [E0621]\n-LL |                 name: self.name,\n-   |                       ^^^^^^^^^ lifetime `'a` required\n+LL |           pub fn set_desc(self, s: &str) -> Flag<'a> {\n+   |                                    ---- help: add explicit lifetime `'a` to the type of `s`: `&'a str`\n+LL | /             Flag { //~ ERROR 25:13: 30:14: explicit lifetime required in the type of `s` [E0621]\n+LL | |                 name: self.name,\n+LL | |                 desc: s,\n+LL | |                 max_count: self.max_count,\n+LL | |                 value: self.value\n+LL | |             }\n+   | |_____________^ lifetime `'a` required\n \n error: aborting due to previous error\n "}, {"sha": "6069aca62ec5e5d2c195d20e7df5cf898b53b079", "filename": "src/test/ui/regions/regions-infer-call-3.nll.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-infer-call-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-infer-call-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-call-3.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -4,13 +4,14 @@ warning: not reporting region error due to nll\n LL |     let z = with(|y| { select(x, y) });\n    |                        ^^^^^^^^^^^^\n \n-error: borrowed data escapes outside of closure\n+error: unsatisfied lifetime constraints\n   --> $DIR/regions-infer-call-3.rs:18:24\n    |\n LL |     let z = with(|y| { select(x, y) });\n-   |                   -    ^^^^^^^^^^^^ `y` escapes the closure body here\n-   |                   |\n-   |                   `y` is a reference that is only valid in the closure body\n+   |                   --   ^^^^^^^^^^^^ returning this value requires that `'1` must outlive `'2`\n+   |                   ||\n+   |                   |return type of closure is &'2 isize\n+   |                   has type `&'1 isize`\n \n error: aborting due to previous error\n "}, {"sha": "cf754167b53ec0fa5120d9851af94af594980649", "filename": "src/test/ui/regions/regions-infer-invariance-due-to-decl.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-decl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-decl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-decl.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -10,7 +10,7 @@ error: unsatisfied lifetime constraints\n LL | fn to_longer_lifetime<'r>(b_isize: invariant<'r>) -> invariant<'static> {\n    |                       -- lifetime `'r` defined here\n LL |     b_isize //~ ERROR mismatched types\n-   |     ^^^^^^^ return requires that `'r` must outlive `'static`\n+   |     ^^^^^^^ returning this value requires that `'r` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "6cd76f26ebec74d67a46c45392f2d1ad69ee2a0d", "filename": "src/test/ui/regions/regions-infer-invariance-due-to-mutability-3.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-3.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -10,7 +10,7 @@ error: unsatisfied lifetime constraints\n LL | fn to_longer_lifetime<'r>(b_isize: invariant<'r>) -> invariant<'static> {\n    |                       -- lifetime `'r` defined here\n LL |     b_isize //~ ERROR mismatched types\n-   |     ^^^^^^^ return requires that `'r` must outlive `'static`\n+   |     ^^^^^^^ returning this value requires that `'r` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "1e1daa59019bd828caa7e8ff855a586c2fe5e924", "filename": "src/test/ui/regions/regions-infer-invariance-due-to-mutability-4.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-4.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -10,7 +10,7 @@ error: unsatisfied lifetime constraints\n LL | fn to_longer_lifetime<'r>(b_isize: Invariant<'r>) -> Invariant<'static> {\n    |                       -- lifetime `'r` defined here\n LL |     b_isize //~ ERROR mismatched types\n-   |     ^^^^^^^ return requires that `'r` must outlive `'static`\n+   |     ^^^^^^^ returning this value requires that `'r` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "072be9b5a994ec42902a93d5e4dc487d99c18909", "filename": "src/test/ui/regions/regions-infer-not-param.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-infer-not-param.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-infer-not-param.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-not-param.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -14,23 +14,23 @@ error: unsatisfied lifetime constraints\n   --> $DIR/regions-infer-not-param.rs:25:54\n    |\n LL | fn take_direct<'a,'b>(p: direct<'a>) -> direct<'b> { p } //~ ERROR mismatched types\n-   |                -- -- lifetime `'b` defined here      ^ return requires that `'a` must outlive `'b`\n+   |                -- -- lifetime `'b` defined here      ^ returning this value requires that `'a` must outlive `'b`\n    |                |\n    |                lifetime `'a` defined here\n \n error: unsatisfied lifetime constraints\n   --> $DIR/regions-infer-not-param.rs:29:63\n    |\n LL | fn take_indirect2<'a,'b>(p: indirect2<'a>) -> indirect2<'b> { p } //~ ERROR mismatched types\n-   |                   -- -- lifetime `'b` defined here            ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n+   |                   -- -- lifetime `'b` defined here            ^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n    |                   |\n    |                   lifetime `'a` defined here\n \n error: unsatisfied lifetime constraints\n   --> $DIR/regions-infer-not-param.rs:29:63\n    |\n LL | fn take_indirect2<'a,'b>(p: indirect2<'a>) -> indirect2<'b> { p } //~ ERROR mismatched types\n-   |                   -- -- lifetime `'b` defined here            ^ return requires that `'a` must outlive `'b`\n+   |                   -- -- lifetime `'b` defined here            ^ returning this value requires that `'a` must outlive `'b`\n    |                   |\n    |                   lifetime `'a` defined here\n "}, {"sha": "37454ff78a126d10c071024ef175d2c64178fcd6", "filename": "src/test/ui/regions/regions-reborrow-from-shorter-mut-ref-mut-ref.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref-mut-ref.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref-mut-ref.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref-mut-ref.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -14,7 +14,7 @@ LL |   fn copy_borrowed_ptr<'a, 'b, 'c>(p: &'a mut &'b mut &'c mut isize) -> &'b\n    | |                      lifetime `'a` defined here\n LL | |     &mut ***p //~ ERROR 14:5: 14:14: lifetime mismatch [E0623]\n LL | | }\n-   | |_^ requires that `'a` must outlive `'b`\n+   | |_^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n \n error: aborting due to previous error\n "}, {"sha": "455ee6f794936ffda9e812e35ae6d1ab1ace2966", "filename": "src/test/ui/regions/regions-reborrow-from-shorter-mut-ref.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -14,7 +14,7 @@ LL |   fn copy_borrowed_ptr<'a, 'b>(p: &'a mut &'b mut isize) -> &'b mut isize {\n    | |                      lifetime `'a` defined here\n LL | |     &mut **p //~ ERROR 16:5: 16:13: lifetime mismatch [E0623]\n LL | | }\n-   | |_^ requires that `'a` must outlive `'b`\n+   | |_^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n \n error: aborting due to previous error\n "}, {"sha": "29810f5128c9f0092e4c39cd22bcbe01111a32f1", "filename": "src/test/ui/regions/regions-ret-borrowed-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -8,7 +8,7 @@ error: unsatisfied lifetime constraints\n   --> $DIR/regions-ret-borrowed-1.rs:20:14\n    |\n LL |     with(|o| o)\n-   |           -- ^ return requires that `'1` must outlive `'2`\n+   |           -- ^ returning this value requires that `'1` must outlive `'2`\n    |           ||\n    |           |return type of closure is &'2 isize\n    |           has type `&'1 isize`"}, {"sha": "ab70e6a663039ef46570e85bf227481e917a44f7", "filename": "src/test/ui/regions/regions-ret-borrowed.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -8,7 +8,7 @@ error: unsatisfied lifetime constraints\n   --> $DIR/regions-ret-borrowed.rs:23:14\n    |\n LL |     with(|o| o)\n-   |           -- ^ return requires that `'1` must outlive `'2`\n+   |           -- ^ returning this value requires that `'1` must outlive `'2`\n    |           ||\n    |           |return type of closure is &'2 isize\n    |           has type `&'1 isize`"}, {"sha": "850226f60cf7014ec1a003aea4f70d8d029cfcc7", "filename": "src/test/ui/regions/regions-return-ref-to-upvar-issue-17403.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-return-ref-to-upvar-issue-17403.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-return-ref-to-upvar-issue-17403.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-return-ref-to-upvar-issue-17403.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -8,7 +8,7 @@ error: unsatisfied lifetime constraints\n   --> $DIR/regions-return-ref-to-upvar-issue-17403.rs:17:24\n    |\n LL |         let mut f = || &mut x; //~ ERROR cannot infer\n-   |                     -- ^^^^^^ return requires that `'1` must outlive `'2`\n+   |                     -- ^^^^^^ returning this value requires that `'1` must outlive `'2`\n    |                     ||\n    |                     |return type of closure is &'2 mut i32\n    |                     lifetime `'1` represents this closure's body"}, {"sha": "326111aab7ef0730be0a8aaaf7ca06d7edee05d2", "filename": "src/test/ui/regions/regions-static-bound.ll.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.ll.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.ll.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.ll.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -22,7 +22,7 @@ error: unsatisfied lifetime constraints\n LL | fn static_id_wrong_way<'a>(t: &'a ()) -> &'static () where 'static: 'a {\n    |                        -- lifetime `'a` defined here\n LL |     t //[ll]~ ERROR E0312\n-   |     ^ return requires that `'a` must outlive `'static`\n+   |     ^ returning this value requires that `'a` must outlive `'static`\n \n error[E0621]: explicit lifetime required in the type of `u`\n   --> $DIR/regions-static-bound.rs:25:5"}, {"sha": "326111aab7ef0730be0a8aaaf7ca06d7edee05d2", "filename": "src/test/ui/regions/regions-static-bound.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -22,7 +22,7 @@ error: unsatisfied lifetime constraints\n LL | fn static_id_wrong_way<'a>(t: &'a ()) -> &'static () where 'static: 'a {\n    |                        -- lifetime `'a` defined here\n LL |     t //[ll]~ ERROR E0312\n-   |     ^ return requires that `'a` must outlive `'static`\n+   |     ^ returning this value requires that `'a` must outlive `'static`\n \n error[E0621]: explicit lifetime required in the type of `u`\n   --> $DIR/regions-static-bound.rs:25:5"}, {"sha": "99bee4a36c1d1c5dfcd13137dd0fb4935d8d8a3f", "filename": "src/test/ui/regions/regions-trait-object-subtyping.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -22,7 +22,7 @@ LL | |     // Without knowing 'a:'b, we can't coerce\n LL | |     x //~ ERROR lifetime bound not satisfied\n LL | |      //~^ ERROR cannot infer an appropriate lifetime\n LL | | }\n-   | |_^ return requires that `'a` must outlive `'b`\n+   | |_^ returning this value requires that `'a` must outlive `'b`\n \n error: unsatisfied lifetime constraints\n   --> $DIR/regions-trait-object-subtyping.rs:32:5\n@@ -33,7 +33,7 @@ LL | fn foo4<'a:'b,'b>(x: Wrapper<&'a mut Dummy>) -> Wrapper<&'b mut Dummy> {\n    |         lifetime `'a` defined here\n LL |     // We can't coerce because it is packed in `Wrapper`\n LL |     x //~ ERROR mismatched types\n-   |     ^ return requires that `'b` must outlive `'a`\n+   |     ^ returning this value requires that `'b` must outlive `'a`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "799b0982b940f68747934c249a55bf27161b5d1d", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -32,7 +32,7 @@ LL |   fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n LL | |     //                      ^^^^^^^^^^^^^^^^^^^^^ bound *here* defaults to `'static`\n LL | |     Box::new(items.iter()) //~ ERROR cannot infer an appropriate lifetime\n LL | | }\n-   | |_^ return requires that `'1` must outlive `'static`\n+   | |_^ returning this value requires that `'1` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "877036530ed19c57e6f132ada81390fe93a637f4", "filename": "src/test/ui/variance/variance-btree-invariant-types.nll.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -76,31 +76,31 @@ error: unsatisfied lifetime constraints\n LL | fn iter_cov_key<'a, 'new>(v: IterMut<'a, &'static (), ()>) -> IterMut<'a, &'new (), ()> {\n    |                     ---- lifetime `'new` defined here\n LL |     v //~ ERROR mismatched types\n-   |     ^ return requires that `'new` must outlive `'static`\n+   |     ^ returning this value requires that `'new` must outlive `'static`\n \n error: unsatisfied lifetime constraints\n   --> $DIR/variance-btree-invariant-types.rs:19:5\n    |\n LL | fn iter_cov_val<'a, 'new>(v: IterMut<'a, (), &'static ()>) -> IterMut<'a, (), &'new ()> {\n    |                     ---- lifetime `'new` defined here\n LL |     v //~ ERROR mismatched types\n-   |     ^ return requires that `'new` must outlive `'static`\n+   |     ^ returning this value requires that `'new` must outlive `'static`\n \n error: unsatisfied lifetime constraints\n   --> $DIR/variance-btree-invariant-types.rs:22:5\n    |\n LL | fn iter_contra_key<'a, 'new>(v: IterMut<'a, &'new (), ()>) -> IterMut<'a, &'static (), ()> {\n    |                        ---- lifetime `'new` defined here\n LL |     v //~ ERROR mismatched types\n-   |     ^ return requires that `'new` must outlive `'static`\n+   |     ^ returning this value requires that `'new` must outlive `'static`\n \n error: unsatisfied lifetime constraints\n   --> $DIR/variance-btree-invariant-types.rs:25:5\n    |\n LL | fn iter_contra_val<'a, 'new>(v: IterMut<'a, (), &'new ()>) -> IterMut<'a, (), &'static ()> {\n    |                        ---- lifetime `'new` defined here\n LL |     v //~ ERROR mismatched types\n-   |     ^ return requires that `'new` must outlive `'static`\n+   |     ^ returning this value requires that `'new` must outlive `'static`\n \n error: unsatisfied lifetime constraints\n   --> $DIR/variance-btree-invariant-types.rs:30:5\n@@ -109,7 +109,7 @@ LL | fn occ_cov_key<'a, 'new>(v: OccupiedEntry<'a, &'static (), ()>)\n    |                    ---- lifetime `'new` defined here\n LL |                          -> OccupiedEntry<'a, &'new (), ()> {\n LL |     v //~ ERROR mismatched types\n-   |     ^ return requires that `'new` must outlive `'static`\n+   |     ^ returning this value requires that `'new` must outlive `'static`\n \n error: unsatisfied lifetime constraints\n   --> $DIR/variance-btree-invariant-types.rs:34:5\n@@ -118,7 +118,7 @@ LL | fn occ_cov_val<'a, 'new>(v: OccupiedEntry<'a, (), &'static ()>)\n    |                    ---- lifetime `'new` defined here\n LL |                          -> OccupiedEntry<'a, (), &'new ()> {\n LL |     v //~ ERROR mismatched types\n-   |     ^ return requires that `'new` must outlive `'static`\n+   |     ^ returning this value requires that `'new` must outlive `'static`\n \n error: unsatisfied lifetime constraints\n   --> $DIR/variance-btree-invariant-types.rs:38:5\n@@ -127,7 +127,7 @@ LL | fn occ_contra_key<'a, 'new>(v: OccupiedEntry<'a, &'new (), ()>)\n    |                       ---- lifetime `'new` defined here\n LL |                             -> OccupiedEntry<'a, &'static (), ()> {\n LL |     v //~ ERROR mismatched types\n-   |     ^ return requires that `'new` must outlive `'static`\n+   |     ^ returning this value requires that `'new` must outlive `'static`\n \n error: unsatisfied lifetime constraints\n   --> $DIR/variance-btree-invariant-types.rs:42:5\n@@ -136,7 +136,7 @@ LL | fn occ_contra_val<'a, 'new>(v: OccupiedEntry<'a, (), &'new ()>)\n    |                       ---- lifetime `'new` defined here\n LL |                             -> OccupiedEntry<'a, (), &'static ()> {\n LL |     v //~ ERROR mismatched types\n-   |     ^ return requires that `'new` must outlive `'static`\n+   |     ^ returning this value requires that `'new` must outlive `'static`\n \n error: unsatisfied lifetime constraints\n   --> $DIR/variance-btree-invariant-types.rs:47:5\n@@ -145,7 +145,7 @@ LL | fn vac_cov_key<'a, 'new>(v: VacantEntry<'a, &'static (), ()>)\n    |                    ---- lifetime `'new` defined here\n LL |                          -> VacantEntry<'a, &'new (), ()> {\n LL |     v //~ ERROR mismatched types\n-   |     ^ return requires that `'new` must outlive `'static`\n+   |     ^ returning this value requires that `'new` must outlive `'static`\n \n error: unsatisfied lifetime constraints\n   --> $DIR/variance-btree-invariant-types.rs:51:5\n@@ -154,7 +154,7 @@ LL | fn vac_cov_val<'a, 'new>(v: VacantEntry<'a, (), &'static ()>)\n    |                    ---- lifetime `'new` defined here\n LL |                          -> VacantEntry<'a, (), &'new ()> {\n LL |     v //~ ERROR mismatched types\n-   |     ^ return requires that `'new` must outlive `'static`\n+   |     ^ returning this value requires that `'new` must outlive `'static`\n \n error: unsatisfied lifetime constraints\n   --> $DIR/variance-btree-invariant-types.rs:55:5\n@@ -163,7 +163,7 @@ LL | fn vac_contra_key<'a, 'new>(v: VacantEntry<'a, &'new (), ()>)\n    |                       ---- lifetime `'new` defined here\n LL |                             -> VacantEntry<'a, &'static (), ()> {\n LL |     v //~ ERROR mismatched types\n-   |     ^ return requires that `'new` must outlive `'static`\n+   |     ^ returning this value requires that `'new` must outlive `'static`\n \n error: unsatisfied lifetime constraints\n   --> $DIR/variance-btree-invariant-types.rs:59:5\n@@ -172,7 +172,7 @@ LL | fn vac_contra_val<'a, 'new>(v: VacantEntry<'a, (), &'new ()>)\n    |                       ---- lifetime `'new` defined here\n LL |                             -> VacantEntry<'a, (), &'static ()> {\n LL |     v //~ ERROR mismatched types\n-   |     ^ return requires that `'new` must outlive `'static`\n+   |     ^ returning this value requires that `'new` must outlive `'static`\n \n error: aborting due to 12 previous errors\n "}, {"sha": "643b8587bea94595ea842c36d38d325b984cd1c5", "filename": "src/test/ui/variance/variance-use-contravariant-struct-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -13,7 +13,7 @@ LL | fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n    |        lifetime `'min` defined here\n ...\n LL |     v //~ ERROR mismatched types\n-   |     ^ return requires that `'min` must outlive `'max`\n+   |     ^ returning this value requires that `'min` must outlive `'max`\n \n error: aborting due to previous error\n "}, {"sha": "f0c9c44794df2807b49b23cc8da55c72768c995b", "filename": "src/test/ui/variance/variance-use-covariant-struct-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -13,7 +13,7 @@ LL | fn foo<'min,'max>(v: SomeStruct<&'min ()>)\n    |        lifetime `'min` defined here\n ...\n LL |     v //~ ERROR mismatched types\n-   |     ^ return requires that `'min` must outlive `'max`\n+   |     ^ returning this value requires that `'min` must outlive `'max`\n \n error: aborting due to previous error\n "}, {"sha": "8b6d6100af48e8a046e82edadc51ab1d36c60cd1", "filename": "src/test/ui/variance/variance-use-invariant-struct-1.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -19,7 +19,7 @@ LL | fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n    |        lifetime `'min` defined here\n ...\n LL |     v //~ ERROR mismatched types\n-   |     ^ return requires that `'min` must outlive `'max`\n+   |     ^ returning this value requires that `'min` must outlive `'max`\n \n error: unsatisfied lifetime constraints\n   --> $DIR/variance-use-invariant-struct-1.rs:29:5\n@@ -30,7 +30,7 @@ LL | fn bar<'min,'max>(v: SomeStruct<&'min ()>)\n    |        lifetime `'min` defined here\n ...\n LL |     v //~ ERROR mismatched types\n-   |     ^ return requires that `'min` must outlive `'max`\n+   |     ^ returning this value requires that `'min` must outlive `'max`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e563a4ffc56899b84417bd019d8197d499ac8f58", "filename": "src/test/ui/wf/wf-static-method.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de3dea2b76786077ad51b31d167867e5ecdfdbc/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.nll.stderr?ref=7de3dea2b76786077ad51b31d167867e5ecdfdbc", "patch": "@@ -37,7 +37,7 @@ LL | impl<'a, 'b> Foo<'a, 'b, Evil<'a, 'b>> for () {\n    |      lifetime `'a` defined here\n ...\n LL |         u //~ ERROR E0312\n-   |         ^ return requires that `'b` must outlive `'a`\n+   |         ^ returning this value requires that `'b` must outlive `'a`\n \n error: unsatisfied lifetime constraints\n   --> $DIR/wf-static-method.rs:43:9\n@@ -48,7 +48,7 @@ LL | impl<'a, 'b> Evil<'a, 'b> {\n    |      lifetime `'a` defined here\n LL |     fn inherent_evil(u: &'b u32) -> &'a u32 {\n LL |         u //~ ERROR E0312\n-   |         ^ return requires that `'b` must outlive `'a`\n+   |         ^ returning this value requires that `'b` must outlive `'a`\n \n error: aborting due to 2 previous errors\n "}]}