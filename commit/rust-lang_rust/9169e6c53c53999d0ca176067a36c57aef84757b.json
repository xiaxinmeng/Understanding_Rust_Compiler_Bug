{"sha": "9169e6c53c53999d0ca176067a36c57aef84757b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxNjllNmM1M2M1Mzk5OWQwY2ExNzYwNjdhMzZjNTdhZWY4NDc1N2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-26T13:03:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-26T13:03:08Z"}, "message": "Auto merge of #28629 - arielb1:supertrait-self, r=eddyb\n\nFixes #28576\r\n\r\nr? @eddyb", "tree": {"sha": "10b38c108f396e82799711f1a4b2720737619198", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10b38c108f396e82799711f1a4b2720737619198"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9169e6c53c53999d0ca176067a36c57aef84757b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9169e6c53c53999d0ca176067a36c57aef84757b", "html_url": "https://github.com/rust-lang/rust/commit/9169e6c53c53999d0ca176067a36c57aef84757b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9169e6c53c53999d0ca176067a36c57aef84757b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b94c4f5996e179662666a527354777017dce7b51", "url": "https://api.github.com/repos/rust-lang/rust/commits/b94c4f5996e179662666a527354777017dce7b51", "html_url": "https://github.com/rust-lang/rust/commit/b94c4f5996e179662666a527354777017dce7b51"}, {"sha": "77e8f33c3d7950e4fae8477e0420024a51488c91", "url": "https://api.github.com/repos/rust-lang/rust/commits/77e8f33c3d7950e4fae8477e0420024a51488c91", "html_url": "https://github.com/rust-lang/rust/commit/77e8f33c3d7950e4fae8477e0420024a51488c91"}], "stats": {"total": 93, "additions": 80, "deletions": 13}, "files": [{"sha": "25e6036e85ab47496685aa24c07d617ce99d3132", "filename": "src/librustc/middle/traits/error_reporting.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9169e6c53c53999d0ca176067a36c57aef84757b/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9169e6c53c53999d0ca176067a36c57aef84757b/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs?ref=9169e6c53c53999d0ca176067a36c57aef84757b", "patch": "@@ -248,9 +248,12 @@ pub fn report_selection_error<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n                     }\n \n                     ty::Predicate::ObjectSafe(trait_def_id) => {\n+                        let violations = object_safety_violations(\n+                            infcx.tcx, trait_def_id);\n                         report_object_safety_error(infcx.tcx,\n                                                    obligation.cause.span,\n                                                    trait_def_id,\n+                                                   violations,\n                                                    is_warning);\n                         note_obligation_cause(infcx, obligation);\n                     }\n@@ -286,7 +289,9 @@ pub fn report_selection_error<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n         }\n \n         TraitNotObjectSafe(did) => {\n-            report_object_safety_error(infcx.tcx, obligation.cause.span, did, is_warning);\n+            let violations = object_safety_violations(infcx.tcx, did);\n+            report_object_safety_error(infcx.tcx, obligation.cause.span, did,\n+                                       violations, is_warning);\n             note_obligation_cause(infcx, obligation);\n         }\n     }\n@@ -295,14 +300,15 @@ pub fn report_selection_error<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n pub fn report_object_safety_error<'tcx>(tcx: &ty::ctxt<'tcx>,\n                                         span: Span,\n                                         trait_def_id: DefId,\n+                                        violations: Vec<ObjectSafetyViolation>,\n                                         is_warning: bool)\n {\n     span_err_or_warn!(\n         is_warning, tcx.sess, span, E0038,\n         \"the trait `{}` cannot be made into an object\",\n         tcx.item_path_str(trait_def_id));\n \n-    for violation in object_safety_violations(tcx, trait_def_id) {\n+    for violation in violations {\n         match violation {\n             ObjectSafetyViolation::SizedSelf => {\n                 tcx.sess.fileline_note("}, {"sha": "5dc6f9454a881505ffcf541822237f084ed02891", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9169e6c53c53999d0ca176067a36c57aef84757b/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9169e6c53c53999d0ca176067a36c57aef84757b/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=9169e6c53c53999d0ca176067a36c57aef84757b", "patch": "@@ -37,6 +37,7 @@ pub use self::project::MismatchedProjectionTypes;\n pub use self::project::normalize;\n pub use self::project::Normalized;\n pub use self::object_safety::is_object_safe;\n+pub use self::object_safety::astconv_object_safety_violations;\n pub use self::object_safety::object_safety_violations;\n pub use self::object_safety::ObjectSafetyViolation;\n pub use self::object_safety::MethodViolationCode;"}, {"sha": "1762233b0449a1634679ba05236ca60dd900c035", "filename": "src/librustc/middle/traits/object_safety.rs", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9169e6c53c53999d0ca176067a36c57aef84757b/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9169e6c53c53999d0ca176067a36c57aef84757b/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs?ref=9169e6c53c53999d0ca176067a36c57aef84757b", "patch": "@@ -76,6 +76,27 @@ pub fn is_object_safe<'tcx>(tcx: &ty::ctxt<'tcx>,\n     result\n }\n \n+/// Returns the object safety violations that affect\n+/// astconv - currently, Self in supertraits. This is needed\n+/// because `object_safety_violations` can't be used during\n+/// type collection.\n+pub fn astconv_object_safety_violations<'tcx>(tcx: &ty::ctxt<'tcx>,\n+                                              trait_def_id: DefId)\n+                                              -> Vec<ObjectSafetyViolation<'tcx>>\n+{\n+    let mut violations = vec![];\n+\n+    if supertraits_reference_self(tcx, trait_def_id) {\n+        violations.push(ObjectSafetyViolation::SupertraitSelf);\n+    }\n+\n+    debug!(\"object_safety_violations_for_trait(trait_def_id={:?}) = {:?}\",\n+           trait_def_id,\n+           violations);\n+\n+    violations\n+}\n+\n pub fn object_safety_violations<'tcx>(tcx: &ty::ctxt<'tcx>,\n                                       trait_def_id: DefId)\n                                       -> Vec<ObjectSafetyViolation<'tcx>>\n@@ -118,9 +139,9 @@ fn object_safety_violations_for_trait<'tcx>(tcx: &ty::ctxt<'tcx>,\n     violations\n }\n \n-fn supertraits_reference_self<'tcx>(tcx: &ty::ctxt<'tcx>,\n-                                    trait_def_id: DefId)\n-                                    -> bool\n+pub fn supertraits_reference_self<'tcx>(tcx: &ty::ctxt<'tcx>,\n+                                        trait_def_id: DefId)\n+                                        -> bool\n {\n     let trait_def = tcx.lookup_trait_def(trait_def_id);\n     let trait_ref = trait_def.trait_ref.clone();"}, {"sha": "7b2bbbcc4a92a24e4d854a8c0f3030848c0b24bf", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9169e6c53c53999d0ca176067a36c57aef84757b/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9169e6c53c53999d0ca176067a36c57aef84757b/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=9169e6c53c53999d0ca176067a36c57aef84757b", "patch": "@@ -393,7 +393,7 @@ fn create_substs_for_ast_path<'tcx>(\n     let tcx = this.tcx();\n \n     debug!(\"create_substs_for_ast_path(decl_generics={:?}, self_ty={:?}, \\\n-           types_provided={:?}, region_substs={:?}\",\n+           types_provided={:?}, region_substs={:?})\",\n            decl_generics, self_ty, types_provided,\n            region_substs);\n \n@@ -474,6 +474,9 @@ fn create_substs_for_ast_path<'tcx>(\n         }\n     }\n \n+    debug!(\"create_substs_for_ast_path(decl_generics={:?}, self_ty={:?}) -> {:?}\",\n+           decl_generics, self_ty, substs);\n+\n     substs\n }\n \n@@ -741,6 +744,7 @@ fn ast_path_to_poly_trait_ref<'a,'tcx>(\n     poly_projections: &mut Vec<ty::PolyProjectionPredicate<'tcx>>)\n     -> ty::PolyTraitRef<'tcx>\n {\n+    debug!(\"ast_path_to_poly_trait_ref(trait_segment={:?})\", trait_segment);\n     // The trait reference introduces a binding level here, so\n     // we need to shift the `rscope`. It'd be nice if we could\n     // do away with this rscope stuff and work this knowledge\n@@ -774,6 +778,8 @@ fn ast_path_to_poly_trait_ref<'a,'tcx>(\n         poly_projections.extend(converted_bindings);\n     }\n \n+    debug!(\"ast_path_to_poly_trait_ref(trait_segment={:?}, projections={:?}) -> {:?}\",\n+           trait_segment, poly_projections, poly_trait_ref);\n     poly_trait_ref\n }\n \n@@ -1103,7 +1109,18 @@ fn make_object_type<'tcx>(this: &AstConv<'tcx>,\n         object.principal_trait_ref_with_self_ty(tcx, tcx.types.err);\n \n     // ensure the super predicates and stop if we encountered an error\n-    if this.ensure_super_predicates(span, object.principal_def_id()).is_err() {\n+    if this.ensure_super_predicates(span, principal.def_id()).is_err() {\n+        return tcx.types.err;\n+    }\n+\n+    // check that there are no gross object safety violations,\n+    // most importantly, that the supertraits don't contain Self,\n+    // to avoid ICE-s.\n+    let object_safety_violations =\n+        traits::astconv_object_safety_violations(tcx, principal.def_id());\n+    if !object_safety_violations.is_empty() {\n+        traits::report_object_safety_error(\n+            tcx, span, principal.def_id(), object_safety_violations, false);\n         return tcx.types.err;\n     }\n "}, {"sha": "30cb89cf0fde6f50eb358637962e9890c65c0d36", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9169e6c53c53999d0ca176067a36c57aef84757b/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9169e6c53c53999d0ca176067a36c57aef84757b/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=9169e6c53c53999d0ca176067a36c57aef84757b", "patch": "@@ -3355,5 +3355,5 @@ register_diagnostics! {\n     E0399, // trait items need to be implemented because the associated\n            // type `{}` was overridden\n     E0436, // functional record update requires a struct\n-    E0513, // no type for local variable ..\n+    E0513  // no type for local variable ..\n }"}, {"sha": "bd7186708a6c2b0020e4c29163b3b51364ed3ab5", "filename": "src/test/compile-fail/issue-28576.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9169e6c53c53999d0ca176067a36c57aef84757b/src%2Ftest%2Fcompile-fail%2Fissue-28576.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9169e6c53c53999d0ca176067a36c57aef84757b/src%2Ftest%2Fcompile-fail%2Fissue-28576.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28576.rs?ref=9169e6c53c53999d0ca176067a36c57aef84757b", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub trait Foo<RHS=Self> {\n+    type Assoc;\n+}\n+\n+pub trait Bar: Foo<Assoc=()> {\n+    fn new(&self, b: &\n+           Bar //~ ERROR the trait `Bar` cannot be made into an object\n+              <Assoc=()>\n+    );\n+}\n+\n+fn main() {}"}, {"sha": "12407f06ca06cec43dcbbfbd3f61887ae969c327", "filename": "src/test/compile-fail/object-safety-issue-22040.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9169e6c53c53999d0ca176067a36c57aef84757b/src%2Ftest%2Fcompile-fail%2Fobject-safety-issue-22040.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9169e6c53c53999d0ca176067a36c57aef84757b/src%2Ftest%2Fcompile-fail%2Fobject-safety-issue-22040.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-safety-issue-22040.rs?ref=9169e6c53c53999d0ca176067a36c57aef84757b", "patch": "@@ -20,12 +20,12 @@ trait Expr: Debug + PartialEq {\n #[derive(Debug)]\n struct SExpr<'x> {\n     elements: Vec<Box<Expr+ 'x>>,\n+    //~^ ERROR E0038\n }\n \n impl<'x> PartialEq for SExpr<'x> {\n     fn eq(&self, other:&SExpr<'x>) -> bool {\n         println!(\"L1: {} L2: {}\", self.elements.len(), other.elements.len());\n-        //~^ ERROR E0038\n         let result = self.elements.len() == other.elements.len();\n \n         println!(\"Got compare {}\", result);\n@@ -44,8 +44,8 @@ impl <'x> Expr for SExpr<'x> {\n }\n \n fn main() {\n-    let a: Box<Expr> = Box::new(SExpr::new()); //~ ERROR E0038\n-    let b: Box<Expr> = Box::new(SExpr::new()); //~ ERROR E0038\n+    let a: Box<Expr> = Box::new(SExpr::new());\n+    let b: Box<Expr> = Box::new(SExpr::new());\n \n     // assert_eq!(a , b);\n }"}, {"sha": "0a79ec30e4b942445b96da9bc08f970a4b023f01", "filename": "src/test/compile-fail/object-safety-supertrait-mentions-Self.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9169e6c53c53999d0ca176067a36c57aef84757b/src%2Ftest%2Fcompile-fail%2Fobject-safety-supertrait-mentions-Self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9169e6c53c53999d0ca176067a36c57aef84757b/src%2Ftest%2Fcompile-fail%2Fobject-safety-supertrait-mentions-Self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-safety-supertrait-mentions-Self.rs?ref=9169e6c53c53999d0ca176067a36c57aef84757b", "patch": "@@ -23,9 +23,9 @@ fn make_bar<T:Bar<u32>>(t: &T) -> &Bar<u32> {\n }\n \n fn make_baz<T:Baz>(t: &T) -> &Baz {\n+    //~^ ERROR E0038\n+    //~| NOTE the trait cannot use `Self` as a type parameter in the supertrait listing\n     t\n-        //~^ ERROR E0038\n-        //~| NOTE the trait cannot use `Self` as a type parameter in the supertrait listing\n }\n \n fn main() {"}]}