{"sha": "37afc528eacf4a0a874f8e97f6e7d4d7b63e8ac6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3YWZjNTI4ZWFjZjRhMGE4NzRmOGU5N2Y2ZTdkNGQ3YjYzZThhYzY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2014-11-10T13:41:27Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2014-11-10T13:44:04Z"}, "message": "Document ast::Ty_", "tree": {"sha": "2f0154f7e1fa362dcb6786db6710ea98e84a1bde", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f0154f7e1fa362dcb6786db6710ea98e84a1bde"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37afc528eacf4a0a874f8e97f6e7d4d7b63e8ac6", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37afc528eacf4a0a874f8e97f6e7d4d7b63e8ac6", "html_url": "https://github.com/rust-lang/rust/commit/37afc528eacf4a0a874f8e97f6e7d4d7b63e8ac6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37afc528eacf4a0a874f8e97f6e7d4d7b63e8ac6/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "830c82dd741b2d2a248515203a0f6a6662a0abe6", "url": "https://api.github.com/repos/rust-lang/rust/commits/830c82dd741b2d2a248515203a0f6a6662a0abe6", "html_url": "https://github.com/rust-lang/rust/commit/830c82dd741b2d2a248515203a0f6a6662a0abe6"}], "stats": {"total": 20, "additions": 18, "deletions": 2}, "files": [{"sha": "639adb450783fb21da7adcc63e6a5a8140cfb623", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/37afc528eacf4a0a874f8e97f6e7d4d7b63e8ac6/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37afc528eacf4a0a874f8e97f6e7d4d7b63e8ac6/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=37afc528eacf4a0a874f8e97f6e7d4d7b63e8ac6", "patch": "@@ -1084,24 +1084,40 @@ pub struct BareFnTy {\n }\n \n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+/// The different kinds of types recognized by the compiler\n pub enum Ty_ {\n+    /// The unit type (`()`)\n     TyNil,\n-    TyBot, /* bottom type */\n+    /// The bottom type (`!`)\n+    TyBot,\n     TyUniq(P<Ty>),\n+    /// An array (`[T]`)\n     TyVec(P<Ty>),\n+    /// A fixed length array (`[T, ..n]`)\n     TyFixedLengthVec(P<Ty>, P<Expr>),\n+    /// A raw pointer (`*const T` or `*mut T`)\n     TyPtr(MutTy),\n+    /// A reference (`&'a T` or `&'a mut T`)\n     TyRptr(Option<Lifetime>, MutTy),\n+    /// A closure (e.g. `|uint| -> bool`)\n     TyClosure(P<ClosureTy>),\n+    /// A procedure (e.g `proc(uint) -> bool`)\n     TyProc(P<ClosureTy>),\n+    /// A bare function (e.g. `fn(uint) -> bool`)\n     TyBareFn(P<BareFnTy>),\n+    /// A tuple (`(A, B, C, D,...)`)\n     TyTup(Vec<P<Ty>> ),\n+    /// A path (`module::module::...::Type`) or primitive\n+    ///\n+    /// Type parameters are stored in the Path itself\n     TyPath(Path, Option<TyParamBounds>, NodeId), // for #7264; see above\n-    TyPolyTraitRef(P<PolyTraitRef>), // a type like `for<'a> Foo<&'a Bar>`\n+    /// A type like `for<'a> Foo<&'a Bar>`\n+    TyPolyTraitRef(P<PolyTraitRef>),\n     /// A \"qualified path\", e.g. `<Vec<T> as SomeTrait>::SomeType`\n     TyQPath(P<QPath>),\n     /// No-op; kept solely so that we can pretty-print faithfully\n     TyParen(P<Ty>),\n+    /// Unused for now\n     TyTypeof(P<Expr>),\n     /// TyInfer means the type should be inferred instead of it having been\n     /// specified. This can appear anywhere in a type."}]}