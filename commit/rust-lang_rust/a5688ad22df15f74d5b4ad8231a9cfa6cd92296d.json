{"sha": "a5688ad22df15f74d5b4ad8231a9cfa6cd92296d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1Njg4YWQyMmRmMTVmNzRkNWI0YWQ4MjMxYTljZmE2Y2Q5MjI5NmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-12T06:46:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-12T06:46:42Z"}, "message": "auto merge of #15588 : alexcrichton/rust/issue-15478, r=cmr\n\nIf modified, you can safely unmap arbitrary memory. These fields are not\r\nintended to be modified, so read-only accessors are the only ones that are\r\nprovided.\r\n\r\nCloses #15478", "tree": {"sha": "e26226f485bd756ad682755ac95b6932bb86f002", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e26226f485bd756ad682755ac95b6932bb86f002"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5688ad22df15f74d5b4ad8231a9cfa6cd92296d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5688ad22df15f74d5b4ad8231a9cfa6cd92296d", "html_url": "https://github.com/rust-lang/rust/commit/a5688ad22df15f74d5b4ad8231a9cfa6cd92296d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5688ad22df15f74d5b4ad8231a9cfa6cd92296d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a2b7a5c19d4ae83c883065b4ee53b450d45afce", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a2b7a5c19d4ae83c883065b4ee53b450d45afce", "html_url": "https://github.com/rust-lang/rust/commit/8a2b7a5c19d4ae83c883065b4ee53b450d45afce"}, {"sha": "fb02d54b97e1710c4d6eeca6556b604188891271", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb02d54b97e1710c4d6eeca6556b604188891271", "html_url": "https://github.com/rust-lang/rust/commit/fb02d54b97e1710c4d6eeca6556b604188891271"}], "stats": {"total": 42, "additions": 25, "deletions": 17}, "files": [{"sha": "633bd3c041a3d586f2d35ee3e440587ef53bc17e", "filename": "src/libgreen/stack.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a5688ad22df15f74d5b4ad8231a9cfa6cd92296d/src%2Flibgreen%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5688ad22df15f74d5b4ad8231a9cfa6cd92296d/src%2Flibgreen%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fstack.rs?ref=a5688ad22df15f74d5b4ad8231a9cfa6cd92296d", "patch": "@@ -8,14 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::ptr;\n use std::sync::atomics;\n use std::os::{errno, page_size, MemoryMap, MapReadable, MapWritable,\n-              MapNonStandardFlags, MapVirtual, getenv};\n+              MapNonStandardFlags, getenv};\n use libc;\n \n /// A task's stack. The name \"Stack\" is a vestige of segmented stacks.\n pub struct Stack {\n-    buf: MemoryMap,\n+    buf: Option<MemoryMap>,\n     min_size: uint,\n     valgrind_id: libc::c_uint,\n }\n@@ -52,11 +53,11 @@ impl Stack {\n         // guaranteed to be aligned properly.\n         if !protect_last_page(&stack) {\n             fail!(\"Could not memory-protect guard page. stack={}, errno={}\",\n-                  stack.data, errno());\n+                  stack.data(), errno());\n         }\n \n         let mut stk = Stack {\n-            buf: stack,\n+            buf: Some(stack),\n             min_size: size,\n             valgrind_id: 0\n         };\n@@ -71,22 +72,23 @@ impl Stack {\n     /// Create a 0-length stack which starts (and ends) at 0.\n     pub unsafe fn dummy_stack() -> Stack {\n         Stack {\n-            buf: MemoryMap { data: 0 as *mut u8, len: 0, kind: MapVirtual },\n+            buf: None,\n             min_size: 0,\n             valgrind_id: 0\n         }\n     }\n \n     /// Point to the low end of the allocated stack\n     pub fn start(&self) -> *const uint {\n-        self.buf.data as *const uint\n+        self.buf.as_ref().map(|m| m.data() as *const uint)\n+            .unwrap_or(ptr::null())\n     }\n \n     /// Point one uint beyond the high end of the allocated stack\n     pub fn end(&self) -> *const uint {\n-        unsafe {\n-            self.buf.data.offset(self.buf.len as int) as *const uint\n-        }\n+        self.buf.as_ref().map(|buf| unsafe {\n+            buf.data().offset(buf.len() as int) as *const uint\n+        }).unwrap_or(ptr::null())\n     }\n }\n \n@@ -96,7 +98,7 @@ fn protect_last_page(stack: &MemoryMap) -> bool {\n         // This may seem backwards: the start of the segment is the last page?\n         // Yes! The stack grows from higher addresses (the end of the allocated\n         // block) to lower addresses (the start of the allocated block).\n-        let last_page = stack.data as *mut libc::c_void;\n+        let last_page = stack.data() as *mut libc::c_void;\n         libc::mprotect(last_page, page_size() as libc::size_t,\n                        libc::PROT_NONE) != -1\n     }\n@@ -106,7 +108,7 @@ fn protect_last_page(stack: &MemoryMap) -> bool {\n fn protect_last_page(stack: &MemoryMap) -> bool {\n     unsafe {\n         // see above\n-        let last_page = stack.data as *mut libc::c_void;\n+        let last_page = stack.data() as *mut libc::c_void;\n         let mut old_prot: libc::DWORD = 0;\n         libc::VirtualProtect(last_page, page_size() as libc::SIZE_T,\n                              libc::PAGE_NOACCESS,"}, {"sha": "1a5be089252de359155943187993d49be2f78d78", "filename": "src/libstd/os.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a5688ad22df15f74d5b4ad8231a9cfa6cd92296d/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5688ad22df15f74d5b4ad8231a9cfa6cd92296d/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=a5688ad22df15f74d5b4ad8231a9cfa6cd92296d", "patch": "@@ -1277,12 +1277,9 @@ pub fn page_size() -> uint {\n /// The memory map is released (unmapped) when the destructor is run, so don't\n /// let it leave scope by accident if you want it to stick around.\n pub struct MemoryMap {\n-    /// Pointer to the memory created or modified by this map.\n-    pub data: *mut u8,\n-    /// Number of bytes this map applies to\n-    pub len: uint,\n-    /// Type of mapping\n-    pub kind: MemoryMapKind,\n+    data: *mut u8,\n+    len: uint,\n+    kind: MemoryMapKind,\n }\n \n /// Type of memory map\n@@ -1617,6 +1614,15 @@ impl Drop for MemoryMap {\n     }\n }\n \n+impl MemoryMap {\n+    /// Returns the pointer to the memory created or modified by this map.\n+    pub fn data(&self) -> *mut u8 { self.data }\n+    /// Returns the number of bytes this map applies to.\n+    pub fn len(&self) -> uint { self.len }\n+    /// Returns the type of mapping this represents.\n+    pub fn kind(&self) -> MemoryMapKind { self.kind }\n+}\n+\n #[cfg(target_os = \"linux\")]\n pub mod consts {\n     pub use os::arch_consts::ARCH;"}]}