{"sha": "967366e988a811ae0fb47d3ad5ce0499a1414a43", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2NzM2NmU5ODhhODExYWUwZmI0N2QzYWQ1Y2UwNDk5YTE0MTRhNDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-13T04:45:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-13T04:45:13Z"}, "message": "auto merge of #14164 : alexcrichton/rust/rollup, r=alexcrichton", "tree": {"sha": "c42be234281609b117790f1c0b6d9db800543e5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c42be234281609b117790f1c0b6d9db800543e5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/967366e988a811ae0fb47d3ad5ce0499a1414a43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/967366e988a811ae0fb47d3ad5ce0499a1414a43", "html_url": "https://github.com/rust-lang/rust/commit/967366e988a811ae0fb47d3ad5ce0499a1414a43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/967366e988a811ae0fb47d3ad5ce0499a1414a43/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ee5e7f18511b95ddb83e725d46de0fee43825cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ee5e7f18511b95ddb83e725d46de0fee43825cf", "html_url": "https://github.com/rust-lang/rust/commit/1ee5e7f18511b95ddb83e725d46de0fee43825cf"}, {"sha": "5001a666650962f00137f126247c50fa1188a599", "url": "https://api.github.com/repos/rust-lang/rust/commits/5001a666650962f00137f126247c50fa1188a599", "html_url": "https://github.com/rust-lang/rust/commit/5001a666650962f00137f126247c50fa1188a599"}], "stats": {"total": 493, "additions": 277, "deletions": 216}, "files": [{"sha": "9e92504e5a77521bf4dc4a48a96ddcd4ac41e834", "filename": "man/rustc.1", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/man%2Frustc.1", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/man%2Frustc.1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/man%2Frustc.1?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -97,7 +97,7 @@ Set lint forbidden\n Set internal debugging options. Use \"-Z help\" to print available options.\n .TP\n \\fB\\-C\\fR FLAG[=VAL], \\fB\\-\\-codegen\\fR FLAG[=VAL]\n-Set a codegen-related flag to the value specifie.d Use \"-C help\" to print\n+Set a codegen-related flag to the value specified. Use \"-C help\" to print\n available flags. See CODEGEN OPTIONS below\n .TP\n \\fB\\-v\\fR, \\fB\\-\\-version\\fR\n@@ -119,7 +119,7 @@ is invoked.\n .TP\n \\fBtarget-cpu\\fR=help\n Selects a target processor. If the value is 'help', then a list of available\n-cpus is printed.\n+CPUs is printed.\n .TP\n \\fBtarget-feature\\fR='+feature1 -feature2'\n A space-separated list of features to enable or disable for the target. A\n@@ -132,7 +132,7 @@ cause rustc to print all known passes and exit. The passes specified are\n appended at the end of the normal pass manager.\n .TP\n \\fBllvm-args\\fR='-arg1 -arg2'\n-A space-separted list of argument to pass through to LLVM.\n+A space-separated list of arguments to pass through to LLVM.\n .TP\n \\fBsave-temps\\fR\n If specified, the compiler will save more files (.bc, .o, .no-opt.bc) generated"}, {"sha": "5c0bffda7be24525dcd8240b16226f1e738d9dff", "filename": "mk/main.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -13,7 +13,7 @@\n ######################################################################\n \n # The version number\n-CFG_RELEASE_NUM=0.11\n+CFG_RELEASE_NUM=0.11.0\n CFG_RELEASE_LABEL=-pre\n \n ifndef CFG_ENABLE_NIGHTLY"}, {"sha": "759a21af0ce5f1d4de1a19928f0ff4e572f26c0c", "filename": "src/doc/README.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fdoc%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fdoc%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2FREADME.md?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -53,12 +53,12 @@ To generate .pot and .po files, do something like:\n ~~~~\n po4a --copyright-holder=\"The Rust Project Developers\" \\\n     --package-name=\"Rust\" \\\n-    --package-version=\"0.11-pre\" \\\n+    --package-version=\"0.11.0-pre\" \\\n     -M UTF-8 -L UTF-8 \\\n     src/doc/po4a.conf\n ~~~~\n \n-(the version number must be changed if it is not 0.11-pre now.)\n+(the version number must be changed if it is not 0.11.0-pre now.)\n \n Now you can translate documents with .po files, commonly used with gettext. If\n you are not familiar with gettext-based translation, please read the online"}, {"sha": "f387f3be9f36311f38c1fa133e774070c6967e0a", "filename": "src/doc/po/ja/complement-cheatsheet.md.po", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fdoc%2Fpo%2Fja%2Fcomplement-cheatsheet.md.po", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fdoc%2Fpo%2Fja%2Fcomplement-cheatsheet.md.po", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fpo%2Fja%2Fcomplement-cheatsheet.md.po?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -5,7 +5,7 @@\n #\n msgid \"\"\n msgstr \"\"\n-\"Project-Id-Version: Rust 0.11-pre\\n\"\n+\"Project-Id-Version: Rust 0.11.0-pre\\n\"\n \"POT-Creation-Date: 2014-02-03 08:13+0900\\n\"\n \"PO-Revision-Date: 2014-01-13 12:01+0900\\n\"\n \"Last-Translator: Automatically generated\\n\""}, {"sha": "7744df579a0e6bc7aa44b364508be8b557b5e1fe", "filename": "src/doc/po/ja/complement-lang-faq.md.po", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fdoc%2Fpo%2Fja%2Fcomplement-lang-faq.md.po", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fdoc%2Fpo%2Fja%2Fcomplement-lang-faq.md.po", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fpo%2Fja%2Fcomplement-lang-faq.md.po?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -5,7 +5,7 @@\n #\n msgid \"\"\n msgstr \"\"\n-\"Project-Id-Version: Rust 0.11-pre\\n\"\n+\"Project-Id-Version: Rust 0.11.0-pre\\n\"\n \"POT-Creation-Date: 2014-02-03 08:13+0900\\n\"\n \"PO-Revision-Date: 2014-01-13 12:01+0900\\n\"\n \"Last-Translator: Automatically generated\\n\""}, {"sha": "0361c67b9dc360e21251d3ed6cbeb7deafe8d8e4", "filename": "src/doc/po/ja/complement-project-faq.md.po", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fdoc%2Fpo%2Fja%2Fcomplement-project-faq.md.po", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fdoc%2Fpo%2Fja%2Fcomplement-project-faq.md.po", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fpo%2Fja%2Fcomplement-project-faq.md.po?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -5,7 +5,7 @@\n #\n msgid \"\"\n msgstr \"\"\n-\"Project-Id-Version: Rust 0.11-pre\\n\"\n+\"Project-Id-Version: Rust 0.11.0-pre\\n\"\n \"POT-Creation-Date: 2014-02-03 08:13+0900\\n\"\n \"PO-Revision-Date: 2014-01-13 12:01+0900\\n\"\n \"Last-Translator: Automatically generated\\n\""}, {"sha": "819e12ccd13a7ae47cc06c30c7b1600e44a48d36", "filename": "src/doc/po/ja/complement-usage-faq.md.po", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fdoc%2Fpo%2Fja%2Fcomplement-usage-faq.md.po", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fdoc%2Fpo%2Fja%2Fcomplement-usage-faq.md.po", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fpo%2Fja%2Fcomplement-usage-faq.md.po?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -5,7 +5,7 @@\n #\n msgid \"\"\n msgstr \"\"\n-\"Project-Id-Version: Rust 0.11-pre\\n\"\n+\"Project-Id-Version: Rust 0.11.0-pre\\n\"\n \"POT-Creation-Date: 2014-02-03 08:13+0900\\n\"\n \"PO-Revision-Date: 2014-02-03 08:13+0900\\n\"\n \"Last-Translator: Automatically generated\\n\""}, {"sha": "69f5ea1c733566c7a9dc0a244540fe50be0512aa", "filename": "src/doc/po/ja/guide-conditions.md.po", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fdoc%2Fpo%2Fja%2Fguide-conditions.md.po", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fdoc%2Fpo%2Fja%2Fguide-conditions.md.po", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fpo%2Fja%2Fguide-conditions.md.po?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -5,7 +5,7 @@\n #\n msgid \"\"\n msgstr \"\"\n-\"Project-Id-Version: Rust 0.11-pre\\n\"\n+\"Project-Id-Version: Rust 0.11.0-pre\\n\"\n \"POT-Creation-Date: 2014-02-03 08:13+0900\\n\"\n \"PO-Revision-Date: 2014-01-13 12:01+0900\\n\"\n \"Last-Translator: Automatically generated\\n\""}, {"sha": "d20ad9568730411c3deeca270e7cacd371f8c010", "filename": "src/doc/po/ja/guide-container.md.po", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fdoc%2Fpo%2Fja%2Fguide-container.md.po", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fdoc%2Fpo%2Fja%2Fguide-container.md.po", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fpo%2Fja%2Fguide-container.md.po?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -5,7 +5,7 @@\n #\n msgid \"\"\n msgstr \"\"\n-\"Project-Id-Version: Rust 0.11-pre\\n\"\n+\"Project-Id-Version: Rust 0.11.0-pre\\n\"\n \"POT-Creation-Date: 2014-02-03 08:13+0900\\n\"\n \"PO-Revision-Date: 2014-01-13 12:01+0900\\n\"\n \"Last-Translator: Automatically generated\\n\""}, {"sha": "fe7d1d911efdd43b2f491f62164e1e8add479b5e", "filename": "src/doc/po/ja/guide-ffi.md.po", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fdoc%2Fpo%2Fja%2Fguide-ffi.md.po", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fdoc%2Fpo%2Fja%2Fguide-ffi.md.po", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fpo%2Fja%2Fguide-ffi.md.po?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -5,7 +5,7 @@\n #\n msgid \"\"\n msgstr \"\"\n-\"Project-Id-Version: Rust 0.11-pre\\n\"\n+\"Project-Id-Version: Rust 0.11.0-pre\\n\"\n \"POT-Creation-Date: 2014-02-03 08:13+0900\\n\"\n \"PO-Revision-Date: 2014-01-13 12:01+0900\\n\"\n \"Last-Translator: Automatically generated\\n\""}, {"sha": "44984c4a25fb7ea12cbb9830c844eab3d6a4c308", "filename": "src/doc/po/ja/guide-lifetimes.md.po", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fdoc%2Fpo%2Fja%2Fguide-lifetimes.md.po", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fdoc%2Fpo%2Fja%2Fguide-lifetimes.md.po", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fpo%2Fja%2Fguide-lifetimes.md.po?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -5,7 +5,7 @@\n #\n msgid \"\"\n msgstr \"\"\n-\"Project-Id-Version: Rust 0.11-pre\\n\"\n+\"Project-Id-Version: Rust 0.11.0-pre\\n\"\n \"POT-Creation-Date: 2014-02-03 08:13+0900\\n\"\n \"PO-Revision-Date: 2014-01-13 12:01+0900\\n\"\n \"Last-Translator: Automatically generated\\n\""}, {"sha": "39d71dafd8c9fa2f01536b3fa422174205cee6a8", "filename": "src/doc/po/ja/guide-macros.md.po", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fdoc%2Fpo%2Fja%2Fguide-macros.md.po", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fdoc%2Fpo%2Fja%2Fguide-macros.md.po", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fpo%2Fja%2Fguide-macros.md.po?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -5,7 +5,7 @@\n #\n msgid \"\"\n msgstr \"\"\n-\"Project-Id-Version: Rust 0.11-pre\\n\"\n+\"Project-Id-Version: Rust 0.11.0-pre\\n\"\n \"POT-Creation-Date: 2014-02-03 08:13+0900\\n\"\n \"PO-Revision-Date: 2014-01-13 12:01+0900\\n\"\n \"Last-Translator: Automatically generated\\n\""}, {"sha": "f1005caedd5c117af2ff08ca8238d3781efbf5f9", "filename": "src/doc/po/ja/guide-pointers.md.po", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fdoc%2Fpo%2Fja%2Fguide-pointers.md.po", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fdoc%2Fpo%2Fja%2Fguide-pointers.md.po", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fpo%2Fja%2Fguide-pointers.md.po?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -5,7 +5,7 @@\n #\n msgid \"\"\n msgstr \"\"\n-\"Project-Id-Version: Rust 0.11-pre\\n\"\n+\"Project-Id-Version: Rust 0.11.0-pre\\n\"\n \"POT-Creation-Date: 2014-02-03 08:13+0900\\n\"\n \"PO-Revision-Date: 2014-01-13 12:01+0900\\n\"\n \"Last-Translator: Automatically generated\\n\""}, {"sha": "216a854db2a26c04273fe3fa2bcb86daaed71249", "filename": "src/doc/po/ja/guide-runtime.md.po", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fdoc%2Fpo%2Fja%2Fguide-runtime.md.po", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fdoc%2Fpo%2Fja%2Fguide-runtime.md.po", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fpo%2Fja%2Fguide-runtime.md.po?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -5,7 +5,7 @@\n #\n msgid \"\"\n msgstr \"\"\n-\"Project-Id-Version: Rust 0.11-pre\\n\"\n+\"Project-Id-Version: Rust 0.11.0-pre\\n\"\n \"POT-Creation-Date: 2014-02-03 08:13+0900\\n\"\n \"PO-Revision-Date: 2014-02-03 08:13+0900\\n\"\n \"Last-Translator: Automatically generated\\n\""}, {"sha": "480d1351e56432b409692ba76e2bc9ec700573ee", "filename": "src/doc/po/ja/guide-tasks.md.po", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fdoc%2Fpo%2Fja%2Fguide-tasks.md.po", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fdoc%2Fpo%2Fja%2Fguide-tasks.md.po", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fpo%2Fja%2Fguide-tasks.md.po?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -5,7 +5,7 @@\n #\n msgid \"\"\n msgstr \"\"\n-\"Project-Id-Version: Rust 0.11-pre\\n\"\n+\"Project-Id-Version: Rust 0.11.0-pre\\n\"\n \"POT-Creation-Date: 2014-02-03 08:13+0900\\n\"\n \"PO-Revision-Date: 2014-01-13 12:01+0900\\n\"\n \"Last-Translator: Automatically generated\\n\""}, {"sha": "55a9e00f54d27aa17b81765b25726097dc6806e0", "filename": "src/doc/po/ja/guide-testing.md.po", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fdoc%2Fpo%2Fja%2Fguide-testing.md.po", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fdoc%2Fpo%2Fja%2Fguide-testing.md.po", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fpo%2Fja%2Fguide-testing.md.po?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -5,7 +5,7 @@\n #\n msgid \"\"\n msgstr \"\"\n-\"Project-Id-Version: Rust 0.11-pre\\n\"\n+\"Project-Id-Version: Rust 0.11.0-pre\\n\"\n \"POT-Creation-Date: 2014-02-03 08:13+0900\\n\"\n \"PO-Revision-Date: 2014-01-13 12:01+0900\\n\"\n \"Last-Translator: Automatically generated\\n\""}, {"sha": "6a2e512da26548b7d9575e1d63114de5500f8546", "filename": "src/doc/po/ja/index.md.po", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fdoc%2Fpo%2Fja%2Findex.md.po", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fdoc%2Fpo%2Fja%2Findex.md.po", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fpo%2Fja%2Findex.md.po?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -5,7 +5,7 @@\n #\n msgid \"\"\n msgstr \"\"\n-\"Project-Id-Version: Rust 0.11-pre\\n\"\n+\"Project-Id-Version: Rust 0.11.0-pre\\n\"\n \"POT-Creation-Date: 2014-02-03 08:13+0900\\n\"\n \"PO-Revision-Date: 2014-01-14 21:02+0900\\n\"\n \"Last-Translator: Automatically generated\\n\""}, {"sha": "eaf954333152e32dd7fbea12aa18eebc485c4a44", "filename": "src/doc/po/ja/rustdoc.md.po", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fdoc%2Fpo%2Fja%2Frustdoc.md.po", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fdoc%2Fpo%2Fja%2Frustdoc.md.po", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fpo%2Fja%2Frustdoc.md.po?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -5,7 +5,7 @@\n #\n msgid \"\"\n msgstr \"\"\n-\"Project-Id-Version: Rust 0.11-pre\\n\"\n+\"Project-Id-Version: Rust 0.11.0-pre\\n\"\n \"POT-Creation-Date: 2014-02-03 08:13+0900\\n\"\n \"PO-Revision-Date: 2014-01-13 12:01+0900\\n\"\n \"Last-Translator: Automatically generated\\n\""}, {"sha": "870b9dcb70bb32798a43d7fa23a5bcd0f7c9a794", "filename": "src/doc/rust.md", "status": "modified", "additions": 35, "deletions": 37, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -208,7 +208,7 @@ The keywords are the following strings:\n ~~~~ {.notrust .keyword}\n as\n box break\n-crate\n+continue crate\n else enum extern\n false fn for\n if impl in\n@@ -2924,18 +2924,16 @@ while i < 10 {\n \n ### Infinite loops\n \n-The keyword `loop` in Rust appears both in _loop expressions_ and in _continue expressions_.\n-A loop expression denotes an infinite loop;\n-see [Continue expressions](#continue-expressions) for continue expressions.\n+A `loop` expression denotes an infinite loop.\n \n ~~~~ {.notrust .ebnf .gram}\n loop_expr : [ lifetime ':' ] \"loop\" '{' block '}';\n ~~~~\n \n A `loop` expression may optionally have a _label_.\n If a label is present,\n-then labeled `break` and `loop` expressions nested within this loop may exit out of this loop or return control to its head.\n-See [Break expressions](#break-expressions).\n+then labeled `break` and `continue` expressions nested within this loop may exit out of this loop or return control to its head.\n+See [Break expressions](#break-expressions) and [Continue expressions](#continue-expressions).\n \n ### Break expressions\n \n@@ -2953,21 +2951,21 @@ but must enclose it.\n ### Continue expressions\n \n ~~~~ {.notrust .ebnf .gram}\n-continue_expr : \"loop\" [ lifetime ];\n+continue_expr : \"continue\" [ lifetime ];\n ~~~~\n \n-A continue expression, written `loop`, also has an optional `label`.\n+A `continue` expression has an optional `label`.\n If the label is absent,\n-then executing a `loop` expression immediately terminates the current iteration of the innermost loop enclosing it,\n+then executing a `continue` expression immediately terminates the current iteration of the innermost loop enclosing it,\n returning control to the loop *head*.\n In the case of a `while` loop,\n the head is the conditional expression controlling the loop.\n In the case of a `for` loop, the head is the call-expression controlling the loop.\n-If the label is present, then `loop foo` returns control to the head of the loop with label `foo`,\n+If the label is present, then `continue foo` returns control to the head of the loop with label `foo`,\n which need not be the innermost label enclosing the `break` expression,\n but must enclose it.\n \n-A `loop` expression is only permitted in the body of a loop.\n+A `continue` expression is only permitted in the body of a loop.\n \n ### For expressions\n \n@@ -4008,45 +4006,45 @@ compiler must at some point make a choice between these two formats. With this\n in mind, the compiler follows these rules when determining what format of\n dependencies will be used:\n \n-1. If a dynamic library is being produced, then it is required for all upstream\n-   Rust dependencies to also be dynamic. This is a limitation of the current\n-   implementation of the linkage model.  The reason behind this limitation is to\n-   prevent multiple copies of the same upstream library from showing up, and in\n-   the future it is planned to support a mixture of dynamic and static linking.\n-\n-   When producing a dynamic library, the compiler will generate an error if an\n-   upstream dependency could not be found, and also if an upstream dependency\n-   could only be found in an `rlib` format. Remember that `staticlib` formats\n-   are always ignored by `rustc` for crate-linking purposes.\n-\n-2. If a static library is being produced, all upstream dependencies are\n+1. If a static library is being produced, all upstream dependencies are\n    required to be available in `rlib` formats. This requirement stems from the\n-   same reasons that a dynamic library must have all dynamic dependencies.\n+   reason that a dynamic library cannot be converted into a static format.\n \n    Note that it is impossible to link in native dynamic dependencies to a static\n    library, and in this case warnings will be printed about all unlinked native\n    dynamic dependencies.\n \n-3. If an `rlib` file is being produced, then there are no restrictions on what\n+2. If an `rlib` file is being produced, then there are no restrictions on what\n    format the upstream dependencies are available in. It is simply required that\n    all upstream dependencies be available for reading metadata from.\n \n    The reason for this is that `rlib` files do not contain any of their upstream\n    dependencies. It wouldn't be very efficient for all `rlib` files to contain a\n    copy of `libstd.rlib`!\n \n-4. If an executable is being produced, then things get a little interesting. As\n-   with the above limitations in dynamic and static libraries, it is required\n-   for all upstream dependencies to be in the same format. The next question is\n-   whether to prefer a dynamic or a static format. The compiler currently favors\n-   static linking over dynamic linking, but this can be inverted with the `-C\n-   prefer-dynamic` flag to the compiler.\n-\n-   What this means is that first the compiler will attempt to find all upstream\n-   dependencies as `rlib` files, and if successful, it will create a statically\n-   linked executable. If an upstream dependency is missing as an `rlib` file,\n-   then the compiler will force all dependencies to be dynamic and will generate\n-   errors if dynamic versions could not be found.\n+3. If an executable is being produced and the `-C prefer-dynamic` flag is not\n+   specified, then dependencies are first attempted to be found in the `rlib`\n+   format. If some dependencies are not available in an rlib format, then\n+   dynamic linking is attempted (see below).\n+\n+4. If a dynamic library or an executable that is being dynamically linked is\n+   being produced, then the compiler will attempt to reconcile the available\n+   dependencies in either the rlib or dylib format to create a final product.\n+\n+   A major goal of the compiler is to ensure that a library never appears more\n+   than once in any artifact. For example, if dynamic libraries B and C were\n+   each statically linked to library A, then a crate could not link to B and C\n+   together because there would be two copies of A. The compiler allows mixing\n+   the rlib and dylib formats, but this restriction must be satisfied.\n+\n+   The compiler currently implements no method of hinting what format a library\n+   should be linked with. When dynamically linking, the compiler will attempt to\n+   maximize dynamic dependencies while still allowing some dependencies to be\n+   linked in via an rlib.\n+\n+   For most situations, having all libraries available as a dylib is recommended\n+   if dynamically linking. For other situations, the compiler will emit a\n+   warning if it is unable to determine which formats to link each library with.\n \n In general, `--crate-type=bin` or `--crate-type=lib` should be sufficient for\n all compilation needs, and the other options are just available if more"}, {"sha": "454d5cf9ddfa7e54e325717be8c13e09294adda8", "filename": "src/doc/tutorial.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fdoc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fdoc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftutorial.md?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -2155,7 +2155,7 @@ unless they contain references.\n \n * `Share` - Types that are *threadsafe*\n These are types that are safe to be used across several threads with access to\n-a `&T` pointer. `MutexArc` is an example of a *sharable* type with internal mutable data.\n+a `&T` pointer. `Mutex<T>` is an example of a *sharable* type with internal mutable data.\n \n * `'static` - Non-borrowed types.\n These are types that do not contain any data whose lifetime is bound to"}, {"sha": "91c01b178075d6fee9f452b80a8751dc0ba94fb6", "filename": "src/etc/check-binaries.py", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fetc%2Fcheck-binaries.py", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fetc%2Fcheck-binaries.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcheck-binaries.py?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -1,4 +1,6 @@\n-# Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+#!/usr/bin/env python\n+#\n+# Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n # file at the top-level directory of this distribution and at\n # http://rust-lang.org/COPYRIGHT.\n #"}, {"sha": "55428a6fcc4b6927bb3bda4e33a53a3cae3ead8c", "filename": "src/etc/check-summary.py", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fetc%2Fcheck-summary.py", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fetc%2Fcheck-summary.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcheck-summary.py?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -1,3 +1,5 @@\n+#!/usr/bin/env python\n+#\n # Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n # file at the top-level directory of this distribution and at\n # http://rust-lang.org/COPYRIGHT."}, {"sha": "175592d792bbff5e6b9a1a31e5e9204d02fbe151", "filename": "src/etc/emacs/rust-mode.el", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fetc%2Femacs%2Frust-mode.el", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fetc%2Femacs%2Frust-mode.el", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Femacs%2Frust-mode.el?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -217,7 +217,7 @@\n       1 font-lock-preprocessor-face)\n \n      ;; Syntax extension invocations like `foo!`, highlight including the !\n-     (,(concat (rust-re-grab (concat rust-re-ident \"!\")) \"[({[:space:]]\")\n+     (,(concat (rust-re-grab (concat rust-re-ident \"!\")) \"[({[:space:][]\")\n       1 font-lock-preprocessor-face)\n \n      ;; Field names like `foo:`, highlight excluding the :"}, {"sha": "53781652902f5771eec5660a008062e2afa6f453", "filename": "src/etc/extract_grammar.py", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fetc%2Fextract_grammar.py", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fetc%2Fextract_grammar.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fextract_grammar.py?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -1,3 +1,5 @@\n+#!/usr/bin/env python\n+#\n # Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n # file at the top-level directory of this distribution and at\n # http://rust-lang.org/COPYRIGHT."}, {"sha": "ec87c321f56f93a5a9b0957a28f4c9a269508113", "filename": "src/etc/get-snapshot.py", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fetc%2Fget-snapshot.py", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fetc%2Fget-snapshot.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fget-snapshot.py?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -1,4 +1,6 @@\n-# Copyright 2011-2013 The Rust Project Developers. See the COPYRIGHT\n+#!/usr/bin/env python\n+#\n+# Copyright 2011-2014 The Rust Project Developers. See the COPYRIGHT\n # file at the top-level directory of this distribution and at\n # http://rust-lang.org/COPYRIGHT.\n #"}, {"sha": "c0289fc6d83e188778feb0972428294f7d11b1b1", "filename": "src/etc/kate/rust.xml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fetc%2Fkate%2Frust.xml", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fetc%2Fkate%2Frust.xml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fkate%2Frust.xml?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -7,7 +7,7 @@\n \t<!ENTITY rustIdent \"[a-zA-Z_][a-zA-Z_0-9]*\">\n \t<!ENTITY rustIntSuf \"([iu](8|16|32|64)?)?\">\n ]>\n-<language name=\"Rust\" version=\"0.11-pre\" kateversion=\"2.4\" section=\"Sources\" extensions=\"*.rs\" mimetype=\"text/x-rust\" priority=\"15\">\n+<language name=\"Rust\" version=\"0.11.0-pre\" kateversion=\"2.4\" section=\"Sources\" extensions=\"*.rs\" mimetype=\"text/x-rust\" priority=\"15\">\n <highlighting>\n \t<list name=\"fn\">\n \t\t<item> fn </item>"}, {"sha": "31a69a581e4e216f83d9d588cf36816cf713a5ee", "filename": "src/etc/make-snapshot.py", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fetc%2Fmake-snapshot.py", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fetc%2Fmake-snapshot.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fmake-snapshot.py?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -1,4 +1,6 @@\n-# Copyright 2011-2013 The Rust Project Developers. See the COPYRIGHT\n+#!/usr/bin/env python\n+#\n+# Copyright 2011-2014 The Rust Project Developers. See the COPYRIGHT\n # file at the top-level directory of this distribution and at\n # http://rust-lang.org/COPYRIGHT.\n #"}, {"sha": "f9c27ae6ae59d9e47a20145fa626d8e04f09e899", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -15,7 +15,7 @@\n //! of individual objects while the arena itself is still alive. The benefit\n //! of an arena is very fast allocation; just a pointer bump.\n \n-#![crate_id = \"arena#0.11-pre\"]\n+#![crate_id = \"arena#0.11.0-pre\"]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![license = \"MIT/ASL2\"]"}, {"sha": "d45308bf193f40d61b3aff4459ea9521da18322f", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -12,7 +12,7 @@\n  * Collection types.\n  */\n \n-#![crate_id = \"collections#0.11-pre\"]\n+#![crate_id = \"collections#0.11.0-pre\"]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![license = \"MIT/ASL2\"]"}, {"sha": "06bd46fe9ad979c9bf9ed9643ee6d0eac617c2a1", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -10,7 +10,7 @@\n \n //! The Rust core library\n \n-#![crate_id = \"core#0.11-pre\"]\n+#![crate_id = \"core#0.11.0-pre\"]\n #![license = \"MIT/ASL2\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "886b7315152b8e1eb54bbe94f32051ebf9adbf80", "filename": "src/libcore/option.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -30,20 +30,23 @@\n //! of a value and take action, always accounting for the `None` case.\n //!\n //! ```\n-//! # // FIXME This is not the greatest first example\n-//! // cow_says contains the word \"moo\"\n-//! let cow_says = Some(\"moo\");\n-//! // dog_says does not contain a value\n-//! let dog_says: Option<&str> = None;\n+//! fn divide(numerator: f64, denominator: f64) -> Option<f64> {\n+//!     if denominator == 0.0 {\n+//!         None\n+//!     } else {\n+//!         Some(numerator / denominator)\n+//!     }\n+//! }\n+//!\n+//! // The return value of the function is an option\n+//! let result = divide(2.0, 3.0);\n //!\n //! // Pattern match to retrieve the value\n-//! match (cow_says, dog_says) {\n-//!     (Some(cow_words), Some(dog_words)) => {\n-//!         println!(\"Cow says {} and dog says {}!\", cow_words, dog_words);\n-//!     }\n-//!     (Some(cow_words), None) => println!(\"Cow says {}\", cow_words),\n-//!     (None, Some(dog_words)) => println!(\"Dog says {}\", dog_words),\n-//!     (None, None) => println!(\"Cow and dog are suspiciously silent\")\n+//! match result {\n+//!     // The division was valid\n+//!     Some(x) => println!(\"Result: {}\", x),\n+//!     // The division was invalid\n+//!     None    => println!(\"Cannot divide by 0\")\n //! }\n //! ```\n //!"}, {"sha": "d08e5492c82ad9e3f5fafac00f9bf171835bd112", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 35, "deletions": 24, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -505,7 +505,7 @@ pub trait ImmutableVector<'a, T> {\n     fn bsearch(&self, f: |&T| -> Ordering) -> Option<uint>;\n \n     /**\n-     * Returns a mutable reference to the first element in this slice\n+     * Returns an immutable reference to the first element in this slice\n      * and adjusts the slice in place so that it no longer contains\n      * that element. O(1).\n      *\n@@ -523,7 +523,7 @@ pub trait ImmutableVector<'a, T> {\n     fn shift_ref(&mut self) -> Option<&'a T>;\n \n     /**\n-     * Returns a mutable reference to the last element in this slice\n+     * Returns an immutable reference to the last element in this slice\n      * and adjusts the slice in place so that it no longer contains\n      * that element. O(1).\n      *\n@@ -693,18 +693,22 @@ impl<'a,T> ImmutableVector<'a, T> for &'a [T] {\n     }\n \n     fn shift_ref(&mut self) -> Option<&'a T> {\n-        if self.len() == 0 { return None; }\n         unsafe {\n             let s: &mut Slice<T> = transmute(self);\n-            Some(&*raw::shift_ptr(s))\n+            match raw::shift_ptr(s) {\n+                Some(p) => Some(&*p),\n+                None => None\n+            }\n         }\n     }\n \n     fn pop_ref(&mut self) -> Option<&'a T> {\n-        if self.len() == 0 { return None; }\n         unsafe {\n             let s: &mut Slice<T> = transmute(self);\n-            Some(&*raw::pop_ptr(s))\n+            match raw::pop_ptr(s) {\n+                Some(p) => Some(&*p),\n+                None => None\n+            }\n         }\n     }\n }\n@@ -1059,22 +1063,26 @@ impl<'a,T> MutableVector<'a, T> for &'a mut [T] {\n     }\n \n     fn mut_shift_ref(&mut self) -> Option<&'a mut T> {\n-        if self.len() == 0 { return None; }\n         unsafe {\n             let s: &mut Slice<T> = transmute(self);\n-            // FIXME #13933: this `&` -> `&mut` cast is a little\n-            // dubious\n-            Some(&mut *(raw::shift_ptr(s) as *mut _))\n+            match raw::shift_ptr(s) {\n+                // FIXME #13933: this `&` -> `&mut` cast is a little\n+                // dubious\n+                Some(p) => Some(&mut *(p as *mut _)),\n+                None => None,\n+            }\n         }\n     }\n \n     fn mut_pop_ref(&mut self) -> Option<&'a mut T> {\n-        if self.len() == 0 { return None; }\n         unsafe {\n             let s: &mut Slice<T> = transmute(self);\n-            // FIXME #13933: this `&` -> `&mut` cast is a little\n-            // dubious\n-            Some(&mut *(raw::pop_ptr(s) as *mut _))\n+            match raw::pop_ptr(s) {\n+                // FIXME #13933: this `&` -> `&mut` cast is a little\n+                // dubious\n+                Some(p) => Some(&mut *(p as *mut _)),\n+                None => None,\n+            }\n         }\n     }\n \n@@ -1165,6 +1173,7 @@ pub mod raw {\n     use iter::Iterator;\n     use ptr::RawPtr;\n     use raw::Slice;\n+    use option::{None, Option, Some};\n \n     /**\n      * Form a slice from a pointer and length (as a number of units,\n@@ -1198,27 +1207,29 @@ pub mod raw {\n \n     /**\n      * Returns a pointer to first element in slice and adjusts\n-     * slice so it no longer contains that element. Fails if\n-     * slice is empty. O(1).\n+     * slice so it no longer contains that element. Returns None\n+     * if the slice is empty. O(1).\n      */\n-    pub unsafe fn shift_ptr<T>(slice: &mut Slice<T>) -> *T {\n-        if slice.len == 0 { fail!(\"shift on empty slice\"); }\n+     #[inline]\n+    pub unsafe fn shift_ptr<T>(slice: &mut Slice<T>) -> Option<*T> {\n+        if slice.len == 0 { return None; }\n         let head: *T = slice.data;\n         slice.data = slice.data.offset(1);\n         slice.len -= 1;\n-        head\n+        Some(head)\n     }\n \n     /**\n      * Returns a pointer to last element in slice and adjusts\n-     * slice so it no longer contains that element. Fails if\n-     * slice is empty. O(1).\n+     * slice so it no longer contains that element. Returns None\n+     * if the slice is empty. O(1).\n      */\n-    pub unsafe fn pop_ptr<T>(slice: &mut Slice<T>) -> *T {\n-        if slice.len == 0 { fail!(\"pop on empty slice\"); }\n+     #[inline]\n+    pub unsafe fn pop_ptr<T>(slice: &mut Slice<T>) -> Option<*T> {\n+        if slice.len == 0 { return None; }\n         let tail: *T = slice.data.offset((slice.len - 1) as int);\n         slice.len -= 1;\n-        tail\n+        Some(tail)\n     }\n }\n "}, {"sha": "391dd01e80812e01c35cc864f2ade345d7f6668f", "filename": "src/libflate/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibflate%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibflate%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Flib.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -14,7 +14,7 @@ Simple compression\n \n */\n \n-#![crate_id = \"flate#0.11-pre\"]\n+#![crate_id = \"flate#0.11.0-pre\"]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![license = \"MIT/ASL2\"]"}, {"sha": "2151e53548008afa05a619826dae6d7fb094278a", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -14,7 +14,7 @@\n //! Parsing does not happen at runtime: structures of `std::fmt::rt` are\n //! generated instead.\n \n-#![crate_id = \"fmt_macros#0.11-pre\"]\n+#![crate_id = \"fmt_macros#0.11.0-pre\"]\n #![license = \"MIT/ASL2\"]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]"}, {"sha": "93aa978add5c1f3d6a748685143c3066d0462384", "filename": "src/libfourcc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibfourcc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibfourcc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfourcc%2Flib.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -39,7 +39,7 @@ fn main() {\n \n */\n \n-#![crate_id = \"fourcc#0.11-pre\"]\n+#![crate_id = \"fourcc#0.11.0-pre\"]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![license = \"MIT/ASL2\"]"}, {"sha": "3ac01681be1a7082b88b4c107fd14cd8bffbfce2", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -76,7 +76,7 @@\n //! }\n //! ~~~\n \n-#![crate_id = \"getopts#0.11-pre\"]\n+#![crate_id = \"getopts#0.11.0-pre\"]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![license = \"MIT/ASL2\"]"}, {"sha": "cd6b61049e01d650789cdad335edc0906f19b20d", "filename": "src/libglob/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibglob%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibglob%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibglob%2Flib.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -23,7 +23,7 @@\n  * `glob`/`fnmatch` functions.\n  */\n \n-#![crate_id = \"glob#0.11-pre\"]\n+#![crate_id = \"glob#0.11.0-pre\"]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![license = \"MIT/ASL2\"]"}, {"sha": "06ca5d2637738444970c852dd2992868778eaeaa", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -266,7 +266,7 @@ pub fn main() {\n \n */\n \n-#![crate_id = \"graphviz#0.11-pre\"]\n+#![crate_id = \"graphviz#0.11.0-pre\"]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![license = \"MIT/ASL2\"]"}, {"sha": "eec413635a50a04246acdab1dfeda3d5e689dc64", "filename": "src/libgreen/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibgreen%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibgreen%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Flib.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -197,7 +197,7 @@\n //! pool.shutdown();\n //! ```\n \n-#![crate_id = \"green#0.11-pre\"]\n+#![crate_id = \"green#0.11.0-pre\"]\n #![license = \"MIT/ASL2\"]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]"}, {"sha": "ac64f04c6fdb05c28425425117b96769d3d83b9d", "filename": "src/libhexfloat/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibhexfloat%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibhexfloat%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibhexfloat%2Flib.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -36,7 +36,7 @@ fn main() {\n \n */\n \n-#![crate_id = \"hexfloat#0.11-pre\"]\n+#![crate_id = \"hexfloat#0.11.0-pre\"]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![license = \"MIT/ASL2\"]"}, {"sha": "696914f4c5a494d33f248a23775c39a6c86fe73a", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![feature(globs)]\n-#![crate_id = \"libc#0.11-pre\"]\n+#![crate_id = \"libc#0.11.0-pre\"]\n #![experimental]\n #![no_std] // we don't need std, and we can't have std, since it doesn't exist\n            // yet. std depends on us."}, {"sha": "ac69fc37d81b1106923b6df863f929c8c96c4b3a", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -105,7 +105,7 @@ if logging is disabled, none of the components of the log will be executed.\n \n */\n \n-#![crate_id = \"log#0.11-pre\"]\n+#![crate_id = \"log#0.11.0-pre\"]\n #![license = \"MIT/ASL2\"]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]"}, {"sha": "c2b69483fa1e0d4e206f5de4ddb10216a155478b", "filename": "src/libnative/io/file_unix.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibnative%2Fio%2Ffile_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibnative%2Fio%2Ffile_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile_unix.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -166,6 +166,14 @@ impl rtio::RtioFileStream for FileDesc {\n             libc::ftruncate(self.fd(), offset as libc::off_t)\n         }))\n     }\n+\n+    fn fstat(&mut self) -> IoResult<io::FileStat> {\n+        let mut stat: libc::stat = unsafe { mem::uninit() };\n+        match retry(|| unsafe { libc::fstat(self.fd(), &mut stat) }) {\n+            0 => Ok(mkstat(&stat)),\n+            _ => Err(super::last_error()),\n+        }\n+    }\n }\n \n impl rtio::RtioPipe for FileDesc {\n@@ -317,6 +325,10 @@ impl rtio::RtioFileStream for CFile {\n     fn truncate(&mut self, offset: i64) -> Result<(), IoError> {\n         self.flush().and_then(|()| self.fd.truncate(offset))\n     }\n+\n+    fn fstat(&mut self) -> IoResult<io::FileStat> {\n+        self.flush().and_then(|()| self.fd.fstat())\n+    }\n }\n \n impl Drop for CFile {\n@@ -455,9 +467,7 @@ pub fn link(src: &CString, dst: &CString) -> IoResult<()> {\n     }))\n }\n \n-fn mkstat(stat: &libc::stat, path: &CString) -> io::FileStat {\n-    let path = unsafe { CString::new(path.with_ref(|p| p), false) };\n-\n+fn mkstat(stat: &libc::stat) -> io::FileStat {\n     // FileStat times are in milliseconds\n     fn mktime(secs: u64, nsecs: u64) -> u64 { secs * 1000 + nsecs / 1000000 }\n \n@@ -481,7 +491,6 @@ fn mkstat(stat: &libc::stat, path: &CString) -> io::FileStat {\n     fn gen(_stat: &libc::stat) -> u64 { 0 }\n \n     io::FileStat {\n-        path: Path::new(path),\n         size: stat.st_size as u64,\n         kind: kind,\n         perm: unsafe {\n@@ -508,15 +517,15 @@ fn mkstat(stat: &libc::stat, path: &CString) -> io::FileStat {\n pub fn stat(p: &CString) -> IoResult<io::FileStat> {\n     let mut stat: libc::stat = unsafe { mem::uninit() };\n     match retry(|| unsafe { libc::stat(p.with_ref(|p| p), &mut stat) }) {\n-        0 => Ok(mkstat(&stat, p)),\n+        0 => Ok(mkstat(&stat)),\n         _ => Err(super::last_error()),\n     }\n }\n \n pub fn lstat(p: &CString) -> IoResult<io::FileStat> {\n     let mut stat: libc::stat = unsafe { mem::uninit() };\n     match retry(|| unsafe { libc::lstat(p.with_ref(|p| p), &mut stat) }) {\n-        0 => Ok(mkstat(&stat, p)),\n+        0 => Ok(mkstat(&stat)),\n         _ => Err(super::last_error()),\n     }\n }"}, {"sha": "d721e1d67f1b99bf9d85f79c50c6868b144f3251", "filename": "src/libnative/io/file_win32.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibnative%2Fio%2Ffile_win32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibnative%2Fio%2Ffile_win32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile_win32.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -197,6 +197,14 @@ impl rtio::RtioFileStream for FileDesc {\n         let _ = self.seek(orig_pos as i64, io::SeekSet);\n         return ret;\n     }\n+\n+    fn fstat(&mut self) -> IoResult<io::FileStat> {\n+        let mut stat: libc::stat = unsafe { mem::uninit() };\n+        match unsafe { libc::fstat(self.fd(), &mut stat) } {\n+            0 => Ok(mkstat(&stat)),\n+            _ => Err(super::last_error()),\n+        }\n+    }\n }\n \n impl rtio::RtioPipe for FileDesc {\n@@ -471,8 +479,7 @@ pub fn link(src: &CString, dst: &CString) -> IoResult<()> {\n     }))\n }\n \n-fn mkstat(stat: &libc::stat, path: &CString) -> io::FileStat {\n-    let path = unsafe { CString::new(path.with_ref(|p| p), false) };\n+fn mkstat(stat: &libc::stat) -> io::FileStat {\n     let kind = match (stat.st_mode as c_int) & libc::S_IFMT {\n         libc::S_IFREG => io::TypeFile,\n         libc::S_IFDIR => io::TypeDirectory,\n@@ -483,7 +490,6 @@ fn mkstat(stat: &libc::stat, path: &CString) -> io::FileStat {\n     };\n \n     io::FileStat {\n-        path: Path::new(path),\n         size: stat.st_size as u64,\n         kind: kind,\n         perm: unsafe {\n@@ -511,7 +517,7 @@ pub fn stat(p: &CString) -> IoResult<io::FileStat> {\n     let mut stat: libc::stat = unsafe { mem::uninit() };\n     as_utf16_p(p.as_str().unwrap(), |up| {\n         match unsafe { libc::wstat(up, &mut stat) } {\n-            0 => Ok(mkstat(&stat, p)),\n+            0 => Ok(mkstat(&stat)),\n             _ => Err(super::last_error()),\n         }\n     })"}, {"sha": "05cf415ec78b0b9d5486244cda7ea2e96fab4386", "filename": "src/libnative/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibnative%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibnative%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Flib.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -41,7 +41,7 @@\n //! }\n //! ```\n \n-#![crate_id = \"native#0.11-pre\"]\n+#![crate_id = \"native#0.11.0-pre\"]\n #![license = \"MIT/ASL2\"]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]"}, {"sha": "20d694d0d09393316afdf647a25fffe76dff1417", "filename": "src/libnum/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibnum%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibnum%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Flib.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(macro_rules)]\n \n-#![crate_id = \"num#0.11-pre\"]\n+#![crate_id = \"num#0.11.0-pre\"]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![license = \"MIT/ASL2\"]"}, {"sha": "1f0dd9a407e2b84117e660e32c628307419e03cd", "filename": "src/librand/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -69,7 +69,7 @@ println!(\"{:?}\", tuple_ptr)\n ```\n */\n \n-#![crate_id = \"rand#0.11-pre\"]\n+#![crate_id = \"rand#0.11.0-pre\"]\n #![license = \"MIT/ASL2\"]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]"}, {"sha": "93254c773ffac7d30b2ef1dc219b55fb5c548222", "filename": "src/libregex/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibregex%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibregex%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Flib.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -352,7 +352,7 @@\n //! characters in the search text and `m` is the number of instructions in a\n //! compiled expression.\n \n-#![crate_id = \"regex#0.11-pre\"]\n+#![crate_id = \"regex#0.11.0-pre\"]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![experimental]"}, {"sha": "9d25adacd81080162d5ded15674ae43a63c002e7", "filename": "src/libregex_macros/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibregex_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibregex_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex_macros%2Flib.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -11,7 +11,7 @@\n //! This crate provides the `regex!` macro. Its use is documented in the\n //! `regex` crate.\n \n-#![crate_id = \"regex_macros#0.11-pre\"]\n+#![crate_id = \"regex_macros#0.11.0-pre\"]\n #![crate_type = \"dylib\"]\n #![experimental]\n #![license = \"MIT/ASL2\"]"}, {"sha": "51bdf9ef9edd58304359792ad6991d21a5964bcc", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -193,7 +193,7 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n \n     krate = time(time_passes, \"expansion\", krate, |krate| {\n         // Windows dlls do not have rpaths, so they don't know how to find their\n-        // dependencies. It's up to use to tell the system where to find all the\n+        // dependencies. It's up to us to tell the system where to find all the\n         // dependent dlls. Note that this uses cfg!(windows) as opposed to\n         // targ_cfg because syntax extensions are always loaded for the host\n         // compiler, not for the target."}, {"sha": "66bf6a77f8cfc7328a4bb3b6e56a935eedb1c8f5", "filename": "src/librustc/front/std_inject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fstd_inject.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -22,7 +22,7 @@ use syntax::parse::token::InternedString;\n use syntax::parse::token;\n use syntax::util::small_vector::SmallVector;\n \n-pub static VERSION: &'static str = \"0.11-pre\";\n+pub static VERSION: &'static str = \"0.11.0-pre\";\n \n pub fn maybe_inject_crates_ref(sess: &Session, krate: ast::Crate)\n                                -> ast::Crate {"}, {"sha": "d3b5fb1ca470c4f62e97f9a962c5c7e43e2346d2", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -18,7 +18,7 @@ This API is completely unstable and subject to change.\n \n */\n \n-#![crate_id = \"rustc#0.11-pre\"]\n+#![crate_id = \"rustc#0.11.0-pre\"]\n #![comment = \"The Rust compiler\"]\n #![license = \"MIT/ASL2\"]\n #![crate_type = \"dylib\"]"}, {"sha": "0883d25770ef75bd255c60ffca3ea2e20f5e8ef7", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -1775,6 +1775,7 @@ impl<'a> fmt::Show for Sidebar<'a> {\n         try!(block(fmt.buf, \"enum\", \"Enums\", it, cx));\n         try!(block(fmt.buf, \"trait\", \"Traits\", it, cx));\n         try!(block(fmt.buf, \"fn\", \"Functions\", it, cx));\n+        try!(block(fmt.buf, \"macro\", \"Macros\", it, cx));\n         Ok(())\n     }\n }"}, {"sha": "6aee86fd6844128b4e50fa5d6938993f9fab2a68", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![crate_id = \"rustdoc#0.11-pre\"]\n+#![crate_id = \"rustdoc#0.11.0-pre\"]\n #![desc = \"rustdoc, the Rust documentation extractor\"]\n #![license = \"MIT/ASL2\"]\n #![crate_type = \"dylib\"]"}, {"sha": "a449181747933844761aa753483c81e826a68f2a", "filename": "src/librustdoc/passes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibrustdoc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibrustdoc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -14,6 +14,7 @@ use std::cmp;\n use std::strbuf::StrBuf;\n use std::uint;\n use syntax::ast;\n+use syntax::ast_util;\n \n use clean;\n use clean::Item;\n@@ -206,7 +207,7 @@ impl<'a> fold::DocFolder for ImplStripper<'a> {\n                 match imp.trait_ {\n                     Some(clean::ResolvedPath{ did, .. }) => {\n                         let ImplStripper(s) = *self;\n-                        if !s.contains(&did.node) {\n+                        if ast_util::is_local(did) && !s.contains(&did.node) {\n                             return None;\n                         }\n                     }"}, {"sha": "06271e61ce7a0f9f72d4361a835ee4e3584a62da", "filename": "src/librustuv/file.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibrustuv%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibrustuv%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Ffile.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -70,6 +70,12 @@ impl FsRequest {\n         }).map(|req| req.mkstat())\n     }\n \n+    pub fn fstat(loop_: &Loop, fd: c_int) -> Result<FileStat, UvError> {\n+        execute(|req, cb| unsafe {\n+            uvll::uv_fs_fstat(loop_.handle, req, fd, cb)\n+        }).map(|req| req.mkstat())\n+    }\n+\n     pub fn write(loop_: &Loop, fd: c_int, buf: &[u8], offset: i64)\n         -> Result<(), UvError>\n     {\n@@ -262,8 +268,6 @@ impl FsRequest {\n     }\n \n     pub fn mkstat(&self) -> FileStat {\n-        let path = unsafe { uvll::get_path_from_fs_req(self.req) };\n-        let path = unsafe { Path::new(CString::new(path, false)) };\n         let stat = self.get_stat();\n         fn to_msec(stat: uvll::uv_timespec_t) -> u64 {\n             // Be sure to cast to u64 first to prevent overflowing if the tv_sec\n@@ -279,7 +283,6 @@ impl FsRequest {\n             _ => io::TypeUnknown,\n         };\n         FileStat {\n-            path: path,\n             size: stat.st_size as u64,\n             kind: kind,\n             perm: unsafe {\n@@ -463,6 +466,11 @@ impl rtio::RtioFileStream for FileWatcher {\n         let r = FsRequest::truncate(&self.loop_, self.fd, offset);\n         r.map_err(uv_error_to_io_error)\n     }\n+\n+    fn fstat(&mut self) -> Result<FileStat, IoError> {\n+        let _m = self.fire_homing_missile();\n+        FsRequest::fstat(&self.loop_, self.fd).map_err(uv_error_to_io_error)\n+    }\n }\n \n #[cfg(test)]\n@@ -537,6 +545,10 @@ mod test {\n         assert!(result.is_ok());\n         assert_eq!(result.unwrap().size, 5);\n \n+        let result = FsRequest::fstat(l(), file.fd);\n+        assert!(result.is_ok());\n+        assert_eq!(result.unwrap().size, 5);\n+\n         fn free<T>(_: T) {}\n         free(file);\n "}, {"sha": "c9bff2e80bfe64f1992842f75748cb07c90f5628", "filename": "src/librustuv/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibrustuv%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibrustuv%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Flib.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -34,7 +34,7 @@ via `close` and `delete` methods.\n \n */\n \n-#![crate_id = \"rustuv#0.11-pre\"]\n+#![crate_id = \"rustuv#0.11.0-pre\"]\n #![license = \"MIT/ASL2\"]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]"}, {"sha": "2707ccd4f0886960a415c1835de447a0f80e8b6b", "filename": "src/libsemver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibsemver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibsemver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsemver%2Flib.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -28,7 +28,7 @@\n //! An example version number with all five components is\n //! `0.8.1-rc.3.0+20130922.linux`.\n \n-#![crate_id = \"semver#0.11-pre\"]\n+#![crate_id = \"semver#0.11.0-pre\"]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![license = \"MIT/ASL2\"]"}, {"sha": "209a1439dda5676f17a02871d84f504f0a7ee362", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -14,7 +14,7 @@\n Core encoding and decoding interfaces.\n */\n \n-#![crate_id = \"serialize#0.11-pre\"]\n+#![crate_id = \"serialize#0.11.0-pre\"]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![license = \"MIT/ASL2\"]"}, {"sha": "a497ffd40a0707b6bbe648c31d1ef458163db046", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -214,6 +214,11 @@ impl File {\n     pub fn eof(&self) -> bool {\n         self.last_nread == 0\n     }\n+\n+    /// Queries information about the underlying file.\n+    pub fn stat(&mut self) -> IoResult<FileStat> {\n+        self.fd.fstat()\n+    }\n }\n \n /// Unlink a file from the underlying filesystem.\n@@ -887,9 +892,12 @@ mod test {\n         let tmpdir = tmpdir();\n         let filename = &tmpdir.join(\"file_stat_correct_on_is_file.txt\");\n         {\n-            let mut fs = File::open_mode(filename, Open, ReadWrite);\n+            let mut fs = check!(File::open_mode(filename, Open, ReadWrite));\n             let msg = \"hw\";\n             fs.write(msg.as_bytes()).unwrap();\n+\n+            let fstat_res = check!(fs.stat());\n+            assert_eq!(fstat_res.kind, io::TypeFile);\n         }\n         let stat_res_fn = check!(stat(filename));\n         assert_eq!(stat_res_fn.kind, io::TypeFile);\n@@ -1228,23 +1236,23 @@ mod test {\n         check!(file.fsync());\n \n         // Do some simple things with truncation\n-        assert_eq!(check!(stat(&path)).size, 3);\n+        assert_eq!(check!(file.stat()).size, 3);\n         check!(file.truncate(10));\n-        assert_eq!(check!(stat(&path)).size, 10);\n+        assert_eq!(check!(file.stat()).size, 10);\n         check!(file.write(bytes!(\"bar\")));\n         check!(file.fsync());\n-        assert_eq!(check!(stat(&path)).size, 10);\n+        assert_eq!(check!(file.stat()).size, 10);\n         assert_eq!(check!(File::open(&path).read_to_end()),\n                    (Vec::from_slice(bytes!(\"foobar\", 0, 0, 0, 0))));\n \n         // Truncate to a smaller length, don't seek, and then write something.\n         // Ensure that the intermediate zeroes are all filled in (we're seeked\n         // past the end of the file).\n         check!(file.truncate(2));\n-        assert_eq!(check!(stat(&path)).size, 2);\n+        assert_eq!(check!(file.stat()).size, 2);\n         check!(file.write(bytes!(\"wut\")));\n         check!(file.fsync());\n-        assert_eq!(check!(stat(&path)).size, 9);\n+        assert_eq!(check!(file.stat()).size, 9);\n         assert_eq!(check!(File::open(&path).read_to_end()),\n                    (Vec::from_slice(bytes!(\"fo\", 0, 0, 0, 0, \"wut\"))));\n         drop(file);"}, {"sha": "3c32b7ca802d78867f20504b4116d7be32fdb1c4", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -228,7 +228,6 @@ use ops::{BitOr, BitAnd, Sub};\n use option::{Option, Some, None};\n use os;\n use owned::Box;\n-use path::Path;\n use result::{Ok, Err, Result};\n use slice::{Vector, MutableVector, ImmutableVector};\n use str::{StrSlice, StrAllocating};\n@@ -1510,14 +1509,11 @@ pub enum FileType {\n ///     Err(e) => fail!(\"couldn't read foo.txt: {}\", e),\n /// };\n ///\n-/// println!(\"path: {}\", info.path.display());\n /// println!(\"byte size: {}\", info.size);\n /// # }\n /// ```\n #[deriving(Hash)]\n pub struct FileStat {\n-    /// The path that this stat structure is describing\n-    pub path: Path,\n     /// The size of the file, in bytes\n     pub size: u64,\n     /// The kind of file this path points to (directory, file, pipe, etc.)"}, {"sha": "529fd25dc50e90dd75f277b9a1eed8464868c9e8", "filename": "src/libstd/io/process.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibstd%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibstd%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprocess.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -140,6 +140,7 @@ pub struct ProcessConfig<'a> {\n }\n \n /// The output of a finished process.\n+#[deriving(Eq, TotalEq, Clone)]\n pub struct ProcessOutput {\n     /// The status (exit code) of the process.\n     pub status: ProcessExit,"}, {"sha": "34ed7933c397f86ec1d261898d4b5ab8aef0e64c", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -96,7 +96,7 @@\n //! all the standard macros, such as `assert!`, `fail!`, `println!`,\n //! and `format!`, also available to all Rust code.\n \n-#![crate_id = \"std#0.11-pre\"]\n+#![crate_id = \"std#0.11.0-pre\"]\n #![comment = \"The Rust standard library\"]\n #![license = \"MIT/ASL2\"]\n #![crate_type = \"rlib\"]"}, {"sha": "ad834f2b4d44bcac4723c0be951e147d316b6904", "filename": "src/libstd/option.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -30,20 +30,23 @@\n //! of a value and take action, always accounting for the `None` case.\n //!\n //! ```\n-//! # // FIXME This is not the greatest first example\n-//! // cow_says contains the word \"moo\"\n-//! let cow_says = Some(\"moo\");\n-//! // dog_says does not contain a value\n-//! let dog_says: Option<&str> = None;\n+//! fn divide(numerator: f64, denominator: f64) -> Option<f64> {\n+//!     if denominator == 0.0 {\n+//!         None\n+//!     } else {\n+//!         Some(numerator / denominator)\n+//!     }\n+//! }\n+//!\n+//! // The return value of the function is an option\n+//! let result = divide(2.0, 3.0);\n //!\n //! // Pattern match to retrieve the value\n-//! match (cow_says, dog_says) {\n-//!     (Some(cow_words), Some(dog_words)) => {\n-//!         println!(\"Cow says {} and dog says {}!\", cow_words, dog_words);\n-//!     }\n-//!     (Some(cow_words), None) => println!(\"Cow says {}\", cow_words),\n-//!     (None, Some(dog_words)) => println!(\"Dog says {}\", dog_words),\n-//!     (None, None) => println!(\"Cow and dog are suspiciously silent\")\n+//! match result {\n+//!     // The division was valid\n+//!     Some(x) => println!(\"Result: {}\", x),\n+//!     // The division was invalid\n+//!     None    => println!(\"Cannot divide by 0\")\n //! }\n //! ```\n //!"}, {"sha": "f7324dc08b6d584251eba0639db14e1fc7eb463d", "filename": "src/libstd/os.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -95,13 +95,12 @@ pub fn getcwd() -> Path {\n \n #[cfg(windows)]\n pub mod win32 {\n-    use iter::Iterator;\n     use libc::types::os::arch::extra::DWORD;\n     use libc;\n     use option::{None, Option, Expect};\n     use option;\n     use os::TMPBUF_SZ;\n-    use slice::{MutableVector, ImmutableVector, OwnedVector};\n+    use slice::{MutableVector, ImmutableVector};\n     use str::{StrSlice, StrAllocating};\n     use str;\n     use vec::Vec;\n@@ -142,7 +141,7 @@ pub mod win32 {\n     }\n \n     pub fn as_utf16_p<T>(s: &str, f: |*u16| -> T) -> T {\n-        let mut t = s.to_utf16().move_iter().collect::<Vec<u16>>();\n+        let mut t = s.to_utf16();\n         // Null terminate before passing on.\n         t.push(0u16);\n         f(t.as_ptr())"}, {"sha": "d23d327d558815a55ead009cd33a48f4d67f9da8", "filename": "src/libstd/rt/rtio.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibstd%2Frt%2Frtio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibstd%2Frt%2Frtio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Frtio.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -269,6 +269,7 @@ pub trait RtioFileStream {\n     fn fsync(&mut self) -> IoResult<()>;\n     fn datasync(&mut self) -> IoResult<()>;\n     fn truncate(&mut self, offset: i64) -> IoResult<()>;\n+    fn fstat(&mut self) -> IoResult<FileStat>;\n }\n \n pub trait RtioProcess {"}, {"sha": "e5d506301e37010a66a49ddf778d2e28c3069000", "filename": "src/libsync/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibsync%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibsync%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Flib.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -12,7 +12,7 @@\n  * Concurrency-enabled mechanisms and primitives.\n  */\n \n-#![crate_id = \"sync#0.11-pre\"]\n+#![crate_id = \"sync#0.11.0-pre\"]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![license = \"MIT/ASL2\"]"}, {"sha": "1086295d427c9be5f0a16e1299d641af8831cbda", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -18,7 +18,7 @@ This API is completely unstable and subject to change.\n \n */\n \n-#![crate_id = \"syntax#0.11-pre\"]\n+#![crate_id = \"syntax#0.11.0-pre\"]\n #![license = \"MIT/ASL2\"]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]"}, {"sha": "2201b08f2ca48fb6e0e2a276d25a69f8a2be4b0c", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -125,7 +125,11 @@ enum ItemOrViewItem {\n     IoviViewItem(ViewItem)\n }\n \n-/* The expr situation is not as complex as I thought it would be.\n+\n+// Possibly accept an `INTERPOLATED` expression (a pre-parsed expression\n+// dropped into the token stream, which happens while parsing the\n+// result of macro expansion)\n+/* Placement of these is not as complex as I feared it would be.\n The important thing is to make sure that lookahead doesn't balk\n at INTERPOLATED tokens */\n macro_rules! maybe_whole_expr (\n@@ -135,7 +139,7 @@ macro_rules! maybe_whole_expr (\n                 INTERPOLATED(token::NtPath(ref pt)) => Some((**pt).clone()),\n                 _ => None,\n             };\n-            let ret = match ($p).token {\n+            let found = match ($p).token {\n                 INTERPOLATED(token::NtExpr(e)) => {\n                     Some(e)\n                 }\n@@ -145,7 +149,7 @@ macro_rules! maybe_whole_expr (\n                 }\n                 _ => None\n             };\n-            match ret {\n+            match found {\n                 Some(e) => {\n                     $p.bump();\n                     return e;\n@@ -156,16 +160,17 @@ macro_rules! maybe_whole_expr (\n     )\n )\n \n+// As above, but for things other than expressions\n macro_rules! maybe_whole (\n     ($p:expr, $constructor:ident) => (\n         {\n-            let __found__ = match ($p).token {\n+            let found = match ($p).token {\n                 INTERPOLATED(token::$constructor(_)) => {\n                     Some(($p).bump_and_get())\n                 }\n                 _ => None\n             };\n-            match __found__ {\n+            match found {\n                 Some(INTERPOLATED(token::$constructor(x))) => {\n                     return x.clone()\n                 }\n@@ -175,13 +180,13 @@ macro_rules! maybe_whole (\n     );\n     (no_clone $p:expr, $constructor:ident) => (\n         {\n-            let __found__ = match ($p).token {\n+            let found = match ($p).token {\n                 INTERPOLATED(token::$constructor(_)) => {\n                     Some(($p).bump_and_get())\n                 }\n                 _ => None\n             };\n-            match __found__ {\n+            match found {\n                 Some(INTERPOLATED(token::$constructor(x))) => {\n                     return x\n                 }\n@@ -191,13 +196,13 @@ macro_rules! maybe_whole (\n     );\n     (deref $p:expr, $constructor:ident) => (\n         {\n-            let __found__ = match ($p).token {\n+            let found = match ($p).token {\n                 INTERPOLATED(token::$constructor(_)) => {\n                     Some(($p).bump_and_get())\n                 }\n                 _ => None\n             };\n-            match __found__ {\n+            match found {\n                 Some(INTERPOLATED(token::$constructor(x))) => {\n                     return (*x).clone()\n                 }\n@@ -207,13 +212,13 @@ macro_rules! maybe_whole (\n     );\n     (Some $p:expr, $constructor:ident) => (\n         {\n-            let __found__ = match ($p).token {\n+            let found = match ($p).token {\n                 INTERPOLATED(token::$constructor(_)) => {\n                     Some(($p).bump_and_get())\n                 }\n                 _ => None\n             };\n-            match __found__ {\n+            match found {\n                 Some(INTERPOLATED(token::$constructor(x))) => {\n                     return Some(x.clone()),\n                 }\n@@ -223,13 +228,13 @@ macro_rules! maybe_whole (\n     );\n     (iovi $p:expr, $constructor:ident) => (\n         {\n-            let __found__ = match ($p).token {\n+            let found = match ($p).token {\n                 INTERPOLATED(token::$constructor(_)) => {\n                     Some(($p).bump_and_get())\n                 }\n                 _ => None\n             };\n-            match __found__ {\n+            match found {\n                 Some(INTERPOLATED(token::$constructor(x))) => {\n                     return IoviItem(x.clone())\n                 }\n@@ -239,13 +244,13 @@ macro_rules! maybe_whole (\n     );\n     (pair_empty $p:expr, $constructor:ident) => (\n         {\n-            let __found__ = match ($p).token {\n+            let found = match ($p).token {\n                 INTERPOLATED(token::$constructor(_)) => {\n                     Some(($p).bump_and_get())\n                 }\n                 _ => None\n             };\n-            match __found__ {\n+            match found {\n                 Some(INTERPOLATED(token::$constructor(x))) => {\n                     return (Vec::new(), x)\n                 }"}, {"sha": "9918d45e0a55d80a3cabfa4eb9b7a1733905f976", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -10,7 +10,7 @@\n \n //! Simple ANSI color library\n \n-#![crate_id = \"term#0.11-pre\"]\n+#![crate_id = \"term#0.11.0-pre\"]\n #![comment = \"Simple ANSI color library\"]\n #![license = \"MIT/ASL2\"]\n #![crate_type = \"rlib\"]"}, {"sha": "ca09d2cce6be69236781d4b197e48faa075d2681", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -23,7 +23,7 @@\n // running tests while providing a base that other test frameworks may\n // build off of.\n \n-#![crate_id = \"test#0.11-pre\"]\n+#![crate_id = \"test#0.11.0-pre\"]\n #![comment = \"Rust internal test library only used by rustc\"]\n #![license = \"MIT/ASL2\"]\n #![crate_type = \"rlib\"]"}, {"sha": "3cfc611f34c3ffd8d90ae2cfe759d6552207d872", "filename": "src/libtime/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibtime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibtime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtime%2Flib.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![crate_id = \"time#0.11-pre\"]\n+#![crate_id = \"time#0.11.0-pre\"]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![license = \"MIT/ASL2\"]"}, {"sha": "b5c1c2d21f47a4edffc056ce756b638e1d67109c", "filename": "src/liburl/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fliburl%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Fliburl%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliburl%2Flib.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -10,7 +10,7 @@\n \n //! Types/fns concerning URLs (see RFC 3986)\n \n-#![crate_id = \"url#0.11-pre\"]\n+#![crate_id = \"url#0.11.0-pre\"]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![license = \"MIT/ASL2\"]"}, {"sha": "f1abc9ffaacca212ae4f4f9802f8c442427d4ddd", "filename": "src/libuuid/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibuuid%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibuuid%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibuuid%2Flib.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -54,7 +54,7 @@ Examples of string representations:\n \n */\n \n-#![crate_id = \"uuid#0.11-pre\"]\n+#![crate_id = \"uuid#0.11.0-pre\"]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![license = \"MIT/ASL2\"]"}, {"sha": "1dd87f3954e4f7c7077010e34169a2d2188c7bc5", "filename": "src/libworkcache/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibworkcache%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Flibworkcache%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibworkcache%2Flib.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![crate_id = \"workcache#0.11-pre\"]\n+#![crate_id = \"workcache#0.11.0-pre\"]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![license = \"MIT/ASL2\"]"}, {"sha": "207f47d214cae738d0e1d11a617ea684e765976d", "filename": "src/test/auxiliary/issue-11908-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Ftest%2Fauxiliary%2Fissue-11908-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Ftest%2Fauxiliary%2Fissue-11908-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-11908-1.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -10,5 +10,5 @@\n \n // no-prefer-dynamic\n \n-#![crate_id = \"collections#0.11-pre\"]\n+#![crate_id = \"collections#0.11.0-pre\"]\n #![crate_type = \"dylib\"]"}, {"sha": "a25eeb12c5384d036e2ba85563a191a0ab952703", "filename": "src/test/auxiliary/issue-11908-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Ftest%2Fauxiliary%2Fissue-11908-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Ftest%2Fauxiliary%2Fissue-11908-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-11908-2.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -10,5 +10,5 @@\n \n // no-prefer-dynamic\n \n-#![crate_id = \"collections#0.11-pre\"]\n+#![crate_id = \"collections#0.11.0-pre\"]\n #![crate_type = \"rlib\"]"}, {"sha": "f9a84f276bf6e36bf890865f033d59b4facee7f2", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 20, "deletions": 23, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -70,33 +70,30 @@ struct Planet {\n \n fn advance(bodies: &mut [Planet, ..N_BODIES], dt: f64, steps: int) {\n     for _ in range(0, steps) {\n-        {\n-            let mut b_slice = bodies.as_mut_slice();\n-            loop {\n-                let bi = match b_slice.mut_shift_ref() {\n-                    Some(bi) => bi,\n-                    None => break\n-                };\n-                for bj in b_slice.mut_iter() {\n-                    let dx = bi.x - bj.x;\n-                    let dy = bi.y - bj.y;\n-                    let dz = bi.z - bj.z;\n+        let mut b_slice = bodies.as_mut_slice();\n+        loop {\n+            let bi = match b_slice.mut_shift_ref() {\n+                Some(bi) => bi,\n+                None => break\n+            };\n+            for bj in b_slice.mut_iter() {\n+                let dx = bi.x - bj.x;\n+                let dy = bi.y - bj.y;\n+                let dz = bi.z - bj.z;\n \n-                    let d2 = dx * dx + dy * dy + dz * dz;\n-                    let mag = dt / (d2 * d2.sqrt());\n+                let d2 = dx * dx + dy * dy + dz * dz;\n+                let mag = dt / (d2 * d2.sqrt());\n \n-                    bi.vx -= dx * bj.mass * mag;\n-                    bi.vy -= dy * bj.mass * mag;\n-                    bi.vz -= dz * bj.mass * mag;\n+                let massj_mag = bj.mass * mag;\n+                bi.vx -= dx * massj_mag;\n+                bi.vy -= dy * massj_mag;\n+                bi.vz -= dz * massj_mag;\n \n-                    bj.vx += dx * bi.mass * mag;\n-                    bj.vy += dy * bi.mass * mag;\n-                    bj.vz += dz * bi.mass * mag;\n-                }\n+                let massi_mag = bi.mass * mag;\n+                bj.vx += dx * massi_mag;\n+                bj.vy += dy * massi_mag;\n+                bj.vz += dz * massi_mag;\n             }\n-        }\n-\n-        for bi in bodies.mut_iter() {\n             bi.x += dt * bi.vx;\n             bi.y += dt * bi.vy;\n             bi.z += dt * bi.vz;"}, {"sha": "a72e24cf2c3857441a8c33330ada8c321f0b5056", "filename": "src/test/run-make/crate-data-smoke/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Ftest%2Frun-make%2Fcrate-data-smoke%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Ftest%2Frun-make%2Fcrate-data-smoke%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcrate-data-smoke%2FMakefile?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -1,7 +1,7 @@\n -include ../tools.mk\n \n all:\n-\t[ `$(RUSTC) --crate-id crate.rs` = \"foo#0.11-pre\" ]\n+\t[ `$(RUSTC) --crate-id crate.rs` = \"foo#0.11.0-pre\" ]\n \t[ `$(RUSTC) --crate-name crate.rs` = \"foo\" ]\n \t[ `$(RUSTC) --crate-file-name crate.rs` = \"foo\" ]\n \t[ `$(RUSTC) --crate-file-name --crate-type=lib --test crate.rs` = \"foo\" ]"}, {"sha": "31446a763e2dd978798a37ea766e35d1ce779a64", "filename": "src/test/run-make/crate-data-smoke/crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Ftest%2Frun-make%2Fcrate-data-smoke%2Fcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Ftest%2Frun-make%2Fcrate-data-smoke%2Fcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcrate-data-smoke%2Fcrate.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![crate_id = \"foo#0.11-pre\"]\n+#![crate_id = \"foo#0.11.0-pre\"]\n \n // Querying about the crate metadata should *not* parse the entire crate, it\n // only needs the crate attributes (which are guaranteed to be at the top) be"}, {"sha": "c42f392d2bce0ced0698d2561b33cca9798b4b5c", "filename": "src/test/run-pass/use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Ftest%2Frun-pass%2Fuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/967366e988a811ae0fb47d3ad5ce0499a1414a43/src%2Ftest%2Frun-pass%2Fuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse.rs?ref=967366e988a811ae0fb47d3ad5ce0499a1414a43", "patch": "@@ -15,7 +15,7 @@\n #![no_std]\n extern crate std;\n extern crate zed = \"std\";\n-extern crate bar = \"std#0.11-pre\";\n+extern crate bar = \"std#0.11.0-pre\";\n \n \n use std::str;"}]}