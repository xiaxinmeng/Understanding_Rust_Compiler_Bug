{"sha": "a4b74e3adf214d985c541eb7d005bb77e59338f5", "node_id": "C_kwDOAAsO6NoAKGE0Yjc0ZTNhZGYyMTRkOTg1YzU0MWViN2QwMDViYjc3ZTU5MzM4ZjU", "commit": {"author": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2023-01-06T15:42:38Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2023-01-06T15:42:38Z"}, "message": "Fix unwinding", "tree": {"sha": "ee1bea3aa38948c1398ddac6df15aea8386a9c9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee1bea3aa38948c1398ddac6df15aea8386a9c9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4b74e3adf214d985c541eb7d005bb77e59338f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4b74e3adf214d985c541eb7d005bb77e59338f5", "html_url": "https://github.com/rust-lang/rust/commit/a4b74e3adf214d985c541eb7d005bb77e59338f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4b74e3adf214d985c541eb7d005bb77e59338f5/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71d7e561bdc2e58cef7fedcec1970dafc852bb61", "url": "https://api.github.com/repos/rust-lang/rust/commits/71d7e561bdc2e58cef7fedcec1970dafc852bb61", "html_url": "https://github.com/rust-lang/rust/commit/71d7e561bdc2e58cef7fedcec1970dafc852bb61"}], "stats": {"total": 35, "additions": 6, "deletions": 29}, "files": [{"sha": "af77fa418c86a27b274187c2326f5f1006944a2a", "filename": "src/builder.rs", "status": "modified", "additions": 3, "deletions": 20, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a4b74e3adf214d985c541eb7d005bb77e59338f5/src%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4b74e3adf214d985c541eb7d005bb77e59338f5/src%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuilder.rs?ref=a4b74e3adf214d985c541eb7d005bb77e59338f5", "patch": "@@ -472,7 +472,6 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         }\n         else {\n             // FIXME: FIXME: FIXME: Seems like bad (_URC_NO_REASON) return code, perhaps because the cleanup pad was created properly.\n-            // FIXME: Wrong personality function: __gcc_personality_v0\n             println!(\"Try/catch in {:?}\", self.current_func());\n             self.block.add_try_catch(None, try_block, catch);\n         }\n@@ -1220,15 +1219,6 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n \n         self.cleanup_blocks.borrow_mut().insert(self.block);\n \n-        // FIXME: we're probably not creating a real cleanup pad here.\n-        // FIXME: It seems to be the actual problem:\n-        // libunwind finds a catch, so returns _URC_HANDLER_FOUND instead of _URC_CONTINUE_UNWIND.\n-        // TODO: can we generate a goto from the finally to the cleanup landing pad?\n-        // TODO: add this block to a cleanup_blocks variable and generate a try/finally instead if\n-        // the catch block for it is a cleanup block.\n-        // => NO, a cleanup is only called during unwinding.\n-        //\n-        // TODO: look at TRY_CATCH_IS_CLEANUP, CLEANUP_POINT_EXPR, WITH_CLEANUP_EXPR, CLEANUP_EH_ONLY.\n         let eh_pointer_builtin = self.cx.context.get_target_builtin_function(\"__builtin_eh_pointer\");\n         let zero = self.cx.context.new_rvalue_zero(self.int_type);\n         let ptr = self.cx.context.new_call(None, eh_pointer_builtin, &[zero]);\n@@ -1242,21 +1232,14 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         self.block.add_assignment(None, value.access_field(None, field1), ptr);\n         self.block.add_assignment(None, value.access_field(None, field2), zero); // TODO: set the proper value here (the type of exception?).\n \n-        /*\n-        // Resume.\n-        let param = self.context.new_parameter(None, ptr.get_type(), \"exn\");\n-        // TODO: should we call __builtin_unwind_resume instead?\n-        // FIXME: should probably not called resume because it could be executed (I believe) in\n-        // normal (no exception) cases\n-        let unwind_resume = self.context.new_function(None, FunctionType::Extern, self.type_void(), &[param], \"_Unwind_Resume\", false);\n-        self.block.add_eval(None, self.context.new_call(None, unwind_resume, &[ptr]));*/\n-\n         value.to_rvalue()\n     }\n \n     fn resume(&mut self, exn: RValue<'gcc>) {\n+        // TODO: check if this is normal that we need to dereference the value.\n+        let exn = exn.dereference(None).to_rvalue();\n         let param = self.context.new_parameter(None, exn.get_type(), \"exn\");\n-        // TODO: should we call __builtin_unwind_resume instead?\n+        // TODO(antoyo): should we call __builtin_unwind_resume instead? This might actually be the same.\n         let unwind_resume = self.context.new_function(None, FunctionType::Extern, self.type_void(), &[param], \"_Unwind_Resume\", false);\n         self.llbb().add_eval(None, self.context.new_call(None, unwind_resume, &[exn]));\n         self.unreachable();"}, {"sha": "ce7874a3de47aaf1dd8c0326202c02b71d8d81dc", "filename": "src/intrinsic/mod.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a4b74e3adf214d985c541eb7d005bb77e59338f5/src%2Fintrinsic%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4b74e3adf214d985c541eb7d005bb77e59338f5/src%2Fintrinsic%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic%2Fmod.rs?ref=a4b74e3adf214d985c541eb7d005bb77e59338f5", "patch": "@@ -1179,16 +1179,10 @@ fn codegen_gnu_try<'gcc>(bx: &mut Builder<'_, 'gcc, '_>, try_func: RValue<'gcc>,\n \n         // Type indicator for the exception being thrown.\n         //\n-        // The first value in this tuple is a pointer to the exception object\n-        // being thrown.  The second value is a \"selector\" indicating which of\n-        // the landing pad clauses the exception's type had been matched to.\n-        // rust_try ignores the selector.\n+        // The value is a pointer to the exception object\n+        // being thrown.\n         bx.switch_to_block(catch);\n-        /*let lpad_ty = bx.type_struct(&[bx.type_i8p(), bx.type_i32()], false);\n-        let vals = bx.landing_pad(lpad_ty, bx.eh_personality(), 1);\n-        let tydesc = bx.const_null(bx.type_i8p());\n-        bx.add_clause(vals, tydesc);\n-        let ptr = bx.extract_value(vals, 0);*/\n+        bx.set_personality_fn(bx.eh_personality());\n \n         let eh_pointer_builtin = bx.cx.context.get_target_builtin_function(\"__builtin_eh_pointer\");\n         let zero = bx.cx.context.new_rvalue_zero(bx.int_type);"}]}