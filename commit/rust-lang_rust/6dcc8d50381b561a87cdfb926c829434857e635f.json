{"sha": "6dcc8d50381b561a87cdfb926c829434857e635f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkY2M4ZDUwMzgxYjU2MWE4N2NkZmI5MjZjODI5NDM0ODU3ZTYzNWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-19T19:19:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-19T19:19:54Z"}, "message": "Auto merge of #5141 - xiongmao86:issue5095, r=flip1995\n\nFixes issue 5095\n\nfixes #5095.\n\n- [x] Followed [lint naming conventions][lint_naming]\n- [x] Added passing UI tests (including committed `.stderr` file)\n- [x] `cargo test` passes locally\n- [x] Executed `cargo dev update_lints`\n- [x] Added lint documentation\n- [x] Run `cargo dev fmt`\n\n[lint_naming]: https://rust-lang.github.io/rfcs/0344-conventions-galore.html#lints\n\nchangelog: (internal) warn about collapsible `span_lint_and_then` calls.", "tree": {"sha": "658066e90570d235585a65c39563fba4742c36bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/658066e90570d235585a65c39563fba4742c36bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6dcc8d50381b561a87cdfb926c829434857e635f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6dcc8d50381b561a87cdfb926c829434857e635f", "html_url": "https://github.com/rust-lang/rust/commit/6dcc8d50381b561a87cdfb926c829434857e635f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6dcc8d50381b561a87cdfb926c829434857e635f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2efc2d63662dac89cca4431f62d037fa56940bdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/2efc2d63662dac89cca4431f62d037fa56940bdc", "html_url": "https://github.com/rust-lang/rust/commit/2efc2d63662dac89cca4431f62d037fa56940bdc"}, {"sha": "7aeb3a43c91fe2a01f9ff5b111719cface13ab56", "url": "https://api.github.com/repos/rust-lang/rust/commits/7aeb3a43c91fe2a01f9ff5b111719cface13ab56", "html_url": "https://github.com/rust-lang/rust/commit/7aeb3a43c91fe2a01f9ff5b111719cface13ab56"}], "stats": {"total": 957, "additions": 758, "deletions": 199}, "files": [{"sha": "0c8efd755146ec2f03426b0b2f0d8c1950d6e957", "filename": "clippy_lints/src/as_conversions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fas_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fas_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fas_conversions.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -50,6 +50,7 @@ impl EarlyLintPass for AsConversions {\n                 AS_CONVERSIONS,\n                 expr.span,\n                 \"using a potentially dangerous silent `as` conversion\",\n+                None,\n                 \"consider using a safe wrapper for this conversion\",\n             );\n         }"}, {"sha": "f8a8fdcd3aa35e9753f3b8cfa79c069b2df403c6", "filename": "clippy_lints/src/assertions_on_constants.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassertions_on_constants.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -41,6 +41,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssertionsOnConstants {\n                 } else {\n                     \"`assert!(true)` will be optimized out by the compiler\"\n                 },\n+                None,\n                 \"remove it\",\n             );\n         };\n@@ -50,6 +51,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssertionsOnConstants {\n                 ASSERTIONS_ON_CONSTANTS,\n                 e.span,\n                 \"`assert!(false)` should probably be replaced\",\n+                None,\n                 \"use `panic!()` or `unreachable!()`\",\n             );\n         };\n@@ -59,6 +61,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssertionsOnConstants {\n                 ASSERTIONS_ON_CONSTANTS,\n                 e.span,\n                 &format!(\"`assert!(false, {})` should probably be replaced\", panic_message),\n+                None,\n                 &format!(\"use `panic!({})` or `unreachable!({})`\", panic_message, panic_message),\n             )\n         };"}, {"sha": "73b4cef472505ee4e5bc21e14028e615ce9dbeb2", "filename": "clippy_lints/src/atomic_ordering.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fatomic_ordering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fatomic_ordering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fatomic_ordering.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -85,6 +85,7 @@ fn check_atomic_load_store(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n                     INVALID_ATOMIC_ORDERING,\n                     ordering_arg.span,\n                     \"atomic loads cannot have `Release` and `AcqRel` ordering\",\n+                    None,\n                     \"consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\"\n                 );\n             } else if method == \"store\" &&\n@@ -94,6 +95,7 @@ fn check_atomic_load_store(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n                     INVALID_ATOMIC_ORDERING,\n                     ordering_arg.span,\n                     \"atomic stores cannot have `Acquire` and `AcqRel` ordering\",\n+                    None,\n                     \"consider using ordering modes `Release`, `SeqCst` or `Relaxed`\"\n                 );\n             }\n@@ -118,6 +120,7 @@ fn check_memory_fence(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n                 INVALID_ATOMIC_ORDERING,\n                 args[0].span,\n                 \"memory fences cannot have `Relaxed` ordering\",\n+                None,\n                 \"consider using ordering modes `Acquire`, `Release`, `AcqRel` or `SeqCst`\"\n             );\n         }"}, {"sha": "e842388ac982de04b3889ff9e0dbe7f860e625e1", "filename": "clippy_lints/src/cognitive_complexity.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcognitive_complexity.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -105,6 +105,7 @@ impl CognitiveComplexity {\n                     rust_cc,\n                     self.limit.limit()\n                 ),\n+                None,\n                 \"you could split it up into multiple smaller functions\",\n             );\n         }"}, {"sha": "96df3ffe3ce6727650e8da1c95448c046aab2f74", "filename": "clippy_lints/src/comparison_chain.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fcomparison_chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fcomparison_chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcomparison_chain.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -104,6 +104,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ComparisonChain {\n             COMPARISON_CHAIN,\n             expr.span,\n             \"`if` chain can be rewritten with `match`\",\n+            None,\n             \"Consider rewriting the `if` chain to use `cmp` and `match`.\",\n         )\n     }"}, {"sha": "66722786eab49c52f1429ada6f21cd7e80a15b0b", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -183,7 +183,7 @@ fn lint_same_then_else(cx: &LateContext<'_, '_>, blocks: &[&Block<'_>]) {\n             IF_SAME_THEN_ELSE,\n             j.span,\n             \"this `if` has identical blocks\",\n-            i.span,\n+            Some(i.span),\n             \"same as this\",\n         );\n     }\n@@ -206,7 +206,7 @@ fn lint_same_cond(cx: &LateContext<'_, '_>, conds: &[&Expr<'_>]) {\n             IFS_SAME_COND,\n             j.span,\n             \"this `if` has the same condition as a previous `if`\",\n-            i.span,\n+            Some(i.span),\n             \"same as this\",\n         );\n     }\n@@ -234,7 +234,7 @@ fn lint_same_fns_in_if_cond(cx: &LateContext<'_, '_>, conds: &[&Expr<'_>]) {\n             SAME_FUNCTIONS_IN_IF_CONDITION,\n             j.span,\n             \"this `if` has the same function call as a previous `if`\",\n-            i.span,\n+            Some(i.span),\n             \"same as this\",\n         );\n     }"}, {"sha": "d79aa2ef0209e1da9f8046572e73e79b46c40a41", "filename": "clippy_lints/src/copy_iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopy_iterator.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -46,7 +46,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CopyIterator {\n                     COPY_ITERATOR,\n                     item.span,\n                     \"you are implementing `Iterator` on a `Copy` type\",\n-                    item.span,\n+                    None,\n                     \"consider implementing `IntoIterator` instead\",\n                 );\n             }"}, {"sha": "e513dcce64e5349fb6668ceb1bf3fc864d577809", "filename": "clippy_lints/src/dbg_macro.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fdbg_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fdbg_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdbg_macro.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -48,6 +48,7 @@ impl EarlyLintPass for DbgMacro {\n                     DBG_MACRO,\n                     mac.span(),\n                     \"`dbg!` macro is intended as a debugging tool\",\n+                    None,\n                     \"ensure to avoid having uses of it in version control\",\n                 );\n             }"}, {"sha": "f5a358d424f71cac70ecff9fd68cfeaee91dc535", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -1,5 +1,5 @@\n use crate::utils::paths;\n-use crate::utils::{is_automatically_derived, is_copy, match_path, span_lint_and_then};\n+use crate::utils::{is_automatically_derived, is_copy, match_path, span_lint_and_note, span_lint_and_then};\n use if_chain::if_chain;\n use rustc_hir::{Item, ItemKind, TraitRef};\n use rustc_lint::{LateContext, LateLintPass};\n@@ -163,14 +163,13 @@ fn check_copy_clone<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, item: &Item<'_>, trait\n             _ => (),\n         }\n \n-        span_lint_and_then(\n+        span_lint_and_note(\n             cx,\n             EXPL_IMPL_CLONE_ON_COPY,\n             item.span,\n             \"you are implementing `Clone` explicitly on a `Copy` type\",\n-            |diag| {\n-                diag.span_note(item.span, \"consider deriving `Clone` or removing `Copy`\");\n-            },\n+            Some(item.span),\n+            \"consider deriving `Clone` or removing `Copy`\",\n         );\n     }\n }"}, {"sha": "9de9056c14029a8d1bb6bd7a8b4244068ca889d6", "filename": "clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -135,7 +135,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DropForgetRef {\n                                        lint,\n                                        expr.span,\n                                        &msg,\n-                                       arg.span,\n+                                       Some(arg.span),\n                                        &format!(\"argument has type `{}`\", arg_ty));\n                 } else if is_copy(cx, arg_ty) {\n                     if match_def_path(cx, def_id, &paths::DROP) {\n@@ -151,7 +151,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DropForgetRef {\n                                        lint,\n                                        expr.span,\n                                        &msg,\n-                                       arg.span,\n+                                       Some(arg.span),\n                                        &format!(\"argument has type {}\", arg_ty));\n                 }\n             }"}, {"sha": "95123e6ff6fe2740b912e8438f426592dc3834d2", "filename": "clippy_lints/src/else_if_without_else.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Felse_if_without_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Felse_if_without_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Felse_if_without_else.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -61,6 +61,7 @@ impl EarlyLintPass for ElseIfWithoutElse {\n                     ELSE_IF_WITHOUT_ELSE,\n                     els.span,\n                     \"`if` expression with an `else if`, but without a final `else`\",\n+                    None,\n                     \"add an `else` block here\",\n                 );\n             }"}, {"sha": "3bfef6f4bed129bc2756dce58b9dca2bc3e7e938", "filename": "clippy_lints/src/empty_enum.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fempty_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fempty_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fempty_enum.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -1,6 +1,6 @@\n //! lint when there is an enum with no variants\n \n-use crate::utils::span_lint_and_then;\n+use crate::utils::span_lint_and_help;\n use rustc_hir::{Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -45,13 +45,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EmptyEnum {\n             let ty = cx.tcx.type_of(did);\n             let adt = ty.ty_adt_def().expect(\"already checked whether this is an enum\");\n             if adt.variants.is_empty() {\n-                span_lint_and_then(cx, EMPTY_ENUM, item.span, \"enum with no variants\", |diag| {\n-                    diag.span_help(\n-                        item.span,\n-                        \"consider using the uninhabited type `!` (never type) or a wrapper \\\n-                         around it to introduce a type which can't be instantiated\",\n-                    );\n-                });\n+                span_lint_and_help(\n+                    cx,\n+                    EMPTY_ENUM,\n+                    item.span,\n+                    \"enum with no variants\",\n+                    None,\n+                    \"consider using the uninhabited type `!` (never type) or a wrapper \\\n+                    around it to introduce a type which can't be instantiated\",\n+                );\n             }\n         }\n     }"}, {"sha": "a5871cf0cd4ddefda14a9341d4eb5803fd81dbd8", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -206,6 +206,7 @@ fn check_variant(\n         lint,\n         span,\n         &format!(\"All variants have the same {}fix: `{}`\", what, value),\n+        None,\n         &format!(\n             \"remove the {}fixes and use full paths to \\\n              the variants instead of glob imports\","}, {"sha": "e3e1136b67693aa856500090f28503b2f097bcef", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -7,7 +7,8 @@ use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n use crate::utils::{\n-    implements_trait, is_adjusted, iter_input_pats, snippet_opt, span_lint_and_then, type_is_unsafe_function,\n+    implements_trait, is_adjusted, iter_input_pats, snippet_opt, span_lint_and_sugg, span_lint_and_then,\n+    type_is_unsafe_function,\n };\n \n declare_clippy_lint! {\n@@ -131,14 +132,15 @@ fn check_closure(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n             if let Some(name) = get_ufcs_type_name(cx, method_def_id, &args[0]);\n \n             then {\n-                span_lint_and_then(cx, REDUNDANT_CLOSURE_FOR_METHOD_CALLS, expr.span, \"redundant closure found\", |diag| {\n-                    diag.span_suggestion(\n-                        expr.span,\n-                        \"remove closure as shown\",\n-                        format!(\"{}::{}\", name, path.ident.name),\n-                        Applicability::MachineApplicable,\n-                    );\n-                });\n+                span_lint_and_sugg(\n+                    cx,\n+                    REDUNDANT_CLOSURE_FOR_METHOD_CALLS,\n+                    expr.span,\n+                    \"redundant closure found\",\n+                    \"remove closure as shown\",\n+                    format!(\"{}::{}\", name, path.ident.name),\n+                    Applicability::MachineApplicable,\n+                );\n             }\n         );\n     }"}, {"sha": "5206266ccf2a6d5e76d11b2c3be52c24c0537b63", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -310,7 +310,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ReadVisitor<'a, 'tcx> {\n                             EVAL_ORDER_DEPENDENCE,\n                             expr.span,\n                             \"unsequenced read of a variable\",\n-                            self.write_expr.span,\n+                            Some(self.write_expr.span),\n                             \"whether read occurs before this write depends on evaluation order\"\n                         );\n                     }"}, {"sha": "82ca4baacb7a9763cd390532f369c36a88924941", "filename": "clippy_lints/src/excessive_bools.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fexcessive_bools.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fexcessive_bools.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexcessive_bools.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -114,6 +114,7 @@ impl ExcessiveBools {\n                 FN_PARAMS_EXCESSIVE_BOOLS,\n                 span,\n                 &format!(\"more than {} bools in function parameters\", self.max_fn_params_bools),\n+                None,\n                 \"consider refactoring bools into two-variant enums\",\n             );\n         }\n@@ -153,6 +154,7 @@ impl EarlyLintPass for ExcessiveBools {\n                         STRUCT_EXCESSIVE_BOOLS,\n                         item.span,\n                         &format!(\"more than {} bools in a struct\", self.max_struct_bools),\n+                        None,\n                         \"consider using a state machine or refactoring bools into two-variant enums\",\n                     );\n                 }"}, {"sha": "eb4b7a826f2ce10d8a05c9f2259f5098af96ce96", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -149,7 +149,7 @@ fn check_assign(cx: &EarlyContext<'_>, expr: &Expr) {\n                                  really are doing `.. = ({op} ..)`\",\n                                 op = op\n                             ),\n-                            eqop_span,\n+                            None,\n                             &format!(\"to remove this lint, use either `{op}=` or `= {op}`\", op = op),\n                         );\n                     }\n@@ -188,6 +188,7 @@ fn check_unop(cx: &EarlyContext<'_>, expr: &Expr) {\n                     binop = binop_str,\n                     unop = unop_str\n                 ),\n+                None,\n                 &format!(\n                     \"put a space between `{binop}` and `{unop}` and remove the space after `{unop}`\",\n                     binop = binop_str,\n@@ -226,7 +227,7 @@ fn check_else(cx: &EarlyContext<'_>, expr: &Expr) {\n                 SUSPICIOUS_ELSE_FORMATTING,\n                 else_span,\n                 &format!(\"this is an `else {}` but the formatting might hide it\", else_desc),\n-                else_span,\n+                None,\n                 &format!(\n                     \"to remove this lint, remove the `else` or remove the new line between \\\n                      `else` and `{}`\",\n@@ -265,7 +266,7 @@ fn check_array(cx: &EarlyContext<'_>, expr: &Expr) {\n                         POSSIBLE_MISSING_COMMA,\n                         lint_span,\n                         \"possibly missing a comma here\",\n-                        lint_span,\n+                        None,\n                         \"to remove this lint, add a comma or write the expr in a single line\",\n                     );\n                 }\n@@ -296,7 +297,7 @@ fn check_missing_else(cx: &EarlyContext<'_>, first: &Expr, second: &Expr) {\n                     SUSPICIOUS_ELSE_FORMATTING,\n                     else_span,\n                     &format!(\"this looks like {} but the `else` is missing\", looks_like),\n-                    else_span,\n+                    None,\n                     &format!(\n                         \"to remove this lint, add the missing `else` or add a new line before {}\",\n                         next_thing,"}, {"sha": "c8c562fe29f53ebfd7af1c57c40da853767f29f5", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -431,6 +431,7 @@ fn check_needless_must_use(\n             DOUBLE_MUST_USE,\n             fn_header_span,\n             \"this function has an empty `#[must_use]` attribute, but returns a type already marked as `#[must_use]`\",\n+            None,\n             \"either add some descriptive text or remove the attribute\",\n         );\n     }"}, {"sha": "33a9478f058830adedb7cfea69f26c5f8c50f669", "filename": "clippy_lints/src/identity_conversion.rs", "status": "modified", "additions": 28, "deletions": 25, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fidentity_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fidentity_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_conversion.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -1,5 +1,5 @@\n use crate::utils::{\n-    match_def_path, match_trait_method, paths, same_tys, snippet, snippet_with_macro_callsite, span_lint_and_then,\n+    match_def_path, match_trait_method, paths, same_tys, snippet, snippet_with_macro_callsite, span_lint_and_sugg,\n };\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, HirId, MatchSource};\n@@ -58,29 +58,31 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IdentityConversion {\n                     if same_tys(cx, a, b) {\n                         let sugg = snippet_with_macro_callsite(cx, args[0].span, \"<expr>\").to_string();\n \n-                        span_lint_and_then(cx, IDENTITY_CONVERSION, e.span, \"identical conversion\", |diag| {\n-                            diag.span_suggestion(\n-                                e.span,\n-                                \"consider removing `.into()`\",\n-                                sugg,\n-                                Applicability::MachineApplicable, // snippet\n-                            );\n-                        });\n+                        span_lint_and_sugg(\n+                            cx,\n+                            IDENTITY_CONVERSION,\n+                            e.span,\n+                            \"identical conversion\",\n+                            \"consider removing `.into()`\",\n+                            sugg,\n+                            Applicability::MachineApplicable, // snippet\n+                        );\n                     }\n                 }\n                 if match_trait_method(cx, e, &paths::INTO_ITERATOR) && &*name.ident.as_str() == \"into_iter\" {\n                     let a = cx.tables.expr_ty(e);\n                     let b = cx.tables.expr_ty(&args[0]);\n                     if same_tys(cx, a, b) {\n                         let sugg = snippet(cx, args[0].span, \"<expr>\").into_owned();\n-                        span_lint_and_then(cx, IDENTITY_CONVERSION, e.span, \"identical conversion\", |diag| {\n-                            diag.span_suggestion(\n-                                e.span,\n-                                \"consider removing `.into_iter()`\",\n-                                sugg,\n-                                Applicability::MachineApplicable, // snippet\n-                            );\n-                        });\n+                        span_lint_and_sugg(\n+                            cx,\n+                            IDENTITY_CONVERSION,\n+                            e.span,\n+                            \"identical conversion\",\n+                            \"consider removing `.into_iter()`\",\n+                            sugg,\n+                            Applicability::MachineApplicable, // snippet\n+                        );\n                     }\n                 }\n             },\n@@ -95,14 +97,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IdentityConversion {\n                                 let sugg = snippet(cx, args[0].span.source_callsite(), \"<expr>\").into_owned();\n                                 let sugg_msg =\n                                     format!(\"consider removing `{}()`\", snippet(cx, path.span, \"From::from\"));\n-                                span_lint_and_then(cx, IDENTITY_CONVERSION, e.span, \"identical conversion\", |diag| {\n-                                    diag.span_suggestion(\n-                                        e.span,\n-                                        &sugg_msg,\n-                                        sugg,\n-                                        Applicability::MachineApplicable, // snippet\n-                                    );\n-                                });\n+                                span_lint_and_sugg(\n+                                    cx,\n+                                    IDENTITY_CONVERSION,\n+                                    e.span,\n+                                    \"identical conversion\",\n+                                    &sugg_msg,\n+                                    sugg,\n+                                    Applicability::MachineApplicable, // snippet\n+                                );\n                             }\n                         }\n                     }"}, {"sha": "c11e291f98e4b41766dbf22c8940d8f9fff3b74c", "filename": "clippy_lints/src/if_not_else.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fif_not_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fif_not_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_not_else.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -61,6 +61,7 @@ impl EarlyLintPass for IfNotElse {\n                             IF_NOT_ELSE,\n                             item.span,\n                             \"Unnecessary boolean `not` operation\",\n+                            None,\n                             \"remove the `!` and swap the blocks of the `if`/`else`\",\n                         );\n                     },\n@@ -70,6 +71,7 @@ impl EarlyLintPass for IfNotElse {\n                             IF_NOT_ELSE,\n                             item.span,\n                             \"Unnecessary `!=` operation\",\n+                            None,\n                             \"change to `==` and swap the blocks of the `if`/`else`\",\n                         );\n                     },"}, {"sha": "c5808dd540b6f43c3940e217d1328c549bf3f08b", "filename": "clippy_lints/src/indexing_slicing.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findexing_slicing.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -138,7 +138,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IndexingSlicing {\n                     (None, None) => return, // [..] is ok.\n                 };\n \n-                span_lint_and_help(cx, INDEXING_SLICING, expr.span, \"slicing may panic.\", help_msg);\n+                span_lint_and_help(cx, INDEXING_SLICING, expr.span, \"slicing may panic.\", None, help_msg);\n             } else {\n                 // Catchall non-range index, i.e., [n] or [n << m]\n                 if let ty::Array(..) = ty.kind {\n@@ -154,6 +154,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IndexingSlicing {\n                     INDEXING_SLICING,\n                     expr.span,\n                     \"indexing may panic.\",\n+                    None,\n                     \"Consider using `.get(n)` or `.get_mut(n)` instead\",\n                 );\n             }"}, {"sha": "e343d690f6cd8a4237ac905a20a47e525c5dd9ec", "filename": "clippy_lints/src/inherent_to_string.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_to_string.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -137,6 +137,7 @@ fn show_lint(cx: &LateContext<'_, '_>, item: &ImplItem<'_>) {\n                 \"type `{}` implements inherent method `to_string(&self) -> String` which shadows the implementation of `Display`\",\n                 self_type.to_string()\n             ),\n+            None,\n             &format!(\"remove the inherent method from type `{}`\", self_type.to_string())\n         );\n     } else {\n@@ -148,6 +149,7 @@ fn show_lint(cx: &LateContext<'_, '_>, item: &ImplItem<'_>) {\n                 \"implementation of inherent method `to_string(&self) -> String` for type `{}`\",\n                 self_type.to_string()\n             ),\n+            None,\n             &format!(\"implement trait `Display` for type `{}` instead\", self_type.to_string()),\n         );\n     }"}, {"sha": "d5dbd495680b2fca928e3a69131e6243127b6899", "filename": "clippy_lints/src/int_plus_one.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fint_plus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fint_plus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fint_plus_one.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -5,7 +5,7 @@ use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n-use crate::utils::{snippet_opt, span_lint_and_then};\n+use crate::utils::{snippet_opt, span_lint_and_sugg};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `x >= y + 1` or `x - 1 >= y` (and `<=`) in a block\n@@ -149,19 +149,14 @@ impl IntPlusOne {\n     }\n \n     fn emit_warning(cx: &EarlyContext<'_>, block: &Expr, recommendation: String) {\n-        span_lint_and_then(\n+        span_lint_and_sugg(\n             cx,\n             INT_PLUS_ONE,\n             block.span,\n             \"Unnecessary `>= y + 1` or `x - 1 >=`\",\n-            |diag| {\n-                diag.span_suggestion(\n-                    block.span,\n-                    \"change it to\",\n-                    recommendation,\n-                    Applicability::MachineApplicable, // snippet\n-                );\n-            },\n+            \"change it to\",\n+            recommendation,\n+            Applicability::MachineApplicable, // snippet\n         );\n     }\n }"}, {"sha": "fe34d33fe652c2cf7f3ac258be6dc80840aa25b8", "filename": "clippy_lints/src/integer_division.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Finteger_division.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Finteger_division.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finteger_division.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -35,6 +35,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IntegerDivision {\n                 INTEGER_DIVISION,\n                 expr.span,\n                 \"integer division\",\n+                None,\n                 \"division of integers may cause loss of precision. consider using floats.\",\n             );\n         }"}, {"sha": "deb57db1678965e946466bd042adc1d108e6e0e6", "filename": "clippy_lints/src/large_stack_arrays.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -57,6 +57,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LargeStackArrays {\n                         \"allocating a local array larger than {} bytes\",\n                         self.maximum_allowed_size\n                     ),\n+                    None,\n                     &format!(\n                         \"consider allocating on the heap with `vec!{}.into_boxed_slice()`\",\n                         snippet(cx, expr.span, \"[...]\")"}, {"sha": "710dec8d33fc9e085d83582857e7698fb99389a7", "filename": "clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_underscore.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -90,6 +90,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetUnderscore {\n                         LET_UNDERSCORE_LOCK,\n                         local.span,\n                         \"non-binding let on a synchronization lock\",\n+                        None,\n                         \"consider using an underscore-prefixed named \\\n                             binding or dropping explicitly with `std::mem::drop`\"\n                     )\n@@ -99,6 +100,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetUnderscore {\n                         LET_UNDERSCORE_MUST_USE,\n                         local.span,\n                         \"non-binding let on an expression with `#[must_use]` type\",\n+                        None,\n                         \"consider explicitly using expression value\"\n                     )\n                 } else if is_must_use_func_call(cx, init) {\n@@ -107,6 +109,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetUnderscore {\n                         LET_UNDERSCORE_MUST_USE,\n                         local.span,\n                         \"non-binding let on a result of a `#[must_use]` function\",\n+                        None,\n                         \"consider explicitly using function result\"\n                     )\n                 }"}, {"sha": "19c46476263b07e264715aec7b809b30e02aa1da", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -838,6 +838,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &unwrap::UNNECESSARY_UNWRAP,\n         &use_self::USE_SELF,\n         &utils::internal_lints::CLIPPY_LINTS_INTERNAL,\n+        &utils::internal_lints::COLLAPSIBLE_SPAN_LINT_CALLS,\n         &utils::internal_lints::COMPILER_LINT_FUNCTIONS,\n         &utils::internal_lints::DEFAULT_LINT,\n         &utils::internal_lints::LINT_WITHOUT_LINT_PASS,\n@@ -1051,6 +1052,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box unnamed_address::UnnamedAddress);\n     store.register_late_pass(|| box dereference::Dereferencing);\n     store.register_late_pass(|| box future_not_send::FutureNotSend);\n+    store.register_late_pass(|| box utils::internal_lints::CollapsibleCalls);\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n@@ -1162,6 +1164,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n \n     store.register_group(true, \"clippy::internal\", Some(\"clippy_internal\"), vec![\n         LintId::of(&utils::internal_lints::CLIPPY_LINTS_INTERNAL),\n+        LintId::of(&utils::internal_lints::COLLAPSIBLE_SPAN_LINT_CALLS),\n         LintId::of(&utils::internal_lints::COMPILER_LINT_FUNCTIONS),\n         LintId::of(&utils::internal_lints::DEFAULT_LINT),\n         LintId::of(&utils::internal_lints::LINT_WITHOUT_LINT_PASS),"}, {"sha": "d76df908f093f13885f5555ba635ba9910abad35", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 42, "deletions": 32, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -1402,6 +1402,7 @@ fn check_arg_type(cx: &LateContext<'_, '_>, pat: &Pat<'_>, arg: &Expr<'_>) {\n                  `if let` statement.\",\n                 snippet(cx, arg.span, \"_\")\n             ),\n+            None,\n             &format!(\n                 \"consider replacing `for {0} in {1}` with `if let Some({0}) = {1}`\",\n                 snippet(cx, pat.span, \"_\"),\n@@ -1418,6 +1419,7 @@ fn check_arg_type(cx: &LateContext<'_, '_>, pat: &Pat<'_>, arg: &Expr<'_>) {\n                  `if let` statement.\",\n                 snippet(cx, arg.span, \"_\")\n             ),\n+            None,\n             &format!(\n                 \"consider replacing `for {0} in {1}` with `if let Ok({0}) = {1}`\",\n                 snippet(cx, pat.span, \"_\"),\n@@ -2471,45 +2473,53 @@ fn check_needless_collect<'a, 'tcx>(expr: &'tcx Expr<'_>, cx: &LateContext<'a, '\n                 match_type(cx, ty, &paths::HASHMAP) {\n                 if method.ident.name == sym!(len) {\n                     let span = shorten_needless_collect_span(expr);\n-                    span_lint_and_then(cx, NEEDLESS_COLLECT, span, NEEDLESS_COLLECT_MSG, |diag| {\n-                        diag.span_suggestion(\n-                            span,\n-                            \"replace with\",\n-                            \".count()\".to_string(),\n-                            Applicability::MachineApplicable,\n-                        );\n-                    });\n+                    span_lint_and_sugg(\n+                        cx,\n+                        NEEDLESS_COLLECT,\n+                        span,\n+                        NEEDLESS_COLLECT_MSG,\n+                        \"replace with\",\n+                        \".count()\".to_string(),\n+                        Applicability::MachineApplicable,\n+                    );\n                 }\n                 if method.ident.name == sym!(is_empty) {\n                     let span = shorten_needless_collect_span(expr);\n-                    span_lint_and_then(cx, NEEDLESS_COLLECT, span, NEEDLESS_COLLECT_MSG, |diag| {\n-                        diag.span_suggestion(\n-                            span,\n-                            \"replace with\",\n-                            \".next().is_none()\".to_string(),\n-                            Applicability::MachineApplicable,\n-                        );\n-                    });\n+                    span_lint_and_sugg(\n+                        cx,\n+                        NEEDLESS_COLLECT,\n+                        span,\n+                        NEEDLESS_COLLECT_MSG,\n+                        \"replace with\",\n+                        \".next().is_none()\".to_string(),\n+                        Applicability::MachineApplicable,\n+                    );\n                 }\n                 if method.ident.name == sym!(contains) {\n                     let contains_arg = snippet(cx, args[1].span, \"??\");\n                     let span = shorten_needless_collect_span(expr);\n-                    span_lint_and_then(cx, NEEDLESS_COLLECT, span, NEEDLESS_COLLECT_MSG, |diag| {\n-                        let (arg, pred) = if contains_arg.starts_with('&') {\n-                            (\"x\", &contains_arg[1..])\n-                        } else {\n-                            (\"&x\", &*contains_arg)\n-                        };\n-                        diag.span_suggestion(\n-                            span,\n-                            \"replace with\",\n-                            format!(\n-                                \".any(|{}| x == {})\",\n-                                arg, pred\n-                            ),\n-                            Applicability::MachineApplicable,\n-                        );\n-                    });\n+                    span_lint_and_then(\n+                        cx,\n+                        NEEDLESS_COLLECT,\n+                        span,\n+                        NEEDLESS_COLLECT_MSG,\n+                        |diag| {\n+                            let (arg, pred) = if contains_arg.starts_with('&') {\n+                                (\"x\", &contains_arg[1..])\n+                            } else {\n+                                (\"&x\", &*contains_arg)\n+                            };\n+                            diag.span_suggestion(\n+                                span,\n+                                \"replace with\",\n+                                format!(\n+                                    \".any(|{}| x == {})\",\n+                                    arg, pred\n+                                ),\n+                                Applicability::MachineApplicable,\n+                            );\n+                        }\n+                    );\n                 }\n             }\n         }"}, {"sha": "8a0e47a3d31c552bd0026c366991ba82ac8ed4b4", "filename": "clippy_lints/src/main_recursion.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fmain_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fmain_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmain_recursion.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -53,6 +53,7 @@ impl LateLintPass<'_, '_> for MainRecursion {\n                     MAIN_RECURSION,\n                     func.span,\n                     &format!(\"recursing into entrypoint `{}`\", snippet(cx, func.span, \"main\")),\n+                    None,\n                     \"consider using another function for this recursion\"\n                 )\n             }"}, {"sha": "270e306e15f7a37ba243dfbaa717ed7b48c23aa2", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -441,6 +441,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Matches {\n                     REST_PAT_IN_FULLY_BOUND_STRUCTS,\n                     pat.span,\n                     \"unnecessary use of `..` pattern in struct binding. All fields were already bound\",\n+                    None,\n                     \"consider removing `..` from this binding\",\n                 );\n             }\n@@ -636,7 +637,7 @@ fn check_overlapping_arms<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ex: &'tcx Expr<'\n                     MATCH_OVERLAPPING_ARM,\n                     start.span,\n                     \"some ranges overlap\",\n-                    end.span,\n+                    Some(end.span),\n                     \"overlaps with this\",\n                 );\n             }\n@@ -674,7 +675,7 @@ fn check_wild_err_arm(cx: &LateContext<'_, '_>, ex: &Expr<'_>, arms: &[Arm<'_>])\n                                 MATCH_WILD_ERR_ARM,\n                                 arm.pat.span,\n                                 &format!(\"`Err({})` matches all errors\", &ident_bind_name),\n-                                arm.pat.span,\n+                                None,\n                                 \"match each error separately or use the error output\",\n                             );\n                         }\n@@ -887,6 +888,7 @@ fn check_wild_in_or_pats(cx: &LateContext<'_, '_>, arms: &[Arm<'_>]) {\n                     WILDCARD_IN_OR_PATTERNS,\n                     arm.pat.span,\n                     \"wildcard pattern covers any other pattern as it will match anyway.\",\n+                    None,\n                     \"Consider handling `_` separately.\",\n                 );\n             }"}, {"sha": "ab6865bf0f3b7675edd08a150d2c0dd0c4eee121", "filename": "clippy_lints/src/mem_replace.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_replace.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -148,6 +148,7 @@ fn check_replace_with_uninit(cx: &LateContext<'_, '_>, src: &Expr<'_>, expr_span\n                         MEM_REPLACE_WITH_UNINIT,\n                         expr_span,\n                         \"replacing with `mem::uninitialized()`\",\n+                        None,\n                         \"consider using the `take_mut` crate instead\",\n                     );\n                 } else if cx.tcx.is_diagnostic_item(sym::mem_zeroed, repl_def_id) &&\n@@ -157,6 +158,7 @@ fn check_replace_with_uninit(cx: &LateContext<'_, '_>, src: &Expr<'_>, expr_span\n                         MEM_REPLACE_WITH_UNINIT,\n                         expr_span,\n                         \"replacing with `mem::zeroed()`\",\n+                        None,\n                         \"consider using a default value or the `take_mut` crate instead\",\n                     );\n                 }"}, {"sha": "7c652229d33de63b6363d707785c427cf2263b56", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -2255,6 +2255,7 @@ fn lint_iter_nth<'a, 'tcx>(\n         ITER_NTH,\n         expr.span,\n         &format!(\"called `.iter{0}().nth()` on a {1}\", mut_str, caller_type),\n+        None,\n         &format!(\"calling `.get{}()` is both faster and more readable\", mut_str),\n     );\n }\n@@ -2364,6 +2365,7 @@ fn lint_iter_skip_next(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>) {\n             ITER_SKIP_NEXT,\n             expr.span,\n             \"called `skip(x).next()` on an iterator\",\n+            None,\n             \"this is more succinctly expressed by calling `nth(x)`\",\n         );\n     }\n@@ -2431,6 +2433,7 @@ fn lint_unwrap(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, unwrap_args: &[hi\n             lint,\n             expr.span,\n             &format!(\"used `unwrap()` on `{}` value\", kind,),\n+            None,\n             &format!(\n                 \"if you don't want to handle the `{}` case gracefully, consider \\\n                  using `expect()` to provide a better panic message\",\n@@ -2458,6 +2461,7 @@ fn lint_expect(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, expect_args: &[hi\n             lint,\n             expr.span,\n             &format!(\"used `expect()` on `{}` value\", kind,),\n+            None,\n             &format!(\"if this value is an `{}`, it will panic\", none_value,),\n         );\n     }\n@@ -2478,6 +2482,7 @@ fn lint_ok_expect(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, ok_args: &[hir\n                 OK_EXPECT,\n                 expr.span,\n                 \"called `ok().expect()` on a `Result` value\",\n+                None,\n                 \"you can call `expect()` directly on the `Result`\",\n             );\n         }\n@@ -2572,7 +2577,7 @@ fn lint_map_unwrap_or_else<'a, 'tcx>(\n                 },\n                 expr.span,\n                 msg,\n-                expr.span,\n+                None,\n                 &format!(\n                     \"replace `map({0}).unwrap_or_else({1})` with `map_or_else({1}, {0})`\",\n                     map_snippet, unwrap_snippet,\n@@ -2752,7 +2757,7 @@ fn lint_filter_next<'a, 'tcx>(\n                 FILTER_NEXT,\n                 expr.span,\n                 msg,\n-                expr.span,\n+                None,\n                 &format!(\"replace `filter({0}).next()` with `find({0})`\", filter_snippet),\n             );\n         } else {\n@@ -2774,6 +2779,7 @@ fn lint_skip_while_next<'a, 'tcx>(\n             SKIP_WHILE_NEXT,\n             expr.span,\n             \"called `skip_while(p).next()` on an `Iterator`\",\n+            None,\n             \"this is more succinctly expressed by calling `.find(!p)` instead\",\n         );\n     }\n@@ -2790,7 +2796,7 @@ fn lint_filter_map<'a, 'tcx>(\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n         let msg = \"called `filter(p).map(q)` on an `Iterator`\";\n         let hint = \"this is more succinctly expressed by calling `.filter_map(..)` instead\";\n-        span_lint_and_help(cx, FILTER_MAP, expr.span, msg, hint);\n+        span_lint_and_help(cx, FILTER_MAP, expr.span, msg, None, hint);\n     }\n }\n \n@@ -2810,7 +2816,7 @@ fn lint_filter_map_next<'a, 'tcx>(\n                 FILTER_MAP_NEXT,\n                 expr.span,\n                 msg,\n-                expr.span,\n+                None,\n                 &format!(\"replace `filter_map({0}).next()` with `find_map({0})`\", filter_snippet),\n             );\n         } else {\n@@ -2830,7 +2836,7 @@ fn lint_find_map<'a, 'tcx>(\n     if match_trait_method(cx, &map_args[0], &paths::ITERATOR) {\n         let msg = \"called `find(p).map(q)` on an `Iterator`\";\n         let hint = \"this is more succinctly expressed by calling `.find_map(..)` instead\";\n-        span_lint_and_help(cx, FIND_MAP, expr.span, msg, hint);\n+        span_lint_and_help(cx, FIND_MAP, expr.span, msg, None, hint);\n     }\n }\n \n@@ -2845,7 +2851,7 @@ fn lint_filter_map_map<'a, 'tcx>(\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n         let msg = \"called `filter_map(p).map(q)` on an `Iterator`\";\n         let hint = \"this is more succinctly expressed by only calling `.filter_map(..)` instead\";\n-        span_lint_and_help(cx, FILTER_MAP, expr.span, msg, hint);\n+        span_lint_and_help(cx, FILTER_MAP, expr.span, msg, None, hint);\n     }\n }\n \n@@ -2861,7 +2867,7 @@ fn lint_filter_flat_map<'a, 'tcx>(\n         let msg = \"called `filter(p).flat_map(q)` on an `Iterator`\";\n         let hint = \"this is more succinctly expressed by calling `.flat_map(..)` \\\n                     and filtering by returning `iter::empty()`\";\n-        span_lint_and_help(cx, FILTER_MAP, expr.span, msg, hint);\n+        span_lint_and_help(cx, FILTER_MAP, expr.span, msg, None, hint);\n     }\n }\n \n@@ -2877,7 +2883,7 @@ fn lint_filter_map_flat_map<'a, 'tcx>(\n         let msg = \"called `filter_map(p).flat_map(q)` on an `Iterator`\";\n         let hint = \"this is more succinctly expressed by calling `.flat_map(..)` \\\n                     and filtering by returning `iter::empty()`\";\n-        span_lint_and_help(cx, FILTER_MAP, expr.span, msg, hint);\n+        span_lint_and_help(cx, FILTER_MAP, expr.span, msg, None, hint);\n     }\n }\n \n@@ -3260,6 +3266,7 @@ fn lint_suspicious_map(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>) {\n         SUSPICIOUS_MAP,\n         expr.span,\n         \"this call to `map()` won't have an effect on the call to `count()`\",\n+        None,\n         \"make sure you did not confuse `map` with `filter` or `for_each`\",\n     );\n }\n@@ -3640,7 +3647,7 @@ fn lint_filetype_is_file(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, args: &\n     }\n     let lint_msg = format!(\"`{}FileType::is_file()` only {} regular files\", lint_unary, verb);\n     let help_msg = format!(\"use `{}FileType::is_dir()` instead\", help_unary);\n-    span_lint_and_help(cx, FILETYPE_IS_FILE, span, &lint_msg, &help_msg);\n+    span_lint_and_help(cx, FILETYPE_IS_FILE, span, &lint_msg, None, &help_msg);\n }\n \n fn fn_header_equals(expected: hir::FnHeader, actual: hir::FnHeader) -> bool {"}, {"sha": "adfd8dfb1c18af5abcdb6d4eca6414e9803ed86f", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -313,6 +313,7 @@ impl EarlyLintPass for MiscEarlyLints {\n                     UNNEEDED_FIELD_PATTERN,\n                     pat.span,\n                     \"All the struct fields are matched to a wildcard pattern, consider using `..`.\",\n+                    None,\n                     &format!(\"Try with `{} {{ .. }}` instead\", type_name),\n                 );\n                 return;\n@@ -348,6 +349,7 @@ impl EarlyLintPass for MiscEarlyLints {\n                                 field.span,\n                                 \"You matched a field with a wildcard pattern. Consider using `..` \\\n                                  instead\",\n+                                None,\n                                 &format!(\"Try with `{} {{ {}, .. }}`\", type_name, normal[..].join(\", \")),\n                             );\n                         }"}, {"sha": "28183810df48977e3c776f568b58ab92633b6479", "filename": "clippy_lints/src/needless_continue.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fneedless_continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fneedless_continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_continue.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -304,6 +304,7 @@ fn emit_warning<'a>(cx: &EarlyContext<'_>, data: &'a LintData<'_>, header: &str,\n         NEEDLESS_CONTINUE,\n         expr.span,\n         message,\n+        None,\n         &format!(\"{}\\n{}\", header, snip),\n     );\n }"}, {"sha": "66dfa20edb5e724890f43177332bfd720d941d44", "filename": "clippy_lints/src/option_env_unwrap.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Foption_env_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Foption_env_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_env_unwrap.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -46,6 +46,7 @@ impl EarlyLintPass for OptionEnvUnwrap {\n                     OPTION_ENV_UNWRAP,\n                     expr.span,\n                     \"this will panic at run-time if the environment variable doesn't exist at compile-time\",\n+                    None,\n                     \"consider using the `env!` macro instead\"\n                 );\n             }"}, {"sha": "1e2afb7a67406110160bed904d1cf0a859f8c746", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -2,8 +2,8 @@\n \n use crate::utils::ptr::get_spans;\n use crate::utils::{\n-    is_type_diagnostic_item, match_qpath, match_type, paths, snippet_opt, span_lint, span_lint_and_then,\n-    walk_ptrs_hir_ty,\n+    is_type_diagnostic_item, match_qpath, match_type, paths, snippet_opt, span_lint, span_lint_and_sugg,\n+    span_lint_and_then, walk_ptrs_hir_ty,\n };\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -234,19 +234,14 @@ fn check_fn(cx: &LateContext<'_, '_>, decl: &FnDecl<'_>, fn_id: HirId, opt_body_\n                     then {\n                         let replacement = snippet_opt(cx, inner.span);\n                         if let Some(r) = replacement {\n-                            span_lint_and_then(\n+                            span_lint_and_sugg(\n                                 cx,\n                                 PTR_ARG,\n                                 arg.span,\n                                 \"using a reference to `Cow` is not recommended.\",\n-                                |diag| {\n-                                    diag.span_suggestion(\n-                                        arg.span,\n-                                        \"change this to\",\n-                                        \"&\".to_owned() + &r,\n-                                        Applicability::Unspecified,\n-                                    );\n-                                },\n+                                \"change this to\",\n+                                \"&\".to_owned() + &r,\n+                                Applicability::Unspecified,\n                             );\n                         }\n                     }"}, {"sha": "30084e3e1ffce993a19efd30787bfd4c15fadf93", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -208,7 +208,7 @@ fn check_regex<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>, utf8:\n             match parser.parse(r) {\n                 Ok(r) => {\n                     if let Some(repl) = is_trivial_regex(&r) {\n-                        span_lint_and_help(cx, TRIVIAL_REGEX, expr.span, \"trivial regex\", repl);\n+                        span_lint_and_help(cx, TRIVIAL_REGEX, expr.span, \"trivial regex\", None, repl);\n                     }\n                 },\n                 Err(regex_syntax::Error::Parse(e)) => {\n@@ -236,7 +236,7 @@ fn check_regex<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>, utf8:\n         match parser.parse(&r) {\n             Ok(r) => {\n                 if let Some(repl) = is_trivial_regex(&r) {\n-                    span_lint_and_help(cx, TRIVIAL_REGEX, expr.span, \"trivial regex\", repl);\n+                    span_lint_and_help(cx, TRIVIAL_REGEX, expr.span, \"trivial regex\", None, repl);\n                 }\n             },\n             Err(regex_syntax::Error::Parse(e)) => {"}, {"sha": "5c9117d5b81cd6c62de819caa00c87e626fe8b77", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 46, "deletions": 41, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -8,7 +8,7 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use rustc_span::BytePos;\n \n-use crate::utils::{in_macro, match_path_ast, snippet_opt, span_lint_and_then};\n+use crate::utils::{in_macro, match_path_ast, snippet_opt, span_lint_and_sugg, span_lint_and_then};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for return statements at the end of a block.\n@@ -162,24 +162,26 @@ impl Return {\n             },\n             None => match replacement {\n                 RetReplacement::Empty => {\n-                    span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded `return` statement\", |diag| {\n-                        diag.span_suggestion(\n-                            ret_span,\n-                            \"remove `return`\",\n-                            String::new(),\n-                            Applicability::MachineApplicable,\n-                        );\n-                    });\n+                    span_lint_and_sugg(\n+                        cx,\n+                        NEEDLESS_RETURN,\n+                        ret_span,\n+                        \"unneeded `return` statement\",\n+                        \"remove `return`\",\n+                        String::new(),\n+                        Applicability::MachineApplicable,\n+                    );\n                 },\n                 RetReplacement::Block => {\n-                    span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded `return` statement\", |diag| {\n-                        diag.span_suggestion(\n-                            ret_span,\n-                            \"replace `return` with an empty block\",\n-                            \"{}\".to_string(),\n-                            Applicability::MachineApplicable,\n-                        );\n-                    });\n+                    span_lint_and_sugg(\n+                        cx,\n+                        NEEDLESS_RETURN,\n+                        ret_span,\n+                        \"unneeded `return` statement\",\n+                        \"replace `return` with an empty block\",\n+                        \"{}\".to_string(),\n+                        Applicability::MachineApplicable,\n+                    );\n                 },\n             },\n         }\n@@ -259,14 +261,15 @@ impl EarlyLintPass for Return {\n                 } else {\n                     (ty.span, Applicability::MaybeIncorrect)\n                 };\n-                span_lint_and_then(cx, UNUSED_UNIT, rspan, \"unneeded unit return type\", |diag| {\n-                    diag.span_suggestion(\n-                        rspan,\n-                        \"remove the `-> ()`\",\n-                        String::new(),\n-                        appl,\n-                    );\n-                });\n+                span_lint_and_sugg(\n+                    cx,\n+                    UNUSED_UNIT,\n+                    rspan,\n+                    \"unneeded unit return type\",\n+                    \"remove the `-> ()`\",\n+                    String::new(),\n+                    appl,\n+                );\n             }\n         }\n     }\n@@ -279,14 +282,15 @@ impl EarlyLintPass for Return {\n             if is_unit_expr(expr) && !stmt.span.from_expansion();\n             then {\n                 let sp = expr.span;\n-                span_lint_and_then(cx, UNUSED_UNIT, sp, \"unneeded unit expression\", |diag| {\n-                    diag.span_suggestion(\n-                        sp,\n-                        \"remove the final `()`\",\n-                        String::new(),\n-                        Applicability::MachineApplicable,\n-                    );\n-                });\n+                span_lint_and_sugg(\n+                    cx,\n+                    UNUSED_UNIT,\n+                    sp,\n+                    \"unneeded unit expression\",\n+                    \"remove the final `()`\",\n+                    String::new(),\n+                    Applicability::MachineApplicable,\n+                );\n             }\n         }\n     }\n@@ -295,14 +299,15 @@ impl EarlyLintPass for Return {\n         match e.kind {\n             ast::ExprKind::Ret(Some(ref expr)) | ast::ExprKind::Break(_, Some(ref expr)) => {\n                 if is_unit_expr(expr) && !expr.span.from_expansion() {\n-                    span_lint_and_then(cx, UNUSED_UNIT, expr.span, \"unneeded `()`\", |diag| {\n-                        diag.span_suggestion(\n-                            expr.span,\n-                            \"remove the `()`\",\n-                            String::new(),\n-                            Applicability::MachineApplicable,\n-                        );\n-                    });\n+                    span_lint_and_sugg(\n+                        cx,\n+                        UNUSED_UNIT,\n+                        expr.span,\n+                        \"unneeded `()`\",\n+                        \"remove the `()`\",\n+                        String::new(),\n+                        Applicability::MachineApplicable,\n+                    );\n                 }\n             },\n             _ => (),"}, {"sha": "67121729663c6aa4ec62fa46af4c673c42318171", "filename": "clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -76,6 +76,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TraitBounds {\n                         TYPE_REPETITION_IN_BOUNDS,\n                         p.span,\n                         \"this type has already been used as a bound predicate\",\n+                        None,\n                         &hint_string,\n                     );\n                 }"}, {"sha": "e24d2c4f495dba2aeb01e8ef09a590f0f9000348", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -1,5 +1,6 @@\n use crate::utils::{\n-    is_normalizable, last_path_segment, match_def_path, paths, snippet, span_lint, span_lint_and_then, sugg,\n+    is_normalizable, last_path_segment, match_def_path, paths, snippet, span_lint, span_lint_and_sugg,\n+    span_lint_and_then, sugg,\n };\n use if_chain::if_chain;\n use rustc_ast::ast;\n@@ -441,24 +442,19 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                     \"\"\n                                 };\n \n-                                span_lint_and_then(\n+                                span_lint_and_sugg(\n                                     cx,\n                                     TRANSMUTE_BYTES_TO_STR,\n                                     e.span,\n                                     &format!(\"transmute from a `{}` to a `{}`\", from_ty, to_ty),\n-                                    |diag| {\n-                                        diag.span_suggestion(\n-                                            e.span,\n-                                            \"consider using\",\n-                                            format!(\n-                                                \"std::str::from_utf8{}({}).unwrap()\",\n-                                                postfix,\n-                                                snippet(cx, args[0].span, \"..\"),\n-                                            ),\n-                                            Applicability::Unspecified,\n-                                        );\n-                                    }\n-                                )\n+                                    \"consider using\",\n+                                    format!(\n+                                        \"std::str::from_utf8{}({}).unwrap()\",\n+                                        postfix,\n+                                        snippet(cx, args[0].span, \"..\"),\n+                                    ),\n+                                    Applicability::Unspecified,\n+                                );\n                             } else {\n                                 if cx.tcx.erase_regions(&from_ty) != cx.tcx.erase_regions(&to_ty) {\n                                     span_lint_and_then("}, {"sha": "4d853b99bafa77b6ff8b1698c87bb25423265fd8", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -343,6 +343,7 @@ impl Types {\n                                 BOX_VEC,\n                                 hir_ty.span,\n                                 \"you seem to be trying to use `Box<Vec<T>>`. Consider using just `Vec<T>`\",\n+                                None,\n                                 \"`Vec<T>` is already on the heap, `Box<Vec<T>>` makes an extra allocation.\",\n                             );\n                             return; // don't recurse into the type\n@@ -437,6 +438,7 @@ impl Types {\n                             LINKEDLIST,\n                             hir_ty.span,\n                             \"I see you're using a LinkedList! Perhaps you meant some other data structure?\",\n+                            None,\n                             \"a `VecDeque` might work\",\n                         );\n                         return; // don't recurse into the type\n@@ -1900,7 +1902,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AbsurdExtremeComparisons {\n                         conclusion\n                     );\n \n-                    span_lint_and_help(cx, ABSURD_EXTREME_COMPARISONS, expr.span, msg, &help);\n+                    span_lint_and_help(cx, ABSURD_EXTREME_COMPARISONS, expr.span, msg, None, &help);\n                 }\n             }\n         }"}, {"sha": "4e077b95b5c68024c9eaca1f78c343c62a2dfe9a", "filename": "clippy_lints/src/unnamed_address.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Funnamed_address.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Funnamed_address.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnamed_address.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -89,6 +89,7 @@ impl LateLintPass<'_, '_> for UnnamedAddress {\n                     VTABLE_ADDRESS_COMPARISONS,\n                     expr.span,\n                     \"comparing trait object pointers compares a non-unique vtable address\",\n+                    None,\n                     \"consider extracting and comparing data pointers only\",\n                 );\n             }\n@@ -109,6 +110,7 @@ impl LateLintPass<'_, '_> for UnnamedAddress {\n                     VTABLE_ADDRESS_COMPARISONS,\n                     expr.span,\n                     \"comparing trait object pointers compares a non-unique vtable address\",\n+                    None,\n                     \"consider extracting and comparing data pointers only\",\n                 );\n             }"}, {"sha": "3d5e2f9fd21556f33562794350a22915d1983d2c", "filename": "clippy_lints/src/unused_self.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_self.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -69,6 +69,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedSelf {\n                         UNUSED_SELF,\n                         self_param.span,\n                         \"unused `self` argument\",\n+                        None,\n                         \"consider refactoring to a associated function\",\n                     );\n                     return;"}, {"sha": "093ef3191088d1afc32c5a239bc00c114fc1b33a", "filename": "clippy_lints/src/utils/diagnostics.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -62,10 +62,21 @@ pub fn span_lint<T: LintContext>(cx: &T, lint: &'static Lint, sp: impl Into<Mult\n ///    |\n ///    = help: Consider using `f64::NAN` if you would like a constant representing NaN\n /// ```\n-pub fn span_lint_and_help<'a, T: LintContext>(cx: &'a T, lint: &'static Lint, span: Span, msg: &str, help: &str) {\n+pub fn span_lint_and_help<'a, T: LintContext>(\n+    cx: &'a T,\n+    lint: &'static Lint,\n+    span: Span,\n+    msg: &str,\n+    help_span: Option<Span>,\n+    help: &str,\n+) {\n     cx.struct_span_lint(lint, span, |diag| {\n         let mut diag = diag.build(msg);\n-        diag.help(help);\n+        if let Some(help_span) = help_span {\n+            diag.span_help(help_span, help);\n+        } else {\n+            diag.help(help);\n+        }\n         docs_link(&mut diag, lint);\n         diag.emit();\n     });\n@@ -97,15 +108,15 @@ pub fn span_lint_and_note<'a, T: LintContext>(\n     lint: &'static Lint,\n     span: Span,\n     msg: &str,\n-    note_span: Span,\n+    note_span: Option<Span>,\n     note: &str,\n ) {\n     cx.struct_span_lint(lint, span, |diag| {\n         let mut diag = diag.build(msg);\n-        if note_span == span {\n-            diag.note(note);\n-        } else {\n+        if let Some(note_span) = note_span {\n             diag.span_note(note_span, note);\n+        } else {\n+            diag.note(note);\n         }\n         docs_link(&mut diag, lint);\n         diag.emit();\n@@ -166,6 +177,7 @@ pub fn span_lint_hir_and_then(\n ///     |\n ///     = note: `-D fold-any` implied by `-D warnings`\n /// ```\n+#[allow(clippy::collapsible_span_lint_calls)]\n pub fn span_lint_and_sugg<'a, T: LintContext>(\n     cx: &'a T,\n     lint: &'static Lint,"}, {"sha": "6eb6c2d98e9177f2acfa8d3945b9a89241dd86d8", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 253, "deletions": 6, "changes": 259, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -1,6 +1,7 @@\n+use crate::utils::SpanlessEq;\n use crate::utils::{\n-    is_expn_of, match_def_path, match_type, method_calls, paths, span_lint, span_lint_and_help, span_lint_and_sugg,\n-    walk_ptrs_ty,\n+    is_expn_of, match_def_path, match_qpath, match_type, method_calls, paths, snippet, span_lint, span_lint_and_help,\n+    span_lint_and_sugg, walk_ptrs_ty,\n };\n use if_chain::if_chain;\n use rustc_ast::ast::{Crate as AstCrate, ItemKind, LitKind, Name, NodeId};\n@@ -10,13 +11,15 @@ use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n-use rustc_hir::{Crate, Expr, ExprKind, HirId, Item, MutTy, Mutability, Path, Ty, TyKind};\n+use rustc_hir::{Crate, Expr, ExprKind, HirId, Item, MutTy, Mutability, Path, StmtKind, Ty, TyKind};\n use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass};\n use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::{Span, Spanned};\n use rustc_span::symbol::SymbolStr;\n \n+use std::borrow::{Borrow, Cow};\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for various things we like to keep tidy in clippy.\n     ///\n@@ -142,6 +145,67 @@ declare_clippy_lint! {\n     \"found 'default lint description' in a lint declaration\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Lints `span_lint_and_then` function calls, where the\n+    /// closure argument has only one statement and that statement is a method\n+    /// call to `span_suggestion`, `span_help`, `span_note` (using the same\n+    /// span), `help` or `note`.\n+    ///\n+    /// These usages of `span_lint_and_then` should be replaced with one of the\n+    /// wrapper functions `span_lint_and_sugg`, span_lint_and_help`, or\n+    /// `span_lint_and_note`.\n+    ///\n+    /// **Why is this bad?** Using the wrapper `span_lint_and_*` functions, is more\n+    /// convenient, readable and less error prone.\n+    ///\n+    /// **Known problems:** None\n+    ///\n+    /// *Example:**\n+    /// Bad:\n+    /// ```rust,ignore\n+    /// span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |diag| {\n+    ///     diag.span_suggestion(\n+    ///         expr.span,\n+    ///         help_msg,\n+    ///         sugg.to_string(),\n+    ///         Applicability::MachineApplicable,\n+    ///     );\n+    /// });\n+    /// span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |diag| {\n+    ///     diag.span_help(expr.span, help_msg);\n+    /// });\n+    /// span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |diag| {\n+    ///     diag.help(help_msg);\n+    /// });\n+    /// span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |diag| {\n+    ///     diag.span_note(expr.span, note_msg);\n+    /// });\n+    /// span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |diag| {\n+    ///     diag.note(note_msg);\n+    /// });\n+    /// ```\n+    ///\n+    /// Good:\n+    /// ```rust,ignore\n+    /// span_lint_and_sugg(\n+    ///     cx,\n+    ///     TEST_LINT,\n+    ///     expr.span,\n+    ///     lint_msg,\n+    ///     help_msg,\n+    ///     sugg.to_string(),\n+    ///     Applicability::MachineApplicable,\n+    /// );\n+    /// span_lint_and_help(cx, TEST_LINT, expr.span, lint_msg, Some(expr.span), help_msg);\n+    /// span_lint_and_help(cx, TEST_LINT, expr.span, lint_msg, None, help_msg);\n+    /// span_lint_and_note(cx, TEST_LINT, expr.span, lint_msg, Some(expr.span), note_msg);\n+    /// span_lint_and_note(cx, TEST_LINT, expr.span, lint_msg, None, note_msg);\n+    /// ```\n+    pub COLLAPSIBLE_SPAN_LINT_CALLS,\n+    internal,\n+    \"found collapsible `span_lint_and_then` calls\"\n+}\n+\n declare_lint_pass!(ClippyLintsInternal => [CLIPPY_LINTS_INTERNAL]);\n \n impl EarlyLintPass for ClippyLintsInternal {\n@@ -194,9 +258,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LintWithoutLintPass {\n                 if_chain! {\n                     if let ExprKind::AddrOf(_, _, ref inner_exp) = expr.kind;\n                     if let ExprKind::Struct(_, ref fields, _) = inner_exp.kind;\n-                    let field = fields.iter()\n-                                      .find(|f| f.ident.as_str() == \"desc\")\n-                                      .expect(\"lints must have a description field\");\n+                    let field = fields\n+                        .iter()\n+                        .find(|f| f.ident.as_str() == \"desc\")\n+                        .expect(\"lints must have a description field\");\n                     if let ExprKind::Lit(Spanned {\n                         node: LitKind::Str(ref sym, _),\n                         ..\n@@ -339,6 +404,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CompilerLintFunctions {\n                     COMPILER_LINT_FUNCTIONS,\n                     path.ident.span,\n                     \"usage of a compiler lint function\",\n+                    None,\n                     &format!(\"please use the Clippy variant of this function: `{}`\", sugg),\n                 );\n             }\n@@ -391,3 +457,184 @@ fn is_trigger_fn(fn_kind: FnKind<'_>) -> bool {\n         FnKind::Closure(..) => false,\n     }\n }\n+\n+declare_lint_pass!(CollapsibleCalls => [COLLAPSIBLE_SPAN_LINT_CALLS]);\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CollapsibleCalls {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr<'_>) {\n+        if_chain! {\n+            if let ExprKind::Call(ref func, ref and_then_args) = expr.kind;\n+            if let ExprKind::Path(ref path) = func.kind;\n+            if match_qpath(path, &[\"span_lint_and_then\"]);\n+            if and_then_args.len() == 5;\n+            if let ExprKind::Closure(_, _, body_id, _, _) = &and_then_args[4].kind;\n+            let body = cx.tcx.hir().body(*body_id);\n+            if let ExprKind::Block(block, _) = &body.value.kind;\n+            let stmts = &block.stmts;\n+            if stmts.len() == 1 && block.expr.is_none();\n+            if let StmtKind::Semi(only_expr) = &stmts[0].kind;\n+            if let ExprKind::MethodCall(ref ps, _, ref span_call_args) = &only_expr.kind;\n+            let and_then_snippets = get_and_then_snippets(cx, and_then_args);\n+            let mut sle = SpanlessEq::new(cx).ignore_fn();\n+            then {\n+                match &*ps.ident.as_str() {\n+                    \"span_suggestion\" if sle.eq_expr(&and_then_args[2], &span_call_args[1]) => {\n+                        suggest_suggestion(cx, expr, &and_then_snippets, &span_suggestion_snippets(cx, span_call_args));\n+                    },\n+                    \"span_help\" if sle.eq_expr(&and_then_args[2], &span_call_args[1]) => {\n+                        let help_snippet = snippet(cx, span_call_args[2].span, r#\"\"...\"\"#);\n+                        suggest_help(cx, expr, &and_then_snippets, help_snippet.borrow(), true);\n+                    },\n+                    \"span_note\" if sle.eq_expr(&and_then_args[2], &span_call_args[1]) => {\n+                        let note_snippet = snippet(cx, span_call_args[2].span, r#\"\"...\"\"#);\n+                        suggest_note(cx, expr, &and_then_snippets, note_snippet.borrow(), true);\n+                    },\n+                    \"help\" => {\n+                        let help_snippet = snippet(cx, span_call_args[1].span, r#\"\"...\"\"#);\n+                        suggest_help(cx, expr, &and_then_snippets, help_snippet.borrow(), false);\n+                    }\n+                    \"note\" => {\n+                        let note_snippet = snippet(cx, span_call_args[1].span, r#\"\"...\"\"#);\n+                        suggest_note(cx, expr, &and_then_snippets, note_snippet.borrow(), false);\n+                    }\n+                    _  => (),\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+struct AndThenSnippets<'a> {\n+    cx: Cow<'a, str>,\n+    lint: Cow<'a, str>,\n+    span: Cow<'a, str>,\n+    msg: Cow<'a, str>,\n+}\n+\n+fn get_and_then_snippets<'a, 'hir>(\n+    cx: &LateContext<'_, '_>,\n+    and_then_snippets: &'hir [Expr<'hir>],\n+) -> AndThenSnippets<'a> {\n+    let cx_snippet = snippet(cx, and_then_snippets[0].span, \"cx\");\n+    let lint_snippet = snippet(cx, and_then_snippets[1].span, \"..\");\n+    let span_snippet = snippet(cx, and_then_snippets[2].span, \"span\");\n+    let msg_snippet = snippet(cx, and_then_snippets[3].span, r#\"\"...\"\"#);\n+\n+    AndThenSnippets {\n+        cx: cx_snippet,\n+        lint: lint_snippet,\n+        span: span_snippet,\n+        msg: msg_snippet,\n+    }\n+}\n+\n+struct SpanSuggestionSnippets<'a> {\n+    help: Cow<'a, str>,\n+    sugg: Cow<'a, str>,\n+    applicability: Cow<'a, str>,\n+}\n+\n+fn span_suggestion_snippets<'a, 'hir>(\n+    cx: &LateContext<'_, '_>,\n+    span_call_args: &'hir [Expr<'hir>],\n+) -> SpanSuggestionSnippets<'a> {\n+    let help_snippet = snippet(cx, span_call_args[2].span, r#\"\"...\"\"#);\n+    let sugg_snippet = snippet(cx, span_call_args[3].span, \"..\");\n+    let applicability_snippet = snippet(cx, span_call_args[4].span, \"Applicability::MachineApplicable\");\n+\n+    SpanSuggestionSnippets {\n+        help: help_snippet,\n+        sugg: sugg_snippet,\n+        applicability: applicability_snippet,\n+    }\n+}\n+\n+fn suggest_suggestion(\n+    cx: &LateContext<'_, '_>,\n+    expr: &Expr<'_>,\n+    and_then_snippets: &AndThenSnippets<'_>,\n+    span_suggestion_snippets: &SpanSuggestionSnippets<'_>,\n+) {\n+    span_lint_and_sugg(\n+        cx,\n+        COLLAPSIBLE_SPAN_LINT_CALLS,\n+        expr.span,\n+        \"this call is collapsible\",\n+        \"collapse into\",\n+        format!(\n+            \"span_lint_and_sugg({}, {}, {}, {}, {}, {}, {})\",\n+            and_then_snippets.cx,\n+            and_then_snippets.lint,\n+            and_then_snippets.span,\n+            and_then_snippets.msg,\n+            span_suggestion_snippets.help,\n+            span_suggestion_snippets.sugg,\n+            span_suggestion_snippets.applicability\n+        ),\n+        Applicability::MachineApplicable,\n+    );\n+}\n+\n+fn suggest_help(\n+    cx: &LateContext<'_, '_>,\n+    expr: &Expr<'_>,\n+    and_then_snippets: &AndThenSnippets<'_>,\n+    help: &str,\n+    with_span: bool,\n+) {\n+    let option_span = if with_span {\n+        format!(\"Some({})\", and_then_snippets.span)\n+    } else {\n+        \"None\".to_string()\n+    };\n+\n+    span_lint_and_sugg(\n+        cx,\n+        COLLAPSIBLE_SPAN_LINT_CALLS,\n+        expr.span,\n+        \"this call is collapsible\",\n+        \"collapse into\",\n+        format!(\n+            \"span_lint_and_help({}, {}, {}, {}, {}, {})\",\n+            and_then_snippets.cx,\n+            and_then_snippets.lint,\n+            and_then_snippets.span,\n+            and_then_snippets.msg,\n+            &option_span,\n+            help\n+        ),\n+        Applicability::MachineApplicable,\n+    );\n+}\n+\n+fn suggest_note(\n+    cx: &LateContext<'_, '_>,\n+    expr: &Expr<'_>,\n+    and_then_snippets: &AndThenSnippets<'_>,\n+    note: &str,\n+    with_span: bool,\n+) {\n+    let note_span = if with_span {\n+        format!(\"Some({})\", and_then_snippets.span)\n+    } else {\n+        \"None\".to_string()\n+    };\n+\n+    span_lint_and_sugg(\n+        cx,\n+        COLLAPSIBLE_SPAN_LINT_CALLS,\n+        expr.span,\n+        \"this call is collspible\",\n+        \"collapse into\",\n+        format!(\n+            \"span_lint_and_note({}, {}, {}, {}, {}, {})\",\n+            and_then_snippets.cx,\n+            and_then_snippets.lint,\n+            and_then_snippets.span,\n+            and_then_snippets.msg,\n+            note_span,\n+            note\n+        ),\n+        Applicability::MachineApplicable,\n+    );\n+}"}, {"sha": "4d8d4438d881dade5084b16ccbb730e2019a4438", "filename": "clippy_lints/src/verbose_file_reads.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fverbose_file_reads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fverbose_file_reads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fverbose_file_reads.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -40,6 +40,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for VerboseFileReads {\n                 VERBOSE_FILE_READS,\n                 expr.span,\n                 \"use of `File::read_to_end`\",\n+                None,\n                 \"consider using `fs::read` instead\",\n             );\n         } else if is_file_read_to_string(cx, expr) {\n@@ -48,6 +49,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for VerboseFileReads {\n                 VERBOSE_FILE_READS,\n                 expr.span,\n                 \"use of `File::read_to_string`\",\n+                None,\n                 \"consider using `fs::read_to_string` instead\",\n             )\n         }"}, {"sha": "fb4700d8743fdab5465c66a4668a97d66702de57", "filename": "clippy_lints/src/zero_div_zero.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fzero_div_zero.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -49,6 +49,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ZeroDiv {\n                     ZERO_DIVIDED_BY_ZERO,\n                     expr.span,\n                     \"constant division of `0.0` with `0.0` will always result in NaN\",\n+                    None,\n                     &format!(\n                         \"Consider using `{}::NAN` if you would like a constant representing NaN\",\n                         float_type,"}, {"sha": "94d6ccb316ea634ebda07276ee5c3f13b3cdc5e5", "filename": "doc/adding_lints.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/doc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/doc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fadding_lints.md?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -265,6 +265,7 @@ impl EarlyLintPass for FooFunctions {\n             FOO_FUNCTIONS,\n             span,\n             \"function named `foo`\",\n+            None,\n             \"consider using a more meaningful name\"\n         );\n     }\n@@ -296,6 +297,7 @@ impl EarlyLintPass for FooFunctions {\n                 FOO_FUNCTIONS,\n                 span,\n                 \"function named `foo`\",\n+                None,\n                 \"consider using a more meaningful name\"\n             );\n         }"}, {"sha": "e588c23345e2fdd8ad010e05a0db259589f7bade", "filename": "tests/ui/collapsible_span_lint_calls.fixed", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/tests%2Fui%2Fcollapsible_span_lint_calls.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/tests%2Fui%2Fcollapsible_span_lint_calls.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_span_lint_calls.fixed?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -0,0 +1,91 @@\n+// run-rustfix\n+#![deny(clippy::internal)]\n+#![feature(rustc_private)]\n+\n+extern crate rustc_ast;\n+extern crate rustc_errors;\n+extern crate rustc_lint;\n+extern crate rustc_session;\n+extern crate rustc_span;\n+\n+use rustc_ast::ast::Expr;\n+use rustc_errors::{Applicability, DiagnosticBuilder};\n+use rustc_lint::{EarlyContext, EarlyLintPass, Lint, LintContext};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::source_map::Span;\n+\n+#[allow(unused_variables)]\n+pub fn span_lint_and_then<'a, T: LintContext, F>(cx: &'a T, lint: &'static Lint, sp: Span, msg: &str, f: F)\n+where\n+    F: for<'b> FnOnce(&mut DiagnosticBuilder<'b>),\n+{\n+}\n+\n+#[allow(unused_variables)]\n+fn span_lint_and_help<'a, T: LintContext>(\n+    cx: &'a T,\n+    lint: &'static Lint,\n+    span: Span,\n+    msg: &str,\n+    option_span: Option<Span>,\n+    help: &str,\n+) {\n+}\n+\n+#[allow(unused_variables)]\n+fn span_lint_and_note<'a, T: LintContext>(\n+    cx: &'a T,\n+    lint: &'static Lint,\n+    span: Span,\n+    msg: &str,\n+    note_span: Option<Span>,\n+    note: &str,\n+) {\n+}\n+\n+#[allow(unused_variables)]\n+fn span_lint_and_sugg<'a, T: LintContext>(\n+    cx: &'a T,\n+    lint: &'static Lint,\n+    sp: Span,\n+    msg: &str,\n+    help: &str,\n+    sugg: String,\n+    applicability: Applicability,\n+) {\n+}\n+\n+declare_tool_lint! {\n+    pub clippy::TEST_LINT,\n+    Warn,\n+    \"\",\n+    report_in_external_macro: true\n+}\n+\n+declare_lint_pass!(Pass => [TEST_LINT]);\n+\n+impl EarlyLintPass for Pass {\n+    fn check_expr(&mut self, cx: &EarlyContext, expr: &Expr) {\n+        let lint_msg = \"lint message\";\n+        let help_msg = \"help message\";\n+        let note_msg = \"note message\";\n+        let sugg = \"new_call()\";\n+        let predicate = true;\n+\n+        span_lint_and_sugg(cx, TEST_LINT, expr.span, lint_msg, help_msg, sugg.to_string(), Applicability::MachineApplicable);\n+        span_lint_and_help(cx, TEST_LINT, expr.span, lint_msg, Some(expr.span), help_msg);\n+        span_lint_and_help(cx, TEST_LINT, expr.span, lint_msg, None, help_msg);\n+        span_lint_and_note(cx, TEST_LINT, expr.span, lint_msg, Some(expr.span), note_msg);\n+        span_lint_and_note(cx, TEST_LINT, expr.span, lint_msg, None, note_msg);\n+\n+        // This expr shouldn't trigger this lint.\n+        span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |db| {\n+            db.note(note_msg);\n+            if predicate {\n+                db.note(note_msg);\n+            }\n+        })\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "d5dd3bb562b429d9265f3ba1d5c80a4c977a4dc2", "filename": "tests/ui/collapsible_span_lint_calls.rs", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/tests%2Fui%2Fcollapsible_span_lint_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/tests%2Fui%2Fcollapsible_span_lint_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_span_lint_calls.rs?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -0,0 +1,101 @@\n+// run-rustfix\n+#![deny(clippy::internal)]\n+#![feature(rustc_private)]\n+\n+extern crate rustc_ast;\n+extern crate rustc_errors;\n+extern crate rustc_lint;\n+extern crate rustc_session;\n+extern crate rustc_span;\n+\n+use rustc_ast::ast::Expr;\n+use rustc_errors::{Applicability, DiagnosticBuilder};\n+use rustc_lint::{EarlyContext, EarlyLintPass, Lint, LintContext};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::source_map::Span;\n+\n+#[allow(unused_variables)]\n+pub fn span_lint_and_then<'a, T: LintContext, F>(cx: &'a T, lint: &'static Lint, sp: Span, msg: &str, f: F)\n+where\n+    F: for<'b> FnOnce(&mut DiagnosticBuilder<'b>),\n+{\n+}\n+\n+#[allow(unused_variables)]\n+fn span_lint_and_help<'a, T: LintContext>(\n+    cx: &'a T,\n+    lint: &'static Lint,\n+    span: Span,\n+    msg: &str,\n+    option_span: Option<Span>,\n+    help: &str,\n+) {\n+}\n+\n+#[allow(unused_variables)]\n+fn span_lint_and_note<'a, T: LintContext>(\n+    cx: &'a T,\n+    lint: &'static Lint,\n+    span: Span,\n+    msg: &str,\n+    note_span: Option<Span>,\n+    note: &str,\n+) {\n+}\n+\n+#[allow(unused_variables)]\n+fn span_lint_and_sugg<'a, T: LintContext>(\n+    cx: &'a T,\n+    lint: &'static Lint,\n+    sp: Span,\n+    msg: &str,\n+    help: &str,\n+    sugg: String,\n+    applicability: Applicability,\n+) {\n+}\n+\n+declare_tool_lint! {\n+    pub clippy::TEST_LINT,\n+    Warn,\n+    \"\",\n+    report_in_external_macro: true\n+}\n+\n+declare_lint_pass!(Pass => [TEST_LINT]);\n+\n+impl EarlyLintPass for Pass {\n+    fn check_expr(&mut self, cx: &EarlyContext, expr: &Expr) {\n+        let lint_msg = \"lint message\";\n+        let help_msg = \"help message\";\n+        let note_msg = \"note message\";\n+        let sugg = \"new_call()\";\n+        let predicate = true;\n+\n+        span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |db| {\n+            db.span_suggestion(expr.span, help_msg, sugg.to_string(), Applicability::MachineApplicable);\n+        });\n+        span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |db| {\n+            db.span_help(expr.span, help_msg);\n+        });\n+        span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |db| {\n+            db.help(help_msg);\n+        });\n+        span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |db| {\n+            db.span_note(expr.span, note_msg);\n+        });\n+        span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |db| {\n+            db.note(note_msg);\n+        });\n+\n+        // This expr shouldn't trigger this lint.\n+        span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |db| {\n+            db.note(note_msg);\n+            if predicate {\n+                db.note(note_msg);\n+            }\n+        })\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "874d4a9f255c27dcaa542325be407d65d25cfabd", "filename": "tests/ui/collapsible_span_lint_calls.stderr", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/tests%2Fui%2Fcollapsible_span_lint_calls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/tests%2Fui%2Fcollapsible_span_lint_calls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_span_lint_calls.stderr?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -0,0 +1,49 @@\n+error: this call is collapsible\n+  --> $DIR/collapsible_span_lint_calls.rs:75:9\n+   |\n+LL | /         span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |db| {\n+LL | |             db.span_suggestion(expr.span, help_msg, sugg.to_string(), Applicability::MachineApplicable);\n+LL | |         });\n+   | |__________^ help: collapse into: `span_lint_and_sugg(cx, TEST_LINT, expr.span, lint_msg, help_msg, sugg.to_string(), Applicability::MachineApplicable)`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/collapsible_span_lint_calls.rs:2:9\n+   |\n+LL | #![deny(clippy::internal)]\n+   |         ^^^^^^^^^^^^^^^^\n+   = note: `#[deny(clippy::collapsible_span_lint_calls)]` implied by `#[deny(clippy::internal)]`\n+\n+error: this call is collapsible\n+  --> $DIR/collapsible_span_lint_calls.rs:78:9\n+   |\n+LL | /         span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |db| {\n+LL | |             db.span_help(expr.span, help_msg);\n+LL | |         });\n+   | |__________^ help: collapse into: `span_lint_and_help(cx, TEST_LINT, expr.span, lint_msg, Some(expr.span), help_msg)`\n+\n+error: this call is collapsible\n+  --> $DIR/collapsible_span_lint_calls.rs:81:9\n+   |\n+LL | /         span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |db| {\n+LL | |             db.help(help_msg);\n+LL | |         });\n+   | |__________^ help: collapse into: `span_lint_and_help(cx, TEST_LINT, expr.span, lint_msg, None, help_msg)`\n+\n+error: this call is collspible\n+  --> $DIR/collapsible_span_lint_calls.rs:84:9\n+   |\n+LL | /         span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |db| {\n+LL | |             db.span_note(expr.span, note_msg);\n+LL | |         });\n+   | |__________^ help: collapse into: `span_lint_and_note(cx, TEST_LINT, expr.span, lint_msg, Some(expr.span), note_msg)`\n+\n+error: this call is collspible\n+  --> $DIR/collapsible_span_lint_calls.rs:87:9\n+   |\n+LL | /         span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |db| {\n+LL | |             db.note(note_msg);\n+LL | |         });\n+   | |__________^ help: collapse into: `span_lint_and_note(cx, TEST_LINT, expr.span, lint_msg, None, note_msg)`\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "466dfbe7cee7ab51cd93536709cc7eee73868fa2", "filename": "tests/ui/empty_enum.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6dcc8d50381b561a87cdfb926c829434857e635f/tests%2Fui%2Fempty_enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dcc8d50381b561a87cdfb926c829434857e635f/tests%2Fui%2Fempty_enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty_enum.stderr?ref=6dcc8d50381b561a87cdfb926c829434857e635f", "patch": "@@ -5,11 +5,7 @@ LL | enum Empty {}\n    | ^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::empty-enum` implied by `-D warnings`\n-help: consider using the uninhabited type `!` (never type) or a wrapper around it to introduce a type which can't be instantiated\n-  --> $DIR/empty_enum.rs:4:1\n-   |\n-LL | enum Empty {}\n-   | ^^^^^^^^^^^^^\n+   = help: consider using the uninhabited type `!` (never type) or a wrapper around it to introduce a type which can't be instantiated\n \n error: aborting due to previous error\n "}]}