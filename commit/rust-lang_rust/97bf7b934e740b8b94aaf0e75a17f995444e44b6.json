{"sha": "97bf7b934e740b8b94aaf0e75a17f995444e44b6", "node_id": "C_kwDOAAsO6NoAKDk3YmY3YjkzNGU3NDBiOGI5NGFhZjBlNzVhMTdmOTk1NDQ0ZTQ0YjY", "commit": {"author": {"name": "Lucas Kent", "email": "rubickent@gmail.com", "date": "2021-12-04T07:57:31Z"}, "committer": {"name": "Lucas Kent", "email": "rubickent@gmail.com", "date": "2021-12-17T02:20:40Z"}, "message": "Improve suggestion to change struct field to &mut", "tree": {"sha": "be115fd1c0668a924a2d1e84a54d40c308c47f7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be115fd1c0668a924a2d1e84a54d40c308c47f7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97bf7b934e740b8b94aaf0e75a17f995444e44b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97bf7b934e740b8b94aaf0e75a17f995444e44b6", "html_url": "https://github.com/rust-lang/rust/commit/97bf7b934e740b8b94aaf0e75a17f995444e44b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97bf7b934e740b8b94aaf0e75a17f995444e44b6/comments", "author": {"login": "rukai", "id": 5120858, "node_id": "MDQ6VXNlcjUxMjA4NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5120858?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rukai", "html_url": "https://github.com/rukai", "followers_url": "https://api.github.com/users/rukai/followers", "following_url": "https://api.github.com/users/rukai/following{/other_user}", "gists_url": "https://api.github.com/users/rukai/gists{/gist_id}", "starred_url": "https://api.github.com/users/rukai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rukai/subscriptions", "organizations_url": "https://api.github.com/users/rukai/orgs", "repos_url": "https://api.github.com/users/rukai/repos", "events_url": "https://api.github.com/users/rukai/events{/privacy}", "received_events_url": "https://api.github.com/users/rukai/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rukai", "id": 5120858, "node_id": "MDQ6VXNlcjUxMjA4NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5120858?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rukai", "html_url": "https://github.com/rukai", "followers_url": "https://api.github.com/users/rukai/followers", "following_url": "https://api.github.com/users/rukai/following{/other_user}", "gists_url": "https://api.github.com/users/rukai/gists{/gist_id}", "starred_url": "https://api.github.com/users/rukai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rukai/subscriptions", "organizations_url": "https://api.github.com/users/rukai/orgs", "repos_url": "https://api.github.com/users/rukai/repos", "events_url": "https://api.github.com/users/rukai/events{/privacy}", "received_events_url": "https://api.github.com/users/rukai/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23c2723269e14c3b037feb2c4865a82053403649", "url": "https://api.github.com/repos/rust-lang/rust/commits/23c2723269e14c3b037feb2c4865a82053403649", "html_url": "https://github.com/rust-lang/rust/commit/23c2723269e14c3b037feb2c4865a82053403649"}], "stats": {"total": 77, "additions": 42, "deletions": 35}, "files": [{"sha": "86e577fdf1ddea26df00343312c75cb201137ae9", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 13, "deletions": 26, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/97bf7b934e740b8b94aaf0e75a17f995444e44b6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97bf7b934e740b8b94aaf0e75a17f995444e44b6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=97bf7b934e740b8b94aaf0e75a17f995444e44b6", "patch": "@@ -229,15 +229,15 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             } => {\n                 err.span_label(span, format!(\"cannot {ACT}\", ACT = act));\n \n-                if let Some((span, message)) = annotate_struct_field(\n+                if let Some(span) = get_mut_span_in_struct_field(\n                     self.infcx.tcx,\n                     Place::ty_from(local, proj_base, self.body, self.infcx.tcx).ty,\n                     field,\n                 ) {\n-                    err.span_suggestion(\n+                    err.span_suggestion_verbose(\n                         span,\n                         \"consider changing this to be mutable\",\n-                        message,\n+                        \"mut \".into(),\n                         Applicability::MaybeIncorrect,\n                     );\n                 }\n@@ -1059,18 +1059,18 @@ fn is_closure_or_generator(ty: Ty<'_>) -> bool {\n     ty.is_closure() || ty.is_generator()\n }\n \n-/// Adds a suggestion to a struct definition given a field access to a local.\n-/// This function expects the local to be a reference to a struct in order to produce a suggestion.\n+/// Given a field that needs to be mutuable, returns a span where the mut could go.\n+/// This function expects the local to be a reference to a struct in order to produce a span.\n ///\n /// ```text\n /// LL |     s: &'a String\n-///    |        ---------- use `&'a mut String` here to make mutable\n+///    |            ^ returns a span pointing here\n /// ```\n-fn annotate_struct_field<'tcx>(\n+fn get_mut_span_in_struct_field<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     ty: Ty<'tcx>,\n     field: &mir::Field,\n-) -> Option<(Span, String)> {\n+) -> Option<Span> {\n     // Expect our local to be a reference to a struct of some kind.\n     if let ty::Ref(_, ty, _) = ty.kind() {\n         if let ty::Adt(def, _) = ty.kind() {\n@@ -1081,25 +1081,12 @@ fn annotate_struct_field<'tcx>(\n             // Now we're dealing with the actual struct that we're going to suggest a change to,\n             // we can expect a field that is an immutable reference to a type.\n             if let hir::Node::Field(field) = node {\n-                if let hir::TyKind::Rptr(\n-                    lifetime,\n-                    hir::MutTy { mutbl: hir::Mutability::Not, ref ty },\n-                ) = field.ty.kind\n+                if let hir::TyKind::Rptr(lifetime, hir::MutTy { mutbl: hir::Mutability::Not, .. }) =\n+                    field.ty.kind\n                 {\n-                    // Get the snippets in two parts - the named lifetime (if there is one) and\n-                    // type being referenced, that way we can reconstruct the snippet without loss\n-                    // of detail.\n-                    let type_snippet = tcx.sess.source_map().span_to_snippet(ty.span).ok()?;\n-                    let lifetime_snippet = if !lifetime.is_elided() {\n-                        format!(\"{} \", tcx.sess.source_map().span_to_snippet(lifetime.span).ok()?)\n-                    } else {\n-                        String::new()\n-                    };\n-\n-                    return Some((\n-                        field.ty.span,\n-                        format!(\"&{}mut {}\", lifetime_snippet, &*type_snippet,),\n-                    ));\n+                    return Some(\n+                        lifetime.span.with_hi(lifetime.span.hi() + BytePos(1)).shrink_to_hi(),\n+                    );\n                 }\n             }\n         }"}, {"sha": "154b149b72073f58925e624d84df03c3c1b8e1c6", "filename": "src/test/ui/did_you_mean/issue-38147-2.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/97bf7b934e740b8b94aaf0e75a17f995444e44b6/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97bf7b934e740b8b94aaf0e75a17f995444e44b6/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.rs?ref=97bf7b934e740b8b94aaf0e75a17f995444e44b6", "patch": "@@ -1,11 +1,16 @@\n struct Bar<'a> {\n-    s: &'a String\n+    s: &'a String,\n+    // use wonky spaces to ensure we are creating the span correctly\n+    longer_name:   &   'a     Vec<u8>\n }\n \n impl<'a> Bar<'a> {\n     fn f(&mut self) {\n         self.s.push('x');\n         //~^ ERROR cannot borrow `*self.s` as mutable, as it is behind a `&` reference\n+\n+        self.longer_name.push(13);\n+        //~^ ERROR cannot borrow `*self.longer_name` as mutable, as it is behind a `&` reference\n     }\n }\n "}, {"sha": "5ff97eacc23e82e6668953f8c358a2ba0687cc26", "filename": "src/test/ui/did_you_mean/issue-38147-2.stderr", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/97bf7b934e740b8b94aaf0e75a17f995444e44b6/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97bf7b934e740b8b94aaf0e75a17f995444e44b6/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.stderr?ref=97bf7b934e740b8b94aaf0e75a17f995444e44b6", "patch": "@@ -1,12 +1,25 @@\n error[E0596]: cannot borrow `*self.s` as mutable, as it is behind a `&` reference\n-  --> $DIR/issue-38147-2.rs:7:9\n+  --> $DIR/issue-38147-2.rs:9:9\n    |\n-LL |     s: &'a String\n-   |        ---------- help: consider changing this to be mutable: `&'a mut String`\n-...\n LL |         self.s.push('x');\n    |         ^^^^^^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     s: &'a mut String,\n+   |            +++\n+\n+error[E0596]: cannot borrow `*self.longer_name` as mutable, as it is behind a `&` reference\n+  --> $DIR/issue-38147-2.rs:12:9\n+   |\n+LL |         self.longer_name.push(13);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     longer_name:   &   'a mut     Vec<u8>\n+   |                           +++\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0596`."}, {"sha": "94ffe17f101161e1492422db59dca58cf20debe8", "filename": "src/test/ui/did_you_mean/issue-38147-3.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/97bf7b934e740b8b94aaf0e75a17f995444e44b6/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97bf7b934e740b8b94aaf0e75a17f995444e44b6/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-3.stderr?ref=97bf7b934e740b8b94aaf0e75a17f995444e44b6", "patch": "@@ -1,11 +1,13 @@\n error[E0596]: cannot borrow `*self.s` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-38147-3.rs:7:9\n    |\n-LL |     s: &'a String\n-   |        ---------- help: consider changing this to be mutable: `&'a mut String`\n-...\n LL |         self.s.push('x');\n    |         ^^^^^^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     s: &'a mut String\n+   |            +++\n \n error: aborting due to previous error\n "}]}