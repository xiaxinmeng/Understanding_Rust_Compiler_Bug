{"sha": "4d4fa99b314c78ff50f744beace5f2b62b211df1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkNGZhOTliMzE0Yzc4ZmY1MGY3NDRiZWFjZTVmMmI2MmIyMTFkZjE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-23T18:37:38Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-23T18:37:38Z"}, "message": "Rename STMT_init_* to STMT_new_*; former name was confusing.", "tree": {"sha": "5cd953a82b72003701b7414967d99af18a631dc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cd953a82b72003701b7414967d99af18a631dc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d4fa99b314c78ff50f744beace5f2b62b211df1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d4fa99b314c78ff50f744beace5f2b62b211df1", "html_url": "https://github.com/rust-lang/rust/commit/4d4fa99b314c78ff50f744beace5f2b62b211df1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d4fa99b314c78ff50f744beace5f2b62b211df1/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1730d2e037fc41f31d0a90b2fde477f02f0fc798", "url": "https://api.github.com/repos/rust-lang/rust/commits/1730d2e037fc41f31d0a90b2fde477f02f0fc798", "html_url": "https://github.com/rust-lang/rust/commit/1730d2e037fc41f31d0a90b2fde477f02f0fc798"}], "stats": {"total": 228, "additions": 108, "deletions": 120}, "files": [{"sha": "511ca33c14c3c8c68952cea57443d2e3cd1bb05c", "filename": "src/boot/fe/ast.ml", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4d4fa99b314c78ff50f744beace5f2b62b211df1/src%2Fboot%2Ffe%2Fast.ml", "raw_url": "https://github.com/rust-lang/rust/raw/4d4fa99b314c78ff50f744beace5f2b62b211df1/src%2Fboot%2Ffe%2Fast.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fast.ml?ref=4d4fa99b314c78ff50f744beace5f2b62b211df1", "patch": "@@ -200,13 +200,13 @@ and stmt' =\n \n   (* lval-assigning stmts. *)\n     STMT_spawn of (lval * domain * lval * (atom array))\n-  | STMT_init_rec of (lval * (rec_input array) * lval option)\n-  | STMT_init_tup of (lval * (tup_input array))\n-  | STMT_init_vec of (lval * mutability * atom array)\n-  | STMT_init_str of (lval * string)\n-  | STMT_init_port of lval\n-  | STMT_init_chan of (lval * (lval option))\n-  | STMT_init_box of (lval * mutability * atom)\n+  | STMT_new_rec of (lval * (rec_input array) * lval option)\n+  | STMT_new_tup of (lval * (tup_input array))\n+  | STMT_new_vec of (lval * mutability * atom array)\n+  | STMT_new_str of (lval * string)\n+  | STMT_new_port of lval\n+  | STMT_new_chan of (lval * (lval option))\n+  | STMT_new_box of (lval * mutability * atom)\n   | STMT_copy of (lval * expr)\n   | STMT_copy_binop of (lval * binop * atom)\n   | STMT_call of (lval * lval * (atom array))\n@@ -1028,7 +1028,7 @@ and fmt_stmt_body (ff:Format.formatter) (s:stmt) : unit =\n       | STMT_decl (DECL_mod_item (ident, item)) ->\n           fmt_mod_item ff ident item\n \n-      | STMT_init_rec (dst, entries, base) ->\n+      | STMT_new_rec (dst, entries, base) ->\n           fmt_lval ff dst;\n           fmt ff \" = rec(\";\n           for i = 0 to (Array.length entries) - 1\n@@ -1050,7 +1050,7 @@ and fmt_stmt_body (ff:Format.formatter) (s:stmt) : unit =\n           end;\n           fmt ff \");\"\n \n-      | STMT_init_vec (dst, mutability, atoms) ->\n+      | STMT_new_vec (dst, mutability, atoms) ->\n           fmt_lval ff dst;\n           fmt ff \" = vec\";\n           if mutability = MUT_mutable then fmt ff \"[mutable]\";\n@@ -1063,7 +1063,7 @@ and fmt_stmt_body (ff:Format.formatter) (s:stmt) : unit =\n           done;\n           fmt ff \");\"\n \n-      | STMT_init_tup (dst, entries) ->\n+      | STMT_new_tup (dst, entries) ->\n           fmt_lval ff dst;\n           fmt ff \" = tup(\";\n           for i = 0 to (Array.length entries) - 1\n@@ -1076,15 +1076,15 @@ and fmt_stmt_body (ff:Format.formatter) (s:stmt) : unit =\n           done;\n           fmt ff \");\";\n \n-      | STMT_init_str (dst, s) ->\n+      | STMT_new_str (dst, s) ->\n           fmt_lval ff dst;\n           fmt ff \" = \\\"%s\\\"\" (String.escaped s)\n \n-      | STMT_init_port dst ->\n+      | STMT_new_port dst ->\n           fmt_lval ff dst;\n           fmt ff \" = port();\"\n \n-      | STMT_init_chan (dst, port_opt) ->\n+      | STMT_new_chan (dst, port_opt) ->\n           fmt_lval ff dst;\n           fmt ff \" = chan(\";\n           begin\n@@ -1188,7 +1188,7 @@ and fmt_stmt_body (ff:Format.formatter) (s:stmt) : unit =\n           fmt_lval ff t;\n           fmt ff \";\"\n \n-      | STMT_init_box (lv, mutability, at) ->\n+      | STMT_new_box (lv, mutability, at) ->\n           fmt_lval ff lv;\n           fmt ff \" = @@\";\n           if mutability = MUT_mutable then fmt ff \" mutable \";"}, {"sha": "72fa9d7ed52eec344dc349ca79d474b28555be71", "filename": "src/boot/fe/pexp.ml", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4d4fa99b314c78ff50f744beace5f2b62b211df1/src%2Fboot%2Ffe%2Fpexp.ml", "raw_url": "https://github.com/rust-lang/rust/raw/4d4fa99b314c78ff50f744beace5f2b62b211df1/src%2Fboot%2Ffe%2Fpexp.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fpexp.ml?ref=4d4fa99b314c78ff50f744beace5f2b62b211df1", "patch": "@@ -1008,7 +1008,7 @@ let expand_pexp_custom\n                   ignore (Unix.close_process_in c);\n                   Buffer.contents b\n           in\n-            [| spanner (Ast.STMT_init_str (dst_lval, r())) |]\n+            [| spanner (Ast.STMT_new_str (dst_lval, r())) |]\n \n       | _ ->\n           raise (err (\"unknown syntax extension: \" ^ nstr) ps)\n@@ -1018,7 +1018,7 @@ let expand_pexp_custom\n  * Desugarings depend on context:\n  * \n  *   - If a pexp is used on the RHS of an assignment, it's turned into\n- *     an initialization statement such as STMT_init_rec or such. This\n+ *     an initialization statement such as STMT_new_rec or such. This\n  *     removes the possibility of initializing into a temp only to\n  *     copy out. If the topmost pexp in such a desugaring is an atom,\n  *     unop or binop, of course, it will still just emit a STMT_copy\n@@ -1265,13 +1265,13 @@ and desugar_expr_init\n                   Some base ->\n                     let (base_stmts, base_lval) = desugar_lval ps base in\n                     let rec_stmt =\n-                      ss (Ast.STMT_init_rec\n+                      ss (Ast.STMT_new_rec\n                             (dst_lval, entries, Some base_lval))\n                     in\n                       ac [ arg_stmts; base_stmts; [| rec_stmt |] ]\n                 | None ->\n                     let rec_stmt =\n-                      ss (Ast.STMT_init_rec (dst_lval, entries, None))\n+                      ss (Ast.STMT_new_rec (dst_lval, entries, None))\n                     in\n                       aa arg_stmts [| rec_stmt |]\n             end\n@@ -1283,22 +1283,22 @@ and desugar_expr_init\n           in\n           let arg_atoms = Array.to_list arg_atoms in\n           let tup_args = Array.of_list (List.combine muts arg_atoms) in\n-          let stmt = ss (Ast.STMT_init_tup (dst_lval, tup_args)) in\n+          let stmt = ss (Ast.STMT_new_tup (dst_lval, tup_args)) in\n             aa arg_stmts [| stmt |]\n \n       | PEXP_str s ->\n-          let stmt = ss (Ast.STMT_init_str (dst_lval, s)) in\n+          let stmt = ss (Ast.STMT_new_str (dst_lval, s)) in\n             [| stmt |]\n \n       | PEXP_vec (mutability, args) ->\n           let (arg_stmts, arg_atoms) = desugar_expr_atoms ps args in\n           let stmt =\n-            ss (Ast.STMT_init_vec (dst_lval, mutability, arg_atoms))\n+            ss (Ast.STMT_new_vec (dst_lval, mutability, arg_atoms))\n           in\n             aa arg_stmts [| stmt |]\n \n       | PEXP_port ->\n-          [| ss (Ast.STMT_init_port dst_lval) |]\n+          [| ss (Ast.STMT_new_port dst_lval) |]\n \n       | PEXP_chan pexp_opt ->\n           let (port_stmts, port_opt) =\n@@ -1315,7 +1315,7 @@ and desugar_expr_init\n           in\n           let chan_stmt =\n             ss\n-              (Ast.STMT_init_chan (dst_lval, port_opt))\n+              (Ast.STMT_new_chan (dst_lval, port_opt))\n           in\n             aa port_stmts [| chan_stmt |]\n \n@@ -1324,7 +1324,7 @@ and desugar_expr_init\n             desugar_expr_atom ps arg\n           in\n           let stmt =\n-            ss (Ast.STMT_init_box (dst_lval, mutability, arg_mode_atom))\n+            ss (Ast.STMT_new_box (dst_lval, mutability, arg_mode_atom))\n           in\n             aa arg_stmts [| stmt |]\n "}, {"sha": "b9aab377fcb400273e674dadb8de22f03b22febe", "filename": "src/boot/llvm/lltrans.ml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d4fa99b314c78ff50f744beace5f2b62b211df1/src%2Fboot%2Fllvm%2Flltrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/4d4fa99b314c78ff50f744beace5f2b62b211df1/src%2Fboot%2Fllvm%2Flltrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fllvm%2Flltrans.ml?ref=4d4fa99b314c78ff50f744beace5f2b62b211df1", "patch": "@@ -925,7 +925,7 @@ let trans_crate\n             set_debug_loc head.id;\n \n             match head.node with\n-                Ast.STMT_init_tup (dest, elems) ->\n+                Ast.STMT_new_tup (dest, elems) ->\n                   let zero = const_i32 0 in\n                   let (lldest, _) = trans_lval dest in\n                   let trans_tup_elem idx (_, atom) =\n@@ -1025,7 +1025,7 @@ let trans_crate\n                   ignore (Llvm.build_cond_br llexpr llok llfail llbuilder);\n                   trans_tail_with_builder llokbuilder\n \n-              | Ast.STMT_init_str (dst, str) ->\n+              | Ast.STMT_new_str (dst, str) ->\n                   let (d, _) = trans_lval dst in\n                   let s = static_str str in\n                   let len ="}, {"sha": "a038030ee84129f4eb8a3cab32493f446e4d05d7", "filename": "src/boot/me/alias.ml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4d4fa99b314c78ff50f744beace5f2b62b211df1/src%2Fboot%2Fme%2Falias.ml", "raw_url": "https://github.com/rust-lang/rust/raw/4d4fa99b314c78ff50f744beace5f2b62b211df1/src%2Fboot%2Fme%2Falias.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Falias.ml?ref=4d4fa99b314c78ff50f744beace5f2b62b211df1", "patch": "@@ -65,10 +65,10 @@ let alias_analysis_visitor\n \n           | Ast.STMT_send (_, src) -> alias src\n           | Ast.STMT_recv (dst, _) -> alias dst\n-          | Ast.STMT_init_port (dst) -> alias dst\n-          | Ast.STMT_init_chan (dst, _) -> alias dst\n-          | Ast.STMT_init_vec (dst, _, _) -> alias dst\n-          | Ast.STMT_init_str (dst, _) -> alias dst\n+          | Ast.STMT_new_port (dst) -> alias dst\n+          | Ast.STMT_new_chan (dst, _) -> alias dst\n+          | Ast.STMT_new_vec (dst, _, _) -> alias dst\n+          | Ast.STMT_new_str (dst, _) -> alias dst\n           | Ast.STMT_for_each sfe ->\n               let (slot, _) = sfe.Ast.for_each_slot in\n                 alias_slot slot.id"}, {"sha": "3948fbd645a3a84c9e9440dc94ad9b6f03c79e4c", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 41, "deletions": 53, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/4d4fa99b314c78ff50f744beace5f2b62b211df1/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/4d4fa99b314c78ff50f744beace5f2b62b211df1/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=4d4fa99b314c78ff50f744beace5f2b62b211df1", "patch": "@@ -1250,15 +1250,16 @@ let trans_visitor\n                  (sorted_htab_keys fns))\n         end\n \n-  and trans_init_str (initializing:bool) (dst:Ast.lval) (s:string) : unit =\n+  and drop_existing_if_not_init init cell ty =\n+    if not init\n+    then drop_ty_in_current_frame cell ty\n+\n+  and trans_new_str (initializing:bool) (dst:Ast.lval) (s:string) : unit =\n     (* Include null byte. *)\n     let init_sz = Int64.of_int ((String.length s) + 1) in\n     let static = trans_static_string s in\n     let (dst_cell, dst_ty) = trans_lval_maybe_init initializing dst in\n-    let _ =\n-      if not initializing\n-      then drop_ty_in_current_frame dst_cell dst_ty\n-    in\n+      drop_existing_if_not_init initializing dst_cell dst_ty;\n       trans_upcall \"upcall_new_str\" dst_cell [| static; imm init_sz |]\n \n   and trans_lit (lit:Ast.lit) : Il.operand =\n@@ -2236,32 +2237,26 @@ let trans_visitor\n                  trans_atom (Ast.ATOM_lval chan) |];\n         end\n \n-  and trans_init_port (initializing:bool) (dst:Ast.lval) : unit =\n+  and trans_new_port (initializing:bool) (dst:Ast.lval) : unit =\n     let (dst_cell, dst_ty) = trans_lval_maybe_init initializing dst in\n-    let _ =\n-      if not initializing\n-      then drop_ty_in_current_frame dst_cell dst_ty\n-    in\n     let unit_ty = match dst_ty with\n         Ast.TY_port t -> t\n       | _ -> bug () \"init dst of port-init has non-port type\"\n     in\n     let unit_sz = ty_sz abi unit_ty in\n+      drop_existing_if_not_init initializing dst_cell dst_ty;\n       trans_upcall \"upcall_new_port\" dst_cell [| imm unit_sz |]\n \n   and trans_del_port (port:Il.cell) : unit =\n     trans_void_upcall \"upcall_del_port\" [| Il.Cell port |]\n \n-  and trans_init_chan\n+  and trans_new_chan\n       (initializing:bool)\n       (dst:Ast.lval)\n       (port:Ast.lval)\n       : unit =\n     let (dst_cell, dst_ty) = trans_lval_maybe_init initializing dst in\n-    let _ =\n-      if not initializing\n-      then drop_ty_in_current_frame dst_cell dst_ty\n-    in\n+      drop_existing_if_not_init initializing dst_cell dst_ty;\n       trans_upcall \"upcall_new_chan\" dst_cell\n         [| trans_atom (Ast.ATOM_lval port) |]\n \n@@ -2285,16 +2280,12 @@ let trans_visitor\n    * part out for reuse in string code.\n    *)\n \n-  and trans_init_vec\n+  and trans_new_vec\n       (initializing:bool)\n       (dst:Ast.lval)\n       (atoms:Ast.atom array)\n       : unit =\n     let (dst_cell, dst_ty) = trans_lval_maybe_init initializing dst in\n-    let _ =\n-      if not initializing\n-      then drop_ty_in_current_frame dst_cell dst_ty\n-    in\n     let gc_ctrl =\n       if (ty_mem_ctrl dst_ty) = MEM_gc\n       then Il.Cell (get_tydesc None dst_ty)\n@@ -2306,6 +2297,7 @@ let trans_visitor\n     in\n     let fill = next_vreg_cell word_sty in\n     let unit_sz = ty_sz_in_current_frame unit_ty in\n+      drop_existing_if_not_init initializing dst_cell dst_ty;\n       umul fill unit_sz (imm (Int64.of_int (Array.length atoms)));\n       trans_upcall \"upcall_new_vec\" dst_cell [| Il.Cell fill; gc_ctrl |];\n       let vec = deref dst_cell in\n@@ -2327,7 +2319,7 @@ let trans_visitor\n             mov (get_element_ptr vec Abi.vec_elt_fill) (Il.Cell fill);\n \n \n-  and trans_init_box\n+  and trans_new_box\n       (initializing:bool)\n       (dst:Ast.lval)\n       (src:Ast.atom)\n@@ -2337,8 +2329,7 @@ let trans_visitor\n     let src_ty = simplified_ty (atom_type cx src) in\n     let (dst_cell, dst_ty) = trans_lval_maybe_init initializing dst in\n     let _ =\n-      if not initializing\n-      then drop_ty_in_current_frame dst_cell dst_ty\n+      drop_existing_if_not_init initializing dst_cell dst_ty\n     in\n     let dst_ty = strip_mutable_or_constrained_ty dst_ty in\n     let (dst_cell, dst_ty) =\n@@ -3395,7 +3386,7 @@ let trans_visitor\n       end\n       atoms\n \n-  and trans_init_rec_update\n+  and trans_new_rec_update\n       (dst:Il.cell)\n       (dst_tys:Ast.ty array)\n       (trec:Ast.ty_rec)\n@@ -4496,60 +4487,57 @@ let trans_visitor\n                 | _ -> bug () \"Binding unexpected lval.\"\n           end\n \n-      | Ast.STMT_init_rec (dst, atab, base) ->\n-          let init = maybe_init stmt.id \"rec-init\" dst in\n-          let (dst_cell, ty) = trans_lval_maybe_init init dst in\n+      | Ast.STMT_new_rec (dst, atab, base) ->\n+          let init = maybe_init stmt.id \"new rec\" dst in\n+          let (dst_cell, dst_ty) = trans_lval_maybe_init init dst in\n           let (trec, dst_tys) =\n-            match ty with\n+            match dst_ty with\n                 Ast.TY_rec trec -> (trec, Array.map snd trec)\n               | _ ->\n                   bugi cx stmt.id\n-                    \"non-rec destination type in stmt_init_rec\"\n+                    \"non-rec destination type in stmt_new_rec\"\n           in\n             begin\n+              drop_existing_if_not_init init dst_cell dst_ty;\n               match base with\n                   None ->\n                     let atoms = Array.map (fun (_, _, atom) -> atom) atab in\n                       trans_init_structural_from_atoms\n                         dst_cell dst_tys atoms\n                 | Some base_lval ->\n-                    trans_init_rec_update\n+                    trans_new_rec_update\n                       dst_cell dst_tys trec atab base_lval\n             end\n \n-      | Ast.STMT_init_tup (dst, elems) ->\n-          let init = maybe_init stmt.id \"tup-init\" dst in\n+      | Ast.STMT_new_tup (dst, elems) ->\n+          let init = maybe_init stmt.id \"new tup\" dst in\n           let (dst_cell, dst_ty) = trans_lval_maybe_init init dst in\n-          let _ =\n-            if not init\n-            then drop_ty_in_current_frame dst_cell dst_ty\n-          in\n           let dst_tys =\n             match dst_ty with\n                 Ast.TY_tup ttup -> ttup\n               | _ ->\n                   bugi cx stmt.id\n-                    \"non-tup destination type in stmt_init_tup\"\n+                    \"non-tup destination type in stmt_new_tup\"\n           in\n           let atoms = Array.map snd elems in\n-          let (dst_cell, _) = deref_ty DEREF_none init dst_cell dst_ty in\n+            drop_existing_if_not_init init dst_cell dst_ty;\n             trans_init_structural_from_atoms dst_cell dst_tys atoms\n \n \n-      | Ast.STMT_init_str (dst, s) ->\n-          let init = maybe_init stmt.id \"str-init\" dst in\n-            trans_init_str init dst s\n+      | Ast.STMT_new_str (dst, s) ->\n+          let init = maybe_init stmt.id \"new str\" dst in\n+            trans_new_str init dst s\n \n-      | Ast.STMT_init_vec (dst, _, atoms) ->\n-          let init = maybe_init stmt.id \"vec-init\" dst in\n-            trans_init_vec init dst atoms\n+      | Ast.STMT_new_vec (dst, _, atoms) ->\n+          let init = maybe_init stmt.id \"new vec\" dst in\n+            trans_new_vec init dst atoms\n \n-      | Ast.STMT_init_port dst ->\n-          let init = maybe_init stmt.id \"port-init\" dst in\n-            trans_init_port init dst\n+      | Ast.STMT_new_port dst ->\n+          let init = maybe_init stmt.id \"new port\" dst in\n+            trans_new_port init dst\n \n-      | Ast.STMT_init_chan (dst, port) ->\n-          let init = maybe_init stmt.id \"chan-init\" dst in\n+      | Ast.STMT_new_chan (dst, port) ->\n+          let init = maybe_init stmt.id \"new chan\" dst in\n           begin\n             match port with\n                 None ->\n@@ -4558,12 +4546,12 @@ let trans_visitor\n                   in\n                     mov dst_cell imm_false\n               | Some p ->\n-                  trans_init_chan init dst p\n+                  trans_new_chan init dst p\n           end\n \n-      | Ast.STMT_init_box (dst, _, src) ->\n-          let init = maybe_init stmt.id \"box-init\" dst in\n-            trans_init_box init dst src\n+      | Ast.STMT_new_box (dst, _, src) ->\n+          let init = maybe_init stmt.id \"new box\" dst in\n+            trans_new_box init dst src\n \n       | Ast.STMT_block block ->\n           trans_block block"}, {"sha": "0cc6fdd7c92d42cdab1baa97902538fa9e3881a9", "filename": "src/boot/me/type.ml", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4d4fa99b314c78ff50f744beace5f2b62b211df1/src%2Fboot%2Fme%2Ftype.ml", "raw_url": "https://github.com/rust-lang/rust/raw/4d4fa99b314c78ff50f744beace5f2b62b211df1/src%2Fboot%2Fme%2Ftype.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftype.ml?ref=4d4fa99b314c78ff50f744beace5f2b62b211df1", "patch": "@@ -646,7 +646,7 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n             infer_lval Ast.TY_task dst;\n             demand Ast.TY_nil (check_fn callee args)\n \n-        | Ast.STMT_init_rec (dst, fields, Some base) ->\n+        | Ast.STMT_new_rec (dst, fields, Some base) ->\n             let ty = check_lval base in\n             let ty_rec = demand_rec ty in\n             let field_tys = Hashtbl.create (Array.length ty_rec) in\n@@ -664,41 +664,41 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n             Array.iter check_field fields;\n             infer_lval ty dst\n \n-        | Ast.STMT_init_rec (dst, fields, None) ->\n+        | Ast.STMT_new_rec (dst, fields, None) ->\n             let check_field (name, mut, atom) =\n               (name, maybe_mutable mut (check_atom atom))\n             in\n             let ty = Ast.TY_rec (Array.map check_field fields) in\n             infer_lval ty dst\n \n-        | Ast.STMT_init_tup (dst, members) ->\n+        | Ast.STMT_new_tup (dst, members) ->\n             let check_member (mut, atom) =\n               maybe_mutable mut (check_atom atom)\n             in\n             let ty = Ast.TY_tup (Array.map check_member members) in\n             infer_lval ty dst\n \n-        | Ast.STMT_init_vec (dst, mut, [| |]) ->\n+        | Ast.STMT_new_vec (dst, mut, [| |]) ->\n             (* no inference allowed here *)\n             let lval_ty = check_lval ~mut:Ast.MUT_mutable dst in\n             ignore (demand_vec_with_mutability mut lval_ty)\n \n-        | Ast.STMT_init_vec (dst, mut, elems) ->\n+        | Ast.STMT_new_vec (dst, mut, elems) ->\n             let atom_ty = demand_all (Array.map check_atom elems) in\n             let ty = Ast.TY_vec (maybe_mutable mut atom_ty) in\n             infer_lval ty dst\n \n-        | Ast.STMT_init_str (dst, _) -> infer_lval Ast.TY_str dst\n+        | Ast.STMT_new_str (dst, _) -> infer_lval Ast.TY_str dst\n \n-        | Ast.STMT_init_port _ -> ()  (* we can't actually typecheck this *)\n+        | Ast.STMT_new_port _ -> ()  (* we can't actually typecheck this *)\n \n-        | Ast.STMT_init_chan (dst, Some port) ->\n+        | Ast.STMT_new_chan (dst, Some port) ->\n             let ty = Ast.TY_chan (demand_port (check_lval port)) in\n             infer_lval ty dst\n \n-        | Ast.STMT_init_chan (_, None) -> ()  (* can't check this either *)\n+        | Ast.STMT_new_chan (_, None) -> ()  (* can't check this either *)\n \n-        | Ast.STMT_init_box (dst, mut, src) ->\n+        | Ast.STMT_new_box (dst, mut, src) ->\n             let ty = Ast.TY_box (maybe_mutable mut (check_atom src)) in\n             infer_lval ty dst\n "}, {"sha": "83651a944186ce138c5ccc29b2823b436b2cf3b3", "filename": "src/boot/me/typestate.ml", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4d4fa99b314c78ff50f744beace5f2b62b211df1/src%2Fboot%2Fme%2Ftypestate.ml", "raw_url": "https://github.com/rust-lang/rust/raw/4d4fa99b314c78ff50f744beace5f2b62b211df1/src%2Fboot%2Fme%2Ftypestate.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftypestate.ml?ref=4d4fa99b314c78ff50f744beace5f2b62b211df1", "patch": "@@ -411,7 +411,7 @@ let condition_assigning_visitor\n             in\n               raise_pre_post_cond s.id precond;\n \n-        | Ast.STMT_init_rec (dst, entries, base) ->\n+        | Ast.STMT_new_rec (dst, entries, base) ->\n             let base_slots =\n               begin\n                 match base with\n@@ -426,35 +426,35 @@ let condition_assigning_visitor\n               raise_pre_post_cond s.id precond;\n               raise_postcondition s.id postcond\n \n-        | Ast.STMT_init_tup (dst, modes_atoms) ->\n+        | Ast.STMT_new_tup (dst, modes_atoms) ->\n             let precond = slot_inits\n               (tup_inputs_slots cx modes_atoms)\n             in\n             let postcond = slot_inits (lval_slots cx dst) in\n               raise_pre_post_cond s.id precond;\n               raise_postcondition s.id postcond\n \n-        | Ast.STMT_init_vec (dst, _, atoms) ->\n+        | Ast.STMT_new_vec (dst, _, atoms) ->\n             let precond = slot_inits (atoms_slots cx atoms) in\n             let postcond = slot_inits (lval_slots cx dst) in\n               raise_pre_post_cond s.id precond;\n               raise_postcondition s.id postcond\n \n-        | Ast.STMT_init_str (dst, _) ->\n+        | Ast.STMT_new_str (dst, _) ->\n             let postcond = slot_inits (lval_slots cx dst) in\n               raise_postcondition s.id postcond\n \n-        | Ast.STMT_init_port dst ->\n+        | Ast.STMT_new_port dst ->\n             let postcond = slot_inits (lval_slots cx dst) in\n               raise_postcondition s.id postcond\n \n-        | Ast.STMT_init_chan (dst, port) ->\n+        | Ast.STMT_new_chan (dst, port) ->\n             let precond = slot_inits (lval_option_slots cx port) in\n             let postcond = slot_inits (lval_slots cx dst) in\n               raise_pre_post_cond s.id precond;\n               raise_postcondition s.id postcond\n \n-        | Ast.STMT_init_box (dst, _, src) ->\n+        | Ast.STMT_new_box (dst, _, src) ->\n             let precond = slot_inits (atom_slots cx src) in\n             let postcond = slot_inits (lval_slots cx dst) in\n               raise_pre_post_cond s.id precond;\n@@ -999,7 +999,7 @@ let lifecycle_visitor\n     Stack.push sl (Stack.top block_slots)\n   in\n \n-  let mark_slot_init sl =\n+  let mark_slot_live sl =\n     Hashtbl.replace live_block_slots sl ()\n   in\n \n@@ -1011,7 +1011,7 @@ let lifecycle_visitor\n           None -> ()\n         | Some slot ->\n             push_slot slot;\n-            mark_slot_init slot\n+            mark_slot_live slot\n     end;\n     inner.Walk.visit_block_pre b\n   in\n@@ -1065,9 +1065,9 @@ let lifecycle_visitor\n \n   let visit_stmt_pre s =\n     begin\n-      let init_lval lv_dst =\n+      let mark_lval_live lv_dst =\n         let dst_slots = lval_slots cx lv_dst in\n-          Array.iter mark_slot_init dst_slots;\n+          Array.iter mark_slot_live dst_slots;\n       in\n         match s.node with\n             Ast.STMT_copy (lv_dst, _)\n@@ -1098,20 +1098,20 @@ let lifecycle_visitor\n                             Ast.sprintf_lval lv_dst Ast.sprintf_stmt s\n                       end;\n                     Hashtbl.replace cx.ctxt_copy_stmt_is_init s.id ();\n-                    init_lval lv_dst\n+                    mark_lval_live lv_dst\n                   end;\n \n           | Ast.STMT_decl (Ast.DECL_slot (_, sloti)) ->\n               push_slot sloti.id\n \n-          | Ast.STMT_init_rec (lv_dst, _, _)\n-          | Ast.STMT_init_tup (lv_dst, _)\n-          | Ast.STMT_init_vec (lv_dst, _, _)\n-          | Ast.STMT_init_str (lv_dst, _)\n-          | Ast.STMT_init_port lv_dst\n-          | Ast.STMT_init_chan (lv_dst, _)\n-          | Ast.STMT_init_box (lv_dst, _, _) ->\n-              init_lval lv_dst\n+          | Ast.STMT_new_rec (lv_dst, _, _)\n+          | Ast.STMT_new_tup (lv_dst, _)\n+          | Ast.STMT_new_vec (lv_dst, _, _)\n+          | Ast.STMT_new_str (lv_dst, _)\n+          | Ast.STMT_new_port lv_dst\n+          | Ast.STMT_new_chan (lv_dst, _)\n+          | Ast.STMT_new_box (lv_dst, _, _) ->\n+              mark_lval_live lv_dst\n \n           | Ast.STMT_for f ->\n               log cx \"noting implicit init for slot %d in for-block %d\""}, {"sha": "0e65406aec3858acf92c3006adca87a9f007b558", "filename": "src/boot/me/walk.ml", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4d4fa99b314c78ff50f744beace5f2b62b211df1/src%2Fboot%2Fme%2Fwalk.ml", "raw_url": "https://github.com/rust-lang/rust/raw/4d4fa99b314c78ff50f744beace5f2b62b211df1/src%2Fboot%2Fme%2Fwalk.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fwalk.ml?ref=4d4fa99b314c78ff50f744beace5f2b62b211df1", "patch": "@@ -384,30 +384,30 @@ and walk_stmt\n         Ast.STMT_log a ->\n           walk_atom v a\n \n-      | Ast.STMT_init_rec (lv, atab, base) ->\n+      | Ast.STMT_new_rec (lv, atab, base) ->\n           walk_lval v lv;\n           Array.iter (fun (_, _, a) -> walk_atom v a) atab;\n           walk_option (walk_lval v) base;\n \n-      | Ast.STMT_init_vec (lv, _, atoms) ->\n+      | Ast.STMT_new_vec (lv, _, atoms) ->\n           walk_lval v lv;\n           Array.iter (walk_atom v) atoms\n \n-      | Ast.STMT_init_tup (lv, mut_atoms) ->\n+      | Ast.STMT_new_tup (lv, mut_atoms) ->\n           walk_lval v lv;\n           Array.iter (fun (_, atom) -> walk_atom v atom) mut_atoms\n \n-      | Ast.STMT_init_str (lv, _) ->\n+      | Ast.STMT_new_str (lv, _) ->\n           walk_lval v lv\n \n-      | Ast.STMT_init_port lv ->\n+      | Ast.STMT_new_port lv ->\n           walk_lval v lv\n \n-      | Ast.STMT_init_chan (chan,port) ->\n+      | Ast.STMT_new_chan (chan,port) ->\n           walk_option (walk_lval v) port;\n           walk_lval v chan;\n \n-      | Ast.STMT_init_box (dst, _, src) ->\n+      | Ast.STMT_new_box (dst, _, src) ->\n           walk_lval v dst;\n           walk_atom v src\n "}]}