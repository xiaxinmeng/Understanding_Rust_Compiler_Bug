{"sha": "f2ae7b78d63695c1b9ff7bdf4079c7a02e77f73e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyYWU3Yjc4ZDYzNjk1YzFiOWZmN2JkZjQwNzljN2EwMmU3N2Y3M2U=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-02T23:22:12Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-04T09:17:36Z"}, "message": "Allow calling `const unsafe fn` in `const fn` behind a feature gate", "tree": {"sha": "496ef923b5278d7f030c8a4a50d972f0d3755e34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/496ef923b5278d7f030c8a4a50d972f0d3755e34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2ae7b78d63695c1b9ff7bdf4079c7a02e77f73e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2ae7b78d63695c1b9ff7bdf4079c7a02e77f73e", "html_url": "https://github.com/rust-lang/rust/commit/f2ae7b78d63695c1b9ff7bdf4079c7a02e77f73e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2ae7b78d63695c1b9ff7bdf4079c7a02e77f73e/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91d5d56c00d8e2926ccf856f14a4e52ef480d039", "url": "https://api.github.com/repos/rust-lang/rust/commits/91d5d56c00d8e2926ccf856f14a4e52ef480d039", "html_url": "https://github.com/rust-lang/rust/commit/91d5d56c00d8e2926ccf856f14a4e52ef480d039"}], "stats": {"total": 231, "additions": 194, "deletions": 37}, "files": [{"sha": "c0581121efa1c66c7aa35c6b22eae9deaf3e7348", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f2ae7b78d63695c1b9ff7bdf4079c7a02e77f73e/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ae7b78d63695c1b9ff7bdf4079c7a02e77f73e/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=f2ae7b78d63695c1b9ff7bdf4079c7a02e77f73e", "patch": "@@ -2770,7 +2770,8 @@ impl Location {\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub enum UnsafetyViolationKind {\n     General,\n-    /// unsafety is not allowed at all in min const fn\n+    /// Right now function calls to `const unsafe fn` are the only permitted unsafe operation in\n+    /// const fn. Also, even `const unsafe fn` need an `unsafe` block to do the allowed operations\n     MinConstFn,\n     ExternStatic(ast::NodeId),\n     BorrowPacked(ast::NodeId),"}, {"sha": "f067a125c5dc9b9991a065b0fa7a75da56bcc636", "filename": "src/librustc/ty/constness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2ae7b78d63695c1b9ff7bdf4079c7a02e77f73e/src%2Flibrustc%2Fty%2Fconstness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ae7b78d63695c1b9ff7bdf4079c7a02e77f73e/src%2Flibrustc%2Fty%2Fconstness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fconstness.rs?ref=f2ae7b78d63695c1b9ff7bdf4079c7a02e77f73e", "patch": "@@ -55,7 +55,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n             }\n             // in order for a libstd function to be considered min_const_fn\n             // it needs to be stable and have no `rustc_const_unstable` attribute\n-            match self.lookup_stability(def_id) {\n+            self.is_const_fn_raw(def_id) && match self.lookup_stability(def_id) {\n                 // stable functions with unstable const fn aren't `min_const_fn`\n                 Some(&attr::Stability { const_stability: Some(_), .. }) => false,\n                 // unstable functions don't need to conform\n@@ -66,7 +66,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n             }\n         } else {\n             // users enabling the `const_fn` feature gate can do what they want\n-            !self.features().const_fn\n+            self.is_const_fn_raw(def_id) && !self.features().const_fn\n         }\n     }\n }"}, {"sha": "cc927df6350bdb3cc3b93893cd8556e6c662079e", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f2ae7b78d63695c1b9ff7bdf4079c7a02e77f73e/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ae7b78d63695c1b9ff7bdf4079c7a02e77f73e/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=f2ae7b78d63695c1b9ff7bdf4079c7a02e77f73e", "patch": "@@ -91,8 +91,9 @@ pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Mir<'t\n             // types/lifetimes replaced)\n             let fn_hir_id = tcx.hir.node_to_hir_id(id);\n             let fn_sig = cx.tables().liberated_fn_sigs()[fn_hir_id].clone();\n+            let fn_def_id = tcx.hir.local_def_id(id);\n \n-            let ty = tcx.type_of(tcx.hir.local_def_id(id));\n+            let ty = tcx.type_of(fn_def_id);\n             let mut abi = fn_sig.abi;\n             let implicit_argument = match ty.sty {\n                 ty::Closure(..) => {\n@@ -113,6 +114,12 @@ pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Mir<'t\n                 hir::Unsafety::Normal => Safety::Safe,\n                 hir::Unsafety::Unsafe => Safety::FnUnsafe,\n             };\n+            let safety = if implicit_argument.is_none() && tcx.is_min_const_fn(fn_def_id) {\n+                // the body of `const unsafe fn`s is treated like the body of safe `const fn`s\n+                Safety::Safe\n+            } else {\n+                safety\n+            };\n \n             let body = tcx.hir.body(body_id);\n             let explicit_arguments ="}, {"sha": "d096bb32d9586ffadbfa7b9eb96cfc26dfa6761b", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 55, "deletions": 26, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/f2ae7b78d63695c1b9ff7bdf4079c7a02e77f73e/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ae7b78d63695c1b9ff7bdf4079c7a02e77f73e/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=f2ae7b78d63695c1b9ff7bdf4079c7a02e77f73e", "patch": "@@ -34,6 +34,7 @@ pub struct UnsafetyChecker<'a, 'tcx: 'a> {\n     source_info: SourceInfo,\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n+    /// mark an `unsafe` block as used, so we don't lint it\n     used_unsafe: FxHashSet<ast::NodeId>,\n     inherited_blocks: Vec<(ast::NodeId, bool)>,\n }\n@@ -93,7 +94,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                 if let hir::Unsafety::Unsafe = sig.unsafety() {\n                     self.require_unsafe(\"call to unsafe function\",\n                         \"consult the function's documentation for information on how to avoid \\\n-                         undefined behavior\")\n+                         undefined behavior\", UnsafetyViolationKind::MinConstFn)\n                 }\n             }\n         }\n@@ -121,7 +122,8 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n \n             StatementKind::InlineAsm { .. } => {\n                 self.require_unsafe(\"use of inline assembly\",\n-                    \"inline assembly is entirely unchecked and can cause undefined behavior\")\n+                    \"inline assembly is entirely unchecked and can cause undefined behavior\",\n+                    UnsafetyViolationKind::General)\n             },\n         }\n         self.super_statement(block, statement, location);\n@@ -189,7 +191,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                         self.require_unsafe(\"dereference of raw pointer\",\n                             \"raw pointers may be NULL, dangling or unaligned; they can violate \\\n                              aliasing rules and cause data races: all of these are undefined \\\n-                             behavior\")\n+                             behavior\", UnsafetyViolationKind::General)\n                     }\n                     ty::Adt(adt, _) => {\n                         if adt.is_union() {\n@@ -212,14 +214,15 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                                         \"assignment to non-`Copy` union field\",\n                                         \"the previous content of the field will be dropped, which \\\n                                          causes undefined behavior if the field was not properly \\\n-                                         initialized\")\n+                                         initialized\", UnsafetyViolationKind::General)\n                                 } else {\n                                     // write to non-move union, safe\n                                 }\n                             } else {\n                                 self.require_unsafe(\"access to union field\",\n                                     \"the field may not be properly initialized: using \\\n-                                     uninitialized data will cause undefined behavior\")\n+                                     uninitialized data will cause undefined behavior\",\n+                                     UnsafetyViolationKind::General)\n                             }\n                         }\n                     }\n@@ -237,7 +240,8 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                 if self.tcx.is_static(def_id) == Some(hir::Mutability::MutMutable) {\n                     self.require_unsafe(\"use of mutable static\",\n                         \"mutable statics can be mutated by multiple threads: aliasing violations \\\n-                         or data races will cause undefined behavior\");\n+                         or data races will cause undefined behavior\",\n+                         UnsafetyViolationKind::General);\n                 } else if self.tcx.is_foreign_item(def_id) {\n                     let source_info = self.source_info;\n                     let lint_root =\n@@ -260,45 +264,70 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n-    fn require_unsafe(&mut self,\n-                      description: &'static str,\n-                      details: &'static str)\n-    {\n+    fn require_unsafe(\n+        &mut self,\n+        description: &'static str,\n+        details: &'static str,\n+        kind: UnsafetyViolationKind,\n+    ) {\n         let source_info = self.source_info;\n         self.register_violations(&[UnsafetyViolation {\n             source_info,\n             description: Symbol::intern(description).as_interned_str(),\n             details: Symbol::intern(details).as_interned_str(),\n-            kind: UnsafetyViolationKind::General,\n+            kind,\n         }], &[]);\n     }\n \n     fn register_violations(&mut self,\n                            violations: &[UnsafetyViolation],\n                            unsafe_blocks: &[(ast::NodeId, bool)]) {\n-        if self.min_const_fn {\n-            for violation in violations {\n-                let mut violation = violation.clone();\n-                violation.kind = UnsafetyViolationKind::MinConstFn;\n-                if !self.violations.contains(&violation) {\n-                    self.violations.push(violation)\n-                }\n-            }\n-        }\n-        let within_unsafe = match self.source_scope_local_data[self.source_info.scope].safety {\n-            Safety::Safe => {\n+        let safety = self.source_scope_local_data[self.source_info.scope].safety;\n+        let within_unsafe = match (safety, self.min_const_fn) {\n+            // FIXME: erring on the safe side here and disallowing builtin unsafety in const fn\n+            (Safety::BuiltinUnsafe, true) |\n+            // `unsafe` blocks are required even in `const unsafe fn`\n+            (Safety::FnUnsafe, true) |\n+            // `unsafe` blocks are required in safe code\n+            (Safety::Safe, _) => {\n                 for violation in violations {\n-                    if !self.violations.contains(violation) {\n-                        self.violations.push(violation.clone())\n+                    let mut violation = violation.clone();\n+                    if self.min_const_fn {\n+                        // overwrite unsafety violation in const fn with a single hard error kind\n+                        violation.kind = UnsafetyViolationKind::MinConstFn;\n+                    } else if let UnsafetyViolationKind::MinConstFn = violation.kind {\n+                        // outside of const fns we treat `MinConstFn` and `General` the same\n+                        violation.kind = UnsafetyViolationKind::General;\n+                    }\n+                    if !self.violations.contains(&violation) {\n+                        self.violations.push(violation)\n                     }\n                 }\n                 false\n             }\n-            Safety::BuiltinUnsafe | Safety::FnUnsafe => true,\n-            Safety::ExplicitUnsafe(node_id) => {\n+            (Safety::BuiltinUnsafe, false) | (Safety::FnUnsafe, false) => true,\n+            (Safety::ExplicitUnsafe(node_id), _) => {\n                 if !violations.is_empty() {\n                     self.used_unsafe.insert(node_id);\n                 }\n+                // only some unsafety is allowed in const fn\n+                if self.min_const_fn {\n+                    for violation in violations {\n+                        match violation.kind {\n+                            // these are allowed\n+                            UnsafetyViolationKind::MinConstFn\n+                                if self.tcx.sess.features_untracked().min_const_unsafe_fn => {},\n+                            _ => {\n+                                let mut violation = violation.clone();\n+                                // overwrite unsafety violation in const fn with a hard error\n+                                violation.kind = UnsafetyViolationKind::MinConstFn;\n+                                if !self.violations.contains(&violation) {\n+                                    self.violations.push(violation)\n+                                }\n+                            },\n+                        }\n+                    }\n+                }\n                 true\n             }\n         };"}, {"sha": "026b159f80f9a0378b36c845d0dd01ec11120394", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f2ae7b78d63695c1b9ff7bdf4079c7a02e77f73e/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ae7b78d63695c1b9ff7bdf4079c7a02e77f73e/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=f2ae7b78d63695c1b9ff7bdf4079c7a02e77f73e", "patch": "@@ -492,6 +492,9 @@ declare_features! (\n \n     // `extern crate self as foo;` puts local crate root into extern prelude under name `foo`.\n     (active, extern_crate_self, \"1.31.0\", Some(56409), None),\n+    \n+    // Allows calling `const unsafe fn` inside `unsafe` blocks in `const fn` functions.\n+    (active, min_const_unsafe_fn, \"1.31.0\", Some(55607), None),\n );\n \n declare_features! ("}, {"sha": "7a84992e14b36c7b520173fcfffe8e15f5afe7d1", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_unsafe.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2ae7b78d63695c1b9ff7bdf4079c7a02e77f73e/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ae7b78d63695c1b9ff7bdf4079c7a02e77f73e/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.rs?ref=f2ae7b78d63695c1b9ff7bdf4079c7a02e77f73e", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// gate-test-min_const_unsafe_fn\n+\n // ok\n const unsafe fn foo4() -> i32 { 42 }\n const unsafe fn foo5<T>() -> *const T { 0 as *const T }"}, {"sha": "17cba8569c148f8d7cd9bfeedd288c951924fa42", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_unsafe.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f2ae7b78d63695c1b9ff7bdf4079c7a02e77f73e/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2ae7b78d63695c1b9ff7bdf4079c7a02e77f73e/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.stderr?ref=f2ae7b78d63695c1b9ff7bdf4079c7a02e77f73e", "patch": "@@ -1,53 +1,53 @@\n error[E0658]: dereferencing raw pointers in constant functions is unstable (see issue #51911)\n-  --> $DIR/min_const_fn_unsafe.rs:27:51\n+  --> $DIR/min_const_fn_unsafe.rs:29:51\n    |\n LL | const unsafe fn foo30_3(x: *mut usize) -> usize { *x } //~ ERROR not allowed in const fn\n    |                                                   ^^\n    |\n    = help: add #![feature(const_raw_ptr_deref)] to the crate attributes to enable\n \n error[E0658]: unions in const fn are unstable (see issue #51909)\n-  --> $DIR/min_const_fn_unsafe.rs:34:5\n+  --> $DIR/min_const_fn_unsafe.rs:36:5\n    |\n LL |     Foo { x: () }.y //~ ERROR not allowed in const fn\n    |     ^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(const_fn_union)] to the crate attributes to enable\n \n error: call to unsafe function is unsafe and unsafe operations are not allowed in const fn\n-  --> $DIR/min_const_fn_unsafe.rs:19:14\n+  --> $DIR/min_const_fn_unsafe.rs:21:14\n    |\n LL |     unsafe { foo4() } //~ ERROR unsafe operations are not allowed in const fn\n    |              ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error: call to unsafe function is unsafe and unsafe operations are not allowed in const fn\n-  --> $DIR/min_const_fn_unsafe.rs:22:14\n+  --> $DIR/min_const_fn_unsafe.rs:24:14\n    |\n LL |     unsafe { foo5::<String>() } //~ ERROR unsafe operations are not allowed in const fn\n    |              ^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error: call to unsafe function is unsafe and unsafe operations are not allowed in const fn\n-  --> $DIR/min_const_fn_unsafe.rs:25:14\n+  --> $DIR/min_const_fn_unsafe.rs:27:14\n    |\n LL |     unsafe { foo6::<Vec<std::cell::Cell<u32>>>() } //~ ERROR not allowed in const fn\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error: dereference of raw pointer is unsafe and unsafe operations are not allowed in const fn\n-  --> $DIR/min_const_fn_unsafe.rs:27:51\n+  --> $DIR/min_const_fn_unsafe.rs:29:51\n    |\n LL | const unsafe fn foo30_3(x: *mut usize) -> usize { *x } //~ ERROR not allowed in const fn\n    |                                                   ^^ dereference of raw pointer\n    |\n    = note: raw pointers may be NULL, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n \n error: access to union field is unsafe and unsafe operations are not allowed in const fn\n-  --> $DIR/min_const_fn_unsafe.rs:34:5\n+  --> $DIR/min_const_fn_unsafe.rs:36:5\n    |\n LL |     Foo { x: () }.y //~ ERROR not allowed in const fn\n    |     ^^^^^^^^^^^^^^^ access to union field"}, {"sha": "f3e85ebe5f60bd12f7082e957a080b9b9d91b7f8", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_unsafe_feature_gate.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/f2ae7b78d63695c1b9ff7bdf4079c7a02e77f73e/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_feature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ae7b78d63695c1b9ff7bdf4079c7a02e77f73e/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_feature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_feature_gate.rs?ref=f2ae7b78d63695c1b9ff7bdf4079c7a02e77f73e", "patch": "@@ -0,0 +1,56 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(min_const_unsafe_fn)]\n+\n+// ok\n+const unsafe fn foo4() -> i32 { 42 }\n+const unsafe fn foo5<T>() -> *const T { 0 as *const T }\n+const unsafe fn foo6<T>() -> *mut T { 0 as *mut T }\n+const fn no_unsafe() { unsafe {} }\n+\n+const fn foo8() -> i32 {\n+    unsafe { foo4() }\n+}\n+const fn foo9() -> *const String {\n+    unsafe { foo5::<String>() }\n+}\n+const fn foo10() -> *const Vec<std::cell::Cell<u32>> {\n+    unsafe { foo6::<Vec<std::cell::Cell<u32>>>() }\n+}\n+const unsafe fn foo8_3() -> i32 {\n+    unsafe { foo4() }\n+}\n+const unsafe fn foo9_3() -> *const String {\n+    unsafe { foo5::<String>() }\n+}\n+const unsafe fn foo10_3() -> *const Vec<std::cell::Cell<u32>> {\n+    unsafe { foo6::<Vec<std::cell::Cell<u32>>>() }\n+}\n+// not ok\n+const unsafe fn foo8_2() -> i32 {\n+    foo4() //~ ERROR not allowed in const fn\n+}\n+const unsafe fn foo9_2() -> *const String {\n+    foo5::<String>() //~ ERROR not allowed in const fn\n+}\n+const unsafe fn foo10_2() -> *const Vec<std::cell::Cell<u32>> {\n+    foo6::<Vec<std::cell::Cell<u32>>>() //~ ERROR not allowed in const fn\n+}\n+const unsafe fn foo30_3(x: *mut usize) -> usize { *x } //~ ERROR not allowed in const fn\n+//~^ dereferencing raw pointers in constant functions\n+\n+fn main() {}\n+\n+const unsafe fn no_union() {\n+    union Foo { x: (), y: () }\n+    Foo { x: () }.y //~ ERROR not allowed in const fn\n+    //~^ unions in const fn\n+}"}, {"sha": "78bf99b0a4d99801c57efd036f8e532e0f96db61", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_unsafe_feature_gate.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/f2ae7b78d63695c1b9ff7bdf4079c7a02e77f73e/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_feature_gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2ae7b78d63695c1b9ff7bdf4079c7a02e77f73e/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_feature_gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_feature_gate.stderr?ref=f2ae7b78d63695c1b9ff7bdf4079c7a02e77f73e", "patch": "@@ -0,0 +1,59 @@\n+error[E0658]: dereferencing raw pointers in constant functions is unstable (see issue #51911)\n+  --> $DIR/min_const_fn_unsafe_feature_gate.rs:47:51\n+   |\n+LL | const unsafe fn foo30_3(x: *mut usize) -> usize { *x } //~ ERROR not allowed in const fn\n+   |                                                   ^^\n+   |\n+   = help: add #![feature(const_raw_ptr_deref)] to the crate attributes to enable\n+\n+error[E0658]: unions in const fn are unstable (see issue #51909)\n+  --> $DIR/min_const_fn_unsafe_feature_gate.rs:54:5\n+   |\n+LL |     Foo { x: () }.y //~ ERROR not allowed in const fn\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn_union)] to the crate attributes to enable\n+\n+error: call to unsafe function is unsafe and unsafe operations are not allowed in const fn\n+  --> $DIR/min_const_fn_unsafe_feature_gate.rs:39:5\n+   |\n+LL |     foo4() //~ ERROR not allowed in const fn\n+   |     ^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: call to unsafe function is unsafe and unsafe operations are not allowed in const fn\n+  --> $DIR/min_const_fn_unsafe_feature_gate.rs:42:5\n+   |\n+LL |     foo5::<String>() //~ ERROR not allowed in const fn\n+   |     ^^^^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: call to unsafe function is unsafe and unsafe operations are not allowed in const fn\n+  --> $DIR/min_const_fn_unsafe_feature_gate.rs:45:5\n+   |\n+LL |     foo6::<Vec<std::cell::Cell<u32>>>() //~ ERROR not allowed in const fn\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: dereference of raw pointer is unsafe and unsafe operations are not allowed in const fn\n+  --> $DIR/min_const_fn_unsafe_feature_gate.rs:47:51\n+   |\n+LL | const unsafe fn foo30_3(x: *mut usize) -> usize { *x } //~ ERROR not allowed in const fn\n+   |                                                   ^^ dereference of raw pointer\n+   |\n+   = note: raw pointers may be NULL, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n+\n+error: access to union field is unsafe and unsafe operations are not allowed in const fn\n+  --> $DIR/min_const_fn_unsafe_feature_gate.rs:54:5\n+   |\n+LL |     Foo { x: () }.y //~ ERROR not allowed in const fn\n+   |     ^^^^^^^^^^^^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error: aborting due to 7 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}]}