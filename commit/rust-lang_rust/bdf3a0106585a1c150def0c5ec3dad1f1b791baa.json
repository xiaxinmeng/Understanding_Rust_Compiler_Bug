{"sha": "bdf3a0106585a1c150def0c5ec3dad1f1b791baa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkZjNhMDEwNjU4NWExYzE1MGRlZjBjNWVjM2RhZDFmMWI3OTFiYWE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-04-29T20:22:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-29T20:22:36Z"}, "message": "Rollup merge of #60256 - ethanboxx:master, r=alexcrichton\n\nOption::flatten\n\nThis PR makes this possible.\n```rust\nassert_eq!(Some(6), Some(Some(6)).flatten());\nassert_eq!(Some(6), Some(Some(6)).into());\n```", "tree": {"sha": "330a99ab46d6de4234585798f96612ba9a7de0da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/330a99ab46d6de4234585798f96612ba9a7de0da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdf3a0106585a1c150def0c5ec3dad1f1b791baa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcx10NCRBK7hj4Ov3rIwAAdHIIABeOZwbDWHAWx9BI6yzR/WjL\nd8LL6fV4gjTqohHqCFIxgnVtXHc/btnvcd/HsCmMZG4Qq3Po6KNR1hd1JF+v2TXs\nhgUMeHKpnT00SDguiPP+Cemf4YA5WJY/8yTJaZ45fMqz4aUVicQhxBhrKFSALY9j\nuJkxaGL6Yb2nxSxeYeMlkIdK/3KnWSMdh/M4nXGVMg9cUyeakb2RZgvK3XPcOZh0\nKX3828w4nzxiT87gOBNEaDd+JjCGZMZoCp3aUk13VKNjEdj1+KkFBNMnzk5aWU1l\nPgMRE8EOtQeMjAk0IFkXoyBIdcP8gk7GeVV2LuF4tgjF7vRQJhDjUNPSIagmU/g=\n=OXvm\n-----END PGP SIGNATURE-----\n", "payload": "tree 330a99ab46d6de4234585798f96612ba9a7de0da\nparent eb3c53071a8e403ea98292f99f520439473ed409\nparent fa7ba66e6a1799982b200d563006d3c6d390aefe\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1556569356 +0200\ncommitter GitHub <noreply@github.com> 1556569356 +0200\n\nRollup merge of #60256 - ethanboxx:master, r=alexcrichton\n\nOption::flatten\n\nThis PR makes this possible.\n```rust\nassert_eq!(Some(6), Some(Some(6)).flatten());\nassert_eq!(Some(6), Some(Some(6)).into());\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdf3a0106585a1c150def0c5ec3dad1f1b791baa", "html_url": "https://github.com/rust-lang/rust/commit/bdf3a0106585a1c150def0c5ec3dad1f1b791baa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdf3a0106585a1c150def0c5ec3dad1f1b791baa/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb3c53071a8e403ea98292f99f520439473ed409", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb3c53071a8e403ea98292f99f520439473ed409", "html_url": "https://github.com/rust-lang/rust/commit/eb3c53071a8e403ea98292f99f520439473ed409"}, {"sha": "fa7ba66e6a1799982b200d563006d3c6d390aefe", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa7ba66e6a1799982b200d563006d3c6d390aefe", "html_url": "https://github.com/rust-lang/rust/commit/fa7ba66e6a1799982b200d563006d3c6d390aefe"}], "stats": {"total": 32, "additions": 31, "deletions": 1}, "files": [{"sha": "6b7f491effb30cf616e7a758ecddb1ba1c692f87", "filename": "src/libcore/option.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/bdf3a0106585a1c150def0c5ec3dad1f1b791baa/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf3a0106585a1c150def0c5ec3dad1f1b791baa/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=bdf3a0106585a1c150def0c5ec3dad1f1b791baa", "patch": "@@ -136,7 +136,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use crate::iter::{FromIterator, FusedIterator, TrustedLen};\n-use crate::{hint, mem, ops::{self, Deref}};\n+use crate::{convert, hint, mem, ops::{self, Deref}};\n use crate::pin::Pin;\n \n // Note that this is not a lang item per se, but it has a hidden dependency on\n@@ -1413,3 +1413,33 @@ impl<T> ops::Try for Option<T> {\n         None\n     }\n }\n+\n+impl<T> Option<Option<T>> {\n+    /// Converts from `Option<Option<T>>` to `Option<T>`\n+    ///\n+    /// # Examples\n+    /// Basic usage:\n+    /// ```\n+    /// #![feature(option_flattening)]\n+    /// let x: Option<Option<u32>> = Some(Some(6));\n+    /// assert_eq!(Some(6), x.flatten());\n+    ///\n+    /// let x: Option<Option<u32>> = Some(None);\n+    /// assert_eq!(None, x.flatten());\n+    ///\n+    /// let x: Option<Option<u32>> = None;\n+    /// assert_eq!(None, x.flatten());\n+    /// ```\n+    /// Flattening once only removes one level of nesting:\n+    /// ```\n+    /// #![feature(option_flattening)]\n+    /// let x: Option<Option<Option<u32>>> = Some(Some(Some(6)));\n+    /// assert_eq!(Some(Some(6)), x.flatten());\n+    /// assert_eq!(Some(6), x.flatten().flatten());\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"option_flattening\", issue = \"60258\")]\n+    pub fn flatten(self) -> Option<T> {\n+        self.and_then(convert::identity)\n+    }\n+}"}]}