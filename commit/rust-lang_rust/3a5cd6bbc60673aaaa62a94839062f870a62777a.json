{"sha": "3a5cd6bbc60673aaaa62a94839062f870a62777a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhNWNkNmJiYzYwNjczYWFhYTYyYTk0ODM5MDYyZjg3MGE2Mjc3N2E=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-26T12:12:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-26T12:12:45Z"}, "message": "Merge #7406\n\n7406: if_let_match: don't assume happy path r=matklad a=bugadani\n\nCloses #7392\n\nCo-authored-by: D\u00e1niel Buga <bugadani@gmail.com>", "tree": {"sha": "8d055c5eaf79e281b139ffb1a1ab9f0ebb144cca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d055c5eaf79e281b139ffb1a1ab9f0ebb144cca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a5cd6bbc60673aaaa62a94839062f870a62777a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgEAc9CRBK7hj4Ov3rIwAAdHIIAFKPUn+pwIUHqE4WkZ68Nnwc\nCi8x+xo6552TipVtdWI/wLk4Lf+Xs+HCfD67oilRu4p7hbB/6ikRw9uUkYjo12Lz\nAnSDYmCnnvB9wqJpphuQJFWpLBW6HGLetHZMwrP3koXGtj6cWWOD1wppnwREI/95\neZqe04UCWj0PtC4q2uWIsabZEHe1XDYLmBkFQYr+EJzEeazago1ggCRT4iy/ps0V\n9HDEAH0ir8pcEFtwM9RGsE3OaYYtRyHuu+R60o8nXV05CfSYbs/a+q5IpnmZ26tL\n7w2hc7eYNzrNXMYWYfAAvjvZwixbtvUT7cDD1hDedmok8T6ou5eYxrn+WduGFo4=\n=dk/e\n-----END PGP SIGNATURE-----\n", "payload": "tree 8d055c5eaf79e281b139ffb1a1ab9f0ebb144cca\nparent 21660f1d979be43af579277ef487118d68533d41\nparent 5728d7186e64966a20ece3dc479153219a47ba17\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1611663165 +0000\ncommitter GitHub <noreply@github.com> 1611663165 +0000\n\nMerge #7406\n\n7406: if_let_match: don't assume happy path r=matklad a=bugadani\n\nCloses #7392\n\nCo-authored-by: D\u00e1niel Buga <bugadani@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a5cd6bbc60673aaaa62a94839062f870a62777a", "html_url": "https://github.com/rust-lang/rust/commit/3a5cd6bbc60673aaaa62a94839062f870a62777a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a5cd6bbc60673aaaa62a94839062f870a62777a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21660f1d979be43af579277ef487118d68533d41", "url": "https://api.github.com/repos/rust-lang/rust/commits/21660f1d979be43af579277ef487118d68533d41", "html_url": "https://github.com/rust-lang/rust/commit/21660f1d979be43af579277ef487118d68533d41"}, {"sha": "5728d7186e64966a20ece3dc479153219a47ba17", "url": "https://api.github.com/repos/rust-lang/rust/commits/5728d7186e64966a20ece3dc479153219a47ba17", "html_url": "https://github.com/rust-lang/rust/commit/5728d7186e64966a20ece3dc479153219a47ba17"}], "stats": {"total": 128, "additions": 106, "deletions": 22}, "files": [{"sha": "7663d211d2fd5c22d498252e58f69bf8ed838698", "filename": "crates/assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3a5cd6bbc60673aaaa62a94839062f870a62777a/crates%2Fassists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a5cd6bbc60673aaaa62a94839062f870a62777a/crates%2Fassists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=3a5cd6bbc60673aaaa62a94839062f870a62777a", "patch": "@@ -8,7 +8,7 @@ use syntax::ast::{self, make, AstNode, MatchArm, NameOwner, Pat};\n use test_utils::mark;\n \n use crate::{\n-    utils::{render_snippet, Cursor},\n+    utils::{does_pat_match_variant, render_snippet, Cursor},\n     AssistContext, AssistId, AssistKind, Assists,\n };\n \n@@ -147,25 +147,6 @@ fn is_variant_missing(existing_arms: &mut Vec<MatchArm>, var: &Pat) -> bool {\n     })\n }\n \n-fn does_pat_match_variant(pat: &Pat, var: &Pat) -> bool {\n-    let first_node_text = |pat: &Pat| pat.syntax().first_child().map(|node| node.text());\n-\n-    let pat_head = match pat {\n-        Pat::IdentPat(bind_pat) => {\n-            if let Some(p) = bind_pat.pat() {\n-                first_node_text(&p)\n-            } else {\n-                return false;\n-            }\n-        }\n-        pat => first_node_text(pat),\n-    };\n-\n-    let var_head = first_node_text(var);\n-\n-    pat_head == var_head\n-}\n-\n fn resolve_enum_def(sema: &Semantics<RootDatabase>, expr: &ast::Expr) -> Option<hir::Enum> {\n     sema.type_of_expr(&expr)?.autoderef(sema.db).find_map(|ty| match ty.as_adt() {\n         Some(Adt::Enum(e)) => Some(e),"}, {"sha": "aee880625f8d1a34d5813955d417716df4697a45", "filename": "crates/assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 71, "deletions": 2, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/3a5cd6bbc60673aaaa62a94839062f870a62777a/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a5cd6bbc60673aaaa62a94839062f870a62777a/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=3a5cd6bbc60673aaaa62a94839062f870a62777a", "patch": "@@ -10,7 +10,10 @@ use syntax::{\n     AstNode,\n };\n \n-use crate::{utils::unwrap_trivial_block, AssistContext, AssistId, AssistKind, Assists};\n+use crate::{\n+    utils::{does_pat_match_variant, unwrap_trivial_block},\n+    AssistContext, AssistId, AssistKind, Assists,\n+};\n \n // Assist: replace_if_let_with_match\n //\n@@ -66,7 +69,13 @@ pub(crate) fn replace_if_let_with_match(acc: &mut Assists, ctx: &AssistContext)\n                         .sema\n                         .type_of_pat(&pat)\n                         .and_then(|ty| TryEnum::from_ty(&ctx.sema, &ty))\n-                        .map(|it| it.sad_pattern())\n+                        .map(|it| {\n+                            if does_pat_match_variant(&pat, &it.sad_pattern()) {\n+                                it.happy_pattern()\n+                            } else {\n+                                it.sad_pattern()\n+                            }\n+                        })\n                         .unwrap_or_else(|| make::wildcard_pat().into());\n                     let else_expr = unwrap_trivial_block(else_block);\n                     make::match_arm(vec![pattern], else_expr)\n@@ -278,6 +287,36 @@ fn foo(x: Option<i32>) {\n         );\n     }\n \n+    #[test]\n+    fn special_case_inverted_option() {\n+        check_assist(\n+            replace_if_let_with_match,\n+            r#\"\n+enum Option<T> { Some(T), None }\n+use Option::*;\n+\n+fn foo(x: Option<i32>) {\n+    $0if let None = x {\n+        println!(\"none\")\n+    } else {\n+        println!(\"some\")\n+    }\n+}\n+           \"#,\n+            r#\"\n+enum Option<T> { Some(T), None }\n+use Option::*;\n+\n+fn foo(x: Option<i32>) {\n+    match x {\n+        None => println!(\"none\"),\n+        Some(_) => println!(\"some\"),\n+    }\n+}\n+           \"#,\n+        );\n+    }\n+\n     #[test]\n     fn special_case_result() {\n         check_assist(\n@@ -308,6 +347,36 @@ fn foo(x: Result<i32, ()>) {\n         );\n     }\n \n+    #[test]\n+    fn special_case_inverted_result() {\n+        check_assist(\n+            replace_if_let_with_match,\n+            r#\"\n+enum Result<T, E> { Ok(T), Err(E) }\n+use Result::*;\n+\n+fn foo(x: Result<i32, ()>) {\n+    $0if let Err(x) = x {\n+        println!(\"{}\", x)\n+    } else {\n+        println!(\"ok\")\n+    }\n+}\n+           \"#,\n+            r#\"\n+enum Result<T, E> { Ok(T), Err(E) }\n+use Result::*;\n+\n+fn foo(x: Result<i32, ()>) {\n+    match x {\n+        Err(x) => println!(\"{}\", x),\n+        Ok(_) => println!(\"ok\"),\n+    }\n+}\n+           \"#,\n+        );\n+    }\n+\n     #[test]\n     fn nested_indent() {\n         check_assist("}, {"sha": "4e762e18b82609a11519f66e346e9b48053dd651", "filename": "crates/assists/src/utils.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3a5cd6bbc60673aaaa62a94839062f870a62777a/crates%2Fassists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a5cd6bbc60673aaaa62a94839062f870a62777a/crates%2Fassists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils.rs?ref=3a5cd6bbc60673aaaa62a94839062f870a62777a", "patch": "@@ -248,3 +248,22 @@ fn invert_special_case(expr: &ast::Expr) -> Option<ast::Expr> {\n pub(crate) fn next_prev() -> impl Iterator<Item = Direction> {\n     [Direction::Next, Direction::Prev].iter().copied()\n }\n+\n+pub(crate) fn does_pat_match_variant(pat: &ast::Pat, var: &ast::Pat) -> bool {\n+    let first_node_text = |pat: &ast::Pat| pat.syntax().first_child().map(|node| node.text());\n+\n+    let pat_head = match pat {\n+        ast::Pat::IdentPat(bind_pat) => {\n+            if let Some(p) = bind_pat.pat() {\n+                first_node_text(&p)\n+            } else {\n+                return pat.syntax().text() == var.syntax().text();\n+            }\n+        }\n+        pat => first_node_text(pat),\n+    };\n+\n+    let var_head = first_node_text(var);\n+\n+    pat_head == var_head\n+}"}, {"sha": "f8406851bd5405e9945ccf02d2010d3e9dbb7118", "filename": "crates/ide_db/src/ty_filter.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3a5cd6bbc60673aaaa62a94839062f870a62777a/crates%2Fide_db%2Fsrc%2Fty_filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a5cd6bbc60673aaaa62a94839062f870a62777a/crates%2Fide_db%2Fsrc%2Fty_filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fty_filter.rs?ref=3a5cd6bbc60673aaaa62a94839062f870a62777a", "patch": "@@ -49,6 +49,21 @@ impl TryEnum {\n         }\n     }\n \n+    pub fn happy_pattern(self) -> ast::Pat {\n+        match self {\n+            TryEnum::Result => make::tuple_struct_pat(\n+                make::path_unqualified(make::path_segment(make::name_ref(\"Ok\"))),\n+                iter::once(make::wildcard_pat().into()),\n+            )\n+            .into(),\n+            TryEnum::Option => make::tuple_struct_pat(\n+                make::path_unqualified(make::path_segment(make::name_ref(\"Some\"))),\n+                iter::once(make::wildcard_pat().into()),\n+            )\n+            .into(),\n+        }\n+    }\n+\n     fn type_name(self) -> &'static str {\n         match self {\n             TryEnum::Result => \"Result\","}]}