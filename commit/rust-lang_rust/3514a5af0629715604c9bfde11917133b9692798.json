{"sha": "3514a5af0629715604c9bfde11917133b9692798", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1MTRhNWFmMDYyOTcxNTYwNGM5YmZkZTExOTE3MTMzYjk2OTI3OTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-19T03:55:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-19T03:55:38Z"}, "message": "auto merge of #7857 : blake2-ppc/rust/fix-test-warnings, r=alexcrichton\n\nFix warnings that only show up when compiling the tests for libstd, libextra and one in librusti. Only trivial changes.", "tree": {"sha": "5ef6ab337333b6c59404f211b8102704f45102e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ef6ab337333b6c59404f211b8102704f45102e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3514a5af0629715604c9bfde11917133b9692798", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3514a5af0629715604c9bfde11917133b9692798", "html_url": "https://github.com/rust-lang/rust/commit/3514a5af0629715604c9bfde11917133b9692798", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3514a5af0629715604c9bfde11917133b9692798/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b70c045f3820bbce538fb38c8244f3cedad24270", "url": "https://api.github.com/repos/rust-lang/rust/commits/b70c045f3820bbce538fb38c8244f3cedad24270", "html_url": "https://github.com/rust-lang/rust/commit/b70c045f3820bbce538fb38c8244f3cedad24270"}, {"sha": "ff9b75f26d8784c38ff6fbdb55511204f75a8a72", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff9b75f26d8784c38ff6fbdb55511204f75a8a72", "html_url": "https://github.com/rust-lang/rust/commit/ff9b75f26d8784c38ff6fbdb55511204f75a8a72"}], "stats": {"total": 69, "additions": 33, "deletions": 36}, "files": [{"sha": "33a50f4e9ab1405e5b2a19f380e05d5a38cba524", "filename": "src/libextra/bitv.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/3514a5af0629715604c9bfde11917133b9692798/src%2Flibextra%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3514a5af0629715604c9bfde11917133b9692798/src%2Flibextra%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbitv.rs?ref=3514a5af0629715604c9bfde11917133b9692798", "patch": "@@ -893,9 +893,9 @@ mod tests {\n     #[test]\n     fn test_1_element() {\n         let mut act = Bitv::new(1u, false);\n-        assert!(act.eq_vec(~[false]));\n+        assert!(act.eq_vec([false]));\n         act = Bitv::new(1u, true);\n-        assert!(act.eq_vec(~[true]));\n+        assert!(act.eq_vec([true]));\n     }\n \n     #[test]\n@@ -913,11 +913,11 @@ mod tests {\n \n         act = Bitv::new(10u, false);\n         assert!((act.eq_vec(\n-                    ~[false, false, false, false, false, false, false, false, false, false])));\n+                    [false, false, false, false, false, false, false, false, false, false])));\n         // all 1\n \n         act = Bitv::new(10u, true);\n-        assert!((act.eq_vec(~[true, true, true, true, true, true, true, true, true, true])));\n+        assert!((act.eq_vec([true, true, true, true, true, true, true, true, true, true])));\n         // mixed\n \n         act = Bitv::new(10u, false);\n@@ -926,7 +926,7 @@ mod tests {\n         act.set(2u, true);\n         act.set(3u, true);\n         act.set(4u, true);\n-        assert!((act.eq_vec(~[true, true, true, true, true, false, false, false, false, false])));\n+        assert!((act.eq_vec([true, true, true, true, true, false, false, false, false, false])));\n         // mixed\n \n         act = Bitv::new(10u, false);\n@@ -935,15 +935,15 @@ mod tests {\n         act.set(7u, true);\n         act.set(8u, true);\n         act.set(9u, true);\n-        assert!((act.eq_vec(~[false, false, false, false, false, true, true, true, true, true])));\n+        assert!((act.eq_vec([false, false, false, false, false, true, true, true, true, true])));\n         // mixed\n \n         act = Bitv::new(10u, false);\n         act.set(0u, true);\n         act.set(3u, true);\n         act.set(6u, true);\n         act.set(9u, true);\n-        assert!((act.eq_vec(~[true, false, false, true, false, false, true, false, false, true])));\n+        assert!((act.eq_vec([true, false, false, true, false, false, true, false, false, true])));\n     }\n \n     #[test]\n@@ -953,14 +953,14 @@ mod tests {\n \n         act = Bitv::new(31u, false);\n         assert!(act.eq_vec(\n-                ~[false, false, false, false, false, false, false, false, false, false, false,\n+                [false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false]));\n         // all 1\n \n         act = Bitv::new(31u, true);\n         assert!(act.eq_vec(\n-                ~[true, true, true, true, true, true, true, true, true, true, true, true, true,\n+                [true, true, true, true, true, true, true, true, true, true, true, true, true,\n                 true, true, true, true, true, true, true, true, true, true, true, true, true, true,\n                 true, true, true, true]));\n         // mixed\n@@ -975,7 +975,7 @@ mod tests {\n         act.set(6u, true);\n         act.set(7u, true);\n         assert!(act.eq_vec(\n-                ~[true, true, true, true, true, true, true, true, false, false, false, false, false,\n+                [true, true, true, true, true, true, true, true, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false]));\n         // mixed\n@@ -990,7 +990,7 @@ mod tests {\n         act.set(22u, true);\n         act.set(23u, true);\n         assert!(act.eq_vec(\n-                ~[false, false, false, false, false, false, false, false, false, false, false,\n+                [false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, true, true, true, true, true, true, true, true,\n                 false, false, false, false, false, false, false]));\n         // mixed\n@@ -1004,7 +1004,7 @@ mod tests {\n         act.set(29u, true);\n         act.set(30u, true);\n         assert!(act.eq_vec(\n-                ~[false, false, false, false, false, false, false, false, false, false, false,\n+                [false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false, false, false,\n                 false, true, true, true, true, true, true, true]));\n         // mixed\n@@ -1014,7 +1014,7 @@ mod tests {\n         act.set(17u, true);\n         act.set(30u, true);\n         assert!(act.eq_vec(\n-                ~[false, false, false, true, false, false, false, false, false, false, false, false,\n+                [false, false, false, true, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, true, false, false, false, false, false, false,\n                 false, false, false, false, false, false, true]));\n     }\n@@ -1026,14 +1026,14 @@ mod tests {\n \n         act = Bitv::new(32u, false);\n         assert!(act.eq_vec(\n-                ~[false, false, false, false, false, false, false, false, false, false, false,\n+                [false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false]));\n         // all 1\n \n         act = Bitv::new(32u, true);\n         assert!(act.eq_vec(\n-                ~[true, true, true, true, true, true, true, true, true, true, true, true, true,\n+                [true, true, true, true, true, true, true, true, true, true, true, true, true,\n                 true, true, true, true, true, true, true, true, true, true, true, true, true, true,\n                 true, true, true, true, true]));\n         // mixed\n@@ -1048,7 +1048,7 @@ mod tests {\n         act.set(6u, true);\n         act.set(7u, true);\n         assert!(act.eq_vec(\n-                ~[true, true, true, true, true, true, true, true, false, false, false, false, false,\n+                [true, true, true, true, true, true, true, true, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false]));\n         // mixed\n@@ -1063,7 +1063,7 @@ mod tests {\n         act.set(22u, true);\n         act.set(23u, true);\n         assert!(act.eq_vec(\n-                ~[false, false, false, false, false, false, false, false, false, false, false,\n+                [false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, true, true, true, true, true, true, true, true,\n                 false, false, false, false, false, false, false, false]));\n         // mixed\n@@ -1078,7 +1078,7 @@ mod tests {\n         act.set(30u, true);\n         act.set(31u, true);\n         assert!(act.eq_vec(\n-                ~[false, false, false, false, false, false, false, false, false, false, false,\n+                [false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false, false, false,\n                 false, true, true, true, true, true, true, true, true]));\n         // mixed\n@@ -1089,7 +1089,7 @@ mod tests {\n         act.set(30u, true);\n         act.set(31u, true);\n         assert!(act.eq_vec(\n-                ~[false, false, false, true, false, false, false, false, false, false, false, false,\n+                [false, false, false, true, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, true, false, false, false, false, false, false,\n                 false, false, false, false, false, false, true, true]));\n     }\n@@ -1101,14 +1101,14 @@ mod tests {\n \n         act = Bitv::new(33u, false);\n         assert!(act.eq_vec(\n-                ~[false, false, false, false, false, false, false, false, false, false, false,\n+                [false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false]));\n         // all 1\n \n         act = Bitv::new(33u, true);\n         assert!(act.eq_vec(\n-                ~[true, true, true, true, true, true, true, true, true, true, true, true, true,\n+                [true, true, true, true, true, true, true, true, true, true, true, true, true,\n                 true, true, true, true, true, true, true, true, true, true, true, true, true, true,\n                 true, true, true, true, true, true]));\n         // mixed\n@@ -1123,7 +1123,7 @@ mod tests {\n         act.set(6u, true);\n         act.set(7u, true);\n         assert!(act.eq_vec(\n-                ~[true, true, true, true, true, true, true, true, false, false, false, false, false,\n+                [true, true, true, true, true, true, true, true, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false]));\n         // mixed\n@@ -1138,7 +1138,7 @@ mod tests {\n         act.set(22u, true);\n         act.set(23u, true);\n         assert!(act.eq_vec(\n-                ~[false, false, false, false, false, false, false, false, false, false, false,\n+                [false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, true, true, true, true, true, true, true, true,\n                 false, false, false, false, false, false, false, false, false]));\n         // mixed\n@@ -1153,7 +1153,7 @@ mod tests {\n         act.set(30u, true);\n         act.set(31u, true);\n         assert!(act.eq_vec(\n-                ~[false, false, false, false, false, false, false, false, false, false, false,\n+                [false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false, false, false,\n                 false, true, true, true, true, true, true, true, true, false]));\n         // mixed\n@@ -1165,7 +1165,7 @@ mod tests {\n         act.set(31u, true);\n         act.set(32u, true);\n         assert!(act.eq_vec(\n-                ~[false, false, false, true, false, false, false, false, false, false, false, false,\n+                [false, false, false, true, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, true, false, false, false, false, false, false,\n                 false, false, false, false, false, false, true, true, true]));\n     }"}, {"sha": "56a906e0a5d3e2f0f67d00bd869df72afc8e697b", "filename": "src/libextra/sort.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3514a5af0629715604c9bfde11917133b9692798/src%2Flibextra%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3514a5af0629715604c9bfde11917133b9692798/src%2Flibextra%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsort.rs?ref=3514a5af0629715604c9bfde11917133b9692798", "patch": "@@ -792,7 +792,6 @@ mod test_qsort {\n \n     use sort::*;\n \n-    use std::int;\n     use std::vec;\n \n     fn check_sort(v1: &mut [int], v2: &mut [int]) {"}, {"sha": "68f871125e13363d21dcc066023c2234ff769f4e", "filename": "src/librusti/rusti.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3514a5af0629715604c9bfde11917133b9692798/src%2Flibrusti%2Frusti.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3514a5af0629715604c9bfde11917133b9692798/src%2Flibrusti%2Frusti.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rs?ref=3514a5af0629715604c9bfde11917133b9692798", "patch": "@@ -546,7 +546,6 @@ pub fn main() {\n #[cfg(test)]\n mod tests {\n     use std::io;\n-    use std::iterator::IteratorUtil;\n     use program::Program;\n     use super::*;\n "}, {"sha": "ecc5de117d0af13f07426473d6c8604dd15542dc", "filename": "src/libstd/hashmap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3514a5af0629715604c9bfde11917133b9692798/src%2Flibstd%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3514a5af0629715604c9bfde11917133b9692798/src%2Flibstd%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhashmap.rs?ref=3514a5af0629715604c9bfde11917133b9692798", "patch": "@@ -842,7 +842,7 @@ pub type SetAlgebraIter<'self, T> =\n \n #[cfg(test)]\n mod test_map {\n-    use container::{Container, Map, Set};\n+    use container::{Container, Map};\n     use option::{None, Some};\n     use super::*;\n     use uint;\n@@ -1060,7 +1060,7 @@ mod test_map {\n #[cfg(test)]\n mod test_set {\n     use super::*;\n-    use container::{Container, Map, Set};\n+    use container::Container;\n     use vec::ImmutableEqVector;\n     use uint;\n "}, {"sha": "25bd8f2168069403266b24e7888c095b098c2d7b", "filename": "src/libstd/os.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3514a5af0629715604c9bfde11917133b9692798/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3514a5af0629715604c9bfde11917133b9692798/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=3514a5af0629715604c9bfde11917133b9692798", "patch": "@@ -1742,7 +1742,6 @@ mod tests {\n     use rand;\n     use run;\n     use str::StrSlice;\n-    use vec;\n     use vec::CopyableVector;\n     use libc::consts::os::posix88::{S_IRUSR, S_IWUSR, S_IXUSR};\n "}, {"sha": "c2b59d51347869b3e7fbcf038f4569c6159e1ab7", "filename": "src/libstd/ptr.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3514a5af0629715604c9bfde11917133b9692798/src%2Flibstd%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3514a5af0629715604c9bfde11917133b9692798/src%2Flibstd%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fptr.rs?ref=3514a5af0629715604c9bfde11917133b9692798", "patch": "@@ -16,8 +16,9 @@ use option::{Option, Some, None};\n use sys;\n use unstable::intrinsics;\n use util::swap;\n-use ops::{Add,Sub};\n-use num::Int;\n+\n+#[cfg(not(test))] use ops::{Add,Sub};\n+#[cfg(not(test))] use num::Int;\n \n #[cfg(not(test))] use cmp::{Eq, Ord};\n use uint;\n@@ -570,7 +571,7 @@ pub mod ptr_tests {\n             }\n \n             let mut xs_mut = xs.clone();\n-            let mut m_start = to_mut_ptr(xs_mut);\n+            let m_start = to_mut_ptr(xs_mut);\n             let mut m_ptr = m_start + 9u32;\n \n             while m_ptr >= m_start {"}, {"sha": "9583e37d002141c0294c2c0eb59420a7d2185847", "filename": "src/libstd/rand.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3514a5af0629715604c9bfde11917133b9692798/src%2Flibstd%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3514a5af0629715604c9bfde11917133b9692798/src%2Flibstd%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand.rs?ref=3514a5af0629715604c9bfde11917133b9692798", "patch": "@@ -1078,7 +1078,6 @@ mod tests {\n         // This is to verify that the implementation of the ISAAC rng is\n         // correct (i.e. matches the output of the upstream implementation,\n         // which is in the runtime)\n-        use vec;\n         use libc::size_t;\n \n         #[abi = \"cdecl\"]"}, {"sha": "227712e31e675f3a20193788f027d23aea6709f6", "filename": "src/libstd/to_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3514a5af0629715604c9bfde11917133b9692798/src%2Flibstd%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3514a5af0629715604c9bfde11917133b9692798/src%2Flibstd%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fto_str.rs?ref=3514a5af0629715604c9bfde11917133b9692798", "patch": "@@ -181,7 +181,7 @@ impl<A:ToStr> ToStr for @[A] {\n mod tests {\n     use hashmap::HashMap;\n     use hashmap::HashSet;\n-    use container::{Set, Map, MutableSet, MutableMap};\n+    use container::{MutableSet, MutableMap};\n     #[test]\n     fn test_simple_types() {\n         assert_eq!(1i.to_str(), ~\"1\");"}, {"sha": "cc73c28bba0dfbfc5dfa91f868e0233818c20ab3", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3514a5af0629715604c9bfde11917133b9692798/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3514a5af0629715604c9bfde11917133b9692798/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=3514a5af0629715604c9bfde11917133b9692798", "patch": "@@ -16,7 +16,7 @@ use cast::transmute;\n use cast;\n use clone::Clone;\n use container::{Container, Mutable};\n-use cmp::{Eq, TotalEq, TotalOrd, Ordering, Less, Equal, Greater};\n+use cmp::{Eq, TotalOrd, Ordering, Less, Equal, Greater};\n use cmp;\n use iterator::*;\n use libc::c_void;"}]}