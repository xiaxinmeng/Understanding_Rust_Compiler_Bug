{"sha": "d0d6af91467ef60f12396f5d40a09eb4de8cb8b7", "node_id": "C_kwDOAAsO6NoAKGQwZDZhZjkxNDY3ZWY2MGYxMjM5NmY1ZDQwYTA5ZWI0ZGU4Y2I4Yjc", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-02T04:45:54Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-02T19:50:19Z"}, "message": "Lint for unsatisfied nested opaques", "tree": {"sha": "870ce950f505c30d12b84104264b12c280be5363", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/870ce950f505c30d12b84104264b12c280be5363"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0d6af91467ef60f12396f5d40a09eb4de8cb8b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0d6af91467ef60f12396f5d40a09eb4de8cb8b7", "html_url": "https://github.com/rust-lang/rust/commit/d0d6af91467ef60f12396f5d40a09eb4de8cb8b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0d6af91467ef60f12396f5d40a09eb4de8cb8b7/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39323a5877ee6b85e75c652c2518a97a1433a2dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/39323a5877ee6b85e75c652c2518a97a1433a2dc", "html_url": "https://github.com/rust-lang/rust/commit/39323a5877ee6b85e75c652c2518a97a1433a2dc"}], "stats": {"total": 154, "additions": 153, "deletions": 1}, "files": [{"sha": "31c9a845e7e9de40f24f680804384465a1605a11", "filename": "compiler/rustc_error_messages/locales/en-US/lint.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0d6af91467ef60f12396f5d40a09eb4de8cb8b7/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d0d6af91467ef60f12396f5d40a09eb4de8cb8b7/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl?ref=d0d6af91467ef60f12396f5d40a09eb4de8cb8b7", "patch": "@@ -433,3 +433,7 @@ lint_check_name_unknown_tool = unknown lint tool: `{$tool_name}`\n lint_check_name_warning = {$msg}\n \n lint_check_name_deprecated = lint name `{$lint_name}` is deprecated and does not have an effect anymore. Use: {$new_name}\n+\n+lint_rpit_hidden_inferred_bound = return-position `{$ty}` does not satisfy its associated type bounds\n+    .specifically = this associated type bound is unsatisfied for `{$proj_ty}`\n+    .suggestion = add this bound"}, {"sha": "fd7ea5a4bb5a230c31696f597000c78ed8ba0846", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d0d6af91467ef60f12396f5d40a09eb4de8cb8b7/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0d6af91467ef60f12396f5d40a09eb4de8cb8b7/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=d0d6af91467ef60f12396f5d40a09eb4de8cb8b7", "patch": "@@ -65,6 +65,7 @@ mod noop_method_call;\n mod pass_by_value;\n mod passes;\n mod redundant_semicolon;\n+mod rpit_hidden_inferred_bound;\n mod traits;\n mod types;\n mod unused;\n@@ -95,6 +96,7 @@ use nonstandard_style::*;\n use noop_method_call::*;\n use pass_by_value::*;\n use redundant_semicolon::*;\n+use rpit_hidden_inferred_bound::*;\n use traits::*;\n use types::*;\n use unused::*;\n@@ -223,6 +225,7 @@ macro_rules! late_lint_mod_passes {\n                 EnumIntrinsicsNonEnums: EnumIntrinsicsNonEnums,\n                 InvalidAtomicOrdering: InvalidAtomicOrdering,\n                 NamedAsmLabels: NamedAsmLabels,\n+                RpitHiddenInferredBound: RpitHiddenInferredBound,\n             ]\n         );\n     };"}, {"sha": "fd9872c80a945725049598dd7ee7b7d8d808b7e1", "filename": "compiler/rustc_lint/src/rpit_hidden_inferred_bound.rs", "status": "added", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/d0d6af91467ef60f12396f5d40a09eb4de8cb8b7/compiler%2Frustc_lint%2Fsrc%2Frpit_hidden_inferred_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0d6af91467ef60f12396f5d40a09eb4de8cb8b7/compiler%2Frustc_lint%2Fsrc%2Frpit_hidden_inferred_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Frpit_hidden_inferred_bound.rs?ref=d0d6af91467ef60f12396f5d40a09eb4de8cb8b7", "patch": "@@ -0,0 +1,143 @@\n+use hir::def_id::LocalDefId;\n+use rustc_hir as hir;\n+use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n+use rustc_macros::LintDiagnostic;\n+use rustc_middle::ty::{\n+    self, fold::BottomUpFolder, Ty, TypeFoldable, TypeSuperVisitable, TypeVisitable, TypeVisitor,\n+};\n+use rustc_span::Span;\n+use rustc_trait_selection::traits;\n+use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n+\n+use crate::{LateContext, LateLintPass, LintContext};\n+\n+declare_lint! {\n+    /// The `rpit_hidden_inferred_bound` lint detects cases in which nested RPITs\n+    /// in associated type bounds are not written generally enough to satisfy the\n+    /// bounds of the associated type. This functionality was removed in #97346,\n+    /// but then rolled back in #99860 because it was made into a hard error too\n+    /// quickly.\n+    ///\n+    /// We plan on reintroducing this as a hard error, but in the mean time, this\n+    /// lint serves to warn and suggest fixes for any use-cases which rely on this\n+    /// behavior.\n+    pub RPIT_HIDDEN_INFERRED_BOUND,\n+    Warn,\n+    \"detects the use of nested RPITs in associated type bounds that are not general enough\"\n+}\n+\n+declare_lint_pass!(RpitHiddenInferredBound => [RPIT_HIDDEN_INFERRED_BOUND]);\n+\n+impl<'tcx> LateLintPass<'tcx> for RpitHiddenInferredBound {\n+    fn check_fn(\n+        &mut self,\n+        cx: &LateContext<'tcx>,\n+        kind: hir::intravisit::FnKind<'tcx>,\n+        _: &'tcx hir::FnDecl<'tcx>,\n+        _: &'tcx hir::Body<'tcx>,\n+        _: rustc_span::Span,\n+        id: hir::HirId,\n+    ) {\n+        if matches!(kind, hir::intravisit::FnKind::Closure) {\n+            return;\n+        }\n+\n+        let fn_def_id = cx.tcx.hir().local_def_id(id);\n+        let sig: ty::FnSig<'tcx> =\n+            cx.tcx.liberate_late_bound_regions(fn_def_id.to_def_id(), cx.tcx.fn_sig(fn_def_id));\n+        cx.tcx.infer_ctxt().enter(|ref infcx| {\n+            sig.output().visit_with(&mut VisitOpaqueBounds { infcx, cx, fn_def_id });\n+        });\n+    }\n+}\n+\n+struct VisitOpaqueBounds<'a, 'cx, 'tcx> {\n+    infcx: &'a InferCtxt<'a, 'tcx>,\n+    cx: &'cx LateContext<'tcx>,\n+    fn_def_id: LocalDefId,\n+}\n+\n+impl<'tcx> TypeVisitor<'tcx> for VisitOpaqueBounds<'_, '_, 'tcx> {\n+    fn visit_ty(&mut self, ty: Ty<'tcx>) -> std::ops::ControlFlow<Self::BreakTy> {\n+        if let ty::Opaque(def_id, substs) = *ty.kind()\n+            && let Some(hir::Node::Item(item)) = self.cx.tcx.hir().get_if_local(def_id)\n+            && let hir::ItemKind::OpaqueTy(opaque) = &item.kind\n+            && let hir::OpaqueTyOrigin::FnReturn(origin_def_id) = opaque.origin\n+            && origin_def_id == self.fn_def_id\n+        {\n+            for pred_and_span in self.cx.tcx.bound_explicit_item_bounds(def_id).transpose_iter() {\n+                let pred_span = pred_and_span.0.1;\n+                let predicate = self.cx.tcx.liberate_late_bound_regions(\n+                    def_id,\n+                    pred_and_span.map_bound(|(pred, _)| *pred).subst(self.cx.tcx, substs).kind(),\n+                );\n+                let ty::PredicateKind::Projection(proj) = predicate else {\n+                    continue;\n+                };\n+                let Some(proj_term) = proj.term.ty() else { continue };\n+\n+                let proj_ty = self\n+                    .cx\n+                    .tcx\n+                    .mk_projection(proj.projection_ty.item_def_id, proj.projection_ty.substs);\n+                let proj_replacer = &mut BottomUpFolder {\n+                    tcx: self.cx.tcx,\n+                    ty_op: |ty| if ty == proj_ty { proj_term } else { ty },\n+                    lt_op: |lt| lt,\n+                    ct_op: |ct| ct,\n+                };\n+                for assoc_pred_and_span in self\n+                    .cx\n+                    .tcx\n+                    .bound_explicit_item_bounds(proj.projection_ty.item_def_id)\n+                    .transpose_iter()\n+                {\n+                    let assoc_pred_span = assoc_pred_and_span.0.1;\n+                    let assoc_pred = assoc_pred_and_span\n+                        .map_bound(|(pred, _)| *pred)\n+                        .subst(self.cx.tcx, &proj.projection_ty.substs)\n+                        .fold_with(proj_replacer);\n+                    if !self.infcx.predicate_must_hold_modulo_regions(&traits::Obligation::new(\n+                        traits::ObligationCause::dummy(),\n+                        self.cx.param_env,\n+                        assoc_pred,\n+                    )) {\n+                        let (suggestion, suggest_span) =\n+                            match (proj_term.kind(), assoc_pred.kind().skip_binder()) {\n+                                (ty::Opaque(def_id, _), ty::PredicateKind::Trait(trait_pred)) => (\n+                                    format!(\" + {}\", trait_pred.print_modifiers_and_trait_path()),\n+                                    Some(self.cx.tcx.def_span(def_id).shrink_to_hi()),\n+                                ),\n+                                _ => (String::new(), None),\n+                            };\n+                        self.cx.emit_spanned_lint(\n+                            RPIT_HIDDEN_INFERRED_BOUND,\n+                            pred_span,\n+                            RpitHiddenInferredBoundLint {\n+                                ty,\n+                                proj_ty: proj_term,\n+                                assoc_pred_span,\n+                                suggestion,\n+                                suggest_span,\n+                            },\n+                        );\n+                    }\n+                }\n+            }\n+        }\n+\n+        ty.super_visit_with(self)\n+    }\n+}\n+\n+#[derive(LintDiagnostic)]\n+#[diag(lint::rpit_hidden_inferred_bound)]\n+struct RpitHiddenInferredBoundLint<'tcx> {\n+    ty: Ty<'tcx>,\n+    proj_ty: Ty<'tcx>,\n+    #[label(lint::specifically)]\n+    assoc_pred_span: Span,\n+    #[suggestion_verbose(applicability = \"machine-applicable\", code = \"{suggestion}\")]\n+    suggest_span: Option<Span>,\n+    suggestion: String,\n+}"}, {"sha": "1fb27fd87e87e56153fd71465e7378f435dd5226", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0d6af91467ef60f12396f5d40a09eb4de8cb8b7/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0d6af91467ef60f12396f5d40a09eb4de8cb8b7/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=d0d6af91467ef60f12396f5d40a09eb4de8cb8b7", "patch": "@@ -444,7 +444,9 @@ pub fn in_external_macro(sess: &Session, span: Span) -> bool {\n     match expn_data.kind {\n         ExpnKind::Inlined\n         | ExpnKind::Root\n-        | ExpnKind::Desugaring(DesugaringKind::ForLoop | DesugaringKind::WhileLoop) => false,\n+        | ExpnKind::Desugaring(\n+            DesugaringKind::ForLoop | DesugaringKind::WhileLoop | DesugaringKind::OpaqueTy,\n+        ) => false,\n         ExpnKind::AstPass(_) | ExpnKind::Desugaring(_) => true, // well, it's \"external\"\n         ExpnKind::Macro(MacroKind::Bang, _) => {\n             // Dummy span for the `def_site` means it's an external macro."}]}