{"sha": "063d74f5d9b4a08b103137405baa076c55df9eae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2M2Q3NGY1ZDliNGEwOGIxMDMxMzc0MDViYWEwNzZjNTVkZjllYWU=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-30T15:41:27Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-12-04T16:43:21Z"}, "message": "Fix explanation of handling of empty enums", "tree": {"sha": "f1d25c9bc73e5c6d1b9070ba227ec986bb6fbf05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1d25c9bc73e5c6d1b9070ba227ec986bb6fbf05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/063d74f5d9b4a08b103137405baa076c55df9eae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/063d74f5d9b4a08b103137405baa076c55df9eae", "html_url": "https://github.com/rust-lang/rust/commit/063d74f5d9b4a08b103137405baa076c55df9eae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/063d74f5d9b4a08b103137405baa076c55df9eae/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86fb2ef2e1ee14741fdb38e15f8d530d863c2628", "url": "https://api.github.com/repos/rust-lang/rust/commits/86fb2ef2e1ee14741fdb38e15f8d530d863c2628", "html_url": "https://github.com/rust-lang/rust/commit/86fb2ef2e1ee14741fdb38e15f8d530d863c2628"}], "stats": {"total": 25, "additions": 8, "deletions": 17}, "files": [{"sha": "08fcaf20d2cc8edc50cdafe03224aabb4cff1a86", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/063d74f5d9b4a08b103137405baa076c55df9eae/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/063d74f5d9b4a08b103137405baa076c55df9eae/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=063d74f5d9b4a08b103137405baa076c55df9eae", "patch": "@@ -1267,23 +1267,14 @@ fn all_constructors<'a, 'tcx>(\n             let is_declared_nonexhaustive =\n                 def.is_variant_list_non_exhaustive() && !cx.is_local(pcx.ty);\n \n-            // If our scrutinee is *privately* an empty enum, we must treat it as though it had\n-            // an \"unknown\" constructor (in that case, all other patterns obviously can't be\n-            // variants) to avoid exposing its emptyness. See the `match_privately_empty` test\n-            // for details.\n-            let is_privately_empty = if cx.tcx.features().exhaustive_patterns {\n-                // This cannot happen because we have already filtered out uninhabited variants.\n-                false\n-            } else {\n-                // FIXME: this is fishy\n-                def.variants.is_empty()\n-            };\n-\n-            if is_privately_empty || is_declared_nonexhaustive {\n-                vec![NonExhaustive]\n-            } else {\n-                ctors\n-            }\n+            // If `exhaustive_patterns` is disabled and our scrutinee is an empty enum, we treat it\n+            // as though it had an \"unknown\" constructor to avoid exposing its emptyness. Note that\n+            // an empty match will still be considered exhaustive because that case is handled\n+            // separately in `check_match`.\n+            let is_secretly_empty =\n+                def.variants.is_empty() && !cx.tcx.features().exhaustive_patterns;\n+\n+            if is_secretly_empty || is_declared_nonexhaustive { vec![NonExhaustive] } else { ctors }\n         }\n         ty::Char => {\n             vec!["}]}