{"sha": "232e3d04b359a5867b530f26698f986ba1732d85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzMmUzZDA0YjM1OWE1ODY3YjUzMGYyNjY5OGY5ODZiYTE3MzJkODU=", "commit": {"author": {"name": "Prabakaran Kumaresshan", "email": "4676330+nixphix@users.noreply.github.com", "date": "2020-08-14T15:39:35Z"}, "committer": {"name": "Prabakaran Kumaresshan", "email": "4676330+nixphix@users.noreply.github.com", "date": "2020-08-14T15:39:35Z"}, "message": "Switch to intra-doc links in os/raw/*.md", "tree": {"sha": "f7faf6a1b47e16dd41c332ebdbe23478b3af04ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7faf6a1b47e16dd41c332ebdbe23478b3af04ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/232e3d04b359a5867b530f26698f986ba1732d85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/232e3d04b359a5867b530f26698f986ba1732d85", "html_url": "https://github.com/rust-lang/rust/commit/232e3d04b359a5867b530f26698f986ba1732d85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/232e3d04b359a5867b530f26698f986ba1732d85/comments", "author": {"login": "nixphix", "id": 4676330, "node_id": "MDQ6VXNlcjQ2NzYzMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/4676330?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nixphix", "html_url": "https://github.com/nixphix", "followers_url": "https://api.github.com/users/nixphix/followers", "following_url": "https://api.github.com/users/nixphix/following{/other_user}", "gists_url": "https://api.github.com/users/nixphix/gists{/gist_id}", "starred_url": "https://api.github.com/users/nixphix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nixphix/subscriptions", "organizations_url": "https://api.github.com/users/nixphix/orgs", "repos_url": "https://api.github.com/users/nixphix/repos", "events_url": "https://api.github.com/users/nixphix/events{/privacy}", "received_events_url": "https://api.github.com/users/nixphix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nixphix", "id": 4676330, "node_id": "MDQ6VXNlcjQ2NzYzMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/4676330?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nixphix", "html_url": "https://github.com/nixphix", "followers_url": "https://api.github.com/users/nixphix/followers", "following_url": "https://api.github.com/users/nixphix/following{/other_user}", "gists_url": "https://api.github.com/users/nixphix/gists{/gist_id}", "starred_url": "https://api.github.com/users/nixphix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nixphix/subscriptions", "organizations_url": "https://api.github.com/users/nixphix/orgs", "repos_url": "https://api.github.com/users/nixphix/repos", "events_url": "https://api.github.com/users/nixphix/events{/privacy}", "received_events_url": "https://api.github.com/users/nixphix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81dc88f88f92ba8ad7465f9cba10c12d3a7b70f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/81dc88f88f92ba8ad7465f9cba10c12d3a7b70f1", "html_url": "https://github.com/rust-lang/rust/commit/81dc88f88f92ba8ad7465f9cba10c12d3a7b70f1"}], "stats": {"total": 66, "additions": 33, "deletions": 33}, "files": [{"sha": "9fb0aed89d885912205d657494ad805e7ba0dcb5", "filename": "library/std/src/os/raw/char.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/232e3d04b359a5867b530f26698f986ba1732d85/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fchar.md", "raw_url": "https://github.com/rust-lang/rust/raw/232e3d04b359a5867b530f26698f986ba1732d85/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fchar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fchar.md?ref=232e3d04b359a5867b530f26698f986ba1732d85", "patch": "@@ -5,7 +5,7 @@ Equivalent to C's `char` type.\n C chars are most commonly used to make C strings. Unlike Rust, where the length of a string is included alongside the string, C strings mark the end of a string with the character `'\\0'`. See [`CStr`] for more information.\n \n [C's `char` type]: https://en.wikipedia.org/wiki/C_data_types#Basic_types\n-[Rust's `char` type]: ../../primitive.char.html\n-[`CStr`]: ../../ffi/struct.CStr.html\n-[`i8`]: ../../primitive.i8.html\n-[`u8`]: ../../primitive.u8.html\n+[Rust's `char` type]: char\n+[`CStr`]: crate::ffi::CStr\n+[`i8`]: i8\n+[`u8`]: u8"}, {"sha": "51503b5bd69dc4e5db0fc6b4cfca5534244f1003", "filename": "library/std/src/os/raw/double.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/232e3d04b359a5867b530f26698f986ba1732d85/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fdouble.md", "raw_url": "https://github.com/rust-lang/rust/raw/232e3d04b359a5867b530f26698f986ba1732d85/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fdouble.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fdouble.md?ref=232e3d04b359a5867b530f26698f986ba1732d85", "patch": "@@ -3,5 +3,5 @@ Equivalent to C's `double` type.\n This type will almost always be [`f64`], which is guaranteed to be an [IEEE-754 double-precision float] in Rust. That said, the standard technically only guarantees that it be a floating-point number with at least the precision of a [`float`], and it may be `f32` or something entirely different from the IEEE-754 standard.\n \n [IEEE-754 double-precision float]: https://en.wikipedia.org/wiki/IEEE_754\n-[`float`]: type.c_float.html\n-[`f64`]: ../../primitive.f64.html\n+[`float`]: c_float\n+[`f64`]: f64"}, {"sha": "7483b97623e7cbdded8af3a0ca650a361bf5c6d6", "filename": "library/std/src/os/raw/float.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/232e3d04b359a5867b530f26698f986ba1732d85/library%2Fstd%2Fsrc%2Fos%2Fraw%2Ffloat.md", "raw_url": "https://github.com/rust-lang/rust/raw/232e3d04b359a5867b530f26698f986ba1732d85/library%2Fstd%2Fsrc%2Fos%2Fraw%2Ffloat.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Ffloat.md?ref=232e3d04b359a5867b530f26698f986ba1732d85", "patch": "@@ -3,4 +3,4 @@ Equivalent to C's `float` type.\n This type will almost always be [`f32`], which is guaranteed to be an [IEEE-754 single-precision float] in Rust. That said, the standard technically only guarantees that it be a floating-point number, and it may have less precision than `f32` or not follow the IEEE-754 standard at all.\n \n [IEEE-754 single-precision float]: https://en.wikipedia.org/wiki/IEEE_754\n-[`f32`]: ../../primitive.f32.html\n+[`f32`]: f32"}, {"sha": "9860e4782f335199b22b5764752b6b62664a839b", "filename": "library/std/src/os/raw/int.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/232e3d04b359a5867b530f26698f986ba1732d85/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fint.md", "raw_url": "https://github.com/rust-lang/rust/raw/232e3d04b359a5867b530f26698f986ba1732d85/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fint.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fint.md?ref=232e3d04b359a5867b530f26698f986ba1732d85", "patch": "@@ -2,6 +2,6 @@ Equivalent to C's `signed int` (`int`) type.\n \n This type will almost always be [`i32`], but may differ on some esoteric systems. The C standard technically only requires that this type be a signed integer that is at least the size of a [`short`]; some systems define it as an [`i16`], for example.\n \n-[`short`]: type.c_short.html\n-[`i32`]: ../../primitive.i32.html\n-[`i16`]: ../../primitive.i16.html\n+[`short`]: c_short\n+[`i32`]: i32\n+[`i16`]: i16"}, {"sha": "410100ac64aba5dd389b242c416d3a28a35599f2", "filename": "library/std/src/os/raw/long.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/232e3d04b359a5867b530f26698f986ba1732d85/library%2Fstd%2Fsrc%2Fos%2Fraw%2Flong.md", "raw_url": "https://github.com/rust-lang/rust/raw/232e3d04b359a5867b530f26698f986ba1732d85/library%2Fstd%2Fsrc%2Fos%2Fraw%2Flong.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Flong.md?ref=232e3d04b359a5867b530f26698f986ba1732d85", "patch": "@@ -2,6 +2,6 @@ Equivalent to C's `signed long` (`long`) type.\n \n This type will always be [`i32`] or [`i64`]. Most notably, many Linux-based systems assume an `i64`, but Windows assumes `i32`. The C standard technically only requires that this type be a signed integer that is at least 32 bits and at least the size of an [`int`], although in practice, no system would have a `long` that is neither an `i32` nor `i64`.\n \n-[`int`]: type.c_int.html\n-[`i32`]: ../../primitive.i32.html\n-[`i64`]: ../../primitive.i64.html\n+[`int`]: c_int\n+[`i32`]: i32\n+[`i64`]: i64"}, {"sha": "26463dc8ec0038970e7750e981ac13282539bfb2", "filename": "library/std/src/os/raw/longlong.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/232e3d04b359a5867b530f26698f986ba1732d85/library%2Fstd%2Fsrc%2Fos%2Fraw%2Flonglong.md", "raw_url": "https://github.com/rust-lang/rust/raw/232e3d04b359a5867b530f26698f986ba1732d85/library%2Fstd%2Fsrc%2Fos%2Fraw%2Flonglong.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Flonglong.md?ref=232e3d04b359a5867b530f26698f986ba1732d85", "patch": "@@ -2,6 +2,6 @@ Equivalent to C's `signed long long` (`long long`) type.\n \n This type will almost always be [`i64`], but may differ on some systems. The C standard technically only requires that this type be a signed integer that is at least 64 bits and at least the size of a [`long`], although in practice, no system would have a `long long` that is not an `i64`, as most systems do not have a standardised [`i128`] type.\n \n-[`long`]: type.c_int.html\n-[`i64`]: ../../primitive.i64.html\n-[`i128`]: ../../primitive.i128.html\n+[`long`]: c_int\n+[`i64`]: i64\n+[`i128`]: i128"}, {"sha": "cc8d9bf5f42eccabfc04f901cf268d83debb4a69", "filename": "library/std/src/os/raw/schar.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/232e3d04b359a5867b530f26698f986ba1732d85/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fschar.md", "raw_url": "https://github.com/rust-lang/rust/raw/232e3d04b359a5867b530f26698f986ba1732d85/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fschar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fschar.md?ref=232e3d04b359a5867b530f26698f986ba1732d85", "patch": "@@ -2,5 +2,5 @@ Equivalent to C's `signed char` type.\n \n This type will always be [`i8`], but is included for completeness. It is defined as being a signed integer the same size as a C [`char`].\n \n-[`char`]: type.c_char.html\n-[`i8`]: ../../primitive.i8.html\n+[`char`]: c_char\n+[`i8`]: i8"}, {"sha": "f2d25e387e2b36550a25a50be97619aada859460", "filename": "library/std/src/os/raw/short.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/232e3d04b359a5867b530f26698f986ba1732d85/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fshort.md", "raw_url": "https://github.com/rust-lang/rust/raw/232e3d04b359a5867b530f26698f986ba1732d85/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fshort.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fshort.md?ref=232e3d04b359a5867b530f26698f986ba1732d85", "patch": "@@ -2,5 +2,5 @@ Equivalent to C's `signed short` (`short`) type.\n \n This type will almost always be [`i16`], but may differ on some esoteric systems. The C standard technically only requires that this type be a signed integer with at least 16 bits; some systems may define it as `i32`, for example.\n \n-[`char`]: type.c_char.html\n-[`i16`]: ../../primitive.i16.html\n+[`char`]: c_char\n+[`i16`]: i16"}, {"sha": "462410820dc6a3d472cba27f4614772128545aa5", "filename": "library/std/src/os/raw/uchar.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/232e3d04b359a5867b530f26698f986ba1732d85/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fuchar.md", "raw_url": "https://github.com/rust-lang/rust/raw/232e3d04b359a5867b530f26698f986ba1732d85/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fuchar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fuchar.md?ref=232e3d04b359a5867b530f26698f986ba1732d85", "patch": "@@ -2,5 +2,5 @@ Equivalent to C's `unsigned char` type.\n \n This type will always be [`u8`], but is included for completeness. It is defined as being an unsigned integer the same size as a C [`char`].\n \n-[`char`]: type.c_char.html\n-[`u8`]: ../../primitive.u8.html\n+[`char`]: c_char\n+[`u8`]: u8"}, {"sha": "4a5c4ab1d48934aa2198d09f3db54b06e80a5a5a", "filename": "library/std/src/os/raw/uint.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/232e3d04b359a5867b530f26698f986ba1732d85/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fuint.md", "raw_url": "https://github.com/rust-lang/rust/raw/232e3d04b359a5867b530f26698f986ba1732d85/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fuint.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fuint.md?ref=232e3d04b359a5867b530f26698f986ba1732d85", "patch": "@@ -2,6 +2,6 @@ Equivalent to C's `unsigned int` type.\n \n This type will almost always be [`u32`], but may differ on some esoteric systems. The C standard technically only requires that this type be an unsigned integer with the same size as an [`int`]; some systems define it as a [`u16`], for example.\n \n-[`int`]: type.c_int.html\n-[`u32`]: ../../primitive.u32.html\n-[`u16`]: ../../primitive.u16.html\n+[`int`]: c_int\n+[`u32`]: u32\n+[`u16`]: u16"}, {"sha": "745759c51abdcf63e28dccb3145bd4831d319e5e", "filename": "library/std/src/os/raw/ulong.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/232e3d04b359a5867b530f26698f986ba1732d85/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fulong.md", "raw_url": "https://github.com/rust-lang/rust/raw/232e3d04b359a5867b530f26698f986ba1732d85/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fulong.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fulong.md?ref=232e3d04b359a5867b530f26698f986ba1732d85", "patch": "@@ -2,6 +2,6 @@ Equivalent to C's `unsigned long` type.\n \n This type will always be [`u32`] or [`u64`]. Most notably, many Linux-based systems assume an `u64`, but Windows assumes `u32`. The C standard technically only requires that this type be an unsigned integer with the size of a [`long`], although in practice, no system would have a `ulong` that is neither a `u32` nor `u64`.\n \n-[`long`]: type.c_long.html\n-[`u32`]: ../../primitive.u32.html\n-[`u64`]: ../../primitive.u64.html\n+[`long`]: c_long\n+[`u32`]: u32\n+[`u64`]: u64"}, {"sha": "981106b23b6a4a842ea5e88cbe4fdcf7933c43ad", "filename": "library/std/src/os/raw/ulonglong.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/232e3d04b359a5867b530f26698f986ba1732d85/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fulonglong.md", "raw_url": "https://github.com/rust-lang/rust/raw/232e3d04b359a5867b530f26698f986ba1732d85/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fulonglong.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fulonglong.md?ref=232e3d04b359a5867b530f26698f986ba1732d85", "patch": "@@ -2,6 +2,6 @@ Equivalent to C's `unsigned long long` type.\n \n This type will almost always be [`u64`], but may differ on some systems. The C standard technically only requires that this type be an unsigned integer with the size of a [`long long`], although in practice, no system would have a `long long` that is not a `u64`, as most systems do not have a standardised [`u128`] type.\n \n-[`long long`]: type.c_longlong.html\n-[`u64`]: ../../primitive.u64.html\n-[`u128`]: ../../primitive.u128.html\n+[`long long`]: c_longlong\n+[`u64`]: u64\n+[`u128`]: u128"}, {"sha": "6e2506d52cf8447f454b7ed437dc25480c29159b", "filename": "library/std/src/os/raw/ushort.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/232e3d04b359a5867b530f26698f986ba1732d85/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fushort.md", "raw_url": "https://github.com/rust-lang/rust/raw/232e3d04b359a5867b530f26698f986ba1732d85/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fushort.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fushort.md?ref=232e3d04b359a5867b530f26698f986ba1732d85", "patch": "@@ -2,5 +2,5 @@ Equivalent to C's `unsigned short` type.\n \n This type will almost always be [`u16`], but may differ on some esoteric systems. The C standard technically only requires that this type be an unsigned integer with the same size as a [`short`].\n \n-[`short`]: type.c_short.html\n-[`u16`]: ../../primitive.u16.html\n+[`short`]: c_short\n+[`u16`]: u16"}]}