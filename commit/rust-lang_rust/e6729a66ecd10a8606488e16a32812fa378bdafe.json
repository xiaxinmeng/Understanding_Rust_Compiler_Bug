{"sha": "e6729a66ecd10a8606488e16a32812fa378bdafe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2NzI5YTY2ZWNkMTBhODYwNjQ4OGUxNmEzMjgxMmZhMzc4YmRhZmU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-09-16T00:44:57Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-09-16T00:44:57Z"}, "message": "Teach walk about plvals and pexps.", "tree": {"sha": "f9b1265c652bc06049f42b55473b56de45eaf441", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9b1265c652bc06049f42b55473b56de45eaf441"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6729a66ecd10a8606488e16a32812fa378bdafe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6729a66ecd10a8606488e16a32812fa378bdafe", "html_url": "https://github.com/rust-lang/rust/commit/e6729a66ecd10a8606488e16a32812fa378bdafe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6729a66ecd10a8606488e16a32812fa378bdafe/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c82cb42e797599036746461eddf2bec1685eaf3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c82cb42e797599036746461eddf2bec1685eaf3", "html_url": "https://github.com/rust-lang/rust/commit/5c82cb42e797599036746461eddf2bec1685eaf3"}], "stats": {"total": 114, "additions": 106, "deletions": 8}, "files": [{"sha": "73bb3dffe9f0368dfa8cfa80249fe35ebcc9f772", "filename": "src/boot/me/walk.ml", "status": "modified", "additions": 106, "deletions": 8, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/e6729a66ecd10a8606488e16a32812fa378bdafe/src%2Fboot%2Fme%2Fwalk.ml", "raw_url": "https://github.com/rust-lang/rust/raw/e6729a66ecd10a8606488e16a32812fa378bdafe/src%2Fboot%2Fme%2Fwalk.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fwalk.ml?ref=e6729a66ecd10a8606488e16a32812fa378bdafe", "patch": "@@ -19,6 +19,8 @@ type visitor =\n       visit_slot_identified_post: (Ast.slot identified) -> unit;\n       visit_expr_pre: Ast.expr -> unit;\n       visit_expr_post: Ast.expr -> unit;\n+      visit_pexp_pre: Ast.pexp -> unit;\n+      visit_pexp_post: Ast.pexp -> unit;\n       visit_ty_pre: Ast.ty -> unit;\n       visit_ty_post: Ast.ty -> unit;\n       visit_constr_pre: node_id option -> Ast.constr -> unit;\n@@ -32,6 +34,8 @@ type visitor =\n       visit_lit_post: Ast.lit -> unit;\n       visit_lval_pre: Ast.lval -> unit;\n       visit_lval_post: Ast.lval -> unit;\n+      visit_plval_pre: Ast.plval -> unit;\n+      visit_plval_post: Ast.plval -> unit;\n       visit_mod_item_pre:\n         (Ast.ident\n          -> ((Ast.ty_param identified) array)\n@@ -63,6 +67,8 @@ let empty_visitor =\n     visit_slot_identified_post = (fun _ -> ());\n     visit_expr_pre = (fun _ -> ());\n     visit_expr_post = (fun _ -> ());\n+    visit_pexp_pre = (fun _ -> ());\n+    visit_pexp_post = (fun _ -> ());\n     visit_ty_pre = (fun _ -> ());\n     visit_ty_post = (fun _ -> ());\n     visit_constr_pre = (fun _ _ -> ());\n@@ -75,6 +81,8 @@ let empty_visitor =\n     visit_lit_post = (fun _ -> ());\n     visit_lval_pre = (fun _ -> ());\n     visit_lval_post = (fun _ -> ());\n+    visit_plval_pre = (fun _ -> ());\n+    visit_plval_post = (fun _ -> ());\n     visit_mod_item_pre = (fun _ _ _ -> ());\n     visit_mod_item_post = (fun _ _ _ -> ());\n     visit_obj_fn_pre = (fun _ _ _ -> ());\n@@ -529,6 +537,15 @@ and walk_stmt\n       v.visit_stmt_post\n       s\n \n+and walk_unop\n+    (v:visitor)\n+    (unop:Ast.unop)\n+    : unit =\n+  match unop with\n+      Ast.UNOP_cast tyi ->\n+        walk_ty v tyi.node\n+    | _ -> ()\n+\n \n and walk_expr\n     (v:visitor)\n@@ -539,16 +556,97 @@ and walk_expr\n         Ast.EXPR_binary (_,aa,ab) ->\n           walk_atom v aa;\n           walk_atom v ab\n-      | Ast.EXPR_unary (_,a) ->\n-          walk_atom v a\n+      | Ast.EXPR_unary (unop,a) ->\n+          walk_atom v a;\n+          walk_unop v unop\n       | Ast.EXPR_atom a ->\n           walk_atom v a\n   in\n-  walk_bracketed\n-    v.visit_expr_pre\n-    children\n-    v.visit_expr_post\n-    e\n+    walk_bracketed\n+      v.visit_expr_pre\n+      children\n+      v.visit_expr_post\n+      e\n+\n+and walk_pexp\n+    (v:visitor)\n+    (p:Ast.pexp)\n+    : unit =\n+  let children _ =\n+    match p.node with\n+        Ast.PEXP_call (pexp, pexps) ->\n+          walk_pexp v pexp;\n+          Array.iter (walk_pexp v) pexps\n+\n+      | Ast.PEXP_spawn (_, _, pexp)\n+      | Ast.PEXP_box (_, pexp) ->\n+          walk_pexp v pexp;\n+\n+      | Ast.PEXP_unop (unop, pexp) ->\n+          walk_pexp v pexp;\n+          walk_unop v unop\n+\n+      | Ast.PEXP_bind (pexp, pexp_opts) ->\n+          walk_pexp v pexp;\n+          Array.iter (walk_option (walk_pexp v)) pexp_opts\n+\n+      | Ast.PEXP_rec (elts, base) ->\n+          let walk_elt (_, _, pexp) = walk_pexp v pexp in\n+            Array.iter walk_elt elts;\n+            walk_option (walk_pexp v) base\n+\n+      | Ast.PEXP_tup elts ->\n+          let walk_elt (_, pexp) = walk_pexp v pexp in\n+            Array.iter walk_elt elts\n+\n+      | Ast.PEXP_vec (_, pexps)\n+      | Ast.PEXP_custom (_, pexps, _) ->\n+          Array.iter (walk_pexp v) pexps\n+\n+      | Ast.PEXP_chan po ->\n+          walk_option (walk_pexp v) po\n+\n+      | Ast.PEXP_binop (_, a, b)\n+      | Ast.PEXP_lazy_and (a, b)\n+      | Ast.PEXP_lazy_or (a, b) ->\n+          walk_pexp v a;\n+          walk_pexp v b\n+\n+      | Ast.PEXP_lval pl -> walk_plval v pl\n+\n+      | Ast.PEXP_lit lit -> walk_lit v lit\n+\n+      | Ast.PEXP_port\n+      | Ast.PEXP_str _ -> ()\n+  in\n+    walk_bracketed\n+      v.visit_pexp_pre\n+      children\n+      v.visit_pexp_post\n+      p\n+\n+and walk_plval\n+    (v:visitor)\n+    (p:Ast.plval)\n+    : unit =\n+  let children _ =\n+    match p with\n+        Ast.PLVAL_ident _ -> ()\n+      | Ast.PLVAL_app (_, tys) ->\n+          Array.iter (walk_ty v) tys\n+      | Ast.PLVAL_ext_name (pexp, _) ->\n+          walk_pexp v pexp\n+      | Ast.PLVAL_ext_pexp (a, b) ->\n+          walk_pexp v a;\n+          walk_pexp v b;\n+      | Ast.PLVAL_ext_deref pexp ->\n+          walk_pexp v pexp\n+  in\n+    walk_bracketed\n+      v.visit_plval_pre\n+      children\n+      v.visit_plval_post\n+      p\n \n and walk_atom\n     (v:visitor)\n@@ -557,7 +655,7 @@ and walk_atom\n   match a with\n       Ast.ATOM_literal ls -> walk_lit v ls.node\n     | Ast.ATOM_lval lv -> walk_lval v lv\n-    | Ast.ATOM_pexp _ -> bug () \"Walk.walk_atom on ATOM_pexp\"\n+    | Ast.ATOM_pexp p -> walk_pexp v p\n \n \n and walk_opt_atom"}]}