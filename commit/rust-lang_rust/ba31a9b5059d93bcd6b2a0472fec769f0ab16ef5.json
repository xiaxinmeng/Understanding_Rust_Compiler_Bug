{"sha": "ba31a9b5059d93bcd6b2a0472fec769f0ab16ef5", "node_id": "C_kwDOAAsO6NoAKGJhMzFhOWI1MDU5ZDkzYmNkNmIyYTA0NzJmZWM3NjlmMGFiMTZlZjU", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-08-26T00:51:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-26T00:51:44Z"}, "message": "Rollup merge of #100604 - dtolnay:okorerr, r=m-ou-se\n\nRemove unstable Result::into_ok_or_err\n\nPending FCP: https://github.com/rust-lang/rust/issues/82223#issuecomment-1214920203\n\n```@rustbot``` label +waiting-on-fcp", "tree": {"sha": "a198b69f96341b2e0704ca9bf7c089bad4a65343", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a198b69f96341b2e0704ca9bf7c089bad4a65343"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba31a9b5059d93bcd6b2a0472fec769f0ab16ef5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjCBkgCRBK7hj4Ov3rIwAAZ+kIAG98GGXRygF91McNY+J83QIy\nsoDrK3FAHBN5mcg+/hUUy19eJ8G2HQTs5jdbBdsW9zVsxdKYRR0qSHRdOSReozo/\nthCkn1f6hNziCDJ8dOKrGW38+O/aHsBjpBLcLllZiRsGoiB/YD7qsC4ZTAKStdWN\n3yBuGd0VXDFbsTKHFkDIv9cu8BTx0UDEVLjaWlPctsD449S3n9uIbPSHMoyrFhpY\nHiUgkd6CUTsg0M5OgVvo9It/CkdvkilfG26bbe6+Vr01CbSzRqdHf6ynlWDPuoTY\nNO5pCquyLv93LW3yF0DJyrCm9eco+BGwYd8ejE3SKQoQjDJ09DgorjPW7HlStvI=\n=grZ1\n-----END PGP SIGNATURE-----\n", "payload": "tree a198b69f96341b2e0704ca9bf7c089bad4a65343\nparent e193f4697f11aed89329177d04c84bcd9ce1b424\nparent 39809c5f68e5618dc4183cfa95499df70357e617\nauthor Yuki Okushi <jtitor@2k36.org> 1661475104 +0900\ncommitter GitHub <noreply@github.com> 1661475104 +0900\n\nRollup merge of #100604 - dtolnay:okorerr, r=m-ou-se\n\nRemove unstable Result::into_ok_or_err\n\nPending FCP: https://github.com/rust-lang/rust/issues/82223#issuecomment-1214920203\n\n```@rustbot``` label +waiting-on-fcp\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba31a9b5059d93bcd6b2a0472fec769f0ab16ef5", "html_url": "https://github.com/rust-lang/rust/commit/ba31a9b5059d93bcd6b2a0472fec769f0ab16ef5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba31a9b5059d93bcd6b2a0472fec769f0ab16ef5/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e193f4697f11aed89329177d04c84bcd9ce1b424", "url": "https://api.github.com/repos/rust-lang/rust/commits/e193f4697f11aed89329177d04c84bcd9ce1b424", "html_url": "https://github.com/rust-lang/rust/commit/e193f4697f11aed89329177d04c84bcd9ce1b424"}, {"sha": "39809c5f68e5618dc4183cfa95499df70357e617", "url": "https://api.github.com/repos/rust-lang/rust/commits/39809c5f68e5618dc4183cfa95499df70357e617", "html_url": "https://github.com/rust-lang/rust/commit/39809c5f68e5618dc4183cfa95499df70357e617"}], "stats": {"total": 72, "additions": 11, "deletions": 61}, "files": [{"sha": "c59a40df03988aeec2b908ad36e9e4413793533b", "filename": "compiler/rustc_codegen_gcc/patches/0024-core-Disable-portable-simd-test.patch", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba31a9b5059d93bcd6b2a0472fec769f0ab16ef5/compiler%2Frustc_codegen_gcc%2Fpatches%2F0024-core-Disable-portable-simd-test.patch", "raw_url": "https://github.com/rust-lang/rust/raw/ba31a9b5059d93bcd6b2a0472fec769f0ab16ef5/compiler%2Frustc_codegen_gcc%2Fpatches%2F0024-core-Disable-portable-simd-test.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fpatches%2F0024-core-Disable-portable-simd-test.patch?ref=ba31a9b5059d93bcd6b2a0472fec769f0ab16ef5", "patch": "@@ -14,7 +14,6 @@ index 06c7be0..359e2e7 100644\n @@ -75,7 +75,6 @@\n  #![feature(never_type)]\n  #![feature(unwrap_infallible)]\n- #![feature(result_into_ok_or_err)]\n -#![feature(portable_simd)]\n  #![feature(ptr_metadata)]\n  #![feature(once_cell)]"}, {"sha": "93cab7ca533954b216e7df75b6efbedc8fae21e1", "filename": "compiler/rustc_transmute/src/layout/tree.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ba31a9b5059d93bcd6b2a0472fec769f0ab16ef5/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Ftree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba31a9b5059d93bcd6b2a0472fec769f0ab16ef5/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Ftree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Ftree.rs?ref=ba31a9b5059d93bcd6b2a0472fec769f0ab16ef5", "patch": "@@ -1,4 +1,5 @@\n use super::{Byte, Def, Ref};\n+use std::ops::ControlFlow;\n \n #[cfg(test)]\n mod tests;\n@@ -86,17 +87,18 @@ where\n         F: Fn(D) -> bool,\n     {\n         match self {\n-            Self::Seq(elts) => elts\n-                .into_iter()\n-                .map(|elt| elt.prune(f))\n-                .try_fold(Tree::unit(), |elts, elt| {\n+            Self::Seq(elts) => match elts.into_iter().map(|elt| elt.prune(f)).try_fold(\n+                Tree::unit(),\n+                |elts, elt| {\n                     if elt == Tree::uninhabited() {\n-                        Err(Tree::uninhabited())\n+                        ControlFlow::Break(Tree::uninhabited())\n                     } else {\n-                        Ok(elts.then(elt))\n+                        ControlFlow::Continue(elts.then(elt))\n                     }\n-                })\n-                .into_ok_or_err(),\n+                },\n+            ) {\n+                ControlFlow::Break(node) | ControlFlow::Continue(node) => node,\n+            },\n             Self::Alt(alts) => alts\n                 .into_iter()\n                 .map(|alt| alt.prune(f))"}, {"sha": "89b1ce5abe9e80d7a635d584ea7f2cf987964222", "filename": "compiler/rustc_transmute/src/lib.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba31a9b5059d93bcd6b2a0472fec769f0ab16ef5/compiler%2Frustc_transmute%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba31a9b5059d93bcd6b2a0472fec769f0ab16ef5/compiler%2Frustc_transmute%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Flib.rs?ref=ba31a9b5059d93bcd6b2a0472fec769f0ab16ef5", "patch": "@@ -1,11 +1,4 @@\n-#![feature(\n-    alloc_layout_extra,\n-    control_flow_enum,\n-    decl_macro,\n-    iterator_try_reduce,\n-    never_type,\n-    result_into_ok_or_err\n-)]\n+#![feature(alloc_layout_extra, control_flow_enum, decl_macro, iterator_try_reduce, never_type)]\n #![allow(dead_code, unused_variables)]\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]"}, {"sha": "76eaa191f7811db5f9142638be616ffd10ae239c", "filename": "library/core/src/result.rs", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ba31a9b5059d93bcd6b2a0472fec769f0ab16ef5/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba31a9b5059d93bcd6b2a0472fec769f0ab16ef5/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=ba31a9b5059d93bcd6b2a0472fec769f0ab16ef5", "patch": "@@ -1776,40 +1776,6 @@ impl<T, E> Result<Result<T, E>, E> {\n     }\n }\n \n-impl<T> Result<T, T> {\n-    /// Returns the [`Ok`] value if `self` is `Ok`, and the [`Err`] value if\n-    /// `self` is `Err`.\n-    ///\n-    /// In other words, this function returns the value (the `T`) of a\n-    /// `Result<T, T>`, regardless of whether or not that result is `Ok` or\n-    /// `Err`.\n-    ///\n-    /// This can be useful in conjunction with APIs such as\n-    /// [`Atomic*::compare_exchange`], or [`slice::binary_search`], but only in\n-    /// cases where you don't care if the result was `Ok` or not.\n-    ///\n-    /// [`Atomic*::compare_exchange`]: crate::sync::atomic::AtomicBool::compare_exchange\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(result_into_ok_or_err)]\n-    /// let ok: Result<u32, u32> = Ok(3);\n-    /// let err: Result<u32, u32> = Err(4);\n-    ///\n-    /// assert_eq!(ok.into_ok_or_err(), 3);\n-    /// assert_eq!(err.into_ok_or_err(), 4);\n-    /// ```\n-    #[inline]\n-    #[unstable(feature = \"result_into_ok_or_err\", reason = \"newly added\", issue = \"82223\")]\n-    pub const fn into_ok_or_err(self) -> T {\n-        match self {\n-            Ok(v) => v,\n-            Err(v) => v,\n-        }\n-    }\n-}\n-\n // This is a separate function to reduce the code size of the methods\n #[cfg(not(feature = \"panic_immediate_abort\"))]\n #[inline(never)]"}, {"sha": "c315f3a7975129399459a37c48f8fcc63a1c15c7", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba31a9b5059d93bcd6b2a0472fec769f0ab16ef5/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba31a9b5059d93bcd6b2a0472fec769f0ab16ef5/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=ba31a9b5059d93bcd6b2a0472fec769f0ab16ef5", "patch": "@@ -75,7 +75,6 @@\n #![feature(const_pin)]\n #![feature(never_type)]\n #![feature(unwrap_infallible)]\n-#![feature(result_into_ok_or_err)]\n #![feature(pointer_byte_offsets)]\n #![feature(portable_simd)]\n #![feature(ptr_metadata)]"}, {"sha": "50926da3ce7992f5c610431b2afebd0a00c7b854", "filename": "library/core/tests/result.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba31a9b5059d93bcd6b2a0472fec769f0ab16ef5/library%2Fcore%2Ftests%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba31a9b5059d93bcd6b2a0472fec769f0ab16ef5/library%2Fcore%2Ftests%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fresult.rs?ref=ba31a9b5059d93bcd6b2a0472fec769f0ab16ef5", "patch": "@@ -95,15 +95,6 @@ fn test_unwrap_or() {\n     assert_eq!(ok_err.unwrap_or(50), 50);\n }\n \n-#[test]\n-fn test_ok_or_err() {\n-    let ok: Result<isize, isize> = Ok(100);\n-    let err: Result<isize, isize> = Err(200);\n-\n-    assert_eq!(ok.into_ok_or_err(), 100);\n-    assert_eq!(err.into_ok_or_err(), 200);\n-}\n-\n #[test]\n fn test_unwrap_or_else() {\n     fn handler(msg: &'static str) -> isize {"}]}