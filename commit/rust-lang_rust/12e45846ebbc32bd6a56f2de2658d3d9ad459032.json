{"sha": "12e45846ebbc32bd6a56f2de2658d3d9ad459032", "node_id": "C_kwDOAAsO6NoAKDEyZTQ1ODQ2ZWJiYzMyYmQ2YTU2ZjJkZTI2NThkM2Q5YWQ0NTkwMzI", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2022-10-22T01:13:22Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2022-10-22T01:13:22Z"}, "message": "Move truncation next to other thread tests for tidy", "tree": {"sha": "20e8f242d482e0bd272783f6bfdbf0b713fd7fe2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20e8f242d482e0bd272783f6bfdbf0b713fd7fe2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12e45846ebbc32bd6a56f2de2658d3d9ad459032", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12e45846ebbc32bd6a56f2de2658d3d9ad459032", "html_url": "https://github.com/rust-lang/rust/commit/12e45846ebbc32bd6a56f2de2658d3d9ad459032", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12e45846ebbc32bd6a56f2de2658d3d9ad459032/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7280f3d28aa139cec0c75072a3e66294b7f99b59", "url": "https://api.github.com/repos/rust-lang/rust/commits/7280f3d28aa139cec0c75072a3e66294b7f99b59", "html_url": "https://github.com/rust-lang/rust/commit/7280f3d28aa139cec0c75072a3e66294b7f99b59"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "69cd2b500a1f0819cf0aac85f6deb0aa8db73a6d", "filename": "library/std/src/sys/unix/thread.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/12e45846ebbc32bd6a56f2de2658d3d9ad459032/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e45846ebbc32bd6a56f2de2658d3d9ad459032/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs?ref=12e45846ebbc32bd6a56f2de2658d3d9ad459032", "patch": "@@ -920,28 +920,3 @@ fn min_stack_size(_: *const libc::pthread_attr_t) -> usize {\n fn min_stack_size(_: *const libc::pthread_attr_t) -> usize {\n     2048 // just a guess\n }\n-\n-#[test]\n-#[cfg(any(target_os = \"linux\", target_os = \"macos\", target_os = \"ios\", target_os = \"watchos\"))]\n-fn test_named_thread_truncation() {\n-    use crate::thread::{self, Builder};\n-\n-    let long_name = crate::iter::once(\"test_named_thread_truncation\")\n-        .chain(crate::iter::repeat(\" yada\").take(100))\n-        .collect::<String>();\n-\n-    let result = Builder::new().name(long_name.clone()).spawn(move || {\n-        // Rust remembers the full thread name itself.\n-        assert_eq!(thread::current().name(), Some(long_name.as_str()));\n-\n-        // But the kernel is limited -- make sure we successfully set a truncation.\n-        let mut buf = vec![0u8; long_name.len() + 1];\n-        unsafe {\n-            libc::pthread_getname_np(libc::pthread_self(), buf.as_mut_ptr().cast(), buf.len());\n-        }\n-        let cstr = CStr::from_bytes_until_nul(&buf).unwrap();\n-        assert!(cstr.to_bytes().len() > 0);\n-        assert!(long_name.as_bytes().starts_with(cstr.to_bytes()));\n-    });\n-    result.unwrap().join().unwrap();\n-}"}, {"sha": "71eb41cd564db17c1c87a38cab1ff100cb449e75", "filename": "library/std/src/thread/tests.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/12e45846ebbc32bd6a56f2de2658d3d9ad459032/library%2Fstd%2Fsrc%2Fthread%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e45846ebbc32bd6a56f2de2658d3d9ad459032/library%2Fstd%2Fsrc%2Fthread%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Ftests.rs?ref=12e45846ebbc32bd6a56f2de2658d3d9ad459032", "patch": "@@ -37,6 +37,31 @@ fn test_named_thread() {\n         .unwrap();\n }\n \n+#[cfg(any(target_os = \"linux\", target_os = \"macos\", target_os = \"ios\", target_os = \"watchos\"))]\n+#[test]\n+fn test_named_thread_truncation() {\n+    use crate::ffi::CStr;\n+\n+    let long_name = crate::iter::once(\"test_named_thread_truncation\")\n+        .chain(crate::iter::repeat(\" yada\").take(100))\n+        .collect::<String>();\n+\n+    let result = Builder::new().name(long_name.clone()).spawn(move || {\n+        // Rust remembers the full thread name itself.\n+        assert_eq!(thread::current().name(), Some(long_name.as_str()));\n+\n+        // But the system is limited -- make sure we successfully set a truncation.\n+        let mut buf = vec![0u8; long_name.len() + 1];\n+        unsafe {\n+            libc::pthread_getname_np(libc::pthread_self(), buf.as_mut_ptr().cast(), buf.len());\n+        }\n+        let cstr = CStr::from_bytes_until_nul(&buf).unwrap();\n+        assert!(cstr.to_bytes().len() > 0);\n+        assert!(long_name.as_bytes().starts_with(cstr.to_bytes()));\n+    });\n+    result.unwrap().join().unwrap();\n+}\n+\n #[test]\n #[should_panic]\n fn test_invalid_named_thread() {"}]}