{"sha": "362e6361d09f554b438f638fc8113b6091aa01b8", "node_id": "C_kwDOAAsO6NoAKDM2MmU2MzYxZDA5ZjU1NGI0MzhmNjM4ZmM4MTEzYjYwOTFhYTAxYjg", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-07-14T15:27:49Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-08-22T22:08:42Z"}, "message": "Do not call generate_fn_name_span in typeck.", "tree": {"sha": "6b18a3532a42248ac50803e306aab4738fb158bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b18a3532a42248ac50803e306aab4738fb158bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/362e6361d09f554b438f638fc8113b6091aa01b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/362e6361d09f554b438f638fc8113b6091aa01b8", "html_url": "https://github.com/rust-lang/rust/commit/362e6361d09f554b438f638fc8113b6091aa01b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/362e6361d09f554b438f638fc8113b6091aa01b8/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "613dc2204dc628e6804b9d2be8bdeb6f6f43611e", "url": "https://api.github.com/repos/rust-lang/rust/commits/613dc2204dc628e6804b9d2be8bdeb6f6f43611e", "html_url": "https://github.com/rust-lang/rust/commit/613dc2204dc628e6804b9d2be8bdeb6f6f43611e"}], "stats": {"total": 16, "additions": 7, "deletions": 9}, "files": [{"sha": "df171c2531a7a901c68615582ca45b2275cf40f5", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/362e6361d09f554b438f638fc8113b6091aa01b8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/362e6361d09f554b438f638fc8113b6091aa01b8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=362e6361d09f554b438f638fc8113b6091aa01b8", "patch": "@@ -858,8 +858,7 @@ fn compare_synthetic_generics<'tcx>(\n     {\n         if impl_synthetic != trait_synthetic {\n             let impl_def_id = impl_def_id.expect_local();\n-            let impl_hir_id = tcx.hir().local_def_id_to_hir_id(impl_def_id);\n-            let impl_span = tcx.hir().span(impl_hir_id);\n+            let impl_span = tcx.def_span(impl_def_id);\n             let trait_span = tcx.def_span(trait_def_id);\n             let mut err = struct_span_err!(\n                 tcx.sess,\n@@ -878,17 +877,16 @@ fn compare_synthetic_generics<'tcx>(\n                         // try taking the name from the trait impl\n                         // FIXME: this is obviously suboptimal since the name can already be used\n                         // as another generic argument\n-                        let new_name = tcx.sess.source_map().span_to_snippet(trait_span).ok()?;\n+                        let new_name = tcx.opt_item_name(trait_def_id)?;\n                         let trait_m = trait_m.def_id.as_local()?;\n-                        let trait_m = tcx.hir().trait_item(hir::TraitItemId { def_id: trait_m });\n+                        let trait_m = tcx.hir().expect_trait_item(trait_m);\n \n                         let impl_m = impl_m.def_id.as_local()?;\n-                        let impl_m = tcx.hir().impl_item(hir::ImplItemId { def_id: impl_m });\n+                        let impl_m = tcx.hir().expect_impl_item(impl_m);\n \n                         // in case there are no generics, take the spot between the function name\n                         // and the opening paren of the argument list\n-                        let new_generics_span =\n-                            tcx.sess.source_map().generate_fn_name_span(impl_span)?.shrink_to_hi();\n+                        let new_generics_span = tcx.def_ident_span(impl_def_id)?.shrink_to_hi();\n                         // in case there are generics, just replace them\n                         let generics_span =\n                             impl_m.generics.span.substitute_dummy(new_generics_span);\n@@ -900,7 +898,7 @@ fn compare_synthetic_generics<'tcx>(\n                             \"try changing the `impl Trait` argument to a generic parameter\",\n                             vec![\n                                 // replace `impl Trait` with `T`\n-                                (impl_span, new_name),\n+                                (impl_span, new_name.to_string()),\n                                 // replace impl method generics with trait method generics\n                                 // This isn't quite right, as users might have changed the names\n                                 // of the generics, but it works for the common case\n@@ -917,7 +915,7 @@ fn compare_synthetic_generics<'tcx>(\n                     err.span_label(impl_span, \"expected `impl Trait`, found generic parameter\");\n                     (|| {\n                         let impl_m = impl_m.def_id.as_local()?;\n-                        let impl_m = tcx.hir().impl_item(hir::ImplItemId { def_id: impl_m });\n+                        let impl_m = tcx.hir().expect_impl_item(impl_m);\n                         let input_tys = match impl_m.kind {\n                             hir::ImplItemKind::Fn(ref sig, _) => sig.decl.inputs,\n                             _ => unreachable!(),"}]}