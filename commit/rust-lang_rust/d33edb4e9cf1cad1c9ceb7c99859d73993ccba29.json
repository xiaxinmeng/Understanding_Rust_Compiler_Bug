{"sha": "d33edb4e9cf1cad1c9ceb7c99859d73993ccba29", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzM2VkYjRlOWNmMWNhZDFjOWNlYjdjOTk4NTlkNzM5OTNjY2JhMjk=", "commit": {"author": {"name": "Marijn Suijten", "email": "marijn@traverseresearch.nl", "date": "2021-01-03T16:45:49Z"}, "committer": {"name": "Marijn Suijten", "email": "marijn@traverseresearch.nl", "date": "2021-01-04T09:55:09Z"}, "message": "ssr: Allow replacing expressions with statements\n\nNow that statements can be matched and replaced (#6587) some usecases\nrequire expressions to be replaced with statements as well. This happens\nwhen something that can ambiguously be an expression or statement like\n`if` and loop blocks appear in the last position of a block, as trailing\nexpression. In this case a replacement pattern of the form `if\nfoo(){$a();}==>>$a();` will only substitute `if` blocks in the list of\nstatements but not if they (implicitly) end up in the trailing\nexpression, where they are not wrapped by an EXPR_STMT (but the pattern\nand template are, as parsing only succeeds for the `stmt ==>> stmt`\ncase).\n\nInstead of adding two rules that match an expression - and emit\nduplicate matching errors - allow the template for expressions to be a\nstatement if it fails to parse as an expression.", "tree": {"sha": "84b93a8b3aa2c1c4e8c17fe72988b2270c80c331", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84b93a8b3aa2c1c4e8c17fe72988b2270c80c331"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d33edb4e9cf1cad1c9ceb7c99859d73993ccba29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d33edb4e9cf1cad1c9ceb7c99859d73993ccba29", "html_url": "https://github.com/rust-lang/rust/commit/d33edb4e9cf1cad1c9ceb7c99859d73993ccba29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d33edb4e9cf1cad1c9ceb7c99859d73993ccba29/comments", "author": {"login": "MarijnS95", "id": 2325264, "node_id": "MDQ6VXNlcjIzMjUyNjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2325264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MarijnS95", "html_url": "https://github.com/MarijnS95", "followers_url": "https://api.github.com/users/MarijnS95/followers", "following_url": "https://api.github.com/users/MarijnS95/following{/other_user}", "gists_url": "https://api.github.com/users/MarijnS95/gists{/gist_id}", "starred_url": "https://api.github.com/users/MarijnS95/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MarijnS95/subscriptions", "organizations_url": "https://api.github.com/users/MarijnS95/orgs", "repos_url": "https://api.github.com/users/MarijnS95/repos", "events_url": "https://api.github.com/users/MarijnS95/events{/privacy}", "received_events_url": "https://api.github.com/users/MarijnS95/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MarijnS95", "id": 2325264, "node_id": "MDQ6VXNlcjIzMjUyNjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2325264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MarijnS95", "html_url": "https://github.com/MarijnS95", "followers_url": "https://api.github.com/users/MarijnS95/followers", "following_url": "https://api.github.com/users/MarijnS95/following{/other_user}", "gists_url": "https://api.github.com/users/MarijnS95/gists{/gist_id}", "starred_url": "https://api.github.com/users/MarijnS95/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MarijnS95/subscriptions", "organizations_url": "https://api.github.com/users/MarijnS95/orgs", "repos_url": "https://api.github.com/users/MarijnS95/repos", "events_url": "https://api.github.com/users/MarijnS95/events{/privacy}", "received_events_url": "https://api.github.com/users/MarijnS95/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b87699d97ac34f95dc09d166d07fc1220b460821", "url": "https://api.github.com/repos/rust-lang/rust/commits/b87699d97ac34f95dc09d166d07fc1220b460821", "html_url": "https://github.com/rust-lang/rust/commit/b87699d97ac34f95dc09d166d07fc1220b460821"}], "stats": {"total": 63, "additions": 60, "deletions": 3}, "files": [{"sha": "3d5e4feb7d7efe069f69eb5dd99daed618111846", "filename": "crates/ssr/src/parsing.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d33edb4e9cf1cad1c9ceb7c99859d73993ccba29/crates%2Fssr%2Fsrc%2Fparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d33edb4e9cf1cad1c9ceb7c99859d73993ccba29/crates%2Fssr%2Fsrc%2Fparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fssr%2Fsrc%2Fparsing.rs?ref=d33edb4e9cf1cad1c9ceb7c99859d73993ccba29", "patch": "@@ -73,12 +73,18 @@ impl ParsedRule {\n             placeholders_by_stand_in: pattern.placeholders_by_stand_in(),\n             rules: Vec::new(),\n         };\n-        builder.try_add(ast::Expr::parse(&raw_pattern), raw_template.map(ast::Expr::parse));\n+\n+        let raw_template_stmt = raw_template.map(ast::Stmt::parse);\n+        if let raw_template_expr @ Some(Ok(_)) = raw_template.map(ast::Expr::parse) {\n+            builder.try_add(ast::Expr::parse(&raw_pattern), raw_template_expr);\n+        } else {\n+            builder.try_add(ast::Expr::parse(&raw_pattern), raw_template_stmt.clone());\n+        }\n         builder.try_add(ast::Type::parse(&raw_pattern), raw_template.map(ast::Type::parse));\n         builder.try_add(ast::Item::parse(&raw_pattern), raw_template.map(ast::Item::parse));\n         builder.try_add(ast::Path::parse(&raw_pattern), raw_template.map(ast::Path::parse));\n         builder.try_add(ast::Pat::parse(&raw_pattern), raw_template.map(ast::Pat::parse));\n-        builder.try_add(ast::Stmt::parse(&raw_pattern), raw_template.map(ast::Stmt::parse));\n+        builder.try_add(ast::Stmt::parse(&raw_pattern), raw_template_stmt);\n         builder.build()\n     }\n }\n@@ -89,7 +95,11 @@ struct RuleBuilder {\n }\n \n impl RuleBuilder {\n-    fn try_add<T: AstNode>(&mut self, pattern: Result<T, ()>, template: Option<Result<T, ()>>) {\n+    fn try_add<T: AstNode, T2: AstNode>(\n+        &mut self,\n+        pattern: Result<T, ()>,\n+        template: Option<Result<T2, ()>>,\n+    ) {\n         match (pattern, template) {\n             (Ok(pattern), Some(Ok(template))) => self.rules.push(ParsedRule {\n                 placeholders_by_stand_in: self.placeholders_by_stand_in.clone(),"}, {"sha": "db9cb8ca15d362594c186782ada05a1be5ebf566", "filename": "crates/ssr/src/tests.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/d33edb4e9cf1cad1c9ceb7c99859d73993ccba29/crates%2Fssr%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d33edb4e9cf1cad1c9ceb7c99859d73993ccba29/crates%2Fssr%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fssr%2Fsrc%2Ftests.rs?ref=d33edb4e9cf1cad1c9ceb7c99859d73993ccba29", "patch": "@@ -203,6 +203,53 @@ fn ssr_let_stmt_replace_expr() {\n     );\n }\n \n+#[test]\n+fn ssr_blockexpr_replace_stmt_with_stmt() {\n+    assert_ssr_transform(\n+        \"if $a() {$b;} ==>> $b;\",\n+        \"{\n+    if foo() {\n+        bar();\n+    }\n+    Ok(())\n+}\",\n+        expect![[r#\"{\n+    bar();\n+    Ok(())\n+}\"#]],\n+    );\n+}\n+\n+#[test]\n+fn ssr_blockexpr_match_trailing_expr() {\n+    assert_matches(\n+        \"if $a() {$b;}\",\n+        \"{\n+    if foo() {\n+        bar();\n+    }\n+}\",\n+        &[\"if foo() {\n+        bar();\n+    }\"],\n+    );\n+}\n+\n+#[test]\n+fn ssr_blockexpr_replace_trailing_expr_with_stmt() {\n+    assert_ssr_transform(\n+        \"if $a() {$b;} ==>> $b;\",\n+        \"{\n+    if foo() {\n+        bar();\n+    }\n+}\",\n+        expect![[\"{\n+    bar();\n+}\"]],\n+    );\n+}\n+\n #[test]\n fn ssr_function_to_method() {\n     assert_ssr_transform("}]}