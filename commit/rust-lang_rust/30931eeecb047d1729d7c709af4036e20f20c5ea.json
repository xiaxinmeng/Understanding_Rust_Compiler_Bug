{"sha": "30931eeecb047d1729d7c709af4036e20f20c5ea", "node_id": "C_kwDOAAsO6NoAKDMwOTMxZWVlY2IwNDdkMTcyOWQ3YzcwOWFmNDAzNmUyMGYyMGM1ZWE", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-18T09:02:40Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-21T07:35:49Z"}, "message": "Add a dedicated thread for output printing", "tree": {"sha": "893142158fa433de86af06975635cfdd6d1eee26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/893142158fa433de86af06975635cfdd6d1eee26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30931eeecb047d1729d7c709af4036e20f20c5ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30931eeecb047d1729d7c709af4036e20f20c5ea", "html_url": "https://github.com/rust-lang/rust/commit/30931eeecb047d1729d7c709af4036e20f20c5ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30931eeecb047d1729d7c709af4036e20f20c5ea/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "084e02fd0885556fb44e7cb88c94a984ccbcfd3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/084e02fd0885556fb44e7cb88c94a984ccbcfd3e", "html_url": "https://github.com/rust-lang/rust/commit/084e02fd0885556fb44e7cb88c94a984ccbcfd3e"}], "stats": {"total": 20, "additions": 17, "deletions": 3}, "files": [{"sha": "ee20920e54ffd4323bdc3232e2e49962adcffea9", "filename": "ui_test/src/lib.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/30931eeecb047d1729d7c709af4036e20f20c5ea/ui_test%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30931eeecb047d1729d7c709af4036e20f20c5ea/ui_test%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Flib.rs?ref=30931eeecb047d1729d7c709af4036e20f20c5ea", "patch": "@@ -123,11 +123,22 @@ pub fn run_tests(mut config: Config) -> Result<()> {\n             drop(submit);\n         });\n \n+        // A channel for the messages emitted by the individual test threads.\n+        let (finish_file, finished_files) = crossbeam::channel::unbounded();\n+\n+        s.spawn(|_| {\n+            for msg in finished_files {\n+                eprintln!(\"{msg}\");\n+            }\n+        });\n+\n         let mut threads = vec![];\n \n         // Create N worker threads that receive files to test.\n         for _ in 0..std::thread::available_parallelism().unwrap().get() {\n+            let finish_file = finish_file.clone();\n             threads.push(s.spawn(|_| -> Result<()> {\n+                let finish_file = finish_file;\n                 for path in &receive {\n                     if !config.path_filter.is_empty() {\n                         let path_display = path.display().to_string();\n@@ -140,11 +151,12 @@ pub fn run_tests(mut config: Config) -> Result<()> {\n                     // Ignore file if only/ignore rules do (not) apply\n                     if !test_file_conditions(&comments, &target, &config) {\n                         ignored.fetch_add(1, Ordering::Relaxed);\n-                        eprintln!(\n+                        let msg = format!(\n                             \"{} ... {}\",\n                             path.display(),\n                             \"ignored (in-test comment)\".yellow()\n                         );\n+                        finish_file.send(msg)?;\n                         continue;\n                     }\n                     // Run the test for all revisions\n@@ -161,10 +173,10 @@ pub fn run_tests(mut config: Config) -> Result<()> {\n                         }\n                         write!(msg, \"... \").unwrap();\n                         if errors.is_empty() {\n-                            eprintln!(\"{msg}{}\", \"ok\".green());\n+                            write!(msg, \"{}\", \"ok\".green()).unwrap();\n                             succeeded.fetch_add(1, Ordering::Relaxed);\n                         } else {\n-                            eprintln!(\"{msg}{}\", \"FAILED\".red().bold());\n+                            write!(msg, \"{}\", \"FAILED\".red().bold()).unwrap();\n                             failures.lock().unwrap().push((\n                                 path.clone(),\n                                 m,\n@@ -173,11 +185,13 @@ pub fn run_tests(mut config: Config) -> Result<()> {\n                                 stderr,\n                             ));\n                         }\n+                        finish_file.send(msg)?;\n                     }\n                 }\n                 Ok(())\n             }));\n         }\n+\n         for thread in threads {\n             thread.join().unwrap()?;\n         }"}]}