{"sha": "0514c7b1b2bbc52cc8f7fe39ef44d0855fddbbdb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1MTRjN2IxYjJiYmM1MmNjOGY3ZmUzOWVmNDRkMDg1NWZkZGJiZGI=", "commit": {"author": {"name": "Denis Merigoux", "email": "denis.merigoux@gmail.com", "date": "2018-09-07T20:25:50Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-11-16T12:11:59Z"}, "message": "Generalized some base.rs methods", "tree": {"sha": "d041c6c2bc52892f04478597310105ac2e793068", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d041c6c2bc52892f04478597310105ac2e793068"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0514c7b1b2bbc52cc8f7fe39ef44d0855fddbbdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0514c7b1b2bbc52cc8f7fe39ef44d0855fddbbdb", "html_url": "https://github.com/rust-lang/rust/commit/0514c7b1b2bbc52cc8f7fe39ef44d0855fddbbdb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0514c7b1b2bbc52cc8f7fe39ef44d0855fddbbdb/comments", "author": {"login": "denismerigoux", "id": 1766128, "node_id": "MDQ6VXNlcjE3NjYxMjg=", "avatar_url": "https://avatars.githubusercontent.com/u/1766128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denismerigoux", "html_url": "https://github.com/denismerigoux", "followers_url": "https://api.github.com/users/denismerigoux/followers", "following_url": "https://api.github.com/users/denismerigoux/following{/other_user}", "gists_url": "https://api.github.com/users/denismerigoux/gists{/gist_id}", "starred_url": "https://api.github.com/users/denismerigoux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denismerigoux/subscriptions", "organizations_url": "https://api.github.com/users/denismerigoux/orgs", "repos_url": "https://api.github.com/users/denismerigoux/repos", "events_url": "https://api.github.com/users/denismerigoux/events{/privacy}", "received_events_url": "https://api.github.com/users/denismerigoux/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c487b825b0a59b3e4c758a79f041245b79f4bf4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c487b825b0a59b3e4c758a79f041245b79f4bf4f", "html_url": "https://github.com/rust-lang/rust/commit/c487b825b0a59b3e4c758a79f041245b79f4bf4f"}], "stats": {"total": 149, "additions": 99, "deletions": 50}, "files": [{"sha": "7575b5f94c4606492e4e0d815fbc261bc882f83e", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 40, "deletions": 31, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/0514c7b1b2bbc52cc8f7fe39ef44d0855fddbbdb/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0514c7b1b2bbc52cc8f7fe39ef44d0855fddbbdb/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=0514c7b1b2bbc52cc8f7fe39ef44d0855fddbbdb", "patch": "@@ -30,7 +30,7 @@ use super::CachedModuleCodegen;\n \n use abi;\n use back::write::{self, OngoingCodegen};\n-use llvm::{self, TypeKind, get_param};\n+use llvm::{self, get_param};\n use metadata;\n use rustc::dep_graph::cgu_reuse_tracker::CguReuse;\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n@@ -54,7 +54,7 @@ use attributes;\n use builder::{Builder, MemFlags};\n use callee;\n use rustc_mir::monomorphize::item::DefPathBasedNames;\n-use common::{self, IntPredicate, RealPredicate};\n+use common::{self, IntPredicate, RealPredicate, TypeKind};\n use consts;\n use context::CodegenCx;\n use debuginfo;\n@@ -66,7 +66,6 @@ use monomorphize::partitioning::{CodegenUnit, CodegenUnitExt};\n use rustc_codegen_utils::symbol_names_test;\n use time_graph;\n use mono_item::{MonoItem, MonoItemExt};\n-use type_::Type;\n use type_of::LayoutLlvmExt;\n use rustc::util::nodemap::FxHashMap;\n use CrateInfo;\n@@ -333,21 +332,31 @@ pub fn coerce_unsized_into(\n     }\n }\n \n-pub fn cast_shift_expr_rhs(\n-    bx: &Builder<'_, 'll, '_>, op: hir::BinOpKind, lhs: &'ll Value, rhs: &'ll Value\n-) -> &'ll Value {\n+pub fn cast_shift_expr_rhs<'a, 'tcx: 'a, Builder: BuilderMethods<'a, 'tcx>>(\n+    bx: &Builder,\n+    op: hir::BinOpKind,\n+    lhs: Builder::Value,\n+    rhs: Builder::Value\n+) -> Builder::Value {\n     cast_shift_rhs(bx, op, lhs, rhs, |a, b| bx.trunc(a, b), |a, b| bx.zext(a, b))\n }\n \n-fn cast_shift_rhs<'ll, F, G>(bx: &Builder<'_, 'll, '_>,\n-                             op: hir::BinOpKind,\n-                             lhs: &'ll Value,\n-                             rhs: &'ll Value,\n-                             trunc: F,\n-                             zext: G)\n-                             -> &'ll Value\n-    where F: FnOnce(&'ll Value, &'ll Type) -> &'ll Value,\n-          G: FnOnce(&'ll Value, &'ll Type) -> &'ll Value\n+fn cast_shift_rhs<'a, 'tcx: 'a, F, G, Builder: BuilderMethods<'a, 'tcx>>(\n+    bx: &Builder,\n+    op: hir::BinOpKind,\n+    lhs: Builder::Value,\n+    rhs: Builder::Value,\n+    trunc: F,\n+    zext: G\n+) -> Builder::Value\n+    where F: FnOnce(\n+        Builder::Value,\n+        Builder::Type\n+    ) -> Builder::Value,\n+    G: FnOnce(\n+        Builder::Value,\n+        Builder::Type\n+    ) -> Builder::Value\n {\n     // Shifts may have any size int on the rhs\n     if op.is_shift() {\n@@ -389,41 +398,41 @@ pub fn call_assume(bx: &Builder<'_, 'll, '_>, val: &'ll Value) {\n     bx.call(assume_intrinsic, &[val], None);\n }\n \n-pub fn from_immediate<'a, 'll: 'a, 'tcx: 'll>(\n-    bx: &Builder<'_ ,'ll, '_, &'ll Value>,\n-    val: &'ll Value\n-) -> &'ll Value {\n+pub fn from_immediate<'a, 'tcx: 'a, Builder: BuilderMethods<'a, 'tcx>>(\n+    bx: &Builder,\n+    val: Builder::Value\n+) -> Builder::Value {\n     if bx.cx().val_ty(val) == bx.cx().type_i1() {\n         bx.zext(val, bx.cx().type_i8())\n     } else {\n         val\n     }\n }\n \n-pub fn to_immediate(\n-    bx: &Builder<'_, 'll, '_>,\n-    val: &'ll Value,\n+pub fn to_immediate<'a, 'tcx: 'a, Builder: BuilderMethods<'a, 'tcx>>(\n+    bx: &Builder,\n+    val: Builder::Value,\n     layout: layout::TyLayout,\n-) -> &'ll Value {\n+) -> Builder::Value {\n     if let layout::Abi::Scalar(ref scalar) = layout.abi {\n         return to_immediate_scalar(bx, val, scalar);\n     }\n     val\n }\n \n-pub fn to_immediate_scalar(\n-    bx: &Builder<'_, 'll, '_>,\n-    val: &'ll Value,\n+pub fn to_immediate_scalar<'a, 'tcx: 'a, Builder: BuilderMethods<'a, 'tcx>>(\n+    bx: &Builder,\n+    val: Builder::Value,\n     scalar: &layout::Scalar,\n-) -> &'ll Value {\n+) -> Builder::Value {\n     if scalar.is_bool() {\n         return bx.trunc(val, bx.cx().type_i1());\n     }\n     val\n }\n \n-pub fn call_memcpy<'a, 'll: 'a, 'tcx: 'll>(\n-    bx: &Builder<'_ ,'ll, '_, &'ll Value>,\n+pub fn call_memcpy(\n+    bx: &Builder<'_, 'll, '_>,\n     dst: &'ll Value,\n     dst_align: Align,\n     src: &'ll Value,\n@@ -446,8 +455,8 @@ pub fn call_memcpy<'a, 'll: 'a, 'tcx: 'll>(\n     bx.memcpy(dst_ptr, dst_align.abi(), src_ptr, src_align.abi(), size, volatile);\n }\n \n-pub fn memcpy_ty<'a, 'll: 'a, 'tcx: 'll>(\n-    bx: &Builder<'_ ,'ll, '_, &'ll Value>,\n+pub fn memcpy_ty(\n+    bx: &Builder<'_, 'll, '_>,\n     dst: &'ll Value,\n     dst_align: Align,\n     src: &'ll Value,"}, {"sha": "45551669712ade04b00c906a259ae705391652fb", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0514c7b1b2bbc52cc8f7fe39ef44d0855fddbbdb/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0514c7b1b2bbc52cc8f7fe39ef44d0855fddbbdb/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=0514c7b1b2bbc52cc8f7fe39ef44d0855fddbbdb", "patch": "@@ -60,7 +60,6 @@ impl Backend for Builder<'a, 'll, 'tcx>  {\n     type Value = &'ll Value;\n     type BasicBlock = &'ll BasicBlock;\n     type Type = &'ll Type;\n-    type TypeKind = llvm::TypeKind;\n     type Context = &'ll llvm::Context;\n }\n \n@@ -1146,7 +1145,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         let stored_ty = self.cx.val_ty(val);\n         let stored_ptr_ty = self.cx.type_ptr_to(stored_ty);\n \n-        assert_eq!(self.cx.type_kind(dest_ptr_ty), llvm::TypeKind::Pointer);\n+        assert_eq!(self.cx.type_kind(dest_ptr_ty), TypeKind::Pointer);\n \n         if dest_ptr_ty == stored_ptr_ty {\n             ptr\n@@ -1165,11 +1164,11 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n                       args: &'b [&'ll Value]) -> Cow<'b, [&'ll Value]> {\n         let mut fn_ty = self.cx.val_ty(llfn);\n         // Strip off pointers\n-        while self.cx.type_kind(fn_ty) == llvm::TypeKind::Pointer {\n+        while self.cx.type_kind(fn_ty) == TypeKind::Pointer {\n             fn_ty = self.cx.element_type(fn_ty);\n         }\n \n-        assert!(self.cx.type_kind(fn_ty) == llvm::TypeKind::Function,\n+        assert!(self.cx.type_kind(fn_ty) == TypeKind::Function,\n                 \"builder::{} not passed a function, but {:?}\", typ, fn_ty);\n \n         let param_tys = self.cx.func_params_types(fn_ty);"}, {"sha": "ab936f2f7b90e2a7d272d8590f2c0c036fcce8d2", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0514c7b1b2bbc52cc8f7fe39ef44d0855fddbbdb/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0514c7b1b2bbc52cc8f7fe39ef44d0855fddbbdb/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=0514c7b1b2bbc52cc8f7fe39ef44d0855fddbbdb", "patch": "@@ -12,8 +12,7 @@\n \n //! Code that is useful in various codegen modules.\n \n-use llvm::{self, TypeKind};\n-use llvm::{True, False, Bool, BasicBlock};\n+use llvm::{self, True, False, Bool, BasicBlock};\n use rustc::hir::def_id::DefId;\n use rustc::middle::lang_items::LangItem;\n use abi;\n@@ -131,6 +130,27 @@ pub enum SynchronizationScope {\n     CrossThread,\n }\n \n+#[derive(Copy, Clone, PartialEq, Debug)]\n+pub enum TypeKind {\n+    Void,\n+    Half,\n+    Float,\n+    Double,\n+    X86_FP80,\n+    FP128,\n+    PPc_FP128,\n+    Label,\n+    Integer,\n+    Function,\n+    Struct,\n+    Array,\n+    Pointer,\n+    Vector,\n+    Metadata,\n+    X86_MMX,\n+    Token,\n+}\n+\n /*\n * A note on nomenclature of linking: \"extern\", \"foreign\", and \"upcall\".\n *\n@@ -197,7 +217,6 @@ impl Backend for CodegenCx<'ll, 'tcx> {\n     type Value = &'ll Value;\n     type BasicBlock = &'ll BasicBlock;\n     type Type = &'ll Type;\n-    type TypeKind = llvm::TypeKind;\n     type Context = &'ll llvm::Context;\n }\n "}, {"sha": "37ff92bc1c9d61595257d359f046807003953a75", "filename": "src/librustc_codegen_llvm/interfaces/backend.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0514c7b1b2bbc52cc8f7fe39ef44d0855fddbbdb/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0514c7b1b2bbc52cc8f7fe39ef44d0855fddbbdb/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbackend.rs?ref=0514c7b1b2bbc52cc8f7fe39ef44d0855fddbbdb", "patch": "@@ -11,9 +11,8 @@\n use std::fmt::Debug;\n \n pub trait Backend {\n-    type Value: Debug + PartialEq;\n+    type Value: Debug + PartialEq + Copy;\n     type BasicBlock;\n-    type Type: Debug + PartialEq;\n-    type TypeKind;\n+    type Type: Debug + PartialEq + Copy;\n     type Context;\n }"}, {"sha": "fc089bfc83e3b990087b45b9ee156f7f3ebcaa2b", "filename": "src/librustc_codegen_llvm/interfaces/builder.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0514c7b1b2bbc52cc8f7fe39ef44d0855fddbbdb/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0514c7b1b2bbc52cc8f7fe39ef44d0855fddbbdb/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbuilder.rs?ref=0514c7b1b2bbc52cc8f7fe39ef44d0855fddbbdb", "patch": "@@ -23,13 +23,11 @@ use std::ops::Range;\n use syntax::ast::AsmDialect;\n \n \n-\n pub trait BuilderMethods<'a, 'tcx: 'a>: Backend {\n-    type CodegenCx: TypeMethods + ConstMethods + Backend<\n+    type CodegenCx: 'a + TypeMethods + ConstMethods + Backend<\n         Value = Self::Value,\n         BasicBlock = Self::BasicBlock,\n         Type = Self::Type,\n-        TypeKind = Self::TypeKind,\n         Context = Self::Context,\n     >;\n "}, {"sha": "f7a3af49ec93c193f49da51ad4f19c8666ad8e66", "filename": "src/librustc_codegen_llvm/interfaces/type_.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0514c7b1b2bbc52cc8f7fe39ef44d0855fddbbdb/src%2Flibrustc_codegen_llvm%2Finterfaces%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0514c7b1b2bbc52cc8f7fe39ef44d0855fddbbdb/src%2Flibrustc_codegen_llvm%2Finterfaces%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Ftype_.rs?ref=0514c7b1b2bbc52cc8f7fe39ef44d0855fddbbdb", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use super::backend::Backend;\n+use common::TypeKind;\n \n pub trait TypeMethods: Backend {\n     fn type_void(&self) -> Self::Type;\n@@ -30,7 +31,7 @@ pub trait TypeMethods: Backend {\n     fn type_named_struct(&self, name: &str) -> Self::Type;\n     fn type_array(&self, ty: Self::Type, len: u64) -> Self::Type;\n     fn type_vector(&self, ty: Self::Type, len: u64) -> Self::Type;\n-    fn type_kind(&self, ty: Self::Type) -> Self::TypeKind;\n+    fn type_kind(&self, ty: Self::Type) -> TypeKind;\n     fn set_struct_body(&self, ty: Self::Type, els: &[Self::Type], packed: bool);\n     fn type_ptr_to(&self, ty: Self::Type) -> Self::Type;\n     fn element_type(&self, ty: Self::Type) -> Self::Type;"}, {"sha": "91a139316a2b7627ebd0d154891bd444ba484a3d", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0514c7b1b2bbc52cc8f7fe39ef44d0855fddbbdb/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0514c7b1b2bbc52cc8f7fe39ef44d0855fddbbdb/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=0514c7b1b2bbc52cc8f7fe39ef44d0855fddbbdb", "patch": "@@ -12,7 +12,7 @@\n \n use attributes;\n use intrinsics::{self, Intrinsic};\n-use llvm::{self, TypeKind};\n+use llvm;\n use llvm_util;\n use abi::{Abi, FnType, LlvmType, PassMode};\n use mir::place::PlaceRef;"}, {"sha": "ea446f4b544b62f30f2a29a8f4c1f04e748ac3a0", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0514c7b1b2bbc52cc8f7fe39ef44d0855fddbbdb/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0514c7b1b2bbc52cc8f7fe39ef44d0855fddbbdb/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=0514c7b1b2bbc52cc8f7fe39ef44d0855fddbbdb", "patch": "@@ -228,6 +228,30 @@ pub enum TypeKind {\n     Token = 16,\n }\n \n+impl TypeKind {\n+    pub fn to_generic(self) -> common::TypeKind {\n+        match self {\n+            TypeKind::Void => common::TypeKind::Void,\n+            TypeKind::Half => common::TypeKind::Half,\n+            TypeKind::Float => common::TypeKind::Float,\n+            TypeKind::Double => common::TypeKind::Double,\n+            TypeKind::X86_FP80 => common::TypeKind::X86_FP80,\n+            TypeKind::FP128 => common::TypeKind::FP128,\n+            TypeKind::PPc_FP128 => common::TypeKind::PPc_FP128,\n+            TypeKind::Label => common::TypeKind::Label,\n+            TypeKind::Integer => common::TypeKind::Integer,\n+            TypeKind::Function => common::TypeKind::Function,\n+            TypeKind::Struct => common::TypeKind::Struct,\n+            TypeKind::Array => common::TypeKind::Array,\n+            TypeKind::Pointer => common::TypeKind::Pointer,\n+            TypeKind::Vector => common::TypeKind::Vector,\n+            TypeKind::Metadata => common::TypeKind::Metadata,\n+            TypeKind::X86_MMX => common::TypeKind::X86_MMX,\n+            TypeKind::Token => common::TypeKind::Token,\n+        }\n+    }\n+}\n+\n /// LLVMAtomicRmwBinOp\n #[derive(Copy, Clone)]\n #[repr(C)]"}, {"sha": "33ab01599091ed0cb05bf9b2e9b835989689d533", "filename": "src/librustc_codegen_llvm/type_.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0514c7b1b2bbc52cc8f7fe39ef44d0855fddbbdb/src%2Flibrustc_codegen_llvm%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0514c7b1b2bbc52cc8f7fe39ef44d0855fddbbdb/src%2Flibrustc_codegen_llvm%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_.rs?ref=0514c7b1b2bbc52cc8f7fe39ef44d0855fddbbdb", "patch": "@@ -13,16 +13,16 @@\n pub use llvm::Type;\n \n use llvm;\n-use llvm::{Bool, False, True, TypeKind};\n-\n+use llvm::{Bool, False, True};\n use context::CodegenCx;\n use interfaces::TypeMethods;\n use value::Value;\n \n+\n use syntax::ast;\n use rustc::ty::layout::{self, Align, Size};\n use rustc_data_structures::small_c_str::SmallCStr;\n-use common;\n+use common::{self, TypeKind};\n \n use std::fmt;\n \n@@ -175,7 +175,7 @@ impl TypeMethods for CodegenCx<'ll, 'tcx> {\n \n     fn type_kind(&self, ty: &'ll Type) -> TypeKind {\n         unsafe {\n-            llvm::LLVMRustGetTypeKind(ty)\n+            llvm::LLVMRustGetTypeKind(ty).to_generic()\n         }\n     }\n "}]}