{"sha": "371994e0d8380600ddda78ca1be937c7fb179b49", "node_id": "C_kwDOAAsO6NoAKDM3MTk5NGUwZDgzODA2MDBkZGRhNzhjYTFiZTkzN2M3ZmIxNzliNDk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-13T19:03:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-13T19:03:27Z"}, "message": "Auto merge of #112314 - ferrocene:pa-core-alloc-abort, r=bjorn3\n\nIgnore `core`, `alloc` and `test` tests that require unwinding on `-C panic=abort`\n\nSome of the tests for `core` and `alloc` require unwinding through their use of `catch_unwind`. These tests fail when testing using `-C panic=abort` (in my case through a target without unwinding support, and `-Z panic-abort-tests`), while they should be ignored as they don't indicate a failure.\n\nThis PR marks all of these tests with this attribute:\n\n```rust\n#[cfg_attr(not(panic = \"unwind\"), ignore = \"test requires unwinding support\")]\n```\n\nI'm not aware of a way to test this on rust-lang/rust's CI, as we don't test any target with `-C panic=abort`, but I tested this locally on a Ferrocene target and it does indeed make the test suite pass.", "tree": {"sha": "d441e6c0baf4b264821e3645f734c35fe768b425", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d441e6c0baf4b264821e3645f734c35fe768b425"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/371994e0d8380600ddda78ca1be937c7fb179b49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/371994e0d8380600ddda78ca1be937c7fb179b49", "html_url": "https://github.com/rust-lang/rust/commit/371994e0d8380600ddda78ca1be937c7fb179b49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/371994e0d8380600ddda78ca1be937c7fb179b49/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5683791ebb7bbc440366635c322ad82badc554ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/5683791ebb7bbc440366635c322ad82badc554ca", "html_url": "https://github.com/rust-lang/rust/commit/5683791ebb7bbc440366635c322ad82badc554ca"}, {"sha": "a988dc2711f033c371fb4b842dc6b436d9cf12ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/a988dc2711f033c371fb4b842dc6b436d9cf12ae", "html_url": "https://github.com/rust-lang/rust/commit/a988dc2711f033c371fb4b842dc6b436d9cf12ae"}], "stats": {"total": 90, "additions": 42, "deletions": 48}, "files": [{"sha": "385f5a8a2e039774927f732aa05be14efb325a94", "filename": "compiler/rustc_codegen_cranelift/patches/0023-coretests-Ignore-failing-tests.patch", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/371994e0d8380600ddda78ca1be937c7fb179b49/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0023-coretests-Ignore-failing-tests.patch", "raw_url": "https://github.com/rust-lang/rust/raw/371994e0d8380600ddda78ca1be937c7fb179b49/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0023-coretests-Ignore-failing-tests.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0023-coretests-Ignore-failing-tests.patch?ref=371994e0d8380600ddda78ca1be937c7fb179b49", "patch": "@@ -10,42 +10,6 @@ Subject: [PATCH] [core] Ignore failing tests\n  library/core/tests/time.rs       |  1 +\n  4 files changed, 18 insertions(+), 2 deletions(-)\n \n-diff --git a/array.rs b/array.rs\n-index 4bc44e9..8e3c7a4 100644\n---- a/array.rs\n-+++ b/array.rs\n-@@ -242,6 +242,7 @@ fn iterator_drops() {\n-     assert_eq!(i.get(), 5);\n- }\n- \n-+/*\n- // This test does not work on targets without panic=unwind support.\n- // To work around this problem, test is marked is should_panic, so it will\n- // be automagically skipped on unsuitable targets, such as\n-@@ -283,6 +284,7 @@ fn array_default_impl_avoids_leaks_on_panic() {\n-     assert_eq!(COUNTER.load(Relaxed), 0);\n-     panic!(\"test succeeded\")\n- }\n-+*/\n- \n- #[test]\n- fn empty_array_is_always_default() {\n-@@ -304,6 +304,7 @@ fn array_map() {\n-     assert_eq!(b, [1, 2, 3]);\n- }\n- \n-+/*\n- // See note on above test for why `should_panic` is used.\n- #[test]\n- #[should_panic(expected = \"test succeeded\")]\n-@@ -332,6 +333,7 @@ fn array_map_drop_safety() {\n-     assert_eq!(DROPPED.load(Ordering::SeqCst), num_to_create);\n-     panic!(\"test succeeded\")\n- }\n-+*/\n- \n- #[test]\n- fn cell_allows_array_cycle() {\n diff --git a/atomic.rs b/atomic.rs\n index 13b12db..96fe4b9 100644\n --- a/atomic.rs"}, {"sha": "565a7b7975f385c41d71676b7b240f3faf328ef0", "filename": "library/alloc/src/collections/binary_heap/tests.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/371994e0d8380600ddda78ca1be937c7fb179b49/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371994e0d8380600ddda78ca1be937c7fb179b49/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Ftests.rs?ref=371994e0d8380600ddda78ca1be937c7fb179b49", "patch": "@@ -309,6 +309,7 @@ fn test_drain_sorted() {\n }\n \n #[test]\n+#[cfg_attr(not(panic = \"unwind\"), ignore = \"test requires unwinding support\")]\n fn test_drain_sorted_leak() {\n     let d0 = CrashTestDummy::new(0);\n     let d1 = CrashTestDummy::new(1);\n@@ -475,6 +476,7 @@ fn test_retain() {\n }\n \n #[test]\n+#[cfg_attr(not(panic = \"unwind\"), ignore = \"test requires unwinding support\")]\n fn test_retain_catch_unwind() {\n     let mut heap = BinaryHeap::from(vec![3, 1, 2]);\n \n@@ -502,6 +504,7 @@ fn test_retain_catch_unwind() {\n // FIXME: re-enable emscripten once it can unwind again\n #[test]\n #[cfg(not(target_os = \"emscripten\"))]\n+#[cfg_attr(not(panic = \"unwind\"), ignore = \"test requires unwinding support\")]\n fn panic_safe() {\n     use rand::seq::SliceRandom;\n     use std::cmp;"}, {"sha": "8efd9a03ad09fbfb7eef04ce6cb87e404d16c26b", "filename": "library/alloc/src/collections/btree/map/tests.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/371994e0d8380600ddda78ca1be937c7fb179b49/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371994e0d8380600ddda78ca1be937c7fb179b49/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs?ref=371994e0d8380600ddda78ca1be937c7fb179b49", "patch": "@@ -1155,6 +1155,7 @@ mod test_drain_filter {\n     }\n \n     #[test]\n+    #[cfg_attr(not(panic = \"unwind\"), ignore = \"test requires unwinding support\")]\n     fn drop_panic_leak() {\n         let a = CrashTestDummy::new(0);\n         let b = CrashTestDummy::new(1);\n@@ -1175,6 +1176,7 @@ mod test_drain_filter {\n     }\n \n     #[test]\n+    #[cfg_attr(not(panic = \"unwind\"), ignore = \"test requires unwinding support\")]\n     fn pred_panic_leak() {\n         let a = CrashTestDummy::new(0);\n         let b = CrashTestDummy::new(1);\n@@ -1201,6 +1203,7 @@ mod test_drain_filter {\n \n     // Same as above, but attempt to use the iterator again after the panic in the predicate\n     #[test]\n+    #[cfg_attr(not(panic = \"unwind\"), ignore = \"test requires unwinding support\")]\n     fn pred_panic_reuse() {\n         let a = CrashTestDummy::new(0);\n         let b = CrashTestDummy::new(1);\n@@ -1449,6 +1452,7 @@ fn test_clear() {\n }\n \n #[test]\n+#[cfg_attr(not(panic = \"unwind\"), ignore = \"test requires unwinding support\")]\n fn test_clear_drop_panic_leak() {\n     let a = CrashTestDummy::new(0);\n     let b = CrashTestDummy::new(1);\n@@ -1540,11 +1544,13 @@ fn test_clone_panic_leak(size: usize) {\n }\n \n #[test]\n+#[cfg_attr(not(panic = \"unwind\"), ignore = \"test requires unwinding support\")]\n fn test_clone_panic_leak_height_0() {\n     test_clone_panic_leak(3)\n }\n \n #[test]\n+#[cfg_attr(not(panic = \"unwind\"), ignore = \"test requires unwinding support\")]\n fn test_clone_panic_leak_height_1() {\n     test_clone_panic_leak(MIN_INSERTS_HEIGHT_1)\n }\n@@ -2099,6 +2105,7 @@ create_append_test!(test_append_239, 239);\n create_append_test!(test_append_1700, 1700);\n \n #[test]\n+#[cfg_attr(not(panic = \"unwind\"), ignore = \"test requires unwinding support\")]\n fn test_append_drop_leak() {\n     let a = CrashTestDummy::new(0);\n     let b = CrashTestDummy::new(1);\n@@ -2240,6 +2247,7 @@ fn test_split_off_large_random_sorted() {\n }\n \n #[test]\n+#[cfg_attr(not(panic = \"unwind\"), ignore = \"test requires unwinding support\")]\n fn test_into_iter_drop_leak_height_0() {\n     let a = CrashTestDummy::new(0);\n     let b = CrashTestDummy::new(1);\n@@ -2263,6 +2271,7 @@ fn test_into_iter_drop_leak_height_0() {\n }\n \n #[test]\n+#[cfg_attr(not(panic = \"unwind\"), ignore = \"test requires unwinding support\")]\n fn test_into_iter_drop_leak_height_1() {\n     let size = MIN_INSERTS_HEIGHT_1;\n     for panic_point in vec![0, 1, size - 2, size - 1] {"}, {"sha": "8eb730f4aaffc91f6e4c46d4e23eb0709f1eb883", "filename": "library/alloc/src/collections/btree/set/tests.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/371994e0d8380600ddda78ca1be937c7fb179b49/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371994e0d8380600ddda78ca1be937c7fb179b49/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs?ref=371994e0d8380600ddda78ca1be937c7fb179b49", "patch": "@@ -377,6 +377,7 @@ fn test_drain_filter() {\n }\n \n #[test]\n+#[cfg_attr(not(panic = \"unwind\"), ignore = \"test requires unwinding support\")]\n fn test_drain_filter_drop_panic_leak() {\n     let a = CrashTestDummy::new(0);\n     let b = CrashTestDummy::new(1);\n@@ -397,6 +398,7 @@ fn test_drain_filter_drop_panic_leak() {\n }\n \n #[test]\n+#[cfg_attr(not(panic = \"unwind\"), ignore = \"test requires unwinding support\")]\n fn test_drain_filter_pred_panic_leak() {\n     let a = CrashTestDummy::new(0);\n     let b = CrashTestDummy::new(1);"}, {"sha": "6a0ea61836217b3977b54f24248f4c162689e851", "filename": "library/alloc/src/collections/linked_list/tests.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/371994e0d8380600ddda78ca1be937c7fb179b49/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371994e0d8380600ddda78ca1be937c7fb179b49/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list%2Ftests.rs?ref=371994e0d8380600ddda78ca1be937c7fb179b49", "patch": "@@ -985,6 +985,7 @@ fn drain_filter_complex() {\n }\n \n #[test]\n+#[cfg_attr(not(panic = \"unwind\"), ignore = \"test requires unwinding support\")]\n fn drain_filter_drop_panic_leak() {\n     let d0 = CrashTestDummy::new(0);\n     let d1 = CrashTestDummy::new(1);\n@@ -1018,6 +1019,7 @@ fn drain_filter_drop_panic_leak() {\n }\n \n #[test]\n+#[cfg_attr(not(panic = \"unwind\"), ignore = \"test requires unwinding support\")]\n fn drain_filter_pred_panic_leak() {\n     static mut DROPS: i32 = 0;\n \n@@ -1124,6 +1126,7 @@ fn test_drop_clear() {\n }\n \n #[test]\n+#[cfg_attr(not(panic = \"unwind\"), ignore = \"test requires unwinding support\")]\n fn test_drop_panic() {\n     static mut DROPS: i32 = 0;\n "}, {"sha": "54bc4e77b16f0b8af74f0c8c69c861309989e5da", "filename": "library/alloc/src/slice/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/371994e0d8380600ddda78ca1be937c7fb179b49/library%2Falloc%2Fsrc%2Fslice%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371994e0d8380600ddda78ca1be937c7fb179b49/library%2Falloc%2Fsrc%2Fslice%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fslice%2Ftests.rs?ref=371994e0d8380600ddda78ca1be937c7fb179b49", "patch": "@@ -187,6 +187,7 @@ std::thread_local!(static SILENCE_PANIC: Cell<bool> = Cell::new(false));\n \n #[test]\n #[cfg_attr(target_os = \"emscripten\", ignore)] // no threads\n+#[cfg_attr(not(panic = \"unwind\"), ignore = \"test requires unwinding support\")]\n fn panic_safe() {\n     panic::update_hook(move |prev, info| {\n         if !SILENCE_PANIC.with(|s| s.get()) {"}, {"sha": "784839a3ffa4297dd03cf9cbc6475ab7b821449c", "filename": "library/alloc/tests/slice.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/371994e0d8380600ddda78ca1be937c7fb179b49/library%2Falloc%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371994e0d8380600ddda78ca1be937c7fb179b49/library%2Falloc%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fslice.rs?ref=371994e0d8380600ddda78ca1be937c7fb179b49", "patch": "@@ -1418,6 +1418,7 @@ fn test_box_slice_clone() {\n #[test]\n #[allow(unused_must_use)] // here, we care about the side effects of `.clone()`\n #[cfg_attr(target_os = \"emscripten\", ignore)]\n+#[cfg_attr(not(panic = \"unwind\"), ignore = \"test requires unwinding support\")]\n fn test_box_slice_clone_panics() {\n     use std::sync::atomic::{AtomicUsize, Ordering};\n     use std::sync::Arc;"}, {"sha": "17d56d491d9a089d06321f9277b6b51302d93c55", "filename": "library/alloc/tests/string.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/371994e0d8380600ddda78ca1be937c7fb179b49/library%2Falloc%2Ftests%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371994e0d8380600ddda78ca1be937c7fb179b49/library%2Falloc%2Ftests%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fstring.rs?ref=371994e0d8380600ddda78ca1be937c7fb179b49", "patch": "@@ -394,6 +394,7 @@ fn test_remove_matches() {\n }\n \n #[test]\n+#[cfg_attr(not(panic = \"unwind\"), ignore = \"test requires unwinding support\")]\n fn test_retain() {\n     let mut s = String::from(\"\u03b1_\u03b2_\u03b3\");\n "}, {"sha": "155431689ec504c53725987abe5457a901f43ece", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/371994e0d8380600ddda78ca1be937c7fb179b49/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371994e0d8380600ddda78ca1be937c7fb179b49/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=371994e0d8380600ddda78ca1be937c7fb179b49", "patch": "@@ -314,6 +314,7 @@ fn test_retain_predicate_order() {\n }\n \n #[test]\n+#[cfg_attr(not(panic = \"unwind\"), ignore = \"test requires unwinding support\")]\n fn test_retain_pred_panic_with_hole() {\n     let v = (0..5).map(Rc::new).collect::<Vec<_>>();\n     catch_unwind(AssertUnwindSafe(|| {\n@@ -331,6 +332,7 @@ fn test_retain_pred_panic_with_hole() {\n }\n \n #[test]\n+#[cfg_attr(not(panic = \"unwind\"), ignore = \"test requires unwinding support\")]\n fn test_retain_pred_panic_no_hole() {\n     let v = (0..5).map(Rc::new).collect::<Vec<_>>();\n     catch_unwind(AssertUnwindSafe(|| {\n@@ -346,6 +348,7 @@ fn test_retain_pred_panic_no_hole() {\n }\n \n #[test]\n+#[cfg_attr(not(panic = \"unwind\"), ignore = \"test requires unwinding support\")]\n fn test_retain_drop_panic() {\n     struct Wrap(Rc<i32>);\n \n@@ -806,6 +809,7 @@ fn test_drain_end_overflow() {\n }\n \n #[test]\n+#[cfg_attr(not(panic = \"unwind\"), ignore = \"test requires unwinding support\")]\n fn test_drain_leak() {\n     static mut DROPS: i32 = 0;\n \n@@ -1038,6 +1042,7 @@ fn test_into_iter_clone() {\n }\n \n #[test]\n+#[cfg_attr(not(panic = \"unwind\"), ignore = \"test requires unwinding support\")]\n fn test_into_iter_leak() {\n     static mut DROPS: i32 = 0;\n \n@@ -1195,6 +1200,7 @@ fn test_from_iter_specialization_head_tail_drop() {\n }\n \n #[test]\n+#[cfg_attr(not(panic = \"unwind\"), ignore = \"test requires unwinding support\")]\n fn test_from_iter_specialization_panic_during_iteration_drops() {\n     let drop_count: Vec<_> = (0..=2).map(|_| Rc::new(())).collect();\n     let src: Vec<_> = drop_count.iter().cloned().collect();\n@@ -1219,6 +1225,7 @@ fn test_from_iter_specialization_panic_during_iteration_drops() {\n }\n \n #[test]\n+#[cfg_attr(not(panic = \"unwind\"), ignore = \"test requires unwinding support\")]\n fn test_from_iter_specialization_panic_during_drop_doesnt_leak() {\n     static mut DROP_COUNTER_OLD: [usize; 5] = [0; 5];\n     static mut DROP_COUNTER_NEW: [usize; 2] = [0; 2];\n@@ -1494,6 +1501,7 @@ fn drain_filter_complex() {\n // FIXME: re-enable emscripten once it can unwind again\n #[test]\n #[cfg(not(target_os = \"emscripten\"))]\n+#[cfg_attr(not(panic = \"unwind\"), ignore = \"test requires unwinding support\")]\n fn drain_filter_consumed_panic() {\n     use std::rc::Rc;\n     use std::sync::Mutex;\n@@ -1546,6 +1554,7 @@ fn drain_filter_consumed_panic() {\n // FIXME: Re-enable emscripten once it can catch panics\n #[test]\n #[cfg(not(target_os = \"emscripten\"))]\n+#[cfg_attr(not(panic = \"unwind\"), ignore = \"test requires unwinding support\")]\n fn drain_filter_unconsumed_panic() {\n     use std::rc::Rc;\n     use std::sync::Mutex;\n@@ -2414,6 +2423,7 @@ fn test_vec_dedup() {\n }\n \n #[test]\n+#[cfg_attr(not(panic = \"unwind\"), ignore = \"test requires unwinding support\")]\n fn test_vec_dedup_panicking() {\n     #[derive(Debug)]\n     struct Panic<'a> {\n@@ -2470,6 +2480,7 @@ fn test_vec_dedup_panicking() {\n \n // Regression test for issue #82533\n #[test]\n+#[cfg_attr(not(panic = \"unwind\"), ignore = \"test requires unwinding support\")]\n fn test_extend_from_within_panicking_clone() {\n     struct Panic<'dc> {\n         drop_count: &'dc AtomicU32,"}, {"sha": "f6fb1f73e5cf9e298ec19ed7f7a685563ff07d76", "filename": "library/alloc/tests/vec_deque.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/371994e0d8380600ddda78ca1be937c7fb179b49/library%2Falloc%2Ftests%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371994e0d8380600ddda78ca1be937c7fb179b49/library%2Falloc%2Ftests%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec_deque.rs?ref=371994e0d8380600ddda78ca1be937c7fb179b49", "patch": "@@ -747,6 +747,7 @@ fn test_drop_clear() {\n }\n \n #[test]\n+#[cfg_attr(not(panic = \"unwind\"), ignore = \"test requires unwinding support\")]\n fn test_drop_panic() {\n     static mut DROPS: i32 = 0;\n \n@@ -1601,6 +1602,7 @@ fn test_try_rfold_moves_iter() {\n }\n \n #[test]\n+#[cfg_attr(not(panic = \"unwind\"), ignore = \"test requires unwinding support\")]\n fn truncate_leak() {\n     static mut DROPS: i32 = 0;\n \n@@ -1634,6 +1636,7 @@ fn truncate_leak() {\n }\n \n #[test]\n+#[cfg_attr(not(panic = \"unwind\"), ignore = \"test requires unwinding support\")]\n fn test_drain_leak() {\n     static mut DROPS: i32 = 0;\n "}, {"sha": "982d7853f693621bd9ded0eca7380b521ea7770e", "filename": "library/core/tests/array.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/371994e0d8380600ddda78ca1be937c7fb179b49/library%2Fcore%2Ftests%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371994e0d8380600ddda78ca1be937c7fb179b49/library%2Fcore%2Ftests%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Farray.rs?ref=371994e0d8380600ddda78ca1be937c7fb179b49", "patch": "@@ -257,14 +257,8 @@ fn iterator_drops() {\n     assert_eq!(i.get(), 5);\n }\n \n-// This test does not work on targets without panic=unwind support.\n-// To work around this problem, test is marked is should_panic, so it will\n-// be automagically skipped on unsuitable targets, such as\n-// wasm32-unknown-unknown.\n-//\n-// It means that we use panic for indicating success.\n-#[test]\n-#[should_panic(expected = \"test succeeded\")]\n+#[test]\n+#[cfg_attr(not(panic = \"unwind\"), ignore = \"test requires unwinding support\")]\n fn array_default_impl_avoids_leaks_on_panic() {\n     use core::sync::atomic::{AtomicUsize, Ordering::Relaxed};\n     static COUNTER: AtomicUsize = AtomicUsize::new(0);\n@@ -296,7 +290,6 @@ fn array_default_impl_avoids_leaks_on_panic() {\n     assert_eq!(*panic_msg, \"bomb limit exceeded\");\n     // check that all bombs are successfully dropped\n     assert_eq!(COUNTER.load(Relaxed), 0);\n-    panic!(\"test succeeded\")\n }\n \n #[test]\n@@ -317,9 +310,8 @@ fn array_map() {\n     assert_eq!(b, [1, 2, 3]);\n }\n \n-// See note on above test for why `should_panic` is used.\n #[test]\n-#[should_panic(expected = \"test succeeded\")]\n+#[cfg_attr(not(panic = \"unwind\"), ignore = \"test requires unwinding support\")]\n fn array_map_drop_safety() {\n     static DROPPED: AtomicUsize = AtomicUsize::new(0);\n     struct DropCounter;\n@@ -341,7 +333,6 @@ fn array_map_drop_safety() {\n     });\n     assert!(success.is_err());\n     assert_eq!(DROPPED.load(Ordering::SeqCst), num_to_create);\n-    panic!(\"test succeeded\")\n }\n \n #[test]"}, {"sha": "4ef18b14f4cdd4f1a81fcd23aac828fe04e7e2c0", "filename": "library/test/src/tests.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/371994e0d8380600ddda78ca1be937c7fb179b49/library%2Ftest%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371994e0d8380600ddda78ca1be937c7fb179b49/library%2Ftest%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftests.rs?ref=371994e0d8380600ddda78ca1be937c7fb179b49", "patch": "@@ -154,6 +154,7 @@ pub fn ignored_tests_result_in_ignored() {\n // FIXME: Re-enable emscripten once it can catch panics again (introduced by #65251)\n #[test]\n #[cfg(not(target_os = \"emscripten\"))]\n+#[cfg_attr(not(panic = \"unwind\"), ignore = \"test requires unwinding support\")]\n fn test_should_panic() {\n     fn f() -> Result<(), String> {\n         panic!();\n@@ -184,6 +185,7 @@ fn test_should_panic() {\n // FIXME: Re-enable emscripten once it can catch panics again (introduced by #65251)\n #[test]\n #[cfg(not(target_os = \"emscripten\"))]\n+#[cfg_attr(not(panic = \"unwind\"), ignore = \"test requires unwinding support\")]\n fn test_should_panic_good_message() {\n     fn f() -> Result<(), String> {\n         panic!(\"an error message\");\n@@ -214,6 +216,7 @@ fn test_should_panic_good_message() {\n // FIXME: Re-enable emscripten once it can catch panics again (introduced by #65251)\n #[test]\n #[cfg(not(target_os = \"emscripten\"))]\n+#[cfg_attr(not(panic = \"unwind\"), ignore = \"test requires unwinding support\")]\n fn test_should_panic_bad_message() {\n     use crate::tests::TrFailedMsg;\n     fn f() -> Result<(), String> {\n@@ -249,6 +252,7 @@ fn test_should_panic_bad_message() {\n // FIXME: Re-enable emscripten once it can catch panics again (introduced by #65251)\n #[test]\n #[cfg(not(target_os = \"emscripten\"))]\n+#[cfg_attr(not(panic = \"unwind\"), ignore = \"test requires unwinding support\")]\n fn test_should_panic_non_string_message_type() {\n     use crate::tests::TrFailedMsg;\n     use std::any::TypeId;\n@@ -288,6 +292,7 @@ fn test_should_panic_non_string_message_type() {\n // FIXME: Re-enable emscripten once it can catch panics again (introduced by #65251)\n #[test]\n #[cfg(not(target_os = \"emscripten\"))]\n+#[cfg_attr(not(panic = \"unwind\"), ignore = \"test requires unwinding support\")]\n fn test_should_panic_but_succeeds() {\n     let should_panic_variants = [ShouldPanic::Yes, ShouldPanic::YesWithMessage(\"error message\")];\n "}]}