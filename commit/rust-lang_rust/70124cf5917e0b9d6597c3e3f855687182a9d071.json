{"sha": "70124cf5917e0b9d6597c3e3f855687182a9d071", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwMTI0Y2Y1OTE3ZTBiOWQ2NTk3YzNlM2Y4NTU2ODcxODJhOWQwNzE=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-05T20:54:29Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-05T20:54:29Z"}, "message": "Fix case conventions", "tree": {"sha": "9f2fd278b9096ed3ed40be1a4545bd36ad252942", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f2fd278b9096ed3ed40be1a4545bd36ad252942"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70124cf5917e0b9d6597c3e3f855687182a9d071", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70124cf5917e0b9d6597c3e3f855687182a9d071", "html_url": "https://github.com/rust-lang/rust/commit/70124cf5917e0b9d6597c3e3f855687182a9d071", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70124cf5917e0b9d6597c3e3f855687182a9d071/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0494071ab78ba4648e64a268ef1a4fffaa6c39b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0494071ab78ba4648e64a268ef1a4fffaa6c39b6", "html_url": "https://github.com/rust-lang/rust/commit/0494071ab78ba4648e64a268ef1a4fffaa6c39b6"}], "stats": {"total": 74, "additions": 37, "deletions": 37}, "files": [{"sha": "84fb9b874ff1dd930f2678e71f90c97b3b824a5d", "filename": "src/cyclomatic_complexity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70124cf5917e0b9d6597c3e3f855687182a9d071/src%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70124cf5917e0b9d6597c3e3f855687182a9d071/src%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcyclomatic_complexity.rs?ref=70124cf5917e0b9d6597c3e3f855687182a9d071", "patch": "@@ -62,8 +62,8 @@ impl CyclomaticComplexity {\n                 span_help_and_lint(cx,\n                                    CYCLOMATIC_COMPLEXITY,\n                                    span,\n-                                   &format!(\"The function has a cyclomatic complexity of {}\", rust_cc),\n-                                   \"You could split it up into multiple smaller functions\");\n+                                   &format!(\"the function has a cyclomatic complexity of {}\", rust_cc),\n+                                   \"you could split it up into multiple smaller functions\");\n             }\n         }\n     }"}, {"sha": "e0b51cdfa2ad16f73fe7c9b17469b7fab368d07f", "filename": "src/open_options.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/70124cf5917e0b9d6597c3e3f855687182a9d071/src%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70124cf5917e0b9d6597c3e3f855687182a9d071/src%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fopen_options.rs?ref=70124cf5917e0b9d6597c3e3f855687182a9d071", "patch": "@@ -120,7 +120,7 @@ fn check_open_options(cx: &LateContext, options: &[(OpenOption, Argument)], span\n                     span_lint(cx,\n                               NONSENSICAL_OPEN_OPTIONS,\n                               span,\n-                              \"The method \\\"create\\\" is called more than once\");\n+                              \"the method \\\"create\\\" is called more than once\");\n                 } else {\n                     create = true\n                 }\n@@ -131,7 +131,7 @@ fn check_open_options(cx: &LateContext, options: &[(OpenOption, Argument)], span\n                     span_lint(cx,\n                               NONSENSICAL_OPEN_OPTIONS,\n                               span,\n-                              \"The method \\\"append\\\" is called more than once\");\n+                              \"the method \\\"append\\\" is called more than once\");\n                 } else {\n                     append = true\n                 }\n@@ -142,7 +142,7 @@ fn check_open_options(cx: &LateContext, options: &[(OpenOption, Argument)], span\n                     span_lint(cx,\n                               NONSENSICAL_OPEN_OPTIONS,\n                               span,\n-                              \"The method \\\"truncate\\\" is called more than once\");\n+                              \"the method \\\"truncate\\\" is called more than once\");\n                 } else {\n                     truncate = true\n                 }\n@@ -153,7 +153,7 @@ fn check_open_options(cx: &LateContext, options: &[(OpenOption, Argument)], span\n                     span_lint(cx,\n                               NONSENSICAL_OPEN_OPTIONS,\n                               span,\n-                              \"The method \\\"read\\\" is called more than once\");\n+                              \"the method \\\"read\\\" is called more than once\");\n                 } else {\n                     read = true\n                 }\n@@ -164,7 +164,7 @@ fn check_open_options(cx: &LateContext, options: &[(OpenOption, Argument)], span\n                     span_lint(cx,\n                               NONSENSICAL_OPEN_OPTIONS,\n                               span,\n-                              \"The method \\\"write\\\" is called more than once\");\n+                              \"the method \\\"write\\\" is called more than once\");\n                 } else {\n                     write = true\n                 }\n@@ -174,12 +174,12 @@ fn check_open_options(cx: &LateContext, options: &[(OpenOption, Argument)], span\n     }\n \n     if read && truncate && read_arg && truncate_arg {\n-        span_lint(cx, NONSENSICAL_OPEN_OPTIONS, span, \"File opened with \\\"truncate\\\" and \\\"read\\\"\");\n+        span_lint(cx, NONSENSICAL_OPEN_OPTIONS, span, \"file opened with \\\"truncate\\\" and \\\"read\\\"\");\n     }\n     if append && truncate && append_arg && truncate_arg {\n         span_lint(cx,\n                   NONSENSICAL_OPEN_OPTIONS,\n                   span,\n-                  \"File opened with \\\"append\\\" and \\\"truncate\\\"\");\n+                  \"file opened with \\\"append\\\" and \\\"truncate\\\"\");\n     }\n }"}, {"sha": "c24edc564aee0a9c36bf7d126c042d60450d7742", "filename": "src/regex.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70124cf5917e0b9d6597c3e3f855687182a9d071/src%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70124cf5917e0b9d6597c3e3f855687182a9d071/src%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fregex.rs?ref=70124cf5917e0b9d6597c3e3f855687182a9d071", "patch": "@@ -45,7 +45,7 @@ impl LateLintPass for RegexPass {\n                         span_lint(cx,\n                                   INVALID_REGEX,\n                                   str_span(args[0].span, &r, e.position()),\n-                                  &format!(\"Regex syntax error: {}\",\n+                                  &format!(\"regex syntax error: {}\",\n                                            e.description()));\n                     }\n                 }\n@@ -57,7 +57,7 @@ impl LateLintPass for RegexPass {\n                     span_lint(cx,\n                               INVALID_REGEX,\n                               args[0].span,\n-                              &format!(\"Regex syntax error on position {}: {}\",\n+                              &format!(\"regex syntax error on position {}: {}\",\n                                        e.position(),\n                                        e.description()));\n                 }}"}, {"sha": "5bdca7f3629407bad2c7d084cd065384b8f7e7ae", "filename": "tests/compile-fail/cyclomatic_complexity.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/70124cf5917e0b9d6597c3e3f855687182a9d071/tests%2Fcompile-fail%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70124cf5917e0b9d6597c3e3f855687182a9d071/tests%2Fcompile-fail%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcyclomatic_complexity.rs?ref=70124cf5917e0b9d6597c3e3f855687182a9d071", "patch": "@@ -5,7 +5,7 @@\n #![allow(unused)]\n \n \n-fn main() { //~ERROR The function has a cyclomatic complexity of 28\n+fn main() { //~ERROR the function has a cyclomatic complexity of 28\n     if true {\n         println!(\"a\");\n     }\n@@ -90,7 +90,7 @@ fn main() { //~ERROR The function has a cyclomatic complexity of 28\n }\n \n #[cyclomatic_complexity = \"0\"]\n-fn kaboom() {  //~ ERROR: The function has a cyclomatic complexity of 8\n+fn kaboom() {  //~ ERROR: the function has a cyclomatic complexity of 8\n     let n = 0;\n     'a: for i in 0..20 {\n         'b: for j in i..20 {\n@@ -136,7 +136,7 @@ fn bloo() {\n }\n \n #[cyclomatic_complexity = \"0\"]\n-fn baa() { //~ ERROR: The function has a cyclomatic complexity of 2\n+fn baa() { //~ ERROR: the function has a cyclomatic complexity of 2\n     let x = || match 99 {\n         0 => true,\n         1 => false,\n@@ -154,15 +154,15 @@ fn baa() { //~ ERROR: The function has a cyclomatic complexity of 2\n }\n \n #[cyclomatic_complexity = \"0\"]\n-fn bar() { //~ ERROR: The function has a cyclomatic complexity of 2\n+fn bar() { //~ ERROR: the function has a cyclomatic complexity of 2\n     match 99 {\n         0 => println!(\"hi\"),\n         _ => println!(\"bye\"),\n     }\n }\n \n #[cyclomatic_complexity = \"0\"]\n-fn barr() { //~ ERROR: The function has a cyclomatic complexity of 2\n+fn barr() { //~ ERROR: the function has a cyclomatic complexity of 2\n     match 99 {\n         0 => println!(\"hi\"),\n         1 => println!(\"bla\"),\n@@ -172,7 +172,7 @@ fn barr() { //~ ERROR: The function has a cyclomatic complexity of 2\n }\n \n #[cyclomatic_complexity = \"0\"]\n-fn barr2() { //~ ERROR: The function has a cyclomatic complexity of 3\n+fn barr2() { //~ ERROR: the function has a cyclomatic complexity of 3\n     match 99 {\n         0 => println!(\"hi\"),\n         1 => println!(\"bla\"),\n@@ -188,7 +188,7 @@ fn barr2() { //~ ERROR: The function has a cyclomatic complexity of 3\n }\n \n #[cyclomatic_complexity = \"0\"]\n-fn barrr() { //~ ERROR: The function has a cyclomatic complexity of 2\n+fn barrr() { //~ ERROR: the function has a cyclomatic complexity of 2\n     match 99 {\n         0 => println!(\"hi\"),\n         1 => panic!(\"bla\"),\n@@ -198,7 +198,7 @@ fn barrr() { //~ ERROR: The function has a cyclomatic complexity of 2\n }\n \n #[cyclomatic_complexity = \"0\"]\n-fn barrr2() { //~ ERROR: The function has a cyclomatic complexity of 3\n+fn barrr2() { //~ ERROR: the function has a cyclomatic complexity of 3\n     match 99 {\n         0 => println!(\"hi\"),\n         1 => panic!(\"bla\"),\n@@ -214,7 +214,7 @@ fn barrr2() { //~ ERROR: The function has a cyclomatic complexity of 3\n }\n \n #[cyclomatic_complexity = \"0\"]\n-fn barrrr() { //~ ERROR: The function has a cyclomatic complexity of 2\n+fn barrrr() { //~ ERROR: the function has a cyclomatic complexity of 2\n     match 99 {\n         0 => println!(\"hi\"),\n         1 => println!(\"bla\"),\n@@ -224,7 +224,7 @@ fn barrrr() { //~ ERROR: The function has a cyclomatic complexity of 2\n }\n \n #[cyclomatic_complexity = \"0\"]\n-fn barrrr2() { //~ ERROR: The function has a cyclomatic complexity of 3\n+fn barrrr2() { //~ ERROR: the function has a cyclomatic complexity of 3\n     match 99 {\n         0 => println!(\"hi\"),\n         1 => println!(\"bla\"),\n@@ -240,7 +240,7 @@ fn barrrr2() { //~ ERROR: The function has a cyclomatic complexity of 3\n }\n \n #[cyclomatic_complexity = \"0\"]\n-fn cake() { //~ ERROR: The function has a cyclomatic complexity of 2\n+fn cake() { //~ ERROR: the function has a cyclomatic complexity of 2\n     if 4 == 5 {\n         println!(\"yea\");\n     } else {\n@@ -251,7 +251,7 @@ fn cake() { //~ ERROR: The function has a cyclomatic complexity of 2\n \n \n #[cyclomatic_complexity = \"0\"]\n-pub fn read_file(input_path: &str) -> String { //~ ERROR: The function has a cyclomatic complexity of 4\n+pub fn read_file(input_path: &str) -> String { //~ ERROR: the function has a cyclomatic complexity of 4\n     use std::fs::File;\n     use std::io::{Read, Write};\n     use std::path::Path;\n@@ -282,7 +282,7 @@ pub fn read_file(input_path: &str) -> String { //~ ERROR: The function has a cyc\n enum Void {}\n \n #[cyclomatic_complexity = \"0\"]\n-fn void(void: Void) { //~ ERROR: The function has a cyclomatic complexity of 1\n+fn void(void: Void) { //~ ERROR: the function has a cyclomatic complexity of 1\n     if true {\n         match void {\n         }"}, {"sha": "08024e37d4af8b98c456db6884f958bb44fa2c91", "filename": "tests/compile-fail/open_options.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/70124cf5917e0b9d6597c3e3f855687182a9d071/tests%2Fcompile-fail%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70124cf5917e0b9d6597c3e3f855687182a9d071/tests%2Fcompile-fail%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fopen_options.rs?ref=70124cf5917e0b9d6597c3e3f855687182a9d071", "patch": "@@ -5,12 +5,12 @@ use std::fs::OpenOptions;\n #[allow(unused_must_use)]\n #[deny(nonsensical_open_options)]\n fn main() {\n-\tOpenOptions::new().read(true).truncate(true).open(\"foo.txt\"); //~ERROR File opened with \"truncate\" and \"read\"\n-\tOpenOptions::new().append(true).truncate(true).open(\"foo.txt\"); //~ERROR File opened with \"append\" and \"truncate\"\n-    \n-\tOpenOptions::new().read(true).read(false).open(\"foo.txt\"); //~ERROR The method \"read\" is called more than once\n-\tOpenOptions::new().create(true).create(false).open(\"foo.txt\"); //~ERROR The method \"create\" is called more than once\n-\tOpenOptions::new().write(true).write(false).open(\"foo.txt\"); //~ERROR The method \"write\" is called more than once\n-\tOpenOptions::new().append(true).append(false).open(\"foo.txt\"); //~ERROR The method \"append\" is called more than once\n-\tOpenOptions::new().truncate(true).truncate(false).open(\"foo.txt\"); //~ERROR The method \"truncate\" is called more than once\n+    OpenOptions::new().read(true).truncate(true).open(\"foo.txt\"); //~ERROR file opened with \"truncate\" and \"read\"\n+    OpenOptions::new().append(true).truncate(true).open(\"foo.txt\"); //~ERROR file opened with \"append\" and \"truncate\"\n+\n+    OpenOptions::new().read(true).read(false).open(\"foo.txt\"); //~ERROR the method \"read\" is called more than once\n+    OpenOptions::new().create(true).create(false).open(\"foo.txt\"); //~ERROR the method \"create\" is called more than once\n+    OpenOptions::new().write(true).write(false).open(\"foo.txt\"); //~ERROR the method \"write\" is called more than once\n+    OpenOptions::new().append(true).append(false).open(\"foo.txt\"); //~ERROR the method \"append\" is called more than once\n+    OpenOptions::new().truncate(true).truncate(false).open(\"foo.txt\"); //~ERROR the method \"truncate\" is called more than once\n }"}, {"sha": "5a3f8b1a3681754d32c08d444b2da097e4e7827e", "filename": "tests/compile-fail/regex.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/70124cf5917e0b9d6597c3e3f855687182a9d071/tests%2Fcompile-fail%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70124cf5917e0b9d6597c3e3f855687182a9d071/tests%2Fcompile-fail%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fregex.rs?ref=70124cf5917e0b9d6597c3e3f855687182a9d071", "patch": "@@ -12,12 +12,12 @@ const OPENING_PAREN : &'static str = \"(\";\n \n fn main() {\n     let pipe_in_wrong_position = Regex::new(\"|\");\n-    //~^ERROR: Regex syntax error: empty alternate\n-    let wrong_char_ranice = Regex::new(\"[z-a]\"); \n-    //~^ERROR: Regex syntax error: invalid character class range\n-    \n+    //~^ERROR: regex syntax error: empty alternate\n+    let wrong_char_ranice = Regex::new(\"[z-a]\");\n+    //~^ERROR: regex syntax error: invalid character class range\n+\n     let some_regex = Regex::new(OPENING_PAREN);\n-    //~^ERROR: Regex syntax error on position 0: unclosed\n+    //~^ERROR: regex syntax error on position 0: unclosed\n \n     let closing_paren = \")\";\n     let not_linted = Regex::new(closing_paren);"}]}