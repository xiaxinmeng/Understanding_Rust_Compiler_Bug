{"sha": "db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d", "node_id": "C_kwDOAAsO6NoAKGRiOWQ4NmI1OGRmZjJhMTlkODRkNWU1NTc2NDFkZmJiNGNiYjNhOGQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-10T06:55:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-10T06:55:37Z"}, "message": "Auto merge of #101639 - matthiaskrgr:rollup-sewkrgm, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #101413 (Use RelocModel::Pic for UEFI targets)\n - #101595 (Fix ICE report flags display.)\n - #101616 (Adapt test for msan message change)\n - #101624 (rustdoc: remove unused CSS `#search { position: relative }`)\n - #101633 (Rustdoc-Json: Correcty handle intra-doc-links to items without HTML page)\n - #101634 (Rustdoc-Json Tests: Use ``@is`` and ``@ismany`` more often.)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "b34922610ea83e017e6942fde1e716a4c76fb7dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b34922610ea83e017e6942fde1e716a4c76fb7dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d", "html_url": "https://github.com/rust-lang/rust/commit/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cedd26b1ea066fe243b82b0f78e37066c6f4d789", "url": "https://api.github.com/repos/rust-lang/rust/commits/cedd26b1ea066fe243b82b0f78e37066c6f4d789", "html_url": "https://github.com/rust-lang/rust/commit/cedd26b1ea066fe243b82b0f78e37066c6f4d789"}, {"sha": "973059e1e7e3a66c3138e7578d7c9c9ab83b5318", "url": "https://api.github.com/repos/rust-lang/rust/commits/973059e1e7e3a66c3138e7578d7c9c9ab83b5318", "html_url": "https://github.com/rust-lang/rust/commit/973059e1e7e3a66c3138e7578d7c9c9ab83b5318"}], "stats": {"total": 216, "additions": 138, "deletions": 78}, "files": [{"sha": "d6f51d7eee1afca590f30d6fd3205bc51d2953de", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d", "patch": "@@ -1119,22 +1119,25 @@ fn extra_compiler_flags() -> Option<(Vec<String>, bool)> {\n     while let Some(arg) = args.next() {\n         if let Some(a) = ICE_REPORT_COMPILER_FLAGS.iter().find(|a| arg.starts_with(*a)) {\n             let content = if arg.len() == a.len() {\n+                // A space-separated option, like `-C incremental=foo` or `--crate-type rlib`\n                 match args.next() {\n                     Some(arg) => arg.to_string(),\n                     None => continue,\n                 }\n             } else if arg.get(a.len()..a.len() + 1) == Some(\"=\") {\n+                // An equals option, like `--crate-type=rlib`\n                 arg[a.len() + 1..].to_string()\n             } else {\n+                // A non-space option, like `-Cincremental=foo`\n                 arg[a.len()..].to_string()\n             };\n-            if ICE_REPORT_COMPILER_FLAGS_EXCLUDE.iter().any(|exc| content.starts_with(exc)) {\n+            let option = content.split_once('=').map(|s| s.0).unwrap_or(&content);\n+            if ICE_REPORT_COMPILER_FLAGS_EXCLUDE.iter().any(|exc| option == *exc) {\n                 excluded_cargo_defaults = true;\n             } else {\n                 result.push(a.to_string());\n-                match ICE_REPORT_COMPILER_FLAGS_STRIP_VALUE.iter().find(|s| content.starts_with(*s))\n-                {\n-                    Some(s) => result.push(s.to_string()),\n+                match ICE_REPORT_COMPILER_FLAGS_STRIP_VALUE.iter().find(|s| option == **s) {\n+                    Some(s) => result.push(format!(\"{}=[REDACTED]\", s)),\n                     None => result.push(content),\n                 }\n             }"}, {"sha": "0af599916a999429b33f434b2ad50575b7498401", "filename": "compiler/rustc_target/src/spec/tests/tests_impl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs?ref=db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d", "patch": "@@ -146,7 +146,8 @@ impl Target {\n         if self.position_independent_executables && !triple.ends_with(\"-linuxkernel\") {\n             assert_eq!(self.relocation_model, RelocModel::Pic);\n         }\n-        if self.relocation_model == RelocModel::Pic {\n+        // The UEFI targets do not support dynamic linking but still require PIC (#101377).\n+        if self.relocation_model == RelocModel::Pic && self.os != \"uefi\" {\n             assert!(self.dynamic_linking || self.position_independent_executables);\n         }\n         if self.static_position_independent_executables {"}, {"sha": "99af7d85e1d0235313033f9ef4651362e3d263b6", "filename": "compiler/rustc_target/src/spec/uefi_msvc_base.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fuefi_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fuefi_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fuefi_msvc_base.rs?ref=db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d", "patch": "@@ -10,7 +10,7 @@\n // code runs in the same environment, no process separation is supported.\n \n use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy};\n-use crate::spec::{RelocModel, StackProbeType, TargetOptions};\n+use crate::spec::{StackProbeType, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     let mut base = super::msvc_base::opts();\n@@ -47,7 +47,6 @@ pub fn opts() -> TargetOptions {\n         stack_probes: StackProbeType::Call,\n         singlethread: true,\n         linker: Some(\"rust-lld\".into()),\n-        relocation_model: RelocModel::Static,\n         ..base\n     }\n }"}, {"sha": "f973fd0889ebc364b2bd1cd8d213527d6674baf4", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d", "patch": "@@ -510,7 +510,7 @@ impl Item {\n             .get(&self.item_id)\n             .map_or(&[][..], |v| v.as_slice())\n             .iter()\n-            .filter_map(|ItemLink { link: s, link_text, did, ref fragment }| {\n+            .filter_map(|ItemLink { link: s, link_text, page_id: did, ref fragment }| {\n                 debug!(?did);\n                 if let Ok((mut href, ..)) = href(*did, cx) {\n                     debug!(?href);\n@@ -1134,7 +1134,10 @@ pub(crate) struct ItemLink {\n     /// This may not be the same as `link` if there was a disambiguator\n     /// in an intra-doc link (e.g. \\[`fn@f`\\])\n     pub(crate) link_text: String,\n-    pub(crate) did: DefId,\n+    /// The `DefId` of the Item whose **HTML Page** contains the item being\n+    /// linked to. This will be different to `item_id` on item's that don't\n+    /// have their own page, such as struct fields and enum variants.\n+    pub(crate) page_id: DefId,\n     /// The url fragment to append to the link\n     pub(crate) fragment: Option<UrlFragment>,\n }"}, {"sha": "dae2ff4e226370646d391d90ad0de9dee72ec4ed", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d", "patch": "@@ -592,10 +592,6 @@ h2.location a {\n \tmargin: 0;\n }\n \n-#search {\n-\tposition: relative;\n-}\n-\n .search-loading {\n \ttext-align: center;\n }\n@@ -973,7 +969,6 @@ so that we can apply CSS-filters to change the arrow color in themes */\n \n .search-results > a {\n \tdisplay: block;\n-\twidth: 100%;\n \t/* A little margin ensures the browser's outlining of focused links has room to display. */\n \tmargin-left: 2px;\n \tmargin-right: 2px;"}, {"sha": "49a31f5f1da1f8494b9065deab6b3cf76821901c", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d", "patch": "@@ -19,6 +19,7 @@ use crate::clean::utils::print_const_expr;\n use crate::clean::{self, ItemId};\n use crate::formats::item_type::ItemType;\n use crate::json::JsonRenderer;\n+use crate::passes::collect_intra_doc_links::UrlFragment;\n \n impl JsonRenderer<'_> {\n     pub(super) fn convert_item(&self, item: clean::Item) -> Option<Item> {\n@@ -29,8 +30,14 @@ impl JsonRenderer<'_> {\n             .get(&item.item_id)\n             .into_iter()\n             .flatten()\n-            .map(|clean::ItemLink { link, did, .. }| {\n-                (link.clone(), from_item_id((*did).into(), self.tcx))\n+            .map(|clean::ItemLink { link, page_id, fragment, .. }| {\n+                let id = match fragment {\n+                    Some(UrlFragment::Item(frag_id)) => *frag_id,\n+                    // FIXME: Pass the `UserWritten` segment to JSON consumer.\n+                    Some(UrlFragment::UserWritten(_)) | None => *page_id,\n+                };\n+\n+                (link.clone(), from_item_id(id.into(), self.tcx))\n             })\n             .collect();\n         let docs = item.attrs.collapsed_doc_value();"}, {"sha": "677c980f63cc4a5a795eaa0b6d4662c164fd1eb1", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d", "patch": "@@ -223,6 +223,9 @@ enum MalformedGenerics {\n #[derive(Clone, Debug, Hash, PartialEq, Eq)]\n pub(crate) enum UrlFragment {\n     Item(DefId),\n+    /// A part of a page that isn't a rust item.\n+    ///\n+    /// Eg: `[Vector Examples](std::vec::Vec#examples)`\n     UserWritten(String),\n }\n \n@@ -1127,7 +1130,7 @@ impl LinkCollector<'_, '_> {\n                 Some(ItemLink {\n                     link: ori_link.link.clone(),\n                     link_text: link_text.clone(),\n-                    did: res.def_id(self.cx.tcx),\n+                    page_id: res.def_id(self.cx.tcx),\n                     fragment,\n                 })\n             }\n@@ -1146,11 +1149,12 @@ impl LinkCollector<'_, '_> {\n                     item,\n                     &diag_info,\n                 )?;\n-                let id = clean::register_res(self.cx, rustc_hir::def::Res::Def(kind, id));\n+\n+                let page_id = clean::register_res(self.cx, rustc_hir::def::Res::Def(kind, id));\n                 Some(ItemLink {\n                     link: ori_link.link.clone(),\n                     link_text: link_text.clone(),\n-                    did: id,\n+                    page_id,\n                     fragment,\n                 })\n             }"}, {"sha": "b4fda5f8c8428d0c879382dbf0a6e616af8315f6", "filename": "src/test/codegen/abi-efiapi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d/src%2Ftest%2Fcodegen%2Fabi-efiapi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d/src%2Ftest%2Fcodegen%2Fabi-efiapi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fabi-efiapi.rs?ref=db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d", "patch": "@@ -24,7 +24,7 @@ trait Freeze { }\n #[lang=\"copy\"]\n trait Copy { }\n \n-//x86_64: define dso_local win64cc void @has_efiapi\n+//x86_64: define win64cc void @has_efiapi\n //i686: define void @has_efiapi\n //aarch64: define dso_local void @has_efiapi\n //arm: define dso_local void @has_efiapi"}, {"sha": "54482005fa601646de32571aca0a537d49b71814", "filename": "src/test/rustdoc-gui/search-result-display.goml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d/src%2Ftest%2Frustdoc-gui%2Fsearch-result-display.goml", "raw_url": "https://github.com/rust-lang/rust/raw/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d/src%2Ftest%2Frustdoc-gui%2Fsearch-result-display.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-result-display.goml?ref=db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d", "patch": "@@ -7,11 +7,11 @@ press-key: 'Enter'\n wait-for: \"#crate-search\"\n // The width is returned by \"getComputedStyle\" which returns the exact number instead of the\n // CSS rule which is \"50%\"...\n-assert-css: (\".search-results div.desc\", {\"width\": \"295px\"})\n+assert-css: (\".search-results div.desc\", {\"width\": \"293px\"})\n size: (600, 100)\n // As counter-intuitive as it may seem, in this width, the width is \"100%\", which is why\n // when computed it's larger.\n-assert-css: (\".search-results div.desc\", {\"width\": \"570px\"})\n+assert-css: (\".search-results div.desc\", {\"width\": \"566px\"})\n \n // Check that the crate filter `<select>` is correctly handled when it goes to next line.\n // To do so we need to update the length of one of its `<option>`."}, {"sha": "6d7f6bb969fb1b9d0b68e241a8490d8ce1b84576", "filename": "src/test/rustdoc-json/assoc_items.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d/src%2Ftest%2Frustdoc-json%2Fassoc_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d/src%2Ftest%2Frustdoc-json%2Fassoc_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fassoc_items.rs?ref=db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d", "patch": "@@ -3,25 +3,35 @@\n pub struct Simple;\n \n impl Simple {\n-    // @has \"$.index[*][?(@.name=='CONSTANT')].kind\" \\\"assoc_const\\\"\n+    // @is \"$.index[*][?(@.name=='CONSTANT')].kind\" \\\"assoc_const\\\"\n     pub const CONSTANT: usize = 0;\n }\n \n pub trait EasyToImpl {\n-    // @has \"$.index[*][?(@.name=='ToDeclare')].kind\" \\\"assoc_type\\\"\n-    // @has \"$.index[*][?(@.name=='ToDeclare')].inner.default\" null\n+    // @is \"$.index[*][?(@.docs=='ToDeclare trait')].kind\" \\\"assoc_type\\\"\n+    // @is \"$.index[*][?(@.docs=='ToDeclare trait')].inner.default\" null\n+    // @is \"$.index[*][?(@.docs=='ToDeclare trait')].inner.bounds\" []\n+    /// ToDeclare trait\n     type ToDeclare;\n-    // @has \"$.index[*][?(@.name=='AN_ATTRIBUTE')].kind\" \\\"assoc_const\\\"\n-    // @has \"$.index[*][?(@.name=='AN_ATTRIBUTE')].inner.default\" null\n+    // @is \"$.index[*][?(@.docs=='AN_ATTRIBUTE trait')].kind\" \\\"assoc_const\\\"\n+    // @is \"$.index[*][?(@.docs=='AN_ATTRIBUTE trait')].inner.default\" null\n+    // @is \"$.index[*][?(@.docs=='AN_ATTRIBUTE trait')].inner.type.kind\" '\"primitive\"'\n+    // @is \"$.index[*][?(@.docs=='AN_ATTRIBUTE trait')].inner.type.inner\" '\"usize\"'\n+    /// AN_ATTRIBUTE trait\n     const AN_ATTRIBUTE: usize;\n }\n \n impl EasyToImpl for Simple {\n-    // @has \"$.index[*][?(@.name=='ToDeclare')].inner.default.kind\" \\\"primitive\\\"\n-    // @has \"$.index[*][?(@.name=='ToDeclare')].inner.default.inner\" \\\"usize\\\"\n+    // @is \"$.index[*][?(@.docs=='ToDeclare impl')].kind\" '\"assoc_type\"'\n+    // @is \"$.index[*][?(@.docs=='ToDeclare impl')].inner.default.kind\" \\\"primitive\\\"\n+    // @is \"$.index[*][?(@.docs=='ToDeclare impl')].inner.default.inner\" \\\"usize\\\"\n+    /// ToDeclare impl\n     type ToDeclare = usize;\n-    // @has \"$.index[*][?(@.name=='AN_ATTRIBUTE')].inner.type.kind\" \\\"primitive\\\"\n-    // @has \"$.index[*][?(@.name=='AN_ATTRIBUTE')].inner.type.inner\" \\\"usize\\\"\n-    // @has \"$.index[*][?(@.name=='AN_ATTRIBUTE')].inner.default\" \\\"12\\\"\n+\n+    // @is \"$.index[*][?(@.docs=='AN_ATTRIBUTE impl')].kind\" '\"assoc_const\"'\n+    // @is \"$.index[*][?(@.docs=='AN_ATTRIBUTE impl')].inner.type.kind\" \\\"primitive\\\"\n+    // @is \"$.index[*][?(@.docs=='AN_ATTRIBUTE impl')].inner.type.inner\" \\\"usize\\\"\n+    // @is \"$.index[*][?(@.docs=='AN_ATTRIBUTE impl')].inner.default\" \\\"12\\\"\n+    /// AN_ATTRIBUTE impl\n     const AN_ATTRIBUTE: usize = 12;\n }"}, {"sha": "23b854d8d1721a1c05db3bcd017fe442a757c475", "filename": "src/test/rustdoc-json/enums/variant_struct.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d/src%2Ftest%2Frustdoc-json%2Fenums%2Fvariant_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d/src%2Ftest%2Frustdoc-json%2Fenums%2Fvariant_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fenums%2Fvariant_struct.rs?ref=db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d", "patch": "@@ -1,9 +1,9 @@\n-// @has \"$.index[*][?(@.name=='EnumStruct')].visibility\" \\\"public\\\"\n-// @has \"$.index[*][?(@.name=='EnumStruct')].kind\" \\\"enum\\\"\n+// @is \"$.index[*][?(@.name=='EnumStruct')].visibility\" \\\"public\\\"\n+// @is \"$.index[*][?(@.name=='EnumStruct')].kind\" \\\"enum\\\"\n pub enum EnumStruct {\n-    // @has \"$.index[*][?(@.name=='VariantS')].inner.variant_kind\" \\\"struct\\\"\n-    // @has \"$.index[*][?(@.name=='x')].kind\" \\\"struct_field\\\"\n-    // @has \"$.index[*][?(@.name=='y')].kind\" \\\"struct_field\\\"\n+    // @is \"$.index[*][?(@.name=='VariantS')].inner.variant_kind\" \\\"struct\\\"\n+    // @is \"$.index[*][?(@.name=='x')].kind\" \\\"struct_field\\\"\n+    // @is \"$.index[*][?(@.name=='y')].kind\" \\\"struct_field\\\"\n     VariantS {\n         x: u32,\n         y: String,"}, {"sha": "b71ec47a804ad961c1da11f06f86a6b71497c6fc", "filename": "src/test/rustdoc-json/enums/variant_tuple_struct.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d/src%2Ftest%2Frustdoc-json%2Fenums%2Fvariant_tuple_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d/src%2Ftest%2Frustdoc-json%2Fenums%2Fvariant_tuple_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fenums%2Fvariant_tuple_struct.rs?ref=db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d", "patch": "@@ -1,8 +1,8 @@\n-// @has \"$.index[*][?(@.name=='EnumTupleStruct')].visibility\" \\\"public\\\"\n-// @has \"$.index[*][?(@.name=='EnumTupleStruct')].kind\" \\\"enum\\\"\n+// @is \"$.index[*][?(@.name=='EnumTupleStruct')].visibility\" \\\"public\\\"\n+// @is \"$.index[*][?(@.name=='EnumTupleStruct')].kind\" \\\"enum\\\"\n pub enum EnumTupleStruct {\n-    // @has \"$.index[*][?(@.name=='VariantA')].inner.variant_kind\" \\\"tuple\\\"\n-    // @has \"$.index[*][?(@.name=='0')].kind\" \\\"struct_field\\\"\n-    // @has \"$.index[*][?(@.name=='1')].kind\" \\\"struct_field\\\"\n+    // @is \"$.index[*][?(@.name=='VariantA')].inner.variant_kind\" \\\"tuple\\\"\n+    // @is \"$.index[*][?(@.name=='0')].kind\" \\\"struct_field\\\"\n+    // @is \"$.index[*][?(@.name=='1')].kind\" \\\"struct_field\\\"\n     VariantA(u32, String),\n }"}, {"sha": "7b70ff1df6b092b8859d1af5d017603302478c86", "filename": "src/test/rustdoc-json/fns/generics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d/src%2Ftest%2Frustdoc-json%2Ffns%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d/src%2Ftest%2Frustdoc-json%2Ffns%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ffns%2Fgenerics.rs?ref=db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d", "patch": "@@ -9,16 +9,16 @@ pub trait Wham {}\n // @is    \"$.index[*][?(@.name=='one_generic_param_fn')].inner.generics.where_predicates\" []\n // @count \"$.index[*][?(@.name=='one_generic_param_fn')].inner.generics.params[*]\" 1\n // @is    \"$.index[*][?(@.name=='one_generic_param_fn')].inner.generics.params[0].name\" '\"T\"'\n-// @has   \"$.index[*][?(@.name=='one_generic_param_fn')].inner.generics.params[0].kind.type.synthetic\" false\n-// @has   \"$.index[*][?(@.name=='one_generic_param_fn')].inner.generics.params[0].kind.type.bounds[0].trait_bound.trait.id\" $wham_id\n+// @is    \"$.index[*][?(@.name=='one_generic_param_fn')].inner.generics.params[0].kind.type.synthetic\" false\n+// @is    \"$.index[*][?(@.name=='one_generic_param_fn')].inner.generics.params[0].kind.type.bounds[0].trait_bound.trait.id\" $wham_id\n // @is    \"$.index[*][?(@.name=='one_generic_param_fn')].inner.decl.inputs\" '[[\"w\", {\"inner\": \"T\", \"kind\": \"generic\"}]]'\n pub fn one_generic_param_fn<T: Wham>(w: T) {}\n \n // @is    \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.generics.where_predicates\" []\n // @count \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.generics.params[*]\" 1\n // @is    \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.generics.params[0].name\" '\"impl Wham\"'\n-// @has   \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.generics.params[0].kind.type.synthetic\" true\n-// @has   \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.generics.params[0].kind.type.bounds[0].trait_bound.trait.id\" $wham_id\n+// @is    \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.generics.params[0].kind.type.synthetic\" true\n+// @is    \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.generics.params[0].kind.type.bounds[0].trait_bound.trait.id\" $wham_id\n // @count \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.decl.inputs[*]\" 1\n // @is    \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.decl.inputs[0][0]\" '\"w\"'\n // @is    \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.decl.inputs[0][1].kind\" '\"impl_trait\"'"}, {"sha": "856f7c7015b3e3025fb9c2faa709ac774e13c44b", "filename": "src/test/rustdoc-json/impls/import_from_private.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d/src%2Ftest%2Frustdoc-json%2Fimpls%2Fimport_from_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d/src%2Ftest%2Frustdoc-json%2Fimpls%2Fimport_from_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fimpls%2Fimport_from_private.rs?ref=db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d", "patch": "@@ -16,9 +16,7 @@ mod bar {\n // @set import = \"$.index[*][?(@.kind=='import')].id\"\n pub use bar::Baz;\n \n-// FIXME(adotinthevoid): Use hasexact once #99474 lands\n-\n-// @has \"$.index[*][?(@.kind=='module')].inner.items[*]\" $import\n-// @is  \"$.index[*][?(@.kind=='import')].inner.id\" $baz\n-// @has \"$.index[*][?(@.kind=='struct')].inner.impls[*]\" $impl\n-// @has \"$.index[*][?(@.kind=='impl')].inner.items[*]\" $doit\n+// @is \"$.index[*][?(@.kind=='module')].inner.items[*]\" $import\n+// @is \"$.index[*][?(@.kind=='import')].inner.id\" $baz\n+// @is \"$.index[*][?(@.kind=='struct')].inner.impls[*]\" $impl\n+// @is \"$.index[*][?(@.kind=='impl')].inner.items[*]\" $doit"}, {"sha": "73c5334bb5c6a1c428799b2849d5e95d6498f589", "filename": "src/test/rustdoc-json/intra-doc-links/non_page.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d/src%2Ftest%2Frustdoc-json%2Fintra-doc-links%2Fnon_page.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d/src%2Ftest%2Frustdoc-json%2Fintra-doc-links%2Fnon_page.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fintra-doc-links%2Fnon_page.rs?ref=db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d", "patch": "@@ -0,0 +1,34 @@\n+// Regression test for <https://github.com/rust-lang/rust/issues/101531>,\n+// where links where to the item who's HTML page had the item linked to.\n+\n+//! [`Struct::struct_field`]\n+//! [`Enum::Variant`]\n+//! [`Trait::AssocType`]\n+//! [`Trait::ASSOC_CONST`]\n+//! [`Trait::method`]\n+\n+// @set struct_field = \"$.index[*][?(@.name=='struct_field')].id\"\n+// @set Variant = \"$.index[*][?(@.name=='Variant')].id\"\n+// @set AssocType = \"$.index[*][?(@.name=='AssocType')].id\"\n+// @set ASSOC_CONST = \"$.index[*][?(@.name=='ASSOC_CONST')].id\"\n+// @set method = \"$.index[*][?(@.name=='method')].id\"\n+\n+// @is \"$.index[*][?(@.name=='non_page')].links['`Struct::struct_field`']\" $struct_field\n+// @is \"$.index[*][?(@.name=='non_page')].links['`Enum::Variant`']\" $Variant\n+// @is \"$.index[*][?(@.name=='non_page')].links['`Trait::AssocType`']\" $AssocType\n+// @is \"$.index[*][?(@.name=='non_page')].links['`Trait::ASSOC_CONST`']\" $ASSOC_CONST\n+// @is \"$.index[*][?(@.name=='non_page')].links['`Trait::method`']\" $method\n+\n+pub struct Struct {\n+    pub struct_field: i32,\n+}\n+\n+pub enum Enum {\n+    Variant(),\n+}\n+\n+pub trait Trait {\n+    const ASSOC_CONST: i32;\n+    type AssocType;\n+    fn method();\n+}"}, {"sha": "6871dfea44aa33993412c02a5699743f75b4ac27", "filename": "src/test/rustdoc-json/intra-doc-links/user_written.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d/src%2Ftest%2Frustdoc-json%2Fintra-doc-links%2Fuser_written.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d/src%2Ftest%2Frustdoc-json%2Fintra-doc-links%2Fuser_written.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fintra-doc-links%2Fuser_written.rs?ref=db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d", "patch": "@@ -0,0 +1,8 @@\n+//! For motivation, see [the reasons](foo#reasons)\n+\n+/// # Reasons\n+/// To test rustdoc json\n+pub fn foo() {}\n+\n+// @set foo = \"$.index[*][?(@.name=='foo')].id\"\n+// @is \"$.index[*][?(@.name=='user_written')].links['foo#reasons']\" $foo"}, {"sha": "8024044bc05ab3993b836da2045dce5876401734", "filename": "src/test/rustdoc-json/primitives.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d/src%2Ftest%2Frustdoc-json%2Fprimitives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d/src%2Ftest%2Frustdoc-json%2Fprimitives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fprimitives.rs?ref=db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d", "patch": "@@ -1,22 +1,22 @@\n #![feature(never_type)]\n \n-// @has \"$.index[*][?(@.name=='PrimNever')].visibility\" \\\"public\\\"\n-// @has \"$.index[*][?(@.name=='PrimNever')].inner.type.kind\" \\\"primitive\\\"\n-// @has \"$.index[*][?(@.name=='PrimNever')].inner.type.inner\" \\\"never\\\"\n+// @is \"$.index[*][?(@.name=='PrimNever')].visibility\" \\\"public\\\"\n+// @is \"$.index[*][?(@.name=='PrimNever')].inner.type.kind\" \\\"primitive\\\"\n+// @is \"$.index[*][?(@.name=='PrimNever')].inner.type.inner\" \\\"never\\\"\n pub type PrimNever = !;\n \n-// @has \"$.index[*][?(@.name=='PrimStr')].inner.type.kind\" \\\"primitive\\\"\n-// @has \"$.index[*][?(@.name=='PrimStr')].inner.type.inner\" \\\"str\\\"\n+// @is \"$.index[*][?(@.name=='PrimStr')].inner.type.kind\" \\\"primitive\\\"\n+// @is \"$.index[*][?(@.name=='PrimStr')].inner.type.inner\" \\\"str\\\"\n pub type PrimStr = str;\n \n-// @has \"$.index[*][?(@.name=='PrimBool')].inner.type.kind\" \\\"primitive\\\"\n-// @has \"$.index[*][?(@.name=='PrimBool')].inner.type.inner\" \\\"bool\\\"\n+// @is \"$.index[*][?(@.name=='PrimBool')].inner.type.kind\" \\\"primitive\\\"\n+// @is \"$.index[*][?(@.name=='PrimBool')].inner.type.inner\" \\\"bool\\\"\n pub type PrimBool = bool;\n \n-// @has \"$.index[*][?(@.name=='PrimChar')].inner.type.kind\" \\\"primitive\\\"\n-// @has \"$.index[*][?(@.name=='PrimChar')].inner.type.inner\" \\\"char\\\"\n+// @is \"$.index[*][?(@.name=='PrimChar')].inner.type.kind\" \\\"primitive\\\"\n+// @is \"$.index[*][?(@.name=='PrimChar')].inner.type.inner\" \\\"char\\\"\n pub type PrimChar = char;\n \n-// @has \"$.index[*][?(@.name=='PrimU8')].inner.type.kind\" \\\"primitive\\\"\n-// @has \"$.index[*][?(@.name=='PrimU8')].inner.type.inner\" \\\"u8\\\"\n+// @is \"$.index[*][?(@.name=='PrimU8')].inner.type.kind\" \\\"primitive\\\"\n+// @is \"$.index[*][?(@.name=='PrimU8')].inner.type.inner\" \\\"u8\\\"\n pub type PrimU8 = u8;"}, {"sha": "a57cb97d4a6a2175dffb3c6afba764eee21ec27a", "filename": "src/test/rustdoc-json/traits/has_body.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d/src%2Ftest%2Frustdoc-json%2Ftraits%2Fhas_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d/src%2Ftest%2Frustdoc-json%2Ftraits%2Fhas_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ftraits%2Fhas_body.rs?ref=db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d", "patch": "@@ -1,21 +1,21 @@\n // @has \"$.index[*][?(@.name=='Foo')]\"\n pub trait Foo {\n-    // @has \"$.index[*][?(@.name=='no_self')].inner.has_body\" false\n+    // @is \"$.index[*][?(@.name=='no_self')].inner.has_body\" false\n     fn no_self();\n-    // @has \"$.index[*][?(@.name=='move_self')].inner.has_body\" false\n+    // @is \"$.index[*][?(@.name=='move_self')].inner.has_body\" false\n     fn move_self(self);\n-    // @has \"$.index[*][?(@.name=='ref_self')].inner.has_body\" false\n+    // @is \"$.index[*][?(@.name=='ref_self')].inner.has_body\" false\n     fn ref_self(&self);\n \n-    // @has \"$.index[*][?(@.name=='no_self_def')].inner.has_body\" true\n+    // @is \"$.index[*][?(@.name=='no_self_def')].inner.has_body\" true\n     fn no_self_def() {}\n-    // @has \"$.index[*][?(@.name=='move_self_def')].inner.has_body\" true\n+    // @is \"$.index[*][?(@.name=='move_self_def')].inner.has_body\" true\n     fn move_self_def(self) {}\n-    // @has \"$.index[*][?(@.name=='ref_self_def')].inner.has_body\" true\n+    // @is \"$.index[*][?(@.name=='ref_self_def')].inner.has_body\" true\n     fn ref_self_def(&self) {}\n }\n \n pub trait Bar: Clone {\n-    // @has \"$.index[*][?(@.name=='method')].inner.has_body\" false\n+    // @is \"$.index[*][?(@.name=='method')].inner.has_body\" false\n     fn method(&self, param: usize);\n }"}, {"sha": "eaf249252e33a1eab4745016a43f45db1b846abf", "filename": "src/test/rustdoc-json/type/dyn.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d/src%2Ftest%2Frustdoc-json%2Ftype%2Fdyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d/src%2Ftest%2Frustdoc-json%2Ftype%2Fdyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ftype%2Fdyn.rs?ref=db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d", "patch": "@@ -5,9 +5,7 @@ use std::fmt::Debug;\n // @set sync_int_gen = \"$.index[*][?(@.name=='SyncIntGen')].id\"\n // @set ref_fn       = \"$.index[*][?(@.name=='RefFn')].id\"\n // @set weird_order  = \"$.index[*][?(@.name=='WeirdOrder')].id\"\n-// @has \"$.index[*][?(@.name=='dyn')].inner.items[*]\" $sync_int_gen\n-// @has \"$.index[*][?(@.name=='dyn')].inner.items[*]\" $ref_fn\n-// @has \"$.index[*][?(@.name=='dyn')].inner.items[*]\" $weird_order\n+// @ismany \"$.index[*][?(@.name=='dyn')].inner.items[*]\" $sync_int_gen $ref_fn $weird_order\n \n // @is    \"$.index[*][?(@.name=='SyncIntGen')].kind\" \\\"typedef\\\"\n // @is    \"$.index[*][?(@.name=='SyncIntGen')].inner.generics\" '{\"params\": [], \"where_predicates\": []}'"}, {"sha": "4454a69ecd1bf35a3f4e5ea0cfc71172a1ede9d8", "filename": "src/test/rustdoc-json/unions/impl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d/src%2Ftest%2Frustdoc-json%2Funions%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d/src%2Ftest%2Frustdoc-json%2Funions%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Funions%2Fimpl.rs?ref=db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d", "patch": "@@ -1,14 +1,14 @@\n #![no_std]\n \n-// @has \"$.index[*][?(@.name=='Ux')].visibility\" \\\"public\\\"\n-// @has \"$.index[*][?(@.name=='Ux')].kind\" \\\"union\\\"\n+// @is \"$.index[*][?(@.name=='Ux')].visibility\" \\\"public\\\"\n+// @is \"$.index[*][?(@.name=='Ux')].kind\" \\\"union\\\"\n pub union Ux {\n     a: u32,\n     b: u64\n }\n \n-// @has \"$.index[*][?(@.name=='Num')].visibility\" \\\"public\\\"\n-// @has \"$.index[*][?(@.name=='Num')].kind\" \\\"trait\\\"\n+// @is \"$.index[*][?(@.name=='Num')].visibility\" \\\"public\\\"\n+// @is \"$.index[*][?(@.name=='Num')].kind\" \\\"trait\\\"\n pub trait Num {}\n \n // @count \"$.index[*][?(@.name=='Ux')].inner.impls\" 1"}, {"sha": "cc0593ec07dcd714c1add147290068fe96efbb26", "filename": "src/test/ui/sanitize/memory-eager.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d/src%2Ftest%2Fui%2Fsanitize%2Fmemory-eager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d/src%2Ftest%2Fui%2Fsanitize%2Fmemory-eager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Fmemory-eager.rs?ref=db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d", "patch": "@@ -10,7 +10,7 @@\n // run-fail\n // error-pattern: MemorySanitizer: use-of-uninitialized-value\n // error-pattern: Uninitialized value was created by an allocation\n-// error-pattern: in the stack frame of function 'random'\n+// error-pattern: in the stack frame\n //\n // This test case intentionally limits the usage of the std,\n // since it will be linked with an uninstrumented version of it."}]}