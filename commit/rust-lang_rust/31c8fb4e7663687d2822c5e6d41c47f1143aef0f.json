{"sha": "31c8fb4e7663687d2822c5e6d41c47f1143aef0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxYzhmYjRlNzY2MzY4N2QyODIyYzVlNmQ0MWM0N2YxMTQzYWVmMGY=", "commit": {"author": {"name": "Michael Killough", "email": "michaeljkillough@gmail.com", "date": "2017-05-18T05:56:49Z"}, "committer": {"name": "Michael Killough", "email": "michaeljkillough@gmail.com", "date": "2017-05-18T05:56:49Z"}, "message": "Add --dump-default-config and --dump-minimal-config.\n\n - `--dump-default-config` outputs the default configuration to the\n   specified file as TOML and then exits.\n - `--dump-minimal-config` is checked after formatting files as normal.\n   If present, any configuration options that were checked during\n   formatting are written to the specified file as TOML.\n - These options were added only to `rustfmt`, not to `cargo fmt`. They\n   can be specified when using `cargo fmt` by placing them after `--`.\n - It would have been nice if the filename was optional, so you could\n   run just `rusfmt --dump-minimal-config build.rs` to have it output to\n   `rustfmt.toml`. However, this doesn't do what you might expect: it\n   outputs the config to `build.rs`!", "tree": {"sha": "c0c542da62093a6f868859f8000e853b42cb7957", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0c542da62093a6f868859f8000e853b42cb7957"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31c8fb4e7663687d2822c5e6d41c47f1143aef0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31c8fb4e7663687d2822c5e6d41c47f1143aef0f", "html_url": "https://github.com/rust-lang/rust/commit/31c8fb4e7663687d2822c5e6d41c47f1143aef0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31c8fb4e7663687d2822c5e6d41c47f1143aef0f/comments", "author": {"login": "mjkillough", "id": 532855, "node_id": "MDQ6VXNlcjUzMjg1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/532855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjkillough", "html_url": "https://github.com/mjkillough", "followers_url": "https://api.github.com/users/mjkillough/followers", "following_url": "https://api.github.com/users/mjkillough/following{/other_user}", "gists_url": "https://api.github.com/users/mjkillough/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjkillough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjkillough/subscriptions", "organizations_url": "https://api.github.com/users/mjkillough/orgs", "repos_url": "https://api.github.com/users/mjkillough/repos", "events_url": "https://api.github.com/users/mjkillough/events{/privacy}", "received_events_url": "https://api.github.com/users/mjkillough/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mjkillough", "id": 532855, "node_id": "MDQ6VXNlcjUzMjg1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/532855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjkillough", "html_url": "https://github.com/mjkillough", "followers_url": "https://api.github.com/users/mjkillough/followers", "following_url": "https://api.github.com/users/mjkillough/following{/other_user}", "gists_url": "https://api.github.com/users/mjkillough/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjkillough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjkillough/subscriptions", "organizations_url": "https://api.github.com/users/mjkillough/orgs", "repos_url": "https://api.github.com/users/mjkillough/repos", "events_url": "https://api.github.com/users/mjkillough/events{/privacy}", "received_events_url": "https://api.github.com/users/mjkillough/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f34ff82297a4f1d5f4052fff5ff44bd28504a3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f34ff82297a4f1d5f4052fff5ff44bd28504a3e", "html_url": "https://github.com/rust-lang/rust/commit/3f34ff82297a4f1d5f4052fff5ff44bd28504a3e"}], "stats": {"total": 40, "additions": 39, "deletions": 1}, "files": [{"sha": "73c4439ba2965aa2e713b28e0600a20ca04b90ce", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/31c8fb4e7663687d2822c5e6d41c47f1143aef0f/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31c8fb4e7663687d2822c5e6d41c47f1143aef0f/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=31c8fb4e7663687d2822c5e6d41c47f1143aef0f", "patch": "@@ -44,13 +44,16 @@ enum Operation {\n     Format {\n         files: Vec<PathBuf>,\n         config_path: Option<PathBuf>,\n+        minimal_config_path: Option<String>,\n     },\n     /// Print the help message.\n     Help,\n     // Print version information\n     Version,\n     /// Print detailed configuration help.\n     ConfigHelp,\n+    /// Output default config to a file\n+    ConfigOutputDefault { path: String },\n     /// No file specified, read from stdin\n     Stdin {\n         input: String,\n@@ -186,6 +189,14 @@ fn make_opts() -> Options {\n     opts.optflag(\"\",\n                  \"config-help\",\n                  \"show details of rustfmt configuration options\");\n+    opts.optopt(\"\",\n+                \"dump-default-config\",\n+                \"Dumps the default configuration to a file and exits.\",\n+                \"PATH\");\n+    opts.optopt(\"\",\n+                \"dump-minimal-config\",\n+                \"Dumps configuration options that were checked during formatting to a file.\",\n+                \"PATH\");\n     opts.optopt(\"\",\n                 \"config-path\",\n                 \"Recursively searches the given path for the rustfmt.toml config file. If not \\\n@@ -216,6 +227,12 @@ fn execute(opts: &Options) -> FmtResult<Summary> {\n             Config::print_docs();\n             Ok(Summary::new())\n         }\n+        Operation::ConfigOutputDefault { path } => {\n+            let mut file = File::create(path)?;\n+            let toml = Config::default().all_options().to_toml()?;\n+            file.write_all(toml.as_bytes())?;\n+            Ok(Summary::new())\n+        }\n         Operation::Stdin { input, config_path } => {\n             // try to read config from local directory\n             let (mut config, _) = match_cli_path_or_file(config_path,\n@@ -236,7 +253,11 @@ fn execute(opts: &Options) -> FmtResult<Summary> {\n \n             Ok(run(Input::Text(input), &config))\n         }\n-        Operation::Format { files, config_path } => {\n+        Operation::Format {\n+            files,\n+            config_path,\n+            minimal_config_path,\n+        } => {\n             let options = CliOptions::from_matches(&matches)?;\n \n             for f in options.file_lines.files() {\n@@ -286,6 +307,15 @@ fn execute(opts: &Options) -> FmtResult<Summary> {\n                     error_summary.add(run(Input::File(file), &config));\n                 }\n             }\n+\n+            // If we were given a path via dump-minimal-config, output any options\n+            // that were used during formatting as TOML.\n+            if let Some(path) = minimal_config_path {\n+                let mut file = File::create(path)?;\n+                let toml = config.used_options().to_toml()?;\n+                file.write_all(toml.as_bytes())?;\n+            }\n+\n             Ok(error_summary)\n         }\n     }\n@@ -353,6 +383,10 @@ fn determine_operation(matches: &Matches) -> FmtResult<Operation> {\n         return Ok(Operation::ConfigHelp);\n     }\n \n+    if let Some(path) = matches.opt_str(\"dump-default-config\") {\n+        return Ok(Operation::ConfigOutputDefault { path });\n+    }\n+\n     if matches.opt_present(\"version\") {\n         return Ok(Operation::Version);\n     }\n@@ -383,6 +417,9 @@ fn determine_operation(matches: &Matches) -> FmtResult<Operation> {\n         path @ _ => path,\n     };\n \n+    // If no path is given, we won't output a minimal config.\n+    let minimal_config_path = matches.opt_str(\"dump-minimal-config\");\n+\n     // if no file argument is supplied, read from stdin\n     if matches.free.is_empty() {\n         let mut buffer = String::new();\n@@ -408,5 +445,6 @@ fn determine_operation(matches: &Matches) -> FmtResult<Operation> {\n     Ok(Operation::Format {\n            files: files,\n            config_path: config_path,\n+           minimal_config_path: minimal_config_path,\n        })\n }"}]}