{"sha": "fb0d7f1714025efdd68e5e7464ac5a23eaf5dc97", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiMGQ3ZjE3MTQwMjVlZmRkNjhlNWU3NDY0YWM1YTIzZWFmNWRjOTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-20T07:24:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-20T07:24:34Z"}, "message": "Auto merge of #6578 - MarijnS95:size-in-element-count-divide-by-byte-size, r=flip1995\n\nsize_of_in_element_count: Disable lint on division by byte-size\n\nFixes #6511\n\nIt is fairly common to divide some length in bytes by the byte-size of a single element before creating a `from_raw_parts` slice or similar operation. This lint would erroneously disallow such expressions.\n\nJust in case, instead of simply disabling this lint in the RHS of a division, keep track of the inversion and enable it again on recursive division.\n\n---\n\nchangelog: Do not trigger size_of_in_element_count when dividing by element size", "tree": {"sha": "2fad486ca92efe97679f76e2022f2584929325e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fad486ca92efe97679f76e2022f2584929325e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb0d7f1714025efdd68e5e7464ac5a23eaf5dc97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb0d7f1714025efdd68e5e7464ac5a23eaf5dc97", "html_url": "https://github.com/rust-lang/rust/commit/fb0d7f1714025efdd68e5e7464ac5a23eaf5dc97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb0d7f1714025efdd68e5e7464ac5a23eaf5dc97/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d71dea40cf2a509093bf882b87878406523c4073", "url": "https://api.github.com/repos/rust-lang/rust/commits/d71dea40cf2a509093bf882b87878406523c4073", "html_url": "https://github.com/rust-lang/rust/commit/d71dea40cf2a509093bf882b87878406523c4073"}, {"sha": "d4bf59b6ef24042653951b69105a3a68542f3bbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4bf59b6ef24042653951b69105a3a68542f3bbd", "html_url": "https://github.com/rust-lang/rust/commit/d4bf59b6ef24042653951b69105a3a68542f3bbd"}], "stats": {"total": 169, "additions": 103, "deletions": 66}, "files": [{"sha": "87e386baadc54ec34190b868d9e2ec0a921d444b", "filename": "clippy_lints/src/size_of_in_element_count.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fb0d7f1714025efdd68e5e7464ac5a23eaf5dc97/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb0d7f1714025efdd68e5e7464ac5a23eaf5dc97/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs?ref=fb0d7f1714025efdd68e5e7464ac5a23eaf5dc97", "patch": "@@ -35,10 +35,11 @@ declare_clippy_lint! {\n \n declare_lint_pass!(SizeOfInElementCount => [SIZE_OF_IN_ELEMENT_COUNT]);\n \n-fn get_size_of_ty(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> Option<Ty<'tcx>> {\n+fn get_size_of_ty(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, inverted: bool) -> Option<Ty<'tcx>> {\n     match expr.kind {\n         ExprKind::Call(count_func, _func_args) => {\n             if_chain! {\n+                if !inverted;\n                 if let ExprKind::Path(ref count_func_qpath) = count_func.kind;\n                 if let Some(def_id) = cx.qpath_res(count_func_qpath, count_func.hir_id).opt_def_id();\n                 if match_def_path(cx, def_id, &paths::MEM_SIZE_OF)\n@@ -50,10 +51,13 @@ fn get_size_of_ty(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> Option<Ty<'tc\n                 }\n             }\n         },\n-        ExprKind::Binary(op, left, right) if BinOpKind::Mul == op.node || BinOpKind::Div == op.node => {\n-            get_size_of_ty(cx, left).or_else(|| get_size_of_ty(cx, right))\n+        ExprKind::Binary(op, left, right) if BinOpKind::Mul == op.node => {\n+            get_size_of_ty(cx, left, inverted).or_else(|| get_size_of_ty(cx, right, inverted))\n         },\n-        ExprKind::Cast(expr, _) => get_size_of_ty(cx, expr),\n+        ExprKind::Binary(op, left, right) if BinOpKind::Div == op.node => {\n+            get_size_of_ty(cx, left, inverted).or_else(|| get_size_of_ty(cx, right, !inverted))\n+        },\n+        ExprKind::Cast(expr, _) => get_size_of_ty(cx, expr, inverted),\n         _ => None,\n     }\n }\n@@ -128,7 +132,7 @@ impl<'tcx> LateLintPass<'tcx> for SizeOfInElementCount {\n \n             // Find a size_of call in the count parameter expression and\n             // check that it's the same type\n-            if let Some(ty_used_for_size_of) = get_size_of_ty(cx, count_expr);\n+            if let Some(ty_used_for_size_of) = get_size_of_ty(cx, count_expr, false);\n             if TyS::same_type(pointee_ty, ty_used_for_size_of);\n             then {\n                 span_lint_and_help("}, {"sha": "2594e8fa6ad3e79da5455c23658eb8b1304f765b", "filename": "tests/ui/size_of_in_element_count/expressions.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/fb0d7f1714025efdd68e5e7464ac5a23eaf5dc97/tests%2Fui%2Fsize_of_in_element_count%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb0d7f1714025efdd68e5e7464ac5a23eaf5dc97/tests%2Fui%2Fsize_of_in_element_count%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsize_of_in_element_count%2Fexpressions.rs?ref=fb0d7f1714025efdd68e5e7464ac5a23eaf5dc97", "patch": "@@ -0,0 +1,37 @@\n+#![warn(clippy::size_of_in_element_count)]\n+#![allow(clippy::ptr_offset_with_cast)]\n+\n+use std::mem::{size_of, size_of_val};\n+use std::ptr::{copy, copy_nonoverlapping, write_bytes};\n+\n+fn main() {\n+    const SIZE: usize = 128;\n+    const HALF_SIZE: usize = SIZE / 2;\n+    const DOUBLE_SIZE: usize = SIZE * 2;\n+    let mut x = [2u8; SIZE];\n+    let mut y = [2u8; SIZE];\n+\n+    // Count expression involving multiplication of size_of (Should trigger the lint)\n+    unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>() * SIZE) };\n+\n+    // Count expression involving nested multiplications of size_of (Should trigger the lint)\n+    unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), HALF_SIZE * size_of_val(&x[0]) * 2) };\n+\n+    // Count expression involving divisions of size_of (Should trigger the lint)\n+    unsafe { copy(x.as_ptr(), y.as_mut_ptr(), DOUBLE_SIZE * size_of::<u8>() / 2) };\n+\n+    // Count expression involving divisions by size_of (Should not trigger the lint)\n+    unsafe { copy(x.as_ptr(), y.as_mut_ptr(), DOUBLE_SIZE / size_of::<u8>()) };\n+\n+    // Count expression involving divisions by multiple size_of (Should not trigger the lint)\n+    unsafe { copy(x.as_ptr(), y.as_mut_ptr(), DOUBLE_SIZE / (2 * size_of::<u8>())) };\n+\n+    // Count expression involving recursive divisions by size_of (Should trigger the lint)\n+    unsafe { copy(x.as_ptr(), y.as_mut_ptr(), DOUBLE_SIZE / (2 / size_of::<u8>())) };\n+\n+    // No size_of calls (Should not trigger the lint)\n+    unsafe { copy(x.as_ptr(), y.as_mut_ptr(), SIZE) };\n+\n+    // Different types for pointee and size_of (Should not trigger the lint)\n+    unsafe { y.as_mut_ptr().write_bytes(0u8, size_of::<u16>() / 2 * SIZE) };\n+}"}, {"sha": "0f0dff57f51bd4730a7f39e2553635b80418f88c", "filename": "tests/ui/size_of_in_element_count/expressions.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/fb0d7f1714025efdd68e5e7464ac5a23eaf5dc97/tests%2Fui%2Fsize_of_in_element_count%2Fexpressions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb0d7f1714025efdd68e5e7464ac5a23eaf5dc97/tests%2Fui%2Fsize_of_in_element_count%2Fexpressions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsize_of_in_element_count%2Fexpressions.stderr?ref=fb0d7f1714025efdd68e5e7464ac5a23eaf5dc97", "patch": "@@ -0,0 +1,35 @@\n+error: found a count of bytes instead of a count of elements of `T`\n+  --> $DIR/expressions.rs:15:62\n+   |\n+LL |     unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>() * SIZE) };\n+   |                                                              ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::size-of-in-element-count` implied by `-D warnings`\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of `T`\n+  --> $DIR/expressions.rs:18:62\n+   |\n+LL |     unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), HALF_SIZE * size_of_val(&x[0]) * 2) };\n+   |                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of `T`\n+  --> $DIR/expressions.rs:21:47\n+   |\n+LL |     unsafe { copy(x.as_ptr(), y.as_mut_ptr(), DOUBLE_SIZE * size_of::<u8>() / 2) };\n+   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of `T`\n+  --> $DIR/expressions.rs:30:47\n+   |\n+LL |     unsafe { copy(x.as_ptr(), y.as_mut_ptr(), DOUBLE_SIZE / (2 / size_of::<u8>())) };\n+   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "09d08ac37dce548873cdd5d383c75ae686a57ac7", "filename": "tests/ui/size_of_in_element_count/functions.rs", "status": "renamed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fb0d7f1714025efdd68e5e7464ac5a23eaf5dc97/tests%2Fui%2Fsize_of_in_element_count%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb0d7f1714025efdd68e5e7464ac5a23eaf5dc97/tests%2Fui%2Fsize_of_in_element_count%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsize_of_in_element_count%2Ffunctions.rs?ref=fb0d7f1714025efdd68e5e7464ac5a23eaf5dc97", "patch": "@@ -43,19 +43,4 @@ fn main() {\n     y.as_mut_ptr().wrapping_add(size_of::<u8>());\n     unsafe { y.as_ptr().offset(size_of::<u8>() as isize) };\n     y.as_mut_ptr().wrapping_offset(size_of::<u8>() as isize);\n-\n-    // Count expression involving multiplication of size_of (Should trigger the lint)\n-    unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>() * SIZE) };\n-\n-    // Count expression involving nested multiplications of size_of (Should trigger the lint)\n-    unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), HALF_SIZE * size_of_val(&x[0]) * 2) };\n-\n-    // Count expression involving divisions of size_of (Should trigger the lint)\n-    unsafe { copy(x.as_ptr(), y.as_mut_ptr(), DOUBLE_SIZE * size_of::<u8>() / 2) };\n-\n-    // No size_of calls (Should not trigger the lint)\n-    unsafe { copy(x.as_ptr(), y.as_mut_ptr(), SIZE) };\n-\n-    // Different types for pointee and size_of (Should not trigger the lint)\n-    unsafe { y.as_mut_ptr().write_bytes(0u8, size_of::<u16>() / 2 * SIZE) };\n }", "previous_filename": "tests/ui/size_of_in_element_count.rs"}, {"sha": "c1e824167b7f35d5156bab036453a413e1bcb242", "filename": "tests/ui/size_of_in_element_count/functions.stderr", "status": "renamed", "additions": 22, "deletions": 46, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/fb0d7f1714025efdd68e5e7464ac5a23eaf5dc97/tests%2Fui%2Fsize_of_in_element_count%2Ffunctions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb0d7f1714025efdd68e5e7464ac5a23eaf5dc97/tests%2Fui%2Fsize_of_in_element_count%2Ffunctions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsize_of_in_element_count%2Ffunctions.stderr?ref=fb0d7f1714025efdd68e5e7464ac5a23eaf5dc97", "patch": "@@ -1,5 +1,5 @@\n error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:18:68\n+  --> $DIR/functions.rs:18:68\n    |\n LL |     unsafe { copy_nonoverlapping::<u8>(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>()) };\n    |                                                                    ^^^^^^^^^^^^^^^\n@@ -8,188 +8,164 @@ LL |     unsafe { copy_nonoverlapping::<u8>(x.as_ptr(), y.as_mut_ptr(), size_of:\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:19:62\n+  --> $DIR/functions.rs:19:62\n    |\n LL |     unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of_val(&x[0])) };\n    |                                                              ^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:21:49\n+  --> $DIR/functions.rs:21:49\n    |\n LL |     unsafe { x.as_ptr().copy_to(y.as_mut_ptr(), size_of::<u8>()) };\n    |                                                 ^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:22:64\n+  --> $DIR/functions.rs:22:64\n    |\n LL |     unsafe { x.as_ptr().copy_to_nonoverlapping(y.as_mut_ptr(), size_of::<u8>()) };\n    |                                                                ^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:23:51\n+  --> $DIR/functions.rs:23:51\n    |\n LL |     unsafe { y.as_mut_ptr().copy_from(x.as_ptr(), size_of::<u8>()) };\n    |                                                   ^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:24:66\n+  --> $DIR/functions.rs:24:66\n    |\n LL |     unsafe { y.as_mut_ptr().copy_from_nonoverlapping(x.as_ptr(), size_of::<u8>()) };\n    |                                                                  ^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:26:47\n+  --> $DIR/functions.rs:26:47\n    |\n LL |     unsafe { copy(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>()) };\n    |                                               ^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:27:47\n+  --> $DIR/functions.rs:27:47\n    |\n LL |     unsafe { copy(x.as_ptr(), y.as_mut_ptr(), size_of_val(&x[0])) };\n    |                                               ^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:29:46\n+  --> $DIR/functions.rs:29:46\n    |\n LL |     unsafe { y.as_mut_ptr().write_bytes(0u8, size_of::<u8>() * SIZE) };\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:30:47\n+  --> $DIR/functions.rs:30:47\n    |\n LL |     unsafe { write_bytes(y.as_mut_ptr(), 0u8, size_of::<u8>() * SIZE) };\n    |                                               ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:32:66\n+  --> $DIR/functions.rs:32:66\n    |\n LL |     unsafe { swap_nonoverlapping(y.as_mut_ptr(), x.as_mut_ptr(), size_of::<u8>() * SIZE) };\n    |                                                                  ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:34:46\n+  --> $DIR/functions.rs:34:46\n    |\n LL |     slice_from_raw_parts_mut(y.as_mut_ptr(), size_of::<u8>() * SIZE);\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:35:38\n+  --> $DIR/functions.rs:35:38\n    |\n LL |     slice_from_raw_parts(y.as_ptr(), size_of::<u8>() * SIZE);\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:37:49\n+  --> $DIR/functions.rs:37:49\n    |\n LL |     unsafe { from_raw_parts_mut(y.as_mut_ptr(), size_of::<u8>() * SIZE) };\n    |                                                 ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:38:41\n+  --> $DIR/functions.rs:38:41\n    |\n LL |     unsafe { from_raw_parts(y.as_ptr(), size_of::<u8>() * SIZE) };\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:40:33\n+  --> $DIR/functions.rs:40:33\n    |\n LL |     unsafe { y.as_mut_ptr().sub(size_of::<u8>()) };\n    |                                 ^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:41:29\n+  --> $DIR/functions.rs:41:29\n    |\n LL |     y.as_ptr().wrapping_sub(size_of::<u8>());\n    |                             ^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:42:29\n+  --> $DIR/functions.rs:42:29\n    |\n LL |     unsafe { y.as_ptr().add(size_of::<u8>()) };\n    |                             ^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:43:33\n+  --> $DIR/functions.rs:43:33\n    |\n LL |     y.as_mut_ptr().wrapping_add(size_of::<u8>());\n    |                                 ^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:44:32\n+  --> $DIR/functions.rs:44:32\n    |\n LL |     unsafe { y.as_ptr().offset(size_of::<u8>() as isize) };\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:45:36\n+  --> $DIR/functions.rs:45:36\n    |\n LL |     y.as_mut_ptr().wrapping_offset(size_of::<u8>() as isize);\n    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n-error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:48:62\n-   |\n-LL |     unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>() * SIZE) };\n-   |                                                              ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n-\n-error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:51:62\n-   |\n-LL |     unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), HALF_SIZE * size_of_val(&x[0]) * 2) };\n-   |                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n-\n-error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:54:47\n-   |\n-LL |     unsafe { copy(x.as_ptr(), y.as_mut_ptr(), DOUBLE_SIZE * size_of::<u8>() / 2) };\n-   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n-\n-error: aborting due to 24 previous errors\n+error: aborting due to 21 previous errors\n ", "previous_filename": "tests/ui/size_of_in_element_count.stderr"}]}