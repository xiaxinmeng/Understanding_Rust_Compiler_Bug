{"sha": "6415d06616a5203c76d9885b11b42fa95a639b41", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0MTVkMDY2MTZhNTIwM2M3NmQ5ODg1YjExYjQyZmE5NWE2MzliNDE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-05-13T05:24:20Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-05-15T01:29:13Z"}, "message": "libtime: Remove all uses of `~str` from `libtime`", "tree": {"sha": "8432e63cfd853be897fe5ecc88a9afeacf57d849", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8432e63cfd853be897fe5ecc88a9afeacf57d849"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6415d06616a5203c76d9885b11b42fa95a639b41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6415d06616a5203c76d9885b11b42fa95a639b41", "html_url": "https://github.com/rust-lang/rust/commit/6415d06616a5203c76d9885b11b42fa95a639b41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6415d06616a5203c76d9885b11b42fa95a639b41/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a93b4f192bfc8cba24b9c51e8a70a9b51e96b05", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a93b4f192bfc8cba24b9c51e8a70a9b51e96b05", "html_url": "https://github.com/rust-lang/rust/commit/5a93b4f192bfc8cba24b9c51e8a70a9b51e96b05"}], "stats": {"total": 528, "additions": 267, "deletions": 261}, "files": [{"sha": "1ffe4d3cbadc456d0c87fd34f5262c359df84cc7", "filename": "src/libtime/lib.rs", "status": "modified", "additions": 267, "deletions": 261, "changes": 528, "blob_url": "https://github.com/rust-lang/rust/blob/6415d06616a5203c76d9885b11b42fa95a639b41/src%2Flibtime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6415d06616a5203c76d9885b11b42fa95a639b41/src%2Flibtime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtime%2Flib.rs?ref=6415d06616a5203c76d9885b11b42fa95a639b41", "patch": "@@ -315,10 +315,10 @@ impl Tm {\n      * Return a string of the current time in the form\n      * \"Thu Jan  1 00:00:00 1970\".\n      */\n-    pub fn ctime(&self) -> ~str { self.strftime(\"%c\") }\n+    pub fn ctime(&self) -> StrBuf { self.strftime(\"%c\") }\n \n     /// Formats the time according to the format string.\n-    pub fn strftime(&self, format: &str) -> ~str {\n+    pub fn strftime(&self, format: &str) -> StrBuf {\n         strftime(format, self)\n     }\n \n@@ -328,7 +328,7 @@ impl Tm {\n      * local: \"Thu, 22 Mar 2012 07:53:18 PST\"\n      * utc:   \"Thu, 22 Mar 2012 14:53:18 UTC\"\n      */\n-    pub fn rfc822(&self) -> ~str {\n+    pub fn rfc822(&self) -> StrBuf {\n         if self.tm_gmtoff == 0_i32 {\n             self.strftime(\"%a, %d %b %Y %T GMT\")\n         } else {\n@@ -342,7 +342,7 @@ impl Tm {\n      * local: \"Thu, 22 Mar 2012 07:53:18 -0700\"\n      * utc:   \"Thu, 22 Mar 2012 14:53:18 -0000\"\n      */\n-    pub fn rfc822z(&self) -> ~str {\n+    pub fn rfc822z(&self) -> StrBuf {\n         self.strftime(\"%a, %d %b %Y %T %z\")\n     }\n \n@@ -352,7 +352,7 @@ impl Tm {\n      * local: \"2012-02-22T07:53:18-07:00\"\n      * utc:   \"2012-02-22T14:53:18Z\"\n      */\n-    pub fn rfc3339(&self) -> ~str {\n+    pub fn rfc3339(&self) -> StrBuf {\n         if self.tm_gmtoff == 0_i32 {\n             self.strftime(\"%Y-%m-%dT%H:%M:%SZ\")\n         } else {\n@@ -361,13 +361,13 @@ impl Tm {\n             let mut m = num::abs(self.tm_gmtoff) / 60_i32;\n             let h = m / 60_i32;\n             m -= h * 60_i32;\n-            s + format!(\"{}{:02d}:{:02d}\", sign, h as int, m as int)\n+            format_strbuf!(\"{}{}{:02d}:{:02d}\", s, sign, h as int, m as int)\n         }\n     }\n }\n \n /// Parses the time from the string according to the format string.\n-pub fn strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n+pub fn strptime(s: &str, format: &str) -> Result<Tm, StrBuf> {\n     fn match_str(s: &str, pos: uint, needle: &str) -> bool {\n         let mut i = pos;\n         for ch in needle.bytes() {\n@@ -379,14 +379,14 @@ pub fn strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n         return true;\n     }\n \n-    fn match_strs(ss: &str, pos: uint, strs: &[(~str, i32)])\n+    fn match_strs(ss: &str, pos: uint, strs: &[(StrBuf, i32)])\n       -> Option<(i32, uint)> {\n         let mut i = 0u;\n         let len = strs.len();\n         while i < len {\n             match strs[i] { // can't use let due to let-pattern bugs\n                 (ref needle, value) => {\n-                    if match_str(ss, pos, *needle) {\n+                    if match_str(ss, pos, needle.as_slice()) {\n                         return Some((value, pos + needle.len()));\n                     }\n                 }\n@@ -461,78 +461,78 @@ pub fn strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n         }\n     }\n \n-    fn parse_char(s: &str, pos: uint, c: char) -> Result<uint, ~str> {\n+    fn parse_char(s: &str, pos: uint, c: char) -> Result<uint, StrBuf> {\n         let range = s.char_range_at(pos);\n \n         if c == range.ch {\n             Ok(range.next)\n         } else {\n-            Err(format!(\"Expected {}, found {}\",\n+            Err(format_strbuf!(\"Expected {}, found {}\",\n                 str::from_char(c),\n                 str::from_char(range.ch)))\n         }\n     }\n \n     fn parse_type(s: &str, pos: uint, ch: char, tm: &mut Tm)\n-      -> Result<uint, ~str> {\n+      -> Result<uint, StrBuf> {\n         match ch {\n           'A' => match match_strs(s, pos, [\n-              (\"Sunday\".to_owned(), 0_i32),\n-              (\"Monday\".to_owned(), 1_i32),\n-              (\"Tuesday\".to_owned(), 2_i32),\n-              (\"Wednesday\".to_owned(), 3_i32),\n-              (\"Thursday\".to_owned(), 4_i32),\n-              (\"Friday\".to_owned(), 5_i32),\n-              (\"Saturday\".to_owned(), 6_i32)\n+              (\"Sunday\".to_strbuf(), 0_i32),\n+              (\"Monday\".to_strbuf(), 1_i32),\n+              (\"Tuesday\".to_strbuf(), 2_i32),\n+              (\"Wednesday\".to_strbuf(), 3_i32),\n+              (\"Thursday\".to_strbuf(), 4_i32),\n+              (\"Friday\".to_strbuf(), 5_i32),\n+              (\"Saturday\".to_strbuf(), 6_i32)\n           ]) {\n             Some(item) => { let (v, pos) = item; tm.tm_wday = v; Ok(pos) }\n-            None => Err(\"Invalid day\".to_owned())\n+            None => Err(\"Invalid day\".to_strbuf())\n           },\n           'a' => match match_strs(s, pos, [\n-              (\"Sun\".to_owned(), 0_i32),\n-              (\"Mon\".to_owned(), 1_i32),\n-              (\"Tue\".to_owned(), 2_i32),\n-              (\"Wed\".to_owned(), 3_i32),\n-              (\"Thu\".to_owned(), 4_i32),\n-              (\"Fri\".to_owned(), 5_i32),\n-              (\"Sat\".to_owned(), 6_i32)\n+              (\"Sun\".to_strbuf(), 0_i32),\n+              (\"Mon\".to_strbuf(), 1_i32),\n+              (\"Tue\".to_strbuf(), 2_i32),\n+              (\"Wed\".to_strbuf(), 3_i32),\n+              (\"Thu\".to_strbuf(), 4_i32),\n+              (\"Fri\".to_strbuf(), 5_i32),\n+              (\"Sat\".to_strbuf(), 6_i32)\n           ]) {\n             Some(item) => { let (v, pos) = item; tm.tm_wday = v; Ok(pos) }\n-            None => Err(\"Invalid day\".to_owned())\n+            None => Err(\"Invalid day\".to_strbuf())\n           },\n           'B' => match match_strs(s, pos, [\n-              (\"January\".to_owned(), 0_i32),\n-              (\"February\".to_owned(), 1_i32),\n-              (\"March\".to_owned(), 2_i32),\n-              (\"April\".to_owned(), 3_i32),\n-              (\"May\".to_owned(), 4_i32),\n-              (\"June\".to_owned(), 5_i32),\n-              (\"July\".to_owned(), 6_i32),\n-              (\"August\".to_owned(), 7_i32),\n-              (\"September\".to_owned(), 8_i32),\n-              (\"October\".to_owned(), 9_i32),\n-              (\"November\".to_owned(), 10_i32),\n-              (\"December\".to_owned(), 11_i32)\n+              (\"January\".to_strbuf(), 0_i32),\n+              (\"February\".to_strbuf(), 1_i32),\n+              (\"March\".to_strbuf(), 2_i32),\n+              (\"April\".to_strbuf(), 3_i32),\n+              (\"May\".to_strbuf(), 4_i32),\n+              (\"June\".to_strbuf(), 5_i32),\n+              (\"July\".to_strbuf(), 6_i32),\n+              (\"August\".to_strbuf(), 7_i32),\n+              (\"September\".to_strbuf(), 8_i32),\n+              (\"October\".to_strbuf(), 9_i32),\n+              (\"November\".to_strbuf(), 10_i32),\n+              (\"December\".to_strbuf(), 11_i32)\n           ]) {\n             Some(item) => { let (v, pos) = item; tm.tm_mon = v; Ok(pos) }\n-            None => Err(\"Invalid month\".to_owned())\n+            None => Err(\"Invalid month\".to_strbuf())\n           },\n           'b' | 'h' => match match_strs(s, pos, [\n-              (\"Jan\".to_owned(), 0_i32),\n-              (\"Feb\".to_owned(), 1_i32),\n-              (\"Mar\".to_owned(), 2_i32),\n-              (\"Apr\".to_owned(), 3_i32),\n-              (\"May\".to_owned(), 4_i32),\n-              (\"Jun\".to_owned(), 5_i32),\n-              (\"Jul\".to_owned(), 6_i32),\n-              (\"Aug\".to_owned(), 7_i32),\n-              (\"Sep\".to_owned(), 8_i32),\n-              (\"Oct\".to_owned(), 9_i32),\n-              (\"Nov\".to_owned(), 10_i32),\n-              (\"Dec\".to_owned(), 11_i32)\n+              (\"Jan\".to_strbuf(), 0_i32),\n+              (\"Feb\".to_strbuf(), 1_i32),\n+              (\"Mar\".to_strbuf(), 2_i32),\n+              (\"Apr\".to_strbuf(), 3_i32),\n+              (\"May\".to_strbuf(), 4_i32),\n+              (\"Jun\".to_strbuf(), 5_i32),\n+              (\"Jul\".to_strbuf(), 6_i32),\n+              (\"Aug\".to_strbuf(), 7_i32),\n+              (\"Sep\".to_strbuf(), 8_i32),\n+              (\"Oct\".to_strbuf(), 9_i32),\n+              (\"Nov\".to_strbuf(), 10_i32),\n+              (\"Dec\".to_strbuf(), 11_i32)\n           ]) {\n             Some(item) => { let (v, pos) = item; tm.tm_mon = v; Ok(pos) }\n-            None => Err(\"Invalid month\".to_owned())\n+            None => Err(\"Invalid month\".to_strbuf())\n           },\n           'C' => match match_digits_in_range(s, pos, 2u, false, 0_i32,\n                                              99_i32) {\n@@ -541,7 +541,7 @@ pub fn strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n                   tm.tm_year += (v * 100_i32) - 1900_i32;\n                   Ok(pos)\n               }\n-            None => Err(\"Invalid year\".to_owned())\n+            None => Err(\"Invalid year\".to_strbuf())\n           },\n           'c' => {\n             parse_type(s, pos, 'a', &mut *tm)\n@@ -564,12 +564,12 @@ pub fn strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n           'd' => match match_digits_in_range(s, pos, 2u, false, 1_i32,\n                                              31_i32) {\n             Some(item) => { let (v, pos) = item; tm.tm_mday = v; Ok(pos) }\n-            None => Err(\"Invalid day of the month\".to_owned())\n+            None => Err(\"Invalid day of the month\".to_strbuf())\n           },\n           'e' => match match_digits_in_range(s, pos, 2u, true, 1_i32,\n                                              31_i32) {\n             Some(item) => { let (v, pos) = item; tm.tm_mday = v; Ok(pos) }\n-            None => Err(\"Invalid day of the month\".to_owned())\n+            None => Err(\"Invalid day of the month\".to_strbuf())\n           },\n           'f' => {\n             let (val, pos) = match_fractional_seconds(s, pos);\n@@ -586,7 +586,7 @@ pub fn strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n           'H' => {\n             match match_digits_in_range(s, pos, 2u, false, 0_i32, 23_i32) {\n               Some(item) => { let (v, pos) = item; tm.tm_hour = v; Ok(pos) }\n-              None => Err(\"Invalid hour\".to_owned())\n+              None => Err(\"Invalid hour\".to_strbuf())\n             }\n           }\n           'I' => {\n@@ -596,7 +596,7 @@ pub fn strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n                   tm.tm_hour = if v == 12_i32 { 0_i32 } else { v };\n                   Ok(pos)\n               }\n-              None => Err(\"Invalid hour\".to_owned())\n+              None => Err(\"Invalid hour\".to_strbuf())\n             }\n           }\n           'j' => {\n@@ -606,13 +606,13 @@ pub fn strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n                 tm.tm_yday = v - 1_i32;\n                 Ok(pos)\n               }\n-              None => Err(\"Invalid day of year\".to_owned())\n+              None => Err(\"Invalid day of year\".to_strbuf())\n             }\n           }\n           'k' => {\n             match match_digits_in_range(s, pos, 2u, true, 0_i32, 23_i32) {\n               Some(item) => { let (v, pos) = item; tm.tm_hour = v; Ok(pos) }\n-              None => Err(\"Invalid hour\".to_owned())\n+              None => Err(\"Invalid hour\".to_strbuf())\n             }\n           }\n           'l' => {\n@@ -622,13 +622,13 @@ pub fn strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n                   tm.tm_hour = if v == 12_i32 { 0_i32 } else { v };\n                   Ok(pos)\n               }\n-              None => Err(\"Invalid hour\".to_owned())\n+              None => Err(\"Invalid hour\".to_strbuf())\n             }\n           }\n           'M' => {\n             match match_digits_in_range(s, pos, 2u, false, 0_i32, 59_i32) {\n               Some(item) => { let (v, pos) = item; tm.tm_min = v; Ok(pos) }\n-              None => Err(\"Invalid minute\".to_owned())\n+              None => Err(\"Invalid minute\".to_strbuf())\n             }\n           }\n           'm' => {\n@@ -638,21 +638,21 @@ pub fn strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n                 tm.tm_mon = v - 1_i32;\n                 Ok(pos)\n               }\n-              None => Err(\"Invalid month\".to_owned())\n+              None => Err(\"Invalid month\".to_strbuf())\n             }\n           }\n           'n' => parse_char(s, pos, '\\n'),\n           'P' => match match_strs(s, pos,\n-                                  [(\"am\".to_owned(), 0_i32), (\"pm\".to_owned(), 12_i32)]) {\n+                                  [(\"am\".to_strbuf(), 0_i32), (\"pm\".to_strbuf(), 12_i32)]) {\n \n             Some(item) => { let (v, pos) = item; tm.tm_hour += v; Ok(pos) }\n-            None => Err(\"Invalid hour\".to_owned())\n+            None => Err(\"Invalid hour\".to_strbuf())\n           },\n           'p' => match match_strs(s, pos,\n-                                  [(\"AM\".to_owned(), 0_i32), (\"PM\".to_owned(), 12_i32)]) {\n+                                  [(\"AM\".to_strbuf(), 0_i32), (\"PM\".to_strbuf(), 12_i32)]) {\n \n             Some(item) => { let (v, pos) = item; tm.tm_hour += v; Ok(pos) }\n-            None => Err(\"Invalid hour\".to_owned())\n+            None => Err(\"Invalid hour\".to_strbuf())\n           },\n           'R' => {\n             parse_type(s, pos, 'H', &mut *tm)\n@@ -675,7 +675,7 @@ pub fn strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n                 tm.tm_sec = v;\n                 Ok(pos)\n               }\n-              None => Err(\"Invalid second\".to_owned())\n+              None => Err(\"Invalid second\".to_strbuf())\n             }\n           }\n           //'s' {}\n@@ -694,7 +694,7 @@ pub fn strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n                 tm.tm_wday = if v == 7 { 0 } else { v };\n                 Ok(pos)\n               }\n-              None => Err(\"Invalid day of week\".to_owned())\n+              None => Err(\"Invalid day of week\".to_strbuf())\n             }\n           }\n           'v' => {\n@@ -708,7 +708,7 @@ pub fn strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n           'w' => {\n             match match_digits_in_range(s, pos, 1u, false, 0_i32, 6_i32) {\n               Some(item) => { let (v, pos) = item; tm.tm_wday = v; Ok(pos) }\n-              None => Err(\"Invalid day of week\".to_owned())\n+              None => Err(\"Invalid day of week\".to_strbuf())\n             }\n           }\n           'Y' => {\n@@ -718,7 +718,7 @@ pub fn strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n                 tm.tm_year = v - 1900_i32;\n                 Ok(pos)\n               }\n-              None => Err(\"Invalid year\".to_owned())\n+              None => Err(\"Invalid year\".to_strbuf())\n             }\n           }\n           'y' => {\n@@ -728,7 +728,7 @@ pub fn strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n                 tm.tm_year = v;\n                 Ok(pos)\n               }\n-              None => Err(\"Invalid year\".to_owned())\n+              None => Err(\"Invalid year\".to_strbuf())\n             }\n           }\n           'Z' => {\n@@ -764,15 +764,16 @@ pub fn strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n \n                     Ok(pos)\n                   }\n-                  None => Err(\"Invalid zone offset\".to_owned())\n+                  None => Err(\"Invalid zone offset\".to_strbuf())\n                 }\n             } else {\n-                Err(\"Invalid zone offset\".to_owned())\n+                Err(\"Invalid zone offset\".to_strbuf())\n             }\n           }\n           '%' => parse_char(s, pos, '%'),\n           ch => {\n-            Err(format!(\"unknown formatting type: {}\", str::from_char(ch)))\n+            Err(format_strbuf!(\"unknown formatting type: {}\",\n+                               str::from_char(ch)))\n           }\n         }\n     }\n@@ -794,7 +795,7 @@ pub fn strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n     };\n     let mut pos = 0u;\n     let len = s.len();\n-    let mut result = Err(\"Invalid time\".to_owned());\n+    let mut result = Err(\"Invalid time\".to_strbuf());\n \n     while pos < len {\n         let range = s.char_range_at(pos);\n@@ -843,7 +844,7 @@ pub fn strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n }\n \n /// Formats the time according to the format string.\n-pub fn strftime(format: &str, tm: &Tm) -> ~str {\n+pub fn strftime(format: &str, tm: &Tm) -> StrBuf {\n     fn days_in_year(year: int) -> i32 {\n         if (year % 4 == 0) && ((year % 100 != 0) || (year % 400 == 0)) {\n             366    /* Days in a leap year */\n@@ -871,7 +872,7 @@ pub fn strftime(format: &str, tm: &Tm) -> ~str {\n             + iso_week1_wday - iso_week_start_wday\n     }\n \n-    fn iso_week(ch:char, tm: &Tm) -> ~str {\n+    fn iso_week(ch:char, tm: &Tm) -> StrBuf {\n         let mut year: int = tm.tm_year as int + 1900;\n         let mut days: int = iso_week_days (tm.tm_yday, tm.tm_wday);\n \n@@ -890,160 +891,164 @@ pub fn strftime(format: &str, tm: &Tm) -> ~str {\n         }\n \n         match ch {\n-            'G' => format!(\"{}\", year),\n-            'g' => format!(\"{:02d}\", (year % 100 + 100) % 100),\n-            'V' => format!(\"{:02d}\", days / 7 + 1),\n-            _ => \"\".to_owned()\n+            'G' => format_strbuf!(\"{}\", year),\n+            'g' => format_strbuf!(\"{:02d}\", (year % 100 + 100) % 100),\n+            'V' => format_strbuf!(\"{:02d}\", days / 7 + 1),\n+            _ => \"\".to_strbuf()\n         }\n     }\n \n-    fn parse_type(ch: char, tm: &Tm) -> ~str {\n-      let die = || format!(\"strftime: can't understand this format {} \", ch);\n+    fn parse_type(ch: char, tm: &Tm) -> StrBuf {\n+      let die = || {\n+          format_strbuf!(\"strftime: can't understand this format {} \", ch)\n+      };\n         match ch {\n           'A' => match tm.tm_wday as int {\n-            0 => \"Sunday\".to_owned(),\n-            1 => \"Monday\".to_owned(),\n-            2 => \"Tuesday\".to_owned(),\n-            3 => \"Wednesday\".to_owned(),\n-            4 => \"Thursday\".to_owned(),\n-            5 => \"Friday\".to_owned(),\n-            6 => \"Saturday\".to_owned(),\n+            0 => \"Sunday\".to_strbuf(),\n+            1 => \"Monday\".to_strbuf(),\n+            2 => \"Tuesday\".to_strbuf(),\n+            3 => \"Wednesday\".to_strbuf(),\n+            4 => \"Thursday\".to_strbuf(),\n+            5 => \"Friday\".to_strbuf(),\n+            6 => \"Saturday\".to_strbuf(),\n             _ => die()\n           },\n          'a' => match tm.tm_wday as int {\n-            0 => \"Sun\".to_owned(),\n-            1 => \"Mon\".to_owned(),\n-            2 => \"Tue\".to_owned(),\n-            3 => \"Wed\".to_owned(),\n-            4 => \"Thu\".to_owned(),\n-            5 => \"Fri\".to_owned(),\n-            6 => \"Sat\".to_owned(),\n+            0 => \"Sun\".to_strbuf(),\n+            1 => \"Mon\".to_strbuf(),\n+            2 => \"Tue\".to_strbuf(),\n+            3 => \"Wed\".to_strbuf(),\n+            4 => \"Thu\".to_strbuf(),\n+            5 => \"Fri\".to_strbuf(),\n+            6 => \"Sat\".to_strbuf(),\n             _ => die()\n           },\n           'B' => match tm.tm_mon as int {\n-            0 => \"January\".to_owned(),\n-            1 => \"February\".to_owned(),\n-            2 => \"March\".to_owned(),\n-            3 => \"April\".to_owned(),\n-            4 => \"May\".to_owned(),\n-            5 => \"June\".to_owned(),\n-            6 => \"July\".to_owned(),\n-            7 => \"August\".to_owned(),\n-            8 => \"September\".to_owned(),\n-            9 => \"October\".to_owned(),\n-            10 => \"November\".to_owned(),\n-            11 => \"December\".to_owned(),\n+            0 => \"January\".to_strbuf(),\n+            1 => \"February\".to_strbuf(),\n+            2 => \"March\".to_strbuf(),\n+            3 => \"April\".to_strbuf(),\n+            4 => \"May\".to_strbuf(),\n+            5 => \"June\".to_strbuf(),\n+            6 => \"July\".to_strbuf(),\n+            7 => \"August\".to_strbuf(),\n+            8 => \"September\".to_strbuf(),\n+            9 => \"October\".to_strbuf(),\n+            10 => \"November\".to_strbuf(),\n+            11 => \"December\".to_strbuf(),\n             _ => die()\n           },\n           'b' | 'h' => match tm.tm_mon as int {\n-            0 => \"Jan\".to_owned(),\n-            1 => \"Feb\".to_owned(),\n-            2 => \"Mar\".to_owned(),\n-            3 => \"Apr\".to_owned(),\n-            4 => \"May\".to_owned(),\n-            5 => \"Jun\".to_owned(),\n-            6 => \"Jul\".to_owned(),\n-            7 => \"Aug\".to_owned(),\n-            8 => \"Sep\".to_owned(),\n-            9 => \"Oct\".to_owned(),\n-            10 => \"Nov\".to_owned(),\n-            11 => \"Dec\".to_owned(),\n+            0 => \"Jan\".to_strbuf(),\n+            1 => \"Feb\".to_strbuf(),\n+            2 => \"Mar\".to_strbuf(),\n+            3 => \"Apr\".to_strbuf(),\n+            4 => \"May\".to_strbuf(),\n+            5 => \"Jun\".to_strbuf(),\n+            6 => \"Jul\".to_strbuf(),\n+            7 => \"Aug\".to_strbuf(),\n+            8 => \"Sep\".to_strbuf(),\n+            9 => \"Oct\".to_strbuf(),\n+            10 => \"Nov\".to_strbuf(),\n+            11 => \"Dec\".to_strbuf(),\n             _  => die()\n           },\n-          'C' => format!(\"{:02d}\", (tm.tm_year as int + 1900) / 100),\n+          'C' => format_strbuf!(\"{:02d}\", (tm.tm_year as int + 1900) / 100),\n           'c' => {\n-            format!(\"{} {} {} {} {}\",\n+            format_strbuf!(\"{} {} {} {} {}\",\n                 parse_type('a', tm),\n                 parse_type('b', tm),\n                 parse_type('e', tm),\n                 parse_type('T', tm),\n                 parse_type('Y', tm))\n           }\n           'D' | 'x' => {\n-            format!(\"{}/{}/{}\",\n+            format_strbuf!(\"{}/{}/{}\",\n                 parse_type('m', tm),\n                 parse_type('d', tm),\n                 parse_type('y', tm))\n           }\n-          'd' => format!(\"{:02d}\", tm.tm_mday),\n-          'e' => format!(\"{:2d}\", tm.tm_mday),\n-          'f' => format!(\"{:09d}\", tm.tm_nsec),\n+          'd' => format_strbuf!(\"{:02d}\", tm.tm_mday),\n+          'e' => format_strbuf!(\"{:2d}\", tm.tm_mday),\n+          'f' => format_strbuf!(\"{:09d}\", tm.tm_nsec),\n           'F' => {\n-            format!(\"{}-{}-{}\",\n+            format_strbuf!(\"{}-{}-{}\",\n                 parse_type('Y', tm),\n                 parse_type('m', tm),\n                 parse_type('d', tm))\n           }\n           'G' => iso_week('G', tm),\n           'g' => iso_week('g', tm),\n-          'H' => format!(\"{:02d}\", tm.tm_hour),\n+          'H' => format_strbuf!(\"{:02d}\", tm.tm_hour),\n           'I' => {\n             let mut h = tm.tm_hour;\n             if h == 0 { h = 12 }\n             if h > 12 { h -= 12 }\n-            format!(\"{:02d}\", h)\n+            format_strbuf!(\"{:02d}\", h)\n           }\n-          'j' => format!(\"{:03d}\", tm.tm_yday + 1),\n-          'k' => format!(\"{:2d}\", tm.tm_hour),\n+          'j' => format_strbuf!(\"{:03d}\", tm.tm_yday + 1),\n+          'k' => format_strbuf!(\"{:2d}\", tm.tm_hour),\n           'l' => {\n             let mut h = tm.tm_hour;\n             if h == 0 { h = 12 }\n             if h > 12 { h -= 12 }\n-            format!(\"{:2d}\", h)\n+            format_strbuf!(\"{:2d}\", h)\n           }\n-          'M' => format!(\"{:02d}\", tm.tm_min),\n-          'm' => format!(\"{:02d}\", tm.tm_mon + 1),\n-          'n' => \"\\n\".to_owned(),\n-          'P' => if (tm.tm_hour as int) < 12 { \"am\".to_owned() } else { \"pm\".to_owned() },\n-          'p' => if (tm.tm_hour as int) < 12 { \"AM\".to_owned() } else { \"PM\".to_owned() },\n+          'M' => format_strbuf!(\"{:02d}\", tm.tm_min),\n+          'm' => format_strbuf!(\"{:02d}\", tm.tm_mon + 1),\n+          'n' => \"\\n\".to_strbuf(),\n+          'P' => if (tm.tm_hour as int) < 12 { \"am\".to_strbuf() } else { \"pm\".to_strbuf() },\n+          'p' => if (tm.tm_hour as int) < 12 { \"AM\".to_strbuf() } else { \"PM\".to_strbuf() },\n           'R' => {\n-            format!(\"{}:{}\",\n+            format_strbuf!(\"{}:{}\",\n                 parse_type('H', tm),\n                 parse_type('M', tm))\n           }\n           'r' => {\n-            format!(\"{}:{}:{} {}\",\n+            format_strbuf!(\"{}:{}:{} {}\",\n                 parse_type('I', tm),\n                 parse_type('M', tm),\n                 parse_type('S', tm),\n                 parse_type('p', tm))\n           }\n-          'S' => format!(\"{:02d}\", tm.tm_sec),\n-          's' => format!(\"{}\", tm.to_timespec().sec),\n+          'S' => format_strbuf!(\"{:02d}\", tm.tm_sec),\n+          's' => format_strbuf!(\"{}\", tm.to_timespec().sec),\n           'T' | 'X' => {\n-            format!(\"{}:{}:{}\",\n+            format_strbuf!(\"{}:{}:{}\",\n                 parse_type('H', tm),\n                 parse_type('M', tm),\n                 parse_type('S', tm))\n           }\n-          't' => \"\\t\".to_owned(),\n-          'U' => format!(\"{:02d}\", (tm.tm_yday - tm.tm_wday + 7) / 7),\n+          't' => \"\\t\".to_strbuf(),\n+          'U' => format_strbuf!(\"{:02d}\", (tm.tm_yday - tm.tm_wday + 7) / 7),\n           'u' => {\n             let i = tm.tm_wday as int;\n-            (if i == 0 { 7 } else { i }).to_str()\n+            (if i == 0 { 7 } else { i }).to_str().to_strbuf()\n           }\n           'V' => iso_week('V', tm),\n           'v' => {\n-            format!(\"{}-{}-{}\",\n+            format_strbuf!(\"{}-{}-{}\",\n                 parse_type('e', tm),\n                 parse_type('b', tm),\n                 parse_type('Y', tm))\n           }\n-          'W' => format!(\"{:02d}\", (tm.tm_yday - (tm.tm_wday - 1 + 7) % 7 + 7)\n-                         / 7),\n-          'w' => (tm.tm_wday as int).to_str(),\n-          'Y' => (tm.tm_year as int + 1900).to_str(),\n-          'y' => format!(\"{:02d}\", (tm.tm_year as int + 1900) % 100),\n-          'Z' => tm.tm_zone.clone(),\n+          'W' => {\n+              format_strbuf!(\"{:02d}\",\n+                             (tm.tm_yday - (tm.tm_wday - 1 + 7) % 7 + 7) / 7)\n+          }\n+          'w' => (tm.tm_wday as int).to_str().to_strbuf(),\n+          'Y' => (tm.tm_year as int + 1900).to_str().to_strbuf(),\n+          'y' => format_strbuf!(\"{:02d}\", (tm.tm_year as int + 1900) % 100),\n+          'Z' => tm.tm_zone.to_strbuf(),\n           'z' => {\n             let sign = if tm.tm_gmtoff > 0_i32 { '+' } else { '-' };\n             let mut m = num::abs(tm.tm_gmtoff) / 60_i32;\n             let h = m / 60_i32;\n             m -= h * 60_i32;\n-            format!(\"{}{:02d}{:02d}\", sign, h, m)\n+            format_strbuf!(\"{}{:02d}{:02d}\", sign, h, m)\n           }\n           '+' => tm.rfc3339(),\n-          '%' => \"%\".to_owned(),\n+          '%' => \"%\".to_strbuf(),\n           _   => die()\n         }\n     }\n@@ -1067,7 +1072,7 @@ pub fn strftime(format: &str, tm: &Tm) -> ~str {\n         }\n     }\n \n-    str::from_utf8(buf.as_slice()).unwrap().to_str()\n+    str::from_utf8(buf.as_slice()).unwrap().to_strbuf()\n }\n \n #[cfg(test)]\n@@ -1235,9 +1240,9 @@ mod tests {\n         }\n \n         let format = \"%a %b %e %T.%f %Y\";\n-        assert_eq!(strptime(\"\", format), Err(\"Invalid time\".to_owned()));\n+        assert_eq!(strptime(\"\", format), Err(\"Invalid time\".to_strbuf()));\n         assert!(strptime(\"Fri Feb 13 15:31:30\", format)\n-            == Err(\"Invalid time\".to_owned()));\n+            == Err(\"Invalid time\".to_strbuf()));\n \n         match strptime(\"Fri Feb 13 15:31:30.01234 2009\", format) {\n           Err(e) => fail!(e),\n@@ -1259,71 +1264,71 @@ mod tests {\n \n         fn test(s: &str, format: &str) -> bool {\n             match strptime(s, format) {\n-              Ok(ref tm) => tm.strftime(format) == s.to_owned(),\n+              Ok(ref tm) => tm.strftime(format) == s.to_strbuf(),\n               Err(e) => fail!(e)\n             }\n         }\n \n         let days = [\n-            \"Sunday\".to_owned(),\n-            \"Monday\".to_owned(),\n-            \"Tuesday\".to_owned(),\n-            \"Wednesday\".to_owned(),\n-            \"Thursday\".to_owned(),\n-            \"Friday\".to_owned(),\n-            \"Saturday\".to_owned()\n+            \"Sunday\".to_strbuf(),\n+            \"Monday\".to_strbuf(),\n+            \"Tuesday\".to_strbuf(),\n+            \"Wednesday\".to_strbuf(),\n+            \"Thursday\".to_strbuf(),\n+            \"Friday\".to_strbuf(),\n+            \"Saturday\".to_strbuf()\n         ];\n         for day in days.iter() {\n-            assert!(test(*day, \"%A\"));\n+            assert!(test(day.as_slice(), \"%A\"));\n         }\n \n         let days = [\n-            \"Sun\".to_owned(),\n-            \"Mon\".to_owned(),\n-            \"Tue\".to_owned(),\n-            \"Wed\".to_owned(),\n-            \"Thu\".to_owned(),\n-            \"Fri\".to_owned(),\n-            \"Sat\".to_owned()\n+            \"Sun\".to_strbuf(),\n+            \"Mon\".to_strbuf(),\n+            \"Tue\".to_strbuf(),\n+            \"Wed\".to_strbuf(),\n+            \"Thu\".to_strbuf(),\n+            \"Fri\".to_strbuf(),\n+            \"Sat\".to_strbuf()\n         ];\n         for day in days.iter() {\n-            assert!(test(*day, \"%a\"));\n+            assert!(test(day.as_slice(), \"%a\"));\n         }\n \n         let months = [\n-            \"January\".to_owned(),\n-            \"February\".to_owned(),\n-            \"March\".to_owned(),\n-            \"April\".to_owned(),\n-            \"May\".to_owned(),\n-            \"June\".to_owned(),\n-            \"July\".to_owned(),\n-            \"August\".to_owned(),\n-            \"September\".to_owned(),\n-            \"October\".to_owned(),\n-            \"November\".to_owned(),\n-            \"December\".to_owned()\n+            \"January\".to_strbuf(),\n+            \"February\".to_strbuf(),\n+            \"March\".to_strbuf(),\n+            \"April\".to_strbuf(),\n+            \"May\".to_strbuf(),\n+            \"June\".to_strbuf(),\n+            \"July\".to_strbuf(),\n+            \"August\".to_strbuf(),\n+            \"September\".to_strbuf(),\n+            \"October\".to_strbuf(),\n+            \"November\".to_strbuf(),\n+            \"December\".to_strbuf()\n         ];\n         for day in months.iter() {\n-            assert!(test(*day, \"%B\"));\n+            assert!(test(day.as_slice(), \"%B\"));\n         }\n \n         let months = [\n-            \"Jan\".to_owned(),\n-            \"Feb\".to_owned(),\n-            \"Mar\".to_owned(),\n-            \"Apr\".to_owned(),\n-            \"May\".to_owned(),\n-            \"Jun\".to_owned(),\n-            \"Jul\".to_owned(),\n-            \"Aug\".to_owned(),\n-            \"Sep\".to_owned(),\n-            \"Oct\".to_owned(),\n-            \"Nov\".to_owned(),\n-            \"Dec\".to_owned()\n+            \"Jan\".to_strbuf(),\n+            \"Feb\".to_strbuf(),\n+            \"Mar\".to_strbuf(),\n+            \"Apr\".to_strbuf(),\n+            \"May\".to_strbuf(),\n+            \"Jun\".to_strbuf(),\n+            \"Jul\".to_strbuf(),\n+            \"Aug\".to_strbuf(),\n+            \"Sep\".to_strbuf(),\n+            \"Oct\".to_strbuf(),\n+            \"Nov\".to_strbuf(),\n+            \"Dec\".to_strbuf()\n         ];\n         for day in months.iter() {\n-            assert!(test(*day, \"%b\"));\n+            assert!(test(day.as_slice(), \"%b\"));\n         }\n \n         assert!(test(\"19\", \"%C\"));\n@@ -1375,7 +1380,7 @@ mod tests {\n         assert!(test(\"%\", \"%%\"));\n \n         // Test for #7256\n-        assert_eq!(strptime(\"360\", \"%Y-%m-%d\"), Err(\"Invalid year\".to_owned()))\n+        assert_eq!(strptime(\"360\", \"%Y-%m-%d\"), Err(\"Invalid year\".to_strbuf()))\n     }\n \n     fn test_ctime() {\n@@ -1387,8 +1392,8 @@ mod tests {\n \n         debug!(\"test_ctime: {:?} {:?}\", utc.ctime(), local.ctime());\n \n-        assert_eq!(utc.ctime(), \"Fri Feb 13 23:31:30 2009\".to_owned());\n-        assert_eq!(local.ctime(), \"Fri Feb 13 15:31:30 2009\".to_owned());\n+        assert_eq!(utc.ctime(), \"Fri Feb 13 23:31:30 2009\".to_strbuf());\n+        assert_eq!(local.ctime(), \"Fri Feb 13 15:31:30 2009\".to_strbuf());\n     }\n \n     fn test_strftime() {\n@@ -1398,70 +1403,71 @@ mod tests {\n         let utc = at_utc(time);\n         let local = at(time);\n \n-        assert_eq!(local.strftime(\"\"), \"\".to_owned());\n-        assert_eq!(local.strftime(\"%A\"), \"Friday\".to_owned());\n-        assert_eq!(local.strftime(\"%a\"), \"Fri\".to_owned());\n-        assert_eq!(local.strftime(\"%B\"), \"February\".to_owned());\n-        assert_eq!(local.strftime(\"%b\"), \"Feb\".to_owned());\n-        assert_eq!(local.strftime(\"%C\"), \"20\".to_owned());\n-        assert_eq!(local.strftime(\"%c\"), \"Fri Feb 13 15:31:30 2009\".to_owned());\n-        assert_eq!(local.strftime(\"%D\"), \"02/13/09\".to_owned());\n-        assert_eq!(local.strftime(\"%d\"), \"13\".to_owned());\n-        assert_eq!(local.strftime(\"%e\"), \"13\".to_owned());\n-        assert_eq!(local.strftime(\"%f\"), \"000054321\".to_owned());\n-        assert_eq!(local.strftime(\"%F\"), \"2009-02-13\".to_owned());\n-        assert_eq!(local.strftime(\"%G\"), \"2009\".to_owned());\n-        assert_eq!(local.strftime(\"%g\"), \"09\".to_owned());\n-        assert_eq!(local.strftime(\"%H\"), \"15\".to_owned());\n-        assert_eq!(local.strftime(\"%I\"), \"03\".to_owned());\n-        assert_eq!(local.strftime(\"%j\"), \"044\".to_owned());\n-        assert_eq!(local.strftime(\"%k\"), \"15\".to_owned());\n-        assert_eq!(local.strftime(\"%l\"), \" 3\".to_owned());\n-        assert_eq!(local.strftime(\"%M\"), \"31\".to_owned());\n-        assert_eq!(local.strftime(\"%m\"), \"02\".to_owned());\n-        assert_eq!(local.strftime(\"%n\"), \"\\n\".to_owned());\n-        assert_eq!(local.strftime(\"%P\"), \"pm\".to_owned());\n-        assert_eq!(local.strftime(\"%p\"), \"PM\".to_owned());\n-        assert_eq!(local.strftime(\"%R\"), \"15:31\".to_owned());\n-        assert_eq!(local.strftime(\"%r\"), \"03:31:30 PM\".to_owned());\n-        assert_eq!(local.strftime(\"%S\"), \"30\".to_owned());\n-        assert_eq!(local.strftime(\"%s\"), \"1234567890\".to_owned());\n-        assert_eq!(local.strftime(\"%T\"), \"15:31:30\".to_owned());\n-        assert_eq!(local.strftime(\"%t\"), \"\\t\".to_owned());\n-        assert_eq!(local.strftime(\"%U\"), \"06\".to_owned());\n-        assert_eq!(local.strftime(\"%u\"), \"5\".to_owned());\n-        assert_eq!(local.strftime(\"%V\"), \"07\".to_owned());\n-        assert_eq!(local.strftime(\"%v\"), \"13-Feb-2009\".to_owned());\n-        assert_eq!(local.strftime(\"%W\"), \"06\".to_owned());\n-        assert_eq!(local.strftime(\"%w\"), \"5\".to_owned());\n-        assert_eq!(local.strftime(\"%X\"), \"15:31:30\".to_owned()); // FIXME (#2350): support locale\n-        assert_eq!(local.strftime(\"%x\"), \"02/13/09\".to_owned()); // FIXME (#2350): support locale\n-        assert_eq!(local.strftime(\"%Y\"), \"2009\".to_owned());\n-        assert_eq!(local.strftime(\"%y\"), \"09\".to_owned());\n-        assert_eq!(local.strftime(\"%+\"), \"2009-02-13T15:31:30-08:00\".to_owned());\n+        assert_eq!(local.strftime(\"\"), \"\".to_strbuf());\n+        assert_eq!(local.strftime(\"%A\"), \"Friday\".to_strbuf());\n+        assert_eq!(local.strftime(\"%a\"), \"Fri\".to_strbuf());\n+        assert_eq!(local.strftime(\"%B\"), \"February\".to_strbuf());\n+        assert_eq!(local.strftime(\"%b\"), \"Feb\".to_strbuf());\n+        assert_eq!(local.strftime(\"%C\"), \"20\".to_strbuf());\n+        assert_eq!(local.strftime(\"%c\"), \"Fri Feb 13 15:31:30 2009\".to_strbuf());\n+        assert_eq!(local.strftime(\"%D\"), \"02/13/09\".to_strbuf());\n+        assert_eq!(local.strftime(\"%d\"), \"13\".to_strbuf());\n+        assert_eq!(local.strftime(\"%e\"), \"13\".to_strbuf());\n+        assert_eq!(local.strftime(\"%f\"), \"000054321\".to_strbuf());\n+        assert_eq!(local.strftime(\"%F\"), \"2009-02-13\".to_strbuf());\n+        assert_eq!(local.strftime(\"%G\"), \"2009\".to_strbuf());\n+        assert_eq!(local.strftime(\"%g\"), \"09\".to_strbuf());\n+        assert_eq!(local.strftime(\"%H\"), \"15\".to_strbuf());\n+        assert_eq!(local.strftime(\"%I\"), \"03\".to_strbuf());\n+        assert_eq!(local.strftime(\"%j\"), \"044\".to_strbuf());\n+        assert_eq!(local.strftime(\"%k\"), \"15\".to_strbuf());\n+        assert_eq!(local.strftime(\"%l\"), \" 3\".to_strbuf());\n+        assert_eq!(local.strftime(\"%M\"), \"31\".to_strbuf());\n+        assert_eq!(local.strftime(\"%m\"), \"02\".to_strbuf());\n+        assert_eq!(local.strftime(\"%n\"), \"\\n\".to_strbuf());\n+        assert_eq!(local.strftime(\"%P\"), \"pm\".to_strbuf());\n+        assert_eq!(local.strftime(\"%p\"), \"PM\".to_strbuf());\n+        assert_eq!(local.strftime(\"%R\"), \"15:31\".to_strbuf());\n+        assert_eq!(local.strftime(\"%r\"), \"03:31:30 PM\".to_strbuf());\n+        assert_eq!(local.strftime(\"%S\"), \"30\".to_strbuf());\n+        assert_eq!(local.strftime(\"%s\"), \"1234567890\".to_strbuf());\n+        assert_eq!(local.strftime(\"%T\"), \"15:31:30\".to_strbuf());\n+        assert_eq!(local.strftime(\"%t\"), \"\\t\".to_strbuf());\n+        assert_eq!(local.strftime(\"%U\"), \"06\".to_strbuf());\n+        assert_eq!(local.strftime(\"%u\"), \"5\".to_strbuf());\n+        assert_eq!(local.strftime(\"%V\"), \"07\".to_strbuf());\n+        assert_eq!(local.strftime(\"%v\"), \"13-Feb-2009\".to_strbuf());\n+        assert_eq!(local.strftime(\"%W\"), \"06\".to_strbuf());\n+        assert_eq!(local.strftime(\"%w\"), \"5\".to_strbuf());\n+        assert_eq!(local.strftime(\"%X\"), \"15:31:30\".to_strbuf()); // FIXME (#2350): support locale\n+        assert_eq!(local.strftime(\"%x\"), \"02/13/09\".to_strbuf()); // FIXME (#2350): support locale\n+        assert_eq!(local.strftime(\"%Y\"), \"2009\".to_strbuf());\n+        assert_eq!(local.strftime(\"%y\"), \"09\".to_strbuf());\n+        assert_eq!(local.strftime(\"%+\"), \"2009-02-13T15:31:30-08:00\".to_strbuf());\n \n         // FIXME (#2350): We should probably standardize on the timezone\n         // abbreviation.\n         let zone = local.strftime(\"%Z\");\n-        assert!(zone == \"PST\".to_owned() || zone == \"Pacific Standard Time\".to_owned());\n+        assert!(zone == \"PST\".to_strbuf() || zone == \"Pacific Standard Time\".to_strbuf());\n \n-        assert_eq!(local.strftime(\"%z\"), \"-0800\".to_owned());\n-        assert_eq!(local.strftime(\"%%\"), \"%\".to_owned());\n+        assert_eq!(local.strftime(\"%z\"), \"-0800\".to_strbuf());\n+        assert_eq!(local.strftime(\"%%\"), \"%\".to_strbuf());\n \n         // FIXME (#2350): We should probably standardize on the timezone\n         // abbreviation.\n         let rfc822 = local.rfc822();\n-        let prefix = \"Fri, 13 Feb 2009 15:31:30 \".to_owned();\n-        assert!(rfc822 == prefix + \"PST\" || rfc822 == prefix + \"Pacific Standard Time\");\n-\n-        assert_eq!(local.ctime(), \"Fri Feb 13 15:31:30 2009\".to_owned());\n-        assert_eq!(local.rfc822z(), \"Fri, 13 Feb 2009 15:31:30 -0800\".to_owned());\n-        assert_eq!(local.rfc3339(), \"2009-02-13T15:31:30-08:00\".to_owned());\n-\n-        assert_eq!(utc.ctime(), \"Fri Feb 13 23:31:30 2009\".to_owned());\n-        assert_eq!(utc.rfc822(), \"Fri, 13 Feb 2009 23:31:30 GMT\".to_owned());\n-        assert_eq!(utc.rfc822z(), \"Fri, 13 Feb 2009 23:31:30 -0000\".to_owned());\n-        assert_eq!(utc.rfc3339(), \"2009-02-13T23:31:30Z\".to_owned());\n+        let prefix = \"Fri, 13 Feb 2009 15:31:30 \".to_strbuf();\n+        assert!(rfc822 == format_strbuf!(\"{}PST\", prefix) ||\n+                rfc822 == format_strbuf!(\"{}Pacific Standard Time\", prefix));\n+\n+        assert_eq!(local.ctime(), \"Fri Feb 13 15:31:30 2009\".to_strbuf());\n+        assert_eq!(local.rfc822z(), \"Fri, 13 Feb 2009 15:31:30 -0800\".to_strbuf());\n+        assert_eq!(local.rfc3339(), \"2009-02-13T15:31:30-08:00\".to_strbuf());\n+\n+        assert_eq!(utc.ctime(), \"Fri Feb 13 23:31:30 2009\".to_strbuf());\n+        assert_eq!(utc.rfc822(), \"Fri, 13 Feb 2009 23:31:30 GMT\".to_strbuf());\n+        assert_eq!(utc.rfc822z(), \"Fri, 13 Feb 2009 23:31:30 -0000\".to_strbuf());\n+        assert_eq!(utc.rfc3339(), \"2009-02-13T23:31:30Z\".to_strbuf());\n     }\n \n     fn test_timespec_eq_ord() {"}]}