{"sha": "75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1YzViYzkwZDJkM2ZiM2U0OTViMzhjNDljN2NjOTY3OTc3OTVjNzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-05T08:57:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-05T08:57:46Z"}, "message": "auto merge of #5179 : alexcrichton/rust/default-warn-unused-import, r=graydon\n\nI've found that unused imports can often start cluttering a project after a long time, and it's very useful to keep them under control. I don't like how Go forces a compiler error by default and it can't be changed, but I certainly want to know about them so I think that a warn is a good default.\r\n\r\nNow that the `unused_imports` lint option is a bit smarter, I think it's possible to change the default level to warn. This commit also removes all unused imports throughout the compiler and libraries (500+).\r\n\r\nThe only odd things that I ran into were that some `use` statements had to have `#[cfg(notest)]` or `#[cfg(test)]` based on where they were. The ones with `notest` were mostly in core for modules like `cmp` whereas `cfg(test)` was for tests that weren't part of a normal `mod test` module.", "tree": {"sha": "b01a9f1428b1b3ed4fa126a9c8d5cbbe8056f3ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b01a9f1428b1b3ed4fa126a9c8d5cbbe8056f3ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "html_url": "https://github.com/rust-lang/rust/commit/75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71f09813c86ad4d78d7760f4fcc8659f12532e63", "url": "https://api.github.com/repos/rust-lang/rust/commits/71f09813c86ad4d78d7760f4fcc8659f12532e63", "html_url": "https://github.com/rust-lang/rust/commit/71f09813c86ad4d78d7760f4fcc8659f12532e63"}, {"sha": "cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "html_url": "https://github.com/rust-lang/rust/commit/cb4ab76e4a17e0efc6b506af15fd1df654c043ff"}], "stats": {"total": 892, "additions": 161, "deletions": 731}, "files": [{"sha": "b7c4e26c4b15cf53a0ef665f3db875e880ed553a", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -10,8 +10,6 @@\n \n use core::prelude::*;\n \n-use cmp;\n-\n #[deriving_eq]\n pub enum mode {\n     mode_compile_fail,"}, {"sha": "531e2329b0e05f54e832c05869f2e903b2159e55", "filename": "src/compiletest/compiletest.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Fcompiletest%2Fcompiletest.rc", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Fcompiletest%2Fcompiletest.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rc?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -32,7 +32,6 @@ pub mod errors;\n use std::getopts;\n use std::test;\n \n-use core::{result, either};\n use core::result::{Ok, Err};\n \n use common::config;"}, {"sha": "16af0a4b5752dab34f4e95b86a0561393c631da3", "filename": "src/compiletest/errors.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Fcompiletest%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Fcompiletest%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Ferrors.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -10,8 +10,6 @@\n \n use core::prelude::*;\n \n-use common::config;\n-\n use core::io;\n use core::io::ReaderUtil;\n use core::str;"}, {"sha": "f11e0ba74b6f4bbac2ba78c6f40ce5a35c311488", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -13,14 +13,11 @@ use core::prelude::*;\n use core::io::{ReaderUtil, WriterUtil};\n use core::io;\n use core::libc::{c_int, pid_t};\n-use core::libc;\n use core::os;\n-use core::pipes;\n use core::run::spawn_process;\n use core::run;\n use core::str;\n use core::task;\n-use core::vec;\n \n #[cfg(target_os = \"win32\")]\n fn target_env(lib_path: ~str, prog: ~str) -> ~[(~str,~str)] {"}, {"sha": "e0db543250d6614456a68b822b1ec03c20730732", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -10,14 +10,12 @@\n \n use core::prelude::*;\n \n-use common;\n use common::mode_run_pass;\n use common::mode_run_fail;\n use common::mode_compile_fail;\n use common::mode_pretty;\n use common::config;\n use errors;\n-use header;\n use header::load_props;\n use header::TestProps;\n use procsrv;"}, {"sha": "736c20969e991e326924d77b12ff5c1090e6c7d6", "filename": "src/compiletest/util.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Fcompiletest%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Fcompiletest%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Futil.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -10,12 +10,10 @@\n \n use core::prelude::*;\n \n-use common;\n use common::config;\n \n use core::io;\n use core::os::getenv;\n-use core::os;\n \n pub fn make_new_path(path: ~str) -> ~str {\n "}, {"sha": "26a68e3a1990c2b313c9ae9cbdaf76221e4bf259", "filename": "src/libcore/bool.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbool.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -11,10 +11,8 @@\n \n //! Boolean logic\n \n-use bool;\n-use cmp;\n-use cmp::Eq;\n use option::{None, Option, Some};\n+#[cfg(notest)] use cmp;\n \n /// Negation / inverse\n pub pure fn not(v: bool) -> bool { !v }\n@@ -82,7 +80,7 @@ impl cmp::Eq for bool {\n #[test]\n pub fn test_bool_from_str() {\n     do all_values |v| {\n-        assert Some(v) == from_str(bool::to_str(v))\n+        assert Some(v) == from_str(to_str(v))\n     }\n }\n "}, {"sha": "36b03af2d383d97191ec3f13f47ba27974b37600", "filename": "src/libcore/char.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -10,14 +10,14 @@\n \n //! Utilities for manipulating the char type\n \n-use char;\n-use cmp::Eq;\n use option::{None, Option, Some};\n use str;\n use u32;\n use uint;\n use unicode;\n \n+#[cfg(notest)] use cmp::Eq;\n+\n /*\n     Lu  Uppercase_Letter    an uppercase letter\n     Ll  Lowercase_Letter    a lowercase letter\n@@ -305,8 +305,8 @@ fn test_to_digit() {\n \n #[test]\n fn test_is_ascii() {\n-   assert str::all(~\"banana\", char::is_ascii);\n-   assert ! str::all(~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\", char::is_ascii);\n+   assert str::all(~\"banana\", is_ascii);\n+   assert ! str::all(~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\", is_ascii);\n }\n \n #[test]"}, {"sha": "5ec0dd073c8e106a1fbb88673f2d3fb07ab39f2c", "filename": "src/libcore/dvec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fdvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fdvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdvec.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -20,7 +20,6 @@ Note that recursive use is not permitted.\n */\n \n use cast;\n-use cast::reinterpret_cast;\n use prelude::*;\n use ptr::null;\n use vec;"}, {"sha": "e5091cc8c3400ddfba19967254b65dc61b6267a7", "filename": "src/libcore/either.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Feither.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -11,7 +11,6 @@\n //! A type that represents one of two alternatives\n \n use cmp::Eq;\n-use cmp;\n use kinds::Copy;\n use result::Result;\n use result;"}, {"sha": "4d01c102707172c7f235f02b5c3963a4f32c662d", "filename": "src/libcore/flate.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fflate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fflate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fflate.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -17,9 +17,10 @@ Simple compression\n use libc;\n use libc::{c_void, size_t, c_int};\n use ptr;\n-use rand;\n use vec;\n \n+#[cfg(test)] use rand;\n+\n extern mod rustrt {\n     unsafe fn tdefl_compress_mem_to_heap(psrc_buf: *const c_void,\n                                          src_buf_len: size_t,"}, {"sha": "a6048e2b25af02938c3e814c0fb7dab49323d8d3", "filename": "src/libcore/hash.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -21,7 +21,6 @@\n \n use io;\n use io::{Writer, WriterUtil};\n-use os;\n use to_bytes::IterBytes;\n use uint;\n use vec;"}, {"sha": "b6ba790c300e3a9e19feb4e94b8426088c502248", "filename": "src/libcore/hashmap.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhashmap.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -19,11 +19,8 @@ pub mod linear {\n     use iter::BaseIter;\n     use hash::Hash;\n     use iter;\n-    use kinds::Copy;\n     use option::{None, Option, Some};\n-    use option;\n     use rand;\n-    use to_bytes::IterBytes;\n     use uint;\n     use vec;\n "}, {"sha": "c0030179fe5fb81cf649a859001b6dca19851c52", "filename": "src/libcore/io.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -16,14 +16,11 @@ Basic input/output\n \n use result::Result;\n \n-use cmp::Eq;\n use dvec::DVec;\n use int;\n use libc;\n use libc::{c_int, c_long, c_uint, c_void, size_t, ssize_t};\n use libc::consts::os::posix88::*;\n-use libc::consts::os::extra::*;\n-use option;\n use os;\n use prelude::*;\n use ptr;\n@@ -719,7 +716,9 @@ pub fn mk_file_writer(path: &Path, flags: &[FileFlag])\n     -> Result<Writer, ~str> {\n \n     #[cfg(windows)]\n-    fn wb() -> c_int { (O_WRONLY | O_BINARY) as c_int }\n+    fn wb() -> c_int {\n+      (O_WRONLY | libc::consts::os::extra::O_BINARY) as c_int\n+    }\n \n     #[cfg(unix)]\n     fn wb() -> c_int { O_WRONLY as c_int }"}, {"sha": "41d509f14025b075e7fb209ec683718c6536d45f", "filename": "src/libcore/iter-trait/dlist.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fiter-trait%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fiter-trait%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter-trait%2Fdlist.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n mod inst {\n-    use cast;\n-    use dlist;\n     use dlist::DList;\n     use managed;\n     use option::{Option, Some};"}, {"sha": "9f673a142842f7eabb8a962725ef4902688554af", "filename": "src/libcore/libc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flibc.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -1007,7 +1007,6 @@ pub mod funcs {\n \n     pub mod c95 {\n         use libc::types::common::c95::{FILE, c_void, fpos_t};\n-        use libc::types::common::posix88::dirent_t;\n         use libc::types::os::arch::c95::{c_char, c_double, c_int, c_long};\n         use libc::types::os::arch::c95::{c_uint, c_ulong, c_void, size_t};\n "}, {"sha": "73af0ad371461f80a95fe15b98d23da05d078128", "filename": "src/libcore/logging.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flogging.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -10,11 +10,7 @@\n \n //! Logging\n \n-use cast::transmute;\n-use io;\n use libc;\n-use repr;\n-use vec;\n \n #[nolink]\n extern mod rustrt {\n@@ -48,6 +44,11 @@ pub fn console_off() {\n #[cfg(notest)]\n #[lang=\"log_type\"]\n pub fn log_type<T>(level: u32, object: &T) {\n+    use cast::transmute;\n+    use io;\n+    use repr;\n+    use vec;\n+\n     let bytes = do io::with_bytes_writer |writer| {\n         repr::write_repr(writer, object);\n     };"}, {"sha": "1f347371dfded7f1f1b1bfc300b9721bef5ed285", "filename": "src/libcore/managed.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fmanaged.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fmanaged.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmanaged.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -10,12 +10,9 @@\n \n //! Operations on managed box types\n \n-use cast::transmute;\n-use cmp::{Eq, Ord};\n-use managed::raw::BoxRepr;\n-use prelude::*;\n use ptr;\n \n+#[cfg(notest)] use cmp::{Eq, Ord};\n \n pub mod raw {\n "}, {"sha": "cf2af7e38cc6ba36aee2a0245a2615acba3cd8ad", "filename": "src/libcore/nil.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fnil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fnil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnil.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -14,6 +14,7 @@ Functions for the unit type.\n \n */\n \n+#[cfg(notest)]\n use cmp::{Eq, Ord};\n \n #[cfg(notest)]"}, {"sha": "5100021b954ab91e5d937021c9e63dabfc4a7a6d", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -11,17 +11,18 @@\n //! Operations and constants for `f32`\n \n use cmath;\n-use cmp;\n use libc::{c_float, c_int};\n use num::NumCast;\n use num::strconv;\n use num;\n-use ops;\n use option::Option;\n use unstable::intrinsics::floorf32;\n use from_str;\n use to_str;\n \n+#[cfg(notest)] use cmp;\n+#[cfg(notest)] use ops;\n+\n pub use cmath::c_float_targ_consts::*;\n \n macro_rules! delegate("}, {"sha": "9470922b881efa7bb294fd327727459d060337d7", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -11,18 +11,18 @@\n //! Operations and constants for `f64`\n \n use cmath;\n-use cmp;\n use libc::{c_double, c_int};\n-use libc;\n use num::NumCast;\n use num::strconv;\n use num;\n-use ops;\n use option::Option;\n use unstable::intrinsics::floorf64;\n use to_str;\n use from_str;\n \n+#[cfg(notest)] use cmp;\n+#[cfg(notest)] use ops;\n+\n pub use cmath::c_double_targ_consts::*;\n pub use cmp::{min, max};\n "}, {"sha": "5d912472d7dfe88a12845adac9d41f0b08bcd340", "filename": "src/libcore/num/float.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ffloat.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -20,21 +20,17 @@\n \n // PORT this must match in width according to architecture\n \n-use m_float = f64;\n-\n-use cmp::{Eq, Ord};\n-use cmp;\n use f64;\n use num::NumCast;\n use num::strconv;\n use num;\n-use ops;\n use option::{None, Option, Some};\n-use str;\n-use uint;\n use to_str;\n use from_str;\n \n+#[cfg(notest)] use cmp::{Eq, Ord};\n+#[cfg(notest)] use ops;\n+\n pub use f64::{add, sub, mul, div, rem, lt, le, eq, ne, ge, gt};\n pub use f64::logarithm;\n pub use f64::{acos, asin, atan2, cbrt, ceil, copysign, cosh, floor};"}, {"sha": "c0351e2c619c9fbcd3dd969a054975690f6cd201", "filename": "src/libcore/num/int-template.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fnum%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fnum%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -10,21 +10,15 @@\n \n use T = self::inst::T;\n \n-use char;\n-use cmp::{Eq, Ord};\n-use cmp;\n use to_str::ToStr;\n use from_str::FromStr;\n use num::{ToStrRadix, FromStrRadix};\n use num::strconv;\n use num;\n use prelude::*;\n-use str;\n-use uint;\n-use vec;\n-use i8;\n-use i16;\n-use i32;\n+\n+#[cfg(notest)] use cmp::{Eq, Ord};\n+\n pub use cmp::{min, max};\n \n pub const bits : uint = inst::bits;"}, {"sha": "c141820198f1bef54261ac6f5a4e98a06dbbdb3c", "filename": "src/libcore/num/num.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fnum.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -12,10 +12,7 @@\n use cmp::{Ord, Eq};\n use ops::{Add, Div, Modulo, Mul, Neg, Sub};\n use option::{None, Option, Some};\n-use char;\n-use str;\n use kinds::Copy;\n-use vec;\n \n pub mod strconv;\n "}, {"sha": "0dbf7403e27517954b621b73334b2f8450da1cd2", "filename": "src/libcore/num/uint-template.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fnum%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fnum%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -11,22 +11,15 @@\n use T = self::inst::T;\n use T_SIGNED = self::inst::T_SIGNED;\n \n-use char;\n-use cmp::{Eq, Ord};\n-use cmp;\n use to_str::ToStr;\n use from_str::FromStr;\n use num::{ToStrRadix, FromStrRadix};\n use num::strconv;\n use num;\n use option::{None, Option, Some};\n use prelude::*;\n-use str;\n-use uint;\n-use vec;\n-use u8;\n-use u16;\n-use u32;\n+\n+#[cfg(notest)] use cmp::{Eq, Ord};\n \n pub use cmp::{min, max};\n \n@@ -357,7 +350,6 @@ pub fn to_str_radix37() {\n     uint::to_str_radix(100u, 37u);\n }\n \n-use io;\n #[test]\n pub fn test_ranges() {\n     let mut l = ~[];"}, {"sha": "206f8c0f6cab2b95e9829c1f47260da0fade2fdd", "filename": "src/libcore/num/uint-template/uint.rs", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fnum%2Fuint-template%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fnum%2Fuint-template%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template%2Fuint.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -19,7 +19,6 @@ pub use self::inst::{\n \n pub mod inst {\n     use sys;\n-    use uint;\n     use iter;\n \n     pub type T = uint;\n@@ -144,60 +143,61 @@ pub mod inst {\n \n     #[test]\n     fn test_next_power_of_two() {\n-        assert (uint::next_power_of_two(0u) == 0u);\n-        assert (uint::next_power_of_two(1u) == 1u);\n-        assert (uint::next_power_of_two(2u) == 2u);\n-        assert (uint::next_power_of_two(3u) == 4u);\n-        assert (uint::next_power_of_two(4u) == 4u);\n-        assert (uint::next_power_of_two(5u) == 8u);\n-        assert (uint::next_power_of_two(6u) == 8u);\n-        assert (uint::next_power_of_two(7u) == 8u);\n-        assert (uint::next_power_of_two(8u) == 8u);\n-        assert (uint::next_power_of_two(9u) == 16u);\n-        assert (uint::next_power_of_two(10u) == 16u);\n-        assert (uint::next_power_of_two(11u) == 16u);\n-        assert (uint::next_power_of_two(12u) == 16u);\n-        assert (uint::next_power_of_two(13u) == 16u);\n-        assert (uint::next_power_of_two(14u) == 16u);\n-        assert (uint::next_power_of_two(15u) == 16u);\n-        assert (uint::next_power_of_two(16u) == 16u);\n-        assert (uint::next_power_of_two(17u) == 32u);\n-        assert (uint::next_power_of_two(18u) == 32u);\n-        assert (uint::next_power_of_two(19u) == 32u);\n-        assert (uint::next_power_of_two(20u) == 32u);\n-        assert (uint::next_power_of_two(21u) == 32u);\n-        assert (uint::next_power_of_two(22u) == 32u);\n-        assert (uint::next_power_of_two(23u) == 32u);\n-        assert (uint::next_power_of_two(24u) == 32u);\n-        assert (uint::next_power_of_two(25u) == 32u);\n-        assert (uint::next_power_of_two(26u) == 32u);\n-        assert (uint::next_power_of_two(27u) == 32u);\n-        assert (uint::next_power_of_two(28u) == 32u);\n-        assert (uint::next_power_of_two(29u) == 32u);\n-        assert (uint::next_power_of_two(30u) == 32u);\n-        assert (uint::next_power_of_two(31u) == 32u);\n-        assert (uint::next_power_of_two(32u) == 32u);\n-        assert (uint::next_power_of_two(33u) == 64u);\n-        assert (uint::next_power_of_two(34u) == 64u);\n-        assert (uint::next_power_of_two(35u) == 64u);\n-        assert (uint::next_power_of_two(36u) == 64u);\n-        assert (uint::next_power_of_two(37u) == 64u);\n-        assert (uint::next_power_of_two(38u) == 64u);\n-        assert (uint::next_power_of_two(39u) == 64u);\n+        assert (next_power_of_two(0u) == 0u);\n+        assert (next_power_of_two(1u) == 1u);\n+        assert (next_power_of_two(2u) == 2u);\n+        assert (next_power_of_two(3u) == 4u);\n+        assert (next_power_of_two(4u) == 4u);\n+        assert (next_power_of_two(5u) == 8u);\n+        assert (next_power_of_two(6u) == 8u);\n+        assert (next_power_of_two(7u) == 8u);\n+        assert (next_power_of_two(8u) == 8u);\n+        assert (next_power_of_two(9u) == 16u);\n+        assert (next_power_of_two(10u) == 16u);\n+        assert (next_power_of_two(11u) == 16u);\n+        assert (next_power_of_two(12u) == 16u);\n+        assert (next_power_of_two(13u) == 16u);\n+        assert (next_power_of_two(14u) == 16u);\n+        assert (next_power_of_two(15u) == 16u);\n+        assert (next_power_of_two(16u) == 16u);\n+        assert (next_power_of_two(17u) == 32u);\n+        assert (next_power_of_two(18u) == 32u);\n+        assert (next_power_of_two(19u) == 32u);\n+        assert (next_power_of_two(20u) == 32u);\n+        assert (next_power_of_two(21u) == 32u);\n+        assert (next_power_of_two(22u) == 32u);\n+        assert (next_power_of_two(23u) == 32u);\n+        assert (next_power_of_two(24u) == 32u);\n+        assert (next_power_of_two(25u) == 32u);\n+        assert (next_power_of_two(26u) == 32u);\n+        assert (next_power_of_two(27u) == 32u);\n+        assert (next_power_of_two(28u) == 32u);\n+        assert (next_power_of_two(29u) == 32u);\n+        assert (next_power_of_two(30u) == 32u);\n+        assert (next_power_of_two(31u) == 32u);\n+        assert (next_power_of_two(32u) == 32u);\n+        assert (next_power_of_two(33u) == 64u);\n+        assert (next_power_of_two(34u) == 64u);\n+        assert (next_power_of_two(35u) == 64u);\n+        assert (next_power_of_two(36u) == 64u);\n+        assert (next_power_of_two(37u) == 64u);\n+        assert (next_power_of_two(38u) == 64u);\n+        assert (next_power_of_two(39u) == 64u);\n     }\n \n     #[test]\n     fn test_overflows() {\n+        use uint;\n         assert (uint::max_value > 0u);\n         assert (uint::min_value <= 0u);\n         assert (uint::min_value + uint::max_value + 1u == 0u);\n     }\n \n     #[test]\n     fn test_div() {\n-        assert(uint::div_floor(3u, 4u) == 0u);\n-        assert(uint::div_ceil(3u, 4u)  == 1u);\n-        assert(uint::div_round(3u, 4u) == 1u);\n+        assert(div_floor(3u, 4u) == 0u);\n+        assert(div_ceil(3u, 4u)  == 1u);\n+        assert(div_round(3u, 4u) == 1u);\n     }\n \n     #[test]"}, {"sha": "e5719b599bd80baea04e8982d95d2bf571e01dee", "filename": "src/libcore/option.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -43,12 +43,12 @@ let unwrapped_msg = match msg {\n \n use cmp::{Eq,Ord};\n use kinds::Copy;\n-use option;\n-use ptr;\n-use str;\n use util;\n use num::Zero;\n \n+#[cfg(test)] use ptr;\n+#[cfg(test)] use str;\n+\n /// The option type\n #[deriving_eq]\n pub enum Option<T> {"}, {"sha": "2341ec33115a7f9598ea839766884d14c21e4220", "filename": "src/libcore/os.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -27,7 +27,6 @@\n  */\n \n use cast;\n-use either;\n use io;\n use libc;\n use libc::{c_char, c_void, c_int, c_uint, size_t, ssize_t};\n@@ -38,7 +37,6 @@ use prelude::*;\n use ptr;\n use str;\n use task;\n-use task::TaskBuilder;\n use uint;\n use vec;\n "}, {"sha": "486ce44147a2d5f3e0a33b03b39d71313930ca38", "filename": "src/libcore/owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fowned.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -10,7 +10,7 @@\n \n //! Operations on unique pointer types\n \n-use cmp::{Eq, Ord};\n+#[cfg(notest)] use cmp::{Eq, Ord};\n \n #[cfg(notest)]\n impl<T:Eq> Eq for ~T {"}, {"sha": "a88c779d808d62527ab2002587027bafd4eacb04", "filename": "src/libcore/path.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -17,7 +17,6 @@ Cross-platform file path handling\n use cmp::Eq;\n use libc;\n use option::{None, Option, Some};\n-use ptr;\n use str;\n use to_str::ToStr;\n \n@@ -830,7 +829,6 @@ pub pure fn normalize(components: &[~str]) -> ~[~str] {\n pub mod windows {\n     use libc;\n     use option::{None, Option, Some};\n-    use to_str::ToStr;\n \n     #[inline(always)]\n     pub pure fn is_sep(u: u8) -> bool {"}, {"sha": "c16281706d71b3d6cd9a38ab189d44ef5d6dde8b", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -90,10 +90,8 @@ use kinds::Owned;\n use libc;\n use option;\n use option::{None, Option, Some, unwrap};\n-use pipes;\n use unstable::intrinsics;\n use ptr;\n-use unstable;\n use task;\n use vec;\n "}, {"sha": "bc2d285ad143e3afd22044ff8618472a3a858b03", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -11,14 +11,14 @@\n //! Unsafe pointer utility functions\n \n use cast;\n-use cmp::{Eq, Ord};\n use libc;\n use libc::{c_void, size_t};\n use unstable::intrinsics::{memmove32,memmove64};\n-use ptr;\n-use str;\n use sys;\n-use vec;\n+\n+#[cfg(test)] use vec;\n+#[cfg(test)] use str;\n+#[cfg(notest)] use cmp::{Eq, Ord};\n \n #[nolink]\n #[abi = \"cdecl\"]\n@@ -316,13 +316,13 @@ pub fn test() {\n         let mut v0 = ~[32000u16, 32001u16, 32002u16];\n         let mut v1 = ~[0u16, 0u16, 0u16];\n \n-        ptr::copy_memory(ptr::mut_offset(vec::raw::to_mut_ptr(v1), 1u),\n-                    ptr::offset(vec::raw::to_ptr(v0), 1u), 1u);\n+        copy_memory(mut_offset(vec::raw::to_mut_ptr(v1), 1u),\n+                    offset(vec::raw::to_ptr(v0), 1u), 1u);\n         assert (v1[0] == 0u16 && v1[1] == 32001u16 && v1[2] == 0u16);\n-        ptr::copy_memory(vec::raw::to_mut_ptr(v1),\n-                    ptr::offset(vec::raw::to_ptr(v0), 2u), 1u);\n+        copy_memory(vec::raw::to_mut_ptr(v1),\n+                    offset(vec::raw::to_ptr(v0), 2u), 1u);\n         assert (v1[0] == 32002u16 && v1[1] == 32001u16 && v1[2] == 0u16);\n-        ptr::copy_memory(ptr::mut_offset(vec::raw::to_mut_ptr(v1), 2u),\n+        copy_memory(mut_offset(vec::raw::to_mut_ptr(v1), 2u),\n                     vec::raw::to_ptr(v0), 1u);\n         assert (v1[0] == 32002u16 && v1[1] == 32001u16 && v1[2] == 32000u16);\n     }\n@@ -361,15 +361,15 @@ pub fn test_buf_len() {\n \n #[test]\n pub fn test_is_null() {\n-   let p: *int = ptr::null();\n+   let p: *int = null();\n    assert p.is_null();\n    assert !p.is_not_null();\n \n-   let q = ptr::offset(p, 1u);\n+   let q = offset(p, 1u);\n    assert !q.is_null();\n    assert q.is_not_null();\n \n-   let mp: *mut int = ptr::mut_null();\n+   let mp: *mut int = mut_null();\n    assert mp.is_null();\n    assert !mp.is_not_null();\n "}, {"sha": "d0910e7cefb319b85c89b5c1e1ca681429ca29b7", "filename": "src/libcore/repr.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frepr.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -15,29 +15,25 @@ More runtime type reflection\n */\n \n use cast::transmute;\n-use cast;\n use char;\n use dvec::DVec;\n use intrinsic;\n use intrinsic::{TyDesc, TyVisitor, visit_tydesc};\n-use io;\n use io::{Writer, WriterUtil};\n use libc::c_void;\n use managed;\n-use managed::raw::BoxHeaderRepr;\n use ptr;\n use reflect;\n use reflect::{MovePtr, MovePtrAdaptor, align};\n-use repr;\n use str;\n use sys;\n-use sys::TypeDesc;\n use to_str::ToStr;\n-use uint;\n use vec::UnboxedVecRepr;\n use vec::raw::{VecRepr, SliceRepr};\n use vec;\n \n+#[cfg(test)] use io;\n+\n pub use managed::raw::BoxRepr;\n \n /// Helpers\n@@ -581,7 +577,7 @@ struct P {a: int, b: float}\n fn test_repr() {\n \n     fn exact_test<T>(t: &T, e:&str) {\n-        let s : &str = io::with_str_writer(|w| repr::write_repr(w, t));\n+        let s : &str = io::with_str_writer(|w| write_repr(w, t));\n         if s != e {\n             error!(\"expected '%s', got '%s'\",\n                    e, s);"}, {"sha": "26d91777bd86a5d4ad5ff54ef336e15855188fae", "filename": "src/libcore/result.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -12,7 +12,6 @@\n \n // NB: transitionary, de-mode-ing.\n \n-use cmp;\n use cmp::Eq;\n use either;\n use either::Either;"}, {"sha": "80d7b4fffdbc2a899b2cda5bb18a6b573abe8038", "filename": "src/libcore/run.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -11,7 +11,6 @@\n //! Process spawning\n use cast;\n use io;\n-use io::ReaderUtil;\n use libc;\n use libc::{pid_t, c_void, c_int};\n use comm::{stream, SharedChan, GenericChan, GenericPort};\n@@ -452,7 +451,6 @@ pub fn waitpid(pid: pid_t) -> int {\n #[cfg(test)]\n mod tests {\n     use debug;\n-    use io::WriterUtil;\n     use option::{None, Some};\n     use os;\n     use run::{readclose, writeclose};"}, {"sha": "c2b62ad5dee8183d1c93f52de7905553289cf3b0", "filename": "src/libcore/stackwalk.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fstackwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fstackwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstackwalk.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -11,8 +11,6 @@\n #[doc(hidden)]; // FIXME #3538\n \n use cast::reinterpret_cast;\n-use ptr::offset;\n-use sys::size_of;\n \n pub type Word = uint;\n "}, {"sha": "471e1ae53963378750a6497008935a0dde2d2b3a", "filename": "src/libcore/str.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -20,18 +20,17 @@\n use at_vec;\n use cast;\n use char;\n-use cmp::{Eq, Ord, TotalOrd, Ordering, Less, Equal, Greater};\n+use cmp::{TotalOrd, Ordering, Less, Equal, Greater};\n use libc;\n-use libc::size_t;\n-use io::WriterUtil;\n use option::{None, Option, Some};\n use ptr;\n use str;\n-use to_str::ToStr;\n use u8;\n use uint;\n use vec;\n \n+#[cfg(notest)] use cmp::{Eq, Ord};\n+\n /*\n Section: Creating a string\n */"}, {"sha": "da2f68166ce2355da286968ec11d079b8a59435c", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -16,10 +16,8 @@ use gc;\n use io;\n use libc;\n use libc::{c_void, c_char, size_t};\n-use ptr;\n use repr;\n use str;\n-use vec;\n \n pub type FreeGlue = fn(*TypeDesc, *c_void);\n "}, {"sha": "d9fdd51fdcee2fdc9cc8d1100cc344c7254e97a8", "filename": "src/libcore/task/local_data.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Ftask%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Ftask%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Flocal_data.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -29,7 +29,6 @@ magic.\n use prelude::*;\n use task::local_data_priv::{local_get, local_pop, local_modify, local_set};\n use task::rt;\n-use task;\n \n /**\n  * Indexes a task-local data slot. The function's code pointer is used for"}, {"sha": "ff3c8386f0b9038b035bad46c5caf758a96030e3", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -33,22 +33,14 @@\n  * ~~~\n  */\n \n-use cast;\n use cell::Cell;\n-use cmp;\n use cmp::Eq;\n-use iter;\n-use libc;\n use option;\n use result::Result;\n use comm::{stream, Chan, GenericChan, GenericPort, Port, SharedChan};\n-use pipes;\n use prelude::*;\n-use ptr;\n use result;\n-use task::local_data_priv::{local_get, local_set};\n use task::rt::{task_id, sched_id, rust_task};\n-use task;\n use util;\n use util::replace;\n "}, {"sha": "74384ee3d93458af4340d633082aa3acab845b68", "filename": "src/libcore/task/spawn.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fspawn.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -77,14 +77,12 @@ use cell::Cell;\n use container::Map;\n use option;\n use comm::{Chan, GenericChan, GenericPort, Port, stream};\n-use pipes;\n use prelude::*;\n use unstable;\n use ptr;\n use hashmap::linear::LinearSet;\n use task::local_data_priv::{local_get, local_set};\n use task::rt::rust_task;\n-use task::rt::rust_closure;\n use task::rt;\n use task::{Failure, ManualThreads, PlatformThread, SchedOpts, SingleThreaded};\n use task::{Success, TaskOpts, TaskResult, ThreadPerCore, ThreadPerTask};"}, {"sha": "dec6cbeb201738db2c4415d6fc43e6806c6c4580", "filename": "src/libcore/to_str.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fto_str.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -14,9 +14,7 @@ The `ToStr` trait for converting to strings\n \n */\n \n-use kinds::Copy;\n use str;\n-use vec;\n \n pub trait ToStr {\n     pure fn to_str(&self) -> ~str;"}, {"sha": "ae53081c2dbf2f75f0487a597dbf8dca3ba245bd", "filename": "src/libcore/tuple.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -10,10 +10,11 @@\n \n //! Operations on tuples\n \n-use cmp::{Eq, Ord};\n use kinds::Copy;\n use vec;\n \n+#[cfg(notest)] use cmp::{Eq, Ord};\n+\n pub trait CopyableTuple<T, U> {\n     pure fn first() -> T;\n     pure fn second() -> U;"}, {"sha": "dcec424f29000f41f18655b5a1ea4265c8e1d544", "filename": "src/libcore/unstable.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Funstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Funstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -11,16 +11,12 @@\n #[doc(hidden)];\n \n use cast;\n-use iter;\n use libc;\n use option;\n use comm::{GenericChan, GenericPort};\n use prelude::*;\n-use ptr;\n-use result;\n use task;\n use task::{TaskBuilder, atomically};\n-use uint;\n \n #[path = \"unstable/at_exit.rs\"]\n pub mod at_exit;\n@@ -310,13 +306,8 @@ pub impl<T:Owned> Exclusive<T> {\n \n #[cfg(test)]\n pub mod tests {\n-    use core::option::{None, Some};\n-\n-    use cell::Cell;\n     use comm;\n-    use option;\n     use super::exclusive;\n-    use result;\n     use task;\n     use uint;\n "}, {"sha": "63e7613714d6ae263928edc3716420badb830243", "filename": "src/libcore/unstable/at_exit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Funstable%2Fat_exit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Funstable%2Fat_exit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fat_exit.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -10,13 +10,13 @@\n \n use sys;\n use cast;\n-use ptr;\n use task;\n-use uint;\n use vec;\n use rand;\n use libc::{c_void, size_t};\n \n+#[cfg(test)] use uint;\n+\n /**\n Register a function to be run during runtime shutdown.\n "}, {"sha": "9b2a205b67361d34cef3b340603be69e603a052d", "filename": "src/libcore/unstable/extfmt.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Funstable%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Funstable%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fextfmt.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -77,9 +77,7 @@ debug!(\"hello, %s!\", \"world\");\n */\n \n use cmp::Eq;\n-use option::{Some, None};\n use prelude::*;\n-use str;\n \n /*\n  * We have a 'ct' (compile-time) module that parses format strings into a\n@@ -98,7 +96,6 @@ pub mod ct {\n     use char;\n     use prelude::*;\n     use str;\n-    use vec;\n \n     #[deriving_eq]\n     pub enum Signedness { Signed, Unsigned, }"}, {"sha": "9a8b9bdde023dccad026ec762069546eef42d3a8", "filename": "src/libcore/unstable/finally.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Funstable%2Ffinally.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Funstable%2Ffinally.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Ffinally.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -24,7 +24,8 @@ do || {\n */\n \n use ops::Drop;\n-use task::{spawn, failing};\n+\n+#[cfg(test)] use task::failing;\n \n pub trait Finally<T> {\n     fn finally(&self, dtor: &fn()) -> T;"}, {"sha": "a0c2955673de1bcc6aeda5656ce05a55f8f9580f", "filename": "src/libcore/unstable/global.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Funstable%2Fglobal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Funstable%2Fglobal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fglobal.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -31,16 +31,16 @@ use kinds::Owned;\n use libc::{c_void, uintptr_t};\n use option::{Option, Some, None};\n use ops::Drop;\n-use pipes;\n use unstable::{Exclusive, exclusive};\n-use unstable::{SharedMutableState, shared_mutable_state};\n-use unstable::{get_shared_immutable_state};\n use unstable::at_exit::at_exit;\n use unstable::intrinsics::atomic_cxchg;\n use hashmap::linear::LinearMap;\n use sys::Closure;\n-use task::spawn;\n-use uint;\n+\n+#[cfg(test)] use unstable::{SharedMutableState, shared_mutable_state};\n+#[cfg(test)] use unstable::get_shared_immutable_state;\n+#[cfg(test)] use task::spawn;\n+#[cfg(test)] use uint;\n \n pub type GlobalDataKey<T> = &fn(v: T);\n "}, {"sha": "48462eabc381b7d23a8d8e83ca03f41a9a88cf91", "filename": "src/libcore/unstable/lang.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Funstable%2Flang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Funstable%2Flang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Flang.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -18,7 +18,8 @@ use sys;\n use unstable::exchange_alloc;\n use cast::transmute;\n \n-use gc::{cleanup_stack_for_failure, gc, Word};\n+#[allow(non_camel_case_types)]\n+pub type rust_task = c_void;\n \n #[cfg(target_word_size = \"32\")]\n pub const FROZEN_BIT: uint = 0x80000000;"}, {"sha": "7f42012346556eced1bda5483cf69510bd3fe6e8", "filename": "src/libcore/unstable/weak_task.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Funstable%2Fweak_task.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Funstable%2Fweak_task.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fweak_task.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -22,7 +22,6 @@ use cell::Cell;\n use comm::{GenericSmartChan, stream};\n use comm::{Port, Chan, SharedChan, GenericChan, GenericPort};\n use hashmap::linear::LinearMap;\n-use ops::Drop;\n use option::{Some, None, swap_unwrap};\n use unstable::at_exit::at_exit;\n use unstable::finally::Finally;"}, {"sha": "742eee7dc27607be83ac8af7ea55f37b315ab925", "filename": "src/libcore/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Futil.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -14,7 +14,6 @@ Miscellaneous helpers for common patterns.\n \n */\n \n-use cmp::Eq;\n use prelude::*;\n \n /// The identity function.\n@@ -102,6 +101,7 @@ pub fn unreachable() -> ! {\n     fail!(~\"internal error: entered unreachable code\");\n }\n \n+#[cfg(test)]\n mod tests {\n     use option::{None, Some};\n     use util::{NonCopyable, id, replace, swap};"}, {"sha": "f7676bd211ed5419a95bc9e656d50d3c60f9a86e", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -13,7 +13,6 @@\n #[warn(non_camel_case_types)];\n \n use container::{Container, Mutable};\n-use cast::transmute;\n use cast;\n use cmp::{Eq, Ord, TotalOrd, Ordering, Less, Equal, Greater};\n use iter::BaseIter;"}, {"sha": "30ef73bf6705a59cc417cc4b5677285ae8c27010", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -15,17 +15,14 @@ use driver::session::Session;\n use driver::session;\n use lib::llvm::llvm;\n use lib::llvm::{ModuleRef, mk_pass_manager, mk_target_data, True, False};\n-use lib::llvm::{PassManagerRef, FileType};\n use lib;\n use metadata::common::LinkMeta;\n-use metadata::filesearch;\n use metadata::{encoder, cstore};\n use middle::trans::common::CrateContext;\n use middle::ty;\n use util::ppaux;\n \n use core::char;\n-use core::cmp;\n use core::hash;\n use core::io::{Writer, WriterUtil};\n use core::libc::{c_int, c_uint, c_char};\n@@ -35,8 +32,6 @@ use core::ptr;\n use core::run;\n use core::str;\n use core::vec;\n-use std::oldmap::HashMap;\n-use std::sha1::sha1;\n use syntax::ast;\n use syntax::ast_map::{path, path_mod, path_name};\n use syntax::attr;\n@@ -175,11 +170,9 @@ pub mod write {\n     use lib::llvm::{False, True, ModuleRef, mk_pass_manager, mk_target_data};\n     use lib;\n \n-    use core::char;\n     use core::libc::{c_char, c_int, c_uint};\n     use core::path::Path;\n     use core::str;\n-    use core::vec;\n \n     pub fn is_object_or_assembly_or_exe(ot: output_type) -> bool {\n         if ot == output_type_assembly || ot == output_type_object ||"}, {"sha": "ce51bb9229e301ad304f76072a725977234605cc", "filename": "src/librustc/back/rpath.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Frpath.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -198,16 +198,19 @@ pub fn minimize_rpaths(rpaths: &[Path]) -> ~[Path] {\n \n #[cfg(unix)]\n mod test {\n+    // FIXME(#2119): the outer attribute should be #[cfg(unix, test)], then\n+    // these redundant #[cfg(test)] blocks can be removed\n+    #[cfg(test)]\n     use core::prelude::*;\n-\n+    #[cfg(test)]\n     use back::rpath::{get_absolute_rpath, get_install_prefix_rpath};\n+    #[cfg(test)]\n     use back::rpath::{get_relative_to, get_rpath_relative_to_output};\n+    #[cfg(test)]\n     use back::rpath::{minimize_rpaths, rpaths_to_flags};\n+    #[cfg(test)]\n     use driver::session;\n \n-    use core::os;\n-    use core::str;\n-\n     #[test]\n     pub fn test_rpaths_to_flags() {\n         let flags = rpaths_to_flags(~[Path(\"path1\"),"}, {"sha": "43d34beea48f739794661c038064496b12391ec2", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -23,23 +23,17 @@ use middle::{trans, freevars, kind, ty, typeck, lint, astencode};\n use middle;\n use util::ppaux;\n \n-use core::cmp;\n use core::int;\n use core::io::WriterUtil;\n use core::io;\n-use core::option;\n use core::os;\n-use core::result::{Ok, Err};\n use core::str;\n use core::vec;\n use std::getopts::groups::{optopt, optmulti, optflag, optflagopt, getopts};\n-use std::getopts::groups;\n use std::getopts::{opt_present};\n use std::getopts;\n-use std::oldmap::HashMap;\n use std;\n use syntax::ast;\n-use syntax::ast_map;\n use syntax::attr;\n use syntax::codemap;\n use syntax::diagnostic;"}, {"sha": "e03e6bc19b31a3b49c94a62e0c6183a883fda006", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -19,8 +19,6 @@ use metadata::filesearch;\n use metadata;\n use middle::lint;\n \n-use core::cmp;\n-use core::option;\n use syntax::ast::node_id;\n use syntax::ast::{int_ty, uint_ty, float_ty};\n use syntax::codemap::span;\n@@ -346,13 +344,10 @@ pub fn sess_os_to_meta_os(os: os) -> metadata::loader::os {\n \n #[cfg(test)]\n pub mod test {\n-    use core::prelude::*;\n-\n     use driver::session::{bin_crate, building_library, lib_crate};\n     use driver::session::{unknown_crate};\n \n     use syntax::ast;\n-    use syntax::ast_util;\n     use syntax::codemap;\n \n     pub fn make_crate_type_attr(+t: ~str) -> ast::attribute {"}, {"sha": "b53303c59835bc359ed19afe1326d8e6da6d24af", "filename": "src/librustc/front/core_inject.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Ffront%2Fcore_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Ffront%2Fcore_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fcore_inject.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -14,7 +14,6 @@ use driver::session::Session;\n \n use core::vec;\n use syntax::ast;\n-use syntax::ast_util::*;\n use syntax::attr;\n use syntax::codemap;\n use syntax::codemap::dummy_sp;"}, {"sha": "294e0a4a4b5e357ba2efc78e7bcc2327204d5630", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -12,15 +12,11 @@\n \n use core::prelude::*;\n \n-use driver::session::Session;\n use driver::session;\n use front::config;\n \n-use core::dvec::DVec;\n-use core::option;\n use core::vec;\n use syntax::ast_util::*;\n-use syntax::attr::attrs_contains_name;\n use syntax::attr;\n use syntax::codemap::{dummy_sp, span, ExpandedFrom, CallInfo, NameAndSpan};\n use syntax::codemap;"}, {"sha": "3af3c77f9fff5acdea0c6b66e64d4c1bf65a06c8", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -10,15 +10,10 @@\n \n use core::prelude::*;\n \n-use core::cast;\n-use core::cmp;\n-use core::int;\n-use core::io;\n use core::libc::{c_char, c_int, c_uint, c_longlong, c_ulonglong};\n use core::option;\n use core::ptr;\n use core::str;\n-use core::uint;\n use core::vec;\n use std::oldmap::HashMap;\n "}, {"sha": "c7c81d0b1c06c7df7de2fceb81668846dd6c85f0", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -14,19 +14,16 @@\n use core::prelude::*;\n \n use metadata::cstore;\n-use metadata::common::*;\n use metadata::decoder;\n use metadata::filesearch::FileSearch;\n use metadata::loader;\n \n use core::either;\n-use core::option;\n use core::vec;\n use syntax::attr;\n use syntax::codemap::{span, dummy_sp};\n use syntax::diagnostic::span_handler;\n use syntax::parse::token::ident_interner;\n-use syntax::print::pprust;\n use syntax::visit;\n use syntax::{ast, ast_util};\n use std::oldmap::HashMap;"}, {"sha": "8ccf2e6d0030cc86b48b94ae10f4fa208bae9beb", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -22,14 +22,9 @@ use middle::{ty, resolve};\n use core::dvec::DVec;\n use core::vec;\n use reader = std::ebml::reader;\n-use std::ebml;\n-use std::oldmap::HashMap;\n use syntax::ast;\n use syntax::ast_map;\n-use syntax::codemap::dummy_sp;\n-use syntax::ast_util;\n use syntax::diagnostic::expect;\n-use syntax::diagnostic::span_handler;\n \n pub struct ProvidedTraitMethodInfo {\n     ty: ty::method,"}, {"sha": "3ef63b70aead9495c2f051acc615a140d1332eeb", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -14,14 +14,10 @@\n \n use core::prelude::*;\n \n-use metadata::creader;\n use metadata::cstore;\n use metadata::decoder;\n \n-use core::option;\n-use core::str;\n use core::vec;\n-use std::oldmap::HashMap;\n use std::oldmap;\n use std;\n use syntax::{ast, attr};"}, {"sha": "aa18c1eb450bdfd1086e5b3c129dac57a90315c4", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -20,13 +20,10 @@ use metadata::csearch;\n use metadata::cstore;\n use metadata::decoder;\n use metadata::tydecode::{parse_ty_data, parse_def_id, parse_bounds_data};\n-use metadata::tydecode::{parse_ident};\n use middle::{ty, resolve};\n-use util::ppaux::ty_to_str;\n \n-use core::cmp;\n-use core::dvec::DVec;\n use core::dvec;\n+use core::dvec::DVec;\n use core::hash::{Hash, HashUtil};\n use core::int;\n use core::io::WriterUtil;\n@@ -36,8 +33,6 @@ use core::str;\n use core::vec;\n use std::ebml::reader;\n use std::ebml;\n-use std::oldmap::HashMap;\n-use std::oldmap;\n use std::serialize::Decodable;\n use syntax::ast_map;\n use syntax::attr;"}, {"sha": "e22f7a4a8e2df1827dce7a18565c8ebcd239843b", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -14,24 +14,20 @@\n use core::prelude::*;\n \n use metadata::common::*;\n-use metadata::csearch;\n use metadata::cstore;\n use metadata::decoder;\n use metadata::tyencode;\n-use middle::resolve;\n use middle::ty::node_id_to_type;\n use middle::ty;\n use middle;\n use util::ppaux::ty_to_str;\n \n use core::dvec;\n use core::flate;\n-use core::float;\n use core::hash::{Hash, HashUtil};\n use core::int;\n use core::io::WriterUtil;\n use core::io;\n-use core::str::to_bytes;\n use core::str;\n use core::to_bytes::IterBytes;\n use core::uint;\n@@ -47,7 +43,6 @@ use syntax::ast_util::*;\n use syntax::attr;\n use syntax::diagnostic::span_handler;\n use syntax::parse::token::special_idents;\n-use syntax::print::pprust;\n use syntax::{ast_util, visit};\n use syntax::opt_vec::OptVec;\n use syntax::opt_vec;"}, {"sha": "5cd4c17b4ee1d97d9b84c98f5aeb9614b811ec08", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -18,14 +18,12 @@ use core::prelude::*;\n \n use middle::ty;\n \n-use core::io;\n use core::str;\n use core::uint;\n use core::vec;\n use syntax::ast;\n use syntax::ast::*;\n use syntax::codemap::{respan, dummy_sp};\n-use std::oldmap::HashMap;\n \n // Compact string representation for ty::t values. API ty_str &\n // parse_from_str. Extra parameters are for converting to/from def_ids in the"}, {"sha": "ccdd73053e054e5217b6e94f31b598ee163f793e", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -21,18 +21,13 @@ use metadata::tydecode::{DefIdSource, NominalType, TypeWithId, TypeParameter};\n use metadata::tyencode;\n use middle::freevars::freevar_entry;\n use middle::typeck::{method_origin, method_map_entry, vtable_res};\n-use middle::typeck::{vtable_origin};\n use middle::{ty, typeck, moves};\n use middle;\n use util::ppaux::ty_to_str;\n \n use core::{dvec, io, option, vec};\n-use std::ebml::reader::get_doc;\n use std::ebml::reader;\n-use std::ebml::writer::Encoder;\n use std::ebml;\n-use std::oldmap::HashMap;\n-use std::prettyprint;\n use std::serialize;\n use std::serialize::{Encodable, EncoderHelpers, DecoderHelpers};\n use std::serialize::Decodable;\n@@ -41,15 +36,14 @@ use syntax::ast_map;\n use syntax::ast_util;\n use syntax::codemap::span;\n use syntax::codemap;\n-use syntax::diagnostic;\n use syntax::fold::*;\n use syntax::fold;\n-use syntax::parse;\n-use syntax::print::pprust;\n-use syntax::visit;\n use syntax;\n use writer = std::ebml::writer;\n \n+#[cfg(test)] use syntax::parse;\n+#[cfg(test)] use syntax::print::pprust;\n+\n // Auxiliary maps of things to be encoded\n pub struct Maps {\n     mutbl_map: middle::borrowck::mutbl_map,\n@@ -1235,6 +1229,8 @@ fn mk_ctxt() -> fake_ext_ctxt {\n \n #[cfg(test)]\n fn roundtrip(in_item: Option<@ast::item>) {\n+    use std::prettyprint;\n+\n     let in_item = in_item.get();\n     let bytes = do io::with_bytes_writer |wr| {\n         let ebml_w = writer::Encoder(wr);"}, {"sha": "89700427d9674aadb9258883db410e8b7c03d45b", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -31,10 +31,7 @@ use middle::mem_categorization::{lp_comp, lp_deref, lp_local};\n use middle::ty;\n use util::ppaux::ty_to_str;\n \n-use core::cmp;\n-use core::dvec::DVec;\n use core::uint;\n-use core::vec;\n use std::oldmap::HashMap;\n use syntax::ast::{m_const, m_imm, m_mutbl};\n use syntax::ast;"}, {"sha": "1404c4db464c61ded46212b82a70db465feb581f", "filename": "src/librustc/middle/borrowck/gather_loans.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -26,7 +26,6 @@ use middle::borrowck::ReqMaps;\n use middle::borrowck::loan;\n use middle::mem_categorization::{cat_binding, cat_discr, cmt, comp_variant};\n use middle::mem_categorization::{mem_categorization_ctxt};\n-use middle::mem_categorization::{opt_deref_kind};\n use middle::pat_util;\n use middle::ty::{ty_region};\n use middle::ty;"}, {"sha": "412603016dcfe862b82e6db32e8be43a30a05d1d", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -226,31 +226,22 @@ Borrowck results in two maps.\n \n use core::prelude::*;\n \n-use middle::liveness;\n use middle::mem_categorization::*;\n use middle::region;\n use middle::ty;\n use middle::typeck;\n use middle::moves;\n use util::common::{indenter, stmt_set};\n-use util::ppaux::{expr_repr, note_and_explain_region};\n-use util::ppaux::{ty_to_str, region_to_str, explain_region};\n+use util::ppaux::note_and_explain_region;\n \n-use core::cmp;\n use core::dvec::DVec;\n use core::io;\n use core::result::{Result, Ok, Err};\n use core::to_bytes;\n-use std::list::{List, Cons, Nil};\n-use std::list;\n use std::oldmap::{HashMap, Set};\n use syntax::ast::{mutability, m_mutbl, m_imm, m_const};\n use syntax::ast;\n-use syntax::ast_map;\n-use syntax::ast_util;\n use syntax::codemap::span;\n-use syntax::print::pprust;\n-use syntax::visit;\n \n pub mod check_loans;\n pub mod gather_loans;"}, {"sha": "c7f2dd9cb51e634c7ecd116783d0a04cfd8f0cd6", "filename": "src/librustc/middle/borrowck/preserve.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fpreserve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fpreserve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fpreserve.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -27,7 +27,6 @@ use middle::mem_categorization::{region_ptr};\n use middle::ty;\n use util::common::indenter;\n \n-use syntax::ast::{m_const, m_imm, m_mutbl};\n use syntax::ast;\n \n pub enum PreserveCondition {"}, {"sha": "c5676dcfe184421c5f15ee541cffae0f647bbb2e", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -17,7 +17,6 @@ use middle::typeck;\n use util::ppaux;\n \n use core::option;\n-use std::oldmap::HashMap;\n use syntax::ast::*;\n use syntax::codemap;\n use syntax::{visit, ast_util, ast_map};"}, {"sha": "2f1dcd865695fa43e49697643307a057c8d2e87c", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -19,16 +19,13 @@ use middle::typeck::method_map;\n use middle::moves;\n use util::ppaux::ty_to_str;\n \n-use core::cmp;\n use core::option;\n use core::uint;\n use core::vec;\n-use std::oldmap::HashMap;\n use std::sort;\n use syntax::ast::*;\n use syntax::ast_util::{variant_def_ids, unguarded_pat, walk_pat};\n use syntax::codemap::{span, dummy_sp, spanned};\n-use syntax::print::pprust::pat_to_str;\n use syntax::visit;\n \n pub struct MatchCheckCtxt {"}, {"sha": "e54cf60495a19428a2feccf2b1a1002ca7d05196", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -14,7 +14,6 @@ use middle::resolve;\n use middle::ty;\n use middle;\n \n-use core::cmp;\n use core::float;\n use core::vec;\n use syntax::{ast, ast_map, ast_util, visit};"}, {"sha": "d6f0da6d7a3aaefb1397694f5d75040cb13cfe71", "filename": "src/librustc/middle/freevars.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffreevars.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -20,7 +20,6 @@ use core::option::*;\n use core::vec;\n use std::oldmap::*;\n use syntax::codemap::span;\n-use syntax::print::pprust::path_to_str;\n use syntax::{ast, ast_util, visit};\n \n // A vector of defs representing the free variables referred to in a function."}, {"sha": "2d5b73d1ec7ffd4b9d6ac9a1e6cc0f8f2bd4d168", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -12,12 +12,10 @@ use core::prelude::*;\n \n use middle::freevars::freevar_entry;\n use middle::freevars;\n-use middle::lint::{non_implicitly_copyable_typarams, implicit_copies};\n use middle::liveness;\n use middle::pat_util;\n use middle::ty;\n use middle::typeck;\n-use middle;\n use util::ppaux::{ty_to_str, tys_to_str};\n \n use core::option;"}, {"sha": "0f3051f60442d185b9b852ce5b30768450bbbe7e", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -25,7 +25,6 @@ use core::prelude::*;\n use driver::session::Session;\n use metadata::csearch::{each_lang_item, get_item_attrs};\n use metadata::cstore::{iter_crate_data};\n-use metadata::decoder::{dl_def, dl_field, dl_impl};\n use syntax::ast::{crate, def_fn, def_id, def_ty, lit_str, meta_item};\n use syntax::ast::{meta_list, meta_name_value, meta_word};\n use syntax::ast_util::{local_def};\n@@ -34,7 +33,6 @@ use syntax::visit::{visit_crate, visit_item};\n \n use core::ptr;\n use std::oldmap::HashMap;\n-use str_eq = core::str::eq;\n \n pub enum LangItem {\n     ConstTraitLangItem,         // 0"}, {"sha": "7f01ed02384a7abbea73dcb17e360fe4fcb28d82", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -12,7 +12,6 @@ use core::prelude::*;\n \n use driver::session::Session;\n use driver::session;\n-use middle::pat_util::{pat_bindings};\n use middle::ty;\n use util::ppaux::{ty_to_str};\n \n@@ -24,7 +23,6 @@ use core::i16;\n use core::i32;\n use core::i64;\n use core::int;\n-use core::io::WriterUtil;\n use core::str;\n use core::u8;\n use core::u16;\n@@ -35,7 +33,6 @@ use core::vec;\n use std::oldmap::{Map, HashMap};\n use std::oldmap;\n use std::smallintmap::SmallIntMap;\n-use syntax::ast_util::{path_to_ident};\n use syntax::attr;\n use syntax::codemap::span;\n use syntax::codemap;\n@@ -132,7 +129,7 @@ pub fn get_lint_dict() -> LintDict {\n          @LintSpec {\n             lint: unused_imports,\n             desc: \"imports that are never used\",\n-            default: allow\n+            default: warn\n          }),\n \n         (@~\"while_true\","}, {"sha": "2fd74e006a7cc2af2a73d2e5322d3e2fc41050d5", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -54,8 +54,6 @@ use middle::typeck;\n use util::ppaux::{ty_to_str, region_to_str};\n use util::common::indenter;\n \n-use core::cmp;\n-use core::to_bytes;\n use core::uint;\n use syntax::ast::{m_imm, m_const, m_mutbl};\n use syntax::ast;"}, {"sha": "df9b9aa137464ffb32bbd4b0a028e39878a023bc", "filename": "src/librustc/middle/pat_util.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fpat_util.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -11,12 +11,9 @@\n use core::prelude::*;\n \n use middle::resolve;\n-use middle::ty;\n \n use syntax::ast::*;\n use syntax::ast_util::{path_to_ident, walk_pat};\n-use syntax::fold;\n-use syntax::fold::*;\n use syntax::codemap::{span, respan};\n use std::oldmap::HashMap;\n "}, {"sha": "f8dcf6e2a9fceedde6ef1e019a1af7dc8179a94f", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -25,13 +25,9 @@ use middle::resolve;\n use middle::ty::{region_variance, rv_covariant, rv_invariant};\n use middle::ty::{rv_contravariant};\n use middle::ty;\n-use util::common::stmt_set;\n \n-use core::cmp;\n use core::dvec::DVec;\n use core::vec;\n-use std::list;\n-use std::list::list;\n use std::oldmap::HashMap;\n use syntax::ast_map;\n use syntax::codemap::span;"}, {"sha": "ca15418a83f9ea857b58cf39fad64a7eb8cd40ac", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -22,7 +22,6 @@ use middle::lint::{deny, allow, forbid, level, unused_imports, warn};\n use middle::lint::{get_lint_level, get_lint_settings_level};\n use middle::pat_util::{pat_bindings};\n \n-use core::cmp;\n use core::str;\n use core::vec;\n use syntax::ast::{RegionTyParamBound, TraitTyParamBound, _mod, add, arm};\n@@ -74,17 +73,12 @@ use syntax::visit::{default_visitor, fk_method, mk_vt, Visitor, visit_block};\n use syntax::visit::{visit_crate, visit_expr, visit_expr_opt, visit_fn};\n use syntax::visit::{visit_foreign_item, visit_item, visit_method_helper};\n use syntax::visit::{visit_mod, visit_ty, vt};\n-use syntax::opt_vec;\n use syntax::opt_vec::OptVec;\n \n use core::dvec::DVec;\n-use core::managed::ptr_eq;\n use core::option::{Some, get, is_some, is_none};\n use core::str::{connect, split_str};\n-use core::vec::pop;\n-use std::list::{Cons, List, Nil};\n use std::oldmap::HashMap;\n-use str_eq = core::str::eq;\n \n // Definition mapping\n pub type DefMap = HashMap<node_id,def>;"}, {"sha": "79e90d93ac8dbaf79ca648e7d94c30e614de5663", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -26,10 +26,6 @@\n use core::prelude::*;\n \n use back::link::{mangle_exported_name};\n-use back::link::{mangle_internal_name_by_path_and_seq};\n-use back::link::{mangle_internal_name_by_path};\n-use back::link::{mangle_internal_name_by_seq};\n-use back::link::{mangle_internal_name_by_type_only};\n use back::{link, abi, upcall};\n use driver::session;\n use driver::session::Session;\n@@ -41,7 +37,6 @@ use metadata::common::LinkMeta;\n use metadata::{csearch, cstore, decoder, encoder};\n use middle::astencode;\n use middle::borrowck::RootInfo;\n-use middle::pat_util::*;\n use middle::resolve;\n use middle::trans::_match;\n use middle::trans::base;\n@@ -66,17 +61,14 @@ use middle::trans::tvec;\n use middle::trans::type_of;\n use middle::trans::type_of::*;\n use middle::ty;\n-use middle::ty::arg;\n use util::common::indenter;\n use util::ppaux::{ty_to_str, ty_to_short_str};\n use util::ppaux;\n \n-use core::either;\n use core::hash;\n use core::int;\n use core::io;\n use core::libc::{c_uint, c_ulonglong};\n-use core::option::{is_none, is_some};\n use core::option;\n use core::uint;\n use std::oldmap::HashMap;\n@@ -86,11 +78,9 @@ use syntax::ast_map::{path, path_elt_to_str, path_mod, path_name};\n use syntax::ast_util::{def_id_of_def, local_def, path_to_ident};\n use syntax::attr;\n use syntax::codemap::span;\n-use syntax::diagnostic::expect;\n use syntax::parse::token::special_idents;\n use syntax::print::pprust::{expr_to_str, stmt_to_str, path_to_str};\n use syntax::visit;\n-use syntax::visit::vt;\n use syntax::{ast, ast_util, codemap, ast_map};\n \n pub struct icx_popper {"}, {"sha": "353109f7dd85193c104baf41648a14de3592d557", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -14,10 +14,9 @@ use lib::llvm::{Opcode, IntPredicate, RealPredicate, True, False};\n use lib::llvm::{ValueRef, TypeRef, BasicBlockRef, BuilderRef, ModuleRef};\n use lib;\n use middle::trans::common::*;\n-use middle::trans::machine::llsize_of_real;\n+use syntax::codemap::span;\n \n use core::prelude::*;\n-use core::cast::transmute;\n use core::cast;\n use core::libc::{c_uint, c_int, c_ulonglong};\n use core::libc;\n@@ -26,8 +25,6 @@ use core::ptr;\n use core::str;\n use core::vec;\n use std::oldmap::HashMap;\n-use syntax::codemap::span;\n-use syntax::codemap;\n \n pub fn terminate(cx: block, _: &str) {\n     unsafe {"}, {"sha": "54b10e2ad5c626f0f19ac28b73009166e1144bae", "filename": "src/librustc/middle/trans/cabi_x86_64.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -22,7 +22,6 @@ use core::cmp;\n use core::libc::c_uint;\n use core::option;\n use core::option::Option;\n-use core::ptr;\n use core::uint;\n use core::vec;\n "}, {"sha": "6d9de7b22ea217357d640fd4a91e1bb1f79cd82f", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -39,14 +39,12 @@ use middle::trans::inline;\n use middle::trans::meth;\n use middle::trans::monomorphize;\n use middle::trans::type_of;\n-use middle::ty::ty_to_str;\n use middle::ty;\n use middle::typeck;\n use util::common::indenter;\n \n use syntax::ast;\n use syntax::ast_map;\n-use syntax::print::pprust::{expr_to_str, stmt_to_str, path_to_str};\n use syntax::visit;\n \n // Represents a (possibly monomorphized) top-level fn item or method"}, {"sha": "6e788bf302a8b9e0d7dfd02e1c584eef8da52494", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -12,7 +12,6 @@ use core::prelude::*;\n \n use back::abi;\n use back::link::{mangle_internal_name_by_path_and_seq};\n-use back::link::{mangle_internal_name_by_path};\n use lib::llvm::{llvm, ValueRef, TypeRef};\n use middle::moves;\n use middle::trans::base::*;\n@@ -27,14 +26,10 @@ use middle::trans::type_of::*;\n use middle::ty;\n use util::ppaux::ty_to_str;\n \n-use core::libc::c_uint;\n-use std::oldmap::HashMap;\n use syntax::ast;\n use syntax::ast_map::{path, path_mod, path_name};\n use syntax::ast_util;\n-use syntax::codemap::span;\n use syntax::parse::token::special_idents;\n-use syntax::print::pprust::expr_to_str;\n \n // ___Good to know (tm)__________________________________________________\n //"}, {"sha": "f3ac11771975bba4cabee179c47d91239b1a281e", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -24,7 +24,6 @@ use lib::llvm::{True, False, Bool};\n use lib::llvm::{llvm, TargetData, TypeNames, associate_type, name_has_type};\n use lib;\n use metadata::common::LinkMeta;\n-use metadata::{csearch};\n use middle::astencode;\n use middle::resolve;\n use middle::trans::base;\n@@ -34,7 +33,6 @@ use middle::trans::datum;\n use middle::trans::debuginfo;\n use middle::trans::expr;\n use middle::trans::glue;\n-use middle::trans::meth;\n use middle::trans::reachable;\n use middle::trans::shape;\n use middle::trans::type_of;\n@@ -45,7 +43,6 @@ use middle::typeck;\n use util::ppaux::{expr_repr, ty_to_str};\n \n use core::cast;\n-use core::cmp;\n use core::hash;\n use core::libc::c_uint;\n use core::ptr;\n@@ -58,7 +55,6 @@ use syntax::ast::ident;\n use syntax::ast_map::path;\n use syntax::codemap::span;\n use syntax::parse::token::ident_interner;\n-use syntax::print::pprust::expr_to_str;\n use syntax::{ast, ast_map};\n \n pub type namegen = @fn(~str) -> ident;"}, {"sha": "be6f1582e13de40311a8b67fa30bb25a8b9df421", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -17,7 +17,6 @@ use middle::trans::base::*;\n use middle::trans::build::*;\n use middle::trans::callee;\n use middle::trans::common::*;\n-use middle::trans::datum::*;\n use middle::trans::debuginfo;\n use middle::trans::expr;\n use middle::trans::type_of::*;"}, {"sha": "59897ff150241d0cc6f76cf424985a9b91bdd6b2", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -100,15 +100,12 @@ use middle::trans::glue;\n use middle::trans::tvec;\n use middle::trans::type_of;\n use middle::ty;\n-use middle::typeck;\n use util::common::indenter;\n use util::ppaux::ty_to_str;\n \n use core::cmp;\n-use core::option;\n use core::to_bytes;\n use core::uint;\n-use core::vec;\n use syntax::ast;\n use syntax::parse::token::special_idents;\n "}, {"sha": "da8e27ba4fffac90dff412bb98768387a9383456", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -13,9 +13,6 @@ use core::prelude::*;\n use driver::session;\n use lib::llvm::ValueRef;\n use lib::llvm::llvm;\n-use middle::pat_util::*;\n-use middle::trans::base;\n-use middle::trans::build::B;\n use middle::trans::common::*;\n use middle::trans::machine;\n use middle::trans::type_of;\n@@ -28,7 +25,6 @@ use core::option;\n use core::sys;\n use std::oldmap::HashMap;\n use std::oldmap;\n-use syntax::ast::Ty;\n use syntax::codemap::{span, CharPos};\n use syntax::parse::token::ident_interner;\n use syntax::{ast, codemap, ast_util, ast_map};"}, {"sha": "d41bf3571938efca6574e4d2040720ab8c7e6fc3", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -125,7 +125,6 @@ use back::abi;\n use lib;\n use lib::llvm::{ValueRef, TypeRef, llvm, True};\n use middle::borrowck::root_map_key;\n-use middle::resolve;\n use middle::trans::_match;\n use middle::trans::base;\n use middle::trans::base::*;\n@@ -153,7 +152,6 @@ use std::oldmap::HashMap;\n use syntax::print::pprust::{expr_to_str};\n use syntax::ast;\n use syntax::codemap;\n-use syntax::codemap::spanned;\n \n // Destinations\n "}, {"sha": "54ef40df684578c7e8c965a77eb436da3e8c0e2a", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -16,8 +16,6 @@ use driver::session::arch_x86_64;\n use driver::session::arch_arm;\n use driver::session::arch_mips;\n use lib::llvm::{SequentiallyConsistent, Acquire, Release, Xchg};\n-use lib::llvm::{Struct, Array, ModuleRef, CallConv, Attribute};\n-use lib::llvm::{StructRetAttribute, ByValAttribute};\n use lib::llvm::{llvm, TypeRef, ValueRef, Integer, Pointer, Float, Double};\n use lib;\n use middle::trans::base::*;\n@@ -33,14 +31,12 @@ use middle::trans::expr::{Dest, Ignore};\n use middle::trans::machine::llsize_of;\n use middle::trans::glue;\n use middle::trans::machine;\n-use middle::trans::shape;\n use middle::trans::type_of::*;\n use middle::trans::type_of;\n use middle::ty;\n use middle::ty::{FnSig, arg};\n use util::ppaux::ty_to_str;\n \n-use core::libc::c_uint;\n use syntax::codemap::span;\n use syntax::{ast, ast_util};\n use syntax::{attr, ast_map};"}, {"sha": "afbb5f09da3c63679c85342d9aac6e2192705e41", "filename": "src/librustc/middle/trans/inline.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -16,9 +16,6 @@ use middle::trans::base::{get_insn_ctxt};\n use middle::trans::base::{impl_owned_self, impl_self, no_self};\n use middle::trans::base::{trans_item, get_item_val, self_arg, trans_fn};\n use middle::trans::common::*;\n-use middle::trans::common;\n-use middle::trans::inline;\n-use middle::trans::monomorphize;\n use middle::ty;\n use util::ppaux::ty_to_str;\n "}, {"sha": "917960f7a27a729d2a4698b39d2b9e8687fbf3a4", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -12,7 +12,6 @@ use core::prelude::*;\n \n use back::{link, abi};\n use driver;\n-use lib::llvm::llvm::LLVMGetParam;\n use lib::llvm::llvm;\n use lib::llvm::{ValueRef, TypeRef};\n use lib;\n@@ -34,11 +33,8 @@ use middle::typeck;\n use util::common::indenter;\n use util::ppaux::{ty_to_str, tys_to_str};\n \n-use core::libc::c_uint;\n-use std::oldmap::HashMap;\n use syntax::ast_map::{path, path_mod, path_name, node_id_to_str};\n use syntax::ast_util;\n-use syntax::print::pprust::expr_to_str;\n use syntax::{ast, ast_map};\n \n /**"}, {"sha": "b4b2f6afd1f4c916cf095aa2a1ef9fc329295842", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -24,7 +24,6 @@ use middle::trans::datum;\n use middle::trans::foreign;\n use middle::trans::machine;\n use middle::trans::meth;\n-use middle::trans::shape;\n use middle::trans::type_of::type_of_fn_from_ty;\n use middle::trans::type_of;\n use middle::trans::type_use;"}, {"sha": "37e56e46f45f7e6fed49d166d4897beaf557ab13", "filename": "src/librustc/middle/trans/reachable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -16,7 +16,6 @@\n // reachable as well.\n \n \n-use driver::session::*;\n use middle::resolve;\n use middle::ty;\n use middle::typeck;"}, {"sha": "ac6cda3096cf4ef24fe7a527d396007b9065c871", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-use back::abi;\n use lib::llvm::{TypeRef, ValueRef};\n use middle::trans::base::*;\n use middle::trans::build::*;\n@@ -27,7 +26,6 @@ use util::ppaux::ty_to_str;\n \n use core::option::None;\n use core::vec;\n-use std::oldmap::HashMap;\n use syntax::ast::def_id;\n use syntax::ast;\n "}, {"sha": "9f10d4976a2e6b335c9280a33e2151a450e29808", "filename": "src/librustc/middle/trans/shape.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -12,28 +12,13 @@\n // This substitutes for the runtime tags used by e.g. MLs.\n \n \n-use back::abi;\n use lib::llvm::llvm;\n use lib::llvm::{True, False, ModuleRef, TypeRef, ValueRef};\n-use middle::trans::base;\n use middle::trans::common::*;\n-use middle::trans::machine::*;\n use middle::trans;\n-use middle::ty::field;\n-use middle::ty;\n-use util::ppaux::ty_to_str;\n \n-use core::dvec::DVec;\n-use core::option::is_some;\n use core::str;\n use core::vec;\n-use std::oldmap::HashMap;\n-use syntax::ast;\n-use syntax::codemap::dummy_sp;\n-use syntax::codemap::span;\n-use syntax::util::interner;\n-\n-use ty_ctxt = middle::ty::ctxt;\n \n pub struct Ctxt {\n     next_tag_id: u16,"}, {"sha": "e88d95b0ebb1ec99c3bd3454f9147f0a0f0b2a2d", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -31,8 +31,6 @@ use core::uint;\n use core::vec;\n use syntax::ast;\n use syntax::codemap;\n-use syntax::codemap::span;\n-use syntax::print::pprust::{expr_to_str};\n \n // Boxed vector types are in some sense currently a \"shorthand\" for a box\n // containing an unboxed vector. This expands a boxed vector type into such an"}, {"sha": "b8bca3e8346e351f4450c9025b4646ef131aad9c", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -14,14 +14,12 @@ use lib::llvm::{TypeRef};\n use middle::trans::base;\n use middle::trans::common::*;\n use middle::trans::common;\n-use middle::trans::expr;\n use middle::trans::machine;\n use middle::ty;\n use util::ppaux;\n \n use core::option::None;\n use core::vec;\n-use std::oldmap::HashMap;\n use syntax::ast;\n \n pub fn type_of_explicit_arg(ccx: @CrateContext, arg: ty::arg) -> TypeRef {"}, {"sha": "ee8bd81ac83841bf7760f399a0a68fc9d2d6315f", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -28,7 +28,6 @@\n // invasive.)\n \n \n-use metadata::csearch;\n use middle::freevars;\n use middle::trans::common::*;\n use middle::trans::inline;\n@@ -41,7 +40,6 @@ use core::uint;\n use core::vec;\n use std::list::{List, Cons, Nil};\n use std::list;\n-use std::oldmap::HashMap;\n use syntax::ast;\n use syntax::ast::*;\n use syntax::ast_map;"}, {"sha": "4ce2b780011ea495f1de584ff53d5145705d59c8", "filename": "src/librustc/middle/trans/uniq.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftrans%2Funiq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftrans%2Funiq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Funiq.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -19,8 +19,6 @@ use middle::trans::datum;\n use middle::trans::glue;\n use middle::ty;\n \n-use syntax::ast;\n-\n pub fn make_free_glue(bcx: block, vptrptr: ValueRef, box_ty: ty::t)\n     -> block {\n     let _icx = bcx.insn_ctxt(\"uniq::make_free_glue\");"}, {"sha": "847b5873b2702834f8ea9343814fd0903cf5fb24", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -10,7 +10,6 @@\n \n use core::prelude::*;\n \n-use driver::session::Session;\n use driver::session;\n use metadata::csearch;\n use metadata;"}, {"sha": "8a0bea62795bece725844490eed44bd62c0355cd", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -54,12 +54,9 @@\n \n use core::prelude::*;\n \n-use middle::pat_util::pat_id_map;\n use middle::ty::{arg, field, substs};\n use middle::ty::{ty_param_substs_and_ty};\n use middle::ty;\n-use middle::typeck::collect;\n-use middle::typeck::rscope::{anon_rscope, binding_rscope, empty_rscope};\n use middle::typeck::rscope::{in_anon_rscope, in_binding_rscope};\n use middle::typeck::rscope::{region_scope, type_rscope};\n use middle::typeck::{CrateCtxt, write_substs_to_tcx, write_ty_to_tcx};"}, {"sha": "f3b25af97820c90e82bfa01ce49e34bd019ec9cd", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -11,7 +11,6 @@\n use core::prelude::*;\n \n use middle::pat_util::{PatIdMap, pat_id_map, pat_is_binding, pat_is_const};\n-use middle::pat_util::{pat_is_variant_or_struct};\n use middle::ty;\n use middle::typeck::check::demand;\n use middle::typeck::check::{check_block, check_expr_has_type, FnCtxt};\n@@ -22,7 +21,6 @@ use middle::typeck::require_same_types;\n use core::vec;\n use std::oldmap::HashMap;\n use syntax::ast;\n-use syntax::ast_util::walk_pat;\n use syntax::ast_util;\n use syntax::codemap::span;\n use syntax::print::pprust;"}, {"sha": "b269e594395951d1816405c07cef62a4beb5a710", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -81,7 +81,6 @@ obtained the type `Foo`, we would never match this method.\n \n use core::prelude::*;\n \n-use middle::resolve::{Impl, MethodInfo};\n use middle::resolve;\n use middle::ty::*;\n use middle::ty;\n@@ -90,7 +89,6 @@ use middle::typeck::check::{structurally_resolved_type};\n use middle::typeck::check::vtable::VtableContext;\n use middle::typeck::check::vtable;\n use middle::typeck::check;\n-use middle::typeck::coherence::get_base_type_def_id;\n use middle::typeck::infer;\n use middle::typeck::{method_map_entry, method_origin, method_param};\n use middle::typeck::{method_self, method_static, method_trait, method_super};\n@@ -107,9 +105,6 @@ use syntax::ast::{sty_uniq, sty_static, node_id, by_copy, by_ref};\n use syntax::ast::{m_const, m_mutbl, m_imm};\n use syntax::ast;\n use syntax::ast_map;\n-use syntax::ast_map::node_id_to_str;\n-use syntax::codemap::dummy_sp;\n-use syntax::codemap::span;\n \n pub fn lookup(\n     fcx: @mut FnCtxt,"}, {"sha": "a8985ac512b9f68130377d4eaa4dff55869b6ba0", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -96,7 +96,6 @@ use middle::typeck::CrateCtxt;\n use middle::typeck::infer::{resolve_type, force_tvar};\n use middle::typeck::infer;\n use middle::typeck::rscope::{anon_rscope, binding_rscope, bound_self_region};\n-use middle::typeck::rscope::{empty_rscope, in_anon_rscope};\n use middle::typeck::rscope::{in_binding_rscope, region_scope, type_rscope};\n use middle::typeck::rscope;\n use middle::typeck::{isr_alist, lookup_def_ccx, method_map_entry};\n@@ -120,15 +119,13 @@ use syntax::ast::{provided, required, ty_i};\n use syntax::ast;\n use syntax::ast_map;\n use syntax::ast_util::{Private, Public, is_local, local_def};\n-use syntax::ast_util::{visibility_to_privacy};\n use syntax::ast_util;\n use syntax::codemap::{span, spanned, respan};\n use syntax::codemap;\n use syntax::parse::token::special_idents;\n use syntax::print::pprust;\n use syntax::visit;\n use syntax::opt_vec::OptVec;\n-use syntax::opt_vec;\n use syntax;\n \n pub mod _match;"}, {"sha": "93ab5c0947648cadae1477fca1c06f87b2f01e9c", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -33,7 +33,6 @@ use middle::freevars::get_freevars;\n use middle::pat_util::{pat_bindings, pat_is_binding};\n use middle::ty::{encl_region, re_scope};\n use middle::ty::{vstore_box, vstore_fixed, vstore_slice};\n-use middle::ty::{vstore_uniq};\n use middle::ty;\n use middle::typeck::check::FnCtxt;\n use middle::typeck::check::lookup_def;\n@@ -46,7 +45,6 @@ use syntax::ast::{ManagedSigil, OwnedSigil, BorrowedSigil};\n use syntax::ast::{def_arg, def_binding, def_local, def_self, def_upvar};\n use syntax::ast;\n use syntax::codemap::span;\n-use syntax::print::pprust;\n use syntax::visit;\n \n pub struct Rcx {"}, {"sha": "a5c64e7c8736b6f43a21149cee0a416ccad28c1c", "filename": "src/librustc/middle/typeck/check/regionmanip.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -22,7 +22,6 @@ use util::ppaux;\n use std::list::Cons;\n use syntax::ast;\n use syntax::codemap;\n-use syntax::print::pprust::{expr_to_str};\n \n // Helper functions related to manipulating region types.\n "}, {"sha": "da2b80364771ec9872d38264b3e57a848794e39d", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -10,7 +10,6 @@\n \n use core::prelude::*;\n \n-use middle::resolve;\n use middle::ty::{param_ty, substs};\n use middle::ty;\n use middle::typeck::check::{FnCtxt, impl_self_ty};\n@@ -33,7 +32,6 @@ use syntax::ast;\n use syntax::ast_util;\n use syntax::codemap::span;\n use syntax::print::pprust::expr_to_str;\n-use syntax::print::pprust;\n use syntax::visit;\n \n // vtable resolution looks for places where trait bounds are"}, {"sha": "00f757412f6af4ab318d4f46a961b1ade4c98f2b", "filename": "src/librustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -28,7 +28,6 @@ use util::ppaux;\n \n use core::result::{Result, Ok, Err};\n use core::vec;\n-use std::oldmap::HashMap;\n use syntax::ast;\n use syntax::codemap::span;\n use syntax::print::pprust::pat_to_str;"}, {"sha": "2f0ce944baf3d09ac169e9b53cca95dbb4d1139b", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -47,7 +47,6 @@ use syntax::ast;\n use syntax::ast_map::node_item;\n use syntax::ast_map;\n use syntax::ast_util::{def_id_of_def, local_def};\n-use syntax::attr;\n use syntax::codemap::{span, dummy_sp};\n use syntax::parse;\n use syntax::visit::{default_simple_visitor, default_visitor};\n@@ -59,10 +58,7 @@ use util::ppaux::ty_to_str;\n use core::dvec::DVec;\n use core::result::Ok;\n use core::hashmap::linear::LinearSet;\n-use core::uint::range;\n use core::uint;\n-use core::vec::{len, push};\n-use core::vec;\n use std::oldmap::HashMap;\n \n pub struct UniversalQuantificationResult {"}, {"sha": "39f9a41122a48665b4bc06181ef0ac52c9f80143", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -45,7 +45,6 @@ use middle::typeck::rscope;\n use middle::typeck::{CrateCtxt, lookup_def_tcx, no_params, write_ty_to_tcx};\n use util::common::{indenter, pluralize};\n use util::ppaux;\n-use util::ppaux::bound_to_str;\n \n use core::dvec;\n use core::option;\n@@ -60,7 +59,6 @@ use syntax::codemap::span;\n use syntax::codemap;\n use syntax::print::pprust::path_to_str;\n use syntax::visit;\n-use syntax::opt_vec;\n use syntax::opt_vec::OptVec;\n \n pub fn collect_item_types(ccx: @mut CrateCtxt, crate: @ast::crate) {"}, {"sha": "2390e73f16f9a72fbde74d049ca17cfb502f949c", "filename": "src/librustc/middle/typeck/infer/coercion.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -78,7 +78,6 @@ use middle::typeck::infer::to_str::InferStr;\n use middle::typeck::infer::resolve::try_resolve_tvar_shallow;\n use util::common::{indent, indenter};\n \n-use core::option;\n use syntax::ast::{m_const, m_imm, m_mutbl};\n use syntax::ast;\n "}, {"sha": "dd9bf9cac64bfd10929d8347cdd0db47d141a17c", "filename": "src/librustc/middle/typeck/infer/glb.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -13,7 +13,6 @@ use core::prelude::*;\n use middle::ty::RegionVid;\n use middle::ty;\n use middle::typeck::infer::combine::*;\n-use middle::typeck::infer::glb::Glb;\n use middle::typeck::infer::lattice::*;\n use middle::typeck::infer::lub::Lub;\n use middle::typeck::infer::sub::Sub;"}, {"sha": "b2f011e984f2f86667cc97f8dc64b7868e33f8e3", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -254,13 +254,10 @@ pub use middle::typeck::infer::resolve::{resolve_nested_tvar};\n pub use middle::typeck::infer::resolve::{resolve_rvar};\n \n use middle::ty::{TyVid, IntVid, FloatVid, RegionVid, Vid};\n-use middle::ty::{ty_int, ty_uint, get, terr_fn, TyVar, IntVar, FloatVar};\n use middle::ty;\n use middle::typeck::check::regionmanip::{replace_bound_regions_in_fn_sig};\n use middle::typeck::infer::coercion::Coerce;\n use middle::typeck::infer::combine::{Combine, CombineFields, eq_tys};\n-use middle::typeck::infer::glb::Glb;\n-use middle::typeck::infer::lub::Lub;\n use middle::typeck::infer::region_inference::{RegionVarBindings};\n use middle::typeck::infer::resolve::{resolver};\n use middle::typeck::infer::sub::Sub;\n@@ -271,20 +268,14 @@ use util::common::{indent, indenter};\n use util::ppaux::{bound_region_to_str, ty_to_str, mt_to_str};\n \n use core::cmp::Eq;\n-use core::dvec::DVec;\n use core::result::{Result, Ok, Err, map_vec, map_vec2, iter_vec2};\n use core::result;\n use core::vec;\n use std::list::Nil;\n-use std::oldmap::HashMap;\n use std::smallintmap::SmallIntMap;\n-use syntax::ast::{ret_style, purity};\n use syntax::ast::{m_const, m_imm, m_mutbl};\n-use syntax::ast::{unsafe_fn, impure_fn, pure_fn, extern_fn};\n use syntax::ast;\n-use syntax::codemap::dummy_sp;\n use syntax::codemap;\n-use syntax::ast_util;\n use syntax::codemap::span;\n \n pub mod macros;"}, {"sha": "7226872e12c0c1d4128c254b024c4d8e30fc3259", "filename": "src/librustc/middle/typeck/infer/region_inference.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -543,9 +543,7 @@ use middle::region;\n use middle::ty;\n use middle::ty::{Region, RegionVid, re_static, re_infer, re_free, re_bound};\n use middle::ty::{re_scope, ReVar, ReSkolemized, br_fresh};\n-use middle::typeck::infer::to_str::InferStr;\n use middle::typeck::infer::cres;\n-use syntax::codemap;\n use util::common::indenter;\n use util::ppaux::note_and_explain_region;\n \n@@ -556,10 +554,8 @@ use core::result::{Err, Ok, Result};\n use core::to_bytes;\n use core::uint;\n use core::vec;\n-use std::list::{List, Nil, Cons};\n use std::oldmap::HashMap;\n use syntax::codemap::span;\n-use syntax::codemap;\n \n enum Constraint {\n     ConstrainVarSubVar(RegionVid, RegionVid),"}, {"sha": "83ef61bbf49ec1a7841f78a81f7b3131fb6c7831", "filename": "src/librustc/middle/typeck/infer/resolve.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fresolve.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -60,7 +60,6 @@ use util::ppaux::ty_to_str;\n \n use syntax::ast;\n \n-use core::uint;\n use core::vec;\n \n pub const resolve_nested_tvar: uint = 0b0000000001;"}, {"sha": "f209116696e1060ea987c36602b4b09792447de2", "filename": "src/librustc/middle/typeck/infer/sub.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -19,7 +19,6 @@ use middle::typeck::infer::glb::Glb;\n use middle::typeck::infer::InferCtxt;\n use middle::typeck::infer::lub::Lub;\n use middle::typeck::infer::to_str::InferStr;\n-use middle::typeck::infer::unify::*;\n use util::common::{indent, indenter};\n use util::ppaux::bound_region_to_str;\n "}, {"sha": "a9ad54aea8b66ff3a36c70bf27db059b27c2ba08", "filename": "src/librustc/middle/typeck/infer/to_str.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -17,7 +17,6 @@ use middle::typeck::infer::{Bound, Bounds};\n use middle::typeck::infer::InferCtxt;\n use middle::typeck::infer::unify::{Redirect, Root, VarValue};\n use util::ppaux::{mt_to_str, ty_to_str};\n-use util::ppaux;\n \n use syntax::{ast, ast_util};\n "}, {"sha": "3cf5b4f4ef0df9f6944cf3c7a7af6fcb1d494771", "filename": "src/librustc/middle/typeck/infer/unify.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -9,17 +9,14 @@\n // except according to those terms.\n \n use core::prelude::*;\n-use core::result;\n use std::smallintmap::SmallIntMap;\n \n use middle::ty::{Vid, expected_found, IntVarValue};\n use middle::ty;\n use middle::typeck::infer::{Bound, Bounds, cres, uok, ures};\n-use middle::typeck::infer::combine::Combine;\n use middle::typeck::infer::InferCtxt;\n use middle::typeck::infer::to_str::InferStr;\n use syntax::ast;\n-use util::common::{indent, indenter};\n \n pub enum VarValue<V, T> {\n     Redirect(V),"}, {"sha": "b7d60817627fd88c0c461630f19e7cf98aeeae69", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -50,31 +50,19 @@ independently:\n \n use core::prelude::*;\n \n-use metadata::csearch;\n-use middle::pat_util::{pat_id_map, PatIdMap};\n use middle::resolve;\n-use middle::ty::{arg, field, node_type_table, mk_nil, ty_param_bounds_and_ty};\n use middle::ty::{ty_param_substs_and_ty, vstore_uniq};\n use middle::ty;\n-use util::common::{block_query, indent, indenter, loop_query};\n-use util::ppaux::{bound_region_to_str, vstore_to_str, expr_repr};\n-use util::ppaux::{ty_to_str, tys_to_str, region_to_str};\n use util::ppaux;\n \n-use core::dvec::DVec;\n-use core::result::Result;\n use core::result;\n use core::vec;\n use std::list::{List, Nil, Cons};\n use std::list;\n use std::oldmap::HashMap;\n use std::oldmap;\n-use syntax::ast::{provided, required};\n-use syntax::ast_map::node_id_to_str;\n-use syntax::ast_util::{local_def, split_trait_methods};\n use syntax::codemap::{span, spanned, respan};\n use syntax::print::pprust::*;\n-use syntax::visit;\n use syntax::{ast, ast_util, ast_map};\n \n #[path = \"check/mod.rs\"]"}, {"sha": "7b3fb02e1d8a7c49a08646c0036641a56296bf6c", "filename": "src/librustc/middle/typeck/rscope.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -16,7 +16,6 @@ use core::result::Result;\n use core::result;\n use syntax::ast;\n use syntax::codemap::span;\n-use syntax::parse::token::special_idents;\n \n pub trait region_scope {\n     pure fn anon_region(&self, span: span) -> Result<ty::Region, ~str>;"}, {"sha": "b204c458d659ee77f4025e435c7db37e45091acb", "filename": "src/librustc/rustc.rc", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rc?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -34,19 +34,6 @@ use core::*;\n extern mod std(vers = \"0.6\");\n extern mod syntax(vers = \"0.6\");\n \n-/*\n-Alternate names for some modules.\n-\n-I am using this to help extract metadata into its own crate. In metadata.rs\n-it redefines all these modules in order to gate access from metadata to the\n-rest of the compiler, then uses these to access the original implementation.\n-*/\n-use util_ = util;\n-use lib_ = lib;\n-use driver_ = driver;\n-use middle_ = middle;\n-use back_ = back;\n-\n pub mod middle {\n     pub mod trans {\n         pub mod macros;\n@@ -148,7 +135,6 @@ use core::io::ReaderUtil;\n use core::result::{Ok, Err};\n use std::getopts::{groups, opt_present};\n use std::getopts;\n-use std::oldmap::HashMap;\n use syntax::codemap;\n use syntax::diagnostic;\n \n@@ -318,7 +304,6 @@ fails without recording a fatal error then we've encountered a compiler\n bug and need to present an error.\n */\n pub fn monitor(+f: ~fn(diagnostic::Emitter)) {\n-    use core::cell::Cell;\n     use core::comm::*;\n     let (p, ch) = stream();\n     let ch = SharedChan(ch);"}, {"sha": "d3ffd2deb8141b64caced5b5efa64b6e81a79f95", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -13,12 +13,8 @@ use core::prelude::*;\n use syntax::ast;\n use syntax::codemap::{span};\n use syntax::visit;\n-use syntax::print;\n-use syntax;\n \n-use core::option;\n use core::str;\n-use core::vec;\n use std::oldmap::HashMap;\n \n pub fn indent<R>(op: fn() -> R) -> R {"}, {"sha": "6020aa52e3284330ebf2d8798ccd56afd825eeb9", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -12,8 +12,6 @@ use core::prelude::*;\n \n use middle::ty;\n use middle::ty::{arg, canon_mode};\n-use middle::ty::{bound_copy, bound_const, bound_durable, bound_owned,\n-        bound_trait};\n use middle::ty::{bound_region, br_anon, br_named, br_self, br_cap_avoid,\n                  br_fresh};\n use middle::ty::{ctxt, field, method};\n@@ -28,7 +26,6 @@ use middle::ty::{ty_ptr, ty_rec, ty_rptr, ty_self, ty_tup};\n use middle::ty::{ty_type, ty_uniq, ty_uint, ty_infer};\n use middle::ty::{ty_unboxed_vec};\n use metadata::encoder;\n-use syntax::codemap;\n use syntax::codemap::span;\n use syntax::print::pprust;\n use syntax::print::pprust::{path_to_str, mode_to_str};\n@@ -37,7 +34,6 @@ use syntax::ast_map;\n \n use core::str;\n use core::vec;\n-use std::oldmap::HashMap;\n \n pub fn note_and_explain_region(cx: ctxt,\n                                prefix: ~str,"}, {"sha": "9b5f476009b64dd778be5272b26f2718b93c6e33", "filename": "src/librustdoc/astsrv.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fastsrv.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -20,25 +20,15 @@ non-sendableness.\n use core::prelude::*;\n \n use parse;\n-use util;\n \n use core::cell::Cell;\n use core::comm::{stream, Chan, SharedChan, Port};\n-use core::vec;\n-use core::ops::Drop;\n-use rustc::back::link;\n use rustc::driver::driver;\n use rustc::driver::session::Session;\n use rustc::driver::session::{basic_options, options};\n-use rustc::driver::session;\n use rustc::front;\n-use rustc::metadata::filesearch;\n-use std::oldmap::HashMap;\n use syntax::ast;\n use syntax::ast_map;\n-use syntax::codemap;\n-use syntax::diagnostic::handler;\n-use syntax::diagnostic;\n use syntax;\n \n pub struct Ctxt {"}, {"sha": "1d1a5209cae38a08f58b9482cc251e0433f9baa8", "filename": "src/librustdoc/attr_parser.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Fattr_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Fattr_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_parser.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -18,12 +18,8 @@ an AST's attributes.\n use core::prelude::*;\n \n use core::str;\n-use core::tuple;\n-use core::vec;\n use syntax::ast;\n use syntax::attr;\n-use syntax::codemap;\n-use syntax;\n \n pub struct CrateAttrs {\n     name: Option<~str>\n@@ -38,10 +34,8 @@ mod test {\n \n     pub fn parse_attributes(source: ~str) -> ~[ast::attribute] {\n         use syntax::parse;\n-        use syntax::parse::parser;\n         use syntax::parse::attr::parser_attr;\n         use syntax::codemap;\n-        use syntax::diagnostic;\n \n         let parse_sess = syntax::parse::new_parse_sess(None);\n         let parser = parse::new_parser_from_source_str("}, {"sha": "16acec41881ce1f3938cf238d16be33b38dee1f2", "filename": "src/librustdoc/attr_pass.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_pass.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -31,8 +31,6 @@ use core::option;\n use core::vec;\n use syntax::ast;\n use syntax::ast_map;\n-use std::oldmap::HashMap;\n-use std::par;\n \n pub fn mk_pass() -> Pass {\n     Pass {"}, {"sha": "b4d990ccdd24cc1f799d98b966aaf82dd96f653c", "filename": "src/librustdoc/desc_to_brief_pass.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -27,7 +27,6 @@ use pass::Pass;\n use core::str;\n use core::vec;\n use core::util;\n-use std::par;\n \n pub fn mk_pass() -> Pass {\n     Pass {"}, {"sha": "ae45f54941730af75a24e714808e7537fa7a77a0", "filename": "src/librustdoc/doc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoc.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -13,9 +13,7 @@\n use core::prelude::*;\n \n use doc;\n-use pass::Pass;\n \n-use core::cmp;\n use core::option;\n use core::vec;\n "}, {"sha": "4ea67c1bff6e70ff024d7f22fe74779c155e3820", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -10,14 +10,11 @@\n \n use core::prelude::*;\n \n-use astsrv;\n use doc;\n-use extract;\n-use parse;\n-use pass::Pass;\n+#[cfg(test)] use extract;\n+#[cfg(test)] use parse;\n \n use core::vec;\n-use std::par;\n \n pub struct Fold<T> {\n     ctxt: T,"}, {"sha": "cfec1857df9288449bdf460000cf14005d33550b", "filename": "src/librustdoc/markdown_index_pass.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Fmarkdown_index_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Fmarkdown_index_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_index_pass.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -23,7 +23,6 @@ use markdown_writer;\n use pass::Pass;\n \n use core::str;\n-use std::par;\n \n pub fn mk_pass(config: config::Config) -> Pass {\n     Pass {"}, {"sha": "cb92e078fdd43433b6f2f01daa3c60c6e2f11718", "filename": "src/librustdoc/markdown_pass.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_pass.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -13,32 +13,22 @@\n use core::prelude::*;\n \n use astsrv;\n-use attr_pass;\n-use config;\n-use desc_to_brief_pass;\n use doc::ItemUtils;\n use doc;\n-use extract;\n-use fold;\n-use markdown_index_pass;\n use markdown_pass;\n use markdown_writer::Writer;\n use markdown_writer::WriterUtils;\n use markdown_writer::WriterFactory;\n-use markdown_writer;\n-use page_pass;\n use pass::Pass;\n-use path_pass;\n-use sectionalize_pass;\n use sort_pass;\n-use trim_pass;\n-use unindent_pass;\n+\n+#[cfg(test)] use config;\n+#[cfg(test)] use markdown_writer;\n+#[cfg(test)] use page_pass;\n \n use core::cell::Cell;\n-use core::iter;\n use core::str;\n use core::vec;\n-use std::par;\n use syntax;\n \n pub fn mk_pass(writer_factory: WriterFactory) -> Pass {"}, {"sha": "acd456e77be7da6084d68d5ac009c8581885328d", "filename": "src/librustdoc/markdown_writer.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_writer.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -11,12 +11,9 @@\n use core::prelude::*;\n \n use config;\n-use config::Config;\n use doc::ItemUtils;\n use doc;\n-use pass::Pass;\n \n-use core::io::ReaderUtil;\n use core::io;\n use core::libc;\n use core::os;\n@@ -27,7 +24,6 @@ use core::str;\n use core::task;\n use core::comm::*;\n use std::future;\n-use syntax;\n \n pub enum WriteInstr {\n     Write(~str),\n@@ -224,7 +220,7 @@ pub fn make_filename(\n \n #[test]\n fn should_use_markdown_file_name_based_off_crate() {\n-    let config = Config {\n+    let config = config::Config {\n         output_dir: Path(\"output/dir\"),\n         output_format: config::Markdown,\n         output_style: config::DocPerCrate,\n@@ -238,7 +234,7 @@ fn should_use_markdown_file_name_based_off_crate() {\n \n #[test]\n fn should_name_html_crate_file_name_index_html_when_doc_per_mod() {\n-    let config = Config {\n+    let config = config::Config {\n         output_dir: Path(\"output/dir\"),\n         output_format: config::PandocHtml,\n         output_style: config::DocPerMod,\n@@ -252,7 +248,7 @@ fn should_name_html_crate_file_name_index_html_when_doc_per_mod() {\n \n #[test]\n fn should_name_mod_file_names_by_path() {\n-    let config = Config {\n+    let config = config::Config {\n         output_dir: Path(\"output/dir\"),\n         output_format: config::PandocHtml,\n         output_style: config::DocPerMod,"}, {"sha": "46c02e5bfae8be37e8f20eec999d0ab8e0ed1ee8", "filename": "src/librustdoc/page_pass.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Fpage_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Fpage_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpage_pass.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -24,12 +24,9 @@ use doc;\n use fold::Fold;\n use fold;\n use pass::Pass;\n-use sort_pass;\n use util::NominalOp;\n-use util;\n \n use core::option;\n-use core::vec;\n use core::comm::*;\n use syntax::ast;\n "}, {"sha": "9f44e074bd21e16bc3255ee5f9ae9edc4133c581", "filename": "src/librustdoc/parse.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fparse.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -16,8 +16,6 @@ use rustc::driver::driver::{file_input, str_input};\n use rustc::driver::driver;\n use rustc::driver::session;\n use syntax::ast;\n-use syntax::codemap;\n-use syntax::diagnostic;\n use syntax::parse;\n \n pub fn from_file(file: &Path) -> @ast::crate {"}, {"sha": "b4d0cfe7c938f0aecd8848f7dd1a39822a20ba16", "filename": "src/librustdoc/pass.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Fpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Fpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpass.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -12,9 +12,10 @@ use core::prelude::*;\n \n use astsrv;\n use doc;\n-use extract;\n use time;\n \n+#[cfg(test)] use extract;\n+\n use core::vec;\n \n /// A single operation on the document model"}, {"sha": "2663ca8c8769adddd009f4710d2f14a16cdc8aa4", "filename": "src/librustdoc/path_pass.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Fpath_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Fpath_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpath_pass.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -15,11 +15,12 @@ use core::prelude::*;\n use astsrv;\n use doc::ItemUtils;\n use doc;\n-use extract;\n use fold::Fold;\n use fold;\n use pass::Pass;\n \n+#[cfg(test)] use extract;\n+\n use syntax::ast;\n \n pub fn mk_pass() -> Pass {"}, {"sha": "3755fd706c0599002282e32deb7ebdf80c9b1b1d", "filename": "src/librustdoc/prune_hidden_pass.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Fprune_hidden_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Fprune_hidden_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fprune_hidden_pass.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -18,9 +18,6 @@ use fold::Fold;\n use fold;\n use pass::Pass;\n \n-use core::vec;\n-use std::oldmap::HashMap;\n-\n pub fn mk_pass() -> Pass {\n     Pass {\n         name: ~\"prune_hidden\",\n@@ -66,6 +63,8 @@ fn is_hidden(srv: astsrv::Srv, doc: doc::ItemDoc) -> bool {\n \n #[test]\n fn should_prune_hidden_items() {\n+    use core::vec;\n+\n     let doc = test::mk_doc(~\"#[doc(hidden)] mod a { }\");\n     assert vec::is_empty(doc.cratemod().mods())\n }"}, {"sha": "85f25901ad110adc42b7acecef3088baed755a7d", "filename": "src/librustdoc/prune_private_pass.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Fprune_private_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Fprune_private_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fprune_private_pass.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -19,8 +19,6 @@ use fold;\n use pass::Pass;\n \n use core::util;\n-use core::vec;\n-use syntax::ast;\n \n pub fn mk_pass() -> Pass {\n     Pass {"}, {"sha": "9bd78e54b78bea2fa9dc83ce0e94e2924dbd436b", "filename": "src/librustdoc/rustdoc.rc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Frustdoc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Frustdoc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Frustdoc.rc?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -29,7 +29,6 @@ extern mod rustc(vers = \"0.6\");\n extern mod syntax(vers = \"0.6\");\n \n use core::*;\n-use std::par;\n \n pub mod pass;\n pub mod config;\n@@ -62,7 +61,6 @@ pub mod util;\n \n use doc::ItemUtils;\n use doc::Item;\n-use pass::Pass;\n use config::Config;\n \n pub fn main() {"}, {"sha": "91f352a2eacbe40bbd012eb652091b3147861919", "filename": "src/librustdoc/sectionalize_pass.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Fsectionalize_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Fsectionalize_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsectionalize_pass.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -13,17 +13,13 @@\n use core::prelude::*;\n \n use astsrv;\n-use attr_pass;\n use doc::ItemUtils;\n use doc;\n-use extract;\n use fold::Fold;\n use fold;\n use pass::Pass;\n \n use core::str;\n-use core::vec;\n-use std::par;\n \n pub fn mk_pass() -> Pass {\n     Pass {"}, {"sha": "b20faf44fa4e47a41474bca6c2878e60f9538569", "filename": "src/librustdoc/sort_item_name_pass.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Fsort_item_name_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Fsort_item_name_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsort_item_name_pass.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -10,10 +10,8 @@\n \n //! Sorts items by name\n \n-use astsrv;\n use doc::ItemUtils;\n use doc;\n-use extract;\n use pass::Pass;\n use sort_pass;\n \n@@ -26,6 +24,9 @@ pub fn mk_pass() -> Pass {\n \n #[test]\n fn test() {\n+    use astsrv;\n+    use extract;\n+\n     let source = ~\"mod z { } fn y() { }\";\n     do astsrv::from_str(source) |srv| {\n         let doc = extract::from_srv(srv.clone(), ~\"\");"}, {"sha": "8b39dcb1f8f9def6b280b673a4049be697f9deba", "filename": "src/librustdoc/sort_item_type_pass.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Fsort_item_type_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Fsort_item_type_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsort_item_type_pass.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -10,12 +10,7 @@\n \n //! Sorts items by type\n \n-use core::prelude::*;\n-\n-use astsrv;\n-use doc::ItemUtils;\n use doc;\n-use extract;\n use pass::Pass;\n use sort_pass;\n \n@@ -43,6 +38,9 @@ pub fn mk_pass() -> Pass {\n \n #[test]\n fn test() {\n+    use astsrv;\n+    use extract;\n+\n     let source =\n         ~\"mod imod { } \\\n          extern mod inmod {"}, {"sha": "c1e58f30c7a452c7a3e96ed769f30911fc343116", "filename": "src/librustdoc/sort_pass.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Fsort_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Fsort_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsort_pass.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -10,17 +10,15 @@\n \n //! A general sorting pass\n \n-use core::prelude::*;\n-\n use astsrv;\n-use doc::ItemUtils;\n use doc;\n-use extract;\n use fold::Fold;\n use fold;\n use pass::Pass;\n use util::NominalOp;\n \n+#[cfg(test)] use extract;\n+\n use std::sort;\n \n pub type ItemLtEqOp = @pure fn(v1: &doc::ItemTag, v2:  &doc::ItemTag) -> bool;"}, {"sha": "22bdc08a50ed969d5ef531bb7d26344ce167460e", "filename": "src/librustdoc/text_pass.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Ftext_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Ftext_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftext_pass.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -21,7 +21,6 @@ use pass::Pass;\n use util::NominalOp;\n \n use core::cell::Cell;\n-use std::par;\n \n pub fn mk_pass(name: ~str, op: @fn(&str) -> ~str) -> Pass {\n     let op = Cell(op);"}, {"sha": "eb63d9a52d08354a61e5f27679979312948a157b", "filename": "src/librustdoc/trim_pass.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Ftrim_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Ftrim_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftrim_pass.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -15,12 +15,9 @@ If the first paragraph of a long description is short enough then it\n is interpreted as the brief description.\n */\n \n-use doc::ItemUtils;\n-use doc;\n use pass::Pass;\n use text_pass;\n \n-use core::option::Some;\n use core::str;\n \n pub fn mk_pass() -> Pass {\n@@ -29,6 +26,8 @@ pub fn mk_pass() -> Pass {\n \n #[test]\n fn should_trim_text() {\n+    use core::option::Some;\n+\n     let doc = test::mk_doc(~\"#[doc = \\\" desc \\\"] \\\n                             mod m {\n                             }\");"}, {"sha": "c1e7675fd0e15179eb5d45efa84cb66faf8f945b", "filename": "src/librustdoc/tystr_pass.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftystr_pass.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -22,8 +22,6 @@ use fold;\n use pass::Pass;\n \n use core::vec;\n-use std::oldmap::HashMap;\n-use std::par;\n use syntax::ast;\n use syntax::print::pprust;\n use syntax::ast_map;"}, {"sha": "d5b9756faa5e227653965c30de3d1eead65837e3", "filename": "src/librustdoc/unindent_pass.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Funindent_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Funindent_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Funindent_pass.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -27,7 +27,6 @@ use text_pass;\n use core::str;\n use core::uint;\n use core::vec;\n-use std::par;\n \n pub fn mk_pass() -> Pass {\n     text_pass::mk_pass(~\"unindent\", unindent)"}, {"sha": "fe39ac6bc505cb58d5ceb555d97ea66b0fc467c9", "filename": "src/librustdoc/util.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustdoc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Futil.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -10,8 +10,6 @@\n \n use core::prelude::*;\n \n-use core::task;\n-\n // Just a named container for our op, so it can have impls\n pub struct NominalOp<T> {\n     op: T"}, {"sha": "3e1b0c03bd70272af993d82091e01a61f3e4dc21", "filename": "src/librusti/rusti.rc", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrusti%2Frusti.rc", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrusti%2Frusti.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rc?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -30,13 +30,7 @@ extern mod syntax(vers = \"0.6\");\n \n use core::*;\n use core::io::{ReaderUtil, WriterUtil};\n-use rustc::back;\n use rustc::driver::{driver, session};\n-use rustc::front;\n-use rustc::lib::llvm::llvm;\n-use rustc::metadata::{creader, filesearch};\n-use rustc::middle::{freevars, kind, lint, trans, ty, typeck};\n-use rustc::middle;\n use syntax::{ast, ast_util, codemap, diagnostic, fold, parse, print, visit};\n use syntax::ast_util::*;\n use syntax::parse::token;"}, {"sha": "57d456f1bbf0765c18377fcd65d299292970fe90", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use Listener;\n-\n use core::*;\n use core::hashmap::linear::LinearMap;\n use rustc::driver::{driver, session};"}, {"sha": "e29474f82effc0119a9b4c641d76989adc235df0", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -17,15 +17,12 @@ use sync;\n use sync::{Mutex, mutex_with_condvars, RWlock, rwlock_with_condvars};\n \n use core::cast;\n-use core::cell::Cell;\n-use core::pipes;\n use core::prelude::*;\n use core::unstable::{SharedMutableState, shared_mutable_state};\n use core::unstable::{clone_shared_mutable_state};\n use core::unstable::{get_shared_mutable_state, get_shared_immutable_state};\n use core::ptr;\n use core::task;\n-use core::util;\n \n /// As sync::condvar, a mechanism for unlock-and-descheduling and signalling.\n pub struct Condvar { is_mutex: bool, failed: &mut bool, cond: &sync::Condvar }\n@@ -449,9 +446,6 @@ mod tests {\n     use arc;\n \n     use core::cell::Cell;\n-    use core::option::{Some, None};\n-    use core::option;\n-    use core::pipes;\n     use core::task;\n     use core::vec;\n "}, {"sha": "c7b50bf89083a099c24184e8e174ad2d0604d579", "filename": "src/libstd/arena.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farena.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -32,7 +32,6 @@\n // overhead when initializing plain-old-data and means we don't need\n // to waste time running the destructors of POD.\n \n-use arena;\n use list;\n use list::{List, Cons, Nil};\n \n@@ -274,7 +273,7 @@ pub impl &Arena {\n \n #[test]\n fn test_arena_destructors() {\n-    let arena = arena::Arena();\n+    let arena = Arena();\n     for uint::range(0, 10) |i| {\n         // Arena allocate something with drop glue to make sure it\n         // doesn't leak.\n@@ -287,7 +286,7 @@ fn test_arena_destructors() {\n \n #[test] #[should_fail] #[ignore(cfg(windows))]\n fn test_arena_destructors_fail() {\n-    let arena = arena::Arena();\n+    let arena = Arena();\n     // Put some stuff in the arena.\n     for uint::range(0, 10) |i| {\n         // Arena allocate something with drop glue to make sure it"}, {"sha": "17b3cda07138dc592aae68bd206191ceac565890", "filename": "src/libstd/base64.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbase64.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::io::Reader;\n use core::iter;\n use core::str;\n use core::vec;"}, {"sha": "939f6960bf9aa6c43ff06b11ff35456103c8e51f", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use core::container::{Container, Mutable, Set};\n-use core::num::NumCast;\n use core::ops;\n use core::prelude::*;\n use core::uint;"}, {"sha": "e0336be59867a0c0748e640c1beed9892ac08278", "filename": "src/libstd/c_vec.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_vec.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -36,11 +36,9 @@\n  * still held if needed.\n  */\n \n-use core::libc;\n use core::option;\n use core::prelude::*;\n use core::ptr;\n-use core::task;\n \n /**\n  * The type representing a foreign chunk of memory"}, {"sha": "b203a53058d6de0b86dae7b62d71ff89d397d50f", "filename": "src/libstd/deque.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdeque.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -9,9 +9,7 @@\n // except according to those terms.\n \n use core::container::{Container, Mutable};\n-use core::cmp::Eq;\n use core::prelude::*;\n-use core::uint;\n use core::vec;\n \n const initial_capacity: uint = 32u; // 2^5"}, {"sha": "7ac58ae539f7ee5e3aa1f9c440b053f7871fe53c", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -8,13 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use serialize;\n-\n-use core::io;\n-use core::ops;\n use core::prelude::*;\n-use core::str;\n-use core::vec;\n \n // Simple Extensible Binary Markup Language (ebml) reader and writer on a\n // cursor model. See the specification here:"}, {"sha": "564d34f73d7f83935cc335ded5245982d8da7048", "filename": "src/libstd/flatpipes.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fflatpipes.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -51,10 +51,8 @@ block the scheduler thread, so will their pipes.\n use core::io;\n use core::comm::GenericChan;\n use core::comm::GenericPort;\n-use core::pipes;\n use core::prelude::*;\n use core::sys::size_of;\n-use core::uint;\n use core::vec;\n \n /**\n@@ -508,7 +506,6 @@ pub mod bytepipes {\n \n     use core::io::{Writer, Reader, ReaderUtil};\n     use core::comm::{Port, Chan};\n-    use core::pipes;\n     use core::prelude::*;\n \n     pub struct ReaderBytePort<R> {\n@@ -633,26 +630,18 @@ pub mod bytepipes {\n mod test {\n     use core::prelude::*;\n \n-    use DefaultEncoder = json::Encoder;\n-    use DefaultDecoder = json::Decoder;\n-\n     use flatpipes::{Flattener, Unflattener};\n-    use flatpipes::flatteners::*;\n     use flatpipes::bytepipes::*;\n     use flatpipes::pod;\n     use flatpipes::serial;\n     use io_util::BufReader;\n     use flatpipes::{BytePort, FlatChan, FlatPort};\n-    use net::ip;\n     use net::tcp::TcpSocketBuf;\n \n-    use core::dvec::DVec;\n     use core::int;\n     use core::io::{BytesReader, BytesWriter};\n-    use core::io;\n     use core::prelude::*;\n     use core::result;\n-    use core::sys;\n     use core::task;\n \n     #[test]\n@@ -773,7 +762,6 @@ mod test {\n \n         use core::cell::Cell;\n         use net::ip;\n-        use net::tcp::TcpSocket;\n         use net::tcp;\n         use uv;\n \n@@ -880,7 +868,6 @@ mod test {\n         use io_util::BufReader;\n \n         use core::io;\n-        use core::pipes;\n         use core::sys;\n         use core::task;\n "}, {"sha": "f105aacbc4f42bd1661a88bd2305b6b253af4fc6", "filename": "src/libstd/future.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -21,11 +21,8 @@\n  * ~~~\n  */\n \n-use core::cast::copy_lifetime;\n use core::cast;\n use core::cell::Cell;\n-use core::either::Either;\n-use core::option;\n use core::comm::{oneshot, ChanOne, PortOne, send_one, recv_one};\n use core::pipes::recv;\n use core::prelude::*;\n@@ -145,6 +142,7 @@ pub fn spawn<A:Owned>(blk: ~fn() -> A) -> Future<A> {\n }\n \n #[allow(non_implicitly_copyable_typarams)]\n+#[cfg(test)]\n pub mod test {\n     use core::prelude::*;\n "}, {"sha": "4e851005de5d0b48c4219d3c979c63738f6679a8", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -79,7 +79,6 @@ use core::cmp::Eq;\n use core::prelude::*;\n use core::result::{Err, Ok};\n use core::result;\n-use core::option;\n use core::option::{Some, None};\n use core::str;\n use core::vec;\n@@ -640,7 +639,6 @@ pub mod groups {\n mod tests {\n     use core::prelude::*;\n \n-    use opt = getopts;\n     use getopts::groups::OptGroup;\n     use getopts::*;\n "}, {"sha": "6839981d2017919234953f5408cb5b314798c9ec", "filename": "src/libstd/io_util.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Fio_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Fio_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio_util.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -10,7 +10,6 @@\n \n use core::io::{Reader, BytesReader};\n use core::io;\n-use core::prelude::*;\n \n pub struct BufReader {\n     buf: ~[u8],"}, {"sha": "043e0cafe61240a74f96ce3ac84825bf79a167bb", "filename": "src/libstd/list.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flist.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -11,7 +11,6 @@\n //! A standard linked list\n \n use core::cmp::Eq;\n-use core::option;\n use core::option::*;\n use core::prelude::*;\n use core::vec;"}, {"sha": "95e10cf5b12a6e321dbd181cfab465fcb25adb29", "filename": "src/libstd/net_ip.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Fnet_ip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Fnet_ip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_ip.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -16,7 +16,6 @@ use core::comm::{stream, SharedChan};\n use core::ptr;\n use core::result;\n use core::str;\n-use core::uint;\n use core::vec;\n \n use iotask = uv::iotask::IoTask;\n@@ -26,10 +25,8 @@ use sockaddr_in = uv::ll::sockaddr_in;\n use sockaddr_in6 = uv::ll::sockaddr_in6;\n use addrinfo = uv::ll::addrinfo;\n use uv_getaddrinfo_t = uv::ll::uv_getaddrinfo_t;\n-use uv_ip4_addr = uv::ll::ip4_addr;\n use uv_ip4_name = uv::ll::ip4_name;\n use uv_ip4_port = uv::ll::ip4_port;\n-use uv_ip6_addr = uv::ll::ip6_addr;\n use uv_ip6_name = uv::ll::ip6_name;\n use uv_ip6_port = uv::ll::ip6_port;\n use uv_getaddrinfo = uv::ll::getaddrinfo;"}, {"sha": "18f38e074c7cf528faf6bae3187512ed42bb17d2", "filename": "src/libstd/net_url.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_url.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -13,7 +13,6 @@\n #[allow(deprecated_mode)];\n \n use core::cmp::Eq;\n-use core::dvec::DVec;\n use core::from_str::FromStr;\n use core::io::{Reader, ReaderUtil};\n use core::io;\n@@ -25,8 +24,6 @@ use core::to_bytes;\n use core::to_str::ToStr;\n use core::to_str;\n use core::uint;\n-use core::util;\n-use core::vec;\n \n #[deriving_eq]\n struct Url {\n@@ -820,11 +817,8 @@ mod tests {\n     use core::prelude::*;\n \n     use net_url::*;\n-    use net_url::UserInfo;\n \n     use core::hashmap::linear::LinearMap;\n-    use core::result;\n-    use core::str;\n \n     #[test]\n     pub fn test_url_parse() {"}, {"sha": "faa26e24812226e49bbc43f069e6e6e3c53b609f", "filename": "src/libstd/oldmap.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Foldmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Foldmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foldmap.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -14,12 +14,9 @@ use core::container::{Container, Mutable, Map};\n use core::cmp::Eq;\n use core::hash::Hash;\n use core::io::WriterUtil;\n-use core::io;\n-use core::ops;\n use core::to_str::ToStr;\n use core::prelude::*;\n use core::to_bytes::IterBytes;\n-use core::uint;\n use core::vec;\n \n /// A convenience type to treat a hashmap as a set\n@@ -417,7 +414,6 @@ pub fn hash_from_vec<K:Eq + IterBytes + Hash + Const + Copy,V:Copy>(\n \n #[cfg(test)]\n mod tests {\n-    use core::option::None;\n     use core::uint;\n \n     use super::*;"}, {"sha": "ed02ea87dac4a1354083a215208f288715e3d983", "filename": "src/libstd/prettyprint.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Fprettyprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Fprettyprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprettyprint.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -10,7 +10,6 @@\n \n use serialize;\n \n-use core::io::Writer;\n use core::io::WriterUtil;\n use core::io;\n "}, {"sha": "ba107b340bc53482a31c26a0104788a2711a33a2", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -33,8 +33,6 @@\n  * * access to a character by index is logarithmic (linear in strings);\n  */\n \n-use core::cast;\n-use core::char;\n use core::option;\n use core::prelude::*;\n use core::str;"}, {"sha": "83f80f943820301721a74b85fbd9acd52b460872", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -15,9 +15,7 @@\n  * in std.\n  */\n \n-use core::cell::Cell;\n use core::option;\n-use core::pipes;\n use core::prelude::*;\n use core::unstable::{Exclusive, exclusive};\n use core::ptr;\n@@ -714,7 +712,6 @@ mod tests {\n     use core::cast;\n     use core::cell::Cell;\n     use core::option;\n-    use core::pipes;\n     use core::ptr;\n     use core::result;\n     use core::task;"}, {"sha": "c3b4435bc8f99283c13933b65d51848856f87eaf", "filename": "src/libstd/task_pool.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Ftask_pool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Ftask_pool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask_pool.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -11,9 +11,7 @@\n /// A task pool abstraction. Useful for achieving predictable CPU\n /// parallelism.\n \n-use core::io;\n use core::comm::{Chan, Port};\n-use core::pipes;\n use core::prelude::*;\n use core::task::{SchedMode, SingleThreaded};\n use core::task;"}, {"sha": "1e95f1aafa504887b0a94bca524c75cb3dc9e7b1", "filename": "src/libstd/tempfile.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftempfile.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -13,7 +13,6 @@\n use core::os;\n use core::prelude::*;\n use core::rand;\n-use core::str;\n \n pub fn mkdtemp(tmpdir: &Path, suffix: &str) -> Option<Path> {\n     let r = rand::Rng();"}, {"sha": "af826af9397743fa7a389833838198523476b2ba", "filename": "src/libstd/term.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Fterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Fterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fterm.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -10,11 +10,9 @@\n \n //! Simple ANSI color library\n \n-use core::i32;\n use core::io;\n use core::option;\n use core::os;\n-use core::str;\n use core::vec;\n \n // FIXME (#2807): Windows support."}, {"sha": "b5f568f19213a4ead853f24832b369878268dc03", "filename": "src/libstd/test.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -32,7 +32,6 @@ use core::option;\n use core::prelude::*;\n use core::result;\n use core::str;\n-use core::task::TaskBuilder;\n use core::task;\n use core::vec;\n "}, {"sha": "7a4da436d12f8c89b0a628720dbbdb60055bc582", "filename": "src/libstd/time.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -10,7 +10,6 @@\n \n use core::cmp::{Eq, Ord};\n use core::int;\n-use core::libc::{c_char, c_int, c_long, size_t, time_t};\n use core::i32;\n use core::io::{Reader, ReaderUtil};\n use core::io;\n@@ -894,8 +893,6 @@ mod tests {\n     use core::result;\n     use core::result::{Err, Ok};\n     use core::str;\n-    use core::u64;\n-    use core::uint;\n     use core::vec;\n \n     pub fn test_get_time() {"}, {"sha": "f0898e22400b3d15834e59d12aad315782673277", "filename": "src/libstd/timer.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftimer.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -21,7 +21,6 @@ use core::cast::transmute;\n use core::comm::{stream, Chan, SharedChan, Port, select2i};\n use core::prelude::*;\n use core::ptr;\n-use core;\n \n /**\n  * Wait for timeout period then send provided value over a channel"}, {"sha": "db3570941e8a340562f59b56779993cdac0ccae3", "filename": "src/libstd/uv_global_loop.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Fuv_global_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Fuv_global_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_global_loop.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -10,22 +10,16 @@\n \n //! A process-wide libuv event loop for library use.\n \n-use ll = uv_ll;\n use iotask = uv_iotask;\n-use get_gl = self::get;\n use uv_iotask::{IoTask, spawn_iotask};\n \n use core::clone::Clone;\n use core::comm::{Port, Chan, SharedChan, select2i};\n-use core::either::{Left, Right};\n-use core::libc;\n use core::option::{Some, None};\n-use core::str;\n use core::task::{task, SingleThreaded, spawn};\n use core::task;\n use core::unstable::global::{global_data_clone_create, global_data_clone};\n use core::unstable::weak_task::weaken_task;\n-use core::vec;\n \n /**\n  * Race-free helper to get access to a global task where a libuv\n@@ -126,7 +120,6 @@ mod test {\n     use get_gl = uv_global_loop::get;\n     use uv::iotask;\n     use uv::ll;\n-    use uv_global_loop::*;\n     use uv_iotask::IoTask;\n \n     use core::iter;"}, {"sha": "2414b1f9bfa271ac0c210e45718dca7b17b2527b", "filename": "src/libstd/uv_iotask.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Fuv_iotask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Fuv_iotask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_iotask.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -22,7 +22,6 @@ use core::libc;\n use core::comm::{stream, Port, Chan, SharedChan};\n use core::prelude::*;\n use core::ptr::addr_of;\n-use core::task::TaskBuilder;\n use core::task;\n \n /// Used to abstract-away direct interaction with a libuv loop."}, {"sha": "1dd7bfd75db8f01fd75aab08c8f281e609ba781c", "filename": "src/libstd/workcache.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibstd%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fworkcache.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -19,7 +19,6 @@ use core::cell::Cell;\n use core::cmp;\n use core::either::{Either, Left, Right};\n use core::io;\n-use core::option;\n use core::comm::{oneshot, PortOne, send_one};\n use core::pipes::recv;\n use core::prelude::*;"}, {"sha": "47948cc3ead893f695c7330f9c569ff5fe6138a8", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -13,9 +13,7 @@\n use codemap::{span, FileName, spanned};\n \n use core::cast;\n-use core::cmp;\n use core::option::{None, Option, Some};\n-use core::ptr;\n use core::task;\n use core::to_bytes;\n use core::to_str::ToStr;\n@@ -1336,15 +1334,15 @@ pub enum inlined_item {\n \n #[cfg(test)]\n mod test {\n-    use std;\n-    use codemap::*;\n-    use super::*;\n-\n     //are asts encodable?\n \n     // it looks like this *will* be a compiler bug, after\n     // I get deriving_eq for crates into incoming :)\n     /*\n+    use std;\n+    use codemap::*;\n+    use super::*;\n+\n     #[test] fn check_asts_encodable() {\n         let bogus_span = span {lo:BytePos(10),\n                                hi:BytePos(20),"}, {"sha": "3001fe8069c93cf85e96f7eb6c71901b6f8fe6f3", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -23,11 +23,8 @@ use print::pprust;\n use visit;\n \n use core::cmp;\n-use core::either;\n use core::str;\n use core::vec;\n-use std::oldmap::HashMap;\n-use std::oldmap;\n use std;\n \n pub enum path_elt {"}, {"sha": "b5ccef8eae0bbcf83f3a1f61328a6c90bdb41f17", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -18,7 +18,6 @@ use parse::token;\n use visit;\n use opt_vec;\n \n-use core::cmp;\n use core::int;\n use core::option;\n use core::str;"}, {"sha": "7739a862432ee95eff5fe2bf4f43e4cda84b9c9f", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -21,8 +21,6 @@ use parse::comments::{doc_comment_style, strip_doc_comment_decoration};\n \n use core::cmp;\n use core::either::Either;\n-use core::either;\n-use core::option;\n use core::vec;\n use core::hashmap::linear::LinearSet;\n use std;"}, {"sha": "232c57eb5a25afeeef9e663e52eb0d1e896b7b07", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -28,7 +28,6 @@ use core::dvec::DVec;\n use core::str;\n use core::to_bytes;\n use core::uint;\n-use core::vec;\n use std::serialize::{Encodable, Decodable, Encoder, Decoder};\n \n pub trait Pos {"}, {"sha": "a83dfa5538dd83e6d9b79b480131074d578b3edc", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -13,7 +13,6 @@ use core::prelude::*;\n use codemap::{Pos, span};\n use codemap;\n \n-use core::cmp;\n use core::io::WriterUtil;\n use core::io;\n use core::option;"}, {"sha": "644afaff37c5c3c2b7835bafd28e8f7dfeec7557", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -102,8 +102,6 @@ use opt_vec::OptVec;\n use ext::build;\n \n use core::vec;\n-use std::oldmap;\n-use std::oldmap::HashMap;\n \n // Transitional reexports so qquote can find the paths it is looking for\n mod syntax {\n@@ -1208,14 +1206,7 @@ fn mk_enum_deser_body(\n mod test {\n     use std::serialize::Encodable;\n     use std::serialize::Encoder;\n-    use core::dvec::*;\n     use util::testing::*;\n-    use core::io;\n-    use core::str;\n-    use core::option::Option;\n-    use core::option::Some;\n-    use core::option::None;\n-    use std;\n \n     // just adding the ones I want to test, for now:\n     #[deriving_eq]"}, {"sha": "23cabc099462f78f8f99d7b3808611fe822892f0", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -19,7 +19,6 @@ use ext;\n use parse;\n use parse::{parser, token};\n \n-use core::io;\n use core::vec;\n use core::hashmap::linear::LinearMap;\n \n@@ -504,7 +503,6 @@ impl <K: Eq + Hash + IterBytes ,V: Copy> MapChain<K,V>{\n \n #[cfg(test)]\n mod test {\n-    use super::*;\n     use super::MapChain;\n     use util::testing::check_equal;\n     use core::hashmap::linear::LinearMap;"}, {"sha": "a42564ff2ecf34be72d1883eaecc4ce7d2a7c1e5", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -16,10 +16,8 @@ use codemap::span;\n use ext::base::ext_ctxt;\n use ext::build;\n \n-use opt_vec;\n use opt_vec::OptVec;\n \n-use core::dvec;\n use core::option;\n \n pub struct Field {"}, {"sha": "07896236442c0e579e3694ce8067a95783fcedf2", "filename": "src/libsyntax/ext/deriving.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fext%2Fderiving.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fext%2Fderiving.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -28,7 +28,6 @@ use codemap::{span, spanned};\n use parse::token::special_idents::clownshoes_extensions;\n use ast_util;\n use opt_vec;\n-use opt_vec::OptVec;\n \n use core::dvec;\n use core::uint;"}, {"sha": "97c75e65e1d0530dbfbdb4aade8777b827aafe53", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -24,7 +24,6 @@ use parse::{parser, parse_item_from_source_str, new_parser_from_tts};\n \n use core::option;\n use core::vec;\n-use core::hashmap::LinearMap;\n \n pub fn expand_expr(extsbox: @mut SyntaxEnv,\n                    cx: ext_ctxt,"}, {"sha": "e6f0cdde8c1508aa92b91215dbddbaf39a03f0c6", "filename": "src/libsyntax/ext/pipes/ast_builder.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -17,9 +17,7 @@ use core::prelude::*;\n \n use ast::{ident, node_id};\n use ast;\n-use ast_util::{ident_to_path};\n use ast_util;\n-use attr;\n use codemap::{span, respan, dummy_sp, spanned};\n use codemap;\n use ext::base::{ext_ctxt, mk_ctxt};"}, {"sha": "df17c960ba21dc6ee0e9787ce5d82e5ec10e4d5d", "filename": "src/libsyntax/ext/pipes/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fext%2Fpipes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fext%2Fpipes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fmod.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -44,7 +44,6 @@ FIXME (#3072) - This is still incomplete.\n */\n \n use ast;\n-use ast::tt_delim;\n use codemap::span;\n use ext::base;\n use ext::base::ext_ctxt;"}, {"sha": "0725f2889499dd57ddd46c1611d0d22b37b87f51", "filename": "src/libsyntax/ext/pipes/parse_proto.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -11,7 +11,6 @@\n // Parsing pipes protocols from token trees.\n \n use ast_util;\n-use ext::pipes::pipec::*;\n use ext::pipes::proto::*;\n use parse::common::SeqSep;\n use parse::parser;"}, {"sha": "5ea9257d5836468ef17d53bc43bbbeae9b118dd5", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -11,19 +11,15 @@\n // A protocol compiler for Rust.\n \n use ast;\n-use ast::ident;\n use codemap::{dummy_sp, spanned};\n use ext::base::ext_ctxt;\n use ext::pipes::ast_builder::{append_types, ext_ctxt_ast_builder, path};\n use ext::pipes::ast_builder::{path_global};\n use ext::pipes::proto::*;\n use ext::quote::rt::*;\n-use parse::*;\n-use util::interner;\n use opt_vec;\n use opt_vec::OptVec;\n \n-use core::dvec::DVec;\n use core::prelude::*;\n use core::str;\n use core::to_str::ToStr;\n@@ -342,7 +338,7 @@ impl gen_init for protocol {\n         };\n \n         cx.parse_item(fmt!(\"pub fn init%s() -> (client::%s, server::%s)\\\n-                            { use core::pipes::HasBuffer; %s }\",\n+                            { pub use core::pipes::HasBuffer; %s }\",\n                            start_state.generics.to_source(cx),\n                            start_state.to_ty(cx).to_source(cx),\n                            start_state.to_ty(cx).to_source(cx),"}, {"sha": "329b3f59b1e3336768ab5b5ebe1b4aeed370e539", "filename": "src/libsyntax/ext/pipes/proto.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -15,7 +15,6 @@ use codemap::span;\n use ext::base::ext_ctxt;\n use ext::pipes::ast_builder::{append_types, ext_ctxt_ast_builder, path};\n \n-use core::cmp;\n use core::to_str::ToStr;\n \n #[deriving_eq]"}, {"sha": "49d5ed1d0cc88860fe83eec5197d5f6af05519a4", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use ast;\n-use attr;\n use codemap::{BytePos, Pos, span};\n use ext::base::ext_ctxt;\n use ext::base;\n@@ -19,7 +18,6 @@ use parse::token;\n use parse;\n \n use core::prelude::*;\n-use core::str;\n \n /**\n *\n@@ -34,7 +32,6 @@ use core::str;\n \n pub mod rt {\n     use ast;\n-    use codemap;\n     use ext::base::ext_ctxt;\n     use parse;\n     use print::pprust;"}, {"sha": "b53523f78a4228981dd277b20568dbbafe962b0b", "filename": "src/libsyntax/ext/trace_macros.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftrace_macros.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -10,7 +10,6 @@\n \n use core::prelude::*;\n \n-use ast::tt_delim;\n use ast;\n use codemap::span;\n use ext::base::ext_ctxt;"}, {"sha": "0e63ea3278e37946f4d78ede10fc103a37b50487", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -13,7 +13,6 @@ use ast;\n use ast::{matcher, match_tok, match_seq, match_nonterminal, ident};\n use codemap::{BytePos, mk_sp};\n use codemap;\n-use parse::common::*; //resolve bug?\n use parse::lexer::*; //resolve bug?\n use parse::ParseSess;\n use parse::parser::Parser;\n@@ -22,8 +21,6 @@ use parse::token;\n \n use core::dvec::DVec;\n use core::dvec;\n-use core::io;\n-use core::option;\n use core::option::{Option, Some, None};\n use core::str;\n use core::uint;"}, {"sha": "e5b7152bea24070d860a3f24ccea61124f098cee", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -26,7 +26,6 @@ use parse::token::{FAT_ARROW, SEMI, LBRACE, RBRACE, nt_matchers, nt_tt};\n use print;\n \n use core::io;\n-use std::oldmap::HashMap;\n \n pub fn add_new_extension(cx: ext_ctxt, sp: span, name: ident,\n                          arg: ~[ast::token_tree]) -> base::MacResult {"}, {"sha": "79264f7adf034ab4b151032e9435bc656d5846bb", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -12,7 +12,6 @@ use core::prelude::*;\n \n use ast;\n use ast::{token_tree, tt_delim, tt_tok, tt_seq, tt_nonterminal,ident};\n-use ast_util;\n use codemap::{span, dummy_sp};\n use diagnostic::span_handler;\n use ext::tt::macro_parser::{named_match, matched_seq, matched_nonterminal};\n@@ -22,7 +21,6 @@ use parse::lexer::TokenAndSpan;\n use core::option;\n use core::vec;\n use std;\n-use std::oldmap::HashMap;\n \n /* FIXME #2811: figure out how to have a uniquely linked stack, and change to\n    `~` */"}, {"sha": "bf8f03d4bf69ed929afe7bdef1e9f2ca4d5bcbda", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -8,17 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast;\n use codemap::spanned;\n use codemap::BytePos;\n use parse::common::*; //resolve bug?\n use parse::token;\n use parse::parser::Parser;\n \n-use core::either::{Either, Left, Right};\n-\n // a parser that can parse attributes.\n pub trait parser_attr {\n     fn parse_outer_attributes(&self) -> ~[ast::attribute];"}, {"sha": "4125a0bc3b4066d4d56ea261bb63586b89b98562", "filename": "src/libsyntax/parse/classify.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fparse%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fparse%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fclassify.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -14,7 +14,6 @@\n \n use ast;\n use codemap;\n-use ast_util::operator_prec;\n \n pub fn expr_requires_semi_to_be_stmt(e: @ast::expr) -> bool {\n     match e.node {"}, {"sha": "ca5c4564dd94ecdab356d3e7dc3ac38424ca57b7", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -19,7 +19,6 @@ use parse::lexer::{is_line_non_doc_comment, is_block_non_doc_comment};\n use parse::lexer;\n use parse::token;\n use parse;\n-use util::interner;\n \n use core::cmp;\n use core::io::ReaderUtil;"}, {"sha": "cdeb9b2f6476a849b3041d97234e24c31dac54bd", "filename": "src/libsyntax/parse/common.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fparse%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fparse%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcommon.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -17,8 +17,6 @@ use parse::parser::Parser;\n use parse::token;\n \n use core::option::{None, Option, Some};\n-use core::option;\n-use std::oldmap::HashMap;\n \n use opt_vec;\n use opt_vec::OptVec;"}, {"sha": "524f9b48dd5d8fbf4ef9556c449f9cc3104274f0", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -11,7 +11,6 @@\n use core::prelude::*;\n \n use ast;\n-use ast_util;\n use codemap::{BytePos, CharPos, CodeMap, Pos, span};\n use codemap;\n use diagnostic::span_handler;\n@@ -780,7 +779,6 @@ pub mod test {\n     use core::option::None;\n     use diagnostic;\n     use parse::token;\n-    use util::interner;\n     use util::testing::{check_equal, check_equal_ptr};\n \n     // represents a testing reader (incl. both reader and interner)"}, {"sha": "96a8f780934aeed2cbcbd854a96a8cd8236d09b6", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -20,13 +20,11 @@ use parse::attr::parser_attr;\n use parse::lexer::{reader, StringReader};\n use parse::parser::Parser;\n use parse::token::{ident_interner, mk_ident_interner};\n-use util::interner;\n \n use core::io;\n use core::option::{None, Option, Some};\n use core::path::Path;\n use core::result::{Err, Ok, Result};\n-use core::result;\n \n pub mod lexer;\n pub mod parser;"}, {"sha": "93d3d952cddf4930415ecdd898367f5c7102f909", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -26,8 +26,6 @@ use parse::parser::Parser;\n use parse::token::Token;\n use parse::token;\n \n-use core::cmp;\n-use core::option;\n use core::str;\n use core::to_bytes;\n "}, {"sha": "dd179171fce883c03a6687fca6064e97b933f101", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -57,7 +57,6 @@ use ast::{unnamed_field, unsafe_blk, unsafe_fn, variant, view_item};\n use ast::{view_item_, view_item_extern_mod, view_item_use};\n use ast::{view_path, view_path_glob, view_path_list, view_path_simple};\n use ast::{visibility, vstore, vstore_box, vstore_fixed, vstore_slice};\n-use ast::{vstore_uniq};\n use ast;\n use ast_util::{ident_to_path, operator_prec};\n use ast_util;\n@@ -72,7 +71,6 @@ use parse::lexer::TokenAndSpan;\n use parse::obsolete::{ObsoleteClassTraits, ObsoleteModeInFnType};\n use parse::obsolete::{ObsoleteLet, ObsoleteFieldTerminator};\n use parse::obsolete::{ObsoleteMoveInit, ObsoleteBinaryMove};\n-use parse::obsolete::{ObsoleteStructCtor, ObsoleteWith};\n use parse::obsolete::{ObsoleteSyntax, ObsoleteLowerCaseKindBounds};\n use parse::obsolete::{ObsoleteUnsafeBlock, ObsoleteImplSyntax};\n use parse::obsolete::{ObsoleteTraitBoundSeparator, ObsoleteMutOwnedPointer};\n@@ -82,16 +80,11 @@ use parse::token::{can_begin_expr, is_ident, is_ident_or_path};\n use parse::token::{is_plain_ident, INTERPOLATED, special_idents};\n use parse::token;\n use parse::{new_sub_parser_from_file, next_node_id, ParseSess};\n-use print::pprust::expr_to_str;\n-use util::interner::Interner;\n use opt_vec;\n use opt_vec::OptVec;\n \n-use core::cmp;\n use core::either::{Either, Left, Right};\n use core::either;\n-use core::result::Result;\n-use core::vec::push;\n use core::vec;\n use std::oldmap::HashMap;\n "}, {"sha": "60e6e4dc87ec7d48283d0ac1a241359770c2a868", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -10,11 +10,8 @@\n \n use core::prelude::*;\n \n-use core::cmp;\n-use core::dvec::DVec;\n use core::io::WriterUtil;\n use core::io;\n-use core::str;\n use core::vec;\n \n /*"}, {"sha": "ab65134fd0041f1b3400584577760b4278a7104b", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -13,15 +13,12 @@ use core::prelude::*;\n use ast::{RegionTyParamBound, TraitTyParamBound, required, provided};\n use ast;\n use ast_util;\n-use ast_util::{operator_prec};\n-use opt_vec;\n use opt_vec::OptVec;\n use attr;\n use codemap::{CodeMap, BytePos};\n use codemap;\n use diagnostic;\n use parse::classify::{expr_is_simple_block, expr_requires_semi_to_be_stmt};\n-use parse::classify::{stmt_ends_with_semi};\n use parse::token::ident_interner;\n use parse::{comments, lexer, token};\n use parse;\n@@ -34,7 +31,6 @@ use core::char;\n use core::dvec::DVec;\n use core::io;\n use core::option;\n-use core::str::{push_str, push_char};\n use core::str;\n use core::u64;\n use core::vec;"}, {"sha": "bd60be766fb0391520d97f38531194c542f9b4eb", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -18,9 +18,6 @@ use parse;\n use opt_vec;\n use opt_vec::OptVec;\n \n-use core::option;\n-use core::vec;\n-\n // Context-passing AST walker. Each overridden visit method has full control\n // over what happens with its node, it can do its own traversal of the node's\n // children (potentially passing in different contexts to each), call"}, {"sha": "1d96c04f1055966dc9f827b342024a61dfc4ea68", "filename": "src/test/compile-fail/borrowck-autoref-3261.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::either::*;\n enum X = Either<(uint,uint),extern fn()>;\n pub impl &X {\n     fn with(blk: fn(x: &Either<(uint,uint),extern fn()>)) {"}, {"sha": "07a68bfb0681894744116e66fb4cec1bd3240733", "filename": "src/test/compile-fail/borrowck-borrowed-uniq-rvalue.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -11,7 +11,6 @@\n //buggy.rs\n extern mod std;\n use std::oldmap::HashMap;\n-use std::oldmap;\n \n fn main() {\n     let buggy_map :HashMap<uint, &uint> ="}, {"sha": "18b4ce0640c41b3d6b44f3d821dc02b68cb7b7aa", "filename": "src/test/compile-fail/borrowck-move-by-capture.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Ftest%2Fcompile-fail%2Fborrowck-move-by-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Ftest%2Fcompile-fail%2Fborrowck-move-by-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-by-capture.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -1,9 +1,5 @@\n extern mod std;\n \n-use std::ebml::reader;\n-use std::ebml::writer;\n-use std::serialize;\n-\n fn main() {\n     let foo = ~3;\n     let _pfoo = &foo;"}, {"sha": "248bea2d9b55cb9b0f2fd98b116a1237c85cf31c", "filename": "src/test/compile-fail/issue-2611-3.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Ftest%2Fcompile-fail%2Fissue-2611-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Ftest%2Fcompile-fail%2Fissue-2611-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2611-3.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -13,7 +13,6 @@\n // we let an impl method can have more permissive bounds than the trait\n // method it's implementing, the return type might be less specific than\n // needed. Just punt and make it invariant.\n-use core::iter::BaseIter;\n \n trait A {\n   fn b<C:Copy + Const,D>(x: C) -> C;"}, {"sha": "cf644fc198caf09ff2852a52d8742cbf173729a9", "filename": "src/test/compile-fail/issue-2611-4.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -10,7 +10,6 @@\n \n // Tests that an impl method's bounds aren't *more* restrictive\n // than the trait method it's implementing\n-use core::iter::BaseIter;\n \n trait A {\n   fn b<C:Copy,D>(x: C) -> C;"}, {"sha": "b0e2878c46b832556c92af8912b89cd508f2b375", "filename": "src/test/compile-fail/issue-2611-5.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Ftest%2Fcompile-fail%2Fissue-2611-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Ftest%2Fcompile-fail%2Fissue-2611-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2611-5.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -10,7 +10,6 @@\n \n // Tests that ty params get matched correctly when comparing\n // an impl against a trait\n-use core::iter::BaseIter;\n \n trait A {\n   fn b<C:Copy,D>(x: C) -> C;"}, {"sha": "bee9596df727d48120947ee219d29f5646974959", "filename": "src/test/compile-fail/moves-based-on-type-cyclic-types-issue-4821.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-cyclic-types-issue-4821.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-cyclic-types-issue-4821.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-cyclic-types-issue-4821.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -13,8 +13,6 @@\n // See middle::ty::type_contents() for more information.\n \n extern mod std;\n-use core::cmp::Ord;\n-use core::option::swap_unwrap;\n \n struct List { key: int, next: Option<~List> }\n "}, {"sha": "44cd89ec0ea47dd203c0aa35a8611fb8087edd96", "filename": "src/test/compile-fail/regions-glb-free-free.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5bc90d2d3fb3e495b38c49c7cc96797795c72/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs?ref=75c5bc90d2d3fb3e495b38c49c7cc96797795c72", "patch": "@@ -11,8 +11,6 @@\n mod argparse {\n     extern mod std;\n \n-    use core::either::{Either, Left, Right};\n-\n     pub struct Flag {\n         name: &str,\n         desc: &str,"}]}