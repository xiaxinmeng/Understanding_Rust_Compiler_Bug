{"sha": "a795a0384b829457941e1dd0a8acb98c6ecb888e", "node_id": "C_kwDOAAsO6NoAKGE3OTVhMDM4NGI4Mjk0NTc5NDFlMWRkMGE4YWNiOThjNmVjYjg4OGU", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-12-18T14:46:30Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-12-18T14:46:30Z"}, "message": "Remove triple method from FunctionCx\n\nInstead use the default_call_conv field on TargetFrontendConfig to get\nthe default CallConv.", "tree": {"sha": "04ddfa38b801439751328bb4943ab455bbfbf10b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04ddfa38b801439751328bb4943ab455bbfbf10b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a795a0384b829457941e1dd0a8acb98c6ecb888e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a795a0384b829457941e1dd0a8acb98c6ecb888e", "html_url": "https://github.com/rust-lang/rust/commit/a795a0384b829457941e1dd0a8acb98c6ecb888e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a795a0384b829457941e1dd0a8acb98c6ecb888e/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdd0f8a3b559411650cb5ab4040d68033fa60d52", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdd0f8a3b559411650cb5ab4040d68033fa60d52", "html_url": "https://github.com/rust-lang/rust/commit/fdd0f8a3b559411650cb5ab4040d68033fa60d52"}], "stats": {"total": 22, "additions": 9, "deletions": 13}, "files": [{"sha": "72ebc84c1a3443d56f5a8c0a5d27658ac2bc6411", "filename": "src/abi/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a795a0384b829457941e1dd0a8acb98c6ecb888e/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a795a0384b829457941e1dd0a8acb98c6ecb888e/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=a795a0384b829457941e1dd0a8acb98c6ecb888e", "patch": "@@ -18,11 +18,11 @@ pub(crate) use self::returning::codegen_return;\n \n fn clif_sig_from_fn_abi<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    triple: &target_lexicon::Triple,\n+    default_call_conv: CallConv,\n     fn_abi: &FnAbi<'tcx, Ty<'tcx>>,\n ) -> Signature {\n     let call_conv = match fn_abi.conv {\n-        Conv::Rust | Conv::C => CallConv::triple_default(triple),\n+        Conv::Rust | Conv::C => default_call_conv,\n         Conv::X86_64SysV => CallConv::SystemV,\n         Conv::X86_64Win64 => CallConv::WindowsFastcall,\n         Conv::ArmAapcs\n@@ -55,7 +55,7 @@ pub(crate) fn get_function_sig<'tcx>(\n     assert!(!inst.substs.needs_infer());\n     clif_sig_from_fn_abi(\n         tcx,\n-        triple,\n+        CallConv::triple_default(triple),\n         &RevealAllLayoutCx(tcx).fn_abi_of_instance(inst, ty::List::empty()),\n     )\n }\n@@ -91,7 +91,7 @@ impl<'tcx> FunctionCx<'_, '_, 'tcx> {\n         returns: Vec<AbiParam>,\n         args: &[Value],\n     ) -> &[Value] {\n-        let sig = Signature { params, returns, call_conv: CallConv::triple_default(self.triple()) };\n+        let sig = Signature { params, returns, call_conv: self.target_config.default_call_conv };\n         let func_id = self.module.declare_function(name, Linkage::Import, &sig).unwrap();\n         let func_ref = self.module.declare_func_in_func(func_id, &mut self.bcx.func);\n         let call_inst = self.bcx.ins().call(func_ref, args);\n@@ -420,7 +420,7 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n             }\n \n             let (ptr, method) = crate::vtable::get_ptr_and_method_ref(fx, args[0].value, idx);\n-            let sig = clif_sig_from_fn_abi(fx.tcx, fx.triple(), &fn_abi);\n+            let sig = clif_sig_from_fn_abi(fx.tcx, fx.target_config.default_call_conv, &fn_abi);\n             let sig = fx.bcx.import_signature(sig);\n \n             (CallTarget::Indirect(sig, method), Some(ptr))\n@@ -440,7 +440,7 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n             }\n \n             let func = codegen_operand(fx, func).load_scalar(fx);\n-            let sig = clif_sig_from_fn_abi(fx.tcx, fx.triple(), &fn_abi);\n+            let sig = clif_sig_from_fn_abi(fx.tcx, fx.target_config.default_call_conv, &fn_abi);\n             let sig = fx.bcx.import_signature(sig);\n \n             (CallTarget::Indirect(sig, func), None)\n@@ -531,7 +531,7 @@ pub(crate) fn codegen_drop<'tcx>(\n                 let fn_abi =\n                     RevealAllLayoutCx(fx.tcx).fn_abi_of_instance(virtual_drop, ty::List::empty());\n \n-                let sig = clif_sig_from_fn_abi(fx.tcx, fx.triple(), &fn_abi);\n+                let sig = clif_sig_from_fn_abi(fx.tcx, fx.target_config.default_call_conv, &fn_abi);\n                 let sig = fx.bcx.import_signature(sig);\n                 fx.bcx.ins().call_indirect(sig, drop_fn, &[ptr]);\n             }"}, {"sha": "644204d10b8ed3a748754c88f8ffa6653616284b", "filename": "src/common.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a795a0384b829457941e1dd0a8acb98c6ecb888e/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a795a0384b829457941e1dd0a8acb98c6ecb888e/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=a795a0384b829457941e1dd0a8acb98c6ecb888e", "patch": "@@ -359,10 +359,6 @@ impl<'tcx> FunctionCx<'_, '_, 'tcx> {\n         crate::constant::codegen_const_value(self, const_loc, self.tcx.caller_location_ty())\n     }\n \n-    pub(crate) fn triple(&self) -> &target_lexicon::Triple {\n-        self.module.isa().triple()\n-    }\n-\n     pub(crate) fn anonymous_str(&mut self, msg: &str) -> Value {\n         let mut data_ctx = DataContext::new();\n         data_ctx.define(msg.as_bytes().to_vec().into_boxed_slice());"}, {"sha": "f4703b22ecbcf75182fa202b18879204e00f4f98", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a795a0384b829457941e1dd0a8acb98c6ecb888e/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a795a0384b829457941e1dd0a8acb98c6ecb888e/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=a795a0384b829457941e1dd0a8acb98c6ecb888e", "patch": "@@ -1067,7 +1067,7 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n         kw.Try, (v f, v data, v _catch_fn) {\n             // FIXME once unwinding is supported, change this to actually catch panics\n             let f_sig = fx.bcx.func.import_signature(Signature {\n-                call_conv: CallConv::triple_default(fx.triple()),\n+                call_conv: fx.target_config.default_call_conv,\n                 params: vec![AbiParam::new(fx.bcx.func.dfg.value_type(data))],\n                 returns: vec![],\n             });"}, {"sha": "99b5366e3499359470f5d946f05aca567db1998e", "filename": "src/trap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a795a0384b829457941e1dd0a8acb98c6ecb888e/src%2Ftrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a795a0384b829457941e1dd0a8acb98c6ecb888e/src%2Ftrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftrap.rs?ref=a795a0384b829457941e1dd0a8acb98c6ecb888e", "patch": "@@ -9,7 +9,7 @@ fn codegen_print(fx: &mut FunctionCx<'_, '_, '_>, msg: &str) {\n             \"puts\",\n             Linkage::Import,\n             &Signature {\n-                call_conv: CallConv::triple_default(fx.triple()),\n+                call_conv: fx.target_config.default_call_conv,\n                 params: vec![AbiParam::new(fx.pointer_type)],\n                 returns: vec![AbiParam::new(types::I32)],\n             },"}]}