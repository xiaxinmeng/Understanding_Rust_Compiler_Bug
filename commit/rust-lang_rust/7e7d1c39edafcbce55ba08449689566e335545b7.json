{"sha": "7e7d1c39edafcbce55ba08449689566e335545b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlN2QxYzM5ZWRhZmNiY2U1NWJhMDg0NDk2ODk1NjZlMzM1NTQ1Yjc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-10T14:58:10Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-13T10:04:26Z"}, "message": "improve comments:\n\n- comment for special handling of Shl/Shr\n- reference a PR", "tree": {"sha": "fe60bccd5db2d702570b815b9c48ee58ebcd05d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe60bccd5db2d702570b815b9c48ee58ebcd05d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e7d1c39edafcbce55ba08449689566e335545b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e7d1c39edafcbce55ba08449689566e335545b7", "html_url": "https://github.com/rust-lang/rust/commit/7e7d1c39edafcbce55ba08449689566e335545b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e7d1c39edafcbce55ba08449689566e335545b7/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55339f2eb7c186334216c35203f98540e8c8cb37", "url": "https://api.github.com/repos/rust-lang/rust/commits/55339f2eb7c186334216c35203f98540e8c8cb37", "html_url": "https://github.com/rust-lang/rust/commit/55339f2eb7c186334216c35203f98540e8c8cb37"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "e747eee30f90d2715a6b32c886a2a5bfe0725a1b", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e7d1c39edafcbce55ba08449689566e335545b7/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e7d1c39edafcbce55ba08449689566e335545b7/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=7e7d1c39edafcbce55ba08449689566e335545b7", "patch": "@@ -182,6 +182,7 @@ impl<'tcx> ConstEvalErr<'tcx> {\n         if must_error {\n             // The `message` makes little sense here, this is a more serious error than the\n             // caller thinks anyway.\n+            // See <https://github.com/rust-lang/rust/pull/63152>.\n             finish(struct_error(tcx, &err_msg), None);\n         } else {\n             // Regular case."}, {"sha": "952dede4a1527310a78b1dc4883b405047a8ea15", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7e7d1c39edafcbce55ba08449689566e335545b7/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e7d1c39edafcbce55ba08449689566e335545b7/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=7e7d1c39edafcbce55ba08449689566e335545b7", "patch": "@@ -527,6 +527,8 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             let (_res, overflow, _ty) = this.ecx.overflowing_unary_op(op, val)?;\n             Ok(overflow)\n         })? {\n+            // `AssertKind` only has an `OverflowNeg` variant, to make sure that is\n+            // appropriate to use.\n             assert_eq!(op, UnOp::Neg, \"Neg is the only UnOp that can overflow\");\n             self.report_panic_as_lint(source_info, PanicInfo::OverflowNeg)?;\n         }\n@@ -544,6 +546,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     ) -> Option<()> {\n         let r =\n             self.use_ecx(|this| this.ecx.read_immediate(this.ecx.eval_operand(right, None)?))?;\n+        // Check for exceeding shifts *even if* we cannot evaluate the LHS.\n         if op == BinOp::Shr || op == BinOp::Shl {\n             let left_bits = place_layout.size.bits();\n             let right_size = r.layout.size;\n@@ -564,7 +567,6 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         }\n \n         // The remaining operators are handled through `overflowing_binary_op`.\n-        // FIXME: Why do we not also do this for `Shr` and `Shl`?\n         if self.use_ecx(|this| {\n             let l = this.ecx.read_immediate(this.ecx.eval_operand(left, None)?)?;\n             let (_res, overflow, _ty) = this.ecx.overflowing_binary_op(op, l, r)?;\n@@ -603,16 +605,18 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         //   2. Working around bugs in other parts of the compiler\n         //        - In this case, we'll return `None` from this function to stop evaluation.\n         match rvalue {\n-            // Additional checking: if overflow checks are disabled (which is usually the case in\n-            // release mode), then we need to do additional checking here to give lints to the user\n-            // if an overflow would occur.\n+            // Additional checking: give lints to the user if an overflow would occur.\n+            // If `overflow_check` is set, running const-prop on the `Assert` terminators\n+            // will already generate the appropriate messages.\n             Rvalue::UnaryOp(op, arg) if !overflow_check => {\n                 trace!(\"checking UnaryOp(op = {:?}, arg = {:?})\", op, arg);\n                 self.check_unary_op(*op, arg, source_info)?;\n             }\n \n             // Additional checking: check for overflows on integer binary operations and report\n             // them to the user as lints.\n+            // If `overflow_check` is set, running const-prop on the `Assert` terminators\n+            // will already generate the appropriate messages.\n             Rvalue::BinaryOp(op, left, right) if !overflow_check => {\n                 trace!(\"checking BinaryOp(op = {:?}, left = {:?}, right = {:?})\", op, left, right);\n                 self.check_binary_op(*op, left, right, source_info, place_layout)?;"}]}