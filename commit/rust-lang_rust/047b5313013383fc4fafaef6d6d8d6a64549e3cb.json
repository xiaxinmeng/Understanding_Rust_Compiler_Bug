{"sha": "047b5313013383fc4fafaef6d6d8d6a64549e3cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0N2I1MzEzMDEzMzgzZmM0ZmFmYWVmNmQ2ZDhkNmE2NDU0OWUzY2I=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-06T08:52:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-06T08:52:02Z"}, "message": "Merge #8359\n\n8359: Add Lifetime to TyKind::Ref and DynTy r=flodiebold a=Veykril\n\nCC #8313\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "f4951c835dd6f4840ae02ba5c06d5da44aedae94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4951c835dd6f4840ae02ba5c06d5da44aedae94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/047b5313013383fc4fafaef6d6d8d6a64549e3cb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgbCEyCRBK7hj4Ov3rIwAAdHIIAFSBEyxm6bqW4xzW3n/ZNCIB\nTA+jMt64CCWZzFzXBCKHSBz8Bi2XPqVWbD8zT1PFwiZFEevR6TcshItK0ZARXChz\n+f/GHJYllRLrsYSjbMNfFQ6turT0IKS2p0kWYsvCReNd2YN2rRYBVk8QrBUue5GX\n+tCBny4kW2ROWSXHBNQbMrq7yCPOM9Q04eU7ZZJXRydWjCKQeWkrtBByEqie+vCH\n2WBAjzWgShxZI/HJ3aKiI5vggHoYHxZ2BpFclCNd0KJwDyMakxpZvZLgRrcqi8hK\nhGqxr1j65qgdFUw40hgPuTzxp3PHeKQGjZijPIJf0kCE2+Otk9hPQbxz8YBddRM=\n=lX63\n-----END PGP SIGNATURE-----\n", "payload": "tree f4951c835dd6f4840ae02ba5c06d5da44aedae94\nparent 4bc8a018302d53951ae855ba57d07095a16ef182\nparent 08dc69599efb4961319c0118b789d3abb264b7fa\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1617699122 +0000\ncommitter GitHub <noreply@github.com> 1617699122 +0000\n\nMerge #8359\n\n8359: Add Lifetime to TyKind::Ref and DynTy r=flodiebold a=Veykril\n\nCC #8313\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/047b5313013383fc4fafaef6d6d8d6a64549e3cb", "html_url": "https://github.com/rust-lang/rust/commit/047b5313013383fc4fafaef6d6d8d6a64549e3cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/047b5313013383fc4fafaef6d6d8d6a64549e3cb/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bc8a018302d53951ae855ba57d07095a16ef182", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bc8a018302d53951ae855ba57d07095a16ef182", "html_url": "https://github.com/rust-lang/rust/commit/4bc8a018302d53951ae855ba57d07095a16ef182"}, {"sha": "08dc69599efb4961319c0118b789d3abb264b7fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/08dc69599efb4961319c0118b789d3abb264b7fa", "html_url": "https://github.com/rust-lang/rust/commit/08dc69599efb4961319c0118b789d3abb264b7fa"}], "stats": {"total": 108, "additions": 66, "deletions": 42}, "files": [{"sha": "813cd1295f584b04d094937e98a1cbcf67acb0ea", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/047b5313013383fc4fafaef6d6d8d6a64549e3cb/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/047b5313013383fc4fafaef6d6d8d6a64549e3cb/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=047b5313013383fc4fafaef6d6d8d6a64549e3cb", "patch": "@@ -1888,9 +1888,10 @@ impl Type {\n                     substs.iter(&Interner).filter_map(|a| a.ty(&Interner)).any(go)\n                 }\n \n-                TyKind::Array(ty) | TyKind::Slice(ty) | TyKind::Raw(_, ty) | TyKind::Ref(_, ty) => {\n-                    go(ty)\n-                }\n+                TyKind::Array(ty)\n+                | TyKind::Slice(ty)\n+                | TyKind::Raw(_, ty)\n+                | TyKind::Ref(_, _, ty) => go(ty),\n \n                 TyKind::Scalar(_)\n                 | TyKind::Str\n@@ -2148,7 +2149,10 @@ impl Type {\n                     );\n                 }\n \n-                TyKind::Ref(_, ty) | TyKind::Raw(_, ty) | TyKind::Array(ty) | TyKind::Slice(ty) => {\n+                TyKind::Ref(_, _, ty)\n+                | TyKind::Raw(_, ty)\n+                | TyKind::Array(ty)\n+                | TyKind::Slice(ty) => {\n                     walk_type(db, &type_.derived(ty.clone()), cb);\n                 }\n "}, {"sha": "d7bf9fdf7e4c5a379c4a2a6ee16cf1230c71f291", "filename": "crates/hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/047b5313013383fc4fafaef6d6d8d6a64549e3cb/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/047b5313013383fc4fafaef6d6d8d6a64549e3cb/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=047b5313013383fc4fafaef6d6d8d6a64549e3cb", "patch": "@@ -315,7 +315,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n                 if pat_ty == match_expr_ty\n                     || match_expr_ty\n                         .as_reference()\n-                        .map(|(match_expr_ty, _)| match_expr_ty == pat_ty)\n+                        .map(|(match_expr_ty, ..)| match_expr_ty == pat_ty)\n                         .unwrap_or(false)\n                 {\n                     // If we had a NotUsefulMatchArm diagnostic, we could"}, {"sha": "22416c0cff1fcec3fdfd9bc28d490de48f1d88e0", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/047b5313013383fc4fafaef6d6d8d6a64549e3cb/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/047b5313013383fc4fafaef6d6d8d6a64549e3cb/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=047b5313013383fc4fafaef6d6d8d6a64549e3cb", "patch": "@@ -314,7 +314,7 @@ impl HirDisplay for Ty {\n                 t.hir_fmt(f)?;\n                 write!(f, \"; _]\")?;\n             }\n-            TyKind::Raw(m, t) | TyKind::Ref(m, t) => {\n+            TyKind::Raw(m, t) | TyKind::Ref(m, _, t) => {\n                 let ty_display =\n                     t.into_displayable(f.db, f.max_size, f.omit_verbose_types, f.display_target);\n "}, {"sha": "d6c48870ad3b50dce3961f0b2ebe1b9ada602b50", "filename": "crates/hir_ty/src/infer/coerce.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/047b5313013383fc4fafaef6d6d8d6a64549e3cb/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/047b5313013383fc4fafaef6d6d8d6a64549e3cb/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs?ref=047b5313013383fc4fafaef6d6d8d6a64549e3cb", "patch": "@@ -81,7 +81,7 @@ impl<'a> InferenceContext<'a> {\n             // `&T` -> `*const T`\n             // `&mut T` -> `*mut T`/`*const T`\n             (TyKind::Ref(.., substs), &TyKind::Raw(m2 @ Mutability::Not, ..))\n-            | (TyKind::Ref(Mutability::Mut, substs), &TyKind::Raw(m2, ..)) => {\n+            | (TyKind::Ref(Mutability::Mut, _, substs), &TyKind::Raw(m2, ..)) => {\n                 from_ty = TyKind::Raw(m2, substs.clone()).intern(&Interner);\n             }\n \n@@ -111,7 +111,9 @@ impl<'a> InferenceContext<'a> {\n         // Auto Deref if cannot coerce\n         match (from_ty.kind(&Interner), to_ty.kind(&Interner)) {\n             // FIXME: DerefMut\n-            (TyKind::Ref(_, st1), TyKind::Ref(_, st2)) => self.unify_autoderef_behind_ref(st1, st2),\n+            (TyKind::Ref(.., st1), TyKind::Ref(.., st2)) => {\n+                self.unify_autoderef_behind_ref(st1, st2)\n+            }\n \n             // Otherwise, normal unify\n             _ => self.unify(&from_ty, to_ty),"}, {"sha": "796487d02e160340fffa3d36a88ca2cfb96b98dc", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/047b5313013383fc4fafaef6d6d8d6a64549e3cb/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/047b5313013383fc4fafaef6d6d8d6a64549e3cb/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=047b5313013383fc4fafaef6d6d8d6a64549e3cb", "patch": "@@ -19,7 +19,7 @@ use crate::{\n     lower::lower_to_chalk_mutability,\n     method_resolution, op,\n     primitive::{self, UintTy},\n-    to_chalk_trait_id,\n+    static_lifetime, to_chalk_trait_id,\n     traits::{chalk::from_chalk, FnTrait},\n     utils::{generics, variant_data, Generics},\n     AdtId, Binders, CallableDefId, FnPointer, FnSig, FnSubst, InEnvironment, Interner,\n@@ -527,7 +527,7 @@ impl<'a> InferenceContext<'a> {\n                 let inner_ty = self.infer_expr_inner(*expr, &expectation);\n                 match rawness {\n                     Rawness::RawPtr => TyKind::Raw(mutability, inner_ty),\n-                    Rawness::Ref => TyKind::Ref(mutability, inner_ty),\n+                    Rawness::Ref => TyKind::Ref(mutability, static_lifetime(), inner_ty),\n                 }\n                 .intern(&Interner)\n             }\n@@ -731,12 +731,13 @@ impl<'a> InferenceContext<'a> {\n             Expr::Literal(lit) => match lit {\n                 Literal::Bool(..) => TyKind::Scalar(Scalar::Bool).intern(&Interner),\n                 Literal::String(..) => {\n-                    TyKind::Ref(Mutability::Not, TyKind::Str.intern(&Interner)).intern(&Interner)\n+                    TyKind::Ref(Mutability::Not, static_lifetime(), TyKind::Str.intern(&Interner))\n+                        .intern(&Interner)\n                 }\n                 Literal::ByteString(..) => {\n                     let byte_type = TyKind::Scalar(Scalar::Uint(UintTy::U8)).intern(&Interner);\n                     let array_type = TyKind::Array(byte_type).intern(&Interner);\n-                    TyKind::Ref(Mutability::Not, array_type).intern(&Interner)\n+                    TyKind::Ref(Mutability::Not, static_lifetime(), array_type).intern(&Interner)\n                 }\n                 Literal::Char(..) => TyKind::Scalar(Scalar::Char).intern(&Interner),\n                 Literal::Int(_v, ty) => match ty {\n@@ -872,7 +873,9 @@ impl<'a> InferenceContext<'a> {\n         // Apply autoref so the below unification works correctly\n         // FIXME: return correct autorefs from lookup_method\n         let actual_receiver_ty = match expected_receiver_ty.as_reference() {\n-            Some((_, mutability)) => TyKind::Ref(mutability, derefed_receiver_ty).intern(&Interner),\n+            Some((_, lifetime, mutability)) => {\n+                TyKind::Ref(mutability, lifetime, derefed_receiver_ty).intern(&Interner)\n+            }\n             _ => derefed_receiver_ty,\n         };\n         self.unify(&expected_receiver_ty, &actual_receiver_ty);"}, {"sha": "2848a393ce3580e1ab57037f1e95554f22dc92bd", "filename": "crates/hir_ty/src/infer/pat.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/047b5313013383fc4fafaef6d6d8d6a64549e3cb/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/047b5313013383fc4fafaef6d6d8d6a64549e3cb/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=047b5313013383fc4fafaef6d6d8d6a64549e3cb", "patch": "@@ -13,8 +13,8 @@ use hir_expand::name::Name;\n \n use super::{BindingMode, Expectation, InferenceContext};\n use crate::{\n-    lower::lower_to_chalk_mutability, utils::variant_data, Interner, Substitution, Ty, TyBuilder,\n-    TyKind,\n+    lower::lower_to_chalk_mutability, static_lifetime, utils::variant_data, Interner, Substitution,\n+    Ty, TyBuilder, TyKind,\n };\n \n impl<'a> InferenceContext<'a> {\n@@ -104,7 +104,7 @@ impl<'a> InferenceContext<'a> {\n         let body = Arc::clone(&self.body); // avoid borrow checker problem\n \n         if is_non_ref_pat(&body, pat) {\n-            while let Some((inner, mutability)) = expected.as_reference() {\n+            while let Some((inner, _lifetime, mutability)) = expected.as_reference() {\n                 expected = inner;\n                 default_bm = match default_bm {\n                     BindingMode::Move => BindingMode::Ref(mutability),\n@@ -162,7 +162,7 @@ impl<'a> InferenceContext<'a> {\n             Pat::Ref { pat, mutability } => {\n                 let mutability = lower_to_chalk_mutability(*mutability);\n                 let expectation = match expected.as_reference() {\n-                    Some((inner_ty, exp_mut)) => {\n+                    Some((inner_ty, _lifetime, exp_mut)) => {\n                         if mutability != exp_mut {\n                             // FIXME: emit type error?\n                         }\n@@ -171,7 +171,7 @@ impl<'a> InferenceContext<'a> {\n                     _ => self.result.standard_types.unknown.clone(),\n                 };\n                 let subty = self.infer_pat(*pat, &expectation, default_bm);\n-                TyKind::Ref(mutability, subty).intern(&Interner)\n+                TyKind::Ref(mutability, static_lifetime(), subty).intern(&Interner)\n             }\n             Pat::TupleStruct { path: p, args: subpats, ellipsis } => self.infer_tuple_struct_pat(\n                 p.as_ref(),\n@@ -204,7 +204,8 @@ impl<'a> InferenceContext<'a> {\n \n                 let bound_ty = match mode {\n                     BindingMode::Ref(mutability) => {\n-                        TyKind::Ref(mutability, inner_ty.clone()).intern(&Interner)\n+                        TyKind::Ref(mutability, static_lifetime(), inner_ty.clone())\n+                            .intern(&Interner)\n                     }\n                     BindingMode::Move => inner_ty.clone(),\n                 };"}, {"sha": "c7878ebfdfa5c634b166d819afb214558c5f29c5", "filename": "crates/hir_ty/src/infer/unify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/047b5313013383fc4fafaef6d6d8d6a64549e3cb/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/047b5313013383fc4fafaef6d6d8d6a64549e3cb/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs?ref=047b5313013383fc4fafaef6d6d8d6a64549e3cb", "patch": "@@ -317,7 +317,7 @@ impl InferenceTable {\n                 | (TyKind::Closure(.., substs1), TyKind::Closure(.., substs2)) => {\n                     self.unify_substs(substs1, substs2, depth + 1)\n                 }\n-                (TyKind::Ref(_, ty1), TyKind::Ref(_, ty2))\n+                (TyKind::Ref(_, _, ty1), TyKind::Ref(_, _, ty2))\n                 | (TyKind::Raw(_, ty1), TyKind::Raw(_, ty2))\n                 | (TyKind::Array(ty1), TyKind::Array(ty2))\n                 | (TyKind::Slice(ty1), TyKind::Slice(ty2)) => self.unify_inner(ty1, ty2, depth + 1),"}, {"sha": "bccc7344999aca265bab5eb3c40623ecf6de0b8c", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/047b5313013383fc4fafaef6d6d8d6a64549e3cb/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/047b5313013383fc4fafaef6d6d8d6a64549e3cb/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=047b5313013383fc4fafaef6d6d8d6a64549e3cb", "patch": "@@ -165,16 +165,16 @@ impl CallableSig {\n }\n \n impl Ty {\n-    pub fn as_reference(&self) -> Option<(&Ty, Mutability)> {\n+    pub fn as_reference(&self) -> Option<(&Ty, Lifetime, Mutability)> {\n         match self.kind(&Interner) {\n-            TyKind::Ref(mutability, ty) => Some((ty, *mutability)),\n+            TyKind::Ref(mutability, lifetime, ty) => Some((ty, *lifetime, *mutability)),\n             _ => None,\n         }\n     }\n \n     pub fn as_reference_or_ptr(&self) -> Option<(&Ty, Rawness, Mutability)> {\n         match self.kind(&Interner) {\n-            TyKind::Ref(mutability, ty) => Some((ty, Rawness::Ref, *mutability)),\n+            TyKind::Ref(mutability, _, ty) => Some((ty, Rawness::Ref, *mutability)),\n             TyKind::Raw(mutability, ty) => Some((ty, Rawness::RawPtr, *mutability)),\n             _ => None,\n         }\n@@ -183,7 +183,7 @@ impl Ty {\n     pub fn strip_references(&self) -> &Ty {\n         let mut t: &Ty = self;\n \n-        while let TyKind::Ref(_mutability, ty) = t.kind(&Interner) {\n+        while let TyKind::Ref(_mutability, _lifetime, ty) = t.kind(&Interner) {\n             t = ty;\n         }\n \n@@ -495,3 +495,7 @@ pub fn to_chalk_trait_id(id: TraitId) -> ChalkTraitId {\n pub fn from_chalk_trait_id(id: ChalkTraitId) -> TraitId {\n     salsa::InternKey::from_intern_id(id.0)\n }\n+\n+pub fn static_lifetime() -> Lifetime {\n+    LifetimeData::Static.intern(&Interner)\n+}"}, {"sha": "df6619af3cb8f34781ec5a9fd1af4872cde2f667", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/047b5313013383fc4fafaef6d6d8d6a64549e3cb/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/047b5313013383fc4fafaef6d6d8d6a64549e3cb/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=047b5313013383fc4fafaef6d6d8d6a64549e3cb", "patch": "@@ -27,7 +27,7 @@ use stdx::impl_from;\n \n use crate::{\n     db::HirDatabase,\n-    to_assoc_type_id, to_chalk_trait_id, to_placeholder_idx,\n+    static_lifetime, to_assoc_type_id, to_chalk_trait_id, to_placeholder_idx,\n     traits::chalk::{Interner, ToChalk},\n     utils::{\n         all_super_trait_refs, associated_type_by_name_including_super_traits, generics,\n@@ -174,7 +174,9 @@ impl<'a> TyLoweringContext<'a> {\n             }\n             TypeRef::Reference(inner, _, mutability) => {\n                 let inner_ty = self.lower_ty(inner);\n-                TyKind::Ref(lower_to_chalk_mutability(*mutability), inner_ty).intern(&Interner)\n+                let lifetime = static_lifetime();\n+                TyKind::Ref(lower_to_chalk_mutability(*mutability), lifetime, inner_ty)\n+                    .intern(&Interner)\n             }\n             TypeRef::Placeholder => TyKind::Error.intern(&Interner),\n             TypeRef::Fn(params, is_varargs) => {\n@@ -198,7 +200,7 @@ impl<'a> TyLoweringContext<'a> {\n                     )\n                 });\n                 let bounds = crate::make_only_type_binders(1, bounds);\n-                TyKind::Dyn(DynTy { bounds }).intern(&Interner)\n+                TyKind::Dyn(DynTy { bounds, lifetime: static_lifetime() }).intern(&Interner)\n             }\n             TypeRef::ImplTrait(bounds) => {\n                 match self.impl_trait_mode {\n@@ -390,6 +392,7 @@ impl<'a> TyLoweringContext<'a> {\n                                 ))),\n                             ),\n                         ),\n+                        lifetime: static_lifetime(),\n                     };\n                     TyKind::Dyn(dyn_ty).intern(&Interner)\n                 };"}, {"sha": "436dea22b7d5e25bc0fcb194f32ba8d1fc236ec5", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/047b5313013383fc4fafaef6d6d8d6a64549e3cb/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/047b5313013383fc4fafaef6d6d8d6a64549e3cb/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=047b5313013383fc4fafaef6d6d8d6a64549e3cb", "patch": "@@ -19,6 +19,7 @@ use crate::{\n     db::HirDatabase,\n     from_foreign_def_id,\n     primitive::{self, FloatTy, IntTy, UintTy},\n+    static_lifetime,\n     utils::all_super_traits,\n     AdtId, Canonical, CanonicalVarKinds, DebruijnIndex, FnPointer, FnSig, ForeignDefId,\n     InEnvironment, Interner, Scalar, Substitution, TraitEnvironment, Ty, TyBuilder, TyKind,\n@@ -453,7 +454,8 @@ fn iterate_method_candidates_with_autoref(\n     }\n     let refed = Canonical {\n         binders: deref_chain[0].binders.clone(),\n-        value: TyKind::Ref(Mutability::Not, deref_chain[0].value.clone()).intern(&Interner),\n+        value: TyKind::Ref(Mutability::Not, static_lifetime(), deref_chain[0].value.clone())\n+            .intern(&Interner),\n     };\n     if iterate_method_candidates_by_receiver(\n         &refed,\n@@ -470,7 +472,8 @@ fn iterate_method_candidates_with_autoref(\n     }\n     let ref_muted = Canonical {\n         binders: deref_chain[0].binders.clone(),\n-        value: TyKind::Ref(Mutability::Mut, deref_chain[0].value.clone()).intern(&Interner),\n+        value: TyKind::Ref(Mutability::Mut, static_lifetime(), deref_chain[0].value.clone())\n+            .intern(&Interner),\n     };\n     if iterate_method_candidates_by_receiver(\n         &ref_muted,"}, {"sha": "9267e32b5a8ba1c2867537ccbcaaba139dfe1c95", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/047b5313013383fc4fafaef6d6d8d6a64549e3cb/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/047b5313013383fc4fafaef6d6d8d6a64549e3cb/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=047b5313013383fc4fafaef6d6d8d6a64549e3cb", "patch": "@@ -3,16 +3,16 @@\n //! Chalk (in both directions); plus some helper functions for more specialized\n //! conversions.\n \n-use chalk_ir::{cast::Cast, interner::HasInterner, LifetimeData};\n+use chalk_ir::{cast::Cast, interner::HasInterner};\n use chalk_solve::rust_ir;\n \n use base_db::salsa::InternKey;\n use hir_def::{GenericDefId, TypeAliasId};\n \n use crate::{\n-    chalk_ext::ProjectionTyExt, db::HirDatabase, primitive::UintTy, AliasTy, CallableDefId,\n-    Canonical, DomainGoal, FnPointer, GenericArg, InEnvironment, OpaqueTy, ProjectionTy,\n-    QuantifiedWhereClause, Scalar, Substitution, TraitRef, Ty, TypeWalk, WhereClause,\n+    chalk_ext::ProjectionTyExt, db::HirDatabase, primitive::UintTy, static_lifetime, AliasTy,\n+    CallableDefId, Canonical, DomainGoal, FnPointer, GenericArg, InEnvironment, Lifetime, OpaqueTy,\n+    ProjectionTy, QuantifiedWhereClause, Scalar, Substitution, TraitRef, Ty, TypeWalk, WhereClause,\n };\n \n use super::interner::*;\n@@ -22,7 +22,7 @@ impl ToChalk for Ty {\n     type Chalk = chalk_ir::Ty<Interner>;\n     fn to_chalk(self, db: &dyn HirDatabase) -> chalk_ir::Ty<Interner> {\n         match self.into_inner() {\n-            TyKind::Ref(m, ty) => ref_to_chalk(db, m, ty),\n+            TyKind::Ref(m, lt, ty) => ref_to_chalk(db, m, lt, ty),\n             TyKind::Array(ty) => array_to_chalk(db, ty),\n             TyKind::Function(FnPointer { sig, substitution: substs, .. }) => {\n                 let substitution = chalk_ir::FnSubst(substs.0.to_chalk(db));\n@@ -100,7 +100,7 @@ impl ToChalk for Ty {\n                 );\n                 let bounded_ty = chalk_ir::DynTy {\n                     bounds: chalk_ir::Binders::new(binders, where_clauses),\n-                    lifetime: LifetimeData::Static.intern(&Interner),\n+                    lifetime: static_lifetime(),\n                 };\n                 chalk_ir::TyKind::Dyn(bounded_ty).intern(&Interner)\n             }\n@@ -149,6 +149,7 @@ impl ToChalk for Ty {\n                         where_clauses.bounds.binders.clone(),\n                         crate::QuantifiedWhereClauses::from_iter(&Interner, bounds),\n                     ),\n+                    lifetime: static_lifetime(),\n                 })\n             }\n \n@@ -167,8 +168,8 @@ impl ToChalk for Ty {\n             }\n             chalk_ir::TyKind::Raw(mutability, ty) => TyKind::Raw(mutability, from_chalk(db, ty)),\n             chalk_ir::TyKind::Slice(ty) => TyKind::Slice(from_chalk(db, ty)),\n-            chalk_ir::TyKind::Ref(mutability, _lifetime, ty) => {\n-                TyKind::Ref(mutability, from_chalk(db, ty))\n+            chalk_ir::TyKind::Ref(mutability, lifetime, ty) => {\n+                TyKind::Ref(mutability, lifetime, from_chalk(db, ty))\n             }\n             chalk_ir::TyKind::Str => TyKind::Str,\n             chalk_ir::TyKind::Never => TyKind::Never,\n@@ -192,10 +193,11 @@ impl ToChalk for Ty {\n fn ref_to_chalk(\n     db: &dyn HirDatabase,\n     mutability: chalk_ir::Mutability,\n+    _lifetime: Lifetime,\n     ty: Ty,\n ) -> chalk_ir::Ty<Interner> {\n     let arg = ty.to_chalk(db);\n-    let lifetime = LifetimeData::Static.intern(&Interner);\n+    let lifetime = static_lifetime();\n     chalk_ir::TyKind::Ref(mutability, lifetime, arg).intern(&Interner)\n }\n "}, {"sha": "844e5789690646b52898d77c6ef0d18a5a92c4dd", "filename": "crates/hir_ty/src/types.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/047b5313013383fc4fafaef6d6d8d6a64549e3cb/crates%2Fhir_ty%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/047b5313013383fc4fafaef6d6d8d6a64549e3cb/crates%2Fhir_ty%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftypes.rs?ref=047b5313013383fc4fafaef6d6d8d6a64549e3cb", "patch": "@@ -11,7 +11,8 @@ use smallvec::SmallVec;\n \n use crate::{\n     AssocTypeId, CanonicalVarKinds, ChalkTraitId, ClosureId, FnDefId, FnSig, ForeignDefId,\n-    InferenceVar, Interner, OpaqueTyId, PlaceholderIndex, TypeWalk, VariableKind, VariableKinds,\n+    InferenceVar, Interner, Lifetime, OpaqueTyId, PlaceholderIndex, TypeWalk, VariableKind,\n+    VariableKinds,\n };\n \n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n@@ -39,6 +40,7 @@ impl ProjectionTy {\n pub struct DynTy {\n     /// The unknown self type.\n     pub bounds: Binders<QuantifiedWhereClauses>,\n+    pub lifetime: Lifetime,\n }\n \n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n@@ -122,7 +124,7 @@ pub enum TyKind {\n \n     /// A reference; a pointer with an associated lifetime. Written as\n     /// `&'a mut T` or `&'a T`.\n-    Ref(Mutability, Ty),\n+    Ref(Mutability, Lifetime, Ty),\n \n     /// This represents a placeholder for an opaque type in situations where we\n     /// don't know the hidden type (i.e. currently almost always). This is"}, {"sha": "4cc4e24fd57a5a3e11395c9661e3bda09788c78e", "filename": "crates/hir_ty/src/walk.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/047b5313013383fc4fafaef6d6d8d6a64549e3cb/crates%2Fhir_ty%2Fsrc%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/047b5313013383fc4fafaef6d6d8d6a64549e3cb/crates%2Fhir_ty%2Fsrc%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fwalk.rs?ref=047b5313013383fc4fafaef6d6d8d6a64549e3cb", "patch": "@@ -153,7 +153,7 @@ impl TypeWalk for Ty {\n                     p.walk(f);\n                 }\n             }\n-            TyKind::Slice(ty) | TyKind::Array(ty) | TyKind::Ref(_, ty) | TyKind::Raw(_, ty) => {\n+            TyKind::Slice(ty) | TyKind::Array(ty) | TyKind::Ref(_, _, ty) | TyKind::Raw(_, ty) => {\n                 ty.walk(f);\n             }\n             TyKind::Function(fn_pointer) => {\n@@ -187,7 +187,7 @@ impl TypeWalk for Ty {\n             TyKind::Alias(AliasTy::Opaque(o_ty)) => {\n                 o_ty.substitution.walk_mut_binders(f, binders);\n             }\n-            TyKind::Slice(ty) | TyKind::Array(ty) | TyKind::Ref(_, ty) | TyKind::Raw(_, ty) => {\n+            TyKind::Slice(ty) | TyKind::Array(ty) | TyKind::Ref(_, _, ty) | TyKind::Raw(_, ty) => {\n                 ty.walk_mut_binders(f, binders);\n             }\n             TyKind::Function(fn_pointer) => {"}]}