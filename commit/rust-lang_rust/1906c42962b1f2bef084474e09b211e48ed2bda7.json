{"sha": "1906c42962b1f2bef084474e09b211e48ed2bda7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5MDZjNDI5NjJiMWYyYmVmMDg0NDc0ZTA5YjIxMWU0OGVkMmJkYTc=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-11-30T12:25:34Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-12-23T18:35:22Z"}, "message": "bootstrap: convert rust-src to use Tarball", "tree": {"sha": "876fae4db3160f9d2bd50c9901ea9dfea25d26f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/876fae4db3160f9d2bd50c9901ea9dfea25d26f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1906c42962b1f2bef084474e09b211e48ed2bda7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE1JbYPtLJAsc22U9xPgar6Auq8ZwFAl/jjf8ACgkQPgar6Auq\n8ZyEaxAAkIK1eYGR2gLp7OdlYwD588kGGaTuXGJWaLlPdsW20ExdG+Z2uAnRjCUS\nEaOX3nRzpFULRE/WOBd+UwvZnLVHGJxCVcd55SikWi4/3/1gNXSTv0yS0btepbye\ngUHFdE3EGjSNkZNat2vLkIyFdbXsg4sZzXGnBtYZRQgDQ8ZvdIko/X1DxQPdg3Mn\nzVv8pImrsephiuy20tlezoNyppR4rRL13Nx7KD4b1MENApz2A9IOmul4kXd6+FER\nXI89FKJzkpvLKIYnqhDoU/JWuW4rbWUUKaeyWYJAMtZDYH75bL+x+b22jBQ0AOBS\nQJ8NF54WQ6Vm5h7HLJGOcvcV3P5SPBqqAhwpaE5ElyLHlIzqb6NxjMO/8oP6Ptno\nBXXxlT2kpynMJpYfyionqGD5Z9wGZYpv1is9ozIDhZrNlge0a6DWB434VswIcecQ\nUVAVdX6YyGzLunXb0eMALI5zTDN9WPJLhFz0Riqbp/7Pzp/7GmeDgb1Vo5dp7qg6\n+LrSPd93XHSOLigfMSZOEvo9A4J4MjyY/4GY8/6YomwnegEmhi2wbMN4HzcbRI5P\nSggjFGvkoSksq3QJOXm3YSYBHHFKopVfispIY1Nharg0Z4ieIu3h2h+Xjd2FaX+j\nKDmsaHNoc4EbuSpgkqYdhGuF0InFmCzHR7jabyRRmxMA/ZjfdHE=\n=f4+K\n-----END PGP SIGNATURE-----", "payload": "tree 876fae4db3160f9d2bd50c9901ea9dfea25d26f8\nparent 2e0a16cf0d67f61d85ff7631846e9c3c6e20c85a\nauthor Pietro Albini <pietro@pietroalbini.org> 1606739134 +0100\ncommitter Pietro Albini <pietro@pietroalbini.org> 1608748522 +0100\n\nbootstrap: convert rust-src to use Tarball\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1906c42962b1f2bef084474e09b211e48ed2bda7", "html_url": "https://github.com/rust-lang/rust/commit/1906c42962b1f2bef084474e09b211e48ed2bda7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1906c42962b1f2bef084474e09b211e48ed2bda7/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e0a16cf0d67f61d85ff7631846e9c3c6e20c85a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e0a16cf0d67f61d85ff7631846e9c3c6e20c85a", "html_url": "https://github.com/rust-lang/rust/commit/2e0a16cf0d67f61d85ff7631846e9c3c6e20c85a"}], "stats": {"total": 61, "additions": 28, "deletions": 33}, "files": [{"sha": "c89b378f8206022cb4793af94cdcca496bc35404", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 3, "deletions": 27, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1906c42962b1f2bef084474e09b211e48ed2bda7/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1906c42962b1f2bef084474e09b211e48ed2bda7/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=1906c42962b1f2bef084474e09b211e48ed2bda7", "patch": "@@ -814,9 +814,7 @@ impl Step for Src {\n \n     /// Creates the `rust-src` installer component\n     fn run(self, builder: &Builder<'_>) -> PathBuf {\n-        let name = pkgname(builder, \"rust-src\");\n-        let image = tmpdir(builder).join(format!(\"{}-image\", name));\n-        let _ = fs::remove_dir_all(&image);\n+        let tarball = Tarball::new_targetless(builder, \"rust-src\");\n \n         // A lot of tools expect the rust-src component to be entirely in this directory, so if you\n         // change that (e.g. by adding another directory `lib/rustlib/src/foo` or\n@@ -825,8 +823,7 @@ impl Step for Src {\n         //\n         // NOTE: if you update the paths here, you also should update the \"virtual\" path\n         // translation code in `imported_source_files` in `src/librustc_metadata/rmeta/decoder.rs`\n-        let dst_src = image.join(\"lib/rustlib/src/rust\");\n-        t!(fs::create_dir_all(&dst_src));\n+        let dst_src = tarball.image_dir().join(\"lib/rustlib/src/rust\");\n \n         let src_files = [\"Cargo.lock\"];\n         // This is the reduced set of paths which will become the rust-src component\n@@ -846,28 +843,7 @@ impl Step for Src {\n             builder.copy(&builder.src.join(file), &dst_src.join(file));\n         }\n \n-        // Create source tarball in rust-installer format\n-        let mut cmd = rust_installer(builder);\n-        cmd.arg(\"generate\")\n-            .arg(\"--product-name=Rust\")\n-            .arg(\"--rel-manifest-dir=rustlib\")\n-            .arg(\"--success-message=Awesome-Source.\")\n-            .arg(\"--image-dir\")\n-            .arg(&image)\n-            .arg(\"--work-dir\")\n-            .arg(&tmpdir(builder))\n-            .arg(\"--output-dir\")\n-            .arg(&distdir(builder))\n-            .arg(format!(\"--package-name={}\", name))\n-            .arg(\"--component-name=rust-src\")\n-            .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n-\n-        builder.info(\"Dist src\");\n-        let _time = timeit(builder);\n-        builder.run(&mut cmd);\n-\n-        builder.remove_dir(&image);\n-        distdir(builder).join(&format!(\"{}.tar.gz\", name))\n+        tarball.generate()\n     }\n }\n "}, {"sha": "27769cab5af097d5f8343a2dde9720737adce95c", "filename": "src/bootstrap/tarball.rs", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1906c42962b1f2bef084474e09b211e48ed2bda7/src%2Fbootstrap%2Ftarball.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1906c42962b1f2bef084474e09b211e48ed2bda7/src%2Fbootstrap%2Ftarball.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftarball.rs?ref=1906c42962b1f2bef084474e09b211e48ed2bda7", "patch": "@@ -84,7 +84,7 @@ pub(crate) struct Tarball<'a> {\n \n     pkgname: String,\n     component: String,\n-    target: String,\n+    target: Option<String>,\n     product_name: String,\n     overlay: OverlayKind,\n \n@@ -99,6 +99,14 @@ pub(crate) struct Tarball<'a> {\n \n impl<'a> Tarball<'a> {\n     pub(crate) fn new(builder: &'a Builder<'a>, component: &str, target: &str) -> Self {\n+        Self::new_inner(builder, component, Some(target.into()))\n+    }\n+\n+    pub(crate) fn new_targetless(builder: &'a Builder<'a>, component: &str) -> Self {\n+        Self::new_inner(builder, component, None)\n+    }\n+\n+    fn new_inner(builder: &'a Builder<'a>, component: &str, target: Option<String>) -> Self {\n         let pkgname = crate::dist::pkgname(builder, component);\n \n         let temp_dir = builder.out.join(\"tmp\").join(\"tarball\").join(component);\n@@ -113,7 +121,7 @@ impl<'a> Tarball<'a> {\n \n             pkgname,\n             component: component.into(),\n-            target: target.into(),\n+            target,\n             product_name: \"Rust\".into(),\n             overlay: OverlayKind::Rust,\n \n@@ -197,7 +205,14 @@ impl<'a> Tarball<'a> {\n \n         let mut cmd = self.builder.tool_cmd(crate::tool::Tool::RustInstaller);\n \n-        self.builder.info(&format!(\"Dist {} ({})\", self.component, self.target));\n+        let package_name = if let Some(target) = &self.target {\n+            self.builder.info(&format!(\"Dist {} ({})\", self.component, target));\n+            format!(\"{}-{}\", self.pkgname, target)\n+        } else {\n+            self.builder.info(&format!(\"Dist {}\", self.component));\n+            self.pkgname.clone()\n+        };\n+\n         let _time = crate::util::timeit(self.builder);\n \n         let mut component_name = self.component.clone();\n@@ -206,7 +221,11 @@ impl<'a> Tarball<'a> {\n         }\n         if self.include_target_in_component_name {\n             component_name.push('-');\n-            component_name.push_str(&self.target);\n+            component_name.push_str(\n+                &self\n+                    .target\n+                    .expect(\"include_target_in_component_name used in a targetless tarball\"),\n+            );\n         }\n \n         let distdir = crate::dist::distdir(self.builder);\n@@ -222,12 +241,12 @@ impl<'a> Tarball<'a> {\n             .arg(&distdir)\n             .arg(\"--non-installed-overlay\")\n             .arg(self.overlay_dir)\n-            .arg(format!(\"--package-name={}-{}\", self.pkgname, self.target))\n+            .arg(format!(\"--package-name={}\", package_name))\n             .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n             .arg(format!(\"--component-name={}\", component_name));\n         self.builder.run(&mut cmd);\n         t!(std::fs::remove_dir_all(&self.temp_dir));\n \n-        distdir.join(format!(\"{}-{}.tar.gz\", self.pkgname, self.target))\n+        distdir.join(format!(\"{}.tar.gz\", package_name))\n     }\n }"}]}