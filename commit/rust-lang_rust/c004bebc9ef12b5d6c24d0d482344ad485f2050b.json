{"sha": "c004bebc9ef12b5d6c24d0d482344ad485f2050b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMDRiZWJjOWVmMTJiNWQ2YzI0ZDBkNDgyMzQ0YWQ0ODVmMjA1MGI=", "commit": {"author": {"name": "Jonas Hietala", "email": "tradet.h@gmail.com", "date": "2014-07-22T08:33:26Z"}, "committer": {"name": "Jonas Hietala", "email": "tradet.h@gmail.com", "date": "2014-07-22T08:33:26Z"}, "message": "doc: Use vec![] instead of vec!() in Vec.", "tree": {"sha": "c4538797ec9d312b9a9e7c47491574e8e3f879ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4538797ec9d312b9a9e7c47491574e8e3f879ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c004bebc9ef12b5d6c24d0d482344ad485f2050b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c004bebc9ef12b5d6c24d0d482344ad485f2050b", "html_url": "https://github.com/rust-lang/rust/commit/c004bebc9ef12b5d6c24d0d482344ad485f2050b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c004bebc9ef12b5d6c24d0d482344ad485f2050b/comments", "author": {"login": "treeman", "id": 162027, "node_id": "MDQ6VXNlcjE2MjAyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/treeman", "html_url": "https://github.com/treeman", "followers_url": "https://api.github.com/users/treeman/followers", "following_url": "https://api.github.com/users/treeman/following{/other_user}", "gists_url": "https://api.github.com/users/treeman/gists{/gist_id}", "starred_url": "https://api.github.com/users/treeman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/treeman/subscriptions", "organizations_url": "https://api.github.com/users/treeman/orgs", "repos_url": "https://api.github.com/users/treeman/repos", "events_url": "https://api.github.com/users/treeman/events{/privacy}", "received_events_url": "https://api.github.com/users/treeman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "treeman", "id": 162027, "node_id": "MDQ6VXNlcjE2MjAyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/treeman", "html_url": "https://github.com/treeman", "followers_url": "https://api.github.com/users/treeman/followers", "following_url": "https://api.github.com/users/treeman/following{/other_user}", "gists_url": "https://api.github.com/users/treeman/gists{/gist_id}", "starred_url": "https://api.github.com/users/treeman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/treeman/subscriptions", "organizations_url": "https://api.github.com/users/treeman/orgs", "repos_url": "https://api.github.com/users/treeman/repos", "events_url": "https://api.github.com/users/treeman/events{/privacy}", "received_events_url": "https://api.github.com/users/treeman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e3e0a83aa9f704df7017199233774c4021d9a5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e3e0a83aa9f704df7017199233774c4021d9a5d", "html_url": "https://github.com/rust-lang/rust/commit/6e3e0a83aa9f704df7017199233774c4021d9a5d"}], "stats": {"total": 154, "additions": 77, "deletions": 77}, "files": [{"sha": "f75865c218d10e540082b91122ac9a439ebe9e97", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 77, "deletions": 77, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/c004bebc9ef12b5d6c24d0d482344ad485f2050b/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c004bebc9ef12b5d6c24d0d482344ad485f2050b/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=c004bebc9ef12b5d6c24d0d482344ad485f2050b", "patch": "@@ -151,7 +151,7 @@ impl<T> Vec<T> {\n     /// ```rust\n     /// # use std::vec::Vec;\n     /// let vec = Vec::from_fn(3, |idx| idx * 2);\n-    /// assert_eq!(vec, vec!(0, 2, 4));\n+    /// assert_eq!(vec, vec![0, 2, 4]);\n     /// ```\n     #[inline]\n     pub fn from_fn(length: uint, op: |uint| -> T) -> Vec<T> {\n@@ -189,10 +189,10 @@ impl<T> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let vec = vec!(1i, 2i, 3i, 4i);\n+    /// let vec = vec![1i, 2i, 3i, 4i];\n     /// let (even, odd) = vec.partition(|&n| n % 2 == 0);\n-    /// assert_eq!(even, vec!(2, 4));\n-    /// assert_eq!(odd, vec!(1, 3));\n+    /// assert_eq!(even, vec![2, 4]);\n+    /// assert_eq!(odd, vec![1, 3]);\n     /// ```\n     #[inline]\n     pub fn partition(self, f: |&T| -> bool) -> (Vec<T>, Vec<T>) {\n@@ -218,9 +218,9 @@ impl<T: Clone> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let vec = vec!(1i, 2i);\n+    /// let vec = vec![1i, 2i];\n     /// let vec = vec.append([3i, 4i]);\n-    /// assert_eq!(vec, vec!(1, 2, 3, 4));\n+    /// assert_eq!(vec, vec![1, 2, 3, 4]);\n     /// ```\n     #[inline]\n     pub fn append(mut self, second: &[T]) -> Vec<T> {\n@@ -276,9 +276,9 @@ impl<T: Clone> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let mut vec = vec!(1i);\n+    /// let mut vec = vec![1i];\n     /// vec.push_all([2i, 3, 4]);\n-    /// assert_eq!(vec, vec!(1, 2, 3, 4));\n+    /// assert_eq!(vec, vec![1, 2, 3, 4]);\n     /// ```\n     #[inline]\n     pub fn push_all(&mut self, other: &[T]) {\n@@ -306,9 +306,9 @@ impl<T: Clone> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let mut vec = vec!(\"hello\");\n+    /// let mut vec = vec![\"hello\"];\n     /// vec.grow(2, &(\"world\"));\n-    /// assert_eq!(vec, vec!(\"hello\", \"world\", \"world\"));\n+    /// assert_eq!(vec, vec![\"hello\", \"world\", \"world\"]);\n     /// ```\n     pub fn grow(&mut self, n: uint, value: &T) {\n         self.reserve_additional(n);\n@@ -330,10 +330,10 @@ impl<T: Clone> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let mut vec = vec!(\"a\", \"b\", \"c\");\n+    /// let mut vec = vec![\"a\", \"b\", \"c\"];\n     /// vec.grow_set(1, &(\"fill\"), \"d\");\n     /// vec.grow_set(4, &(\"fill\"), \"e\");\n-    /// assert_eq!(vec, vec!(\"a\", \"d\", \"c\", \"fill\", \"e\"));\n+    /// assert_eq!(vec, vec![\"a\", \"d\", \"c\", \"fill\", \"e\"]);\n     /// ```\n     pub fn grow_set(&mut self, index: uint, initval: &T, value: T) {\n         let l = self.len();\n@@ -352,10 +352,10 @@ impl<T: Clone> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let vec = vec!(1i, 2, 3, 4);\n+    /// let vec = vec![1i, 2, 3, 4];\n     /// let (even, odd) = vec.partitioned(|&n| n % 2 == 0);\n-    /// assert_eq!(even, vec!(2i, 4));\n-    /// assert_eq!(odd, vec!(1i, 3));\n+    /// assert_eq!(even, vec![2i, 4]);\n+    /// assert_eq!(odd, vec![1i, 3]);\n     /// ```\n     pub fn partitioned(&self, f: |&T| -> bool) -> (Vec<T>, Vec<T>) {\n         let mut lefts = Vec::new();\n@@ -522,7 +522,7 @@ impl<T> Vec<T> {\n      ///\n      /// ```rust\n      /// # use std::vec::Vec;\n-     /// let mut vec: Vec<int> = vec!(1i);\n+     /// let mut vec: Vec<int> = vec![1i];\n      /// vec.reserve_additional(10);\n      /// assert!(vec.capacity() >= 11);\n      /// ```\n@@ -547,7 +547,7 @@ impl<T> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let mut vec = vec!(1i, 2, 3);\n+    /// let mut vec = vec![1i, 2, 3];\n     /// vec.reserve(10);\n     /// assert!(vec.capacity() >= 10);\n     /// ```\n@@ -589,7 +589,7 @@ impl<T> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let mut vec = vec!(1i, 2, 3);\n+    /// let mut vec = vec![1i, 2, 3];\n     /// vec.shrink_to_fit();\n     /// ```\n     pub fn shrink_to_fit(&mut self) {\n@@ -621,9 +621,9 @@ impl<T> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let mut vec = vec!(1i, 2, 3);\n+    /// let mut vec = vec![1i, 2, 3];\n     /// assert_eq!(vec.pop(), Some(3));\n-    /// assert_eq!(vec, vec!(1, 2));\n+    /// assert_eq!(vec, vec![1, 2]);\n     /// ```\n     #[inline]\n     pub fn pop(&mut self) -> Option<T> {\n@@ -646,9 +646,9 @@ impl<T> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let mut vec = vec!(1i, 2);\n+    /// let mut vec = vec![1i, 2];\n     /// vec.push(3);\n-    /// assert_eq!(vec, vec!(1, 2, 3));\n+    /// assert_eq!(vec, vec![1, 2, 3]);\n     /// ```\n     #[inline]\n     pub fn push(&mut self, value: T) {\n@@ -682,9 +682,9 @@ impl<T> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let vec = vec!(1i, 2);\n+    /// let vec = vec![1i, 2];\n     /// let vec = vec.append_one(3);\n-    /// assert_eq!(vec, vec!(1, 2, 3));\n+    /// assert_eq!(vec, vec![1, 2, 3]);\n     /// ```\n     #[inline]\n     pub fn append_one(mut self, x: T) -> Vec<T> {\n@@ -700,9 +700,9 @@ impl<T> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let mut vec = vec!(1i, 2, 3, 4);\n+    /// let mut vec = vec![1i, 2, 3, 4];\n     /// vec.truncate(2);\n-    /// assert_eq!(vec, vec!(1, 2));\n+    /// assert_eq!(vec, vec![1, 2]);\n     /// ```\n     pub fn truncate(&mut self, len: uint) {\n         unsafe {\n@@ -723,7 +723,7 @@ impl<T> Vec<T> {\n     /// ```rust\n     /// fn foo(slice: &mut [int]) {}\n     ///\n-    /// let mut vec = vec!(1i, 2);\n+    /// let mut vec = vec![1i, 2];\n     /// foo(vec.as_mut_slice());\n     /// ```\n     #[inline]\n@@ -743,7 +743,7 @@ impl<T> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let v = vec!(\"a\".to_string(), \"b\".to_string());\n+    /// let v = vec![\"a\".to_string(), \"b\".to_string()];\n     /// for s in v.move_iter() {\n     ///     // s has type String, not &String\n     ///     println!(\"{}\", s);\n@@ -782,7 +782,7 @@ impl<T> Vec<T> {\n     /// ```rust\n     /// #![allow(deprecated)]\n     ///\n-    /// let vec = vec!(1i, 2, 3);\n+    /// let vec = vec![1i, 2, 3];\n     /// assert!(vec.get(1) == &2);\n     /// ```\n     #[deprecated=\"prefer using indexing, e.g., vec[0]\"]\n@@ -800,9 +800,9 @@ impl<T> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let mut vec = vec!(1i, 2, 3);\n+    /// let mut vec = vec![1i, 2, 3];\n     /// *vec.get_mut(1) = 4;\n-    /// assert_eq!(vec, vec!(1i, 4, 3));\n+    /// assert_eq!(vec, vec![1i, 4, 3]);\n     /// ```\n     #[inline]\n     pub fn get_mut<'a>(&'a mut self, index: uint) -> &'a mut T {\n@@ -815,7 +815,7 @@ impl<T> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let vec = vec!(1i, 2, 3);\n+    /// let vec = vec![1i, 2, 3];\n     /// for num in vec.iter() {\n     ///     println!(\"{}\", *num);\n     /// }\n@@ -832,7 +832,7 @@ impl<T> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let mut vec = vec!(1i, 2, 3);\n+    /// let mut vec = vec![1i, 2, 3];\n     /// for num in vec.mut_iter() {\n     ///     *num = 0;\n     /// }\n@@ -850,13 +850,13 @@ impl<T> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let mut v = vec!(5i, 4, 1, 3, 2);\n+    /// let mut v = vec![5i, 4, 1, 3, 2];\n     /// v.sort_by(|a, b| a.cmp(b));\n-    /// assert_eq!(v, vec!(1i, 2, 3, 4, 5));\n+    /// assert_eq!(v, vec![1i, 2, 3, 4, 5]);\n     ///\n     /// // reverse sorting\n     /// v.sort_by(|a, b| b.cmp(a));\n-    /// assert_eq!(v, vec!(5i, 4, 3, 2, 1));\n+    /// assert_eq!(v, vec![5i, 4, 3, 2, 1]);\n     /// ```\n     #[inline]\n     pub fn sort_by(&mut self, compare: |&T, &T| -> Ordering) {\n@@ -873,7 +873,7 @@ impl<T> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let vec = vec!(1i, 2, 3, 4);\n+    /// let vec = vec![1i, 2, 3, 4];\n     /// assert!(vec.slice(0, 2) == [1, 2]);\n     /// ```\n     #[inline]\n@@ -890,7 +890,7 @@ impl<T> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let vec = vec!(1i, 2, 3);\n+    /// let vec = vec![1i, 2, 3];\n     /// assert!(vec.tail() == [2, 3]);\n     /// ```\n     #[inline]\n@@ -907,7 +907,7 @@ impl<T> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let vec = vec!(1i, 2, 3, 4);\n+    /// let vec = vec![1i, 2, 3, 4];\n     /// assert!(vec.tailn(2) == [3, 4]);\n     /// ```\n     #[inline]\n@@ -921,7 +921,7 @@ impl<T> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let vec = vec!(1i, 2, 3);\n+    /// let vec = vec![1i, 2, 3];\n     /// assert!(vec.last() == Some(&3));\n     /// ```\n     #[inline]\n@@ -935,9 +935,9 @@ impl<T> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let mut vec = vec!(1i, 2, 3);\n+    /// let mut vec = vec![1i, 2, 3];\n     /// *vec.mut_last().unwrap() = 4;\n-    /// assert_eq!(vec, vec!(1i, 2, 4));\n+    /// assert_eq!(vec, vec![1i, 2, 4]);\n     /// ```\n     #[inline]\n     pub fn mut_last<'a>(&'a mut self) -> Option<&'a mut T> {\n@@ -951,14 +951,14 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     /// ```rust\n-    /// let mut v = vec!(\"foo\".to_string(), \"bar\".to_string(),\n-    ///                  \"baz\".to_string(), \"qux\".to_string());\n+    /// let mut v = vec![\"foo\".to_string(), \"bar\".to_string(),\n+    ///                  \"baz\".to_string(), \"qux\".to_string()];\n     ///\n     /// assert_eq!(v.swap_remove(1), Some(\"bar\".to_string()));\n-    /// assert_eq!(v, vec!(\"foo\".to_string(), \"qux\".to_string(), \"baz\".to_string()));\n+    /// assert_eq!(v, vec![\"foo\".to_string(), \"qux\".to_string(), \"baz\".to_string()]);\n     ///\n     /// assert_eq!(v.swap_remove(0), Some(\"foo\".to_string()));\n-    /// assert_eq!(v, vec!(\"baz\".to_string(), \"qux\".to_string()));\n+    /// assert_eq!(v, vec![\"baz\".to_string(), \"qux\".to_string()]);\n     ///\n     /// assert_eq!(v.swap_remove(2), None);\n     /// ```\n@@ -983,9 +983,9 @@ impl<T> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let mut vec = vec!(1i, 2, 3);\n+    /// let mut vec = vec![1i, 2, 3];\n     /// vec.unshift(4);\n-    /// assert_eq!(vec, vec!(4, 1, 2, 3));\n+    /// assert_eq!(vec, vec![4, 1, 2, 3]);\n     /// ```\n     #[inline]\n     pub fn unshift(&mut self, element: T) {\n@@ -1003,9 +1003,9 @@ impl<T> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let mut vec = vec!(1i, 2, 3);\n+    /// let mut vec = vec![1i, 2, 3];\n     /// assert!(vec.shift() == Some(1));\n-    /// assert_eq!(vec, vec!(2, 3));\n+    /// assert_eq!(vec, vec![2, 3]);\n     /// ```\n     #[inline]\n     pub fn shift(&mut self) -> Option<T> {\n@@ -1023,11 +1023,11 @@ impl<T> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let mut vec = vec!(1i, 2, 3);\n+    /// let mut vec = vec![1i, 2, 3];\n     /// vec.insert(1, 4);\n-    /// assert_eq!(vec, vec!(1, 4, 2, 3));\n+    /// assert_eq!(vec, vec![1, 4, 2, 3]);\n     /// vec.insert(4, 5);\n-    /// assert_eq!(vec, vec!(1, 4, 2, 3, 5));\n+    /// assert_eq!(vec, vec![1, 4, 2, 3, 5]);\n     /// ```\n     pub fn insert(&mut self, index: uint, element: T) {\n         let len = self.len();\n@@ -1057,13 +1057,13 @@ impl<T> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let mut v = vec!(1i, 2, 3);\n+    /// let mut v = vec![1i, 2, 3];\n     /// assert_eq!(v.remove(1), Some(2));\n-    /// assert_eq!(v, vec!(1, 3));\n+    /// assert_eq!(v, vec![1, 3]);\n     ///\n     /// assert_eq!(v.remove(4), None);\n     /// // v is unchanged:\n-    /// assert_eq!(v, vec!(1, 3));\n+    /// assert_eq!(v, vec![1, 3]);\n     /// ```\n     pub fn remove(&mut self, index: uint) -> Option<T> {\n         let len = self.len();\n@@ -1096,9 +1096,9 @@ impl<T> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let mut vec = vec!(box 1i);\n-    /// vec.push_all_move(vec!(box 2, box 3, box 4));\n-    /// assert_eq!(vec, vec!(box 1, box 2, box 3, box 4));\n+    /// let mut vec = vec![box 1i];\n+    /// vec.push_all_move(vec![box 2, box 3, box 4]);\n+    /// assert_eq!(vec, vec![box 1, box 2, box 3, box 4]);\n     /// ```\n     #[inline]\n     pub fn push_all_move(&mut self, other: Vec<T>) {\n@@ -1115,7 +1115,7 @@ impl<T> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let mut vec = vec!(1i, 2, 3, 4);\n+    /// let mut vec = vec![1i, 2, 3, 4];\n     /// assert!(vec.mut_slice(0, 2) == [1, 2]);\n     /// ```\n     #[inline]\n@@ -1133,7 +1133,7 @@ impl<T> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let mut vec = vec!(1i, 2, 3, 4);\n+    /// let mut vec = vec![1i, 2, 3, 4];\n     /// assert!(vec.mut_slice_from(2) == [3, 4]);\n     /// ```\n     #[inline]\n@@ -1150,7 +1150,7 @@ impl<T> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let mut vec = vec!(1i, 2, 3, 4);\n+    /// let mut vec = vec![1i, 2, 3, 4];\n     /// assert!(vec.mut_slice_to(2) == [1, 2]);\n     /// ```\n     #[inline]\n@@ -1171,7 +1171,7 @@ impl<T> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let mut vec = vec!(1i, 2, 3, 4, 5, 6);\n+    /// let mut vec = vec![1i, 2, 3, 4, 5, 6];\n     ///\n     /// // scoped to restrict the lifetime of the borrows\n     /// {\n@@ -1202,9 +1202,9 @@ impl<T> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let mut v = vec!(1i, 2, 3);\n+    /// let mut v = vec![1i, 2, 3];\n     /// v.reverse();\n-    /// assert_eq!(v, vec!(3i, 2, 1));\n+    /// assert_eq!(v, vec![3i, 2, 1]);\n     /// ```\n     #[inline]\n     pub fn reverse(&mut self) {\n@@ -1220,7 +1220,7 @@ impl<T> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let vec = vec!(1i, 2, 3);\n+    /// let vec = vec![1i, 2, 3];\n     /// assert!(vec.slice_from(1) == [2, 3]);\n     /// ```\n     #[inline]\n@@ -1237,7 +1237,7 @@ impl<T> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let vec = vec!(1i, 2, 3);\n+    /// let vec = vec![1i, 2, 3];\n     /// assert!(vec.slice_to(2) == [1, 2]);\n     /// ```\n     #[inline]\n@@ -1288,9 +1288,9 @@ impl<T> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let mut vec = vec!(1i, 2, 3, 4);\n+    /// let mut vec = vec![1i, 2, 3, 4];\n     /// vec.retain(|x| x%2 == 0);\n-    /// assert_eq!(vec, vec!(2, 4));\n+    /// assert_eq!(vec, vec![2, 4]);\n     /// ```\n     pub fn retain(&mut self, f: |&T| -> bool) {\n         let len = self.len();\n@@ -1319,9 +1319,9 @@ impl<T> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let mut vec = vec!(0u, 1);\n+    /// let mut vec = vec![0u, 1];\n     /// vec.grow_fn(3, |i| i);\n-    /// assert_eq!(vec, vec!(0, 1, 0, 1, 2));\n+    /// assert_eq!(vec, vec![0, 1, 0, 1, 2]);\n     /// ```\n     pub fn grow_fn(&mut self, n: uint, f: |uint| -> T) {\n         self.reserve_additional(n);\n@@ -1340,9 +1340,9 @@ impl<T:Ord> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let mut vec = vec!(3i, 1, 2);\n+    /// let mut vec = vec![3i, 1, 2];\n     /// vec.sort();\n-    /// assert_eq!(vec, vec!(1, 2, 3));\n+    /// assert_eq!(vec, vec![1, 2, 3]);\n     /// ```\n     pub fn sort(&mut self) {\n         self.as_mut_slice().sort()\n@@ -1362,7 +1362,7 @@ impl<T:PartialEq> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let vec = vec!(1i, 2, 3);\n+    /// let vec = vec![1i, 2, 3];\n     /// assert!(vec.contains(&1));\n     /// ```\n     #[inline]\n@@ -1377,9 +1377,9 @@ impl<T:PartialEq> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let mut vec = vec!(1i, 2, 2, 3, 2);\n+    /// let mut vec = vec![1i, 2, 2, 3, 2];\n     /// vec.dedup();\n-    /// assert_eq!(vec, vec!(1i, 2, 3, 2));\n+    /// assert_eq!(vec, vec![1i, 2, 3, 2]);\n     /// ```\n     pub fn dedup(&mut self) {\n         unsafe {\n@@ -1474,7 +1474,7 @@ impl<T> Vector<T> for Vec<T> {\n     /// ```rust\n     /// fn foo(slice: &[int]) {}\n     ///\n-    /// let vec = vec!(1i, 2);\n+    /// let vec = vec![1i, 2];\n     /// foo(vec.as_slice());\n     /// ```\n     #[inline]"}]}