{"sha": "3137f8e2d141d7d7c65040a718a9193f50e1282e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxMzdmOGUyZDE0MWQ3ZDdjNjUwNDBhNzE4YTkxOTNmNTBlMTI4MmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-24T00:56:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-24T00:56:20Z"}, "message": "Auto merge of #72516 - Dylan-DPC:rollup-cc4w96z, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #71618 (Preserve substitutions when making trait obligations for suggestions)\n - #72092 (Unblock font loading in rustdoc.css)\n - #72400 (Add missing ASM arena declarations to librustc_middle)\n - #72489 (Fix ice-72487)\n - #72502 (fix discriminant type in generator transform)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "92461b3aa52f2fac9efae2f7488574d12c92b841", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92461b3aa52f2fac9efae2f7488574d12c92b841"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3137f8e2d141d7d7c65040a718a9193f50e1282e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3137f8e2d141d7d7c65040a718a9193f50e1282e", "html_url": "https://github.com/rust-lang/rust/commit/3137f8e2d141d7d7c65040a718a9193f50e1282e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3137f8e2d141d7d7c65040a718a9193f50e1282e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4774f9b523c942cb5c0236542b5bcac76f6b6b9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4774f9b523c942cb5c0236542b5bcac76f6b6b9a", "html_url": "https://github.com/rust-lang/rust/commit/4774f9b523c942cb5c0236542b5bcac76f6b6b9a"}, {"sha": "1e7914467a20f507f74de7cd3eb85d1e232af4bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e7914467a20f507f74de7cd3eb85d1e232af4bf", "html_url": "https://github.com/rust-lang/rust/commit/1e7914467a20f507f74de7cd3eb85d1e232af4bf"}], "stats": {"total": 181, "additions": 122, "deletions": 59}, "files": [{"sha": "2df878c3fb2201df961339ca06848d88cc74a10a", "filename": "src/librustc_middle/arena.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3137f8e2d141d7d7c65040a718a9193f50e1282e/src%2Flibrustc_middle%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3137f8e2d141d7d7c65040a718a9193f50e1282e/src%2Flibrustc_middle%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Farena.rs?ref=3137f8e2d141d7d7c65040a718a9193f50e1282e", "patch": "@@ -76,6 +76,12 @@ macro_rules! arena_types {\n             [few] hir_definitions: rustc_hir::definitions::Definitions,\n             [] hir_owner: rustc_middle::hir::Owner<$tcx>,\n             [] hir_owner_nodes: rustc_middle::hir::OwnerNodes<$tcx>,\n+\n+            // Note that this deliberately duplicates items in the `rustc_hir::arena`,\n+            // since we need to allocate this type on both the `rustc_hir` arena\n+            // (during lowering) and the `librustc_middle` arena (for decoding MIR)\n+            [decode] asm_template: rustc_ast::ast::InlineAsmTemplatePiece,\n+\n         ], $tcx);\n     )\n }"}, {"sha": "50a882ab014fd0c2a9e5475a9049b122a0ded4ca", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3137f8e2d141d7d7c65040a718a9193f50e1282e/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3137f8e2d141d7d7c65040a718a9193f50e1282e/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=3137f8e2d141d7d7c65040a718a9193f50e1282e", "patch": "@@ -266,7 +266,7 @@ impl TransformVisitor<'tcx> {\n \n     // Create a statement which reads the discriminant into a temporary\n     fn get_discr(&self, body: &mut Body<'tcx>) -> (Statement<'tcx>, Place<'tcx>) {\n-        let temp_decl = LocalDecl::new(self.tcx.types.isize, body.span).internal();\n+        let temp_decl = LocalDecl::new(self.discr_ty, body.span).internal();\n         let local_decls_len = body.local_decls.push(temp_decl);\n         let temp = Place::from(local_decls_len);\n "}, {"sha": "774146a679ab8aecb1e1dd58821e01b25aeaf65a", "filename": "src/librustc_target/asm/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3137f8e2d141d7d7c65040a718a9193f50e1282e/src%2Flibrustc_target%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3137f8e2d141d7d7c65040a718a9193f50e1282e/src%2Flibrustc_target%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fasm%2Fmod.rs?ref=3137f8e2d141d7d7c65040a718a9193f50e1282e", "patch": "@@ -223,19 +223,19 @@ impl InlineAsmReg {\n         name: Symbol,\n     ) -> Result<Self, &'static str> {\n         // FIXME: use direct symbol comparison for register names\n-        name.with(|name| {\n-            Ok(match arch {\n-                InlineAsmArch::X86 | InlineAsmArch::X86_64 => {\n-                    Self::X86(X86InlineAsmReg::parse(arch, has_feature, name)?)\n-                }\n-                InlineAsmArch::Arm => Self::Arm(ArmInlineAsmReg::parse(arch, has_feature, name)?),\n-                InlineAsmArch::AArch64 => {\n-                    Self::AArch64(AArch64InlineAsmReg::parse(arch, has_feature, name)?)\n-                }\n-                InlineAsmArch::RiscV32 | InlineAsmArch::RiscV64 => {\n-                    Self::RiscV(RiscVInlineAsmReg::parse(arch, has_feature, name)?)\n-                }\n-            })\n+        // Use `Symbol::as_str` instead of `Symbol::with` here because `has_feature` may access `Symbol`.\n+        let name = name.as_str();\n+        Ok(match arch {\n+            InlineAsmArch::X86 | InlineAsmArch::X86_64 => {\n+                Self::X86(X86InlineAsmReg::parse(arch, has_feature, &name)?)\n+            }\n+            InlineAsmArch::Arm => Self::Arm(ArmInlineAsmReg::parse(arch, has_feature, &name)?),\n+            InlineAsmArch::AArch64 => {\n+                Self::AArch64(AArch64InlineAsmReg::parse(arch, has_feature, &name)?)\n+            }\n+            InlineAsmArch::RiscV32 | InlineAsmArch::RiscV64 => {\n+                Self::RiscV(RiscVInlineAsmReg::parse(arch, has_feature, &name)?)\n+            }\n         })\n     }\n "}, {"sha": "b1c6815c7414f06bcfe49d8370fe3f74c2ba52d5", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/3137f8e2d141d7d7c65040a718a9193f50e1282e/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3137f8e2d141d7d7c65040a718a9193f50e1282e/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=3137f8e2d141d7d7c65040a718a9193f50e1282e", "patch": "@@ -1000,12 +1000,15 @@ trait InferCtxtPrivExt<'tcx> {\n         trait_ref: &ty::PolyTraitRef<'tcx>,\n     );\n \n-    fn mk_obligation_for_def_id(\n+    /// Creates a `PredicateObligation` with `new_self_ty` replacing the existing type in the\n+    /// `trait_ref`.\n+    ///\n+    /// For this to work, `new_self_ty` must have no escaping bound variables.\n+    fn mk_trait_obligation_with_new_self_ty(\n         &self,\n-        def_id: DefId,\n-        output_ty: Ty<'tcx>,\n-        cause: ObligationCause<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n+        trait_ref: &ty::PolyTraitRef<'tcx>,\n+        new_self_ty: Ty<'tcx>,\n     ) -> PredicateObligation<'tcx>;\n \n     fn maybe_report_ambiguity(\n@@ -1380,16 +1383,24 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn mk_obligation_for_def_id(\n+    fn mk_trait_obligation_with_new_self_ty(\n         &self,\n-        def_id: DefId,\n-        output_ty: Ty<'tcx>,\n-        cause: ObligationCause<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n+        trait_ref: &ty::PolyTraitRef<'tcx>,\n+        new_self_ty: Ty<'tcx>,\n     ) -> PredicateObligation<'tcx> {\n-        let new_trait_ref =\n-            ty::TraitRef { def_id, substs: self.tcx.mk_substs_trait(output_ty, &[]) };\n-        Obligation::new(cause, param_env, new_trait_ref.without_const().to_predicate(self.tcx))\n+        assert!(!new_self_ty.has_escaping_bound_vars());\n+\n+        let trait_ref = trait_ref.map_bound_ref(|tr| ty::TraitRef {\n+            substs: self.tcx.mk_substs_trait(new_self_ty, &tr.substs[1..]),\n+            ..*tr\n+        });\n+\n+        Obligation::new(\n+            ObligationCause::dummy(),\n+            param_env,\n+            trait_ref.without_const().to_predicate(self.tcx),\n+        )\n     }\n \n     fn maybe_report_ambiguity("}, {"sha": "5c85855535e38529dcaab7f7dc7d2417a28f4c96", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/3137f8e2d141d7d7c65040a718a9193f50e1282e/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3137f8e2d141d7d7c65040a718a9193f50e1282e/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=3137f8e2d141d7d7c65040a718a9193f50e1282e", "patch": "@@ -532,14 +532,17 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         };\n         let msg = format!(\"use parentheses to call the {}\", callable);\n \n-        let obligation = self.mk_obligation_for_def_id(\n-            trait_ref.def_id(),\n-            output_ty.skip_binder(),\n-            obligation.cause.clone(),\n-            obligation.param_env,\n-        );\n+        // `mk_trait_obligation_with_new_self_ty` only works for types with no escaping bound\n+        // variables, so bail out if we have any.\n+        let output_ty = match output_ty.no_bound_vars() {\n+            Some(ty) => ty,\n+            None => return,\n+        };\n+\n+        let new_obligation =\n+            self.mk_trait_obligation_with_new_self_ty(obligation.param_env, trait_ref, output_ty);\n \n-        match self.evaluate_obligation(&obligation) {\n+        match self.evaluate_obligation(&new_obligation) {\n             Ok(\n                 EvaluationResult::EvaluatedToOk\n                 | EvaluationResult::EvaluatedToOkModuloRegions\n@@ -694,7 +697,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         err: &mut DiagnosticBuilder<'_>,\n         trait_ref: &ty::Binder<ty::TraitRef<'tcx>>,\n     ) {\n-        let trait_ref = trait_ref.skip_binder();\n         let span = obligation.cause.span;\n \n         if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n@@ -705,17 +707,16 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 return;\n             }\n \n-            let mut trait_type = trait_ref.self_ty();\n+            let mut suggested_ty = trait_ref.self_ty();\n \n             for refs_remaining in 0..refs_number {\n-                if let ty::Ref(_, t_type, _) = trait_type.kind {\n-                    trait_type = t_type;\n+                if let ty::Ref(_, inner_ty, _) = suggested_ty.kind {\n+                    suggested_ty = inner_ty;\n \n-                    let new_obligation = self.mk_obligation_for_def_id(\n-                        trait_ref.def_id,\n-                        trait_type,\n-                        ObligationCause::dummy(),\n+                    let new_obligation = self.mk_trait_obligation_with_new_self_ty(\n                         obligation.param_env,\n+                        trait_ref,\n+                        suggested_ty,\n                     );\n \n                     if self.predicate_may_hold(&new_obligation) {\n@@ -782,20 +783,20 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     return;\n                 }\n \n-                let trait_type = match mutability {\n+                let suggested_ty = match mutability {\n                     hir::Mutability::Mut => self.tcx.mk_imm_ref(region, t_type),\n                     hir::Mutability::Not => self.tcx.mk_mut_ref(region, t_type),\n                 };\n \n-                let new_obligation = self.mk_obligation_for_def_id(\n-                    trait_ref.skip_binder().def_id,\n-                    trait_type,\n-                    ObligationCause::dummy(),\n+                let new_obligation = self.mk_trait_obligation_with_new_self_ty(\n                     obligation.param_env,\n+                    &trait_ref,\n+                    suggested_ty,\n                 );\n-\n-                if self.evaluate_obligation_no_overflow(&new_obligation).must_apply_modulo_regions()\n-                {\n+                let suggested_ty_would_satisfy_obligation = self\n+                    .evaluate_obligation_no_overflow(&new_obligation)\n+                    .must_apply_modulo_regions();\n+                if suggested_ty_would_satisfy_obligation {\n                     let sp = self\n                         .tcx\n                         .sess\n@@ -812,7 +813,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         err.note(&format!(\n                             \"`{}` is implemented for `{:?}`, but not for `{:?}`\",\n                             trait_ref.print_only_trait_path(),\n-                            trait_type,\n+                            suggested_ty,\n                             trait_ref.skip_binder().self_ty(),\n                         ));\n                     }\n@@ -1891,7 +1892,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         span: Span,\n     ) {\n         debug!(\n-            \"suggest_await_befor_try: obligation={:?}, span={:?}, trait_ref={:?}, trait_ref_self_ty={:?}\",\n+            \"suggest_await_before_try: obligation={:?}, span={:?}, trait_ref={:?}, trait_ref_self_ty={:?}\",\n             obligation,\n             span,\n             trait_ref,\n@@ -1946,16 +1947,15 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 );\n \n                 debug!(\n-                    \"suggest_await_befor_try: normalized_projection_type {:?}\",\n+                    \"suggest_await_before_try: normalized_projection_type {:?}\",\n                     self.resolve_vars_if_possible(&normalized_ty)\n                 );\n-                let try_obligation = self.mk_obligation_for_def_id(\n-                    trait_ref.def_id(),\n-                    normalized_ty,\n-                    obligation.cause.clone(),\n+                let try_obligation = self.mk_trait_obligation_with_new_self_ty(\n                     obligation.param_env,\n+                    trait_ref,\n+                    normalized_ty,\n                 );\n-                debug!(\"suggest_await_befor_try: try_trait_obligation {:?}\", try_obligation);\n+                debug!(\"suggest_await_before_try: try_trait_obligation {:?}\", try_obligation);\n                 if self.predicate_may_hold(&try_obligation) && impls_future {\n                     if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n                         if snippet.ends_with('?') {"}, {"sha": "b1e0ab9ca64fd1285f98bfce9e6f96e6b76cdcd8", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3137f8e2d141d7d7c65040a718a9193f50e1282e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/3137f8e2d141d7d7c65040a718a9193f50e1282e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=3137f8e2d141d7d7c65040a718a9193f50e1282e", "patch": "@@ -3,12 +3,14 @@\n \tfont-family: 'Fira Sans';\n \tfont-style: normal;\n \tfont-weight: 400;\n+\tfont-display: optional;\n \tsrc: local('Fira Sans'), url(\"FiraSans-Regular.woff\") format('woff');\n }\n @font-face {\n \tfont-family: 'Fira Sans';\n \tfont-style: normal;\n \tfont-weight: 500;\n+\tfont-display: optional;\n \tsrc: local('Fira Sans Medium'), url(\"FiraSans-Medium.woff\") format('woff');\n }\n \n@@ -17,18 +19,23 @@\n \tfont-family: 'Source Serif Pro';\n \tfont-style: normal;\n \tfont-weight: 400;\n+\t/* The difference for body text without this font is greater than other fonts,\n+\t * so the 0~100ms block of fallback is preferred over optional, for legibility. */\n+\tfont-display: fallback;\n \tsrc: local('Source Serif Pro'), url(\"SourceSerifPro-Regular.ttf.woff\") format('woff');\n }\n @font-face {\n \tfont-family: 'Source Serif Pro';\n \tfont-style: italic;\n \tfont-weight: 400;\n+\tfont-display: optional;\n \tsrc: local('Source Serif Pro Italic'), url(\"SourceSerifPro-It.ttf.woff\") format('woff');\n }\n @font-face {\n \tfont-family: 'Source Serif Pro';\n \tfont-style: normal;\n \tfont-weight: 700;\n+\tfont-display: optional;\n \tsrc: local('Source Serif Pro Bold'), url(\"SourceSerifPro-Bold.ttf.woff\") format('woff');\n }\n \n@@ -37,6 +44,7 @@\n \tfont-family: 'Source Code Pro';\n \tfont-style: normal;\n \tfont-weight: 400;\n+\tfont-display: optional;\n \t/* Avoid using locally installed font because bad versions are in circulation:\n \t * see https://github.com/rust-lang/rust/issues/24355 */\n \tsrc: url(\"SourceCodePro-Regular.woff\") format('woff');\n@@ -45,6 +53,7 @@\n \tfont-family: 'Source Code Pro';\n \tfont-style: normal;\n \tfont-weight: 600;\n+\tfont-display: optional;\n \tsrc: url(\"SourceCodePro-Semibold.woff\") format('woff');\n }\n "}, {"sha": "3dc7f502a59928b0ac8e70051510d06f46a83e54", "filename": "src/test/incremental/issue-72386.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3137f8e2d141d7d7c65040a718a9193f50e1282e/src%2Ftest%2Fincremental%2Fissue-72386.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3137f8e2d141d7d7c65040a718a9193f50e1282e/src%2Ftest%2Fincremental%2Fissue-72386.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-72386.rs?ref=3137f8e2d141d7d7c65040a718a9193f50e1282e", "patch": "@@ -0,0 +1,22 @@\n+// revisions: rpass1 cfail1 rpass3\n+// only-x86_64\n+// Regression test for issue #72386\n+// Checks that we don't ICE when switching to an invalid register\n+// and back again\n+\n+#![feature(asm)]\n+\n+#[cfg(any(rpass1, rpass3))]\n+fn main() {\n+    unsafe {\n+        asm!(\"nop\")\n+    }\n+}\n+\n+#[cfg(cfail1)]\n+fn main() {\n+    unsafe {\n+        asm!(\"nop\",out(\"invalid_reg\")_)\n+        //[cfail1]~^ ERROR invalid register\n+    }\n+}"}, {"sha": "6a32a42d85a82089532e0062bf96ae3beecf189a", "filename": "src/test/mir-opt/generator-drop-cleanup/rustc.main-{{closure}}.generator_drop.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3137f8e2d141d7d7c65040a718a9193f50e1282e/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup%2Frustc.main-%7B%7Bclosure%7D%7D.generator_drop.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/3137f8e2d141d7d7c65040a718a9193f50e1282e/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup%2Frustc.main-%7B%7Bclosure%7D%7D.generator_drop.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup%2Frustc.main-%7B%7Bclosure%7D%7D.generator_drop.0.mir?ref=3137f8e2d141d7d7c65040a718a9193f50e1282e", "patch": "@@ -9,7 +9,7 @@ fn main::{{closure}}#0(_1: *mut [generator@$DIR/generator-drop-cleanup.rs:10:15:\n     let mut _5: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:12:9: 12:14\n     let mut _7: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:10:18: 10:18\n     let mut _8: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n-    let mut _9: isize;                   // in scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n+    let mut _9: u32;                     // in scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     scope 1 {\n         debug _s => (((*_1) as variant#3).0: std::string::String); // in scope 1 at $DIR/generator-drop-cleanup.rs:11:13: 11:15\n     }"}, {"sha": "c73dea5f8fde691402ba7d1034eb6f36b044028b", "filename": "src/test/mir-opt/generator-tiny/rustc.main-{{closure}}.generator_resume.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3137f8e2d141d7d7c65040a718a9193f50e1282e/src%2Ftest%2Fmir-opt%2Fgenerator-tiny%2Frustc.main-%7B%7Bclosure%7D%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/3137f8e2d141d7d7c65040a718a9193f50e1282e/src%2Ftest%2Fmir-opt%2Fgenerator-tiny%2Frustc.main-%7B%7Bclosure%7D%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-tiny%2Frustc.main-%7B%7Bclosure%7D%7D.generator_resume.0.mir?ref=3137f8e2d141d7d7c65040a718a9193f50e1282e", "patch": "@@ -12,7 +12,7 @@ fn main::{{closure}}#0(_1: std::pin::Pin<&mut [generator@$DIR/generator-tiny.rs:\n     let _8: ();                          // in scope 0 at $DIR/generator-tiny.rs:23:13: 23:21\n     let mut _9: ();                      // in scope 0 at $DIR/generator-tiny.rs:19:25: 19:25\n     let _10: u8;                         // in scope 0 at $DIR/generator-tiny.rs:19:17: 19:19\n-    let mut _11: isize;                  // in scope 0 at $DIR/generator-tiny.rs:19:16: 25:6\n+    let mut _11: u32;                    // in scope 0 at $DIR/generator-tiny.rs:19:16: 25:6\n     scope 1 {\n         debug _d => (((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 25:6 {u8, HasDrop, ()}])) as variant#3).0: HasDrop); // in scope 1 at $DIR/generator-tiny.rs:20:13: 20:15\n     }"}, {"sha": "f7affdbf1b4084729b9d4fb8b8be27e54ef7f775", "filename": "src/test/ui/suggestions/into-str.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3137f8e2d141d7d7c65040a718a9193f50e1282e/src%2Ftest%2Fui%2Fsuggestions%2Finto-str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3137f8e2d141d7d7c65040a718a9193f50e1282e/src%2Ftest%2Fui%2Fsuggestions%2Finto-str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Finto-str.stderr?ref=3137f8e2d141d7d7c65040a718a9193f50e1282e", "patch": "@@ -8,7 +8,6 @@ LL |     foo(String::new());\n    |     ^^^ the trait `std::convert::From<std::string::String>` is not implemented for `&str`\n    |\n    = note: to coerce a `std::string::String` into a `&str`, use `&*` as a prefix\n-   = note: `std::convert::From<std::string::String>` is implemented for `&mut str`, but not for `&str`\n    = note: required because of the requirements on the impl of `std::convert::Into<&str>` for `std::string::String`\n \n error: aborting due to previous error"}, {"sha": "9ffcc3f7bc1c1f85649780f2233382ee1c85361a", "filename": "src/test/ui/suggestions/issue-71394-no-from-impl.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3137f8e2d141d7d7c65040a718a9193f50e1282e/src%2Ftest%2Fui%2Fsuggestions%2Fissue-71394-no-from-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3137f8e2d141d7d7c65040a718a9193f50e1282e/src%2Ftest%2Fui%2Fsuggestions%2Fissue-71394-no-from-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-71394-no-from-impl.rs?ref=3137f8e2d141d7d7c65040a718a9193f50e1282e", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    let data: &[u8] = &[0; 10];\n+    let _: &[i8] = data.into();\n+    //~^ ERROR the trait bound `&[i8]: std::convert::From<&[u8]>` is not satisfied\n+}"}, {"sha": "84c73c2f67e707816b39064b7a4b357716a88985", "filename": "src/test/ui/suggestions/issue-71394-no-from-impl.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3137f8e2d141d7d7c65040a718a9193f50e1282e/src%2Ftest%2Fui%2Fsuggestions%2Fissue-71394-no-from-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3137f8e2d141d7d7c65040a718a9193f50e1282e/src%2Ftest%2Fui%2Fsuggestions%2Fissue-71394-no-from-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-71394-no-from-impl.stderr?ref=3137f8e2d141d7d7c65040a718a9193f50e1282e", "patch": "@@ -0,0 +1,11 @@\n+error[E0277]: the trait bound `&[i8]: std::convert::From<&[u8]>` is not satisfied\n+  --> $DIR/issue-71394-no-from-impl.rs:3:25\n+   |\n+LL |     let _: &[i8] = data.into();\n+   |                         ^^^^ the trait `std::convert::From<&[u8]>` is not implemented for `&[i8]`\n+   |\n+   = note: required because of the requirements on the impl of `std::convert::Into<&[i8]>` for `&[u8]`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}