{"sha": "e05c2f80da3bf538c045d0682426a25b1c4b862b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwNWMyZjgwZGEzYmY1MzhjMDQ1ZDA2ODI0MjZhMjViMWM0Yjg2MmI=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2015-03-05T09:46:45Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2015-03-05T12:57:51Z"}, "message": "trans: Add early-out when translating unreachable controlflow expressions.", "tree": {"sha": "31d458a2c799e98d4ebf349fd5b0b6b6ac6fa3df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31d458a2c799e98d4ebf349fd5b0b6b6ac6fa3df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e05c2f80da3bf538c045d0682426a25b1c4b862b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e05c2f80da3bf538c045d0682426a25b1c4b862b", "html_url": "https://github.com/rust-lang/rust/commit/e05c2f80da3bf538c045d0682426a25b1c4b862b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e05c2f80da3bf538c045d0682426a25b1c4b862b/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fed12499e7d91f9cdfba5833e34d20e8fd19b898", "url": "https://api.github.com/repos/rust-lang/rust/commits/fed12499e7d91f9cdfba5833e34d20e8fd19b898", "html_url": "https://github.com/rust-lang/rust/commit/fed12499e7d91f9cdfba5833e34d20e8fd19b898"}], "stats": {"total": 130, "additions": 128, "deletions": 2}, "files": [{"sha": "9093f56d33accf8f6e269da1104468a92c2f7279", "filename": "src/librustc_trans/trans/controlflow.rs", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/e05c2f80da3bf538c045d0682426a25b1c4b862b/src%2Flibrustc_trans%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e05c2f80da3bf538c045d0682426a25b1c4b862b/src%2Flibrustc_trans%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontrolflow.rs?ref=e05c2f80da3bf538c045d0682426a25b1c4b862b", "patch": "@@ -40,6 +40,10 @@ pub fn trans_stmt<'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n     let fcx = cx.fcx;\n     debug!(\"trans_stmt({})\", s.repr(cx.tcx()));\n \n+    if cx.unreachable.get() {\n+        return cx;\n+    }\n+\n     if cx.sess().asm_comments() {\n         add_span_comment(cx, s.span, &s.repr(cx.tcx()));\n     }\n@@ -76,6 +80,11 @@ pub fn trans_stmt<'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n pub fn trans_stmt_semi<'blk, 'tcx>(cx: Block<'blk, 'tcx>, e: &ast::Expr)\n                                    -> Block<'blk, 'tcx> {\n     let _icx = push_ctxt(\"trans_stmt_semi\");\n+\n+    if cx.unreachable.get() {\n+        return cx;\n+    }\n+\n     let ty = expr_ty(cx, e);\n     if cx.fcx.type_needs_drop(ty) {\n         expr::trans_to_lvalue(cx, e, \"stmt\").bcx\n@@ -89,6 +98,11 @@ pub fn trans_block<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                mut dest: expr::Dest)\n                                -> Block<'blk, 'tcx> {\n     let _icx = push_ctxt(\"trans_block\");\n+\n+    if bcx.unreachable.get() {\n+        return bcx;\n+    }\n+\n     let fcx = bcx.fcx;\n     let mut bcx = bcx;\n \n@@ -141,6 +155,11 @@ pub fn trans_if<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n            bcx.to_str(), if_id, bcx.expr_to_string(cond), thn.id,\n            dest.to_string(bcx.ccx()));\n     let _icx = push_ctxt(\"trans_if\");\n+\n+    if bcx.unreachable.get() {\n+        return bcx;\n+    }\n+\n     let mut bcx = bcx;\n \n     let cond_val = unpack_result!(bcx, expr::trans(bcx, cond).to_llbool());\n@@ -214,6 +233,11 @@ pub fn trans_while<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                body: &ast::Block)\n                                -> Block<'blk, 'tcx> {\n     let _icx = push_ctxt(\"trans_while\");\n+\n+    if bcx.unreachable.get() {\n+        return bcx;\n+    }\n+\n     let fcx = bcx.fcx;\n \n     //            bcx\n@@ -257,6 +281,11 @@ pub fn trans_loop<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                               body: &ast::Block)\n                               -> Block<'blk, 'tcx> {\n     let _icx = push_ctxt(\"trans_loop\");\n+\n+    if bcx.unreachable.get() {\n+        return bcx;\n+    }\n+\n     let fcx = bcx.fcx;\n \n     //            bcx\n@@ -296,12 +325,13 @@ pub fn trans_break_cont<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                     exit: uint)\n                                     -> Block<'blk, 'tcx> {\n     let _icx = push_ctxt(\"trans_break_cont\");\n-    let fcx = bcx.fcx;\n \n     if bcx.unreachable.get() {\n         return bcx;\n     }\n \n+    let fcx = bcx.fcx;\n+\n     // Locate loop that we will break to\n     let loop_id = match opt_label {\n         None => fcx.top_loop_scope(),\n@@ -341,6 +371,11 @@ pub fn trans_ret<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                              retval_expr: Option<&ast::Expr>)\n                              -> Block<'blk, 'tcx> {\n     let _icx = push_ctxt(\"trans_ret\");\n+\n+    if bcx.unreachable.get() {\n+        return bcx;\n+    }\n+\n     let fcx = bcx.fcx;\n     let mut bcx = bcx;\n     let dest = match (fcx.llretslotptr.get(), retval_expr) {\n@@ -372,6 +407,10 @@ pub fn trans_fail<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     let ccx = bcx.ccx();\n     let _icx = push_ctxt(\"trans_fail_value\");\n \n+    if bcx.unreachable.get() {\n+        return bcx;\n+    }\n+\n     let v_str = C_str_slice(ccx, fail_str);\n     let loc = bcx.sess().codemap().lookup_char_pos(call_info.span.lo);\n     let filename = token::intern_and_get_ident(&loc.file.name);\n@@ -399,6 +438,10 @@ pub fn trans_fail_bounds_check<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     let ccx = bcx.ccx();\n     let _icx = push_ctxt(\"trans_fail_bounds_check\");\n \n+    if bcx.unreachable.get() {\n+        return bcx;\n+    }\n+\n     // Extract the file/line from the span\n     let loc = bcx.sess().codemap().lookup_char_pos(call_info.span.lo);\n     let filename = token::intern_and_get_ident(&loc.file.name);"}, {"sha": "63536b1383475be0889ea6b93bb21a572f6ccb74", "filename": "src/test/debuginfo/unreachable-locals.rs", "status": "modified", "additions": 84, "deletions": 1, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/e05c2f80da3bf538c045d0682426a25b1c4b862b/src%2Ftest%2Fdebuginfo%2Funreachable-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e05c2f80da3bf538c045d0682426a25b1c4b862b/src%2Ftest%2Fdebuginfo%2Funreachable-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Funreachable-locals.rs?ref=e05c2f80da3bf538c045d0682426a25b1c4b862b", "patch": "@@ -26,6 +26,22 @@ fn after_return() {\n         (a, ref b) => {}\n     }\n     for a in &[111i32] {}\n+    let test = if some_predicate() { 1 } else { 2 };\n+    while some_predicate() {\n+        let abc = !some_predicate();\n+    }\n+    loop {\n+        let abc = !some_predicate();\n+        break;\n+    }\n+    // nested block\n+    {\n+        let abc = !some_predicate();\n+\n+        {\n+            let def = !some_predicate();\n+        }\n+    }\n }\n \n fn after_panic() {\n@@ -36,6 +52,22 @@ fn after_panic() {\n         (a, ref b) => {}\n     }\n     for a in &[111i32] {}\n+    let test = if some_predicate() { 1 } else { 2 };\n+    while some_predicate() {\n+        let abc = !some_predicate();\n+    }\n+    loop {\n+        let abc = !some_predicate();\n+        break;\n+    }\n+    // nested block\n+    {\n+        let abc = !some_predicate();\n+\n+        {\n+            let def = !some_predicate();\n+        }\n+    }\n }\n \n fn after_diverging_function() {\n@@ -46,6 +78,22 @@ fn after_diverging_function() {\n         (a, ref b) => {}\n     }\n     for a in &[111i32] {}\n+    let test = if some_predicate() { 1 } else { 2 };\n+    while some_predicate() {\n+        let abc = !some_predicate();\n+    }\n+    loop {\n+        let abc = !some_predicate();\n+        break;\n+    }\n+    // nested block\n+    {\n+        let abc = !some_predicate();\n+\n+        {\n+            let def = !some_predicate();\n+        }\n+    }\n }\n \n fn after_break() {\n@@ -57,18 +105,50 @@ fn after_break() {\n             (a, ref b) => {}\n         }\n         for a in &[111i32] {}\n+        let test = if some_predicate() { 1 } else { 2 };\n+        while some_predicate() {\n+            let abc = !some_predicate();\n+        }\n+        loop {\n+            let abc = !some_predicate();\n+            break;\n+        }\n+        // nested block\n+        {\n+            let abc = !some_predicate();\n+\n+            {\n+                let def = !some_predicate();\n+            }\n+        }\n     }\n }\n \n fn after_continue() {\n     for _ in 0..10i32 {\n-        break;\n+        continue;\n         let x = \"0\";\n         let (ref y,z) = (1i32, 2u32);\n         match (20i32, 'c') {\n             (a, ref b) => {}\n         }\n         for a in &[111i32] {}\n+        let test = if some_predicate() { 1 } else { 2 };\n+        while some_predicate() {\n+            let abc = !some_predicate();\n+        }\n+        loop {\n+            let abc = !some_predicate();\n+            break;\n+        }\n+        // nested block\n+        {\n+            let abc = !some_predicate();\n+\n+            {\n+                let def = !some_predicate();\n+            }\n+        }\n     }\n }\n \n@@ -83,3 +163,6 @@ fn main() {\n fn diverge() -> ! {\n     panic!();\n }\n+\n+fn some_predicate() -> bool { true || false }\n+"}]}