{"sha": "f523ec58ab25596ae9f7139dae322376a94c5b1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1MjNlYzU4YWIyNTU5NmFlOWY3MTM5ZGFlMzIyMzc2YTk0YzViMWE=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-12-24T04:57:29Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-12-24T04:57:29Z"}, "message": "Do not give up rewriting struct field when attribute is long", "tree": {"sha": "bc51e2dd57f42b83f801a4ab4d6c96aebe007180", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc51e2dd57f42b83f801a4ab4d6c96aebe007180"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f523ec58ab25596ae9f7139dae322376a94c5b1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f523ec58ab25596ae9f7139dae322376a94c5b1a", "html_url": "https://github.com/rust-lang/rust/commit/f523ec58ab25596ae9f7139dae322376a94c5b1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f523ec58ab25596ae9f7139dae322376a94c5b1a/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "939a6c58202f775a63e46fbde4e0d6b3b04cf8aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/939a6c58202f775a63e46fbde4e0d6b3b04cf8aa", "html_url": "https://github.com/rust-lang/rust/commit/939a6c58202f775a63e46fbde4e0d6b3b04cf8aa"}], "stats": {"total": 36, "additions": 24, "deletions": 12}, "files": [{"sha": "e313179fae904ad2b6da4e98b4a204177f08b27b", "filename": "src/items.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f523ec58ab25596ae9f7139dae322376a94c5b1a/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f523ec58ab25596ae9f7139dae322376a94c5b1a/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=f523ec58ab25596ae9f7139dae322376a94c5b1a", "patch": "@@ -22,7 +22,7 @@ use codemap::{LineRangeUtils, SpanUtils};\n use comment::{combine_strs_with_missing_comments, contains_comment, recover_comment_removed,\n               recover_missing_comment_in_span, rewrite_missing_comment, FindUncommented};\n use config::{BraceStyle, Config, Density, IndentStyle};\n-use expr::{choose_rhs, format_expr, is_empty_block, is_simple_block_stmt, rewrite_assign_rhs,\n+use expr::{format_expr, is_empty_block, is_simple_block_stmt, rewrite_assign_rhs,\n            rewrite_call_inner, ExprType};\n use lists::{definitive_tactic, itemize_list, write_list, DefinitiveListTactic, ListFormatting,\n             ListItem, ListTactic, Separator, SeparatorPlace, SeparatorTactic};\n@@ -1430,8 +1430,7 @@ pub fn rewrite_struct_field(\n     lhs_max_width: usize,\n ) -> Option<String> {\n     if contains_skip(&field.attrs) {\n-        let snippet = context.snippet(mk_sp(field.attrs[0].span.lo(), field.span.hi()));\n-        return Some(snippet.to_owned());\n+        return Some(context.snippet(field.span()).to_owned());\n     }\n \n     let type_annotation_spacing = type_annotation_spacing(context.config);\n@@ -1468,24 +1467,25 @@ pub fn rewrite_struct_field(\n     if prefix.is_empty() && !attrs_str.is_empty() && attrs_extendable && spacing.is_empty() {\n         spacing.push(' ');\n     }\n-    let ty_shape = shape.offset_left(overhead + spacing.len())?;\n-    let mut orig_ty = field.ty.rewrite(context, ty_shape);\n+    let orig_ty = shape\n+        .offset_left(overhead + spacing.len())\n+        .and_then(|ty_shape| field.ty.rewrite(context, ty_shape));\n     if let Some(ref ty) = orig_ty {\n         if !ty.contains('\\n') {\n             return Some(attr_prefix + &spacing + ty);\n         }\n     }\n \n+    let is_prefix_empty = prefix.is_empty();\n     // We must use multiline. We are going to put attributes and a field on different lines.\n-    // 1 = \" \"\n-    let rhs_shape = shape.offset_left(last_line_width(&prefix) + 1)?;\n-    orig_ty = field.ty.rewrite(context, rhs_shape);\n-    let field_str = if prefix.is_empty() {\n-        orig_ty?\n+    let field_str = rewrite_assign_rhs(context, prefix, &*field.ty, shape)?;\n+    // Remove a leading white-space from `rewrite_assign_rhs()` when rewriting a tuple struct.\n+    let field_str = if is_prefix_empty {\n+        field_str.trim_left()\n     } else {\n-        prefix + &choose_rhs(context, &*field.ty, rhs_shape, orig_ty)?\n+        &field_str\n     };\n-    combine_strs_with_missing_comments(context, &attrs_str, &field_str, missing_span, shape, false)\n+    combine_strs_with_missing_comments(context, &attrs_str, field_str, missing_span, shape, false)\n }\n \n pub struct StaticParts<'a> {"}, {"sha": "76d6eda88538ea9cf01d10670477d43f9c20b008", "filename": "tests/source/struct-field-attributes.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f523ec58ab25596ae9f7139dae322376a94c5b1a/tests%2Fsource%2Fstruct-field-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f523ec58ab25596ae9f7139dae322376a94c5b1a/tests%2Fsource%2Fstruct-field-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstruct-field-attributes.rs?ref=f523ec58ab25596ae9f7139dae322376a94c5b1a", "patch": "@@ -44,3 +44,9 @@ pub enum State {\n struct Fields(\n     #[cfg_attr(feature = \"serde_derive\", serde(state_with = \"::base::serialization::shared\"))] Arc<Vec<InternedStr>>,\n );\n+\n+// #2309\n+pub struct A {\n+#[doc=\"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"]\n+pub foos:Vec<bool>\n+}"}, {"sha": "8bf10fae3e1286c03643f33663be7e3238304813", "filename": "tests/target/struct-field-attributes.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f523ec58ab25596ae9f7139dae322376a94c5b1a/tests%2Ftarget%2Fstruct-field-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f523ec58ab25596ae9f7139dae322376a94c5b1a/tests%2Ftarget%2Fstruct-field-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstruct-field-attributes.rs?ref=f523ec58ab25596ae9f7139dae322376a94c5b1a", "patch": "@@ -46,3 +46,9 @@ struct Fields(\n     #[cfg_attr(feature = \"serde_derive\", serde(state_with = \"::base::serialization::shared\"))]\n     Arc<Vec<InternedStr>>,\n );\n+\n+// #2309\n+pub struct A {\n+    #[doc = \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"]\n+    pub foos: Vec<bool>,\n+}"}]}