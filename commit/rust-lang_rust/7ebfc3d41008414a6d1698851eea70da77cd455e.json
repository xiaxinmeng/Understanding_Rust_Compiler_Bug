{"sha": "7ebfc3d41008414a6d1698851eea70da77cd455e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlYmZjM2Q0MTAwODQxNGE2ZDE2OTg4NTFlZWE3MGRhNzdjZDQ1NWU=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-05-26T13:23:05Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-05-26T13:23:05Z"}, "message": "Document semantic token tags", "tree": {"sha": "5883b24b29b6cca7008e1059356ae32ec9ecf162", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5883b24b29b6cca7008e1059356ae32ec9ecf162"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ebfc3d41008414a6d1698851eea70da77cd455e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ebfc3d41008414a6d1698851eea70da77cd455e", "html_url": "https://github.com/rust-lang/rust/commit/7ebfc3d41008414a6d1698851eea70da77cd455e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ebfc3d41008414a6d1698851eea70da77cd455e/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a1fd05760260be9a91f6fad2fd6463edffbcb13", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a1fd05760260be9a91f6fad2fd6463edffbcb13", "html_url": "https://github.com/rust-lang/rust/commit/5a1fd05760260be9a91f6fad2fd6463edffbcb13"}], "stats": {"total": 82, "additions": 76, "deletions": 6}, "files": [{"sha": "79c2f4a1ed353751f35ee6aee627a1fedd4e41a7", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 74, "deletions": 4, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/7ebfc3d41008414a6d1698851eea70da77cd455e/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebfc3d41008414a6d1698851eea70da77cd455e/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=7ebfc3d41008414a6d1698851eea70da77cd455e", "patch": "@@ -42,24 +42,94 @@ pub struct HlRange {\n // Feature: Semantic Syntax Highlighting\n //\n // rust-analyzer highlights the code semantically.\n-// For example, `bar` in `foo::Bar` might be colored differently depending on whether `Bar` is an enum or a trait.\n-// rust-analyzer does not specify colors directly, instead it assigns tag (like `struct`) and a set of modifiers (like `declaration`) to each token.\n+// For example, `Bar` in `foo::Bar` might be colored differently depending on whether `Bar` is an enum or a trait.\n+// rust-analyzer does not specify colors directly, instead it assigns a tag (like `struct`) and a set of modifiers (like `declaration`) to each token.\n // It's up to the client to map those to specific colors.\n //\n // The general rule is that a reference to an entity gets colored the same way as the entity itself.\n // We also give special modifier for `mut` and `&mut` local variables.\n //\n+//\n+// .Token Tags\n+//\n+// Rust-analyzer currently emits the following token tags:\n+//\n+// - For items:\n+// +\n+// [horizontal]\n+// enum:: Emitted for enums.\n+// function:: Emitted for free-standing functions.\n+// macro:: Emitted for macros.\n+// method:: Emitted for associated functions, also knowns as methods.\n+// namespace:: Emitted for modules.\n+// struct:: Emitted for structs.\n+// trait:: Emitted for traits.\n+// typeAlias:: Emitted for type aliases and `Self` in `impl`s.\n+// union:: Emitted for unions.\n+//\n+// - For literals:\n+// +\n+// [horizontal]\n+// boolean:: Emitted for the boolean literals `true` and `false`.\n+// character:: Emitted for character literals.\n+// number:: Emitted for numeric literals.\n+// string:: Emitted for string literals.\n+// escapeSequence:: Emitted for escaped sequences inside strings like `\\n`.\n+// formatSpecifier:: Emitted for format specifiers `{:?}` in `format!`-like macros.\n+//\n+// - For operators:\n+// +\n+// [horizontal]\n+// operator:: Emitted for general operators.\n+// arithmetic:: Emitted for the arithmetic operators `+`, `-`, `*`, `/`, `+=`, `-=`, `*=`, `/=`.\n+// bitwise:: Emitted for the bitwise operators `|`, `&`, `!`, `^`, `|=`, `&=`, `^=`.\n+// comparison:: Emitted for the comparison operators `>`, `<`, `==`, `>=`, `<=`, `!=`.\n+// logical:: Emitted for the logical operators `||`, `&&`, `!`.\n+//\n+// - For punctuation:\n+// +\n+// [horizontal]\n+// punctuation:: Emitted for general punctuation.\n+// angle:: Emitted for `<>` angle brackets.\n+// brace:: Emitted for `{}` braces.\n+// bracket:: Emitted for `[]` brackets.\n+// parenthesis:: Emitted for `()` parentheses.\n+// colon:: Emitted for the `:` token.\n+// comma:: Emitted for the `,` token.\n+// dot:: Emitted for the `.` token.\n+// Semi:: Emitted for the `;` token.\n+//\n+// //-\n+//\n+// [horizontal]\n+// attribute:: Emitted for attributes.\n+// builtinType:: Emitted for builtin types like `u32`, `str` and `f32`.\n+// comment:: Emitted for comments.\n+// constParameter:: Emitted for const parameters.\n+// enumMember:: Emitted for enum variants.\n+// generic:: Emitted for generic tokens that have no mapping.\n+// keyword:: Emitted for keywords.\n+// label:: Emitted for labels.\n+// lifetime:: Emitted for lifetimes.\n+// parameter:: Emitted for non-self function parameters.\n+// property:: Emitted for struct and union fields.\n+// selfKeyword:: Emitted for the self function parameter and self path-specifier.\n+// typeParameter:: Emitted for type parameters.\n+// unresolvedReference:: Emitted for unresolved references, names that rust-analyzer can't find the definition of.\n+// variable:: Emitted for locals, constants and statics.\n+//\n+//\n // .Token Modifiers\n //\n // Token modifiers allow to style some elements in the source code more precisely.\n //\n // Rust-analyzer currently emits the following token modifiers:\n //\n // [horizontal]\n-// associated:: Emitted for associated items.\n // async:: Emitted for async functions and the `async` and `await` keywords.\n // attribute:: Emitted for tokens inside attributes.\n // callable:: Emitted for locals whose types implements one of the `Fn*` traits.\n+// constant:: Emitted for consts.\n // consuming:: Emitted for locals that are being consumed when use in a function call.\n // controlFlow:: Emitted for control-flow related tokens, this includes the `?` operator.\n // declaration:: Emitted for names of definitions, like `foo` in `fn foo() {}`.\n@@ -68,7 +138,7 @@ pub struct HlRange {\n // intraDocLink:: Emitted for intra doc links in doc-strings.\n // library:: Emitted for items that are defined outside of the current crate.\n // mutable:: Emitted for mutable locals and statics.\n-// static:: Emitted for \"static\" functions, also known as functions that do not take a `self` param.\n+// static:: Emitted for \"static\" functions, also known as functions that do not take a `self` param, as well as statics and consts.\n // trait:: Emitted for associated trait items.\n // unsafe:: Emitted for unsafe operations, like unsafe function calls, as well as the `unsafe` token.\n //"}, {"sha": "db216d951f21b3626dd583df7002ed91f2b8d88e", "filename": "crates/rust-analyzer/src/semantic_tokens.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ebfc3d41008414a6d1698851eea70da77cd455e/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebfc3d41008414a6d1698851eea70da77cd455e/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs?ref=7ebfc3d41008414a6d1698851eea70da77cd455e", "patch": "@@ -46,7 +46,7 @@ define_semantic_token_types![\n     (BRACE, \"brace\"),\n     (BRACKET, \"bracket\"),\n     (BUILTIN_TYPE, \"builtinType\"),\n-    (CHAR_LITERAL, \"characterLiteral\"),\n+    (CHAR, \"character\"),\n     (COLON, \"colon\"),\n     (COMMA, \"comma\"),\n     (COMPARISON, \"comparison\"),"}, {"sha": "6d18d0ffc145ef650ab4df2c64442ae5985ec1e9", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ebfc3d41008414a6d1698851eea70da77cd455e/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebfc3d41008414a6d1698851eea70da77cd455e/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=7ebfc3d41008414a6d1698851eea70da77cd455e", "patch": "@@ -466,7 +466,7 @@ fn semantic_token_type_and_modifiers(\n         HlTag::BoolLiteral => semantic_tokens::BOOLEAN,\n         HlTag::BuiltinType => semantic_tokens::BUILTIN_TYPE,\n         HlTag::ByteLiteral | HlTag::NumericLiteral => lsp_types::SemanticTokenType::NUMBER,\n-        HlTag::CharLiteral => semantic_tokens::CHAR_LITERAL,\n+        HlTag::CharLiteral => semantic_tokens::CHAR,\n         HlTag::Comment => lsp_types::SemanticTokenType::COMMENT,\n         HlTag::EscapeSequence => semantic_tokens::ESCAPE_SEQUENCE,\n         HlTag::FormatSpecifier => semantic_tokens::FORMAT_SPECIFIER,"}]}