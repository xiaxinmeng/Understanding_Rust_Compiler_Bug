{"sha": "dded90a748737c3661aad043524f2248e324c867", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkZWQ5MGE3NDg3MzdjMzY2MWFhZDA0MzUyNGYyMjQ4ZTMyNGM4Njc=", "commit": {"author": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-02-07T14:13:15Z"}, "committer": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-02-07T17:28:10Z"}, "message": "Formatting", "tree": {"sha": "f871cdf435b0c4d5cafa9f4c3f5c725e823e8088", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f871cdf435b0c4d5cafa9f4c3f5c725e823e8088"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dded90a748737c3661aad043524f2248e324c867", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dded90a748737c3661aad043524f2248e324c867", "html_url": "https://github.com/rust-lang/rust/commit/dded90a748737c3661aad043524f2248e324c867", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dded90a748737c3661aad043524f2248e324c867/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6787f124b5557120cd1e4557cbdb59aa7f215be6", "url": "https://api.github.com/repos/rust-lang/rust/commits/6787f124b5557120cd1e4557cbdb59aa7f215be6", "html_url": "https://github.com/rust-lang/rust/commit/6787f124b5557120cd1e4557cbdb59aa7f215be6"}], "stats": {"total": 151, "additions": 98, "deletions": 53}, "files": [{"sha": "4d96417285420cdb1e60862e97d6560491aee445", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dded90a748737c3661aad043524f2248e324c867/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dded90a748737c3661aad043524f2248e324c867/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=dded90a748737c3661aad043524f2248e324c867", "patch": "@@ -10,10 +10,9 @@ use hir_def::{\n     per_ns::PerNs,\n     resolver::HasResolver,\n     type_ref::{Mutability, TypeRef},\n-    AdtId, ConstId, DefWithBodyId, EnumId, FunctionId, HasModule, ImplId, LocalEnumVariantId,\n-    LocalModuleId, LocalStructFieldId, Lookup, ModuleId, StaticId, StructId, TraitId, TypeAliasId,\n-    TypeParamId, UnionId,\n-    GenericDefId\n+    AdtId, ConstId, DefWithBodyId, EnumId, FunctionId, GenericDefId, HasModule, ImplId,\n+    LocalEnumVariantId, LocalModuleId, LocalStructFieldId, Lookup, ModuleId, StaticId, StructId,\n+    TraitId, TypeAliasId, TypeParamId, UnionId,\n };\n use hir_expand::{\n     diagnostics::DiagnosticSink,\n@@ -22,8 +21,7 @@ use hir_expand::{\n };\n use hir_ty::{\n     autoderef, display::HirFormatter, expr::ExprValidator, method_resolution, ApplicationTy,\n-    Canonical, InEnvironment, TraitEnvironment, Ty, TyDefId, TypeCtor,\n-    Substs\n+    Canonical, InEnvironment, Substs, TraitEnvironment, Ty, TyDefId, TypeCtor,\n };\n use ra_db::{CrateId, Edition, FileId};\n use ra_prof::profile;"}, {"sha": "f765e6edc202b84e38543ea5ec8d45e3262a3835", "filename": "crates/ra_hir_def/src/generics.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dded90a748737c3661aad043524f2248e324c867/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dded90a748737c3661aad043524f2248e324c867/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs?ref=dded90a748737c3661aad043524f2248e324c867", "patch": "@@ -61,7 +61,7 @@ pub struct WherePredicate {\n pub enum WherePredicateTarget {\n     TypeRef(TypeRef),\n     /// For desugared where predicates that can directly refer to a type param.\n-    TypeParam(LocalTypeParamId)\n+    TypeParam(LocalTypeParamId),\n }\n \n type SourceMap = ArenaMap<LocalTypeParamId, Either<ast::TraitDef, ast::TypeParam>>;\n@@ -197,7 +197,8 @@ impl GenericParams {\n             return;\n         }\n         let bound = TypeBound::from_ast(bound);\n-        self.where_predicates.push(WherePredicate { target: WherePredicateTarget::TypeRef(type_ref), bound });\n+        self.where_predicates\n+            .push(WherePredicate { target: WherePredicateTarget::TypeRef(type_ref), bound });\n     }\n \n     fn fill_implicit_impl_trait_args(&mut self, type_ref: &TypeRef) {\n@@ -212,7 +213,7 @@ impl GenericParams {\n                 for bound in bounds {\n                     self.where_predicates.push(WherePredicate {\n                         target: WherePredicateTarget::TypeParam(param_id),\n-                        bound: bound.clone()\n+                        bound: bound.clone(),\n                     });\n                 }\n             }\n@@ -226,9 +227,13 @@ impl GenericParams {\n     }\n \n     pub fn find_trait_self_param(&self) -> Option<LocalTypeParamId> {\n-        self.types\n-            .iter()\n-            .find_map(|(id, p)| if p.provenance == TypeParamProvenance::TraitSelf { Some(id) } else { None })\n+        self.types.iter().find_map(|(id, p)| {\n+            if p.provenance == TypeParamProvenance::TraitSelf {\n+                Some(id)\n+            } else {\n+                None\n+            }\n+        })\n     }\n }\n "}, {"sha": "102fdb13d72f5ed70e1f20e6100ac10739328b32", "filename": "crates/ra_hir_def/src/type_ref.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dded90a748737c3661aad043524f2248e324c867/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dded90a748737c3661aad043524f2248e324c867/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs?ref=dded90a748737c3661aad043524f2248e324c867", "patch": "@@ -131,9 +131,7 @@ impl TypeRef {\n         fn go(type_ref: &TypeRef, f: &mut impl FnMut(&TypeRef)) {\n             f(type_ref);\n             match type_ref {\n-                TypeRef::Fn(types) | TypeRef::Tuple(types) => {\n-                    types.iter().for_each(|t| go(t, f))\n-                }\n+                TypeRef::Fn(types) | TypeRef::Tuple(types) => types.iter().for_each(|t| go(t, f)),\n                 TypeRef::RawPtr(type_ref, _)\n                 | TypeRef::Reference(type_ref, _)\n                 | TypeRef::Array(type_ref)"}, {"sha": "e9bfcfa176808b661bbfb310c6abba6253656d14", "filename": "crates/ra_hir_ty/src/db.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dded90a748737c3661aad043524f2248e324c867/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dded90a748737c3661aad043524f2248e324c867/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs?ref=dded90a748737c3661aad043524f2248e324c867", "patch": "@@ -3,7 +3,8 @@\n use std::sync::Arc;\n \n use hir_def::{\n-    db::DefDatabase, DefWithBodyId, GenericDefId, ImplId, LocalStructFieldId, TraitId, VariantId, TypeParamId,\n+    db::DefDatabase, DefWithBodyId, GenericDefId, ImplId, LocalStructFieldId, TraitId, TypeParamId,\n+    VariantId,\n };\n use ra_arena::map::ArenaMap;\n use ra_db::{impl_intern_key, salsa, CrateId};\n@@ -12,8 +13,8 @@ use ra_prof::profile;\n use crate::{\n     method_resolution::CrateImplBlocks,\n     traits::{chalk, AssocTyValue, Impl},\n-    CallableDef, PolyFnSig, GenericPredicate, InferenceResult, Substs, TraitRef, Ty, TyDefId, TypeCtor,\n-    ValueTyDefId, Binders,\n+    Binders, CallableDef, GenericPredicate, InferenceResult, PolyFnSig, Substs, TraitRef, Ty,\n+    TyDefId, TypeCtor, ValueTyDefId,\n };\n \n #[salsa::query_group(HirDatabaseStorage)]"}, {"sha": "a9d958c8bcdad9f1689ab5d427905b22ed60a386", "filename": "crates/ra_hir_ty/src/infer.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dded90a748737c3661aad043524f2248e324c867/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dded90a748737c3661aad043524f2248e324c867/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs?ref=dded90a748737c3661aad043524f2248e324c867", "patch": "@@ -278,7 +278,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         impl_trait_mode: ImplTraitLoweringMode,\n     ) -> Ty {\n         // FIXME use right resolver for block\n-        let ctx = crate::lower::TyLoweringContext::new(self.db, &self.resolver).with_impl_trait_mode(impl_trait_mode);\n+        let ctx = crate::lower::TyLoweringContext::new(self.db, &self.resolver)\n+            .with_impl_trait_mode(impl_trait_mode);\n         let ty = Ty::from_hir(&ctx, type_ref);\n         let ty = self.insert_type_vars(ty);\n         self.normalize_associated_types_in(ty)\n@@ -455,8 +456,10 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n \n     fn collect_fn(&mut self, data: &FunctionData) {\n         let body = Arc::clone(&self.body); // avoid borrow checker problem\n-        let ctx = crate::lower::TyLoweringContext::new(self.db, &self.resolver).with_impl_trait_mode(ImplTraitLoweringMode::Param);\n-        let param_tys = data.params.iter().map(|type_ref| Ty::from_hir(&ctx, type_ref)).collect::<Vec<_>>();\n+        let ctx = crate::lower::TyLoweringContext::new(self.db, &self.resolver)\n+            .with_impl_trait_mode(ImplTraitLoweringMode::Param);\n+        let param_tys =\n+            data.params.iter().map(|type_ref| Ty::from_hir(&ctx, type_ref)).collect::<Vec<_>>();\n         for (ty, pat) in param_tys.into_iter().zip(body.params.iter()) {\n             let ty = self.insert_type_vars(ty);\n             let ty = self.normalize_associated_types_in(ty);"}, {"sha": "f68a1439f8f132ae86bcd2cdd1dd348b21a9a508", "filename": "crates/ra_hir_ty/src/infer/coerce.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dded90a748737c3661aad043524f2248e324c867/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dded90a748737c3661aad043524f2248e324c867/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fcoerce.rs?ref=dded90a748737c3661aad043524f2248e324c867", "patch": "@@ -66,9 +66,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                         // This works for smart-pointer-like coercion, which covers all impls from std.\n                         st1.iter().zip(st2.iter()).enumerate().find_map(|(i, (ty1, ty2))| {\n                             match (ty1, ty2) {\n-                                (Ty::Bound(idx1), Ty::Bound(idx2))\n-                                    if idx1 != idx2 =>\n-                                {\n+                                (Ty::Bound(idx1), Ty::Bound(idx2)) if idx1 != idx2 => {\n                                     Some(((*ctor1, *ctor2), i))\n                                 }\n                                 _ => None,\n@@ -277,9 +275,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 let mut multiple_used = false;\n                 fields.for_each(|(field_id, _data)| {\n                     field_tys[field_id].value.walk(&mut |ty| match ty {\n-                        &Ty::Bound(idx) if idx == unsize_generic_index => {\n-                            multiple_used = true\n-                        }\n+                        &Ty::Bound(idx) if idx == unsize_generic_index => multiple_used = true,\n                         _ => {}\n                     })\n                 });"}, {"sha": "8c360bcadcf6ff005955d840d3f1bcd91be95f72", "filename": "crates/ra_hir_ty/src/infer/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dded90a748737c3661aad043524f2248e324c867/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dded90a748737c3661aad043524f2248e324c867/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=dded90a748737c3661aad043524f2248e324c867", "patch": "@@ -19,8 +19,8 @@ use crate::{\n     method_resolution, op,\n     traits::InEnvironment,\n     utils::{generics, variant_data, Generics},\n-    ApplicationTy, CallableDef, InferTy, IntTy, Mutability, Obligation, Substs, TraitRef, Ty,\n-    TypeCtor, Uncertain, Binders,\n+    ApplicationTy, Binders, CallableDef, InferTy, IntTy, Mutability, Obligation, Substs, TraitRef,\n+    Ty, TypeCtor, Uncertain,\n };\n \n use super::{BindingMode, Expectation, InferenceContext, InferenceDiagnostic, TypeMismatch};"}, {"sha": "686ce7a218b2d4ca50fd8b45670b38be800bebdc", "filename": "crates/ra_hir_ty/src/infer/path.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dded90a748737c3661aad043524f2248e324c867/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dded90a748737c3661aad043524f2248e324c867/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpath.rs?ref=dded90a748737c3661aad043524f2248e324c867", "patch": "@@ -9,10 +9,7 @@ use hir_def::{\n };\n use hir_expand::name::Name;\n \n-use crate::{\n-    db::HirDatabase, method_resolution, Substs, Ty,\n-    ValueTyDefId\n-};\n+use crate::{db::HirDatabase, method_resolution, Substs, Ty, ValueTyDefId};\n \n use super::{ExprOrPatId, InferenceContext, TraitRef};\n "}, {"sha": "60c7fd0e5d98ca01b5287c953e41affad95f0fe6", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dded90a748737c3661aad043524f2248e324c867/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dded90a748737c3661aad043524f2248e324c867/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=dded90a748737c3661aad043524f2248e324c867", "patch": "@@ -1033,7 +1033,10 @@ impl HirDisplay for Ty {\n                         write!(f, \"impl \")?;\n                         let bounds = f.db.generic_predicates_for_param(*id);\n                         let substs = Substs::type_params_for_generics(&generics);\n-                        write_bounds_like_dyn_trait(&bounds.iter().map(|b| b.clone().subst(&substs)).collect::<Vec<_>>(), f)?;\n+                        write_bounds_like_dyn_trait(\n+                            &bounds.iter().map(|b| b.clone().subst(&substs)).collect::<Vec<_>>(),\n+                            f,\n+                        )?;\n                     }\n                 }\n             }"}, {"sha": "4168e750961996d3e43b7917e124ea444feda4dc", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dded90a748737c3661aad043524f2248e324c867/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dded90a748737c3661aad043524f2248e324c867/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=dded90a748737c3661aad043524f2248e324c867", "patch": "@@ -276,15 +276,19 @@ impl Ty {\n             TypeNs::SelfType(impl_id) => {\n                 let generics = generics(ctx.db, impl_id.into());\n                 let substs = match ctx.type_param_mode {\n-                    TypeParamLoweringMode::Placeholder => Substs::type_params_for_generics(&generics),\n+                    TypeParamLoweringMode::Placeholder => {\n+                        Substs::type_params_for_generics(&generics)\n+                    }\n                     TypeParamLoweringMode::Variable => Substs::bound_vars(&generics),\n                 };\n                 ctx.db.impl_self_ty(impl_id).subst(&substs)\n             }\n             TypeNs::AdtSelfType(adt) => {\n                 let generics = generics(ctx.db, adt.into());\n                 let substs = match ctx.type_param_mode {\n-                    TypeParamLoweringMode::Placeholder => Substs::type_params_for_generics(&generics),\n+                    TypeParamLoweringMode::Placeholder => {\n+                        Substs::type_params_for_generics(&generics)\n+                    }\n                     TypeParamLoweringMode::Variable => Substs::bound_vars(&generics),\n                 };\n                 ctx.db.ty(adt.into()).subst(&substs)"}, {"sha": "4974c565be18e2eb03c6edc7e72a1da8f515c0f7", "filename": "crates/ra_hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dded90a748737c3661aad043524f2248e324c867/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dded90a748737c3661aad043524f2248e324c867/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=dded90a748737c3661aad043524f2248e324c867", "patch": "@@ -144,8 +144,11 @@ impl ToChalk for Ty {\n             }\n             Ty::Param(id) => {\n                 let interned_id = db.intern_type_param_id(id);\n-                PlaceholderIndex { ui: UniverseIndex::ROOT, idx: interned_id.as_intern_id().as_usize() }\n-                    .to_ty::<TypeFamily>()\n+                PlaceholderIndex {\n+                    ui: UniverseIndex::ROOT,\n+                    idx: interned_id.as_intern_id().as_usize(),\n+                }\n+                .to_ty::<TypeFamily>()\n             }\n             Ty::Bound(idx) => chalk_ir::TyData::BoundVar(idx as usize).intern(),\n             Ty::Infer(_infer_ty) => panic!(\"uncanonicalized infer ty\"),\n@@ -178,7 +181,9 @@ impl ToChalk for Ty {\n             },\n             chalk_ir::TyData::Placeholder(idx) => {\n                 assert_eq!(idx.ui, UniverseIndex::ROOT);\n-                let interned_id = crate::db::GlobalTypeParamId::from_intern_id(crate::salsa::InternId::from(idx.idx));\n+                let interned_id = crate::db::GlobalTypeParamId::from_intern_id(\n+                    crate::salsa::InternId::from(idx.idx),\n+                );\n                 Ty::Param(db.lookup_intern_type_param_id(interned_id))\n             }\n             chalk_ir::TyData::Alias(proj) => {"}, {"sha": "e307d958d83ed9d9013106588a192bde2665c3d5", "filename": "crates/ra_hir_ty/src/utils.rs", "status": "modified", "additions": 49, "deletions": 14, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/dded90a748737c3661aad043524f2248e324c867/crates%2Fra_hir_ty%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dded90a748737c3661aad043524f2248e324c867/crates%2Fra_hir_ty%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Futils.rs?ref=dded90a748737c3661aad043524f2248e324c867", "patch": "@@ -2,6 +2,7 @@\n //! query, but can't be computed directly from `*Data` (ie, which need a `db`).\n use std::sync::Arc;\n \n+use hir_def::generics::WherePredicateTarget;\n use hir_def::{\n     adt::VariantData,\n     db::DefDatabase,\n@@ -12,7 +13,6 @@ use hir_def::{\n     AssocContainerId, GenericDefId, Lookup, TraitId, TypeAliasId, TypeParamId, VariantId,\n };\n use hir_expand::name::{name, Name};\n-use hir_def::generics::WherePredicateTarget;\n \n fn direct_super_traits(db: &impl DefDatabase, trait_: TraitId) -> Vec<TraitId> {\n     let resolver = trait_.resolver(db);\n@@ -26,8 +26,12 @@ fn direct_super_traits(db: &impl DefDatabase, trait_: TraitId) -> Vec<TraitId> {\n         .where_predicates\n         .iter()\n         .filter_map(|pred| match &pred.target {\n-            WherePredicateTarget::TypeRef(TypeRef::Path(p)) if p == &Path::from(name![Self]) => pred.bound.as_path(),\n-            WherePredicateTarget::TypeParam(local_id) if Some(*local_id) == trait_self => pred.bound.as_path(),\n+            WherePredicateTarget::TypeRef(TypeRef::Path(p)) if p == &Path::from(name![Self]) => {\n+                pred.bound.as_path()\n+            }\n+            WherePredicateTarget::TypeParam(local_id) if Some(*local_id) == trait_self => {\n+                pred.bound.as_path()\n+            }\n             _ => None,\n         })\n         .filter_map(|path| match resolver.resolve_path_in_type_ns_fully(db, path.mod_path()) {\n@@ -99,19 +103,35 @@ pub(crate) struct Generics {\n }\n \n impl Generics {\n-    pub(crate) fn iter<'a>(&'a self) -> impl Iterator<Item = (TypeParamId, &'a TypeParamData)> + 'a {\n+    pub(crate) fn iter<'a>(\n+        &'a self,\n+    ) -> impl Iterator<Item = (TypeParamId, &'a TypeParamData)> + 'a {\n         self.parent_generics\n             .as_ref()\n             .into_iter()\n-            .flat_map(|it| it.params.types.iter().map(move |(local_id, p)| (TypeParamId { parent: it.def, local_id }, p)))\n-            .chain(self.params.types.iter().map(move |(local_id, p)| (TypeParamId { parent: self.def, local_id }, p)))\n+            .flat_map(|it| {\n+                it.params\n+                    .types\n+                    .iter()\n+                    .map(move |(local_id, p)| (TypeParamId { parent: it.def, local_id }, p))\n+            })\n+            .chain(\n+                self.params\n+                    .types\n+                    .iter()\n+                    .map(move |(local_id, p)| (TypeParamId { parent: self.def, local_id }, p)),\n+            )\n     }\n \n-    pub(crate) fn iter_parent<'a>(&'a self) -> impl Iterator<Item = (TypeParamId, &'a TypeParamData)> + 'a {\n-        self.parent_generics\n-            .as_ref()\n-            .into_iter()\n-            .flat_map(|it| it.params.types.iter().map(move |(local_id, p)| (TypeParamId { parent: it.def, local_id }, p)))\n+    pub(crate) fn iter_parent<'a>(\n+        &'a self,\n+    ) -> impl Iterator<Item = (TypeParamId, &'a TypeParamData)> + 'a {\n+        self.parent_generics.as_ref().into_iter().flat_map(|it| {\n+            it.params\n+                .types\n+                .iter()\n+                .map(move |(local_id, p)| (TypeParamId { parent: it.def, local_id }, p))\n+        })\n     }\n \n     pub(crate) fn len(&self) -> usize {\n@@ -127,9 +147,24 @@ impl Generics {\n \n     /// (self, type param list, impl trait)\n     pub(crate) fn provenance_split(&self) -> (usize, usize, usize) {\n-        let self_params = self.params.types.iter().filter(|(_, p)| p.provenance == TypeParamProvenance::TraitSelf).count();\n-        let list_params = self.params.types.iter().filter(|(_, p)| p.provenance == TypeParamProvenance::TypeParamList).count();\n-        let impl_trait_params = self.params.types.iter().filter(|(_, p)| p.provenance == TypeParamProvenance::ArgumentImplTrait).count();\n+        let self_params = self\n+            .params\n+            .types\n+            .iter()\n+            .filter(|(_, p)| p.provenance == TypeParamProvenance::TraitSelf)\n+            .count();\n+        let list_params = self\n+            .params\n+            .types\n+            .iter()\n+            .filter(|(_, p)| p.provenance == TypeParamProvenance::TypeParamList)\n+            .count();\n+        let impl_trait_params = self\n+            .params\n+            .types\n+            .iter()\n+            .filter(|(_, p)| p.provenance == TypeParamProvenance::ArgumentImplTrait)\n+            .count();\n         (self_params, list_params, impl_trait_params)\n     }\n "}]}