{"sha": "d536ec4d39b73d8bc41d2b28f3020f18f5fc6cb0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1MzZlYzRkMzliNzNkOGJjNDFkMmIyOGYzMDIwZjE4ZjVmYzZjYjA=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-04-26T12:23:30Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-04-29T10:12:11Z"}, "message": "hir: remove LoweredNodeId", "tree": {"sha": "d2bfee57e34df0fd47d49b0e6efb28e4874cd1a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2bfee57e34df0fd47d49b0e6efb28e4874cd1a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d536ec4d39b73d8bc41d2b28f3020f18f5fc6cb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d536ec4d39b73d8bc41d2b28f3020f18f5fc6cb0", "html_url": "https://github.com/rust-lang/rust/commit/d536ec4d39b73d8bc41d2b28f3020f18f5fc6cb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d536ec4d39b73d8bc41d2b28f3020f18f5fc6cb0/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ee936378662bd2e74be951d6a7011a95a6bd84d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ee936378662bd2e74be951d6a7011a95a6bd84d", "html_url": "https://github.com/rust-lang/rust/commit/3ee936378662bd2e74be951d6a7011a95a6bd84d"}], "stats": {"total": 309, "additions": 107, "deletions": 202}, "files": [{"sha": "df455a725c5baa9acde46f5c72292c5b8a252344", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 107, "deletions": 202, "changes": 309, "blob_url": "https://github.com/rust-lang/rust/blob/d536ec4d39b73d8bc41d2b28f3020f18f5fc6cb0/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d536ec4d39b73d8bc41d2b28f3020f18f5fc6cb0/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=d536ec4d39b73d8bc41d2b28f3020f18f5fc6cb0", "patch": "@@ -260,12 +260,6 @@ enum ParamMode {\n     Optional,\n }\n \n-#[derive(Debug)]\n-struct LoweredNodeId {\n-    node_id: NodeId,\n-    hir_id: hir::HirId,\n-}\n-\n enum ParenthesizedGenericArgs {\n     Ok,\n     Warn,\n@@ -429,7 +423,7 @@ impl<'a> LoweringContext<'a> {\n                     UseTreeKind::Glob => (),\n                     UseTreeKind::Nested(ref trees) => {\n                         for &(ref use_tree, id) in trees {\n-                            let hir_id = self.lctx.allocate_hir_id_counter(id).hir_id;\n+                            let hir_id = self.lctx.allocate_hir_id_counter(id);\n                             self.allocate_use_tree_hir_id_counters(use_tree, hir_id.owner);\n                         }\n                     }\n@@ -489,7 +483,7 @@ impl<'a> LoweringContext<'a> {\n             }\n \n             fn visit_item(&mut self, item: &'lcx Item) {\n-                let hir_id = self.lctx.allocate_hir_id_counter(item.id).hir_id;\n+                let hir_id = self.lctx.allocate_hir_id_counter(item.id);\n \n                 match item.node {\n                     ItemKind::Struct(_, ref generics)\n@@ -698,24 +692,21 @@ impl<'a> LoweringContext<'a> {\n         self.modules.get_mut(&self.current_module).unwrap().items.insert(id);\n     }\n \n-    fn allocate_hir_id_counter(&mut self, owner: NodeId) -> LoweredNodeId {\n+    fn allocate_hir_id_counter(&mut self, owner: NodeId) -> hir::HirId {\n         // Setup the counter if needed\n         self.item_local_id_counters.entry(owner).or_insert(0);\n         // Always allocate the first `HirId` for the owner itself.\n         let lowered = self.lower_node_id_with_owner(owner, owner);\n-        debug_assert_eq!(lowered.hir_id.local_id.as_u32(), 0);\n+        debug_assert_eq!(lowered.local_id.as_u32(), 0);\n         lowered\n     }\n \n-    fn lower_node_id_generic<F>(&mut self, ast_node_id: NodeId, alloc_hir_id: F) -> LoweredNodeId\n+    fn lower_node_id_generic<F>(&mut self, ast_node_id: NodeId, alloc_hir_id: F) -> hir::HirId\n     where\n         F: FnOnce(&mut Self) -> hir::HirId,\n     {\n         if ast_node_id == DUMMY_NODE_ID {\n-            return LoweredNodeId {\n-                node_id: DUMMY_NODE_ID,\n-                hir_id: hir::DUMMY_HIR_ID,\n-            };\n+            return hir::DUMMY_HIR_ID;\n         }\n \n         let min_size = ast_node_id.as_usize() + 1;\n@@ -730,15 +721,10 @@ impl<'a> LoweringContext<'a> {\n             // Generate a new `HirId`.\n             let hir_id = alloc_hir_id(self);\n             self.node_id_to_hir_id[ast_node_id] = hir_id;\n-            LoweredNodeId {\n-                node_id: ast_node_id,\n-                hir_id,\n-            }\n+\n+            hir_id\n         } else {\n-            LoweredNodeId {\n-                node_id: ast_node_id,\n-                hir_id: existing_hir_id,\n-            }\n+            existing_hir_id\n         }\n     }\n \n@@ -770,7 +756,7 @@ impl<'a> LoweringContext<'a> {\n     /// actually used in the HIR, as that would trigger an assertion in the\n     /// `HirIdValidator` later on, which makes sure that all `NodeId`s got mapped\n     /// properly. Calling the method twice with the same `NodeId` is fine though.\n-    fn lower_node_id(&mut self, ast_node_id: NodeId) -> LoweredNodeId {\n+    fn lower_node_id(&mut self, ast_node_id: NodeId) -> hir::HirId {\n         self.lower_node_id_generic(ast_node_id, |this| {\n             let &mut (def_index, ref mut local_id_counter) =\n                 this.current_hir_id_owner.last_mut().unwrap();\n@@ -783,7 +769,7 @@ impl<'a> LoweringContext<'a> {\n         })\n     }\n \n-    fn lower_node_id_with_owner(&mut self, ast_node_id: NodeId, owner: NodeId) -> LoweredNodeId {\n+    fn lower_node_id_with_owner(&mut self, ast_node_id: NodeId, owner: NodeId) -> hir::HirId {\n         self.lower_node_id_generic(ast_node_id, |this| {\n             let local_id_counter = this\n                 .item_local_id_counters\n@@ -822,15 +808,15 @@ impl<'a> LoweringContext<'a> {\n         id\n     }\n \n-    fn next_id(&mut self) -> LoweredNodeId {\n+    fn next_id(&mut self) -> hir::HirId {\n         self.lower_node_id(self.sess.next_node_id())\n     }\n \n     fn lower_def(&mut self, def: Def<NodeId>) -> Def {\n         def.map_id(|id| {\n             self.lower_node_id_generic(id, |_| {\n                 panic!(\"expected node_id to be lowered already for def {:#?}\", def)\n-            }).hir_id\n+            })\n         })\n     }\n \n@@ -942,7 +928,7 @@ impl<'a> LoweringContext<'a> {\n         hir_name: ParamName,\n         parent_index: DefIndex,\n     ) -> hir::GenericParam {\n-        let LoweredNodeId { node_id, hir_id } = self.next_id();\n+        let node_id = self.sess.next_node_id();\n \n         // Get the name we'll use to make the def-path. Note\n         // that collisions are ok here and this shouldn't\n@@ -973,7 +959,7 @@ impl<'a> LoweringContext<'a> {\n         );\n \n         hir::GenericParam {\n-            hir_id,\n+            hir_id: self.lower_node_id(node_id),\n             name: hir_name,\n             attrs: hir_vec![],\n             bounds: hir_vec![],\n@@ -1158,10 +1144,9 @@ impl<'a> LoweringContext<'a> {\n         self.is_generator = prev_is_generator;\n \n         let capture_clause = self.lower_capture_clause(capture_clause);\n-        let closure_hir_id = self.lower_node_id(closure_node_id).hir_id;\n         let decl = self.lower_fn_decl(&decl, None, /* impl trait allowed */ false, None);\n         let generator = hir::Expr {\n-            hir_id: closure_hir_id,\n+            hir_id: self.lower_node_id(closure_node_id),\n             node: hir::ExprKind::Closure(capture_clause, decl, body_id, span,\n                 Some(hir::GeneratorMovability::Static)),\n             span,\n@@ -1267,7 +1252,7 @@ impl<'a> LoweringContext<'a> {\n         let target_id = match destination {\n             Some((id, _)) => {\n                 if let Def::Label(loop_id) = self.expect_full_def(id) {\n-                    Ok(self.lower_node_id(loop_id).hir_id)\n+                    Ok(self.lower_node_id(loop_id))\n                 } else {\n                     Err(hir::LoopIdError::UnresolvedLabel)\n                 }\n@@ -1276,7 +1261,7 @@ impl<'a> LoweringContext<'a> {\n                 self.loop_scopes\n                     .last()\n                     .cloned()\n-                    .map(|id| Ok(self.lower_node_id(id).hir_id))\n+                    .map(|id| Ok(self.lower_node_id(id)))\n                     .unwrap_or(Err(hir::LoopIdError::OutsideLoopScope))\n                     .into()\n             }\n@@ -1350,10 +1335,8 @@ impl<'a> LoweringContext<'a> {\n \n     fn lower_ty_binding(&mut self, b: &TypeBinding,\n                         itctx: ImplTraitContext<'_>) -> hir::TypeBinding {\n-        let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(b.id);\n-\n         hir::TypeBinding {\n-            hir_id,\n+            hir_id: self.lower_node_id(b.id),\n             ident: b.ident,\n             ty: self.lower_ty(&b.ty, itctx),\n             span: b.span,\n@@ -1487,7 +1470,6 @@ impl<'a> LoweringContext<'a> {\n                         )\n                     }\n                     ImplTraitContext::Universal(in_band_ty_params) => {\n-                        let LoweredNodeId { node_id: _, hir_id } =  self.lower_node_id(def_node_id);\n                         // Add a definition for the in-band `Param`.\n                         let def_index = self\n                             .resolver\n@@ -1502,7 +1484,7 @@ impl<'a> LoweringContext<'a> {\n                         // Set the name to `impl Bound1 + Bound2`.\n                         let ident = Ident::from_str(&pprust::ty_to_string(t)).with_span_pos(span);\n                         in_band_ty_params.push(hir::GenericParam {\n-                            hir_id,\n+                            hir_id: self.lower_node_id(def_node_id),\n                             name: ParamName::Plain(ident),\n                             pure_wrt_drop: false,\n                             attrs: hir_vec![],\n@@ -1557,11 +1539,10 @@ impl<'a> LoweringContext<'a> {\n             },\n         };\n \n-        let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(t.id);\n         hir::Ty {\n             node: kind,\n             span: t.span,\n-            hir_id,\n+            hir_id: self.lower_node_id(t.id),\n         }\n     }\n \n@@ -1600,12 +1581,11 @@ impl<'a> LoweringContext<'a> {\n         );\n \n         self.with_hir_id_owner(exist_ty_node_id, |lctx| {\n-            let LoweredNodeId { node_id: _, hir_id } = lctx.next_id();\n             let exist_ty_item = hir::ExistTy {\n                 generics: hir::Generics {\n                     params: lifetime_defs,\n                     where_clause: hir::WhereClause {\n-                        hir_id,\n+                        hir_id: lctx.next_id(),\n                         predicates: hir_vec![],\n                     },\n                     span,\n@@ -1624,7 +1604,7 @@ impl<'a> LoweringContext<'a> {\n             );\n \n             // `impl Trait` now just becomes `Foo<'a, 'b, ..>`.\n-            hir::TyKind::Def(hir::ItemId { id: exist_ty_id.hir_id }, lifetimes)\n+            hir::TyKind::Def(hir::ItemId { id: exist_ty_id }, lifetimes)\n         })\n     }\n \n@@ -1636,13 +1616,13 @@ impl<'a> LoweringContext<'a> {\n         exist_ty_item: hir::ExistTy,\n         span: Span,\n         exist_ty_span: Span,\n-    ) -> LoweredNodeId {\n+    ) -> hir::HirId {\n         let exist_ty_item_kind = hir::ItemKind::Existential(exist_ty_item);\n         let exist_ty_id = self.lower_node_id(exist_ty_node_id);\n         // Generate an `existential type Foo: Trait;` declaration.\n         trace!(\"registering existential type with id {:#?}\", exist_ty_id);\n         let exist_ty_item = hir::Item {\n-            hir_id: exist_ty_id.hir_id,\n+            hir_id: exist_ty_id,\n             ident: keywords::Invalid.ident(),\n             attrs: Default::default(),\n             node: exist_ty_item_kind,\n@@ -1757,15 +1737,14 @@ impl<'a> LoweringContext<'a> {\n                     && !self.already_defined_lifetimes.contains(&name) {\n                     self.already_defined_lifetimes.insert(name);\n \n-                    let LoweredNodeId { node_id: _, hir_id } = self.context.next_id();\n                     self.output_lifetimes.push(hir::GenericArg::Lifetime(hir::Lifetime {\n-                        hir_id,\n+                        hir_id: self.context.next_id(),\n                         span: lifetime.span,\n                         name,\n                     }));\n \n                     let def_node_id = self.context.sess.next_node_id();\n-                    let LoweredNodeId { node_id: _, hir_id } =\n+                    let hir_id =\n                         self.context.lower_node_id_with_owner(def_node_id, self.exist_ty_id);\n                     self.context.resolver.definitions().create_def_with_parent(\n                         self.parent,\n@@ -1840,11 +1819,10 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn lower_variant(&mut self, v: &Variant) -> hir::Variant {\n-        let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(v.node.id);\n         Spanned {\n             node: hir::VariantKind {\n                 ident: v.node.ident,\n-                id: hir_id,\n+                id: self.lower_node_id(v.node.id),\n                 attrs: self.lower_attrs(&v.node.attrs),\n                 data: self.lower_variant_data(&v.node.data),\n                 disr_expr: v.node.disr_expr.as_ref().map(|e| self.lower_anon_const(e)),\n@@ -2157,7 +2135,7 @@ impl<'a> LoweringContext<'a> {\n \n         hir::PathSegment::new(\n             segment.ident,\n-            Some(id.hir_id),\n+            Some(id),\n             Some(self.lower_def(def)),\n             generic_args,\n             infer_types,\n@@ -2201,17 +2179,14 @@ impl<'a> LoweringContext<'a> {\n                     .map(|ty| this.lower_ty_direct(ty, ImplTraitContext::disallowed()))\n                     .collect();\n                 let mk_tup = |this: &mut Self, tys, span| {\n-                    let LoweredNodeId { node_id: _, hir_id } = this.next_id();\n-                    hir::Ty { node: hir::TyKind::Tup(tys), hir_id, span }\n+                    hir::Ty { node: hir::TyKind::Tup(tys), hir_id: this.next_id(), span }\n                 };\n-                let LoweredNodeId { node_id: _, hir_id } = this.next_id();\n-\n                 (\n                     hir::GenericArgs {\n                         args: hir_vec![GenericArg::Type(mk_tup(this, inputs, span))],\n                         bindings: hir_vec![\n                             hir::TypeBinding {\n-                                hir_id,\n+                                hir_id: this.next_id(),\n                                 ident: Ident::from_str(FN_OUTPUT_NAME),\n                                 ty: output\n                                     .as_ref()\n@@ -2229,7 +2204,6 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn lower_local(&mut self, l: &Local) -> (hir::Local, SmallVec<[NodeId; 1]>) {\n-        let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(l.id);\n         let mut ids = SmallVec::<[NodeId; 1]>::new();\n         if self.sess.features_untracked().impl_trait_in_bindings {\n             if let Some(ref ty) = l.ty {\n@@ -2239,7 +2213,7 @@ impl<'a> LoweringContext<'a> {\n         }\n         let parent_def_id = DefId::local(self.current_hir_id_owner.last().unwrap().0);\n         (hir::Local {\n-            hir_id,\n+            hir_id: self.lower_node_id(l.id),\n             ty: l.ty\n                 .as_ref()\n                 .map(|t| self.lower_ty(t,\n@@ -2276,9 +2250,8 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn lower_arg(&mut self, arg: &Arg) -> hir::Arg {\n-        let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(arg.id);\n         hir::Arg {\n-            hir_id,\n+            hir_id: self.lower_node_id(arg.id),\n             pat: self.lower_pat(&arg.pat),\n             source: self.lower_arg_source(&arg.source),\n         }\n@@ -2437,7 +2410,7 @@ impl<'a> LoweringContext<'a> {\n \n         self.allocate_hir_id_counter(exist_ty_node_id);\n \n-        let (exist_ty_node_id, lifetime_params) = self.with_hir_id_owner(exist_ty_node_id, |this| {\n+        let (exist_ty_id, lifetime_params) = self.with_hir_id_owner(exist_ty_node_id, |this| {\n             let future_bound = this.with_anonymous_lifetime_mode(\n                 AnonymousLifetimeMode::Replace(elided_lt_replacement),\n                 |this| this.lower_async_fn_output_type_to_future_bound(\n@@ -2468,12 +2441,11 @@ impl<'a> LoweringContext<'a> {\n                     })\n                     .collect();\n \n-            let LoweredNodeId { node_id: _, hir_id } = this.next_id();\n             let exist_ty_item = hir::ExistTy {\n                 generics: hir::Generics {\n                     params: generic_params,\n                     where_clause: hir::WhereClause {\n-                        hir_id,\n+                        hir_id: this.next_id(),\n                         predicates: hir_vec![],\n                     },\n                     span,\n@@ -2491,30 +2463,27 @@ impl<'a> LoweringContext<'a> {\n                 exist_ty_span,\n             );\n \n-            (exist_ty_id.node_id, lifetime_params)\n+            (exist_ty_id, lifetime_params)\n         });\n \n         let generic_args =\n             lifetime_params\n                 .iter().cloned()\n                 .map(|(span, hir_name)| {\n-                    let LoweredNodeId { node_id: _, hir_id  } = self.next_id();\n                     GenericArg::Lifetime(hir::Lifetime {\n-                        hir_id,\n+                        hir_id: self.next_id(),\n                         span,\n                         name: hir::LifetimeName::Param(hir_name),\n                     })\n                 })\n                 .collect();\n \n-        let exist_ty_hir_id = self.lower_node_id(exist_ty_node_id).hir_id;\n-        let exist_ty_ref = hir::TyKind::Def(hir::ItemId { id: exist_ty_hir_id }, generic_args);\n+        let exist_ty_ref = hir::TyKind::Def(hir::ItemId { id: exist_ty_id }, generic_args);\n \n-        let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n         hir::FunctionRetTy::Return(P(hir::Ty {\n             node: exist_ty_ref,\n             span,\n-            hir_id,\n+            hir_id: self.next_id(),\n         }))\n     }\n \n@@ -2531,23 +2500,21 @@ impl<'a> LoweringContext<'a> {\n                 self.lower_ty(ty, ImplTraitContext::Existential(Some(fn_def_id)))\n             }\n             FunctionRetTy::Default(ret_ty_span) => {\n-                let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n                 P(hir::Ty {\n-                    hir_id,\n+                    hir_id: self.next_id(),\n                     node: hir::TyKind::Tup(hir_vec![]),\n                     span: *ret_ty_span,\n                 })\n             }\n         };\n \n         // \"<Output = T>\"\n-        let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n         let future_params = P(hir::GenericArgs {\n             args: hir_vec![],\n             bindings: hir_vec![hir::TypeBinding {\n                 ident: Ident::from_str(FN_OUTPUT_NAME),\n                 ty: output_ty,\n-                hir_id,\n+                hir_id: self.next_id(),\n                 span,\n             }],\n             parenthesized: false,\n@@ -2557,12 +2524,11 @@ impl<'a> LoweringContext<'a> {\n         let future_path =\n             self.std_path(span, &[\"future\", \"Future\"], Some(future_params), false);\n \n-        let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n         hir::GenericBound::Trait(\n             hir::PolyTraitRef {\n                 trait_ref: hir::TraitRef {\n                     path: future_path,\n-                    hir_ref_id: hir_id,\n+                    hir_ref_id: self.next_id(),\n                 },\n                 bound_generic_params: hir_vec![],\n                 span,\n@@ -2608,7 +2574,7 @@ impl<'a> LoweringContext<'a> {\n                     AnonymousLifetimeMode::ReportError => self.new_error_lifetime(Some(l.id), span),\n \n                     AnonymousLifetimeMode::Replace(replacement) => {\n-                        let LoweredNodeId { node_id: _, hir_id  } = self.lower_node_id(l.id);\n+                        let hir_id = self.lower_node_id(l.id);\n                         self.replace_elided_lifetime(hir_id, span, replacement)\n                     }\n                 },\n@@ -2626,10 +2592,8 @@ impl<'a> LoweringContext<'a> {\n         span: Span,\n         name: hir::LifetimeName,\n     ) -> hir::Lifetime {\n-        let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(id);\n-\n         hir::Lifetime {\n-            hir_id,\n+            hir_id: self.lower_node_id(id),\n             span,\n             name: name,\n         }\n@@ -2751,10 +2715,8 @@ impl<'a> LoweringContext<'a> {\n             }\n         };\n \n-        let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(param.id);\n-\n         hir::GenericParam {\n-            hir_id,\n+            hir_id: self.lower_node_id(param.id),\n             name,\n             span: param.ident.span,\n             pure_wrt_drop: attr::contains_name(&param.attrs, \"may_dangle\"),\n@@ -2834,10 +2796,8 @@ impl<'a> LoweringContext<'a> {\n         self.with_anonymous_lifetime_mode(\n             AnonymousLifetimeMode::ReportError,\n             |this| {\n-                let LoweredNodeId { node_id: _, hir_id } = this.lower_node_id(wc.id);\n-\n                 hir::WhereClause {\n-                    hir_id,\n+                    hir_id: this.lower_node_id(wc.id),\n                     predicates: wc.predicates\n                         .iter()\n                         .map(|predicate| this.lower_where_predicate(predicate))\n@@ -2897,10 +2857,8 @@ impl<'a> LoweringContext<'a> {\n                 ref rhs_ty,\n                 span,\n             }) => {\n-                let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(id);\n-\n                 hir::WherePredicate::EqPredicate(hir::WhereEqPredicate {\n-                    hir_id,\n+                    hir_id: self.lower_node_id(id),\n                     lhs_ty: self.lower_ty(lhs_ty, ImplTraitContext::disallowed()),\n                     rhs_ty: self.lower_ty(rhs_ty, ImplTraitContext::disallowed()),\n                     span,\n@@ -2916,20 +2874,17 @@ impl<'a> LoweringContext<'a> {\n                 recovered,\n             ),\n             VariantData::Tuple(ref fields, id) => {\n-                let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(id);\n-\n                 hir::VariantData::Tuple(\n                     fields\n                         .iter()\n                         .enumerate()\n                         .map(|f| self.lower_struct_field(f))\n                         .collect(),\n-                    hir_id,\n+                    self.lower_node_id(id),\n                 )\n             },\n             VariantData::Unit(id) => {\n-                let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(id);\n-                hir::VariantData::Unit(hir_id)\n+                hir::VariantData::Unit(self.lower_node_id(id))\n             },\n         }\n     }\n@@ -2939,10 +2894,9 @@ impl<'a> LoweringContext<'a> {\n             hir::QPath::Resolved(None, path) => path.and_then(|path| path),\n             qpath => bug!(\"lower_trait_ref: unexpected QPath `{:?}`\", qpath),\n         };\n-        let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(p.ref_id);\n         hir::TraitRef {\n             path,\n-            hir_ref_id: hir_id,\n+            hir_ref_id: self.lower_node_id(p.ref_id),\n         }\n     }\n \n@@ -2969,11 +2923,9 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn lower_struct_field(&mut self, (index, f): (usize, &StructField)) -> hir::StructField {\n-        let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(f.id);\n-\n         hir::StructField {\n             span: f.span,\n-            hir_id,\n+            hir_id: self.lower_node_id(f.id),\n             ident: match f.ident {\n                 Some(ident) => ident,\n                 // FIXME(jseyfried): positional field hygiene\n@@ -2986,10 +2938,8 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn lower_field(&mut self, f: &Field) -> hir::Field {\n-        let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n-\n         hir::Field {\n-            hir_id,\n+            hir_id: self.next_id(),\n             ident: f.ident,\n             expr: P(self.lower_expr(&f.expr)),\n             span: f.span,\n@@ -3026,10 +2976,8 @@ impl<'a> LoweringContext<'a> {\n             }\n         }\n \n-        let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(b.id);\n-\n         P(hir::Block {\n-            hir_id,\n+            hir_id: self.lower_node_id(b.id),\n             stmts: stmts.into(),\n             expr,\n             rules: self.lower_block_check_mode(&b.rules),\n@@ -3220,7 +3168,7 @@ impl<'a> LoweringContext<'a> {\n                 // method, it will not be considered an in-band\n                 // lifetime to be added, but rather a reference to a\n                 // parent lifetime.\n-                let lowered_trait_impl_id = self.lower_node_id(id).hir_id;\n+                let lowered_trait_impl_id = self.lower_node_id(id);\n                 let (generics, (trait_ref, lowered_ty)) = self.add_in_band_defs(\n                     ast_generics,\n                     def_id,\n@@ -3358,19 +3306,18 @@ impl<'a> LoweringContext<'a> {\n                             hir::VisibilityKind::Crate(sugar) => hir::VisibilityKind::Crate(sugar),\n                             hir::VisibilityKind::Inherited => hir::VisibilityKind::Inherited,\n                             hir::VisibilityKind::Restricted { ref path, hir_id: _ } => {\n-                                let id = this.next_id();\n                                 let path = this.renumber_segment_ids(path);\n                                 hir::VisibilityKind::Restricted {\n                                     path,\n-                                    hir_id: id.hir_id,\n+                                    hir_id: this.next_id(),\n                                 }\n                             }\n                         };\n                         let vis = respan(vis.span, vis_kind);\n \n                         this.insert_item(\n                             hir::Item {\n-                                hir_id: new_id.hir_id,\n+                                hir_id: new_id,\n                                 ident,\n                                 attrs: attrs.clone(),\n                                 node: item,\n@@ -3428,10 +3375,7 @@ impl<'a> LoweringContext<'a> {\n \n                 // Add all the nested `PathListItem`s to the HIR.\n                 for &(ref use_tree, id) in trees {\n-                    let LoweredNodeId {\n-                        node_id: new_id,\n-                        hir_id: new_hir_id,\n-                    } = self.lower_node_id(id);\n+                    let new_hir_id = self.lower_node_id(id);\n \n                     let mut vis = vis.clone();\n                     let mut ident = ident.clone();\n@@ -3447,10 +3391,10 @@ impl<'a> LoweringContext<'a> {\n                     // the current owner, since we want each desugared import to\n                     // own its own names, we have to adjust the owner before\n                     // lowering the rest of the import.\n-                    self.with_hir_id_owner(new_id, |this| {\n+                    self.with_hir_id_owner(id, |this| {\n                         let item = this.lower_use_tree(use_tree,\n                                                        &prefix,\n-                                                       new_id,\n+                                                       id,\n                                                        &mut vis,\n                                                        &mut ident,\n                                                        attrs);\n@@ -3460,11 +3404,10 @@ impl<'a> LoweringContext<'a> {\n                             hir::VisibilityKind::Crate(sugar) => hir::VisibilityKind::Crate(sugar),\n                             hir::VisibilityKind::Inherited => hir::VisibilityKind::Inherited,\n                             hir::VisibilityKind::Restricted { ref path, hir_id: _ } => {\n-                                let id = this.next_id();\n                                 let path = this.renumber_segment_ids(path);\n                                 hir::VisibilityKind::Restricted {\n                                     path: path,\n-                                    hir_id: id.hir_id,\n+                                    hir_id: this.next_id(),\n                                 }\n                             }\n                         };\n@@ -3520,15 +3463,14 @@ impl<'a> LoweringContext<'a> {\n         let mut path = path.clone();\n         for seg in path.segments.iter_mut() {\n             if seg.hir_id.is_some() {\n-                seg.hir_id = Some(self.next_id().hir_id);\n+                seg.hir_id = Some(self.next_id());\n             }\n         }\n         path\n     }\n \n     fn lower_trait_item(&mut self, i: &TraitItem) -> hir::TraitItem {\n-        let LoweredNodeId { node_id, hir_id } = self.lower_node_id(i.id);\n-        let trait_item_def_id = self.resolver.definitions().local_def_id(node_id);\n+        let trait_item_def_id = self.resolver.definitions().local_def_id(i.id);\n \n         let (generics, node) = match i.node {\n             TraitItemKind::Const(ref ty, ref default) => (\n@@ -3578,7 +3520,7 @@ impl<'a> LoweringContext<'a> {\n         };\n \n         hir::TraitItem {\n-            hir_id,\n+            hir_id: self.lower_node_id(i.id),\n             ident: i.ident,\n             attrs: self.lower_attrs(&i.attrs),\n             generics,\n@@ -3604,7 +3546,7 @@ impl<'a> LoweringContext<'a> {\n             TraitItemKind::Macro(..) => unimplemented!(),\n         };\n         hir::TraitItemRef {\n-            id: hir::TraitItemId { hir_id: self.lower_node_id(i.id).hir_id },\n+            id: hir::TraitItemId { hir_id: self.lower_node_id(i.id) },\n             ident: i.ident,\n             span: i.span,\n             defaultness: self.lower_defaultness(Defaultness::Default, has_default),\n@@ -3613,8 +3555,7 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn lower_impl_item(&mut self, i: &ImplItem) -> hir::ImplItem {\n-        let LoweredNodeId { node_id, hir_id } = self.lower_node_id(i.id);\n-        let impl_item_def_id = self.resolver.definitions().local_def_id(node_id);\n+        let impl_item_def_id = self.resolver.definitions().local_def_id(i.id);\n \n         let (generics, node) = match i.node {\n             ImplItemKind::Const(ref ty, ref expr) => {\n@@ -3671,7 +3612,7 @@ impl<'a> LoweringContext<'a> {\n         };\n \n         hir::ImplItem {\n-            hir_id,\n+            hir_id: self.lower_node_id(i.id),\n             ident: i.ident,\n             attrs: self.lower_attrs(&i.attrs),\n             generics,\n@@ -3686,7 +3627,7 @@ impl<'a> LoweringContext<'a> {\n \n     fn lower_impl_item_ref(&mut self, i: &ImplItem) -> hir::ImplItemRef {\n         hir::ImplItemRef {\n-            id: hir::ImplItemId { hir_id: self.lower_node_id(i.id).hir_id },\n+            id: hir::ImplItemId { hir_id: self.lower_node_id(i.id) },\n             ident: i.ident,\n             span: i.span,\n             vis: self.lower_visibility(&i.vis, Some(i.id)),\n@@ -3742,7 +3683,7 @@ impl<'a> LoweringContext<'a> {\n         };\n \n         node_ids.into_iter().map(|node_id| hir::ItemId {\n-            id: self.allocate_hir_id_counter(node_id).hir_id\n+            id: self.allocate_hir_id_counter(node_id)\n         }).collect()\n     }\n \n@@ -3776,7 +3717,7 @@ impl<'a> LoweringContext<'a> {\n             if !def.legacy || attr::contains_name(&i.attrs, \"macro_export\") ||\n                               attr::contains_name(&i.attrs, \"rustc_doc_only_macro\") {\n                 let body = self.lower_token_stream(def.stream());\n-                let hir_id = self.lower_node_id(i.id).hir_id;\n+                let hir_id = self.lower_node_id(i.id);\n                 self.exported_macros.push(hir::MacroDef {\n                     name: ident.name,\n                     vis,\n@@ -3792,10 +3733,8 @@ impl<'a> LoweringContext<'a> {\n \n         let node = self.lower_item_kind(i.id, &mut ident, &attrs, &mut vis, &i.node);\n \n-        let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(i.id);\n-\n         Some(hir::Item {\n-            hir_id,\n+            hir_id: self.lower_node_id(i.id),\n             ident,\n             attrs,\n             node,\n@@ -3805,10 +3744,9 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn lower_foreign_item(&mut self, i: &ForeignItem) -> hir::ForeignItem {\n-        let LoweredNodeId { node_id, hir_id } = self.lower_node_id(i.id);\n-        let def_id = self.resolver.definitions().local_def_id(node_id);\n+        let def_id = self.resolver.definitions().local_def_id(i.id);\n         hir::ForeignItem {\n-            hir_id,\n+            hir_id: self.lower_node_id(i.id),\n             ident: i.ident,\n             attrs: self.lower_attrs(&i.attrs),\n             node: match i.node {\n@@ -3948,7 +3886,7 @@ impl<'a> LoweringContext<'a> {\n \n                         hir::PatKind::Binding(\n                             self.lower_binding_mode(binding_mode),\n-                            self.lower_node_id(canonical_id).hir_id,\n+                            self.lower_node_id(canonical_id),\n                             ident,\n                             sub.as_ref().map(|x| self.lower_pat(x)),\n                         )\n@@ -4000,12 +3938,10 @@ impl<'a> LoweringContext<'a> {\n                 let fs = fields\n                     .iter()\n                     .map(|f| {\n-                        let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n-\n                         Spanned {\n                             span: f.span,\n                             node: hir::FieldPat {\n-                                hir_id,\n+                                hir_id: self.next_id(),\n                                 ident: f.node.ident,\n                                 pat: self.lower_pat(&f.node.pat),\n                                 is_shorthand: f.node.is_shorthand,\n@@ -4036,9 +3972,8 @@ impl<'a> LoweringContext<'a> {\n             PatKind::Mac(_) => panic!(\"Shouldn't exist here\"),\n         };\n \n-        let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(p.id);\n         P(hir::Pat {\n-            hir_id,\n+            hir_id: self.lower_node_id(p.id),\n             node,\n             span: p.span,\n         })\n@@ -4053,9 +3988,8 @@ impl<'a> LoweringContext<'a> {\n \n     fn lower_anon_const(&mut self, c: &AnonConst) -> hir::AnonConst {\n         self.with_new_scopes(|this| {\n-            let LoweredNodeId { node_id: _, hir_id } = this.lower_node_id(c.id);\n             hir::AnonConst {\n-                hir_id,\n+                hir_id: this.lower_node_id(c.id),\n                 body: this.lower_body(None, |this| this.lower_expr(&c.value)),\n             }\n         })\n@@ -4130,11 +4064,10 @@ impl<'a> LoweringContext<'a> {\n                             // Wrap the `if let` expr in a block.\n                             let span = els.span;\n                             let els = P(self.lower_expr(els));\n-                            let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n                             let blk = P(hir::Block {\n                                 stmts: hir_vec![],\n                                 expr: Some(els),\n-                                hir_id,\n+                                hir_id: self.next_id(),\n                                 rules: hir::DefaultBlock,\n                                 span,\n                                 targeted_by_break: false,\n@@ -4176,13 +4109,12 @@ impl<'a> LoweringContext<'a> {\n                     let mut block = this.lower_block(body, true).into_inner();\n                     let tail = block.expr.take().map_or_else(\n                         || {\n-                            let LoweredNodeId { node_id: _, hir_id } = this.next_id();\n                             let span = this.sess.source_map().end_point(unstable_span);\n                             hir::Expr {\n                                 span,\n                                 node: hir::ExprKind::Tup(hir_vec![]),\n                                 attrs: ThinVec::new(),\n-                                hir_id,\n+                                hir_id: this.next_id(),\n                             }\n                         },\n                         |x: P<hir::Expr>| x.into_inner(),\n@@ -4363,10 +4295,8 @@ impl<'a> LoweringContext<'a> {\n                 let struct_path = self.std_path(e.span, &struct_path, None, is_unit);\n                 let struct_path = hir::QPath::Resolved(None, P(struct_path));\n \n-                let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(e.id);\n-\n                 return hir::Expr {\n-                    hir_id,\n+                    hir_id: self.lower_node_id(e.id),\n                     node: if is_unit {\n                         hir::ExprKind::Path(struct_path)\n                     } else {\n@@ -4667,9 +4597,8 @@ impl<'a> LoweringContext<'a> {\n                         ThinVec::new(),\n                     ))\n                 };\n-                let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n                 let match_stmt = hir::Stmt {\n-                    hir_id,\n+                    hir_id: self.next_id(),\n                     node: hir::StmtKind::Expr(match_expr),\n                     span: head_sp,\n                 };\n@@ -4695,9 +4624,8 @@ impl<'a> LoweringContext<'a> {\n \n                 let body_block = self.with_loop_scope(e.id, |this| this.lower_block(body, false));\n                 let body_expr = P(self.expr_block(body_block, ThinVec::new()));\n-                let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n                 let body_stmt = hir::Stmt {\n-                    hir_id,\n+                    hir_id: self.next_id(),\n                     node: hir::StmtKind::Expr(body_expr),\n                     span: body.span,\n                 };\n@@ -4714,9 +4642,8 @@ impl<'a> LoweringContext<'a> {\n                     self.lower_label(opt_label),\n                     hir::LoopSource::ForLoop,\n                 );\n-                let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(e.id);\n                 let loop_expr = P(hir::Expr {\n-                    hir_id,\n+                    hir_id: self.lower_node_id(e.id),\n                     node: loop_expr,\n                     span: e.span,\n                     attrs: ThinVec::new(),\n@@ -4834,7 +4761,7 @@ impl<'a> LoweringContext<'a> {\n                     let thin_attrs = ThinVec::from(attrs);\n                     let catch_scope = self.catch_scopes.last().map(|x| *x);\n                     let ret_expr = if let Some(catch_node) = catch_scope {\n-                        let target_id = Ok(self.lower_node_id(catch_node).hir_id);\n+                        let target_id = Ok(self.lower_node_id(catch_node));\n                         P(self.expr(\n                             try_span,\n                             hir::ExprKind::Break(\n@@ -4864,10 +4791,8 @@ impl<'a> LoweringContext<'a> {\n             ExprKind::Mac(_) => panic!(\"Shouldn't exist here\"),\n         };\n \n-        let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(e.id);\n-\n         hir::Expr {\n-            hir_id,\n+            hir_id: self.lower_node_id(e.id),\n             node: kind,\n             span: e.span,\n             attrs: e.attrs.clone(),\n@@ -4881,21 +4806,18 @@ impl<'a> LoweringContext<'a> {\n                 let mut ids: SmallVec<[hir::Stmt; 1]> = item_ids\n                     .into_iter()\n                     .map(|item_id| {\n-                        let item_id = hir::ItemId { id: self.lower_node_id(item_id).hir_id };\n-                        let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n+                        let item_id = hir::ItemId { id: self.lower_node_id(item_id) };\n \n                         hir::Stmt {\n-                            hir_id,\n+                            hir_id: self.next_id(),\n                             node: hir::StmtKind::Item(item_id),\n                             span: s.span,\n                         }\n                     })\n                     .collect();\n                 ids.push({\n-                    let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(s.id);\n-\n                     hir::Stmt {\n-                        hir_id,\n+                        hir_id: self.lower_node_id(s.id),\n                         node: hir::StmtKind::Local(P(l)),\n                         span: s.span,\n                     }\n@@ -4908,7 +4830,7 @@ impl<'a> LoweringContext<'a> {\n                 return self.lower_item_id(it)\n                     .into_iter()\n                     .map(|item_id| {\n-                        let LoweredNodeId { node_id: _, hir_id } = id.take()\n+                        let hir_id = id.take()\n                           .map(|id| self.lower_node_id(id))\n                           .unwrap_or_else(|| self.next_id());\n \n@@ -4921,19 +4843,15 @@ impl<'a> LoweringContext<'a> {\n                     .collect();\n             }\n             StmtKind::Expr(ref e) => {\n-                let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(s.id);\n-\n                 hir::Stmt {\n-                    hir_id,\n+                    hir_id: self.lower_node_id(s.id),\n                     node: hir::StmtKind::Expr(P(self.lower_expr(e))),\n                     span: s.span,\n                 }\n             },\n             StmtKind::Semi(ref e) => {\n-                let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(s.id);\n-\n                 hir::Stmt {\n-                    hir_id,\n+                    hir_id: self.lower_node_id(s.id),\n                     node: hir::StmtKind::Semi(P(self.lower_expr(e))),\n                     span: s.span,\n                 }\n@@ -4978,7 +4896,7 @@ impl<'a> LoweringContext<'a> {\n                         ParamMode::Explicit,\n                         explicit_owner,\n                     )),\n-                    hir_id: lowered_id.hir_id,\n+                    hir_id: lowered_id,\n                 }\n             },\n             VisibilityKind::Inherited => hir::VisibilityKind::Inherited,\n@@ -5047,10 +4965,8 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn field(&mut self, ident: Ident, expr: P<hir::Expr>, span: Span) -> hir::Field {\n-        let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n-\n         hir::Field {\n-            hir_id,\n+            hir_id: self.next_id(),\n             ident,\n             span,\n             expr,\n@@ -5144,9 +5060,8 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn expr(&mut self, span: Span, node: hir::ExprKind, attrs: ThinVec<Attribute>) -> hir::Expr {\n-        let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n         hir::Expr {\n-            hir_id,\n+            hir_id: self.next_id(),\n             node,\n             span,\n             attrs,\n@@ -5160,21 +5075,18 @@ impl<'a> LoweringContext<'a> {\n         pat: P<hir::Pat>,\n         source: hir::LocalSource,\n     ) -> hir::Stmt {\n-        let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n-\n         let local = hir::Local {\n             pat,\n             ty: None,\n             init: ex,\n-            hir_id,\n+            hir_id: self.next_id(),\n             span: sp,\n             attrs: ThinVec::new(),\n             source,\n         };\n \n-        let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n         hir::Stmt {\n-            hir_id,\n+            hir_id: self.next_id(),\n             node: hir::StmtKind::Local(P(local)),\n             span: sp\n         }\n@@ -5190,12 +5102,10 @@ impl<'a> LoweringContext<'a> {\n         stmts: hir::HirVec<hir::Stmt>,\n         expr: Option<P<hir::Expr>>,\n     ) -> hir::Block {\n-        let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n-\n         hir::Block {\n             stmts,\n             expr,\n-            hir_id,\n+            hir_id: self.next_id(),\n             rules: hir::DefaultBlock,\n             span,\n             targeted_by_break: false,\n@@ -5244,7 +5154,7 @@ impl<'a> LoweringContext<'a> {\n         ident: Ident,\n         bm: hir::BindingAnnotation,\n     ) -> (P<hir::Pat>, hir::HirId) {\n-        let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n+        let hir_id = self.next_id();\n \n         (\n             P(hir::Pat {\n@@ -5261,9 +5171,8 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn pat(&mut self, span: Span, pat: hir::PatKind) -> P<hir::Pat> {\n-        let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n         P(hir::Pat {\n-            hir_id,\n+            hir_id: self.next_id(),\n             node: pat,\n             span,\n         })\n@@ -5286,14 +5195,13 @@ impl<'a> LoweringContext<'a> {\n \n         for seg in path.segments.iter_mut() {\n             if seg.hir_id.is_some() {\n-                seg.hir_id = Some(self.next_id().hir_id);\n+                seg.hir_id = Some(self.next_id());\n             }\n         }\n         path\n     }\n \n-    fn ty_path(&mut self, id: LoweredNodeId, span: Span, qpath: hir::QPath) -> hir::Ty {\n-        let mut id = id;\n+    fn ty_path(&mut self, mut hir_id: hir::HirId, span: Span, qpath: hir::QPath) -> hir::Ty {\n         let node = match qpath {\n             hir::QPath::Resolved(None, path) => {\n                 // Turn trait object paths into `TyKind::TraitObject` instead.\n@@ -5303,14 +5211,14 @@ impl<'a> LoweringContext<'a> {\n                             bound_generic_params: hir::HirVec::new(),\n                             trait_ref: hir::TraitRef {\n                                 path: path.and_then(|path| path),\n-                                hir_ref_id: id.hir_id,\n+                                hir_ref_id: hir_id,\n                             },\n                             span,\n                         };\n \n                         // The original ID is taken by the `PolyTraitRef`,\n                         // so the `Ty` itself needs a different one.\n-                        id = self.next_id();\n+                        hir_id = self.next_id();\n                         hir::TyKind::TraitObject(hir_vec![principal], self.elided_dyn_bound(span))\n                     }\n                     _ => hir::TyKind::Path(hir::QPath::Resolved(None, path)),\n@@ -5319,7 +5227,7 @@ impl<'a> LoweringContext<'a> {\n             _ => hir::TyKind::Path(qpath),\n         };\n         hir::Ty {\n-            hir_id: id.hir_id,\n+            hir_id,\n             node,\n             span,\n         }\n@@ -5335,9 +5243,8 @@ impl<'a> LoweringContext<'a> {\n             // `'f`.\n             AnonymousLifetimeMode::CreateParameter => {\n                 let fresh_name = self.collect_fresh_in_band_lifetime(span);\n-                let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n                 hir::Lifetime {\n-                    hir_id,\n+                    hir_id: self.next_id(),\n                     span,\n                     name: hir::LifetimeName::Param(fresh_name),\n                 }\n@@ -5360,7 +5267,7 @@ impl<'a> LoweringContext<'a> {\n             Some(id) => (id, \"`'_` cannot be used here\", \"`'_` is a reserved lifetime name\"),\n \n             None => (\n-                self.next_id().node_id,\n+                self.sess.next_node_id(),\n                 \"`&` without an explicit lifetime name cannot be used here\",\n                 \"explicit lifetime name needed here\",\n             ),\n@@ -5451,15 +5358,13 @@ impl<'a> LoweringContext<'a> {\n         replacement: LtReplacement,\n         span: Span,\n     ) -> hir::Lifetime {\n-        let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n+        let hir_id = self.next_id();\n         self.replace_elided_lifetime(hir_id, span, replacement)\n     }\n \n     fn new_implicit_lifetime(&mut self, span: Span) -> hir::Lifetime {\n-        let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n-\n         hir::Lifetime {\n-            hir_id,\n+            hir_id: self.next_id(),\n             span,\n             name: hir::LifetimeName::Implicit,\n         }"}]}