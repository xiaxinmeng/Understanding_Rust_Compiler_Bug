{"sha": "69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5MDcyYzRmNWQxOGQ3YTE3NjJmYmZiMDA3YjBiYTNkNmI1OWFkMzM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-08T16:06:20Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-11T11:34:48Z"}, "message": "[breaking-change] don't pub export ast::Lit_ variants", "tree": {"sha": "8c9a87b64cd8054e093c1c07f6c0b987cd00f9c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c9a87b64cd8054e093c1c07f6c0b987cd00f9c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33", "html_url": "https://github.com/rust-lang/rust/commit/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05d4cefd630cd9ae104555e69ceb3b1566298a6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/05d4cefd630cd9ae104555e69ceb3b1566298a6a", "html_url": "https://github.com/rust-lang/rust/commit/05d4cefd630cd9ae104555e69ceb3b1566298a6a"}], "stats": {"total": 284, "additions": 142, "deletions": 142}, "files": [{"sha": "62b6279bb332947f7b6ffab0a7f7d309d82efb69", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33", "patch": "@@ -421,7 +421,7 @@ fn check_exhaustive(cx: &MatchCheckCtxt, sp: Span, matrix: &Matrix, source: hir:\n \n fn const_val_to_expr(value: &ConstVal) -> P<hir::Expr> {\n     let node = match value {\n-        &ConstVal::Bool(b) => ast::LitBool(b),\n+        &ConstVal::Bool(b) => ast::LitKind::Bool(b),\n         _ => unreachable!()\n     };\n     P(hir::Expr {"}, {"sha": "80adc3e6fc69a2d038b594f290167f0a36562a80", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33", "patch": "@@ -1322,30 +1322,30 @@ fn cast_const<'tcx>(tcx: &ty::ctxt<'tcx>, val: ConstVal, ty: Ty) -> CastResult {\n \n fn lit_to_const(sess: &Session, span: Span, lit: &ast::Lit, ty_hint: Option<Ty>) -> ConstVal {\n     match lit.node {\n-        ast::LitStr(ref s, _) => Str((*s).clone()),\n-        ast::LitByteStr(ref data) => {\n+        ast::LitKind::Str(ref s, _) => Str((*s).clone()),\n+        ast::LitKind::ByteStr(ref data) => {\n             ByteStr(data.clone())\n         }\n-        ast::LitByte(n) => Uint(n as u64),\n-        ast::LitChar(n) => Uint(n as u64),\n-        ast::LitInt(n, ast::SignedIntLit(_)) => Int(n as i64),\n-        ast::LitInt(n, ast::UnsuffixedIntLit) => {\n+        ast::LitKind::Byte(n) => Uint(n as u64),\n+        ast::LitKind::Char(n) => Uint(n as u64),\n+        ast::LitKind::Int(n, ast::SignedIntLit(_)) => Int(n as i64),\n+        ast::LitKind::Int(n, ast::UnsuffixedIntLit) => {\n             match ty_hint.map(|ty| &ty.sty) {\n                 Some(&ty::TyUint(_)) => Uint(n),\n                 _ => Int(n as i64)\n             }\n         }\n-        ast::LitInt(n, ast::UnsignedIntLit(_)) => Uint(n),\n-        ast::LitFloat(ref n, _) |\n-        ast::LitFloatUnsuffixed(ref n) => {\n+        ast::LitKind::Int(n, ast::UnsignedIntLit(_)) => Uint(n),\n+        ast::LitKind::Float(ref n, _) |\n+        ast::LitKind::FloatUnsuffixed(ref n) => {\n             if let Ok(x) = n.parse::<f64>() {\n                 Float(x)\n             } else {\n                 // FIXME(#31407) this is only necessary because float parsing is buggy\n                 sess.span_bug(span, \"could not evaluate float literal (see issue #31407)\");\n             }\n         }\n-        ast::LitBool(b) => Bool(b)\n+        ast::LitKind::Bool(b) => Bool(b)\n     }\n }\n "}, {"sha": "b29116309912aab334ed6542efc2a054b8e819a7", "filename": "src/librustc_back/svh.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibrustc_back%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibrustc_back%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsvh.rs?ref=69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33", "patch": "@@ -232,7 +232,7 @@ mod svh_visitor {\n         SawExprTup,\n         SawExprBinary(hir::BinOp_),\n         SawExprUnary(hir::UnOp),\n-        SawExprLit(ast::Lit_),\n+        SawExprLit(ast::LitKind),\n         SawExprCast,\n         SawExprType,\n         SawExprIf,"}, {"sha": "c0e935f795259605b9df0b4ff3eb516358e5fa8f", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33", "patch": "@@ -563,7 +563,7 @@ impl RustcDefaultCalls {\n                             ast::MetaWord(ref word) => println!(\"{}\", word),\n                             ast::MetaNameValue(ref name, ref value) => {\n                                 println!(\"{}=\\\"{}\\\"\", name, match value.node {\n-                                    ast::LitStr(ref s, _) => s,\n+                                    ast::LitKind::Str(ref s, _) => s,\n                                     _ => continue,\n                                 });\n                             }"}, {"sha": "d90e145454c9c05cb09215a31b759b8b5e93b51a", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33", "patch": "@@ -73,7 +73,7 @@ impl LateLintPass for WhileTrue {\n     fn check_expr(&mut self, cx: &LateContext, e: &hir::Expr) {\n         if let hir::ExprWhile(ref cond, _, _) = e.node {\n             if let hir::ExprLit(ref lit) = cond.node {\n-                if let ast::LitBool(true) = lit.node {\n+                if let ast::LitKind::Bool(true) = lit.node {\n                     cx.span_lint(WHILE_TRUE, e.span,\n                                  \"denote infinite loops with loop { ... }\");\n                 }"}, {"sha": "11469f431408830376396e494c1c133705501c51", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33", "patch": "@@ -103,10 +103,10 @@ impl LateLintPass for TypeLimits {\n             hir::ExprUnary(hir::UnNeg, ref expr) => {\n                 if let hir::ExprLit(ref lit) = expr.node {\n                     match lit.node {\n-                        ast::LitInt(_, ast::UnsignedIntLit(_)) => {\n+                        ast::LitKind::Int(_, ast::UnsignedIntLit(_)) => {\n                             forbid_unsigned_negation(cx, e.span);\n                         },\n-                        ast::LitInt(_, ast::UnsuffixedIntLit) => {\n+                        ast::LitKind::Int(_, ast::UnsuffixedIntLit) => {\n                             if let ty::TyUint(_) = cx.tcx.node_id_to_type(e.id).sty {\n                                 forbid_unsigned_negation(cx, e.span);\n                             }\n@@ -139,7 +139,7 @@ impl LateLintPass for TypeLimits {\n \n                     if let Some(bits) = opt_ty_bits {\n                         let exceeding = if let hir::ExprLit(ref lit) = r.node {\n-                            if let ast::LitInt(shift, _) = lit.node { shift >= bits }\n+                            if let ast::LitKind::Int(shift, _) = lit.node { shift >= bits }\n                             else { false }\n                         } else {\n                             match eval_const_expr_partial(cx.tcx, &r, ExprTypeChecked, None) {\n@@ -159,8 +159,8 @@ impl LateLintPass for TypeLimits {\n                 match cx.tcx.node_id_to_type(e.id).sty {\n                     ty::TyInt(t) => {\n                         match lit.node {\n-                            ast::LitInt(v, ast::SignedIntLit(_)) |\n-                            ast::LitInt(v, ast::UnsuffixedIntLit) => {\n+                            ast::LitKind::Int(v, ast::SignedIntLit(_)) |\n+                            ast::LitKind::Int(v, ast::UnsuffixedIntLit) => {\n                                 let int_type = if let ast::IntTy::Is = t {\n                                     cx.sess().target.int_type\n                                 } else {\n@@ -189,8 +189,9 @@ impl LateLintPass for TypeLimits {\n                         };\n                         let (min, max) = uint_ty_range(uint_type);\n                         let lit_val: u64 = match lit.node {\n-                            ast::LitByte(_v) => return,  // _v is u8, within range by definition\n-                            ast::LitInt(v, _) => v,\n+                            // _v is u8, within range by definition\n+                            ast::LitKind::Byte(_v) => return,\n+                            ast::LitKind::Int(v, _) => v,\n                             _ => panic!()\n                         };\n                         if lit_val < min || lit_val > max {\n@@ -201,8 +202,8 @@ impl LateLintPass for TypeLimits {\n                     ty::TyFloat(t) => {\n                         let (min, max) = float_ty_range(t);\n                         let lit_val: f64 = match lit.node {\n-                            ast::LitFloat(ref v, _) |\n-                            ast::LitFloatUnsuffixed(ref v) => {\n+                            ast::LitKind::Float(ref v, _) |\n+                            ast::LitKind::FloatUnsuffixed(ref v) => {\n                                 match v.parse() {\n                                     Ok(f) => f,\n                                     Err(_) => return\n@@ -311,8 +312,8 @@ impl LateLintPass for TypeLimits {\n                     let (min, max) = int_ty_range(int_ty);\n                     let lit_val: i64 = match lit.node {\n                         hir::ExprLit(ref li) => match li.node {\n-                            ast::LitInt(v, ast::SignedIntLit(_)) |\n-                            ast::LitInt(v, ast::UnsuffixedIntLit) => v as i64,\n+                            ast::LitKind::Int(v, ast::SignedIntLit(_)) |\n+                            ast::LitKind::Int(v, ast::UnsuffixedIntLit) => v as i64,\n                             _ => return true\n                         },\n                         _ => panic!()\n@@ -323,7 +324,7 @@ impl LateLintPass for TypeLimits {\n                     let (min, max): (u64, u64) = uint_ty_range(uint_ty);\n                     let lit_val: u64 = match lit.node {\n                         hir::ExprLit(ref li) => match li.node {\n-                            ast::LitInt(v, _) => v,\n+                            ast::LitKind::Int(v, _) => v,\n                             _ => return true\n                         },\n                         _ => panic!()"}, {"sha": "9afbe5f1dbb1274c71506c2e7c0cccacbc60224d", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33", "patch": "@@ -1548,7 +1548,7 @@ fn encode_meta_item(rbml_w: &mut Encoder, mi: &ast::MetaItem) {\n       }\n       ast::MetaNameValue(ref name, ref value) => {\n         match value.node {\n-          ast::LitStr(ref value, _) => {\n+          ast::LitKind::Str(ref value, _) => {\n             rbml_w.start_tag(tag_meta_item_name_value);\n             rbml_w.wr_tagged_str(tag_meta_item_name, name);\n             rbml_w.wr_tagged_str(tag_meta_item_value, value);"}, {"sha": "f6bee7c269677e490f7fe1ace410f7f53b338e22", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33", "patch": "@@ -52,7 +52,7 @@ use rustc_front::hir;\n use std::ffi::{CStr, CString};\n use std::borrow::Cow;\n use libc::c_uint;\n-use syntax::ast;\n+use syntax::ast::{self, LitKind};\n use syntax::attr;\n use syntax::parse::token;\n use syntax::ptr::P;\n@@ -64,15 +64,15 @@ pub fn const_lit(cx: &CrateContext, e: &hir::Expr, lit: &ast::Lit)\n     let _icx = push_ctxt(\"trans_lit\");\n     debug!(\"const_lit: {:?}\", lit);\n     match lit.node {\n-        ast::LitByte(b) => C_integral(Type::uint_from_ty(cx, ast::UintTy::U8), b as u64, false),\n-        ast::LitChar(i) => C_integral(Type::char(cx), i as u64, false),\n-        ast::LitInt(i, ast::SignedIntLit(t)) => {\n+        LitKind::Byte(b) => C_integral(Type::uint_from_ty(cx, ast::UintTy::U8), b as u64, false),\n+        LitKind::Char(i) => C_integral(Type::char(cx), i as u64, false),\n+        LitKind::Int(i, ast::SignedIntLit(t)) => {\n             C_integral(Type::int_from_ty(cx, t), i, true)\n         }\n-        ast::LitInt(u, ast::UnsignedIntLit(t)) => {\n+        LitKind::Int(u, ast::UnsignedIntLit(t)) => {\n             C_integral(Type::uint_from_ty(cx, t), u, false)\n         }\n-        ast::LitInt(i, ast::UnsuffixedIntLit) => {\n+        LitKind::Int(i, ast::UnsuffixedIntLit) => {\n             let lit_int_ty = cx.tcx().node_id_to_type(e.id);\n             match lit_int_ty.sty {\n                 ty::TyInt(t) => {\n@@ -87,10 +87,10 @@ pub fn const_lit(cx: &CrateContext, e: &hir::Expr, lit: &ast::Lit)\n                                 lit_int_ty))\n             }\n         }\n-        ast::LitFloat(ref fs, t) => {\n+        LitKind::Float(ref fs, t) => {\n             C_floating(&fs, Type::float_from_ty(cx, t))\n         }\n-        ast::LitFloatUnsuffixed(ref fs) => {\n+        LitKind::FloatUnsuffixed(ref fs) => {\n             let lit_float_ty = cx.tcx().node_id_to_type(e.id);\n             match lit_float_ty.sty {\n                 ty::TyFloat(t) => {\n@@ -102,9 +102,9 @@ pub fn const_lit(cx: &CrateContext, e: &hir::Expr, lit: &ast::Lit)\n                 }\n             }\n         }\n-        ast::LitBool(b) => C_bool(cx, b),\n-        ast::LitStr(ref s, _) => C_str_slice(cx, (*s).clone()),\n-        ast::LitByteStr(ref data) => {\n+        LitKind::Bool(b) => C_bool(cx, b),\n+        LitKind::Str(ref s, _) => C_str_slice(cx, (*s).clone()),\n+        LitKind::ByteStr(ref data) => {\n             addr_of(cx, C_bytes(cx, &data[..]), 1, \"byte_str\")\n         }\n     }"}, {"sha": "e411ed346917976c16857232487b0094002ca2d5", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33", "patch": "@@ -1153,7 +1153,7 @@ fn trans_rvalue_dps_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         }\n         hir::ExprLit(ref lit) => {\n             match lit.node {\n-                ast::LitStr(ref s, _) => {\n+                ast::LitKind::Str(ref s, _) => {\n                     tvec::trans_lit_str(bcx, expr, (*s).clone(), dest)\n                 }\n                 _ => {"}, {"sha": "b3f783a974d9ba00ef2da070f99d5084c1ceaa8c", "filename": "src/librustc_trans/trans/tvec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs?ref=69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33", "patch": "@@ -92,7 +92,7 @@ pub fn trans_slice_vec<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n     // Handle the \"...\" case (returns a slice since strings are always unsized):\n     if let hir::ExprLit(ref lit) = content_expr.node {\n-        if let ast::LitStr(ref s, _) = lit.node {\n+        if let ast::LitKind::Str(ref s, _) = lit.node {\n             let scratch = rvalue_scratch_datum(bcx, vec_ty, \"\");\n             bcx = trans_lit_str(bcx,\n                                 content_expr,\n@@ -180,7 +180,7 @@ fn write_content<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     match content_expr.node {\n         hir::ExprLit(ref lit) => {\n             match lit.node {\n-                ast::LitStr(ref s, _) => {\n+                ast::LitKind::Str(ref s, _) => {\n                     match dest {\n                         Ignore => return bcx,\n                         SaveIn(lldest) => {\n@@ -276,7 +276,7 @@ fn elements_required(bcx: Block, content_expr: &hir::Expr) -> usize {\n     match content_expr.node {\n         hir::ExprLit(ref lit) => {\n             match lit.node {\n-                ast::LitStr(ref s, _) => s.len(),\n+                ast::LitKind::Str(ref s, _) => s.len(),\n                 _ => {\n                     bcx.tcx().sess.span_bug(content_expr.span,\n                                             \"unexpected evec content\")"}, {"sha": "f0436eee420090712d2d8b400a9023a010163478", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33", "patch": "@@ -57,7 +57,7 @@ pub fn check_pat<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n             // They can denote both statically and dynamically sized byte arrays\n             let mut pat_ty = expr_ty;\n             if let hir::ExprLit(ref lt) = lt.node {\n-                if let ast::LitByteStr(_) = lt.node {\n+                if let ast::LitKind::ByteStr(_) = lt.node {\n                     let expected_ty = structurally_resolved_type(fcx, pat.span, expected);\n                     if let ty::TyRef(_, mt) = expected_ty.sty {\n                         if let ty::TySlice(_) = mt.ty.sty {"}, {"sha": "e348f7a9e06ba7503c6c224ac5469a749b06e829", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33", "patch": "@@ -2606,16 +2606,16 @@ fn check_lit<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n     let tcx = fcx.ccx.tcx;\n \n     match lit.node {\n-        ast::LitStr(..) => tcx.mk_static_str(),\n-        ast::LitByteStr(ref v) => {\n+        ast::LitKind::Str(..) => tcx.mk_static_str(),\n+        ast::LitKind::ByteStr(ref v) => {\n             tcx.mk_imm_ref(tcx.mk_region(ty::ReStatic),\n                             tcx.mk_array(tcx.types.u8, v.len()))\n         }\n-        ast::LitByte(_) => tcx.types.u8,\n-        ast::LitChar(_) => tcx.types.char,\n-        ast::LitInt(_, ast::SignedIntLit(t)) => tcx.mk_mach_int(t),\n-        ast::LitInt(_, ast::UnsignedIntLit(t)) => tcx.mk_mach_uint(t),\n-        ast::LitInt(_, ast::UnsuffixedIntLit) => {\n+        ast::LitKind::Byte(_) => tcx.types.u8,\n+        ast::LitKind::Char(_) => tcx.types.char,\n+        ast::LitKind::Int(_, ast::SignedIntLit(t)) => tcx.mk_mach_int(t),\n+        ast::LitKind::Int(_, ast::UnsignedIntLit(t)) => tcx.mk_mach_uint(t),\n+        ast::LitKind::Int(_, ast::UnsuffixedIntLit) => {\n             let opt_ty = expected.to_option(fcx).and_then(|ty| {\n                 match ty.sty {\n                     ty::TyInt(_) | ty::TyUint(_) => Some(ty),\n@@ -2628,8 +2628,8 @@ fn check_lit<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n             opt_ty.unwrap_or_else(\n                 || tcx.mk_int_var(fcx.infcx().next_int_var_id()))\n         }\n-        ast::LitFloat(_, t) => tcx.mk_mach_float(t),\n-        ast::LitFloatUnsuffixed(_) => {\n+        ast::LitKind::Float(_, t) => tcx.mk_mach_float(t),\n+        ast::LitKind::FloatUnsuffixed(_) => {\n             let opt_ty = expected.to_option(fcx).and_then(|ty| {\n                 match ty.sty {\n                     ty::TyFloat(_) => Some(ty),\n@@ -2639,7 +2639,7 @@ fn check_lit<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n             opt_ty.unwrap_or_else(\n                 || tcx.mk_float_var(fcx.infcx().next_float_var_id()))\n         }\n-        ast::LitBool(_) => tcx.types.bool\n+        ast::LitKind::Bool(_) => tcx.types.bool\n     }\n }\n "}, {"sha": "2a346b773e6a2111ec34a4b1ecfce0bbf94c74a6", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33", "patch": "@@ -2531,21 +2531,21 @@ impl ToSource for syntax::codemap::Span {\n \n fn lit_to_string(lit: &ast::Lit) -> String {\n     match lit.node {\n-        ast::LitStr(ref st, _) => st.to_string(),\n-        ast::LitByteStr(ref data) => format!(\"{:?}\", data),\n-        ast::LitByte(b) => {\n+        ast::LitKind::Str(ref st, _) => st.to_string(),\n+        ast::LitKind::ByteStr(ref data) => format!(\"{:?}\", data),\n+        ast::LitKind::Byte(b) => {\n             let mut res = String::from(\"b'\");\n             for c in (b as char).escape_default() {\n                 res.push(c);\n             }\n             res.push('\\'');\n             res\n         },\n-        ast::LitChar(c) => format!(\"'{}'\", c),\n-        ast::LitInt(i, _t) => i.to_string(),\n-        ast::LitFloat(ref f, _t) => f.to_string(),\n-        ast::LitFloatUnsuffixed(ref f) => f.to_string(),\n-        ast::LitBool(b) => b.to_string(),\n+        ast::LitKind::Char(c) => format!(\"'{}'\", c),\n+        ast::LitKind::Int(i, _t) => i.to_string(),\n+        ast::LitKind::Float(ref f, _t) => f.to_string(),\n+        ast::LitKind::FloatUnsuffixed(ref f) => f.to_string(),\n+        ast::LitKind::Bool(b) => b.to_string(),\n     }\n }\n "}, {"sha": "41414ef5be11212b4d74f4c9974d935603243c56", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33", "patch": "@@ -13,7 +13,6 @@\n pub use self::ForeignItem_::*;\n pub use self::Item_::*;\n pub use self::KleeneOp::*;\n-pub use self::Lit_::*;\n pub use self::LitIntType::*;\n pub use self::MacStmtStyle::*;\n pub use self::MetaItem_::*;\n@@ -1264,7 +1263,7 @@ pub enum StrStyle {\n }\n \n /// A literal\n-pub type Lit = Spanned<Lit_>;\n+pub type Lit = Spanned<LitKind>;\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum LitIntType {\n@@ -1274,30 +1273,30 @@ pub enum LitIntType {\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub enum Lit_ {\n+pub enum LitKind {\n     /// A string literal (`\"foo\"`)\n-    LitStr(InternedString, StrStyle),\n+    Str(InternedString, StrStyle),\n     /// A byte string (`b\"foo\"`)\n-    LitByteStr(Rc<Vec<u8>>),\n+    ByteStr(Rc<Vec<u8>>),\n     /// A byte char (`b'f'`)\n-    LitByte(u8),\n+    Byte(u8),\n     /// A character literal (`'a'`)\n-    LitChar(char),\n+    Char(char),\n     /// An integer literal (`1u8`)\n-    LitInt(u64, LitIntType),\n+    Int(u64, LitIntType),\n     /// A float literal (`1f64` or `1E10f64`)\n-    LitFloat(InternedString, FloatTy),\n+    Float(InternedString, FloatTy),\n     /// A float literal without a suffix (`1.0 or 1.0E10`)\n-    LitFloatUnsuffixed(InternedString),\n+    FloatUnsuffixed(InternedString),\n     /// A boolean literal\n-    LitBool(bool),\n+    Bool(bool),\n }\n \n-impl Lit_ {\n+impl LitKind {\n     /// Returns true if this literal is a string and false otherwise.\n     pub fn is_str(&self) -> bool {\n         match *self {\n-            LitStr(..) => true,\n+            LitKind::Str(..) => true,\n             _ => false,\n         }\n     }"}, {"sha": "c79661c19489482de283cd535daada06ee4a747e", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33", "patch": "@@ -106,7 +106,7 @@ impl AttrMetaMethods for MetaItem {\n         match self.node {\n             MetaNameValue(_, ref v) => {\n                 match v.node {\n-                    ast::LitStr(ref s, _) => Some((*s).clone()),\n+                    ast::LitKind::Str(ref s, _) => Some((*s).clone()),\n                     _ => None,\n                 }\n             },\n@@ -173,7 +173,7 @@ impl AttributeMethods for Attribute {\n \n pub fn mk_name_value_item_str(name: InternedString, value: InternedString)\n                               -> P<MetaItem> {\n-    let value_lit = dummy_spanned(ast::LitStr(value, ast::CookedStr));\n+    let value_lit = dummy_spanned(ast::LitKind::Str(value, ast::CookedStr));\n     mk_name_value_item(name, value_lit)\n }\n \n@@ -225,7 +225,7 @@ pub fn mk_sugared_doc_attr(id: AttrId, text: InternedString, lo: BytePos,\n                            hi: BytePos)\n                            -> Attribute {\n     let style = doc_comment_style(&text);\n-    let lit = spanned(lo, hi, ast::LitStr(text, ast::CookedStr));\n+    let lit = spanned(lo, hi, ast::LitKind::Str(text, ast::CookedStr));\n     let attr = Attribute_ {\n         id: id,\n         style: style,"}, {"sha": "267b2dd9f6a562b679dc87a9b24c637125a37de9", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33", "patch": "@@ -349,7 +349,7 @@ impl DummyResult {\n     pub fn raw_expr(sp: Span) -> P<ast::Expr> {\n         P(ast::Expr {\n             id: ast::DUMMY_NODE_ID,\n-            node: ast::ExprKind::Lit(P(codemap::respan(sp, ast::LitBool(false)))),\n+            node: ast::ExprKind::Lit(P(codemap::respan(sp, ast::LitKind::Bool(false)))),\n             span: sp,\n             attrs: None,\n         })\n@@ -774,7 +774,7 @@ pub fn expr_to_string(cx: &mut ExtCtxt, expr: P<ast::Expr>, err_msg: &str)\n     let expr = cx.expander().fold_expr(expr);\n     match expr.node {\n         ast::ExprKind::Lit(ref l) => match l.node {\n-            ast::LitStr(ref s, style) => return Some(((*s).clone(), style)),\n+            ast::LitKind::Str(ref s, style) => return Some(((*s).clone(), style)),\n             _ => cx.span_err(l.span, err_msg)\n         },\n         _ => cx.span_err(expr.span, err_msg)"}, {"sha": "9302cabe8d82a82eed8242ad0ffd9c2c71f91fe2", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33", "patch": "@@ -139,7 +139,7 @@ pub trait AstBuilder {\n     fn expr_struct_ident(&self, span: Span, id: ast::Ident,\n                          fields: Vec<ast::Field>) -> P<ast::Expr>;\n \n-    fn expr_lit(&self, sp: Span, lit: ast::Lit_) -> P<ast::Expr>;\n+    fn expr_lit(&self, sp: Span, lit: ast::LitKind) -> P<ast::Expr>;\n \n     fn expr_usize(&self, span: Span, i: usize) -> P<ast::Expr>;\n     fn expr_isize(&self, sp: Span, i: isize) -> P<ast::Expr>;\n@@ -285,7 +285,7 @@ pub trait AstBuilder {\n     fn meta_name_value(&self,\n                        sp: Span,\n                        name: InternedString,\n-                       value: ast::Lit_)\n+                       value: ast::LitKind)\n                        -> P<ast::MetaItem>;\n \n     fn item_use(&self, sp: Span,\n@@ -676,29 +676,30 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.expr_struct(span, self.path_ident(span, id), fields)\n     }\n \n-    fn expr_lit(&self, sp: Span, lit: ast::Lit_) -> P<ast::Expr> {\n+    fn expr_lit(&self, sp: Span, lit: ast::LitKind) -> P<ast::Expr> {\n         self.expr(sp, ast::ExprKind::Lit(P(respan(sp, lit))))\n     }\n     fn expr_usize(&self, span: Span, i: usize) -> P<ast::Expr> {\n-        self.expr_lit(span, ast::LitInt(i as u64, ast::UnsignedIntLit(ast::UintTy::Us)))\n+        self.expr_lit(span, ast::LitKind::Int(i as u64, ast::UnsignedIntLit(ast::UintTy::Us)))\n     }\n     fn expr_isize(&self, sp: Span, i: isize) -> P<ast::Expr> {\n         if i < 0 {\n             let i = (-i) as u64;\n-            let lit = self.expr_lit(sp, ast::LitInt(i, ast::SignedIntLit(ast::IntTy::Is)));\n+            let lit_ty = ast::LitIntType::Signed(ast::IntTy::Is);\n+            let lit = self.expr_lit(sp, ast::LitKind::Int(i, lit_ty));\n             self.expr_unary(sp, ast::UnOp::Neg, lit)\n         } else {\n-            self.expr_lit(sp, ast::LitInt(i as u64, ast::SignedIntLit(ast::IntTy::Is)))\n+            self.expr_lit(sp, ast::LitKind::Int(i as u64, ast::SignedIntLit(ast::IntTy::Is)))\n         }\n     }\n     fn expr_u32(&self, sp: Span, u: u32) -> P<ast::Expr> {\n-        self.expr_lit(sp, ast::LitInt(u as u64, ast::UnsignedIntLit(ast::UintTy::U32)))\n+        self.expr_lit(sp, ast::LitKind::Int(u as u64, ast::UnsignedIntLit(ast::UintTy::U32)))\n     }\n     fn expr_u8(&self, sp: Span, u: u8) -> P<ast::Expr> {\n-        self.expr_lit(sp, ast::LitInt(u as u64, ast::UnsignedIntLit(ast::UintTy::U8)))\n+        self.expr_lit(sp, ast::LitKind::Int(u as u64, ast::UnsignedIntLit(ast::UintTy::U8)))\n     }\n     fn expr_bool(&self, sp: Span, value: bool) -> P<ast::Expr> {\n-        self.expr_lit(sp, ast::LitBool(value))\n+        self.expr_lit(sp, ast::LitKind::Bool(value))\n     }\n \n     fn expr_vec(&self, sp: Span, exprs: Vec<P<ast::Expr>>) -> P<ast::Expr> {\n@@ -712,7 +713,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.expr_addr_of(sp, self.expr_vec(sp, exprs))\n     }\n     fn expr_str(&self, sp: Span, s: InternedString) -> P<ast::Expr> {\n-        self.expr_lit(sp, ast::LitStr(s, ast::CookedStr))\n+        self.expr_lit(sp, ast::LitKind::Str(s, ast::CookedStr))\n     }\n \n     fn expr_cast(&self, sp: Span, expr: P<ast::Expr>, ty: P<ast::Ty>) -> P<ast::Expr> {\n@@ -1113,7 +1114,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     fn meta_name_value(&self,\n                        sp: Span,\n                        name: InternedString,\n-                       value: ast::Lit_)\n+                       value: ast::LitKind)\n                        -> P<ast::MetaItem> {\n         P(respan(sp, ast::MetaNameValue(name, respan(sp, value))))\n     }"}, {"sha": "18342fa775b8931ea1a4e4da4b26290b8e6e032e", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33", "patch": "@@ -218,7 +218,7 @@ pub mod rt {\n \n     impl ToTokens for str {\n         fn to_tokens(&self, cx: &ExtCtxt) -> Vec<TokenTree> {\n-            let lit = ast::LitStr(\n+            let lit = ast::LitKind::Str(\n                 token::intern_and_get_ident(self), ast::CookedStr);\n             dummy_spanned(lit).to_tokens(cx)\n         }\n@@ -249,13 +249,13 @@ pub mod rt {\n \n     impl ToTokens for bool {\n         fn to_tokens(&self, cx: &ExtCtxt) -> Vec<TokenTree> {\n-            dummy_spanned(ast::LitBool(*self)).to_tokens(cx)\n+            dummy_spanned(ast::LitKind::Bool(*self)).to_tokens(cx)\n         }\n     }\n \n     impl ToTokens for char {\n         fn to_tokens(&self, cx: &ExtCtxt) -> Vec<TokenTree> {\n-            dummy_spanned(ast::LitChar(*self)).to_tokens(cx)\n+            dummy_spanned(ast::LitKind::Char(*self)).to_tokens(cx)\n         }\n     }\n \n@@ -268,7 +268,7 @@ pub mod rt {\n                     } else {\n                         *self\n                     };\n-                    let lit = ast::LitInt(val as u64, ast::SignedIntLit($tag));\n+                    let lit = ast::LitKind::Int(val as u64, ast::SignedIntLit($tag));\n                     let lit = P(ast::Expr {\n                         id: ast::DUMMY_NODE_ID,\n                         node: ast::ExprKind::Lit(P(dummy_spanned(lit))),\n@@ -290,7 +290,7 @@ pub mod rt {\n         (unsigned, $t:ty, $tag:expr) => (\n             impl ToTokens for $t {\n                 fn to_tokens(&self, cx: &ExtCtxt) -> Vec<TokenTree> {\n-                    let lit = ast::LitInt(*self as u64, ast::UnsignedIntLit($tag));\n+                    let lit = ast::LitKind::Int(*self as u64, ast::UnsignedIntLit($tag));\n                     dummy_spanned(lit).to_tokens(cx)\n                 }\n             }"}, {"sha": "3e375e1798d8697be3536648f496d58cd1437d1e", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33", "patch": "@@ -187,7 +187,7 @@ pub fn expand_include_bytes(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n             let filename = format!(\"{}\", file.display());\n             cx.codemap().new_filemap_and_lines(&filename, \"\");\n \n-            base::MacEager::expr(cx.expr_lit(sp, ast::LitByteStr(Rc::new(bytes))))\n+            base::MacEager::expr(cx.expr_lit(sp, ast::LitKind::ByteStr(Rc::new(bytes))))\n         }\n     }\n }"}, {"sha": "3f9f2ae44a3a40a29d689c49b7e02f97851d0952", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33", "patch": "@@ -175,7 +175,7 @@ impl<'a> Parser<'a> {\n                 // FIXME #623 Non-string meta items are not serialized correctly;\n                 // just forbid them for now\n                 match lit.node {\n-                    ast::LitStr(..) => {}\n+                    ast::LitKind::Str(..) => {}\n                     _ => {\n                         self.span_err(lit.span,\n                                       \"non-string literals are not allowed in meta-items\");"}, {"sha": "bfd3dea38ceab3ca1a6f0cdaf2053ac3a7fa0240", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33", "patch": "@@ -449,11 +449,11 @@ fn looks_like_width_suffix(first_chars: &[char], s: &str) -> bool {\n }\n \n fn filtered_float_lit(data: token::InternedString, suffix: Option<&str>,\n-                      sd: &Handler, sp: Span) -> ast::Lit_ {\n+                      sd: &Handler, sp: Span) -> ast::LitKind {\n     debug!(\"filtered_float_lit: {}, {:?}\", data, suffix);\n     match suffix.as_ref().map(|s| &**s) {\n-        Some(\"f32\") => ast::LitFloat(data, ast::FloatTy::F32),\n-        Some(\"f64\") => ast::LitFloat(data, ast::FloatTy::F64),\n+        Some(\"f32\") => ast::LitKind::Float(data, ast::FloatTy::F32),\n+        Some(\"f64\") => ast::LitKind::Float(data, ast::FloatTy::F64),\n         Some(suf) => {\n             if suf.len() >= 2 && looks_like_width_suffix(&['f'], suf) {\n                 // if it looks like a width, lets try to be helpful.\n@@ -466,13 +466,13 @@ fn filtered_float_lit(data: token::InternedString, suffix: Option<&str>,\n                   .emit();\n             }\n \n-            ast::LitFloatUnsuffixed(data)\n+            ast::LitKind::FloatUnsuffixed(data)\n         }\n-        None => ast::LitFloatUnsuffixed(data)\n+        None => ast::LitKind::FloatUnsuffixed(data)\n     }\n }\n pub fn float_lit(s: &str, suffix: Option<InternedString>,\n-                 sd: &Handler, sp: Span) -> ast::Lit_ {\n+                 sd: &Handler, sp: Span) -> ast::LitKind {\n     debug!(\"float_lit: {:?}, {:?}\", s, suffix);\n     // FIXME #2252: bounds checking float literals is deferred until trans\n     let s = s.chars().filter(|&c| c != '_').collect::<String>();\n@@ -576,7 +576,7 @@ pub fn integer_lit(s: &str,\n                    suffix: Option<InternedString>,\n                    sd: &Handler,\n                    sp: Span)\n-                   -> ast::Lit_ {\n+                   -> ast::LitKind {\n     // s can only be ascii, byte indexing is fine\n \n     let s2 = s.chars().filter(|&c| c != '_').collect::<String>();\n@@ -652,7 +652,7 @@ pub fn integer_lit(s: &str,\n            string was {:?}, the original suffix was {:?}\", ty, base, s, orig, suffix);\n \n     match u64::from_str_radix(s, base) {\n-        Ok(r) => ast::LitInt(r, ty),\n+        Ok(r) => ast::LitKind::Int(r, ty),\n         Err(_) => {\n             // small bases are lexed as if they were base 10, e.g, the string\n             // might be `0b10201`. This will cause the conversion above to fail,\n@@ -665,7 +665,7 @@ pub fn integer_lit(s: &str,\n             if !already_errored {\n                 sd.span_err(sp, \"int literal is too large\");\n             }\n-            ast::LitInt(0, ty)\n+            ast::LitKind::Int(0, ty)\n         }\n     }\n }"}, {"sha": "d3b92ac0c0c5fb9d806a604d591fa001e3007f2f", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33", "patch": "@@ -27,9 +27,8 @@ use ast::{Ident, Inherited, ImplItem, Item, Item_, ItemStatic};\n use ast::{ItemEnum, ItemFn, ItemForeignMod, ItemImpl, ItemConst};\n use ast::{ItemMac, ItemMod, ItemStruct, ItemTrait, ItemTy, ItemDefaultImpl};\n use ast::{ItemExternCrate, ItemUse};\n-use ast::{Lit, Lit_, UintTy};\n-use ast::{LitBool, LitChar, LitByte, LitByteStr};\n-use ast::{LitStr, LitInt, Local};\n+use ast::{Lit, LitKind, UintTy};\n+use ast::Local;\n use ast::{MacStmtWithBraces, MacStmtWithSemicolon, MacStmtWithoutBraces};\n use ast::{MutImmutable, MutMutable, Mac_};\n use ast::{MutTy, Mutability};\n@@ -1517,7 +1516,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Matches token_lit = LIT_INTEGER | ...\n-    pub fn lit_from_token(&self, tok: &token::Token) -> PResult<'a, Lit_> {\n+    pub fn lit_from_token(&self, tok: &token::Token) -> PResult<'a, LitKind> {\n         match *tok {\n             token::Interpolated(token::NtExpr(ref v)) => {\n                 match v.node {\n@@ -1527,8 +1526,8 @@ impl<'a> Parser<'a> {\n             }\n             token::Literal(lit, suf) => {\n                 let (suffix_illegal, out) = match lit {\n-                    token::Byte(i) => (true, LitByte(parse::byte_lit(&i.as_str()).0)),\n-                    token::Char(i) => (true, LitChar(parse::char_lit(&i.as_str()).0)),\n+                    token::Byte(i) => (true, LitKind::Byte(parse::byte_lit(&i.as_str()).0)),\n+                    token::Char(i) => (true, LitKind::Char(parse::char_lit(&i.as_str()).0)),\n \n                     // there are some valid suffixes for integer and\n                     // float literals, so all the handling is done\n@@ -1548,20 +1547,20 @@ impl<'a> Parser<'a> {\n \n                     token::Str_(s) => {\n                         (true,\n-                         LitStr(token::intern_and_get_ident(&parse::str_lit(&s.as_str())),\n-                                ast::CookedStr))\n+                         LitKind::Str(token::intern_and_get_ident(&parse::str_lit(&s.as_str())),\n+                                      ast::CookedStr))\n                     }\n                     token::StrRaw(s, n) => {\n                         (true,\n-                         LitStr(\n+                         LitKind::Str(\n                             token::intern_and_get_ident(&parse::raw_str_lit(&s.as_str())),\n                             ast::RawStr(n)))\n                     }\n                     token::ByteStr(i) =>\n-                        (true, LitByteStr(parse::byte_str_lit(&i.as_str()))),\n+                        (true, LitKind::ByteStr(parse::byte_str_lit(&i.as_str()))),\n                     token::ByteStrRaw(i, _) =>\n                         (true,\n-                         LitByteStr(Rc::new(i.to_string().into_bytes()))),\n+                         LitKind::ByteStr(Rc::new(i.to_string().into_bytes()))),\n                 };\n \n                 if suffix_illegal {\n@@ -1579,9 +1578,9 @@ impl<'a> Parser<'a> {\n     pub fn parse_lit(&mut self) -> PResult<'a, Lit> {\n         let lo = self.span.lo;\n         let lit = if self.eat_keyword(keywords::True) {\n-            LitBool(true)\n+            LitKind::Bool(true)\n         } else if self.eat_keyword(keywords::False) {\n-            LitBool(false)\n+            LitKind::Bool(false)\n         } else {\n             let token = self.bump_and_get();\n             let lit = try!(self.lit_from_token(&token));\n@@ -2015,7 +2014,7 @@ impl<'a> Parser<'a> {\n     pub fn mk_lit_u32(&mut self, i: u32, attrs: ThinAttributes) -> P<Expr> {\n         let span = &self.span;\n         let lv_lit = P(codemap::Spanned {\n-            node: LitInt(i as u64, ast::UnsignedIntLit(UintTy::U32)),\n+            node: LitKind::Int(i as u64, ast::UnsignedIntLit(UintTy::U32)),\n             span: *span\n         });\n "}, {"sha": "96c5d1166297b3286b2e5d0b32de78638ee27f51", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33", "patch": "@@ -630,20 +630,20 @@ pub trait PrintState<'a> {\n             _ => ()\n         }\n         match lit.node {\n-            ast::LitStr(ref st, style) => self.print_string(&st, style),\n-            ast::LitByte(byte) => {\n+            ast::LitKind::Str(ref st, style) => self.print_string(&st, style),\n+            ast::LitKind::Byte(byte) => {\n                 let mut res = String::from(\"b'\");\n                 res.extend(ascii::escape_default(byte).map(|c| c as char));\n                 res.push('\\'');\n                 word(self.writer(), &res[..])\n             }\n-            ast::LitChar(ch) => {\n+            ast::LitKind::Char(ch) => {\n                 let mut res = String::from(\"'\");\n                 res.extend(ch.escape_default());\n                 res.push('\\'');\n                 word(self.writer(), &res[..])\n             }\n-            ast::LitInt(i, t) => {\n+            ast::LitKind::Int(i, t) => {\n                 match t {\n                     ast::SignedIntLit(st) => {\n                         word(self.writer(),\n@@ -657,18 +657,18 @@ pub trait PrintState<'a> {\n                     }\n                 }\n             }\n-            ast::LitFloat(ref f, t) => {\n+            ast::LitKind::Float(ref f, t) => {\n                 word(self.writer(),\n                      &format!(\n                          \"{}{}\",\n                          &f,\n                          t.ty_to_string()))\n             }\n-            ast::LitFloatUnsuffixed(ref f) => word(self.writer(), &f[..]),\n-            ast::LitBool(val) => {\n+            ast::LitKind::FloatUnsuffixed(ref f) => word(self.writer(), &f[..]),\n+            ast::LitKind::Bool(val) => {\n                 if val { word(self.writer(), \"true\") } else { word(self.writer(), \"false\") }\n             }\n-            ast::LitByteStr(ref v) => {\n+            ast::LitKind::ByteStr(ref v) => {\n                 let mut escaped: String = String::new();\n                 for &ch in v.iter() {\n                     escaped.extend(ascii::escape_default(ch)"}, {"sha": "8ea0580d4c8c62bbae95660d6a3990c8ed8a7f17", "filename": "src/libsyntax_ext/concat.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibsyntax_ext%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibsyntax_ext%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat.rs?ref=69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33", "patch": "@@ -29,24 +29,24 @@ pub fn expand_syntax_ext(cx: &mut base::ExtCtxt,\n         match e.node {\n             ast::ExprKind::Lit(ref lit) => {\n                 match lit.node {\n-                    ast::LitStr(ref s, _) |\n-                    ast::LitFloat(ref s, _) |\n-                    ast::LitFloatUnsuffixed(ref s) => {\n+                    ast::LitKind::Str(ref s, _) |\n+                    ast::LitKind::Float(ref s, _) |\n+                    ast::LitKind::FloatUnsuffixed(ref s) => {\n                         accumulator.push_str(&s);\n                     }\n-                    ast::LitChar(c) => {\n+                    ast::LitKind::Char(c) => {\n                         accumulator.push(c);\n                     }\n-                    ast::LitInt(i, ast::UnsignedIntLit(_)) |\n-                    ast::LitInt(i, ast::SignedIntLit(_)) |\n-                    ast::LitInt(i, ast::UnsuffixedIntLit) => {\n+                    ast::LitKind::Int(i, ast::UnsignedIntLit(_)) |\n+                    ast::LitKind::Int(i, ast::SignedIntLit(_)) |\n+                    ast::LitKind::Int(i, ast::UnsuffixedIntLit) => {\n                         accumulator.push_str(&format!(\"{}\", i));\n                     }\n-                    ast::LitBool(b) => {\n+                    ast::LitKind::Bool(b) => {\n                         accumulator.push_str(&format!(\"{}\", b));\n                     }\n-                    ast::LitByte(..) |\n-                    ast::LitByteStr(..) => {\n+                    ast::LitKind::Byte(..) |\n+                    ast::LitKind::ByteStr(..) => {\n                         cx.span_err(e.span, \"cannot concatenate a byte string literal\");\n                     }\n                 }"}, {"sha": "1751f43e0a1be8d8bb4fcb951d89ed0f89af27cf", "filename": "src/libsyntax_ext/deriving/debug.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs?ref=69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33", "patch": "@@ -71,8 +71,8 @@ fn show_substructure(cx: &mut ExtCtxt, span: Span,\n \n     // We want to make sure we have the expn_id set so that we can use unstable methods\n     let span = Span { expn_id: cx.backtrace(), .. span };\n-    let name = cx.expr_lit(span, ast::Lit_::LitStr(ident.name.as_str(),\n-                                                   ast::StrStyle::CookedStr));\n+    let name = cx.expr_lit(span, ast::LitKind::Str(ident.name.as_str(),\n+                                                         ast::StrStyle::CookedStr));\n     let builder = token::str_to_ident(\"builder\");\n     let builder_expr = cx.expr_ident(span, builder.clone());\n \n@@ -112,7 +112,7 @@ fn show_substructure(cx: &mut ExtCtxt, span: Span,\n                 stmts.push(cx.stmt_let(DUMMY_SP, true, builder, expr));\n \n                 for field in fields {\n-                    let name = cx.expr_lit(field.span, ast::Lit_::LitStr(\n+                    let name = cx.expr_lit(field.span, ast::LitKind::Str(\n                             field.name.unwrap().name.as_str(),\n                             ast::StrStyle::CookedStr));\n "}, {"sha": "541c2dbda4e59ad3396341f162333d3098c65b14", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33", "patch": "@@ -409,7 +409,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                 }\n \n                 // Translate the format\n-                let fill = self.ecx.expr_lit(sp, ast::LitChar(fill));\n+                let fill = self.ecx.expr_lit(sp, ast::LitKind::Char(fill));\n                 let align = |name| {\n                     let mut p = Context::rtpath(self.ecx, \"Alignment\");\n                     p.push(self.ecx.ident_of(name));"}]}