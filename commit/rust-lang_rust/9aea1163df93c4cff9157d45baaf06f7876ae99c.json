{"sha": "9aea1163df93c4cff9157d45baaf06f7876ae99c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhZWExMTYzZGY5M2M0Y2ZmOTE1N2Q0NWJhYWYwNmY3ODc2YWU5OWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-25T03:44:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-25T03:44:22Z"}, "message": "Auto merge of #60250 - Centril:rollup-d9tehhr, r=Centril\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #59560 (MIR generation cleanup)\n - #59697 (tweak unresolved label suggestion)\n - #60038 (Add codegen test for PGO instrumentation.)\n - #60160 (Fix #58270, fix off-by-one error in error diagnostics.)\n - #60185 (Reexport IntErrorKind in std)\n - #60243 (Add regression test for #53249.)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "6a9bcf1f170b05ec4d8a37a00701d3546e779c8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a9bcf1f170b05ec4d8a37a00701d3546e779c8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9aea1163df93c4cff9157d45baaf06f7876ae99c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9aea1163df93c4cff9157d45baaf06f7876ae99c", "html_url": "https://github.com/rust-lang/rust/commit/9aea1163df93c4cff9157d45baaf06f7876ae99c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9aea1163df93c4cff9157d45baaf06f7876ae99c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d211248393686e0f73851fc7548f6605220fbe1", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d211248393686e0f73851fc7548f6605220fbe1", "html_url": "https://github.com/rust-lang/rust/commit/3d211248393686e0f73851fc7548f6605220fbe1"}, {"sha": "1443f3b4e09d7b6a350acb6c3836eee54ff23e04", "url": "https://api.github.com/repos/rust-lang/rust/commits/1443f3b4e09d7b6a350acb6c3836eee54ff23e04", "html_url": "https://github.com/rust-lang/rust/commit/1443f3b4e09d7b6a350acb6c3836eee54ff23e04"}], "stats": {"total": 346, "additions": 245, "deletions": 101}, "files": [{"sha": "a443b7b5863e58b83aedd2d40ba5061650371d55", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=9aea1163df93c4cff9157d45baaf06f7876ae99c", "patch": "@@ -1268,11 +1268,11 @@ impl Step for Compiletest {\n         builder.add_rust_test_threads(&mut cmd);\n \n         if builder.config.sanitizers {\n-            cmd.env(\"SANITIZER_SUPPORT\", \"1\");\n+            cmd.env(\"RUSTC_SANITIZER_SUPPORT\", \"1\");\n         }\n \n         if builder.config.profiler {\n-            cmd.env(\"PROFILER_SUPPORT\", \"1\");\n+            cmd.env(\"RUSTC_PROFILER_SUPPORT\", \"1\");\n         }\n \n         cmd.env(\"RUST_TEST_TMPDIR\", builder.out.join(\"tmp\"));"}, {"sha": "c3d594204f413de24eeeb0ab860a88c37a52170a", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=9aea1163df93c4cff9157d45baaf06f7876ae99c", "patch": "@@ -268,6 +268,7 @@ impl EmitterWriter {\n                 // 6..7. This is degenerate input, but it's best to degrade\n                 // gracefully -- and the parser likes to supply a span like\n                 // that for EOF, in particular.\n+\n                 if lo.col_display == hi.col_display && lo.line == hi.line {\n                     hi.col_display += 1;\n                 }\n@@ -547,6 +548,15 @@ impl EmitterWriter {\n                     && j > i                      // multiline lines).\n                     && p == 0  // We're currently on the first line, move the label one line down\n                 {\n+                    // If we're overlapping with an un-labelled annotation with the same span\n+                    // we can just merge them in the output\n+                    if next.start_col == annotation.start_col\n+                    && next.end_col == annotation.end_col\n+                    && !next.has_label()\n+                    {\n+                        continue;\n+                    }\n+\n                     // This annotation needs a new line in the output.\n                     p += 1;\n                     break;"}, {"sha": "da2de43c09efe03d74113c9d79019632f4c21546", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=9aea1163df93c4cff9157d45baaf06f7876ae99c", "patch": "@@ -150,10 +150,6 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 let source = unpack!(block = this.as_operand(block, scope, source));\n                 block.and(Rvalue::Cast(CastKind::Misc, source, expr.ty))\n             }\n-            ExprKind::Use { source } => {\n-                let source = unpack!(block = this.as_operand(block, scope, source));\n-                block.and(Rvalue::Use(source))\n-            }\n             ExprKind::Pointer { cast, source } => {\n                 let source = unpack!(block = this.as_operand(block, scope, source));\n                 block.and(Rvalue::Cast(CastKind::Pointer(cast), source, expr.ty))\n@@ -363,6 +359,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             | ExprKind::Match { .. }\n             | ExprKind::If { .. }\n             | ExprKind::NeverToAny { .. }\n+            | ExprKind::Use { .. }\n             | ExprKind::Loop { .. }\n             | ExprKind::LogicalOp { .. }\n             | ExprKind::Call { .. }"}, {"sha": "4e24b6853d6eb5fc7862e5809615c984e4742697", "filename": "src/librustc_mir/build/expr/category.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs?ref=9aea1163df93c4cff9157d45baaf06f7876ae99c", "patch": "@@ -48,6 +48,7 @@ impl Category {\n             | ExprKind::If { .. }\n             | ExprKind::Match { .. }\n             | ExprKind::NeverToAny { .. }\n+            | ExprKind::Use { .. }\n             | ExprKind::Call { .. } => Some(Category::Rvalue(RvalueFunc::Into)),\n \n             ExprKind::Array { .. }\n@@ -58,7 +59,6 @@ impl Category {\n             | ExprKind::Binary { .. }\n             | ExprKind::Box { .. }\n             | ExprKind::Cast { .. }\n-            | ExprKind::Use { .. }\n             | ExprKind::Pointer { .. }\n             | ExprKind::Repeat { .. }\n             | ExprKind::Borrow { .. }"}, {"sha": "30ed9cef36f7bdec4ac0dbeac437bc3d8de2214e", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=9aea1163df93c4cff9157d45baaf06f7876ae99c", "patch": "@@ -327,6 +327,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     success.unit()\n                 }\n             }\n+            ExprKind::Use { source } => {\n+                this.into(destination, block, source)\n+            }\n \n             // These cases don't actually need a destination\n             ExprKind::Assign { .. }\n@@ -379,7 +382,6 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             | ExprKind::Binary { .. }\n             | ExprKind::Box { .. }\n             | ExprKind::Cast { .. }\n-            | ExprKind::Use { .. }\n             | ExprKind::Pointer { .. }\n             | ExprKind::Repeat { .. }\n             | ExprKind::Borrow { .. }"}, {"sha": "16ab233bd2e368893ba3e30c83d621eb4392bf87", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=9aea1163df93c4cff9157d45baaf06f7876ae99c", "patch": "@@ -147,7 +147,21 @@ pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Mir<'t\n             build::construct_fn(cx, id, arguments, safety, abi,\n                                 return_ty, yield_ty, return_ty_span, body)\n         } else {\n-            build::construct_const(cx, body_id, return_ty_span)\n+            // Get the revealed type of this const. This is *not* the adjusted\n+            // type of its body, which may be a subtype of this type. For\n+            // example:\n+            //\n+            // fn foo(_: &()) {}\n+            // static X: fn(&'static ()) = foo;\n+            //\n+            // The adjusted type of the body of X is `for<'a> fn(&'a ())` which\n+            // is not the same as the type of X. We need the type of the return\n+            // place to be the type of the constant because NLL typeck will\n+            // equate them.\n+\n+            let return_ty = cx.tables().node_type(id);\n+\n+            build::construct_const(cx, body_id, return_ty, return_ty_span)\n         };\n \n         // Convert the Mir to global types.\n@@ -730,16 +744,25 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n fn construct_const<'a, 'gcx, 'tcx>(\n     hir: Cx<'a, 'gcx, 'tcx>,\n     body_id: hir::BodyId,\n-    ty_span: Span,\n+    const_ty: Ty<'tcx>,\n+    const_ty_span: Span,\n ) -> Mir<'tcx> {\n     let tcx = hir.tcx();\n-    let ast_expr = &tcx.hir().body(body_id).value;\n-    let ty = hir.tables().expr_ty_adjusted(ast_expr);\n     let owner_id = tcx.hir().body_owner(body_id);\n     let span = tcx.hir().span(owner_id);\n-    let mut builder = Builder::new(hir, span, 0, Safety::Safe, ty, ty_span, vec![], vec![]);\n+    let mut builder = Builder::new(\n+        hir,\n+        span,\n+        0,\n+        Safety::Safe,\n+        const_ty,\n+        const_ty_span,\n+        vec![],\n+        vec![],\n+    );\n \n     let mut block = START_BLOCK;\n+    let ast_expr = &tcx.hir().body(body_id).value;\n     let expr = builder.hir.mirror(ast_expr);\n     unpack!(block = builder.into_expr(&Place::RETURN_PLACE, block, expr));\n "}, {"sha": "4ca865cc8449945ffbbf642515d3ba1c4046f0ac", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=9aea1163df93c4cff9157d45baaf06f7876ae99c", "patch": "@@ -259,8 +259,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n                 )?;\n             }\n \n-            Cast(kind, ref operand, cast_ty) => {\n-                debug_assert_eq!(self.monomorphize(cast_ty)?, dest.layout.ty);\n+            Cast(kind, ref operand, _) => {\n                 let src = self.eval_operand(operand, None)?;\n                 self.cast(src, kind, dest)?;\n             }"}, {"sha": "7754bb26f90551693a441b16e049a2b066adf645", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=9aea1163df93c4cff9157d45baaf06f7876ae99c", "patch": "@@ -364,7 +364,12 @@ fn resolve_struct_error<'sess, 'a>(resolver: &'sess Resolver<'_>,\n                                            \"use of undeclared label `{}`\",\n                                            name);\n             if let Some(lev_candidate) = lev_candidate {\n-                err.span_label(span, format!(\"did you mean `{}`?\", lev_candidate));\n+                err.span_suggestion(\n+                    span,\n+                    \"a label with a similar name exists in this scope\",\n+                    lev_candidate.to_string(),\n+                    Applicability::MaybeIncorrect,\n+                );\n             } else {\n                 err.span_label(span, format!(\"undeclared label `{}`\", name));\n             }\n@@ -4280,7 +4285,13 @@ impl<'a> Resolver<'a> {\n                         // Picks the first label that is \"close enough\", which is not necessarily\n                         // the closest match\n                         let close_match = self.search_label(label.ident, |rib, ident| {\n-                            let names = rib.bindings.iter().map(|(id, _)| &id.name);\n+                            let names = rib.bindings.iter().filter_map(|(id, _)| {\n+                                if id.span.ctxt() == label.ident.span.ctxt() {\n+                                    Some(&id.name)\n+                                } else {\n+                                    None\n+                                }\n+                            });\n                             find_best_match_for_name(names, &*ident.as_str(), None)\n                         });\n                         self.record_def(expr.id, err_path_resolution());"}, {"sha": "bd715df6e9d1eb938a775a628dbd8e1f11b62b4a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9aea1163df93c4cff9157d45baaf06f7876ae99c", "patch": "@@ -866,6 +866,8 @@ fn typeck_tables_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n             fcx.check_expr_coercable_to_type(&body.value, revealed_ty);\n \n+            fcx.write_ty(id, revealed_ty);\n+\n             fcx\n         };\n "}, {"sha": "193b17af55eff09af6f285d46362d4b3dd6e6766", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=9aea1163df93c4cff9157d45baaf06f7876ae99c", "patch": "@@ -42,6 +42,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         for arg in &body.arguments {\n             wbcx.visit_node_id(arg.pat.span, arg.hir_id);\n         }\n+        // Type only exists for constants and statics, not functions.\n+        match self.tcx.hir().body_owner_kind(item_id) {\n+            hir::BodyOwnerKind::Const | hir::BodyOwnerKind::Static(_) => {\n+                let item_hir_id = self.tcx.hir().node_to_hir_id(item_id);\n+                wbcx.visit_node_id(body.value.span, item_hir_id);\n+            }\n+            hir::BodyOwnerKind::Closure | hir::BodyOwnerKind::Fn => (),\n+        }\n         wbcx.visit_body(body);\n         wbcx.visit_upvar_capture_map();\n         wbcx.visit_upvar_list_map();"}, {"sha": "7b0e090fb1bf48e1ce577f68a094a6e634e00648", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=9aea1163df93c4cff9157d45baaf06f7876ae99c", "patch": "@@ -267,6 +267,7 @@\n #![feature(hash_raw_entry)]\n #![feature(hashmap_internals)]\n #![feature(int_error_internals)]\n+#![feature(int_error_matching)]\n #![feature(integer_atomics)]\n #![feature(lang_items)]\n #![feature(libc)]"}, {"sha": "2a2ca0b5237ee420f84f9fe4af8198f795f97c1b", "filename": "src/libstd/num.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Flibstd%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Flibstd%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum.rs?ref=9aea1163df93c4cff9157d45baaf06f7876ae99c", "patch": "@@ -16,6 +16,12 @@ pub use core::num::{NonZeroU8, NonZeroU16, NonZeroU32, NonZeroU64, NonZeroU128,\n #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")]\n pub use core::num::{NonZeroI8, NonZeroI16, NonZeroI32, NonZeroI64, NonZeroI128, NonZeroIsize};\n \n+#[unstable(feature = \"int_error_matching\",\n+           reason = \"it can be useful to match errors when making error messages \\\n+                     for integer parsing\",\n+           issue = \"22639\")]\n+pub use core::num::IntErrorKind;\n+\n #[cfg(test)] use crate::fmt;\n #[cfg(test)] use crate::ops::{Add, Sub, Mul, Div, Rem};\n "}, {"sha": "8493ef565d888f32730c00c72f543ade5957bdf7", "filename": "src/test/codegen/pgo-instrumentation.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Fcodegen%2Fpgo-instrumentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Fcodegen%2Fpgo-instrumentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fpgo-instrumentation.rs?ref=9aea1163df93c4cff9157d45baaf06f7876ae99c", "patch": "@@ -0,0 +1,20 @@\n+// Test that `-Zpgo-gen` creates expected instrumentation artifacts in LLVM IR.\n+\n+// needs-profiler-support\n+// compile-flags: -Z pgo-gen -Ccodegen-units=1\n+\n+// CHECK: @__llvm_profile_raw_version =\n+// CHECK: @__profc_{{.*}}pgo_instrumentation{{.*}}some_function{{.*}} = private global\n+// CHECK: @__profd_{{.*}}pgo_instrumentation{{.*}}some_function{{.*}} = private global\n+// CHECK: @__profc_{{.*}}pgo_instrumentation{{.*}}main{{.*}} = private global\n+// CHECK: @__profd_{{.*}}pgo_instrumentation{{.*}}main{{.*}} = private global\n+// CHECK: @__llvm_profile_filename = {{.*}}\"default_%m.profraw\\00\"{{.*}}\n+\n+#[inline(never)]\n+fn some_function() {\n+\n+}\n+\n+fn main() {\n+    some_function();\n+}"}, {"sha": "00a6b26d0cf226c8aa2d0a592851f03a73ec6016", "filename": "src/test/mir-opt/array-index-is-temporary.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary.rs?ref=9aea1163df93c4cff9157d45baaf06f7876ae99c", "patch": "@@ -18,25 +18,24 @@ fn main() {\n // START rustc.main.EraseRegions.after.mir\n //     bb0: {\n //         ...\n-//         _6 = &mut _2;\n-//         _5 = &mut (*_6);\n-//         _4 = move _5 as *mut usize (Misc);\n-//         _3 = move _4;\n+//         _5 = &mut _2;\n+//         _4 = &mut (*_5);\n+//         _3 = move _4 as *mut usize (Misc);\n //         ...\n-//         _8 = _3;\n-//         _7 = const foo(move _8) -> bb1;\n+//         _7 = _3;\n+//         _6 = const foo(move _7) -> bb1;\n //     }\n //\n //     bb1: {\n //         ...\n-//         _9 = _2;\n-//         _10 = Len(_1);\n-//         _11 = Lt(_9, _10);\n-//         assert(move _11, \"index out of bounds: the len is move _10 but the index is _9\") -> bb2;\n+//         _8 = _2;\n+//         _9 = Len(_1);\n+//         _10 = Lt(_8, _9);\n+//         assert(move _10, \"index out of bounds: the len is move _9 but the index is _8\") -> bb2;\n //     }\n //\n //     bb2: {\n-//         _1[_9] = move _7;\n+//         _1[_8] = move _6;\n //         ...\n //         return;\n //     }"}, {"sha": "6b7c863fcd43febb098d171fb4cbfc8b99b44546", "filename": "src/test/mir-opt/retag.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Fmir-opt%2Fretag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Fmir-opt%2Fretag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.rs?ref=9aea1163df93c4cff9157d45baaf06f7876ae99c", "patch": "@@ -75,18 +75,18 @@ fn main() {\n //         _10 = move _8;\n //         Retag(_10);\n //         ...\n-//         _15 = &mut (*_10);\n-//         Retag(_15);\n-//         _14 = move _15 as *mut i32 (Misc);\n-//         Retag([raw] _14);\n+//         _13 = &mut (*_10);\n+//         Retag(_13);\n+//         _12 = move _13 as *mut i32 (Misc);\n+//         Retag([raw] _12);\n //         ...\n-//         _18 = move _19(move _20) -> bb2;\n+//         _16 = move _17(move _18) -> bb2;\n //     }\n //\n //     bb2: {\n-//         Retag(_18);\n+//         Retag(_16);\n //         ...\n-//         _22 = const Test::foo_shr(move _23, move _25) -> bb3;\n+//         _20 = const Test::foo_shr(move _21, move _23) -> bb3;\n //     }\n //\n //     bb3: {"}, {"sha": "48181bcbdc6d363f636140483c79c2eafcd9b267", "filename": "src/test/run-make-fulldeps/pgo-gen-lto/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-lto%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-lto%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-lto%2FMakefile?ref=9aea1163df93c4cff9157d45baaf06f7876ae99c", "patch": "@@ -1,8 +1,8 @@\n+# needs-profiler-support\n+\n -include ../tools.mk\n \n all:\n-ifeq ($(PROFILER_SUPPORT),1)\n \t$(RUSTC) -Copt-level=3 -Clto=fat -Z pgo-gen=\"$(TMPDIR)\" test.rs\n \t$(call RUN,test) || exit 1\n \t[ -e \"$(TMPDIR)\"/default_*.profraw ] || (echo \"No .profraw file\"; exit 1)\n-endif"}, {"sha": "20977edb88e87ad8b2467863c04bdff8a1cb4493", "filename": "src/test/run-make-fulldeps/pgo-gen-no-imp-symbols/Makefile", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-no-imp-symbols%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-no-imp-symbols%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-no-imp-symbols%2FMakefile?ref=9aea1163df93c4cff9157d45baaf06f7876ae99c", "patch": "@@ -1,11 +1,11 @@\n+# needs-profiler-support\n+\n -include ../tools.mk\n \n all:\n-ifeq ($(PROFILER_SUPPORT),1)\n-\t$(RUSTC) -O -Ccodegen-units=1 -Z pgo-gen=\"$(TMPDIR)/test.profraw\" --emit=llvm-ir test.rs\n+\t$(RUSTC) -O -Ccodegen-units=1 -Z pgo-gen=\"$(TMPDIR)\" --emit=llvm-ir test.rs\n \t# We expect symbols starting with \"__llvm_profile_\".\n \t$(CGREP) \"__llvm_profile_\" < $(TMPDIR)/test.ll\n \t# We do NOT expect the \"__imp_\" version of these symbols.\n \t$(CGREP) -v \"__imp___llvm_profile_\" < $(TMPDIR)/test.ll # 64 bit\n \t$(CGREP) -v \"__imp____llvm_profile_\" < $(TMPDIR)/test.ll # 32 bit\n-endif"}, {"sha": "ce44c10a7c2d2c5e8f50724fb7ba8db6dccb83a0", "filename": "src/test/run-make-fulldeps/pgo-gen/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen%2FMakefile?ref=9aea1163df93c4cff9157d45baaf06f7876ae99c", "patch": "@@ -1,8 +1,8 @@\n+# needs-profiler-support\n+\n -include ../tools.mk\n \n all:\n-ifeq ($(PROFILER_SUPPORT),1)\n \t$(RUSTC) -g -Z pgo-gen=\"$(TMPDIR)\" test.rs\n \t$(call RUN,test) || exit 1\n \t[ -e \"$(TMPDIR)\"/default_*.profraw ] || (echo \"No .profraw file\"; exit 1)\n-endif"}, {"sha": "c12712590e48fdc1cf18640ca7b35b98536fbede", "filename": "src/test/run-make-fulldeps/profile/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Frun-make-fulldeps%2Fprofile%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Frun-make-fulldeps%2Fprofile%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fprofile%2FMakefile?ref=9aea1163df93c4cff9157d45baaf06f7876ae99c", "patch": "@@ -1,9 +1,9 @@\n+# needs-profiler-support\n+\n -include ../tools.mk\n \n all:\n-ifeq ($(PROFILER_SUPPORT),1)\n \t$(RUSTC) -g -Z profile test.rs\n \t$(call RUN,test) || exit 1\n \t[ -e \"$(TMPDIR)/test.gcno\" ] || (echo \"No .gcno file\"; exit 1)\n \t[ -e \"$(TMPDIR)/test.gcda\" ] || (echo \"No .gcda file\"; exit 1)\n-endif"}, {"sha": "51d8a4a947adc553d035d7c4164a0be2a12105c2", "filename": "src/test/run-make-fulldeps/sanitizer-address/Makefile", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-address%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-address%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-address%2FMakefile?ref=9aea1163df93c4cff9157d45baaf06f7876ae99c", "patch": "@@ -1,15 +1,15 @@\n+# needs-sanitizer-support\n+\n -include ../tools.mk\n \n LOG := $(TMPDIR)/log.txt\n \n # NOTE the address sanitizer only supports x86_64 linux and macOS\n \n ifeq ($(TARGET),x86_64-apple-darwin)\n-ASAN_SUPPORT=$(SANITIZER_SUPPORT)\n EXTRA_RUSTFLAG=-C rpath\n else\n ifeq ($(TARGET),x86_64-unknown-linux-gnu)\n-ASAN_SUPPORT=$(SANITIZER_SUPPORT)\n \n # Apparently there are very specific Linux kernels, notably the one that's\n # currently on Travis CI, which contain a buggy commit that triggers failures in\n@@ -23,7 +23,5 @@ endif\n endif\n \n all:\n-ifeq ($(ASAN_SUPPORT),1)\n \t$(RUSTC) -g -Z sanitizer=address -Z print-link-args $(EXTRA_RUSTFLAG) overflow.rs | $(CGREP) librustc_asan\n \t$(TMPDIR)/overflow 2>&1 | $(CGREP) stack-buffer-overflow\n-endif"}, {"sha": "35317dca1e824b5a3b8cf3575991d0618d6cea78", "filename": "src/test/run-make-fulldeps/sanitizer-cdylib-link/Makefile", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-cdylib-link%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-cdylib-link%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-cdylib-link%2FMakefile?ref=9aea1163df93c4cff9157d45baaf06f7876ae99c", "patch": "@@ -1,3 +1,7 @@\n+# needs-sanitizer-support\n+# only-x86_64\n+# only-linux\n+\n -include ../tools.mk\n \n LOG := $(TMPDIR)/log.txt\n@@ -7,16 +11,10 @@ LOG := $(TMPDIR)/log.txt\n # are compiled with address sanitizer, and we assert that a fault in the cdylib\n # is correctly detected.\n \n-ifeq ($(TARGET),x86_64-unknown-linux-gnu)\n-ASAN_SUPPORT=$(SANITIZER_SUPPORT)\n-\n # See comment in sanitizer-address/Makefile for why this is here\n EXTRA_RUSTFLAG=-C relocation-model=dynamic-no-pic\n-endif\n \n all:\n-ifeq ($(ASAN_SUPPORT),1)\n \t$(RUSTC) -g -Z sanitizer=address --crate-type cdylib --target $(TARGET) $(EXTRA_RUSTFLAG) library.rs\n \t$(RUSTC) -g -Z sanitizer=address --crate-type bin --target $(TARGET) $(EXTRA_RUSTFLAG) -llibrary program.rs\n \tLD_LIBRARY_PATH=$(TMPDIR) $(TMPDIR)/program 2>&1 | $(CGREP) stack-buffer-overflow\n-endif"}, {"sha": "24d2ebd8f48aa00dbe89de9109909822620f04db", "filename": "src/test/run-make-fulldeps/sanitizer-dylib-link/Makefile", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-dylib-link%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-dylib-link%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-dylib-link%2FMakefile?ref=9aea1163df93c4cff9157d45baaf06f7876ae99c", "patch": "@@ -1,3 +1,7 @@\n+# needs-sanitizer-support\n+# only-x86_64\n+# only-linux\n+\n -include ../tools.mk\n \n LOG := $(TMPDIR)/log.txt\n@@ -7,16 +11,10 @@ LOG := $(TMPDIR)/log.txt\n # are compiled with address sanitizer, and we assert that a fault in the dylib\n # is correctly detected.\n \n-ifeq ($(TARGET),x86_64-unknown-linux-gnu)\n-ASAN_SUPPORT=$(SANITIZER_SUPPORT)\n-\n # See comment in sanitizer-address/Makefile for why this is here\n EXTRA_RUSTFLAG=-C relocation-model=dynamic-no-pic\n-endif\n \n all:\n-ifeq ($(ASAN_SUPPORT),1)\n \t$(RUSTC) -g -Z sanitizer=address --crate-type dylib --target $(TARGET) $(EXTRA_RUSTFLAG) library.rs\n \t$(RUSTC) -g -Z sanitizer=address --crate-type bin --target $(TARGET) $(EXTRA_RUSTFLAG) -llibrary program.rs\n \tLD_LIBRARY_PATH=$(TMPDIR) $(TMPDIR)/program 2>&1 | $(CGREP) stack-buffer-overflow\n-endif"}, {"sha": "9581ac565ea0221441fd88ce1feb1200c8d9a94b", "filename": "src/test/run-make-fulldeps/sanitizer-invalid-cratetype/Makefile", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-invalid-cratetype%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-invalid-cratetype%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-invalid-cratetype%2FMakefile?ref=9aea1163df93c4cff9157d45baaf06f7876ae99c", "patch": "@@ -1,18 +1,16 @@\n+# needs-sanitizer-support\n+\n -include ../tools.mk\n \n # NOTE the address sanitizer only supports x86_64 linux and macOS\n \n ifeq ($(TARGET),x86_64-apple-darwin)\n-ASAN_SUPPORT=$(SANITIZER_SUPPORT)\n EXTRA_RUSTFLAG=-C rpath\n else\n ifeq ($(TARGET),x86_64-unknown-linux-gnu)\n-ASAN_SUPPORT=$(SANITIZER_SUPPORT)\n EXTRA_RUSTFLAG=\n endif\n endif\n \n all:\n-ifeq ($(ASAN_SUPPORT),1)\n \t$(RUSTC) -Z sanitizer=address --crate-type proc-macro --target $(TARGET) hello.rs 2>&1 | $(CGREP) '-Z sanitizer'\n-endif"}, {"sha": "101e8272ab91e40114655aef9eeed17c77b28fe4", "filename": "src/test/run-make-fulldeps/sanitizer-leak/Makefile", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-leak%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-leak%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-leak%2FMakefile?ref=9aea1163df93c4cff9157d45baaf06f7876ae99c", "patch": "@@ -1,12 +1,11 @@\n -include ../tools.mk\n \n+# needs-sanitizer-support\n # only-linux\n # only-x86_64\n # ignore-test\n # FIXME(#46126) ThinLTO for libstd broke this test\n \n all:\n-ifdef SANITIZER_SUPPORT\n \t$(RUSTC) -C opt-level=1 -g -Z sanitizer=leak -Z print-link-args leak.rs | $(CGREP) librustc_lsan\n \t$(TMPDIR)/leak 2>&1 | $(CGREP) 'detected memory leaks'\n-endif"}, {"sha": "b3376f8a72358d3dd80e3e07c5ae5a2c7d523e9c", "filename": "src/test/run-make-fulldeps/sanitizer-memory/Makefile", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-memory%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-memory%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-memory%2FMakefile?ref=9aea1163df93c4cff9157d45baaf06f7876ae99c", "patch": "@@ -1,10 +1,9 @@\n -include ../tools.mk\n \n+# needs-sanitizer-support\n # only-linux\n # only-x86_64\n \n all:\n-ifdef SANITIZER_SUPPORT\n \t$(RUSTC) -g -Z sanitizer=memory -Z print-link-args uninit.rs | $(CGREP) librustc_msan\n \t$(TMPDIR)/uninit 2>&1 | $(CGREP) use-of-uninitialized-value\n-endif"}, {"sha": "200dc1be4dee6bdfa171dad4a861f219acf4d4b9", "filename": "src/test/run-make-fulldeps/sanitizer-staticlib-link/Makefile", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-staticlib-link%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-staticlib-link%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-staticlib-link%2FMakefile?ref=9aea1163df93c4cff9157d45baaf06f7876ae99c", "patch": "@@ -1,18 +1,15 @@\n+# needs-sanitizer-support\n+# only-x86_64\n+# only-linux\n+\n -include ../tools.mk\n \n # This test builds a staticlib, then an executable that links to it.\n-# The staticlib and executable both  are compiled with address sanitizer, \n+# The staticlib and executable both  are compiled with address sanitizer,\n # and we assert that a fault in the staticlib is correctly detected.\n \n-ifeq ($(TARGET),x86_64-unknown-linux-gnu)\n-ASAN_SUPPORT=$(SANITIZER_SUPPORT)\n-EXTRA_RUSTFLAG=\n-endif\n-\n all:\n-ifeq ($(ASAN_SUPPORT),1)\n \t$(RUSTC) -g -Z sanitizer=address --crate-type staticlib --target $(TARGET) library.rs\n \t$(CC) program.c $(call STATICLIB,library) $(call OUT_EXE,program) $(EXTRACFLAGS) $(EXTRACXXFLAGS)\n \tLD_LIBRARY_PATH=$(TMPDIR) $(TMPDIR)/program 2>&1 | $(CGREP) stack-buffer-overflow\n-endif\n "}, {"sha": "5b1ccd7ddf6d961742d720373188fe729150f508", "filename": "src/test/run-pass/mir/mir_static_subtype.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Frun-pass%2Fmir%2Fmir_static_subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Frun-pass%2Fmir%2Fmir_static_subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir%2Fmir_static_subtype.rs?ref=9aea1163df93c4cff9157d45baaf06f7876ae99c", "patch": "@@ -0,0 +1,8 @@\n+// Test that subtyping the body of a static doesn't cause an ICE.\n+\n+fn foo(_ : &()) {}\n+static X: fn(&'static ()) = foo;\n+\n+fn main() {\n+    let _ = X;\n+}"}, {"sha": "d61c0687c1665afa15b559fd11bb3baddc61fbc7", "filename": "src/test/ui/hygiene/hygienic-label-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-1.stderr?ref=9aea1163df93c4cff9157d45baaf06f7876ae99c", "patch": "@@ -2,7 +2,7 @@ error[E0426]: use of undeclared label `'x`\n   --> $DIR/hygienic-label-1.rs:2:19\n    |\n LL |     () => { break 'x; }\n-   |                   ^^ did you mean `'x`?\n+   |                   ^^ undeclared label `'x`\n ...\n LL |     'x: loop { foo!() }\n    |                ------ in this macro invocation"}, {"sha": "f23e741debe9dd75f0c9870fa6c944cd0478aa15", "filename": "src/test/ui/hygiene/hygienic-label-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-2.stderr?ref=9aea1163df93c4cff9157d45baaf06f7876ae99c", "patch": "@@ -2,7 +2,7 @@ error[E0426]: use of undeclared label `'x`\n   --> $DIR/hygienic-label-2.rs:6:16\n    |\n LL |     foo!(break 'x);\n-   |                ^^ did you mean `'x`?\n+   |                ^^ undeclared label `'x`\n \n error: aborting due to previous error\n "}, {"sha": "0c4173a61aac48f13d32dd37d8685ddf048c0d98", "filename": "src/test/ui/hygiene/hygienic-label-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-3.stderr?ref=9aea1163df93c4cff9157d45baaf06f7876ae99c", "patch": "@@ -2,7 +2,7 @@ error[E0426]: use of undeclared label `'x`\n   --> $DIR/hygienic-label-3.rs:2:19\n    |\n LL |     () => { break 'x; }\n-   |                   ^^ did you mean `'x`?\n+   |                   ^^ undeclared label `'x`\n ...\n LL |         foo!()\n    |         ------ in this macro invocation"}, {"sha": "1c93da02f614255954b402ff4e189c562d1310fa", "filename": "src/test/ui/hygiene/hygienic-label-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-4.stderr?ref=9aea1163df93c4cff9157d45baaf06f7876ae99c", "patch": "@@ -2,7 +2,7 @@ error[E0426]: use of undeclared label `'x`\n   --> $DIR/hygienic-label-4.rs:6:16\n    |\n LL |     foo!(break 'x);\n-   |                ^^ did you mean `'x`?\n+   |                ^^ undeclared label `'x`\n \n error: aborting due to previous error\n "}, {"sha": "9e4ff43ecd112486021e775a64f1a4e4a1cff8a5", "filename": "src/test/ui/issue-53249.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Fui%2Fissue-53249.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Fui%2Fissue-53249.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-53249.rs?ref=9aea1163df93c4cff9157d45baaf06f7876ae99c", "patch": "@@ -0,0 +1,47 @@\n+// compile-pass\n+// edition:2018\n+\n+#![feature(arbitrary_self_types, async_await, await_macro)]\n+\n+use std::task::{self, Poll};\n+use std::future::Future;\n+use std::marker::Unpin;\n+use std::pin::Pin;\n+\n+// This is a regression test for a ICE/unbounded recursion issue relating to async-await.\n+\n+#[derive(Debug)]\n+#[must_use = \"futures do nothing unless polled\"]\n+pub struct Lazy<F> {\n+    f: Option<F>\n+}\n+\n+impl<F> Unpin for Lazy<F> {}\n+\n+pub fn lazy<F, R>(f: F) -> Lazy<F>\n+    where F: FnOnce(&mut task::Context) -> R,\n+{\n+    Lazy { f: Some(f) }\n+}\n+\n+impl<R, F> Future for Lazy<F>\n+    where F: FnOnce(&mut task::Context) -> R,\n+{\n+    type Output = R;\n+\n+    fn poll(mut self: Pin<&mut Self>, cx: &mut task::Context) -> Poll<R> {\n+        Poll::Ready((self.f.take().unwrap())(cx))\n+    }\n+}\n+\n+async fn __receive<WantFn, Fut>(want: WantFn) -> ()\n+    where Fut: Future<Output = ()>, WantFn: Fn(&Box<Send + 'static>) -> Fut,\n+{\n+    await!(lazy(|_| ()));\n+}\n+\n+pub fn basic_spawn_receive() {\n+    async { await!(__receive(|_| async { () })) };\n+}\n+\n+fn main() {}"}, {"sha": "ac97d32a6e15b7f05e553b5f455adac50007656f", "filename": "src/test/ui/issue-60075.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Fui%2Fissue-60075.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Fui%2Fissue-60075.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-60075.stderr?ref=9aea1163df93c4cff9157d45baaf06f7876ae99c", "patch": "@@ -11,9 +11,7 @@ LL |     fn qux() -> Option<usize> {\n    |                               - unclosed delimiter\n LL |         let _ = if true {\n LL |         });\n-   |           ^\n-   |           |\n-   |           help: `}` may belong here\n+   |           ^ help: `}` may belong here\n \n error: expected identifier, found `;`\n   --> $DIR/issue-60075.rs:6:11"}, {"sha": "58ab0a142d6f1c29236c957da827a642ec2c74ea", "filename": "src/test/ui/issues/issue-58856-1.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Fui%2Fissues%2Fissue-58856-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Fui%2Fissues%2Fissue-58856-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58856-1.stderr?ref=9aea1163df93c4cff9157d45baaf06f7876ae99c", "patch": "@@ -2,9 +2,8 @@ error: expected one of `)`, `,`, or `:`, found `>`\n   --> $DIR/issue-58856-1.rs:2:14\n    |\n LL |     fn b(self>\n-   |         -    ^\n-   |         |    |\n-   |         |    help: `)` may belong here\n+   |         -    ^ help: `)` may belong here\n+   |         |\n    |         unclosed delimiter\n \n error: aborting due to previous error"}, {"sha": "b49ee0cfc7033407fcf9d2dd6b70ad4e0cf7ae5c", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-3.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.stderr?ref=9aea1163df93c4cff9157d45baaf06f7876ae99c", "patch": "@@ -2,9 +2,7 @@ error[E0623]: lifetime mismatch\n   --> $DIR/ex3-both-anon-regions-both-are-structs-3.rs:7:11\n    |\n LL | fn foo(mut x: Ref) {\n-   |               ---\n-   |               |\n-   |               this type is declared with multiple lifetimes...\n+   |               --- this type is declared with multiple lifetimes...\n LL |     x.a = x.b;\n    |           ^^^ ...but data with one lifetime flows into the other here\n "}, {"sha": "5b9a9b7f06c39aa9fd06b551bf50509d27e9cc58", "filename": "src/test/ui/parser/issue-10636-2.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Fui%2Fparser%2Fissue-10636-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Fui%2Fparser%2Fissue-10636-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-10636-2.stderr?ref=9aea1163df93c4cff9157d45baaf06f7876ae99c", "patch": "@@ -2,9 +2,8 @@ error: expected one of `)`, `,`, `.`, `?`, or an operator, found `;`\n   --> $DIR/issue-10636-2.rs:5:25\n    |\n LL |     option.map(|some| 42;\n-   |               -         ^\n-   |               |         |\n-   |               |         help: `)` may belong here\n+   |               -         ^ help: `)` may belong here\n+   |               |\n    |               unclosed delimiter\n \n error: expected expression, found `)`"}, {"sha": "6b3a488805f972ddfa1c7aaf91b744f955a01261", "filename": "src/test/ui/regions/regions-variance-contravariant-use-covariant-in-second-position.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant-in-second-position.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant-in-second-position.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant-in-second-position.stderr?ref=9aea1163df93c4cff9157d45baaf06f7876ae99c", "patch": "@@ -2,9 +2,7 @@ error[E0623]: lifetime mismatch\n   --> $DIR/regions-variance-contravariant-use-covariant-in-second-position.rs:25:30\n    |\n LL | fn use_<'short,'long>(c: S<'long, 'short>,\n-   |                          ----------------\n-   |                          |\n-   |                          this type is declared with multiple lifetimes...\n+   |                          ---------------- this type is declared with multiple lifetimes...\n ...\n LL |     let _: S<'long, 'long> = c;\n    |                              ^ ...but data with one lifetime flows into the other here"}, {"sha": "607573f27698b4af7e3734d4721b7dcadfbe504e", "filename": "src/test/ui/resolve/token-error-correct-3.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr?ref=9aea1163df93c4cff9157d45baaf06f7876ae99c", "patch": "@@ -2,9 +2,8 @@ error: expected one of `)`, `,`, `.`, `?`, or an operator, found `;`\n   --> $DIR/token-error-correct-3.rs:15:35\n    |\n LL |             callback(path.as_ref();\n-   |                     -             ^\n-   |                     |             |\n-   |                     |             help: `)` may belong here\n+   |                     -             ^ help: `)` may belong here\n+   |                     |\n    |                     unclosed delimiter\n \n error: expected one of `.`, `;`, `?`, `}`, or an operator, found `)`"}, {"sha": "02d46a3f5960715dd3d86fa13840e23c73bfb29d", "filename": "src/test/ui/suggestions/suggest-labels.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-labels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-labels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-labels.stderr?ref=9aea1163df93c4cff9157d45baaf06f7876ae99c", "patch": "@@ -2,19 +2,31 @@ error[E0426]: use of undeclared label `'fo`\n   --> $DIR/suggest-labels.rs:4:15\n    |\n LL |         break 'fo;\n-   |               ^^^ did you mean `'foo`?\n+   |               ^^^\n+help: a label with a similar name exists in this scope\n+   |\n+LL |         break 'foo;\n+   |               ^^^^\n \n error[E0426]: use of undeclared label `'bor`\n   --> $DIR/suggest-labels.rs:8:18\n    |\n LL |         continue 'bor;\n-   |                  ^^^^ did you mean `'bar`?\n+   |                  ^^^^\n+help: a label with a similar name exists in this scope\n+   |\n+LL |         continue 'bar;\n+   |                  ^^^^\n \n error[E0426]: use of undeclared label `'longlable`\n   --> $DIR/suggest-labels.rs:13:19\n    |\n LL |             break 'longlable;\n-   |                   ^^^^^^^^^^ did you mean `'longlabel1`?\n+   |                   ^^^^^^^^^^\n+help: a label with a similar name exists in this scope\n+   |\n+LL |             break 'longlabel1;\n+   |                   ^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "fb6ada89171abadb3ab66a0eb07bef55d63dfa0b", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aea1163df93c4cff9157d45baaf06f7876ae99c/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=9aea1163df93c4cff9157d45baaf06f7876ae99c", "patch": "@@ -88,6 +88,9 @@ impl EarlyProps {\n             }\n         }\n \n+        let rustc_has_profiler_support = env::var_os(\"RUSTC_PROFILER_SUPPORT\").is_some();\n+        let rustc_has_sanitizer_support = env::var_os(\"RUSTC_SANITIZER_SUPPORT\").is_some();\n+\n         iter_header(testfile, None, &mut |ln| {\n             // we should check if any only-<platform> exists and if it exists\n             // and does not matches the current platform, skip the test\n@@ -116,6 +119,16 @@ impl EarlyProps {\n                    config.parse_needs_matching_clang(ln) {\n                     props.ignore = Ignore::Ignore;\n                 }\n+\n+                if !rustc_has_profiler_support &&\n+                   config.parse_needs_profiler_support(ln) {\n+                    props.ignore = Ignore::Ignore;\n+                }\n+\n+                if !rustc_has_sanitizer_support &&\n+                   config.parse_needs_sanitizer_support(ln) {\n+                    props.ignore = Ignore::Ignore;\n+                }\n             }\n \n             if (config.mode == common::DebugInfoGdb || config.mode == common::DebugInfoBoth) &&\n@@ -748,6 +761,14 @@ impl Config {\n         self.parse_name_directive(line, \"needs-matching-clang\")\n     }\n \n+    fn parse_needs_profiler_support(&self, line: &str) -> bool {\n+        self.parse_name_directive(line, \"needs-profiler-support\")\n+    }\n+\n+    fn parse_needs_sanitizer_support(&self, line: &str) -> bool {\n+        self.parse_name_directive(line, \"needs-sanitizer-support\")\n+    }\n+\n     /// Parses a name-value directive which contains config-specific information, e.g., `ignore-x86`\n     /// or `normalize-stderr-32bit`.\n     fn parse_cfg_name_directive(&self, line: &str, prefix: &str) -> ParsedNameDirective {"}]}