{"sha": "849ac25f057c4edb4f2f58e479380b82d4967d0c", "node_id": "C_kwDOAAsO6NoAKDg0OWFjMjVmMDU3YzRlZGI0ZjJmNThlNDc5MzgwYjgyZDQ5NjdkMGM", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-03-18T13:54:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-18T13:54:09Z"}, "message": "Merge #11713\n\n11713: Complete associated consts in patterns  r=jonas-schievink a=hi-rustin\n\nTry close https://github.com/rust-analyzer/rust-analyzer/issues/11555\n\nCo-authored-by: hi-rustin <rustin.liu@gmail.com>\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "5399985c21f42166ec6cf16790adfa138d3c5368", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5399985c21f42166ec6cf16790adfa138d3c5368"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/849ac25f057c4edb4f2f58e479380b82d4967d0c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiNI8BCRBK7hj4Ov3rIwAAWhIIACoSSSAVW9+uXkM44qyD2acU\nGdbBLHaHDygee7YeuTLEB1PcrYeAsA9rG8nwdigmkxlgTeC7s9/mD0eH4xSvQwc9\naZXNLUDrR6E1GsHpXJej6BAau13g+uUzGmbJJHjqFkmxXW2OyC3yLvgsuUZ5CA3n\nV5uldaL6MDSvUOsKt0mrkAfn12KZ9ZGDLoMNv5t3rKvYxXStG58WbyzlirRFc3Hc\nyJpjyvqSU1gPzEswJ59A0QOlkCAFvhTR2lIfzRmspzKk3BQj50vupVGoABrSx8tp\nSZuCDpjk2SVvhR3+ah4QahL23Ixbjc8/EEg4vKHviCocL8PVXEP/B+qo33VwEBg=\n=lCpF\n-----END PGP SIGNATURE-----\n", "payload": "tree 5399985c21f42166ec6cf16790adfa138d3c5368\nparent 6ad8c022ed9e5d908d3d07903d4a84644282a8d1\nparent e7564086f48f1fba23de080901b607eb9b13457f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1647611649 +0000\ncommitter GitHub <noreply@github.com> 1647611649 +0000\n\nMerge #11713\n\n11713: Complete associated consts in patterns  r=jonas-schievink a=hi-rustin\n\nTry close https://github.com/rust-analyzer/rust-analyzer/issues/11555\n\nCo-authored-by: hi-rustin <rustin.liu@gmail.com>\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/849ac25f057c4edb4f2f58e479380b82d4967d0c", "html_url": "https://github.com/rust-lang/rust/commit/849ac25f057c4edb4f2f58e479380b82d4967d0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/849ac25f057c4edb4f2f58e479380b82d4967d0c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ad8c022ed9e5d908d3d07903d4a84644282a8d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ad8c022ed9e5d908d3d07903d4a84644282a8d1", "html_url": "https://github.com/rust-lang/rust/commit/6ad8c022ed9e5d908d3d07903d4a84644282a8d1"}, {"sha": "e7564086f48f1fba23de080901b607eb9b13457f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7564086f48f1fba23de080901b607eb9b13457f", "html_url": "https://github.com/rust-lang/rust/commit/e7564086f48f1fba23de080901b607eb9b13457f"}], "stats": {"total": 121, "additions": 103, "deletions": 18}, "files": [{"sha": "dac777a69bc09c2e0af630ed00494edb2b5ab144", "filename": "crates/ide_completion/src/completions/pattern.rs", "status": "modified", "additions": 30, "deletions": 18, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/849ac25f057c4edb4f2f58e479380b82d4967d0c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/849ac25f057c4edb4f2f58e479380b82d4967d0c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs?ref=849ac25f057c4edb4f2f58e479380b82d4967d0c", "patch": "@@ -137,25 +137,30 @@ fn pattern_path_completion(\n                         }\n                     }\n                 }\n-                hir::PathResolution::Def(hir::ModuleDef::Adt(hir::Adt::Enum(e))) => {\n-                    cov_mark::hit!(enum_plain_qualified_use_tree);\n-                    e.variants(ctx.db)\n-                        .into_iter()\n-                        .for_each(|variant| acc.add_enum_variant(ctx, variant, None));\n-                }\n-                res @ (hir::PathResolution::TypeParam(_) | hir::PathResolution::SelfType(_)) => {\n+                res @ (hir::PathResolution::TypeParam(_)\n+                | hir::PathResolution::SelfType(_)\n+                | hir::PathResolution::Def(hir::ModuleDef::Adt(hir::Adt::Struct(_)))\n+                | hir::PathResolution::Def(hir::ModuleDef::Adt(hir::Adt::Enum(_)))\n+                | hir::PathResolution::Def(hir::ModuleDef::Adt(hir::Adt::Union(_)))) => {\n                     let ty = match res {\n                         hir::PathResolution::TypeParam(param) => param.ty(ctx.db),\n                         hir::PathResolution::SelfType(impl_def) => impl_def.self_ty(ctx.db),\n+                        hir::PathResolution::Def(hir::ModuleDef::Adt(hir::Adt::Struct(s))) => {\n+                            s.ty(ctx.db)\n+                        }\n+                        hir::PathResolution::Def(hir::ModuleDef::Adt(hir::Adt::Enum(e))) => {\n+                            cov_mark::hit!(enum_plain_qualified_use_tree);\n+                            e.variants(ctx.db)\n+                                .into_iter()\n+                                .for_each(|variant| acc.add_enum_variant(ctx, variant, None));\n+                            e.ty(ctx.db)\n+                        }\n+                        hir::PathResolution::Def(hir::ModuleDef::Adt(hir::Adt::Union(u))) => {\n+                            u.ty(ctx.db)\n+                        }\n                         _ => return,\n                     };\n \n-                    if let Some(hir::Adt::Enum(e)) = ty.as_adt() {\n-                        e.variants(ctx.db)\n-                            .into_iter()\n-                            .for_each(|variant| acc.add_enum_variant(ctx, variant, None));\n-                    }\n-\n                     let traits_in_scope = ctx.scope.visible_traits();\n                     let mut seen = FxHashSet::default();\n                     ty.iterate_path_candidates(\n@@ -165,12 +170,19 @@ fn pattern_path_completion(\n                         ctx.module,\n                         None,\n                         |item| {\n-                            // Note associated consts cannot be referenced in patterns\n-                            if let AssocItem::TypeAlias(ta) = item {\n-                                // We might iterate candidates of a trait multiple times here, so deduplicate them.\n-                                if seen.insert(item) {\n-                                    acc.add_type_alias(ctx, ta);\n+                            match item {\n+                                AssocItem::TypeAlias(ta) => {\n+                                    // We might iterate candidates of a trait multiple times here, so deduplicate them.\n+                                    if seen.insert(item) {\n+                                        acc.add_type_alias(ctx, ta);\n+                                    }\n+                                }\n+                                AssocItem::Const(c) => {\n+                                    if seen.insert(item) {\n+                                        acc.add_const(ctx, c);\n+                                    }\n                                 }\n+                                _ => {}\n                             }\n                             None::<()>\n                         },"}, {"sha": "b2740d26ce0c653d9fe77d9708b4b6fb1e84454f", "filename": "crates/ide_completion/src/tests/pattern.rs", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/849ac25f057c4edb4f2f58e479380b82d4967d0c/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/849ac25f057c4edb4f2f58e479380b82d4967d0c/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs?ref=849ac25f057c4edb4f2f58e479380b82d4967d0c", "patch": "@@ -306,6 +306,7 @@ fn func() {\n             ev TupleV(\u2026)   TupleV(u32)\n             ev RecordV {\u2026} RecordV { field: u32 }\n             ev UnitV       UnitV\n+            ct ASSOC_CONST const ASSOC_CONST: ()\n         \"#]],\n     );\n }\n@@ -444,3 +445,75 @@ fn foo() {\n         expect![[r#\"\"#]],\n     );\n }\n+\n+#[test]\n+fn completes_associated_const() {\n+    check_empty(\n+        r#\"\n+#[derive(PartialEq, Eq)]\n+struct Ty(u8);\n+\n+impl Ty {\n+    const ABC: Self = Self(0);\n+}\n+\n+fn f(t: Ty) {\n+    match t {\n+        Ty::$0 => {}\n+        _ => {}\n+    }\n+}\n+\"#,\n+        expect![[r#\"\n+            ct ABC const ABC: Self\n+        \"#]],\n+    );\n+\n+    check_empty(\n+        r#\"\n+enum MyEnum {}\n+\n+impl MyEnum {\n+    pub const A: i32 = 123;\n+    pub const B: i32 = 456;\n+}\n+\n+fn f(e: MyEnum) {\n+    match e {\n+        MyEnum::$0 => {}\n+        _ => {}\n+    }\n+}\n+\"#,\n+        expect![[r#\"\n+            ct A pub const A: i32\n+            ct B pub const B: i32\n+        \"#]],\n+    );\n+\n+    check_empty(\n+        r#\"\n+#[repr(C)]\n+union U {\n+    i: i32,\n+    f: f32,\n+}\n+\n+impl U {\n+    pub const C: i32 = 123;\n+    pub const D: i32 = 456;\n+}\n+\n+fn f(u: U) {\n+    match u {\n+        U::$0 => {}\n+        _ => {}\n+    }\n+}\n+\"#,\n+        expect![[r#\"\n+            ct C pub const C: i32\n+            ct D pub const D: i32\n+        \"#]],\n+    )\n+}"}]}