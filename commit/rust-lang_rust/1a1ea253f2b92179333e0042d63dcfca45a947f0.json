{"sha": "1a1ea253f2b92179333e0042d63dcfca45a947f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhMWVhMjUzZjJiOTIxNzkzMzNlMDA0MmQ2M2RjZmNhNDVhOTQ3ZjA=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-05-20T16:35:53Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-06-01T17:14:25Z"}, "message": "Added --color flag to compiletest.", "tree": {"sha": "7f915be5655bb469d8fc4d2eefccad1a87cfc404", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f915be5655bb469d8fc4d2eefccad1a87cfc404"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a1ea253f2b92179333e0042d63dcfca45a947f0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJZMEtyAAoJEP72yAUdDgE8Uc4P/RDNrQseXY2nQyaPGGfA0N4n\nL5kkmjfJiwl1Yw4vtfBMhChhvjEdQfjAEQms4HYUgcazRDqxsvqzR0iBAJNFPrbZ\nxU5OxL/bDzOoHJ+58zqMnQGTW9cgn1kvjgaBzU24H2x0Bsg3MxPPayR0I4w3Mo4n\n3hoZfuIdK4l3scSnCr0B84L3Ejp2XD56ITqJTugxtmyXvmZzlixwBVgn41++Dnrl\nCurWfN5Y7O06rHxZYaTD+ZhaHZkISuzkZ/su0tci9cODPtRZbHiHsDAZKKwvCYHq\n4pZuVNTvxOLftDYGPyushkAhQYWEXneM+mWBvmFfwaFqdhtVYKgcdY5PwD+9/Ttf\nk0R4AMhmWOGTrilrqpN4F2St5r/AZTlovPa+xKqpSdEZOvHk7eUwPsW5xOuXJHki\nx1HJuKxlh4pQ4LSaisces0gE/0sRCJzJse49292qZib/D2MNEpc1eGvOYtT2+mn9\nZODpQ6mn+ioolN2Sx8xlwBgRk7+EbbTyrsTxovz1Z1u0vN8PKrJPjwPYPPaQxOSQ\nvUeY1vouUarScuW0uBswCIx2wsqIubi0GZHjb8gwA+z+1yeNVke0GFqlGI5J26hQ\n/6H2Xag7z8cSvtmm30R6zxdP52AKjpHExNXjvuj1fos3QqowymBVkIiL3jxVoMq3\nMQqZi2EXUEgLZe6gPmHl\n=GM3K\n-----END PGP SIGNATURE-----", "payload": "tree 7f915be5655bb469d8fc4d2eefccad1a87cfc404\nparent 57356b36fc42f527406371585bdca1a83da8d2f1\nauthor kennytm <kennytm@gmail.com> 1495298153 +0800\ncommitter kennytm <kennytm@gmail.com> 1496337265 +0800\n\nAdded --color flag to compiletest.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a1ea253f2b92179333e0042d63dcfca45a947f0", "html_url": "https://github.com/rust-lang/rust/commit/1a1ea253f2b92179333e0042d63dcfca45a947f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a1ea253f2b92179333e0042d63dcfca45a947f0/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57356b36fc42f527406371585bdca1a83da8d2f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/57356b36fc42f527406371585bdca1a83da8d2f1", "html_url": "https://github.com/rust-lang/rust/commit/57356b36fc42f527406371585bdca1a83da8d2f1"}], "stats": {"total": 18, "additions": 16, "deletions": 2}, "files": [{"sha": "92f6f36d69d99538cd1c8fd248d99b65a3c6cddd", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1a1ea253f2b92179333e0042d63dcfca45a947f0/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1ea253f2b92179333e0042d63dcfca45a947f0/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=1a1ea253f2b92179333e0042d63dcfca45a947f0", "patch": "@@ -13,6 +13,8 @@ use std::fmt;\n use std::str::FromStr;\n use std::path::PathBuf;\n \n+use test::ColorConfig;\n+\n #[derive(Clone, Copy, PartialEq, Debug)]\n pub enum Mode {\n     CompileFail,\n@@ -185,6 +187,9 @@ pub struct Config {\n     // Print one character per test instead of one line\n     pub quiet: bool,\n \n+    // Whether to use colors in test.\n+    pub color: ColorConfig,\n+\n     // where to find the remote test client process, if we're using it\n     pub remote_test_client: Option<PathBuf>,\n "}, {"sha": "1bb0b765f9f1c8dc6fa4031b11f1242e1d185387", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1a1ea253f2b92179333e0042d63dcfca45a947f0/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1ea253f2b92179333e0042d63dcfca45a947f0/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=1a1ea253f2b92179333e0042d63dcfca45a947f0", "patch": "@@ -37,7 +37,7 @@ use filetime::FileTime;\n use getopts::{optopt, optflag, reqopt};\n use common::Config;\n use common::{Pretty, DebugInfoGdb, DebugInfoLldb, Mode};\n-use test::TestPaths;\n+use test::{TestPaths, ColorConfig};\n use util::logv;\n \n use self::header::EarlyProps;\n@@ -90,6 +90,7 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n           optopt(\"\", \"target-rustcflags\", \"flags to pass to rustc for target\", \"FLAGS\"),\n           optflag(\"\", \"verbose\", \"run tests verbosely, showing all output\"),\n           optflag(\"\", \"quiet\", \"print one character per test instead of one line\"),\n+          optopt(\"\", \"color\", \"coloring: auto, always, never\", \"WHEN\"),\n           optopt(\"\", \"logfile\", \"file to log test execution to\", \"FILE\"),\n           optopt(\"\", \"target\", \"the target to build for\", \"TARGET\"),\n           optopt(\"\", \"host\", \"the host to build for\", \"HOST\"),\n@@ -147,6 +148,13 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n \n     let (gdb, gdb_version, gdb_native_rust) = analyze_gdb(matches.opt_str(\"gdb\"));\n \n+    let color = match matches.opt_str(\"color\").as_ref().map(|x| &**x) {\n+        Some(\"auto\") | None => ColorConfig::AutoColor,\n+        Some(\"always\") => ColorConfig::AlwaysColor,\n+        Some(\"never\") => ColorConfig::NeverColor,\n+        Some(x) => panic!(\"argument for --color must be auto, always, or never, but found `{}`\", x),\n+    };\n+\n     Config {\n         compile_lib_path: make_absolute(opt_path(matches, \"compile-lib-path\")),\n         run_lib_path: make_absolute(opt_path(matches, \"run-lib-path\")),\n@@ -185,6 +193,7 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n         lldb_python_dir: matches.opt_str(\"lldb-python-dir\"),\n         verbose: matches.opt_present(\"verbose\"),\n         quiet: matches.opt_present(\"quiet\"),\n+        color: color,\n         remote_test_client: matches.opt_str(\"remote-test-client\").map(PathBuf::from),\n \n         cc: matches.opt_str(\"cc\").unwrap(),\n@@ -332,7 +341,7 @@ pub fn test_opts(config: &Config) -> test::TestOpts {\n             Ok(val) => &val != \"0\",\n             Err(_) => false\n         },\n-        color: test::AutoColor,\n+        color: config.color,\n         test_threads: None,\n         skip: vec![],\n         list: false,"}]}