{"sha": "bc600c39058a049a58cbf53269f37f15c7ae07c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjNjAwYzM5MDU4YTA0OWE1OGNiZjUzMjY5ZjM3ZjE1YzdhZTA3YzA=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-10-06T07:26:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-06T07:26:04Z"}, "message": "Rollup merge of #77534 - Mark-Simulacrum:issue-70819-disallow-override-forbid-in-same-scope, r=petrochenkov\n\nDisallow overriding forbid in same scope\n\nRebased #73379.\n\nFixes #70819.", "tree": {"sha": "b05d5cb622bd444044ae9f2fc5f683d47c54157a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b05d5cb622bd444044ae9f2fc5f683d47c54157a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc600c39058a049a58cbf53269f37f15c7ae07c0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJffBwMCRBK7hj4Ov3rIwAAdHIIAIB2QKl/LbhQu9ugBl+2msYZ\nE4gGaR+oV22M80+UDAnA1xdfPDO/4n3bn7nat8iIooCs4iBNSm2EyiDgrzO5ciJc\nZ//BB1bZ0UglEd+E44iJljZ0yMY9Zof0asYlKWr0jh4275S7/LwCOTPVYNiTzf4G\nObMcRXuzieg9t+oeNjDH+frPom0FPGMWdLuuNoKmBlmdjwUqMYAsvD2nmklxSUBL\nYeMr5AlMd6McoMOSApN6MWfgO9ciR9wTCT4mKe6VSZGjRVF/MQnMZU947DkRNp13\n5yIoj1iPQ9N3vEQ3bh70/a+2m7V9Y79z+cmzq3eKd4qk2DrSstscildQoRtDOkk=\n=2t4N\n-----END PGP SIGNATURE-----\n", "payload": "tree b05d5cb622bd444044ae9f2fc5f683d47c54157a\nparent eac25fefaf4bcc3027367960c003a3554d713aa6\nparent afa2a675453091773eb9dd1b19389725526224b9\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1601969164 +0900\ncommitter GitHub <noreply@github.com> 1601969164 +0900\n\nRollup merge of #77534 - Mark-Simulacrum:issue-70819-disallow-override-forbid-in-same-scope, r=petrochenkov\n\nDisallow overriding forbid in same scope\n\nRebased #73379.\n\nFixes #70819.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc600c39058a049a58cbf53269f37f15c7ae07c0", "html_url": "https://github.com/rust-lang/rust/commit/bc600c39058a049a58cbf53269f37f15c7ae07c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc600c39058a049a58cbf53269f37f15c7ae07c0/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eac25fefaf4bcc3027367960c003a3554d713aa6", "url": "https://api.github.com/repos/rust-lang/rust/commits/eac25fefaf4bcc3027367960c003a3554d713aa6", "html_url": "https://github.com/rust-lang/rust/commit/eac25fefaf4bcc3027367960c003a3554d713aa6"}, {"sha": "afa2a675453091773eb9dd1b19389725526224b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/afa2a675453091773eb9dd1b19389725526224b9", "html_url": "https://github.com/rust-lang/rust/commit/afa2a675453091773eb9dd1b19389725526224b9"}], "stats": {"total": 174, "additions": 150, "deletions": 24}, "files": [{"sha": "222333a578b7dfae78b1e4c281ff19f2874621cf", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 43, "deletions": 4, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/bc600c39058a049a58cbf53269f37f15c7ae07c0/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc600c39058a049a58cbf53269f37f15c7ae07c0/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=bc600c39058a049a58cbf53269f37f15c7ae07c0", "patch": "@@ -10,6 +10,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_hir::{intravisit, HirId};\n use rustc_middle::hir::map::Map;\n+use rustc_middle::lint::LevelSource;\n use rustc_middle::lint::LintDiagnosticBuilder;\n use rustc_middle::lint::{struct_lint_level, LintLevelMap, LintLevelSets, LintSet, LintSource};\n use rustc_middle::ty::query::Providers;\n@@ -95,6 +96,44 @@ impl<'s> LintLevelsBuilder<'s> {\n         self.sets.list.push(LintSet::CommandLine { specs });\n     }\n \n+    /// Attempts to insert the `id` to `level_src` map entry. If unsuccessful\n+    /// (e.g. if a forbid was already inserted on the same scope), then emits a\n+    /// diagnostic with no change to `specs`.\n+    fn insert_spec(\n+        &mut self,\n+        specs: &mut FxHashMap<LintId, LevelSource>,\n+        id: LintId,\n+        (level, src): LevelSource,\n+    ) {\n+        if let Some((old_level, old_src)) = specs.get(&id) {\n+            if old_level == &Level::Forbid && level != Level::Forbid {\n+                let mut diag_builder = struct_span_err!(\n+                    self.sess,\n+                    src.span(),\n+                    E0453,\n+                    \"{}({}) incompatible with previous forbid in same scope\",\n+                    level.as_str(),\n+                    src.name(),\n+                );\n+                match *old_src {\n+                    LintSource::Default => {}\n+                    LintSource::Node(_, forbid_source_span, reason) => {\n+                        diag_builder.span_label(forbid_source_span, \"`forbid` level set here\");\n+                        if let Some(rationale) = reason {\n+                            diag_builder.note(&rationale.as_str());\n+                        }\n+                    }\n+                    LintSource::CommandLine(_) => {\n+                        diag_builder.note(\"`forbid` lint level was set on command line\");\n+                    }\n+                }\n+                diag_builder.emit();\n+                return;\n+            }\n+        }\n+        specs.insert(id, (level, src));\n+    }\n+\n     /// Pushes a list of AST lint attributes onto this context.\n     ///\n     /// This function will return a `BuilderPush` object which should be passed\n@@ -109,7 +148,7 @@ impl<'s> LintLevelsBuilder<'s> {\n     ///   `#[allow]`\n     ///\n     /// Don't forget to call `pop`!\n-    pub fn push(\n+    pub(crate) fn push(\n         &mut self,\n         attrs: &[ast::Attribute],\n         store: &LintStore,\n@@ -221,7 +260,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                         let src = LintSource::Node(name, li.span(), reason);\n                         for &id in ids {\n                             self.check_gated_lint(id, attr.span);\n-                            specs.insert(id, (level, src));\n+                            self.insert_spec(&mut specs, id, (level, src));\n                         }\n                     }\n \n@@ -235,7 +274,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                                     reason,\n                                 );\n                                 for id in ids {\n-                                    specs.insert(*id, (level, src));\n+                                    self.insert_spec(&mut specs, *id, (level, src));\n                                 }\n                             }\n                             Err((Some(ids), new_lint_name)) => {\n@@ -272,7 +311,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                                     reason,\n                                 );\n                                 for id in ids {\n-                                    specs.insert(*id, (level, src));\n+                                    self.insert_spec(&mut specs, *id, (level, src));\n                                 }\n                             }\n                             Err((None, _)) => {"}, {"sha": "91e1d6e0b0b7286a076dd35af4607ad59ba41c57", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bc600c39058a049a58cbf53269f37f15c7ae07c0/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc600c39058a049a58cbf53269f37f15c7ae07c0/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=bc600c39058a049a58cbf53269f37f15c7ae07c0", "patch": "@@ -9,7 +9,7 @@ use rustc_session::lint::{builtin, Level, Lint, LintId};\n use rustc_session::{DiagnosticMessageId, Session};\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::{DesugaringKind, ExpnKind, MultiSpan};\n-use rustc_span::{Span, Symbol};\n+use rustc_span::{symbol, Span, Symbol, DUMMY_SP};\n \n /// How a lint level was set.\n #[derive(Clone, Copy, PartialEq, Eq, HashStable)]\n@@ -25,6 +25,24 @@ pub enum LintSource {\n     CommandLine(Symbol),\n }\n \n+impl LintSource {\n+    pub fn name(&self) -> Symbol {\n+        match *self {\n+            LintSource::Default => symbol::kw::Default,\n+            LintSource::Node(name, _, _) => name,\n+            LintSource::CommandLine(name) => name,\n+        }\n+    }\n+\n+    pub fn span(&self) -> Span {\n+        match *self {\n+            LintSource::Default => DUMMY_SP,\n+            LintSource::Node(_, span, _) => span,\n+            LintSource::CommandLine(_) => DUMMY_SP,\n+        }\n+    }\n+}\n+\n pub type LevelSource = (Level, LintSource);\n \n pub struct LintLevelSets {"}, {"sha": "8e25227b59e631769aee9020aa6ffc9fb45ba90b", "filename": "src/test/ui/lint/issue-70819-dont-override-forbid-in-same-scope.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/bc600c39058a049a58cbf53269f37f15c7ae07c0/src%2Ftest%2Fui%2Flint%2Fissue-70819-dont-override-forbid-in-same-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc600c39058a049a58cbf53269f37f15c7ae07c0/src%2Ftest%2Fui%2Flint%2Fissue-70819-dont-override-forbid-in-same-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-70819-dont-override-forbid-in-same-scope.rs?ref=bc600c39058a049a58cbf53269f37f15c7ae07c0", "patch": "@@ -0,0 +1,49 @@\n+// This test is checking that you cannot override a `forbid` by adding in other\n+// attributes later in the same scope. (We already ensure that you cannot\n+// override it in nested scopes).\n+\n+// If you turn off deduplicate diagnostics (which rustc turns on by default but\n+// compiletest turns off when it runs ui tests), then the errors are\n+// (unfortunately) repeated here because the checking is done as we read in the\n+// errors, and curretly that happens two or three different times, depending on\n+// compiler flags.\n+//\n+// I decided avoiding the redundant output was not worth the time in engineering\n+// effort for bug like this, which 1. end users are unlikely to run into in the\n+// first place, and 2. they won't see the redundant output anyway.\n+\n+// compile-flags: -Z deduplicate-diagnostics=yes\n+\n+fn forbid_first(num: i32) -> i32 {\n+    #![forbid(unused)]\n+    #![deny(unused)]\n+    //~^ ERROR: deny(unused) incompatible with previous forbid in same scope [E0453]\n+    #![warn(unused)]\n+    //~^ ERROR: warn(unused) incompatible with previous forbid in same scope [E0453]\n+    #![allow(unused)]\n+    //~^ ERROR: allow(unused) incompatible with previous forbid in same scope [E0453]\n+\n+    num * num\n+}\n+\n+fn forbid_last(num: i32) -> i32 {\n+    #![deny(unused)]\n+    #![warn(unused)]\n+    #![allow(unused)]\n+    #![forbid(unused)]\n+\n+    num * num\n+}\n+\n+fn forbid_multiple(num: i32) -> i32 {\n+    #![forbid(unused)]\n+    #![forbid(unused)]\n+\n+    num * num\n+}\n+\n+fn main() {\n+    forbid_first(10);\n+    forbid_last(10);\n+    forbid_multiple(10);\n+}"}, {"sha": "3951c511bf432eff079e221f105568e07752460f", "filename": "src/test/ui/lint/issue-70819-dont-override-forbid-in-same-scope.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/bc600c39058a049a58cbf53269f37f15c7ae07c0/src%2Ftest%2Fui%2Flint%2Fissue-70819-dont-override-forbid-in-same-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc600c39058a049a58cbf53269f37f15c7ae07c0/src%2Ftest%2Fui%2Flint%2Fissue-70819-dont-override-forbid-in-same-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-70819-dont-override-forbid-in-same-scope.stderr?ref=bc600c39058a049a58cbf53269f37f15c7ae07c0", "patch": "@@ -0,0 +1,29 @@\n+error[E0453]: deny(unused) incompatible with previous forbid in same scope\n+  --> $DIR/issue-70819-dont-override-forbid-in-same-scope.rs:19:13\n+   |\n+LL |     #![forbid(unused)]\n+   |               ------ `forbid` level set here\n+LL |     #![deny(unused)]\n+   |             ^^^^^^\n+\n+error[E0453]: warn(unused) incompatible with previous forbid in same scope\n+  --> $DIR/issue-70819-dont-override-forbid-in-same-scope.rs:21:13\n+   |\n+LL |     #![forbid(unused)]\n+   |               ------ `forbid` level set here\n+...\n+LL |     #![warn(unused)]\n+   |             ^^^^^^\n+\n+error[E0453]: allow(unused) incompatible with previous forbid in same scope\n+  --> $DIR/issue-70819-dont-override-forbid-in-same-scope.rs:23:14\n+   |\n+LL |     #![forbid(unused)]\n+   |               ------ `forbid` level set here\n+...\n+LL |     #![allow(unused)]\n+   |              ^^^^^^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0453`."}, {"sha": "a547d09d04822f08e2fb3bb41ea22fe75ed20b2f", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-allowed.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bc600c39058a049a58cbf53269f37f15c7ae07c0/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc600c39058a049a58cbf53269f37f15c7ae07c0/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-allowed.rs?ref=bc600c39058a049a58cbf53269f37f15c7ae07c0", "patch": "@@ -8,25 +8,25 @@ extern \"C\" {\n         #[allow(unused_mut)] a: i32,\n         #[cfg(something)] b: i32,\n         #[cfg_attr(something, cfg(nothing))] c: i32,\n-        #[deny(unused_mut)] d: i32,\n-        #[forbid(unused_mut)] #[warn(unused_mut)] ...\n+        #[forbid(unused_mut)] d: i32,\n+        #[deny(unused_mut)] #[warn(unused_mut)] ...\n     );\n }\n \n type FnType = fn(\n     #[allow(unused_mut)] a: i32,\n     #[cfg(something)] b: i32,\n     #[cfg_attr(something, cfg(nothing))] c: i32,\n-    #[deny(unused_mut)] d: i32,\n-    #[forbid(unused_mut)] #[warn(unused_mut)] e: i32\n+    #[forbid(unused_mut)] d: i32,\n+    #[deny(unused_mut)] #[warn(unused_mut)] e: i32\n );\n \n pub fn foo(\n     #[allow(unused_mut)] a: i32,\n     #[cfg(something)] b: i32,\n     #[cfg_attr(something, cfg(nothing))] c: i32,\n-    #[deny(unused_mut)] d: i32,\n-    #[forbid(unused_mut)] #[warn(unused_mut)] _e: i32\n+    #[forbid(unused_mut)] d: i32,\n+    #[deny(unused_mut)] #[warn(unused_mut)] _e: i32\n ) {}\n \n // self"}, {"sha": "32685038067d6e257f4d9a61f16c2c7bcbe47627", "filename": "src/tools/clippy/tests/ui/attrs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc600c39058a049a58cbf53269f37f15c7ae07c0/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc600c39058a049a58cbf53269f37f15c7ae07c0/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fattrs.rs?ref=bc600c39058a049a58cbf53269f37f15c7ae07c0", "patch": "@@ -3,7 +3,6 @@\n // Test that the whole restriction group is not enabled\n #![warn(clippy::restriction)]\n #![deny(clippy::restriction)]\n-#![forbid(clippy::restriction)]\n #![allow(clippy::missing_docs_in_private_items, clippy::panic, clippy::unreachable)]\n \n #[inline(always)]"}, {"sha": "4324984dd60eb854d431d593729b7b5807938c39", "filename": "src/tools/clippy/tests/ui/attrs.stderr", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bc600c39058a049a58cbf53269f37f15c7ae07c0/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fattrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc600c39058a049a58cbf53269f37f15c7ae07c0/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fattrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fattrs.stderr?ref=bc600c39058a049a58cbf53269f37f15c7ae07c0", "patch": "@@ -1,21 +1,21 @@\n error: you have declared `#[inline(always)]` on `test_attr_lint`. This is usually a bad idea\n-  --> $DIR/attrs.rs:9:1\n+  --> $DIR/attrs.rs:8:1\n    |\n LL | #[inline(always)]\n    | ^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::inline-always` implied by `-D warnings`\n \n error: the since field must contain a semver-compliant version\n-  --> $DIR/attrs.rs:29:14\n+  --> $DIR/attrs.rs:28:14\n    |\n LL | #[deprecated(since = \"forever\")]\n    |              ^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::deprecated-semver` implied by `-D warnings`\n \n error: the since field must contain a semver-compliant version\n-  --> $DIR/attrs.rs:32:14\n+  --> $DIR/attrs.rs:31:14\n    |\n LL | #[deprecated(since = \"1\")]\n    |              ^^^^^^^^^^^\n@@ -37,13 +37,5 @@ LL | #![deny(clippy::restriction)]\n    |\n    = help: try enabling only the lints you really need\n \n-error: restriction lints are not meant to be all enabled\n-  --> $DIR/attrs.rs:6:11\n-   |\n-LL | #![forbid(clippy::restriction)]\n-   |           ^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: try enabling only the lints you really need\n-\n-error: aborting due to 6 previous errors\n+error: aborting due to 5 previous errors\n "}]}