{"sha": "210a1d5ece776320ab4a36c25d0442a197939aa9", "node_id": "C_kwDOAAsO6NoAKDIxMGExZDVlY2U3NzYzMjBhYjRhMzZjMjVkMDQ0MmExOTc5MzlhYTk", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-27T21:40:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-27T21:40:28Z"}, "message": "Merge #10629\n\n10629: Add assist for replacing turbofish with explicit type. r=Veykril a=terrynsun\n\nConverts `::<_>` to an explicit type assignment.\r\n\r\n```\r\nlet args = args.collect::<Vec<String>>();\r\n```\r\n->\r\n```\r\nlet args: Vec<String> = args.collect();\r\n```\r\n\r\nCloses #10285\n\nCo-authored-by: Terry Sun <terrynsun@gmail.com>", "tree": {"sha": "58b1773624ff1ee756a14a0958733db7ed0211d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58b1773624ff1ee756a14a0958733db7ed0211d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/210a1d5ece776320ab4a36c25d0442a197939aa9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhecdMCRBK7hj4Ov3rIwAA7QEIAJOKyPoWvt8rNLbi97rZp9er\nbB7EDlUW/i8CLPIUh18ad4cR5wWKjGCu1RbXudEzhn+ri+dUS4r/0TLdc2M86uk6\nPTGcmhBMo0hHV2/YPd3Fil8mrQh8H2FbMAzEashVaf6YN897ok994BPYPa/QyA0M\n6cqIq2mFtnJog1BkgRN6uMEJaGic/VdWoEcs5iYxuhju8lsIqsbbEDvAHu7hGjqL\ncMDax5VQWH2qggQKFscdsgMc7kkZ0Yb4tZjlybHWRa28yxnAZx/uX8b19Mo+YW/W\nqNr0/fflk/5l5/wWajhsaLA6MdvbVAdNuGhqmNLOOzSF9xXHwENuk7y9EMbHBj4=\n=0M8V\n-----END PGP SIGNATURE-----\n", "payload": "tree 58b1773624ff1ee756a14a0958733db7ed0211d6\nparent 9d1f15086adf2cb0edc8f2d1c9aa7a79241dae68\nparent d800a1bc93e4b2eaeb0b196a9de41f74f8272680\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1635370828 +0000\ncommitter GitHub <noreply@github.com> 1635370828 +0000\n\nMerge #10629\n\n10629: Add assist for replacing turbofish with explicit type. r=Veykril a=terrynsun\n\nConverts `::<_>` to an explicit type assignment.\r\n\r\n```\r\nlet args = args.collect::<Vec<String>>();\r\n```\r\n->\r\n```\r\nlet args: Vec<String> = args.collect();\r\n```\r\n\r\nCloses #10285\n\nCo-authored-by: Terry Sun <terrynsun@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/210a1d5ece776320ab4a36c25d0442a197939aa9", "html_url": "https://github.com/rust-lang/rust/commit/210a1d5ece776320ab4a36c25d0442a197939aa9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/210a1d5ece776320ab4a36c25d0442a197939aa9/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d1f15086adf2cb0edc8f2d1c9aa7a79241dae68", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d1f15086adf2cb0edc8f2d1c9aa7a79241dae68", "html_url": "https://github.com/rust-lang/rust/commit/9d1f15086adf2cb0edc8f2d1c9aa7a79241dae68"}, {"sha": "d800a1bc93e4b2eaeb0b196a9de41f74f8272680", "url": "https://api.github.com/repos/rust-lang/rust/commits/d800a1bc93e4b2eaeb0b196a9de41f74f8272680", "html_url": "https://github.com/rust-lang/rust/commit/d800a1bc93e4b2eaeb0b196a9de41f74f8272680"}], "stats": {"total": 264, "additions": 264, "deletions": 0}, "files": [{"sha": "dc3c860d7ed061815893790c3fdb6a7a70516e42", "filename": "crates/ide_assists/src/handlers/replace_turbofish_with_explicit_type.rs", "status": "added", "additions": 243, "deletions": 0, "changes": 243, "blob_url": "https://github.com/rust-lang/rust/blob/210a1d5ece776320ab4a36c25d0442a197939aa9/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_turbofish_with_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210a1d5ece776320ab4a36c25d0442a197939aa9/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_turbofish_with_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_turbofish_with_explicit_type.rs?ref=210a1d5ece776320ab4a36c25d0442a197939aa9", "patch": "@@ -0,0 +1,243 @@\n+use syntax::{\n+    ast::{Expr, GenericArg},\n+    ast::{LetStmt, Type::InferType},\n+    AstNode, TextRange,\n+};\n+\n+use crate::{\n+    assist_context::{AssistContext, Assists},\n+    AssistId, AssistKind,\n+};\n+\n+// Assist: replace_turbofish_with_explicit_type\n+//\n+// Converts `::<_>` to an explicit type assignment.\n+//\n+// ```\n+// fn make<T>() -> T { ) }\n+// fn main() {\n+//     let a = make$0::<i32>();\n+// }\n+// ```\n+// ->\n+// ```\n+// fn make<T>() -> T { ) }\n+// fn main() {\n+//     let a: i32 = make();\n+// }\n+// ```\n+pub(crate) fn replace_turbofish_with_explicit_type(\n+    acc: &mut Assists,\n+    ctx: &AssistContext,\n+) -> Option<()> {\n+    let let_stmt = ctx.find_node_at_offset::<LetStmt>()?;\n+\n+    let initializer = let_stmt.initializer()?;\n+\n+    let generic_args = match &initializer {\n+        Expr::MethodCallExpr(ce) => ce.generic_arg_list()?,\n+        Expr::CallExpr(ce) => {\n+            if let Expr::PathExpr(pe) = ce.expr()? {\n+                pe.path()?.segment()?.generic_arg_list()?\n+            } else {\n+                cov_mark::hit!(not_applicable_if_non_path_function_call);\n+                return None;\n+            }\n+        }\n+        _ => {\n+            cov_mark::hit!(not_applicable_if_non_function_call_initializer);\n+            return None;\n+        }\n+    };\n+\n+    // Find range of ::<_>\n+    let colon2 = generic_args.coloncolon_token()?;\n+    let r_angle = generic_args.r_angle_token()?;\n+    let turbofish_range = TextRange::new(colon2.text_range().start(), r_angle.text_range().end());\n+\n+    let turbofish_args: Vec<GenericArg> = generic_args.generic_args().into_iter().collect();\n+\n+    // Find type of ::<_>\n+    if turbofish_args.len() != 1 {\n+        cov_mark::hit!(not_applicable_if_not_single_arg);\n+        return None;\n+    }\n+\n+    // An improvement would be to check that this is correctly part of the return value of the\n+    // function call, or sub in the actual return type.\n+    let turbofish_type = &turbofish_args[0];\n+\n+    let initializer_start = initializer.syntax().text_range().start();\n+    if ctx.offset() > turbofish_range.end() || ctx.offset() < initializer_start {\n+        cov_mark::hit!(not_applicable_outside_turbofish);\n+        return None;\n+    }\n+\n+    if let None = let_stmt.colon_token() {\n+        // If there's no colon in a let statement, then there is no explicit type.\n+        // let x = fn::<...>();\n+        let ident_range = let_stmt.pat()?.syntax().text_range();\n+\n+        return acc.add(\n+            AssistId(\"replace_turbofish_with_explicit_type\", AssistKind::RefactorRewrite),\n+            \"Replace turbofish with explicit type\",\n+            TextRange::new(initializer_start, turbofish_range.end()),\n+            |builder| {\n+                builder.insert(ident_range.end(), format!(\": {}\", turbofish_type));\n+                builder.delete(turbofish_range);\n+            },\n+        );\n+    } else if let Some(InferType(t)) = let_stmt.ty() {\n+        // If there's a type inferrence underscore, we can offer to replace it with the type in\n+        // the turbofish.\n+        // let x: _ = fn::<...>();\n+        let underscore_range = t.syntax().text_range();\n+\n+        return acc.add(\n+            AssistId(\"replace_turbofish_with_explicit_type\", AssistKind::RefactorRewrite),\n+            \"Replace `_` with turbofish type\",\n+            turbofish_range,\n+            |builder| {\n+                builder.replace(underscore_range, turbofish_type.to_string());\n+                builder.delete(turbofish_range);\n+            },\n+        );\n+    }\n+\n+    None\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n+\n+    #[test]\n+    fn replaces_turbofish_for_vec_string() {\n+        check_assist(\n+            replace_turbofish_with_explicit_type,\n+            r#\"\n+fn make<T>() -> T {}\n+fn main() {\n+    let a = make$0::<Vec<String>>();\n+}\n+\"#,\n+            r#\"\n+fn make<T>() -> T {}\n+fn main() {\n+    let a: Vec<String> = make();\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn replaces_method_calls() {\n+        // foo.make() is a method call which uses a different expr in the let initializer\n+        check_assist(\n+            replace_turbofish_with_explicit_type,\n+            r#\"\n+fn make<T>() -> T {}\n+fn main() {\n+    let a = foo.make$0::<Vec<String>>();\n+}\n+\"#,\n+            r#\"\n+fn make<T>() -> T {}\n+fn main() {\n+    let a: Vec<String> = foo.make();\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn replace_turbofish_target() {\n+        check_assist_target(\n+            replace_turbofish_with_explicit_type,\n+            r#\"\n+fn make<T>() -> T {}\n+fn main() {\n+    let a = $0make::<Vec<String>>();\n+}\n+\"#,\n+            r#\"make::<Vec<String>>\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn not_applicable_outside_turbofish() {\n+        cov_mark::check!(not_applicable_outside_turbofish);\n+        check_assist_not_applicable(\n+            replace_turbofish_with_explicit_type,\n+            r#\"\n+fn make<T>() -> T {}\n+fn main() {\n+    let $0a = make::<Vec<String>>();\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn replace_inferred_type_placeholder() {\n+        check_assist(\n+            replace_turbofish_with_explicit_type,\n+            r#\"\n+fn make<T>() -> T {}\n+fn main() {\n+    let a: _ = make$0::<Vec<String>>();\n+}\n+\"#,\n+            r#\"\n+fn make<T>() -> T {}\n+fn main() {\n+    let a: Vec<String> = make();\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn not_applicable_constant_initializer() {\n+        cov_mark::check!(not_applicable_if_non_function_call_initializer);\n+        check_assist_not_applicable(\n+            replace_turbofish_with_explicit_type,\n+            r#\"\n+fn make<T>() -> T {}\n+fn main() {\n+    let a = \"foo\"$0;\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn not_applicable_non_path_function_call() {\n+        cov_mark::check!(not_applicable_if_non_path_function_call);\n+        check_assist_not_applicable(\n+            replace_turbofish_with_explicit_type,\n+            r#\"\n+fn make<T>() -> T {}\n+fn main() {\n+    $0let a = (|| {})();\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn non_applicable_multiple_generic_args() {\n+        cov_mark::check!(not_applicable_if_not_single_arg);\n+        check_assist_not_applicable(\n+            replace_turbofish_with_explicit_type,\n+            r#\"\n+fn make<T>() -> T {}\n+fn main() {\n+    let a = make$0::<Vec<String>, i32>();\n+}\n+\"#,\n+        );\n+    }\n+}"}, {"sha": "5d4c1532dbe2d05f1c5fb2f80e799834c1e9cf0e", "filename": "crates/ide_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/210a1d5ece776320ab4a36c25d0442a197939aa9/crates%2Fide_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210a1d5ece776320ab4a36c25d0442a197939aa9/crates%2Fide_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Flib.rs?ref=210a1d5ece776320ab4a36c25d0442a197939aa9", "patch": "@@ -175,6 +175,7 @@ mod handlers {\n     mod replace_let_with_if_let;\n     mod replace_qualified_name_with_use;\n     mod replace_string_with_char;\n+    mod replace_turbofish_with_explicit_type;\n     mod split_import;\n     mod sort_items;\n     mod toggle_ignore;\n@@ -257,6 +258,7 @@ mod handlers {\n             replace_if_let_with_match::replace_if_let_with_match,\n             replace_if_let_with_match::replace_match_with_if_let,\n             replace_let_with_if_let::replace_let_with_if_let,\n+            replace_turbofish_with_explicit_type::replace_turbofish_with_explicit_type,\n             replace_qualified_name_with_use::replace_qualified_name_with_use,\n             sort_items::sort_items,\n             split_import::split_import,"}, {"sha": "e30f98bcd1369b9f890a00fe04fa58936d1e4657", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/210a1d5ece776320ab4a36c25d0442a197939aa9/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210a1d5ece776320ab4a36c25d0442a197939aa9/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=210a1d5ece776320ab4a36c25d0442a197939aa9", "patch": "@@ -1876,6 +1876,25 @@ fn handle() {\n     )\n }\n \n+#[test]\n+fn doctest_replace_turbofish_with_explicit_type() {\n+    check_doc_test(\n+        \"replace_turbofish_with_explicit_type\",\n+        r#####\"\n+fn make<T>() -> T { ) }\n+fn main() {\n+    let a = make$0::<i32>();\n+}\n+\"#####,\n+        r#####\"\n+fn make<T>() -> T { ) }\n+fn main() {\n+    let a: i32 = make();\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_sort_items() {\n     check_doc_test("}]}