{"sha": "5f5ae17f4efbd54c0d53451101044422e9b728ad", "node_id": "C_kwDOAAsO6NoAKDVmNWFlMTdmNGVmYmQ1NGMwZDUzNDUxMTAxMDQ0NDIyZTliNzI4YWQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-12T18:21:10Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-14T17:50:20Z"}, "message": "Consider discriminant fields that are ordered before variant fields", "tree": {"sha": "a7a4eb2761bbb71e1334a213c7679733349578fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7a4eb2761bbb71e1334a213c7679733349578fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f5ae17f4efbd54c0d53451101044422e9b728ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f5ae17f4efbd54c0d53451101044422e9b728ad", "html_url": "https://github.com/rust-lang/rust/commit/5f5ae17f4efbd54c0d53451101044422e9b728ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f5ae17f4efbd54c0d53451101044422e9b728ad/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed620cf9690fdafed65845bf35c455db992fbba1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed620cf9690fdafed65845bf35c455db992fbba1", "html_url": "https://github.com/rust-lang/rust/commit/ed620cf9690fdafed65845bf35c455db992fbba1"}], "stats": {"total": 66, "additions": 59, "deletions": 7}, "files": [{"sha": "c15aba681da0592121735037b2963f12863d591e", "filename": "compiler/rustc_ty_utils/src/layout.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5f5ae17f4efbd54c0d53451101044422e9b728ad/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f5ae17f4efbd54c0d53451101044422e9b728ad/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs?ref=5f5ae17f4efbd54c0d53451101044422e9b728ad", "patch": "@@ -919,7 +919,7 @@ fn variant_info_for_generator<'tcx>(\n     def_id: DefId,\n     substs: ty::SubstsRef<'tcx>,\n ) -> (Vec<VariantInfo>, Option<Size>) {\n-    let Variants::Multiple { tag, ref tag_encoding, .. } = layout.variants else {\n+    let Variants::Multiple { tag, ref tag_encoding, tag_field, .. } = layout.variants else {\n         return (vec![], None);\n     };\n \n@@ -975,12 +975,28 @@ fn variant_info_for_generator<'tcx>(\n             if variant_size == Size::ZERO {\n                 variant_size = upvars_size;\n             }\n-            // We need to add the discriminant size back into min_size, since it is subtracted\n-            // later during printing.\n-            variant_size += match tag_encoding {\n-                TagEncoding::Direct => tag.size(cx),\n-                _ => Size::ZERO,\n-            };\n+\n+            // This `if` deserves some explanation.\n+            //\n+            // The layout code has a choice of where to place the discriminant of this generator.\n+            // If the discriminant of the generator is placed early in the layout (before the\n+            // variant's own fields), then it'll implicitly be counted towards the size of the\n+            // variant, since we use the maximum offset to calculate size.\n+            //    (side-note: I know this is a bit problematic given upvars placement, etc).\n+            //\n+            // This is important, since the layout printing code always subtracts this discriminant\n+            // size from the variant size if the struct is \"enum\"-like, so failing to account for it\n+            // will either lead to numerical underflow, or an underreported variant size...\n+            //\n+            // However, if the discriminant is placed past the end of the variant, then we need\n+            // to factor in the size of the discriminant manually. This really should be refactored\n+            // better, but this \"works\" for now.\n+            if layout.fields.offset(tag_field) >= variant_size {\n+                variant_size += match tag_encoding {\n+                    TagEncoding::Direct => tag.size(cx),\n+                    _ => Size::ZERO,\n+                };\n+            }\n \n             VariantInfo {\n                 name: Some(Symbol::intern(&ty::GeneratorSubsts::variant_name(variant_idx))),"}, {"sha": "ddb5db56f9cb9f0e2c143a4d7e2ff3fa7e883b90", "filename": "src/test/ui/print_type_sizes/generator_discr_placement.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5f5ae17f4efbd54c0d53451101044422e9b728ad/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f5ae17f4efbd54c0d53451101044422e9b728ad/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.rs?ref=5f5ae17f4efbd54c0d53451101044422e9b728ad", "patch": "@@ -0,0 +1,25 @@\n+// compile-flags: -Z print-type-sizes\n+// build-pass\n+// ignore-pass\n+\n+// Tests a generator that has its discriminant as the *final* field.\n+\n+// Avoid emitting panic handlers, like the rest of these tests...\n+#![feature(start, generators)]\n+\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n+    let a = || {\n+        {\n+            let w: i32 = 4;\n+            yield;\n+            drop(w);\n+        }\n+        {\n+            let z: i32 = 7;\n+            yield;\n+            drop(z);\n+        }\n+    };\n+    0\n+}"}, {"sha": "7dfc8f0bd44f2ba7b8a3729b3b3199a47abce5a3", "filename": "src/test/ui/print_type_sizes/generator_discr_placement.stdout", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5f5ae17f4efbd54c0d53451101044422e9b728ad/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/5f5ae17f4efbd54c0d53451101044422e9b728ad/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.stdout?ref=5f5ae17f4efbd54c0d53451101044422e9b728ad", "patch": "@@ -0,0 +1,11 @@\n+print-type-size type: `[generator@$DIR/generator_discr_placement.rs:12:13: 12:15]`: 8 bytes, alignment: 4 bytes\n+print-type-size     discriminant: 1 bytes\n+print-type-size     variant `Suspend0`: 7 bytes\n+print-type-size         padding: 3 bytes\n+print-type-size         field `.w`: 4 bytes, alignment: 4 bytes\n+print-type-size     variant `Suspend1`: 7 bytes\n+print-type-size         padding: 3 bytes\n+print-type-size         field `.z`: 4 bytes, alignment: 4 bytes\n+print-type-size     variant `Unresumed`: 0 bytes\n+print-type-size     variant `Returned`: 0 bytes\n+print-type-size     variant `Panicked`: 0 bytes"}]}