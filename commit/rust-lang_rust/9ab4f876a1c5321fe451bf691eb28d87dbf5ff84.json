{"sha": "9ab4f876a1c5321fe451bf691eb28d87dbf5ff84", "node_id": "C_kwDOAAsO6NoAKDlhYjRmODc2YTFjNTMyMWZlNDUxYmY2OTFlYjI4ZDg3ZGJmNWZmODQ", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-04T19:29:51Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-04T19:59:24Z"}, "message": "const_prop_lint: ensure we have up-to-date cur_span()", "tree": {"sha": "c93f6c07ee3c2e8ec13d2c5ca6704cf423ce99e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c93f6c07ee3c2e8ec13d2c5ca6704cf423ce99e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ab4f876a1c5321fe451bf691eb28d87dbf5ff84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ab4f876a1c5321fe451bf691eb28d87dbf5ff84", "html_url": "https://github.com/rust-lang/rust/commit/9ab4f876a1c5321fe451bf691eb28d87dbf5ff84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ab4f876a1c5321fe451bf691eb28d87dbf5ff84/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7892e1cedb0b1fe8d924516425481654b89ba834", "url": "https://api.github.com/repos/rust-lang/rust/commits/7892e1cedb0b1fe8d924516425481654b89ba834", "html_url": "https://github.com/rust-lang/rust/commit/7892e1cedb0b1fe8d924516425481654b89ba834"}], "stats": {"total": 34, "additions": 23, "deletions": 11}, "files": [{"sha": "a82ddfb5ac50ed1db9ced35312fa226b02a91079", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ab4f876a1c5321fe451bf691eb28d87dbf5ff84/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ab4f876a1c5321fe451bf691eb28d87dbf5ff84/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=9ab4f876a1c5321fe451bf691eb28d87dbf5ff84", "patch": "@@ -126,7 +126,9 @@ pub struct Frame<'mir, 'tcx, Tag: Provenance = AllocId, Extra = ()> {\n     /// this frame (can happen e.g. during frame initialization, and during unwinding on\n     /// frames without cleanup code).\n     /// We basically abuse `Result` as `Either`.\n-    pub(super) loc: Result<mir::Location, Span>,\n+    ///\n+    /// Needs to be public because ConstProp does unspeakable things to it.\n+    pub loc: Result<mir::Location, Span>,\n }\n \n /// What we store about a frame in an interpreter backtrace.\n@@ -320,6 +322,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> LayoutOfHelpers<'tcx> for InterpC\n \n     #[inline]\n     fn layout_tcx_at_span(&self) -> Span {\n+        // Using the cheap root span for performance.\n         self.tcx.span\n     }\n "}, {"sha": "84fdb136bd41cf404b201d825766ed375ebcaba6", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9ab4f876a1c5321fe451bf691eb28d87dbf5ff84/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ab4f876a1c5321fe451bf691eb28d87dbf5ff84/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=9ab4f876a1c5321fe451bf691eb28d87dbf5ff84", "patch": "@@ -437,10 +437,12 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         source_info.scope.lint_root(self.source_scopes)\n     }\n \n-    fn use_ecx<F, T>(&mut self, f: F) -> Option<T>\n+    fn use_ecx<F, T>(&mut self, source_info: SourceInfo, f: F) -> Option<T>\n     where\n         F: FnOnce(&mut Self) -> InterpResult<'tcx, T>,\n     {\n+        // Overwrite the PC -- whatever the interpreter does to it does not make any sense anyway.\n+        self.ecx.frame_mut().loc = Err(source_info.span);\n         match f(self) {\n             Ok(val) => Some(val),\n             Err(error) => {\n@@ -501,17 +503,17 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     }\n \n     /// Returns the value, if any, of evaluating `place`.\n-    fn eval_place(&mut self, place: Place<'tcx>) -> Option<OpTy<'tcx>> {\n+    fn eval_place(&mut self, place: Place<'tcx>, source_info: SourceInfo) -> Option<OpTy<'tcx>> {\n         trace!(\"eval_place(place={:?})\", place);\n-        self.use_ecx(|this| this.ecx.eval_place_to_op(place, None))\n+        self.use_ecx(source_info, |this| this.ecx.eval_place_to_op(place, None))\n     }\n \n     /// Returns the value, if any, of evaluating `op`. Calls upon `eval_constant`\n     /// or `eval_place`, depending on the variant of `Operand` used.\n     fn eval_operand(&mut self, op: &Operand<'tcx>, source_info: SourceInfo) -> Option<OpTy<'tcx>> {\n         match *op {\n             Operand::Constant(ref c) => self.eval_constant(c, source_info),\n-            Operand::Move(place) | Operand::Copy(place) => self.eval_place(place),\n+            Operand::Move(place) | Operand::Copy(place) => self.eval_place(place, source_info),\n         }\n     }\n \n@@ -537,7 +539,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         arg: &Operand<'tcx>,\n         source_info: SourceInfo,\n     ) -> Option<()> {\n-        if let (val, true) = self.use_ecx(|this| {\n+        if let (val, true) = self.use_ecx(source_info, |this| {\n             let val = this.ecx.read_immediate(&this.ecx.eval_operand(arg, None)?)?;\n             let (_res, overflow, _ty) = this.ecx.overflowing_unary_op(op, &val)?;\n             Ok((val, overflow))\n@@ -564,8 +566,12 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         right: &Operand<'tcx>,\n         source_info: SourceInfo,\n     ) -> Option<()> {\n-        let r = self.use_ecx(|this| this.ecx.read_immediate(&this.ecx.eval_operand(right, None)?));\n-        let l = self.use_ecx(|this| this.ecx.read_immediate(&this.ecx.eval_operand(left, None)?));\n+        let r = self.use_ecx(source_info, |this| {\n+            this.ecx.read_immediate(&this.ecx.eval_operand(right, None)?)\n+        });\n+        let l = self.use_ecx(source_info, |this| {\n+            this.ecx.read_immediate(&this.ecx.eval_operand(left, None)?)\n+        });\n         // Check for exceeding shifts *even if* we cannot evaluate the LHS.\n         if op == BinOp::Shr || op == BinOp::Shl {\n             let r = r?;\n@@ -602,7 +608,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n \n         if let (Some(l), Some(r)) = (&l, &r) {\n             // The remaining operators are handled through `overflowing_binary_op`.\n-            if self.use_ecx(|this| {\n+            if self.use_ecx(source_info, |this| {\n                 let (_res, overflow, _ty) = this.ecx.overflowing_binary_op(op, l, r)?;\n                 Ok(overflow)\n             })? {\n@@ -690,7 +696,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             return None;\n         }\n \n-        self.use_ecx(|this| this.ecx.eval_rvalue_into_place(rvalue, place))\n+        self.use_ecx(source_info, |this| this.ecx.eval_rvalue_into_place(rvalue, place))\n     }\n }\n \n@@ -890,7 +896,10 @@ impl<'tcx> Visitor<'tcx> for ConstPropagator<'_, 'tcx> {\n                 StatementKind::SetDiscriminant { ref place, .. } => {\n                     match self.ecx.machine.can_const_prop[place.local] {\n                         ConstPropMode::FullConstProp | ConstPropMode::OnlyInsideOwnBlock => {\n-                            if self.use_ecx(|this| this.ecx.statement(statement)).is_some() {\n+                            if self\n+                                .use_ecx(source_info, |this| this.ecx.statement(statement))\n+                                .is_some()\n+                            {\n                                 trace!(\"propped discriminant into {:?}\", place);\n                             } else {\n                                 Self::remove_const(&mut self.ecx, place.local);"}]}