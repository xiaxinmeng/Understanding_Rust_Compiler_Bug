{"sha": "13fd5e93deb41045c4de88c257d2b02ada2b1730", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzZmQ1ZTkzZGViNDEwNDVjNGRlODhjMjU3ZDJiMDJhZGEyYjE3MzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-15T22:15:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-15T22:15:53Z"}, "message": "Auto merge of #41320 - Mark-Simulacrum:cleanup-methodmatch, r=arielb1\n\nRemove MethodMatchResult and MethodMatchedData.\n\nThese two enums were unused.\n\nFixes #41318.\n\nr? @nikomatsakis", "tree": {"sha": "addefe47e2920935f8dbecdb8ffcd567f78b1f32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/addefe47e2920935f8dbecdb8ffcd567f78b1f32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13fd5e93deb41045c4de88c257d2b02ada2b1730", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13fd5e93deb41045c4de88c257d2b02ada2b1730", "html_url": "https://github.com/rust-lang/rust/commit/13fd5e93deb41045c4de88c257d2b02ada2b1730", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13fd5e93deb41045c4de88c257d2b02ada2b1730/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5cf1cb64cd1948a8c289e29838716f03d49d5aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5cf1cb64cd1948a8c289e29838716f03d49d5aa", "html_url": "https://github.com/rust-lang/rust/commit/d5cf1cb64cd1948a8c289e29838716f03d49d5aa"}, {"sha": "f8f5282e5c45db26ae4b4bed11b342dcb399b037", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8f5282e5c45db26ae4b4bed11b342dcb399b037", "html_url": "https://github.com/rust-lang/rust/commit/f8f5282e5c45db26ae4b4bed11b342dcb399b037"}], "stats": {"total": 31, "additions": 0, "deletions": 31}, "files": [{"sha": "0ff379b30ffd0c3ff8474a159b17d56ccba7d0df", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13fd5e93deb41045c4de88c257d2b02ada2b1730/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13fd5e93deb41045c4de88c257d2b02ada2b1730/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=13fd5e93deb41045c4de88c257d2b02ada2b1730", "patch": "@@ -38,8 +38,6 @@ pub use self::project::{ProjectionCache, ProjectionCacheSnapshot, Reveal};\n pub use self::object_safety::ObjectSafetyViolation;\n pub use self::object_safety::MethodViolationCode;\n pub use self::select::{EvaluationCache, SelectionContext, SelectionCache};\n-pub use self::select::{MethodMatchResult, MethodMatched, MethodAmbiguous, MethodDidNotMatch};\n-pub use self::select::{MethodMatchedData}; // intentionally don't export variants\n pub use self::specialize::{OverlapError, specialization_graph, specializes, translate_substs};\n pub use self::specialize::{SpecializesCache, find_associated_item};\n pub use self::util::elaborate_predicates;"}, {"sha": "70ddcff5181bedf04dd3b07daed92d9b25ef87a8", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/13fd5e93deb41045c4de88c257d2b02ada2b1730/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13fd5e93deb41045c4de88c257d2b02ada2b1730/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=13fd5e93deb41045c4de88c257d2b02ada2b1730", "patch": "@@ -10,8 +10,6 @@\n \n //! See `README.md` for high-level documentation\n \n-pub use self::MethodMatchResult::*;\n-pub use self::MethodMatchedData::*;\n use self::SelectionCandidate::*;\n use self::EvaluationResult::*;\n \n@@ -110,23 +108,6 @@ pub struct SelectionCache<'tcx> {\n                                SelectionResult<'tcx, SelectionCandidate<'tcx>>>>,\n }\n \n-pub enum MethodMatchResult {\n-    MethodMatched(MethodMatchedData),\n-    MethodAmbiguous(/* list of impls that could apply */ Vec<DefId>),\n-    MethodDidNotMatch,\n-}\n-\n-#[derive(Copy, Clone, Debug)]\n-pub enum MethodMatchedData {\n-    // In the case of a precise match, we don't really need to store\n-    // how the match was found. So don't.\n-    PreciseMethodMatch,\n-\n-    // In the case of a coercion, we need to know the precise impl so\n-    // that we can determine the type to which things were coerced.\n-    CoerciveMethodMatch(/* impl we matched */ DefId)\n-}\n-\n /// The selection process begins by considering all impls, where\n /// clauses, and so forth that might resolve an obligation.  Sometimes\n /// we'll be able to say definitively that (e.g.) an impl does not\n@@ -2982,13 +2963,3 @@ impl EvaluationResult {\n         }\n     }\n }\n-\n-impl MethodMatchResult {\n-    pub fn may_apply(&self) -> bool {\n-        match *self {\n-            MethodMatched(_) => true,\n-            MethodAmbiguous(_) => true,\n-            MethodDidNotMatch => false,\n-        }\n-    }\n-}"}]}