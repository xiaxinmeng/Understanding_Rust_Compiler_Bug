{"sha": "f3ec0698865d70571f5308f912c63dbc5ad2a9ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzZWMwNjk4ODY1ZDcwNTcxZjUzMDhmOTEyYzYzZGJjNWFkMmE5ZWQ=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-03-18T18:27:59Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-03-19T09:16:08Z"}, "message": "rustc: use LocalDefId instead of DefIndex in HirId.", "tree": {"sha": "69ab0e8111c473b0c6ebce8b9159cbef187361de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69ab0e8111c473b0c6ebce8b9159cbef187361de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3ec0698865d70571f5308f912c63dbc5ad2a9ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3ec0698865d70571f5308f912c63dbc5ad2a9ed", "html_url": "https://github.com/rust-lang/rust/commit/f3ec0698865d70571f5308f912c63dbc5ad2a9ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6130b9959c418f48ccc12beab71a5c0e84659b4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6130b9959c418f48ccc12beab71a5c0e84659b4b", "html_url": "https://github.com/rust-lang/rust/commit/6130b9959c418f48ccc12beab71a5c0e84659b4b"}], "stats": {"total": 341, "additions": 139, "deletions": 202}, "files": [{"sha": "b32fa2cda80129e2d59a2646e63af51eaea1476f", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=f3ec0698865d70571f5308f912c63dbc5ad2a9ed", "patch": "@@ -477,7 +477,7 @@ impl<'tcx> DepNodeParams<'tcx> for HirId {\n     fn to_fingerprint(&self, tcx: TyCtxt<'_>) -> Fingerprint {\n         let HirId { owner, local_id } = *self;\n \n-        let def_path_hash = tcx.def_path_hash(DefId::local(owner));\n+        let def_path_hash = tcx.def_path_hash(owner.to_def_id());\n         let local_id = Fingerprint::from_smaller_hash(local_id.as_u32().into());\n \n         def_path_hash.0.combine(local_id)"}, {"sha": "f60d20b8cb75d0972ba4e06657d77978867758f0", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=f3ec0698865d70571f5308f912c63dbc5ad2a9ed", "patch": "@@ -902,7 +902,7 @@ impl DepGraph {\n \n fn def_id_corresponds_to_hir_dep_node(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n-    def_id.index == hir_id.owner\n+    def_id.index == hir_id.owner.local_def_index\n }\n \n /// A \"work product\" is an intermediate result that we save into the"}, {"sha": "286de7703abb144f529d1b864fb118b307c2a02e", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=f3ec0698865d70571f5308f912c63dbc5ad2a9ed", "patch": "@@ -10,7 +10,7 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::svh::Svh;\n use rustc_hir as hir;\n use rustc_hir::def_id::CRATE_DEF_INDEX;\n-use rustc_hir::def_id::{DefIndex, LOCAL_CRATE};\n+use rustc_hir::def_id::{LocalDefId, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::*;\n use rustc_index::vec::{Idx, IndexVec};\n@@ -30,12 +30,12 @@ pub(super) struct NodeCollector<'a, 'hir> {\n     /// Source map\n     source_map: &'a SourceMap,\n \n-    map: IndexVec<DefIndex, HirOwnerData<'hir>>,\n+    map: IndexVec<LocalDefId, HirOwnerData<'hir>>,\n \n     /// The parent of this node\n     parent_node: hir::HirId,\n \n-    current_dep_node_owner: DefIndex,\n+    current_dep_node_owner: LocalDefId,\n \n     definitions: &'a definitions::Definitions,\n \n@@ -126,7 +126,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n             krate,\n             source_map: sess.source_map(),\n             parent_node: hir::CRATE_HIR_ID,\n-            current_dep_node_owner: CRATE_DEF_INDEX,\n+            current_dep_node_owner: LocalDefId { local_def_index: CRATE_DEF_INDEX },\n             definitions,\n             hcx,\n             hir_body_nodes,\n@@ -148,7 +148,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n         crate_disambiguator: CrateDisambiguator,\n         cstore: &dyn CrateStore,\n         commandline_args_hash: u64,\n-    ) -> (IndexVec<DefIndex, HirOwnerData<'hir>>, Svh) {\n+    ) -> (IndexVec<LocalDefId, HirOwnerData<'hir>>, Svh) {\n         // Insert bodies into the map\n         for (id, body) in self.krate.bodies.iter() {\n             let bodies = &mut self.map[id.hir_id.owner].with_bodies.as_mut().unwrap().bodies;\n@@ -261,9 +261,11 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n                      current_dep_node_owner={} ({:?}), hir_id.owner={} ({:?}){}\",\n                     self.source_map.span_to_string(span),\n                     node_str,\n-                    self.definitions.def_path(self.current_dep_node_owner).to_string_no_crate(),\n+                    self.definitions\n+                        .def_path(self.current_dep_node_owner.local_def_index)\n+                        .to_string_no_crate(),\n                     self.current_dep_node_owner,\n-                    self.definitions.def_path(hir_id.owner).to_string_no_crate(),\n+                    self.definitions.def_path(hir_id.owner.local_def_index).to_string_no_crate(),\n                     hir_id.owner,\n                     forgot_str,\n                 )\n@@ -285,13 +287,13 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n         F: FnOnce(&mut Self, Fingerprint),\n     >(\n         &mut self,\n-        dep_node_owner: DefIndex,\n+        dep_node_owner: LocalDefId,\n         item_like: &T,\n         f: F,\n     ) {\n         let prev_owner = self.current_dep_node_owner;\n \n-        let def_path_hash = self.definitions.def_path_hash(dep_node_owner);\n+        let def_path_hash = self.definitions.def_path_hash(dep_node_owner.local_def_index);\n \n         let hash = hash_body(&mut self.hcx, def_path_hash, item_like, &mut self.hir_body_nodes);\n \n@@ -340,7 +342,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n     fn visit_item(&mut self, i: &'hir Item<'hir>) {\n         debug!(\"visit_item: {:?}\", i);\n         debug_assert_eq!(\n-            i.hir_id.owner,\n+            i.hir_id.owner.local_def_index,\n             self.definitions.opt_def_index(self.definitions.hir_to_node_id(i.hir_id)).unwrap()\n         );\n         self.with_dep_node_owner(i.hir_id.owner, i, |this, hash| {\n@@ -372,7 +374,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n \n     fn visit_trait_item(&mut self, ti: &'hir TraitItem<'hir>) {\n         debug_assert_eq!(\n-            ti.hir_id.owner,\n+            ti.hir_id.owner.local_def_index,\n             self.definitions.opt_def_index(self.definitions.hir_to_node_id(ti.hir_id)).unwrap()\n         );\n         self.with_dep_node_owner(ti.hir_id.owner, ti, |this, hash| {\n@@ -386,7 +388,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n \n     fn visit_impl_item(&mut self, ii: &'hir ImplItem<'hir>) {\n         debug_assert_eq!(\n-            ii.hir_id.owner,\n+            ii.hir_id.owner.local_def_index,\n             self.definitions.opt_def_index(self.definitions.hir_to_node_id(ii.hir_id)).unwrap()\n         );\n         self.with_dep_node_owner(ii.hir_id.owner, ii, |this, hash| {\n@@ -506,10 +508,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n     }\n \n     fn visit_macro_def(&mut self, macro_def: &'hir MacroDef<'hir>) {\n-        let node_id = self.definitions.hir_to_node_id(macro_def.hir_id);\n-        let def_index = self.definitions.opt_def_index(node_id).unwrap();\n-\n-        self.with_dep_node_owner(def_index, macro_def, |this, hash| {\n+        self.with_dep_node_owner(macro_def.hir_id.owner, macro_def, |this, hash| {\n             this.insert_with_hash(\n                 macro_def.span,\n                 macro_def.hir_id,"}, {"sha": "e3386a2a910ed31596b5bb6cd4b3d2702ea46d2a", "filename": "src/librustc/hir/map/hir_id_validator.rs", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs?ref=f3ec0698865d70571f5308f912c63dbc5ad2a9ed", "patch": "@@ -3,7 +3,7 @@ use crate::ty::TyCtxt;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::{par_iter, Lock, ParallelIterator};\n use rustc_hir as hir;\n-use rustc_hir::def_id::{DefIndex, LocalDefId, CRATE_DEF_INDEX};\n+use rustc_hir::def_id::{LocalDefId, CRATE_DEF_INDEX};\n use rustc_hir::intravisit;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::{HirId, ItemLocalId};\n@@ -32,7 +32,7 @@ pub fn check_crate(tcx: TyCtxt<'_>) {\n \n struct HirIdValidator<'a, 'hir> {\n     hir_map: Map<'hir>,\n-    owner_def_index: Option<DefIndex>,\n+    owner: Option<LocalDefId>,\n     hir_ids_seen: FxHashSet<ItemLocalId>,\n     errors: &'a Lock<Vec<String>>,\n }\n@@ -46,7 +46,7 @@ impl<'a, 'hir> OuterVisitor<'a, 'hir> {\n     fn new_inner_visitor(&self, hir_map: Map<'hir>) -> HirIdValidator<'a, 'hir> {\n         HirIdValidator {\n             hir_map,\n-            owner_def_index: None,\n+            owner: None,\n             hir_ids_seen: Default::default(),\n             errors: self.errors,\n         }\n@@ -78,12 +78,12 @@ impl<'a, 'hir> HirIdValidator<'a, 'hir> {\n     }\n \n     fn check<F: FnOnce(&mut HirIdValidator<'a, 'hir>)>(&mut self, hir_id: HirId, walk: F) {\n-        assert!(self.owner_def_index.is_none());\n-        let owner_def_index = self.hir_map.local_def_id(hir_id).index;\n-        self.owner_def_index = Some(owner_def_index);\n+        assert!(self.owner.is_none());\n+        let owner = self.hir_map.local_def_id(hir_id).expect_local();\n+        self.owner = Some(owner);\n         walk(self);\n \n-        if owner_def_index == CRATE_DEF_INDEX {\n+        if owner.local_def_index == CRATE_DEF_INDEX {\n             return;\n         }\n \n@@ -105,31 +105,26 @@ impl<'a, 'hir> HirIdValidator<'a, 'hir> {\n             let mut missing_items = Vec::with_capacity(missing.len());\n \n             for local_id in missing {\n-                let hir_id =\n-                    HirId { owner: owner_def_index, local_id: ItemLocalId::from_u32(local_id) };\n+                let hir_id = HirId { owner, local_id: ItemLocalId::from_u32(local_id) };\n \n                 trace!(\"missing hir id {:#?}\", hir_id);\n \n                 missing_items.push(format!(\n                     \"[local_id: {}, owner: {}]\",\n                     local_id,\n-                    self.hir_map\n-                        .def_path(LocalDefId { local_def_index: owner_def_index })\n-                        .to_string_no_crate()\n+                    self.hir_map.def_path(owner).to_string_no_crate()\n                 ));\n             }\n             self.error(|| {\n                 format!(\n                     \"ItemLocalIds not assigned densely in {}. \\\n                 Max ItemLocalId = {}, missing IDs = {:?}; seens IDs = {:?}\",\n-                    self.hir_map\n-                        .def_path(LocalDefId { local_def_index: owner_def_index })\n-                        .to_string_no_crate(),\n+                    self.hir_map.def_path(owner).to_string_no_crate(),\n                     max,\n                     missing_items,\n                     self.hir_ids_seen\n                         .iter()\n-                        .map(|&local_id| HirId { owner: owner_def_index, local_id })\n+                        .map(|&local_id| HirId { owner, local_id })\n                         .map(|h| format!(\"({:?} {})\", h, self.hir_map.node_to_string(h)))\n                         .collect::<Vec<_>>()\n                 )\n@@ -146,7 +141,7 @@ impl<'a, 'hir> intravisit::Visitor<'hir> for HirIdValidator<'a, 'hir> {\n     }\n \n     fn visit_id(&mut self, hir_id: HirId) {\n-        let owner = self.owner_def_index.expect(\"no owner_def_index\");\n+        let owner = self.owner.expect(\"no owner\");\n \n         if hir_id == hir::DUMMY_HIR_ID {\n             self.error(|| {\n@@ -163,10 +158,8 @@ impl<'a, 'hir> intravisit::Visitor<'hir> for HirIdValidator<'a, 'hir> {\n                 format!(\n                     \"HirIdValidator: The recorded owner of {} is {} instead of {}\",\n                     self.hir_map.node_to_string(hir_id),\n-                    self.hir_map.def_path(hir_id.owner_local_def_id()).to_string_no_crate(),\n-                    self.hir_map\n-                        .def_path(LocalDefId { local_def_index: owner })\n-                        .to_string_no_crate()\n+                    self.hir_map.def_path(hir_id.owner).to_string_no_crate(),\n+                    self.hir_map.def_path(owner).to_string_no_crate()\n                 )\n             });\n         }"}, {"sha": "47114feb5e7070f25b80b34e8467be37766c7078", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=f3ec0698865d70571f5308f912c63dbc5ad2a9ed", "patch": "@@ -138,7 +138,7 @@ pub struct IndexedHir<'hir> {\n     /// The SVH of the local crate.\n     pub crate_hash: Svh,\n \n-    pub(super) map: IndexVec<DefIndex, HirOwnerData<'hir>>,\n+    pub(super) map: IndexVec<LocalDefId, HirOwnerData<'hir>>,\n }\n \n #[derive(Copy, Clone)]\n@@ -345,10 +345,10 @@ impl<'hir> Map<'hir> {\n \n     fn get_entry(&self, id: HirId) -> Entry<'hir> {\n         if id.local_id == ItemLocalId::from_u32(0) {\n-            let owner = self.tcx.hir_owner(id.owner_def_id());\n+            let owner = self.tcx.hir_owner(id.owner);\n             Entry { parent: owner.parent, node: owner.node }\n         } else {\n-            let owner = self.tcx.hir_owner_items(id.owner_def_id());\n+            let owner = self.tcx.hir_owner_items(id.owner);\n             let item = owner.items[id.local_id].as_ref().unwrap();\n             Entry { parent: HirId { owner: id.owner, local_id: item.parent }, node: item.node }\n         }\n@@ -376,11 +376,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn body(&self, id: BodyId) -> &'hir Body<'hir> {\n-        self.tcx\n-            .hir_owner_items(DefId::local(id.hir_id.owner))\n-            .bodies\n-            .get(&id.hir_id.local_id)\n-            .unwrap()\n+        self.tcx.hir_owner_items(id.hir_id.owner).bodies.get(&id.hir_id.local_id).unwrap()\n     }\n \n     pub fn fn_decl_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnDecl<'hir>> {\n@@ -494,7 +490,7 @@ impl<'hir> Map<'hir> {\n     where\n         V: ItemLikeVisitor<'hir>,\n     {\n-        let module = self.tcx.hir_module_items(module);\n+        let module = self.tcx.hir_module_items(module.expect_local());\n \n         for id in &module.items {\n             visitor.visit_item(self.expect_item(*id));"}, {"sha": "0042b6a3bd42f65b09a9f242c206c991481aa955", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=f3ec0698865d70571f5308f912c63dbc5ad2a9ed", "patch": "@@ -11,7 +11,7 @@ use crate::ty::TyCtxt;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_hir::def_id::{LocalDefId, LOCAL_CRATE};\n use rustc_hir::Body;\n use rustc_hir::HirId;\n use rustc_hir::ItemLocalId;\n@@ -60,27 +60,27 @@ impl<'tcx> TyCtxt<'tcx> {\n         map::Map { tcx: self }\n     }\n \n-    pub fn parent_module(self, id: HirId) -> DefId {\n-        self.parent_module_from_def_id(DefId::local(id.owner))\n+    pub fn parent_module(self, id: HirId) -> LocalDefId {\n+        self.parent_module_from_def_id(id.owner)\n     }\n }\n \n pub fn provide(providers: &mut Providers<'_>) {\n     providers.parent_module_from_def_id = |tcx, id| {\n         let hir = tcx.hir();\n-        hir.local_def_id(hir.get_module_parent_node(hir.as_local_hir_id(id).unwrap()))\n+        hir.local_def_id(hir.get_module_parent_node(hir.as_local_hir_id(id.to_def_id()).unwrap()))\n+            .expect_local()\n     };\n     providers.hir_crate = |tcx, _| tcx.untracked_crate;\n     providers.index_hir = map::index_hir;\n     providers.hir_module_items = |tcx, id| {\n-        assert_eq!(id.krate, LOCAL_CRATE);\n         let hir = tcx.hir();\n-        let module = hir.as_local_hir_id(id).unwrap();\n+        let module = hir.as_local_hir_id(id.to_def_id()).unwrap();\n         &tcx.untracked_crate.modules[&module]\n     };\n-    providers.hir_owner = |tcx, id| tcx.index_hir(id.krate).map[id.index].signature.unwrap();\n+    providers.hir_owner = |tcx, id| tcx.index_hir(LOCAL_CRATE).map[id].signature.unwrap();\n     providers.hir_owner_items = |tcx, id| {\n-        tcx.index_hir(id.krate).map[id.index].with_bodies.as_ref().map(|items| &**items).unwrap()\n+        tcx.index_hir(LOCAL_CRATE).map[id].with_bodies.as_ref().map(|items| &**items).unwrap()\n     };\n     map::provide(providers);\n }"}, {"sha": "205eadf227c22b2022340eea18026b41a35ba186", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=f3ec0698865d70571f5308f912c63dbc5ad2a9ed", "patch": "@@ -21,7 +21,7 @@ impl<'ctx> rustc_hir::HashStableContext for StableHashingContext<'ctx> {\n             NodeIdHashingMode::HashDefPath => {\n                 let hir::HirId { owner, local_id } = hir_id;\n \n-                hcx.local_def_path_hash(owner).hash_stable(hcx, hasher);\n+                hcx.local_def_path_hash(owner.local_def_index).hash_stable(hcx, hasher);\n                 local_id.hash_stable(hcx, hasher);\n             }\n         }\n@@ -231,7 +231,7 @@ impl<'a> ToStableHashKey<StableHashingContext<'a>> for hir::TraitCandidate {\n \n         let import_keys = import_ids\n             .iter()\n-            .map(|hir_id| (hcx.local_def_path_hash(hir_id.owner), hir_id.local_id))\n+            .map(|hir_id| (hcx.local_def_path_hash(hir_id.owner.local_def_index), hir_id.local_id))\n             .collect();\n         (hcx.def_path_hash(*def_id), import_keys)\n     }"}, {"sha": "2735c4afca2c8ecd5f3dd46a86306950b11e14e0", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=f3ec0698865d70571f5308f912c63dbc5ad2a9ed", "patch": "@@ -9,7 +9,6 @@\n use crate::ich::{NodeIdHashingMode, StableHashingContext};\n use crate::ty::{self, DefIdTree, TyCtxt};\n use rustc_hir as hir;\n-use rustc_hir::def_id::DefId;\n use rustc_hir::Node;\n \n use rustc_data_structures::fx::FxHashMap;\n@@ -594,7 +593,7 @@ impl<'tcx> ScopeTree {\n                               region scope tree for {:?} / {:?}\",\n                             param_owner,\n                             self.root_parent.map(|id| tcx.hir().local_def_id(id)),\n-                            self.root_body.map(|hir_id| DefId::local(hir_id.owner))\n+                            self.root_body.map(|hir_id| hir_id.owner)\n                         ),\n                     );\n                 }"}, {"sha": "de35c6d87e6f58d4d178726dc0bb3a28b03212ca", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=f3ec0698865d70571f5308f912c63dbc5ad2a9ed", "patch": "@@ -66,24 +66,27 @@ rustc_queries! {\n         // The items in a module.\n         // This can be conveniently accessed by `tcx.hir().visit_item_likes_in_module`.\n         // Avoid calling this query directly.\n-        query hir_module_items(key: DefId) -> &'tcx hir::ModuleItems {\n+        query hir_module_items(key: LocalDefId) -> &'tcx hir::ModuleItems {\n             eval_always\n+            desc { |tcx| \"HIR module items in `{}`\", tcx.def_path_str(key.to_def_id()) }\n         }\n \n-        // An HIR item with a `DefId` that can own other HIR items which do not themselves have\n-        // a `DefId`.\n+        // An HIR item with a `LocalDefId` that can own other HIR items which do\n+        // not themselves have a `LocalDefId`.\n         // This can be conveniently accessed by methods on `tcx.hir()`.\n         // Avoid calling this query directly.\n-        query hir_owner(key: DefId) -> &'tcx HirOwner<'tcx> {\n+        query hir_owner(key: LocalDefId) -> &'tcx HirOwner<'tcx> {\n             eval_always\n+            desc { |tcx| \"HIR owner of `{}`\", tcx.def_path_str(key.to_def_id()) }\n         }\n \n-        // The HIR items which do not themselves have a `DefId` and are owned by another HIR item\n-        // with a `DefId`.\n+        // The HIR items which do not themselves have a `LocalDefId` and are\n+        // owned by another HIR item with a `LocalDefId`.\n         // This can be conveniently accessed by methods on `tcx.hir()`.\n         // Avoid calling this query directly.\n-        query hir_owner_items(key: DefId) -> &'tcx HirOwnerItems<'tcx> {\n+        query hir_owner_items(key: LocalDefId) -> &'tcx HirOwnerItems<'tcx> {\n             eval_always\n+            desc { |tcx| \"HIR owner items in `{}`\", tcx.def_path_str(key.to_def_id()) }\n         }\n \n         /// Records the type of every item.\n@@ -135,8 +138,9 @@ rustc_queries! {\n             desc { \"computing the lint levels for items in this crate\" }\n         }\n \n-        query parent_module_from_def_id(_: DefId) -> DefId {\n+        query parent_module_from_def_id(key: LocalDefId) -> LocalDefId {\n             eval_always\n+            desc { |tcx| \"parent module of `{}`\", tcx.def_path_str(key.to_def_id()) }\n         }\n     }\n "}, {"sha": "71265b2476fa1dd2065d9baaa1fe0b66bb5c6189", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=f3ec0698865d70571f5308f912c63dbc5ad2a9ed", "patch": "@@ -205,13 +205,13 @@ fn validate_hir_id_for_typeck_tables(\n     mut_access: bool,\n ) {\n     if let Some(local_id_root) = local_id_root {\n-        if hir_id.owner != local_id_root.index {\n+        if hir_id.owner.to_def_id() != local_id_root {\n             ty::tls::with(|tcx| {\n                 bug!(\n                     \"node {} with HirId::owner {:?} cannot be placed in \\\n                      TypeckTables with local_id_root {:?}\",\n                     tcx.hir().node_to_string(hir_id),\n-                    DefId::local(hir_id.owner),\n+                    hir_id.owner,\n                     local_id_root\n                 )\n             });\n@@ -732,8 +732,10 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckTables<'tcx> {\n \n                 let local_id_root = local_id_root.expect(\"trying to hash invalid TypeckTables\");\n \n-                let var_owner_def_id =\n-                    DefId { krate: local_id_root.krate, index: var_path.hir_id.owner };\n+                let var_owner_def_id = DefId {\n+                    krate: local_id_root.krate,\n+                    index: var_path.hir_id.owner.local_def_index,\n+                };\n                 let closure_def_id =\n                     DefId { krate: local_id_root.krate, index: closure_expr_id.local_def_index };\n                 (\n@@ -1153,7 +1155,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         let mut trait_map: FxHashMap<_, FxHashMap<_, _>> = FxHashMap::default();\n         for (k, v) in resolutions.trait_map {\n             let hir_id = definitions.node_to_hir_id(k);\n-            let map = trait_map.entry(hir_id.owner_local_def_id()).or_default();\n+            let map = trait_map.entry(hir_id.owner).or_default();\n             let v = v\n                 .into_iter()\n                 .map(|tc| tc.map_import_ids(|id| definitions.node_to_hir_id(id)))\n@@ -2635,22 +2637,19 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx StableVec<TraitCandidate>> {\n-        self.in_scope_traits_map(id.owner_local_def_id()).and_then(|map| map.get(&id.local_id))\n+        self.in_scope_traits_map(id.owner).and_then(|map| map.get(&id.local_id))\n     }\n \n     pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {\n-        self.named_region_map(id.owner_local_def_id())\n-            .and_then(|map| map.get(&id.local_id).cloned())\n+        self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())\n     }\n \n     pub fn is_late_bound(self, id: HirId) -> bool {\n-        self.is_late_bound_map(id.owner_local_def_id())\n-            .map(|set| set.contains(&id.local_id))\n-            .unwrap_or(false)\n+        self.is_late_bound_map(id.owner).map(|set| set.contains(&id.local_id)).unwrap_or(false)\n     }\n \n     pub fn object_lifetime_defaults(self, id: HirId) -> Option<&'tcx [ObjectLifetimeDefault]> {\n-        self.object_lifetime_defaults_map(id.owner_local_def_id())\n+        self.object_lifetime_defaults_map(id.owner)\n             .and_then(|map| map.get(&id.local_id).map(|v| &**v))\n     }\n }"}, {"sha": "ac680fc756807872b695bfcbe49c9d49c13dc9bb", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=f3ec0698865d70571f5308f912c63dbc5ad2a9ed", "patch": "@@ -384,7 +384,9 @@ impl Visibility {\n                 Res::Err => Visibility::Public,\n                 def => Visibility::Restricted(def.def_id()),\n             },\n-            hir::VisibilityKind::Inherited => Visibility::Restricted(tcx.parent_module(id)),\n+            hir::VisibilityKind::Inherited => {\n+                Visibility::Restricted(tcx.parent_module(id).to_def_id())\n+            }\n         }\n     }\n \n@@ -3117,7 +3119,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 Some(actual_expansion) => {\n                     self.hir().definitions().parent_module_of_macro_def(actual_expansion)\n                 }\n-                None => self.parent_module(block),\n+                None => self.parent_module(block).to_def_id(),\n             };\n         (ident, scope)\n     }"}, {"sha": "781abea75d9f7bd7d8f90be2691468cfb3680b1a", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=f3ec0698865d70571f5308f912c63dbc5ad2a9ed", "patch": "@@ -11,7 +11,6 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::{HashMapExt, Lock, Lrc, Once};\n use rustc_data_structures::thin_vec::ThinVec;\n use rustc_errors::Diagnostic;\n-use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, LOCAL_CRATE};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_serialize::{\n@@ -661,25 +660,6 @@ impl<'a, 'tcx> SpecializedDecoder<LocalDefId> for CacheDecoder<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> SpecializedDecoder<hir::HirId> for CacheDecoder<'a, 'tcx> {\n-    fn specialized_decode(&mut self) -> Result<hir::HirId, Self::Error> {\n-        // Load the `DefPathHash` which is what we encoded the `DefIndex` as.\n-        let def_path_hash = DefPathHash::decode(self)?;\n-\n-        // Use the `DefPathHash` to map to the current `DefId`.\n-        let def_id = self.tcx().def_path_hash_to_def_id.as_ref().unwrap()[&def_path_hash];\n-\n-        debug_assert!(def_id.is_local());\n-\n-        // The `ItemLocalId` needs no remapping.\n-        let local_id = hir::ItemLocalId::decode(self)?;\n-\n-        // Reconstruct the `HirId` and look up the corresponding `NodeId` in the\n-        // context of the current session.\n-        Ok(hir::HirId { owner: def_id.index, local_id })\n-    }\n-}\n-\n impl<'a, 'tcx> SpecializedDecoder<Fingerprint> for CacheDecoder<'a, 'tcx> {\n     fn specialized_decode(&mut self) -> Result<Fingerprint, Self::Error> {\n         Fingerprint::decode_opaque(&mut self.opaque)\n@@ -873,21 +853,6 @@ where\n     }\n }\n \n-impl<'a, 'tcx, E> SpecializedEncoder<hir::HirId> for CacheEncoder<'a, 'tcx, E>\n-where\n-    E: 'a + TyEncoder,\n-{\n-    #[inline]\n-    fn specialized_encode(&mut self, id: &hir::HirId) -> Result<(), Self::Error> {\n-        let hir::HirId { owner, local_id } = *id;\n-\n-        let def_path_hash = self.tcx.hir().definitions().def_path_hash(owner);\n-\n-        def_path_hash.encode(self)?;\n-        local_id.encode(self)\n-    }\n-}\n-\n impl<'a, 'tcx, E> SpecializedEncoder<DefId> for CacheEncoder<'a, 'tcx, E>\n where\n     E: 'a + TyEncoder,"}, {"sha": "7e9563833b3c3567cbba93165ad3d51725cad415", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=f3ec0698865d70571f5308f912c63dbc5ad2a9ed", "patch": "@@ -425,10 +425,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     UseTreeKind::Nested(ref trees) => {\n                         for &(ref use_tree, id) in trees {\n                             let hir_id = self.lctx.allocate_hir_id_counter(id);\n-                            self.allocate_use_tree_hir_id_counters(\n-                                use_tree,\n-                                hir_id.owner_local_def_id(),\n-                            );\n+                            self.allocate_use_tree_hir_id_counters(use_tree, hir_id.owner);\n                         }\n                     }\n                 }\n@@ -479,10 +476,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         self.lctx.type_def_lifetime_params.insert(def_id.to_def_id(), count);\n                     }\n                     ItemKind::Use(ref use_tree) => {\n-                        self.allocate_use_tree_hir_id_counters(\n-                            use_tree,\n-                            hir_id.owner_local_def_id(),\n-                        );\n+                        self.allocate_use_tree_hir_id_counters(use_tree, hir_id.owner);\n                     }\n                     _ => {}\n                 }\n@@ -626,14 +620,11 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     /// properly. Calling the method twice with the same `NodeId` is fine though.\n     fn lower_node_id(&mut self, ast_node_id: NodeId) -> hir::HirId {\n         self.lower_node_id_generic(ast_node_id, |this| {\n-            let &mut (def_id, ref mut local_id_counter) =\n+            let &mut (owner, ref mut local_id_counter) =\n                 this.current_hir_id_owner.last_mut().unwrap();\n             let local_id = *local_id_counter;\n             *local_id_counter += 1;\n-            hir::HirId {\n-                owner: def_id.local_def_index,\n-                local_id: hir::ItemLocalId::from_u32(local_id),\n-            }\n+            hir::HirId { owner, local_id: hir::ItemLocalId::from_u32(local_id) }\n         })\n     }\n \n@@ -651,12 +642,17 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             debug_assert!(local_id != HIR_ID_COUNTER_LOCKED);\n \n             *local_id_counter += 1;\n-            let def_index = this.resolver.definitions().opt_def_index(owner).expect(\n-                \"you forgot to call `create_def_with_parent` or are lowering node-IDs \\\n-                         that do not belong to the current owner\",\n-            );\n-\n-            hir::HirId { owner: def_index, local_id: hir::ItemLocalId::from_u32(local_id) }\n+            let owner = this\n+                .resolver\n+                .definitions()\n+                .opt_local_def_id(owner)\n+                .expect(\n+                    \"you forgot to call `create_def_with_parent` or are lowering node-IDs \\\n+                     that do not belong to the current owner\",\n+                )\n+                .expect_local();\n+\n+            hir::HirId { owner, local_id: hir::ItemLocalId::from_u32(local_id) }\n         })\n     }\n "}, {"sha": "1c7987e965f8506ee92bf315badbb5dff17b9fd6", "filename": "src/librustc_hir/hir_id.rs", "status": "modified", "additions": 10, "deletions": 37, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc_hir%2Fhir_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc_hir%2Fhir_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir_id.rs?ref=f3ec0698865d70571f5308f912c63dbc5ad2a9ed", "patch": "@@ -1,9 +1,8 @@\n-use crate::def_id::{DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX};\n-use rustc_serialize::{self, Decodable, Decoder, Encodable, Encoder};\n+use crate::def_id::{LocalDefId, CRATE_DEF_INDEX};\n use std::fmt;\n \n /// Uniquely identifies a node in the HIR of the current crate. It is\n-/// composed of the `owner`, which is the `DefIndex` of the directly enclosing\n+/// composed of the `owner`, which is the `LocalDefId` of the directly enclosing\n /// `hir::Item`, `hir::TraitItem`, or `hir::ImplItem` (i.e., the closest \"item-like\"),\n /// and the `local_id` which is unique within the given owner.\n ///\n@@ -12,41 +11,12 @@ use std::fmt;\n /// the `local_id` part of the `HirId` changing, which is a very useful property in\n /// incremental compilation where we have to persist things through changes to\n /// the code base.\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, PartialOrd, Ord)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, PartialOrd, Ord, RustcEncodable, RustcDecodable)]\n pub struct HirId {\n-    pub owner: DefIndex,\n+    pub owner: LocalDefId,\n     pub local_id: ItemLocalId,\n }\n \n-impl HirId {\n-    pub fn owner_def_id(self) -> DefId {\n-        DefId::local(self.owner)\n-    }\n-\n-    pub fn owner_local_def_id(self) -> LocalDefId {\n-        LocalDefId { local_def_index: self.owner }\n-    }\n-}\n-\n-impl rustc_serialize::UseSpecializedEncodable for HirId {\n-    fn default_encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        let HirId { owner, local_id } = *self;\n-\n-        owner.encode(s)?;\n-        local_id.encode(s)?;\n-        Ok(())\n-    }\n-}\n-\n-impl rustc_serialize::UseSpecializedDecodable for HirId {\n-    fn default_decode<D: Decoder>(d: &mut D) -> Result<HirId, D::Error> {\n-        let owner = DefIndex::decode(d)?;\n-        let local_id = ItemLocalId::decode(d)?;\n-\n-        Ok(HirId { owner, local_id })\n-    }\n-}\n-\n impl fmt::Display for HirId {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{:?}\", self)\n@@ -70,9 +40,12 @@ rustc_index::newtype_index! {\n rustc_data_structures::impl_stable_hash_via_hash!(ItemLocalId);\n \n /// The `HirId` corresponding to `CRATE_NODE_ID` and `CRATE_DEF_INDEX`.\n-pub const CRATE_HIR_ID: HirId =\n-    HirId { owner: CRATE_DEF_INDEX, local_id: ItemLocalId::from_u32(0) };\n+pub const CRATE_HIR_ID: HirId = HirId {\n+    owner: LocalDefId { local_def_index: CRATE_DEF_INDEX },\n+    local_id: ItemLocalId::from_u32(0),\n+};\n \n-pub const DUMMY_HIR_ID: HirId = HirId { owner: CRATE_DEF_INDEX, local_id: DUMMY_ITEM_LOCAL_ID };\n+pub const DUMMY_HIR_ID: HirId =\n+    HirId { owner: LocalDefId { local_def_index: CRATE_DEF_INDEX }, local_id: DUMMY_ITEM_LOCAL_ID };\n \n pub const DUMMY_ITEM_LOCAL_ID: ItemLocalId = ItemLocalId::MAX;"}, {"sha": "bdfdd76d1f92605501629217518e5e309003f885", "filename": "src/librustc_hir/stable_hash_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc_hir%2Fstable_hash_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc_hir%2Fstable_hash_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fstable_hash_impls.rs?ref=f3ec0698865d70571f5308f912c63dbc5ad2a9ed", "patch": "@@ -29,7 +29,7 @@ impl<HirCtx: crate::HashStableContext> ToStableHashKey<HirCtx> for HirId {\n \n     #[inline]\n     fn to_stable_hash_key(&self, hcx: &HirCtx) -> (DefPathHash, ItemLocalId) {\n-        let def_path_hash = hcx.local_def_path_hash(self.owner);\n+        let def_path_hash = hcx.local_def_path_hash(self.owner.local_def_index);\n         (def_path_hash, self.local_id)\n     }\n }"}, {"sha": "d8c685f2b22ffe908423d1c428574e353bb02124", "filename": "src/librustc_lint/internal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc_lint%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc_lint%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Finternal.rs?ref=f3ec0698865d70571f5308f912c63dbc5ad2a9ed", "patch": "@@ -140,7 +140,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TyTyKind {\n                 }\n             }\n             TyKind::Rptr(_, MutTy { ty: inner_ty, mutbl: Mutability::Not }) => {\n-                if let Some(impl_did) = cx.tcx.impl_of_method(ty.hir_id.owner_def_id()) {\n+                if let Some(impl_did) = cx.tcx.impl_of_method(ty.hir_id.owner.to_def_id()) {\n                     if cx.tcx.impl_trait_ref(impl_did).is_some() {\n                         return;\n                     }"}, {"sha": "229740615f707f60da6fa6b355568764d9f58b5d", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=f3ec0698865d70571f5308f912c63dbc5ad2a9ed", "patch": "@@ -126,7 +126,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n         ) -> bool {\n             if ty.is_unit()\n                 || cx.tcx.is_ty_uninhabited_from(\n-                    cx.tcx.parent_module(expr.hir_id),\n+                    cx.tcx.parent_module(expr.hir_id).to_def_id(),\n                     ty,\n                     cx.param_env,\n                 )"}, {"sha": "f4f6fd43e30f06dc169ee2d8dfaa5ae8e8dc1f0e", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=f3ec0698865d70571f5308f912c63dbc5ad2a9ed", "patch": "@@ -1350,7 +1350,7 @@ impl EncodeContext<'tcx> {\n         let is_proc_macro = self.tcx.sess.crate_types.borrow().contains(&CrateType::ProcMacro);\n         if is_proc_macro {\n             let tcx = self.tcx;\n-            Some(self.lazy(tcx.hir().krate().proc_macros.iter().map(|p| p.owner)))\n+            Some(self.lazy(tcx.hir().krate().proc_macros.iter().map(|p| p.owner.local_def_index)))\n         } else {\n             None\n         }"}, {"sha": "c1acd5bd9a691510020bc1c405c24ab23d787829", "filename": "src/librustc_mir/borrow_check/universal_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs?ref=f3ec0698865d70571f5308f912c63dbc5ad2a9ed", "patch": "@@ -776,7 +776,7 @@ fn for_each_late_bound_region_defined_on<'tcx>(\n ) {\n     if let Some(late_bounds) = tcx.is_late_bound_map(fn_def_id.expect_local()) {\n         for late_bound in late_bounds.iter() {\n-            let hir_id = HirId { owner: fn_def_id.index, local_id: *late_bound };\n+            let hir_id = HirId { owner: fn_def_id.expect_local(), local_id: *late_bound };\n             let name = tcx.hir().name(hir_id);\n             let region_def_id = tcx.hir().local_def_id(hir_id);\n             let liberated_region = tcx.mk_region(ty::ReFree(ty::FreeRegion {"}, {"sha": "9c86669cf9d929da307390d08eee390e0a6c03aa", "filename": "src/librustc_mir_build/hair/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs?ref=f3ec0698865d70571f5308f912c63dbc5ad2a9ed", "patch": "@@ -145,7 +145,7 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n \n     fn check_in_cx(&self, hir_id: HirId, f: impl FnOnce(MatchCheckCtxt<'_, 'tcx>)) {\n         let module = self.tcx.parent_module(hir_id);\n-        MatchCheckCtxt::create_and_enter(self.tcx, self.param_env, module, |cx| f(cx));\n+        MatchCheckCtxt::create_and_enter(self.tcx, self.param_env, module.to_def_id(), |cx| f(cx));\n     }\n \n     fn check_match("}, {"sha": "70b106f5d2332eb0c11736d87cd7d463e984c9ff", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=f3ec0698865d70571f5308f912c63dbc5ad2a9ed", "patch": "@@ -1128,7 +1128,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             }\n \n             hir::ExprKind::Call(ref f, ref args) => {\n-                let m = self.ir.tcx.parent_module(expr.hir_id);\n+                let m = self.ir.tcx.parent_module(expr.hir_id).to_def_id();\n                 let succ = if self.ir.tcx.is_ty_uninhabited_from(\n                     m,\n                     self.tables.expr_ty(expr),\n@@ -1143,7 +1143,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             }\n \n             hir::ExprKind::MethodCall(.., ref args) => {\n-                let m = self.ir.tcx.parent_module(expr.hir_id);\n+                let m = self.ir.tcx.parent_module(expr.hir_id).to_def_id();\n                 let succ = if self.ir.tcx.is_ty_uninhabited_from(\n                     m,\n                     self.tables.expr_ty(expr),"}, {"sha": "835e7cfb628169a3c182a62b3dd3dcd7181efe81", "filename": "src/librustc_passes/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc_passes%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc_passes%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Freachable.rs?ref=f3ec0698865d70571f5308f912c63dbc5ad2a9ed", "patch": "@@ -46,7 +46,7 @@ fn method_might_be_inlined(\n     impl_item: &hir::ImplItem<'_>,\n     impl_src: DefId,\n ) -> bool {\n-    let codegen_fn_attrs = tcx.codegen_fn_attrs(impl_item.hir_id.owner_def_id());\n+    let codegen_fn_attrs = tcx.codegen_fn_attrs(impl_item.hir_id.owner.to_def_id());\n     let generics = tcx.generics_of(tcx.hir().local_def_id(impl_item.hir_id));\n     if codegen_fn_attrs.requests_inline() || generics.requires_monomorphization(tcx) {\n         return true;"}, {"sha": "c8c8c2299305ba55faee029f57c4291da3eda61d", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=f3ec0698865d70571f5308f912c63dbc5ad2a9ed", "patch": "@@ -327,7 +327,7 @@ fn def_id_visibility<'tcx>(\n                 }\n                 Node::Expr(expr) => {\n                     return (\n-                        ty::Visibility::Restricted(tcx.parent_module(expr.hir_id)),\n+                        ty::Visibility::Restricted(tcx.parent_module(expr.hir_id).to_def_id()),\n                         expr.span,\n                         \"private\",\n                     );"}, {"sha": "51bf1f48439725da647c6741d2fa1b5256181c4f", "filename": "src/librustc_resolve/late/lifetimes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs?ref=f3ec0698865d70571f5308f912c63dbc5ad2a9ed", "patch": "@@ -302,15 +302,15 @@ fn resolve_lifetimes(tcx: TyCtxt<'_>, for_krate: CrateNum) -> &ResolveLifetimes\n     let mut rl = ResolveLifetimes::default();\n \n     for (hir_id, v) in named_region_map.defs {\n-        let map = rl.defs.entry(hir_id.owner_local_def_id()).or_default();\n+        let map = rl.defs.entry(hir_id.owner).or_default();\n         map.insert(hir_id.local_id, v);\n     }\n     for hir_id in named_region_map.late_bound {\n-        let map = rl.late_bound.entry(hir_id.owner_local_def_id()).or_default();\n+        let map = rl.late_bound.entry(hir_id.owner).or_default();\n         map.insert(hir_id.local_id);\n     }\n     for (hir_id, v) in named_region_map.object_lifetime_defaults {\n-        let map = rl.object_lifetime_defaults.entry(hir_id.owner_local_def_id()).or_default();\n+        let map = rl.object_lifetime_defaults.entry(hir_id.owner).or_default();\n         map.insert(hir_id.local_id, v);\n     }\n "}, {"sha": "29561c91f33184da39af3799f671045759dbdae3", "filename": "src/librustc_span/def_id.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc_span%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc_span%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fdef_id.rs?ref=f3ec0698865d70571f5308f912c63dbc5ad2a9ed", "patch": "@@ -215,11 +215,22 @@ rustc_data_structures::define_id_collections!(DefIdMap, DefIdSet, DefId);\n /// few cases where we know that only DefIds from the local crate are expected\n /// and a DefId from a different crate would signify a bug somewhere. This\n /// is when LocalDefId comes in handy.\n-#[derive(Clone, Copy, PartialEq, Eq, Hash)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct LocalDefId {\n     pub local_def_index: DefIndex,\n }\n \n+impl Idx for LocalDefId {\n+    #[inline]\n+    fn new(idx: usize) -> Self {\n+        LocalDefId { local_def_index: Idx::new(idx) }\n+    }\n+    #[inline]\n+    fn index(self) -> usize {\n+        self.local_def_index.index()\n+    }\n+}\n+\n impl LocalDefId {\n     #[inline]\n     pub fn to_def_id(self) -> DefId {"}, {"sha": "0523a2019861cef951fc52238c3977393d87a4c2", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=f3ec0698865d70571f5308f912c63dbc5ad2a9ed", "patch": "@@ -1287,7 +1287,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             let parent = hir.get_parent_node(expr_id);\n             if let Some(hir::Node::Expr(e)) = hir.find(parent) {\n                 let parent_span = hir.span(parent);\n-                let parent_did = parent.owner_def_id();\n+                let parent_did = parent.owner.to_def_id();\n                 // ```rust\n                 // impl T {\n                 //     fn foo(&self) -> i32 {}"}, {"sha": "452f965014bff38c34bb8034caa982bc1707182e", "filename": "src/librustc_trait_selection/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs?ref=f3ec0698865d70571f5308f912c63dbc5ad2a9ed", "patch": "@@ -185,7 +185,7 @@ fn get_sized_bounds(tcx: TyCtxt<'_>, trait_def_id: DefId) -> SmallVec<[Span; 1]>\n                     .filter_map(|pred| {\n                         match pred {\n                             hir::WherePredicate::BoundPredicate(pred)\n-                                if pred.bounded_ty.hir_id.owner_def_id() == trait_def_id =>\n+                                if pred.bounded_ty.hir_id.owner.to_def_id() == trait_def_id =>\n                             {\n                                 // Fetch spans for trait bounds that are Sized:\n                                 // `trait T where Self: Pred`"}, {"sha": "617c54a738e6eaf2b7298160cb6f5cfa93dbf241", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=f3ec0698865d70571f5308f912c63dbc5ad2a9ed", "patch": "@@ -1631,7 +1631,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     fn point_at_param_definition(&self, err: &mut DiagnosticBuilder<'_>, param: ty::ParamTy) {\n-        let generics = self.tcx.generics_of(self.body_id.owner_def_id());\n+        let generics = self.tcx.generics_of(self.body_id.owner.to_def_id());\n         let generic_param = generics.type_param(&param, self.tcx);\n         if let ty::GenericParamDefKind::Type { synthetic: Some(..), .. } = generic_param.kind {\n             return;"}, {"sha": "2f0eb5e06709a0191fc4ebb04d8686684172f168", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=f3ec0698865d70571f5308f912c63dbc5ad2a9ed", "patch": "@@ -427,7 +427,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         });\n \n                     if let Some((field, field_ty)) = field_receiver {\n-                        let scope = self.tcx.parent_module(self.body_id);\n+                        let scope = self.tcx.parent_module(self.body_id).to_def_id();\n                         let is_accessible = field.vis.is_accessible_from(scope, self.tcx);\n \n                         if is_accessible {\n@@ -828,7 +828,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         candidates: Vec<DefId>,\n     ) {\n         let module_did = self.tcx.parent_module(self.body_id);\n-        let module_id = self.tcx.hir().as_local_hir_id(module_did).unwrap();\n+        let module_id = self.tcx.hir().as_local_hir_id(module_did.to_def_id()).unwrap();\n         let krate = self.tcx.hir().krate();\n         let (span, found_use) = UsePlacementFinder::check(self.tcx, krate, module_id);\n         if let Some(span) = span {"}, {"sha": "368f64e4d41aab6716185803f0153936619e06e5", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f3ec0698865d70571f5308f912c63dbc5ad2a9ed", "patch": "@@ -639,7 +639,7 @@ pub struct InheritedBuilder<'tcx> {\n impl Inherited<'_, 'tcx> {\n     pub fn build(tcx: TyCtxt<'tcx>, def_id: DefId) -> InheritedBuilder<'tcx> {\n         let hir_id_root = if let Some(def_id) = def_id.as_local() {\n-            tcx.hir().local_def_id_to_hir_id(def_id).owner_def_id()\n+            tcx.hir().local_def_id_to_hir_id(def_id).owner.to_def_id()\n         } else {\n             def_id\n         };\n@@ -1127,7 +1127,7 @@ fn typeck_tables_of_with_fallback<'tcx>(\n \n     // Consistency check our TypeckTables instance can hold all ItemLocalIds\n     // it will need to hold.\n-    assert_eq!(tables.local_id_root, Some(DefId::local(id.owner)));\n+    assert_eq!(tables.local_id_root, Some(id.owner.to_def_id()));\n \n     tables\n }"}, {"sha": "fd92284effb322842c8af3ffb8309889fd6fc2de", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=f3ec0698865d70571f5308f912c63dbc5ad2a9ed", "patch": "@@ -9,7 +9,7 @@ use rustc::ty::fold::{TypeFoldable, TypeFolder};\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc_data_structures::sync::Lrc;\n use rustc_hir as hir;\n-use rustc_hir::def_id::{DefId, DefIdSet};\n+use rustc_hir::def_id::DefIdSet;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_infer::infer::error_reporting::TypeAnnotationNeeded::E0282;\n use rustc_infer::infer::InferCtxt;\n@@ -107,11 +107,11 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n         body: &'tcx hir::Body<'tcx>,\n         rustc_dump_user_substs: bool,\n     ) -> WritebackCx<'cx, 'tcx> {\n-        let owner = body.id().hir_id;\n+        let owner = body.id().hir_id.owner;\n \n         WritebackCx {\n             fcx,\n-            tables: ty::TypeckTables::empty(Some(DefId::local(owner.owner))),\n+            tables: ty::TypeckTables::empty(Some(owner.to_def_id())),\n             body,\n             rustc_dump_user_substs,\n         }\n@@ -342,7 +342,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n         let common_local_id_root = fcx_tables.local_id_root.unwrap();\n \n         for (&id, &origin) in fcx_tables.closure_kind_origins().iter() {\n-            let hir_id = hir::HirId { owner: common_local_id_root.index, local_id: id };\n+            let hir_id = hir::HirId { owner: common_local_id_root.expect_local(), local_id: id };\n             self.tables.closure_kind_origins_mut().insert(hir_id, origin);\n         }\n     }\n@@ -364,7 +364,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n \n         let mut errors_buffer = Vec::new();\n         for (&local_id, c_ty) in fcx_tables.user_provided_types().iter() {\n-            let hir_id = hir::HirId { owner: common_local_id_root.index, local_id };\n+            let hir_id = hir::HirId { owner: common_local_id_root.expect_local(), local_id };\n \n             if cfg!(debug_assertions) && c_ty.has_local_value() {\n                 span_bug!(hir_id.to_span(self.fcx.tcx), \"writeback: `{:?}` is a local value\", c_ty);\n@@ -557,7 +557,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n         let common_local_id_root = fcx_tables.local_id_root.unwrap();\n \n         for (&local_id, fn_sig) in fcx_tables.liberated_fn_sigs().iter() {\n-            let hir_id = hir::HirId { owner: common_local_id_root.index, local_id };\n+            let hir_id = hir::HirId { owner: common_local_id_root.expect_local(), local_id };\n             let fn_sig = self.resolve(fn_sig, &hir_id);\n             self.tables.liberated_fn_sigs_mut().insert(hir_id, fn_sig.clone());\n         }\n@@ -569,7 +569,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n         let common_local_id_root = fcx_tables.local_id_root.unwrap();\n \n         for (&local_id, ftys) in fcx_tables.fru_field_types().iter() {\n-            let hir_id = hir::HirId { owner: common_local_id_root.index, local_id };\n+            let hir_id = hir::HirId { owner: common_local_id_root.expect_local(), local_id };\n             let ftys = self.resolve(ftys, &hir_id);\n             self.tables.fru_field_types_mut().insert(hir_id, ftys);\n         }"}, {"sha": "113c781e33205bc4ba89202d88c7906bc6303640", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ec0698865d70571f5308f912c63dbc5ad2a9ed/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=f3ec0698865d70571f5308f912c63dbc5ad2a9ed", "patch": "@@ -348,7 +348,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n         let parent_node = self.cx.as_local_hir_id(item.def_id).and_then(|hir_id| {\n             // FIXME: this fails hard for impls in non-module scope, but is necessary for the\n             // current `resolve()` implementation.\n-            match self.cx.as_local_hir_id(self.cx.tcx.parent_module(hir_id)).unwrap() {\n+            match self.cx.as_local_hir_id(self.cx.tcx.parent_module(hir_id).to_def_id()).unwrap() {\n                 id if id != hir_id => Some(id),\n                 _ => None,\n             }"}]}