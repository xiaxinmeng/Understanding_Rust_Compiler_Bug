{"sha": "38cbf158b8f565af3d2027f96227858cb7abbb57", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4Y2JmMTU4YjhmNTY1YWYzZDIwMjdmOTYyMjc4NThjYjdhYmJiNTc=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-26T20:57:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-26T20:57:26Z"}, "message": "Rollup merge of #72937 - AdrianCX:master, r=nikomatsakis\n\nFortanix SGX target libunwind build process changes\n\nTicket: https://github.com/fortanix/rust-sgx/issues/174\nLLVM related changes (merged): https://github.com/rust-lang/llvm-project/pull/57\n\nDescription: libunwind changes needed to run code in sgx environment via rust-sgx.\n\nTarget that uses this in rust: x86_64-fortanix-unknown-sgx.\n\nWithout this change, rust std for this toolchain is forced to use a precompiled library loaded via environment variable.\n\nWith this change we act the same as musl target.", "tree": {"sha": "0008c2f1eaf428e4d412e4b0acd2d278c25caa84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0008c2f1eaf428e4d412e4b0acd2d278c25caa84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38cbf158b8f565af3d2027f96227858cb7abbb57", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe9mE3CRBK7hj4Ov3rIwAAdHIIAGDY2nkcTfa0I05qVwj3u8b/\nOVMcSGoJsoonfzF9m7xjhWwWrWJaAvsgVzF8BRjQfWLhhNs6iWeUOcewx0Z7+Jae\ntdb46FOhWdGbSFbzWug941IRDqDJ0n03P/1HYnes173WjZRqAIvMq+ivsrN8IV6i\nfCoxGKJ/cE4ugIRLDl2JkaSFx0r43VIq06D9RzmGX4/qwxLBOqhreAIVmepxQjpo\ngZdbTWb6OplobnpvlHi/rw0CM8GkPZqqMu6cd+z4Eh8lCR+YRWfHM4Xux4SdVQLg\n6wDkrOiLt7A9zUhcJv1fcWhPH7N8vg7bCIgupj9GWfz2nMO88QoybiFyUPKPFQ4=\n=2DZf\n-----END PGP SIGNATURE-----\n", "payload": "tree 0008c2f1eaf428e4d412e4b0acd2d278c25caa84\nparent 8adc781a1ff2fac9e54034ffdfaef90656f047e0\nparent db6fa2fff58c1071f66d3b91e1baf626571e0bcd\nauthor Manish Goregaokar <manishsmail@gmail.com> 1593205046 -0700\ncommitter GitHub <noreply@github.com> 1593205046 -0700\n\nRollup merge of #72937 - AdrianCX:master, r=nikomatsakis\n\nFortanix SGX target libunwind build process changes\n\nTicket: https://github.com/fortanix/rust-sgx/issues/174\nLLVM related changes (merged): https://github.com/rust-lang/llvm-project/pull/57\n\nDescription: libunwind changes needed to run code in sgx environment via rust-sgx.\n\nTarget that uses this in rust: x86_64-fortanix-unknown-sgx.\n\nWithout this change, rust std for this toolchain is forced to use a precompiled library loaded via environment variable.\n\nWith this change we act the same as musl target.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38cbf158b8f565af3d2027f96227858cb7abbb57", "html_url": "https://github.com/rust-lang/rust/commit/38cbf158b8f565af3d2027f96227858cb7abbb57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38cbf158b8f565af3d2027f96227858cb7abbb57/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8adc781a1ff2fac9e54034ffdfaef90656f047e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8adc781a1ff2fac9e54034ffdfaef90656f047e0", "html_url": "https://github.com/rust-lang/rust/commit/8adc781a1ff2fac9e54034ffdfaef90656f047e0"}, {"sha": "db6fa2fff58c1071f66d3b91e1baf626571e0bcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/db6fa2fff58c1071f66d3b91e1baf626571e0bcd", "html_url": "https://github.com/rust-lang/rust/commit/db6fa2fff58c1071f66d3b91e1baf626571e0bcd"}], "stats": {"total": 125, "additions": 54, "deletions": 71}, "files": [{"sha": "b07ff21755e0cae97296bc2027241624b2b1d274", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/38cbf158b8f565af3d2027f96227858cb7abbb57/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38cbf158b8f565af3d2027f96227858cb7abbb57/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=38cbf158b8f565af3d2027f96227858cb7abbb57", "patch": "@@ -131,26 +131,13 @@ fn copy_third_party_objects(\n     compiler: &Compiler,\n     target: Interned<String>,\n ) -> Vec<(PathBuf, DependencyType)> {\n-    let libdir = builder.sysroot_libdir(*compiler, target);\n     let mut target_deps = vec![];\n \n-    // Copies libunwind.a compiled to be linked with x86_64-fortanix-unknown-sgx.\n-    //\n-    // This target needs to be linked to Fortanix's port of llvm's libunwind.\n-    // libunwind requires support for rwlock and printing to stderr,\n-    // which is provided by std for this target.\n+    // FIXME: remove this in 2021\n     if target == \"x86_64-fortanix-unknown-sgx\" {\n-        let src_path_env = \"X86_FORTANIX_SGX_LIBS\";\n-        let src =\n-            env::var(src_path_env).unwrap_or_else(|_| panic!(\"{} not found in env\", src_path_env));\n-        copy_and_stamp(\n-            builder,\n-            &*libdir,\n-            Path::new(&src),\n-            \"libunwind.a\",\n-            &mut target_deps,\n-            DependencyType::Target,\n-        );\n+        if env::var_os(\"X86_FORTANIX_SGX_LIBS\").is_some() {\n+            builder.info(\"Warning: X86_FORTANIX_SGX_LIBS environment variable is ignored, libunwind is now compiled as part of rustbuild\");\n+        }\n     }\n \n     if builder.config.sanitizers && compiler.stage != 0 {"}, {"sha": "1f1c2460023525049c10769abe694b8f1d03f3a6", "filename": "src/ci/docker/dist-various-2/Dockerfile", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38cbf158b8f565af3d2027f96227858cb7abbb57/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/38cbf158b8f565af3d2027f96227858cb7abbb57/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile?ref=38cbf158b8f565af3d2027f96227858cb7abbb57", "patch": "@@ -71,9 +71,7 @@ RUN /tmp/build-solaris-toolchain.sh sparcv9 sparcv9 solaris-sparc\n COPY dist-various-2/build-x86_64-fortanix-unknown-sgx-toolchain.sh /tmp/\n COPY dist-various-2/x86_64-fortanix-unknown-sgx-clang-wrap.sh /usr/bin/x86_64-fortanix-unknown-sgx-clang-11\n RUN ln -s /usr/bin/x86_64-fortanix-unknown-sgx-clang-11 /usr/bin/x86_64-fortanix-unknown-sgx-clang++-11\n-# We pass the commit id of the port of LLVM's libunwind to the build script.\n-# Any update to the commit id here, should cause the container image to be re-built from this point on.\n-RUN /tmp/build-x86_64-fortanix-unknown-sgx-toolchain.sh \"800f95131fe6acd20b96b6f4723ca3c820f3d379\"\n+RUN /tmp/build-x86_64-fortanix-unknown-sgx-toolchain.sh\n \n COPY dist-various-2/build-wasi-toolchain.sh /tmp/\n RUN /tmp/build-wasi-toolchain.sh\n@@ -105,8 +103,6 @@ ENV TARGETS=$TARGETS,nvptx64-nvidia-cuda\n ENV TARGETS=$TARGETS,armv7-unknown-linux-gnueabi\n ENV TARGETS=$TARGETS,armv7-unknown-linux-musleabi\n \n-ENV X86_FORTANIX_SGX_LIBS=\"/x86_64-fortanix-unknown-sgx/lib/\"\n-\n # As per https://bugs.launchpad.net/ubuntu/+source/gcc-defaults/+bug/1300211\n # we need asm in the search path for gcc-7 (for gnux32) but not in the search path of the\n # cross compilers."}, {"sha": "78bf4527feff19e953c4d06d4f4bd4e0ecc6fd8d", "filename": "src/ci/docker/dist-various-2/build-x86_64-fortanix-unknown-sgx-toolchain.sh", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/38cbf158b8f565af3d2027f96227858cb7abbb57/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-x86_64-fortanix-unknown-sgx-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/38cbf158b8f565af3d2027f96227858cb7abbb57/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-x86_64-fortanix-unknown-sgx-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-x86_64-fortanix-unknown-sgx-toolchain.sh?ref=38cbf158b8f565af3d2027f96227858cb7abbb57", "patch": "@@ -3,14 +3,7 @@\n set -eu\n source shared.sh\n \n-if [ -z \"$1\" ]; then\n-    echo \"Usage: ${0} <commit_id>\"\n-    exit -1\n-fi\n-\n target=\"x86_64-fortanix-unknown-sgx\"\n-url=\"https://github.com/fortanix/llvm-project/archive/${1}.tar.gz\"\n-repo_name=\"llvm-project\"\n \n install_prereq() {\n     curl https://apt.llvm.org/llvm-snapshot.gpg.key|apt-key add -\n@@ -24,39 +17,4 @@ install_prereq() {\n             clang-11\n }\n \n-build_unwind() {\n-    set -x\n-    dir_name=\"${target}_temp\"\n-    rm -rf ${dir_name}\n-    mkdir -p ${dir_name}\n-    pushd ${dir_name}\n-\n-    # Clone Fortanix's fork of llvm-project which has a port of libunwind\n-    fetch_github_commit_archive \"$repo_name\" \"$url\"\n-    cd \"${repo_name}/libunwind\"\n-\n-    # Build libunwind\n-    mkdir -p build\n-    cd build\n-    target_CC=\"CC_${target//-/_}\"\n-    target_CXX=\"CXX_${target//-/_}\"\n-    target_CFLAGS=\"CFLAGS_${target//-/_}\"\n-    target_CXXFLAGS=\"CXXFLAGS_${target//-/_}\"\n-    cmake -DCMAKE_BUILD_TYPE=\"RELEASE\" -DRUST_SGX=1 -G \"Unix Makefiles\" \\\n-        -DCMAKE_C_COMPILER=\"${!target_CC}\" -DCMAKE_CXX_COMPILER=\"${!target_CXX}\" \\\n-        -DCMAKE_C_FLAGS=\"${!target_CFLAGS}\" -DCMAKE_CXX_FLAGS=\"${!target_CXXFLAGS}\" \\\n-        -DCMAKE_C_COMPILER_TARGET=$target -DCMAKE_CXX_COMPILER_TARGET=$target \\\n-        -DLLVM_ENABLE_WARNINGS=1 -DLIBUNWIND_ENABLE_WERROR=1 -DLIBUNWIND_ENABLE_PEDANTIC=0 \\\n-        -DLLVM_PATH=../../llvm/ ../\n-    make unwind_static\n-    install -D \"lib/libunwind.a\" \"/${target}/lib/libunwind.a\"\n-\n-    popd\n-    rm -rf ${dir_name}\n-\n-    { set +x; } 2>/dev/null\n-}\n-\n-set -x\n hide_output install_prereq\n-build_unwind"}, {"sha": "d01545619c8fa22527adc559943cd8a00301eef4", "filename": "src/librustc_target/spec/x86_64_fortanix_unknown_sgx.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38cbf158b8f565af3d2027f96227858cb7abbb57/src%2Flibrustc_target%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38cbf158b8f565af3d2027f96227858cb7abbb57/src%2Flibrustc_target%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs?ref=38cbf158b8f565af3d2027f96227858cb7abbb57", "patch": "@@ -48,8 +48,10 @@ pub fn target() -> Result<Target, String> {\n         \"ENCLAVE_SIZE\",\n         \"CFGDATA_BASE\",\n         \"DEBUG\",\n-        \"EH_FRM_HDR_BASE\",\n-        \"EH_FRM_HDR_SIZE\",\n+        \"EH_FRM_HDR_OFFSET\",\n+        \"EH_FRM_HDR_LEN\",\n+        \"EH_FRM_OFFSET\",\n+        \"EH_FRM_LEN\",\n         \"TEXT_BASE\",\n         \"TEXT_SIZE\",\n     ];"}, {"sha": "f61bcf06f081550abac509e657e152f80edac9b7", "filename": "src/libstd/sys/sgx/abi/entry.S", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/38cbf158b8f565af3d2027f96227858cb7abbb57/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fentry.S", "raw_url": "https://github.com/rust-lang/rust/raw/38cbf158b8f565af3d2027f96227858cb7abbb57/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fentry.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fentry.S?ref=38cbf158b8f565af3d2027f96227858cb7abbb57", "patch": "@@ -11,7 +11,7 @@ IMAGE_BASE:\n     .long 1                    /* type = NT_VERSION */\n 0:  .asciz \"toolchain-version\" /* name */\n 1:  .align 4\n-2:  .long 0                    /* desc - toolchain version number, 32-bit LE */\n+2:  .long 1                    /* desc - toolchain version number, 32-bit LE */\n 3:  .align 4\n \n .section .rodata\n@@ -60,10 +60,14 @@ IMAGE_BASE:\n     globvar TEXT_BASE 8\n     /*  The size in bytes of enclacve text section */\n     globvar TEXT_SIZE 8\n-    /*  The base address (relative to enclave start) of the enclave EH_FRM_HDR section */\n-    globvar EH_FRM_HDR_BASE 8\n-    /*  The size in bytes of enclacve EH_FRM_HDR section */\n-    globvar EH_FRM_HDR_SIZE 8\n+    /*  The base address (relative to enclave start) of the enclave .eh_frame_hdr section */\n+    globvar EH_FRM_HDR_OFFSET 8\n+    /*  The size in bytes of enclave .eh_frame_hdr section */\n+    globvar EH_FRM_HDR_LEN 8\n+    /*  The base address (relative to enclave start) of the enclave .eh_frame section */\n+    globvar EH_FRM_OFFSET 8\n+    /*  The size in bytes of enclacve .eh_frame section */\n+    globvar EH_FRM_LEN 8\n \n .org .Lxsave_clear+512\n .Lxsave_header:"}, {"sha": "31d235cf679db1ff072ce923f089f923b5004293", "filename": "src/libunwind/build.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/38cbf158b8f565af3d2027f96227858cb7abbb57/src%2Flibunwind%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38cbf158b8f565af3d2027f96227858cb7abbb57/src%2Flibunwind%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Fbuild.rs?ref=38cbf158b8f565af3d2027f96227858cb7abbb57", "patch": "@@ -9,6 +9,8 @@ fn main() {\n     {\n         // Build the unwinding from libunwind C/C++ source code.\n         llvm_libunwind::compile();\n+    } else if target.contains(\"x86_64-fortanix-unknown-sgx\") {\n+        llvm_libunwind::compile();\n     } else if target.contains(\"linux\") {\n         if target.contains(\"musl\") {\n             // linking for musl is handled in lib.rs\n@@ -55,6 +57,7 @@ mod llvm_libunwind {\n \n     /// Compile the libunwind C/C++ source code.\n     pub fn compile() {\n+        let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n         let target_env = env::var(\"CARGO_CFG_TARGET_ENV\").unwrap();\n         let target_vendor = env::var(\"CARGO_CFG_TARGET_VENDOR\").unwrap();\n         let target_endian_little = env::var(\"CARGO_CFG_TARGET_ENDIAN\").unwrap() != \"big\";\n@@ -75,6 +78,35 @@ mod llvm_libunwind {\n             cfg.flag(\"/EHsc\");\n             cfg.define(\"_CRT_SECURE_NO_WARNINGS\", None);\n             cfg.define(\"_LIBUNWIND_DISABLE_VISIBILITY_ANNOTATIONS\", None);\n+        } else if target.contains(\"x86_64-fortanix-unknown-sgx\") {\n+            cfg.cpp(false);\n+\n+            cfg.static_flag(true);\n+            cfg.opt_level(3);\n+\n+            cfg.flag(\"-nostdinc++\");\n+            cfg.flag(\"-fno-exceptions\");\n+            cfg.flag(\"-fno-rtti\");\n+            cfg.flag(\"-fstrict-aliasing\");\n+            cfg.flag(\"-funwind-tables\");\n+            cfg.flag(\"-fvisibility=hidden\");\n+            cfg.flag(\"-fno-stack-protector\");\n+            cfg.flag(\"-ffreestanding\");\n+            cfg.flag(\"-fexceptions\");\n+\n+            // easiest way to undefine since no API available in cc::Build to undefine\n+            cfg.flag(\"-U_FORTIFY_SOURCE\");\n+            cfg.define(\"_FORTIFY_SOURCE\", \"0\");\n+\n+            cfg.flag_if_supported(\"-fvisibility-global-new-delete-hidden\");\n+\n+            cfg.define(\"_LIBUNWIND_DISABLE_VISIBILITY_ANNOTATIONS\", None);\n+            cfg.define(\"RUST_SGX\", \"1\");\n+            cfg.define(\"__NO_STRING_INLINES\", None);\n+            cfg.define(\"__NO_MATH_INLINES\", None);\n+            cfg.define(\"_LIBUNWIND_IS_BAREMETAL\", None);\n+            cfg.define(\"__LIBUNWIND_IS_NATIVE_ONLY\", None);\n+            cfg.define(\"NDEBUG\", None);\n         } else {\n             cfg.flag(\"-std=c99\");\n             cfg.flag(\"-std=c++11\");\n@@ -103,6 +135,10 @@ mod llvm_libunwind {\n             unwind_sources.push(\"Unwind_AppleExtras.cpp\");\n         }\n \n+        if target.contains(\"x86_64-fortanix-unknown-sgx\") {\n+            unwind_sources.push(\"UnwindRustSgx.c\");\n+        }\n+\n         let root = Path::new(\"../llvm-project/libunwind\");\n         cfg.include(root.join(\"include\"));\n         for src in unwind_sources {"}]}