{"sha": "c110e72a115bbec36413bd440812dfe9194c58e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxMTBlNzJhMTE1YmJlYzM2NDEzYmQ0NDA4MTJkZmU5MTk0YzU4ZTI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-24T11:22:25Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-24T12:46:06Z"}, "message": "add marks to assists", "tree": {"sha": "45fcbfb58cce8650f67ce4f41e1b5564ef49bfb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45fcbfb58cce8650f67ce4f41e1b5564ef49bfb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c110e72a115bbec36413bd440812dfe9194c58e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c110e72a115bbec36413bd440812dfe9194c58e2", "html_url": "https://github.com/rust-lang/rust/commit/c110e72a115bbec36413bd440812dfe9194c58e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c110e72a115bbec36413bd440812dfe9194c58e2/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3cc7c057d3e926c9a31467cb956a9c6f5320740", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3cc7c057d3e926c9a31467cb956a9c6f5320740", "html_url": "https://github.com/rust-lang/rust/commit/b3cc7c057d3e926c9a31467cb956a9c6f5320740"}], "stats": {"total": 88, "additions": 41, "deletions": 47}, "files": [{"sha": "d4056a349f2cf37cb62197cb6d8ad93429c63f22", "filename": "crates/ra_assists/Cargo.toml", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c110e72a115bbec36413bd440812dfe9194c58e2/crates%2Fra_assists%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c110e72a115bbec36413bd440812dfe9194c58e2/crates%2Fra_assists%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2FCargo.toml?ref=c110e72a115bbec36413bd440812dfe9194c58e2", "patch": "@@ -13,6 +13,4 @@ ra_text_edit = { path = \"../ra_text_edit\" }\n ra_fmt = { path = \"../ra_fmt\" }\n ra_db = { path = \"../ra_db\" }\n hir = { path = \"../ra_hir\", package = \"ra_hir\" }\n-\n-[dev-dependencies]\n test_utils = { path = \"../test_utils\" }"}, {"sha": "353bc41050adbb07c82a3abdc1b6bea25f9e08c2", "filename": "crates/ra_assists/src/introduce_variable.rs", "status": "modified", "additions": 35, "deletions": 45, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/c110e72a115bbec36413bd440812dfe9194c58e2/crates%2Fra_assists%2Fsrc%2Fintroduce_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c110e72a115bbec36413bd440812dfe9194c58e2/crates%2Fra_assists%2Fsrc%2Fintroduce_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fintroduce_variable.rs?ref=c110e72a115bbec36413bd440812dfe9194c58e2", "patch": "@@ -1,3 +1,4 @@\n+use test_utils::tested_by;\n use hir::db::HirDatabase;\n use ra_syntax::{\n     ast::{self, AstNode},\n@@ -13,10 +14,11 @@ pub(crate) fn introduce_variable(mut ctx: AssistCtx<impl HirDatabase>) -> Option\n         return None;\n     }\n     let node = ctx.covering_node();\n-    if !valid_covering_node(node) {\n+    if node.kind() == COMMENT {\n+        tested_by!(introduce_var_in_comment_is_not_applicable);\n         return None;\n     }\n-    let expr = node.ancestors().filter_map(valid_target_expr).next()?;\n+    let expr = node.ancestors().find_map(valid_target_expr)?;\n     let (anchor_stmt, wrap_in_block) = anchor_stmt(expr)?;\n     let indent = anchor_stmt.prev_sibling()?;\n     if indent.kind() != WHITESPACE {\n@@ -41,6 +43,7 @@ pub(crate) fn introduce_variable(mut ctx: AssistCtx<impl HirDatabase>) -> Option\n             false\n         };\n         if is_full_stmt {\n+            tested_by!(test_introduce_var_expr_stmt);\n             if !full_stmt.unwrap().has_semi() {\n                 buf.push_str(\";\");\n             }\n@@ -76,9 +79,6 @@ pub(crate) fn introduce_variable(mut ctx: AssistCtx<impl HirDatabase>) -> Option\n     ctx.build()\n }\n \n-fn valid_covering_node(node: &SyntaxNode) -> bool {\n-    node.kind() != COMMENT\n-}\n /// Check whether the node is a valid expression which can be extracted to a variable.\n /// In general that's true for any expression, but in some cases that would produce invalid code.\n fn valid_target_expr(node: &SyntaxNode) -> Option<&ast::Expr> {\n@@ -104,6 +104,7 @@ fn anchor_stmt(expr: &ast::Expr) -> Option<(&SyntaxNode, bool)> {\n \n         if let Some(expr) = node.parent().and_then(ast::Block::cast).and_then(|it| it.expr()) {\n             if expr.syntax() == node {\n+                tested_by!(test_introduce_var_last_expr);\n                 return Some((node, false));\n             }\n         }\n@@ -120,9 +121,12 @@ fn anchor_stmt(expr: &ast::Expr) -> Option<(&SyntaxNode, bool)> {\n \n #[cfg(test)]\n mod tests {\n-    use super::*;\n+    use test_utils::covers;\n+\n     use crate::helpers::{check_assist_range_not_applicable, check_assist_range, check_assist_range_target};\n \n+    use super::*;\n+\n     #[test]\n     fn test_introduce_var_simple() {\n         check_assist_range(\n@@ -139,8 +143,18 @@ fn foo() {\n         );\n     }\n \n+    #[test]\n+    fn introduce_var_in_comment_is_not_applicable() {\n+        covers!(introduce_var_in_comment_is_not_applicable);\n+        check_assist_range_not_applicable(\n+            introduce_variable,\n+            \"fn main() { 1 + /* <|>comment<|> */ 1; }\",\n+        );\n+    }\n+\n     #[test]\n     fn test_introduce_var_expr_stmt() {\n+        covers!(test_introduce_var_expr_stmt);\n         check_assist_range(\n             introduce_variable,\n             \"\n@@ -150,6 +164,19 @@ fn foo() {\n             \"\n fn foo() {\n     let <|>var_name = 1 + 1;\n+}\",\n+        );\n+        check_assist_range(\n+            introduce_variable,\n+            \"\n+fn foo() {\n+    <|>{ let x = 0; x }<|>\n+    something_else();\n+}\",\n+            \"\n+fn foo() {\n+    let <|>var_name = { let x = 0; x };\n+    something_else();\n }\",\n         );\n     }\n@@ -172,6 +199,7 @@ fn foo() {\n \n     #[test]\n     fn test_introduce_var_last_expr() {\n+        covers!(test_introduce_var_last_expr);\n         check_assist_range(\n             introduce_variable,\n             \"\n@@ -184,10 +212,6 @@ fn foo() {\n     bar(var_name)\n }\",\n         );\n-    }\n-\n-    #[test]\n-    fn test_introduce_var_last_full_expr() {\n         check_assist_range(\n             introduce_variable,\n             \"\n@@ -199,24 +223,7 @@ fn foo() {\n     let <|>var_name = bar(1 + 1);\n     var_name\n }\",\n-        );\n-    }\n-\n-    #[test]\n-    fn test_introduce_var_block_expr_second_to_last() {\n-        check_assist_range(\n-            introduce_variable,\n-            \"\n-fn foo() {\n-    <|>{ let x = 0; x }<|>\n-    something_else();\n-}\",\n-            \"\n-fn foo() {\n-    let <|>var_name = { let x = 0; x };\n-    something_else();\n-}\",\n-        );\n+        )\n     }\n \n     #[test]\n@@ -481,23 +488,6 @@ fn main() {\n         );\n     }\n \n-    #[test]\n-    fn test_introduce_var_in_comment_not_applicable() {\n-        check_assist_range_not_applicable(\n-            introduce_variable,\n-            \"\n-fn main() {\n-    let x = true;\n-    let tuple = match x {\n-        // <|>comment<|>\n-        true => (2 + 2, true)\n-        _ => (0, false)\n-    };\n-}\n-\",\n-        );\n-    }\n-\n     // FIXME: This is not quite correct, but good enough(tm) for the sorting heuristic\n     #[test]\n     fn introduce_var_target() {"}, {"sha": "6c3d75d798f29f95668b98a9c87374dfc75a6f4f", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c110e72a115bbec36413bd440812dfe9194c58e2/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c110e72a115bbec36413bd440812dfe9194c58e2/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=c110e72a115bbec36413bd440812dfe9194c58e2", "patch": "@@ -6,6 +6,7 @@\n //! becomes available.\n \n mod assist_ctx;\n+mod marks;\n \n use itertools::Itertools;\n "}, {"sha": "a29f9f6586ad1579bca10ea4e851550f1f753561", "filename": "crates/ra_assists/src/marks.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c110e72a115bbec36413bd440812dfe9194c58e2/crates%2Fra_assists%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c110e72a115bbec36413bd440812dfe9194c58e2/crates%2Fra_assists%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fmarks.rs?ref=c110e72a115bbec36413bd440812dfe9194c58e2", "patch": "@@ -0,0 +1,5 @@\n+test_utils::marks!(\n+    introduce_var_in_comment_is_not_applicable\n+    test_introduce_var_expr_stmt\n+    test_introduce_var_last_expr\n+);"}]}