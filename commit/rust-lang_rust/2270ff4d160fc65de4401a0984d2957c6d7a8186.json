{"sha": "2270ff4d160fc65de4401a0984d2957c6d7a8186", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyNzBmZjRkMTYwZmM2NWRlNDQwMWEwOTg0ZDI5NTdjNmQ3YTgxODY=", "commit": {"author": {"name": "dvermd", "email": "315743+dvermd@users.noreply.github.com", "date": "2020-10-15T19:56:56Z"}, "committer": {"name": "dvermd", "email": "315743+dvermd@users.noreply.github.com", "date": "2020-10-26T21:34:43Z"}, "message": "clippy_lint: Add test cases", "tree": {"sha": "78109774db5d73b2f9828ec8e3c75598776d1d8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78109774db5d73b2f9828ec8e3c75598776d1d8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2270ff4d160fc65de4401a0984d2957c6d7a8186", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2270ff4d160fc65de4401a0984d2957c6d7a8186", "html_url": "https://github.com/rust-lang/rust/commit/2270ff4d160fc65de4401a0984d2957c6d7a8186", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2270ff4d160fc65de4401a0984d2957c6d7a8186/comments", "author": {"login": "dvermd", "id": 315743, "node_id": "MDQ6VXNlcjMxNTc0Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/315743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dvermd", "html_url": "https://github.com/dvermd", "followers_url": "https://api.github.com/users/dvermd/followers", "following_url": "https://api.github.com/users/dvermd/following{/other_user}", "gists_url": "https://api.github.com/users/dvermd/gists{/gist_id}", "starred_url": "https://api.github.com/users/dvermd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dvermd/subscriptions", "organizations_url": "https://api.github.com/users/dvermd/orgs", "repos_url": "https://api.github.com/users/dvermd/repos", "events_url": "https://api.github.com/users/dvermd/events{/privacy}", "received_events_url": "https://api.github.com/users/dvermd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dvermd", "id": 315743, "node_id": "MDQ6VXNlcjMxNTc0Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/315743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dvermd", "html_url": "https://github.com/dvermd", "followers_url": "https://api.github.com/users/dvermd/followers", "following_url": "https://api.github.com/users/dvermd/following{/other_user}", "gists_url": "https://api.github.com/users/dvermd/gists{/gist_id}", "starred_url": "https://api.github.com/users/dvermd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dvermd/subscriptions", "organizations_url": "https://api.github.com/users/dvermd/orgs", "repos_url": "https://api.github.com/users/dvermd/repos", "events_url": "https://api.github.com/users/dvermd/events{/privacy}", "received_events_url": "https://api.github.com/users/dvermd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b41b38cb7f16e1a622738aff591268083dca2e39", "url": "https://api.github.com/repos/rust-lang/rust/commits/b41b38cb7f16e1a622738aff591268083dca2e39", "html_url": "https://github.com/rust-lang/rust/commit/b41b38cb7f16e1a622738aff591268083dca2e39"}], "stats": {"total": 101, "additions": 91, "deletions": 10}, "files": [{"sha": "3c4def272f7bf364671076cbce6460dcc6af43e3", "filename": "tests/ui/ref_option_ref.rs", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2270ff4d160fc65de4401a0984d2957c6d7a8186/tests%2Fui%2Fref_option_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2270ff4d160fc65de4401a0984d2957c6d7a8186/tests%2Fui%2Fref_option_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fref_option_ref.rs?ref=2270ff4d160fc65de4401a0984d2957c6d7a8186", "patch": "@@ -1,8 +1,41 @@\n #![allow(unused)]\n #![warn(clippy::ref_option_ref)]\n \n-type OptRefU32<'a> = &'a Option<&'a u32>;\n-type OptRef<'a, T> = &'a Option<&'a T>;\n+static THRESHOLD: i32 = 10;\n+static REF_THRESHOLD: &Option<&i32> = &Some(&THRESHOLD);\n+const CONST_THRESHOLD: &i32 = &10;\n+const REF_CONST: &Option<&i32> = &Some(&CONST_THRESHOLD);\n+\n+type RefOptRefU32<'a> = &'a Option<&'a u32>;\n+type RefOptRef<'a, T> = &'a Option<&'a T>;\n+\n+fn foo(data: &Option<&u32>) {}\n+\n+fn bar(data: &u32) -> &Option<&u32> {\n+    &None\n+}\n+\n+struct StructRef<'a> {\n+    data: &'a Option<&'a u32>,\n+}\n+\n+struct StructTupleRef<'a>(u32, &'a Option<&'a u32>);\n+\n+enum EnumRef<'a> {\n+    Variant1(u32),\n+    Variant2(&'a Option<&'a u32>),\n+}\n+\n+trait RefOptTrait {\n+    type A;\n+    fn foo(&self, _: Self::A);\n+}\n+\n+impl RefOptTrait for u32 {\n+    type A = &'static Option<&'static Self>;\n+\n+    fn foo(&self, _: Self::A) {}\n+}\n \n fn main() {\n     let x: &Option<&u32> = &None;"}, {"sha": "16c1de19bb69481d569ad46c4853dd88bee269a6", "filename": "tests/ui/ref_option_ref.stderr", "status": "modified", "additions": 56, "deletions": 8, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/2270ff4d160fc65de4401a0984d2957c6d7a8186/tests%2Fui%2Fref_option_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2270ff4d160fc65de4401a0984d2957c6d7a8186/tests%2Fui%2Fref_option_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fref_option_ref.stderr?ref=2270ff4d160fc65de4401a0984d2957c6d7a8186", "patch": "@@ -1,22 +1,70 @@\n error: since & implements Copy trait, &Option<&T> can be simplifyied into Option<&T>\n-  --> $DIR/ref_option_ref.rs:4:22\n+  --> $DIR/ref_option_ref.rs:5:23\n    |\n-LL | type OptRefU32<'a> = &'a Option<&'a u32>;\n-   |                      ^^^^^^^^^^^^^^^^^^^ help: try: `Option<&'a u32>`\n+LL | static REF_THRESHOLD: &Option<&i32> = &Some(&THRESHOLD);\n+   |                       ^^^^^^^^^^^^^ help: try: `Option<&i32>`\n    |\n    = note: `-D clippy::ref-option-ref` implied by `-D warnings`\n \n error: since & implements Copy trait, &Option<&T> can be simplifyied into Option<&T>\n-  --> $DIR/ref_option_ref.rs:5:22\n+  --> $DIR/ref_option_ref.rs:7:18\n    |\n-LL | type OptRef<'a, T> = &'a Option<&'a T>;\n-   |                      ^^^^^^^^^^^^^^^^^ help: try: `Option<&'a T>`\n+LL | const REF_CONST: &Option<&i32> = &Some(&CONST_THRESHOLD);\n+   |                  ^^^^^^^^^^^^^ help: try: `Option<&i32>`\n \n error: since & implements Copy trait, &Option<&T> can be simplifyied into Option<&T>\n-  --> $DIR/ref_option_ref.rs:8:12\n+  --> $DIR/ref_option_ref.rs:9:25\n+   |\n+LL | type RefOptRefU32<'a> = &'a Option<&'a u32>;\n+   |                         ^^^^^^^^^^^^^^^^^^^ help: try: `Option<&'a u32>`\n+\n+error: since & implements Copy trait, &Option<&T> can be simplifyied into Option<&T>\n+  --> $DIR/ref_option_ref.rs:10:25\n+   |\n+LL | type RefOptRef<'a, T> = &'a Option<&'a T>;\n+   |                         ^^^^^^^^^^^^^^^^^ help: try: `Option<&'a T>`\n+\n+error: since & implements Copy trait, &Option<&T> can be simplifyied into Option<&T>\n+  --> $DIR/ref_option_ref.rs:12:14\n+   |\n+LL | fn foo(data: &Option<&u32>) {}\n+   |              ^^^^^^^^^^^^^ help: try: `Option<&u32>`\n+\n+error: since & implements Copy trait, &Option<&T> can be simplifyied into Option<&T>\n+  --> $DIR/ref_option_ref.rs:14:23\n+   |\n+LL | fn bar(data: &u32) -> &Option<&u32> {\n+   |                       ^^^^^^^^^^^^^ help: try: `Option<&u32>`\n+\n+error: since & implements Copy trait, &Option<&T> can be simplifyied into Option<&T>\n+  --> $DIR/ref_option_ref.rs:19:11\n+   |\n+LL |     data: &'a Option<&'a u32>,\n+   |           ^^^^^^^^^^^^^^^^^^^ help: try: `Option<&'a u32>`\n+\n+error: since & implements Copy trait, &Option<&T> can be simplifyied into Option<&T>\n+  --> $DIR/ref_option_ref.rs:22:32\n+   |\n+LL | struct StructTupleRef<'a>(u32, &'a Option<&'a u32>);\n+   |                                ^^^^^^^^^^^^^^^^^^^ help: try: `Option<&'a u32>`\n+\n+error: since & implements Copy trait, &Option<&T> can be simplifyied into Option<&T>\n+  --> $DIR/ref_option_ref.rs:26:14\n+   |\n+LL |     Variant2(&'a Option<&'a u32>),\n+   |              ^^^^^^^^^^^^^^^^^^^ help: try: `Option<&'a u32>`\n+\n+error: since & implements Copy trait, &Option<&T> can be simplifyied into Option<&T>\n+  --> $DIR/ref_option_ref.rs:35:14\n+   |\n+LL |     type A = &'static Option<&'static Self>;\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Option<&'static Self>`\n+\n+error: since & implements Copy trait, &Option<&T> can be simplifyied into Option<&T>\n+  --> $DIR/ref_option_ref.rs:41:12\n    |\n LL |     let x: &Option<&u32> = &None;\n    |            ^^^^^^^^^^^^^ help: try: `Option<&u32>`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 11 previous errors\n "}]}