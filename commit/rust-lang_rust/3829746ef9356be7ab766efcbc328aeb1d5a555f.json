{"sha": "3829746ef9356be7ab766efcbc328aeb1d5a555f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4Mjk3NDZlZjkzNTZiZTdhYjc2NmVmY2JjMzI4YWViMWQ1YTU1NWY=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-03-30T19:30:36Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-03-30T23:14:21Z"}, "message": "Include bounds in generic reordering diagnostic.\n\nThis commit extends the existing generic re-ordering diagnostic to\ninclude any bounds on the generic parameter, thus producing correct\nsuggestions.", "tree": {"sha": "168fc2fbf1c8c82694285868462e793e8dec5588", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/168fc2fbf1c8c82694285868462e793e8dec5588"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3829746ef9356be7ab766efcbc328aeb1d5a555f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlyf+E0ACgkQAXYLT59T\n8VQrkhAAqoc7Icm2iIlshGzDMyaFkeX89SabCPI/Xf4Re1EjMQAzU/gLYS//Gy9W\ndO2IftjVQBgY951eOeMGNHxWocNiWxa64u3mto2tp0/iWITJd+NVDWpGXl64jwb0\nIq0MP89JU4NePQXZ2hK9WJ/SaoiaOG2gKUmk4fbGXGOReExWGZxhdvt4oPgS93+/\nLm6hY0C1ZoXIzPj8gjlazA37lcWmRJWDNIUtJ0ISu25Ymm7ntH31SIpRjbEp1jbp\noct9nrjkgVkSuFzPrds7DjkTH8MkPafKxDdBrDHzuICqUiTg+IO6BekAuDzqwws9\nyViH4CDvvbk7I3MN3yNrKnPQhCeKz6SEAqmnH6OTNqWpc9po+anBFFZYNbT8UBbU\nofx63yjxApnIWhowOtGbi92AN3qDH2xmsxU+taP1a2v5zT2Q86evula6lTe39Dtt\n8MTAp85C18b3wxGXjLZqaW/S87S2g5p+8c+J9IypsGCkxskZUEbP/0pdsFGiUeln\n2mraGm4PDwB1MY8p8rtD2dz2dVGz+UB4qbO77H5nB1oxd+ramgIuLdeYhR0PuwQw\nKRP6tkoqtTfPk6wu1LMgiT3LrxOjzm/iz9e/bdVDvlH2LwprebmrMEb3O3UfuDyO\nlroSpXW+TtFriqs8aOKsNzErpVk4rXFyDIyipxJLR0wHR/4eLWA=\n=dxgq\n-----END PGP SIGNATURE-----", "payload": "tree 168fc2fbf1c8c82694285868462e793e8dec5588\nparent e782d790f1b63d82af39248bebe027f92d891bcc\nauthor David Wood <david@davidtw.co> 1553974236 +0100\ncommitter David Wood <david@davidtw.co> 1553987661 +0100\n\nInclude bounds in generic reordering diagnostic.\n\nThis commit extends the existing generic re-ordering diagnostic to\ninclude any bounds on the generic parameter, thus producing correct\nsuggestions.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3829746ef9356be7ab766efcbc328aeb1d5a555f", "html_url": "https://github.com/rust-lang/rust/commit/3829746ef9356be7ab766efcbc328aeb1d5a555f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3829746ef9356be7ab766efcbc328aeb1d5a555f/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e782d790f1b63d82af39248bebe027f92d891bcc", "url": "https://api.github.com/repos/rust-lang/rust/commits/e782d790f1b63d82af39248bebe027f92d891bcc", "html_url": "https://github.com/rust-lang/rust/commit/e782d790f1b63d82af39248bebe027f92d891bcc"}], "stats": {"total": 77, "additions": 65, "deletions": 12}, "files": [{"sha": "917564b17dfd04f10c62835c8fbb6d6d8986db5f", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3829746ef9356be7ab766efcbc328aeb1d5a555f/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3829746ef9356be7ab766efcbc328aeb1d5a555f/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=3829746ef9356be7ab766efcbc328aeb1d5a555f", "patch": "@@ -361,17 +361,24 @@ enum GenericPosition {\n \n fn validate_generics_order<'a>(\n     handler: &errors::Handler,\n-    generics: impl Iterator<Item = (ParamKindOrd, Span, Option<String>)>,\n+    generics: impl Iterator<\n+        Item = (\n+            ParamKindOrd,\n+            Option<&'a [GenericBound]>,\n+            Span,\n+            Option<String>\n+        ),\n+    >,\n     pos: GenericPosition,\n     span: Span,\n ) {\n     let mut max_param: Option<ParamKindOrd> = None;\n     let mut out_of_order = FxHashMap::default();\n     let mut param_idents = vec![];\n \n-    for (kind, span, ident) in generics {\n+    for (kind, bounds, span, ident) in generics {\n         if let Some(ident) = ident {\n-            param_idents.push((kind, param_idents.len(), ident));\n+            param_idents.push((kind, bounds, param_idents.len(), ident));\n         }\n         let max_param = &mut max_param;\n         match max_param {\n@@ -385,13 +392,19 @@ fn validate_generics_order<'a>(\n \n     let mut ordered_params = \"<\".to_string();\n     if !out_of_order.is_empty() {\n-        param_idents.sort_by_key(|&(po, i, _)| (po, i));\n+        param_idents.sort_by_key(|&(po, _, i, _)| (po, i));\n         let mut first = true;\n-        for (_, _, ident) in param_idents {\n+        for (_, bounds, _, ident) in param_idents {\n             if !first {\n                 ordered_params += \", \";\n             }\n             ordered_params += &ident;\n+            if let Some(bounds) = bounds {\n+                if !bounds.is_empty() {\n+                    ordered_params += \": \";\n+                    ordered_params += &pprust::bounds_to_string(&bounds);\n+                }\n+            }\n             first = false;\n         }\n     }\n@@ -701,7 +714,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                         GenericArg::Lifetime(..) => ParamKindOrd::Lifetime,\n                         GenericArg::Type(..) => ParamKindOrd::Type,\n                         GenericArg::Const(..) => ParamKindOrd::Const,\n-                    }, arg.span(), None)\n+                    }, None, arg.span(), None)\n                 }), GenericPosition::Arg, generic_args.span());\n \n                 // Type bindings such as `Item=impl Debug` in `Iterator<Item=Debug>`\n@@ -736,16 +749,16 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         }\n \n         validate_generics_order(self.err_handler(), generics.params.iter().map(|param| {\n-            let span = param.ident.span;\n             let ident = Some(param.ident.to_string());\n-            match &param.kind {\n-                GenericParamKind::Lifetime { .. } => (ParamKindOrd::Lifetime, span, ident),\n-                GenericParamKind::Type { .. } => (ParamKindOrd::Type, span, ident),\n+            let (kind, ident) = match &param.kind {\n+                GenericParamKind::Lifetime { .. } => (ParamKindOrd::Lifetime, ident),\n+                GenericParamKind::Type { .. } => (ParamKindOrd::Type, ident),\n                 GenericParamKind::Const { ref ty } => {\n                     let ty = pprust::ty_to_string(ty);\n-                    (ParamKindOrd::Const, span, Some(format!(\"const {}: {}\", param.ident, ty)))\n+                    (ParamKindOrd::Const, Some(format!(\"const {}: {}\", param.ident, ty)))\n                 }\n-            }\n+            };\n+            (kind, Some(&*param.bounds), param.ident.span, ident)\n         }), GenericPosition::Param, generics.span);\n \n         for predicate in &generics.where_clause.predicates {"}, {"sha": "b5c60a1626f53584d522b01f9c92a055197c92bd", "filename": "src/test/ui/issue-59508.fixed", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3829746ef9356be7ab766efcbc328aeb1d5a555f/src%2Ftest%2Fui%2Fissue-59508.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3829746ef9356be7ab766efcbc328aeb1d5a555f/src%2Ftest%2Fui%2Fissue-59508.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-59508.fixed?ref=3829746ef9356be7ab766efcbc328aeb1d5a555f", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+\n+#![allow(dead_code)]\n+\n+// This test checks that generic parameter re-ordering diagnostic suggestions contain bounds.\n+\n+struct A;\n+\n+impl A {\n+    pub fn do_things<'a, 'b: 'a, T>() {\n+    //~^ ERROR lifetime parameters must be declared prior to type parameters\n+        println!(\"panic\");\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "0b39c5d8f2aec802e4a1e80b33232e89778d9010", "filename": "src/test/ui/issue-59508.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3829746ef9356be7ab766efcbc328aeb1d5a555f/src%2Ftest%2Fui%2Fissue-59508.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3829746ef9356be7ab766efcbc328aeb1d5a555f/src%2Ftest%2Fui%2Fissue-59508.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-59508.rs?ref=3829746ef9356be7ab766efcbc328aeb1d5a555f", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+\n+#![allow(dead_code)]\n+\n+// This test checks that generic parameter re-ordering diagnostic suggestions contain bounds.\n+\n+struct A;\n+\n+impl A {\n+    pub fn do_things<T, 'a, 'b: 'a>() {\n+    //~^ ERROR lifetime parameters must be declared prior to type parameters\n+        println!(\"panic\");\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "33e967cebffccd0be1d36165406d158012888cdf", "filename": "src/test/ui/issue-59508.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3829746ef9356be7ab766efcbc328aeb1d5a555f/src%2Ftest%2Fui%2Fissue-59508.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3829746ef9356be7ab766efcbc328aeb1d5a555f/src%2Ftest%2Fui%2Fissue-59508.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-59508.stderr?ref=3829746ef9356be7ab766efcbc328aeb1d5a555f", "patch": "@@ -0,0 +1,8 @@\n+error: lifetime parameters must be declared prior to type parameters\n+  --> $DIR/issue-59508.rs:10:25\n+   |\n+LL |     pub fn do_things<T, 'a, 'b: 'a>() {\n+   |                     ----^^--^^----- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b: 'a, T>`\n+\n+error: aborting due to previous error\n+"}]}