{"sha": "e687dd5ce7fe22faa7c93f9a3ed9391e78991c0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2ODdkZDVjZTdmZTIyZmFhN2M5M2Y5YTNlZDkzOTFlNzg5OTFjMGU=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-03-21T15:59:14Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-03-21T15:59:14Z"}, "message": "Make lltaskptr a regular argument element in args in calls to trans_upcall2.", "tree": {"sha": "9f1e3cec6ab79ee953ee17faf5d69e6690a6a6b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f1e3cec6ab79ee953ee17faf5d69e6690a6a6b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e687dd5ce7fe22faa7c93f9a3ed9391e78991c0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e687dd5ce7fe22faa7c93f9a3ed9391e78991c0e", "html_url": "https://github.com/rust-lang/rust/commit/e687dd5ce7fe22faa7c93f9a3ed9391e78991c0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e687dd5ce7fe22faa7c93f9a3ed9391e78991c0e/comments", "author": null, "committer": null, "parents": [{"sha": "770a49520c2e5b7e369d35174c702bf23e96acb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/770a49520c2e5b7e369d35174c702bf23e96acb8", "html_url": "https://github.com/rust-lang/rust/commit/770a49520c2e5b7e369d35174c702bf23e96acb8"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "420c919e5d18d90640da44e32281ffa3429efeaf", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e687dd5ce7fe22faa7c93f9a3ed9391e78991c0e/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e687dd5ce7fe22faa7c93f9a3ed9391e78991c0e/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=e687dd5ce7fe22faa7c93f9a3ed9391e78991c0e", "patch": "@@ -857,22 +857,22 @@ fn get_upcall(&hashmap[str, ValueRef] upcalls,\n fn trans_upcall(@block_ctxt cx, str name, vec[ValueRef] args) -> result {\n     auto cxx = cx.fcx.ccx;\n     auto lltaskptr = cx.build.PtrToInt(cx.fcx.lltaskptr, T_int());\n-    auto t = trans_upcall2(cx.build, cxx.glues, lltaskptr,\n-                           cxx.upcalls, cxx.tn, cxx.llmod, name, args);\n+    auto args2 = vec(lltaskptr) + args;\n+    auto t = trans_upcall2(cx.build, cxx.glues,\n+                           cxx.upcalls, cxx.tn, cxx.llmod, name, args2);\n     ret res(cx, t);\n }\n \n-fn trans_upcall2(builder b, @glue_fns glues, ValueRef lltaskptr,\n+fn trans_upcall2(builder b, @glue_fns glues,\n                  &hashmap[str, ValueRef] upcalls,\n                  type_names tn, ModuleRef llmod, str name,\n                  vec[ValueRef] args) -> ValueRef {\n-    let int n = (_vec.len[ValueRef](args) as int) + 1;\n+    let int n = (_vec.len[ValueRef](args) as int);\n     let ValueRef llupcall = get_upcall(upcalls, tn, llmod, name, n);\n     llupcall = llvm.LLVMConstPointerCast(llupcall, T_int());\n \n     let ValueRef llglue = glues.upcall_glues.(n);\n     let vec[ValueRef] call_args = vec(llupcall);\n-    call_args += vec( b.ZExtOrBitCast(lltaskptr, T_int()));\n \n     for (ValueRef a in args) {\n         call_args += vec(b.ZExtOrBitCast(a, T_int()));\n@@ -5694,9 +5694,9 @@ fn trans_exit_task_glue(@glue_fns glues,\n     auto entrybb = llvm.LLVMAppendBasicBlock(llfn, _str.buf(\"entry\"));\n     auto build = new_builder(entrybb);\n     auto tptr = build.PtrToInt(lltaskptr, T_int());\n-\n-    trans_upcall2(build, glues, tptr,\n-                  upcalls, tn, llmod, \"upcall_exit\", V_args);\n+    auto V_args2 = vec(tptr) + V_args;\n+    trans_upcall2(build, glues,\n+                  upcalls, tn, llmod, \"upcall_exit\", V_args2);\n     build.RetVoid();\n }\n "}]}