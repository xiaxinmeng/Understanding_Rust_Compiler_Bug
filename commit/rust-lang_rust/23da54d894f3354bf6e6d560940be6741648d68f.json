{"sha": "23da54d894f3354bf6e6d560940be6741648d68f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzZGE1NGQ4OTRmMzM1NGJmNmU2ZDU2MDk0MGJlNjc0MTY0OGQ2OGY=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-01-21T19:59:25Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-01-21T19:59:25Z"}, "message": "Move rustdoc.md into the book\n\nFixes #21430", "tree": {"sha": "ce2da2354867980b8d03c41940f5fb906a99cf2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce2da2354867980b8d03c41940f5fb906a99cf2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23da54d894f3354bf6e6d560940be6741648d68f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23da54d894f3354bf6e6d560940be6741648d68f", "html_url": "https://github.com/rust-lang/rust/commit/23da54d894f3354bf6e6d560940be6741648d68f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23da54d894f3354bf6e6d560940be6741648d68f/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6869645e86c91544b8737b89809bdf10bef536d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/6869645e86c91544b8737b89809bdf10bef536d9", "html_url": "https://github.com/rust-lang/rust/commit/6869645e86c91544b8737b89809bdf10bef536d9"}], "stats": {"total": 592, "additions": 298, "deletions": 294}, "files": [{"sha": "d4a25efec17f6895baeed32178ca69baad319159", "filename": "src/doc/rustdoc.md", "status": "modified", "additions": 1, "deletions": 294, "changes": 295, "blob_url": "https://github.com/rust-lang/rust/blob/23da54d894f3354bf6e6d560940be6741648d68f/src%2Fdoc%2Frustdoc.md", "raw_url": "https://github.com/rust-lang/rust/raw/23da54d894f3354bf6e6d560940be6741648d68f/src%2Fdoc%2Frustdoc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc.md?ref=23da54d894f3354bf6e6d560940be6741648d68f", "patch": "@@ -1,296 +1,3 @@\n % Rust Documentation\n \n-`rustdoc` is the built-in tool for generating documentation. It integrates\n-with the compiler to provide accurate hyperlinking between usage of types and\n-their documentation. Furthermore, by not using a separate parser, it will\n-never reject your valid Rust code.\n-\n-# Creating Documentation\n-\n-Documenting Rust APIs is quite simple. To document a given item, we have \"doc\n-comments\":\n-\n-~~~\n-# #![allow(unused_attribute)]\n-// the \"link\" crate attribute is currently required for rustdoc, but normally\n-// isn't needed.\n-#![crate_id = \"universe\"]\n-#![crate_type=\"lib\"]\n-\n-//! Tools for dealing with universes (this is a doc comment, and is shown on\n-//! the crate index page. The ! makes it apply to the parent of the comment,\n-//! rather than what follows).\n-\n-# mod workaround_the_outer_function_rustdoc_inserts {\n-/// Widgets are very common (this is a doc comment, and will show up on\n-/// Widget's documentation).\n-pub struct Widget {\n-\t/// All widgets have a purpose (this is a doc comment, and will show up\n-\t/// the field's documentation).\n-\tpurpose: String,\n-\t/// Humans are not allowed to understand some widgets\n-\tunderstandable: bool\n-}\n-\n-pub fn recalibrate() {\n-\t//! Recalibrate a pesky universe (this is also a doc comment, like above,\n-\t//! the documentation will be applied to the *parent* item, so\n-\t//! `recalibrate`).\n-\t/* ... */\n-}\n-# }\n-~~~\n-\n-Documentation can also be controlled via the `doc` attribute on items. This is\n-implicitly done by the compiler when using the above form of doc comments\n-(converting the slash-based comments to `#[doc]` attributes).\n-\n-~~~\n-#[doc = \"\n-Calculates the factorial of a number.\n-\n-Given the input integer `n`, this function will calculate `n!` and return it.\n-\"]\n-pub fn factorial(n: int) -> int { if n < 2 {1} else {n * factorial(n - 1)} }\n-# fn main() {}\n-~~~\n-\n-The `doc` attribute can also be used to control how rustdoc emits documentation\n-in some cases.\n-\n-```\n-// Rustdoc will inline documentation of a `pub use` into this crate when the\n-// `pub use` reaches across crates, but this behavior can also be disabled.\n-#[doc(no_inline)]\n-pub use std::option::Option;\n-# fn main() {}\n-```\n-\n-Doc comments are markdown, and are currently parsed with the\n-[hoedown][hoedown] library. rustdoc does not yet do any fanciness such as\n-referencing other items inline, like javadoc's `@see`. One exception to this\n-is that the first paragraph will be used as the \"summary\" of an item in the\n-generated documentation:\n-\n-~~~\n-/// A whizbang. Does stuff. (this line is the summary)\n-///\n-/// Whizbangs are ...\n-struct Whizbang;\n-~~~\n-\n-To generate the docs, run `rustdoc universe.rs`. By default, it generates a\n-directory called `doc`, with the documentation for `universe` being in\n-`doc/universe/index.html`. If you are using other crates with `extern crate`,\n-rustdoc will even link to them when you use their types, as long as their\n-documentation has already been generated by a previous run of rustdoc, or the\n-crate advertises that its documentation is hosted at a given URL.\n-\n-The generated output can be controlled with the `doc` crate attribute, which\n-is how the above advertisement works. An example from the `libstd`\n-documentation:\n-\n-~~~\n-#[doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n-      html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-      html_root_url = \"http://doc.rust-lang.org/\")];\n-~~~\n-\n-The `html_root_url` is the prefix that rustdoc will apply to any references to\n-that crate's types etc.\n-\n-rustdoc can also generate JSON, for consumption by other tools, with\n-`rustdoc --output-format json`, and also consume already-generated JSON with\n-`rustdoc --input-format json`.\n-\n-rustdoc also supports personalizing the output from crates' documentation,\n-similar to markdown options.\n-\n-- `--html-in-header FILE`: includes the contents of `FILE` at the\n-  end of the `<head>...</head>` section.\n-- `--html-before-content FILE`: includes the contents of `FILE`\n-  directly after `<body>`, before the rendered content (including the\n-  search bar).\n-- `--html-after-content FILE`: includes the contents of `FILE`\n-  after all the rendered content.\n-\n-# Using the Documentation\n-\n-The web pages generated by rustdoc present the same logical hierarchy that one\n-writes a library with. Every kind of item (function, struct, etc) has its own\n-color, and one can always click on a colored type to jump to its\n-documentation. There is a search bar at the top, which is powered by some\n-JavaScript and a statically-generated search index. No special web server is\n-required for the search.\n-\n-[hoedown]: https://github.com/hoedown/hoedown\n-\n-# Testing the Documentation\n-\n-`rustdoc` has support for testing code examples which appear in the\n-documentation. This is helpful for keeping code examples up to date with the\n-source code.\n-\n-To test documentation, the `--test` argument is passed to rustdoc:\n-\n-~~~ {.sh}\n-rustdoc --test crate.rs\n-~~~\n-\n-## Defining tests\n-\n-Rust documentation currently uses the markdown format, and rustdoc treats all\n-code blocks as testable-by-default unless they carry a language tag of another\n-language. In order to not run a test over a block of code, the `ignore` string\n-can be added to the three-backtick form of markdown code block.\n-\n-~~~md\n-```\n-// This is a testable code block\n-```\n-\n-```rust{.example}\n-// This is rust and also testable\n-```\n-\n-```ignore\n-// This is not a testable code block\n-```\n-\n-    // This is a testable code block (4-space indent)\n-\n-```sh\n-# this is shell code and not tested\n-```\n-~~~\n-\n-You can specify that the test's execution should fail with the `should_fail`\n-directive.\n-\n-~~~md\n-```should_fail\n-// This code block is expected to generate a panic when run\n-```\n-~~~\n-\n-You can specify that the code block should be compiled but not run with the\n-`no_run` directive.\n-\n-~~~md\n-```no_run\n-// This code will be compiled but not executed\n-```\n-~~~\n-\n-Lastly, you can specify that a code block be compiled as if `--test`\n-were passed to the compiler using the `test_harness` directive.\n-\n-~~~md\n-```test_harness\n-#[test]\n-fn foo() {\n-    panic!(\"oops! (will run & register as a failed test)\")\n-}\n-```\n-~~~\n-\n-Rustdoc also supplies some extra sugar for helping with some tedious\n-documentation examples. If a line is prefixed with `# `, then the line\n-will not show up in the HTML documentation, but it will be used when\n-testing the code block (NB. the space after the `#` is required, so\n-that one can still write things like `#[derive(Eq)]`).\n-\n-~~~md\n-```\n-# /!\\ The three following lines are comments, which are usually stripped off by\n-# the doc-generating tool.  In order to display them anyway in this particular\n-# case, the character following the leading '#' is not a usual space like in\n-# these first five lines but a non breakable one.\n-#\u00a0// showing 'fib' in this documentation would just be tedious and detracts from\n-#\u00a0// what's actually being documented.\n-#\u00a0fn fib(n: int) { n + 2 }\n-\n-spawn(move || { fib(200); })\n-```\n-~~~\n-\n-The documentation online would look like `spawn(move || { fib(200); })`, but when\n-testing this code, the `fib` function will be included (so it can compile).\n-\n-Rustdoc will automatically add a `main()` wrapper around your code, and in the right\n-place. For example:\n-\n-```\n-/// ```\n-/// use std::rc::Rc;\n-///\n-/// let five = Rc::new(5);\n-/// ```\n-# fn foo() {}\n-```\n-\n-This will end up testing:\n-\n-```\n-fn main() {\n-    use std::rc::Rc;\n-    let five = Rc::new(5);\n-}\n-```\n-\n-Here's the full algorithm:\n-\n-1. Given a code block, if it does not contain `fn main`, it is wrapped in `fn main() { your_code }`\n-2. Given that result, if it contains no `extern crate` directives but it also\n-   contains the name of the crate being tested, then `extern crate <name>` is\n-   injected at the top.\n-3. Some common `allow` attributes are added for documentation examples at the top.\n-\n-## Running tests (advanced)\n-\n-Running tests often requires some special configuration to filter tests, find\n-libraries, or try running ignored examples. The testing framework that rustdoc\n-uses is built on crate `test`, which is also used when you compile crates with\n-rustc's `--test` flag. Extra arguments can be passed to rustdoc's test harness\n-with the `--test-args` flag.\n-\n-~~~console\n-# Only run tests containing 'foo' in their name\n-$ rustdoc --test lib.rs --test-args 'foo'\n-\n-# See what's possible when running tests\n-$ rustdoc --test lib.rs --test-args '--help'\n-~~~\n-\n-When testing a library, code examples will often show how functions are used,\n-and this code often requires `use`-ing paths from the crate. To accommodate this,\n-rustdoc will implicitly add `extern crate <crate>;` where `<crate>` is the name of\n-the crate being tested to the top of each code example. This means that rustdoc\n-must be able to find a compiled version of the library crate being tested. Extra\n-search paths may be added via the `-L` flag to `rustdoc`.\n-\n-# Standalone Markdown files\n-\n-As well as Rust crates, rustdoc supports rendering pure Markdown files\n-into HTML and testing the code snippets from them. A Markdown file is\n-detected by a `.md` or `.markdown` extension.\n-\n-There are 4 options to modify the output that Rustdoc creates.\n-\n-- `--markdown-css PATH`: adds a `<link rel=\"stylesheet\">` tag pointing to `PATH`.\n-- `--html-in-header FILE`: includes the contents of `FILE` at the\n-  end of the `<head>...</head>` section.\n-- `--html-before-content FILE`: includes the contents of `FILE`\n-  directly after `<body>`, before the rendered content (including the\n-  title).\n-- `--html-after-content FILE`: includes the contents of `FILE`\n-  directly before `</body>`, after all the rendered content.\n-\n-All of these can be specified multiple times, and they are output in\n-the order in which they are specified. The first line of the file being rendered must\n-be the title, prefixed with `%` (e.g. this page has `% Rust\n-Documentation` on the first line).\n-\n-Like with a Rust crate, the `--test` argument will run the code\n-examples to check they compile, and obeys any `--test-args` flags. The\n-tests are named after the last `#` heading.\n+This has been moved [into the book](book/documentation.html)."}, {"sha": "62d12cc3d27ecb1cabaa97e7e11f4e626396d213", "filename": "src/doc/trpl/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23da54d894f3354bf6e6d560940be6741648d68f/src%2Fdoc%2Ftrpl%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/23da54d894f3354bf6e6d560940be6741648d68f/src%2Fdoc%2Ftrpl%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2FSUMMARY.md?ref=23da54d894f3354bf6e6d560940be6741648d68f", "patch": "@@ -28,6 +28,7 @@\n     * [Traits](traits.md)\n     * [Threads](threads.md)\n     * [Error Handling](error-handling.md)\n+    * [Documentation](documentation.md)\n * [III: Advanced Topics](advanced.md)\n     * [FFI](ffi.md)\n     * [Unsafe Code](unsafe.md)"}, {"sha": "0b686eb76dbfb2d5dcf1eba88d965d1c2b069cc7", "filename": "src/doc/trpl/documentation.md", "status": "added", "additions": 296, "deletions": 0, "changes": 296, "blob_url": "https://github.com/rust-lang/rust/blob/23da54d894f3354bf6e6d560940be6741648d68f/src%2Fdoc%2Ftrpl%2Fdocumentation.md", "raw_url": "https://github.com/rust-lang/rust/raw/23da54d894f3354bf6e6d560940be6741648d68f/src%2Fdoc%2Ftrpl%2Fdocumentation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fdocumentation.md?ref=23da54d894f3354bf6e6d560940be6741648d68f", "patch": "@@ -0,0 +1,296 @@\n+% Rust Documentation\n+\n+`rustdoc` is the built-in tool for generating documentation. It integrates\n+with the compiler to provide accurate hyperlinking between usage of types and\n+their documentation. Furthermore, by not using a separate parser, it will\n+never reject your valid Rust code.\n+\n+# Creating Documentation\n+\n+Documenting Rust APIs is quite simple. To document a given item, we have \"doc\n+comments\":\n+\n+~~~\n+# #![allow(unused_attribute)]\n+// the \"link\" crate attribute is currently required for rustdoc, but normally\n+// isn't needed.\n+#![crate_id = \"universe\"]\n+#![crate_type=\"lib\"]\n+\n+//! Tools for dealing with universes (this is a doc comment, and is shown on\n+//! the crate index page. The ! makes it apply to the parent of the comment,\n+//! rather than what follows).\n+\n+# mod workaround_the_outer_function_rustdoc_inserts {\n+/// Widgets are very common (this is a doc comment, and will show up on\n+/// Widget's documentation).\n+pub struct Widget {\n+\t/// All widgets have a purpose (this is a doc comment, and will show up\n+\t/// the field's documentation).\n+\tpurpose: String,\n+\t/// Humans are not allowed to understand some widgets\n+\tunderstandable: bool\n+}\n+\n+pub fn recalibrate() {\n+\t//! Recalibrate a pesky universe (this is also a doc comment, like above,\n+\t//! the documentation will be applied to the *parent* item, so\n+\t//! `recalibrate`).\n+\t/* ... */\n+}\n+# }\n+~~~\n+\n+Documentation can also be controlled via the `doc` attribute on items. This is\n+implicitly done by the compiler when using the above form of doc comments\n+(converting the slash-based comments to `#[doc]` attributes).\n+\n+~~~\n+#[doc = \"\n+Calculates the factorial of a number.\n+\n+Given the input integer `n`, this function will calculate `n!` and return it.\n+\"]\n+pub fn factorial(n: int) -> int { if n < 2 {1} else {n * factorial(n - 1)} }\n+# fn main() {}\n+~~~\n+\n+The `doc` attribute can also be used to control how rustdoc emits documentation\n+in some cases.\n+\n+```\n+// Rustdoc will inline documentation of a `pub use` into this crate when the\n+// `pub use` reaches across crates, but this behavior can also be disabled.\n+#[doc(no_inline)]\n+pub use std::option::Option;\n+# fn main() {}\n+```\n+\n+Doc comments are markdown, and are currently parsed with the\n+[hoedown][hoedown] library. rustdoc does not yet do any fanciness such as\n+referencing other items inline, like javadoc's `@see`. One exception to this\n+is that the first paragraph will be used as the \"summary\" of an item in the\n+generated documentation:\n+\n+~~~\n+/// A whizbang. Does stuff. (this line is the summary)\n+///\n+/// Whizbangs are ...\n+struct Whizbang;\n+~~~\n+\n+To generate the docs, run `rustdoc universe.rs`. By default, it generates a\n+directory called `doc`, with the documentation for `universe` being in\n+`doc/universe/index.html`. If you are using other crates with `extern crate`,\n+rustdoc will even link to them when you use their types, as long as their\n+documentation has already been generated by a previous run of rustdoc, or the\n+crate advertises that its documentation is hosted at a given URL.\n+\n+The generated output can be controlled with the `doc` crate attribute, which\n+is how the above advertisement works. An example from the `libstd`\n+documentation:\n+\n+~~~\n+#[doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+      html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n+      html_root_url = \"http://doc.rust-lang.org/\")];\n+~~~\n+\n+The `html_root_url` is the prefix that rustdoc will apply to any references to\n+that crate's types etc.\n+\n+rustdoc can also generate JSON, for consumption by other tools, with\n+`rustdoc --output-format json`, and also consume already-generated JSON with\n+`rustdoc --input-format json`.\n+\n+rustdoc also supports personalizing the output from crates' documentation,\n+similar to markdown options.\n+\n+- `--html-in-header FILE`: includes the contents of `FILE` at the\n+  end of the `<head>...</head>` section.\n+- `--html-before-content FILE`: includes the contents of `FILE`\n+  directly after `<body>`, before the rendered content (including the\n+  search bar).\n+- `--html-after-content FILE`: includes the contents of `FILE`\n+  after all the rendered content.\n+\n+# Using the Documentation\n+\n+The web pages generated by rustdoc present the same logical hierarchy that one\n+writes a library with. Every kind of item (function, struct, etc) has its own\n+color, and one can always click on a colored type to jump to its\n+documentation. There is a search bar at the top, which is powered by some\n+JavaScript and a statically-generated search index. No special web server is\n+required for the search.\n+\n+[hoedown]: https://github.com/hoedown/hoedown\n+\n+# Testing the Documentation\n+\n+`rustdoc` has support for testing code examples which appear in the\n+documentation. This is helpful for keeping code examples up to date with the\n+source code.\n+\n+To test documentation, the `--test` argument is passed to rustdoc:\n+\n+~~~ {.sh}\n+rustdoc --test crate.rs\n+~~~\n+\n+## Defining tests\n+\n+Rust documentation currently uses the markdown format, and rustdoc treats all\n+code blocks as testable-by-default unless they carry a language tag of another\n+language. In order to not run a test over a block of code, the `ignore` string\n+can be added to the three-backtick form of markdown code block.\n+\n+~~~md\n+```\n+// This is a testable code block\n+```\n+\n+```rust{.example}\n+// This is rust and also testable\n+```\n+\n+```ignore\n+// This is not a testable code block\n+```\n+\n+    // This is a testable code block (4-space indent)\n+\n+```sh\n+# this is shell code and not tested\n+```\n+~~~\n+\n+You can specify that the test's execution should fail with the `should_fail`\n+directive.\n+\n+~~~md\n+```should_fail\n+// This code block is expected to generate a panic when run\n+```\n+~~~\n+\n+You can specify that the code block should be compiled but not run with the\n+`no_run` directive.\n+\n+~~~md\n+```no_run\n+// This code will be compiled but not executed\n+```\n+~~~\n+\n+Lastly, you can specify that a code block be compiled as if `--test`\n+were passed to the compiler using the `test_harness` directive.\n+\n+~~~md\n+```test_harness\n+#[test]\n+fn foo() {\n+    panic!(\"oops! (will run & register as a failed test)\")\n+}\n+```\n+~~~\n+\n+Rustdoc also supplies some extra sugar for helping with some tedious\n+documentation examples. If a line is prefixed with `# `, then the line\n+will not show up in the HTML documentation, but it will be used when\n+testing the code block (NB. the space after the `#` is required, so\n+that one can still write things like `#[derive(Eq)]`).\n+\n+~~~md\n+```\n+# /!\\ The three following lines are comments, which are usually stripped off by\n+# the doc-generating tool.  In order to display them anyway in this particular\n+# case, the character following the leading '#' is not a usual space like in\n+# these first five lines but a non breakable one.\n+#\u00a0// showing 'fib' in this documentation would just be tedious and detracts from\n+#\u00a0// what's actually being documented.\n+#\u00a0fn fib(n: int) { n + 2 }\n+\n+spawn(move || { fib(200); })\n+```\n+~~~\n+\n+The documentation online would look like `spawn(move || { fib(200); })`, but when\n+testing this code, the `fib` function will be included (so it can compile).\n+\n+Rustdoc will automatically add a `main()` wrapper around your code, and in the right\n+place. For example:\n+\n+```\n+/// ```\n+/// use std::rc::Rc;\n+///\n+/// let five = Rc::new(5);\n+/// ```\n+# fn foo() {}\n+```\n+\n+This will end up testing:\n+\n+```\n+fn main() {\n+    use std::rc::Rc;\n+    let five = Rc::new(5);\n+}\n+```\n+\n+Here's the full algorithm:\n+\n+1. Given a code block, if it does not contain `fn main`, it is wrapped in `fn main() { your_code }`\n+2. Given that result, if it contains no `extern crate` directives but it also\n+   contains the name of the crate being tested, then `extern crate <name>` is\n+   injected at the top.\n+3. Some common `allow` attributes are added for documentation examples at the top.\n+\n+## Running tests (advanced)\n+\n+Running tests often requires some special configuration to filter tests, find\n+libraries, or try running ignored examples. The testing framework that rustdoc\n+uses is built on crate `test`, which is also used when you compile crates with\n+rustc's `--test` flag. Extra arguments can be passed to rustdoc's test harness\n+with the `--test-args` flag.\n+\n+~~~console\n+# Only run tests containing 'foo' in their name\n+$ rustdoc --test lib.rs --test-args 'foo'\n+\n+# See what's possible when running tests\n+$ rustdoc --test lib.rs --test-args '--help'\n+~~~\n+\n+When testing a library, code examples will often show how functions are used,\n+and this code often requires `use`-ing paths from the crate. To accommodate this,\n+rustdoc will implicitly add `extern crate <crate>;` where `<crate>` is the name of\n+the crate being tested to the top of each code example. This means that rustdoc\n+must be able to find a compiled version of the library crate being tested. Extra\n+search paths may be added via the `-L` flag to `rustdoc`.\n+\n+# Standalone Markdown files\n+\n+As well as Rust crates, rustdoc supports rendering pure Markdown files\n+into HTML and testing the code snippets from them. A Markdown file is\n+detected by a `.md` or `.markdown` extension.\n+\n+There are 4 options to modify the output that Rustdoc creates.\n+\n+- `--markdown-css PATH`: adds a `<link rel=\"stylesheet\">` tag pointing to `PATH`.\n+- `--html-in-header FILE`: includes the contents of `FILE` at the\n+  end of the `<head>...</head>` section.\n+- `--html-before-content FILE`: includes the contents of `FILE`\n+  directly after `<body>`, before the rendered content (including the\n+  title).\n+- `--html-after-content FILE`: includes the contents of `FILE`\n+  directly before `</body>`, after all the rendered content.\n+\n+All of these can be specified multiple times, and they are output in\n+the order in which they are specified. The first line of the file being rendered must\n+be the title, prefixed with `%` (e.g. this page has `% Rust\n+Documentation` on the first line).\n+\n+Like with a Rust crate, the `--test` argument will run the code\n+examples to check they compile, and obeys any `--test-args` flags. The\n+tests are named after the last `#` heading."}]}