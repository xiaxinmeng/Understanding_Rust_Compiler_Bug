{"sha": "4483c2bdf64e213627998ac7e2340de7dafb3037", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0ODNjMmJkZjY0ZTIxMzYyNzk5OGFjN2UyMzQwZGU3ZGFmYjMwMzc=", "commit": {"author": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-09-06T17:20:09Z"}, "committer": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-09-09T00:32:03Z"}, "message": "dont support blocks", "tree": {"sha": "7ff9508a078b02244a9a5d4098e02734fe7b852c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ff9508a078b02244a9a5d4098e02734fe7b852c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4483c2bdf64e213627998ac7e2340de7dafb3037", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4483c2bdf64e213627998ac7e2340de7dafb3037", "html_url": "https://github.com/rust-lang/rust/commit/4483c2bdf64e213627998ac7e2340de7dafb3037", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4483c2bdf64e213627998ac7e2340de7dafb3037/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b2913814b95e1b8f123da59ddecb1bc6b3813af", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b2913814b95e1b8f123da59ddecb1bc6b3813af", "html_url": "https://github.com/rust-lang/rust/commit/9b2913814b95e1b8f123da59ddecb1bc6b3813af"}], "stats": {"total": 70, "additions": 16, "deletions": 54}, "files": [{"sha": "27849e4bdb0bf96014feeafeae44726286b97b39", "filename": "compiler/rustc_middle/src/mir/abstract_const.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4483c2bdf64e213627998ac7e2340de7dafb3037/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fabstract_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4483c2bdf64e213627998ac7e2340de7dafb3037/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fabstract_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fabstract_const.rs?ref=4483c2bdf64e213627998ac7e2340de7dafb3037", "patch": "@@ -17,7 +17,6 @@ pub enum Node<'tcx> {\n     Binop(mir::BinOp, NodeId, NodeId),\n     UnaryOp(mir::UnOp, NodeId),\n     FunctionCall(NodeId, &'tcx [NodeId]),\n-    Block(&'tcx [NodeId], Option<NodeId>),\n     Cast(NodeId, Ty<'tcx>),\n }\n "}, {"sha": "02ea34ea9743f93d1906421577fde829ac355e8e", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4483c2bdf64e213627998ac7e2340de7dafb3037/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4483c2bdf64e213627998ac7e2340de7dafb3037/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=4483c2bdf64e213627998ac7e2340de7dafb3037", "patch": "@@ -159,8 +159,7 @@ where\n                 self.visit_const(leaf)\n             }\n             ACNode::Cast(_, ty) => self.visit_ty(ty),\n-            ACNode::Block(_, _)\n-            | ACNode::Binop(..)\n+            ACNode::Binop(..)\n             | ACNode::UnaryOp(..)\n             | ACNode::FunctionCall(_, _) => ControlFlow::CONTINUE,\n         })"}, {"sha": "77fe1f514d9019d11178d182c6e350c1061dcdf9", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 11, "deletions": 40, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/4483c2bdf64e213627998ac7e2340de7dafb3037/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4483c2bdf64e213627998ac7e2340de7dafb3037/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=4483c2bdf64e213627998ac7e2340de7dafb3037", "patch": "@@ -102,8 +102,7 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n \n                         ControlFlow::CONTINUE\n                     }\n-                    Node::Block(_, _)\n-                    | Node::Binop(_, _, _)\n+                    Node::Binop(_, _, _)\n                     | Node::UnaryOp(_, _)\n                     | Node::FunctionCall(_, _) => ControlFlow::CONTINUE,\n                 });\n@@ -288,10 +287,6 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n                 self.nodes[func].used = true;\n                 nodes.iter().for_each(|&n| self.nodes[n].used = true);\n             }\n-            Node::Block(stmts, opt_expr) => {\n-                stmts.iter().for_each(|&id| self.nodes[id].used = true);\n-                opt_expr.map(|e| self.nodes[e].used = true);\n-            }\n             Node::Cast(operand, _) => {\n                 self.nodes[operand].used = true;\n             }\n@@ -378,22 +373,14 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n                 let arg = self.recurse_build(arg)?;\n                 self.add_node(Node::UnaryOp(op, arg), node.span)\n             },\n-            ExprKind::Block { body } => {\n-                let mut stmts = Vec::with_capacity(body.stmts.len());\n-                for &id in body.stmts.iter() {\n-                    match &self.body.stmts[id].kind {\n-                        thir::StmtKind::Let { .. } => return self.error(\n-                                Some(node.span),\n-                                \"let statements are not supported in generic constants\",\n-                            ).map(|never| never),\n-                        thir::StmtKind::Expr { expr, .. } => stmts.push(self.recurse_build(*expr)?),\n-                    }\n-                };\n-                let stmts = self.tcx.arena.alloc_slice(&stmts);\n-                let opt_expr = body.expr.map(|e| self.recurse_build(e)).transpose()?;\n-                self.add_node(Node::Block(stmts, opt_expr), node.span)\n-            }\n-            \n+            // this is necessary so that the following compiles:\n+            //\n+            // ```\n+            // fn foo<const N: usize>(a: [(); N + 1]) {\n+            //     bar::<{ N + 1 }>();\n+            // }\n+            // ```\n+            ExprKind::Block { body: thir::Block { stmts: box [], expr: Some(e), .. }} => self.recurse_build(*e)?,\n             // ExprKind::Use happens when a `hir::ExprKind::Cast` is a \n             // \"coercion cast\" i.e. using a coercion or is a no-op.\n             // this is important so that `N as usize as usize` doesnt unify with `N as usize`\n@@ -411,6 +398,7 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n             | ExprKind::Deref { .. }\n             | ExprKind::Repeat { .. }\n             | ExprKind::Array { .. }\n+            | ExprKind::Block { .. }\n             | ExprKind::Tuple { .. }\n             | ExprKind::Index { .. }\n             | ExprKind::Field { .. }\n@@ -521,12 +509,6 @@ where\n                 recurse(tcx, ct.subtree(func), f)?;\n                 args.iter().try_for_each(|&arg| recurse(tcx, ct.subtree(arg), f))\n             }\n-            Node::Block(stmts, opt_expr) => {\n-                for id in stmts.iter().copied().chain(opt_expr) {\n-                    recurse(tcx, ct.subtree(id), f)?;\n-                }\n-                ControlFlow::CONTINUE\n-            }\n             Node::Cast(operand, _) => recurse(tcx, ct.subtree(operand), f),\n         }\n     }\n@@ -615,19 +597,8 @@ pub(super) fn try_unify<'tcx>(\n         {\n             try_unify(tcx, a.subtree(a_operand), b.subtree(b_operand))\n         }\n-        (Node::Block(a_stmts, a_opt_expr), Node::Block(b_stmts, b_opt_expr))\n-            if a_stmts.len() == b_stmts.len() => {\n-            a_stmts.iter().zip(b_stmts.iter()).all(|(&a_stmt, &b_stmt)| {\n-                try_unify(tcx, a.subtree(a_stmt), b.subtree(b_stmt))\n-            }) && match (a_opt_expr, b_opt_expr) {\n-                (Some(a_expr), Some(b_expr)) => try_unify(tcx, a.subtree(a_expr), b.subtree(b_expr)),\n-                (None, None) => true,\n-                _ => false,\n-            }\n-        }\n         // use this over `_ => false` to make adding variants to `Node` less error prone\n-        (Node::Block(..), _) \n-        | (Node::Cast(..), _) \n+        (Node::Cast(..), _) \n         | (Node::FunctionCall(..), _) \n         | (Node::UnaryOp(..), _) \n         | (Node::Binop(..), _) "}, {"sha": "d9ea2591553582a1e91e09eaf3c0a2e1e61903c4", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4483c2bdf64e213627998ac7e2340de7dafb3037/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4483c2bdf64e213627998ac7e2340de7dafb3037/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=4483c2bdf64e213627998ac7e2340de7dafb3037", "patch": "@@ -844,8 +844,7 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n                         self.visit_const(leaf)\n                     }\n                     Node::Cast(_, ty) => self.visit_ty(ty),\n-                    Node::Block(_, _)\n-                    | Node::Binop(..)\n+                    Node::Binop(..)\n                     | Node::UnaryOp(..)\n                     | Node::FunctionCall(_, _) => ControlFlow::CONTINUE,\n                 })"}, {"sha": "3da91b19a5ed95c95dc85830599f0972d10a7de3", "filename": "src/test/ui/const-generics/generic_const_exprs/unused_expr.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4483c2bdf64e213627998ac7e2340de7dafb3037/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funused_expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4483c2bdf64e213627998ac7e2340de7dafb3037/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funused_expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funused_expr.stderr?ref=4483c2bdf64e213627998ac7e2340de7dafb3037", "patch": "@@ -2,29 +2,23 @@ error: overly complex generic constant\n   --> $DIR/unused_expr.rs:4:34\n    |\n LL | fn add<const N: usize>() -> [u8; { N + 1; 5 }] {\n-   |                                  ^^-----^^^^^\n-   |                                    |\n-   |                                    dead code\n+   |                                  ^^^^^^^^^^^^ unsupported operation in generic constant, this may be supported in the future\n    |\n    = help: consider moving this anonymous constant into a `const` function\n \n error: overly complex generic constant\n   --> $DIR/unused_expr.rs:9:34\n    |\n LL | fn div<const N: usize>() -> [u8; { N / 1; 5 }] {\n-   |                                  ^^-----^^^^^\n-   |                                    |\n-   |                                    dead code\n+   |                                  ^^^^^^^^^^^^ unsupported operation in generic constant, this may be supported in the future\n    |\n    = help: consider moving this anonymous constant into a `const` function\n \n error: overly complex generic constant\n   --> $DIR/unused_expr.rs:16:38\n    |\n LL | fn fn_call<const N: usize>() -> [u8; { foo(N); 5 }] {\n-   |                                      ^^------^^^^^\n-   |                                        |\n-   |                                        dead code\n+   |                                      ^^^^^^^^^^^^^ unsupported operation in generic constant, this may be supported in the future\n    |\n    = help: consider moving this anonymous constant into a `const` function\n "}]}