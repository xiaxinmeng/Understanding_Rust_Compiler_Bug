{"sha": "fe1293f8a95d7a79ce2ef95bdc97241e92ffe5e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlMTI5M2Y4YTk1ZDdhNzljZTJlZjk1YmRjOTcyNDFlOTJmZmU1ZTU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-02-21T15:29:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-21T15:29:52Z"}, "message": "Rollup merge of #48335 - Manishearth:shortcut-links, r=QuietMisdreavus\n\nImplement implied shortcut links for intra-rustdoc-links\n\ncc https://github.com/rust-lang/rust/issues/43466\n\nNeeds https://github.com/google/pulldown-cmark/pull/126\n\nr? @QuietMisdreavus", "tree": {"sha": "3158f7f3d3184760a41f03c607fac5cce56fef07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3158f7f3d3184760a41f03c607fac5cce56fef07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe1293f8a95d7a79ce2ef95bdc97241e92ffe5e5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJajZBwCRBK7hj4Ov3rIwAAdHIIAF+cW4VqbqD0Qrri2HpEP3SE\nHfluGFDIcCUHUVCt1ueXS3SD/xuVI4p477F1SIPnmSYfO/UXY9K/mm5/9ecCC7hq\nLI6gbFxpBL/U+50A0GeBFnLFT+0H3pXotDebHnUnSnTsEot+TTDnXtZJIja5mDVl\n12ccXIYU9+wbgU7YP0Jyg1HC/FdFZyZ5GimhV8ymgeUV3y6GP8fgTqmyx98/pb6c\nC8pMG+CcYix5uBLXJyJH/0zeiQt+WPYbgPgo8OchOFJp8OmphYBXRgd2r6h5Nx4D\nsmu+Er9GVKG0O/BJiyDYHY5vrcxG8ohCo9hMroYUce58qB+uuAAtxORYc8MIf90=\n=0lrA\n-----END PGP SIGNATURE-----\n", "payload": "tree 3158f7f3d3184760a41f03c607fac5cce56fef07\nparent 27c6ff5c7ca6f23480f5676f94d06497cdab4b7a\nparent 5fdc10c68b3b5a42b17555be18baf5d7d60d55e6\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1519226992 +0100\ncommitter GitHub <noreply@github.com> 1519226992 +0100\n\nRollup merge of #48335 - Manishearth:shortcut-links, r=QuietMisdreavus\n\nImplement implied shortcut links for intra-rustdoc-links\n\ncc https://github.com/rust-lang/rust/issues/43466\n\nNeeds https://github.com/google/pulldown-cmark/pull/126\n\nr? @QuietMisdreavus\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe1293f8a95d7a79ce2ef95bdc97241e92ffe5e5", "html_url": "https://github.com/rust-lang/rust/commit/fe1293f8a95d7a79ce2ef95bdc97241e92ffe5e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe1293f8a95d7a79ce2ef95bdc97241e92ffe5e5/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27c6ff5c7ca6f23480f5676f94d06497cdab4b7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/27c6ff5c7ca6f23480f5676f94d06497cdab4b7a", "html_url": "https://github.com/rust-lang/rust/commit/27c6ff5c7ca6f23480f5676f94d06497cdab4b7a"}, {"sha": "5fdc10c68b3b5a42b17555be18baf5d7d60d55e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fdc10c68b3b5a42b17555be18baf5d7d60d55e6", "html_url": "https://github.com/rust-lang/rust/commit/5fdc10c68b3b5a42b17555be18baf5d7d60d55e6"}], "stats": {"total": 77, "additions": 61, "deletions": 16}, "files": [{"sha": "7dc8374e3e8fd90e9206d3f018058497b644a8e6", "filename": "src/Cargo.lock", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fe1293f8a95d7a79ce2ef95bdc97241e92ffe5e5/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/fe1293f8a95d7a79ce2ef95bdc97241e92ffe5e5/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=fe1293f8a95d7a79ce2ef95bdc97241e92ffe5e5", "patch": "@@ -1086,7 +1086,7 @@ dependencies = [\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"memchr 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"open 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"pulldown-cmark 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pulldown-cmark 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1383,7 +1383,7 @@ dependencies = [\n \n [[package]]\n name = \"pulldown-cmark\"\n-version = \"0.1.0\"\n+version = \"0.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2104,7 +2104,7 @@ dependencies = [\n name = \"rustdoc\"\n version = \"0.0.0\"\n dependencies = [\n- \"pulldown-cmark 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pulldown-cmark 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tempdir 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -2886,7 +2886,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum pest 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0a6dda33d67c26f0aac90d324ab2eb7239c819fc7b2552fe9faa4fe88441edc8\"\n \"checksum pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3a8b4c6b8165cd1a1cd4b9b120978131389f64bdaf456435caa41e630edba903\"\n \"checksum pulldown-cmark 0.0.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"378e941dbd392c101f2cb88097fa4d7167bc421d4b88de3ff7dbee503bc3233b\"\n-\"checksum pulldown-cmark 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a656fdb8b6848f896df5e478a0eb9083681663e37dcb77dd16981ff65329fe8b\"\n+\"checksum pulldown-cmark 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d6fdf85cda6cadfae5428a54661d431330b312bc767ddbc57adbedc24da66e32\"\n \"checksum quick-error 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eda5fe9b71976e62bc81b781206aaa076401769b2143379d3eb2118388babac4\"\n \"checksum quine-mc_cluskey 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"07589615d719a60c8dd8a4622e7946465dfef20d1a428f969e3443e7386d5f45\"\n \"checksum quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a6e920b65c65f10b2ae65c831a81a073a89edd28c7cce89475bff467ab4167a\""}, {"sha": "88b0f4486223c737f6b496f69453086124e97d80", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe1293f8a95d7a79ce2ef95bdc97241e92ffe5e5/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fe1293f8a95d7a79ce2ef95bdc97241e92ffe5e5/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=fe1293f8a95d7a79ce2ef95bdc97241e92ffe5e5", "patch": "@@ -10,5 +10,5 @@ path = \"lib.rs\"\n doctest = false\n \n [dependencies]\n-pulldown-cmark = { version = \"0.1.0\", default-features = false }\n+pulldown-cmark = { version = \"0.1.2\", default-features = false }\n tempdir = \"0.3\""}, {"sha": "4543b246b83ad19ac5ae456fe23d39107e42be62", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fe1293f8a95d7a79ce2ef95bdc97241e92ffe5e5/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1293f8a95d7a79ce2ef95bdc97241e92ffe5e5/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=fe1293f8a95d7a79ce2ef95bdc97241e92ffe5e5", "patch": "@@ -1044,7 +1044,7 @@ fn resolve(cx: &DocContext, path_str: &str, is_val: bool) -> Result<(Def, Option\n \n /// Resolve a string as a macro\n fn macro_resolve(cx: &DocContext, path_str: &str) -> Option<Def> {\n-    use syntax::ext::base::MacroKind;\n+    use syntax::ext::base::{MacroKind, SyntaxExtension};\n     use syntax::ext::hygiene::Mark;\n     let segment = ast::PathSegment {\n         identifier: ast::Ident::from_str(path_str),\n@@ -1061,7 +1061,11 @@ fn macro_resolve(cx: &DocContext, path_str: &str) -> Option<Def> {\n     let res = resolver\n         .resolve_macro_to_def_inner(mark, &path, MacroKind::Bang, false);\n     if let Ok(def) = res {\n-        Some(def)\n+        if let SyntaxExtension::DeclMacro(..) = *resolver.get_macro(def) {\n+            Some(def)\n+        } else {\n+            None\n+        }\n     } else if let Some(def) = resolver.all_macros.get(&path_str.into()) {\n         Some(*def)\n     } else {"}, {"sha": "66fe2280aef7ef8cb14d0954f8f1fb74686b3284", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 38, "deletions": 9, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/fe1293f8a95d7a79ce2ef95bdc97241e92ffe5e5/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1293f8a95d7a79ce2ef95bdc97241e92ffe5e5/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=fe1293f8a95d7a79ce2ef95bdc97241e92ffe5e5", "patch": "@@ -591,7 +591,15 @@ impl<'a> fmt::Display for Markdown<'a> {\n         opts.insert(OPTION_ENABLE_TABLES);\n         opts.insert(OPTION_ENABLE_FOOTNOTES);\n \n-        let p = Parser::new_ext(md, opts);\n+        let replacer = |_: &str, s: &str| {\n+            if let Some(&(_, ref replace)) = links.into_iter().find(|link| &*link.0 == s) {\n+                Some((replace.clone(), s.to_owned()))\n+            } else {\n+                None\n+            }\n+        };\n+\n+        let p = Parser::new_with_broken_link_callback(md, opts, Some(&replacer));\n \n         let mut s = String::with_capacity(md.len() * 3 / 2);\n \n@@ -662,7 +670,16 @@ impl<'a> fmt::Display for MarkdownSummaryLine<'a> {\n         // This is actually common enough to special-case\n         if md.is_empty() { return Ok(()) }\n \n-        let p = Parser::new(md);\n+        let replacer = |_: &str, s: &str| {\n+            if let Some(&(_, ref replace)) = links.into_iter().find(|link| &*link.0 == s) {\n+                Some((replace.clone(), s.to_owned()))\n+            } else {\n+                None\n+            }\n+        };\n+\n+        let p = Parser::new_with_broken_link_callback(md, Options::empty(),\n+                                                      Some(&replacer));\n \n         let mut s = String::new();\n \n@@ -731,18 +748,30 @@ pub fn markdown_links(md: &str) -> Vec<String> {\n     opts.insert(OPTION_ENABLE_TABLES);\n     opts.insert(OPTION_ENABLE_FOOTNOTES);\n \n-    let p = Parser::new_ext(md, opts);\n-\n-    let iter = Footnotes::new(HeadingLinks::new(p, None));\n     let mut links = vec![];\n+    let shortcut_links = RefCell::new(vec![]);\n+\n+    {\n+        let push = |_: &str, s: &str| {\n+            shortcut_links.borrow_mut().push(s.to_owned());\n+            None\n+        };\n+        let p = Parser::new_with_broken_link_callback(md, opts,\n+            Some(&push));\n+\n+        let iter = Footnotes::new(HeadingLinks::new(p, None));\n \n-    for ev in iter {\n-        if let Event::Start(Tag::Link(dest, _)) = ev {\n-            debug!(\"found link: {}\", dest);\n-            links.push(dest.into_owned());\n+        for ev in iter {\n+            if let Event::Start(Tag::Link(dest, _)) = ev {\n+                debug!(\"found link: {}\", dest);\n+                links.push(dest.into_owned());\n+            }\n         }\n     }\n \n+    let mut shortcut_links = shortcut_links.into_inner();\n+    links.extend(shortcut_links.drain(..));\n+\n     links\n }\n "}, {"sha": "c822d0f8b21b8c480cc7534d98ddd99b5cec309d", "filename": "src/test/rustdoc/intra-links.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fe1293f8a95d7a79ce2ef95bdc97241e92ffe5e5/src%2Ftest%2Frustdoc%2Fintra-links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1293f8a95d7a79ce2ef95bdc97241e92ffe5e5/src%2Ftest%2Frustdoc%2Fintra-links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-links.rs?ref=fe1293f8a95d7a79ce2ef95bdc97241e92ffe5e5", "patch": "@@ -77,3 +77,15 @@ pub trait SoAmbiguous {}\n \n #[allow(bad_style)]\n pub fn SoAmbiguous() {}\n+\n+\n+// @has - '//a/@href' '../intra_links/struct.ThisType.html'\n+// @has - '//a/@href' '../intra_links/struct.ThisType.html#method.this_method'\n+// @has - '//a/@href' '../intra_links/enum.ThisEnum.html'\n+// @has - '//a/@href' '../intra_links/enum.ThisEnum.html#ThisVariant.v'\n+/// Shortcut links for:\n+/// * [`ThisType`]\n+/// * [`ThisType::this_method`]\n+/// * [ThisEnum]\n+/// * [ThisEnum::ThisVariant]\n+pub struct SomeOtherType;"}]}