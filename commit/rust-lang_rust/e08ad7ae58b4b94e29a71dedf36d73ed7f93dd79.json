{"sha": "e08ad7ae58b4b94e29a71dedf36d73ed7f93dd79", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwOGFkN2FlNThiNGI5NGUyOWE3MWRlZGYzNmQ3M2VkN2Y5M2RkNzk=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-13T10:09:25Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-13T14:42:01Z"}, "message": "Use `CRATE_HIR_ID` instead of `DUMMY_HIR_ID` when appropriate.\n\nThose usage ends up forwarded to a `ObligationClause` which uses\n`CRATE_HIR_ID` for dummy value as seen in `ObligationClause::dummy`.", "tree": {"sha": "bf82ae9ce8a867d79ca5204fb8a8608f7bbd24cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf82ae9ce8a867d79ca5204fb8a8608f7bbd24cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e08ad7ae58b4b94e29a71dedf36d73ed7f93dd79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e08ad7ae58b4b94e29a71dedf36d73ed7f93dd79", "html_url": "https://github.com/rust-lang/rust/commit/e08ad7ae58b4b94e29a71dedf36d73ed7f93dd79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e08ad7ae58b4b94e29a71dedf36d73ed7f93dd79/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95fb7bf1081850873a7db513a1087e5cc00897b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/95fb7bf1081850873a7db513a1087e5cc00897b5", "html_url": "https://github.com/rust-lang/rust/commit/95fb7bf1081850873a7db513a1087e5cc00897b5"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "6db2e557fea694a05f29cb2897c06e710f56a993", "filename": "src/librustc_traits/implied_outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08ad7ae58b4b94e29a71dedf36d73ed7f93dd79/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08ad7ae58b4b94e29a71dedf36d73ed7f93dd79/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs?ref=e08ad7ae58b4b94e29a71dedf36d73ed7f93dd79", "patch": "@@ -62,7 +62,7 @@ fn compute_implied_outlives_bounds<'tcx>(\n         // unresolved inference variables here anyway, but there might be\n         // during typeck under some circumstances.)\n         let obligations =\n-            wf::obligations(infcx, param_env, hir::DUMMY_HIR_ID, ty, DUMMY_SP).unwrap_or(vec![]);\n+            wf::obligations(infcx, param_env, hir::CRATE_HIR_ID, ty, DUMMY_SP).unwrap_or(vec![]);\n \n         // N.B., all of these predicates *ought* to be easily proven\n         // true. In fact, their correctness is (mostly) implied by"}, {"sha": "4cb7b7d8fda247f0a8ae11585e448b383e127d3e", "filename": "src/librustc_ty/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08ad7ae58b4b94e29a71dedf36d73ed7f93dd79/src%2Flibrustc_ty%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08ad7ae58b4b94e29a71dedf36d73ed7f93dd79/src%2Flibrustc_ty%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Fty.rs?ref=e08ad7ae58b4b94e29a71dedf36d73ed7f93dd79", "patch": "@@ -265,7 +265,7 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n     let unnormalized_env =\n         ty::ParamEnv::new(tcx.intern_predicates(&predicates), traits::Reveal::UserFacing, None);\n \n-    let body_id = tcx.hir().as_local_hir_id(def_id).map_or(hir::DUMMY_HIR_ID, |id| {\n+    let body_id = tcx.hir().as_local_hir_id(def_id).map_or(hir::CRATE_HIR_ID, |id| {\n         tcx.hir().maybe_body_owned_by(id).map_or(id, |body| body.hir_id)\n     });\n     let cause = traits::ObligationCause::misc(tcx.def_span(def_id), body_id);"}, {"sha": "a77d8981d028c6f476a9d2e7dc7a929a97cf18c0", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e08ad7ae58b4b94e29a71dedf36d73ed7f93dd79/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08ad7ae58b4b94e29a71dedf36d73ed7f93dd79/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=e08ad7ae58b4b94e29a71dedf36d73ed7f93dd79", "patch": "@@ -452,7 +452,7 @@ fn method_autoderef_steps<'tcx>(\n     tcx.infer_ctxt().enter_with_canonical(DUMMY_SP, &goal, |ref infcx, goal, inference_vars| {\n         let ParamEnvAnd { param_env, value: self_ty } = goal;\n \n-        let mut autoderef = Autoderef::new(infcx, param_env, hir::DUMMY_HIR_ID, DUMMY_SP, self_ty)\n+        let mut autoderef = Autoderef::new(infcx, param_env, hir::CRATE_HIR_ID, DUMMY_SP, self_ty)\n             .include_raw_pointers()\n             .silence_errors();\n         let mut reached_raw_pointer = false;"}]}