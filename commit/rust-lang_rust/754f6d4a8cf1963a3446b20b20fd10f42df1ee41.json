{"sha": "754f6d4a8cf1963a3446b20b20fd10f42df1ee41", "node_id": "C_kwDOAAsO6NoAKDc1NGY2ZDRhOGNmMTk2M2EzNDQ2YjIwYjIwZmQxMGY0MmRmMWVlNDE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-15T00:16:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-15T00:16:09Z"}, "message": "Auto merge of #106892 - matthiaskrgr:rollup-ohneu8o, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #106072 (fix: misleading \"add dyn keyword before derive macro\" suggestion)\n - #106859 (Suggestion for type mismatch when we need a u8 but the programmer wrote a char literal)\n - #106863 (Remove various double spaces in compiler source comments.)\n - #106865 (Add explanation comment for GUI test)\n - #106867 (Fix the stability attributes for `std::os::fd`.)\n - #106878 (Add regression test for #92157)\n - #106879 (Add regression test for #42114)\n - #106880 (doc: fix typo)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "adf6687107f228725edb54a241bd79cb5c86a900", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adf6687107f228725edb54a241bd79cb5c86a900"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/754f6d4a8cf1963a3446b20b20fd10f42df1ee41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/754f6d4a8cf1963a3446b20b20fd10f42df1ee41", "html_url": "https://github.com/rust-lang/rust/commit/754f6d4a8cf1963a3446b20b20fd10f42df1ee41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/754f6d4a8cf1963a3446b20b20fd10f42df1ee41/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afaf3e07aaa7ca9873bdb439caec53faffa4230c", "url": "https://api.github.com/repos/rust-lang/rust/commits/afaf3e07aaa7ca9873bdb439caec53faffa4230c", "html_url": "https://github.com/rust-lang/rust/commit/afaf3e07aaa7ca9873bdb439caec53faffa4230c"}, {"sha": "cdf462275a74a2c5068aa95a021358b281e9b538", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdf462275a74a2c5068aa95a021358b281e9b538", "html_url": "https://github.com/rust-lang/rust/commit/cdf462275a74a2c5068aa95a021358b281e9b538"}], "stats": {"total": 220, "additions": 205, "deletions": 15}, "files": [{"sha": "b48654d1ac36a44fa39aa059709b4b9dcbfd5dac", "filename": "compiler/rustc_abi/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/754f6d4a8cf1963a3446b20b20fd10f42df1ee41/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754f6d4a8cf1963a3446b20b20fd10f42df1ee41/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_abi%2Fsrc%2Flib.rs?ref=754f6d4a8cf1963a3446b20b20fd10f42df1ee41", "patch": "@@ -1100,7 +1100,7 @@ pub enum FieldsShape {\n         /// named `inverse_memory_index`.\n         ///\n         // FIXME(eddyb) build a better abstraction for permutations, if possible.\n-        // FIXME(camlorn) also consider small vector  optimization here.\n+        // FIXME(camlorn) also consider small vector optimization here.\n         memory_index: Vec<u32>,\n     },\n }"}, {"sha": "918fb2d69237e4cb48b125a85daab2a60f8635dc", "filename": "compiler/rustc_borrowck/src/places_conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/754f6d4a8cf1963a3446b20b20fd10f42df1ee41/compiler%2Frustc_borrowck%2Fsrc%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754f6d4a8cf1963a3446b20b20fd10f42df1ee41/compiler%2Frustc_borrowck%2Fsrc%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fplaces_conflict.rs?ref=754f6d4a8cf1963a3446b20b20fd10f42df1ee41", "patch": "@@ -209,7 +209,7 @@ fn place_components_conflict<'tcx>(\n             match (elem, &base_ty.kind(), access) {\n                 (_, _, Shallow(Some(ArtificialField::ArrayLength)))\n                 | (_, _, Shallow(Some(ArtificialField::ShallowBorrow))) => {\n-                    // The array length is like  additional fields on the\n+                    // The array length is like additional fields on the\n                     // type; it does not overlap any existing data there.\n                     // Furthermore, if cannot actually be a prefix of any\n                     // borrowed place (at least in MIR as it is currently.)"}, {"sha": "c6e42336ef8ca42a8cac048f084202ae46340c00", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/754f6d4a8cf1963a3446b20b20fd10f42df1ee41/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754f6d4a8cf1963a3446b20b20fd10f42df1ee41/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=754f6d4a8cf1963a3446b20b20fd10f42df1ee41", "patch": "@@ -235,7 +235,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n     /// # Parameters\n     ///\n     /// - `def_id`, the `impl Trait` type\n-    /// - `substs`, the substs  used to instantiate this opaque type\n+    /// - `substs`, the substs used to instantiate this opaque type\n     /// - `instantiated_ty`, the inferred type C1 -- fully resolved, lifted version of\n     ///   `opaque_defn.concrete_ty`\n     #[instrument(level = \"debug\", skip(self))]"}, {"sha": "7ac4f65049042b9aaa9864e0809c0a8aa3fb59af", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/754f6d4a8cf1963a3446b20b20fd10f42df1ee41/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754f6d4a8cf1963a3446b20b20fd10f42df1ee41/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=754f6d4a8cf1963a3446b20b20fd10f42df1ee41", "patch": "@@ -3305,7 +3305,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 let label = \"add `dyn` keyword before this trait\";\n                 let mut diag =\n                     rustc_errors::struct_span_err!(tcx.sess, self_ty.span, E0782, \"{}\", msg);\n-                diag.multipart_suggestion_verbose(label, sugg, Applicability::MachineApplicable);\n+                if self_ty.span.can_be_used_for_suggestions() {\n+                    diag.multipart_suggestion_verbose(\n+                        label,\n+                        sugg,\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n                 // check if the impl trait that we are considering is a impl of a local trait\n                 self.maybe_lint_blanket_trait_impl(&self_ty, &mut diag);\n                 diag.emit();"}, {"sha": "c8cda0dc90c6daf39095057859453ec164196609", "filename": "compiler/rustc_hir_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/754f6d4a8cf1963a3446b20b20fd10f42df1ee41/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754f6d4a8cf1963a3446b20b20fd10f42df1ee41/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=754f6d4a8cf1963a3446b20b20fd10f42df1ee41", "patch": "@@ -417,7 +417,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                                 // Named constants have to be equated with the value\n                                 // being matched, so that's a read of the value being matched.\n                                 //\n-                                // FIXME: We don't actually  reads for ZSTs.\n+                                // FIXME: We don't actually reads for ZSTs.\n                                 needs_to_be_read = true;\n                             }\n                             _ => {"}, {"sha": "948a14604d4376929fe0b49c6a0d3ee347ee8701", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/754f6d4a8cf1963a3446b20b20fd10f42df1ee41/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754f6d4a8cf1963a3446b20b20fd10f42df1ee41/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=754f6d4a8cf1963a3446b20b20fd10f42df1ee41", "patch": "@@ -232,7 +232,7 @@ pub type PickResult<'tcx> = Result<Pick<'tcx>, MethodError<'tcx>>;\n pub enum Mode {\n     // An expression of the form `receiver.method_name(...)`.\n     // Autoderefs are performed on `receiver`, lookup is done based on the\n-    // `self` argument  of the method, and static methods aren't considered.\n+    // `self` argument of the method, and static methods aren't considered.\n     MethodCall,\n     // An expression of the form `Type::item` or `<T>::item`.\n     // No autoderefs are performed, lookup is done based on the type each"}, {"sha": "abd99fc74dacc323b664a50f396b4911f15a6be5", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/754f6d4a8cf1963a3446b20b20fd10f42df1ee41/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754f6d4a8cf1963a3446b20b20fd10f42df1ee41/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=754f6d4a8cf1963a3446b20b20fd10f42df1ee41", "patch": "@@ -1923,6 +1923,22 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                         (ty::Tuple(fields), _) => {\n                             self.emit_tuple_wrap_err(&mut err, span, found, fields)\n                         }\n+                        // If a byte was expected and the found expression is a char literal\n+                        // containing a single ASCII character, perhaps the user meant to write `b'c'` to\n+                        // specify a byte literal\n+                        (ty::Uint(ty::UintTy::U8), ty::Char) => {\n+                            if let Ok(code) = self.tcx.sess().source_map().span_to_snippet(span)\n+                                && let Some(code) = code.strip_prefix('\\'').and_then(|s| s.strip_suffix('\\''))\n+                                && code.chars().next().map_or(false, |c| c.is_ascii())\n+                            {\n+                                err.span_suggestion(\n+                                    span,\n+                                    \"if you meant to write a byte literal, prefix with `b`\",\n+                                    format!(\"b'{}'\", escape_literal(code)),\n+                                    Applicability::MachineApplicable,\n+                                );\n+                            }\n+                        }\n                         // If a character was expected and the found expression is a string literal\n                         // containing a single character, perhaps the user meant to write `'c'` to\n                         // specify a character literal (issue #92479)"}, {"sha": "b910bd888c0727cf562daaaf34d6c7aebeccf768", "filename": "compiler/rustc_middle/src/ty/typeck_results.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/754f6d4a8cf1963a3446b20b20fd10f42df1ee41/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754f6d4a8cf1963a3446b20b20fd10f42df1ee41/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs?ref=754f6d4a8cf1963a3446b20b20fd10f42df1ee41", "patch": "@@ -193,7 +193,7 @@ pub struct TypeckResults<'tcx> {\n     pub generator_interior_types: ty::Binder<'tcx, Vec<GeneratorInteriorTypeCause<'tcx>>>,\n \n     /// We sometimes treat byte string literals (which are of type `&[u8; N]`)\n-    /// as `&[u8]`, depending on the pattern  in which they are used.\n+    /// as `&[u8]`, depending on the pattern in which they are used.\n     /// This hashset records all instances where we behave\n     /// like this to allow `const_to_pat` to reliably handle this situation.\n     pub treat_byte_string_as_slice: ItemLocalSet,"}, {"sha": "e73a17ced7deb2598f52a013189ee3392e379547", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/754f6d4a8cf1963a3446b20b20fd10f42df1ee41/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754f6d4a8cf1963a3446b20b20fd10f42df1ee41/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=754f6d4a8cf1963a3446b20b20fd10f42df1ee41", "patch": "@@ -469,7 +469,7 @@ impl<'a> Parser<'a> {\n     /// Try to recover the more general form `intersect ::= $pat_lhs @ $pat_rhs`.\n     ///\n     /// Allowed binding patterns generated by `binding ::= ref? mut? $ident @ $pat_rhs`\n-    /// should already have been parsed by now  at this point,\n+    /// should already have been parsed by now at this point,\n     /// if the next token is `@` then we can try to parse the more general form.\n     ///\n     /// Consult `parse_pat_ident` for the `binding` grammar."}, {"sha": "55576b4e0d19df06c04f03cba652af8852faffbf", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/754f6d4a8cf1963a3446b20b20fd10f42df1ee41/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754f6d4a8cf1963a3446b20b20fd10f42df1ee41/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=754f6d4a8cf1963a3446b20b20fd10f42df1ee41", "patch": "@@ -2091,7 +2091,7 @@ fn parse_libs(matches: &getopts::Matches, error_format: ErrorOutputType) -> Vec<\n         .map(|s| {\n             // Parse string of the form \"[KIND[:MODIFIERS]=]lib[:new_name]\",\n             // where KIND is one of \"dylib\", \"framework\", \"static\", \"link-arg\" and\n-            // where MODIFIERS are  a comma separated list of supported modifiers\n+            // where MODIFIERS are a comma separated list of supported modifiers\n             // (bundle, verbatim, whole-archive, as-needed). Each modifier is prefixed\n             // with either + or - to indicate whether it is enabled or disabled.\n             // The last value specified for a given modifier wins."}, {"sha": "70cd883be09b3d7d57989931b1a58d8a101ab585", "filename": "compiler/rustc_target/src/asm/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/754f6d4a8cf1963a3446b20b20fd10f42df1ee41/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754f6d4a8cf1963a3446b20b20fd10f42df1ee41/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs?ref=754f6d4a8cf1963a3446b20b20fd10f42df1ee41", "patch": "@@ -462,7 +462,7 @@ impl InlineAsmRegClass {\n     }\n \n     /// Returns a suggested template modifier to use for this type and an\n-    /// example of a  register named formatted with it.\n+    /// example of a register named formatted with it.\n     ///\n     /// Such suggestions are useful if a type smaller than the full register\n     /// size is used and a modifier can be used to point to the subregister of"}, {"sha": "13aa067844a92c4cf75b69add314996bca5e4e1c", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/754f6d4a8cf1963a3446b20b20fd10f42df1ee41/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754f6d4a8cf1963a3446b20b20fd10f42df1ee41/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=754f6d4a8cf1963a3446b20b20fd10f42df1ee41", "patch": "@@ -308,7 +308,7 @@ pub fn normalize_param_env_or_error<'tcx>(\n     // the `TypeOutlives` predicates first inside the unnormalized parameter environment, and\n     // then we normalize the `TypeOutlives` bounds inside the normalized parameter environment.\n     //\n-    // This works fairly well because trait matching  does not actually care about param-env\n+    // This works fairly well because trait matching does not actually care about param-env\n     // TypeOutlives predicates - these are normally used by regionck.\n     let outlives_predicates: Vec<_> = predicates\n         .drain_filter(|predicate| {"}, {"sha": "2cae98b8e494334e640b3c936181cb1c6db32555", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/754f6d4a8cf1963a3446b20b20fd10f42df1ee41/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754f6d4a8cf1963a3446b20b20fd10f42df1ee41/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=754f6d4a8cf1963a3446b20b20fd10f42df1ee41", "patch": "@@ -1625,7 +1625,7 @@ macro_rules! int_impl {\n         /// overflow.\n         ///\n         /// Performs \"ternary subtraction\" by subtracting both an integer\n-        /// operandand a borrow-in bit from `self`, and returns a tuple of the\n+        /// operand and a borrow-in bit from `self`, and returns a tuple of the\n         /// difference along with a boolean indicating whether an arithmetic\n         /// overflow would occur. On overflow, the wrapped value is returned.\n         ///"}, {"sha": "35de4860fe24925b215e84578bbba65c6a151fe5", "filename": "library/std/src/os/fd/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/754f6d4a8cf1963a3446b20b20fd10f42df1ee41/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754f6d4a8cf1963a3446b20b20fd10f42df1ee41/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fmod.rs?ref=754f6d4a8cf1963a3446b20b20fd10f42df1ee41", "patch": "@@ -3,7 +3,7 @@\n //! This module is supported on Unix platforms and WASI, which both use a\n //! similar file descriptor system for referencing OS resources.\n \n-#![stable(feature = \"io_safety\", since = \"1.63.0\")]\n+#![stable(feature = \"os_fd\", since = \"1.66.0\")]\n #![deny(unsafe_op_in_unsafe_fn)]\n \n // `RawFd`, `AsRawFd`, etc.\n@@ -19,7 +19,7 @@ mod net;\n mod tests;\n \n // Export the types and traits for the public API.\n-#[unstable(feature = \"os_fd\", issue = \"98699\")]\n+#[stable(feature = \"os_fd\", since = \"1.66.0\")]\n pub use owned::*;\n-#[unstable(feature = \"os_fd\", issue = \"98699\")]\n+#[stable(feature = \"os_fd\", since = \"1.66.0\")]\n pub use raw::*;"}, {"sha": "1b5c3a0d202a0cfd1bd88fb96cb528764ff69822", "filename": "tests/rustdoc-gui/scrape-examples-button-focus.goml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/754f6d4a8cf1963a3446b20b20fd10f42df1ee41/tests%2Frustdoc-gui%2Fscrape-examples-button-focus.goml", "raw_url": "https://github.com/rust-lang/rust/raw/754f6d4a8cf1963a3446b20b20fd10f42df1ee41/tests%2Frustdoc-gui%2Fscrape-examples-button-focus.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fscrape-examples-button-focus.goml?ref=754f6d4a8cf1963a3446b20b20fd10f42df1ee41", "patch": "@@ -1,3 +1,5 @@\n+// This test ensures that the scraped examples buttons are working as expecting\n+// when 'Enter' key is pressed when they're focused.\n goto: \"file://\" + |DOC_PATH| + \"/scrape_examples/fn.test.html\"\n \n // The next/prev buttons vertically scroll the code viewport between examples"}, {"sha": "6ee2320a603ad867f445019e9b36595798a60a0b", "filename": "tests/ui/borrowck/issue-92157.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/754f6d4a8cf1963a3446b20b20fd10f42df1ee41/tests%2Fui%2Fborrowck%2Fissue-92157.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754f6d4a8cf1963a3446b20b20fd10f42df1ee41/tests%2Fui%2Fborrowck%2Fissue-92157.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fissue-92157.rs?ref=754f6d4a8cf1963a3446b20b20fd10f42df1ee41", "patch": "@@ -0,0 +1,40 @@\n+#![feature(no_core)]\n+#![feature(lang_items)]\n+\n+#![no_core]\n+\n+#[cfg(target_os = \"linux\")]\n+#[link(name = \"c\")]\n+extern {}\n+\n+#[lang = \"start\"]\n+fn start<T>(_main: fn() -> T, _argc: isize, _argv: *const *const u8) -> isize {\n+    //~^ ERROR: incorrect number of parameters for the `start` lang item\n+    40+2\n+}\n+\n+#[lang = \"sized\"]\n+pub trait Sized {}\n+#[lang = \"copy\"]\n+pub trait Copy {}\n+\n+#[lang = \"drop_in_place\"]\n+#[allow(unconditional_recursion)]\n+pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n+    drop_in_place(to_drop)\n+}\n+\n+#[lang = \"add\"]\n+trait Add<RHS> {\n+    type Output;\n+    fn add(self, other: RHS) -> Self::Output;\n+}\n+\n+impl Add<isize> for isize {\n+    type Output = isize;\n+    fn add(self, other: isize) -> isize {\n+        self + other\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "a4010d73d057a98067a5166ae9232bd1dad8b94f", "filename": "tests/ui/borrowck/issue-92157.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/754f6d4a8cf1963a3446b20b20fd10f42df1ee41/tests%2Fui%2Fborrowck%2Fissue-92157.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/754f6d4a8cf1963a3446b20b20fd10f42df1ee41/tests%2Fui%2Fborrowck%2Fissue-92157.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fissue-92157.stderr?ref=754f6d4a8cf1963a3446b20b20fd10f42df1ee41", "patch": "@@ -0,0 +1,11 @@\n+error: incorrect number of parameters for the `start` lang item\n+  --> $DIR/issue-92157.rs:11:1\n+   |\n+LL | fn start<T>(_main: fn() -> T, _argc: isize, _argv: *const *const u8) -> isize {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the `start` lang item should have four parameters, but found 3\n+   = note: the `start` lang item should have the signature `fn(fn() -> T, isize, *const *const u8, u8) -> isize`\n+\n+error: aborting due to previous error\n+"}, {"sha": "01515fdc9d2bff7b47479cb52d8db50a0ca79e5d", "filename": "tests/ui/higher-rank-trait-bounds/issue-42114.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/754f6d4a8cf1963a3446b20b20fd10f42df1ee41/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-42114.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754f6d4a8cf1963a3446b20b20fd10f42df1ee41/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-42114.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-42114.rs?ref=754f6d4a8cf1963a3446b20b20fd10f42df1ee41", "patch": "@@ -0,0 +1,20 @@\n+// check-pass\n+\n+fn lifetime<'a>()\n+where\n+    &'a (): 'a,\n+{\n+    /* do nothing */\n+}\n+\n+fn doesnt_work()\n+where\n+    for<'a> &'a (): 'a,\n+{\n+    /* do nothing */\n+}\n+\n+fn main() {\n+    lifetime();\n+    doesnt_work();\n+}"}, {"sha": "34199f8c37c101d2d7236a45ece953407427910d", "filename": "tests/ui/suggestions/type-mismatch-byte-literal.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/754f6d4a8cf1963a3446b20b20fd10f42df1ee41/tests%2Fui%2Fsuggestions%2Ftype-mismatch-byte-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754f6d4a8cf1963a3446b20b20fd10f42df1ee41/tests%2Fui%2Fsuggestions%2Ftype-mismatch-byte-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Ftype-mismatch-byte-literal.rs?ref=754f6d4a8cf1963a3446b20b20fd10f42df1ee41", "patch": "@@ -0,0 +1,18 @@\n+// Tests that a suggestion is issued for type mismatch errors when a\n+// u8 is expected and a char literal which is ASCII is supplied.\n+\n+fn foo(_t: u8) {}\n+\n+fn main() {\n+    let _x: u8 = 'X';\n+    //~^ ERROR: mismatched types [E0308]\n+    //~| HELP: if you meant to write a byte literal, prefix with `b`\n+\n+    foo('#');\n+    //~^ ERROR: mismatched types [E0308]\n+    //~| HELP: if you meant to write a byte literal, prefix with `b`\n+\n+    // Do not issue the suggestion if the char literal isn't ASCII\n+    let _t: u8 = '\u20ac';\n+    //~^ ERROR: mismatched types [E0308]\n+}"}, {"sha": "c9c2e7498d058c7953160e03f43494977bfa6deb", "filename": "tests/ui/suggestions/type-mismatch-byte-literal.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/754f6d4a8cf1963a3446b20b20fd10f42df1ee41/tests%2Fui%2Fsuggestions%2Ftype-mismatch-byte-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/754f6d4a8cf1963a3446b20b20fd10f42df1ee41/tests%2Fui%2Fsuggestions%2Ftype-mismatch-byte-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Ftype-mismatch-byte-literal.stderr?ref=754f6d4a8cf1963a3446b20b20fd10f42df1ee41", "patch": "@@ -0,0 +1,42 @@\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch-byte-literal.rs:7:18\n+   |\n+LL |     let _x: u8 = 'X';\n+   |             --   ^^^ expected `u8`, found `char`\n+   |             |\n+   |             expected due to this\n+   |\n+help: if you meant to write a byte literal, prefix with `b`\n+   |\n+LL |     let _x: u8 = b'X';\n+   |                  ~~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch-byte-literal.rs:11:9\n+   |\n+LL |     foo('#');\n+   |     --- ^^^ expected `u8`, found `char`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/type-mismatch-byte-literal.rs:4:4\n+   |\n+LL | fn foo(_t: u8) {}\n+   |    ^^^ ------\n+help: if you meant to write a byte literal, prefix with `b`\n+   |\n+LL |     foo(b'#');\n+   |         ~~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch-byte-literal.rs:16:18\n+   |\n+LL |     let _t: u8 = '\u20ac';\n+   |             --   ^^^ expected `u8`, found `char`\n+   |             |\n+   |             expected due to this\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "7064a39d21e7f34a277e9e6e024b93692a7aed3e", "filename": "tests/ui/traits/issue-106072.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/754f6d4a8cf1963a3446b20b20fd10f42df1ee41/tests%2Fui%2Ftraits%2Fissue-106072.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754f6d4a8cf1963a3446b20b20fd10f42df1ee41/tests%2Fui%2Ftraits%2Fissue-106072.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-106072.rs?ref=754f6d4a8cf1963a3446b20b20fd10f42df1ee41", "patch": "@@ -0,0 +1,5 @@\n+#[derive(Clone)] //~  trait objects must include the `dyn` keyword\n+                 //~| trait objects must include the `dyn` keyword\n+struct Foo;\n+trait Foo {} //~ the name `Foo` is defined multiple times\n+fn main() {}"}, {"sha": "f9b7b814663fdd024c67c25467ad9e6bdd1bc1af", "filename": "tests/ui/traits/issue-106072.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/754f6d4a8cf1963a3446b20b20fd10f42df1ee41/tests%2Fui%2Ftraits%2Fissue-106072.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/754f6d4a8cf1963a3446b20b20fd10f42df1ee41/tests%2Fui%2Ftraits%2Fissue-106072.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-106072.stderr?ref=754f6d4a8cf1963a3446b20b20fd10f42df1ee41", "patch": "@@ -0,0 +1,30 @@\n+error[E0428]: the name `Foo` is defined multiple times\n+  --> $DIR/issue-106072.rs:4:1\n+   |\n+LL | struct Foo;\n+   | ----------- previous definition of the type `Foo` here\n+LL | trait Foo {}\n+   | ^^^^^^^^^ `Foo` redefined here\n+   |\n+   = note: `Foo` must be defined only once in the type namespace of this module\n+\n+error[E0782]: trait objects must include the `dyn` keyword\n+  --> $DIR/issue-106072.rs:1:10\n+   |\n+LL | #[derive(Clone)]\n+   |          ^^^^^\n+   |\n+   = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0782]: trait objects must include the `dyn` keyword\n+  --> $DIR/issue-106072.rs:1:10\n+   |\n+LL | #[derive(Clone)]\n+   |          ^^^^^\n+   |\n+   = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0428, E0782.\n+For more information about an error, try `rustc --explain E0428`."}]}