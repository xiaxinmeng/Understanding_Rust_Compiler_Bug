{"sha": "269ff92975e9955de655a237496be96783b3eee5", "node_id": "C_kwDOAAsO6NoAKDI2OWZmOTI5NzVlOTk1NWRlNjU1YTIzNzQ5NmJlOTY3ODNiM2VlZTU", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-28T23:10:57Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-28T23:10:57Z"}, "message": "Use let-chaining in `WhileTrue::check_expr`.\n\nThis has been bugging me for a while.", "tree": {"sha": "95c2138be3566443e57fdd4202803866f27c70a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95c2138be3566443e57fdd4202803866f27c70a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/269ff92975e9955de655a237496be96783b3eee5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/269ff92975e9955de655a237496be96783b3eee5", "html_url": "https://github.com/rust-lang/rust/commit/269ff92975e9955de655a237496be96783b3eee5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/269ff92975e9955de655a237496be96783b3eee5/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "307dd938d7937c93dc7a880e81a2383b82f30ad0", "url": "https://api.github.com/repos/rust-lang/rust/commits/307dd938d7937c93dc7a880e81a2383b82f30ad0", "html_url": "https://github.com/rust-lang/rust/commit/307dd938d7937c93dc7a880e81a2383b82f30ad0"}], "stats": {"total": 46, "additions": 22, "deletions": 24}, "files": [{"sha": "5d69c35ebfced90a07dd94323f31dd0383f189c1", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 22, "deletions": 24, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/269ff92975e9955de655a237496be96783b3eee5/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/269ff92975e9955de655a237496be96783b3eee5/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=269ff92975e9955de655a237496be96783b3eee5", "patch": "@@ -97,30 +97,28 @@ fn pierce_parens(mut expr: &ast::Expr) -> &ast::Expr {\n \n impl EarlyLintPass for WhileTrue {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &ast::Expr) {\n-        if let ast::ExprKind::While(cond, _, label) = &e.kind {\n-            if let ast::ExprKind::Lit(ref lit) = pierce_parens(cond).kind {\n-                if let ast::LitKind::Bool(true) = lit.kind {\n-                    if !lit.span.from_expansion() {\n-                        let condition_span = e.span.with_hi(cond.span.hi());\n-                        cx.struct_span_lint(WHILE_TRUE, condition_span, |lint| {\n-                            lint.build(fluent::lint::builtin_while_true)\n-                                .span_suggestion_short(\n-                                    condition_span,\n-                                    fluent::lint::suggestion,\n-                                    format!(\n-                                        \"{}loop\",\n-                                        label.map_or_else(String::new, |label| format!(\n-                                            \"{}: \",\n-                                            label.ident,\n-                                        ))\n-                                    ),\n-                                    Applicability::MachineApplicable,\n-                                )\n-                                .emit();\n-                        })\n-                    }\n-                }\n-            }\n+        if let ast::ExprKind::While(cond, _, label) = &e.kind\n+            && let ast::ExprKind::Lit(ref lit) = pierce_parens(cond).kind\n+            && let ast::LitKind::Bool(true) = lit.kind\n+            && !lit.span.from_expansion()\n+        {\n+            let condition_span = e.span.with_hi(cond.span.hi());\n+            cx.struct_span_lint(WHILE_TRUE, condition_span, |lint| {\n+                lint.build(fluent::lint::builtin_while_true)\n+                    .span_suggestion_short(\n+                        condition_span,\n+                        fluent::lint::suggestion,\n+                        format!(\n+                            \"{}loop\",\n+                            label.map_or_else(String::new, |label| format!(\n+                                \"{}: \",\n+                                label.ident,\n+                            ))\n+                        ),\n+                        Applicability::MachineApplicable,\n+                    )\n+                    .emit();\n+            })\n         }\n     }\n }"}]}