{"sha": "003c4ffa836acd6901fa0d4b00624fc012bd5bd3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwM2M0ZmZhODM2YWNkNjkwMWZhMGQ0YjAwNjI0ZmMwMTJiZDViZDM=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2018-09-22T08:45:42Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2018-09-22T08:45:42Z"}, "message": "Allow both explicit and elided lifetimes in the same impl header\n\n(While still prohibiting explicit and in-band in the same header.)", "tree": {"sha": "fd307bfc1aa73d87fd39a73ee2fc8476cca2ca8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd307bfc1aa73d87fd39a73ee2fc8476cca2ca8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/003c4ffa836acd6901fa0d4b00624fc012bd5bd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/003c4ffa836acd6901fa0d4b00624fc012bd5bd3", "html_url": "https://github.com/rust-lang/rust/commit/003c4ffa836acd6901fa0d4b00624fc012bd5bd3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/003c4ffa836acd6901fa0d4b00624fc012bd5bd3/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed45f9cbf48d67ea4ca36d71b7c28c4768fb36de", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed45f9cbf48d67ea4ca36d71b7c28c4768fb36de", "html_url": "https://github.com/rust-lang/rust/commit/ed45f9cbf48d67ea4ca36d71b7c28c4768fb36de"}], "stats": {"total": 112, "additions": 83, "deletions": 29}, "files": [{"sha": "d237632cf36a488d319c48ace6c9d7a8824207db", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/003c4ffa836acd6901fa0d4b00624fc012bd5bd3/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003c4ffa836acd6901fa0d4b00624fc012bd5bd3/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=003c4ffa836acd6901fa0d4b00624fc012bd5bd3", "patch": "@@ -683,9 +683,15 @@ impl<'a> LoweringContext<'a> {\n                 // Get the name we'll use to make the def-path. Note\n                 // that collisions are ok here and this shouldn't\n                 // really show up for end-user.\n-                let str_name = match hir_name {\n-                    ParamName::Plain(ident) => ident.as_interned_str(),\n-                    ParamName::Fresh(_) => keywords::UnderscoreLifetime.name().as_interned_str(),\n+                let (str_name, kind) = match hir_name {\n+                    ParamName::Plain(ident) => (\n+                        ident.as_interned_str(),\n+                        hir::LifetimeParamKind::InBand,\n+                    ),\n+                    ParamName::Fresh(_) => (\n+                        keywords::UnderscoreLifetime.name().as_interned_str(),\n+                        hir::LifetimeParamKind::Elided,\n+                    ),\n                 };\n \n                 // Add a definition for the in-band lifetime def\n@@ -705,7 +711,7 @@ impl<'a> LoweringContext<'a> {\n                     bounds: hir_vec![],\n                     span,\n                     pure_wrt_drop: false,\n-                    kind: hir::GenericParamKind::Lifetime { in_band: true }\n+                    kind: hir::GenericParamKind::Lifetime { kind }\n                 }\n             })\n             .chain(in_band_ty_params.into_iter())\n@@ -1452,11 +1458,15 @@ impl<'a> LoweringContext<'a> {\n                         lifetime.span,\n                     );\n \n-                    let name = match name {\n-                        hir::LifetimeName::Underscore => {\n-                            hir::ParamName::Plain(keywords::UnderscoreLifetime.ident())\n-                        }\n-                        hir::LifetimeName::Param(param_name) => param_name,\n+                    let (name, kind) = match name {\n+                        hir::LifetimeName::Underscore => (\n+                            hir::ParamName::Plain(keywords::UnderscoreLifetime.ident()),\n+                            hir::LifetimeParamKind::Elided,\n+                        ),\n+                        hir::LifetimeName::Param(param_name) => (\n+                            param_name,\n+                            hir::LifetimeParamKind::Explicit,\n+                        ),\n                         _ => bug!(\"expected LifetimeName::Param or ParamName::Plain\"),\n                     };\n \n@@ -1467,9 +1477,7 @@ impl<'a> LoweringContext<'a> {\n                         pure_wrt_drop: false,\n                         attrs: hir_vec![],\n                         bounds: hir_vec![],\n-                        kind: hir::GenericParamKind::Lifetime {\n-                            in_band: false,\n-                        }\n+                        kind: hir::GenericParamKind::Lifetime { kind }\n                     });\n                 }\n             }\n@@ -2283,7 +2291,9 @@ impl<'a> LoweringContext<'a> {\n                     pure_wrt_drop: attr::contains_name(&param.attrs, \"may_dangle\"),\n                     attrs: self.lower_attrs(&param.attrs),\n                     bounds,\n-                    kind: hir::GenericParamKind::Lifetime { in_band: false }\n+                    kind: hir::GenericParamKind::Lifetime {\n+                        kind: hir::LifetimeParamKind::Explicit,\n+                    }\n                 };\n \n                 self.is_collecting_in_band_lifetimes = was_collecting_in_band;"}, {"sha": "ee8e64b2e206fd4a520d80a87c4e4fabeed398bf", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/003c4ffa836acd6901fa0d4b00624fc012bd5bd3/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003c4ffa836acd6901fa0d4b00624fc012bd5bd3/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=003c4ffa836acd6901fa0d4b00624fc012bd5bd3", "patch": "@@ -499,14 +499,27 @@ impl GenericBound {\n \n pub type GenericBounds = HirVec<GenericBound>;\n \n+#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Debug)]\n+pub enum LifetimeParamKind {\n+    // Indicates that the lifetime definition was explicitly declared, like:\n+    // `fn foo<'a>(x: &'a u8) -> &'a u8 { x }`\n+    Explicit,\n+\n+    // Indicates that the lifetime definition was synthetically added\n+    // as a result of an in-band lifetime usage like:\n+    // `fn foo(x: &'a u8) -> &'a u8 { x }`\n+    InBand,\n+\n+    // Indication that the lifetime was elided like both cases here:\n+    // `fn foo(x: &u8) -> &'_ u8 { x }`\n+    Elided,\n+}\n+\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum GenericParamKind {\n     /// A lifetime definition, eg `'a: 'b + 'c + 'd`.\n     Lifetime {\n-        // Indicates that the lifetime definition was synthetically added\n-        // as a result of an in-band lifetime usage like:\n-        // `fn foo(x: &'a u8) -> &'a u8 { x }`\n-        in_band: bool,\n+        kind: LifetimeParamKind,\n     },\n     Type {\n         default: Option<P<Ty>>,"}, {"sha": "676c24a8d3dff8574cc7face28fa537ba3668de6", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/003c4ffa836acd6901fa0d4b00624fc012bd5bd3/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003c4ffa836acd6901fa0d4b00624fc012bd5bd3/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=003c4ffa836acd6901fa0d4b00624fc012bd5bd3", "patch": "@@ -207,14 +207,20 @@ impl_stable_hash_for!(struct hir::GenericParam {\n     kind\n });\n \n+impl_stable_hash_for!(enum hir::LifetimeParamKind {\n+    Explicit,\n+    InBand,\n+    Elided\n+});\n+\n impl<'a> HashStable<StableHashingContext<'a>> for hir::GenericParamKind {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n         mem::discriminant(self).hash_stable(hcx, hasher);\n         match self {\n-            hir::GenericParamKind::Lifetime { in_band } => {\n-                in_band.hash_stable(hcx, hasher);\n+            hir::GenericParamKind::Lifetime { kind } => {\n+                kind.hash_stable(hcx, hasher);\n             }\n             hir::GenericParamKind::Type { ref default, synthetic } => {\n                 default.hash_stable(hcx, hasher);"}, {"sha": "fb1cd4ce06419e1eef384725928177a9adf5ff3c", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/003c4ffa836acd6901fa0d4b00624fc012bd5bd3/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003c4ffa836acd6901fa0d4b00624fc012bd5bd3/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=003c4ffa836acd6901fa0d4b00624fc012bd5bd3", "patch": "@@ -35,7 +35,7 @@ use syntax_pos::Span;\n use util::nodemap::{DefIdMap, FxHashMap, FxHashSet, NodeMap, NodeSet};\n \n use hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use hir::{self, GenericParamKind};\n+use hir::{self, GenericParamKind, LifetimeParamKind};\n \n /// The origin of a named lifetime definition.\n ///\n@@ -51,8 +51,8 @@ pub enum LifetimeDefOrigin {\n impl LifetimeDefOrigin {\n     fn from_param(param: &GenericParam) -> Self {\n         match param.kind {\n-            GenericParamKind::Lifetime { in_band } => {\n-                if in_band {\n+            GenericParamKind::Lifetime { kind } => {\n+                if kind == LifetimeParamKind::InBand {\n                     LifetimeDefOrigin::InBand\n                 } else {\n                     LifetimeDefOrigin::Explicit\n@@ -1087,15 +1087,15 @@ fn check_mixed_explicit_and_in_band_defs(\n     tcx: TyCtxt<'_, '_, '_>,\n     params: &P<[hir::GenericParam]>,\n ) {\n-    let in_bands: Vec<_> = params.iter().filter_map(|param| match param.kind {\n-        GenericParamKind::Lifetime { in_band, .. } => Some((in_band, param.span)),\n+    let lifetime_params: Vec<_> = params.iter().filter_map(|param| match param.kind {\n+        GenericParamKind::Lifetime { kind, .. } => Some((kind, param.span)),\n         _ => None,\n     }).collect();\n-    let out_of_band = in_bands.iter().find(|(in_band, _)| !in_band);\n-    let in_band = in_bands.iter().find(|(in_band, _)| *in_band);\n+    let explicit = lifetime_params.iter().find(|(kind, _)| *kind == LifetimeParamKind::Explicit);\n+    let in_band = lifetime_params.iter().find(|(kind, _)| *kind == LifetimeParamKind::InBand);\n \n-    if let (Some((_, out_of_band_span)), Some((_, in_band_span)))\n-        = (out_of_band, in_band) {\n+    if let (Some((_, explicit_span)), Some((_, in_band_span)))\n+        = (explicit, in_band) {\n         struct_span_err!(\n             tcx.sess,\n             *in_band_span,\n@@ -1104,7 +1104,7 @@ fn check_mixed_explicit_and_in_band_defs(\n         ).span_label(\n             *in_band_span,\n             \"in-band lifetime definition here\",\n-        ).span_label(*out_of_band_span, \"explicit lifetime definition here\")\n+        ).span_label(*explicit_span, \"explicit lifetime definition here\")\n         .emit();\n     }\n }"}, {"sha": "56dd6691abbe52a246a062cc73b757fe1165204f", "filename": "src/test/ui/impl-header-lifetime-elision/explicit-and-elided-same-header.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/003c4ffa836acd6901fa0d4b00624fc012bd5bd3/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fexplicit-and-elided-same-header.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003c4ffa836acd6901fa0d4b00624fc012bd5bd3/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fexplicit-and-elided-same-header.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fexplicit-and-elided-same-header.rs?ref=003c4ffa836acd6901fa0d4b00624fc012bd5bd3", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-pass\n+\n+#![allow(warnings)]\n+\n+#![feature(impl_header_lifetime_elision)]\n+\n+// This works for functions...\n+fn foo<'a>(x: &str, y: &'a str) {}\n+\n+// ...so this should work for impls\n+impl<'a> Foo<&str> for &'a str {}\n+trait Foo<T> {}\n+\n+fn main() {\n+}"}]}