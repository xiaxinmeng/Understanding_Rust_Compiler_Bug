{"sha": "ddaab61101e48f0a58ce176b5a6aff11ae36c986", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkYWFiNjExMDFlNDhmMGE1OGNlMTc2YjVhNmFmZjExYWUzNmM5ODY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-26T23:40:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-26T23:40:48Z"}, "message": "Auto merge of #43373 - alexcrichton:stabilize-1.20.0, r=aturon\n\nStabilize more APIs for the 1.20.0 release\n\nIn addition to the few stabilizations that have already landed, this cleans up the remaining APIs that are in `final-comment-period` right now to be stable by the 1.20.0 release", "tree": {"sha": "a0092e50572f90c99bdd169a86cbd301a797138e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0092e50572f90c99bdd169a86cbd301a797138e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddaab61101e48f0a58ce176b5a6aff11ae36c986", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddaab61101e48f0a58ce176b5a6aff11ae36c986", "html_url": "https://github.com/rust-lang/rust/commit/ddaab61101e48f0a58ce176b5a6aff11ae36c986", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddaab61101e48f0a58ce176b5a6aff11ae36c986/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "599be0d18f4c6ddf36366d2a5a2ca6dc65886896", "url": "https://api.github.com/repos/rust-lang/rust/commits/599be0d18f4c6ddf36366d2a5a2ca6dc65886896", "html_url": "https://github.com/rust-lang/rust/commit/599be0d18f4c6ddf36366d2a5a2ca6dc65886896"}, {"sha": "16707d43483ef8b776b941f056dc1ea78ebd7c77", "url": "https://api.github.com/repos/rust-lang/rust/commits/16707d43483ef8b776b941f056dc1ea78ebd7c77", "html_url": "https://github.com/rust-lang/rust/commit/16707d43483ef8b776b941f056dc1ea78ebd7c77"}], "stats": {"total": 175, "additions": 47, "deletions": 128}, "files": [{"sha": "4de631e1fb30775f235db383ee6e0be0badce63e", "filename": "src/doc/unstable-book/src/language-features/compile-error.md", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/599be0d18f4c6ddf36366d2a5a2ca6dc65886896/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcompile-error.md", "raw_url": "https://github.com/rust-lang/rust/raw/599be0d18f4c6ddf36366d2a5a2ca6dc65886896/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcompile-error.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcompile-error.md?ref=599be0d18f4c6ddf36366d2a5a2ca6dc65886896", "patch": "@@ -1,20 +0,0 @@\n-# `compile_error`\n-\n-The tracking issue for this feature is: [#40872]\n-\n-[#40872]: https://github.com/rust-lang/rust/issues/40872\n-\n-------------------------\n-\n-The `compile_error` feature adds a macro which will generate a compilation\n-error with the specified error message.\n-\n-## Examples\n-\n-```rust,compile_fail\n-#![feature(compile_error)]\n-\n-fn main() {\n-    compile_error!(\"The error message\"); //ERROR The error message\n-}\n-```"}, {"sha": "227fcfabcf11de25056fbdf7918a7ae004853dcb", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddaab61101e48f0a58ce176b5a6aff11ae36c986/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddaab61101e48f0a58ce176b5a6aff11ae36c986/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=ddaab61101e48f0a58ce176b5a6aff11ae36c986", "patch": "@@ -79,11 +79,9 @@\n \n #![cfg_attr(test, allow(deprecated))] // rand\n #![cfg_attr(test, feature(placement_in))]\n-#![cfg_attr(not(test), feature(char_escape_debug))]\n #![cfg_attr(not(test), feature(core_float))]\n #![cfg_attr(not(test), feature(exact_size_is_empty))]\n #![cfg_attr(not(test), feature(slice_rotate))]\n-#![cfg_attr(not(test), feature(str_checked_slicing))]\n #![cfg_attr(test, feature(rand, test))]\n #![feature(allow_internal_unstable)]\n #![feature(box_patterns)]\n@@ -102,7 +100,6 @@\n #![feature(i128_type)]\n #![feature(inclusive_range)]\n #![feature(lang_items)]\n-#![feature(manually_drop)]\n #![feature(needs_allocator)]\n #![feature(nonzero)]\n #![feature(offset_to)]\n@@ -117,7 +114,6 @@\n #![feature(specialization)]\n #![feature(staged_api)]\n #![feature(str_internals)]\n-#![feature(str_mut_extras)]\n #![feature(trusted_len)]\n #![feature(unboxed_closures)]\n #![feature(unicode)]"}, {"sha": "4df13c509a835b0a498ace5689ff0e08e3dd22a7", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ddaab61101e48f0a58ce176b5a6aff11ae36c986/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddaab61101e48f0a58ce176b5a6aff11ae36c986/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=ddaab61101e48f0a58ce176b5a6aff11ae36c986", "patch": "@@ -290,7 +290,7 @@ impl str {\n     }\n \n     /// Converts a mutable string slice to a mutable byte slice.\n-    #[unstable(feature = \"str_mut_extras\", issue = \"41119\")]\n+    #[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]\n     #[inline(always)]\n     pub unsafe fn as_bytes_mut(&mut self) -> &mut [u8] {\n         core_str::StrExt::as_bytes_mut(self)\n@@ -328,14 +328,13 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(str_checked_slicing)]\n     /// let v = \"\ud83d\uddfb\u2208\ud83c\udf0f\";\n     /// assert_eq!(Some(\"\ud83d\uddfb\"), v.get(0..4));\n     /// assert!(v.get(1..).is_none());\n     /// assert!(v.get(..8).is_none());\n     /// assert!(v.get(..42).is_none());\n     /// ```\n-    #[unstable(feature = \"str_checked_slicing\", issue = \"39932\")]\n+    #[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]\n     #[inline]\n     pub fn get<I: SliceIndex<str>>(&self, i: I) -> Option<&I::Output> {\n         core_str::StrExt::get(self, i)\n@@ -351,14 +350,13 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(str_checked_slicing)]\n     /// let mut v = String::from(\"\ud83d\uddfb\u2208\ud83c\udf0f\");\n     /// assert_eq!(Some(\"\ud83d\uddfb\"), v.get_mut(0..4).map(|v| &*v));\n     /// assert!(v.get_mut(1..).is_none());\n     /// assert!(v.get_mut(..8).is_none());\n     /// assert!(v.get_mut(..42).is_none());\n     /// ```\n-    #[unstable(feature = \"str_checked_slicing\", issue = \"39932\")]\n+    #[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]\n     #[inline]\n     pub fn get_mut<I: SliceIndex<str>>(&mut self, i: I) -> Option<&mut I::Output> {\n         core_str::StrExt::get_mut(self, i)\n@@ -383,15 +381,14 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(str_checked_slicing)]\n     /// let v = \"\ud83d\uddfb\u2208\ud83c\udf0f\";\n     /// unsafe {\n     ///     assert_eq!(\"\ud83d\uddfb\", v.get_unchecked(0..4));\n     ///     assert_eq!(\"\u2208\", v.get_unchecked(4..7));\n     ///     assert_eq!(\"\ud83c\udf0f\", v.get_unchecked(7..11));\n     /// }\n     /// ```\n-    #[unstable(feature = \"str_checked_slicing\", issue = \"39932\")]\n+    #[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]\n     #[inline]\n     pub unsafe fn get_unchecked<I: SliceIndex<str>>(&self, i: I) -> &I::Output {\n         core_str::StrExt::get_unchecked(self, i)\n@@ -416,15 +413,14 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(str_checked_slicing)]\n     /// let mut v = String::from(\"\ud83d\uddfb\u2208\ud83c\udf0f\");\n     /// unsafe {\n     ///     assert_eq!(\"\ud83d\uddfb\", v.get_unchecked_mut(0..4));\n     ///     assert_eq!(\"\u2208\", v.get_unchecked_mut(4..7));\n     ///     assert_eq!(\"\ud83c\udf0f\", v.get_unchecked_mut(7..11));\n     /// }\n     /// ```\n-    #[unstable(feature = \"str_checked_slicing\", issue = \"39932\")]\n+    #[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]\n     #[inline]\n     pub unsafe fn get_unchecked_mut<I: SliceIndex<str>>(&mut self, i: I) -> &mut I::Output {\n         core_str::StrExt::get_unchecked_mut(self, i)\n@@ -1729,7 +1725,7 @@ impl str {\n     }\n \n     /// Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n-    #[unstable(feature = \"str_box_extras\", issue = \"41119\")]\n+    #[stable(feature = \"str_box_extras\", since = \"1.20.0\")]\n     pub fn into_boxed_bytes(self: Box<str>) -> Box<[u8]> {\n         self.into()\n     }\n@@ -1996,7 +1992,7 @@ impl str {\n \n /// Converts a boxed slice of bytes to a boxed string slice without checking\n /// that the string contains valid UTF-8.\n-#[unstable(feature = \"str_box_extras\", issue = \"41119\")]\n+#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]\n pub unsafe fn from_boxed_utf8_unchecked(v: Box<[u8]>) -> Box<str> {\n     mem::transmute(v)\n }"}, {"sha": "27b23d14059f85e77e2c570014f1c3e2533a5d21", "filename": "src/liballoc/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddaab61101e48f0a58ce176b5a6aff11ae36c986/src%2Fliballoc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddaab61101e48f0a58ce176b5a6aff11ae36c986/src%2Fliballoc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Flib.rs?ref=ddaab61101e48f0a58ce176b5a6aff11ae36c986", "patch": "@@ -24,12 +24,10 @@\n #![feature(repr_align)]\n #![feature(slice_rotate)]\n #![feature(splice)]\n-#![feature(str_checked_slicing)]\n #![feature(str_escape)]\n #![feature(test)]\n #![feature(unboxed_closures)]\n #![feature(unicode)]\n-#![feature(utf8_error_error_len)]\n \n extern crate alloc;\n extern crate test;"}, {"sha": "e8b81db07067c65751c41f3f7fc8b9a2e731ef2b", "filename": "src/libcore/char.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ddaab61101e48f0a58ce176b5a6aff11ae36c986/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddaab61101e48f0a58ce176b5a6aff11ae36c986/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=ddaab61101e48f0a58ce176b5a6aff11ae36c986", "patch": "@@ -379,7 +379,7 @@ pub trait CharExt {\n     fn escape_unicode(self) -> EscapeUnicode;\n     #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn escape_default(self) -> EscapeDefault;\n-    #[unstable(feature = \"char_escape_debug\", issue = \"35068\")]\n+    #[stable(feature = \"char_escape_debug\", since = \"1.20.0\")]\n     fn escape_debug(self) -> EscapeDebug;\n     #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn len_utf8(self) -> usize;\n@@ -776,24 +776,24 @@ impl fmt::Display for EscapeDefault {\n ///\n /// [`escape_debug`]: ../../std/primitive.char.html#method.escape_debug\n /// [`char`]: ../../std/primitive.char.html\n-#[unstable(feature = \"char_escape_debug\", issue = \"35068\")]\n+#[stable(feature = \"char_escape_debug\", since = \"1.20.0\")]\n #[derive(Clone, Debug)]\n pub struct EscapeDebug(EscapeDefault);\n \n-#[unstable(feature = \"char_escape_debug\", issue = \"35068\")]\n+#[stable(feature = \"char_escape_debug\", since = \"1.20.0\")]\n impl Iterator for EscapeDebug {\n     type Item = char;\n     fn next(&mut self) -> Option<char> { self.0.next() }\n     fn size_hint(&self) -> (usize, Option<usize>) { self.0.size_hint() }\n }\n \n-#[unstable(feature = \"char_escape_debug\", issue = \"35068\")]\n+#[stable(feature = \"char_escape_debug\", since = \"1.20.0\")]\n impl ExactSizeIterator for EscapeDebug { }\n \n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl FusedIterator for EscapeDebug {}\n \n-#[unstable(feature = \"char_escape_debug\", issue = \"35068\")]\n+#[stable(feature = \"char_escape_debug\", since = \"1.20.0\")]\n impl fmt::Display for EscapeDebug {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Display::fmt(&self.0, f)"}, {"sha": "2edf8e1fa886f9bde3ba843b161aad7cc3ce7e62", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddaab61101e48f0a58ce176b5a6aff11ae36c986/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddaab61101e48f0a58ce176b5a6aff11ae36c986/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=ddaab61101e48f0a58ce176b5a6aff11ae36c986", "patch": "@@ -574,7 +574,7 @@ mod builtin {\n     /// For more information, see the [RFC].\n     ///\n     /// [RFC]: https://github.com/rust-lang/rfcs/blob/master/text/1695-add-error-macro.md\n-    #[unstable(feature = \"compile_error_macro\", issue = \"40872\")]\n+    #[stable(feature = \"compile_error_macro\", since = \"1.20.0\")]\n     #[macro_export]\n     #[cfg(dox)]\n     macro_rules! compile_error { ($msg:expr) => ({ /* compiler built-in */ }) }"}, {"sha": "866296a5670318c8047ea441e78e89c86256493f", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ddaab61101e48f0a58ce176b5a6aff11ae36c986/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddaab61101e48f0a58ce176b5a6aff11ae36c986/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=ddaab61101e48f0a58ce176b5a6aff11ae36c986", "patch": "@@ -838,7 +838,6 @@ pub fn discriminant<T>(v: &T) -> Discriminant<T> {\n /// the type:\n ///\n /// ```rust\n-/// # #![feature(manually_drop)]\n /// use std::mem::ManuallyDrop;\n /// struct Peach;\n /// struct Banana;\n@@ -864,7 +863,7 @@ pub fn discriminant<T>(v: &T) -> Discriminant<T> {\n ///     }\n /// }\n /// ```\n-#[unstable(feature = \"manually_drop\", issue = \"40673\")]\n+#[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n #[allow(unions_with_drop_fields)]\n pub union ManuallyDrop<T>{ value: T }\n \n@@ -874,11 +873,10 @@ impl<T> ManuallyDrop<T> {\n     /// # Examples\n     ///\n     /// ```rust\n-    /// # #![feature(manually_drop)]\n     /// use std::mem::ManuallyDrop;\n     /// ManuallyDrop::new(Box::new(()));\n     /// ```\n-    #[unstable(feature = \"manually_drop\", issue = \"40673\")]\n+    #[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n     #[inline]\n     pub fn new(value: T) -> ManuallyDrop<T> {\n         ManuallyDrop { value: value }\n@@ -889,12 +887,11 @@ impl<T> ManuallyDrop<T> {\n     /// # Examples\n     ///\n     /// ```rust\n-    /// # #![feature(manually_drop)]\n     /// use std::mem::ManuallyDrop;\n     /// let x = ManuallyDrop::new(Box::new(()));\n     /// let _: Box<()> = ManuallyDrop::into_inner(x);\n     /// ```\n-    #[unstable(feature = \"manually_drop\", issue = \"40673\")]\n+    #[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n     #[inline]\n     pub fn into_inner(slot: ManuallyDrop<T>) -> T {\n         unsafe {\n@@ -909,14 +906,14 @@ impl<T> ManuallyDrop<T> {\n     /// This function runs the destructor of the contained value and thus the wrapped value\n     /// now represents uninitialized data. It is up to the user of this method to ensure the\n     /// uninitialized data is not actually used.\n-    #[unstable(feature = \"manually_drop\", issue = \"40673\")]\n+    #[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n     #[inline]\n     pub unsafe fn drop(slot: &mut ManuallyDrop<T>) {\n         ptr::drop_in_place(&mut slot.value)\n     }\n }\n \n-#[unstable(feature = \"manually_drop\", issue = \"40673\")]\n+#[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n impl<T> ::ops::Deref for ManuallyDrop<T> {\n     type Target = T;\n     #[inline]\n@@ -927,7 +924,7 @@ impl<T> ::ops::Deref for ManuallyDrop<T> {\n     }\n }\n \n-#[unstable(feature = \"manually_drop\", issue = \"40673\")]\n+#[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n impl<T> ::ops::DerefMut for ManuallyDrop<T> {\n     #[inline]\n     fn deref_mut(&mut self) -> &mut Self::Target {\n@@ -937,7 +934,7 @@ impl<T> ::ops::DerefMut for ManuallyDrop<T> {\n     }\n }\n \n-#[unstable(feature = \"manually_drop\", issue = \"40673\")]\n+#[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n impl<T: ::fmt::Debug> ::fmt::Debug for ManuallyDrop<T> {\n     fn fmt(&self, fmt: &mut ::fmt::Formatter) -> ::fmt::Result {\n         unsafe {"}, {"sha": "ef41b6794105d8b62aacf75357f51d0dce320560", "filename": "src/libcore/option.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ddaab61101e48f0a58ce176b5a6aff11ae36c986/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddaab61101e48f0a58ce176b5a6aff11ae36c986/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=ddaab61101e48f0a58ce176b5a6aff11ae36c986", "patch": "@@ -671,8 +671,6 @@ impl<T> Option<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(option_entry)]\n-    ///\n     /// let mut x = None;\n     ///\n     /// {\n@@ -685,7 +683,7 @@ impl<T> Option<T> {\n     /// assert_eq!(x, Some(7));\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"option_entry\", issue = \"39288\")]\n+    #[stable(feature = \"option_entry\", since = \"1.20.0\")]\n     pub fn get_or_insert(&mut self, v: T) -> &mut T {\n         match *self {\n             None => *self = Some(v),\n@@ -706,8 +704,6 @@ impl<T> Option<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(option_entry)]\n-    ///\n     /// let mut x = None;\n     ///\n     /// {\n@@ -720,7 +716,7 @@ impl<T> Option<T> {\n     /// assert_eq!(x, Some(7));\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"option_entry\", issue = \"39288\")]\n+    #[stable(feature = \"option_entry\", since = \"1.20.0\")]\n     pub fn get_or_insert_with<F: FnOnce() -> T>(&mut self, f: F) -> &mut T {\n         match *self {\n             None => *self = Some(f()),"}, {"sha": "4c99fe97dafa38a73d64cfddd626ef583675d087", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ddaab61101e48f0a58ce176b5a6aff11ae36c986/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddaab61101e48f0a58ce176b5a6aff11ae36c986/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=ddaab61101e48f0a58ce176b5a6aff11ae36c986", "patch": "@@ -207,7 +207,7 @@ impl Utf8Error {\n     ///   that starts at the index given by `valid_up_to()`.\n     ///   Decoding should resume after that sequence\n     ///   (after inserting a U+FFFD REPLACEMENT CHARACTER) in case of lossy decoding.\n-    #[unstable(feature = \"utf8_error_error_len\", reason =\"new\", issue = \"40494\")]\n+    #[stable(feature = \"utf8_error_error_len\", since = \"1.20.0\")]\n     pub fn error_len(&self) -> Option<usize> {\n         self.error_len.map(|len| len as usize)\n     }\n@@ -301,7 +301,7 @@ pub fn from_utf8(v: &[u8]) -> Result<&str, Utf8Error> {\n }\n \n /// Converts a mutable slice of bytes to a mutable string slice.\n-#[unstable(feature = \"str_mut_extras\", issue = \"41119\")]\n+#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]\n pub fn from_utf8_mut(v: &mut [u8]) -> Result<&mut str, Utf8Error> {\n     run_utf8_validation(v)?;\n     Ok(unsafe { from_utf8_unchecked_mut(v) })\n@@ -382,7 +382,7 @@ pub unsafe fn from_utf8_unchecked(v: &[u8]) -> &str {\n ///\n /// [fromutf8]: fn.from_utf8_unchecked.html\n #[inline]\n-#[unstable(feature = \"str_mut_extras\", issue = \"41119\")]\n+#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]\n pub unsafe fn from_utf8_unchecked_mut(v: &mut [u8]) -> &mut str {\n     mem::transmute(v)\n }\n@@ -1776,7 +1776,7 @@ mod traits {\n         }\n     }\n \n-    #[unstable(feature = \"str_checked_slicing\", issue = \"39932\")]\n+    #[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]\n     impl SliceIndex<str> for ops::RangeFull {\n         type Output = str;\n         #[inline]\n@@ -1805,7 +1805,7 @@ mod traits {\n         }\n     }\n \n-    #[unstable(feature = \"str_checked_slicing\", issue = \"39932\")]\n+    #[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]\n     impl SliceIndex<str> for ops::Range<usize> {\n         type Output = str;\n         #[inline]\n@@ -1859,7 +1859,7 @@ mod traits {\n         }\n     }\n \n-    #[unstable(feature = \"str_checked_slicing\", issue = \"39932\")]\n+    #[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]\n     impl SliceIndex<str> for ops::RangeTo<usize> {\n         type Output = str;\n         #[inline]\n@@ -1904,7 +1904,7 @@ mod traits {\n         }\n     }\n \n-    #[unstable(feature = \"str_checked_slicing\", issue = \"39932\")]\n+    #[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]\n     impl SliceIndex<str> for ops::RangeFrom<usize> {\n         type Output = str;\n         #[inline]\n@@ -1951,7 +1951,7 @@ mod traits {\n         }\n     }\n \n-    #[unstable(feature = \"str_checked_slicing\", issue = \"39932\")]\n+    #[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]\n     impl SliceIndex<str> for ops::RangeInclusive<usize> {\n         type Output = str;\n         #[inline]\n@@ -1994,7 +1994,7 @@ mod traits {\n \n \n \n-    #[unstable(feature = \"str_checked_slicing\", issue = \"39932\")]\n+    #[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]\n     impl SliceIndex<str> for ops::RangeToInclusive<usize> {\n         type Output = str;\n         #[inline]\n@@ -2094,13 +2094,13 @@ pub trait StrExt {\n     #[rustc_deprecated(since = \"1.6.0\", reason = \"use lines() instead now\")]\n     #[allow(deprecated)]\n     fn lines_any(&self) -> LinesAny;\n-    #[unstable(feature = \"str_checked_slicing\", issue = \"39932\")]\n+    #[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]\n     fn get<I: SliceIndex<str>>(&self, i: I) -> Option<&I::Output>;\n-    #[unstable(feature = \"str_checked_slicing\", issue = \"39932\")]\n+    #[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]\n     fn get_mut<I: SliceIndex<str>>(&mut self, i: I) -> Option<&mut I::Output>;\n-    #[unstable(feature = \"str_checked_slicing\", issue = \"39932\")]\n+    #[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]\n     unsafe fn get_unchecked<I: SliceIndex<str>>(&self, i: I) -> &I::Output;\n-    #[unstable(feature = \"str_checked_slicing\", issue = \"39932\")]\n+    #[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]\n     unsafe fn get_unchecked_mut<I: SliceIndex<str>>(&mut self, i: I) -> &mut I::Output;\n     #[stable(feature = \"core\", since = \"1.6.0\")]\n     unsafe fn slice_unchecked(&self, begin: usize, end: usize) -> &str;\n@@ -2123,7 +2123,7 @@ pub trait StrExt {\n     fn is_char_boundary(&self, index: usize) -> bool;\n     #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn as_bytes(&self) -> &[u8];\n-    #[unstable(feature = \"str_mut_extras\", issue = \"41119\")]\n+    #[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]\n     unsafe fn as_bytes_mut(&mut self) -> &mut [u8];\n     #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn find<'a, P: Pattern<'a>>(&'a self, pat: P) -> Option<usize>;"}, {"sha": "a85c347146b05d01b6d4884e3ed8d79d33b9d181", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ddaab61101e48f0a58ce176b5a6aff11ae36c986/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddaab61101e48f0a58ce176b5a6aff11ae36c986/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=ddaab61101e48f0a58ce176b5a6aff11ae36c986", "patch": "@@ -11,7 +11,6 @@\n #![deny(warnings)]\n \n #![feature(box_syntax)]\n-#![feature(char_escape_debug)]\n #![feature(const_fn)]\n #![feature(core_float)]\n #![feature(core_private_bignum)]"}, {"sha": "bb27d479a414e2f25021ad70eef6358bd0f1d64a", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ddaab61101e48f0a58ce176b5a6aff11ae36c986/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddaab61101e48f0a58ce176b5a6aff11ae36c986/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=ddaab61101e48f0a58ce176b5a6aff11ae36c986", "patch": "@@ -34,7 +34,6 @@\n #![feature(conservative_impl_trait)]\n #![feature(discriminant_value)]\n #![feature(specialization)]\n-#![feature(manually_drop)]\n \n #![cfg_attr(unix, feature(libc))]\n #![cfg_attr(test, feature(test))]"}, {"sha": "db64d41011c6b5aa751867f6a4c200f2b8044013", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ddaab61101e48f0a58ce176b5a6aff11ae36c986/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddaab61101e48f0a58ce176b5a6aff11ae36c986/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=ddaab61101e48f0a58ce176b5a6aff11ae36c986", "patch": "@@ -453,16 +453,14 @@ impl CString {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(as_c_str)]\n-    ///\n     /// use std::ffi::{CString, CStr};\n     ///\n     /// let c_string = CString::new(b\"foo\".to_vec()).unwrap();\n     /// let c_str = c_string.as_c_str();\n     /// assert_eq!(c_str, CStr::from_bytes_with_nul(b\"foo\\0\").unwrap());\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"as_c_str\", issue = \"40380\")]\n+    #[stable(feature = \"as_c_str\", since = \"1.20.0\")]\n     pub fn as_c_str(&self) -> &CStr {\n         &*self\n     }\n@@ -474,15 +472,13 @@ impl CString {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(into_boxed_c_str)]\n-    ///\n     /// use std::ffi::{CString, CStr};\n     ///\n     /// let c_string = CString::new(b\"foo\".to_vec()).unwrap();\n     /// let boxed = c_string.into_boxed_c_str();\n     /// assert_eq!(&*boxed, CStr::from_bytes_with_nul(b\"foo\\0\").unwrap());\n     /// ```\n-    #[unstable(feature = \"into_boxed_c_str\", issue = \"40380\")]\n+    #[stable(feature = \"into_boxed_c_str\", since = \"1.20.0\")]\n     pub fn into_boxed_c_str(self) -> Box<CStr> {\n         unsafe { mem::transmute(self.into_inner()) }\n     }\n@@ -1001,15 +997,13 @@ impl CStr {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(into_boxed_c_str)]\n-    ///\n     /// use std::ffi::CString;\n     ///\n     /// let c_string = CString::new(b\"foo\".to_vec()).unwrap();\n     /// let boxed = c_string.into_boxed_c_str();\n     /// assert_eq!(boxed.into_c_string(), CString::new(\"foo\").unwrap());\n     /// ```\n-    #[unstable(feature = \"into_boxed_c_str\", issue = \"40380\")]\n+    #[stable(feature = \"into_boxed_c_str\", since = \"1.20.0\")]\n     pub fn into_c_string(self: Box<CStr>) -> CString {\n         unsafe { mem::transmute(self) }\n     }"}, {"sha": "d62e3e905e3ca26d7a45b9fd1494655f689bf28b", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ddaab61101e48f0a58ce176b5a6aff11ae36c986/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddaab61101e48f0a58ce176b5a6aff11ae36c986/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=ddaab61101e48f0a58ce176b5a6aff11ae36c986", "patch": "@@ -252,15 +252,13 @@ impl OsString {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(into_boxed_os_str)]\n-    ///\n     /// use std::ffi::{OsString, OsStr};\n     ///\n     /// let s = OsString::from(\"hello\");\n     ///\n     /// let b: Box<OsStr> = s.into_boxed_os_str();\n     /// ```\n-    #[unstable(feature = \"into_boxed_os_str\", issue = \"40380\")]\n+    #[stable(feature = \"into_boxed_os_str\", since = \"1.20.0\")]\n     pub fn into_boxed_os_str(self) -> Box<OsStr> {\n         unsafe { mem::transmute(self.inner.into_box()) }\n     }\n@@ -511,7 +509,7 @@ impl OsStr {\n     ///\n     /// [`Box`]: ../boxed/struct.Box.html\n     /// [`OsString`]: struct.OsString.html\n-    #[unstable(feature = \"into_boxed_os_str\", issue = \"40380\")]\n+    #[stable(feature = \"into_boxed_os_str\", since = \"1.20.0\")]\n     pub fn into_os_string(self: Box<OsStr>) -> OsString {\n         let inner: Box<Slice> = unsafe { mem::transmute(self) };\n         OsString { inner: Buf::from_box(inner) }"}, {"sha": "bd9c9c747848921fee9f6d089edf9670060ef4f0", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddaab61101e48f0a58ce176b5a6aff11ae36c986/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddaab61101e48f0a58ce176b5a6aff11ae36c986/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=ddaab61101e48f0a58ce176b5a6aff11ae36c986", "patch": "@@ -249,7 +249,6 @@\n #![feature(cfg_target_has_atomic)]\n #![feature(cfg_target_thread_local)]\n #![feature(cfg_target_vendor)]\n-#![feature(char_escape_debug)]\n #![feature(char_error_internals)]\n #![feature(char_internals)]\n #![feature(collections_range)]\n@@ -304,7 +303,6 @@\n #![feature(stmt_expr_attributes)]\n #![feature(str_char)]\n #![feature(str_internals)]\n-#![feature(str_mut_extras)]\n #![feature(str_utf16)]\n #![feature(test, rustc_private)]\n #![feature(thread_local)]"}, {"sha": "343c499b3ff7c1824b101c0f30f12cff3c41086d", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddaab61101e48f0a58ce176b5a6aff11ae36c986/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddaab61101e48f0a58ce176b5a6aff11ae36c986/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=ddaab61101e48f0a58ce176b5a6aff11ae36c986", "patch": "@@ -249,7 +249,7 @@ pub mod builtin {\n     /// For more information, see the [RFC].\n     ///\n     /// [RFC]: https://github.com/rust-lang/rfcs/blob/master/text/1695-add-error-macro.md\n-    #[unstable(feature = \"compile_error_macro\", issue = \"40872\")]\n+    #[stable(feature = \"compile_error_macro\", since = \"1.20.0\")]\n     #[macro_export]\n     macro_rules! compile_error { ($msg:expr) => ({ /* compiler built-in */ }) }\n "}, {"sha": "e083ab0ef976f6623243aef87dd3c9ef50e5d90a", "filename": "src/libstd/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddaab61101e48f0a58ce176b5a6aff11ae36c986/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddaab61101e48f0a58ce176b5a6aff11ae36c986/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=ddaab61101e48f0a58ce176b5a6aff11ae36c986", "patch": "@@ -1327,7 +1327,7 @@ impl PathBuf {\n     ///\n     /// [`Box`]: ../../std/boxed/struct.Box.html\n     /// [`Path`]: struct.Path.html\n-    #[unstable(feature = \"into_boxed_path\", issue = \"40380\")]\n+    #[stable(feature = \"into_boxed_path\", since = \"1.20.0\")]\n     pub fn into_boxed_path(self) -> Box<Path> {\n         unsafe { mem::transmute(self.inner.into_boxed_os_str()) }\n     }\n@@ -2300,7 +2300,7 @@ impl Path {\n     ///\n     /// [`Box`]: ../../std/boxed/struct.Box.html\n     /// [`PathBuf`]: struct.PathBuf.html\n-    #[unstable(feature = \"into_boxed_path\", issue = \"40380\")]\n+    #[stable(feature = \"into_boxed_path\", since = \"1.20.0\")]\n     pub fn into_path_buf(self: Box<Path>) -> PathBuf {\n         let inner: Box<OsStr> = unsafe { mem::transmute(self) };\n         PathBuf { inner: OsString::from(inner) }"}, {"sha": "5cf05bff8c5b1c7ae777083336dad4a0087310fd", "filename": "src/libstd_unicode/char.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ddaab61101e48f0a58ce176b5a6aff11ae36c986/src%2Flibstd_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddaab61101e48f0a58ce176b5a6aff11ae36c986/src%2Flibstd_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd_unicode%2Fchar.rs?ref=ddaab61101e48f0a58ce176b5a6aff11ae36c986", "patch": "@@ -326,7 +326,6 @@ impl char {\n     /// As an iterator:\n     ///\n     /// ```\n-    /// # #![feature(char_escape_debug)]\n     /// for c in '\\n'.escape_debug() {\n     ///     print!(\"{}\", c);\n     /// }\n@@ -336,7 +335,6 @@ impl char {\n     /// Using `println!` directly:\n     ///\n     /// ```\n-    /// # #![feature(char_escape_debug)]\n     /// println!(\"{}\", '\\n'.escape_debug());\n     /// ```\n     ///\n@@ -349,10 +347,9 @@ impl char {\n     /// Using `to_string`:\n     ///\n     /// ```\n-    /// # #![feature(char_escape_debug)]\n     /// assert_eq!('\\n'.escape_debug().to_string(), \"\\\\n\");\n     /// ```\n-    #[unstable(feature = \"char_escape_debug\", issue = \"35068\")]\n+    #[stable(feature = \"char_escape_debug\", since = \"1.20.0\")]\n     #[inline]\n     pub fn escape_debug(self) -> EscapeDebug {\n         C::escape_debug(self)"}, {"sha": "698210e83f3e3decc045bb0ffeb102259fd26fee", "filename": "src/libstd_unicode/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ddaab61101e48f0a58ce176b5a6aff11ae36c986/src%2Flibstd_unicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddaab61101e48f0a58ce176b5a6aff11ae36c986/src%2Flibstd_unicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd_unicode%2Flib.rs?ref=ddaab61101e48f0a58ce176b5a6aff11ae36c986", "patch": "@@ -32,7 +32,6 @@\n #![deny(warnings)]\n #![no_std]\n \n-#![feature(char_escape_debug)]\n #![feature(core_char_ext)]\n #![feature(str_internals)]\n #![feature(core_intrinsics)]"}, {"sha": "f6d56557166d4de2565c0e4e217ec4de437d3709", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ddaab61101e48f0a58ce176b5a6aff11ae36c986/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddaab61101e48f0a58ce176b5a6aff11ae36c986/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=ddaab61101e48f0a58ce176b5a6aff11ae36c986", "patch": "@@ -1041,7 +1041,6 @@ impl<'feat> ExpansionConfig<'feat> {\n         fn enable_allow_internal_unstable = allow_internal_unstable,\n         fn enable_custom_derive = custom_derive,\n         fn proc_macro_enabled = proc_macro,\n-        fn enable_compile_error = compile_error,\n     }\n }\n "}, {"sha": "e8de8cf41c970ce5f33fad1d9d157b46a5b85f63", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ddaab61101e48f0a58ce176b5a6aff11ae36c986/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddaab61101e48f0a58ce176b5a6aff11ae36c986/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=ddaab61101e48f0a58ce176b5a6aff11ae36c986", "patch": "@@ -117,7 +117,6 @@ macro_rules! declare_features {\n \n declare_features! (\n     (active, asm, \"1.0.0\", Some(29722)),\n-    (active, compile_error, \"1.20.0\", Some(40872)),\n     (active, concat_idents, \"1.0.0\", Some(29599)),\n     (active, link_args, \"1.0.0\", Some(29596)),\n     (active, log_syntax, \"1.0.0\", Some(29598)),\n@@ -445,6 +444,8 @@ declare_features! (\n     // Allows the definition of associated constants in `trait` or `impl`\n     // blocks.\n     (accepted, associated_consts, \"1.20.0\", Some(29646)),\n+    // Usage of the `compile_error!` macro\n+    (accepted, compile_error, \"1.20.0\", Some(40872)),\n );\n \n // If you change this, please modify src/doc/unstable-book as well. You must\n@@ -1040,9 +1041,6 @@ pub const EXPLAIN_LOG_SYNTAX: &'static str =\n pub const EXPLAIN_CONCAT_IDENTS: &'static str =\n     \"`concat_idents` is not stable enough for use and is subject to change\";\n \n-pub const EXPLAIN_COMPILE_ERROR: &'static str =\n-    \"`compile_error` is not stable enough for use and is subject to change\";\n-\n pub const EXPLAIN_TRACE_MACROS: &'static str =\n     \"`trace_macros` is not stable enough for use and is subject to change\";\n pub const EXPLAIN_ALLOW_INTERNAL_UNSTABLE: &'static str ="}, {"sha": "7bc7afba63cb4d8f43539e851847391d74c84df7", "filename": "src/libsyntax_ext/compile_error.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ddaab61101e48f0a58ce176b5a6aff11ae36c986/src%2Flibsyntax_ext%2Fcompile_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddaab61101e48f0a58ce176b5a6aff11ae36c986/src%2Flibsyntax_ext%2Fcompile_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fcompile_error.rs?ref=ddaab61101e48f0a58ce176b5a6aff11ae36c986", "patch": "@@ -12,23 +12,13 @@\n \n use syntax::ext::base::*;\n use syntax::ext::base;\n-use syntax::feature_gate;\n use syntax_pos::Span;\n use syntax::tokenstream;\n \n pub fn expand_compile_error<'cx>(cx: &'cx mut ExtCtxt,\n                               sp: Span,\n                               tts: &[tokenstream::TokenTree])\n                               -> Box<base::MacResult + 'cx> {\n-    if !cx.ecfg.enable_compile_error() {\n-        feature_gate::emit_feature_err(&cx.parse_sess,\n-                                       \"compile_error\",\n-                                       sp,\n-                                       feature_gate::GateIssue::Language,\n-                                       feature_gate::EXPLAIN_COMPILE_ERROR);\n-        return DummyResult::expr(sp);\n-    }\n-\n     let var = match get_single_str_from_tts(cx, sp, tts, \"compile_error!\") {\n         None => return DummyResult::expr(sp),\n         Some(v) => v,"}, {"sha": "e9c5993098c3e317da3119de87e3ebdf049e6a0e", "filename": "src/test/compile-fail/compile_error_macro.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddaab61101e48f0a58ce176b5a6aff11ae36c986/src%2Ftest%2Fcompile-fail%2Fcompile_error_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddaab61101e48f0a58ce176b5a6aff11ae36c986/src%2Ftest%2Fcompile-fail%2Fcompile_error_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcompile_error_macro.rs?ref=ddaab61101e48f0a58ce176b5a6aff11ae36c986", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(compile_error)]\n-\n fn main() {\n     compile_error!(\"a very descriptive error message\"); //~ ERROR: a very descriptive error message\n }"}, {"sha": "545c6852961c7d6e4447dc667b808ee53c0d6f57", "filename": "src/test/compile-fail/feature-gate-compile_error.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/599be0d18f4c6ddf36366d2a5a2ca6dc65886896/src%2Ftest%2Fcompile-fail%2Ffeature-gate-compile_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/599be0d18f4c6ddf36366d2a5a2ca6dc65886896/src%2Ftest%2Fcompile-fail%2Ffeature-gate-compile_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-compile_error.rs?ref=599be0d18f4c6ddf36366d2a5a2ca6dc65886896", "patch": "@@ -1,13 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn main() {\n-    compile_error!(\"test\"); //~ ERROR: `compile_error` is not stable enough\n-}"}]}