{"sha": "7fda874dd4c84d4b53ed625e9eccc92c3fa9a48e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmZGE4NzRkZDRjODRkNGI1M2VkNjI1ZTllY2NjOTJjM2ZhOWE0OGU=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-05-11T18:31:41Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-05-12T18:23:57Z"}, "message": "Blacklist some traits from being considered in where clauses\n\nFor Send/Sync/Sized, we don't handle auto traits correctly yet and because they\nhave a lot of impls, they can easily lead to slowdowns. In the case of\nFn/FnMut/FnOnce, we don't parse the special Fn notation correctly yet and don't\nhandle closures yet, so we are very unlikely to find an impl.", "tree": {"sha": "104eccdcdc745f6d15dcf9173996815c807a7287", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/104eccdcdc745f6d15dcf9173996815c807a7287"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fda874dd4c84d4b53ed625e9eccc92c3fa9a48e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fda874dd4c84d4b53ed625e9eccc92c3fa9a48e", "html_url": "https://github.com/rust-lang/rust/commit/7fda874dd4c84d4b53ed625e9eccc92c3fa9a48e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fda874dd4c84d4b53ed625e9eccc92c3fa9a48e/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8b85891b0c6c03a1b373491f75b8872ec47e06f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8b85891b0c6c03a1b373491f75b8872ec47e06f", "html_url": "https://github.com/rust-lang/rust/commit/c8b85891b0c6c03a1b373491f75b8872ec47e06f"}], "stats": {"total": 41, "additions": 34, "deletions": 7}, "files": [{"sha": "510fa533337570c44cf7920549d8fa12a3bdc878", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7fda874dd4c84d4b53ed625e9eccc92c3fa9a48e/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fda874dd4c84d4b53ed625e9eccc92c3fa9a48e/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=7fda874dd4c84d4b53ed625e9eccc92c3fa9a48e", "patch": "@@ -2620,22 +2620,22 @@ fn method_resolution_slow() {\n     let t = type_at(\n         r#\"\n //- /main.rs\n-trait Send {}\n+trait SendX {}\n \n-struct S1; impl Send for S1;\n-struct S2; impl Send for S2;\n+struct S1; impl SendX for S1;\n+struct S2; impl SendX for S2;\n struct U1;\n \n trait Trait { fn method(self); }\n \n struct X1<A, B> {}\n-impl<A, B> Send for X1<A, B> where A: Send, B: Send {}\n+impl<A, B> SendX for X1<A, B> where A: SendX, B: SendX {}\n \n struct S<B, C> {}\n \n-trait Fn {}\n+trait FnX {}\n \n-impl<B, C> Trait for S<B, C> where C: Fn, B: Send {}\n+impl<B, C> Trait for S<B, C> where C: FnX, B: SendX {}\n \n fn test() { (S {}).method()<|>; }\n \"#,"}, {"sha": "78440b258bcaf2f1311fc67576087dd794dd9adc", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7fda874dd4c84d4b53ed625e9eccc92c3fa9a48e/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fda874dd4c84d4b53ed625e9eccc92c3fa9a48e/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=7fda874dd4c84d4b53ed625e9eccc92c3fa9a48e", "patch": "@@ -190,6 +190,14 @@ fn make_binders<T>(value: T, num_vars: usize) -> chalk_ir::Binders<T> {\n     }\n }\n \n+fn blacklisted_trait(db: &impl HirDatabase, trait_: Trait) -> bool {\n+    let name = trait_.name(db).unwrap_or_else(crate::Name::missing).to_string();\n+    match &*name {\n+        \"Send\" | \"Sync\" | \"Sized\" | \"Fn\" | \"FnMut\" | \"FnOnce\" => true,\n+        _ => false,\n+    }\n+}\n+\n fn convert_where_clauses(\n     db: &impl HirDatabase,\n     def: GenericDef,\n@@ -198,6 +206,19 @@ fn convert_where_clauses(\n     let generic_predicates = db.generic_predicates(def);\n     let mut result = Vec::with_capacity(generic_predicates.len());\n     for pred in generic_predicates.iter() {\n+        if pred.is_error() {\n+            // HACK: Return just the single predicate (which is always false\n+            // anyway), otherwise Chalk can easily get into slow situations\n+            return vec![pred.clone().subst(substs).to_chalk(db)];\n+        }\n+        match pred {\n+            GenericPredicate::Implemented(trait_ref) => {\n+                if blacklisted_trait(db, trait_ref.trait_) {\n+                    continue;\n+                }\n+            }\n+            _ => {}\n+        }\n         result.push(pred.clone().subst(substs).to_chalk(db));\n     }\n     result\n@@ -230,6 +251,7 @@ where\n             return Arc::new(TraitDatum { binders: make_binders(trait_datum_bound, 1) });\n         }\n         let trait_: Trait = from_chalk(self.db, trait_id);\n+        debug!(\"trait {:?} = {:?}\", trait_id, trait_.name(self.db));\n         let generic_params = trait_.generic_params(self.db);\n         let bound_vars = Substs::bound_vars(&generic_params);\n         let trait_ref = trait_.trait_ref(self.db).subst(&bound_vars).to_chalk(self.db);\n@@ -250,6 +272,7 @@ where\n     fn struct_datum(&self, struct_id: chalk_ir::StructId) -> Arc<StructDatum> {\n         debug!(\"struct_datum {:?}\", struct_id);\n         let type_ctor = from_chalk(self.db, struct_id);\n+        debug!(\"struct {:?} = {:?}\", struct_id, type_ctor);\n         // FIXME might be nicer if we can create a fake GenericParams for the TypeCtor\n         // FIXME extract this to a method on Ty\n         let (num_params, where_clauses, upstream) = match type_ctor {\n@@ -358,7 +381,11 @@ where\n         if trait_id == UNKNOWN_TRAIT {\n             return Vec::new();\n         }\n-        let trait_ = from_chalk(self.db, trait_id);\n+        let trait_: Trait = from_chalk(self.db, trait_id);\n+        let blacklisted = blacklisted_trait(self.db, trait_);\n+        if blacklisted {\n+            return Vec::new();\n+        }\n         let result: Vec<_> = self\n             .db\n             .impls_for_trait(self.krate, trait_)"}]}