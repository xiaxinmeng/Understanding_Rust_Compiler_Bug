{"sha": "5643a0662af337c1096975400040c4442da439ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2NDNhMDY2MmFmMzM3YzEwOTY5NzU0MDAwNDBjNDQ0MmRhNDM5Y2E=", "commit": {"author": {"name": "Nathan Whitaker", "email": "nathan.whitaker01@gmail.com", "date": "2020-08-18T23:37:50Z"}, "committer": {"name": "Nathan Whitaker", "email": "nathan.whitaker01@gmail.com", "date": "2020-10-26T22:19:47Z"}, "message": "Tweak diagnostic", "tree": {"sha": "4dccc35967c4099ac1d44ff5dde77688292c5f22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4dccc35967c4099ac1d44ff5dde77688292c5f22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5643a0662af337c1096975400040c4442da439ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5643a0662af337c1096975400040c4442da439ca", "html_url": "https://github.com/rust-lang/rust/commit/5643a0662af337c1096975400040c4442da439ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5643a0662af337c1096975400040c4442da439ca/comments", "author": {"login": "nathanwhit", "id": 17734409, "node_id": "MDQ6VXNlcjE3NzM0NDA5", "avatar_url": "https://avatars.githubusercontent.com/u/17734409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathanwhit", "html_url": "https://github.com/nathanwhit", "followers_url": "https://api.github.com/users/nathanwhit/followers", "following_url": "https://api.github.com/users/nathanwhit/following{/other_user}", "gists_url": "https://api.github.com/users/nathanwhit/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathanwhit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathanwhit/subscriptions", "organizations_url": "https://api.github.com/users/nathanwhit/orgs", "repos_url": "https://api.github.com/users/nathanwhit/repos", "events_url": "https://api.github.com/users/nathanwhit/events{/privacy}", "received_events_url": "https://api.github.com/users/nathanwhit/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nathanwhit", "id": 17734409, "node_id": "MDQ6VXNlcjE3NzM0NDA5", "avatar_url": "https://avatars.githubusercontent.com/u/17734409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathanwhit", "html_url": "https://github.com/nathanwhit", "followers_url": "https://api.github.com/users/nathanwhit/followers", "following_url": "https://api.github.com/users/nathanwhit/following{/other_user}", "gists_url": "https://api.github.com/users/nathanwhit/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathanwhit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathanwhit/subscriptions", "organizations_url": "https://api.github.com/users/nathanwhit/orgs", "repos_url": "https://api.github.com/users/nathanwhit/repos", "events_url": "https://api.github.com/users/nathanwhit/events{/privacy}", "received_events_url": "https://api.github.com/users/nathanwhit/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce95122e95b5cb4698fa2a07e747823b64729f59", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce95122e95b5cb4698fa2a07e747823b64729f59", "html_url": "https://github.com/rust-lang/rust/commit/ce95122e95b5cb4698fa2a07e747823b64729f59"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "1e67e9dd7deba3a583e0a28ee62048aff89da8c0", "filename": "compiler/rustc_lint/src/methods.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5643a0662af337c1096975400040c4442da439ca/compiler%2Frustc_lint%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5643a0662af337c1096975400040c4442da439ca/compiler%2Frustc_lint%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fmethods.rs?ref=5643a0662af337c1096975400040c4442da439ca", "patch": "@@ -43,12 +43,13 @@ impl<'tcx> LateLintPass<'tcx> for TemporaryCStringAsPtr {\n         match first_method_call(expr) {\n             Some((path, args)) if path.ident.name == sym::as_ptr => {\n                 let unwrap_arg = &args[0];\n+                let as_ptr_span = path.ident.span;\n                 match first_method_call(unwrap_arg) {\n                     Some((path, args))\n                         if path.ident.name == sym::unwrap || path.ident.name == sym::expect =>\n                     {\n                         let source_arg = &args[0];\n-                        lint_cstring_as_ptr(cx, source_arg, unwrap_arg);\n+                        lint_cstring_as_ptr(cx, as_ptr_span, source_arg, unwrap_arg);\n                     }\n                     _ => return,\n                 }\n@@ -62,6 +63,7 @@ const CSTRING_PATH: [Symbol; 4] = [sym::std, sym::ffi, sym::c_str, sym::CString]\n \n fn lint_cstring_as_ptr(\n     cx: &LateContext<'_>,\n+    as_ptr_span: Span,\n     source: &rustc_hir::Expr<'_>,\n     unwrap: &rustc_hir::Expr<'_>,\n ) {\n@@ -70,11 +72,11 @@ fn lint_cstring_as_ptr(\n         if cx.tcx.is_diagnostic_item(sym::result_type, def.did) {\n             if let ty::Adt(adt, _) = substs.type_at(0).kind {\n                 if cx.match_def_path(adt.did, &CSTRING_PATH) {\n-                    cx.struct_span_lint(TEMPORARY_CSTRING_AS_PTR, source.span, |diag| {\n+                    cx.struct_span_lint(TEMPORARY_CSTRING_AS_PTR, as_ptr_span, |diag| {\n                         let mut diag = diag\n                             .build(\"getting the inner pointer of a temporary `CString`\");\n-                        diag.span_label(source.span, \"this pointer will be invalid\");\n-                        diag.span_help(\n+                        diag.span_label(as_ptr_span, \"this pointer will be invalid\");\n+                        diag.span_label(\n                             unwrap.span,\n                             \"this `CString` is deallocated at the end of the expression, bind it to a variable to extend its lifetime\",\n                         );"}, {"sha": "9ceb71ba8d9eb3d1a32d5989a8883d84063f8a0d", "filename": "src/test/ui/lint/lint-temporary-cstring-as-ptr.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5643a0662af337c1096975400040c4442da439ca/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5643a0662af337c1096975400040c4442da439ca/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-ptr.stderr?ref=5643a0662af337c1096975400040c4442da439ca", "patch": "@@ -1,15 +1,12 @@\n error: getting the inner pointer of a temporary `CString`\n-  --> $DIR/lint-temporary-cstring-as-ptr.rs:6:13\n+  --> $DIR/lint-temporary-cstring-as-ptr.rs:6:48\n    |\n LL |     let s = CString::new(\"some text\").unwrap().as_ptr();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ this pointer will be invalid\n+   |             ---------------------------------- ^^^^^^ this pointer will be invalid\n+   |             |\n+   |             this `CString` is deallocated at the end of the expression, bind it to a variable to extend its lifetime\n    |\n    = note: `#[deny(temporary_cstring_as_ptr)]` on by default\n-help: this `CString` is deallocated at the end of the expression, bind it to a variable to extend its lifetime\n-  --> $DIR/lint-temporary-cstring-as-ptr.rs:6:13\n-   |\n-LL |     let s = CString::new(\"some text\").unwrap().as_ptr();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: pointers do not have a lifetime; when calling `as_ptr` the `CString` is deallocated because nothing is referencing it as far as the type system is concerned\n \n error: aborting due to previous error"}]}