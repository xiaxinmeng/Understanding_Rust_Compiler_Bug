{"sha": "3af372ad574bb952f728f18ac7262f1dc6503864", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhZjM3MmFkNTc0YmI5NTJmNzI4ZjE4YWM3MjYyZjFkYzY1MDM4NjQ=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-07-24T01:49:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-07-24T01:49:56Z"}, "message": "Rollup merge of #52637 - RalfJung:rc, r=joshtriplett\n\nDon't use NonNull::dangling as sentinel value in Rc, Arc\n\nInstead, rely on alignment and use usize::MAX as sentinel.\n\nCc #52508\n\nr? @joshtriplett", "tree": {"sha": "fee47a82a740e7e45db0bed4544640deb4225580", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fee47a82a740e7e45db0bed4544640deb4225580"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3af372ad574bb952f728f18ac7262f1dc6503864", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbVoXFCRBK7hj4Ov3rIwAAdHIIAE+h1EMu8b2vPBs8VPApgGGy\nmZFDjiYJOPloLUQIVGpc0Sxb8dgAeLYD/d/aYY9d9oXvHl7dDRj0aCi+tXCQPFJ2\nKkcVWIdKgxe8lcMD6fvFNeLp6k3P1lDEXCxmUkF3jxgUtcH0jGTtTAuqMA5Lq9uM\nITLW1DoqK2nNCjJfAkQv0XcJcnFVwGgexXVknNO7eFQ/1PWiXRs3iukqp5Xfr1Fn\nrJ3fsiPIBin3pTFw9szivS7ilQEYK8dA1QOVeAWKeYqJhPi2aqbTesKwfdRf/Rrf\ntWVl5Q/++urcNE7f+4TQkGQvJzmrq7j9ipM6TgDPl7DPbKgSUYObaNh2mdIHZmo=\n=V7D7\n-----END PGP SIGNATURE-----\n", "payload": "tree fee47a82a740e7e45db0bed4544640deb4225580\nparent 4084f0ee8a7112c234e67ff8daf4a0ee1db3abef\nparent a303741334baafa475632f23145695cba80ce8e7\nauthor kennytm <kennytm@gmail.com> 1532396996 +0800\ncommitter GitHub <noreply@github.com> 1532396996 +0800\n\nRollup merge of #52637 - RalfJung:rc, r=joshtriplett\n\nDon't use NonNull::dangling as sentinel value in Rc, Arc\n\nInstead, rely on alignment and use usize::MAX as sentinel.\n\nCc #52508\n\nr? @joshtriplett\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3af372ad574bb952f728f18ac7262f1dc6503864", "html_url": "https://github.com/rust-lang/rust/commit/3af372ad574bb952f728f18ac7262f1dc6503864", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3af372ad574bb952f728f18ac7262f1dc6503864/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4084f0ee8a7112c234e67ff8daf4a0ee1db3abef", "url": "https://api.github.com/repos/rust-lang/rust/commits/4084f0ee8a7112c234e67ff8daf4a0ee1db3abef", "html_url": "https://github.com/rust-lang/rust/commit/4084f0ee8a7112c234e67ff8daf4a0ee1db3abef"}, {"sha": "a303741334baafa475632f23145695cba80ce8e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a303741334baafa475632f23145695cba80ce8e7", "html_url": "https://github.com/rust-lang/rust/commit/a303741334baafa475632f23145695cba80ce8e7"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "be049eb6e5ef377a56daff179198e8faa26a0bbe", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3af372ad574bb952f728f18ac7262f1dc6503864/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3af372ad574bb952f728f18ac7262f1dc6503864/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=3af372ad574bb952f728f18ac7262f1dc6503864", "patch": "@@ -258,6 +258,7 @@ use core::ops::Deref;\n use core::ops::CoerceUnsized;\n use core::ptr::{self, NonNull};\n use core::convert::From;\n+use core::usize;\n \n use alloc::{Global, Alloc, Layout, box_free, handle_alloc_error};\n use string::String;\n@@ -449,6 +450,8 @@ impl<T: ?Sized> Rc<T> {\n     #[stable(feature = \"rc_weak\", since = \"1.4.0\")]\n     pub fn downgrade(this: &Self) -> Weak<T> {\n         this.inc_weak();\n+        // Make sure we do not create a dangling Weak\n+        debug_assert!(!is_dangling(this.ptr));\n         Weak { ptr: this.ptr }\n     }\n \n@@ -1154,8 +1157,9 @@ impl<T> From<Vec<T>> for Rc<[T]> {\n pub struct Weak<T: ?Sized> {\n     // This is a `NonNull` to allow optimizing the size of this type in enums,\n     // but it is not necessarily a valid pointer.\n-    // `Weak::new` sets this to a dangling pointer so that it doesn\u2019t need\n-    // to allocate space on the heap.\n+    // `Weak::new` sets this to `usize::MAX` so that it doesn\u2019t need\n+    // to allocate space on the heap.  That's not a value a real pointer\n+    // will ever have because RcBox has alignment at least 2.\n     ptr: NonNull<RcBox<T>>,\n }\n \n@@ -1185,15 +1189,14 @@ impl<T> Weak<T> {\n     #[stable(feature = \"downgraded_weak\", since = \"1.10.0\")]\n     pub fn new() -> Weak<T> {\n         Weak {\n-            ptr: NonNull::dangling(),\n+            ptr: NonNull::new(usize::MAX as *mut RcBox<T>).expect(\"MAX is not 0\"),\n         }\n     }\n }\n \n pub(crate) fn is_dangling<T: ?Sized>(ptr: NonNull<T>) -> bool {\n     let address = ptr.as_ptr() as *mut () as usize;\n-    let align = align_of_val(unsafe { ptr.as_ref() });\n-    address == align\n+    address == usize::MAX\n }\n \n impl<T: ?Sized> Weak<T> {"}, {"sha": "a00b6b4e435f06e504f6521d4c137e4a9cd38343", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3af372ad574bb952f728f18ac7262f1dc6503864/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3af372ad574bb952f728f18ac7262f1dc6503864/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=3af372ad574bb952f728f18ac7262f1dc6503864", "patch": "@@ -238,8 +238,9 @@ impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Arc<U>> for Arc<T> {}\n pub struct Weak<T: ?Sized> {\n     // This is a `NonNull` to allow optimizing the size of this type in enums,\n     // but it is not necessarily a valid pointer.\n-    // `Weak::new` sets this to a dangling pointer so that it doesn\u2019t need\n-    // to allocate space on the heap.\n+    // `Weak::new` sets this to `usize::MAX` so that it doesn\u2019t need\n+    // to allocate space on the heap.  That's not a value a real pointer\n+    // will ever have because RcBox has alignment at least 2.\n     ptr: NonNull<ArcInner<T>>,\n }\n \n@@ -442,7 +443,11 @@ impl<T: ?Sized> Arc<T> {\n             // synchronize with the write coming from `is_unique`, so that the\n             // events prior to that write happen before this read.\n             match this.inner().weak.compare_exchange_weak(cur, cur + 1, Acquire, Relaxed) {\n-                Ok(_) => return Weak { ptr: this.ptr },\n+                Ok(_) => {\n+                    // Make sure we do not create a dangling Weak\n+                    debug_assert!(!is_dangling(this.ptr));\n+                    return Weak { ptr: this.ptr };\n+                }\n                 Err(old) => cur = old,\n             }\n         }\n@@ -1033,7 +1038,7 @@ impl<T> Weak<T> {\n     #[stable(feature = \"downgraded_weak\", since = \"1.10.0\")]\n     pub fn new() -> Weak<T> {\n         Weak {\n-            ptr: NonNull::dangling(),\n+            ptr: NonNull::new(usize::MAX as *mut ArcInner<T>).expect(\"MAX is not 0\"),\n         }\n     }\n }"}]}