{"sha": "db4839033c1903f0926100692b69641b506c05d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiNDgzOTAzM2MxOTAzZjA5MjYxMDA2OTJiNjk2NDFiNTA2YzA1ZDE=", "commit": {"author": {"name": "Evgenii P", "email": "eupn@protonmail.com", "date": "2019-08-09T08:04:13Z"}, "committer": {"name": "Evgenii P", "email": "eupn@protonmail.com", "date": "2019-08-09T08:04:13Z"}, "message": "Change macro to function", "tree": {"sha": "2e6e19db015cc7d9b49434da5b040371cc00d734", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e6e19db015cc7d9b49434da5b040371cc00d734"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db4839033c1903f0926100692b69641b506c05d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db4839033c1903f0926100692b69641b506c05d1", "html_url": "https://github.com/rust-lang/rust/commit/db4839033c1903f0926100692b69641b506c05d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db4839033c1903f0926100692b69641b506c05d1/comments", "author": {"login": "eupn", "id": 36292692, "node_id": "MDQ6VXNlcjM2MjkyNjky", "avatar_url": "https://avatars.githubusercontent.com/u/36292692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eupn", "html_url": "https://github.com/eupn", "followers_url": "https://api.github.com/users/eupn/followers", "following_url": "https://api.github.com/users/eupn/following{/other_user}", "gists_url": "https://api.github.com/users/eupn/gists{/gist_id}", "starred_url": "https://api.github.com/users/eupn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eupn/subscriptions", "organizations_url": "https://api.github.com/users/eupn/orgs", "repos_url": "https://api.github.com/users/eupn/repos", "events_url": "https://api.github.com/users/eupn/events{/privacy}", "received_events_url": "https://api.github.com/users/eupn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eupn", "id": 36292692, "node_id": "MDQ6VXNlcjM2MjkyNjky", "avatar_url": "https://avatars.githubusercontent.com/u/36292692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eupn", "html_url": "https://github.com/eupn", "followers_url": "https://api.github.com/users/eupn/followers", "following_url": "https://api.github.com/users/eupn/following{/other_user}", "gists_url": "https://api.github.com/users/eupn/gists{/gist_id}", "starred_url": "https://api.github.com/users/eupn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eupn/subscriptions", "organizations_url": "https://api.github.com/users/eupn/orgs", "repos_url": "https://api.github.com/users/eupn/repos", "events_url": "https://api.github.com/users/eupn/events{/privacy}", "received_events_url": "https://api.github.com/users/eupn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "073cf423916c8854e060a1127856dc4736fe83b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/073cf423916c8854e060a1127856dc4736fe83b1", "html_url": "https://github.com/rust-lang/rust/commit/073cf423916c8854e060a1127856dc4736fe83b1"}], "stats": {"total": 28, "additions": 13, "deletions": 15}, "files": [{"sha": "06822ea9175253cc10defc1338b99079d70a61a1", "filename": "crates/ra_syntax/src/parsing/lexer.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/db4839033c1903f0926100692b69641b506c05d1/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4839033c1903f0926100692b69641b506c05d1/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs?ref=db4839033c1903f0926100692b69641b506c05d1", "patch": "@@ -12,19 +12,17 @@ pub struct Token {\n     pub len: TextUnit,\n }\n \n-macro_rules! match_literal_kind {\n-    ($kind:expr) => {\n-        match $kind {\n-            ra_rustc_lexer::LiteralKind::Int { .. } => INT_NUMBER,\n-            ra_rustc_lexer::LiteralKind::Float { .. } => FLOAT_NUMBER,\n-            ra_rustc_lexer::LiteralKind::Char { .. } => CHAR,\n-            ra_rustc_lexer::LiteralKind::Byte { .. } => BYTE,\n-            ra_rustc_lexer::LiteralKind::Str { .. } => STRING,\n-            ra_rustc_lexer::LiteralKind::ByteStr { .. } => BYTE_STRING,\n-            ra_rustc_lexer::LiteralKind::RawStr { .. } => RAW_STRING,\n-            ra_rustc_lexer::LiteralKind::RawByteStr { .. } => RAW_BYTE_STRING,\n-        }\n-    };\n+fn match_literal_kind(kind: ra_rustc_lexer::LiteralKind) -> SyntaxKind {\n+    match kind {\n+        ra_rustc_lexer::LiteralKind::Int { .. } => INT_NUMBER,\n+        ra_rustc_lexer::LiteralKind::Float { .. } => FLOAT_NUMBER,\n+        ra_rustc_lexer::LiteralKind::Char { .. } => CHAR,\n+        ra_rustc_lexer::LiteralKind::Byte { .. } => BYTE,\n+        ra_rustc_lexer::LiteralKind::Str { .. } => STRING,\n+        ra_rustc_lexer::LiteralKind::ByteStr { .. } => BYTE_STRING,\n+        ra_rustc_lexer::LiteralKind::RawStr { .. } => RAW_STRING,\n+        ra_rustc_lexer::LiteralKind::RawByteStr { .. } => RAW_BYTE_STRING,\n+    }\n }\n \n /// Break a string up into its component tokens\n@@ -68,7 +66,7 @@ pub fn tokenize(text: &str) -> Vec<Token> {\n                 }\n             }\n             ra_rustc_lexer::TokenKind::RawIdent => IDENT,\n-            ra_rustc_lexer::TokenKind::Literal { kind, .. } => match_literal_kind!(kind),\n+            ra_rustc_lexer::TokenKind::Literal { kind, .. } => match_literal_kind(kind),\n             ra_rustc_lexer::TokenKind::Lifetime { .. } => LIFETIME,\n             ra_rustc_lexer::TokenKind::Semi => SEMI,\n             ra_rustc_lexer::TokenKind::Comma => COMMA,\n@@ -137,7 +135,7 @@ pub fn classify_literal(text: &str) -> Option<Token> {\n         return None;\n     }\n     let kind = match t.kind {\n-        ra_rustc_lexer::TokenKind::Literal { kind, .. } => match_literal_kind!(kind),\n+        ra_rustc_lexer::TokenKind::Literal { kind, .. } => match_literal_kind(kind),\n         _ => return None,\n     };\n     Some(Token { kind, len: TextUnit::from_usize(t.len) })"}]}