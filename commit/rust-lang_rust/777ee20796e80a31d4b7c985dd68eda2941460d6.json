{"sha": "777ee20796e80a31d4b7c985dd68eda2941460d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3N2VlMjA3OTZlODBhMzFkNGI3Yzk4NWRkNjhlZGEyOTQxNDYwZDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-01T19:53:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-01T19:53:19Z"}, "message": "Auto merge of #41611 - cramertj:metadata-queries-1, r=nikomatsakis\n\nQueryify crate metadata\n\nPart of https://github.com/rust-lang/rust/issues/41417.\n\nr? @nikomatsakis", "tree": {"sha": "dec6921c97be53ac280230d5060d3a87b4ddf752", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dec6921c97be53ac280230d5060d3a87b4ddf752"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/777ee20796e80a31d4b7c985dd68eda2941460d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/777ee20796e80a31d4b7c985dd68eda2941460d6", "html_url": "https://github.com/rust-lang/rust/commit/777ee20796e80a31d4b7c985dd68eda2941460d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/777ee20796e80a31d4b7c985dd68eda2941460d6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cb396c68088f38e517ac8890030d17a969e57ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cb396c68088f38e517ac8890030d17a969e57ba", "html_url": "https://github.com/rust-lang/rust/commit/4cb396c68088f38e517ac8890030d17a969e57ba"}, {"sha": "daa0094eb791442c7f89645f00c5f33dbb9bf308", "url": "https://api.github.com/repos/rust-lang/rust/commits/daa0094eb791442c7f89645f00c5f33dbb9bf308", "html_url": "https://github.com/rust-lang/rust/commit/daa0094eb791442c7f89645f00c5f33dbb9bf308"}], "stats": {"total": 114, "additions": 56, "deletions": 58}, "files": [{"sha": "50920ca7f7ea0c3b3e372ed37aa669856d4a0f36", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/777ee20796e80a31d4b7c985dd68eda2941460d6/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/777ee20796e80a31d4b7c985dd68eda2941460d6/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=777ee20796e80a31d4b7c985dd68eda2941460d6", "patch": "@@ -35,7 +35,6 @@ use session::search_paths::PathKind;\n use util::nodemap::{NodeSet, DefIdMap};\n \n use std::any::Any;\n-use std::collections::BTreeMap;\n use std::path::PathBuf;\n use std::rc::Rc;\n use syntax::ast;\n@@ -250,10 +249,6 @@ pub trait CrateStore {\n     // misc. metadata\n     fn item_body<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)\n                            -> &'tcx hir::Body;\n-    fn item_body_nested_bodies(&self, def: DefId) -> BTreeMap<hir::BodyId, hir::Body>;\n-    fn const_is_rvalue_promotable_to_static(&self, def: DefId) -> bool;\n-\n-    fn is_item_mir_available(&self, def: DefId) -> bool;\n \n     // This is basically a 1-based range of ints, which is a little\n     // silly - I may fix that.\n@@ -401,16 +396,6 @@ impl CrateStore for DummyCrateStore {\n                            -> &'tcx hir::Body {\n         bug!(\"item_body\")\n     }\n-    fn item_body_nested_bodies(&self, def: DefId) -> BTreeMap<hir::BodyId, hir::Body> {\n-        bug!(\"item_body_nested_bodies\")\n-    }\n-    fn const_is_rvalue_promotable_to_static(&self, def: DefId) -> bool {\n-        bug!(\"const_is_rvalue_promotable_to_static\")\n-    }\n-\n-    fn is_item_mir_available(&self, def: DefId) -> bool {\n-        bug!(\"is_item_mir_available\")\n-    }\n \n     // This is basically a 1-based range of ints, which is a little\n     // silly - I may fix that."}, {"sha": "3f18a480dd67cf68d9f67b1db04077410ef2a831", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/777ee20796e80a31d4b7c985dd68eda2941460d6/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/777ee20796e80a31d4b7c985dd68eda2941460d6/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=777ee20796e80a31d4b7c985dd68eda2941460d6", "patch": "@@ -24,6 +24,7 @@ use util::nodemap::NodeSet;\n use rustc_data_structures::indexed_vec::IndexVec;\n use std::cell::{RefCell, RefMut};\n use std::mem;\n+use std::collections::BTreeMap;\n use std::ops::Deref;\n use std::rc::Rc;\n use syntax_pos::{Span, DUMMY_SP};\n@@ -291,10 +292,30 @@ impl<'tcx> QueryDescription for queries::def_span<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription for queries::item_body_nested_bodies<'tcx> {\n+    fn describe(tcx: TyCtxt, def_id: DefId) -> String {\n+        format!(\"nested item bodies of `{}`\", tcx.item_path_str(def_id))\n+    }\n+}\n+\n+impl<'tcx> QueryDescription for queries::const_is_rvalue_promotable_to_static<'tcx> {\n+    fn describe(tcx: TyCtxt, def_id: DefId) -> String {\n+        format!(\"const checking if rvalue is promotable to static `{}`\",\n+            tcx.item_path_str(def_id))\n+    }\n+}\n+\n+impl<'tcx> QueryDescription for queries::is_item_mir_available<'tcx> {\n+    fn describe(tcx: TyCtxt, def_id: DefId) -> String {\n+        format!(\"checking if item is mir available: `{}`\",\n+            tcx.item_path_str(def_id))\n+    }\n+}\n+\n macro_rules! define_maps {\n     (<$tcx:tt>\n      $($(#[$attr:meta])*\n-       [$($pub:tt)*] $name:ident: $node:ident($K:ty) -> $V:ty),*) => {\n+       [$($pub:tt)*] $name:ident: $node:ident($K:ty) -> $V:ty,)*) => {\n         pub struct Maps<$tcx> {\n             providers: IndexVec<CrateNum, Providers<$tcx>>,\n             query_stack: RefCell<Vec<(Span, Query<$tcx>)>>,\n@@ -577,7 +598,11 @@ define_maps! { <'tcx>\n     [] symbol_name: symbol_name_dep_node(ty::Instance<'tcx>) -> ty::SymbolName,\n \n     [] describe_def: DescribeDef(DefId) -> Option<Def>,\n-    [] def_span: DefSpan(DefId) -> Span\n+    [] def_span: DefSpan(DefId) -> Span,\n+\n+    [] item_body_nested_bodies: metadata_dep_node(DefId) -> Rc<BTreeMap<hir::BodyId, hir::Body>>,\n+    [] const_is_rvalue_promotable_to_static: metadata_dep_node(DefId) -> bool,\n+    [] is_item_mir_available: metadata_dep_node(DefId) -> bool,\n }\n \n fn coherent_trait_dep_node((_, def_id): (CrateNum, DefId)) -> DepNode<DefId> {\n@@ -592,6 +617,10 @@ fn reachability_dep_node(_: CrateNum) -> DepNode<DefId> {\n     DepNode::Reachability\n }\n \n+fn metadata_dep_node(def_id: DefId) -> DepNode<DefId> {\n+    DepNode::MetaData(def_id)\n+}\n+\n fn mir_shim_dep_node(instance: ty::InstanceDef) -> DepNode<DefId> {\n     instance.dep_node()\n }\n@@ -608,4 +637,4 @@ fn typeck_item_bodies_dep_node(_: CrateNum) -> DepNode<DefId> {\n \n fn const_eval_dep_node((def_id, _): (DefId, &Substs)) -> DepNode<DefId> {\n     DepNode::ConstEval(def_id)\n-}\n\\ No newline at end of file\n+}"}, {"sha": "7d43e0d0659cc43e76cbcea30be60d10a66e4458", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/777ee20796e80a31d4b7c985dd68eda2941460d6/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/777ee20796e80a31d4b7c985dd68eda2941460d6/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=777ee20796e80a31d4b7c985dd68eda2941460d6", "patch": "@@ -2332,7 +2332,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             return None;\n         }\n \n-        if !did.is_local() && !self.sess.cstore.is_item_mir_available(did) {\n+        if !did.is_local() && !self.is_item_mir_available(did) {\n             return None;\n         }\n "}, {"sha": "f5a8accea2803200bcaf23447bafbdc97150d57d", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/777ee20796e80a31d4b7c985dd68eda2941460d6/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/777ee20796e80a31d4b7c985dd68eda2941460d6/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=777ee20796e80a31d4b7c985dd68eda2941460d6", "patch": "@@ -115,6 +115,21 @@ provide! { <'tcx> tcx, def_id, cdata\n     is_foreign_item => { cdata.is_foreign_item(def_id.index) }\n     describe_def => { cdata.get_def(def_id.index) }\n     def_span => { cdata.get_span(def_id.index, &tcx.sess) }\n+    item_body_nested_bodies => {\n+        let map: BTreeMap<_, _> = cdata.entry(def_id.index).ast.into_iter().flat_map(|ast| {\n+            ast.decode(cdata).nested_bodies.decode(cdata).map(|body| (body.id(), body))\n+        }).collect();\n+\n+        Rc::new(map)\n+    }\n+    const_is_rvalue_promotable_to_static => {\n+        cdata.entry(def_id.index).ast.expect(\"const item missing `ast`\")\n+            .decode(cdata).rvalue_promotable_to_static\n+    }\n+    is_item_mir_available => {\n+        !cdata.is_proc_macro(def_id.index) &&\n+        cdata.maybe_entry(def_id.index).and_then(|item| item.decode(cdata).mir).is_some()\n+    }\n }\n \n impl CrateStore for cstore::CStore {\n@@ -432,21 +447,6 @@ impl CrateStore for cstore::CStore {\n         self.get_crate_data(def_id.krate).item_body(tcx, def_id.index)\n     }\n \n-    fn item_body_nested_bodies(&self, def: DefId) -> BTreeMap<hir::BodyId, hir::Body> {\n-        self.dep_graph.read(DepNode::MetaData(def));\n-        self.get_crate_data(def.krate).item_body_nested_bodies(def.index)\n-    }\n-\n-    fn const_is_rvalue_promotable_to_static(&self, def: DefId) -> bool {\n-        self.dep_graph.read(DepNode::MetaData(def));\n-        self.get_crate_data(def.krate).const_is_rvalue_promotable_to_static(def.index)\n-    }\n-\n-    fn is_item_mir_available(&self, def: DefId) -> bool {\n-        self.dep_graph.read(DepNode::MetaData(def));\n-        self.get_crate_data(def.krate).is_item_mir_available(def.index)\n-    }\n-\n     fn crates(&self) -> Vec<CrateNum>\n     {\n         let mut result = vec![];"}, {"sha": "933166b0524533423e37ecc39fd29521024cf7fe", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 3, "deletions": 20, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/777ee20796e80a31d4b7c985dd68eda2941460d6/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/777ee20796e80a31d4b7c985dd68eda2941460d6/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=777ee20796e80a31d4b7c985dd68eda2941460d6", "patch": "@@ -28,7 +28,6 @@ use rustc::mir::Mir;\n \n use std::borrow::Cow;\n use std::cell::Ref;\n-use std::collections::BTreeMap;\n use std::io;\n use std::mem;\n use std::rc::Rc;\n@@ -442,16 +441,16 @@ impl<'tcx> EntryKind<'tcx> {\n }\n \n impl<'a, 'tcx> CrateMetadata {\n-    fn is_proc_macro(&self, id: DefIndex) -> bool {\n+    pub fn is_proc_macro(&self, id: DefIndex) -> bool {\n         self.proc_macros.is_some() && id != CRATE_DEF_INDEX\n     }\n \n-    fn maybe_entry(&self, item_id: DefIndex) -> Option<Lazy<Entry<'tcx>>> {\n+    pub fn maybe_entry(&self, item_id: DefIndex) -> Option<Lazy<Entry<'tcx>>> {\n         assert!(!self.is_proc_macro(item_id));\n         self.root.index.lookup(self.blob.raw_bytes(), item_id)\n     }\n \n-    fn entry(&self, item_id: DefIndex) -> Entry<'tcx> {\n+    pub fn entry(&self, item_id: DefIndex) -> Entry<'tcx> {\n         match self.maybe_entry(item_id) {\n             None => {\n                 bug!(\"entry: id not found: {:?} in crate {:?} with number {}\",\n@@ -773,22 +772,6 @@ impl<'a, 'tcx> CrateMetadata {\n         tcx.alloc_tables(ast.tables.decode((self, tcx)))\n     }\n \n-    pub fn item_body_nested_bodies(&self, id: DefIndex) -> BTreeMap<hir::BodyId, hir::Body> {\n-        self.entry(id).ast.into_iter().flat_map(|ast| {\n-            ast.decode(self).nested_bodies.decode(self).map(|body| (body.id(), body))\n-        }).collect()\n-    }\n-\n-    pub fn const_is_rvalue_promotable_to_static(&self, id: DefIndex) -> bool {\n-        self.entry(id).ast.expect(\"const item missing `ast`\")\n-            .decode(self).rvalue_promotable_to_static\n-    }\n-\n-    pub fn is_item_mir_available(&self, id: DefIndex) -> bool {\n-        !self.is_proc_macro(id) &&\n-        self.maybe_entry(id).and_then(|item| item.decode(self).mir).is_some()\n-    }\n-\n     pub fn maybe_get_item_mir(&self,\n                               tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                               id: DefIndex)"}, {"sha": "6866fe807684a816f591688f15b15b9ebf445281", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/777ee20796e80a31d4b7c985dd68eda2941460d6/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/777ee20796e80a31d4b7c985dd68eda2941460d6/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=777ee20796e80a31d4b7c985dd68eda2941460d6", "patch": "@@ -336,7 +336,7 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Expr, node\n                             _ => false\n                         }\n                     } else {\n-                        v.tcx.sess.cstore.const_is_rvalue_promotable_to_static(did)\n+                        v.tcx.const_is_rvalue_promotable_to_static(did)\n                     };\n                 }\n                 _ => {"}, {"sha": "786001161573fda456d705524c23ee64a90ce11d", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/777ee20796e80a31d4b7c985dd68eda2941460d6/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/777ee20796e80a31d4b7c985dd68eda2941460d6/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=777ee20796e80a31d4b7c985dd68eda2941460d6", "patch": "@@ -659,7 +659,7 @@ fn should_trans_locally<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance: &Instan\n                 // in this crate\n                 false\n             } else {\n-                if !tcx.sess.cstore.is_item_mir_available(def_id) {\n+                if !tcx.is_item_mir_available(def_id) {\n                     bug!(\"Cannot create local trans-item for {:?}\", def_id)\n                 }\n                 true"}, {"sha": "9dea0e3d83088451b551acc35da723395105e5e4", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/777ee20796e80a31d4b7c985dd68eda2941460d6/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/777ee20796e80a31d4b7c985dd68eda2941460d6/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=777ee20796e80a31d4b7c985dd68eda2941460d6", "patch": "@@ -13,6 +13,7 @@\n use std::collections::BTreeMap;\n use std::io;\n use std::iter::once;\n+use std::rc::Rc;\n \n use syntax::ast;\n use rustc::hir;\n@@ -471,7 +472,7 @@ fn build_module(cx: &DocContext, did: DefId) -> clean::Module {\n }\n \n struct InlinedConst {\n-    nested_bodies: BTreeMap<hir::BodyId, hir::Body>\n+    nested_bodies: Rc<BTreeMap<hir::BodyId, hir::Body>>\n }\n \n impl hir::print::PpAnn for InlinedConst {\n@@ -488,7 +489,7 @@ impl hir::print::PpAnn for InlinedConst {\n fn print_inlined_const(cx: &DocContext, did: DefId) -> String {\n     let body = cx.tcx.sess.cstore.item_body(cx.tcx, did);\n     let inlined = InlinedConst {\n-        nested_bodies: cx.tcx.sess.cstore.item_body_nested_bodies(did)\n+        nested_bodies: cx.tcx.item_body_nested_bodies(did)\n     };\n     hir::print::to_string(&inlined, |s| s.print_expr(&body.value))\n }"}]}