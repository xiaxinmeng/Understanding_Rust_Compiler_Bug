{"sha": "826bee7085620843d184dda382b1aa825fc4b770", "node_id": "C_kwDOAAsO6NoAKDgyNmJlZTcwODU2MjA4NDNkMTg0ZGRhMzgyYjFhYTgyNWZjNGI3NzA", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-02-06T19:28:27Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-02-13T17:45:39Z"}, "message": "Implement repeat_while_none for both SearchGraph and EvalCtxt", "tree": {"sha": "f9f3a87f8968b968d523533f789d8994328a2911", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9f3a87f8968b968d523533f789d8994328a2911"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/826bee7085620843d184dda382b1aa825fc4b770", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmPqd0MACgkQgTGiTgx5\n76+6MA/+NjjBYNSgu7dLQtlUL8Xy/rBvB3bzQdW6swZ9GpEBW/9+T2HndUNaeIKJ\nASTCoX+7PRYfcQcF3tRKzLwYKMW+L6hioMMhExaDullytcN4iY2hdtCLiQ16Paeq\n0LBye7boqqBJA/cjRxIPIdJItazI85HuV1v0ct1tDjPP8iwIUyks9MPxYLmepUBI\n4fnIg/7IIRRKO3EvibAb7JEqd+5HBAgJPL9sRgsn4bneSBSwTtnnIGcBv4wGP+Vn\nE6GW97suLAOg5jh6ofsxcJy8P2/GGUqwg0rwF8G+wFAHeQzvDUC4rZzUZ89EWnha\nOxZPg3DPvSZ7lRBb5AiQNk9M+IR6hAxfRP767c5//ATrIl8C1OeVQbmVdhg5fre6\nFSVI/eZSLGavi+9piYxXH1yDNsPTn3jY3NQ+JyM9XMoZ35YdBTiZOkZZH4G3f2p5\n+9/eo0E/B2NH2vnBiPx80qc0ZJdNE28gbftLYboES24DB2wJ3H1O6bj1QspeJzS9\nUX977UfKY1dLGOe0SamzhdboQVGSb4wa3dkR+aL4KDgGmMdNaYvgLnmaNqi+q/PK\nhmWbWOkI7x0omLmz82J7XxkIBlWJm/VcOrUdMhFakc6ZbydZIXBU9C6SixZd+MgW\nZEF7DvdR8UOT5ayexbsZlZXVjeK+CNzJZPK9zLUwxRcfNheXrsQ=\n=wR2P\n-----END PGP SIGNATURE-----", "payload": "tree f9f3a87f8968b968d523533f789d8994328a2911\nparent 873c83ba56650a32383bb8fb4820a0ce792bc121\nauthor Santiago Pastorino <spastorino@gmail.com> 1675711707 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1676310339 -0300\n\nImplement repeat_while_none for both SearchGraph and EvalCtxt\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/826bee7085620843d184dda382b1aa825fc4b770", "html_url": "https://github.com/rust-lang/rust/commit/826bee7085620843d184dda382b1aa825fc4b770", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/826bee7085620843d184dda382b1aa825fc4b770/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "873c83ba56650a32383bb8fb4820a0ce792bc121", "url": "https://api.github.com/repos/rust-lang/rust/commits/873c83ba56650a32383bb8fb4820a0ce792bc121", "html_url": "https://github.com/rust-lang/rust/commit/873c83ba56650a32383bb8fb4820a0ce792bc121"}], "stats": {"total": 62, "additions": 38, "deletions": 24}, "files": [{"sha": "358a2bcc7b9eb2b9d69919733147bb0a168c07b0", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/826bee7085620843d184dda382b1aa825fc4b770/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/826bee7085620843d184dda382b1aa825fc4b770/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=826bee7085620843d184dda382b1aa825fc4b770", "patch": "@@ -31,6 +31,7 @@ use rustc_middle::ty::{\n };\n use rustc_span::DUMMY_SP;\n \n+use crate::solve::search_graph::overflow::OverflowHandler;\n use crate::traits::ObligationCause;\n \n mod assembly;"}, {"sha": "438bcd9a7d689fe4e0b9bbcc2846fea5552a2f4b", "filename": "compiler/rustc_trait_selection/src/solve/search_graph/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/826bee7085620843d184dda382b1aa825fc4b770/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/826bee7085620843d184dda382b1aa825fc4b770/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs?ref=826bee7085620843d184dda382b1aa825fc4b770", "patch": "@@ -1,5 +1,5 @@\n mod cache;\n-mod overflow;\n+pub(crate) mod overflow;\n \n use self::cache::ProvisionalEntry;\n use super::{CanonicalGoal, Certainty, MaybeCause, QueryResult};\n@@ -18,7 +18,7 @@ struct StackElem<'tcx> {\n     has_been_used: bool,\n }\n \n-pub(super) struct SearchGraph<'tcx> {\n+pub(crate) struct SearchGraph<'tcx> {\n     /// The stack of goals currently being computed.\n     ///\n     /// An element is *deeper* in the stack if its index is *lower*."}, {"sha": "0d6863b1e813dbb918eea92482748ae22706fe10", "filename": "compiler/rustc_trait_selection/src/solve/search_graph/overflow.rs", "status": "modified", "additions": 35, "deletions": 22, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/826bee7085620843d184dda382b1aa825fc4b770/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/826bee7085620843d184dda382b1aa825fc4b770/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Foverflow.rs?ref=826bee7085620843d184dda382b1aa825fc4b770", "patch": "@@ -50,36 +50,49 @@ impl OverflowData {\n     }\n }\n \n-impl<'tcx> SearchGraph<'tcx> {\n-    pub fn deal_with_overflow(\n-        &mut self,\n-        tcx: TyCtxt<'tcx>,\n-        goal: Canonical<'tcx, impl Sized>,\n-    ) -> QueryResult<'tcx> {\n-        self.overflow_data.deal_with_overflow();\n-        response_no_constraints(tcx, goal, Certainty::Maybe(MaybeCause::Overflow))\n-    }\n-}\n+pub(crate) trait OverflowHandler<'tcx> {\n+    fn search_graph(&mut self) -> &mut SearchGraph<'tcx>;\n \n-impl<'tcx> EvalCtxt<'_, 'tcx> {\n-    /// A `while`-loop which tracks overflow.\n-    pub fn repeat_while_none<T>(\n+    fn repeat_while_none<T>(\n         &mut self,\n-        mut overflow_body: impl FnMut(&mut Self) -> T,\n+        on_overflow: impl FnOnce(&mut Self) -> T,\n         mut loop_body: impl FnMut(&mut Self) -> Option<Result<T, NoSolution>>,\n     ) -> Result<T, NoSolution> {\n-        let start_depth = self.search_graph.overflow_data.additional_depth;\n-        let depth = self.search_graph.stack.len();\n-        while !self.search_graph.overflow_data.has_overflow(depth) {\n+        let start_depth = self.search_graph().overflow_data.additional_depth;\n+        let depth = self.search_graph().stack.len();\n+        while !self.search_graph().overflow_data.has_overflow(depth) {\n             if let Some(result) = loop_body(self) {\n-                self.search_graph.overflow_data.additional_depth = start_depth;\n+                self.search_graph().overflow_data.additional_depth = start_depth;\n                 return result;\n             }\n \n-            self.search_graph.overflow_data.additional_depth += 1;\n+            self.search_graph().overflow_data.additional_depth += 1;\n         }\n-        self.search_graph.overflow_data.additional_depth = start_depth;\n-        self.search_graph.overflow_data.deal_with_overflow();\n-        Ok(overflow_body(self))\n+        self.search_graph().overflow_data.additional_depth = start_depth;\n+        self.search_graph().overflow_data.deal_with_overflow();\n+        Ok(on_overflow(self))\n+    }\n+}\n+\n+impl<'tcx> OverflowHandler<'tcx> for EvalCtxt<'_, 'tcx> {\n+    fn search_graph(&mut self) -> &mut SearchGraph<'tcx> {\n+        &mut self.search_graph\n+    }\n+}\n+\n+impl<'tcx> OverflowHandler<'tcx> for SearchGraph<'tcx> {\n+    fn search_graph(&mut self) -> &mut SearchGraph<'tcx> {\n+        self\n+    }\n+}\n+\n+impl<'tcx> SearchGraph<'tcx> {\n+    pub fn deal_with_overflow(\n+        &mut self,\n+        tcx: TyCtxt<'tcx>,\n+        goal: Canonical<'tcx, impl Sized>,\n+    ) -> QueryResult<'tcx> {\n+        self.overflow_data.deal_with_overflow();\n+        response_no_constraints(tcx, goal, Certainty::Maybe(MaybeCause::Overflow))\n     }\n }"}]}