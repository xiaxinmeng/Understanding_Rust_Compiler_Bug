{"sha": "5c3928282699244f5e85a66f0cded09ea3dfbeda", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjMzkyODI4MjY5OTI0NGY1ZTg1YTY2ZjBjZGVkMDllYTNkZmJlZGE=", "commit": {"author": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2018-10-14T14:49:28Z"}, "committer": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2018-10-14T14:49:28Z"}, "message": "out_of_bounds_indexing refactoring", "tree": {"sha": "c7c16846d28a6bf9d60c5c34e23219f820c37f5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7c16846d28a6bf9d60c5c34e23219f820c37f5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c3928282699244f5e85a66f0cded09ea3dfbeda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c3928282699244f5e85a66f0cded09ea3dfbeda", "html_url": "https://github.com/rust-lang/rust/commit/5c3928282699244f5e85a66f0cded09ea3dfbeda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c3928282699244f5e85a66f0cded09ea3dfbeda/comments", "author": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f3345e8b2f839f1d3e0c8472537d7d954828ccd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f3345e8b2f839f1d3e0c8472537d7d954828ccd", "html_url": "https://github.com/rust-lang/rust/commit/0f3345e8b2f839f1d3e0c8472537d7d954828ccd"}], "stats": {"total": 65, "additions": 30, "deletions": 35}, "files": [{"sha": "9f9c25f7728105fd4d7cb9fc627972604fb37677", "filename": "clippy_lints/src/indexing_slicing.rs", "status": "modified", "additions": 30, "deletions": 35, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/5c3928282699244f5e85a66f0cded09ea3dfbeda/clippy_lints%2Fsrc%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3928282699244f5e85a66f0cded09ea3dfbeda/clippy_lints%2Fsrc%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findexing_slicing.rs?ref=5c3928282699244f5e85a66f0cded09ea3dfbeda", "patch": "@@ -108,46 +108,41 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IndexingSlicing {\n         if let ExprKind::Index(ref array, ref index) = &expr.node {\n             let ty = cx.tables.expr_ty(array);\n             if let Some(range) = higher::range(cx, index) {\n+\n                 // Ranged indexes, i.e. &x[n..m], &x[n..], &x[..n] and &x[..]\n                 if let ty::Array(_, s) = ty.sty {\n                     let size: u128 = s.assert_usize(cx.tcx).unwrap().into();\n \n-                    match to_const_range(cx, range, size) {\n-                        (None, None) => {},\n-                        (Some(start), None) => {\n-                            if start > size {\n-                                utils::span_lint(\n-                                    cx,\n-                                    OUT_OF_BOUNDS_INDEXING,\n-                                    expr.span,\n-                                    \"range is out of bounds\",\n-                                );\n-                                return;\n-                            }\n-                        },\n-                        (None, Some(end)) => {\n-                            if end > size {\n-                                utils::span_lint(\n-                                    cx,\n-                                    OUT_OF_BOUNDS_INDEXING,\n-                                    expr.span,\n-                                    \"range is out of bounds\",\n-                                );\n-                                return;\n-                            }\n-                        },\n-                        (Some(start), Some(end)) => {\n-                            if start > size || end > size {\n-                                utils::span_lint(\n-                                    cx,\n-                                    OUT_OF_BOUNDS_INDEXING,\n-                                    expr.span,\n-                                    \"range is out of bounds\",\n-                                );\n-                            }\n-                            // early return because both start and end are constant\n+                    let const_range = to_const_range(cx, range, size);\n+\n+                    if let (Some(start), _) = const_range {\n+                        if start > size {\n+                            utils::span_lint(\n+                                cx,\n+                                OUT_OF_BOUNDS_INDEXING,\n+                                expr.span,\n+                                \"range is out of bounds\",\n+                            );\n+                            return;\n+                        }\n+                    }\n+\n+                    if let (_, Some(end)) = const_range {\n+                        if end > size {\n+                            utils::span_lint(\n+                                cx,\n+                                OUT_OF_BOUNDS_INDEXING,\n+                                expr.span,\n+                                \"range is out of bounds\",\n+                            );\n                             return;\n-                        },\n+                        }\n+                    }\n+\n+                    if let (Some(_), Some(_)) = const_range {\n+                        // early return because both start and end are constants\n+                        // and we have proven above that they are in bounds\n+                        return;\n                     }\n                 }\n "}]}