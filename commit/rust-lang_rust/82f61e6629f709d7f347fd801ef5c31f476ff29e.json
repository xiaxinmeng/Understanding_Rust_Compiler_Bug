{"sha": "82f61e6629f709d7f347fd801ef5c31f476ff29e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyZjYxZTY2MjlmNzA5ZDdmMzQ3ZmQ4MDFlZjVjMzFmNDc2ZmYyOWU=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-09-03T16:44:39Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-09-03T18:26:27Z"}, "message": "Add extra insert_use test for pub(crate) re-export handling", "tree": {"sha": "0e632f111245b77e33799c2e51bad3fda59ed66f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e632f111245b77e33799c2e51bad3fda59ed66f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82f61e6629f709d7f347fd801ef5c31f476ff29e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82f61e6629f709d7f347fd801ef5c31f476ff29e", "html_url": "https://github.com/rust-lang/rust/commit/82f61e6629f709d7f347fd801ef5c31f476ff29e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82f61e6629f709d7f347fd801ef5c31f476ff29e/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d29b69cbe61d20556c55e4f6a53da0784df8b6d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d29b69cbe61d20556c55e4f6a53da0784df8b6d0", "html_url": "https://github.com/rust-lang/rust/commit/d29b69cbe61d20556c55e4f6a53da0784df8b6d0"}], "stats": {"total": 31, "additions": 19, "deletions": 12}, "files": [{"sha": "80c62d8bba7ff78ded65d04ca5dad2fb5e93701b", "filename": "crates/assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/82f61e6629f709d7f347fd801ef5c31f476ff29e/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f61e6629f709d7f347fd801ef5c31f476ff29e/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=82f61e6629f709d7f347fd801ef5c31f476ff29e", "patch": "@@ -97,6 +97,7 @@ fn existing_struct_def(db: &RootDatabase, variant_name: &str, variant: &EnumVari\n         .any(|(name, _)| name.to_string() == variant_name.to_string())\n }\n \n+#[allow(dead_code)]\n fn insert_import(\n     ctx: &AssistContext,\n     builder: &mut AssistBuilder,\n@@ -174,9 +175,9 @@ fn update_reference(\n     builder: &mut AssistBuilder,\n     reference: Reference,\n     source_file: &SourceFile,\n-    enum_module_def: &ModuleDef,\n-    variant_hir_name: &Name,\n-    visited_modules_set: &mut FxHashSet<Module>,\n+    _enum_module_def: &ModuleDef,\n+    _variant_hir_name: &Name,\n+    _visited_modules_set: &mut FxHashSet<Module>,\n ) -> Option<()> {\n     let path_expr: ast::PathExpr = find_node_at_offset::<ast::PathExpr>(\n         source_file.syntax(),\n@@ -185,7 +186,7 @@ fn update_reference(\n     let call = path_expr.syntax().parent().and_then(ast::CallExpr::cast)?;\n     let list = call.arg_list()?;\n     let segment = path_expr.path()?.segment()?;\n-    let module = ctx.sema.scope(&path_expr.syntax()).module()?;\n+    let _module = ctx.sema.scope(&path_expr.syntax()).module()?;\n     let list_range = list.syntax().text_range();\n     let inside_list_range = TextRange::new(\n         list_range.start().checked_add(TextSize::from(1))?,"}, {"sha": "8a4c8520d73336acffc5bb3c71ada89ddd42590e", "filename": "crates/assists/src/utils/insert_use.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/82f61e6629f709d7f347fd801ef5c31f476ff29e/crates%2Fassists%2Fsrc%2Futils%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f61e6629f709d7f347fd801ef5c31f476ff29e/crates%2Fassists%2Fsrc%2Futils%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils%2Finsert_use.rs?ref=82f61e6629f709d7f347fd801ef5c31f476ff29e", "patch": "@@ -1,3 +1,4 @@\n+//! Handle syntactic aspects of inserting a new `use`.\n use std::iter::{self, successors};\n \n use algo::skip_trivia_token;\n@@ -10,7 +11,6 @@ use syntax::{\n     ast::{self, make, AstNode},\n     Direction, InsertPosition, SyntaxElement, SyntaxNode, T,\n };\n-\n use test_utils::mark;\n \n #[derive(Debug)]\n@@ -55,7 +55,7 @@ impl ImportScope {\n     fn first_insert_pos(&self) -> (InsertPosition<SyntaxElement>, AddBlankLine) {\n         match self {\n             ImportScope::File(_) => (InsertPosition::First, AddBlankLine::AfterTwice),\n-            // don't insert the impotrs before the item lists curly brace\n+            // don't insert the imports before the item list's opening curly brace\n             ImportScope::Module(item_list) => item_list\n                 .l_curly_token()\n                 .map(|b| (InsertPosition::After(b.into()), AddBlankLine::Around))\n@@ -64,7 +64,7 @@ impl ImportScope {\n     }\n \n     fn insert_pos_after_inner_attribute(&self) -> (InsertPosition<SyntaxElement>, AddBlankLine) {\n-        // check if the scope has a inner attributes, we dont want to insert in front of it\n+        // check if the scope has inner attributes, we dont want to insert in front of them\n         match self\n             .as_syntax_node()\n             .children()\n@@ -119,7 +119,7 @@ pub(crate) fn insert_use(\n         }\n \n         if let ident_level @ 1..=usize::MAX = scope.indent_level().0 as usize {\n-            // TODO: this alone doesnt properly re-align all cases\n+            // FIXME: this alone doesnt properly re-align all cases\n             buf.push(make::tokens::whitespace(&\" \".repeat(4 * ident_level)).into());\n         }\n         buf.push(use_item.syntax().clone().into());\n@@ -530,8 +530,6 @@ fn main() {}\",\n \n     #[test]\n     fn insert_after_inner_attr() {\n-        // empty files will get two trailing newlines\n-        // this is due to the test case insert_no_imports above\n         check_full(\n             \"foo::bar\",\n             r\"#![allow(unused_imports)]\",\n@@ -543,8 +541,6 @@ use foo::bar;\",\n \n     #[test]\n     fn insert_after_inner_attr2() {\n-        // empty files will get two trailing newlines\n-        // this is due to the test case insert_no_imports above\n         check_full(\n             \"foo::bar\",\n             r\"#![allow(unused_imports)]\n@@ -647,6 +643,16 @@ use std::io;\",\n         )\n     }\n \n+    #[test]\n+    fn merge_groups_skip_pub_crate() {\n+        check_full(\n+            \"std::io\",\n+            r\"pub(crate) use std::fmt::{Result, Display};\",\n+            r\"pub(crate) use std::fmt::{Result, Display};\n+use std::io;\",\n+        )\n+    }\n+\n     #[test]\n     #[ignore] // FIXME: Support this\n     fn split_out_merge() {"}]}