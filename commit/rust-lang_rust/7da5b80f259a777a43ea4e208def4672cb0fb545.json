{"sha": "7da5b80f259a777a43ea4e208def4672cb0fb545", "node_id": "C_kwDOAAsO6NoAKDdkYTViODBmMjU5YTc3N2E0M2VhNGUyMDhkZWY0NjcyY2IwZmI1NDU", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-19T19:12:14Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-19T19:12:14Z"}, "message": "Change skip trivial behaviour", "tree": {"sha": "50913b5398361da358d6544b97afdbeb4e5ce68e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50913b5398361da358d6544b97afdbeb4e5ce68e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7da5b80f259a777a43ea4e208def4672cb0fb545", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7da5b80f259a777a43ea4e208def4672cb0fb545", "html_url": "https://github.com/rust-lang/rust/commit/7da5b80f259a777a43ea4e208def4672cb0fb545", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7da5b80f259a777a43ea4e208def4672cb0fb545/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ab0aaa82a24b2d54b2338722cf63c2cb1caa346", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ab0aaa82a24b2d54b2338722cf63c2cb1caa346", "html_url": "https://github.com/rust-lang/rust/commit/7ab0aaa82a24b2d54b2338722cf63c2cb1caa346"}], "stats": {"total": 96, "additions": 51, "deletions": 45}, "files": [{"sha": "13e7a0ac8892f94c9298a4e0976950ff81451f8d", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 42, "deletions": 36, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/7da5b80f259a777a43ea4e208def4672cb0fb545/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7da5b80f259a777a43ea4e208def4672cb0fb545/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=7da5b80f259a777a43ea4e208def4672cb0fb545", "patch": "@@ -258,36 +258,29 @@ fn lifetime_hints(\n         return None;\n     }\n \n-    let skip_due_trivial_single = config.lifetime_elision_hints\n-        == LifetimeElisionHints::SkipTrivial\n-        && (allocated_lifetimes.len() == 1)\n-        && generic_param_list.as_ref().map_or(true, |it| it.lifetime_params().next().is_none());\n-\n-    if skip_due_trivial_single {\n-        cov_mark::hit!(lifetime_hints_single);\n-        return None;\n-    }\n-\n     // apply hints\n     // apply output if required\n-    match (&output, ret_type) {\n-        (Some(output_lt), Some(r)) => {\n-            if let Some(ty) = r.ty() {\n-                walk_ty(&ty, &mut |ty| match ty {\n-                    ast::Type::RefType(ty) if ty.lifetime().is_none() => {\n-                        if let Some(amp) = ty.amp_token() {\n-                            acc.push(InlayHint {\n-                                range: amp.text_range(),\n-                                kind: InlayKind::LifetimeHint,\n-                                label: output_lt.clone(),\n-                            });\n-                        }\n+    let mut is_trivial = true;\n+    if let (Some(output_lt), Some(r)) = (&output, ret_type) {\n+        if let Some(ty) = r.ty() {\n+            walk_ty(&ty, &mut |ty| match ty {\n+                ast::Type::RefType(ty) if ty.lifetime().is_none() => {\n+                    if let Some(amp) = ty.amp_token() {\n+                        is_trivial = false;\n+                        acc.push(InlayHint {\n+                            range: amp.text_range(),\n+                            kind: InlayKind::LifetimeHint,\n+                            label: output_lt.clone(),\n+                        });\n                     }\n-                    _ => (),\n-                })\n-            }\n+                }\n+                _ => (),\n+            })\n         }\n-        _ => (),\n+    }\n+\n+    if config.lifetime_elision_hints == LifetimeElisionHints::SkipTrivial && is_trivial {\n+        return None;\n     }\n \n     let mut idx = match &self_param {\n@@ -2061,6 +2054,9 @@ fn nested_out(a: &()) -> &   &X< &()>{}\n                //^'0     ^'0 ^'0 ^'0\n \n impl () {\n+    fn foo(&self) {}\n+    // ^^^<'0>\n+        // ^'0\n     fn foo(&self) -> &() {}\n     // ^^^<'0>\n         // ^'0       ^'0\n@@ -2085,26 +2081,36 @@ fn nested_in<'named>(named: &        &X<      &()>) {}\n     }\n \n     #[test]\n-    fn hints_lifetimes_skingle_skip() {\n-        cov_mark::check!(lifetime_hints_single);\n+    fn hints_lifetimes_trivial_skip() {\n         check_with_config(\n             InlayHintsConfig {\n                 lifetime_elision_hints: LifetimeElisionHints::SkipTrivial,\n                 ..TEST_CONFIG\n             },\n             r#\"\n-fn single(a: &()) -> &() {}\n-\n-fn double(a: &(), b: &()) {}\n-// ^^^^^^<'0, '1>\n-          // ^'0     ^'1\n+fn no_gpl(a: &()) {}\n+fn empty_gpl<>(a: &()) {}\n+fn partial<'b>(a: &(), b: &'b ()) {}\n fn partial<'a>(a: &'a (), b: &()) {}\n-        //^'0, $             ^'0\n-fn partial2<'a>(a: &'a ()) -> &() {}\n-                            //^'a\n+\n+fn single_ret(a: &()) -> &() {}\n+// ^^^^^^^^^^<'0>\n+              // ^'0     ^'0\n+fn full_mul(a: &(), b: &()) {}\n+\n+fn foo<'c>(a: &'c ()) -> &() {}\n+                      // ^'c\n+\n+fn nested_in(a: &   &X< &()>) {}\n+fn nested_out(a: &()) -> &   &X< &()>{}\n+// ^^^^^^^^^^<'0>\n+               //^'0     ^'0 ^'0 ^'0\n \n impl () {\n+    fn foo(&self) {}\n     fn foo(&self) -> &() {}\n+    // ^^^<'0>\n+        // ^'0       ^'0\n     fn foo(&self, a: &()) -> &() {}\n     // ^^^<'0, '1>\n         // ^'0       ^'1     ^'0"}, {"sha": "3afbeac47c7e0bdcfd6ac10c1260b2e27ba16e92", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7da5b80f259a777a43ea4e208def4672cb0fb545/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7da5b80f259a777a43ea4e208def4672cb0fb545/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=7da5b80f259a777a43ea4e208def4672cb0fb545", "patch": "@@ -258,8 +258,8 @@ config_data! {\n         inlayHints_closureReturnTypeHints: bool             = \"false\",\n         /// Whether to show inlay type hints for elided lifetimes in function signatures.\n         inlayHints_lifetimeElisionHints: LifetimeElisionDef = \"\\\"never\\\"\",\n-        /// Whether to show prefer using parameter names as the name for elided lifetime hints.\n-        inlayHints_paramNamesForLifetimeElisionHints: bool  = \"false\",\n+        /// Whether to prefer using parameter names as the name for elided lifetime hints if possible.\n+        inlayHints_lifetimeElisionHints_useParameterNames: bool  = \"false\",\n         /// Whether to hide inlay hints for constructors.\n         inlayHints_hideNamedConstructorHints: bool          = \"false\",\n \n@@ -868,7 +868,7 @@ impl Config {\n             hide_named_constructor_hints: self.data.inlayHints_hideNamedConstructorHints,\n             param_names_for_lifetime_elision_hints: self\n                 .data\n-                .inlayHints_paramNamesForLifetimeElisionHints,\n+                .inlayHints_lifetimeElisionHints_useParameterNames,\n             max_length: self.data.inlayHints_maxLength,\n         }\n     }\n@@ -1406,7 +1406,7 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n             \"enumDescriptions\": [\n                 \"Always show lifetime elision hints.\",\n                 \"Never show lifetime elision hints.\",\n-                \"Always show lifetime elision hints but skip them for trivial single input to output mapping.\"\n+                \"Only show lifetime elision hints if a return type is involved.\"\n             ],\n         },\n         _ => panic!(\"missing entry for {}: {}\", ty, default),"}, {"sha": "42f485b5111dbf467d50496c03b28d0ed403155e", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7da5b80f259a777a43ea4e208def4672cb0fb545/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/7da5b80f259a777a43ea4e208def4672cb0fb545/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=7da5b80f259a777a43ea4e208def4672cb0fb545", "patch": "@@ -383,10 +383,10 @@ Whether to show inlay type hints for return types of closures with blocks.\n --\n Whether to show inlay type hints for elided lifetimes in function signatures.\n --\n-[[rust-analyzer.inlayHints.paramNamesForLifetimeElisionHints]]rust-analyzer.inlayHints.paramNamesForLifetimeElisionHints (default: `false`)::\n+[[rust-analyzer.inlayHints.lifetimeElisionHints.useParameterNames]]rust-analyzer.inlayHints.lifetimeElisionHints.useParameterNames (default: `false`)::\n +\n --\n-Whether to show prefer using parameter names as the name for elided lifetime hints.\n+Whether to prefer using parameter names as the name for elided lifetime hints if possible.\n --\n [[rust-analyzer.inlayHints.hideNamedConstructorHints]]rust-analyzer.inlayHints.hideNamedConstructorHints (default: `false`)::\n +"}, {"sha": "0343abd0a3bdb15a03791649ecaf70bb72e5427d", "filename": "editors/code/package.json", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7da5b80f259a777a43ea4e208def4672cb0fb545/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/7da5b80f259a777a43ea4e208def4672cb0fb545/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=7da5b80f259a777a43ea4e208def4672cb0fb545", "patch": "@@ -812,11 +812,11 @@\n                     \"enumDescriptions\": [\n                         \"Always show lifetime elision hints.\",\n                         \"Never show lifetime elision hints.\",\n-                        \"Always show lifetime elision hints but skip them for trivial single input to output mapping.\"\n+                        \"Only show lifetime elision hints if a return type is involved.\"\n                     ]\n                 },\n-                \"rust-analyzer.inlayHints.paramNamesForLifetimeElisionHints\": {\n-                    \"markdownDescription\": \"Whether to show prefer using parameter names as the name for elided lifetime hints.\",\n+                \"rust-analyzer.inlayHints.lifetimeElisionHints.useParameterNames\": {\n+                    \"markdownDescription\": \"Whether to prefer using parameter names as the name for elided lifetime hints if possible.\",\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },"}]}