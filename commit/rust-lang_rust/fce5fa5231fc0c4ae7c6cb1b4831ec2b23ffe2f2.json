{"sha": "fce5fa5231fc0c4ae7c6cb1b4831ec2b23ffe2f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjZTVmYTUyMzFmYzBjNGFlN2M2Y2IxYjQ4MzFlYzJiMjNmZmUyZjI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-10-02T16:12:03Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-10-02T16:12:03Z"}, "message": "Rustup to rustc 1.31.0-nightly (de3d640f5 2018-10-01), fix a atomic bug and implement intrinsic bitreverse", "tree": {"sha": "bb160a8d96dca2af689873bd9552453c9d703499", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb160a8d96dca2af689873bd9552453c9d703499"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fce5fa5231fc0c4ae7c6cb1b4831ec2b23ffe2f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fce5fa5231fc0c4ae7c6cb1b4831ec2b23ffe2f2", "html_url": "https://github.com/rust-lang/rust/commit/fce5fa5231fc0c4ae7c6cb1b4831ec2b23ffe2f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fce5fa5231fc0c4ae7c6cb1b4831ec2b23ffe2f2/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69fe4d6f92424441115ee521bfff951eb0493af4", "url": "https://api.github.com/repos/rust-lang/rust/commits/69fe4d6f92424441115ee521bfff951eb0493af4", "html_url": "https://github.com/rust-lang/rust/commit/69fe4d6f92424441115ee521bfff951eb0493af4"}], "stats": {"total": 22, "additions": 8, "deletions": 14}, "files": [{"sha": "c265db96a26f387da20d41ceb7dc0d64d912016d", "filename": "0004-Disable-some-more-unsupported-stuff-in-libcore.patch", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fce5fa5231fc0c4ae7c6cb1b4831ec2b23ffe2f2/0004-Disable-some-more-unsupported-stuff-in-libcore.patch", "raw_url": "https://github.com/rust-lang/rust/raw/fce5fa5231fc0c4ae7c6cb1b4831ec2b23ffe2f2/0004-Disable-some-more-unsupported-stuff-in-libcore.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/0004-Disable-some-more-unsupported-stuff-in-libcore.patch?ref=fce5fa5231fc0c4ae7c6cb1b4831ec2b23ffe2f2", "patch": "@@ -51,17 +51,5 @@ index 5d00949..f077f1d 100644\n              }\n          }\n \n-@@ -2295,7 +2297,9 @@ assert_eq!(m, \", $reversed, \");\n-             #[unstable(feature = \"reverse_bits\", issue = \"48763\")]\n-             #[rustc_const_unstable(feature = \"const_int_conversion\")]\n-             #[inline]\n-             #[cfg(not(stage0))]\n-             pub const fn reverse_bits(self) -> Self {\n--                unsafe { intrinsics::bitreverse(self as $ActualT) as Self }\n-+                // TODO support bitreverse\n-+                //unsafe { intrinsics::bitreverse(self as $ActualT) as Self }\n-+                0\n-             }\n-         }\n --\n 2.11.0"}, {"sha": "7b9b0a18025130325af3ebeb0a6fd2699792efff", "filename": "src/abi.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fce5fa5231fc0c4ae7c6cb1b4831ec2b23ffe2f2/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fce5fa5231fc0c4ae7c6cb1b4831ec2b23ffe2f2/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=fce5fa5231fc0c4ae7c6cb1b4831ec2b23ffe2f2", "patch": "@@ -853,6 +853,12 @@ fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n                     let res = CValue::ByVal(fx.bcx.ins().popcnt(arg), args[0].layout());\n                     ret.write_cvalue(fx, res);\n                 }\n+                \"bitreverse\" => {\n+                    assert_eq!(args.len(), 1);\n+                    let arg = args[0].load_value(fx);\n+                    let res = CValue::ByVal(fx.bcx.ins().bitrev(arg), args[0].layout());\n+                    ret.write_cvalue(fx, res);\n+                }\n                 \"needs_drop\" => {\n                     assert_eq!(args.len(), 0);\n                     let ty = substs.type_at(0);\n@@ -884,7 +890,7 @@ fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n                     let amount = args[1].load_value(fx);\n                     let old = fx.bcx.ins().load(clif_ty, MemFlags::new(), ptr, 0);\n                     let new = fx.bcx.ins().iadd(old, amount);\n-                    fx.bcx.ins().store(MemFlags::new(), ptr, new, 0);\n+                    fx.bcx.ins().store(MemFlags::new(), new, ptr, 0);\n                     ret.write_cvalue(fx, CValue::ByVal(old, fx.layout_of(substs.type_at(0))));\n                 }\n                 _ if intrinsic.starts_with(\"atomic_xsub\") => {\n@@ -894,7 +900,7 @@ fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n                     let amount = args[1].load_value(fx);\n                     let old = fx.bcx.ins().load(clif_ty, MemFlags::new(), ptr, 0);\n                     let new = fx.bcx.ins().isub(old, amount);\n-                    fx.bcx.ins().store(MemFlags::new(), ptr, new, 0);\n+                    fx.bcx.ins().store(MemFlags::new(), new, ptr, 0);\n                     ret.write_cvalue(fx, CValue::ByVal(old, fx.layout_of(substs.type_at(0))));\n                 }\n                 _ => unimpl!(\"unsupported intrinsic {}\", intrinsic),"}]}