{"sha": "fd5adefce11c820b5ee1045058a435aa174bccf4", "node_id": "C_kwDOAAsO6NoAKGZkNWFkZWZjZTExYzgyMGI1ZWUxMDQ1MDU4YTQzNWFhMTc0YmNjZjQ", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-02-18T23:32:37Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-02-18T23:48:41Z"}, "message": "rustdoc-json: Add tests for fn qualifiers and ABI", "tree": {"sha": "e48641d7128babdf0e556b3bfe13df9dc140b081", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e48641d7128babdf0e556b3bfe13df9dc140b081"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd5adefce11c820b5ee1045058a435aa174bccf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd5adefce11c820b5ee1045058a435aa174bccf4", "html_url": "https://github.com/rust-lang/rust/commit/fd5adefce11c820b5ee1045058a435aa174bccf4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd5adefce11c820b5ee1045058a435aa174bccf4/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa601574a5fe861bffd641beccf59c7be3ed16c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa601574a5fe861bffd641beccf59c7be3ed16c9", "html_url": "https://github.com/rust-lang/rust/commit/aa601574a5fe861bffd641beccf59c7be3ed16c9"}], "stats": {"total": 262, "additions": 184, "deletions": 78}, "files": [{"sha": "eef20e60a6a466d8232b62845f3281f8bb06d3bb", "filename": "src/test/rustdoc-json/fn_pointer/abi.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fd5adefce11c820b5ee1045058a435aa174bccf4/src%2Ftest%2Frustdoc-json%2Ffn_pointer%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5adefce11c820b5ee1045058a435aa174bccf4/src%2Ftest%2Frustdoc-json%2Ffn_pointer%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ffn_pointer%2Fabi.rs?ref=fd5adefce11c820b5ee1045058a435aa174bccf4", "patch": "@@ -0,0 +1,25 @@\n+// ignore-tidy-linelength\n+\n+#![feature(abi_vectorcall)]\n+#![feature(c_unwind)]\n+\n+// @is abi.json \"$.index[*][?(@.name=='AbiRust')].inner.type.inner.header.abi\" \\\"Rust\\\"\n+pub type AbiRust = fn();\n+\n+// @is - \"$.index[*][?(@.name=='AbiC')].inner.type.inner.header.abi\" '{\"C\": {\"unwind\": false}}'\n+pub type AbiC = extern \"C\" fn();\n+\n+// @is - \"$.index[*][?(@.name=='AbiSystem')].inner.type.inner.header.abi\" '{\"System\": {\"unwind\": false}}'\n+pub type AbiSystem = extern \"system\" fn();\n+\n+// @is - \"$.index[*][?(@.name=='AbiCUnwind')].inner.type.inner.header.abi\" '{\"C\": {\"unwind\": true}}'\n+pub type AbiCUnwind = extern \"C-unwind\" fn();\n+\n+// @is - \"$.index[*][?(@.name=='AbiSystemUnwind')].inner.type.inner.header.abi\" '{\"System\": {\"unwind\": true}}'\n+pub type AbiSystemUnwind = extern \"system-unwind\" fn();\n+\n+// @is - \"$.index[*][?(@.name=='AbiVecorcall')].inner.type.inner.header.abi.Other\" '\"\\\"vectorcall\\\"\"'\n+pub type AbiVecorcall = extern \"vectorcall\" fn();\n+\n+// @is - \"$.index[*][?(@.name=='AbiVecorcallUnwind')].inner.type.inner.header.abi.Other\" '\"\\\"vectorcall-unwind\\\"\"'\n+pub type AbiVecorcallUnwind = extern \"vectorcall-unwind\" fn();"}, {"sha": "a5038e0cd2aa86e6dfe72294514d0bd75ea974ff", "filename": "src/test/rustdoc-json/fn_pointer/header.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aa601574a5fe861bffd641beccf59c7be3ed16c9/src%2Ftest%2Frustdoc-json%2Ffn_pointer%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa601574a5fe861bffd641beccf59c7be3ed16c9/src%2Ftest%2Frustdoc-json%2Ffn_pointer%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ffn_pointer%2Fheader.rs?ref=aa601574a5fe861bffd641beccf59c7be3ed16c9", "patch": "@@ -1,5 +0,0 @@\n-// @has header.json \"$.index[*][?(@.name=='FnPointer')].inner.type.inner.header\" \"[]\"\n-pub type FnPointer = fn();\n-\n-// @has - \"$.index[*][?(@.name=='UnsafePointer')].inner.type.inner.header\" '[\"unsafe\"]'\n-pub type UnsafePointer = unsafe fn();"}, {"sha": "38192208536395673400506be4ab49d1a360834a", "filename": "src/test/rustdoc-json/fn_pointer/qualifiers.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fd5adefce11c820b5ee1045058a435aa174bccf4/src%2Ftest%2Frustdoc-json%2Ffn_pointer%2Fqualifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5adefce11c820b5ee1045058a435aa174bccf4/src%2Ftest%2Frustdoc-json%2Ffn_pointer%2Fqualifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ffn_pointer%2Fqualifiers.rs?ref=fd5adefce11c820b5ee1045058a435aa174bccf4", "patch": "@@ -0,0 +1,9 @@\n+// @is qualifiers.json \"$.index[*][?(@.name=='FnPointer')].inner.type.inner.header.unsafe\" false\n+// @is - \"$.index[*][?(@.name=='FnPointer')].inner.type.inner.header.const\" false\n+// @is - \"$.index[*][?(@.name=='FnPointer')].inner.type.inner.header.async\" false\n+pub type FnPointer = fn();\n+\n+// @is - \"$.index[*][?(@.name=='UnsafePointer')].inner.type.inner.header.unsafe\" true\n+// @is - \"$.index[*][?(@.name=='UnsafePointer')].inner.type.inner.header.const\" false\n+// @is - \"$.index[*][?(@.name=='UnsafePointer')].inner.type.inner.header.async\" false\n+pub type UnsafePointer = unsafe fn();"}, {"sha": "16b579130656a9b910095e5d12bb6d5585c941c7", "filename": "src/test/rustdoc-json/fns/abi.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fd5adefce11c820b5ee1045058a435aa174bccf4/src%2Ftest%2Frustdoc-json%2Ffns%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5adefce11c820b5ee1045058a435aa174bccf4/src%2Ftest%2Frustdoc-json%2Ffns%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ffns%2Fabi.rs?ref=fd5adefce11c820b5ee1045058a435aa174bccf4", "patch": "@@ -0,0 +1,25 @@\n+// ignore-tidy-linelength\n+\n+#![feature(abi_vectorcall)]\n+#![feature(c_unwind)]\n+\n+// @is abi.json \"$.index[*][?(@.name=='abi_rust')].inner.header.abi\" \\\"Rust\\\"\n+pub fn abi_rust() {}\n+\n+// @is - \"$.index[*][?(@.name=='abi_c')].inner.header.abi\" '{\"C\": {\"unwind\": false}}'\n+pub extern \"C\" fn abi_c() {}\n+\n+// @is - \"$.index[*][?(@.name=='abi_system')].inner.header.abi\" '{\"System\": {\"unwind\": false}}'\n+pub extern \"system\" fn abi_system() {}\n+\n+// @is - \"$.index[*][?(@.name=='abi_c_unwind')].inner.header.abi\" '{\"C\": {\"unwind\": true}}'\n+pub extern \"C-unwind\" fn abi_c_unwind() {}\n+\n+// @is - \"$.index[*][?(@.name=='abi_system_unwind')].inner.header.abi\" '{\"System\": {\"unwind\": true}}'\n+pub extern \"system-unwind\" fn abi_system_unwind() {}\n+\n+// @is - \"$.index[*][?(@.name=='abi_vectorcall')].inner.header.abi.Other\" '\"\\\"vectorcall\\\"\"'\n+pub extern \"vectorcall\" fn abi_vectorcall() {}\n+\n+// @is - \"$.index[*][?(@.name=='abi_vectorcall_unwind')].inner.header.abi.Other\" '\"\\\"vectorcall-unwind\\\"\"'\n+pub extern \"vectorcall-unwind\" fn abi_vectorcall_unwind() {}"}, {"sha": "29741dd50dadc927e5a3b7696b317233c14b5cdc", "filename": "src/test/rustdoc-json/fns/header.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/aa601574a5fe861bffd641beccf59c7be3ed16c9/src%2Ftest%2Frustdoc-json%2Ffns%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa601574a5fe861bffd641beccf59c7be3ed16c9/src%2Ftest%2Frustdoc-json%2Ffns%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ffns%2Fheader.rs?ref=aa601574a5fe861bffd641beccf59c7be3ed16c9", "patch": "@@ -1,22 +0,0 @@\n-// edition:2018\n-\n-// @has header.json \"$.index[*][?(@.name=='nothing_fn')].inner.header\" \"[]\"\n-pub fn nothing_fn() {}\n-\n-// @has - \"$.index[*][?(@.name=='const_fn')].inner.header\" '[\"const\"]'\n-pub const fn const_fn() {}\n-\n-// @has - \"$.index[*][?(@.name=='async_fn')].inner.header\" '[\"async\"]'\n-pub async fn async_fn() {}\n-\n-// @count - \"$.index[*][?(@.name=='async_unsafe_fn')].inner.header[*]\" 2\n-// @has - \"$.index[*][?(@.name=='async_unsafe_fn')].inner.header[*]\" '\"async\"'\n-// @has - \"$.index[*][?(@.name=='async_unsafe_fn')].inner.header[*]\" '\"unsafe\"'\n-pub async unsafe fn async_unsafe_fn() {}\n-\n-// @count - \"$.index[*][?(@.name=='const_unsafe_fn')].inner.header[*]\" 2\n-// @has - \"$.index[*][?(@.name=='const_unsafe_fn')].inner.header[*]\" '\"const\"'\n-// @has - \"$.index[*][?(@.name=='const_unsafe_fn')].inner.header[*]\" '\"unsafe\"'\n-pub const unsafe fn const_unsafe_fn() {}\n-\n-// It's impossible for a function to be both const and async, so no test for that"}, {"sha": "5cb3b43e66a964ca35ceda30fe24b20e260eb847", "filename": "src/test/rustdoc-json/fns/qualifiers.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/fd5adefce11c820b5ee1045058a435aa174bccf4/src%2Ftest%2Frustdoc-json%2Ffns%2Fqualifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5adefce11c820b5ee1045058a435aa174bccf4/src%2Ftest%2Frustdoc-json%2Ffns%2Fqualifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ffns%2Fqualifiers.rs?ref=fd5adefce11c820b5ee1045058a435aa174bccf4", "patch": "@@ -0,0 +1,33 @@\n+// edition:2018\n+\n+// @is qualifiers.json \"$.index[*][?(@.name=='nothing_fn')].inner.header.async\" false\n+// @is - \"$.index[*][?(@.name=='nothing_fn')].inner.header.const\"  false\n+// @is - \"$.index[*][?(@.name=='nothing_fn')].inner.header.unsafe\" false\n+pub fn nothing_fn() {}\n+\n+// @is - \"$.index[*][?(@.name=='unsafe_fn')].inner.header.async\"  false\n+// @is - \"$.index[*][?(@.name=='unsafe_fn')].inner.header.const\"  false\n+// @is - \"$.index[*][?(@.name=='unsafe_fn')].inner.header.unsafe\" true\n+pub unsafe fn unsafe_fn() {}\n+\n+// @is - \"$.index[*][?(@.name=='const_fn')].inner.header.async\"  false\n+// @is - \"$.index[*][?(@.name=='const_fn')].inner.header.const\"  true\n+// @is - \"$.index[*][?(@.name=='const_fn')].inner.header.unsafe\" false\n+pub const fn const_fn() {}\n+\n+// @is - \"$.index[*][?(@.name=='async_fn')].inner.header.async\"  true\n+// @is - \"$.index[*][?(@.name=='async_fn')].inner.header.const\"  false\n+// @is - \"$.index[*][?(@.name=='async_fn')].inner.header.unsafe\" false\n+pub async fn async_fn() {}\n+\n+// @is - \"$.index[*][?(@.name=='async_unsafe_fn')].inner.header.async\"  true\n+// @is - \"$.index[*][?(@.name=='async_unsafe_fn')].inner.header.const\"  false\n+// @is - \"$.index[*][?(@.name=='async_unsafe_fn')].inner.header.unsafe\" true\n+pub async unsafe fn async_unsafe_fn() {}\n+\n+// @is - \"$.index[*][?(@.name=='const_unsafe_fn')].inner.header.async\"  false\n+// @is - \"$.index[*][?(@.name=='const_unsafe_fn')].inner.header.const\"  true\n+// @is - \"$.index[*][?(@.name=='const_unsafe_fn')].inner.header.unsafe\" true\n+pub const unsafe fn const_unsafe_fn() {}\n+\n+// It's impossible for a function to be both const and async, so no test for that"}, {"sha": "6fabbc836117ba7232baa87cad103a3e0fec977a", "filename": "src/test/rustdoc-json/method_abi.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/aa601574a5fe861bffd641beccf59c7be3ed16c9/src%2Ftest%2Frustdoc-json%2Fmethod_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa601574a5fe861bffd641beccf59c7be3ed16c9/src%2Ftest%2Frustdoc-json%2Fmethod_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fmethod_abi.rs?ref=aa601574a5fe861bffd641beccf59c7be3ed16c9", "patch": "@@ -1,25 +0,0 @@\n-// @has method_abi.json \"$.index[*][?(@.name=='Foo')]\"\n-pub struct Foo;\n-\n-impl Foo {\n-    // @has - \"$.index[*][?(@.name=='abi_rust')].inner.abi\" '\"\\\"Rust\\\"\"'\n-    pub fn abi_rust() {}\n-\n-    // @has - \"$.index[*][?(@.name=='abi_c')].inner.abi\" '\"\\\"C\\\"\"'\n-    pub extern \"C\" fn abi_c() {}\n-\n-    // @has - \"$.index[*][?(@.name=='abi_system')].inner.abi\" '\"\\\"system\\\"\"'\n-    pub extern \"system\" fn abi_system() {}\n-}\n-\n-// @has method_abi.json \"$.index[*][?(@.name=='Bar')]\"\n-pub trait Bar {\n-    // @has - \"$.index[*][?(@.name=='trait_abi_rust')].inner.abi\" '\"\\\"Rust\\\"\"'\n-    fn trait_abi_rust();\n-\n-    // @has - \"$.index[*][?(@.name=='trait_abi_c')].inner.abi\" '\"\\\"C\\\"\"'\n-    extern \"C\" fn trait_abi_c();\n-\n-    // @has - \"$.index[*][?(@.name=='trait_abi_system')].inner.abi\" '\"\\\"system\\\"\"'\n-    extern \"system\" fn trait_abi_system();\n-}"}, {"sha": "07b01d03bf6e30aa17506692e0e01adc2343dc95", "filename": "src/test/rustdoc-json/methods/abi.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/fd5adefce11c820b5ee1045058a435aa174bccf4/src%2Ftest%2Frustdoc-json%2Fmethods%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5adefce11c820b5ee1045058a435aa174bccf4/src%2Ftest%2Frustdoc-json%2Fmethods%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fmethods%2Fabi.rs?ref=fd5adefce11c820b5ee1045058a435aa174bccf4", "patch": "@@ -0,0 +1,55 @@\n+// ignore-tidy-linelength\n+\n+#![feature(abi_vectorcall)]\n+#![feature(c_unwind)]\n+#![feature(no_core)]\n+#![no_core]\n+\n+// @has abi.json \"$.index[*][?(@.name=='Foo')]\"\n+pub struct Foo;\n+\n+impl Foo {\n+    // @is - \"$.index[*][?(@.name=='abi_rust')].inner.header.abi\" \\\"Rust\\\"\n+    pub fn abi_rust() {}\n+\n+    // @is - \"$.index[*][?(@.name=='abi_c')].inner.header.abi\" '{\"C\": {\"unwind\": false}}'\n+    pub extern \"C\" fn abi_c() {}\n+\n+    // @is - \"$.index[*][?(@.name=='abi_system')].inner.header.abi\" '{\"System\": {\"unwind\": false}}'\n+    pub extern \"system\" fn abi_system() {}\n+\n+    // @is - \"$.index[*][?(@.name=='abi_c_unwind')].inner.header.abi\" '{\"C\": {\"unwind\": true}}'\n+    pub extern \"C-unwind\" fn abi_c_unwind() {}\n+\n+    // @is - \"$.index[*][?(@.name=='abi_system_unwind')].inner.header.abi\" '{\"System\": {\"unwind\": true}}'\n+    pub extern \"system-unwind\" fn abi_system_unwind() {}\n+\n+    // @is - \"$.index[*][?(@.name=='abi_vectorcall')].inner.header.abi.Other\" '\"\\\"vectorcall\\\"\"'\n+    pub extern \"vectorcall\" fn abi_vectorcall() {}\n+\n+    // @is - \"$.index[*][?(@.name=='abi_vectorcall_unwind')].inner.header.abi.Other\" '\"\\\"vectorcall-unwind\\\"\"'\n+    pub extern \"vectorcall-unwind\" fn abi_vectorcall_unwind() {}\n+}\n+\n+pub trait Bar {\n+    // @is - \"$.index[*][?(@.name=='trait_abi_rust')].inner.header.abi\" \\\"Rust\\\"\n+    fn trait_abi_rust() {}\n+\n+    // @is - \"$.index[*][?(@.name=='trait_abi_c')].inner.header.abi\" '{\"C\": {\"unwind\": false}}'\n+    extern \"C\" fn trait_abi_c() {}\n+\n+    // @is - \"$.index[*][?(@.name=='trait_abi_system')].inner.header.abi\" '{\"System\": {\"unwind\": false}}'\n+    extern \"system\" fn trait_abi_system() {}\n+\n+    // @is - \"$.index[*][?(@.name=='trait_abi_c_unwind')].inner.header.abi\" '{\"C\": {\"unwind\": true}}'\n+    extern \"C-unwind\" fn trait_abi_c_unwind() {}\n+\n+    // @is - \"$.index[*][?(@.name=='trait_abi_system_unwind')].inner.header.abi\" '{\"System\": {\"unwind\": true}}'\n+    extern \"system-unwind\" fn trait_abi_system_unwind() {}\n+\n+    // @is - \"$.index[*][?(@.name=='trait_abi_vectorcall')].inner.header.abi.Other\" '\"\\\"vectorcall\\\"\"'\n+    extern \"vectorcall\" fn trait_abi_vectorcall() {}\n+\n+    // @is - \"$.index[*][?(@.name=='trait_abi_vectorcall_unwind')].inner.header.abi.Other\" '\"\\\"vectorcall-unwind\\\"\"'\n+    extern \"vectorcall-unwind\" fn trait_abi_vectorcall_unwind() {}\n+}"}, {"sha": "50a3db75ef395a14c315d7f88e4e1b13f77c88e2", "filename": "src/test/rustdoc-json/methods/header.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/aa601574a5fe861bffd641beccf59c7be3ed16c9/src%2Ftest%2Frustdoc-json%2Fmethods%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa601574a5fe861bffd641beccf59c7be3ed16c9/src%2Ftest%2Frustdoc-json%2Fmethods%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fmethods%2Fheader.rs?ref=aa601574a5fe861bffd641beccf59c7be3ed16c9", "patch": "@@ -1,26 +0,0 @@\n-// edition:2018\n-\n-pub struct Foo;\n-\n-impl Foo {\n-    // @has header.json \"$.index[*][?(@.name=='nothing_meth')].inner.header\" \"[]\"\n-    pub fn nothing_meth() {}\n-\n-    // @has - \"$.index[*][?(@.name=='const_meth')].inner.header\" '[\"const\"]'\n-    pub const fn const_meth() {}\n-\n-    // @has - \"$.index[*][?(@.name=='async_meth')].inner.header\" '[\"async\"]'\n-    pub async fn async_meth() {}\n-\n-    // @count - \"$.index[*][?(@.name=='async_unsafe_meth')].inner.header[*]\" 2\n-    // @has - \"$.index[*][?(@.name=='async_unsafe_meth')].inner.header[*]\" '\"async\"'\n-    // @has - \"$.index[*][?(@.name=='async_unsafe_meth')].inner.header[*]\" '\"unsafe\"'\n-    pub async unsafe fn async_unsafe_meth() {}\n-\n-    // @count - \"$.index[*][?(@.name=='const_unsafe_meth')].inner.header[*]\" 2\n-    // @has - \"$.index[*][?(@.name=='const_unsafe_meth')].inner.header[*]\" '\"const\"'\n-    // @has - \"$.index[*][?(@.name=='const_unsafe_meth')].inner.header[*]\" '\"unsafe\"'\n-    pub const unsafe fn const_unsafe_meth() {}\n-\n-    // It's impossible for a method to be both const and async, so no test for that\n-}"}, {"sha": "af36d36b6607d9bcfe0f8226f29ec8327ca6e6f9", "filename": "src/test/rustdoc-json/methods/qualifiers.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/fd5adefce11c820b5ee1045058a435aa174bccf4/src%2Ftest%2Frustdoc-json%2Fmethods%2Fqualifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5adefce11c820b5ee1045058a435aa174bccf4/src%2Ftest%2Frustdoc-json%2Fmethods%2Fqualifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fmethods%2Fqualifiers.rs?ref=fd5adefce11c820b5ee1045058a435aa174bccf4", "patch": "@@ -0,0 +1,37 @@\n+// edition:2018\n+\n+pub struct Foo;\n+\n+impl Foo {\n+    // @is qualifiers.json \"$.index[*][?(@.name=='const_meth')].inner.header.async\" false\n+    // @is - \"$.index[*][?(@.name=='const_meth')].inner.header.const\"  true\n+    // @is - \"$.index[*][?(@.name=='const_meth')].inner.header.unsafe\" false\n+    pub const fn const_meth() {}\n+\n+    // @is - \"$.index[*][?(@.name=='nothing_meth')].inner.header.async\"  false\n+    // @is - \"$.index[*][?(@.name=='nothing_meth')].inner.header.const\"  false\n+    // @is - \"$.index[*][?(@.name=='nothing_meth')].inner.header.unsafe\" false\n+    pub fn nothing_meth() {}\n+\n+    // @is - \"$.index[*][?(@.name=='unsafe_meth')].inner.header.async\"  false\n+    // @is - \"$.index[*][?(@.name=='unsafe_meth')].inner.header.const\"  false\n+    // @is - \"$.index[*][?(@.name=='unsafe_meth')].inner.header.unsafe\" true\n+    pub unsafe fn unsafe_meth() {}\n+\n+    // @is - \"$.index[*][?(@.name=='async_meth')].inner.header.async\"  true\n+    // @is - \"$.index[*][?(@.name=='async_meth')].inner.header.const\"  false\n+    // @is - \"$.index[*][?(@.name=='async_meth')].inner.header.unsafe\" false\n+    pub async fn async_meth() {}\n+\n+    // @is - \"$.index[*][?(@.name=='async_unsafe_meth')].inner.header.async\"  true\n+    // @is - \"$.index[*][?(@.name=='async_unsafe_meth')].inner.header.const\"  false\n+    // @is - \"$.index[*][?(@.name=='async_unsafe_meth')].inner.header.unsafe\" true\n+    pub async unsafe fn async_unsafe_meth() {}\n+\n+    // @is - \"$.index[*][?(@.name=='const_unsafe_meth')].inner.header.async\"  false\n+    // @is - \"$.index[*][?(@.name=='const_unsafe_meth')].inner.header.const\"  true\n+    // @is - \"$.index[*][?(@.name=='const_unsafe_meth')].inner.header.unsafe\" true\n+    pub const unsafe fn const_unsafe_meth() {}\n+\n+    // It's impossible for a method to be both const and async, so no test for that\n+}"}]}