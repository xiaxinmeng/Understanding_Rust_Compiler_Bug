{"sha": "4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkM2NlMmU3ZGFjODQwZDZhYzdkNjU4YTU1MDZlYjMxNDkyZmIzZWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-17T15:12:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-17T15:12:56Z"}, "message": "Auto merge of #86399 - JohnTitor:rollup-qlm2dvz, r=JohnTitor\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #85663 (Document Arc::from)\n - #85802 (Rename IoSlice(Mut)::advance to advance_slice and add IoSlice(Mut)::advance)\n - #85970 (Remove methods under Implementors on trait pages)\n - #86340 (Use better error message for hard errors in CTFE)\n - #86343 (Do not emit invalid suggestions on multiple mutable borrow errors)\n - #86355 (Remove invalid suggestions for assoc consts on placeholder type error)\n - #86389 (Make `sum()` and `product()` documentation hyperlinks refer to `Iterator` methods.)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "17de2651847a85eaf15d0ced7e0788782c49df3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17de2651847a85eaf15d0ced7e0788782c49df3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "html_url": "https://github.com/rust-lang/rust/commit/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ef2b4a29bf70e8984d0d2febb7a546856c554a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ef2b4a29bf70e8984d0d2febb7a546856c554a0", "html_url": "https://github.com/rust-lang/rust/commit/0ef2b4a29bf70e8984d0d2febb7a546856c554a0"}, {"sha": "65d412b63717617326e65e602284b7ead2b0f899", "url": "https://api.github.com/repos/rust-lang/rust/commits/65d412b63717617326e65e602284b7ead2b0f899", "html_url": "https://github.com/rust-lang/rust/commit/65d412b63717617326e65e602284b7ead2b0f899"}], "stats": {"total": 724, "additions": 406, "deletions": 318}, "files": [{"sha": "9d1b3e101a92ea654f14c527972d7c22337090bc", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -518,4 +518,14 @@ impl InterpError<'_> {\n             _ => false,\n         }\n     }\n+\n+    /// Should this error be reported as a hard error, preventing compilation, or a soft error,\n+    /// causing a deny-by-default lint?\n+    pub fn is_hard_err(&self) -> bool {\n+        use InterpError::*;\n+        match *self {\n+            MachineStop(ref err) => err.is_hard_err(),\n+            _ => false,\n+        }\n+    }\n }"}, {"sha": "a0c9b43d5afee1e1862084dcd20544888e9d6acb", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -453,6 +453,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 &mut err,\n                 \"\",\n                 Some(borrow_span),\n+                None,\n             );\n         err.buffer(&mut self.errors_buffer);\n     }\n@@ -498,6 +499,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 &mut err,\n                 \"\",\n                 None,\n+                None,\n             );\n         err\n     }\n@@ -718,6 +720,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             &mut err,\n             first_borrow_desc,\n             None,\n+            Some((issued_span, span)),\n         );\n \n         err\n@@ -1076,6 +1079,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     &mut err,\n                     \"\",\n                     None,\n+                    None,\n                 );\n             }\n         } else {\n@@ -1093,6 +1097,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 &mut err,\n                 \"\",\n                 None,\n+                None,\n             );\n         }\n \n@@ -1158,6 +1163,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             &mut err,\n             \"\",\n             None,\n+            None,\n         );\n \n         err.buffer(&mut self.errors_buffer);\n@@ -1236,6 +1242,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             &mut err,\n             \"\",\n             None,\n+            None,\n         );\n \n         let within = if borrow_spans.for_generator() { \" by generator\" } else { \"\" };\n@@ -1614,6 +1621,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             &mut err,\n             \"\",\n             None,\n+            None,\n         );\n \n         self.explain_deref_coercion(loan, &mut err);"}, {"sha": "76de010d1393bbaa02ea48d9389e96c6d3875c59", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/explain_borrow.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -66,6 +66,7 @@ impl BorrowExplanation {\n         err: &mut DiagnosticBuilder<'_>,\n         borrow_desc: &str,\n         borrow_span: Option<Span>,\n+        multiple_borrow_span: Option<(Span, Span)>,\n     ) {\n         match *self {\n             BorrowExplanation::UsedLater(later_use_kind, var_or_use_span, path_span) => {\n@@ -192,14 +193,23 @@ impl BorrowExplanation {\n \n                         if let Some(info) = &local_decl.is_block_tail {\n                             if info.tail_result_is_ignored {\n-                                err.span_suggestion_verbose(\n-                                    info.span.shrink_to_hi(),\n-                                    \"consider adding semicolon after the expression so its \\\n-                                     temporaries are dropped sooner, before the local variables \\\n-                                     declared by the block are dropped\",\n-                                    \";\".to_string(),\n-                                    Applicability::MaybeIncorrect,\n-                                );\n+                                // #85581: If the first mutable borrow's scope contains\n+                                // the second borrow, this suggestion isn't helpful.\n+                                if !multiple_borrow_span\n+                                    .map(|(old, new)| {\n+                                        old.to(info.span.shrink_to_hi()).contains(new)\n+                                    })\n+                                    .unwrap_or(false)\n+                                {\n+                                    err.span_suggestion_verbose(\n+                                        info.span.shrink_to_hi(),\n+                                        \"consider adding semicolon after the expression so its \\\n+                                        temporaries are dropped sooner, before the local variables \\\n+                                        declared by the block are dropped\",\n+                                        \";\".to_string(),\n+                                        Applicability::MaybeIncorrect,\n+                                    );\n+                                }\n                             } else {\n                                 err.note(\n                                     \"the temporary is part of an expression at the end of a \\"}, {"sha": "17e8ab2a4da63ede2a11d7e048f74d1181dc5d72", "filename": "compiler/rustc_mir/src/const_eval/error.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ferror.rs?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -157,7 +157,7 @@ impl<'tcx> ConstEvalErr<'tcx> {\n         tcx: TyCtxtAt<'tcx>,\n         message: &str,\n         emit: impl FnOnce(DiagnosticBuilder<'_>),\n-        mut lint_root: Option<hir::HirId>,\n+        lint_root: Option<hir::HirId>,\n     ) -> ErrorHandled {\n         let finish = |mut err: DiagnosticBuilder<'_>, span_msg: Option<String>| {\n             trace!(\"reporting const eval failure at {:?}\", self.span);\n@@ -194,12 +194,6 @@ impl<'tcx> ConstEvalErr<'tcx> {\n             _ => {}\n         };\n \n-        // If we have a 'hard error', then set `lint_root` to `None` so that we don't\n-        // emit a lint.\n-        if matches!(&self.error, InterpError::MachineStop(err) if err.is_hard_err()) {\n-            lint_root = None;\n-        }\n-\n         let err_msg = self.error.to_string();\n \n         // Regular case - emit a lint."}, {"sha": "536dbad4f764d9d20853b49768775e32699f9ccd", "filename": "compiler/rustc_mir/src/const_eval/eval_queries.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -312,22 +312,17 @@ pub fn eval_to_allocation_raw_provider<'tcx>(\n             let err = ConstEvalErr::new(&ecx, error, None);\n             // Some CTFE errors raise just a lint, not a hard error; see\n             // <https://github.com/rust-lang/rust/issues/71800>.\n-            let emit_as_lint = if let Some(def) = def.as_local() {\n+            let is_hard_err = if let Some(def) = def.as_local() {\n                 // (Associated) consts only emit a lint, since they might be unused.\n-                matches!(tcx.def_kind(def.did.to_def_id()), DefKind::Const | DefKind::AssocConst)\n+                !matches!(tcx.def_kind(def.did.to_def_id()), DefKind::Const | DefKind::AssocConst)\n+                    // check if the inner InterpError is hard\n+                    || err.error.is_hard_err()\n             } else {\n                 // use of broken constant from other crate: always an error\n-                false\n+                true\n             };\n-            if emit_as_lint {\n-                let hir_id = tcx.hir().local_def_id_to_hir_id(def.as_local().unwrap().did);\n-                Err(err.report_as_lint(\n-                    tcx.at(tcx.def_span(def.did)),\n-                    \"any use of this value will cause an error\",\n-                    hir_id,\n-                    Some(err.span),\n-                ))\n-            } else {\n+\n+            if is_hard_err {\n                 let msg = if is_static {\n                     Cow::from(\"could not evaluate static initializer\")\n                 } else {\n@@ -345,6 +340,14 @@ pub fn eval_to_allocation_raw_provider<'tcx>(\n                 };\n \n                 Err(err.report_as_error(ecx.tcx.at(ecx.cur_span()), &msg))\n+            } else {\n+                let hir_id = tcx.hir().local_def_id_to_hir_id(def.as_local().unwrap().did);\n+                Err(err.report_as_lint(\n+                    tcx.at(tcx.def_span(def.did)),\n+                    \"any use of this value will cause an error\",\n+                    hir_id,\n+                    Some(err.span),\n+                ))\n             }\n         }\n         Ok(mplace) => {"}, {"sha": "248669a2c0cb8cbc9502e2e6977bd87ee18a71d2", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -179,8 +179,7 @@ crate fn placeholder_type_error(\n     // Suggest, but only if it is not a function in const or static\n     if suggest {\n         let mut is_fn = false;\n-        let mut is_const = false;\n-        let mut is_static = false;\n+        let mut is_const_or_static = false;\n \n         if let Some(hir_ty) = hir_ty {\n             if let hir::TyKind::BareFn(_) = hir_ty.kind {\n@@ -190,19 +189,26 @@ crate fn placeholder_type_error(\n                 let parent_id = tcx.hir().get_parent_node(hir_ty.hir_id);\n                 let parent_node = tcx.hir().get(parent_id);\n \n-                if let hir::Node::Item(item) = parent_node {\n-                    if let hir::ItemKind::Const(_, _) = item.kind {\n-                        is_const = true;\n-                    } else if let hir::ItemKind::Static(_, _, _) = item.kind {\n-                        is_static = true;\n-                    }\n-                }\n+                is_const_or_static = match parent_node {\n+                    Node::Item(&hir::Item {\n+                        kind: hir::ItemKind::Const(..) | hir::ItemKind::Static(..),\n+                        ..\n+                    })\n+                    | Node::TraitItem(&hir::TraitItem {\n+                        kind: hir::TraitItemKind::Const(..),\n+                        ..\n+                    })\n+                    | Node::ImplItem(&hir::ImplItem {\n+                        kind: hir::ImplItemKind::Const(..), ..\n+                    }) => true,\n+                    _ => false,\n+                };\n             }\n         }\n \n         // if function is wrapped around a const or static,\n         // then don't show the suggestion\n-        if !(is_fn && (is_const || is_static)) {\n+        if !(is_fn && is_const_or_static) {\n             err.multipart_suggestion(\n                 \"use type parameters instead\",\n                 sugg,"}, {"sha": "46a769a722a8bf3ce44873eb25186e63d3e84c7f", "filename": "library/alloc/src/collections/vec_deque/into_iter.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Finto_iter.rs?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -38,6 +38,7 @@ impl<T> Iterator for IntoIter<T> {\n     }\n \n     #[inline]\n+    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item\n     where\n         Self: TrustedRandomAccess,"}, {"sha": "ae1b03c9a4d2247b4a201135c4e82ac18c807e0e", "filename": "library/alloc/src/collections/vec_deque/iter.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter.rs?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -103,6 +103,7 @@ impl<'a, T> Iterator for Iter<'a, T> {\n     }\n \n     #[inline]\n+    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item\n     where\n         Self: TrustedRandomAccess,"}, {"sha": "df30c38652f72ef0ea100e31ba6110883c992592", "filename": "library/alloc/src/collections/vec_deque/iter_mut.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter_mut.rs?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -89,6 +89,7 @@ impl<'a, T> Iterator for IterMut<'a, T> {\n     }\n \n     #[inline]\n+    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item\n     where\n         Self: TrustedRandomAccess,"}, {"sha": "742a9d7ba0187707f12c066232c0d558be9183ef", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -2300,6 +2300,20 @@ impl<T: ?Sized + Hash> Hash for Arc<T> {\n \n #[stable(feature = \"from_for_ptrs\", since = \"1.6.0\")]\n impl<T> From<T> for Arc<T> {\n+    /// Converts a `T` into an `Arc<T>`\n+    ///\n+    /// The conversion moves the value into a\n+    /// newly allocated `Arc`. It is equivalent to\n+    /// calling `Arc::new(t)`.\n+    ///\n+    /// # Example\n+    /// ```rust\n+    /// # use std::sync::Arc;\n+    /// let x = 5;\n+    /// let arc = Arc::new(5);\n+    ///\n+    /// assert_eq!(Arc::from(x), arc);\n+    /// ```\n     fn from(t: T) -> Self {\n         Arc::new(t)\n     }"}, {"sha": "7a08f4c6cbaaceba1f983cc6be2cb116aae54c4c", "filename": "library/alloc/src/vec/into_iter.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -163,6 +163,7 @@ impl<T, A: Allocator> Iterator for IntoIter<T, A> {\n         self.len()\n     }\n \n+    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, i: usize) -> Self::Item\n     where\n         Self: TrustedRandomAccess,"}, {"sha": "931ea77eca4dc4c1bff749d1f489cd259fe63eef", "filename": "library/core/src/array/iter.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fiter.rs?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -132,6 +132,7 @@ impl<T, const N: usize> Iterator for IntoIter<T, N> {\n     }\n \n     #[inline]\n+    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item\n     where\n         Self: TrustedRandomAccess,"}, {"sha": "5cd65a9415fd7d2ba553488a3bcec266cedd0fae", "filename": "library/core/src/iter/adapters/cloned.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcloned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcloned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcloned.rs?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -58,6 +58,7 @@ where\n         self.it.map(T::clone).fold(init, f)\n     }\n \n+    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> T\n     where\n         Self: TrustedRandomAccess,"}, {"sha": "07a3b5d245659ec18da4b5fcbcf71eb5b5a9a8f9", "filename": "library/core/src/iter/adapters/copied.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -74,6 +74,7 @@ where\n         self.it.count()\n     }\n \n+    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> T\n     where\n         Self: TrustedRandomAccess,"}, {"sha": "8b27bdc60a7055aff561a716c22ba9c7d77e967b", "filename": "library/core/src/iter/adapters/enumerate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -111,6 +111,7 @@ where\n     }\n \n     #[rustc_inherit_overflow_checks]\n+    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> <Self as Iterator>::Item\n     where\n         Self: TrustedRandomAccess,"}, {"sha": "0c21df4f12c60c167f291508d8947f7343abc322", "filename": "library/core/src/iter/adapters/fuse.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -114,6 +114,7 @@ where\n     }\n \n     #[inline]\n+    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item\n     where\n         Self: TrustedRandomAccess,"}, {"sha": "dc86eccfcb82f36c700936a058823a59265c15a3", "filename": "library/core/src/iter/adapters/map.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -122,6 +122,7 @@ where\n         self.iter.fold(init, map_fold(self.f, g))\n     }\n \n+    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> B\n     where\n         Self: TrustedRandomAccess,"}, {"sha": "8a6955060e82fd2e8322e63df5f55de592a23647", "filename": "library/core/src/iter/adapters/zip.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -88,6 +88,7 @@ where\n     }\n \n     #[inline]\n+    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item\n     where\n         Self: TrustedRandomAccess,"}, {"sha": "4a86d6a100abe66539a41037cfe2de4db9dbb9cd", "filename": "library/core/src/iter/range.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Frange.rs?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -667,6 +667,7 @@ impl<A: Step> Iterator for ops::Range<A> {\n     }\n \n     #[inline]\n+    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item\n     where\n         Self: TrustedRandomAccess,"}, {"sha": "c2e837df5ff2a138b03be1d039a52b692a4820bb", "filename": "library/core/src/iter/traits/accum.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Faccum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Faccum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Faccum.rs?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -3,12 +3,11 @@ use crate::num::Wrapping;\n \n /// Trait to represent types that can be created by summing up an iterator.\n ///\n-/// This trait is used to implement the [`sum()`] method on iterators. Types which\n-/// implement the trait can be generated by the [`sum()`] method. Like\n-/// [`FromIterator`] this trait should rarely be called directly and instead\n-/// interacted with through [`Iterator::sum()`].\n+/// This trait is used to implement [`Iterator::sum()`]. Types which implement\n+/// this trait can be generated by using the [`sum()`] method on an iterator.\n+/// Like [`FromIterator`], this trait should rarely be called directly.\n ///\n-/// [`sum()`]: Sum::sum\n+/// [`sum()`]: Iterator::sum\n /// [`FromIterator`]: iter::FromIterator\n #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]\n pub trait Sum<A = Self>: Sized {\n@@ -21,12 +20,11 @@ pub trait Sum<A = Self>: Sized {\n /// Trait to represent types that can be created by multiplying elements of an\n /// iterator.\n ///\n-/// This trait is used to implement the [`product()`] method on iterators. Types\n-/// which implement the trait can be generated by the [`product()`] method. Like\n-/// [`FromIterator`] this trait should rarely be called directly and instead\n-/// interacted with through [`Iterator::product()`].\n+/// This trait is used to implement [`Iterator::product()`]. Types which implement\n+/// this trait can be generated by using the [`product()`] method on an iterator.\n+/// Like [`FromIterator`], this trait should rarely be called directly.\n ///\n-/// [`product()`]: Product::product\n+/// [`product()`]: Iterator::product\n /// [`FromIterator`]: iter::FromIterator\n #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]\n pub trait Product<A = Self>: Sized {"}, {"sha": "b2cb2f12bbfeb83d6797a93de8b68804e6e3feaf", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -2148,6 +2148,7 @@ impl<'a, T, const N: usize> Iterator for ArrayChunks<'a, T, N> {\n         self.iter.last()\n     }\n \n+    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, i: usize) -> &'a [T; N] {\n         // SAFETY: The safety guarantees of `__iterator_get_unchecked` are\n         // transferred to the caller.\n@@ -2260,6 +2261,7 @@ impl<'a, T, const N: usize> Iterator for ArrayChunksMut<'a, T, N> {\n         self.iter.last()\n     }\n \n+    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, i: usize) -> &'a mut [T; N] {\n         // SAFETY: The safety guarantees of `__iterator_get_unchecked` are transferred to\n         // the caller."}, {"sha": "a5774764573be4143193b4e4d994379da39bc8fe", "filename": "library/core/src/str/iter.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -295,6 +295,7 @@ impl Iterator for Bytes<'_> {\n     }\n \n     #[inline]\n+    #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> u8 {\n         // SAFETY: the caller must uphold the safety contract\n         // for `Iterator::__iterator_get_unchecked`."}, {"sha": "f57529767a91a6aeaa0154cdce529796f579791d", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 63, "deletions": 12, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -253,6 +253,7 @@ mod tests;\n \n use crate::cmp;\n use crate::fmt;\n+use crate::mem::replace;\n use crate::ops::{Deref, DerefMut};\n use crate::ptr;\n use crate::slice;\n@@ -1044,6 +1045,32 @@ impl<'a> IoSliceMut<'a> {\n \n     /// Advance the internal cursor of the slice.\n     ///\n+    /// Also see [`IoSliceMut::advance_slices`] to advance the cursors of\n+    /// multiple buffers.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(io_slice_advance)]\n+    ///\n+    /// use std::io::IoSliceMut;\n+    /// use std::ops::Deref;\n+    ///\n+    /// let mut data = [1; 8];\n+    /// let mut buf = IoSliceMut::new(&mut data);\n+    ///\n+    /// // Mark 3 bytes as read.\n+    /// buf.advance(3);\n+    /// assert_eq!(buf.deref(), [1; 5].as_ref());\n+    /// ```\n+    #[unstable(feature = \"io_slice_advance\", issue = \"62726\")]\n+    #[inline]\n+    pub fn advance(&mut self, n: usize) {\n+        self.0.advance(n)\n+    }\n+\n+    /// Advance the internal cursor of the slices.\n+    ///\n     /// # Notes\n     ///\n     /// Elements in the slice may be modified if the cursor is not advanced to\n@@ -1070,13 +1097,13 @@ impl<'a> IoSliceMut<'a> {\n     /// ][..];\n     ///\n     /// // Mark 10 bytes as read.\n-    /// bufs = IoSliceMut::advance(bufs, 10);\n+    /// IoSliceMut::advance_slices(&mut bufs, 10);\n     /// assert_eq!(bufs[0].deref(), [2; 14].as_ref());\n     /// assert_eq!(bufs[1].deref(), [3; 8].as_ref());\n     /// ```\n     #[unstable(feature = \"io_slice_advance\", issue = \"62726\")]\n     #[inline]\n-    pub fn advance<'b>(bufs: &'b mut [IoSliceMut<'a>], n: usize) -> &'b mut [IoSliceMut<'a>] {\n+    pub fn advance_slices(bufs: &mut &mut [IoSliceMut<'a>], n: usize) {\n         // Number of buffers to remove.\n         let mut remove = 0;\n         // Total length of all the to be removed buffers.\n@@ -1090,11 +1117,10 @@ impl<'a> IoSliceMut<'a> {\n             }\n         }\n \n-        let bufs = &mut bufs[remove..];\n+        *bufs = &mut replace(bufs, &mut [])[remove..];\n         if !bufs.is_empty() {\n-            bufs[0].0.advance(n - accumulated_len)\n+            bufs[0].advance(n - accumulated_len)\n         }\n-        bufs\n     }\n }\n \n@@ -1153,6 +1179,32 @@ impl<'a> IoSlice<'a> {\n \n     /// Advance the internal cursor of the slice.\n     ///\n+    /// Also see [`IoSlice::advance_slices`] to advance the cursors of multiple\n+    /// buffers.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(io_slice_advance)]\n+    ///\n+    /// use std::io::IoSlice;\n+    /// use std::ops::Deref;\n+    ///\n+    /// let mut data = [1; 8];\n+    /// let mut buf = IoSlice::new(&mut data);\n+    ///\n+    /// // Mark 3 bytes as read.\n+    /// buf.advance(3);\n+    /// assert_eq!(buf.deref(), [1; 5].as_ref());\n+    /// ```\n+    #[unstable(feature = \"io_slice_advance\", issue = \"62726\")]\n+    #[inline]\n+    pub fn advance(&mut self, n: usize) {\n+        self.0.advance(n)\n+    }\n+\n+    /// Advance the internal cursor of the slices.\n+    ///\n     /// # Notes\n     ///\n     /// Elements in the slice may be modified if the cursor is not advanced to\n@@ -1179,12 +1231,12 @@ impl<'a> IoSlice<'a> {\n     /// ][..];\n     ///\n     /// // Mark 10 bytes as written.\n-    /// bufs = IoSlice::advance(bufs, 10);\n+    /// IoSlice::advance_slices(&mut bufs, 10);\n     /// assert_eq!(bufs[0].deref(), [2; 14].as_ref());\n     /// assert_eq!(bufs[1].deref(), [3; 8].as_ref());\n     #[unstable(feature = \"io_slice_advance\", issue = \"62726\")]\n     #[inline]\n-    pub fn advance<'b>(bufs: &'b mut [IoSlice<'a>], n: usize) -> &'b mut [IoSlice<'a>] {\n+    pub fn advance_slices(bufs: &mut &mut [IoSlice<'a>], n: usize) {\n         // Number of buffers to remove.\n         let mut remove = 0;\n         // Total length of all the to be removed buffers.\n@@ -1198,11 +1250,10 @@ impl<'a> IoSlice<'a> {\n             }\n         }\n \n-        let bufs = &mut bufs[remove..];\n+        *bufs = &mut replace(bufs, &mut [])[remove..];\n         if !bufs.is_empty() {\n-            bufs[0].0.advance(n - accumulated_len)\n+            bufs[0].advance(n - accumulated_len)\n         }\n-        bufs\n     }\n }\n \n@@ -1511,7 +1562,7 @@ pub trait Write {\n     fn write_all_vectored(&mut self, mut bufs: &mut [IoSlice<'_>]) -> Result<()> {\n         // Guarantee that bufs is empty if it contains no data,\n         // to avoid calling write_vectored if there is no data to be written.\n-        bufs = IoSlice::advance(bufs, 0);\n+        IoSlice::advance_slices(&mut bufs, 0);\n         while !bufs.is_empty() {\n             match self.write_vectored(bufs) {\n                 Ok(0) => {\n@@ -1520,7 +1571,7 @@ pub trait Write {\n                         &\"failed to write whole buffer\",\n                     ));\n                 }\n-                Ok(n) => bufs = IoSlice::advance(bufs, n),\n+                Ok(n) => IoSlice::advance_slices(&mut bufs, n),\n                 Err(ref e) if e.kind() == ErrorKind::Interrupted => {}\n                 Err(e) => return Err(e),\n             }"}, {"sha": "df0dc7e9d31f699d206d7c3fc86b3397b797c580", "filename": "library/std/src/io/tests.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/library%2Fstd%2Fsrc%2Fio%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/library%2Fstd%2Fsrc%2Fio%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ftests.rs?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -353,7 +353,7 @@ fn test_read_to_end_capacity() -> io::Result<()> {\n }\n \n #[test]\n-fn io_slice_mut_advance() {\n+fn io_slice_mut_advance_slices() {\n     let mut buf1 = [1; 8];\n     let mut buf2 = [2; 16];\n     let mut buf3 = [3; 8];\n@@ -364,75 +364,75 @@ fn io_slice_mut_advance() {\n     ][..];\n \n     // Only in a single buffer..\n-    bufs = IoSliceMut::advance(bufs, 1);\n+    IoSliceMut::advance_slices(&mut bufs, 1);\n     assert_eq!(bufs[0].deref(), [1; 7].as_ref());\n     assert_eq!(bufs[1].deref(), [2; 16].as_ref());\n     assert_eq!(bufs[2].deref(), [3; 8].as_ref());\n \n     // Removing a buffer, leaving others as is.\n-    bufs = IoSliceMut::advance(bufs, 7);\n+    IoSliceMut::advance_slices(&mut bufs, 7);\n     assert_eq!(bufs[0].deref(), [2; 16].as_ref());\n     assert_eq!(bufs[1].deref(), [3; 8].as_ref());\n \n     // Removing a buffer and removing from the next buffer.\n-    bufs = IoSliceMut::advance(bufs, 18);\n+    IoSliceMut::advance_slices(&mut bufs, 18);\n     assert_eq!(bufs[0].deref(), [3; 6].as_ref());\n }\n \n #[test]\n-fn io_slice_mut_advance_empty_slice() {\n-    let empty_bufs = &mut [][..];\n+fn io_slice_mut_advance_slices_empty_slice() {\n+    let mut empty_bufs = &mut [][..];\n     // Shouldn't panic.\n-    IoSliceMut::advance(empty_bufs, 1);\n+    IoSliceMut::advance_slices(&mut empty_bufs, 1);\n }\n \n #[test]\n-fn io_slice_mut_advance_beyond_total_length() {\n+fn io_slice_mut_advance_slices_beyond_total_length() {\n     let mut buf1 = [1; 8];\n     let mut bufs = &mut [IoSliceMut::new(&mut buf1)][..];\n \n     // Going beyond the total length should be ok.\n-    bufs = IoSliceMut::advance(bufs, 9);\n+    IoSliceMut::advance_slices(&mut bufs, 9);\n     assert!(bufs.is_empty());\n }\n \n #[test]\n-fn io_slice_advance() {\n+fn io_slice_advance_slices() {\n     let buf1 = [1; 8];\n     let buf2 = [2; 16];\n     let buf3 = [3; 8];\n     let mut bufs = &mut [IoSlice::new(&buf1), IoSlice::new(&buf2), IoSlice::new(&buf3)][..];\n \n     // Only in a single buffer..\n-    bufs = IoSlice::advance(bufs, 1);\n+    IoSlice::advance_slices(&mut bufs, 1);\n     assert_eq!(bufs[0].deref(), [1; 7].as_ref());\n     assert_eq!(bufs[1].deref(), [2; 16].as_ref());\n     assert_eq!(bufs[2].deref(), [3; 8].as_ref());\n \n     // Removing a buffer, leaving others as is.\n-    bufs = IoSlice::advance(bufs, 7);\n+    IoSlice::advance_slices(&mut bufs, 7);\n     assert_eq!(bufs[0].deref(), [2; 16].as_ref());\n     assert_eq!(bufs[1].deref(), [3; 8].as_ref());\n \n     // Removing a buffer and removing from the next buffer.\n-    bufs = IoSlice::advance(bufs, 18);\n+    IoSlice::advance_slices(&mut bufs, 18);\n     assert_eq!(bufs[0].deref(), [3; 6].as_ref());\n }\n \n #[test]\n-fn io_slice_advance_empty_slice() {\n-    let empty_bufs = &mut [][..];\n+fn io_slice_advance_slices_empty_slice() {\n+    let mut empty_bufs = &mut [][..];\n     // Shouldn't panic.\n-    IoSlice::advance(empty_bufs, 1);\n+    IoSlice::advance_slices(&mut empty_bufs, 1);\n }\n \n #[test]\n-fn io_slice_advance_beyond_total_length() {\n+fn io_slice_advance_slices_beyond_total_length() {\n     let buf1 = [1; 8];\n     let mut bufs = &mut [IoSlice::new(&buf1)][..];\n \n     // Going beyond the total length should be ok.\n-    bufs = IoSlice::advance(bufs, 9);\n+    IoSlice::advance_slices(&mut bufs, 9);\n     assert!(bufs.is_empty());\n }\n "}, {"sha": "499f33f14f56296d45cfd3ff685c39a119838ba9", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 65, "deletions": 80, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -490,7 +490,6 @@ fn settings(root_path: &str, suffix: &str, themes: &[StylePath]) -> Result<Strin\n         (\"auto-hide-method-docs\", \"Auto-hide item methods' documentation\", false).into(),\n         (\"auto-hide-trait-implementations\", \"Auto-hide trait implementation documentation\", false)\n             .into(),\n-        (\"auto-collapse-implementors\", \"Auto-hide implementors of a trait\", true).into(),\n         (\"go-to-only-result\", \"Directly go to item in search if there is only one result\", false)\n             .into(),\n         (\"line-numbers\", \"Show line numbers on code examples\", false).into(),\n@@ -724,6 +723,8 @@ fn short_item_info(\n     extra_info\n }\n \n+// Render the list of items inside one of the sections \"Trait Implementations\",\n+// \"Auto Trait Implementations,\" \"Blanket Trait Implementations\" (on struct/enum pages).\n fn render_impls(\n     cx: &Context<'_>,\n     w: &mut Buffer,\n@@ -746,8 +747,6 @@ fn render_impls(\n                 containing_item,\n                 assoc_link,\n                 RenderMode::Normal,\n-                containing_item.stable_since(tcx).as_deref(),\n-                containing_item.const_stable_since(tcx).as_deref(),\n                 true,\n                 None,\n                 false,\n@@ -1025,7 +1024,6 @@ fn render_assoc_items(\n         Some(v) => v,\n         None => return,\n     };\n-    let tcx = cx.tcx();\n     let cache = cx.cache();\n     let (non_trait, traits): (Vec<_>, _) = v.iter().partition(|i| i.inner_impl().trait_.is_none());\n     if !non_trait.is_empty() {\n@@ -1059,8 +1057,6 @@ fn render_assoc_items(\n                 containing_item,\n                 AssocItemLink::Anchor(None),\n                 render_mode,\n-                containing_item.stable_since(tcx).as_deref(),\n-                containing_item.const_stable_since(tcx).as_deref(),\n                 true,\n                 None,\n                 false,\n@@ -1261,8 +1257,6 @@ fn render_impl(\n     parent: &clean::Item,\n     link: AssocItemLink<'_>,\n     render_mode: RenderMode,\n-    outer_version: Option<&str>,\n-    outer_const_version: Option<&str>,\n     show_def_docs: bool,\n     use_absolute: Option<bool>,\n     is_on_foreign_type: bool,\n@@ -1279,23 +1273,23 @@ fn render_impl(\n     // For trait implementations, the `interesting` output contains all methods that have doc\n     // comments, and the `boring` output contains all methods that do not. The distinction is\n     // used to allow hiding the boring methods.\n+    // `containing_item` is used for rendering stability info. If the parent is a trait impl,\n+    // `containing_item` will the grandparent, since trait impls can't have stability attached.\n     fn doc_impl_item(\n         boring: &mut Buffer,\n         interesting: &mut Buffer,\n         cx: &Context<'_>,\n         item: &clean::Item,\n         parent: &clean::Item,\n+        containing_item: &clean::Item,\n         link: AssocItemLink<'_>,\n         render_mode: RenderMode,\n         is_default_item: bool,\n-        outer_version: Option<&str>,\n-        outer_const_version: Option<&str>,\n         trait_: Option<&clean::Trait>,\n         show_def_docs: bool,\n     ) {\n         let item_type = item.type_();\n         let name = item.name.as_ref().unwrap();\n-        let tcx = cx.tcx();\n \n         let render_method_item = match render_mode {\n             RenderMode::Normal => true,\n@@ -1364,6 +1358,8 @@ fn render_impl(\n                         \"<div id=\\\"{}\\\" class=\\\"{}{} has-srclink\\\">\",\n                         id, item_type, in_trait_class,\n                     );\n+                    render_rightside(w, cx, item, containing_item);\n+                    write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n                     w.write_str(\"<code>\");\n                     render_assoc_item(\n                         w,\n@@ -1373,15 +1369,6 @@ fn render_impl(\n                         cx,\n                     );\n                     w.write_str(\"</code>\");\n-                    render_stability_since_raw(\n-                        w,\n-                        item.stable_since(tcx).as_deref(),\n-                        item.const_stable_since(tcx).as_deref(),\n-                        outer_version,\n-                        outer_const_version,\n-                    );\n-                    write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n-                    write_srclink(cx, item, w);\n                     w.write_str(\"</div>\");\n                 }\n             }\n@@ -1390,9 +1377,11 @@ fn render_impl(\n                 let id = cx.derive_id(source_id.clone());\n                 write!(\n                     w,\n-                    \"<div id=\\\"{}\\\" class=\\\"{}{} has-srclink\\\"><code>\",\n+                    \"<div id=\\\"{}\\\" class=\\\"{}{} has-srclink\\\">\",\n                     id, item_type, in_trait_class\n                 );\n+                write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n+                w.write_str(\"<code>\");\n                 assoc_type(\n                     w,\n                     item,\n@@ -1403,17 +1392,19 @@ fn render_impl(\n                     cx,\n                 );\n                 w.write_str(\"</code>\");\n-                write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n                 w.write_str(\"</div>\");\n             }\n             clean::AssocConstItem(ref ty, ref default) => {\n                 let source_id = format!(\"{}.{}\", item_type, name);\n                 let id = cx.derive_id(source_id.clone());\n                 write!(\n                     w,\n-                    \"<div id=\\\"{}\\\" class=\\\"{}{} has-srclink\\\"><code>\",\n+                    \"<div id=\\\"{}\\\" class=\\\"{}{} has-srclink\\\">\",\n                     id, item_type, in_trait_class\n                 );\n+                render_rightside(w, cx, item, containing_item);\n+                write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n+                w.write_str(\"<code>\");\n                 assoc_const(\n                     w,\n                     item,\n@@ -1424,21 +1415,14 @@ fn render_impl(\n                     cx,\n                 );\n                 w.write_str(\"</code>\");\n-                render_stability_since_raw(\n-                    w,\n-                    item.stable_since(tcx).as_deref(),\n-                    item.const_stable_since(tcx).as_deref(),\n-                    outer_version,\n-                    outer_const_version,\n-                );\n-                write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n-                write_srclink(cx, item, w);\n                 w.write_str(\"</div>\");\n             }\n             clean::AssocTypeItem(ref bounds, ref default) => {\n                 let source_id = format!(\"{}.{}\", item_type, name);\n                 let id = cx.derive_id(source_id.clone());\n-                write!(w, \"<div id=\\\"{}\\\" class=\\\"{}{}\\\"><code>\", id, item_type, in_trait_class,);\n+                write!(w, \"<div id=\\\"{}\\\" class=\\\"{}{}\\\">\", id, item_type, in_trait_class,);\n+                write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n+                w.write_str(\"<code>\");\n                 assoc_type(\n                     w,\n                     item,\n@@ -1449,7 +1433,6 @@ fn render_impl(\n                     cx,\n                 );\n                 w.write_str(\"</code>\");\n-                write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n                 w.write_str(\"</div>\");\n             }\n             clean::StrippedItem(..) => return,\n@@ -1474,11 +1457,10 @@ fn render_impl(\n             cx,\n             trait_item,\n             if trait_.is_some() { &i.impl_item } else { parent },\n+            parent,\n             link,\n             render_mode,\n             false,\n-            outer_version,\n-            outer_const_version,\n             trait_.map(|t| &t.trait_),\n             show_def_docs,\n         );\n@@ -1491,9 +1473,8 @@ fn render_impl(\n         t: &clean::Trait,\n         i: &clean::Impl,\n         parent: &clean::Item,\n+        containing_item: &clean::Item,\n         render_mode: RenderMode,\n-        outer_version: Option<&str>,\n-        outer_const_version: Option<&str>,\n         show_def_docs: bool,\n     ) {\n         for trait_item in &t.items {\n@@ -1511,11 +1492,10 @@ fn render_impl(\n                 cx,\n                 trait_item,\n                 parent,\n+                containing_item,\n                 assoc_link,\n                 render_mode,\n                 true,\n-                outer_version,\n-                outer_const_version,\n                 Some(t),\n                 show_def_docs,\n             );\n@@ -1535,28 +1515,25 @@ fn render_impl(\n                 &t.trait_,\n                 &i.inner_impl(),\n                 &i.impl_item,\n+                parent,\n                 render_mode,\n-                outer_version,\n-                outer_const_version,\n                 show_def_docs,\n             );\n         }\n     }\n     if render_mode == RenderMode::Normal {\n-        let toggled = !impl_items.is_empty() || !default_impl_items.is_empty();\n+        let toggled = !(impl_items.is_empty() && default_impl_items.is_empty());\n         if toggled {\n             close_tags.insert_str(0, \"</details>\");\n             write!(w, \"<details class=\\\"rustdoc-toggle implementors-toggle\\\" open>\");\n-        }\n-        if toggled {\n             write!(w, \"<summary>\")\n         }\n         render_impl_summary(\n             w,\n             cx,\n             i,\n-            outer_version,\n-            outer_const_version,\n+            parent,\n+            parent,\n             show_def_docs,\n             use_absolute,\n             is_on_foreign_type,\n@@ -1565,11 +1542,6 @@ fn render_impl(\n         if toggled {\n             write!(w, \"</summary>\")\n         }\n-        if trait_.is_some() {\n-            if let Some(portability) = portability(&i.impl_item, Some(parent)) {\n-                write!(w, \"<div class=\\\"item-info\\\">{}</div>\", portability);\n-            }\n-        }\n \n         if let Some(ref dox) = cx.shared.maybe_collapsed_doc_value(&i.impl_item) {\n             let mut ids = cx.id_map.borrow_mut();\n@@ -1597,20 +1569,42 @@ fn render_impl(\n     w.write_str(&close_tags);\n }\n \n-fn render_impl_summary(\n+// Render the items that appear on the right side of methods, impls, and\n+// associated types. For example \"1.0.0 (const: 1.39.0) [src]\".\n+fn render_rightside(\n+    w: &mut Buffer,\n+    cx: &Context<'_>,\n+    item: &clean::Item,\n+    containing_item: &clean::Item,\n+) {\n+    let tcx = cx.tcx();\n+\n+    write!(w, \"<div class=\\\"rightside\\\">\");\n+    render_stability_since_raw(\n+        w,\n+        item.stable_since(tcx).as_deref(),\n+        item.const_stable_since(tcx).as_deref(),\n+        containing_item.stable_since(tcx).as_deref(),\n+        containing_item.const_stable_since(tcx).as_deref(),\n+    );\n+\n+    write_srclink(cx, item, w);\n+    w.write_str(\"</div>\");\n+}\n+\n+pub(crate) fn render_impl_summary(\n     w: &mut Buffer,\n     cx: &Context<'_>,\n     i: &Impl,\n-    outer_version: Option<&str>,\n-    outer_const_version: Option<&str>,\n+    parent: &clean::Item,\n+    containing_item: &clean::Item,\n     show_def_docs: bool,\n     use_absolute: Option<bool>,\n     is_on_foreign_type: bool,\n     // This argument is used to reference same type with different paths to avoid duplication\n     // in documentation pages for trait with automatic implementations like \"Send\" and \"Sync\".\n     aliases: &[String],\n ) {\n-    let tcx = cx.tcx();\n     let id = cx.derive_id(match i.inner_impl().trait_ {\n         Some(ref t) => {\n             if is_on_foreign_type {\n@@ -1626,13 +1620,12 @@ fn render_impl_summary(\n     } else {\n         format!(\" data-aliases=\\\"{}\\\"\", aliases.join(\",\"))\n     };\n+    write!(w, \"<div id=\\\"{}\\\" class=\\\"impl has-srclink\\\"{}>\", id, aliases);\n+    render_rightside(w, cx, &i.impl_item, containing_item);\n+    write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n+    write!(w, \"<code class=\\\"in-band\\\">\");\n+\n     if let Some(use_absolute) = use_absolute {\n-        write!(\n-            w,\n-            \"<div id=\\\"{}\\\" class=\\\"impl has-srclink\\\"{}>\\\n-                     <code class=\\\"in-band\\\">\",\n-            id, aliases\n-        );\n         write!(w, \"{}\", i.inner_impl().print(use_absolute, cx));\n         if show_def_docs {\n             for it in &i.inner_impl().items {\n@@ -1643,26 +1636,18 @@ fn render_impl_summary(\n                 }\n             }\n         }\n-        w.write_str(\"</code>\");\n     } else {\n-        write!(\n-            w,\n-            \"<div id=\\\"{}\\\" class=\\\"impl has-srclink\\\"{}>\\\n-                     <code class=\\\"in-band\\\">{}</code>\",\n-            id,\n-            aliases,\n-            i.inner_impl().print(false, cx)\n-        );\n+        write!(w, \"{}\", i.inner_impl().print(false, cx));\n     }\n-    write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n-    render_stability_since_raw(\n-        w,\n-        i.impl_item.stable_since(tcx).as_deref(),\n-        i.impl_item.const_stable_since(tcx).as_deref(),\n-        outer_version,\n-        outer_const_version,\n-    );\n-    write_srclink(cx, &i.impl_item, w);\n+    write!(w, \"</code>\");\n+\n+    let is_trait = i.inner_impl().trait_.is_some();\n+    if is_trait {\n+        if let Some(portability) = portability(&i.impl_item, Some(parent)) {\n+            write!(w, \"<div class=\\\"item-info\\\">{}</div>\", portability);\n+        }\n+    }\n+\n     w.write_str(\"</div>\");\n }\n "}, {"sha": "8fd5353891221c27519036334f1b42fc3532f7b2", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -15,7 +15,8 @@ use rustc_span::symbol::{kw, sym, Symbol};\n use super::{\n     collect_paths_for_type, document, ensure_trailing_slash, item_ty_to_strs, notable_traits_decl,\n     render_assoc_item, render_assoc_items, render_attributes_in_code, render_attributes_in_pre,\n-    render_impl, render_stability_since_raw, write_srclink, AssocItemLink, Context,\n+    render_impl, render_impl_summary, render_stability_since_raw, write_srclink, AssocItemLink,\n+    Context,\n };\n use crate::clean::{self, GetDefId};\n use crate::formats::item_type::ItemType;\n@@ -585,11 +586,14 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n         if toggled {\n             write!(w, \"<details class=\\\"rustdoc-toggle\\\" open><summary>\");\n         }\n-        write!(w, \"<div id=\\\"{}\\\" class=\\\"method has-srclink\\\"><code>\", id);\n-        render_assoc_item(w, m, AssocItemLink::Anchor(Some(&id)), ItemType::Impl, cx);\n-        w.write_str(\"</code>\");\n+        write!(w, \"<div id=\\\"{}\\\" class=\\\"method has-srclink\\\">\", id);\n+        write!(w, \"<div class=\\\"rightside\\\">\");\n         render_stability_since(w, m, t, cx.tcx());\n         write_srclink(cx, m, w);\n+        write!(w, \"</div>\");\n+        write!(w, \"<code>\");\n+        render_assoc_item(w, m, AssocItemLink::Anchor(Some(&id)), ItemType::Impl, cx);\n+        w.write_str(\"</code>\");\n         w.write_str(\"</div>\");\n         if toggled {\n             write!(w, \"</summary>\");\n@@ -701,8 +705,6 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n                     it,\n                     assoc_link,\n                     RenderMode::Normal,\n-                    implementor.impl_item.stable_since(cx.tcx()).as_deref(),\n-                    implementor.impl_item.const_stable_since(cx.tcx()).as_deref(),\n                     false,\n                     None,\n                     true,\n@@ -1310,7 +1312,7 @@ fn render_implementor(\n     implementor_dups: &FxHashMap<Symbol, (DefId, bool)>,\n     aliases: &[String],\n ) {\n-    // If there's already another implementor that has the same abbridged name, use the\n+    // If there's already another implementor that has the same abridged name, use the\n     // full path, for example in `std::iter::ExactSizeIterator`\n     let use_absolute = match implementor.inner_impl().for_ {\n         clean::ResolvedPath { ref path, is_generic: false, .. }\n@@ -1320,19 +1322,15 @@ fn render_implementor(\n         } => implementor_dups[&path.last()].1,\n         _ => false,\n     };\n-    render_impl(\n+    render_impl_summary(\n         w,\n         cx,\n         implementor,\n         trait_,\n-        AssocItemLink::Anchor(None),\n-        RenderMode::Normal,\n-        trait_.stable_since(cx.tcx()).as_deref(),\n-        trait_.const_stable_since(cx.tcx()).as_deref(),\n+        trait_,\n         false,\n         Some(use_absolute),\n         false,\n-        false,\n         aliases,\n     );\n }"}, {"sha": "98128878999e4b36460ae92848dcf20e04107b67", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -778,7 +778,6 @@ function hideThemeButtonState() {\n         }\n \n         var hideMethodDocs = getSettingValue(\"auto-hide-method-docs\") === \"true\";\n-        var hideImplementors = getSettingValue(\"auto-collapse-implementors\") !== \"false\";\n         var hideImplementations = getSettingValue(\"auto-hide-trait-implementations\") === \"true\";\n         var hideLargeItemContents = getSettingValue(\"auto-hide-large-items\") !== \"false\";\n \n@@ -796,10 +795,6 @@ function hideThemeButtonState() {\n             setImplementorsTogglesOpen(\"blanket-implementations-list\", false);\n         }\n \n-        if (!hideImplementors) {\n-            setImplementorsTogglesOpen(\"implementors-list\", true);\n-        }\n-\n         onEachLazy(document.getElementsByClassName(\"rustdoc-toggle\"), function (e) {\n             if (!hideLargeItemContents && hasClass(e, \"type-contents-toggle\")) {\n                 e.open = true;"}, {"sha": "9a59ee528a0c9e90fe3a4e5e1126418fe9f33972", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -581,7 +581,6 @@ nav.sub {\n .content .item-info {\n \tposition: relative;\n \tmargin-left: 33px;\n-\tmargin-top: -13px;\n }\n \n .sub-variant > div > .item-info {\n@@ -852,12 +851,12 @@ body.blur > :not(#help) {\n }\n \n .stab {\n-\tdisplay: table;\n \tborder-width: 1px;\n \tborder-style: solid;\n \tpadding: 3px;\n \tmargin-bottom: 5px;\n \tfont-size: 90%;\n+\tfont-weight: normal;\n }\n .stab p {\n \tdisplay: inline;\n@@ -900,32 +899,25 @@ body.blur > :not(#help) {\n .since {\n \tfont-weight: normal;\n \tfont-size: initial;\n-\tposition: absolute;\n-\tright: 0;\n-\ttop: 0;\n }\n \n .impl-items .since, .impl .since, .methods .since {\n-\tflex-grow: 0;\n \tpadding-left: 12px;\n \tpadding-right: 2px;\n \tposition: initial;\n }\n \n .impl-items .srclink, .impl .srclink, .methods .srclink {\n-\tflex-grow: 0;\n \t/* Override header settings otherwise it's too bold */\n \tfont-size: 17px;\n \tfont-weight: normal;\n }\n \n-.impl-items code, .impl code, .methods code {\n-\tflex-grow: 1;\n+.rightside {\n+\tfloat: right;\n }\n \n .has-srclink {\n-\tdisplay: flex;\n-\tflex-basis: 100%;\n \tfont-size: 16px;\n \tmargin-bottom: 12px;\n \t/* Push the src link out to the right edge consistently */\n@@ -986,7 +978,6 @@ a.test-arrow:hover{\n }\n \n .since + .srclink {\n-\tdisplay: table-cell;\n \tpadding-left: 10px;\n }\n \n@@ -1046,6 +1037,10 @@ a.test-arrow:hover{\n \topacity: 1;\n }\n \n+:target {\n+\tpadding-right: 3px;\n+}\n+\n .information {\n \tposition: absolute;\n \tleft: -25px;\n@@ -1612,11 +1607,6 @@ details.undocumented[open] > summary::before {\n \t\tmargin-left: 0;\n \t}\n \n-\t.content .impl-items .method, .content .impl-items > .type, .impl-items > .associatedconstant,\n-\t.impl-items > .associatedtype {\n-\t\tdisplay: flex;\n-\t}\n-\n \t.anchor {\n \t\tdisplay: none !important;\n \t}"}, {"sha": "171d06c0a3667760806b4b0e16f35a02592d4ddb", "filename": "src/librustdoc/html/static/themes/ayu.css", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -334,8 +334,11 @@ a.test-arrow:hover {\n \tcolor: #999;\n }\n \n-:target > code, :target > .in-band {\n+:target, :target * {\n \tbackground: rgba(255, 236, 164, 0.06);\n+}\n+\n+:target {\n \tborder-right: 3px solid rgba(255, 180, 76, 0.85);\n }\n "}, {"sha": "d9ea28058ad99372d1ca7967381849d24bc0ce3d", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -282,8 +282,11 @@ a.test-arrow:hover{\n \tcolor: #999;\n }\n \n-:target > code, :target > .in-band {\n+:target, :target * {\n \tbackground-color: #494a3d;\n+}\n+\n+:target {\n \tborder-right: 3px solid #bb7410;\n }\n "}, {"sha": "a2dfb89820b01450f753f2c107509ee13bfb1812", "filename": "src/librustdoc/html/static/themes/light.css", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -275,8 +275,11 @@ a.test-arrow:hover{\n \tcolor: #999;\n }\n \n-:target > code, :target > .in-band {\n+:target, :target * {\n \tbackground: #FDFFD3;\n+}\n+\n+:target {\n \tborder-right: 3px solid #ffb44c;\n }\n "}, {"sha": "d5f9d4fc58b8c3e76fbed31eb2bc8cb34edc5a9b", "filename": "src/test/rustdoc-gui/hash-item-expansion.goml", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Frustdoc-gui%2Fhash-item-expansion.goml", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Frustdoc-gui%2Fhash-item-expansion.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fhash-item-expansion.goml?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -2,9 +2,6 @@\n goto: file://|DOC_PATH|/test_docs/struct.Foo.html#method.borrow\n // In the blanket implementations list, \"Borrow\" is the second one, hence the \":nth(2)\".\n assert: (\"#blanket-implementations-list > details:nth-child(2)\", \"open\", \"\")\n-// Please note the \"\\\" below is needed because otherwise \".borrow\" would be interpreted as\n-// a class selector.\n-assert: (\"#method\\.borrow\", {\"display\": \"flex\"})\n // We first check that the impl block is open by default.\n assert: (\"#implementations + details\", \"open\", \"\")\n // We collapse it."}, {"sha": "6189acb72542a613612d67d183886e28441e03ff", "filename": "src/test/rustdoc/ensure-src-link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Frustdoc%2Fensure-src-link.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Frustdoc%2Fensure-src-link.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fensure-src-link.rs?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -2,5 +2,5 @@\n \n // This test ensures that the [src] link is present on traits items.\n \n-// @has foo/trait.Iterator.html '//div[@id=\"method.zip\"]/a[@class=\"srclink\"]' \"[src]\"\n+// @has foo/trait.Iterator.html '//div[@id=\"method.zip\"]//a[@class=\"srclink\"]' \"[src]\"\n pub use std::iter::Iterator;"}, {"sha": "dbaf744dc4712fad4fc82a004a1a0e489efecf21", "filename": "src/test/rustdoc/issue-19055.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0ef2b4a29bf70e8984d0d2febb7a546856c554a0/src%2Ftest%2Frustdoc%2Fissue-19055.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ef2b4a29bf70e8984d0d2febb7a546856c554a0/src%2Ftest%2Frustdoc%2Fissue-19055.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-19055.rs?ref=0ef2b4a29bf70e8984d0d2febb7a546856c554a0", "patch": "@@ -1,20 +0,0 @@\n-// @has issue_19055/trait.Any.html\n-pub trait Any {}\n-\n-impl<'any> Any + 'any {\n-    // @has - '//*[@id=\"method.is\"]' 'fn is'\n-    pub fn is<T: 'static>(&self) -> bool { loop {} }\n-\n-    // @has - '//*[@id=\"method.downcast_ref\"]' 'fn downcast_ref'\n-    pub fn downcast_ref<T: 'static>(&self) -> Option<&T> { loop {} }\n-\n-    // @has - '//*[@id=\"method.downcast_mut\"]' 'fn downcast_mut'\n-    pub fn downcast_mut<T: 'static>(&mut self) -> Option<&mut T> { loop {} }\n-}\n-\n-pub trait Foo {\n-    fn foo(&self) {}\n-}\n-\n-// @has - '//*[@id=\"method.foo\"]' 'fn foo'\n-impl Foo for Any {}"}, {"sha": "1952f723465d66c709f88ac903aa77d28346c822", "filename": "src/test/rustdoc/src-links-auto-impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Frustdoc%2Fsrc-links-auto-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Frustdoc%2Fsrc-links-auto-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsrc-links-auto-impls.rs?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -2,11 +2,11 @@\n \n // @has foo/struct.Unsized.html\n // @has - '//div[@id=\"impl-Sized\"]/code' 'impl !Sized for Unsized'\n-// @!has - '//div[@id=\"impl-Sized\"]/a[@class=\"srclink\"]' '[src]'\n+// @!has - '//div[@id=\"impl-Sized\"]//a[@class=\"srclink\"]' '[src]'\n // @has - '//div[@id=\"impl-Sync\"]/code' 'impl Sync for Unsized'\n-// @!has - '//div[@id=\"impl-Sync\"]/a[@class=\"srclink\"]' '[src]'\n+// @!has - '//div[@id=\"impl-Sync\"]//a[@class=\"srclink\"]' '[src]'\n // @has - '//div[@id=\"impl-Any\"]/code' 'impl<T> Any for T'\n-// @has - '//div[@id=\"impl-Any\"]/a[@class=\"srclink\"]' '[src]'\n+// @has - '//div[@id=\"impl-Any\"]//a[@class=\"srclink\"]' '[src]'\n pub struct Unsized {\n     data: [u8],\n }"}, {"sha": "ddbe93febdc2526a9306312f790a1f07d7b0e04e", "filename": "src/test/rustdoc/trait-impl-items-links-and-anchors.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Frustdoc%2Ftrait-impl-items-links-and-anchors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Frustdoc%2Ftrait-impl-items-links-and-anchors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftrait-impl-items-links-and-anchors.rs?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -38,23 +38,15 @@ impl MyTrait for Vec<u8> {\n }\n \n impl MyTrait for MyStruct {\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedtype.Assoc-3\"]//a[@class=\"type\"]/@href' #associatedtype.Assoc\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedtype.Assoc-3\"]//a[@class=\"anchor\"]/@href' #associatedtype.Assoc-3\n     // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"associatedtype.Assoc\"]//a[@class=\"type\"]/@href' trait.MyTrait.html#associatedtype.Assoc\n     // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"associatedtype.Assoc\"]//a[@class=\"anchor\"]/@href' #associatedtype.Assoc\n     type Assoc = bool;\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedconstant.VALUE-3\"]//a[@class=\"constant\"]/@href' #associatedconstant.VALUE\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedconstant.VALUE-3\"]//a[@class=\"anchor\"]/@href' #associatedconstant.VALUE-3\n     // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"associatedconstant.VALUE\"]//a[@class=\"constant\"]/@href' trait.MyTrait.html#associatedconstant.VALUE\n     // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"associatedconstant.VALUE\"]//a[@class=\"anchor\"]/@href' #associatedconstant.VALUE\n     const VALUE: u32 = 20;\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"method.trait_function-2\"]//a[@class=\"fnname\"]/@href' #tymethod.trait_function\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"method.trait_function-2\"]//a[@class=\"anchor\"]/@href' #method.trait_function-2\n     // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"method.trait_function\"]//a[@class=\"fnname\"]/@href' trait.MyTrait.html#tymethod.trait_function\n     // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"method.trait_function\"]//a[@class=\"anchor\"]/@href' #method.trait_function\n     fn trait_function(&self) {}\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"method.defaulted_override-3\"]//a[@class=\"fnname\"]/@href' #method.defaulted_override\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"method.defaulted_override-3\"]//a[@class=\"anchor\"]/@href' #method.defaulted_override-3\n     // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"method.defaulted_override\"]//a[@class=\"fnname\"]/@href' trait.MyTrait.html#method.defaulted_override\n     // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"method.defaulted_override\"]//a[@class=\"anchor\"]/@href' #method.defaulted_override\n     fn defaulted_override(&self) {}"}, {"sha": "ccc120c5421f536a1a85e5af638d7119ed08a7c8", "filename": "src/test/ui/borrowck/issue-85581.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Fborrowck%2Fissue-85581.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Fborrowck%2Fissue-85581.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-85581.rs?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -0,0 +1,15 @@\n+// Regression test of #85581.\n+// Checks not to suggest to add `;` when the second mutable borrow\n+// is in the first's scope.\n+\n+use std::collections::BinaryHeap;\n+\n+fn foo(heap: &mut BinaryHeap<i32>) {\n+    match heap.peek_mut() {\n+        Some(_) => { heap.pop(); },\n+        //~^ ERROR: cannot borrow `*heap` as mutable more than once at a time\n+        None => (),\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "29c0429f2a046bf7b69d0bf2752f4f633b256b61", "filename": "src/test/ui/borrowck/issue-85581.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Fborrowck%2Fissue-85581.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Fborrowck%2Fissue-85581.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-85581.stderr?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -0,0 +1,17 @@\n+error[E0499]: cannot borrow `*heap` as mutable more than once at a time\n+  --> $DIR/issue-85581.rs:9:22\n+   |\n+LL |     match heap.peek_mut() {\n+   |           ---------------\n+   |           |\n+   |           first mutable borrow occurs here\n+   |           a temporary with access to the first borrow is created here ...\n+LL |         Some(_) => { heap.pop(); },\n+   |                      ^^^^ second mutable borrow occurs here\n+...\n+LL | }\n+   | - ... and the first borrow might be used here, when that temporary is dropped and runs the destructor for type `Option<PeekMut<'_, i32>>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0499`."}, {"sha": "5807c5659b6155fd12c7f6e9f17b9c62dcc1ece9", "filename": "src/test/ui/consts/const-eval/const_panic.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -5,31 +5,31 @@\n const MSG: &str = \"hello\";\n \n const Z: () = std::panic!(\"cheese\");\n-//~^ ERROR any use of this value will cause an error\n+//~^ ERROR evaluation of constant value failed\n \n const Z2: () = std::panic!();\n-//~^ ERROR any use of this value will cause an error\n+//~^ ERROR evaluation of constant value failed\n \n const Y: () = std::unreachable!();\n-//~^ ERROR any use of this value will cause an error\n+//~^ ERROR evaluation of constant value failed\n \n const X: () = std::unimplemented!();\n-//~^ ERROR any use of this value will cause an error\n+//~^ ERROR evaluation of constant value failed\n //\n const W: () = std::panic!(MSG);\n-//~^ ERROR any use of this value will cause an error\n+//~^ ERROR evaluation of constant value failed\n \n const Z_CORE: () = core::panic!(\"cheese\");\n-//~^ ERROR any use of this value will cause an error\n+//~^ ERROR evaluation of constant value failed\n \n const Z2_CORE: () = core::panic!();\n-//~^ ERROR any use of this value will cause an error\n+//~^ ERROR evaluation of constant value failed\n \n const Y_CORE: () = core::unreachable!();\n-//~^ ERROR any use of this value will cause an error\n+//~^ ERROR evaluation of constant value failed\n \n const X_CORE: () = core::unimplemented!();\n-//~^ ERROR any use of this value will cause an error\n+//~^ ERROR evaluation of constant value failed\n \n const W_CORE: () = core::panic!(MSG);\n-//~^ ERROR any use of this value will cause an error\n+//~^ ERROR evaluation of constant value failed"}, {"sha": "c0c749ede56126084186ec71a2b79d34283794b8", "filename": "src/test/ui/consts/const-eval/const_panic.stderr", "status": "modified", "additions": 20, "deletions": 40, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -1,100 +1,80 @@\n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:7:15\n    |\n LL | const Z: () = std::panic!(\"cheese\");\n-   | --------------^^^^^^^^^^^^^^^^^^^^^-\n-   |               |\n-   |               the evaluated program panicked at 'cheese', $DIR/const_panic.rs:7:15\n+   |               ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'cheese', $DIR/const_panic.rs:7:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:10:16\n    |\n LL | const Z2: () = std::panic!();\n-   | ---------------^^^^^^^^^^^^^-\n-   |                |\n-   |                the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:10:16\n+   |                ^^^^^^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:10:16\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:13:15\n    |\n LL | const Y: () = std::unreachable!();\n-   | --------------^^^^^^^^^^^^^^^^^^^-\n-   |               |\n-   |               the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:13:15\n+   |               ^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:13:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:16:15\n    |\n LL | const X: () = std::unimplemented!();\n-   | --------------^^^^^^^^^^^^^^^^^^^^^-\n-   |               |\n-   |               the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:16:15\n+   |               ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:16:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:19:15\n    |\n LL | const W: () = std::panic!(MSG);\n-   | --------------^^^^^^^^^^^^^^^^-\n-   |               |\n-   |               the evaluated program panicked at 'hello', $DIR/const_panic.rs:19:15\n+   |               ^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic.rs:19:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:22:20\n    |\n LL | const Z_CORE: () = core::panic!(\"cheese\");\n-   | -------------------^^^^^^^^^^^^^^^^^^^^^^-\n-   |                    |\n-   |                    the evaluated program panicked at 'cheese', $DIR/const_panic.rs:22:20\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'cheese', $DIR/const_panic.rs:22:20\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:25:21\n    |\n LL | const Z2_CORE: () = core::panic!();\n-   | --------------------^^^^^^^^^^^^^^-\n-   |                     |\n-   |                     the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:25:21\n+   |                     ^^^^^^^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:25:21\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:28:20\n    |\n LL | const Y_CORE: () = core::unreachable!();\n-   | -------------------^^^^^^^^^^^^^^^^^^^^-\n-   |                    |\n-   |                    the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:28:20\n+   |                    ^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:28:20\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:31:20\n    |\n LL | const X_CORE: () = core::unimplemented!();\n-   | -------------------^^^^^^^^^^^^^^^^^^^^^^-\n-   |                    |\n-   |                    the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:31:20\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:31:20\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:34:20\n    |\n LL | const W_CORE: () = core::panic!(MSG);\n-   | -------------------^^^^^^^^^^^^^^^^^-\n-   |                    |\n-   |                    the evaluated program panicked at 'hello', $DIR/const_panic.rs:34:20\n+   |                    ^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic.rs:34:20\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "1ea0845c968c6fcaa50a88e7341628e3667efdfa", "filename": "src/test/ui/consts/const-eval/const_panic_libcore_bin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.rs?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -7,13 +7,13 @@\n use core::panic::PanicInfo;\n \n const Z: () = panic!(\"cheese\");\n-//~^ ERROR any use of this value will cause an error\n+//~^ ERROR evaluation of constant value failed\n \n const Y: () = unreachable!();\n-//~^ ERROR any use of this value will cause an error\n+//~^ ERROR evaluation of constant value failed\n \n const X: () = unimplemented!();\n-//~^ ERROR any use of this value will cause an error\n+//~^ ERROR evaluation of constant value failed\n \n #[lang = \"eh_personality\"]\n fn eh() {}"}, {"sha": "9abf8a20b8a35e769e56ae8f413cd512d7b34bb9", "filename": "src/test/ui/consts/const-eval/const_panic_libcore_bin.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.stderr?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -1,30 +1,24 @@\n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic_libcore_bin.rs:9:15\n    |\n LL | const Z: () = panic!(\"cheese\");\n-   | --------------^^^^^^^^^^^^^^^^-\n-   |               |\n-   |               the evaluated program panicked at 'cheese', $DIR/const_panic_libcore_bin.rs:9:15\n+   |               ^^^^^^^^^^^^^^^^ the evaluated program panicked at 'cheese', $DIR/const_panic_libcore_bin.rs:9:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic_libcore_bin.rs:12:15\n    |\n LL | const Y: () = unreachable!();\n-   | --------------^^^^^^^^^^^^^^-\n-   |               |\n-   |               the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_libcore_bin.rs:12:15\n+   |               ^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_libcore_bin.rs:12:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic_libcore_bin.rs:15:15\n    |\n LL | const X: () = unimplemented!();\n-   | --------------^^^^^^^^^^^^^^^^-\n-   |               |\n-   |               the evaluated program panicked at 'not implemented', $DIR/const_panic_libcore_bin.rs:15:15\n+   |               ^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic_libcore_bin.rs:15:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "78cf25308fff9e637dd3f8cd8d8470e36876a057", "filename": "src/test/ui/consts/const-eval/panic-assoc-never-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.rs?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -9,7 +9,7 @@ struct PrintName;\n \n impl PrintName {\n     const VOID: ! = panic!();\n-    //~^ ERROR any use of this value will cause an error\n+    //~^ ERROR evaluation of constant value failed\n }\n \n fn main() {"}, {"sha": "085609483098b73e8b3182828352331b76bc43ee", "filename": "src/test/ui/consts/const-eval/panic-assoc-never-type.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -1,10 +1,8 @@\n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/panic-assoc-never-type.rs:11:21\n    |\n LL |     const VOID: ! = panic!();\n-   |     ----------------^^^^^^^^-\n-   |                     |\n-   |                     the evaluated program panicked at 'explicit panic', $DIR/panic-assoc-never-type.rs:11:21\n+   |                     ^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/panic-assoc-never-type.rs:11:21\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "dd875768b168faa9ec9bad7c595a250670e32a87", "filename": "src/test/ui/consts/const-eval/panic-never-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.rs?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -4,7 +4,7 @@\n #![feature(never_type)]\n \n const VOID: ! = panic!();\n-//~^ ERROR any use of this value will cause an error\n+//~^ ERROR evaluation of constant value failed\n \n fn main() {\n     let _ = VOID;"}, {"sha": "9b7f2181c166258d6b00584cf497585a96e6a047", "filename": "src/test/ui/consts/const-eval/panic-never-type.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -1,10 +1,8 @@\n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/panic-never-type.rs:6:17\n    |\n LL | const VOID: ! = panic!();\n-   | ----------------^^^^^^^^-\n-   |                 |\n-   |                 the evaluated program panicked at 'explicit panic', $DIR/panic-never-type.rs:6:17\n+   |                 ^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/panic-never-type.rs:6:17\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "766a0c49be68afcf9fc85d3f2481faabf17bd2ce", "filename": "src/test/ui/consts/const-eval/unwind-abort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.rs?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -2,7 +2,7 @@\n \n #[unwind(aborts)]\n const fn foo() {\n-    panic!() //~ ERROR any use of this value will cause an error\n+    panic!() //~ ERROR evaluation of constant value failed\n }\n \n const _: () = foo();"}, {"sha": "e3b871ee529bef3a7f3d58cf68581a464e43c6be", "filename": "src/test/ui/consts/const-eval/unwind-abort.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -1,15 +1,14 @@\n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/unwind-abort.rs:5:5\n    |\n LL |     panic!()\n    |     ^^^^^^^^\n    |     |\n    |     the evaluated program panicked at 'explicit panic', $DIR/unwind-abort.rs:5:5\n    |     inside `foo` at $SRC_DIR/std/src/panic.rs:LL:COL\n-   |     inside `_` at $DIR/unwind-abort.rs:8:15\n ...\n LL | const _: () = foo();\n-   | --------------------\n+   |               ----- inside `_` at $DIR/unwind-abort.rs:8:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "9a820ff72171921063c9a2fca4d9273d7476a78c", "filename": "src/test/ui/consts/const-unwrap.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Fconsts%2Fconst-unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Fconsts%2Fconst-unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-unwrap.stderr?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -1,17 +1,16 @@\n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n    |\n LL |             None => panic!(\"called `Option::unwrap()` on a `None` value\"),\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                     |\n    |                     the evaluated program panicked at 'called `Option::unwrap()` on a `None` value', $DIR/const-unwrap.rs:9:38\n    |                     inside `Option::<i32>::unwrap` at $SRC_DIR/core/src/panic.rs:LL:COL\n-   |                     inside `BAR` at $DIR/const-unwrap.rs:9:18\n    | \n-  ::: $DIR/const-unwrap.rs:9:1\n+  ::: $DIR/const-unwrap.rs:9:18\n    |\n LL | const BAR: i32 = Option::<i32>::None.unwrap();\n-   | ----------------------------------------------\n+   |                  ---------------------------- inside `BAR` at $DIR/const-unwrap.rs:9:18\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "1deaa937edb37db94501895bc46db9da4c7cedbb", "filename": "src/test/ui/consts/control-flow/assert.const_panic.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.const_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.const_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.const_panic.stderr?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -1,10 +1,8 @@\n-error[E0080]: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/assert.rs:10:15\n    |\n LL | const _: () = assert!(false);\n-   | --------------^^^^^^^^^^^^^^-\n-   |               |\n-   |               the evaluated program panicked at 'assertion failed: false', $DIR/assert.rs:10:15\n+   |               ^^^^^^^^^^^^^^ the evaluated program panicked at 'assertion failed: false', $DIR/assert.rs:10:15\n    |\n    = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "b311cb140ccf69d03b45863c0fcd651b74ed3ccd", "filename": "src/test/ui/consts/control-flow/assert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.rs?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -9,6 +9,6 @@ const _: () = assert!(true);\n \n const _: () = assert!(false);\n //[stock]~^ ERROR panicking in constants is unstable\n-//[const_panic]~^^ ERROR any use of this value will cause an error\n+//[const_panic]~^^ ERROR evaluation of constant value failed\n \n fn main() {}"}, {"sha": "f68a665b2f38d949507c63253ba0c3a0fca81268", "filename": "src/test/ui/typeck/issue-74086.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Ftypeck%2Fissue-74086.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Ftypeck%2Fissue-74086.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-74086.rs?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "previous_filename": "src/test/ui/issues/issue-74086.rs"}, {"sha": "e602425059e1b893cbd25d921e4e9b9d5f2c0e1d", "filename": "src/test/ui/typeck/issue-74086.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Ftypeck%2Fissue-74086.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Ftypeck%2Fissue-74086.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-74086.stderr?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "previous_filename": "src/test/ui/issues/issue-74086.stderr"}, {"sha": "86c39d4a48c05cc037a834432b6fb2cf04973098", "filename": "src/test/ui/typeck/issue-81885.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Ftypeck%2Fissue-81885.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Ftypeck%2Fissue-81885.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-81885.rs?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "previous_filename": "src/test/ui/issues/issue-81885.rs"}, {"sha": "955b4283874421015017af2163978d0d4a4f5718", "filename": "src/test/ui/typeck/issue-81885.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Ftypeck%2Fissue-81885.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Ftypeck%2Fissue-81885.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-81885.stderr?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "previous_filename": "src/test/ui/issues/issue-81885.stderr"}, {"sha": "c27edc8485b9242b83621888261fb677c0afff45", "filename": "src/test/ui/typeck/type-placeholder-fn-in-const.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Ftypeck%2Ftype-placeholder-fn-in-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Ftypeck%2Ftype-placeholder-fn-in-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftype-placeholder-fn-in-const.rs?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -0,0 +1,14 @@\n+struct MyStruct;\n+\n+trait Test {\n+    const TEST: fn() -> _;\n+    //~^ ERROR: the type placeholder `_` is not allowed within types on item signatures [E0121]\n+    //~| ERROR: the type placeholder `_` is not allowed within types on item signatures [E0121]\n+}\n+\n+impl Test for MyStruct {\n+    const TEST: fn() -> _ = 42;\n+    //~^ ERROR: the type placeholder `_` is not allowed within types on item signatures [E0121]\n+}\n+\n+fn main() {}"}, {"sha": "662871779a10ee4d6aed3e54fed6df110fd79f96", "filename": "src/test/ui/typeck/type-placeholder-fn-in-const.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Ftypeck%2Ftype-placeholder-fn-in-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Ftypeck%2Ftype-placeholder-fn-in-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftype-placeholder-fn-in-const.stderr?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "patch": "@@ -0,0 +1,21 @@\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/type-placeholder-fn-in-const.rs:4:25\n+   |\n+LL |     const TEST: fn() -> _;\n+   |                         ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/type-placeholder-fn-in-const.rs:4:25\n+   |\n+LL |     const TEST: fn() -> _;\n+   |                         ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/type-placeholder-fn-in-const.rs:10:25\n+   |\n+LL |     const TEST: fn() -> _ = 42;\n+   |                         ^ not allowed in type signatures\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0121`."}, {"sha": "2530a1e966d0a8a59e3b1d4ade2acea6fa9dea3a", "filename": "src/test/ui/typeck/typeck-closure-to-unsafe-fn-ptr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-closure-to-unsafe-fn-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-closure-to-unsafe-fn-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-closure-to-unsafe-fn-ptr.rs?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "previous_filename": "src/test/ui/typeck-closure-to-unsafe-fn-ptr.rs"}, {"sha": "1e954f5690956bffc54a033888027c13e16c2704", "filename": "src/test/ui/typeck/typeck-fn-to-unsafe-fn-ptr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-fn-to-unsafe-fn-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-fn-to-unsafe-fn-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-fn-to-unsafe-fn-ptr.rs?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "previous_filename": "src/test/ui/typeck-fn-to-unsafe-fn-ptr.rs"}, {"sha": "ea7aa5285b09d52acc520b9c6c90ad4e3cae6e41", "filename": "src/test/ui/typeck/typeck_type_placeholder_1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_1.rs?ref=4d3ce2e7dac840d6ac7d658a5506eb31492fb3ef", "previous_filename": "src/test/ui/typeck_type_placeholder_1.rs"}]}