{"sha": "4781a6ba5431e00b3bb6a5c085e4811f3b4d988f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3ODFhNmJhNTQzMWUwMGIzYmI2YTVjMDg1ZTQ4MTFmM2I0ZDk4OGY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-07-05T11:23:58Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-07-05T11:23:58Z"}, "message": "add attribute to limit the stack size", "tree": {"sha": "0add5a326a75ff0e91bd0ff492ea69da7e270d8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0add5a326a75ff0e91bd0ff492ea69da7e270d8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4781a6ba5431e00b3bb6a5c085e4811f3b4d988f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXe5jOAAoJEFbW7qD8Z6xG1KQP/1gnaVAgnTXFmUiystTxC50U\n9bnFMRzOWwG+6a9bA8ZCfauBdQuAe4dirSuso6DLCCSRFk+JdAITu3cBiDRDNkSw\njXSh+fJkSLeYoY1BN6UdsyZPdaiKTUCVytb/XO6bXTyp92qrJ/qAZGn6ZGYJRxnf\nGV/6ibtq0ey9ZFCilLd2OYpoVWUSuxZGpXnDnvW0MzjoNZaWR2cTtC1pf5q7iEz4\nb3YzwUsEsjj3CKqHBe34+HeCqlmILlFzrVwDC3kmtL2Bp8OoCEQLEG1OcUx/et6J\n1W20F4qCESv7vtA1SZN0KxkyibeTPG6EksUgPoOyddpP4BoWs2XaN/BOD+5X9eWd\n8R63MSdQYmIDTzFwsxUS0/TUw/LMjF3nDy2so0N6FOAZ1/oGN/8fjHCZPXSHzdWX\nq2SxfT6xiJV4Ovf5onnXOXNWlBIt96DAPKTz4DnYVjFuQ01QhrW5HdjdSOsWlyQ2\nG+pMF+ns6+uRJ5B7cBgm6087nmQ8S4rOsX+twMWR2epjvxLQjlR5MFqkQGiWTG4W\ntZdqaasmzWIJ/bJG3mXJosbFFePk8hcsMIwO+3ymCpXIkUJ2X+v2imldyytoJ848\nWIImGnRghTPPkJnaXYIO3xyRj0Wel6GdI3UbEEZS87xLPLnYgNnMNjjoteD4dFkv\nbfNbI+gcDg1fMkCXs26S\n=mQmJ\n-----END PGP SIGNATURE-----", "payload": "tree 0add5a326a75ff0e91bd0ff492ea69da7e270d8c\nparent 88d98998e1cfdfce8ce7e02a020cc9d19f318bd7\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1467717838 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1467717838 +0200\n\nadd attribute to limit the stack size"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4781a6ba5431e00b3bb6a5c085e4811f3b4d988f", "html_url": "https://github.com/rust-lang/rust/commit/4781a6ba5431e00b3bb6a5c085e4811f3b4d988f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4781a6ba5431e00b3bb6a5c085e4811f3b4d988f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88d98998e1cfdfce8ce7e02a020cc9d19f318bd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/88d98998e1cfdfce8ce7e02a020cc9d19f318bd7", "html_url": "https://github.com/rust-lang/rust/commit/88d98998e1cfdfce8ce7e02a020cc9d19f318bd7"}], "stats": {"total": 43, "additions": 39, "deletions": 4}, "files": [{"sha": "e11ab5a86099da04534a5b006740c54efac6852d", "filename": "src/bin/miri.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4781a6ba5431e00b3bb6a5c085e4811f3b4d988f/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4781a6ba5431e00b3bb6a5c085e4811f3b4d988f/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=4781a6ba5431e00b3bb6a5c085e4811f3b4d988f", "patch": "@@ -40,6 +40,7 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n             let krate = state.hir_crate.as_ref().unwrap();\n             let mut memory_size = 100*1024*1024; // 100MB\n             let mut step_limit = 1000_000;\n+            let mut stack_limit = 100;\n             fn extract_str(lit: &syntax::ast::Lit) -> syntax::parse::token::InternedString {\n                 match lit.node {\n                     syntax::ast::LitKind::Str(ref s, _) => s.clone(),\n@@ -55,6 +56,7 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n                                 match &**name {\n                                     \"memory_size\" => memory_size = extract_str(value).parse::<u64>().expect(\"not a number\"),\n                                     \"step_limit\" => step_limit = extract_str(value).parse::<u64>().expect(\"not a number\"),\n+                                    \"stack_limit\" => stack_limit = extract_str(value).parse::<u64>().expect(\"not a number\"),\n                                     _ => state.session.span_err(item.span, \"unknown miri attribute\"),\n                                 }\n                             }\n@@ -67,7 +69,7 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n \n             let mut mir_map = MirMap { map: mir_map.map.clone() };\n             run_mir_passes(tcx, &mut mir_map);\n-            eval_main(tcx, &mir_map, node_id, memory_size, step_limit);\n+            eval_main(tcx, &mir_map, node_id, memory_size, step_limit, stack_limit);\n \n             state.session.abort_if_errors();\n         });"}, {"sha": "9952cfd9a7e83d7db089b43fbaa936593534e03a", "filename": "src/error.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4781a6ba5431e00b3bb6a5c085e4811f3b4d988f/src%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4781a6ba5431e00b3bb6a5c085e4811f3b4d988f/src%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferror.rs?ref=4781a6ba5431e00b3bb6a5c085e4811f3b4d988f", "patch": "@@ -35,6 +35,7 @@ pub enum EvalError<'tcx> {\n         memory_usage: u64,\n     },\n     ExecutionTimeLimitReached,\n+    StackFrameLimitReached,\n }\n \n pub type EvalResult<'tcx, T> = Result<T, EvalError<'tcx>>;\n@@ -79,6 +80,8 @@ impl<'tcx> Error for EvalError<'tcx> {\n                 \"could not allocate more memory\",\n             EvalError::ExecutionTimeLimitReached =>\n                 \"reached the configured maximum execution time\",\n+            EvalError::StackFrameLimitReached =>\n+                \"reached the configured maximum number of stack frames\",\n         }\n     }\n "}, {"sha": "34fa9d8de6fd541779a3e880d69e23488572d341", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4781a6ba5431e00b3bb6a5c085e4811f3b4d988f/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4781a6ba5431e00b3bb6a5c085e4811f3b4d988f/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=4781a6ba5431e00b3bb6a5c085e4811f3b4d988f", "patch": "@@ -42,6 +42,9 @@ pub struct EvalContext<'a, 'tcx: 'a> {\n \n     /// The virtual call stack.\n     stack: Vec<Frame<'a, 'tcx>>,\n+\n+    /// The maximum number of stack frames allowed\n+    stack_limit: usize,\n }\n \n /// A stack frame.\n@@ -133,14 +136,16 @@ enum ConstantKind {\n }\n \n impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n-    pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>, mir_map: &'a MirMap<'tcx>, memory_size: u64) -> Self {\n+    pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>, mir_map: &'a MirMap<'tcx>, memory_size: u64, stack_limit: u64) -> Self {\n+        assert_eq!(stack_limit as usize as u64, stack_limit);\n         EvalContext {\n             tcx: tcx,\n             mir_map: mir_map,\n             mir_cache: RefCell::new(DefIdMap()),\n             memory: Memory::new(&tcx.data_layout, memory_size),\n             statics: HashMap::new(),\n             stack: Vec::new(),\n+            stack_limit: stack_limit as usize,\n         }\n     }\n \n@@ -316,7 +321,11 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             substs: substs,\n             stmt: 0,\n         });\n-        Ok(())\n+        if self.stack.len() > self.stack_limit {\n+            Err(EvalError::StackFrameLimitReached)\n+        } else {\n+            Ok(())\n+        }\n     }\n \n     fn pop_stack_frame(&mut self) {\n@@ -930,10 +939,11 @@ pub fn eval_main<'a, 'tcx: 'a>(\n     node_id: ast::NodeId,\n     memory_size: u64,\n     step_limit: u64,\n+    stack_limit: u64,\n ) {\n     let mir = mir_map.map.get(&node_id).expect(\"no mir for main function\");\n     let def_id = tcx.map.local_def_id(node_id);\n-    let mut ecx = EvalContext::new(tcx, mir_map, memory_size);\n+    let mut ecx = EvalContext::new(tcx, mir_map, memory_size, stack_limit);\n     let substs = tcx.mk_substs(subst::Substs::empty());\n     let return_ptr = ecx.alloc_ret_ptr(mir.return_ty, substs)\n                         .expect(\"should at least be able to allocate space for the main function's return value\")"}, {"sha": "3b6d4186dc9055c6818e53ed33f23b94a7e2ca78", "filename": "tests/compile-fail/stack_limit.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4781a6ba5431e00b3bb6a5c085e4811f3b4d988f/tests%2Fcompile-fail%2Fstack_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4781a6ba5431e00b3bb6a5c085e4811f3b4d988f/tests%2Fcompile-fail%2Fstack_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstack_limit.rs?ref=4781a6ba5431e00b3bb6a5c085e4811f3b4d988f", "patch": "@@ -0,0 +1,20 @@\n+#![feature(custom_attribute)]\n+#![miri(stack_limit=\"2\")]\n+\n+fn bar() {\n+    foo();\n+}\n+\n+fn foo() {\n+    cake(); //~ ERROR reached the configured maximum number of stack frames\n+}\n+\n+fn cake() {\n+    flubber();\n+}\n+\n+fn flubber() {}\n+\n+fn main() {\n+    bar();\n+}"}]}