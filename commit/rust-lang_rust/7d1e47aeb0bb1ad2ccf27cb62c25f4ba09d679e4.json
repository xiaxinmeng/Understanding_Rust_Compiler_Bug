{"sha": "7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4", "node_id": "C_kwDOAAsO6NoAKDdkMWU0N2FlYjBiYjFhZDJjY2YyN2NiNjJjMjVmNGJhMDlkNjc5ZTQ", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-11T02:40:04Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-13T18:39:44Z"}, "message": "Suggest `: Type` instead of `: _`", "tree": {"sha": "9c34c96d5df32f7dd18a68abd35c49d690ee33d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c34c96d5df32f7dd18a68abd35c49d690ee33d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4", "html_url": "https://github.com/rust-lang/rust/commit/7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e25bcb02093bad56beb1dff6be7dd0d80115fb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e25bcb02093bad56beb1dff6be7dd0d80115fb1", "html_url": "https://github.com/rust-lang/rust/commit/3e25bcb02093bad56beb1dff6be7dd0d80115fb1"}], "stats": {"total": 154, "additions": 79, "deletions": 75}, "files": [{"sha": "fbef2da7cb98ab2c99a26ed75e8e0b883d76a6cc", "filename": "compiler/rustc_error_messages/locales/en-US/infer.ftl", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl?ref=7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4", "patch": "@@ -34,6 +34,7 @@ infer_source_kind_subdiag_let = {$kind ->\n         [const] the value of the constant\n     } `{$arg_name}` is specified\n     [underscore] , where the placeholders `_` are specified\n+    [anon] , where the placeholder `Type` is specified\n     *[empty] {\"\"}\n }\n "}, {"sha": "38655492244b387ea2f3c8a23068a34d2f7ad6ca", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4", "patch": "@@ -77,13 +77,15 @@ impl InferenceDiagnosticsData {\n         !(self.name == \"_\" && matches!(self.kind, UnderspecifiedArgKind::Type { .. }))\n     }\n \n-    fn where_x_is_kind(&self, in_type: Ty<'_>) -> &'static str {\n-        if self.name == \"_\" {\n+    fn where_x_is_kind(&self, in_type: Ty<'_>, is_collect: bool) -> &'static str {\n+        if is_collect {\n+            \"empty\"\n+        } else if in_type.is_ty_infer() {\n+            \"anon\"\n+        } else if self.name == \"_\" {\n             // FIXME: Consider specializing this message if there is a single `_`\n             // in the type.\n             \"underscore\"\n-        } else if in_type.is_ty_infer() {\n-            \"empty\"\n         } else {\n             \"has_name\"\n         }\n@@ -190,6 +192,7 @@ fn ty_to_string<'tcx>(infcx: &InferCtxt<'tcx>, ty: Ty<'tcx>) -> String {\n         // We don't want the regular output for `fn`s because it includes its path in\n         // invalid pseudo-syntax, we want the `fn`-pointer output instead.\n         ty::FnDef(..) => ty.fn_sig(infcx.tcx).print(printer).unwrap().into_buffer(),\n+        _ if ty.is_ty_infer() => \"Type\".to_string(),\n         // FIXME: The same thing for closures, but this only works when the closure\n         // does not capture anything.\n         //\n@@ -411,7 +414,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 infer_subdiags.push(SourceKindSubdiag::LetLike {\n                     span: insert_span,\n                     name: pattern_name.map(|name| name.to_string()).unwrap_or_else(String::new),\n-                    x_kind: if is_collect { \"empty\" } else { arg_data.where_x_is_kind(ty) },\n+                    x_kind: arg_data.where_x_is_kind(ty, is_collect),\n                     prefix_kind: arg_data.kind.clone(),\n                     prefix: arg_data.kind.try_get_prefix().unwrap_or_default(),\n                     arg_name: arg_data.name,\n@@ -427,7 +430,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 infer_subdiags.push(SourceKindSubdiag::LetLike {\n                     span: insert_span,\n                     name: String::new(),\n-                    x_kind: arg_data.where_x_is_kind(ty),\n+                    x_kind: arg_data.where_x_is_kind(ty, false),\n                     prefix_kind: arg_data.kind.clone(),\n                     prefix: arg_data.kind.try_get_prefix().unwrap_or_default(),\n                     arg_name: arg_data.name,"}, {"sha": "11a07164e8c6ff682a3fa7c6432d6f32de94df36", "filename": "src/test/ui/array-slice-vec/infer_array_len.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4/src%2Ftest%2Fui%2Farray-slice-vec%2Finfer_array_len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4/src%2Ftest%2Fui%2Farray-slice-vec%2Finfer_array_len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Finfer_array_len.stderr?ref=7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4", "patch": "@@ -4,10 +4,10 @@ error[E0282]: type annotations needed\n LL |     let [_, _] = a.into();\n    |         ^^^^^^\n    |\n-help: consider giving this pattern a type, where the placeholders `_` are specified\n+help: consider giving this pattern a type, where the placeholder `Type` is specified\n    |\n-LL |     let [_, _]: _ = a.into();\n-   |               +++\n+LL |     let [_, _]: Type = a.into();\n+   |               ++++++\n \n error: aborting due to previous error\n "}, {"sha": "9e5705ba00b820cc93d6edf98780718b3ac7edb1", "filename": "src/test/ui/closure-expected-type/expect-two-infer-vars-supply-ty-with-bound-region.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-two-infer-vars-supply-ty-with-bound-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-two-infer-vars-supply-ty-with-bound-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-two-infer-vars-supply-ty-with-bound-region.stderr?ref=7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4", "patch": "@@ -4,10 +4,10 @@ error[E0282]: type annotations needed\n LL |     with_closure(|x: u32, y| {});\n    |                           ^\n    |\n-help: consider giving this closure parameter an explicit type\n+help: consider giving this closure parameter an explicit type, where the placeholder `Type` is specified\n    |\n-LL |     with_closure(|x: u32, y: _| {});\n-   |                            +++\n+LL |     with_closure(|x: u32, y: Type| {});\n+   |                            ++++++\n \n error: aborting due to previous error\n "}, {"sha": "c635e7432932f6b30a1b9fd3eef5a64fd48d5cfd", "filename": "src/test/ui/closures/issue-52437.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.stderr?ref=7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4", "patch": "@@ -10,10 +10,10 @@ error[E0282]: type annotations needed\n LL |     [(); &(&'static: loop { |x| {}; }) as *const _ as usize]\n    |                              ^\n    |\n-help: consider giving this closure parameter an explicit type, where the placeholders `_` are specified\n+help: consider giving this closure parameter an explicit type, where the placeholder `Type` is specified\n    |\n-LL |     [(); &(&'static: loop { |x: _| {}; }) as *const _ as usize]\n-   |                               +++\n+LL |     [(); &(&'static: loop { |x: Type| {}; }) as *const _ as usize]\n+   |                               ++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f148cb7699efa22f4c18b3009584a9224dc7273f", "filename": "src/test/ui/const-generics/issues/issue-83249.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83249.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83249.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83249.stderr?ref=7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4", "patch": "@@ -4,10 +4,10 @@ error[E0282]: type annotations needed\n LL |     let _ = foo([0; 1]);\n    |         ^\n    |\n-help: consider giving this pattern a type\n+help: consider giving this pattern a type, where the placeholder `Type` is specified\n    |\n-LL |     let _: _ = foo([0; 1]);\n-   |          +++\n+LL |     let _: Type = foo([0; 1]);\n+   |          ++++++\n \n error: aborting due to previous error\n "}, {"sha": "30bad841d1506173b59bdd377fc5b2a738cbfb76", "filename": "src/test/ui/impl-trait/issues/issue-86719.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86719.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86719.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86719.stderr?ref=7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4", "patch": "@@ -18,10 +18,10 @@ error[E0282]: type annotations needed\n LL |         |_| true\n    |          ^\n    |\n-help: consider giving this closure parameter an explicit type, where the placeholders `_` are specified\n+help: consider giving this closure parameter an explicit type, where the placeholder `Type` is specified\n    |\n-LL |         |_: _| true\n-   |           +++\n+LL |         |_: Type| true\n+   |           ++++++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "37daeb6441f2b8a71ccf2cc5690b8b684e676406", "filename": "src/test/ui/inference/issue-72690.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4/src%2Ftest%2Fui%2Finference%2Fissue-72690.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4/src%2Ftest%2Fui%2Finference%2Fissue-72690.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-72690.stderr?ref=7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4", "patch": "@@ -30,10 +30,10 @@ error[E0282]: type annotations needed\n LL |     |x| String::from(\"x\".as_ref());\n    |      ^\n    |\n-help: consider giving this closure parameter an explicit type, where the placeholders `_` are specified\n+help: consider giving this closure parameter an explicit type, where the placeholder `Type` is specified\n    |\n-LL |     |x: _| String::from(\"x\".as_ref());\n-   |       +++\n+LL |     |x: Type| String::from(\"x\".as_ref());\n+   |       ++++++\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:12:26"}, {"sha": "1cfb0e4150442ed89ce351e44bc86961dec4d805", "filename": "src/test/ui/issues/issue-18159.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4/src%2Ftest%2Fui%2Fissues%2Fissue-18159.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4/src%2Ftest%2Fui%2Fissues%2Fissue-18159.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18159.stderr?ref=7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4", "patch": "@@ -4,10 +4,10 @@ error[E0282]: type annotations needed\n LL |     let x;\n    |         ^\n    |\n-help: consider giving `x` an explicit type, where the placeholders `_` are specified\n+help: consider giving `x` an explicit type, where the placeholder `Type` is specified\n    |\n-LL |     let x: _;\n-   |          +++\n+LL |     let x: Type;\n+   |          ++++++\n \n error: aborting due to previous error\n "}, {"sha": "f689afd4ea726bf0d6cbdf92694f2b47f7270432", "filename": "src/test/ui/issues/issue-2151.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4/src%2Ftest%2Fui%2Fissues%2Fissue-2151.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4/src%2Ftest%2Fui%2Fissues%2Fissue-2151.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2151.stderr?ref=7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4", "patch": "@@ -6,10 +6,10 @@ LL |     let x = panic!();\n LL |     x.clone();\n    |     - type must be known at this point\n    |\n-help: consider giving `x` an explicit type, where the placeholders `_` are specified\n+help: consider giving `x` an explicit type, where the placeholder `Type` is specified\n    |\n-LL |     let x: _ = panic!();\n-   |          +++\n+LL |     let x: Type = panic!();\n+   |          ++++++\n \n error: aborting due to previous error\n "}, {"sha": "2413db2cadab541693344b9bb76925af924345e6", "filename": "src/test/ui/issues/issue-24036.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4/src%2Ftest%2Fui%2Fissues%2Fissue-24036.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4/src%2Ftest%2Fui%2Fissues%2Fissue-24036.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24036.stderr?ref=7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4", "patch": "@@ -17,10 +17,10 @@ error[E0282]: type annotations needed\n LL |         1 => |c| c + 1,\n    |               ^\n    |\n-help: consider giving this closure parameter an explicit type, where the placeholders `_` are specified\n+help: consider giving this closure parameter an explicit type, where the placeholder `Type` is specified\n    |\n-LL |         1 => |c: _| c + 1,\n-   |                +++\n+LL |         1 => |c: Type| c + 1,\n+   |                ++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d14cad4d71c78fc4a52601501c2b0fceb973e87b", "filename": "src/test/ui/lazy-type-alias-impl-trait/branches3.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches3.stderr?ref=7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4", "patch": "@@ -4,43 +4,43 @@ error[E0282]: type annotations needed\n LL |         |s| s.len()\n    |          ^  - type must be known at this point\n    |\n-help: consider giving this closure parameter an explicit type, where the placeholders `_` are specified\n+help: consider giving this closure parameter an explicit type, where the placeholder `Type` is specified\n    |\n-LL |         |s: _| s.len()\n-   |           +++\n+LL |         |s: Type| s.len()\n+   |           ++++++\n \n error[E0282]: type annotations needed\n   --> $DIR/branches3.rs:15:10\n    |\n LL |         |s| s.len()\n    |          ^  - type must be known at this point\n    |\n-help: consider giving this closure parameter an explicit type, where the placeholders `_` are specified\n+help: consider giving this closure parameter an explicit type, where the placeholder `Type` is specified\n    |\n-LL |         |s: _| s.len()\n-   |           +++\n+LL |         |s: Type| s.len()\n+   |           ++++++\n \n error[E0282]: type annotations needed\n   --> $DIR/branches3.rs:23:10\n    |\n LL |         |s| s.len()\n    |          ^  - type must be known at this point\n    |\n-help: consider giving this closure parameter an explicit type, where the placeholders `_` are specified\n+help: consider giving this closure parameter an explicit type, where the placeholder `Type` is specified\n    |\n-LL |         |s: _| s.len()\n-   |           +++\n+LL |         |s: Type| s.len()\n+   |           ++++++\n \n error[E0282]: type annotations needed\n   --> $DIR/branches3.rs:30:10\n    |\n LL |         |s| s.len()\n    |          ^  - type must be known at this point\n    |\n-help: consider giving this closure parameter an explicit type, where the placeholders `_` are specified\n+help: consider giving this closure parameter an explicit type, where the placeholder `Type` is specified\n    |\n-LL |         |s: _| s.len()\n-   |           +++\n+LL |         |s: Type| s.len()\n+   |           ++++++\n \n error: aborting due to 4 previous errors\n "}, {"sha": "0ebd56cb06421381e2783449364b5239a5ac334a", "filename": "src/test/ui/match/match-unresolved-one-arm.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4/src%2Ftest%2Fui%2Fmatch%2Fmatch-unresolved-one-arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4/src%2Ftest%2Fui%2Fmatch%2Fmatch-unresolved-one-arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-unresolved-one-arm.stderr?ref=7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4", "patch": "@@ -4,10 +4,10 @@ error[E0282]: type annotations needed\n LL |     let x = match () {\n    |         ^\n    |\n-help: consider giving `x` an explicit type, where the placeholders `_` are specified\n+help: consider giving `x` an explicit type, where the placeholder `Type` is specified\n    |\n-LL |     let x: _ = match () {\n-   |          +++\n+LL |     let x: Type = match () {\n+   |          ++++++\n \n error: aborting due to previous error\n "}, {"sha": "ff45e9fb7a32b813640b39312e834f2b9f1ddafd", "filename": "src/test/ui/pattern/pat-tuple-bad-type.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-bad-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-bad-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-bad-type.stderr?ref=7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4", "patch": "@@ -7,10 +7,10 @@ LL |     let x;\n LL |         (..) => {}\n    |         ---- type must be known at this point\n    |\n-help: consider giving `x` an explicit type, where the placeholders `_` are specified\n+help: consider giving `x` an explicit type, where the placeholder `Type` is specified\n    |\n-LL |     let x: _;\n-   |          +++\n+LL |     let x: Type;\n+   |          ++++++\n \n error[E0308]: mismatched types\n   --> $DIR/pat-tuple-bad-type.rs:10:9"}, {"sha": "df0aa942fed45ed09fd134b8695d0c702e1229ef", "filename": "src/test/ui/pattern/rest-pat-semantic-disallowed.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4/src%2Ftest%2Fui%2Fpattern%2Frest-pat-semantic-disallowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4/src%2Ftest%2Fui%2Fpattern%2Frest-pat-semantic-disallowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Frest-pat-semantic-disallowed.stderr?ref=7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4", "patch": "@@ -191,10 +191,10 @@ error[E0282]: type annotations needed\n LL |     let x @ ..;\n    |         ^^^^^^\n    |\n-help: consider giving this pattern a type, where the placeholders `_` are specified\n+help: consider giving this pattern a type, where the placeholder `Type` is specified\n    |\n-LL |     let x @ ..: _;\n-   |               +++\n+LL |     let x @ ..: Type;\n+   |               ++++++\n \n error: aborting due to 23 previous errors\n "}, {"sha": "2cbc109055f08c5dc632cdc9451e8ec7b41fa241", "filename": "src/test/ui/resolve/issue-85348.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4/src%2Ftest%2Fui%2Fresolve%2Fissue-85348.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4/src%2Ftest%2Fui%2Fresolve%2Fissue-85348.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-85348.stderr?ref=7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4", "patch": "@@ -19,10 +19,10 @@ error[E0282]: type annotations needed\n LL |         let mut N;\n    |             ^^^^^\n    |\n-help: consider giving `N` an explicit type, where the placeholders `_` are specified\n+help: consider giving `N` an explicit type, where the placeholder `Type` is specified\n    |\n-LL |         let mut N: _;\n-   |                  +++\n+LL |         let mut N: Type;\n+   |                  ++++++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "554a2580c9457a5982221cecd9d6d9b607a48f9c", "filename": "src/test/ui/span/method-and-field-eager-resolution.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4/src%2Ftest%2Fui%2Fspan%2Fmethod-and-field-eager-resolution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4/src%2Ftest%2Fui%2Fspan%2Fmethod-and-field-eager-resolution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmethod-and-field-eager-resolution.stderr?ref=7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4", "patch": "@@ -7,10 +7,10 @@ LL |\n LL |     x.0;\n    |     - type must be known at this point\n    |\n-help: consider giving `x` an explicit type, where the placeholders `_` are specified\n+help: consider giving `x` an explicit type, where the placeholder `Type` is specified\n    |\n-LL |     let mut x: _ = Default::default();\n-   |              +++\n+LL |     let mut x: Type = Default::default();\n+   |              ++++++\n \n error[E0282]: type annotations needed\n   --> $DIR/method-and-field-eager-resolution.rs:11:9\n@@ -21,10 +21,10 @@ LL |\n LL |     x[0];\n    |     - type must be known at this point\n    |\n-help: consider giving `x` an explicit type, where the placeholders `_` are specified\n+help: consider giving `x` an explicit type, where the placeholder `Type` is specified\n    |\n-LL |     let mut x: _ = Default::default();\n-   |              +++\n+LL |     let mut x: Type = Default::default();\n+   |              ++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0d7341bfb91094ed24a90695e8f126fc612a5075", "filename": "src/test/ui/type-alias-impl-trait/closures_in_branches.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosures_in_branches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosures_in_branches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosures_in_branches.stderr?ref=7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4", "patch": "@@ -4,21 +4,21 @@ error[E0282]: type annotations needed\n LL |         |x| x.len()\n    |          ^  - type must be known at this point\n    |\n-help: consider giving this closure parameter an explicit type, where the placeholders `_` are specified\n+help: consider giving this closure parameter an explicit type, where the placeholder `Type` is specified\n    |\n-LL |         |x: _| x.len()\n-   |           +++\n+LL |         |x: Type| x.len()\n+   |           ++++++\n \n error[E0282]: type annotations needed\n   --> $DIR/closures_in_branches.rs:21:10\n    |\n LL |         |x| x.len()\n    |          ^  - type must be known at this point\n    |\n-help: consider giving this closure parameter an explicit type, where the placeholders `_` are specified\n+help: consider giving this closure parameter an explicit type, where the placeholder `Type` is specified\n    |\n-LL |         |x: _| x.len()\n-   |           +++\n+LL |         |x: Type| x.len()\n+   |           ++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "01e053ccd5130fd7698cee9883a0045ec2b8069b", "filename": "src/test/ui/type/type-check/unknown_type_for_closure.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Funknown_type_for_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Funknown_type_for_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Funknown_type_for_closure.stderr?ref=7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4", "patch": "@@ -10,10 +10,10 @@ error[E0282]: type annotations needed\n LL |     let x = |_| {};\n    |              ^\n    |\n-help: consider giving this closure parameter an explicit type, where the placeholders `_` are specified\n+help: consider giving this closure parameter an explicit type, where the placeholder `Type` is specified\n    |\n-LL |     let x = |_: _| {};\n-   |               +++\n+LL |     let x = |_: Type| {};\n+   |               ++++++\n \n error[E0282]: type annotations needed\n   --> $DIR/unknown_type_for_closure.rs:10:14"}, {"sha": "51077dedbbe5b6c14ca3c8628bf54135249ab753", "filename": "src/test/ui/type/type-path-err-node-types.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4/src%2Ftest%2Fui%2Ftype%2Ftype-path-err-node-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4/src%2Ftest%2Fui%2Ftype%2Ftype-path-err-node-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-path-err-node-types.stderr?ref=7d1e47aeb0bb1ad2ccf27cb62c25f4ba09d679e4", "patch": "@@ -28,10 +28,10 @@ error[E0282]: type annotations needed\n LL |     let _ = |a, b: _| -> _ { 0 };\n    |              ^\n    |\n-help: consider giving this closure parameter an explicit type, where the placeholders `_` are specified\n+help: consider giving this closure parameter an explicit type, where the placeholder `Type` is specified\n    |\n-LL |     let _ = |a: _, b: _| -> _ { 0 };\n-   |               +++\n+LL |     let _ = |a: Type, b: _| -> _ { 0 };\n+   |               ++++++\n \n error: aborting due to 5 previous errors\n "}]}