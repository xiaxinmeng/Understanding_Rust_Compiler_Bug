{"sha": "9f8b099846f3bb5cd5f17698b6e653e0271f057e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmOGIwOTk4NDZmM2JiNWNkNWYxNzY5OGI2ZTY1M2UwMjcxZjA1N2U=", "commit": {"author": {"name": "Saleem Jaffer", "email": "ssaleem1992@gmail.com", "date": "2019-07-29T14:47:52Z"}, "committer": {"name": "Saleem Jaffer", "email": "ssaleem1992@gmail.com", "date": "2019-07-29T14:47:52Z"}, "message": "code review fixes", "tree": {"sha": "afad385000aeab7210eae72fd6ba84d00b86bb41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afad385000aeab7210eae72fd6ba84d00b86bb41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f8b099846f3bb5cd5f17698b6e653e0271f057e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f8b099846f3bb5cd5f17698b6e653e0271f057e", "html_url": "https://github.com/rust-lang/rust/commit/9f8b099846f3bb5cd5f17698b6e653e0271f057e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f8b099846f3bb5cd5f17698b6e653e0271f057e/comments", "author": {"login": "saleemjaffer", "id": 19221716, "node_id": "MDQ6VXNlcjE5MjIxNzE2", "avatar_url": "https://avatars.githubusercontent.com/u/19221716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saleemjaffer", "html_url": "https://github.com/saleemjaffer", "followers_url": "https://api.github.com/users/saleemjaffer/followers", "following_url": "https://api.github.com/users/saleemjaffer/following{/other_user}", "gists_url": "https://api.github.com/users/saleemjaffer/gists{/gist_id}", "starred_url": "https://api.github.com/users/saleemjaffer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saleemjaffer/subscriptions", "organizations_url": "https://api.github.com/users/saleemjaffer/orgs", "repos_url": "https://api.github.com/users/saleemjaffer/repos", "events_url": "https://api.github.com/users/saleemjaffer/events{/privacy}", "received_events_url": "https://api.github.com/users/saleemjaffer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saleemjaffer", "id": 19221716, "node_id": "MDQ6VXNlcjE5MjIxNzE2", "avatar_url": "https://avatars.githubusercontent.com/u/19221716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saleemjaffer", "html_url": "https://github.com/saleemjaffer", "followers_url": "https://api.github.com/users/saleemjaffer/followers", "following_url": "https://api.github.com/users/saleemjaffer/following{/other_user}", "gists_url": "https://api.github.com/users/saleemjaffer/gists{/gist_id}", "starred_url": "https://api.github.com/users/saleemjaffer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saleemjaffer/subscriptions", "organizations_url": "https://api.github.com/users/saleemjaffer/orgs", "repos_url": "https://api.github.com/users/saleemjaffer/repos", "events_url": "https://api.github.com/users/saleemjaffer/events{/privacy}", "received_events_url": "https://api.github.com/users/saleemjaffer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03d47be8f0149bfd2ccf2f406af74920f72f0c52", "url": "https://api.github.com/repos/rust-lang/rust/commits/03d47be8f0149bfd2ccf2f406af74920f72f0c52", "html_url": "https://github.com/rust-lang/rust/commit/03d47be8f0149bfd2ccf2f406af74920f72f0c52"}], "stats": {"total": 105, "additions": 57, "deletions": 48}, "files": [{"sha": "36635e62c15e1b93090d13807e0df9c636a78e59", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9f8b099846f3bb5cd5f17698b6e653e0271f057e/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8b099846f3bb5cd5f17698b6e653e0271f057e/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=9f8b099846f3bb5cd5f17698b6e653e0271f057e", "patch": "@@ -314,12 +314,12 @@ impl<O: fmt::Debug> fmt::Debug for PanicInfo<O> {\n \n #[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n pub enum InvalidProgramInfo<'tcx> {\n-    /// Resolution can fail if we are in a too generic context\n+    /// Resolution can fail if we are in a too generic context.\n     TooGeneric,\n     /// Cannot compute this constant because it depends on another one\n-    /// which already produced an error\n+    /// which already produced an error.\n     ReferencedConstant,\n-    /// Abort in case type errors are reached\n+    /// Abort in case type errors are reached.\n     TypeckError,\n     /// An error occurred during layout computation.\n     Layout(layout::LayoutError<'tcx>),\n@@ -362,7 +362,7 @@ impl fmt::Debug for UndefinedBehaviourInfo {\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n-pub enum UnsupportedInfo<'tcx> {\n+pub enum UnsupportedOpInfo<'tcx> {\n     /// Handle cases which for which we do not have a fixed variant.\n     Unimplemented(String),\n \n@@ -426,9 +426,9 @@ pub enum UnsupportedInfo<'tcx> {\n     PathNotFound(Vec<String>),\n }\n \n-impl fmt::Debug for UnsupportedInfo<'tcx> {\n+impl fmt::Debug for UnsupportedOpInfo<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        use UnsupportedInfo::*;\n+        use UnsupportedOpInfo::*;\n         match self {\n             PointerOutOfBounds { ptr, msg, allocation_size } => {\n                 write!(f, \"{} failed: pointer must be in-bounds at offset {}, \\\n@@ -574,7 +574,7 @@ pub enum InterpError<'tcx> {\n     UndefinedBehaviour(UndefinedBehaviourInfo),\n     /// The program did something the interpreter does not support (some of these *might* be UB\n     /// but the interpreter is not sure).\n-    Unsupported(UnsupportedInfo<'tcx>),\n+    Unsupported(UnsupportedOpInfo<'tcx>),\n     /// The program was invalid (ill-typed, not sufficiently monomorphized, ...).\n     InvalidProgram(InvalidProgramInfo<'tcx>),\n     /// The program exhausted the interpreter's resources (stack/heap too big,"}, {"sha": "e4bf8efad72eb9479bb27800bee486e929f69c6c", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f8b099846f3bb5cd5f17698b6e653e0271f057e/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8b099846f3bb5cd5f17698b6e653e0271f057e/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=9f8b099846f3bb5cd5f17698b6e653e0271f057e", "patch": "@@ -4,7 +4,7 @@\n macro_rules! err {\n     ($($tt:tt)*) => {\n         Err($crate::mir::interpret::InterpError::Unsupported(\n-            $crate::mir::interpret::UnsupportedInfo::$($tt)*\n+            $crate::mir::interpret::UnsupportedOpInfo::$($tt)*\n         ).into())\n     };\n }\n@@ -52,7 +52,7 @@ mod pointer;\n \n pub use self::error::{\n     InterpErrorInfo, InterpResult, InterpError, AssertMessage, ConstEvalErr, struct_error,\n-    FrameInfo, ConstEvalRawResult, ConstEvalResult, ErrorHandled, PanicInfo, UnsupportedInfo,\n+    FrameInfo, ConstEvalRawResult, ConstEvalResult, ErrorHandled, PanicInfo, UnsupportedOpInfo,\n     InvalidProgramInfo, ResourceExhaustionInfo, UndefinedBehaviourInfo,\n };\n "}, {"sha": "fbc726deb3dc355d8c1fb23eef3f5aa5afe75099", "filename": "src/librustc/mir/interpret/pointer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f8b099846f3bb5cd5f17698b6e653e0271f057e/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8b099846f3bb5cd5f17698b6e653e0271f057e/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs?ref=9f8b099846f3bb5cd5f17698b6e653e0271f057e", "patch": "@@ -196,7 +196,7 @@ impl<'tcx, Tag> Pointer<Tag> {\n         msg: CheckInAllocMsg,\n     ) -> InterpResult<'tcx, ()> {\n         if self.offset > allocation_size {\n-            err!(PointerOutOfBounds { ptr: self.erase_tag(),msg,allocation_size })\n+            err!(PointerOutOfBounds { ptr: self.erase_tag(), msg, allocation_size })\n         } else {\n             Ok(())\n         }"}, {"sha": "e059d766a6f5be7d86f7b34e72e5452a1c5a8721", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f8b099846f3bb5cd5f17698b6e653e0271f057e/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8b099846f3bb5cd5f17698b6e653e0271f057e/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=9f8b099846f3bb5cd5f17698b6e653e0271f057e", "patch": "@@ -24,8 +24,7 @@ use crate::interpret::{self,\n     RawConst, ConstValue,\n     InterpResult, InterpErrorInfo, InterpError, GlobalId, InterpCx, StackPopCleanup,\n     Allocation, AllocId, MemoryKind,\n-    snapshot, RefTracking, intern_const_alloc_recursive, UnsupportedInfo::*,\n-    InvalidProgramInfo::*,\n+    snapshot, RefTracking, intern_const_alloc_recursive, UnsupportedOpInfo,\n };\n \n /// Number of steps until the detector even starts doing anything.\n@@ -184,7 +183,7 @@ fn eval_body_using_ecx<'mir, 'tcx>(\n \n impl<'tcx> Into<InterpErrorInfo<'tcx>> for ConstEvalError {\n     fn into(self) -> InterpErrorInfo<'tcx> {\n-        InterpError::Unsupported(MachineError(self.to_string())).into()\n+        InterpError::Unsupported(UnsupportedOpInfo::MachineError(self.to_string())).into()\n     }\n }\n \n@@ -361,7 +360,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n         Ok(Some(match ecx.load_mir(instance.def) {\n             Ok(body) => body,\n             Err(err) => {\n-                if let InterpError::Unsupported(NoMirFor(ref path)) = err.kind {\n+                if let InterpError::Unsupported(UnsupportedOpInfo::NoMirFor(ref path)) = err.kind {\n                     return Err(\n                         ConstEvalError::NeedsRfc(format!(\"calling extern function `{}`\", path))\n                             .into(),\n@@ -698,6 +697,7 @@ pub fn const_eval_raw_provider<'tcx>(\n                 // promoting runtime code is only allowed to error if it references broken constants\n                 // any other kind of error will be reported to the user as a deny-by-default lint\n                 _ => if let Some(p) = cid.promoted {\n+                    use crate::interpret::InvalidProgramInfo::*;\n                     let span = tcx.promoted_mir(def_id)[p].span;\n                     if let InterpError::InvalidProgram(ReferencedConstant) = err.error {\n                         err.report_as_error("}, {"sha": "c7a56c29b4b54159264998b2b0786252b529192c", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f8b099846f3bb5cd5f17698b6e653e0271f057e/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8b099846f3bb5cd5f17698b6e653e0271f057e/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=9f8b099846f3bb5cd5f17698b6e653e0271f057e", "patch": "@@ -9,8 +9,7 @@ use rustc_apfloat::{Float, FloatConvert};\n use rustc::mir::interpret::{\n     Scalar, InterpResult, Pointer, PointerArithmetic, InterpError,\n };\n-use rustc::mir::{CastKind, interpret::{InvalidProgramInfo::*}};\n-\n+use rustc::mir::CastKind;\n \n use super::{InterpCx, Machine, PlaceTy, OpTy, Immediate, FnVal};\n \n@@ -75,6 +74,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n \n             Pointer(PointerCast::ReifyFnPointer) => {\n+                use rustc::mir::interpret::InvalidProgramInfo::TooGeneric;\n                 // The src operand does not matter, just its type\n                 match src.layout.ty.sty {\n                     ty::FnDef(def_id, substs) => {"}, {"sha": "76de3b32fc7feb2de11fee0360da4c4771e579d9", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9f8b099846f3bb5cd5f17698b6e653e0271f057e/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8b099846f3bb5cd5f17698b6e653e0271f057e/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=9f8b099846f3bb5cd5f17698b6e653e0271f057e", "patch": "@@ -17,7 +17,7 @@ use rustc::mir::interpret::{\n     ErrorHandled,\n     GlobalId, Scalar, Pointer, FrameInfo, AllocId,\n     InterpResult, InterpError,\n-    truncate, sign_extend, InvalidProgramInfo::*,\n+    truncate, sign_extend, InvalidProgramInfo,\n };\n use rustc_data_structures::fx::FxHashMap;\n \n@@ -190,8 +190,11 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> LayoutOf for InterpCx<'mir, 'tcx, M> {\n \n     #[inline]\n     fn layout_of(&self, ty: Ty<'tcx>) -> Self::TyLayout {\n-        self.tcx.layout_of(self.param_env.and(ty))\n-            .map_err(|layout| InterpError::InvalidProgram(Layout(layout)).into())\n+        self.tcx\n+            .layout_of(self.param_env.and(ty))\n+            .map_err(|layout| {\n+                InterpError::InvalidProgram(InvalidProgramInfo::Layout(layout)).into()\n+            })\n     }\n }\n \n@@ -302,7 +305,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 &substs,\n             )),\n             None => if substs.needs_subst() {\n-                err_inval!(TooGeneric).into()\n+                err_inval!(TooGeneric)\n             } else {\n                 Ok(substs)\n             },\n@@ -323,7 +326,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             self.param_env,\n             def_id,\n             substs,\n-        ).ok_or_else(|| InterpError::InvalidProgram(TooGeneric).into())\n+        ).ok_or_else(|| InterpError::InvalidProgram(InvalidProgramInfo::TooGeneric).into())\n     }\n \n     pub fn load_mir(\n@@ -694,8 +697,10 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // `Memory::get_static_alloc` which has to use `const_eval_raw` to avoid cycles.\n         let val = self.tcx.const_eval_raw(param_env.and(gid)).map_err(|err| {\n             match err {\n-                ErrorHandled::Reported => InterpError::InvalidProgram(ReferencedConstant),\n-                ErrorHandled::TooGeneric => InterpError::InvalidProgram(TooGeneric),\n+                ErrorHandled::Reported =>\n+                    InterpError::InvalidProgram(InvalidProgramInfo::ReferencedConstant),\n+                ErrorHandled::TooGeneric =>\n+                    InterpError::InvalidProgram(InvalidProgramInfo::TooGeneric),\n             }\n         })?;\n         self.raw_const_to_mplace(val)"}, {"sha": "af7da6fa532291d3cacee28d4ef746ad15f4da5a", "filename": "src/librustc_mir/interpret/intern.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f8b099846f3bb5cd5f17698b6e653e0271f057e/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8b099846f3bb5cd5f17698b6e653e0271f057e/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintern.rs?ref=9f8b099846f3bb5cd5f17698b6e653e0271f057e", "patch": "@@ -5,7 +5,7 @@\n \n use rustc::ty::{Ty, TyCtxt, ParamEnv, self};\n use rustc::mir::interpret::{\n-    InterpResult, ErrorHandled, UnsupportedInfo::*,\n+    InterpResult, ErrorHandled, UnsupportedOpInfo,\n };\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n@@ -293,7 +293,7 @@ pub fn intern_const_alloc_recursive(\n         if let Err(error) = interned {\n             // This can happen when e.g. the tag of an enum is not a valid discriminant. We do have\n             // to read enum discriminants in order to find references in enum variant fields.\n-            if let InterpError::Unsupported(ValidationFailure(_)) = error.kind {\n+            if let InterpError::Unsupported(UnsupportedOpInfo::ValidationFailure(_)) = error.kind {\n                 let err = crate::const_eval::error_to_const_error(&ecx, error);\n                 match err.struct_error(ecx.tcx, \"it is undefined behavior to use this value\") {\n                     Ok(mut diag) => {"}, {"sha": "0b4df6cc7bc5964a74300b5398c7fd72b4b01da6", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f8b099846f3bb5cd5f17698b6e653e0271f057e/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8b099846f3bb5cd5f17698b6e653e0271f057e/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=9f8b099846f3bb5cd5f17698b6e653e0271f057e", "patch": "@@ -7,7 +7,7 @@ use rustc::ty;\n use rustc::ty::layout::{LayoutOf, Primitive, Size};\n use rustc::mir::BinOp;\n use rustc::mir::interpret::{\n-    InterpResult, InterpError, Scalar, PanicInfo, UnsupportedInfo::*,\n+    InterpResult, InterpError, Scalar, PanicInfo, UnsupportedOpInfo,\n };\n \n use super::{\n@@ -100,7 +100,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let bits = self.read_scalar(args[0])?.to_bits(layout_of.size)?;\n                 let kind = match layout_of.abi {\n                     ty::layout::Abi::Scalar(ref scalar) => scalar.value,\n-                    _ => Err(InterpError::Unsupported(TypeNotPrimitive(ty)))?,\n+                    _ => Err(InterpError::Unsupported(UnsupportedOpInfo::TypeNotPrimitive(ty)))?,\n                 };\n                 let out_val = if intrinsic_name.ends_with(\"_nonzero\") {\n                     if bits == 0 {"}, {"sha": "064ca0f4253bb729c9cc16e05b78dddf72eefcd8", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f8b099846f3bb5cd5f17698b6e653e0271f057e/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8b099846f3bb5cd5f17698b6e653e0271f057e/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=9f8b099846f3bb5cd5f17698b6e653e0271f057e", "patch": "@@ -11,7 +11,7 @@ use rustc::ty::{self, TyCtxt};\n \n use super::{\n     Allocation, AllocId, InterpResult, InterpError, Scalar, AllocationExtra,\n-    InterpCx, PlaceTy, OpTy, ImmTy, MemoryKind, Pointer, Memory, UnsupportedInfo::*\n+    InterpCx, PlaceTy, OpTy, ImmTy, MemoryKind, Pointer, Memory, UnsupportedOpInfo,\n };\n \n /// Whether this kind of memory is allowed to leak\n@@ -240,9 +240,9 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         int: u64,\n     ) -> InterpResult<'tcx, Pointer<Self::PointerTag>> {\n         Err((if int == 0 {\n-            InterpError::Unsupported(InvalidNullPointerUsage)\n+            InterpError::Unsupported(UnsupportedOpInfo::InvalidNullPointerUsage)\n         } else {\n-            InterpError::Unsupported(ReadBytesAsPointer)\n+            InterpError::Unsupported(UnsupportedOpInfo::ReadBytesAsPointer)\n         }).into())\n     }\n "}, {"sha": "edaf7855e872ff39260c5bc4699fe13163a78a7a", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9f8b099846f3bb5cd5f17698b6e653e0271f057e/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8b099846f3bb5cd5f17698b6e653e0271f057e/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=9f8b099846f3bb5cd5f17698b6e653e0271f057e", "patch": "@@ -19,8 +19,7 @@ use syntax::ast::Mutability;\n use super::{\n     Pointer, AllocId, Allocation, GlobalId, AllocationExtra,\n     InterpResult, Scalar, InterpError, GlobalAlloc, PointerArithmetic,\n-    Machine, AllocMap, MayLeak, ErrorHandled, CheckInAllocMsg, UnsupportedInfo::*,\n-    InvalidProgramInfo::*\n+    Machine, AllocMap, MayLeak, ErrorHandled, CheckInAllocMsg, InvalidProgramInfo,\n };\n \n #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]\n@@ -438,9 +437,11 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                             assert!(tcx.is_static(def_id));\n                             match err {\n                                 ErrorHandled::Reported =>\n-                                    InterpError::InvalidProgram(ReferencedConstant),\n+                                    InterpError::InvalidProgram(\n+                                        InvalidProgramInfo::ReferencedConstant\n+                                    ),\n                                 ErrorHandled::TooGeneric =>\n-                                    InterpError::InvalidProgram(TooGeneric),\n+                                    InterpError::InvalidProgram(InvalidProgramInfo::TooGeneric),\n                             }\n                         })?;\n                     // Make sure we use the ID of the resolved memory, not the lazy one!\n@@ -590,7 +591,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         } else {\n             match self.tcx.alloc_map.lock().get(id) {\n                 Some(GlobalAlloc::Function(instance)) => Ok(FnVal::Instance(instance)),\n-                _ => Err(InterpError::Unsupported(ExecuteMemory).into()),\n+                _ => err!(ExecuteMemory),\n             }\n         }\n     }"}, {"sha": "4dd308f5bf4da52c77295b27502418843a367bfb", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f8b099846f3bb5cd5f17698b6e653e0271f057e/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8b099846f3bb5cd5f17698b6e653e0271f057e/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=9f8b099846f3bb5cd5f17698b6e653e0271f057e", "patch": "@@ -12,7 +12,7 @@ use rustc::mir::interpret::{\n     GlobalId, AllocId,\n     ConstValue, Pointer, Scalar,\n     InterpResult, InterpError,\n-    sign_extend, truncate, UnsupportedInfo::*,\n+    sign_extend, truncate, UnsupportedOpInfo,\n };\n use super::{\n     InterpCx, Machine,\n@@ -331,8 +331,9 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     ) -> InterpResult<'tcx, &str> {\n         let len = mplace.len(self)?;\n         let bytes = self.memory.read_bytes(mplace.ptr, Size::from_bytes(len as u64))?;\n-        let str = ::std::str::from_utf8(bytes)\n-            .map_err(|err| InterpError::Unsupported(ValidationFailure(err.to_string())))?;\n+        let str = ::std::str::from_utf8(bytes).map_err(|err| {\n+            InterpError::Unsupported(UnsupportedOpInfo::ValidationFailure(err.to_string()))\n+        })?;\n         Ok(str)\n     }\n \n@@ -603,6 +604,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let raw_discr = discr_val.to_scalar_or_undef();\n         trace!(\"discr value: {:?}\", raw_discr);\n         // post-process\n+        use rustc::mir::interpret::UnsupportedOpInfo::InvalidDiscriminant;\n         Ok(match *discr_kind {\n             layout::DiscriminantKind::Tag => {\n                 let bits_discr = match raw_discr.to_bits(discr_val.layout.size) {"}, {"sha": "ebf7dd3b6628cdeb9d4bf3dc5f97f6c03554f4cc", "filename": "src/librustc_mir/interpret/snapshot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f8b099846f3bb5cd5f17698b6e653e0271f057e/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8b099846f3bb5cd5f17698b6e653e0271f057e/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs?ref=9f8b099846f3bb5cd5f17698b6e653e0271f057e", "patch": "@@ -12,7 +12,7 @@ use rustc::mir;\n use rustc::mir::interpret::{\n     AllocId, Pointer, Scalar,\n     Relocations, Allocation, UndefMask,\n-    InterpResult, InterpError, ResourceExhaustionInfo::*,\n+    InterpResult, InterpError, ResourceExhaustionInfo,\n };\n \n use rustc::ty::{self, TyCtxt};\n@@ -77,7 +77,7 @@ impl<'mir, 'tcx> InfiniteLoopDetector<'mir, 'tcx> {\n         }\n \n         // Second cycle\n-        Err(InterpError::ResourceExhaustion(InfiniteLoop).into())\n+        Err(InterpError::ResourceExhaustion(ResourceExhaustionInfo::InfiniteLoop).into())\n     }\n }\n "}, {"sha": "b1706e72dd47551716f0621eed8ac98625201b79", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f8b099846f3bb5cd5f17698b6e653e0271f057e/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8b099846f3bb5cd5f17698b6e653e0271f057e/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=9f8b099846f3bb5cd5f17698b6e653e0271f057e", "patch": "@@ -9,7 +9,7 @@ use rustc_target::spec::abi::Abi;\n use super::{\n     InterpResult, PointerArithmetic, InterpError, Scalar,\n     InterpCx, Machine, Immediate, OpTy, ImmTy, PlaceTy, MPlaceTy, StackPopCleanup, FnVal,\n-    UnsupportedInfo::*,\n+    UnsupportedOpInfo,\n };\n \n impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n@@ -221,7 +221,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             return Ok(());\n         }\n         let caller_arg = caller_arg.next()\n-            .ok_or_else(|| InterpError::Unsupported(FunctionArgCountMismatch))?;\n+            .ok_or_else(|| InterpError::Unsupported(UnsupportedOpInfo::FunctionArgCountMismatch))?;\n         if rust_abi {\n             debug_assert!(!caller_arg.layout.is_zst(), \"ZSTs must have been already filtered out\");\n         }"}, {"sha": "9404711bd9708aa2d0f9fc7a68ac543b87ea5c2a", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9f8b099846f3bb5cd5f17698b6e653e0271f057e/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8b099846f3bb5cd5f17698b6e653e0271f057e/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=9f8b099846f3bb5cd5f17698b6e653e0271f057e", "patch": "@@ -11,7 +11,7 @@ use std::hash::Hash;\n \n use super::{\n     GlobalAlloc, InterpResult, InterpError,\n-    OpTy, Machine, InterpCx, ValueVisitor, MPlaceTy, UnsupportedInfo::*,\n+    OpTy, Machine, InterpCx, ValueVisitor, MPlaceTy, UnsupportedOpInfo,\n };\n \n macro_rules! validation_failure {\n@@ -297,11 +297,11 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n         match self.walk_value(op) {\n             Ok(()) => Ok(()),\n             Err(err) => match err.kind {\n-                InterpError::Unsupported(InvalidDiscriminant(val)) =>\n+                InterpError::Unsupported(UnsupportedOpInfo::InvalidDiscriminant(val)) =>\n                     validation_failure!(\n                         val, self.path, \"a valid enum discriminant\"\n                     ),\n-                InterpError::Unsupported(ReadPointerAsBytes) =>\n+                InterpError::Unsupported(UnsupportedOpInfo::ReadPointerAsBytes) =>\n                     validation_failure!(\n                         \"a pointer\", self.path, \"plain (non-pointer) bytes\"\n                     ),\n@@ -405,6 +405,7 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                             \"{:?} did not pass access check for size {:?}, align {:?}\",\n                             ptr, size, align\n                         );\n+                        use super::UnsupportedOpInfo::*;\n                         match err.kind {\n                             InterpError::Unsupported(InvalidNullPointerUsage) =>\n                                 return validation_failure!(\"NULL reference\", self.path),\n@@ -608,7 +609,7 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                     Err(err) => {\n                         // For some errors we might be able to provide extra information\n                         match err.kind {\n-                            InterpError::Unsupported(ReadUndefBytes(offset)) => {\n+                            InterpError::Unsupported(UnsupportedOpInfo::ReadUndefBytes(offset)) => {\n                                 // Some byte was undefined, determine which\n                                 // element that byte belongs to so we can\n                                 // provide an index."}, {"sha": "191c6f2dc8aebaaa935b741d4f881855a0b6272e", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f8b099846f3bb5cd5f17698b6e653e0271f057e/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8b099846f3bb5cd5f17698b6e653e0271f057e/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=9f8b099846f3bb5cd5f17698b6e653e0271f057e", "patch": "@@ -257,9 +257,9 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             Err(error) => {\n                 let diagnostic = error_to_const_error(&self.ecx, error);\n                 use rustc::mir::interpret::InterpError::*;\n-                use rustc::mir::interpret::UnsupportedInfo::*;\n+                use rustc::mir::interpret::UnsupportedOpInfo::*;\n                 match diagnostic.error {\n-                    Exit(_) => {},\n+                    Exit(_) => bug!(\"the CTFE program cannot exit\"),\n \n                     | Unsupported(OutOfTls)\n                     | Unsupported(TlsOutOfBounds)"}]}