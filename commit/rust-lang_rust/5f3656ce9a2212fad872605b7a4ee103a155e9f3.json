{"sha": "5f3656ce9a2212fad872605b7a4ee103a155e9f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmMzY1NmNlOWEyMjEyZmFkODcyNjA1YjdhNGVlMTAzYTE1NWU5ZjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-11T20:45:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-11T20:45:17Z"}, "message": "Auto merge of #61735 - eddyb:must-use-life, r=oli-obk\n\nAdd deny(unused_lifetimes) to all the crates that have deny(internal).\n\n@Zoxc brought up, regarding #61722, that we don't force the removal of unused lifetimes.\nTurns out that it's not that bad to enable for compiler crates (I wonder why it's not `warn` by default?).\n\nI would've liked to enable `single_use_lifetimes` as well, but https://github.com/rust-lang/rust/issues/53738 makes it unusable for now.\n\nFor the `rustfmt` commit, I used https://github.com/rust-lang/rustfmt/issues/1324#issuecomment-482109952, and manually filtered out some noise.\n\nr? @oli-obk cc @rust-lang/compiler", "tree": {"sha": "367771ead660a6aa657c9f5133d3feeb28173129", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/367771ead660a6aa657c9f5133d3feeb28173129"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f3656ce9a2212fad872605b7a4ee103a155e9f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f3656ce9a2212fad872605b7a4ee103a155e9f3", "html_url": "https://github.com/rust-lang/rust/commit/5f3656ce9a2212fad872605b7a4ee103a155e9f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f3656ce9a2212fad872605b7a4ee103a155e9f3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e948df707ea8a3c88c65bf2ffdcb2f1cf5491be", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e948df707ea8a3c88c65bf2ffdcb2f1cf5491be", "html_url": "https://github.com/rust-lang/rust/commit/8e948df707ea8a3c88c65bf2ffdcb2f1cf5491be"}, {"sha": "1d720ec27c5bdbc377145b8a29c1d727fb7131d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d720ec27c5bdbc377145b8a29c1d727fb7131d6", "html_url": "https://github.com/rust-lang/rust/commit/1d720ec27c5bdbc377145b8a29c1d727fb7131d6"}], "stats": {"total": 310, "additions": 159, "deletions": 151}, "files": [{"sha": "1739b2236e89da3bc54685fc5f13bb43e80fd726", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -13,6 +13,7 @@\n \n #![deny(rust_2018_idioms)]\n #![deny(internal)]\n+#![deny(unused_lifetimes)]\n \n #![feature(core_intrinsics)]\n #![feature(dropck_eyepatch)]"}, {"sha": "1000f237e84325aa0bf61793d5486cc6eb445755", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -10,6 +10,7 @@\n \n #![deny(rust_2018_idioms)]\n #![deny(internal)]\n+#![deny(unused_lifetimes)]\n \n #![feature(nll)]\n #![feature(rustc_private)]"}, {"sha": "8a59f6b69bcd690ba3506db9b3536d2ea5025f61", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -589,8 +589,9 @@ struct HirItemLike<T> {\n     hash_bodies: bool,\n }\n \n-impl<'a, 'hir, T> HashStable<StableHashingContext<'hir>> for HirItemLike<T>\n-    where T: HashStable<StableHashingContext<'hir>>\n+impl<'hir, T> HashStable<StableHashingContext<'hir>> for HirItemLike<T>\n+where\n+    T: HashStable<StableHashingContext<'hir>>,\n {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'hir>,"}, {"sha": "eff42efa67b92c6aaf9ddc13b765e1ea7d3cf7cf", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -393,12 +393,13 @@ impl<'a> HashStable<StableHashingContext<'a>> for DelimSpan {\n     }\n }\n \n-pub fn hash_stable_trait_impls<'a, 'gcx, W>(\n+pub fn hash_stable_trait_impls<'a, W>(\n     hcx: &mut StableHashingContext<'a>,\n     hasher: &mut StableHasher<W>,\n     blanket_impls: &[DefId],\n-    non_blanket_impls: &FxHashMap<fast_reject::SimplifiedType, Vec<DefId>>)\n-    where W: StableHasherResult\n+    non_blanket_impls: &FxHashMap<fast_reject::SimplifiedType, Vec<DefId>>,\n+) where\n+    W: StableHasherResult,\n {\n     {\n         let mut blanket_impls: SmallVec<[_; 8]> = blanket_impls"}, {"sha": "89e79c56ca39d3629e190f470cbc5d2e1c953924", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -135,8 +135,9 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for ty::BoundVar {\n     }\n }\n \n-impl<'a, 'gcx, T> HashStable<StableHashingContext<'a>> for ty::Binder<T>\n-    where T: HashStable<StableHashingContext<'a>>\n+impl<'a, T> HashStable<StableHashingContext<'a>> for ty::Binder<T>\n+where\n+    T: HashStable<StableHashingContext<'a>>,\n {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n@@ -192,9 +193,7 @@ impl<'a> ToStableHashKey<StableHashingContext<'a>> for region::Scope {\n     }\n }\n \n-impl<'a, 'gcx> HashStable<StableHashingContext<'a>>\n-for ty::TyVid\n-{\n+impl<'a> HashStable<StableHashingContext<'a>> for ty::TyVid {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           _hcx: &mut StableHashingContext<'a>,\n                                           _hasher: &mut StableHasher<W>) {\n@@ -204,9 +203,7 @@ for ty::TyVid\n     }\n }\n \n-impl<'a, 'gcx> HashStable<StableHashingContext<'a>>\n-for ty::IntVid\n-{\n+impl<'a> HashStable<StableHashingContext<'a>> for ty::IntVid {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           _hcx: &mut StableHashingContext<'a>,\n                                           _hasher: &mut StableHasher<W>) {\n@@ -216,9 +213,7 @@ for ty::IntVid\n     }\n }\n \n-impl<'a, 'gcx> HashStable<StableHashingContext<'a>>\n-for ty::FloatVid\n-{\n+impl<'a> HashStable<StableHashingContext<'a>> for ty::FloatVid {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           _hcx: &mut StableHashingContext<'a>,\n                                           _hasher: &mut StableHasher<W>) {\n@@ -228,9 +223,9 @@ for ty::FloatVid\n     }\n }\n \n-impl<'a, 'gcx, T> HashStable<StableHashingContext<'a>>\n-for ty::steal::Steal<T>\n-    where T: HashStable<StableHashingContext<'a>>\n+impl<'a, T> HashStable<StableHashingContext<'a>> for ty::steal::Steal<T>\n+where\n+    T: HashStable<StableHashingContext<'a>>,\n {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,"}, {"sha": "b6fe57636e904c836615488504aedc157662c24b", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -858,7 +858,7 @@ impl<'a, 'gcx, 'tcx> GenericKind<'tcx> {\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> VerifyBound<'tcx> {\n+impl<'tcx> VerifyBound<'tcx> {\n     pub fn must_hold(&self) -> bool {\n         match self {\n             VerifyBound::IfEq(..) => false,"}, {"sha": "e2f2799d9634dfadfd599ea5e66031379476b2ea", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -30,6 +30,7 @@\n \n #![deny(rust_2018_idioms)]\n #![deny(internal)]\n+#![deny(unused_lifetimes)]\n #![allow(explicit_outlives_requirements)]\n \n #![feature(arbitrary_self_types)]"}, {"sha": "b51257c520601ac734408b7dde5fd852897cdbb5", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -566,7 +566,7 @@ impl LintPassObject for EarlyLintPassObject {}\n \n impl LintPassObject for LateLintPassObject {}\n \n-pub trait LintContext<'tcx>: Sized {\n+pub trait LintContext: Sized {\n     type PassObject: LintPassObject;\n \n     fn sess(&self) -> &Session;\n@@ -700,7 +700,7 @@ impl<'a, T: EarlyLintPass> EarlyContextAndPass<'a, T> {\n     }\n }\n \n-impl<'a, 'tcx> LintContext<'tcx> for LateContext<'a, 'tcx> {\n+impl LintContext for LateContext<'_, '_> {\n     type PassObject = LateLintPassObject;\n \n     /// Gets the overall compiler `Session` object.\n@@ -728,7 +728,7 @@ impl<'a, 'tcx> LintContext<'tcx> for LateContext<'a, 'tcx> {\n     }\n }\n \n-impl<'a> LintContext<'a> for EarlyContext<'a> {\n+impl LintContext for EarlyContext<'_> {\n     type PassObject = EarlyLintPassObject;\n \n     /// Gets the overall compiler `Session` object."}, {"sha": "b4088201f3bf1fc17084bd699d59d877c2d0587e", "filename": "src/librustc/macros.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmacros.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -80,7 +80,7 @@ macro_rules! impl_stable_hash_for {\n     // We want to use the enum name both in the `impl ... for $enum_name` as well as for\n     // importing all the variants. Unfortunately it seems we have to take the name\n     // twice for this purpose\n-    (impl<$($lt:lifetime $(: $lt_bound:lifetime)? ),* $(,)? $($T:ident),* $(,)?>\n+    (impl<$($T:ident),* $(,)?>\n         for enum $enum_name:path\n         [ $enum_path:path ]\n     {\n@@ -91,7 +91,7 @@ macro_rules! impl_stable_hash_for {\n            $( { $($named_field:ident $(-> $named_delegate:tt)?),* } )?\n         ),* $(,)?\n     }) => {\n-        impl<'a, $($lt $(: $lt_bound)?,)* $($T,)*>\n+        impl<$($T,)*>\n             ::rustc_data_structures::stable_hasher::HashStable<$crate::ich::StableHashingContext<'a>>\n             for $enum_name\n             where $($T: ::rustc_data_structures::stable_hasher::HashStable<$crate::ich::StableHashingContext<'a>>),*\n@@ -117,13 +117,13 @@ macro_rules! impl_stable_hash_for {\n     // Structs\n     (struct $struct_name:path { $($field:ident $(-> $delegate:tt)?),* $(,)? }) => {\n         impl_stable_hash_for!(\n-            impl<'tcx> for struct $struct_name { $($field $(-> $delegate)?),* }\n+            impl<> for struct $struct_name { $($field $(-> $delegate)?),* }\n         );\n     };\n-    (impl<$($lt:lifetime $(: $lt_bound:lifetime)? ),* $(,)? $($T:ident),* $(,)?> for struct $struct_name:path {\n+    (impl<$($T:ident),* $(,)?> for struct $struct_name:path {\n         $($field:ident $(-> $delegate:tt)?),* $(,)?\n     }) => {\n-        impl<'a, $($lt $(: $lt_bound)?,)* $($T,)*>\n+        impl<$($T,)*>\n             ::rustc_data_structures::stable_hasher::HashStable<$crate::ich::StableHashingContext<'a>> for $struct_name\n             where $($T: ::rustc_data_structures::stable_hasher::HashStable<$crate::ich::StableHashingContext<'a>>),*\n         {\n@@ -143,12 +143,12 @@ macro_rules! impl_stable_hash_for {\n     // We cannot use normal parentheses here, the parser won't allow it\n     (tuple_struct $struct_name:path { $($field:ident $(-> $delegate:tt)?),*  $(,)? }) => {\n         impl_stable_hash_for!(\n-            impl<'tcx> for tuple_struct $struct_name { $($field $(-> $delegate)?),* }\n+            impl<> for tuple_struct $struct_name { $($field $(-> $delegate)?),* }\n         );\n     };\n-    (impl<$($lt:lifetime $(: $lt_bound:lifetime)? ),* $(,)? $($T:ident),* $(,)?>\n+    (impl<$($T:ident),* $(,)?>\n      for tuple_struct $struct_name:path { $($field:ident $(-> $delegate:tt)?),*  $(,)? }) => {\n-        impl<'a, $($lt $(: $lt_bound)?,)* $($T,)*>\n+        impl<$($T,)*>\n             ::rustc_data_structures::stable_hasher::HashStable<$crate::ich::StableHashingContext<'a>> for $struct_name\n             where $($T: ::rustc_data_structures::stable_hasher::HashStable<$crate::ich::StableHashingContext<'a>>),*\n         {\n@@ -170,7 +170,7 @@ macro_rules! impl_stable_hash_for {\n macro_rules! impl_stable_hash_for_spanned {\n     ($T:path) => (\n \n-        impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for ::syntax::source_map::Spanned<$T>\n+        impl HashStable<StableHashingContext<'a>> for ::syntax::source_map::Spanned<$T>\n         {\n             #[inline]\n             fn hash_stable<W: StableHasherResult>(&self,"}, {"sha": "26002a411d4b6e48b785c770c52a7fdf9957cde9", "filename": "src/librustc/mir/interpret/pointer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -105,7 +105,7 @@ impl From<AllocId> for Pointer {\n     }\n }\n \n-impl<'tcx> Pointer<()> {\n+impl Pointer<()> {\n     #[inline(always)]\n     pub fn new(alloc_id: AllocId, offset: Size) -> Self {\n         Pointer { alloc_id, offset, tag: () }"}, {"sha": "f7b3385668f7b2b79a784562e01e21102d2a39f3", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -146,7 +146,7 @@ impl<Tag> From<Double> for Scalar<Tag> {\n     }\n }\n \n-impl<'tcx> Scalar<()> {\n+impl Scalar<()> {\n     #[inline(always)]\n     fn check_data(data: u128, size: u8) {\n         debug_assert_eq!(truncate(data, Size::from_bytes(size as u64)), data,"}, {"sha": "babce812d4a39157fb2c175f006249bc510236a5", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -967,7 +967,7 @@ pub enum PlaceContext {\n     NonUse(NonUseContext),\n }\n \n-impl<'tcx> PlaceContext {\n+impl PlaceContext {\n     /// Returns `true` if this place context represents a drop.\n     pub fn is_drop(&self) -> bool {\n         match *self {"}, {"sha": "6a03aa64d26d19d175ce252dc5ae517e33aa178a", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -785,7 +785,7 @@ macro_rules! options {\n         return op;\n     }\n \n-    impl<'a> dep_tracking::DepTrackingHash for $struct_name {\n+    impl dep_tracking::DepTrackingHash for $struct_name {\n         fn hash(&self, hasher: &mut DefaultHasher, error_format: ErrorOutputType) {\n             let mut sub_hashes = BTreeMap::new();\n             $({"}, {"sha": "9ce35d15d3c334a74c274cce694ecfdc58bbed8c", "filename": "src/librustc/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fauto_trait.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -270,7 +270,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n     // the final synthesized generics: we don't want our generated docs page to contain something\n     // like 'T: Copy + Clone', as that's redundant. Therefore, we keep track of a separate\n     // 'user_env', which only holds the predicates that will actually be displayed to the user.\n-    fn evaluate_predicates<'b, 'gcx, 'c>(\n+    fn evaluate_predicates<'b, 'c>(\n         &self,\n         infcx: &InferCtxt<'b, 'tcx, 'c>,\n         trait_did: DefId,"}, {"sha": "fd2d8fd0661a5cf1276e953d98c30fc8b6a76114", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -1191,7 +1191,7 @@ where\n         folder: &mut F,\n     ) -> chalk_engine::ExClause<Self>;\n \n-    fn visit_ex_clause_with<'gcx: 'tcx, V: TypeVisitor<'tcx>>(\n+    fn visit_ex_clause_with<V: TypeVisitor<'tcx>>(\n         ex_clause: &chalk_engine::ExClause<Self>,\n         visitor: &mut V,\n     ) -> bool;"}, {"sha": "594f55e52f8e6b593b125cef0a2750390ec05bc1", "filename": "src/librustc/traits/query/type_op/normalize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -145,7 +145,7 @@ BraceStructLiftImpl! {\n }\n \n impl_stable_hash_for! {\n-    impl<'tcx, T> for struct Normalize<T> {\n+    impl<T> for struct Normalize<T> {\n         value\n     }\n }"}, {"sha": "af0b51e637a36f6b93cfa98b7901b4c490139f58", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -104,10 +104,7 @@ pub enum IntercrateAmbiguityCause {\n impl IntercrateAmbiguityCause {\n     /// Emits notes when the overlap is caused by complex intercrate ambiguities.\n     /// See #23980 for details.\n-    pub fn add_intercrate_ambiguity_hint<'a, 'tcx>(\n-        &self,\n-        err: &mut errors::DiagnosticBuilder<'_>,\n-    ) {\n+    pub fn add_intercrate_ambiguity_hint(&self, err: &mut errors::DiagnosticBuilder<'_>) {\n         err.note(&self.intercrate_ambiguity_hint());\n     }\n \n@@ -2299,7 +2296,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     /// candidates and prefer where-clause candidates.\n     ///\n     /// See the comment for \"SelectionCandidate\" for more details.\n-    fn candidate_should_be_dropped_in_favor_of<'o>(\n+    fn candidate_should_be_dropped_in_favor_of(\n         &mut self,\n         victim: &EvaluatedCandidate<'tcx>,\n         other: &EvaluatedCandidate<'tcx>,\n@@ -2423,7 +2420,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     // These cover the traits that are built-in to the language\n     // itself: `Copy`, `Clone` and `Sized`.\n \n-    fn assemble_builtin_bound_candidates<'o>(\n+    fn assemble_builtin_bound_candidates(\n         &mut self,\n         conditions: BuiltinImplConditions<'tcx>,\n         candidates: &mut SelectionCandidateSet<'tcx>,"}, {"sha": "f6108f2a28699479933ed1f2e339bd8e763570c7", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -90,13 +90,13 @@ impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableClosureData<'tcx, N> {\n     }\n }\n \n-impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableBuiltinData<N> {\n+impl<N: fmt::Debug> fmt::Debug for traits::VtableBuiltinData<N> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"VtableBuiltinData(nested={:?})\", self.nested)\n     }\n }\n \n-impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableAutoImplData<N> {\n+impl<N: fmt::Debug> fmt::Debug for traits::VtableAutoImplData<N> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(\n             f,"}, {"sha": "908bbbcd1d77d1759cac3520bcdf6b982fda083f", "filename": "src/librustc/ty/fast_reject.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffast_reject.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -154,9 +154,9 @@ impl<D: Copy + Debug + Ord + Eq + Hash> SimplifiedTypeGen<D> {\n     }\n }\n \n-impl<'a, 'gcx, D> HashStable<StableHashingContext<'a>> for SimplifiedTypeGen<D>\n-    where D: Copy + Debug + Ord + Eq + Hash +\n-             HashStable<StableHashingContext<'a>>,\n+impl<'a, D> HashStable<StableHashingContext<'a>> for SimplifiedTypeGen<D>\n+where\n+    D: Copy + Debug + Ord + Eq + Hash + HashStable<StableHashingContext<'a>>,\n {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,"}, {"sha": "ba42cecbe5b83fe972264141d87132da50d652f8", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -442,10 +442,10 @@ fn resolve_associated_item<'a, 'tcx>(\n     }\n }\n \n-fn needs_fn_once_adapter_shim<'a, 'tcx>(actual_closure_kind: ty::ClosureKind,\n-                                        trait_closure_kind: ty::ClosureKind)\n-    -> Result<bool, ()>\n-{\n+fn needs_fn_once_adapter_shim(\n+    actual_closure_kind: ty::ClosureKind,\n+    trait_closure_kind: ty::ClosureKind,\n+) -> Result<bool, ()> {\n     match (actual_closure_kind, trait_closure_kind) {\n         (ty::ClosureKind::Fn, ty::ClosureKind::Fn) |\n             (ty::ClosureKind::FnMut, ty::ClosureKind::FnMut) |"}, {"sha": "4696325275292aa4911460f17a4578d1c8fce2f6", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -1678,10 +1678,11 @@ impl ty::query::TyCtxtAt<'a, 'tcx, '_> {\n     }\n }\n \n-impl<'a, 'tcx, C> TyLayoutMethods<'tcx, C> for Ty<'tcx>\n-    where C: LayoutOf<Ty = Ty<'tcx>> + HasTyCtxt<'tcx>,\n-          C::TyLayout: MaybeResult<TyLayout<'tcx>>,\n-          C: HasParamEnv<'tcx>\n+impl<'tcx, C> TyLayoutMethods<'tcx, C> for Ty<'tcx>\n+where\n+    C: LayoutOf<Ty = Ty<'tcx>> + HasTyCtxt<'tcx>,\n+    C::TyLayout: MaybeResult<TyLayout<'tcx>>,\n+    C: HasParamEnv<'tcx>,\n {\n     fn for_variant(this: TyLayout<'tcx>, cx: &C, variant_index: VariantIdx) -> TyLayout<'tcx> {\n         let details = match this.variants {"}, {"sha": "d858d374244446bfb52becaa6cfd902f0ca2790a", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -203,7 +203,7 @@ impl AssocItem {\n \n     /// Tests whether the associated item admits a non-trivial implementation\n     /// for !\n-    pub fn relevant_for_never<'tcx>(&self) -> bool {\n+    pub fn relevant_for_never(&self) -> bool {\n         match self.kind {\n             AssocKind::Existential |\n             AssocKind::Const |\n@@ -1614,8 +1614,9 @@ pub struct Placeholder<T> {\n     pub name: T,\n }\n \n-impl<'a, 'gcx, T> HashStable<StableHashingContext<'a>> for Placeholder<T>\n-    where T: HashStable<StableHashingContext<'a>>\n+impl<'a, T> HashStable<StableHashingContext<'a>> for Placeholder<T>\n+where\n+    T: HashStable<StableHashingContext<'a>>,\n {\n     fn hash_stable<W: StableHasherResult>(\n         &self,"}, {"sha": "d6bc4e537581be6cec5816cd1cac24dca242f4a5", "filename": "src/librustc/ty/print/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fmod.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -11,6 +11,8 @@ pub use self::pretty::*;\n \n pub mod obsolete;\n \n+// FIXME(eddyb) false positive, the lifetime parameters are used with `P:  Printer<...>`.\n+#[allow(unused_lifetimes)]\n pub trait Print<'gcx, 'tcx, P> {\n     type Output;\n     type Error;"}, {"sha": "286894c82b7e2bfe5bdb8d48521ebd2dac8d7021", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -17,6 +17,8 @@ use crate::ich::StableHashingContext;\n \n // Query configuration and description traits.\n \n+// FIXME(eddyb) false positive, the lifetime parameter is used for `Key`/`Value`.\n+#[allow(unused_lifetimes)]\n pub trait QueryConfig<'tcx> {\n     const NAME: QueryName;\n     const CATEGORY: ProfileCategory;"}, {"sha": "abde4d6de2aed78b561dfa709ced9b6b877a3d8a", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -886,7 +886,7 @@ impl<T> Binder<T> {\n     }\n \n     /// Wraps `value` in a binder, binding higher-ranked vars (if any).\n-    pub fn bind<'tcx>(value: T) -> Binder<T> {\n+    pub fn bind(value: T) -> Binder<T> {\n         Binder(value)\n     }\n \n@@ -988,7 +988,7 @@ pub struct ProjectionTy<'tcx> {\n     pub item_def_id: DefId,\n }\n \n-impl<'a, 'tcx> ProjectionTy<'tcx> {\n+impl<'tcx> ProjectionTy<'tcx> {\n     /// Construct a `ProjectionTy` by searching the trait from `trait_ref` for the\n     /// associated item named `item_name`.\n     pub fn from_ref_and_name("}, {"sha": "dee9a7c3f4a78b648e51533492892ab3223a6fe0", "filename": "src/librustc/util/captures.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Futil%2Fcaptures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc%2Futil%2Fcaptures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcaptures.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -3,6 +3,8 @@\n /// Basically a workaround; see [this comment] for details.\n ///\n /// [this comment]: https://github.com/rust-lang/rust/issues/34511#issuecomment-373423999\n+// FIXME(eddyb) false positive, the lifetime parameter is \"phantom\" but needed.\n+#[allow(unused_lifetimes)]\n pub trait Captures<'a> { }\n \n impl<'a, T: ?Sized> Captures<'a> for T { }"}, {"sha": "e7a70895a3023c884c91fd95a9bb16ef2d4065aa", "filename": "src/librustc_allocator/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_allocator%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_allocator%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Flib.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -3,6 +3,7 @@\n \n #![deny(rust_2018_idioms)]\n #![deny(internal)]\n+#![deny(unused_lifetimes)]\n \n pub mod expand;\n "}, {"sha": "669fb9103aaaa9813f42a6db52a5166eb5cefea9", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -1487,7 +1487,7 @@ impl DataFlowOperator for LoanDataFlowOperator {\n     }\n }\n \n-impl<'tcx> fmt::Debug for InteriorKind {\n+impl fmt::Debug for InteriorKind {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             InteriorField(mc::FieldIndex(_, info)) => write!(f, \"{}\", info),"}, {"sha": "5d8b0cd14dd2775e1403d51412ce702eb8681754", "filename": "src/librustc_borrowck/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_borrowck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_borrowck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Flib.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -3,6 +3,7 @@\n #![allow(non_camel_case_types)]\n #![deny(rust_2018_idioms)]\n #![deny(internal)]\n+#![deny(unused_lifetimes)]\n \n #![feature(nll)]\n "}, {"sha": "81acc16b7abec6a05097d2cb7bfd1dea95d0f720", "filename": "src/librustc_codegen_llvm/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_codegen_llvm%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_codegen_llvm%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fasm.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -112,7 +112,7 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n     }\n }\n \n-impl AsmMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n+impl AsmMethods for CodegenCx<'ll, 'tcx> {\n     fn codegen_global_asm(&self, ga: &hir::GlobalAsm) {\n         let asm = CString::new(ga.asm.as_str().as_bytes()).unwrap();\n         unsafe {"}, {"sha": "982156321aa151edc6087a74c37b1e20cde71e58", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -1074,8 +1074,8 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n     }\n }\n \n-impl StaticBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n-fn get_static(&mut self, def_id: DefId) -> &'ll Value {\n+impl StaticBuilderMethods for Builder<'a, 'll, 'tcx> {\n+    fn get_static(&mut self, def_id: DefId) -> &'ll Value {\n         // Forward to the `get_static` method of `CodegenCx`\n         self.cx().get_static(def_id)\n     }"}, {"sha": "71393e224e42db145197adacbfd5b92a099c25bb", "filename": "src/librustc_codegen_ssa/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_codegen_ssa%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_codegen_ssa%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Flib.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -14,6 +14,7 @@\n #![allow(dead_code)]\n #![deny(rust_2018_idioms)]\n #![deny(internal)]\n+#![deny(unused_lifetimes)]\n #![allow(explicit_outlives_requirements)]\n \n #![recursion_limit=\"256\"]"}, {"sha": "e2fd1c2bc38e7f8d669cb54c1efbf362d45ab154", "filename": "src/librustc_codegen_ssa/mir/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -272,7 +272,7 @@ impl CleanupKind {\n     }\n }\n \n-pub fn cleanup_kinds<'a, 'tcx>(mir: &mir::Body<'tcx>) -> IndexVec<mir::BasicBlock, CleanupKind> {\n+pub fn cleanup_kinds<'tcx>(mir: &mir::Body<'tcx>) -> IndexVec<mir::BasicBlock, CleanupKind> {\n     fn discover_masters<'tcx>(result: &mut IndexVec<mir::BasicBlock, CleanupKind>,\n                               mir: &mir::Body<'tcx>) {\n         for (bb, data) in mir.basic_blocks().iter_enumerated() {"}, {"sha": "e4b82d8496669526c55e26b9ad2c9487feb3608f", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -223,10 +223,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         }\n     }\n \n-    fn codegen_return_terminator<'b>(\n-        &mut self,\n-        mut bx: Bx,\n-    ) {\n+    fn codegen_return_terminator(&mut self, mut bx: Bx) {\n         if self.fn_ty.c_variadic {\n             match self.va_list_ref {\n                 Some(va_list) => {"}, {"sha": "fd3c868bbc50727251cf12ab6f1569ef1d8f7614", "filename": "src/librustc_codegen_ssa/traits/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_codegen_ssa%2Ftraits%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_codegen_ssa%2Ftraits%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fasm.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -12,6 +12,6 @@ pub trait AsmBuilderMethods<'tcx>: BackendTypes {\n     ) -> bool;\n }\n \n-pub trait AsmMethods<'tcx> {\n+pub trait AsmMethods {\n     fn codegen_global_asm(&self, ga: &GlobalAsm);\n }"}, {"sha": "2af57bcb064b7b21db8f2932a064666544b463af", "filename": "src/librustc_codegen_ssa/traits/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -29,7 +29,7 @@ pub trait BuilderMethods<'a, 'tcx: 'a>:\n     + AbiBuilderMethods<'tcx>\n     + IntrinsicCallMethods<'tcx>\n     + AsmBuilderMethods<'tcx>\n-    + StaticBuilderMethods<'tcx>\n+    + StaticBuilderMethods\n     + HasParamEnv<'tcx>\n     + HasTargetSpec\n "}, {"sha": "efe4a25570104c4f8881c97119111bcc2a77d1e2", "filename": "src/librustc_codegen_ssa/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmod.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -58,7 +58,7 @@ pub trait CodegenMethods<'tcx>:\n     + StaticMethods\n     + DebugInfoMethods<'tcx>\n     + DeclareMethods<'tcx>\n-    + AsmMethods<'tcx>\n+    + AsmMethods\n     + PreDefineMethods<'tcx>\n     + HasParamEnv<'tcx>\n     + HasTyCtxt<'tcx>\n@@ -74,7 +74,7 @@ impl<'tcx, T> CodegenMethods<'tcx> for T where\n         + StaticMethods\n         + DebugInfoMethods<'tcx>\n         + DeclareMethods<'tcx>\n-        + AsmMethods<'tcx>\n+        + AsmMethods\n         + PreDefineMethods<'tcx>\n         + HasParamEnv<'tcx>\n         + HasTyCtxt<'tcx>"}, {"sha": "6983311d797dcd4ee48a4655e74a414aec850716", "filename": "src/librustc_codegen_ssa/traits/statics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_codegen_ssa%2Ftraits%2Fstatics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_codegen_ssa%2Ftraits%2Fstatics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fstatics.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -8,7 +8,7 @@ pub trait StaticMethods: BackendTypes {\n     fn codegen_static(&self, def_id: DefId, is_mutable: bool);\n }\n \n-pub trait StaticBuilderMethods<'tcx>: BackendTypes {\n+pub trait StaticBuilderMethods: BackendTypes {\n     fn get_static(&mut self, def_id: DefId) -> Self::Value;\n     fn static_panic_msg(\n         &mut self,"}, {"sha": "aa38d8d51848dec7df750321ec190032694b8b53", "filename": "src/librustc_codegen_ssa/traits/type_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_codegen_ssa%2Ftraits%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_codegen_ssa%2Ftraits%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Ftype_.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -101,7 +101,7 @@ pub trait LayoutTypeMethods<'tcx>: Backend<'tcx> {\n     fn is_backend_immediate(&self, layout: TyLayout<'tcx>) -> bool;\n     fn is_backend_scalar_pair(&self, layout: TyLayout<'tcx>) -> bool;\n     fn backend_field_index(&self, layout: TyLayout<'tcx>, index: usize) -> u64;\n-    fn scalar_pair_element_backend_type<'a>(\n+    fn scalar_pair_element_backend_type(\n         &self,\n         layout: TyLayout<'tcx>,\n         index: usize,"}, {"sha": "3726e4f47b96b10422216096a5a9fcba4a809cf6", "filename": "src/librustc_codegen_utils/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_codegen_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_codegen_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flib.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -18,6 +18,7 @@\n \n #![deny(rust_2018_idioms)]\n #![deny(internal)]\n+#![deny(unused_lifetimes)]\n \n #[macro_use]\n extern crate rustc;"}, {"sha": "5fb6ed31b0693df2d469866ff3c39b8c4054affe", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -18,6 +18,7 @@\n \n #![deny(rust_2018_idioms)]\n #![deny(internal)]\n+#![deny(unused_lifetimes)]\n \n pub extern crate getopts;\n #[cfg(unix)]"}, {"sha": "27bd30e8afd89762417551986f598c5631830f7e", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -6,6 +6,7 @@\n #![feature(optin_builtin_traits)]\n #![deny(rust_2018_idioms)]\n #![deny(internal)]\n+#![deny(unused_lifetimes)]\n \n #[allow(unused_extern_crates)]\n extern crate serialize as rustc_serialize; // used by deriving"}, {"sha": "ea89d2ca76d9f1aa12d84225a1623bdb187075b1", "filename": "src/librustc_incremental/assert_dep_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_dep_graph.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -258,7 +258,7 @@ fn dump_graph(tcx: TyCtxt<'_, '_, '_>) {\n pub struct GraphvizDepGraph<'q>(FxHashSet<&'q DepNode>,\n                                 Vec<(&'q DepNode, &'q DepNode)>);\n \n-impl<'a, 'tcx, 'q> dot::GraphWalk<'a> for GraphvizDepGraph<'q> {\n+impl<'a, 'q> dot::GraphWalk<'a> for GraphvizDepGraph<'q> {\n     type Node = &'q DepNode;\n     type Edge = (&'q DepNode, &'q DepNode);\n     fn nodes(&self) -> dot::Nodes<'_, &'q DepNode> {\n@@ -276,7 +276,7 @@ impl<'a, 'tcx, 'q> dot::GraphWalk<'a> for GraphvizDepGraph<'q> {\n     }\n }\n \n-impl<'a, 'tcx, 'q> dot::Labeller<'a> for GraphvizDepGraph<'q> {\n+impl<'a, 'q> dot::Labeller<'a> for GraphvizDepGraph<'q> {\n     type Node = &'q DepNode;\n     type Edge = (&'q DepNode, &'q DepNode);\n     fn graph_id(&self) -> dot::Id<'_> {"}, {"sha": "50780ba4e7bb338b9efe2f45227eaba67be91e9e", "filename": "src/librustc_incremental/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_incremental%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_incremental%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Flib.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -9,6 +9,7 @@\n \n #![deny(rust_2018_idioms)]\n #![deny(internal)]\n+#![deny(unused_lifetimes)]\n \n #[macro_use] extern crate rustc;\n #[allow(unused_extern_crates)]"}, {"sha": "7fc311d40c3d09fb2c3870655678d7b7855a434d", "filename": "src/librustc_interface/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_interface%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_interface%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Flib.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -8,6 +8,7 @@\n \n #![deny(rust_2018_idioms)]\n #![deny(internal)]\n+#![deny(unused_lifetimes)]\n \n #![allow(unused_imports)]\n "}, {"sha": "f3b9408569397507ea1e15149d67c5569f8ed1db", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -96,7 +96,7 @@ declare_lint! {\n declare_lint_pass!(BoxPointers => [BOX_POINTERS]);\n \n impl BoxPointers {\n-    fn check_heap_type<'a, 'tcx>(&self, cx: &LateContext<'_, '_>, span: Span, ty: Ty<'_>) {\n+    fn check_heap_type(&self, cx: &LateContext<'_, '_>, span: Span, ty: Ty<'_>) {\n         for leaf_ty in ty.walk() {\n             if leaf_ty.is_box() {\n                 let m = format!(\"type uses owned (Box type) pointers: {}\", ty);"}, {"sha": "87d46a08d9aa64817ebd5740fe2022c40cee3fd7", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -21,6 +21,7 @@\n \n #![deny(rust_2018_idioms)]\n #![deny(internal)]\n+#![deny(unused_lifetimes)]\n \n #[macro_use]\n extern crate rustc;"}, {"sha": "45cef61064d7870a612f1ac52a56b37f4522bb5b", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -202,11 +202,7 @@ fn report_bin_hex_error(\n //  - `uX` => `uY`\n //\n // No suggestion for: `isize`, `usize`.\n-fn get_type_suggestion<'a>(\n-    t: Ty<'_>,\n-    val: u128,\n-    negative: bool,\n-) -> Option<String> {\n+fn get_type_suggestion(t: Ty<'_>, val: u128, negative: bool) -> Option<String> {\n     use syntax::ast::IntTy::*;\n     use syntax::ast::UintTy::*;\n     macro_rules! find_fit {"}, {"sha": "e49ca8acf6702e579ba10a0e60744eb2798b59b9", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -16,6 +16,7 @@\n \n #![deny(rust_2018_idioms)]\n #![deny(internal)]\n+#![deny(unused_lifetimes)]\n \n extern crate libc;\n #[allow(unused_extern_crates)]"}, {"sha": "516eb6d2941e52602c913a1d766fdd9e100136be", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -258,7 +258,7 @@ impl<'cx, 'tcx, 'gcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx, 'gcx> {\n     }\n }\n \n-impl<'cg, 'cx, 'tcx, 'gcx> InvalidationGenerator<'cx, 'tcx, 'gcx> {\n+impl<'cx, 'tcx, 'gcx> InvalidationGenerator<'cx, 'tcx, 'gcx> {\n     /// Simulates mutation of a place.\n     fn mutate_place(\n         &mut self,"}, {"sha": "a11e5d9a5568728c13ebee24b79bd1f659b39258", "filename": "src/librustc_mir/borrow_check/path_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -10,7 +10,7 @@ use rustc_data_structures::graph::dominators::Dominators;\n /// Returns `true` if the borrow represented by `kind` is\n /// allowed to be split into separate Reservation and\n /// Activation phases.\n-pub(super) fn allow_two_phase_borrow<'a, 'tcx, 'gcx: 'tcx>(kind: BorrowKind) -> bool {\n+pub(super) fn allow_two_phase_borrow(kind: BorrowKind) -> bool {\n     kind.allows_two_phase_borrow()\n }\n "}, {"sha": "0aabebcf9dc2c17636c086a61b7a2a4517c7ec68", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -1575,11 +1575,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n     /// Append `AscribeUserType` statements onto the end of `block`\n     /// for each ascription\n-    fn ascribe_types<'pat>(\n-        &mut self,\n-        block: BasicBlock,\n-        ascriptions: &[Ascription<'tcx>],\n-    ) {\n+    fn ascribe_types(&mut self, block: BasicBlock, ascriptions: &[Ascription<'tcx>]) {\n         for ascription in ascriptions {\n             let source_info = self.source_info(ascription.span);\n "}, {"sha": "c767fff9253222347b40af0452252a5714211050", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -463,7 +463,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     /// that it *doesn't* apply. For now, we return false, indicate that the\n     /// test does not apply to this candidate, but it might be we can get\n     /// tighter match code if we do something a bit different.\n-    pub fn sort_candidate<'pat, 'cand>(\n+    pub fn sort_candidate<'pat>(\n         &mut self,\n         test_place: &Place<'tcx>,\n         test: &Test<'tcx>,"}, {"sha": "4e13291c787da81245ae24138452d5f4fafb7850", "filename": "src/librustc_mir/interpret/snapshot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -315,7 +315,7 @@ struct FrameSnapshot<'a, 'tcx: 'a> {\n     stmt: usize,\n }\n \n-impl_stable_hash_for!(impl<'mir, 'tcx: 'mir> for struct Frame<'mir, 'tcx> {\n+impl_stable_hash_for!(impl<> for struct Frame<'mir, 'tcx> {\n     body,\n     instance,\n     span,\n@@ -422,7 +422,7 @@ impl<'a, 'mir, 'tcx> Hash for InterpSnapshot<'a, 'mir, 'tcx>\n     }\n }\n \n-impl_stable_hash_for!(impl<'tcx, 'b, 'mir> for struct InterpSnapshot<'b, 'mir, 'tcx> {\n+impl_stable_hash_for!(impl<> for struct InterpSnapshot<'_, 'mir, 'tcx> {\n     // Not hashing memory: Avoid hashing memory all the time during execution\n     memory -> _,\n     stack,"}, {"sha": "6768d9ec6bc1999d200e32d70247aa1fb49a2bfd", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -81,7 +81,7 @@ pub struct RefTracking<T> {\n     pub todo: Vec<(T, Vec<PathElem>)>,\n }\n \n-impl<'tcx, T: Copy + Eq + Hash> RefTracking<T> {\n+impl<T: Copy + Eq + Hash> RefTracking<T> {\n     pub fn new(op: T) -> Self {\n         let mut ref_tracking = RefTracking {\n             seen: FxHashSet::default(),"}, {"sha": "a7cbe84330d899a9e10a5b760cb3649f928361a3", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -29,6 +29,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n \n #![deny(rust_2018_idioms)]\n #![deny(internal)]\n+#![deny(unused_lifetimes)]\n #![allow(explicit_outlives_requirements)]\n \n #[macro_use] extern crate log;"}, {"sha": "706ace0c1f1bca4354feb53234c24e6bfb0c2b4b", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -907,7 +907,7 @@ fn find_vtable_types_for_unsizing<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n }\n \n-fn create_fn_mono_item<'a, 'tcx>(instance: Instance<'tcx>) -> MonoItem<'tcx> {\n+fn create_fn_mono_item<'tcx>(instance: Instance<'tcx>) -> MonoItem<'tcx> {\n     debug!(\"create_fn_mono_item(instance={})\", instance);\n     MonoItem::Fn(instance)\n }"}, {"sha": "b8077d224e4efd9bc2cf1121d53d5d155990af9c", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -32,7 +32,7 @@ pub struct UnsafetyChecker<'a, 'tcx: 'a> {\n     inherited_blocks: Vec<(hir::HirId, bool)>,\n }\n \n-impl<'a, 'gcx, 'tcx> UnsafetyChecker<'a, 'tcx> {\n+impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n     fn new(\n         const_context: bool,\n         min_const_fn: bool,"}, {"sha": "5ac8a41ffeeafe62d3a98e0b5f07bb3934ab7f9f", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -829,14 +829,14 @@ fn create_generator_resume_function<'a, 'tcx>(\n     dump_mir(tcx, None, \"generator_resume\", &0, source, body, |_, _| Ok(()) );\n }\n \n-fn source_info<'a, 'tcx>(body: &Body<'tcx>) -> SourceInfo {\n+fn source_info<'tcx>(body: &Body<'tcx>) -> SourceInfo {\n     SourceInfo {\n         span: body.span,\n         scope: OUTERMOST_SOURCE_SCOPE,\n     }\n }\n \n-fn insert_clean_drop<'a, 'tcx>(body: &mut Body<'tcx>) -> BasicBlock {\n+fn insert_clean_drop<'tcx>(body: &mut Body<'tcx>) -> BasicBlock {\n     let return_block = insert_term_block(body, TerminatorKind::Return);\n \n     // Create a block to destroy an unresumed generators. This can only destroy upvars."}, {"sha": "4d1c90bc56d9e4ff7689dc04a67e4dcc9cfe76e2", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -323,7 +323,7 @@ impl MirPass for SimplifyLocals {\n }\n \n /// Construct the mapping while swapping out unused stuff out from the `vec`.\n-fn make_local_map<'tcx, V>(\n+fn make_local_map<V>(\n     vec: &mut IndexVec<Local, V>,\n     mask: BitSet<Local>,\n ) -> IndexVec<Local, Option<Local>> {"}, {"sha": "b8ce31d0adfdc37502bb997644d5ea3b8497f9ef", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 26, "deletions": 35, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -119,7 +119,8 @@ pub fn elaborate_drop<'b, 'tcx, D>(\n }\n \n impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n-    where D: DropElaborator<'b, 'tcx>\n+where\n+    D: DropElaborator<'b, 'tcx>,\n {\n     fn place_ty(&self, place: &Place<'tcx>) -> Ty<'tcx> {\n         place.ty(self.elaborator.body(), self.tcx()).ty\n@@ -147,7 +148,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n     //\n     // FIXME: I think we should just control the flags externally,\n     // and then we do not need this machinery.\n-    pub fn elaborate_drop<'a>(&mut self, bb: BasicBlock) {\n+    pub fn elaborate_drop(&mut self, bb: BasicBlock) {\n         debug!(\"elaborate_drop({:?})\", self);\n         let style = self.elaborator.drop_style(self.path, DropFlagMode::Deep);\n         debug!(\"elaborate_drop({:?}): live - {:?}\", self, style);\n@@ -285,12 +286,12 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n     ///\n     /// NOTE: this does not clear the master drop flag, so you need\n     /// to point succ/unwind on a `drop_ladder_bottom`.\n-    fn drop_ladder<'a>(&mut self,\n-                       fields: Vec<(Place<'tcx>, Option<D::Path>)>,\n-                       succ: BasicBlock,\n-                       unwind: Unwind)\n-                       -> (BasicBlock, Unwind)\n-    {\n+    fn drop_ladder(\n+        &mut self,\n+        fields: Vec<(Place<'tcx>, Option<D::Path>)>,\n+        succ: BasicBlock,\n+        unwind: Unwind,\n+    ) -> (BasicBlock, Unwind) {\n         debug!(\"drop_ladder({:?}, {:?})\", self, fields);\n \n         let mut fields = fields;\n@@ -314,9 +315,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         (*normal_ladder.last().unwrap(), *unwind_ladder.last().unwrap())\n     }\n \n-    fn open_drop_for_tuple<'a>(&mut self, tys: &[Ty<'tcx>])\n-                               -> BasicBlock\n-    {\n+    fn open_drop_for_tuple(&mut self, tys: &[Ty<'tcx>]) -> BasicBlock {\n         debug!(\"open_drop_for_tuple({:?}, {:?})\", self, tys);\n \n         let fields = tys.iter().enumerate().map(|(i, &ty)| {\n@@ -328,9 +327,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         self.drop_ladder(fields, succ, unwind).0\n     }\n \n-    fn open_drop_for_box<'a>(&mut self, adt: &'tcx ty::AdtDef, substs: SubstsRef<'tcx>)\n-                             -> BasicBlock\n-    {\n+    fn open_drop_for_box(&mut self, adt: &'tcx ty::AdtDef, substs: SubstsRef<'tcx>) -> BasicBlock {\n         debug!(\"open_drop_for_box({:?}, {:?}, {:?})\", self, adt, substs);\n \n         let interior = self.place.clone().deref();\n@@ -346,8 +343,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         self.drop_subpath(&interior, interior_path, succ, unwind_succ)\n     }\n \n-    fn open_drop_for_adt<'a>(&mut self, adt: &'tcx ty::AdtDef, substs: SubstsRef<'tcx>)\n-                             -> BasicBlock {\n+    fn open_drop_for_adt(&mut self, adt: &'tcx ty::AdtDef, substs: SubstsRef<'tcx>) -> BasicBlock {\n         debug!(\"open_drop_for_adt({:?}, {:?}, {:?})\", self, adt, substs);\n         if adt.variants.len() == 0 {\n             return self.elaborator.patch().new_block(BasicBlockData {\n@@ -505,9 +501,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         self.drop_flag_test_block(switch_block, succ, unwind)\n     }\n \n-    fn destructor_call_block<'a>(&mut self, (succ, unwind): (BasicBlock, Unwind))\n-                                 -> BasicBlock\n-    {\n+    fn destructor_call_block(&mut self, (succ, unwind): (BasicBlock, Unwind)) -> BasicBlock {\n         debug!(\"destructor_call_block({:?}, {:?})\", self, succ);\n         let tcx = self.tcx();\n         let drop_trait = tcx.lang_items().drop_trait().unwrap();\n@@ -787,7 +781,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n     ///\n     /// This creates a \"drop ladder\" that drops the needed fields of the\n     /// ADT, both in the success case or if one of the destructors fail.\n-    fn open_drop<'a>(&mut self) -> BasicBlock {\n+    fn open_drop(&mut self) -> BasicBlock {\n         let ty = self.place_ty(self.place);\n         match ty.sty {\n             ty::Closure(def_id, substs) => {\n@@ -837,11 +831,12 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n     /// if FLAG(self.path)\n     ///     if let Some(mode) = mode: FLAG(self.path)[mode] = false\n     ///     drop(self.place)\n-    fn complete_drop<'a>(&mut self,\n-                         drop_mode: Option<DropFlagMode>,\n-                         succ: BasicBlock,\n-                         unwind: Unwind) -> BasicBlock\n-    {\n+    fn complete_drop(\n+        &mut self,\n+        drop_mode: Option<DropFlagMode>,\n+        succ: BasicBlock,\n+        unwind: Unwind,\n+    ) -> BasicBlock {\n         debug!(\"complete_drop({:?},{:?})\", self, drop_mode);\n \n         let drop_block = self.drop_block(succ, unwind);\n@@ -867,7 +862,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         block\n     }\n \n-    fn elaborated_drop_block<'a>(&mut self) -> BasicBlock {\n+    fn elaborated_drop_block(&mut self) -> BasicBlock {\n         debug!(\"elaborated_drop_block({:?})\", self);\n         let unwind = self.unwind; // FIXME(#43234)\n         let succ = self.succ;\n@@ -876,7 +871,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         blk\n     }\n \n-    fn box_free_block<'a>(\n+    fn box_free_block(\n         &mut self,\n         adt: &'tcx ty::AdtDef,\n         substs: SubstsRef<'tcx>,\n@@ -887,12 +882,12 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         self.drop_flag_test_block(block, target, unwind)\n     }\n \n-    fn unelaborated_free_block<'a>(\n+    fn unelaborated_free_block(\n         &mut self,\n         adt: &'tcx ty::AdtDef,\n         substs: SubstsRef<'tcx>,\n         target: BasicBlock,\n-        unwind: Unwind\n+        unwind: Unwind,\n     ) -> BasicBlock {\n         let tcx = self.tcx();\n         let unit_temp = Place::Base(PlaceBase::Local(self.new_temp(tcx.mk_unit())));\n@@ -917,7 +912,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         free_block\n     }\n \n-    fn drop_block<'a>(&mut self, target: BasicBlock, unwind: Unwind) -> BasicBlock {\n+    fn drop_block(&mut self, target: BasicBlock, unwind: Unwind) -> BasicBlock {\n         let block = TerminatorKind::Drop {\n             location: self.place.clone(),\n             target,\n@@ -947,11 +942,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         }\n     }\n \n-    fn new_block<'a>(&mut self,\n-                     unwind: Unwind,\n-                     k: TerminatorKind<'tcx>)\n-                     -> BasicBlock\n-    {\n+    fn new_block(&mut self, unwind: Unwind, k: TerminatorKind<'tcx>) -> BasicBlock {\n         self.elaborator.patch().new_block(BasicBlockData {\n             statements: vec![],\n             terminator: Some(Terminator {"}, {"sha": "82ec5ab5f8a6afa5d164192d756d0a9eb0c8a075", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -109,7 +109,7 @@ pub enum DefUse {\n     Drop,\n }\n \n-pub fn categorize<'tcx>(context: PlaceContext) -> Option<DefUse> {\n+pub fn categorize(context: PlaceContext) -> Option<DefUse> {\n     match context {\n         ///////////////////////////////////////////////////////////////////////////\n         // DEFS"}, {"sha": "fbd6ddf84c33aab69b988fd208a478ed341a0976", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -13,6 +13,7 @@\n \n #![deny(rust_2018_idioms)]\n #![deny(internal)]\n+#![deny(unused_lifetimes)]\n \n #[macro_use]\n extern crate rustc;"}, {"sha": "42b70dd181b3cfa2ed56f213d24140e205ac5429", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -2,6 +2,7 @@\n \n #![deny(rust_2018_idioms)]\n #![deny(internal)]\n+#![deny(unused_lifetimes)]\n \n #![feature(nll)]\n #![feature(rustc_diagnostic_macros)]"}, {"sha": "fec7bf3b273ee891d77e134da25a3c5cad89a5e5", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -12,6 +12,7 @@\n \n #![deny(rust_2018_idioms)]\n #![deny(internal)]\n+#![deny(unused_lifetimes)]\n \n pub use rustc::hir::def::{Namespace, PerNS};\n "}, {"sha": "30b0250cec1825ae068980c94c3354386dc8e471", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -2,6 +2,7 @@\n #![feature(nll)]\n #![deny(rust_2018_idioms)]\n #![deny(internal)]\n+#![deny(unused_lifetimes)]\n #![allow(unused_attributes)]\n \n #![recursion_limit=\"256\"]"}, {"sha": "77493fbc5dfc71e9da5cd16522b571db8db8e19a", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -583,7 +583,7 @@ pub enum Primitive {\n     Pointer\n }\n \n-impl<'a, 'tcx> Primitive {\n+impl Primitive {\n     pub fn size<C: HasDataLayout>(self, cx: &C) -> Size {\n         let dl = cx.data_layout();\n "}, {"sha": "1bebe420251fda2520ec7d9d9bf9ebcc755102d1", "filename": "src/librustc_target/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_target%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_target%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Flib.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -17,6 +17,7 @@\n \n #![deny(rust_2018_idioms)]\n #![deny(internal)]\n+#![deny(unused_lifetimes)]\n \n #[macro_use] extern crate log;\n "}, {"sha": "bf61a558a46f6cc59d4439c59ca410573b891124", "filename": "src/librustc_traits/chalk_context/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -575,7 +575,7 @@ impl ExClauseFold<'tcx> for ChalkArenas<'tcx> {\n         }\n     }\n \n-    fn visit_ex_clause_with<'gcx: 'tcx, V: TypeVisitor<'tcx>>(\n+    fn visit_ex_clause_with<V: TypeVisitor<'tcx>>(\n         ex_clause: &ExClause<Self>,\n         visitor: &mut V,\n     ) -> bool {"}, {"sha": "7311fd96dadc78f7e271f23eb7dcd1e8984d80e3", "filename": "src/librustc_traits/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_traits%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_traits%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flib.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -3,6 +3,7 @@\n \n #![deny(rust_2018_idioms)]\n #![deny(internal)]\n+#![deny(unused_lifetimes)]\n \n #![feature(crate_visibility_modifier)]\n #![feature(in_band_lifetimes)]"}, {"sha": "14dec423c57a9da21f227730d01e5d15a3705cba", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -72,6 +72,7 @@ This API is completely unstable and subject to change.\n \n #![deny(rust_2018_idioms)]\n #![deny(internal)]\n+#![deny(unused_lifetimes)]\n #![allow(explicit_outlives_requirements)]\n \n #[macro_use] extern crate log;"}, {"sha": "7b58312a5edef70ad55a04e8a2f76617ca901602", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -341,7 +341,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n             .collect()\n     }\n \n-    fn make_final_bounds<'b, 'c, 'cx>(\n+    fn make_final_bounds(\n         &self,\n         ty_to_bounds: FxHashMap<Type, FxHashSet<GenericBound>>,\n         ty_to_fn: FxHashMap<Type, (Option<PolyTrait>, Option<Type>)>,"}, {"sha": "e44c35b55ffadca8325835d77034d3cfd98fe2e7", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -1298,7 +1298,7 @@ impl Clean<Constant> for hir::ConstArg {\n     }\n }\n \n-impl<'tcx> Clean<Lifetime> for ty::GenericParamDef {\n+impl Clean<Lifetime> for ty::GenericParamDef {\n     fn clean(&self, _cx: &DocContext<'_>) -> Lifetime {\n         Lifetime(self.name.to_string())\n     }\n@@ -2039,7 +2039,7 @@ impl<'a, A: Copy> Clean<FnDecl> for (&'a hir::FnDecl, A)\n     }\n }\n \n-impl<'a, 'tcx> Clean<FnDecl> for (DefId, ty::PolyFnSig<'tcx>) {\n+impl<'tcx> Clean<FnDecl> for (DefId, ty::PolyFnSig<'tcx>) {\n     fn clean(&self, cx: &DocContext<'_>) -> FnDecl {\n         let (did, sig) = *self;\n         let mut names = if cx.tcx.hir().as_local_hir_id(did).is_some() {\n@@ -2276,7 +2276,7 @@ impl Clean<Item> for hir::ImplItem {\n     }\n }\n \n-impl<'tcx> Clean<Item> for ty::AssocItem {\n+impl Clean<Item> for ty::AssocItem {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n         let inner = match self.kind {\n             ty::AssocKind::Const => {\n@@ -3174,7 +3174,7 @@ impl Clean<Item> for hir::StructField {\n     }\n }\n \n-impl<'tcx> Clean<Item> for ty::FieldDef {\n+impl Clean<Item> for ty::FieldDef {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n         Item {\n             name: Some(self.ident.name).clean(cx),\n@@ -3342,7 +3342,7 @@ impl Clean<Item> for doctree::Variant {\n     }\n }\n \n-impl<'tcx> Clean<Item> for ty::VariantDef {\n+impl Clean<Item> for ty::VariantDef {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n         let kind = match self.ctor_kind {\n             CtorKind::Const => VariantKind::CLike,"}, {"sha": "362706820593e7137bd8ce982788c02045b916d9", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -1764,7 +1764,7 @@ impl DocFolder for Cache {\n     }\n }\n \n-impl<'a> Cache {\n+impl Cache {\n     fn generics(&mut self, generics: &clean::Generics) {\n         for param in &generics.params {\n             match param.kind {"}, {"sha": "3b4d65352a34c69c1540c662bd3a06d5b9f359d6", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -1,5 +1,6 @@\n #![deny(rust_2018_idioms)]\n #![deny(internal)]\n+#![deny(unused_lifetimes)]\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"https://play.rust-lang.org/\")]"}, {"sha": "55db8da327673adda805db0b50eb807054f52716", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -9,6 +9,7 @@\n \n #![deny(rust_2018_idioms)]\n #![deny(internal)]\n+#![deny(unused_lifetimes)]\n \n #![feature(bind_by_move_pattern_guards)]\n #![feature(crate_visibility_modifier)]"}, {"sha": "e952515bfe0ebf978b68d3fb0f40ec6a14cd65e4", "filename": "src/libsyntax_ext/cfg.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibsyntax_ext%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibsyntax_ext%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fcfg.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -12,10 +12,11 @@ use syntax::tokenstream;\n use syntax::parse::token;\n use syntax_pos::Span;\n \n-pub fn expand_cfg<'cx>(cx: &mut ExtCtxt<'_>,\n-                       sp: Span,\n-                       tts: &[tokenstream::TokenTree])\n-                       -> Box<dyn base::MacResult + 'static> {\n+pub fn expand_cfg(\n+    cx: &mut ExtCtxt<'_>,\n+    sp: Span,\n+    tts: &[tokenstream::TokenTree],\n+) -> Box<dyn base::MacResult + 'static> {\n     let sp = sp.apply_mark(cx.current_expansion.mark);\n \n     match parse_cfg(cx, sp, tts) {"}, {"sha": "1627f99f616ff9bc4cf51da0bc5e93df3bdd15ff", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -4,6 +4,7 @@\n \n #![deny(rust_2018_idioms)]\n #![deny(internal)]\n+#![deny(unused_lifetimes)]\n \n #![feature(in_band_lifetimes)]\n #![feature(proc_macro_diagnostic)]"}, {"sha": "649ab81198d2ab28f1f46a0398dd0f4bde8f8db4", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3656ce9a2212fad872605b7a4ee103a155e9f3/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=5f3656ce9a2212fad872605b7a4ee103a155e9f3", "patch": "@@ -8,6 +8,7 @@\n \n #![deny(rust_2018_idioms)]\n #![deny(internal)]\n+#![deny(unused_lifetimes)]\n \n #![feature(const_fn)]\n #![feature(crate_visibility_modifier)]"}]}