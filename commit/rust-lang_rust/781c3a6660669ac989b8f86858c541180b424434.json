{"sha": "781c3a6660669ac989b8f86858c541180b424434", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4MWMzYTY2NjA2NjlhYzk4OWI4Zjg2ODU4YzU0MTE4MGI0MjQ0MzQ=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-06-11T18:38:28Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-06-11T18:38:28Z"}, "message": "Update for changes in rustc nightly.", "tree": {"sha": "49674e9c8f2b919ced3e9eaf3d2288db26547e2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49674e9c8f2b919ced3e9eaf3d2288db26547e2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/781c3a6660669ac989b8f86858c541180b424434", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/781c3a6660669ac989b8f86858c541180b424434", "html_url": "https://github.com/rust-lang/rust/commit/781c3a6660669ac989b8f86858c541180b424434", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/781c3a6660669ac989b8f86858c541180b424434/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8d0812ed15bbd8d8e004eb5c09fdacdd0a205a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8d0812ed15bbd8d8e004eb5c09fdacdd0a205a0", "html_url": "https://github.com/rust-lang/rust/commit/a8d0812ed15bbd8d8e004eb5c09fdacdd0a205a0"}], "stats": {"total": 61, "additions": 40, "deletions": 21}, "files": [{"sha": "240a2144807dae9f8defff19cc6f271ad863f33f", "filename": "Cargo.lock", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/781c3a6660669ac989b8f86858c541180b424434/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/781c3a6660669ac989b8f86858c541180b424434/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=781c3a6660669ac989b8f86858c541180b424434", "patch": "@@ -3,7 +3,7 @@ name = \"miri\"\n version = \"0.1.0\"\n dependencies = [\n  \"byteorder 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiletest_rs 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiletest_rs 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log_settings 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -24,7 +24,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"compiletest_rs\"\n-version = \"0.1.2\"\n+version = \"0.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -55,7 +55,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.11\"\n+version = \"0.2.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -76,7 +76,7 @@ name = \"memchr\"\n version = \"0.1.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -102,7 +102,7 @@ version = \"2.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]"}, {"sha": "123428bcad191883357aa0aaacf03bcea993456a", "filename": "src/bin/miri.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/781c3a6660669ac989b8f86858c541180b424434/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781c3a6660669ac989b8f86858c541180b424434/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=781c3a6660669ac989b8f86858c541180b424434", "patch": "@@ -90,11 +90,11 @@ fn interpret_start_points<'a, 'tcx>(\n \n fn report(tcx: TyCtxt, ecx: &EvalContext, e: EvalError) {\n     let frame = ecx.stack().last().expect(\"stackframe was empty\");\n-    let block = frame.mir.basic_block_data(frame.next_block);\n+    let block = &frame.mir.basic_blocks()[frame.next_block];\n     let span = if frame.stmt < block.statements.len() {\n-        block.statements[frame.stmt].span\n+        block.statements[frame.stmt].source_info.span\n     } else {\n-        block.terminator().span\n+        block.terminator().source_info.span\n     };\n     let mut err = tcx.sess.struct_span_err(span, &e.to_string());\n     for &Frame { def_id, substs, span, .. } in ecx.stack().iter().rev() {\n@@ -105,7 +105,7 @@ fn report(tcx: TyCtxt, ecx: &EvalContext, e: EvalError) {\n         impl<'tcx> fmt::Display for Instance<'tcx> {\n             fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n                 ppaux::parameterized(f, self.1, self.0, ppaux::Ns::Value, &[],\n-                    |tcx| tcx.lookup_item_type(self.0).generics)\n+                    |tcx| Some(tcx.lookup_item_type(self.0).generics))\n             }\n         }\n         err.span_note(span, &format!(\"inside call to {}\", Instance(def_id, substs)));"}, {"sha": "b3de02e55b02563f54e0921d058ac6f87283ea2b", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/781c3a6660669ac989b8f86858c541180b424434/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781c3a6660669ac989b8f86858c541180b424434/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=781c3a6660669ac989b8f86858c541180b424434", "patch": "@@ -8,6 +8,7 @@ use rustc::ty::layout::{self, Layout, Size};\n use rustc::ty::subst::{self, Subst, Substs};\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::util::nodemap::DefIdMap;\n+use rustc_data_structures::indexed_vec::Idx;\n use std::cell::RefCell;\n use std::ops::Deref;\n use std::rc::Rc;\n@@ -118,7 +119,7 @@ struct ConstantId<'tcx> {\n \n #[derive(Clone, Debug, Eq, PartialEq, Hash)]\n enum ConstantKind {\n-    Promoted(usize),\n+    Promoted(mir::Promoted),\n     /// Statics, constants and associated constants\n     Global,\n }\n@@ -485,7 +486,10 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                                 }\n \n                                 let mir = self.load_mir(resolved_def_id);\n-                                self.push_stack_frame(def_id, terminator.span, mir, resolved_substs, return_ptr);\n+                                self.push_stack_frame(\n+                                    def_id, terminator.source_info.span, mir, resolved_substs,\n+                                    return_ptr\n+                                );\n \n                                 for (i, (src, src_ty)) in arg_srcs.into_iter().enumerate() {\n                                     let dest = self.frame().locals[i];\n@@ -501,14 +505,26 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 }\n             }\n \n-            Drop { ref value, target, .. } => {\n-                let ptr = self.eval_lvalue(value)?.to_ptr();\n-                let ty = self.lvalue_ty(value);\n+            Drop { ref location, target, .. } => {\n+                let ptr = self.eval_lvalue(location)?.to_ptr();\n+                let ty = self.lvalue_ty(location);\n                 self.drop(ptr, ty)?;\n                 self.frame_mut().next_block = target;\n             }\n \n+            Assert { ref cond, expected, ref msg, target, cleanup } => {\n+                let actual_ptr = self.eval_operand(cond)?;\n+                let actual = self.memory.read_bool(actual_ptr)?;\n+                if actual == expected {\n+                    self.frame_mut().next_block = target;\n+                } else {\n+                    panic!(\"unimplemented: jump to {:?} and print {:?}\", cleanup, msg);\n+                }\n+            }\n+\n+            DropAndReplace { .. } => unimplemented!(),\n             Resume => unimplemented!(),\n+            Unreachable => unimplemented!(),\n         }\n \n         Ok(())\n@@ -845,6 +861,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 self.memory.write_primval(dest, val)?;\n             }\n \n+            CheckedBinaryOp(..) => unimplemented!(),\n+\n             UnaryOp(un_op, ref operand) => {\n                 let ptr = self.eval_operand(operand)?;\n                 let ty = self.operand_ty(operand);\n@@ -1018,7 +1036,6 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 }\n             }\n \n-            Slice { .. } => unimplemented!(),\n             InlineAsm { .. } => unimplemented!(),\n         }\n \n@@ -1130,9 +1147,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         let ptr = match *lvalue {\n             ReturnPointer => self.frame().return_ptr\n                 .expect(\"ReturnPointer used in a function with no return value\"),\n-            Arg(i) => self.frame().locals[i as usize],\n-            Var(i) => self.frame().locals[self.frame().var_offset + i as usize],\n-            Temp(i) => self.frame().locals[self.frame().temp_offset + i as usize],\n+            Arg(i) => self.frame().locals[i.index()],\n+            Var(i) => self.frame().locals[self.frame().var_offset + i.index()],\n+            Temp(i) => self.frame().locals[self.frame().temp_offset + i.index()],\n \n             Static(def_id) => {\n                 let substs = self.tcx.mk_substs(subst::Substs::empty());\n@@ -1217,6 +1234,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     }\n \n                     ConstantIndex { .. } => unimplemented!(),\n+                    Subslice { .. } => unimplemented!(),\n                 }\n             }\n         };"}, {"sha": "cba76eaf5a3ceaa7896839555cc9551720edd755", "filename": "src/interpreter/stepper.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/781c3a6660669ac989b8f86858c541180b424434/src%2Finterpreter%2Fstepper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781c3a6660669ac989b8f86858c541180b424434/src%2Finterpreter%2Fstepper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fstepper.rs?ref=781c3a6660669ac989b8f86858c541180b424434", "patch": "@@ -51,12 +51,12 @@ impl<'ecx, 'a, 'tcx> Stepper<'ecx, 'a, 'tcx> {\n         let block = self.ecx.frame().next_block;\n         let stmt = self.ecx.frame().stmt;\n         let mir = self.ecx.mir();\n-        let basic_block = mir.basic_block_data(block);\n+        let basic_block = &mir.basic_blocks()[block];\n \n         if let Some(ref stmt) = basic_block.statements.get(stmt) {\n             let current_stack = self.ecx.stack.len();\n             ConstantExtractor {\n-                span: stmt.span,\n+                span: stmt.source_info.span,\n                 substs: self.ecx.substs(),\n                 def_id: self.ecx.frame().def_id,\n                 ecx: self.ecx,\n@@ -75,7 +75,7 @@ impl<'ecx, 'a, 'tcx> Stepper<'ecx, 'a, 'tcx> {\n         let terminator = basic_block.terminator();\n         let current_stack = self.ecx.stack.len();\n         ConstantExtractor {\n-            span: terminator.span,\n+            span: terminator.source_info.span,\n             substs: self.ecx.substs(),\n             def_id: self.ecx.frame().def_id,\n             ecx: self.ecx,"}, {"sha": "9d2203d115c10f444feafdafdf423805eb269cc2", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/781c3a6660669ac989b8f86858c541180b424434/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781c3a6660669ac989b8f86858c541180b424434/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=781c3a6660669ac989b8f86858c541180b424434", "patch": "@@ -11,6 +11,7 @@\n \n // From rustc.\n #[macro_use] extern crate rustc;\n+extern crate rustc_data_structures;\n extern crate rustc_mir;\n extern crate syntax;\n #[macro_use] extern crate log;"}]}