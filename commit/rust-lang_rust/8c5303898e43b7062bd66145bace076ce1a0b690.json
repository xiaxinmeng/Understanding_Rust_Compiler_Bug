{"sha": "8c5303898e43b7062bd66145bace076ce1a0b690", "node_id": "C_kwDOAAsO6NoAKDhjNTMwMzg5OGU0M2I3MDYyYmQ2NjE0NWJhY2UwNzZjZTFhMGI2OTA", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-10T01:22:01Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-11T00:54:01Z"}, "message": "Simplify `rustc_hir::intravisit::Visitor::visit_variant_data`.\n\nIt has four arguments that are never used. This avoids lots of argument\npassing in functions that feed into `visit_variant_data`.", "tree": {"sha": "4cb2dc8dbc840ad312ab46fed2d58e062f1825d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cb2dc8dbc840ad312ab46fed2d58e062f1825d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c5303898e43b7062bd66145bace076ce1a0b690", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c5303898e43b7062bd66145bace076ce1a0b690", "html_url": "https://github.com/rust-lang/rust/commit/8c5303898e43b7062bd66145bace076ce1a0b690", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c5303898e43b7062bd66145bace076ce1a0b690/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f03ce30962cf1b2a5158667eabae8bf6e8d1cb03", "url": "https://api.github.com/repos/rust-lang/rust/commits/f03ce30962cf1b2a5158667eabae8bf6e8d1cb03", "html_url": "https://github.com/rust-lang/rust/commit/f03ce30962cf1b2a5158667eabae8bf6e8d1cb03"}], "stats": {"total": 148, "additions": 32, "deletions": 116}, "files": [{"sha": "e08c1d063c10544aca6fd83785b103c4597c9d30", "filename": "compiler/rustc_ast_lowering/src/index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8c5303898e43b7062bd66145bace076ce1a0b690/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c5303898e43b7062bd66145bace076ce1a0b690/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs?ref=8c5303898e43b7062bd66145bace076ce1a0b690", "patch": "@@ -295,14 +295,14 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n         self.insert(lifetime.span, lifetime.hir_id, Node::Lifetime(lifetime));\n     }\n \n-    fn visit_variant(&mut self, v: &'hir Variant<'hir>, g: &'hir Generics<'hir>, item_id: HirId) {\n+    fn visit_variant(&mut self, v: &'hir Variant<'hir>) {\n         self.insert(v.span, v.id, Node::Variant(v));\n         self.with_parent(v.id, |this| {\n             // Register the constructor of this variant.\n             if let Some(ctor_hir_id) = v.data.ctor_hir_id() {\n                 this.insert(v.span, ctor_hir_id, Node::Ctor(&v.data));\n             }\n-            intravisit::walk_variant(this, v, g, item_id);\n+            intravisit::walk_variant(this, v);\n         });\n     }\n "}, {"sha": "cd283e7651b308167d2acaa35347d1277b589fee", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 10, "deletions": 41, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/8c5303898e43b7062bd66145bace076ce1a0b690/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c5303898e43b7062bd66145bace076ce1a0b690/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=8c5303898e43b7062bd66145bace076ce1a0b690", "patch": "@@ -385,30 +385,17 @@ pub trait Visitor<'v>: Sized {\n     fn visit_poly_trait_ref(&mut self, t: &'v PolyTraitRef<'v>, m: TraitBoundModifier) {\n         walk_poly_trait_ref(self, t, m)\n     }\n-    fn visit_variant_data(\n-        &mut self,\n-        s: &'v VariantData<'v>,\n-        _: Symbol,\n-        _: &'v Generics<'v>,\n-        _parent_id: HirId,\n-        _: Span,\n-    ) {\n+    fn visit_variant_data(&mut self, s: &'v VariantData<'v>) {\n         walk_struct_def(self, s)\n     }\n     fn visit_field_def(&mut self, s: &'v FieldDef<'v>) {\n         walk_field_def(self, s)\n     }\n-    fn visit_enum_def(\n-        &mut self,\n-        enum_definition: &'v EnumDef<'v>,\n-        generics: &'v Generics<'v>,\n-        item_id: HirId,\n-        _: Span,\n-    ) {\n-        walk_enum_def(self, enum_definition, generics, item_id)\n+    fn visit_enum_def(&mut self, enum_definition: &'v EnumDef<'v>, item_id: HirId, _: Span) {\n+        walk_enum_def(self, enum_definition, item_id)\n     }\n-    fn visit_variant(&mut self, v: &'v Variant<'v>, g: &'v Generics<'v>, item_id: HirId) {\n-        walk_variant(self, v, g, item_id)\n+    fn visit_variant(&mut self, v: &'v Variant<'v>) {\n+        walk_variant(self, v)\n     }\n     fn visit_label(&mut self, label: &'v Label) {\n         walk_label(self, label)\n@@ -572,7 +559,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item<'v>) {\n         ItemKind::Enum(ref enum_definition, ref generics) => {\n             visitor.visit_generics(generics);\n             // `visit_enum_def()` takes care of visiting the `Item`'s `HirId`.\n-            visitor.visit_enum_def(enum_definition, generics, item.hir_id(), item.span)\n+            visitor.visit_enum_def(enum_definition, item.hir_id(), item.span)\n         }\n         ItemKind::Impl(Impl {\n             unsafety: _,\n@@ -595,13 +582,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item<'v>) {\n         | ItemKind::Union(ref struct_definition, ref generics) => {\n             visitor.visit_generics(generics);\n             visitor.visit_id(item.hir_id());\n-            visitor.visit_variant_data(\n-                struct_definition,\n-                item.ident.name,\n-                generics,\n-                item.hir_id(),\n-                item.span,\n-            );\n+            visitor.visit_variant_data(struct_definition);\n         }\n         ItemKind::Trait(.., ref generics, bounds, trait_item_refs) => {\n             visitor.visit_id(item.hir_id());\n@@ -649,28 +630,16 @@ pub fn walk_use<'v, V: Visitor<'v>>(visitor: &mut V, path: &'v Path<'v>, hir_id:\n pub fn walk_enum_def<'v, V: Visitor<'v>>(\n     visitor: &mut V,\n     enum_definition: &'v EnumDef<'v>,\n-    generics: &'v Generics<'v>,\n     item_id: HirId,\n ) {\n     visitor.visit_id(item_id);\n-    walk_list!(visitor, visit_variant, enum_definition.variants, generics, item_id);\n+    walk_list!(visitor, visit_variant, enum_definition.variants);\n }\n \n-pub fn walk_variant<'v, V: Visitor<'v>>(\n-    visitor: &mut V,\n-    variant: &'v Variant<'v>,\n-    generics: &'v Generics<'v>,\n-    parent_item_id: HirId,\n-) {\n+pub fn walk_variant<'v, V: Visitor<'v>>(visitor: &mut V, variant: &'v Variant<'v>) {\n     visitor.visit_ident(variant.ident);\n     visitor.visit_id(variant.id);\n-    visitor.visit_variant_data(\n-        &variant.data,\n-        variant.ident.name,\n-        generics,\n-        parent_item_id,\n-        variant.span,\n-    );\n+    visitor.visit_variant_data(&variant.data);\n     walk_list!(visitor, visit_anon_const, &variant.disr_expr);\n }\n "}, {"sha": "5188ac633d3928b9bcf56cc63bcab58bd76ab4da", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8c5303898e43b7062bd66145bace076ce1a0b690/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c5303898e43b7062bd66145bace076ce1a0b690/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=8c5303898e43b7062bd66145bace076ce1a0b690", "patch": "@@ -24,7 +24,6 @@ use rustc_hir::intravisit::Visitor;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::lint::LintPass;\n-use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n \n use std::any::Any;\n@@ -194,14 +193,7 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n         self.context.cached_typeck_results.set(old_cached_typeck_results);\n     }\n \n-    fn visit_variant_data(\n-        &mut self,\n-        s: &'tcx hir::VariantData<'tcx>,\n-        _: Symbol,\n-        _: &'tcx hir::Generics<'tcx>,\n-        _: hir::HirId,\n-        _: Span,\n-    ) {\n+    fn visit_variant_data(&mut self, s: &'tcx hir::VariantData<'tcx>) {\n         lint_callback!(self, check_struct_def, s);\n         hir_visit::walk_struct_def(self, s);\n     }\n@@ -213,15 +205,10 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n         })\n     }\n \n-    fn visit_variant(\n-        &mut self,\n-        v: &'tcx hir::Variant<'tcx>,\n-        g: &'tcx hir::Generics<'tcx>,\n-        item_id: hir::HirId,\n-    ) {\n+    fn visit_variant(&mut self, v: &'tcx hir::Variant<'tcx>) {\n         self.with_lint_attrs(v.id, |cx| {\n             lint_callback!(cx, check_variant, v);\n-            hir_visit::walk_variant(cx, v, g, item_id);\n+            hir_visit::walk_variant(cx, v);\n         })\n     }\n "}, {"sha": "7ab9302d835a2d57da295324c08020b11b2a2dda", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8c5303898e43b7062bd66145bace076ce1a0b690/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c5303898e43b7062bd66145bace076ce1a0b690/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=8c5303898e43b7062bd66145bace076ce1a0b690", "patch": "@@ -772,14 +772,9 @@ impl<'tcx> intravisit::Visitor<'tcx> for LintLevelMapBuilder<'tcx> {\n         })\n     }\n \n-    fn visit_variant(\n-        &mut self,\n-        v: &'tcx hir::Variant<'tcx>,\n-        g: &'tcx hir::Generics<'tcx>,\n-        item_id: hir::HirId,\n-    ) {\n+    fn visit_variant(&mut self, v: &'tcx hir::Variant<'tcx>) {\n         self.with_lint_attrs(v.id, |builder| {\n-            intravisit::walk_variant(builder, v, g, item_id);\n+            intravisit::walk_variant(builder, v);\n         })\n     }\n "}, {"sha": "2a51af582f5854c35d21a27e42f4b583166305f6", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8c5303898e43b7062bd66145bace076ce1a0b690/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c5303898e43b7062bd66145bace076ce1a0b690/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=8c5303898e43b7062bd66145bace076ce1a0b690", "patch": "@@ -29,7 +29,6 @@ use rustc_middle::mir::visit::Visitor as _;\n use rustc_middle::mir::{traversal, Body, ConstQualifs, MirPass, MirPhase, Promoted};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt, TypeVisitable};\n-use rustc_span::{Span, Symbol};\n \n #[macro_use]\n mod pass_manager;\n@@ -159,14 +158,7 @@ fn mir_keys(tcx: TyCtxt<'_>, (): ()) -> FxIndexSet<LocalDefId> {\n         set: &'a mut FxIndexSet<LocalDefId>,\n     }\n     impl<'tcx> Visitor<'tcx> for GatherCtors<'_, 'tcx> {\n-        fn visit_variant_data(\n-            &mut self,\n-            v: &'tcx hir::VariantData<'tcx>,\n-            _: Symbol,\n-            _: &'tcx hir::Generics<'tcx>,\n-            _: hir::HirId,\n-            _: Span,\n-        ) {\n+        fn visit_variant_data(&mut self, v: &'tcx hir::VariantData<'tcx>) {\n             if let hir::VariantData::Tuple(_, hir_id) = *v {\n                 self.set.insert(self.tcx.hir().local_def_id(hir_id));\n             }"}, {"sha": "f75fffb6871f73aed9194c51de005b04c80da836", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8c5303898e43b7062bd66145bace076ce1a0b690/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c5303898e43b7062bd66145bace076ce1a0b690/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=8c5303898e43b7062bd66145bace076ce1a0b690", "patch": "@@ -2066,14 +2066,9 @@ impl<'tcx> Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n         intravisit::walk_expr(self, expr)\n     }\n \n-    fn visit_variant(\n-        &mut self,\n-        variant: &'tcx hir::Variant<'tcx>,\n-        generics: &'tcx hir::Generics<'tcx>,\n-        item_id: HirId,\n-    ) {\n+    fn visit_variant(&mut self, variant: &'tcx hir::Variant<'tcx>) {\n         self.check_attributes(variant.id, variant.span, Target::Variant, None);\n-        intravisit::walk_variant(self, variant, generics, item_id)\n+        intravisit::walk_variant(self, variant)\n     }\n \n     fn visit_param(&mut self, param: &'tcx hir::Param<'tcx>) {"}, {"sha": "625c854ea77a5dd7363aff05d995751edc5bf220", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8c5303898e43b7062bd66145bace076ce1a0b690/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c5303898e43b7062bd66145bace076ce1a0b690/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=8c5303898e43b7062bd66145bace076ce1a0b690", "patch": "@@ -368,14 +368,7 @@ impl<'tcx> Visitor<'tcx> for MarkSymbolVisitor<'tcx> {\n         self.maybe_typeck_results = old_maybe_typeck_results;\n     }\n \n-    fn visit_variant_data(\n-        &mut self,\n-        def: &'tcx hir::VariantData<'tcx>,\n-        _: Symbol,\n-        _: &hir::Generics<'_>,\n-        _: hir::HirId,\n-        _: rustc_span::Span,\n-    ) {\n+    fn visit_variant_data(&mut self, def: &'tcx hir::VariantData<'tcx>) {\n         let tcx = self.tcx;\n         let has_repr_c = self.repr_has_repr_c;\n         let has_repr_simd = self.repr_has_repr_simd;"}, {"sha": "4148d9728060b749fdeb047d7f20dc2060967b3d", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8c5303898e43b7062bd66145bace076ce1a0b690/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c5303898e43b7062bd66145bace076ce1a0b690/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=8c5303898e43b7062bd66145bace076ce1a0b690", "patch": "@@ -203,14 +203,9 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n         hir_visit::walk_field_def(self, s)\n     }\n \n-    fn visit_variant(\n-        &mut self,\n-        v: &'v hir::Variant<'v>,\n-        g: &'v hir::Generics<'v>,\n-        item_id: hir::HirId,\n-    ) {\n+    fn visit_variant(&mut self, v: &'v hir::Variant<'v>) {\n         self.record(\"Variant\", Id::None, v);\n-        hir_visit::walk_variant(self, v, g, item_id)\n+        hir_visit::walk_variant(self, v)\n     }\n \n     fn visit_lifetime(&mut self, lifetime: &'v hir::Lifetime) {"}, {"sha": "e7ab47d7d282a2c83d90b836fa414f1a06772619", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8c5303898e43b7062bd66145bace076ce1a0b690/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c5303898e43b7062bd66145bace076ce1a0b690/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=8c5303898e43b7062bd66145bace076ce1a0b690", "patch": "@@ -10,7 +10,7 @@ use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n use rustc_hir::hir_id::CRATE_HIR_ID;\n use rustc_hir::intravisit::{self, Visitor};\n-use rustc_hir::{FieldDef, Generics, HirId, Item, ItemKind, TraitRef, Ty, TyKind, Variant};\n+use rustc_hir::{FieldDef, Item, ItemKind, TraitRef, Ty, TyKind, Variant};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::privacy::AccessLevels;\n use rustc_middle::middle::stability::{AllowUnstable, DeprecationEntry, Index};\n@@ -434,7 +434,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n         );\n     }\n \n-    fn visit_variant(&mut self, var: &'tcx Variant<'tcx>, g: &'tcx Generics<'tcx>, item_id: HirId) {\n+    fn visit_variant(&mut self, var: &'tcx Variant<'tcx>) {\n         self.annotate(\n             self.tcx.hir().local_def_id(var.id),\n             var.span,\n@@ -457,7 +457,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n                     );\n                 }\n \n-                intravisit::walk_variant(v, var, g, item_id)\n+                intravisit::walk_variant(v, var)\n             },\n         )\n     }\n@@ -590,9 +590,9 @@ impl<'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'tcx> {\n         intravisit::walk_impl_item(self, ii);\n     }\n \n-    fn visit_variant(&mut self, var: &'tcx Variant<'tcx>, g: &'tcx Generics<'tcx>, item_id: HirId) {\n+    fn visit_variant(&mut self, var: &'tcx Variant<'tcx>) {\n         self.check_missing_stability(self.tcx.hir().local_def_id(var.id), var.span);\n-        intravisit::walk_variant(self, var, g, item_id);\n+        intravisit::walk_variant(self, var);\n     }\n \n     fn visit_field_def(&mut self, s: &'tcx FieldDef<'tcx>) {"}, {"sha": "f7c28eff55b763c4cfc1c6b83fa64b0d7f36fab0", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8c5303898e43b7062bd66145bace076ce1a0b690/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c5303898e43b7062bd66145bace076ce1a0b690/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=8c5303898e43b7062bd66145bace076ce1a0b690", "patch": "@@ -1625,15 +1625,10 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n         intravisit::walk_ty(self, t)\n     }\n \n-    fn visit_variant(\n-        &mut self,\n-        v: &'tcx hir::Variant<'tcx>,\n-        g: &'tcx hir::Generics<'tcx>,\n-        item_id: hir::HirId,\n-    ) {\n+    fn visit_variant(&mut self, v: &'tcx hir::Variant<'tcx>) {\n         if self.access_levels.is_reachable(self.tcx.hir().local_def_id(v.id)) {\n             self.in_variant = true;\n-            intravisit::walk_variant(self, v, g, item_id);\n+            intravisit::walk_variant(self, v);\n             self.in_variant = false;\n         }\n     }"}, {"sha": "20ae102bc27d30ce7cee4a74eda73c4b145dad4d", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8c5303898e43b7062bd66145bace076ce1a0b690/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c5303898e43b7062bd66145bace076ce1a0b690/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=8c5303898e43b7062bd66145bace076ce1a0b690", "patch": "@@ -1289,14 +1289,9 @@ impl<'a, 'hir, 'tcx> intravisit::Visitor<'hir> for HirCollector<'a, 'hir, 'tcx>\n         });\n     }\n \n-    fn visit_variant(\n-        &mut self,\n-        v: &'hir hir::Variant<'_>,\n-        g: &'hir hir::Generics<'_>,\n-        item_id: hir::HirId,\n-    ) {\n+    fn visit_variant(&mut self, v: &'hir hir::Variant<'_>) {\n         self.visit_testable(v.ident.to_string(), v.id, v.span, |this| {\n-            intravisit::walk_variant(this, v, g, item_id);\n+            intravisit::walk_variant(this, v);\n         });\n     }\n "}]}