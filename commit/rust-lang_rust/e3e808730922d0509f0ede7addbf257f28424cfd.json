{"sha": "e3e808730922d0509f0ede7addbf257f28424cfd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzZTgwODczMDkyMmQwNTA5ZjBlZGU3YWRkYmYyNTdmMjg0MjRjZmQ=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-11-24T03:33:10Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-11-26T19:23:41Z"}, "message": "Use `from_def_id_and_parts` for primitives and keywords\n\n- Take `String` instead of `Symbol` - this avoids having to intern then\n  immediately stringify the existing string.\n- Remove unused `get_stability` and `get_deprecation`\n- Remove unused `attrs` field from `primitives`", "tree": {"sha": "039030703a045873f435958cc3f212192c89bdec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/039030703a045873f435958cc3f212192c89bdec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3e808730922d0509f0ede7addbf257f28424cfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3e808730922d0509f0ede7addbf257f28424cfd", "html_url": "https://github.com/rust-lang/rust/commit/e3e808730922d0509f0ede7addbf257f28424cfd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3e808730922d0509f0ede7addbf257f28424cfd/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8b3a28e9c85b3b0aeb77ccfdd7901b7e9ed6d7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8b3a28e9c85b3b0aeb77ccfdd7901b7e9ed6d7d", "html_url": "https://github.com/rust-lang/rust/commit/f8b3a28e9c85b3b0aeb77ccfdd7901b7e9ed6d7d"}], "stats": {"total": 79, "additions": 35, "deletions": 44}, "files": [{"sha": "61121c776f491884d169cac4c505e85035af6dcd", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3e808730922d0509f0ede7addbf257f28424cfd/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3e808730922d0509f0ede7addbf257f28424cfd/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=e3e808730922d0509f0ede7addbf257f28424cfd", "patch": "@@ -124,7 +124,7 @@ crate fn try_inline(\n     let attrs = merge_attrs(cx, Some(parent_module), target_attrs, attrs_clone);\n \n     cx.renderinfo.borrow_mut().inlined.insert(did);\n-    let what_rustc_thinks = clean::Item::from_def_id_and_parts(did, Some(name), kind, cx);\n+    let what_rustc_thinks = clean::Item::from_def_id_and_parts(did, Some(name.clean(cx)), kind, cx);\n     ret.push(clean::Item { attrs, ..what_rustc_thinks });\n     Some(ret)\n }"}, {"sha": "d31ff55460875d118c50afd314c14af505209d32", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e3e808730922d0509f0ede7addbf257f28424cfd/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3e808730922d0509f0ede7addbf257f28424cfd/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e3e808730922d0509f0ede7addbf257f28424cfd", "patch": "@@ -122,7 +122,7 @@ impl Clean<ExternalCrate> for CrateNum {\n                         }\n                     }\n                 }\n-                return prim.map(|p| (def_id, p, attrs));\n+                return prim.map(|p| (def_id, p));\n             }\n             None\n         };\n@@ -144,9 +144,9 @@ impl Clean<ExternalCrate> for CrateNum {\n                         hir::ItemKind::Use(ref path, hir::UseKind::Single)\n                             if item.vis.node.is_pub() =>\n                         {\n-                            as_primitive(path.res).map(|(_, prim, attrs)| {\n+                            as_primitive(path.res).map(|(_, prim)| {\n                                 // Pretend the primitive is local.\n-                                (cx.tcx.hir().local_def_id(id.id).to_def_id(), prim, attrs)\n+                                (cx.tcx.hir().local_def_id(id.id).to_def_id(), prim)\n                             })\n                         }\n                         _ => None,\n@@ -1099,7 +1099,7 @@ impl Clean<Item> for hir::TraitItem<'_> {\n                     AssocTypeItem(bounds.clean(cx), default.clean(cx))\n                 }\n             };\n-            Item::from_def_id_and_parts(local_did, Some(self.ident.name), inner, cx)\n+            Item::from_def_id_and_parts(local_did, Some(self.ident.name.clean(cx)), inner, cx)\n         })\n     }\n }\n@@ -1127,7 +1127,7 @@ impl Clean<Item> for hir::ImplItem<'_> {\n                     TypedefItem(Typedef { type_, generics: Generics::default(), item_type }, true)\n                 }\n             };\n-            Item::from_def_id_and_parts(local_did, Some(self.ident.name), inner, cx)\n+            Item::from_def_id_and_parts(local_did, Some(self.ident.name.clean(cx)), inner, cx)\n         })\n     }\n }\n@@ -1284,7 +1284,7 @@ impl Clean<Item> for ty::AssocItem {\n             }\n         };\n \n-        Item::from_def_id_and_parts(self.def_id, Some(self.ident.name), kind, cx)\n+        Item::from_def_id_and_parts(self.def_id, Some(self.ident.name.clean(cx)), kind, cx)\n     }\n }\n \n@@ -1769,7 +1769,7 @@ impl Clean<Item> for ty::FieldDef {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n         let what_rustc_thinks = Item::from_def_id_and_parts(\n             self.did,\n-            Some(self.ident.name),\n+            Some(self.ident.name.clean(cx)),\n             StructFieldItem(cx.tcx.type_of(self.did).clean(cx)),\n             cx,\n         );\n@@ -1845,7 +1845,7 @@ impl Clean<Item> for ty::VariantDef {\n                     .fields\n                     .iter()\n                     .map(|field| {\n-                        let name = Some(field.ident.name);\n+                        let name = Some(field.ident.name.clean(cx));\n                         let kind = StructFieldItem(cx.tcx.type_of(field.did).clean(cx));\n                         let what_rustc_thinks =\n                             Item::from_def_id_and_parts(field.did, name, kind, cx);\n@@ -1857,7 +1857,7 @@ impl Clean<Item> for ty::VariantDef {\n         };\n         let what_rustc_thinks = Item::from_def_id_and_parts(\n             self.def_id,\n-            Some(self.ident.name),\n+            Some(self.ident.name.clean(cx)),\n             VariantItem(Variant { kind }),\n             cx,\n         );\n@@ -2055,7 +2055,7 @@ impl Clean<Vec<Item>> for (&hir::Item<'_>, Option<Ident>) {\n                 _ => unreachable!(\"not yet converted\"),\n             };\n \n-            vec![Item::from_def_id_and_parts(def_id, Some(name), kind, cx)]\n+            vec![Item::from_def_id_and_parts(def_id, Some(name.clean(cx)), kind, cx)]\n         })\n     }\n }\n@@ -2317,7 +2317,7 @@ impl Clean<Item> for doctree::Macro {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n         Item::from_def_id_and_parts(\n             self.def_id,\n-            Some(self.name),\n+            Some(self.name.clean(cx)),\n             MacroItem(Macro {\n                 source: format!(\n                     \"macro_rules! {} {{\\n{}}}\","}, {"sha": "3d2cab70f911f20a90982431d0a6ae94faa6008d", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e3e808730922d0509f0ede7addbf257f28424cfd/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3e808730922d0509f0ede7addbf257f28424cfd/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=e3e808730922d0509f0ede7addbf257f28424cfd", "patch": "@@ -33,6 +33,7 @@ use smallvec::{smallvec, SmallVec};\n use crate::clean::cfg::Cfg;\n use crate::clean::external_path;\n use crate::clean::inline;\n+use crate::clean::Clean;\n use crate::clean::types::Type::{QPath, ResolvedPath};\n use crate::core::DocContext;\n use crate::doctree;\n@@ -54,7 +55,7 @@ crate struct Crate {\n     crate src: FileName,\n     crate module: Option<Item>,\n     crate externs: Vec<(CrateNum, ExternalCrate)>,\n-    crate primitives: Vec<(DefId, PrimitiveType, Attributes)>,\n+    crate primitives: Vec<(DefId, PrimitiveType)>,\n     // These are later on moved into `CACHEKEY`, leaving the map empty.\n     // Only here so that they can be filtered through the rustdoc passes.\n     crate external_traits: Rc<RefCell<FxHashMap<DefId, Trait>>>,\n@@ -67,7 +68,7 @@ crate struct ExternalCrate {\n     crate name: String,\n     crate src: FileName,\n     crate attrs: Attributes,\n-    crate primitives: Vec<(DefId, PrimitiveType, Attributes)>,\n+    crate primitives: Vec<(DefId, PrimitiveType)>,\n     crate keywords: Vec<(DefId, String, Attributes)>,\n }\n \n@@ -120,17 +121,15 @@ impl Item {\n         kind: ItemKind,\n         cx: &DocContext<'_>,\n     ) -> Item {\n-        Item::from_def_id_and_parts(cx.tcx.hir().local_def_id(hir_id).to_def_id(), name, kind, cx)\n+        Item::from_def_id_and_parts(cx.tcx.hir().local_def_id(hir_id).to_def_id(), name.clean(cx), kind, cx)\n     }\n \n     pub fn from_def_id_and_parts(\n         def_id: DefId,\n-        name: Option<Symbol>,\n+        name: Option<String>,\n         kind: ItemKind,\n         cx: &DocContext<'_>,\n     ) -> Item {\n-        use super::Clean;\n-\n         debug!(\"name={:?}, def_id={:?}\", name, def_id);\n \n         // `span_if_local()` lies about functions and only gives the span of the function signature\n@@ -145,7 +144,7 @@ impl Item {\n         Item {\n             def_id,\n             kind,\n-            name: name.clean(cx),\n+            name,\n             source: source.clean(cx),\n             attrs: cx.tcx.get_attrs(def_id).clean(cx),\n             visibility: cx.tcx.visibility(def_id).clean(cx),"}, {"sha": "986703149f13847e4b8ec17064a45f2ecfd3ba50", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 15, "deletions": 23, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e3e808730922d0509f0ede7addbf257f28424cfd/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3e808730922d0509f0ede7addbf257f28424cfd/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=e3e808730922d0509f0ede7addbf257f28424cfd", "patch": "@@ -1,15 +1,14 @@\n use crate::clean::auto_trait::AutoTraitFinder;\n use crate::clean::blanket_impl::BlanketImplFinder;\n use crate::clean::{\n-    inline, Clean, Crate, Deprecation, ExternalCrate, FnDecl, FnRetTy, Generic, GenericArg,\n+    inline, Clean, Crate, ExternalCrate, FnDecl, FnRetTy, Generic, GenericArg,\n     GenericArgs, GenericBound, Generics, GetDefId, ImportSource, Item, ItemKind, Lifetime,\n-    MacroKind, Path, PathSegment, Primitive, PrimitiveType, ResolvedPath, Span, Type, TypeBinding,\n-    TypeKind, Visibility, WherePredicate,\n+    MacroKind, Path, PathSegment, Primitive, PrimitiveType, ResolvedPath, Type, TypeBinding,\n+    TypeKind, WherePredicate,\n };\n use crate::core::DocContext;\n \n use itertools::Itertools;\n-use rustc_attr::Stability;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n@@ -66,17 +65,18 @@ crate fn krate(mut cx: &mut DocContext<'_>) -> Crate {\n             ItemKind::ModuleItem(ref mut m) => m,\n             _ => unreachable!(),\n         };\n-        m.items.extend(primitives.iter().map(|&(def_id, prim, ref attrs)| Item {\n-            source: Span::empty(),\n-            name: Some(prim.to_url_str().to_string()),\n-            attrs: attrs.clone(),\n-            visibility: Visibility::Public,\n-            stability: get_stability(cx, def_id),\n-            deprecation: get_deprecation(cx, def_id),\n-            def_id,\n-            kind: ItemKind::PrimitiveItem(prim),\n+        m.items.extend(primitives.iter().map(|&(def_id, prim)| {\n+            Item::from_def_id_and_parts(\n+                def_id,\n+                Some(prim.to_url_str().to_owned()),\n+                ItemKind::PrimitiveItem(prim),\n+                cx,\n+            )\n         }));\n-        m.items.extend(keywords.into_iter().map(|(def_id, kw, attrs)| Item {\n+        m.items.extend(keywords.into_iter()\n+            .map(|(def_id, kw, _)| Item::from_def_id_and_parts(def_id, Some(kw.clone()), ItemKind::KeywordItem(kw), cx)\n+        ));\n+        /*\n             source: Span::empty(),\n             name: Some(kw.clone()),\n             attrs,\n@@ -86,6 +86,7 @@ crate fn krate(mut cx: &mut DocContext<'_>) -> Crate {\n             def_id,\n             kind: ItemKind::KeywordItem(kw),\n         }));\n+        */\n     }\n \n     Crate {\n@@ -101,15 +102,6 @@ crate fn krate(mut cx: &mut DocContext<'_>) -> Crate {\n     }\n }\n \n-// extract the stability index for a node from tcx, if possible\n-crate fn get_stability(cx: &DocContext<'_>, def_id: DefId) -> Option<Stability> {\n-    cx.tcx.lookup_stability(def_id).cloned()\n-}\n-\n-crate fn get_deprecation(cx: &DocContext<'_>, def_id: DefId) -> Option<Deprecation> {\n-    cx.tcx.lookup_deprecation(def_id).clean(cx)\n-}\n-\n fn external_generic_args(\n     cx: &DocContext<'_>,\n     trait_did: Option<DefId>,"}, {"sha": "c3153f2d4b6ff5e7a106c1aea183a10c17ab9d2f", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3e808730922d0509f0ede7addbf257f28424cfd/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3e808730922d0509f0ede7addbf257f28424cfd/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=e3e808730922d0509f0ede7addbf257f28424cfd", "patch": "@@ -187,11 +187,11 @@ impl Cache {\n         // Favor linking to as local extern as possible, so iterate all crates in\n         // reverse topological order.\n         for &(_, ref e) in krate.externs.iter().rev() {\n-            for &(def_id, prim, _) in &e.primitives {\n+            for &(def_id, prim) in &e.primitives {\n                 cache.primitive_locations.insert(prim, def_id);\n             }\n         }\n-        for &(def_id, prim, _) in &krate.primitives {\n+        for &(def_id, prim) in &krate.primitives {\n             cache.primitive_locations.insert(prim, def_id);\n         }\n "}]}