{"sha": "97cd495aca946d088e103d364d3be34f2bfaf1e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3Y2Q0OTVhY2E5NDZkMDg4ZTEwM2QzNjRkM2JlMzRmMmJmYWYxZTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-02T08:16:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-02T08:16:31Z"}, "message": "auto merge of #9638 : pnkfelix/rust/fsk-issue7526-attempt-to-catch-nonuc-statics-in-match-patterns, r=alexcrichton\n\nr? anyone\r\n\r\nAddress scariest part of #7526 by adding a new more specific lint (that is set to warn by default, rather than allow).", "tree": {"sha": "6558cbe87d3e6152f649ef4c32b9facd75db0b46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6558cbe87d3e6152f649ef4c32b9facd75db0b46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97cd495aca946d088e103d364d3be34f2bfaf1e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97cd495aca946d088e103d364d3be34f2bfaf1e1", "html_url": "https://github.com/rust-lang/rust/commit/97cd495aca946d088e103d364d3be34f2bfaf1e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97cd495aca946d088e103d364d3be34f2bfaf1e1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33a5928b461e4cda3688ea3fbe9a05f35b4fd884", "url": "https://api.github.com/repos/rust-lang/rust/commits/33a5928b461e4cda3688ea3fbe9a05f35b4fd884", "html_url": "https://github.com/rust-lang/rust/commit/33a5928b461e4cda3688ea3fbe9a05f35b4fd884"}, {"sha": "2461b3102607c1cb4469c94bbe95d67db6c5e54d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2461b3102607c1cb4469c94bbe95d67db6c5e54d", "html_url": "https://github.com/rust-lang/rust/commit/2461b3102607c1cb4469c94bbe95d67db6c5e54d"}], "stats": {"total": 172, "additions": 172, "deletions": 0}, "files": [{"sha": "6fe8d65cc39d9b3f4670f868655d768d43840318", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97cd495aca946d088e103d364d3be34f2bfaf1e1/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97cd495aca946d088e103d364d3be34f2bfaf1e1/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=97cd495aca946d088e103d364d3be34f2bfaf1e1", "patch": "@@ -11,6 +11,7 @@\n // LLVM wrappers are intended to be called from trans,\n // which already runs in a #[fixed_stack_segment]\n #[allow(cstack)];\n+#[allow(non_uppercase_pattern_statics)];\n \n use std::c_str::ToCStr;\n use std::hashmap::HashMap;"}, {"sha": "b2d442e0e52d4ec198bbb98edce8ad18a324a864", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97cd495aca946d088e103d364d3be34f2bfaf1e1/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97cd495aca946d088e103d364d3be34f2bfaf1e1/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=97cd495aca946d088e103d364d3be34f2bfaf1e1", "patch": "@@ -133,6 +133,7 @@ pub fn check_arms(cx: &MatchCheckCtxt, arms: &[Arm]) {\n                     _ => false\n                 }\n             };\n+\n             do walk_pat(*pat) |p| {\n                 if pat_matches_nan(p) {\n                     cx.tcx.sess.span_warn(p.span, \"unmatchable NaN in pattern, \\"}, {"sha": "e8bd958774af8d5805d2cbd9ccc8f593438345ff", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/97cd495aca946d088e103d364d3be34f2bfaf1e1/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97cd495aca946d088e103d364d3be34f2bfaf1e1/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=97cd495aca946d088e103d364d3be34f2bfaf1e1", "patch": "@@ -83,6 +83,7 @@ pub enum lint {\n     unrecognized_lint,\n     non_camel_case_types,\n     non_uppercase_statics,\n+    non_uppercase_pattern_statics,\n     type_limits,\n     unused_unsafe,\n \n@@ -209,6 +210,13 @@ static lint_table: &'static [(&'static str, LintSpec)] = &[\n          default: allow\n      }),\n \n+    (\"non_uppercase_pattern_statics\",\n+     LintSpec {\n+         lint: non_uppercase_pattern_statics,\n+         desc: \"static constants in match patterns should be all caps\",\n+         default: warn\n+     }),\n+\n     (\"managed_heap_memory\",\n      LintSpec {\n         lint: managed_heap_memory,\n@@ -1110,6 +1118,22 @@ fn check_item_non_uppercase_statics(cx: &Context, it: &ast::item) {\n     }\n }\n \n+fn check_pat_non_uppercase_statics(cx: &Context, p: &ast::Pat) {\n+    // Lint for constants that look like binding identifiers (#7526)\n+    match (&p.node, cx.tcx.def_map.find(&p.id)) {\n+        (&ast::PatIdent(_, ref path, _), Some(&ast::DefStatic(_, false))) => {\n+            // last identifier alone is right choice for this lint.\n+            let ident = path.segments.last().identifier;\n+            let s = cx.tcx.sess.str_of(ident);\n+            if s.iter().any(|c| c.is_lowercase()) {\n+                cx.span_lint(non_uppercase_pattern_statics, path.span,\n+                             \"static constant in pattern should be all caps\");\n+            }\n+        }\n+        _ => {}\n+    }\n+}\n+\n struct UnusedUnsafeLintVisitor { stopping_on_items: bool }\n \n impl SubitemStoppableVisitor for UnusedUnsafeLintVisitor {\n@@ -1516,6 +1540,11 @@ struct LintCheckVisitor;\n \n impl Visitor<@mut Context> for LintCheckVisitor {\n \n+    fn visit_pat(&mut self, p:@ast::Pat, cx: @mut Context) {\n+        check_pat_non_uppercase_statics(cx, p);\n+        visit::walk_pat(self, p, cx);\n+    }\n+\n     fn visit_item(&mut self, it:@ast::item, cx: @mut Context) {\n \n                 do cx.with_lint_attrs(it.attrs) {"}, {"sha": "38431bb9293a5b783bd258ecf66f542e3370e7d7", "filename": "src/librustc/middle/trans/cabi_arm.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97cd495aca946d088e103d364d3be34f2bfaf1e1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97cd495aca946d088e103d364d3be34f2bfaf1e1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_arm.rs?ref=97cd495aca946d088e103d364d3be34f2bfaf1e1", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(non_uppercase_pattern_statics)];\n+\n use lib::llvm::{llvm, Integer, Pointer, Float, Double, Struct, Array};\n use lib::llvm::{Attribute, StructRetAttribute};\n use middle::trans::cabi::{FnType, LLVMType};"}, {"sha": "62343c19cfe138e48b4e2ff76ca6979ae91e075a", "filename": "src/librustc/middle/trans/cabi_mips.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97cd495aca946d088e103d364d3be34f2bfaf1e1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97cd495aca946d088e103d364d3be34f2bfaf1e1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs?ref=97cd495aca946d088e103d364d3be34f2bfaf1e1", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(non_uppercase_pattern_statics)];\n \n use std::libc::c_uint;\n use std::num;"}, {"sha": "48574fd7507ba6df99e8fb6a54f3ab994328d620", "filename": "src/librustc/middle/trans/cabi_x86_64.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97cd495aca946d088e103d364d3be34f2bfaf1e1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97cd495aca946d088e103d364d3be34f2bfaf1e1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs?ref=97cd495aca946d088e103d364d3be34f2bfaf1e1", "patch": "@@ -11,6 +11,8 @@\n // The classification code for the x86_64 ABI is taken from the clay language\n // https://github.com/jckarter/clay/blob/master/compiler/src/externals.cpp\n \n+#[allow(non_uppercase_pattern_statics)];\n+\n use lib::llvm::{llvm, Integer, Pointer, Float, Double};\n use lib::llvm::{Struct, Array, Attribute};\n use lib::llvm::{StructRetAttribute, ByValAttribute};"}, {"sha": "6d3b1396fc581579ee3bcb8a168b1e6e3f373a27", "filename": "src/librustc/middle/trans/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97cd495aca946d088e103d364d3be34f2bfaf1e1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97cd495aca946d088e103d364d3be34f2bfaf1e1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs?ref=97cd495aca946d088e103d364d3be34f2bfaf1e1", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(non_uppercase_pattern_statics)];\n+\n use back::{abi};\n use lib::llvm::{SequentiallyConsistent, Acquire, Release, Xchg};\n use lib::llvm::{ValueRef, Pointer};"}, {"sha": "efb85bc8df226bfb787dfb280b9497fc0de0bf31", "filename": "src/librustc/middle/trans/type_.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97cd495aca946d088e103d364d3be34f2bfaf1e1/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97cd495aca946d088e103d364d3be34f2bfaf1e1/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs?ref=97cd495aca946d088e103d364d3be34f2bfaf1e1", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(non_uppercase_pattern_statics)];\n \n use lib::llvm::{llvm, TypeRef, Bool, False, True, TypeKind};\n use lib::llvm::{Float, Double, X86_FP80, PPC_FP128, FP128};"}, {"sha": "41a3d193379541307776d024e9625e3c60232c4e", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97cd495aca946d088e103d364d3be34f2bfaf1e1/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97cd495aca946d088e103d364d3be34f2bfaf1e1/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=97cd495aca946d088e103d364d3be34f2bfaf1e1", "patch": "@@ -11,6 +11,7 @@\n //! Operations and constants for `f32`\n #[allow(missing_doc)];\n #[allow(non_uppercase_statics)];\n+#[allow(non_uppercase_pattern_statics)];\n \n use default::Default;\n use libc::c_int;"}, {"sha": "772596d15fba64d56bf4bfdda46ef7c55f398646", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97cd495aca946d088e103d364d3be34f2bfaf1e1/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97cd495aca946d088e103d364d3be34f2bfaf1e1/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=97cd495aca946d088e103d364d3be34f2bfaf1e1", "patch": "@@ -12,6 +12,7 @@\n \n #[allow(missing_doc)];\n #[allow(non_uppercase_statics)];\n+#[allow(non_uppercase_pattern_statics)];\n \n use default::Default;\n use libc::c_int;"}, {"sha": "4aa45c78fc889e3efb5c1172483d3d3cdfec73a9", "filename": "src/test/compile-fail/issue-6804.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97cd495aca946d088e103d364d3be34f2bfaf1e1/src%2Ftest%2Fcompile-fail%2Fissue-6804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97cd495aca946d088e103d364d3be34f2bfaf1e1/src%2Ftest%2Fcompile-fail%2Fissue-6804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6804.rs?ref=97cd495aca946d088e103d364d3be34f2bfaf1e1", "patch": "@@ -1,3 +1,5 @@\n+#[allow(non_uppercase_pattern_statics)];\n+\n // Matching against NaN should result in a warning\n \n use std::f64::NaN;"}, {"sha": "1cdceaca6b4b5e541a79eb84f88ba6e5de7df0fc", "filename": "src/test/compile-fail/match-static-const-lc.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/97cd495aca946d088e103d364d3be34f2bfaf1e1/src%2Ftest%2Fcompile-fail%2Fmatch-static-const-lc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97cd495aca946d088e103d364d3be34f2bfaf1e1/src%2Ftest%2Fcompile-fail%2Fmatch-static-const-lc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-static-const-lc.rs?ref=97cd495aca946d088e103d364d3be34f2bfaf1e1", "patch": "@@ -0,0 +1,58 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Issue #7526: lowercase static constants in patterns look like bindings\n+\n+#[deny(non_uppercase_pattern_statics)];\n+\n+pub static a : int = 97;\n+\n+fn f() {\n+    let r = match (0,0) {\n+        (0, a) => 0,\n+        //~^ ERROR static constant in pattern should be all caps\n+        (x, y) => 1 + x + y,\n+    };\n+    assert!(r == 1);\n+}\n+\n+mod m {\n+    pub static aha : int = 7;\n+}\n+\n+fn g() {\n+    use self::m::aha;\n+    let r = match (0,0) {\n+        (0, aha) => 0,\n+        //~^ ERROR static constant in pattern should be all caps\n+        (x, y)   => 1 + x + y,\n+    };\n+    assert!(r == 1);\n+}\n+\n+mod n {\n+    pub static OKAY : int = 8;\n+}\n+\n+fn h() {\n+    use not_okay = self::n::OKAY;\n+    let r = match (0,0) {\n+        (0, not_okay) => 0,\n+        //~^ ERROR static constant in pattern should be all caps\n+        (x, y)   => 1 + x + y,\n+    };\n+    assert!(r == 1);\n+}\n+\n+fn main () {\n+    f();\n+    g();\n+    h();\n+}"}, {"sha": "df62ba7298d2908a730c9c0c6dc9cb28616ade53", "filename": "src/test/run-pass/match-static-const-rename.rs", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/97cd495aca946d088e103d364d3be34f2bfaf1e1/src%2Ftest%2Frun-pass%2Fmatch-static-const-rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97cd495aca946d088e103d364d3be34f2bfaf1e1/src%2Ftest%2Frun-pass%2Fmatch-static-const-rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-static-const-rename.rs?ref=97cd495aca946d088e103d364d3be34f2bfaf1e1", "patch": "@@ -0,0 +1,71 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Issue #7526: lowercase static constants in patterns look like bindings\n+\n+// This is similar to compile-fail/match-static-const-lc, except it\n+// shows the expected usual workaround (choosing a different name for\n+// the static definition) and also demonstrates that one can work\n+// around this problem locally by renaming the constant in the `use`\n+// form to an uppercase identifier that placates the lint.\n+\n+#[deny(non_uppercase_pattern_statics)];\n+\n+pub static A : int = 97;\n+\n+fn f() {\n+    let r = match (0,0) {\n+        (0, A) => 0,\n+        (x, y) => 1 + x + y,\n+    };\n+    assert!(r == 1);\n+    let r = match (0,97) {\n+        (0, A) => 0,\n+        (x, y) => 1 + x + y,\n+    };\n+    assert!(r == 0);\n+}\n+\n+mod m {\n+    pub static aha : int = 7;\n+}\n+\n+fn g() {\n+    use AHA = self::m::aha;\n+    let r = match (0,0) {\n+        (0, AHA) => 0,\n+        (x, y)   => 1 + x + y,\n+    };\n+    assert!(r == 1);\n+    let r = match (0,7) {\n+        (0, AHA) => 0,\n+        (x, y)   => 1 + x + y,\n+    };\n+    assert!(r == 0);\n+}\n+\n+fn h() {\n+    let r = match (0,0) {\n+        (0, self::m::aha) => 0,\n+        (x, y)      => 1 + x + y,\n+    };\n+    assert!(r == 1);\n+    let r = match (0,7) {\n+        (0, self::m::aha) => 0,\n+        (x, y)      => 1 + x + y,\n+    };\n+    assert!(r == 0);\n+}\n+\n+pub fn main () {\n+    f();\n+    g();\n+    h();\n+}"}]}