{"sha": "d86e487b0b1025c5e8b9b69b318af9ac76dcf693", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4NmU0ODdiMGIxMDI1YzVlOGI5YjY5YjMxOGFmOWFjNzZkY2Y2OTM=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-01-10T05:15:02Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-01-10T05:54:24Z"}, "message": "Start warning cycle.", "tree": {"sha": "f4bae858ca44342b334a91859b8bd476cf64ed12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4bae858ca44342b334a91859b8bd476cf64ed12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d86e487b0b1025c5e8b9b69b318af9ac76dcf693", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d86e487b0b1025c5e8b9b69b318af9ac76dcf693", "html_url": "https://github.com/rust-lang/rust/commit/d86e487b0b1025c5e8b9b69b318af9ac76dcf693", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d86e487b0b1025c5e8b9b69b318af9ac76dcf693/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "235a7a743cc01ab0d5484e02eebe02152b368e99", "url": "https://api.github.com/repos/rust-lang/rust/commits/235a7a743cc01ab0d5484e02eebe02152b368e99", "html_url": "https://github.com/rust-lang/rust/commit/235a7a743cc01ab0d5484e02eebe02152b368e99"}], "stats": {"total": 44, "additions": 38, "deletions": 6}, "files": [{"sha": "f613025fe3787d731100c933b31e000bd29e70b3", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d86e487b0b1025c5e8b9b69b318af9ac76dcf693/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d86e487b0b1025c5e8b9b69b318af9ac76dcf693/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=d86e487b0b1025c5e8b9b69b318af9ac76dcf693", "patch": "@@ -894,6 +894,7 @@ enum NameBindingKind<'a> {\n         binding: &'a NameBinding<'a>,\n         directive: &'a ImportDirective<'a>,\n         used: Cell<bool>,\n+        legacy_self_import: bool,\n     },\n     Ambiguity {\n         b1: &'a NameBinding<'a>,\n@@ -1346,8 +1347,13 @@ impl<'a> Resolver<'a> {\n         }\n \n         match binding.kind {\n-            NameBindingKind::Import { directive, binding, ref used } if !used.get() => {\n+            NameBindingKind::Import { directive, binding, ref used, legacy_self_import }\n+                    if !used.get() => {\n                 used.set(true);\n+                if legacy_self_import {\n+                    self.warn_legacy_self_import(directive);\n+                    return false;\n+                }\n                 self.used_imports.insert((directive.id, ns));\n                 self.add_to_glob_map(directive.id, ident);\n                 self.record_use(ident, ns, binding, span)\n@@ -3110,6 +3116,12 @@ impl<'a> Resolver<'a> {\n         err.emit();\n         self.name_already_seen.insert(name, span);\n     }\n+\n+    fn warn_legacy_self_import(&self, directive: &'a ImportDirective<'a>) {\n+        let (id, span) = (directive.id, directive.span);\n+        let msg = \"`self` no longer imports values\".to_string();\n+        self.session.add_lint(lint::builtin::LEGACY_IMPORTS, id, span, msg);\n+    }\n }\n \n fn is_struct_like(def: Def) -> bool {"}, {"sha": "65e599ac6c7e8c89275942d2bbc706fbb45f64c8", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d86e487b0b1025c5e8b9b69b318af9ac76dcf693/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d86e487b0b1025c5e8b9b69b318af9ac76dcf693/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=d86e487b0b1025c5e8b9b69b318af9ac76dcf693", "patch": "@@ -297,6 +297,7 @@ impl<'a> Resolver<'a> {\n                 binding: binding,\n                 directive: directive,\n                 used: Cell::new(false),\n+                legacy_self_import: false,\n             },\n             span: directive.span,\n             vis: vis,\n@@ -594,6 +595,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n         };\n \n         let mut all_ns_err = true;\n+        let mut legacy_self_import = None;\n         self.per_ns(|this, ns| if !type_ns_only || ns == TypeNS {\n             if let Ok(binding) = result[ns].get() {\n                 all_ns_err = false;\n@@ -602,9 +604,25 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                         Some(this.dummy_binding);\n                 }\n             }\n+        } else if let Ok(binding) = this.resolve_ident_in_module(module, ident, ns, false, None) {\n+            legacy_self_import = Some(directive);\n+            let binding = this.arenas.alloc_name_binding(NameBinding {\n+                kind: NameBindingKind::Import {\n+                    binding: binding,\n+                    directive: directive,\n+                    used: Cell::new(false),\n+                    legacy_self_import: true,\n+                },\n+                ..*binding\n+            });\n+            let _ = this.try_define(directive.parent, ident, ns, binding);\n         });\n \n         if all_ns_err {\n+            if let Some(directive) = legacy_self_import {\n+                self.warn_legacy_self_import(directive);\n+                return None;\n+            }\n             let mut all_ns_failed = true;\n             self.per_ns(|this, ns| if !type_ns_only || ns == TypeNS {\n                 match this.resolve_ident_in_module(module, ident, ns, false, Some(span)) {"}, {"sha": "bf24621a869fb21acd4d9cd1875a2e27bf6e9a91", "filename": "src/test/compile-fail/issue-38293.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d86e487b0b1025c5e8b9b69b318af9ac76dcf693/src%2Ftest%2Fcompile-fail%2Fissue-38293.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d86e487b0b1025c5e8b9b69b318af9ac76dcf693/src%2Ftest%2Fcompile-fail%2Fissue-38293.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-38293.rs?ref=d86e487b0b1025c5e8b9b69b318af9ac76dcf693", "patch": "@@ -10,22 +10,24 @@\n \n // Test that `fn foo::bar::{self}` only imports `bar` in the type namespace.\n \n+#![allow(unused)]\n+#![deny(legacy_imports)]\n+\n mod foo {\n     pub fn f() { }\n }\n use foo::f::{self};\n-//~^ ERROR unresolved import\n-//~| NOTE no `f` in `foo`\n+//~^ ERROR `self` no longer imports values\n+//~| WARN hard error\n \n mod bar {\n     pub fn baz() {}\n     pub mod baz {}\n }\n use bar::baz::{self};\n+//~^ ERROR `self` no longer imports values\n+//~| WARN hard error\n \n fn main() {\n     baz();\n-    //~^ ERROR unresolved name `baz`\n-    //~| NOTE unresolved name\n-    //~| HELP module `baz` cannot be used as an expression\n }"}]}