{"sha": "a4b1ac5447c44b5ad5923653ed2091e0510ac8db", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0YjFhYzU0NDdjNDRiNWFkNTkyMzY1M2VkMjA5MWUwNTEwYWM4ZGI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-11-24T23:24:29Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-11-24T23:24:29Z"}, "message": "std: Leak all statically allocated TLS keys\n\nIt turns out that rustrt::at_exit() doesn't actually occur after all pthread\nthreads have exited (nor does atexit()), so there's not actually a known point\nat which we can deallocate these keys. It's not super critical that we do so,\nhowever, because we're about to exit anyway!\n\nCloses #19280", "tree": {"sha": "b7a1d16c464a89ea286c21741a2b345a471214fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7a1d16c464a89ea286c21741a2b345a471214fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4b1ac5447c44b5ad5923653ed2091e0510ac8db", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4b1ac5447c44b5ad5923653ed2091e0510ac8db", "html_url": "https://github.com/rust-lang/rust/commit/a4b1ac5447c44b5ad5923653ed2091e0510ac8db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4b1ac5447c44b5ad5923653ed2091e0510ac8db/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54c628cb849ad53b66f0d738dc8c83529a9d08d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/54c628cb849ad53b66f0d738dc8c83529a9d08d2", "html_url": "https://github.com/rust-lang/rust/commit/54c628cb849ad53b66f0d738dc8c83529a9d08d2"}], "stats": {"total": 37, "additions": 2, "deletions": 35}, "files": [{"sha": "370d74cc5e1898da87af6ce1e999025cfb3b833a", "filename": "src/libstd/sys/common/thread_local.rs", "status": "modified", "additions": 2, "deletions": 35, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a4b1ac5447c44b5ad5923653ed2091e0510ac8db/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4b1ac5447c44b5ad5923653ed2091e0510ac8db/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs?ref=a4b1ac5447c44b5ad5923653ed2091e0510ac8db", "patch": "@@ -59,9 +59,7 @@\n use prelude::*;\n \n use kinds::marker;\n-use mem;\n use rustrt::exclusive::Exclusive;\n-use rustrt;\n use sync::atomic::{mod, AtomicUint};\n use sync::{Once, ONCE_INIT};\n \n@@ -174,7 +172,7 @@ impl StaticKey {\n     pub unsafe fn destroy(&self) {\n         match self.inner.key.swap(0, atomic::SeqCst) {\n             0 => {}\n-            n => { unregister_key(n as imp::Key); imp::destroy(n as imp::Key) }\n+            n => { imp::destroy(n as imp::Key) }\n         }\n     }\n \n@@ -191,10 +189,7 @@ impl StaticKey {\n         assert!(key != 0);\n         match self.inner.key.compare_and_swap(0, key as uint, atomic::SeqCst) {\n             // The CAS succeeded, so we've created the actual key\n-            0 => {\n-                register_key(key);\n-                key as uint\n-            }\n+            0 => key as uint,\n             // If someone beat us to the punch, use their key instead\n             n => { imp::destroy(key); n }\n         }\n@@ -237,34 +232,6 @@ impl Drop for Key {\n     }\n }\n \n-fn init_keys() {\n-    let keys = box Exclusive::new(Vec::<imp::Key>::new());\n-    unsafe {\n-        KEYS = mem::transmute(keys);\n-    }\n-\n-    rustrt::at_exit(proc() unsafe {\n-        let keys: Box<Exclusive<Vec<imp::Key>>> = mem::transmute(KEYS);\n-        KEYS = 0 as *mut _;\n-        let keys = keys.lock();\n-        for key in keys.iter() {\n-            imp::destroy(*key);\n-        }\n-    });\n-}\n-\n-fn register_key(key: imp::Key) {\n-    INIT_KEYS.doit(init_keys);\n-    let mut keys = unsafe { (*KEYS).lock() };\n-    keys.push(key);\n-}\n-\n-fn unregister_key(key: imp::Key) {\n-    INIT_KEYS.doit(init_keys);\n-    let mut keys = unsafe { (*KEYS).lock() };\n-    keys.retain(|k| *k != key);\n-}\n-\n #[cfg(test)]\n mod tests {\n     use prelude::*;"}]}