{"sha": "2e65782c1780cb9327281c7f78c8b40a5b4f5f57", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlNjU3ODJjMTc4MGNiOTMyNzI4MWM3Zjc4YzhiNDBhNWI0ZjVmNTc=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-07-02T09:31:00Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-07-05T04:03:04Z"}, "message": "Do not rely on newtype enum dereference", "tree": {"sha": "25eb22d723c1724b821a2dd828ceef19b9a61762", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25eb22d723c1724b821a2dd828ceef19b9a61762"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e65782c1780cb9327281c7f78c8b40a5b4f5f57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e65782c1780cb9327281c7f78c8b40a5b4f5f57", "html_url": "https://github.com/rust-lang/rust/commit/2e65782c1780cb9327281c7f78c8b40a5b4f5f57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e65782c1780cb9327281c7f78c8b40a5b4f5f57/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9b9462e8f7f0181fcc7f5883c4502e81d260b12", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9b9462e8f7f0181fcc7f5883c4502e81d260b12", "html_url": "https://github.com/rust-lang/rust/commit/c9b9462e8f7f0181fcc7f5883c4502e81d260b12"}], "stats": {"total": 64, "additions": 28, "deletions": 36}, "files": [{"sha": "bbac4a2907c0fa8a60c57c6dd32530f8ca5f8657", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e65782c1780cb9327281c7f78c8b40a5b4f5f57/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e65782c1780cb9327281c7f78c8b40a5b4f5f57/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=2e65782c1780cb9327281c7f78c8b40a5b4f5f57", "patch": "@@ -17,7 +17,7 @@ use front::config;\n use std::vec;\n use syntax::ast_util::*;\n use syntax::attr;\n-use syntax::codemap::{dummy_sp, span, ExpandedFrom, CallInfo, NameAndSpan};\n+use syntax::codemap::{dummy_sp, span, ExpnInfo, NameAndSpan};\n use syntax::codemap;\n use syntax::ext::base::ExtCtxt;\n use syntax::fold;\n@@ -72,13 +72,13 @@ fn generate_test_harness(sess: session::Session,\n     };\n \n     let ext_cx = cx.ext_cx;\n-    ext_cx.bt_push(ExpandedFrom(CallInfo {\n+    ext_cx.bt_push(ExpnInfo {\n         call_site: dummy_sp(),\n         callee: NameAndSpan {\n             name: @\"test\",\n             span: None\n         }\n-    }));\n+    });\n \n     let precursor = @fold::AstFoldFns {\n         fold_crate: fold::wrap(|a,b| fold_crate(cx, a, b) ),"}, {"sha": "7e89d0407816031ea3e191822df7460a798e7d00", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2e65782c1780cb9327281c7f78c8b40a5b4f5f57/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e65782c1780cb9327281c7f78c8b40a5b4f5f57/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=2e65782c1780cb9327281c7f78c8b40a5b4f5f57", "patch": "@@ -174,18 +174,13 @@ pub struct FileMapAndBytePos {fm: @FileMap, pos: BytePos}\n #[deriving(IterBytes)]\n pub struct NameAndSpan {name: @str, span: Option<span>}\n \n+/// Extra information for tracking macro expansion of spans\n #[deriving(IterBytes)]\n-pub struct CallInfo {\n+pub struct ExpnInfo {\n     call_site: span,\n     callee: NameAndSpan\n }\n \n-/// Extra information for tracking macro expansion of spans\n-#[deriving(IterBytes)]\n-pub enum ExpnInfo {\n-    ExpandedFrom(CallInfo)\n-}\n-\n pub type FileName = @str;\n \n pub struct FileLines"}, {"sha": "ad14b567b9602c6b0524239129d3277866a44d90", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2e65782c1780cb9327281c7f78c8b40a5b4f5f57/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e65782c1780cb9327281c7f78c8b40a5b4f5f57/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=2e65782c1780cb9327281c7f78c8b40a5b4f5f57", "patch": "@@ -11,8 +11,7 @@\n use ast;\n use ast::Name;\n use codemap;\n-use codemap::{CodeMap, span, ExpnInfo, ExpandedFrom};\n-use codemap::CallInfo;\n+use codemap::{CodeMap, span, ExpnInfo};\n use diagnostic::span_handler;\n use ext;\n use parse;\n@@ -243,7 +242,7 @@ impl ExtCtxt {\n     pub fn cfg(&self) -> ast::crate_cfg { copy self.cfg }\n     pub fn call_site(&self) -> span {\n         match *self.backtrace {\n-            Some(@ExpandedFrom(CallInfo {call_site: cs, _})) => cs,\n+            Some(@ExpnInfo {call_site: cs, _}) => cs,\n             None => self.bug(\"missing top span\")\n         }\n     }\n@@ -254,21 +253,19 @@ impl ExtCtxt {\n     pub fn mod_path(&self) -> ~[ast::ident] { copy *self.mod_path }\n     pub fn bt_push(&self, ei: codemap::ExpnInfo) {\n         match ei {\n-            ExpandedFrom(CallInfo {call_site: cs, callee: ref callee}) => {\n+            ExpnInfo {call_site: cs, callee: ref callee} => {\n                 *self.backtrace =\n-                    Some(@ExpandedFrom(CallInfo {\n+                    Some(@ExpnInfo {\n                         call_site: span {lo: cs.lo, hi: cs.hi,\n                                          expn_info: *self.backtrace},\n-                        callee: copy *callee}));\n+                        callee: copy *callee});\n             }\n         }\n     }\n     pub fn bt_pop(&self) {\n         match *self.backtrace {\n-            Some(@ExpandedFrom(\n-                CallInfo {\n-                    call_site: span {expn_info: prev, _}, _\n-                })) => {\n+            Some(@ExpnInfo {\n+                call_site: span {expn_info: prev, _}, _}) => {\n                 *self.backtrace = prev\n             }\n             _ => self.bug(\"tried to pop without a push\")"}, {"sha": "2b18ede88791b01a7baaabf037b476bf48289efb", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2e65782c1780cb9327281c7f78c8b40a5b4f5f57/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e65782c1780cb9327281c7f78c8b40a5b4f5f57/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=2e65782c1780cb9327281c7f78c8b40a5b4f5f57", "patch": "@@ -16,7 +16,7 @@ use ast;\n use ast_util::{new_rename, new_mark, resolve};\n use attr;\n use codemap;\n-use codemap::{span, CallInfo, ExpandedFrom, NameAndSpan, spanned};\n+use codemap::{span, ExpnInfo, NameAndSpan, spanned};\n use ext::base::*;\n use fold::*;\n use parse;\n@@ -60,13 +60,13 @@ pub fn expand_expr(extsbox: @mut SyntaxEnv,\n                             expander: exp,\n                             span: exp_sp\n                         }))) => {\n-                            cx.bt_push(ExpandedFrom(CallInfo {\n+                            cx.bt_push(ExpnInfo {\n                                 call_site: s,\n                                 callee: NameAndSpan {\n                                     name: extnamestr,\n                                     span: exp_sp,\n                                 },\n-                            }));\n+                            });\n \n                             let expanded = match exp(cx, mac.span, *tts) {\n                                 MRExpr(e) => e,\n@@ -131,13 +131,13 @@ pub fn expand_mod_items(extsbox: @mut SyntaxEnv,\n \n             match (*extsbox).find(&intern(mname)) {\n               Some(@SE(ItemDecorator(dec_fn))) => {\n-                  cx.bt_push(ExpandedFrom(CallInfo {\n+                  cx.bt_push(ExpnInfo {\n                       call_site: attr.span,\n                       callee: NameAndSpan {\n                           name: mname,\n                           span: None\n                       }\n-                  }));\n+                  });\n                   let r = dec_fn(cx, attr.span, attr.node.value, items);\n                   cx.bt_pop();\n                   r\n@@ -227,13 +227,13 @@ pub fn expand_item_mac(extsbox: @mut SyntaxEnv,\n                                     given '%s'\", extnamestr,\n                                    ident_to_str(&it.ident)));\n             }\n-            cx.bt_push(ExpandedFrom(CallInfo {\n+            cx.bt_push(ExpnInfo {\n                 call_site: it.span,\n                 callee: NameAndSpan {\n                     name: extnamestr,\n                     span: expand.span\n                 }\n-            }));\n+            });\n             ((*expand).expander)(cx, it.span, tts)\n         }\n         Some(@SE(IdentTT(ref expand))) => {\n@@ -242,13 +242,13 @@ pub fn expand_item_mac(extsbox: @mut SyntaxEnv,\n                               fmt!(\"macro %s! expects an ident argument\",\n                                    extnamestr));\n             }\n-            cx.bt_push(ExpandedFrom(CallInfo {\n+            cx.bt_push(ExpnInfo {\n                 call_site: it.span,\n                 callee: NameAndSpan {\n                     name: extnamestr,\n                     span: expand.span\n                 }\n-            }));\n+            });\n             ((*expand).expander)(cx, it.span, it.ident, tts)\n         }\n         _ => cx.span_fatal(\n@@ -319,10 +319,10 @@ pub fn expand_stmt(extsbox: @mut SyntaxEnv,\n \n         Some(@SE(NormalTT(\n             SyntaxExpanderTT{expander: exp, span: exp_sp}))) => {\n-            cx.bt_push(ExpandedFrom(CallInfo {\n+            cx.bt_push(ExpnInfo {\n                 call_site: sp,\n                 callee: NameAndSpan { name: extnamestr, span: exp_sp }\n-            }));\n+            });\n             let expanded = match exp(cx, mac.span, tts) {\n                 MRExpr(e) =>\n                     @codemap::spanned { node: stmt_expr(e, cx.next_id()),"}, {"sha": "b43536389e2cd06829e716447f98c01143e3da23", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2e65782c1780cb9327281c7f78c8b40a5b4f5f57/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e65782c1780cb9327281c7f78c8b40a5b4f5f57/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=2e65782c1780cb9327281c7f78c8b40a5b4f5f57", "patch": "@@ -10,8 +10,8 @@\n \n use ast;\n use codemap;\n-use codemap::{Pos, ExpandedFrom, span};\n-use codemap::{CallInfo, NameAndSpan};\n+use codemap::{Pos, span};\n+use codemap::{ExpnInfo, NameAndSpan};\n use ext::base::*;\n use ext::base;\n use ext::build::AstBuilder;\n@@ -117,14 +117,14 @@ pub fn expand_include_bin(cx: @ExtCtxt, sp: span, tts: &[ast::token_tree])\n // recur along an ExpnInfo chain to find the original expression\n fn topmost_expn_info(expn_info: @codemap::ExpnInfo) -> @codemap::ExpnInfo {\n     match *expn_info {\n-        ExpandedFrom(CallInfo { call_site: ref call_site, _ }) => {\n+        ExpnInfo { call_site: ref call_site, _ } => {\n             match call_site.expn_info {\n                 Some(next_expn_info) => {\n                     match *next_expn_info {\n-                        ExpandedFrom(CallInfo {\n+                        ExpnInfo {\n                             callee: NameAndSpan { name: ref name, _ },\n                             _\n-                        }) => {\n+                        } => {\n                             // Don't recurse into file using \"include!\"\n                             if \"include\" == *name  {\n                                 expn_info"}]}