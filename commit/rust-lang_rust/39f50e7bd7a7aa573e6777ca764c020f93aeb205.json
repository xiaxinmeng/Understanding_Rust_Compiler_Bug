{"sha": "39f50e7bd7a7aa573e6777ca764c020f93aeb205", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5ZjUwZTdiZDdhN2FhNTczZTY3NzdjYTc2NGMwMjBmOTNhZWIyMDU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-18T20:36:22Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-18T20:36:22Z"}, "message": "use new quote-generated ast", "tree": {"sha": "6aa551ace8e8266d93455bea11026fe030235b77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6aa551ace8e8266d93455bea11026fe030235b77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39f50e7bd7a7aa573e6777ca764c020f93aeb205", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39f50e7bd7a7aa573e6777ca764c020f93aeb205", "html_url": "https://github.com/rust-lang/rust/commit/39f50e7bd7a7aa573e6777ca764c020f93aeb205", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39f50e7bd7a7aa573e6777ca764c020f93aeb205/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cefdb5527d011d7d5ca2902791b7c3da0276fec", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cefdb5527d011d7d5ca2902791b7c3da0276fec", "html_url": "https://github.com/rust-lang/rust/commit/8cefdb5527d011d7d5ca2902791b7c3da0276fec"}], "stats": {"total": 2700, "additions": 1410, "deletions": 1290}, "files": [{"sha": "01666838077bfd55a647d336680d66d9c0f816cf", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 1408, "deletions": 1188, "changes": 2596, "blob_url": "https://github.com/rust-lang/rust/blob/39f50e7bd7a7aa573e6777ca764c020f93aeb205/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f50e7bd7a7aa573e6777ca764c020f93aeb205/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=39f50e7bd7a7aa573e6777ca764c020f93aeb205"}, {"sha": "03b4bf3a1e3f39250b2cb905d35dcc76116e4bc7", "filename": "crates/ra_syntax/src/ast/generated.rs.tera", "status": "removed", "additions": 0, "deletions": 101, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/8cefdb5527d011d7d5ca2902791b7c3da0276fec/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs.tera", "raw_url": "https://github.com/rust-lang/rust/raw/8cefdb5527d011d7d5ca2902791b7c3da0276fec/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs.tera", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs.tera?ref=8cefdb5527d011d7d5ca2902791b7c3da0276fec", "patch": "@@ -1,101 +0,0 @@\n-{# THIS File is not automatically generated:\n-the below applies to the result of this template\n-#}// This file is automatically generated based on the file `./generated.rs.tera` when `cargo gen-syntax` is run\n-// Do not edit manually\n-\n-//! This module contains auto-generated Rust AST. Like `SyntaxNode`s, AST nodes\n-//! are generic over ownership: `X<'a>` things are `Copy` references, `XNode`\n-//! are Arc-based. You can switch between the two variants using `.owned` and\n-//! `.borrowed` functions. Most of the code works with borowed mode, and only\n-//! this mode has all AST accessors.\n-\n-#![cfg_attr(rustfmt, rustfmt_skip)]\n-\n-use crate::{\n-    SyntaxNode, SyntaxKind::{self, *},\n-    ast::{self, AstNode},\n-};\n-{% for node, methods in ast %}\n-// {{ node }}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct {{ node }} {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-\n-impl AstNode for {{ node }} {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            {%- if methods.enum %}\n-            {% for kind in methods.enum %} | {{ kind | SCREAM }} {%- endfor -%}\n-            {% else %}\n-            {{ node | SCREAM }}\n-            {%- endif %} => true,\n-            _ => false,\n-        }\n-    }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) { Some({{ node }} { syntax }) } else { None }\n-    }\n-    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-}\n-\n-{% if methods.enum %}\n-#[derive(Debug, Clone, PartialEq, Eq)]\n-pub enum {{ node }}Kind {\n-{%- for kind in methods.enum %}\n-    {{ kind }}({{ kind }}),\n-{%- endfor %}\n-}\n-\n-{%- for kind in methods.enum %}\n-impl From<{{ kind }}> for {{ node }} {\n-    fn from(n: {{ kind }}) -> {{ node }} { {{ node }} { syntax: n.syntax } }\n-}\n-{%- endfor %}\n-impl {{ node }} {\n-    pub fn kind(&self) -> {{ node }}Kind {\n-        match self.syntax.kind() {\n-            {%- for kind in methods.enum %}\n-            {{ kind | SCREAM }} => {{ node }}Kind::{{ kind }}({{ kind }}::cast(self.syntax.clone()).unwrap()),\n-            {%- endfor %}\n-            _ => unreachable!(),\n-        }\n-    }\n-}\n-{% endif %}\n-{% if methods.traits -%}\n-\n-{%- for t in methods.traits -%}\n-impl ast::{{ t }} for {{ node }} {}\n-{% endfor -%}\n-\n-{%- endif -%}\n-\n-impl {{ node }} {\n-{%- if methods.collections -%}\n-{%- for m in methods.collections -%}\n-{%- set method_name = m.0 -%}\n-{%- set ChildName = m.1 %}\n-    pub fn {{ method_name }}(&self) -> impl Iterator<Item = {{ ChildName }}> {\n-        super::children(self)\n-    }\n-{% endfor -%}\n-{%- endif -%}\n-\n-{%- if methods.options -%}\n-{%- for m in methods.options -%}\n-\n-{%- if m is string -%}\n-{%- set method_name = m | snake -%}\n-{%- set ChildName = m %}\n-{%- else -%}\n-{%- set method_name = m.0 -%}\n-{%- set ChildName = m.1 %}\n-{%- endif %}\n-    pub fn {{ method_name }}(&self) -> Option<{{ ChildName }}> {\n-        super::child_opt(self)\n-    }\n-{% endfor -%}\n-{%- endif -%}\n-}\n-{% endfor %}"}, {"sha": "6fd6722907b905d5c98b481dfcceaa0d5c2486c3", "filename": "crates/ra_tools/src/codegen.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/39f50e7bd7a7aa573e6777ca764c020f93aeb205/crates%2Fra_tools%2Fsrc%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f50e7bd7a7aa573e6777ca764c020f93aeb205/crates%2Fra_tools%2Fsrc%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tools%2Fsrc%2Fcodegen.rs?ref=39f50e7bd7a7aa573e6777ca764c020f93aeb205", "patch": "@@ -154,7 +154,8 @@ fn reformat(text: impl std::fmt::Display) -> Result<String> {\n     write!(rustfmt.stdin.take().unwrap(), \"{}\", text)?;\n     let output = rustfmt.wait_with_output()?;\n     let stdout = String::from_utf8(output.stdout)?;\n-    Ok(stdout)\n+    let preamble = \"Generated file, do not edit by hand, see `crate/ra_tools/src/codegen`\";\n+    Ok(format!(\"// {}\\n\\n{}\", preamble, stdout))\n }\n \n #[derive(Deserialize, Debug)]"}]}