{"sha": "264c7659318cdd9213fc499810ffca107e10ffb8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2NGM3NjU5MzE4Y2RkOTIxM2ZjNDk5ODEwZmZjYTEwN2UxMGZmYjg=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-09-22T17:57:58Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-09-22T17:57:58Z"}, "message": "Revert \"Make recursive type verification logic better by allowing it to see through multiple levels of indirection. Still can trigger \"unexpected OpaqueTy\" bugs, but that's better than infinite loops.\"\n\nThis reverts commit 751a47cc5ac3223c3b592659937b485c56ab2644.\n\nBroken build.", "tree": {"sha": "5a8179dcd9e0bc231ebf0d2428b3fa39bc9eab36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a8179dcd9e0bc231ebf0d2428b3fa39bc9eab36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/264c7659318cdd9213fc499810ffca107e10ffb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/264c7659318cdd9213fc499810ffca107e10ffb8", "html_url": "https://github.com/rust-lang/rust/commit/264c7659318cdd9213fc499810ffca107e10ffb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/264c7659318cdd9213fc499810ffca107e10ffb8/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "751a47cc5ac3223c3b592659937b485c56ab2644", "url": "https://api.github.com/repos/rust-lang/rust/commits/751a47cc5ac3223c3b592659937b485c56ab2644", "html_url": "https://github.com/rust-lang/rust/commit/751a47cc5ac3223c3b592659937b485c56ab2644"}], "stats": {"total": 30, "additions": 12, "deletions": 18}, "files": [{"sha": "945155b0d799d9aec5148ce9e69a3d2e77c27fb8", "filename": "src/boot/me/semant.ml", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/264c7659318cdd9213fc499810ffca107e10ffb8/src%2Fboot%2Fme%2Fsemant.ml", "raw_url": "https://github.com/rust-lang/rust/raw/264c7659318cdd9213fc499810ffca107e10ffb8/src%2Fboot%2Fme%2Fsemant.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fsemant.ml?ref=264c7659318cdd9213fc499810ffca107e10ffb8", "patch": "@@ -2134,11 +2134,7 @@ and vec_sty (word_bits:Il.bits) : Il.scalar_ty =\n   let ptr = Il.ScalarTy (Il.AddrTy Il.OpaqueTy) in\n     Il.AddrTy (Il.StructTy [| word; word; word; ptr |])\n \n-and referent_type\n-    ?parent_tag:parent_tag\n-    (cx:ctxt)\n-    (t:Ast.ty)\n-    : Il.referent_ty =\n+and referent_type (cx:ctxt) (t:Ast.ty) : Il.referent_ty =\n   let s t = Il.ScalarTy t in\n   let v b = Il.ValTy b in\n   let p t = Il.AddrTy t in\n@@ -2153,7 +2149,12 @@ and referent_type\n   let tag ttag =\n     let n = get_n_tag_tups cx ttag in\n     let union =\n-      let rty t = referent_type ~parent_tag:ttag cx t in\n+      let rty t =\n+        match t with\n+            Ast.TY_box (Ast.TY_tag dst_tag) when is_back_edge ttag dst_tag ->\n+              sp (Il.StructTy [| word; Il.OpaqueTy |])\n+          | _ -> referent_type cx t\n+      in\n       let tup ttup = Il.StructTy (Array.map rty ttup) in\n         Array.init n (fun i -> tup (get_nth_tag_tup cx ttag i))\n     in\n@@ -2193,13 +2194,7 @@ and referent_type\n       | Ast.TY_fn _ -> fn_rty cx false\n       | Ast.TY_obj _ -> obj_rty word_bits\n \n-      | Ast.TY_tag ttag ->\n-          begin\n-            match parent_tag with\n-                Some parent_tag when is_back_edge ttag parent_tag ->\n-                  Il.OpaqueTy\n-              | _ -> tag ttag\n-          end\n+      | Ast.TY_tag ttag -> tag ttag\n \n       | Ast.TY_chan _\n       | Ast.TY_port _\n@@ -2210,15 +2205,14 @@ and referent_type\n       | Ast.TY_native _ -> ptr\n \n       | Ast.TY_box t ->\n-          sp (Il.StructTy\n-            [| word; referent_type ?parent_tag:parent_tag cx t |])\n+          sp (Il.StructTy [| word; referent_type cx t |])\n \n-      | Ast.TY_mutable t -> referent_type ?parent_tag:parent_tag cx t\n+      | Ast.TY_mutable t -> referent_type cx t\n \n       | Ast.TY_param (i, _) -> Il.ParamTy i\n \n       | Ast.TY_named _ -> bug () \"named type in referent_type\"\n-      | Ast.TY_constrained (t, _) -> referent_type ?parent_tag:parent_tag cx t\n+      | Ast.TY_constrained (t, _) -> referent_type cx t\n \n and slot_referent_type (cx:ctxt) (sl:Ast.slot) : Il.referent_ty =\n   let s t = Il.ScalarTy t in"}, {"sha": "2e27553712aa08bfaa3be8371753eb3075f78440", "filename": "src/boot/me/type.ml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/264c7659318cdd9213fc499810ffca107e10ffb8/src%2Fboot%2Fme%2Ftype.ml", "raw_url": "https://github.com/rust-lang/rust/raw/264c7659318cdd9213fc499810ffca107e10ffb8/src%2Fboot%2Fme%2Ftype.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftype.ml?ref=264c7659318cdd9213fc499810ffca107e10ffb8", "patch": "@@ -1010,7 +1010,7 @@ let populate_tag_graph_node (cx:Semant.ctxt) (id:Common.opaque_id) (n:int) =\n       | Ast.TY_rec ty_rec ->\n           Array.iter (fun (_, ty) -> add_ty ty) ty_rec\n       | Ast.TY_fn ty_fn -> add_ty_fn ty_fn\n-      | Ast.TY_chan ty | Ast.TY_port ty | Ast.TY_mutable ty\n+      | Ast.TY_vec ty | Ast.TY_chan ty | Ast.TY_port ty | Ast.TY_mutable ty\n           | Ast.TY_constrained (ty, _) -> add_ty ty\n       | Ast.TY_obj (_, ty_fns) ->\n           Hashtbl.iter (fun _ ty_fn -> add_ty_fn ty_fn) ty_fns"}]}