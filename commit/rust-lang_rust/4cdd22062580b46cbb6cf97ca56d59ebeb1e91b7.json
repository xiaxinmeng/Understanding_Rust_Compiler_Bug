{"sha": "4cdd22062580b46cbb6cf97ca56d59ebeb1e91b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjZGQyMjA2MjU4MGI0NmNiYjZjZjk3Y2E1NmQ1OWViZWIxZTkxYjc=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-11-16T16:26:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-16T16:26:11Z"}, "message": "Rollup merge of #74989 - pubfnbar:impl-array-indexing, r=KodrAus\n\nImplement `Index` and `IndexMut` for arrays\n\nAdds implementations of `Index` and `IndexMut` for arrays that simply forward to the slice indexing implementation in order to fix the following problem:\n\nIf you implement `Index<MyIndexType>` for an array, you lose all the other indexing functionality that used to be available to the array via its implicit coercion to a slice. An example of what I'm talking about:\n```rust\nuse std::ops::Index;\n\npub enum MyIndexType {\n    _0, _1, _2, _3, _4, _5, _6, _7,\n}\n\nimpl<T> Index<MyIndexType> for [T; 8] {\n    type Output = T;\n\n    fn index(&self, index: MyIndexType) -> &T {\n        unsafe { self.get_unchecked(index as usize) }\n    }\n}\n\nfn main() {\n    let array = [11u8; 8];\n\n    println!(\"{:?}\", array[MyIndexType::_0]); // OK\n\n    println!(\"{:?}\", array[0usize]); // error[E0277]\n    //               ^^^^^^^^^^^^^ `[u8; 8]` cannot be indexed by `usize`\n}\n```", "tree": {"sha": "4db6c92ac32c271ab3fc6b558ec1ba321ebf0d93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4db6c92ac32c271ab3fc6b558ec1ba321ebf0d93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cdd22062580b46cbb6cf97ca56d59ebeb1e91b7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfsqgkCRBK7hj4Ov3rIwAAdHIIAAlHH9dZzPeatPK7w2cw5Mm8\n0rlim5NoYL8WOl9iGQ/fNmtbr4Z48a5psKuo0Wb3Ig4D/9Qi98BDjM1GmC10VKKP\nxDheW7gz1GgUA9aDgj9IJZ/2jJU10EfbLwXfcTydkDZYC+HTSO3O9dR3krs32dr8\nu1KaD6X9NOxOYPqE4z2GLA63+stQu0YZ3nyH1EZX/5Xc5KzEz/Pt3JXscFydf/uN\nA0gPLLha1ExMrfBWXC97T7DYZnRheteCVNdG3rOcIyIOKyv6Imy4Yc/7pvdis1mW\ntwuspGcwFYOveJnGHcnnYvJGvmWOAMRCuv266Z8GAZnyeI1lJHLgfRK0la9TsP4=\n=U9e5\n-----END PGP SIGNATURE-----\n", "payload": "tree 4db6c92ac32c271ab3fc6b558ec1ba321ebf0d93\nparent f5230fbf76bafd86ee4376a0e26e551df8d17fec\nparent c03dfa6671bb462d243c12c72c8829f98c99e394\nauthor Mara Bos <m-ou.se@m-ou.se> 1605543971 +0100\ncommitter GitHub <noreply@github.com> 1605543971 +0100\n\nRollup merge of #74989 - pubfnbar:impl-array-indexing, r=KodrAus\n\nImplement `Index` and `IndexMut` for arrays\n\nAdds implementations of `Index` and `IndexMut` for arrays that simply forward to the slice indexing implementation in order to fix the following problem:\n\nIf you implement `Index<MyIndexType>` for an array, you lose all the other indexing functionality that used to be available to the array via its implicit coercion to a slice. An example of what I'm talking about:\n```rust\nuse std::ops::Index;\n\npub enum MyIndexType {\n    _0, _1, _2, _3, _4, _5, _6, _7,\n}\n\nimpl<T> Index<MyIndexType> for [T; 8] {\n    type Output = T;\n\n    fn index(&self, index: MyIndexType) -> &T {\n        unsafe { self.get_unchecked(index as usize) }\n    }\n}\n\nfn main() {\n    let array = [11u8; 8];\n\n    println!(\"{:?}\", array[MyIndexType::_0]); // OK\n\n    println!(\"{:?}\", array[0usize]); // error[E0277]\n    //               ^^^^^^^^^^^^^ `[u8; 8]` cannot be indexed by `usize`\n}\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cdd22062580b46cbb6cf97ca56d59ebeb1e91b7", "html_url": "https://github.com/rust-lang/rust/commit/4cdd22062580b46cbb6cf97ca56d59ebeb1e91b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cdd22062580b46cbb6cf97ca56d59ebeb1e91b7/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5230fbf76bafd86ee4376a0e26e551df8d17fec", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5230fbf76bafd86ee4376a0e26e551df8d17fec", "html_url": "https://github.com/rust-lang/rust/commit/f5230fbf76bafd86ee4376a0e26e551df8d17fec"}, {"sha": "c03dfa6671bb462d243c12c72c8829f98c99e394", "url": "https://api.github.com/repos/rust-lang/rust/commits/c03dfa6671bb462d243c12c72c8829f98c99e394", "html_url": "https://github.com/rust-lang/rust/commit/c03dfa6671bb462d243c12c72c8829f98c99e394"}], "stats": {"total": 25, "additions": 25, "deletions": 0}, "files": [{"sha": "769ef02873d5cbe2b0c4a46ee67df25582ae93a2", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4cdd22062580b46cbb6cf97ca56d59ebeb1e91b7/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cdd22062580b46cbb6cf97ca56d59ebeb1e91b7/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=4cdd22062580b46cbb6cf97ca56d59ebeb1e91b7", "patch": "@@ -12,6 +12,7 @@ use crate::convert::{Infallible, TryFrom};\n use crate::fmt;\n use crate::hash::{self, Hash};\n use crate::marker::Unsize;\n+use crate::ops::{Index, IndexMut};\n use crate::slice::{Iter, IterMut};\n \n mod iter;\n@@ -208,6 +209,30 @@ impl<'a, T, const N: usize> IntoIterator for &'a mut [T; N] {\n     }\n }\n \n+#[stable(feature = \"index_trait_on_arrays\", since = \"1.50.0\")]\n+impl<T, I, const N: usize> Index<I> for [T; N]\n+where\n+    [T]: Index<I>,\n+{\n+    type Output = <[T] as Index<I>>::Output;\n+\n+    #[inline]\n+    fn index(&self, index: I) -> &Self::Output {\n+        Index::index(self as &[T], index)\n+    }\n+}\n+\n+#[stable(feature = \"index_trait_on_arrays\", since = \"1.50.0\")]\n+impl<T, I, const N: usize> IndexMut<I> for [T; N]\n+where\n+    [T]: IndexMut<I>,\n+{\n+    #[inline]\n+    fn index_mut(&mut self, index: I) -> &mut Self::Output {\n+        IndexMut::index_mut(self as &mut [T], index)\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A, B, const N: usize> PartialEq<[B; N]> for [A; N]\n where"}]}