{"sha": "758dc9af504e2fe75813bd362619231ecc727898", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1OGRjOWFmNTA0ZTJmZTc1ODEzYmQzNjI2MTkyMzFlY2M3Mjc4OTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-02T07:38:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-02T07:38:36Z"}, "message": "Auto merge of #60156 - RalfJung:macos-rand, r=oli-obk,alexcrichton\n\nuse SecRandomCopyBytes on macOS in Miri\n\nThis is a hack to fix https://github.com/rust-lang/miri/issues/686: on macOS, rustc will open `/dev/urandom` to initialize a `HashMap`. That's quite hard to emulate properly in Miri without a full-blown implementation of file descriptors.  However, Miri needs an implementation of `SecRandomCopyBytes` anyway to support [getrandom](https://crates.io/crates/getrandom), so using it here should work just as well.\n\nThis will only have an effect when libstd is compiled specifically for Miri, but that will generally be the case when people use `cargo miri`.\n\nThis is clearly a hack, so I am opening this to start a discussion about whether we are okay with such a hack or not.\n\nCc @oli-obk", "tree": {"sha": "bba5214e3fd0edcb1e6503afcfcba8f5d93dc5f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bba5214e3fd0edcb1e6503afcfcba8f5d93dc5f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/758dc9af504e2fe75813bd362619231ecc727898", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/758dc9af504e2fe75813bd362619231ecc727898", "html_url": "https://github.com/rust-lang/rust/commit/758dc9af504e2fe75813bd362619231ecc727898", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/758dc9af504e2fe75813bd362619231ecc727898/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92b5e20ad59b183a2e6cd79423f54b8aa7ac9cbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/92b5e20ad59b183a2e6cd79423f54b8aa7ac9cbf", "html_url": "https://github.com/rust-lang/rust/commit/92b5e20ad59b183a2e6cd79423f54b8aa7ac9cbf"}, {"sha": "16ad9777b8afd3991b4501e602a04e5e40214b56", "url": "https://api.github.com/repos/rust-lang/rust/commits/16ad9777b8afd3991b4501e602a04e5e40214b56", "html_url": "https://github.com/rust-lang/rust/commit/16ad9777b8afd3991b4501e602a04e5e40214b56"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "821c37dc235969eaded9f4505287e86cfb9307b5", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/758dc9af504e2fe75813bd362619231ecc727898/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/758dc9af504e2fe75813bd362619231ecc727898/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=758dc9af504e2fe75813bd362619231ecc727898", "patch": "@@ -262,6 +262,7 @@ fn main() {\n             // The flags here should be kept in sync with `add_miri_default_args`\n             // in miri's `src/lib.rs`.\n             cmd.arg(\"-Zalways-encode-mir\");\n+            cmd.arg(\"--cfg=miri\");\n             // These options are preferred by miri, to be able to perform better validation,\n             // but the bootstrap compiler might not understand them.\n             if stage != \"0\" {"}, {"sha": "e923b9aa29b0117d0d4144f9539e4ba0fd245241", "filename": "src/libstd/sys/unix/rand.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/758dc9af504e2fe75813bd362619231ecc727898/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/758dc9af504e2fe75813bd362619231ecc727898/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Frand.rs?ref=758dc9af504e2fe75813bd362619231ecc727898", "patch": "@@ -13,6 +13,7 @@ pub fn hashmap_random_keys() -> (u64, u64) {\n \n #[cfg(all(unix,\n           not(target_os = \"ios\"),\n+          not(all(target_os = \"macos\", miri)),\n           not(target_os = \"openbsd\"),\n           not(target_os = \"freebsd\"),\n           not(target_os = \"fuchsia\")))]\n@@ -106,7 +107,9 @@ mod imp {\n // once per thread in `hashmap_random_keys`. Therefore `SecRandomCopyBytes` is\n // only used on iOS where direct access to `/dev/urandom` is blocked by the\n // sandbox.\n-#[cfg(target_os = \"ios\")]\n+// HACK: However, we do use this when running in Miri on macOS; intercepting this is much\n+// easier than intercepting accesses to /dev/urandom.\n+#[cfg(any(target_os = \"ios\", all(target_os = \"macos\", miri)))]\n mod imp {\n     use crate::io;\n     use crate::ptr;"}]}