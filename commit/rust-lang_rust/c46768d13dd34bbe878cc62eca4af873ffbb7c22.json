{"sha": "c46768d13dd34bbe878cc62eca4af873ffbb7c22", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0Njc2OGQxM2RkMzRiYmU4NzhjYzYyZWNhNGFmODczZmZiYjdjMjI=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-11-10T03:03:24Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-11-11T06:13:31Z"}, "message": "Add basic bultin macro infrastructure", "tree": {"sha": "2354a9f6aaf7d09cae9c386f4330852b10cd5d9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2354a9f6aaf7d09cae9c386f4330852b10cd5d9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c46768d13dd34bbe878cc62eca4af873ffbb7c22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c46768d13dd34bbe878cc62eca4af873ffbb7c22", "html_url": "https://github.com/rust-lang/rust/commit/c46768d13dd34bbe878cc62eca4af873ffbb7c22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c46768d13dd34bbe878cc62eca4af873ffbb7c22/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "defc7ad772123a449f7cc384dd46d88c3a45fb53", "url": "https://api.github.com/repos/rust-lang/rust/commits/defc7ad772123a449f7cc384dd46d88c3a45fb53", "html_url": "https://github.com/rust-lang/rust/commit/defc7ad772123a449f7cc384dd46d88c3a45fb53"}], "stats": {"total": 177, "additions": 148, "deletions": 29}, "files": [{"sha": "c4e62f7993f6df2906455b7541ceb6c45959a286", "filename": "crates/ra_hir/src/code_model/src.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c46768d13dd34bbe878cc62eca4af873ffbb7c22/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c46768d13dd34bbe878cc62eca4af873ffbb7c22/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs?ref=c46768d13dd34bbe878cc62eca4af873ffbb7c22", "patch": "@@ -6,8 +6,8 @@ use crate::{\n     adt::VariantDef,\n     db::{AstDatabase, DefDatabase, HirDatabase},\n     ids::AstItemDef,\n-    Const, Either, Enum, EnumVariant, FieldSource, Function, HasBody, HirFileId, MacroDef, Module,\n-    ModuleSource, Static, Struct, StructField, Trait, TypeAlias, Union,\n+    Const, Either, Enum, EnumVariant, FieldSource, Function, HasBody, HirFileId, MacroDef,\n+    MacroDefId, Module, ModuleSource, Static, Struct, StructField, Trait, TypeAlias, Union,\n };\n \n pub use hir_expand::Source;\n@@ -140,10 +140,15 @@ impl HasSource for TypeAlias {\n         self.id.source(db)\n     }\n }\n+\n impl HasSource for MacroDef {\n     type Ast = ast::MacroCall;\n     fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<ast::MacroCall> {\n-        Source { file_id: self.id.ast_id.file_id(), ast: self.id.ast_id.to_node(db) }\n+        let ast_id = match self.id {\n+            MacroDefId::DeclarativeMacro(it) => it.ast_id,\n+            MacroDefId::BuiltinMacro(it) => it.ast_id,\n+        };\n+        Source { file_id: ast_id.file_id(), ast: ast_id.to_node(db) }\n     }\n }\n "}, {"sha": "5f18e9de3b07af1d2f6864d826a702b99c1f4396", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c46768d13dd34bbe878cc62eca4af873ffbb7c22/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c46768d13dd34bbe878cc62eca4af873ffbb7c22/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=c46768d13dd34bbe878cc62eca4af873ffbb7c22", "patch": "@@ -1,8 +1,9 @@\n //! FIXME: write short doc here\n \n use hir_expand::{\n+    builtin_macro::find_builtin_macro,\n     name::{self, AsName, Name},\n-    HirFileId, MacroCallId, MacroCallLoc, MacroDefId, MacroFileKind,\n+    DeclarativeMacro, HirFileId, MacroCallId, MacroCallLoc, MacroDefId, MacroFileKind,\n };\n use ra_cfg::CfgOptions;\n use ra_db::{CrateId, FileId};\n@@ -688,11 +689,32 @@ where\n     fn collect_macro(&mut self, mac: &raw::MacroData) {\n         let ast_id = AstId::new(self.file_id, mac.ast_id);\n \n+        // Case 0: builtin macros\n+        if mac.builtin {\n+            if let Some(name) = &mac.name {\n+                let krate = self.def_collector.def_map.krate;\n+                if let Some(macro_id) = find_builtin_macro(name, krate, ast_id) {\n+                    self.def_collector.define_macro(\n+                        self.module_id,\n+                        name.clone(),\n+                        macro_id,\n+                        mac.export,\n+                    );\n+                    return;\n+                }\n+            }\n+        }\n+\n         // Case 1: macro rules, define a macro in crate-global mutable scope\n         if is_macro_rules(&mac.path) {\n             if let Some(name) = &mac.name {\n-                let macro_id = MacroDefId { ast_id, krate: self.def_collector.def_map.krate };\n-                self.def_collector.define_macro(self.module_id, name.clone(), macro_id, mac.export);\n+                let macro_id = DeclarativeMacro { ast_id, krate: self.def_collector.def_map.krate };\n+                self.def_collector.define_macro(\n+                    self.module_id,\n+                    name.clone(),\n+                    MacroDefId::DeclarativeMacro(macro_id),\n+                    mac.export,\n+                );\n             }\n             return;\n         }"}, {"sha": "f52002bc0b74d9d9a55002f1f3b8e8bd92dded32", "filename": "crates/ra_hir_def/src/nameres/raw.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c46768d13dd34bbe878cc62eca4af873ffbb7c22/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c46768d13dd34bbe878cc62eca4af873ffbb7c22/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs?ref=c46768d13dd34bbe878cc62eca4af873ffbb7c22", "patch": "@@ -200,6 +200,7 @@ pub(super) struct MacroData {\n     pub(super) path: Path,\n     pub(super) name: Option<Name>,\n     pub(super) export: bool,\n+    pub(super) builtin: bool,\n }\n \n struct RawItemsCollector {\n@@ -367,7 +368,11 @@ impl RawItemsCollector {\n         // FIXME: cfg_attr\n         let export = m.attrs().filter_map(|x| x.simple_name()).any(|name| name == \"macro_export\");\n \n-        let m = self.raw_items.macros.alloc(MacroData { ast_id, path, name, export });\n+        // FIXME: cfg_attr\n+        let builtin =\n+            m.attrs().filter_map(|x| x.simple_name()).any(|name| name == \"rustc_builtin_macro\");\n+\n+        let m = self.raw_items.macros.alloc(MacroData { ast_id, path, name, export, builtin });\n         self.push_item(current_module, attrs, RawItemKind::Macro(m));\n     }\n "}, {"sha": "dca2f17ef08097df7cf6c356e16d711f30a7cb65", "filename": "crates/ra_hir_expand/src/builtin_macro.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c46768d13dd34bbe878cc62eca4af873ffbb7c22/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c46768d13dd34bbe878cc62eca4af873ffbb7c22/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=c46768d13dd34bbe878cc62eca4af873ffbb7c22", "patch": "@@ -0,0 +1,26 @@\n+//! Builtin macro\n+use crate::{ast, name, AstId, BuiltinMacro, CrateId, MacroDefId};\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub enum BuiltinExpander {\n+    Line\n+}\n+\n+impl BuiltinExpander {\n+    pub fn expand(&self, _tt: &tt::Subtree) -> Result<tt::Subtree, mbe::ExpandError> {\n+        Err(mbe::ExpandError::UnexpectedToken)\n+    }\n+}\n+\n+pub fn find_builtin_macro(\n+    ident: &name::Name,\n+    krate: CrateId,\n+    ast_id: AstId<ast::MacroCall>,\n+) -> Option<MacroDefId> {\n+    // FIXME: Better registering method\n+    if ident == &name::LINE {\n+        Some(MacroDefId::BuiltinMacro(BuiltinMacro { expander: BuiltinExpander::Line, krate, ast_id }))\n+    } else {\n+        None\n+    }\n+}"}, {"sha": "343c9e6bf6a77123bd038bfd9a511280b9a25c66", "filename": "crates/ra_hir_expand/src/db.rs", "status": "modified", "additions": 50, "deletions": 16, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/c46768d13dd34bbe878cc62eca4af873ffbb7c22/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c46768d13dd34bbe878cc62eca4af873ffbb7c22/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs?ref=c46768d13dd34bbe878cc62eca4af873ffbb7c22", "patch": "@@ -9,10 +9,37 @@ use ra_prof::profile;\n use ra_syntax::{AstNode, Parse, SyntaxNode};\n \n use crate::{\n-    ast_id_map::AstIdMap, HirFileId, HirFileIdRepr, MacroCallId, MacroCallLoc, MacroDefId,\n-    MacroFile, MacroFileKind,\n+    ast_id_map::AstIdMap, BuiltinExpander, HirFileId, HirFileIdRepr, MacroCallId, MacroCallLoc,\n+    MacroDefId, MacroFile, MacroFileKind,\n };\n \n+#[derive(Debug, Clone, Eq, PartialEq)]\n+pub enum TokenExpander {\n+    MacroRules(mbe::MacroRules),\n+    Builtin(BuiltinExpander),\n+}\n+\n+impl TokenExpander {\n+    pub fn expand(\n+        &self,\n+        db: &dyn AstDatabase,\n+        id: MacroCallId,\n+        tt: &tt::Subtree,\n+    ) -> Result<tt::Subtree, mbe::ExpandError> {\n+        match self {\n+            TokenExpander::MacroRules(it) => it.expand(tt),\n+            TokenExpander::Builtin(it) => it.expand(tt),\n+        }\n+    }\n+\n+    pub fn shift(&self) -> u32 {\n+        match self {\n+            TokenExpander::MacroRules(it) => it.shift(),\n+            TokenExpander::Builtin(_) => 0,\n+        }\n+    }\n+}\n+\n // FIXME: rename to ExpandDatabase\n #[salsa::query_group(AstDatabaseStorage)]\n pub trait AstDatabase: SourceDatabase {\n@@ -24,7 +51,7 @@ pub trait AstDatabase: SourceDatabase {\n     #[salsa::interned]\n     fn intern_macro(&self, macro_call: MacroCallLoc) -> MacroCallId;\n     fn macro_arg(&self, id: MacroCallId) -> Option<Arc<(tt::Subtree, mbe::TokenMap)>>;\n-    fn macro_def(&self, id: MacroDefId) -> Option<Arc<(mbe::MacroRules, mbe::TokenMap)>>;\n+    fn macro_def(&self, id: MacroDefId) -> Option<Arc<(TokenExpander, mbe::TokenMap)>>;\n     fn parse_macro(\n         &self,\n         macro_file: MacroFile,\n@@ -41,18 +68,25 @@ pub(crate) fn ast_id_map(db: &dyn AstDatabase, file_id: HirFileId) -> Arc<AstIdM\n pub(crate) fn macro_def(\n     db: &dyn AstDatabase,\n     id: MacroDefId,\n-) -> Option<Arc<(mbe::MacroRules, mbe::TokenMap)>> {\n-    let macro_call = id.ast_id.to_node(db);\n-    let arg = macro_call.token_tree()?;\n-    let (tt, tmap) = mbe::ast_to_token_tree(&arg).or_else(|| {\n-        log::warn!(\"fail on macro_def to token tree: {:#?}\", arg);\n-        None\n-    })?;\n-    let rules = MacroRules::parse(&tt).ok().or_else(|| {\n-        log::warn!(\"fail on macro_def parse: {:#?}\", tt);\n-        None\n-    })?;\n-    Some(Arc::new((rules, tmap)))\n+) -> Option<Arc<(TokenExpander, mbe::TokenMap)>> {\n+    match id {\n+        MacroDefId::DeclarativeMacro(it) => {\n+            let macro_call = it.ast_id.to_node(db);\n+            let arg = macro_call.token_tree()?;\n+            let (tt, tmap) = mbe::ast_to_token_tree(&arg).or_else(|| {\n+                log::warn!(\"fail on macro_def to token tree: {:#?}\", arg);\n+                None\n+            })?;\n+            let rules = MacroRules::parse(&tt).ok().or_else(|| {\n+                log::warn!(\"fail on macro_def parse: {:#?}\", tt);\n+                None\n+            })?;\n+            Some(Arc::new((TokenExpander::MacroRules(rules), tmap)))\n+        }\n+        MacroDefId::BuiltinMacro(it) => {\n+            Some(Arc::new((TokenExpander::Builtin(it.expander.clone()), mbe::TokenMap::default())))\n+        }\n+    }\n }\n \n pub(crate) fn macro_arg(\n@@ -74,7 +108,7 @@ pub(crate) fn macro_expand(\n     let macro_arg = db.macro_arg(id).ok_or(\"Fail to args in to tt::TokenTree\")?;\n \n     let macro_rules = db.macro_def(loc.def).ok_or(\"Fail to find macro definition\")?;\n-    let tt = macro_rules.0.expand(&macro_arg.0).map_err(|err| format!(\"{:?}\", err))?;\n+    let tt = macro_rules.0.expand(db, id, &macro_arg.0).map_err(|err| format!(\"{:?}\", err))?;\n     // Set a hard limit for the expanded tt\n     let count = tt.count();\n     if count > 65536 {"}, {"sha": "6b682d3abd0192f2fc88d309100d9422b5e2a7a0", "filename": "crates/ra_hir_expand/src/hygiene.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c46768d13dd34bbe878cc62eca4af873ffbb7c22/crates%2Fra_hir_expand%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c46768d13dd34bbe878cc62eca4af873ffbb7c22/crates%2Fra_hir_expand%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fhygiene.rs?ref=c46768d13dd34bbe878cc62eca4af873ffbb7c22", "patch": "@@ -9,7 +9,7 @@ use crate::{\n     db::AstDatabase,\n     either::Either,\n     name::{AsName, Name},\n-    HirFileId, HirFileIdRepr,\n+    HirFileId, HirFileIdRepr, MacroDefId,\n };\n \n #[derive(Debug)]\n@@ -24,7 +24,10 @@ impl Hygiene {\n             HirFileIdRepr::FileId(_) => None,\n             HirFileIdRepr::MacroFile(macro_file) => {\n                 let loc = db.lookup_intern_macro(macro_file.macro_call_id);\n-                Some(loc.def.krate)\n+                match loc.def {\n+                    MacroDefId::DeclarativeMacro(it) => Some(it.krate),\n+                    MacroDefId::BuiltinMacro(_) => None,\n+                }\n             }\n         };\n         Hygiene { def_crate }"}, {"sha": "6b71738eee8e4691a7dc21691b5bfd3f18e8805b", "filename": "crates/ra_hir_expand/src/lib.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c46768d13dd34bbe878cc62eca4af873ffbb7c22/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c46768d13dd34bbe878cc62eca4af873ffbb7c22/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Flib.rs?ref=c46768d13dd34bbe878cc62eca4af873ffbb7c22", "patch": "@@ -10,6 +10,7 @@ pub mod either;\n pub mod name;\n pub mod hygiene;\n pub mod diagnostics;\n+pub mod builtin_macro;\n \n use std::hash::{Hash, Hasher};\n use std::sync::Arc;\n@@ -21,6 +22,7 @@ use ra_syntax::{\n };\n \n use crate::ast_id_map::FileAstId;\n+use crate::builtin_macro::BuiltinExpander;\n \n /// Input to the analyzer is a set of files, where each file is identified by\n /// `FileId` and contains source code. However, another source of source code in\n@@ -75,17 +77,23 @@ impl HirFileId {\n             HirFileIdRepr::MacroFile(macro_file) => {\n                 let loc: MacroCallLoc = db.lookup_intern_macro(macro_file.macro_call_id);\n \n+                // FIXME: Do we support expansion information in builtin macro?\n+                let macro_decl = match loc.def {\n+                    MacroDefId::DeclarativeMacro(it) => (it),\n+                    MacroDefId::BuiltinMacro(_) => return None,\n+                };\n+\n                 let arg_start = loc.ast_id.to_node(db).token_tree()?.syntax().text_range().start();\n                 let def_start =\n-                    loc.def.ast_id.to_node(db).token_tree()?.syntax().text_range().start();\n+                    macro_decl.ast_id.to_node(db).token_tree()?.syntax().text_range().start();\n \n                 let macro_def = db.macro_def(loc.def)?;\n                 let shift = macro_def.0.shift();\n                 let exp_map = db.parse_macro(macro_file)?.1;\n                 let macro_arg = db.macro_arg(macro_file.macro_call_id)?;\n \n                 let arg_start = (loc.ast_id.file_id, arg_start);\n-                let def_start = (loc.def.ast_id.file_id, def_start);\n+                let def_start = (macro_decl.ast_id.file_id, def_start);\n \n                 Some(ExpansionInfo { arg_start, def_start, macro_arg, macro_def, exp_map, shift })\n             }\n@@ -119,9 +127,22 @@ impl salsa::InternKey for MacroCallId {\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct MacroDefId {\n+pub enum MacroDefId {\n+    DeclarativeMacro(DeclarativeMacro),\n+    BuiltinMacro(BuiltinMacro),\n+}\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct DeclarativeMacro {\n+    pub krate: CrateId,\n+    pub ast_id: AstId<ast::MacroCall>,\n+}\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct BuiltinMacro {\n     pub krate: CrateId,\n     pub ast_id: AstId<ast::MacroCall>,\n+    pub expander: BuiltinExpander,\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -144,7 +165,7 @@ pub struct ExpansionInfo {\n     pub(crate) def_start: (HirFileId, TextUnit),\n     pub(crate) shift: u32,\n \n-    pub(crate) macro_def: Arc<(mbe::MacroRules, mbe::TokenMap)>,\n+    pub(crate) macro_def: Arc<(db::TokenExpander, mbe::TokenMap)>,\n     pub(crate) macro_arg: Arc<(tt::Subtree, mbe::TokenMap)>,\n     pub(crate) exp_map: Arc<mbe::RevTokenMap>,\n }"}, {"sha": "1bf17d12b5b5818e5c119486cba39d4088fd5c08", "filename": "crates/ra_hir_expand/src/name.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c46768d13dd34bbe878cc62eca4af873ffbb7c22/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c46768d13dd34bbe878cc62eca4af873ffbb7c22/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fname.rs?ref=c46768d13dd34bbe878cc62eca4af873ffbb7c22", "patch": "@@ -140,3 +140,6 @@ pub const RESULT_TYPE: Name = Name::new_inline_ascii(6, b\"Result\");\n pub const OUTPUT_TYPE: Name = Name::new_inline_ascii(6, b\"Output\");\n pub const TARGET_TYPE: Name = Name::new_inline_ascii(6, b\"Target\");\n pub const BOX_TYPE: Name = Name::new_inline_ascii(3, b\"Box\");\n+\n+// Builtin Macros\n+pub const LINE_MACRO: Name = Name::new_inline_ascii(4, b\"line\");"}]}