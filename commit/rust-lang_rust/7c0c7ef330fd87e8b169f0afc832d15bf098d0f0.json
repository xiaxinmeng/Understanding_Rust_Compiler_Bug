{"sha": "7c0c7ef330fd87e8b169f0afc832d15bf098d0f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjMGM3ZWYzMzBmZDg3ZThiMTY5ZjBhZmM4MzJkMTViZjA5OGQwZjA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-03-23T14:27:16Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-03-23T17:16:08Z"}, "message": "Rollup merge of #48909 - RalfJung:type_alias_bounds, r=petrochenkov\n\nImprove lint for type alias bounds\n\nFirst of all, I learned just today that I was wrong assuming that the bounds in type aliases are entirely ignored: It turns out they are used to resolve associated types in type aliases. So:\n```rust\ntype T1<U: Bound> = U::Assoc; // compiles\ntype T2<U> = U::Assoc; // fails\ntype T3<U> = <U as Bound>::Assoc; // \"correct\" way to write this, maybe?\n```\nI am sorry for creating this mess.\n\nThis PR changes the wording of the lint accordingly. Moreover, since just removing the bound is no longer always a possible fix, I tried to detect cases like `T1` above and show a helpful message to the user:\n```\nwarning: bounds on generic parameters are not enforced in type aliases\n  --> $DIR/type-alias-bounds.rs:57:12\n   |\nLL | type T1<U: Bound> = U::Assoc; //~ WARN not enforced in type aliases\n   |            ^^^^^\n   |\n   = help: the bound will not be checked when the type alias is used, and should be removed\nhelp: use absolute paths (i.e., <T as Trait>::Assoc) to refer to associated types in type aliases\n  --> $DIR/type-alias-bounds.rs:57:21\n   |\nLL | type T1<U: Bound> = U::Assoc; //~ WARN not enforced in type aliases\n   |                     ^^^^^^^^\n```\nI am not sure if I got this entirely right. Ideally, we could provide a suggestion involving the correct trait and type name -- however, while I have access to the HIR in the lint, I do not know how to get access to the resolved name information, like which trait `Assoc` belongs to above. The lint does not even run if that resolution fails, so I assume that information is available *somewhere*...\n\nThis is a follow-up for (parts of) https://github.com/rust-lang/rust/pull/48326. Also see https://github.com/rust-lang/rust/issues/21903.\n\nThis changes the name of a lint, but that lint was just merged to master yesterday and has never even been on beta.", "tree": {"sha": "ddd4d8c545630c041e2f91ef72bdc4913ccdcd58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddd4d8c545630c041e2f91ef72bdc4913ccdcd58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c0c7ef330fd87e8b169f0afc832d15bf098d0f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c0c7ef330fd87e8b169f0afc832d15bf098d0f0", "html_url": "https://github.com/rust-lang/rust/commit/7c0c7ef330fd87e8b169f0afc832d15bf098d0f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c0c7ef330fd87e8b169f0afc832d15bf098d0f0/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f836ae48e6e0b55af1d0d6cd579424f26314d530", "url": "https://api.github.com/repos/rust-lang/rust/commits/f836ae48e6e0b55af1d0d6cd579424f26314d530", "html_url": "https://github.com/rust-lang/rust/commit/f836ae48e6e0b55af1d0d6cd579424f26314d530"}, {"sha": "c05d23406ead7b5747256c02127097807db45b83", "url": "https://api.github.com/repos/rust-lang/rust/commits/c05d23406ead7b5747256c02127097807db45b83", "html_url": "https://github.com/rust-lang/rust/commit/c05d23406ead7b5747256c02127097807db45b83"}], "stats": {"total": 354, "additions": 270, "deletions": 84}, "files": [{"sha": "12b472a7285446f0c1e306137d27540d3d005867", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7c0c7ef330fd87e8b169f0afc832d15bf098d0f0/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0c7ef330fd87e8b169f0afc832d15bf098d0f0/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=7c0c7ef330fd87e8b169f0afc832d15bf098d0f0", "patch": "@@ -395,6 +395,15 @@ pub enum TyParamBound {\n     RegionTyParamBound(Lifetime),\n }\n \n+impl TyParamBound {\n+    pub fn span(&self) -> Span {\n+        match self {\n+            &TraitTyParamBound(ref t, ..) => t.span,\n+            &RegionTyParamBound(ref l) => l.span,\n+        }\n+    }\n+}\n+\n /// A modifier on a bound, currently this is only used for `?Sized`, where the\n /// modifier is `Maybe`. Negative bounds should also be handled here.\n #[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n@@ -571,6 +580,16 @@ pub enum WherePredicate {\n     EqPredicate(WhereEqPredicate),\n }\n \n+impl WherePredicate {\n+    pub fn span(&self) -> Span {\n+        match self {\n+            &WherePredicate::BoundPredicate(ref p) => p.span,\n+            &WherePredicate::RegionPredicate(ref p) => p.span,\n+            &WherePredicate::EqPredicate(ref p) => p.span,\n+        }\n+    }\n+}\n+\n /// A type bound, eg `for<'c> Foo: Send+Clone+'c`\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct WhereBoundPredicate {"}, {"sha": "c0728cb2b6669da1579869acc939e0a1294fe2f0", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 86, "deletions": 18, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/7c0c7ef330fd87e8b169f0afc832d15bf098d0f0/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0c7ef330fd87e8b169f0afc832d15bf098d0f0/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=7c0c7ef330fd87e8b169f0afc832d15bf098d0f0", "patch": "@@ -46,6 +46,7 @@ use syntax::attr;\n use syntax::feature_gate::{AttributeGate, AttributeType, Stability, deprecated_attributes};\n use syntax_pos::{BytePos, Span, SyntaxContext};\n use syntax::symbol::keywords;\n+use syntax::errors::DiagnosticBuilder;\n \n use rustc::hir::{self, PatKind};\n use rustc::hir::intravisit::FnKind;\n@@ -1316,48 +1317,115 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnreachablePub {\n     }\n }\n \n-/// Lint for trait and lifetime bounds that are (accidentally) accepted by the parser, but\n-/// ignored later.\n+/// Lint for trait and lifetime bounds in type aliases being mostly ignored:\n+/// They are relevant when using associated types, but otherwise neither checked\n+/// at definition site nor enforced at use site.\n \n-pub struct IgnoredGenericBounds;\n+pub struct TypeAliasBounds;\n \n declare_lint! {\n-    IGNORED_GENERIC_BOUNDS,\n+    TYPE_ALIAS_BOUNDS,\n     Warn,\n-    \"these generic bounds are ignored\"\n+    \"bounds in type aliases are not enforced\"\n }\n \n-impl LintPass for IgnoredGenericBounds {\n+impl LintPass for TypeAliasBounds {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(IGNORED_GENERIC_BOUNDS)\n+        lint_array!(TYPE_ALIAS_BOUNDS)\n     }\n }\n \n-impl EarlyLintPass for IgnoredGenericBounds {\n-    fn check_item(&mut self, cx: &EarlyContext, item: &ast::Item) {\n-        let type_alias_generics = match item.node {\n-            ast::ItemKind::Ty(_, ref generics) => generics,\n+impl TypeAliasBounds {\n+    fn is_type_variable_assoc(qpath: &hir::QPath) -> bool {\n+        match *qpath {\n+            hir::QPath::TypeRelative(ref ty, _) => {\n+                // If this is a type variable, we found a `T::Assoc`.\n+                match ty.node {\n+                    hir::TyPath(hir::QPath::Resolved(None, ref path)) => {\n+                        match path.def {\n+                            Def::TyParam(_) => true,\n+                            _ => false\n+                        }\n+                    }\n+                    _ => false\n+                }\n+            }\n+            hir::QPath::Resolved(..) => false,\n+        }\n+    }\n+\n+    fn suggest_changing_assoc_types(ty: &hir::Ty, err: &mut DiagnosticBuilder) {\n+        // Access to associates types should use `<T as Bound>::Assoc`, which does not need a\n+        // bound.  Let's see if this type does that.\n+\n+        // We use a HIR visitor to walk the type.\n+        use rustc::hir::intravisit::{self, Visitor};\n+        use syntax::ast::NodeId;\n+        struct WalkAssocTypes<'a, 'db> where 'db: 'a {\n+            err: &'a mut DiagnosticBuilder<'db>\n+        }\n+        impl<'a, 'db, 'v> Visitor<'v> for WalkAssocTypes<'a, 'db> {\n+            fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'v>\n+            {\n+                intravisit::NestedVisitorMap::None\n+            }\n+\n+            fn visit_qpath(&mut self, qpath: &'v hir::QPath, id: NodeId, span: Span) {\n+                if TypeAliasBounds::is_type_variable_assoc(qpath) {\n+                    self.err.span_help(span,\n+                        \"use fully disambiguated paths (i.e., `<T as Trait>::Assoc`) to refer to \\\n+                         associated types in type aliases\");\n+                }\n+                intravisit::walk_qpath(self, qpath, id, span)\n+            }\n+        }\n+\n+        // Let's go for a walk!\n+        let mut visitor = WalkAssocTypes { err };\n+        visitor.visit_ty(ty);\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeAliasBounds {\n+    fn check_item(&mut self, cx: &LateContext, item: &hir::Item) {\n+        let (ty, type_alias_generics) = match item.node {\n+            hir::ItemTy(ref ty, ref generics) => (&*ty, generics),\n             _ => return,\n         };\n+        let mut suggested_changing_assoc_types = false;\n         // There must not be a where clause\n         if !type_alias_generics.where_clause.predicates.is_empty() {\n             let spans : Vec<_> = type_alias_generics.where_clause.predicates.iter()\n                 .map(|pred| pred.span()).collect();\n-            cx.span_lint(IGNORED_GENERIC_BOUNDS, spans,\n-                \"where clauses are ignored in type aliases\");\n+            let mut err = cx.struct_span_lint(TYPE_ALIAS_BOUNDS, spans,\n+                \"where clauses are not enforced in type aliases\");\n+            err.help(\"the clause will not be checked when the type alias is used, \\\n+                      and should be removed\");\n+            if !suggested_changing_assoc_types {\n+                TypeAliasBounds::suggest_changing_assoc_types(ty, &mut err);\n+                suggested_changing_assoc_types = true;\n+            }\n+            err.emit();\n         }\n         // The parameters must not have bounds\n         for param in type_alias_generics.params.iter() {\n             let spans : Vec<_> = match param {\n-                &ast::GenericParam::Lifetime(ref l) => l.bounds.iter().map(|b| b.span).collect(),\n-                &ast::GenericParam::Type(ref ty) => ty.bounds.iter().map(|b| b.span()).collect(),\n+                &hir::GenericParam::Lifetime(ref l) => l.bounds.iter().map(|b| b.span).collect(),\n+                &hir::GenericParam::Type(ref ty) => ty.bounds.iter().map(|b| b.span()).collect(),\n             };\n             if !spans.is_empty() {\n-                cx.span_lint(\n-                    IGNORED_GENERIC_BOUNDS,\n+                let mut err = cx.struct_span_lint(\n+                    TYPE_ALIAS_BOUNDS,\n                     spans,\n-                    \"bounds on generic parameters are ignored in type aliases\",\n+                    \"bounds on generic parameters are not enforced in type aliases\",\n                 );\n+                err.help(\"the bound will not be checked when the type alias is used, \\\n+                          and should be removed\");\n+                if !suggested_changing_assoc_types {\n+                    TypeAliasBounds::suggest_changing_assoc_types(ty, &mut err);\n+                    suggested_changing_assoc_types = true;\n+                }\n+                err.emit();\n             }\n         }\n     }"}, {"sha": "30dd2efeb7aa3bbe179cbd1f639dacc44258c947", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c0c7ef330fd87e8b169f0afc832d15bf098d0f0/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0c7ef330fd87e8b169f0afc832d15bf098d0f0/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=7c0c7ef330fd87e8b169f0afc832d15bf098d0f0", "patch": "@@ -109,7 +109,6 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                        UnusedImportBraces,\n                        AnonymousParameters,\n                        UnusedDocComment,\n-                       IgnoredGenericBounds,\n                        );\n \n     add_early_builtin_with_new!(sess,\n@@ -139,6 +138,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                  MutableTransmutes,\n                  UnionsWithDropFields,\n                  UnreachablePub,\n+                 TypeAliasBounds,\n                  );\n \n     add_builtin_with_new!(sess,"}, {"sha": "25141b9b8255788e9e1688f31a5eedb3dc075c02", "filename": "src/test/compile-fail/issue-17994.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c0c7ef330fd87e8b169f0afc832d15bf098d0f0/src%2Ftest%2Fcompile-fail%2Fissue-17994.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0c7ef330fd87e8b169f0afc832d15bf098d0f0/src%2Ftest%2Fcompile-fail%2Fissue-17994.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17994.rs?ref=7c0c7ef330fd87e8b169f0afc832d15bf098d0f0", "patch": "@@ -10,5 +10,4 @@\n \n trait Tr {}\n type Huh<T> where T: Tr = isize; //~  ERROR type parameter `T` is unused\n-                                 //~| WARNING where clauses are ignored in type aliases\n fn main() {}"}, {"sha": "6eeb14638e7591661a52269b7dd22deb3673c60c", "filename": "src/test/compile-fail/private-in-public-warn.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c0c7ef330fd87e8b169f0afc832d15bf098d0f0/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0c7ef330fd87e8b169f0afc832d15bf098d0f0/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs?ref=7c0c7ef330fd87e8b169f0afc832d15bf098d0f0", "patch": "@@ -58,7 +58,6 @@ mod traits {\n     pub trait PubTr {}\n \n     pub type Alias<T: PrivTr> = T; //~ ERROR private trait `traits::PrivTr` in public interface\n-    //~^ WARNING bounds on generic parameters are ignored\n     //~| WARNING hard error\n     pub trait Tr1: PrivTr {} //~ ERROR private trait `traits::PrivTr` in public interface\n     //~^ WARNING hard error\n@@ -85,7 +84,6 @@ mod traits_where {\n     pub type Alias<T> where T: PrivTr = T;\n         //~^ ERROR private trait `traits_where::PrivTr` in public interface\n         //~| WARNING hard error\n-        //~| WARNING where clauses are ignored in type aliases\n     pub trait Tr2<T> where T: PrivTr {}\n         //~^ ERROR private trait `traits_where::PrivTr` in public interface\n         //~| WARNING hard error"}, {"sha": "70b3b34fbd8fc2574038506cafb9e98d1cec99b7", "filename": "src/test/ui/higher-lifetime-bounds.rs", "status": "renamed", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7c0c7ef330fd87e8b169f0afc832d15bf098d0f0/src%2Ftest%2Fui%2Fhigher-lifetime-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0c7ef330fd87e8b169f0afc832d15bf098d0f0/src%2Ftest%2Fui%2Fhigher-lifetime-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-lifetime-bounds.rs?ref=7c0c7ef330fd87e8b169f0afc832d15bf098d0f0", "patch": "@@ -10,31 +10,7 @@\n \n #![allow(dead_code, non_camel_case_types)]\n \n-use std::rc::Rc;\n-\n-type SVec<T: Send+Send> = Vec<T>;\n-//~^ WARN bounds on generic parameters are ignored in type aliases\n-type VVec<'b, 'a: 'b+'b> = Vec<&'a i32>;\n-//~^ WARN bounds on generic parameters are ignored in type aliases\n-type WVec<'b, T: 'b+'b> = Vec<T>;\n-//~^ WARN bounds on generic parameters are ignored in type aliases\n-type W2Vec<'b, T> where T: 'b, T: 'b = Vec<T>;\n-//~^ WARN where clauses are ignored in type aliases\n-\n-fn foo<'a>(y: &'a i32) {\n-    // If the bounds above would matter, the code below would be rejected.\n-    let mut x : SVec<_> = Vec::new();\n-    x.push(Rc::new(42));\n-\n-    let mut x : VVec<'static, 'a> = Vec::new();\n-    x.push(y);\n-\n-    let mut x : WVec<'static, & 'a i32> = Vec::new();\n-    x.push(y);\n-\n-    let mut x : W2Vec<'static, & 'a i32> = Vec::new();\n-    x.push(y);\n-}\n+// Test that bounds on higher-kinded lifetime binders are rejected.\n \n fn bar1<'a, 'b>(\n     x: &'a i32,", "previous_filename": "src/test/ui/param-bounds-ignored.rs"}, {"sha": "82c007474360413138920f748fbc0fe83e4d9175", "filename": "src/test/ui/higher-lifetime-bounds.stderr", "status": "renamed", "additions": 11, "deletions": 37, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/7c0c7ef330fd87e8b169f0afc832d15bf098d0f0/src%2Ftest%2Fui%2Fhigher-lifetime-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c0c7ef330fd87e8b169f0afc832d15bf098d0f0/src%2Ftest%2Fui%2Fhigher-lifetime-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-lifetime-bounds.stderr?ref=7c0c7ef330fd87e8b169f0afc832d15bf098d0f0", "patch": "@@ -1,94 +1,68 @@\n error: lifetime bounds cannot be used in this context\n-  --> $DIR/param-bounds-ignored.rs:42:22\n+  --> $DIR/higher-lifetime-bounds.rs:18:22\n    |\n LL |     f: for<'xa, 'xb: 'xa+'xa> fn(&'xa i32, &'xb i32) -> &'xa i32)\n    |                      ^^^ ^^^\n \n error: lifetime bounds cannot be used in this context\n-  --> $DIR/param-bounds-ignored.rs:50:34\n+  --> $DIR/higher-lifetime-bounds.rs:26:34\n    |\n LL | fn bar2<'a, 'b, F: for<'xa, 'xb: 'xa> Fn(&'xa i32, &'xb i32) -> &'xa i32>(\n    |                                  ^^^\n \n error: lifetime bounds cannot be used in this context\n-  --> $DIR/param-bounds-ignored.rs:65:28\n+  --> $DIR/higher-lifetime-bounds.rs:41:28\n    |\n LL |     where F: for<'xa, 'xb: 'xa> Fn(&'xa i32, &'xb i32) -> &'xa i32\n    |                            ^^^\n \n error: lifetime bounds cannot be used in this context\n-  --> $DIR/param-bounds-ignored.rs:77:25\n+  --> $DIR/higher-lifetime-bounds.rs:53:25\n    |\n LL |     where for<'xa, 'xb: 'xa> F: Fn(&'xa i32, &'xb i32) -> &'xa i32\n    |                         ^^^\n \n error: lifetime bounds cannot be used in this context\n-  --> $DIR/param-bounds-ignored.rs:85:28\n+  --> $DIR/higher-lifetime-bounds.rs:61:28\n    |\n LL | struct S1<F: for<'xa, 'xb: 'xa> Fn(&'xa i32, &'xb i32) -> &'xa i32>(F);\n    |                            ^^^\n \n error: lifetime bounds cannot be used in this context\n-  --> $DIR/param-bounds-ignored.rs:87:40\n+  --> $DIR/higher-lifetime-bounds.rs:63:40\n    |\n LL | struct S2<F>(F) where F: for<'xa, 'xb: 'xa> Fn(&'xa i32, &'xb i32) -> &'xa i32;\n    |                                        ^^^\n \n error: lifetime bounds cannot be used in this context\n-  --> $DIR/param-bounds-ignored.rs:89:37\n+  --> $DIR/higher-lifetime-bounds.rs:65:37\n    |\n LL | struct S3<F>(F) where for<'xa, 'xb: 'xa> F: Fn(&'xa i32, &'xb i32) -> &'xa i32;\n    |                                     ^^^\n \n error: lifetime bounds cannot be used in this context\n-  --> $DIR/param-bounds-ignored.rs:92:29\n+  --> $DIR/higher-lifetime-bounds.rs:68:29\n    |\n LL | struct S_fnty(for<'xa, 'xb: 'xa> fn(&'xa i32, &'xb i32) -> &'xa i32);\n    |                             ^^^\n \n error: lifetime bounds cannot be used in this context\n-  --> $DIR/param-bounds-ignored.rs:95:29\n+  --> $DIR/higher-lifetime-bounds.rs:71:29\n    |\n LL | type T1 = Box<for<'xa, 'xb: 'xa> Fn(&'xa i32, &'xb i32) -> &'xa i32>;\n    |                             ^^^\n \n error: lifetime bounds cannot be used in this context\n-  --> $DIR/param-bounds-ignored.rs:99:34\n+  --> $DIR/higher-lifetime-bounds.rs:75:34\n    |\n LL |     let _ : Option<for<'xa, 'xb: 'xa> fn(&'xa i32, &'xb i32) -> &'xa i32> = None;\n    |                                  ^^^\n \n error: lifetime bounds cannot be used in this context\n-  --> $DIR/param-bounds-ignored.rs:101:38\n+  --> $DIR/higher-lifetime-bounds.rs:77:38\n    |\n LL |     let _ : Option<Box<for<'xa, 'xb: 'xa> Fn(&'xa i32, &'xb i32) -> &'xa i32>> = None;\n    |                                      ^^^\n \n-warning: bounds on generic parameters are ignored in type aliases\n-  --> $DIR/param-bounds-ignored.rs:15:14\n-   |\n-LL | type SVec<T: Send+Send> = Vec<T>;\n-   |              ^^^^ ^^^^\n-   |\n-   = note: #[warn(ignored_generic_bounds)] on by default\n-\n-warning: bounds on generic parameters are ignored in type aliases\n-  --> $DIR/param-bounds-ignored.rs:17:19\n-   |\n-LL | type VVec<'b, 'a: 'b+'b> = Vec<&'a i32>;\n-   |                   ^^ ^^\n-\n-warning: bounds on generic parameters are ignored in type aliases\n-  --> $DIR/param-bounds-ignored.rs:19:18\n-   |\n-LL | type WVec<'b, T: 'b+'b> = Vec<T>;\n-   |                  ^^ ^^\n-\n-warning: where clauses are ignored in type aliases\n-  --> $DIR/param-bounds-ignored.rs:21:25\n-   |\n-LL | type W2Vec<'b, T> where T: 'b, T: 'b = Vec<T>;\n-   |                         ^^^^^  ^^^^^\n-\n error: aborting due to 11 previous errors\n ", "previous_filename": "src/test/ui/param-bounds-ignored.stderr"}, {"sha": "c1cdeef3a4638f688fdff378c89b5e74745af13a", "filename": "src/test/ui/type-alias-bounds.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/7c0c7ef330fd87e8b169f0afc832d15bf098d0f0/src%2Ftest%2Fui%2Ftype-alias-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0c7ef330fd87e8b169f0afc832d15bf098d0f0/src%2Ftest%2Fui%2Ftype-alias-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-bounds.rs?ref=7c0c7ef330fd87e8b169f0afc832d15bf098d0f0", "patch": "@@ -0,0 +1,69 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test ignored_generic_bounds lint warning about bounds in type aliases\n+\n+// must-compile-successfully\n+#![allow(dead_code)]\n+\n+use std::rc::Rc;\n+\n+type SVec<T: Send+Send> = Vec<T>;\n+//~^ WARN bounds on generic parameters are not enforced in type aliases [type_alias_bounds]\n+type S2Vec<T> where T: Send = Vec<T>;\n+//~^ WARN where clauses are not enforced in type aliases [type_alias_bounds]\n+type VVec<'b, 'a: 'b+'b> = (&'b u32, Vec<&'a i32>);\n+//~^ WARN bounds on generic parameters are not enforced in type aliases [type_alias_bounds]\n+type WVec<'b, T: 'b+'b> = (&'b u32, Vec<T>);\n+//~^ WARN bounds on generic parameters are not enforced in type aliases [type_alias_bounds]\n+type W2Vec<'b, T> where T: 'b, T: 'b = (&'b u32, Vec<T>);\n+//~^ WARN where clauses are not enforced in type aliases [type_alias_bounds]\n+\n+static STATIC : u32 = 0;\n+\n+fn foo<'a>(y: &'a i32) {\n+    // If any of the bounds above would matter, the code below would be rejected.\n+    // This can be seen when replacing the type aliases above by newtype structs.\n+    // (The type aliases have no unused parameters to make that a valid transformation.)\n+    let mut x : SVec<_> = Vec::new();\n+    x.push(Rc::new(42)); // is not send\n+\n+    let mut x : S2Vec<_> = Vec::new();\n+    x.push(Rc::new(42)); // is not send\n+\n+    let mut x : VVec<'static, 'a> = (&STATIC, Vec::new());\n+    x.1.push(y); // 'a: 'static does not hold\n+\n+    let mut x : WVec<'static, &'a i32> = (&STATIC, Vec::new());\n+    x.1.push(y); // &'a i32: 'static does not hold\n+\n+    let mut x : W2Vec<'static, &'a i32> = (&STATIC, Vec::new());\n+    x.1.push(y); // &'a i32: 'static does not hold\n+}\n+\n+// Bounds are not checked either, i.e. the definition is not necessarily well-formed\n+struct Sendable<T: Send>(T);\n+type MySendable<T> = Sendable<T>; // no error here!\n+\n+// However, bounds *are* taken into account when accessing associated types\n+trait Bound { type Assoc; }\n+type T1<U: Bound> = U::Assoc; //~ WARN not enforced in type aliases\n+type T2<U> where U: Bound = U::Assoc;  //~ WARN not enforced in type aliases\n+\n+// This errors\n+// type T3<U> = U::Assoc;\n+// Do this instead\n+type T4<U> = <U as Bound>::Assoc;\n+\n+// Make sure the help about associatd types is not shown incorrectly\n+type T5<U: Bound> = <U as Bound>::Assoc;  //~ WARN not enforced in type aliases\n+type T6<U: Bound> = ::std::vec::Vec<U>;  //~ WARN not enforced in type aliases\n+\n+fn main() {}"}, {"sha": "2a2b0b0f26e3430ce3955c4d65e002445c80f237", "filename": "src/test/ui/type-alias-bounds.stderr", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/7c0c7ef330fd87e8b169f0afc832d15bf098d0f0/src%2Ftest%2Fui%2Ftype-alias-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c0c7ef330fd87e8b169f0afc832d15bf098d0f0/src%2Ftest%2Fui%2Ftype-alias-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-bounds.stderr?ref=7c0c7ef330fd87e8b169f0afc832d15bf098d0f0", "patch": "@@ -0,0 +1,83 @@\n+warning: bounds on generic parameters are not enforced in type aliases\n+  --> $DIR/type-alias-bounds.rs:18:14\n+   |\n+LL | type SVec<T: Send+Send> = Vec<T>;\n+   |              ^^^^ ^^^^\n+   |\n+   = note: #[warn(type_alias_bounds)] on by default\n+   = help: the bound will not be checked when the type alias is used, and should be removed\n+\n+warning: where clauses are not enforced in type aliases\n+  --> $DIR/type-alias-bounds.rs:20:21\n+   |\n+LL | type S2Vec<T> where T: Send = Vec<T>;\n+   |                     ^^^^^^^\n+   |\n+   = help: the clause will not be checked when the type alias is used, and should be removed\n+\n+warning: bounds on generic parameters are not enforced in type aliases\n+  --> $DIR/type-alias-bounds.rs:22:19\n+   |\n+LL | type VVec<'b, 'a: 'b+'b> = (&'b u32, Vec<&'a i32>);\n+   |                   ^^ ^^\n+   |\n+   = help: the bound will not be checked when the type alias is used, and should be removed\n+\n+warning: bounds on generic parameters are not enforced in type aliases\n+  --> $DIR/type-alias-bounds.rs:24:18\n+   |\n+LL | type WVec<'b, T: 'b+'b> = (&'b u32, Vec<T>);\n+   |                  ^^ ^^\n+   |\n+   = help: the bound will not be checked when the type alias is used, and should be removed\n+\n+warning: where clauses are not enforced in type aliases\n+  --> $DIR/type-alias-bounds.rs:26:25\n+   |\n+LL | type W2Vec<'b, T> where T: 'b, T: 'b = (&'b u32, Vec<T>);\n+   |                         ^^^^^  ^^^^^\n+   |\n+   = help: the clause will not be checked when the type alias is used, and should be removed\n+\n+warning: bounds on generic parameters are not enforced in type aliases\n+  --> $DIR/type-alias-bounds.rs:57:12\n+   |\n+LL | type T1<U: Bound> = U::Assoc; //~ WARN not enforced in type aliases\n+   |            ^^^^^\n+   |\n+   = help: the bound will not be checked when the type alias is used, and should be removed\n+help: use fully disambiguated paths (i.e., `<T as Trait>::Assoc`) to refer to associated types in type aliases\n+  --> $DIR/type-alias-bounds.rs:57:21\n+   |\n+LL | type T1<U: Bound> = U::Assoc; //~ WARN not enforced in type aliases\n+   |                     ^^^^^^^^\n+\n+warning: where clauses are not enforced in type aliases\n+  --> $DIR/type-alias-bounds.rs:58:18\n+   |\n+LL | type T2<U> where U: Bound = U::Assoc;  //~ WARN not enforced in type aliases\n+   |                  ^^^^^^^^\n+   |\n+   = help: the clause will not be checked when the type alias is used, and should be removed\n+help: use fully disambiguated paths (i.e., `<T as Trait>::Assoc`) to refer to associated types in type aliases\n+  --> $DIR/type-alias-bounds.rs:58:29\n+   |\n+LL | type T2<U> where U: Bound = U::Assoc;  //~ WARN not enforced in type aliases\n+   |                             ^^^^^^^^\n+\n+warning: bounds on generic parameters are not enforced in type aliases\n+  --> $DIR/type-alias-bounds.rs:66:12\n+   |\n+LL | type T5<U: Bound> = <U as Bound>::Assoc;  //~ WARN not enforced in type aliases\n+   |            ^^^^^\n+   |\n+   = help: the bound will not be checked when the type alias is used, and should be removed\n+\n+warning: bounds on generic parameters are not enforced in type aliases\n+  --> $DIR/type-alias-bounds.rs:67:12\n+   |\n+LL | type T6<U: Bound> = ::std::vec::Vec<U>;  //~ WARN not enforced in type aliases\n+   |            ^^^^^\n+   |\n+   = help: the bound will not be checked when the type alias is used, and should be removed\n+"}]}