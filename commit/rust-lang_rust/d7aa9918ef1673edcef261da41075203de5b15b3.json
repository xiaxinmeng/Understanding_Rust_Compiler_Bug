{"sha": "d7aa9918ef1673edcef261da41075203de5b15b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3YWE5OTE4ZWYxNjczZWRjZWYyNjFkYTQxMDc1MjAzZGU1YjE1YjM=", "commit": {"author": {"name": "Zack Corr", "email": "zack@z0w0.me", "date": "2012-08-25T04:54:30Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-08-31T23:20:35Z"}, "message": "Add experimental JIT compiler", "tree": {"sha": "7dc7164676cbbf0cd18a56c6e67ad3bfebd2a7d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7dc7164676cbbf0cd18a56c6e67ad3bfebd2a7d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7aa9918ef1673edcef261da41075203de5b15b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7aa9918ef1673edcef261da41075203de5b15b3", "html_url": "https://github.com/rust-lang/rust/commit/d7aa9918ef1673edcef261da41075203de5b15b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7aa9918ef1673edcef261da41075203de5b15b3/comments", "author": {"login": "z0w0", "id": 676417, "node_id": "MDQ6VXNlcjY3NjQxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/676417?v=4", "gravatar_id": "", "url": "https://api.github.com/users/z0w0", "html_url": "https://github.com/z0w0", "followers_url": "https://api.github.com/users/z0w0/followers", "following_url": "https://api.github.com/users/z0w0/following{/other_user}", "gists_url": "https://api.github.com/users/z0w0/gists{/gist_id}", "starred_url": "https://api.github.com/users/z0w0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/z0w0/subscriptions", "organizations_url": "https://api.github.com/users/z0w0/orgs", "repos_url": "https://api.github.com/users/z0w0/repos", "events_url": "https://api.github.com/users/z0w0/events{/privacy}", "received_events_url": "https://api.github.com/users/z0w0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97bb812238b859db453cf935373f32ff2afa7887", "url": "https://api.github.com/repos/rust-lang/rust/commits/97bb812238b859db453cf935373f32ff2afa7887", "html_url": "https://github.com/rust-lang/rust/commit/97bb812238b859db453cf935373f32ff2afa7887"}], "stats": {"total": 119, "additions": 105, "deletions": 14}, "files": [{"sha": "608f4a3d3ceb3d7ff8bf1c073c678e592e00c7d3", "filename": "Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7aa9918ef1673edcef261da41075203de5b15b3/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/d7aa9918ef1673edcef261da41075203de5b15b3/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=d7aa9918ef1673edcef261da41075203de5b15b3", "patch": "@@ -216,7 +216,8 @@ RUSTC_INPUTS := $(S)src/rustc/driver/rustc.rs\n ######################################################################\n \n # FIXME: x86-ism\n-LLVM_COMPONENTS=x86 ipo bitreader bitwriter linker asmparser\n+LLVM_COMPONENTS=x86 ipo bitreader bitwriter linker asmparser jit mcjit \\\n+                interpreter\n \n define DEF_LLVM_VARS\n # The configure script defines these variables with the target triples"}, {"sha": "8cc6f02c7dbb1b56d594f0b20dce663444e9314b", "filename": "configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7aa9918ef1673edcef261da41075203de5b15b3/configure", "raw_url": "https://github.com/rust-lang/rust/raw/d7aa9918ef1673edcef261da41075203de5b15b3/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=d7aa9918ef1673edcef261da41075203de5b15b3", "patch": "@@ -595,7 +595,7 @@ do\n         LLVM_TARGET=\"--target=$t\"\n \n         # Disable unused LLVM features\n-        LLVM_OPTS=\"$LLVM_DBG_OPTS --disable-docs --disable-jit \\\n+        LLVM_OPTS=\"$LLVM_DBG_OPTS --disable-docs \\\n                    --enable-bindings=none --disable-threads \\\n                    --disable-pthreads\"\n "}, {"sha": "04c38c11d62aa41b295c5e359d35d236876d938c", "filename": "src/rustc/back/link.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d7aa9918ef1673edcef261da41075203de5b15b3/src%2Frustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7aa9918ef1673edcef261da41075203de5b15b3/src%2Frustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Flink.rs?ref=d7aa9918ef1673edcef261da41075203de5b15b3", "patch": "@@ -76,6 +76,7 @@ mod write {\n         // Generate a pre-optimization intermediate file if -save-temps was\n         // specified.\n \n+\n         if opts.save_temps {\n             match opts.output_type {\n               output_type_bitcode => {\n@@ -135,7 +136,7 @@ mod write {\n             llvm::LLVMPassManagerBuilderDispose(MPMB);\n         }\n         if !sess.no_verify() { llvm::LLVMAddVerifierPass(pm.llpm); }\n-        if is_object_or_assembly_or_exe(opts.output_type) {\n+        if is_object_or_assembly_or_exe(opts.output_type) || opts.jit {\n             let LLVMOptNone       = 0 as c_int; // -O0\n             let LLVMOptLess       = 1 as c_int; // -O1\n             let LLVMOptDefault    = 2 as c_int; // -O2, -Os\n@@ -148,6 +149,29 @@ mod write {\n               session::Aggressive => LLVMOptAggressive\n             };\n \n+            if opts.jit {\n+                // If we are using JIT, go ahead and create and\n+                // execute the engine now.\n+\n+                /*llvm::LLVMAddBasicAliasAnalysisPass(pm.llpm);\n+                llvm::LLVMAddInstructionCombiningPass(pm.llpm);\n+                llvm::LLVMAddReassociatePass(pm.llpm);\n+                llvm::LLVMAddGVNPass(pm.llpm);\n+                llvm::LLVMAddCFGSimplificationPass(pm.llpm);*/\n+\n+                // JIT execution takes ownership of the module,\n+                // so don't dispose and return.\n+\n+                if !llvm::LLVMRustJIT(pm.llpm,\n+                                      llmod,\n+                                      CodeGenOptLevel,\n+                                      true) {\n+                    llvm_err(sess, ~\"Could not JIT\");\n+                }\n+                if sess.time_llvm_passes() { llvm::LLVMRustPrintPassTimings(); }\n+                return;\n+            }\n+\n             let mut FileType;\n             if opts.output_type == output_type_object ||\n                    opts.output_type == output_type_exe {"}, {"sha": "2d5b36debaa7aab0e500450e48d49e1b69e9c88f", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7aa9918ef1673edcef261da41075203de5b15b3/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7aa9918ef1673edcef261da41075203de5b15b3/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=d7aa9918ef1673edcef261da41075203de5b15b3", "patch": "@@ -259,7 +259,8 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n \n     let stop_after_codegen =\n         sess.opts.output_type != link::output_type_exe ||\n-            sess.opts.static && sess.building_library;\n+        (sess.opts.static && sess.building_library)    ||\n+        sess.opts.jit;\n \n     if stop_after_codegen { return {crate: crate, tcx: Some(ty_cx)}; }\n \n@@ -483,6 +484,7 @@ fn build_session_options(matches: getopts::Matches,\n         llvm::LLVMSetDebug(1);\n     }\n \n+    let jit = opt_present(matches, ~\"jit\");\n     let output_type =\n         if parse_only || no_trans {\n             link::output_type_none\n@@ -545,6 +547,7 @@ fn build_session_options(matches: getopts::Matches,\n           extra_debuginfo: extra_debuginfo,\n           lint_opts: lint_opts,\n           save_temps: save_temps,\n+          jit: jit,\n           output_type: output_type,\n           addl_lib_search_paths: addl_lib_search_paths,\n           maybe_sysroot: sysroot_opt,\n@@ -620,6 +623,7 @@ fn opts() -> ~[getopts::Opt] {\n           optopt(~\"o\"), optopt(~\"out-dir\"), optflag(~\"xg\"),\n           optflag(~\"c\"), optflag(~\"g\"), optflag(~\"save-temps\"),\n           optopt(~\"sysroot\"), optopt(~\"target\"),\n+          optflag(~\"jit\"),\n \n           optmulti(~\"W\"), optmulti(~\"warn\"),\n           optmulti(~\"A\"), optmulti(~\"allow\"),"}, {"sha": "42982550325e2cfe95937772c34641a6f55f260d", "filename": "src/rustc/driver/rustc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d7aa9918ef1673edcef261da41075203de5b15b3/src%2Frustc%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7aa9918ef1673edcef261da41075203de5b15b3/src%2Frustc%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Frustc.rs?ref=d7aa9918ef1673edcef261da41075203de5b15b3", "patch": "@@ -42,6 +42,7 @@ Options:\n     -L <path>          Add a directory to the library search path\n     --lib              Compile a library crate\n     --ls               List the symbols defined by a compiled library crate\n+    --jit              Execute using JIT (experimental)\n     --no-trans         Run all passes except translation; no output\n     -O                 Equivalent to --opt-level=2\n     -o <filename>      Write output to <filename>"}, {"sha": "47aa3019de10e3547f5f8d46e8b2124ea4b2bdc0", "filename": "src/rustc/driver/session.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7aa9918ef1673edcef261da41075203de5b15b3/src%2Frustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7aa9918ef1673edcef261da41075203de5b15b3/src%2Frustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fsession.rs?ref=d7aa9918ef1673edcef261da41075203de5b15b3", "patch": "@@ -108,6 +108,7 @@ type options =\n      extra_debuginfo: bool,\n      lint_opts: ~[(lint::lint, lint::level)],\n      save_temps: bool,\n+     jit: bool,\n      output_type: back::link::output_type,\n      addl_lib_search_paths: ~[Path],\n      maybe_sysroot: Option<Path>,\n@@ -249,6 +250,7 @@ fn basic_options() -> @options {\n         extra_debuginfo: false,\n         lint_opts: ~[],\n         save_temps: false,\n+        jit: false,\n         output_type: link::output_type_exe,\n         addl_lib_search_paths: ~[],\n         maybe_sysroot: None,"}, {"sha": "5c8bab166ecb20f86078e51f1ee979a98c5ea6d2", "filename": "src/rustc/lib/llvm.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7aa9918ef1673edcef261da41075203de5b15b3/src%2Frustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7aa9918ef1673edcef261da41075203de5b15b3/src%2Frustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Flib%2Fllvm.rs?ref=d7aa9918ef1673edcef261da41075203de5b15b3", "patch": "@@ -986,6 +986,12 @@ extern mod llvm {\n         call. */\n     fn LLVMRustGetLastError() -> *c_char;\n \n+    /** JIT the module. **/\n+    fn LLVMRustJIT(PM: PassManagerRef,\n+                   M: ModuleRef,\n+                   OptLevel: c_int,\n+                   EnableSegmentedStacks: bool) -> bool;\n+\n     /** Parses the bitcode in the given memory buffer. */\n     fn LLVMRustParseBitcode(MemBuf: MemoryBufferRef) -> ModuleRef;\n "}, {"sha": "8f8503a74d497578b507861be8e4c8a307505405", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 61, "deletions": 10, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/d7aa9918ef1673edcef261da41075203de5b15b3/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d7aa9918ef1673edcef261da41075203de5b15b3/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=d7aa9918ef1673edcef261da41075203de5b15b3", "patch": "@@ -28,6 +28,11 @@\n #include \"llvm/Target/TargetOptions.h\"\n #include \"llvm/Support/Host.h\"\n #include \"llvm/Support/Debug.h\"\n+#include \"llvm/Support/DynamicLibrary.h\"\n+#include \"llvm/ExecutionEngine/ExecutionEngine.h\"\n+#include \"llvm/ExecutionEngine/JIT.h\"\n+#include \"llvm/ExecutionEngine/Interpreter.h\"\n+#include \"llvm/ExecutionEngine/GenericValue.h\"\n #include \"llvm-c/Core.h\"\n #include \"llvm-c/BitReader.h\"\n #include \"llvm-c/Object.h\"\n@@ -68,6 +73,61 @@ void LLVMInitializeX86TargetMC();\n void LLVMInitializeX86AsmPrinter();\n void LLVMInitializeX86AsmParser();\n \n+// Only initialize the platforms supported by Rust here,\n+// because using --llvm-root will have multiple platforms\n+// that rustllvm doesn't actually link to and it's pointless to put target info\n+// into the registry that Rust can not generate machine code for.\n+\n+#define INITIALIZE_TARGETS() LLVMInitializeX86TargetInfo(); \\\n+                             LLVMInitializeX86Target(); \\\n+                             LLVMInitializeX86TargetMC(); \\\n+                             LLVMInitializeX86AsmPrinter(); \\\n+                             LLVMInitializeX86AsmParser();\n+\n+extern \"C\" bool\n+LLVMRustJIT(LLVMPassManagerRef PMR,\n+            LLVMModuleRef M,\n+            CodeGenOpt::Level OptLevel,\n+            bool EnableSegmentedStacks) {\n+\n+  INITIALIZE_TARGETS();\n+  InitializeNativeTarget();\n+  InitializeNativeTargetAsmPrinter();\n+\n+  std::string Err;\n+  TargetOptions Options;\n+  Options.NoFramePointerElim = true;\n+  Options.EnableSegmentedStacks = EnableSegmentedStacks;\n+\n+  PassManager *PM = unwrap<PassManager>(PMR);\n+\n+  PM->run(*unwrap(M));\n+\n+  ExecutionEngine* EE = EngineBuilder(unwrap(M))\n+    .setTargetOptions(Options)\n+    .setOptLevel(OptLevel)\n+    .setUseMCJIT(true)\n+    .create();\n+\n+  if(!EE || Err != \"\") {\n+    LLVMRustError = Err.c_str();\n+    return false;\n+  }\n+\n+  Function* func = EE->FindFunctionNamed(\"main\");\n+\n+  if(!func || Err != \"\") {\n+    LLVMRustError = Err.c_str();\n+    return false;\n+  }\n+\n+  std::vector<GenericValue> args;\n+\n+  EE->runFunction(func, args);\n+\n+  return true;\n+}\n+\n extern \"C\" bool\n LLVMRustWriteOutputFile(LLVMPassManagerRef PMR,\n                         LLVMModuleRef M,\n@@ -77,16 +137,7 @@ LLVMRustWriteOutputFile(LLVMPassManagerRef PMR,\n                         CodeGenOpt::Level OptLevel,\n \t\t\tbool EnableSegmentedStacks) {\n \n-  // Only initialize the platforms supported by Rust here,\n-  // because using --llvm-root will have multiple platforms\n-  // that rustllvm doesn't actually link to and it's pointless to put target info\n-  // into the registry that Rust can not generate machine code for.\n-\n-  LLVMInitializeX86TargetInfo();\n-  LLVMInitializeX86Target();\n-  LLVMInitializeX86TargetMC();\n-  LLVMInitializeX86AsmPrinter();\n-  LLVMInitializeX86AsmParser();\n+  INITIALIZE_TARGETS();\n \n   TargetOptions Options;\n   Options.NoFramePointerElim = true;"}, {"sha": "2fd4b3fa6f3594a1b2298bf4f6a0b15c85495189", "filename": "src/rustllvm/rustllvm.def.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7aa9918ef1673edcef261da41075203de5b15b3/src%2Frustllvm%2Frustllvm.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/d7aa9918ef1673edcef261da41075203de5b15b3/src%2Frustllvm%2Frustllvm.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.def.in?ref=d7aa9918ef1673edcef261da41075203de5b15b3", "patch": "@@ -4,6 +4,7 @@ LLVMRustWriteOutputFile\n LLVMRustGetLastError\n LLVMRustConstSmallInt\n LLVMRustConstInt\n+LLVMRustJIT\n LLVMRustParseBitcode\n LLVMRustParseAssemblyFile\n LLVMRustPrintPassTimings\n@@ -485,6 +486,7 @@ LLVMIsThreadLocal\n LLVMIsUndef\n LLVMLabelType\n LLVMLabelTypeInContext\n+LLVMLinkInInterpreter\n LLVMMDNode\n LLVMMDNodeInContext\n LLVMMDString"}]}