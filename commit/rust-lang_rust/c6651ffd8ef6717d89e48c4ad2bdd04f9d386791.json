{"sha": "c6651ffd8ef6717d89e48c4ad2bdd04f9d386791", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2NjUxZmZkOGVmNjcxN2Q4OWU0OGM0YWQyYmRkMDRmOWQzODY3OTE=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-05-16T09:03:09Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-06-01T05:59:19Z"}, "message": "rustc: remove Copy from Adjustment and Adjust.", "tree": {"sha": "f1f4227a8ea14db2d1a931753fc338aa752ae7d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1f4227a8ea14db2d1a931753fc338aa752ae7d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6651ffd8ef6717d89e48c4ad2bdd04f9d386791", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6651ffd8ef6717d89e48c4ad2bdd04f9d386791", "html_url": "https://github.com/rust-lang/rust/commit/c6651ffd8ef6717d89e48c4ad2bdd04f9d386791", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6651ffd8ef6717d89e48c4ad2bdd04f9d386791/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0cc22b4bae8007c59fbe58f2c104ecd743d746a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0cc22b4bae8007c59fbe58f2c104ecd743d746a", "html_url": "https://github.com/rust-lang/rust/commit/e0cc22b4bae8007c59fbe58f2c104ecd743d746a"}], "stats": {"total": 37, "additions": 19, "deletions": 18}, "files": [{"sha": "9aa700e2b448754b4515448915e8d5268dc18731", "filename": "src/librustc/ty/adjustment.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6651ffd8ef6717d89e48c4ad2bdd04f9d386791/src%2Flibrustc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6651ffd8ef6717d89e48c4ad2bdd04f9d386791/src%2Flibrustc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fadjustment.rs?ref=c6651ffd8ef6717d89e48c4ad2bdd04f9d386791", "patch": "@@ -16,13 +16,13 @@ use syntax_pos::Span;\n \n use hir;\n \n-#[derive(Copy, Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct Adjustment<'tcx> {\n     pub kind: Adjust<'tcx>,\n     pub target: Ty<'tcx>\n }\n \n-#[derive(Copy, Clone, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub enum Adjust<'tcx> {\n     /// Go from ! to any type.\n     NeverToAny,"}, {"sha": "8f087ac212e8a4af98f60bfb4d82922806c9ee42", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c6651ffd8ef6717d89e48c4ad2bdd04f9d386791/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6651ffd8ef6717d89e48c4ad2bdd04f9d386791/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=c6651ffd8ef6717d89e48c4ad2bdd04f9d386791", "patch": "@@ -442,15 +442,15 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Expr, node\n fn check_adjustments<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Expr) {\n     use rustc::ty::adjustment::*;\n \n-    match v.tables.adjustments.get(&e.id).map(|adj| adj.kind) {\n+    match v.tables.adjustments.get(&e.id).map(|adj| &adj.kind) {\n         None |\n-        Some(Adjust::NeverToAny) |\n-        Some(Adjust::ReifyFnPointer) |\n-        Some(Adjust::UnsafeFnPointer) |\n-        Some(Adjust::ClosureFnPointer) |\n-        Some(Adjust::MutToConstPointer) => {}\n+        Some(&Adjust::NeverToAny) |\n+        Some(&Adjust::ReifyFnPointer) |\n+        Some(&Adjust::UnsafeFnPointer) |\n+        Some(&Adjust::ClosureFnPointer) |\n+        Some(&Adjust::MutToConstPointer) => {}\n \n-        Some(Adjust::DerefRef { autoderefs, .. }) => {\n+        Some(&Adjust::DerefRef { autoderefs, .. }) => {\n             if (0..autoderefs as u32)\n                 .any(|autoderef| v.tables.is_overloaded_autoderef(e.id, autoderef)) {\n                 v.promotable = false;"}, {"sha": "2d8126225be5d28131b7429dde68f47723b2073a", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c6651ffd8ef6717d89e48c4ad2bdd04f9d386791/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6651ffd8ef6717d89e48c4ad2bdd04f9d386791/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=c6651ffd8ef6717d89e48c4ad2bdd04f9d386791", "patch": "@@ -800,8 +800,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             match result {\n                 Ok(ok) => {\n                     let adjustment = self.register_infer_ok_obligations(ok);\n+                    let target = adjustment.target;\n                     self.apply_adjustment(new.id, adjustment);\n-                    return Ok(adjustment.target);\n+                    return Ok(target);\n                 }\n                 Err(e) => first_error = Some(e),\n             }\n@@ -812,8 +813,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // previous expressions, other than noop reborrows (ignoring lifetimes).\n         for expr in exprs {\n             let expr = expr.as_coercion_site();\n-            let noop = match self.tables.borrow().adjustments.get(&expr.id).map(|adj| adj.kind) {\n-                Some(Adjust::DerefRef {\n+            let noop = match self.tables.borrow().adjustments.get(&expr.id).map(|adj| &adj.kind) {\n+                Some(&Adjust::DerefRef {\n                     autoderefs: 1,\n                     autoref: Some(AutoBorrow::Ref(_, mutbl_adj)),\n                     unsize: false\n@@ -828,7 +829,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         _ => false,\n                     }\n                 }\n-                Some(Adjust::NeverToAny) => true,\n+                Some(&Adjust::NeverToAny) => true,\n                 Some(_) => false,\n                 None => true,\n             };\n@@ -857,7 +858,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 let adjustment = self.register_infer_ok_obligations(ok);\n                 for expr in exprs {\n                     let expr = expr.as_coercion_site();\n-                    self.apply_adjustment(expr.id, adjustment);\n+                    self.apply_adjustment(expr.id, adjustment.clone());\n                 }\n                 Ok(adjustment.target)\n             }"}, {"sha": "bee4a18523e1eac497650b68568701d0eb5c33f2", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6651ffd8ef6717d89e48c4ad2bdd04f9d386791/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6651ffd8ef6717d89e48c4ad2bdd04f9d386791/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c6651ffd8ef6717d89e48c4ad2bdd04f9d386791", "patch": "@@ -1805,16 +1805,16 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             Entry::Vacant(entry) => { entry.insert(adj); },\n             Entry::Occupied(mut entry) => {\n                 debug!(\" - composing on top of {:?}\", entry.get());\n-                let composed_kind = match (entry.get().kind, adj.kind) {\n+                let composed_kind = match (&entry.get().kind, &adj.kind) {\n                     // Applying any adjustment on top of a NeverToAny\n                     // is a valid NeverToAny adjustment, because it can't\n                     // be reached.\n-                    (Adjust::NeverToAny, _) => Adjust::NeverToAny,\n-                    (Adjust::DerefRef {\n+                    (&Adjust::NeverToAny, _) => Adjust::NeverToAny,\n+                    (&Adjust::DerefRef {\n                         autoderefs: 1,\n                         autoref: Some(AutoBorrow::Ref(..)),\n                         unsize: false\n-                    }, Adjust::DerefRef { autoderefs, .. }) if autoderefs > 0 => {\n+                    }, &Adjust::DerefRef { autoderefs, .. }) if autoderefs > 0 => {\n                         // A reborrow has no effect before a dereference.\n                         adj.kind\n                     }"}]}