{"sha": "09864b3b217e2ad6ca8630af6faaaefd8d14e860", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5ODY0YjNiMjE3ZTJhZDZjYTg2MzBhZjZmYWFhZWZkOGQxNGU4NjA=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-06-19T09:54:16Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-06-19T09:54:16Z"}, "message": "Merge #1418\n\n1418: rename XSignature -> XData r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "b3a6258d9225027284a1a8ce6c47fb4d47bd9309", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3a6258d9225027284a1a8ce6c47fb4d47bd9309"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09864b3b217e2ad6ca8630af6faaaefd8d14e860", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09864b3b217e2ad6ca8630af6faaaefd8d14e860", "html_url": "https://github.com/rust-lang/rust/commit/09864b3b217e2ad6ca8630af6faaaefd8d14e860", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09864b3b217e2ad6ca8630af6faaaefd8d14e860/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "78494b3c74c5c49e3352b3b65bd8b2d68f028d38", "url": "https://api.github.com/repos/rust-lang/rust/commits/78494b3c74c5c49e3352b3b65bd8b2d68f028d38", "html_url": "https://github.com/rust-lang/rust/commit/78494b3c74c5c49e3352b3b65bd8b2d68f028d38"}, {"sha": "0caec7d250affd042e51d035fb6d86c0f7f25f94", "url": "https://api.github.com/repos/rust-lang/rust/commits/0caec7d250affd042e51d035fb6d86c0f7f25f94", "html_url": "https://github.com/rust-lang/rust/commit/0caec7d250affd042e51d035fb6d86c0f7f25f94"}], "stats": {"total": 136, "additions": 66, "deletions": 70}, "files": [{"sha": "10f975b31df310223910bf33834230882427d815", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 22, "deletions": 24, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/09864b3b217e2ad6ca8630af6faaaefd8d14e860/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09864b3b217e2ad6ca8630af6faaaefd8d14e860/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=09864b3b217e2ad6ca8630af6faaaefd8d14e860", "patch": "@@ -519,9 +519,8 @@ pub struct Function {\n     pub(crate) id: FunctionId,\n }\n \n-/// The declared signature of a function.\n #[derive(Debug, Clone, PartialEq, Eq)]\n-pub struct FnSignature {\n+pub struct FnData {\n     pub(crate) name: Name,\n     pub(crate) params: Vec<TypeRef>,\n     pub(crate) ret_type: TypeRef,\n@@ -530,11 +529,11 @@ pub struct FnSignature {\n     pub(crate) has_self_param: bool,\n }\n \n-impl FnSignature {\n-    pub(crate) fn fn_signature_query(\n+impl FnData {\n+    pub(crate) fn fn_data_query(\n         db: &(impl DefDatabase + AstDatabase),\n         func: Function,\n-    ) -> Arc<FnSignature> {\n+    ) -> Arc<FnData> {\n         let src = func.source(db);\n         let name = src.ast.name().map(|n| n.as_name()).unwrap_or_else(Name::missing);\n         let mut params = Vec::new();\n@@ -569,7 +568,7 @@ impl FnSignature {\n             TypeRef::unit()\n         };\n \n-        let sig = FnSignature { name, params, ret_type, has_self_param };\n+        let sig = FnData { name, params, ret_type, has_self_param };\n         Arc::new(sig)\n     }\n     pub fn name(&self) -> &Name {\n@@ -597,7 +596,7 @@ impl Function {\n     }\n \n     pub fn name(self, db: &impl HirDatabase) -> Name {\n-        self.signature(db).name.clone()\n+        self.data(db).name.clone()\n     }\n \n     pub(crate) fn body_source_map(self, db: &impl HirDatabase) -> Arc<BodySourceMap> {\n@@ -612,8 +611,8 @@ impl Function {\n         db.type_for_def(self.into(), Namespace::Values)\n     }\n \n-    pub fn signature(self, db: &impl HirDatabase) -> Arc<FnSignature> {\n-        db.fn_signature(self)\n+    pub fn data(self, db: &impl HirDatabase) -> Arc<FnData> {\n+        db.fn_data(self)\n     }\n \n     pub fn infer(self, db: &impl HirDatabase) -> Arc<InferenceResult> {\n@@ -670,8 +669,8 @@ impl Const {\n         self.id.module(db)\n     }\n \n-    pub fn signature(self, db: &impl HirDatabase) -> Arc<ConstSignature> {\n-        db.const_signature(self)\n+    pub fn data(self, db: &impl HirDatabase) -> Arc<ConstData> {\n+        db.const_data(self)\n     }\n \n     pub fn infer(self, db: &impl HirDatabase) -> Arc<InferenceResult> {\n@@ -696,14 +695,13 @@ impl Const {\n     }\n }\n \n-/// The declared signature of a const.\n #[derive(Debug, Clone, PartialEq, Eq)]\n-pub struct ConstSignature {\n+pub struct ConstData {\n     pub(crate) name: Name,\n     pub(crate) type_ref: TypeRef,\n }\n \n-impl ConstSignature {\n+impl ConstData {\n     pub fn name(&self) -> &Name {\n         &self.name\n     }\n@@ -712,27 +710,27 @@ impl ConstSignature {\n         &self.type_ref\n     }\n \n-    pub(crate) fn const_signature_query(\n+    pub(crate) fn const_data_query(\n         db: &(impl DefDatabase + AstDatabase),\n         konst: Const,\n-    ) -> Arc<ConstSignature> {\n+    ) -> Arc<ConstData> {\n         let node = konst.source(db).ast;\n-        const_signature_for(&*node)\n+        const_data_for(&*node)\n     }\n \n-    pub(crate) fn static_signature_query(\n+    pub(crate) fn static_data_query(\n         db: &(impl DefDatabase + AstDatabase),\n         konst: Static,\n-    ) -> Arc<ConstSignature> {\n+    ) -> Arc<ConstData> {\n         let node = konst.source(db).ast;\n-        const_signature_for(&*node)\n+        const_data_for(&*node)\n     }\n }\n \n-fn const_signature_for<N: NameOwner + TypeAscriptionOwner>(node: &N) -> Arc<ConstSignature> {\n+fn const_data_for<N: NameOwner + TypeAscriptionOwner>(node: &N) -> Arc<ConstData> {\n     let name = node.name().map(|n| n.as_name()).unwrap_or_else(Name::missing);\n     let type_ref = TypeRef::from_ast_opt(node.ascribed_type());\n-    let sig = ConstSignature { name, type_ref };\n+    let sig = ConstData { name, type_ref };\n     Arc::new(sig)\n }\n \n@@ -746,8 +744,8 @@ impl Static {\n         self.id.module(db)\n     }\n \n-    pub fn signature(self, db: &impl HirDatabase) -> Arc<ConstSignature> {\n-        db.static_signature(self)\n+    pub fn data(self, db: &impl HirDatabase) -> Arc<ConstData> {\n+        db.static_data(self)\n     }\n \n     /// Builds a resolver for code inside this item."}, {"sha": "23c36014b86505207e6010a3b890345e858a37d7", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/09864b3b217e2ad6ca8630af6faaaefd8d14e860/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09864b3b217e2ad6ca8630af6faaaefd8d14e860/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=09864b3b217e2ad6ca8630af6faaaefd8d14e860", "patch": "@@ -6,9 +6,9 @@ use ra_db::{SourceDatabase, salsa};\n \n use crate::{\n     HirFileId, MacroDefId, AstIdMap, ErasedFileAstId, Crate, Module, MacroCallLoc,\n-    Function, FnSignature, ExprScopes, TypeAlias,\n+    Function, FnData, ExprScopes, TypeAlias,\n     Struct, Enum, StructField,\n-    Const, ConstSignature, Static,\n+    Const, ConstData, Static,\n     DefWithBody, Trait,\n     ids,\n     nameres::{Namespace, ImportSourceMap, RawItems, CrateDefMap},\n@@ -109,17 +109,17 @@ pub trait DefDatabase: SourceDatabase {\n     #[salsa::invoke(crate::generics::GenericParams::generic_params_query)]\n     fn generic_params(&self, def: GenericDef) -> Arc<GenericParams>;\n \n-    #[salsa::invoke(crate::FnSignature::fn_signature_query)]\n-    fn fn_signature(&self, func: Function) -> Arc<FnSignature>;\n+    #[salsa::invoke(crate::FnData::fn_data_query)]\n+    fn fn_data(&self, func: Function) -> Arc<FnData>;\n \n     #[salsa::invoke(crate::type_alias::type_alias_data_query)]\n     fn type_alias_data(&self, typ: TypeAlias) -> Arc<TypeAliasData>;\n \n-    #[salsa::invoke(crate::ConstSignature::const_signature_query)]\n-    fn const_signature(&self, konst: Const) -> Arc<ConstSignature>;\n+    #[salsa::invoke(crate::ConstData::const_data_query)]\n+    fn const_data(&self, konst: Const) -> Arc<ConstData>;\n \n-    #[salsa::invoke(crate::ConstSignature::static_signature_query)]\n-    fn static_signature(&self, konst: Static) -> Arc<ConstSignature>;\n+    #[salsa::invoke(crate::ConstData::static_data_query)]\n+    fn static_data(&self, konst: Static) -> Arc<ConstData>;\n \n     #[salsa::invoke(crate::lang_item::LangItems::lang_items_query)]\n     fn lang_items(&self, krate: Crate) -> Arc<LangItems>;"}, {"sha": "f07a36926c4dc43f9489a6214f0fd8654a7b8c1c", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09864b3b217e2ad6ca8630af6faaaefd8d14e860/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09864b3b217e2ad6ca8630af6faaaefd8d14e860/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=09864b3b217e2ad6ca8630af6faaaefd8d14e860", "patch": "@@ -75,9 +75,9 @@ pub use self::code_model::{\n     DefWithBody,\n     Module, ModuleDef, ModuleSource,\n     Struct, Union, Enum, EnumVariant,\n-    Function, FnSignature,\n+    Function, FnData,\n     StructField, FieldSource,\n-    Static, Const, ConstSignature,\n+    Static, Const, ConstData,\n     Trait, TypeAlias, MacroDef, Container,\n     BuiltinType,\n     src::{Source, HasSource},"}, {"sha": "2c05ca734cf92c627bcc1ba52576ea1e411f2146", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/09864b3b217e2ad6ca8630af6faaaefd8d14e860/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09864b3b217e2ad6ca8630af6faaaefd8d14e860/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=09864b3b217e2ad6ca8630af6faaaefd8d14e860", "patch": "@@ -27,7 +27,7 @@ use ra_prof::profile;\n use test_utils::tested_by;\n \n use crate::{\n-    Function, StructField, Path, Name, FnSignature, AdtDef, ConstSignature, HirDatabase,\n+    Function, StructField, Path, Name, FnData, AdtDef, ConstData, HirDatabase,\n     DefWithBody, ImplItem,\n     type_ref::{TypeRef, Mutability},\n     expr::{\n@@ -59,9 +59,9 @@ pub fn infer_query(db: &impl HirDatabase, def: DefWithBody) -> Arc<InferenceResu\n     let mut ctx = InferenceContext::new(db, body, resolver);\n \n     match def {\n-        DefWithBody::Const(ref c) => ctx.collect_const_signature(&c.signature(db)),\n-        DefWithBody::Function(ref f) => ctx.collect_fn_signature(&f.signature(db)),\n-        DefWithBody::Static(ref s) => ctx.collect_const_signature(&s.signature(db)),\n+        DefWithBody::Const(ref c) => ctx.collect_const(&c.data(db)),\n+        DefWithBody::Function(ref f) => ctx.collect_fn(&f.data(db)),\n+        DefWithBody::Static(ref s) => ctx.collect_const(&s.data(db)),\n     }\n \n     ctx.infer_body();\n@@ -509,17 +509,16 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             let item: crate::ModuleDef = ty.iterate_impl_items(self.db, krate, |item| {\n                 let matching_def: Option<crate::ModuleDef> = match item {\n                     crate::ImplItem::Method(func) => {\n-                        let sig = func.signature(self.db);\n-                        if segment.name == *sig.name() {\n+                        if segment.name == func.name(self.db) {\n                             Some(func.into())\n                         } else {\n                             None\n                         }\n                     }\n \n                     crate::ImplItem::Const(konst) => {\n-                        let sig = konst.signature(self.db);\n-                        if segment.name == *sig.name() {\n+                        let data = konst.data(self.db);\n+                        if segment.name == *data.name() {\n                             Some(konst.into())\n                         } else {\n                             None\n@@ -1283,18 +1282,18 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         ty\n     }\n \n-    fn collect_const_signature(&mut self, signature: &ConstSignature) {\n-        self.return_ty = self.make_ty(signature.type_ref());\n+    fn collect_const(&mut self, data: &ConstData) {\n+        self.return_ty = self.make_ty(data.type_ref());\n     }\n \n-    fn collect_fn_signature(&mut self, signature: &FnSignature) {\n+    fn collect_fn(&mut self, data: &FnData) {\n         let body = Arc::clone(&self.body); // avoid borrow checker problem\n-        for (type_ref, pat) in signature.params().iter().zip(body.params()) {\n+        for (type_ref, pat) in data.params().iter().zip(body.params()) {\n             let ty = self.make_ty(type_ref);\n \n             self.infer_pat(*pat, &ty, BindingMode::default());\n         }\n-        self.return_ty = self.make_ty(signature.ret_type());\n+        self.return_ty = self.make_ty(data.ret_type());\n     }\n \n     fn infer_body(&mut self) {"}, {"sha": "cb494baf48f5035921ba826627d591348610a3bf", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/09864b3b217e2ad6ca8630af6faaaefd8d14e860/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09864b3b217e2ad6ca8630af6faaaefd8d14e860/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=09864b3b217e2ad6ca8630af6faaaefd8d14e860", "patch": "@@ -353,11 +353,10 @@ pub(crate) fn generic_defaults(db: &impl HirDatabase, def: GenericDef) -> Substs\n }\n \n fn fn_sig_for_fn(db: &impl HirDatabase, def: Function) -> FnSig {\n-    let signature = def.signature(db);\n+    let data = def.data(db);\n     let resolver = def.resolver(db);\n-    let params =\n-        signature.params().iter().map(|tr| Ty::from_hir(db, &resolver, tr)).collect::<Vec<_>>();\n-    let ret = Ty::from_hir(db, &resolver, signature.ret_type());\n+    let params = data.params().iter().map(|tr| Ty::from_hir(db, &resolver, tr)).collect::<Vec<_>>();\n+    let ret = Ty::from_hir(db, &resolver, data.ret_type());\n     FnSig::from_params_and_return(params, ret)\n }\n \n@@ -371,18 +370,18 @@ fn type_for_fn(db: &impl HirDatabase, def: Function) -> Ty {\n \n /// Build the declared type of a const.\n fn type_for_const(db: &impl HirDatabase, def: Const) -> Ty {\n-    let signature = def.signature(db);\n+    let data = def.data(db);\n     let resolver = def.resolver(db);\n \n-    Ty::from_hir(db, &resolver, signature.type_ref())\n+    Ty::from_hir(db, &resolver, data.type_ref())\n }\n \n /// Build the declared type of a static.\n fn type_for_static(db: &impl HirDatabase, def: Static) -> Ty {\n-    let signature = def.signature(db);\n+    let data = def.data(db);\n     let resolver = def.resolver(db);\n \n-    Ty::from_hir(db, &resolver, signature.type_ref())\n+    Ty::from_hir(db, &resolver, data.type_ref())\n }\n \n /// Build the declared type of a static."}, {"sha": "46ec136bd31556c2c3e036f3afe78956aa9ef6c8", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/09864b3b217e2ad6ca8630af6faaaefd8d14e860/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09864b3b217e2ad6ca8630af6faaaefd8d14e860/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=09864b3b217e2ad6ca8630af6faaaefd8d14e860", "patch": "@@ -192,8 +192,8 @@ fn iterate_trait_method_candidates<T>(\n         let mut known_implemented = false;\n         for item in data.items() {\n             if let TraitItem::Function(m) = *item {\n-                let sig = m.signature(db);\n-                if name.map_or(true, |name| sig.name() == name) && sig.has_self_param() {\n+                let data = m.data(db);\n+                if name.map_or(true, |name| data.name() == name) && data.has_self_param() {\n                     if !known_implemented {\n                         let trait_ref = canonical_trait_ref(db, t, ty.clone());\n                         if db.implements(krate, trait_ref).is_none() {\n@@ -227,8 +227,8 @@ fn iterate_inherent_methods<T>(\n     for impl_block in impls.lookup_impl_blocks(&ty.value) {\n         for item in impl_block.items(db) {\n             if let ImplItem::Method(f) = item {\n-                let sig = f.signature(db);\n-                if name.map_or(true, |name| sig.name() == name) && sig.has_self_param() {\n+                let data = f.data(db);\n+                if name.map_or(true, |name| data.name() == name) && data.has_self_param() {\n                     if let Some(result) = callback(&ty.value, f) {\n                         return Some(result);\n                     }"}, {"sha": "2948c646bb95df1e741a9196b9266d77778f8139", "filename": "crates/ra_ide_api/src/call_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09864b3b217e2ad6ca8630af6faaaefd8d14e860/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09864b3b217e2ad6ca8630af6faaaefd8d14e860/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs?ref=09864b3b217e2ad6ca8630af6faaaefd8d14e860", "patch": "@@ -35,7 +35,7 @@ pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<Cal\n \n     // If we have a calling expression let's find which argument we are on\n     let num_params = call_info.parameters().len();\n-    let has_self = function.signature(db).has_self_param();\n+    let has_self = function.data(db).has_self_param();\n \n     if num_params == 1 {\n         if !has_self {"}, {"sha": "40bd1e75e5a827f986142a310e49054c09b889b3", "filename": "crates/ra_ide_api/src/completion/complete_dot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09864b3b217e2ad6ca8630af6faaaefd8d14e860/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09864b3b217e2ad6ca8630af6faaaefd8d14e860/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=09864b3b217e2ad6ca8630af6faaaefd8d14e860", "patch": "@@ -37,8 +37,8 @@ fn complete_fields(acc: &mut Completions, ctx: &CompletionContext, receiver: Ty)\n \n fn complete_methods(acc: &mut Completions, ctx: &CompletionContext, receiver: Ty) {\n     ctx.analyzer.iterate_method_candidates(ctx.db, receiver, None, |_ty, func| {\n-        let sig = func.signature(ctx.db);\n-        if sig.has_self_param() {\n+        let data = func.data(ctx.db);\n+        if data.has_self_param() {\n             acc.add_function(ctx, func);\n         }\n         None::<()>"}, {"sha": "c14af593ba3368c04748dc4a54278725472b8bb9", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09864b3b217e2ad6ca8630af6faaaefd8d14e860/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09864b3b217e2ad6ca8630af6faaaefd8d14e860/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=09864b3b217e2ad6ca8630af6faaaefd8d14e860", "patch": "@@ -49,8 +49,8 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n                 ty.iterate_impl_items(ctx.db, krate, |item| {\n                     match item {\n                         hir::ImplItem::Method(func) => {\n-                            let sig = func.signature(ctx.db);\n-                            if !sig.has_self_param() {\n+                            let data = func.data(ctx.db);\n+                            if !data.has_self_param() {\n                                 acc.add_function(ctx, func);\n                             }\n                         }"}, {"sha": "9739367365574b2f2a9d07719cfa905a8c499cb2", "filename": "crates/ra_ide_api/src/completion/presentation.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/09864b3b217e2ad6ca8630af6faaaefd8d14e860/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09864b3b217e2ad6ca8630af6faaaefd8d14e860/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=09864b3b217e2ad6ca8630af6faaaefd8d14e860", "patch": "@@ -98,13 +98,13 @@ impl Completions {\n         name: Option<String>,\n         func: hir::Function,\n     ) {\n-        let sig = func.signature(ctx.db);\n-        let name = name.unwrap_or_else(|| sig.name().to_string());\n+        let data = func.data(ctx.db);\n+        let name = name.unwrap_or_else(|| data.name().to_string());\n         let ast_node = func.source(ctx.db).ast;\n         let detail = function_label(&ast_node);\n \n         let mut builder = CompletionItem::new(CompletionKind::Reference, ctx.source_range(), name)\n-            .kind(if sig.has_self_param() {\n+            .kind(if data.has_self_param() {\n                 CompletionItemKind::Method\n             } else {\n                 CompletionItemKind::Function\n@@ -115,10 +115,10 @@ impl Completions {\n         if ctx.use_item_syntax.is_none() && !ctx.is_call {\n             tested_by!(inserts_parens_for_function_calls);\n             let snippet =\n-                if sig.params().is_empty() || sig.has_self_param() && sig.params().len() == 1 {\n-                    format!(\"{}()$0\", sig.name())\n+                if data.params().is_empty() || data.has_self_param() && data.params().len() == 1 {\n+                    format!(\"{}()$0\", data.name())\n                 } else {\n-                    format!(\"{}($0)\", sig.name())\n+                    format!(\"{}($0)\", data.name())\n                 };\n             builder = builder.insert_snippet(snippet);\n         }"}]}