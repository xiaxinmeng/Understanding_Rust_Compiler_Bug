{"sha": "e5ecf629dd0e36e0aab9c664c7a3d11d592268c9", "node_id": "C_kwDOAAsO6NoAKGU1ZWNmNjI5ZGQwZTM2ZTBhYWI5YzY2NGM3YTNkMTFkNTkyMjY4Yzk", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-10T05:53:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-10T05:53:34Z"}, "message": "Rollup merge of #102763 - compiler-errors:nits, r=cjgillot\n\nSome diagnostic-related nits\n\n1. Use `&mut Diagnostic` instead of `&mut DiagnosticBuilder<'_, T>`\n2. Make `diag.span_suggestions` take an `IntoIterator` instead of `Iterator`, just to remove some `.into_iter` calls on the caller.\n\nidk if I should add a lint to make sure people use `&mut Diagnostic` instead of `&mut DiagnosticBuilder<'_, T>` in cases where we're just, e.g., adding subdiagnostics to the diagnostic... maybe a followup.", "tree": {"sha": "2ff22bd0aadd6db62d7e4ea9255d24092957f02e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ff22bd0aadd6db62d7e4ea9255d24092957f02e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5ecf629dd0e36e0aab9c664c7a3d11d592268c9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjbJHeCRBK7hj4Ov3rIwAA8VYIABcLlRI9b4zMCphx0U0Ek4Lb\n4Yc4ZXerUDOu44V51KEaGqWzbtEkUL3xMG14ct4u/ZCEqOI3WKRTeLyB/59fL6s7\niu7INTYRXYOEL+V1WbkCPq2QwWoo3wkI22hb89AWFKlZWgZ5qr2iHAMjtSlU/Unj\nTCPieCi+LUiZEUrjUf90R0m40QN7R8T304jtLdVIG6nl+UiTKU7jBsyfgQdwVa/a\nHLDucbIQ0IpjaufkR0VUHH6imu3AbqkGcqDkGhjspH/XpNIPBneoHAtRmbLrKTAq\neQvN4g12zeuT4eOuaRCbV6hjQ5hFU56C4dKW/4VMG8Ehsn4CPNdmHXZVV5u5/0o=\n=efmC\n-----END PGP SIGNATURE-----\n", "payload": "tree 2ff22bd0aadd6db62d7e4ea9255d24092957f02e\nparent 5eef9b2c50ddd4e445c10043908f785b08456489\nparent 9568138069cce7915eb35386f8d9e020adcd599b\nauthor Michael Goulet <michael@errs.io> 1668059614 -0800\ncommitter GitHub <noreply@github.com> 1668059614 -0800\n\nRollup merge of #102763 - compiler-errors:nits, r=cjgillot\n\nSome diagnostic-related nits\n\n1. Use `&mut Diagnostic` instead of `&mut DiagnosticBuilder<'_, T>`\n2. Make `diag.span_suggestions` take an `IntoIterator` instead of `Iterator`, just to remove some `.into_iter` calls on the caller.\n\nidk if I should add a lint to make sure people use `&mut Diagnostic` instead of `&mut DiagnosticBuilder<'_, T>` in cases where we're just, e.g., adding subdiagnostics to the diagnostic... maybe a followup.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5ecf629dd0e36e0aab9c664c7a3d11d592268c9", "html_url": "https://github.com/rust-lang/rust/commit/e5ecf629dd0e36e0aab9c664c7a3d11d592268c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5ecf629dd0e36e0aab9c664c7a3d11d592268c9/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5eef9b2c50ddd4e445c10043908f785b08456489", "url": "https://api.github.com/repos/rust-lang/rust/commits/5eef9b2c50ddd4e445c10043908f785b08456489", "html_url": "https://github.com/rust-lang/rust/commit/5eef9b2c50ddd4e445c10043908f785b08456489"}, {"sha": "9568138069cce7915eb35386f8d9e020adcd599b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9568138069cce7915eb35386f8d9e020adcd599b", "html_url": "https://github.com/rust-lang/rust/commit/9568138069cce7915eb35386f8d9e020adcd599b"}], "stats": {"total": 58, "additions": 26, "deletions": 32}, "files": [{"sha": "7457369aa58cb42bad748f68492f6d9c79462e88", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e5ecf629dd0e36e0aab9c664c7a3d11d592268c9/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ecf629dd0e36e0aab9c664c7a3d11d592268c9/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=e5ecf629dd0e36e0aab9c664c7a3d11d592268c9", "patch": "@@ -1,6 +1,4 @@\n-use rustc_errors::{\n-    Applicability, Diagnostic, DiagnosticBuilder, EmissionGuarantee, ErrorGuaranteed,\n-};\n+use rustc_errors::{Applicability, Diagnostic};\n use rustc_hir as hir;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::Node;\n@@ -629,25 +627,20 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         self.buffer_error(err);\n     }\n \n-    fn suggest_map_index_mut_alternatives(\n-        &self,\n-        ty: Ty<'_>,\n-        err: &mut DiagnosticBuilder<'_, ErrorGuaranteed>,\n-        span: Span,\n-    ) {\n+    fn suggest_map_index_mut_alternatives(&self, ty: Ty<'tcx>, err: &mut Diagnostic, span: Span) {\n         let Some(adt) = ty.ty_adt_def() else { return };\n         let did = adt.did();\n         if self.infcx.tcx.is_diagnostic_item(sym::HashMap, did)\n             || self.infcx.tcx.is_diagnostic_item(sym::BTreeMap, did)\n         {\n-            struct V<'a, 'b, 'tcx, G: EmissionGuarantee> {\n+            struct V<'a, 'tcx> {\n                 assign_span: Span,\n-                err: &'a mut DiagnosticBuilder<'b, G>,\n+                err: &'a mut Diagnostic,\n                 ty: Ty<'tcx>,\n                 suggested: bool,\n             }\n-            impl<'a, 'b: 'a, 'hir, 'tcx, G: EmissionGuarantee> Visitor<'hir> for V<'a, 'b, 'tcx, G> {\n-                fn visit_stmt(&mut self, stmt: &'hir hir::Stmt<'hir>) {\n+            impl<'a, 'tcx> Visitor<'tcx> for V<'a, 'tcx> {\n+                fn visit_stmt(&mut self, stmt: &'tcx hir::Stmt<'tcx>) {\n                     hir::intravisit::walk_stmt(self, stmt);\n                     let expr = match stmt.kind {\n                         hir::StmtKind::Semi(expr) | hir::StmtKind::Expr(expr) => expr,\n@@ -705,7 +698,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                                     ),\n                                     (rv.span.shrink_to_hi(), \")\".to_string()),\n                                 ],\n-                            ].into_iter(),\n+                            ],\n                             Applicability::MachineApplicable,\n                         );\n                         self.suggested = true;"}, {"sha": "375e3ebd77df733e52391185e54b0554bf922243", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e5ecf629dd0e36e0aab9c664c7a3d11d592268c9/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ecf629dd0e36e0aab9c664c7a3d11d592268c9/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=e5ecf629dd0e36e0aab9c664c7a3d11d592268c9", "patch": "@@ -742,7 +742,7 @@ impl Diagnostic {\n         &mut self,\n         sp: Span,\n         msg: impl Into<SubdiagnosticMessage>,\n-        suggestions: impl Iterator<Item = String>,\n+        suggestions: impl IntoIterator<Item = String>,\n         applicability: Applicability,\n     ) -> &mut Self {\n         self.span_suggestions_with_style(\n@@ -759,11 +759,11 @@ impl Diagnostic {\n         &mut self,\n         sp: Span,\n         msg: impl Into<SubdiagnosticMessage>,\n-        suggestions: impl Iterator<Item = String>,\n+        suggestions: impl IntoIterator<Item = String>,\n         applicability: Applicability,\n         style: SuggestionStyle,\n     ) -> &mut Self {\n-        let mut suggestions: Vec<_> = suggestions.collect();\n+        let mut suggestions: Vec<_> = suggestions.into_iter().collect();\n         suggestions.sort();\n \n         debug_assert!(\n@@ -790,10 +790,10 @@ impl Diagnostic {\n     pub fn multipart_suggestions(\n         &mut self,\n         msg: impl Into<SubdiagnosticMessage>,\n-        suggestions: impl Iterator<Item = Vec<(Span, String)>>,\n+        suggestions: impl IntoIterator<Item = Vec<(Span, String)>>,\n         applicability: Applicability,\n     ) -> &mut Self {\n-        let suggestions: Vec<_> = suggestions.collect();\n+        let suggestions: Vec<_> = suggestions.into_iter().collect();\n         debug_assert!(\n             !(suggestions\n                 .iter()"}, {"sha": "18cbf963494fc4ec0a7d3a86aa621371e5befcda", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5ecf629dd0e36e0aab9c664c7a3d11d592268c9/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ecf629dd0e36e0aab9c664c7a3d11d592268c9/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=e5ecf629dd0e36e0aab9c664c7a3d11d592268c9", "patch": "@@ -599,13 +599,13 @@ impl<'a, G: EmissionGuarantee> DiagnosticBuilder<'a, G> {\n         &mut self,\n         sp: Span,\n         msg: impl Into<SubdiagnosticMessage>,\n-        suggestions: impl Iterator<Item = String>,\n+        suggestions: impl IntoIterator<Item = String>,\n         applicability: Applicability,\n     ) -> &mut Self);\n     forward!(pub fn multipart_suggestions(\n         &mut self,\n         msg: impl Into<SubdiagnosticMessage>,\n-        suggestions: impl Iterator<Item = Vec<(Span, String)>>,\n+        suggestions: impl IntoIterator<Item = Vec<(Span, String)>>,\n         applicability: Applicability,\n     ) -> &mut Self);\n     forward!(pub fn span_suggestion_short("}, {"sha": "3a67c032b3bdd3cd234cada09cf413a4f506fdea", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5ecf629dd0e36e0aab9c664c7a3d11d592268c9/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ecf629dd0e36e0aab9c664c7a3d11d592268c9/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=e5ecf629dd0e36e0aab9c664c7a3d11d592268c9", "patch": "@@ -401,7 +401,7 @@ impl<'a> Parser<'a> {\n                 .span_suggestions(\n                     span.shrink_to_hi(),\n                     \"add `mut` or `const` here\",\n-                    [\"mut \".to_string(), \"const \".to_string()].into_iter(),\n+                    [\"mut \".to_string(), \"const \".to_string()],\n                     Applicability::HasPlaceholders,\n                 )\n                 .emit();"}, {"sha": "c181de48a9ad8fb9b0053e1a38347f06c8104aa4", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e5ecf629dd0e36e0aab9c664c7a3d11d592268c9/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ecf629dd0e36e0aab9c664c7a3d11d592268c9/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=e5ecf629dd0e36e0aab9c664c7a3d11d592268c9", "patch": "@@ -87,6 +87,7 @@ use self::VarKind::*;\n use rustc_ast::InlineAsmOptions;\n use rustc_data_structures::fx::FxIndexMap;\n use rustc_errors::Applicability;\n+use rustc_errors::Diagnostic;\n use rustc_hir as hir;\n use rustc_hir::def::*;\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -1690,7 +1691,7 @@ impl<'tcx> Liveness<'_, 'tcx> {\n         &self,\n         name: &str,\n         opt_body: Option<&hir::Body<'_>>,\n-        err: &mut rustc_errors::DiagnosticBuilder<'_, ()>,\n+        err: &mut Diagnostic,\n     ) -> bool {\n         let mut has_litstring = false;\n         let Some(opt_body) = opt_body else {return false;};"}, {"sha": "cdc28db13f3ac756c5c523439210915dbd8ac43f", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e5ecf629dd0e36e0aab9c664c7a3d11d592268c9/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ecf629dd0e36e0aab9c664c7a3d11d592268c9/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=e5ecf629dd0e36e0aab9c664c7a3d11d592268c9", "patch": "@@ -437,7 +437,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n \n     fn try_lookup_name_relaxed(\n         &mut self,\n-        err: &mut DiagnosticBuilder<'_, ErrorGuaranteed>,\n+        err: &mut Diagnostic,\n         source: PathSource<'_>,\n         path: &[Segment],\n         span: Span,\n@@ -497,7 +497,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                         .contains(span)\n                     {\n                         // Already reported this issue on the lhs of the type ascription.\n-                        err.delay_as_bug();\n+                        err.downgrade_to_delayed_bug();\n                         return (true, candidates);\n                     }\n                 }\n@@ -616,7 +616,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n \n     fn suggest_trait_and_bounds(\n         &mut self,\n-        err: &mut DiagnosticBuilder<'_, ErrorGuaranteed>,\n+        err: &mut Diagnostic,\n         source: PathSource<'_>,\n         res: Option<Res>,\n         span: Span,\n@@ -691,7 +691,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n \n     fn suggest_typo(\n         &mut self,\n-        err: &mut DiagnosticBuilder<'_, ErrorGuaranteed>,\n+        err: &mut Diagnostic,\n         source: PathSource<'_>,\n         path: &[Segment],\n         span: Span,\n@@ -750,7 +750,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n \n     fn err_code_special_cases(\n         &mut self,\n-        err: &mut DiagnosticBuilder<'_, ErrorGuaranteed>,\n+        err: &mut Diagnostic,\n         source: PathSource<'_>,\n         path: &[Segment],\n         span: Span,\n@@ -1941,7 +1941,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 err.span_suggestions(\n                     span,\n                     &msg,\n-                    suggestable_variants.into_iter(),\n+                    suggestable_variants,\n                     Applicability::MaybeIncorrect,\n                 );\n             }\n@@ -1995,7 +1995,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 err.span_suggestions(\n                     span,\n                     msg,\n-                    suggestable_variants.into_iter(),\n+                    suggestable_variants,\n                     Applicability::MaybeIncorrect,\n                 );\n             }\n@@ -2025,7 +2025,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 err.span_suggestions(\n                     span,\n                     msg,\n-                    suggestable_variants_with_placeholders.into_iter(),\n+                    suggestable_variants_with_placeholders,\n                     Applicability::HasPlaceholders,\n                 );\n             }"}, {"sha": "540b1fa2b0fb7146ac7d9e9924b8e4ec06fe814a", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5ecf629dd0e36e0aab9c664c7a3d11d592268c9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ecf629dd0e36e0aab9c664c7a3d11d592268c9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=e5ecf629dd0e36e0aab9c664c7a3d11d592268c9", "patch": "@@ -1116,7 +1116,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         err.span_suggestions(\n                             span.shrink_to_lo(),\n                             \"consider borrowing here\",\n-                            [\"&\".to_string(), \"&mut \".to_string()].into_iter(),\n+                            [\"&\".to_string(), \"&mut \".to_string()],\n                             Applicability::MaybeIncorrect,\n                         );\n                     } else {"}]}