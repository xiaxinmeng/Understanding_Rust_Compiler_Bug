{"sha": "934a5eba50aa90b7ab1822d62a2903255614eeef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzNGE1ZWJhNTBhYTkwYjdhYjE4MjJkNjJhMjkwMzI1NTYxNGVlZWY=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2013-08-17T05:46:32Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-08-21T02:09:47Z"}, "message": "Deleted fun_treemap\n\n@thestinger and I talked about this in IRC. There are a couple of use\ncases for a persistent map, but they aren't common enough to justify\ninclusion in libextra and vary enough that they would require multiple\nimplementations anyways.\n\nIn any case, fun_treemap in its current state is basically useless.", "tree": {"sha": "cf2881f03b63ad02d684bae590eeb4f6ddce0b0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf2881f03b63ad02d684bae590eeb4f6ddce0b0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/934a5eba50aa90b7ab1822d62a2903255614eeef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/934a5eba50aa90b7ab1822d62a2903255614eeef", "html_url": "https://github.com/rust-lang/rust/commit/934a5eba50aa90b7ab1822d62a2903255614eeef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/934a5eba50aa90b7ab1822d62a2903255614eeef/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f3a637b7cbd026d0cb8f8ce2139fa6287d06b56", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f3a637b7cbd026d0cb8f8ce2139fa6287d06b56", "html_url": "https://github.com/rust-lang/rust/commit/5f3a637b7cbd026d0cb8f8ce2139fa6287d06b56"}], "stats": {"total": 85, "additions": 0, "deletions": 85}, "files": [{"sha": "caf2c41d31d6595dd380d5bacd986731a4276a7f", "filename": "src/libextra/extra.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/934a5eba50aa90b7ab1822d62a2903255614eeef/src%2Flibextra%2Fextra.rs", "raw_url": "https://github.com/rust-lang/rust/raw/934a5eba50aa90b7ab1822d62a2903255614eeef/src%2Flibextra%2Fextra.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fextra.rs?ref=934a5eba50aa90b7ab1822d62a2903255614eeef", "patch": "@@ -55,7 +55,6 @@ pub mod flatpipes;\n \n pub mod container;\n pub mod bitv;\n-pub mod fun_treemap;\n pub mod list;\n pub mod ringbuf;\n pub mod priority_queue;"}, {"sha": "edbe323ec2d0bde3c07755bc45d5f03a5c488e06", "filename": "src/libextra/fun_treemap.rs", "status": "removed", "additions": 0, "deletions": 84, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/5f3a637b7cbd026d0cb8f8ce2139fa6287d06b56/src%2Flibextra%2Ffun_treemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3a637b7cbd026d0cb8f8ce2139fa6287d06b56/src%2Flibextra%2Ffun_treemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffun_treemap.rs?ref=5f3a637b7cbd026d0cb8f8ce2139fa6287d06b56", "patch": "@@ -1,84 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-/*!\n- * A functional key,value store that works on anything.\n- *\n- * This works using a binary search tree. In the first version, it's a\n- * very naive algorithm, but it will probably be updated to be a\n- * red-black tree or something else.\n- *\n- * This is copied and modified from treemap right now. It's missing a lot\n- * of features.\n- */\n-\n-\n-use std::cmp::{Eq, Ord};\n-use std::option::{Some, None};\n-\n-pub type Treemap<K, V> = @TreeNode<K, V>;\n-\n-enum TreeNode<K, V> {\n-    Empty,\n-    Node(@K, @V, @TreeNode<K, V>, @TreeNode<K, V>)\n-}\n-\n-/// Create a treemap\n-pub fn init<K: 'static, V: 'static>() -> Treemap<K, V> {\n-    @Empty\n-}\n-\n-/// Insert a value into the map\n-pub fn insert<K:Eq + Ord + 'static,\n-              V:'static>(\n-              m: Treemap<K, V>,\n-              k: K,\n-              v: V)\n-              -> Treemap<K, V> {\n-    @match m {\n-        @Empty => Node(@k, @v, @Empty, @Empty),\n-        @Node(kk, vv, left, right) => cond!(\n-            (k <  *kk) { Node(kk, vv, insert(left, k, v), right) }\n-            (k == *kk) { Node(kk, @v, left, right)               }\n-            _          { Node(kk, vv, left, insert(right, k, v)) }\n-        )\n-    }\n-}\n-\n-/// Find a value based on the key\n-pub fn find<K:Eq + Ord + 'static,\n-            V:Clone + 'static>(\n-            m: Treemap<K, V>,\n-            k: K)\n-            -> Option<V> {\n-    match *m {\n-        Empty => None,\n-        Node(kk, v, left, right) => cond!(\n-            (k == *kk) { Some((*v).clone()) }\n-            (k <  *kk) { find(left, k)  }\n-            _          { find(right, k) }\n-        )\n-    }\n-}\n-\n-/// Visit all pairs in the map in order.\n-pub fn traverse<K, V>(m: Treemap<K, V>, f: &fn(&K, &V)) {\n-    match *m {\n-        Empty => (),\n-        // Previously, this had what looked like redundant\n-        // matches to me, so I changed it. but that may be a\n-        // de-optimization -- tjc\n-        Node(@ref k, @ref v, left, right) => {\n-            traverse(left, |k,v| f(k,v));\n-            f(k, v);\n-            traverse(right, |k,v| f(k,v));\n-        }\n-    }\n-}"}]}