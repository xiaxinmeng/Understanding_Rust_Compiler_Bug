{"sha": "2ae76e120aff2fac9293c64004827bdc14b5c63c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhZTc2ZTEyMGFmZjJmYWM5MjkzYzY0MDA0ODI3YmRjMTRiNWM2M2M=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-21T04:18:52Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:29Z"}, "message": "librustc: De-`@mut` the `type_abbrevs` table", "tree": {"sha": "7f9bb8de329464f1fc7e6eea671bd10ef6331d0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f9bb8de329464f1fc7e6eea671bd10ef6331d0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ae76e120aff2fac9293c64004827bdc14b5c63c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ae76e120aff2fac9293c64004827bdc14b5c63c", "html_url": "https://github.com/rust-lang/rust/commit/2ae76e120aff2fac9293c64004827bdc14b5c63c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ae76e120aff2fac9293c64004827bdc14b5c63c/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbb70d916f08e880c7f0ca576f7f56ea7a40ddc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbb70d916f08e880c7f0ca576f7f56ea7a40ddc1", "html_url": "https://github.com/rust-lang/rust/commit/fbb70d916f08e880c7f0ca576f7f56ea7a40ddc1"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "1e8acf53facb02b7ff6d52fac484ccfb605e9cf1", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae76e120aff2fac9293c64004827bdc14b5c63c/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ae76e120aff2fac9293c64004827bdc14b5c63c/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=2ae76e120aff2fac9293c64004827bdc14b5c63c", "patch": "@@ -49,7 +49,7 @@ use syntax;\n use writer = extra::ebml::writer;\n \n // used by astencode:\n-type abbrev_map = @mut HashMap<ty::t, tyencode::ty_abbrev>;\n+type abbrev_map = @RefCell<HashMap<ty::t, tyencode::ty_abbrev>>;\n \n pub type encode_inlined_item<'a> = 'a |ecx: &EncodeContext,\n                                              ebml_w: &mut writer::Encoder,\n@@ -1774,7 +1774,7 @@ pub fn encode_metadata(parms: EncodeParams, crate: &Crate) -> ~[u8] {\n         non_inlineable_statics,\n         ..\n     } = parms;\n-    let type_abbrevs = @mut HashMap::new();\n+    let type_abbrevs = @RefCell::new(HashMap::new());\n     let stats = @mut stats;\n     let ecx = EncodeContext {\n         diag: diag,"}, {"sha": "06d74055af40cdc150c921de0ece3eca37a7073a", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2ae76e120aff2fac9293c64004827bdc14b5c63c/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ae76e120aff2fac9293c64004827bdc14b5c63c/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=2ae76e120aff2fac9293c64004827bdc14b5c63c", "patch": "@@ -10,6 +10,7 @@\n \n // Type encoding\n \n+use std::cell::RefCell;\n use std::hashmap::HashMap;\n use std::io;\n use std::io::{Decorator, Writer, Seek};\n@@ -50,7 +51,7 @@ pub struct ty_abbrev {\n \n pub enum abbrev_ctxt {\n     ac_no_abbrevs,\n-    ac_use_abbrevs(@mut HashMap<ty::t, ty_abbrev>),\n+    ac_use_abbrevs(@RefCell<HashMap<ty::t, ty_abbrev>>),\n }\n \n fn mywrite(w: &mut MemWriter, fmt: &fmt::Arguments) {\n@@ -83,9 +84,12 @@ pub fn enc_ty(w: &mut MemWriter, cx: @ctxt, t: ty::t) {\n           w.write(result_str.as_bytes());\n       }\n       ac_use_abbrevs(abbrevs) => {\n-          match abbrevs.find(&t) {\n-              Some(a) => { w.write(a.s.as_bytes()); return; }\n-              None => {}\n+          {\n+              let mut abbrevs = abbrevs.borrow_mut();\n+              match abbrevs.get().find(&t) {\n+                  Some(a) => { w.write(a.s.as_bytes()); return; }\n+                  None => {}\n+              }\n           }\n           let pos = w.tell();\n           enc_sty(w, cx, &ty::get(t).sty);\n@@ -104,7 +108,10 @@ pub fn enc_ty(w: &mut MemWriter, cx: @ctxt, t: ty::t) {\n               let a = ty_abbrev { pos: pos as uint,\n                                   len: len as uint,\n                                   s: s };\n-              abbrevs.insert(t, a);\n+              {\n+                  let mut abbrevs = abbrevs.borrow_mut();\n+                  abbrevs.get().insert(t, a);\n+              }\n           }\n           return;\n       }"}]}