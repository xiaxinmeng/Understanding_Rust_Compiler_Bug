{"sha": "2c7d32b4f487d5712d8520d97434aa9616ad7267", "node_id": "C_kwDOAAsO6NoAKDJjN2QzMmI0ZjQ4N2Q1NzEyZDg1MjBkOTc0MzRhYTk2MTZhZDcyNjc", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-11-19T21:11:00Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-11-19T21:16:42Z"}, "message": "Use `type_ascribe!` in many UI tests\n\nUse it in all UI tests that are about the semantics and not the syntax\nof type ascription.", "tree": {"sha": "737c355f09616bd6b7aeeec1627288e5a5637e94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/737c355f09616bd6b7aeeec1627288e5a5637e94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c7d32b4f487d5712d8520d97434aa9616ad7267", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAgbSfWKRQb2tiqhuHtakDJeupmrF\nChDbM0msU+PXaBOk8AAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQDB+cjJlJc6VBUTCaEkqHydIU2h2qMq6f5pxoWr0JzwpuwPldvMUTK1h6eejE9Q6Xf\nkoIBaALuZkjFMeqJQLzQo=\n-----END SSH SIGNATURE-----", "payload": "tree 737c355f09616bd6b7aeeec1627288e5a5637e94\nparent 6ee0dd97e3c5b353f4798b43bb956b9c9ccb5d64\nauthor Nilstrieb <48135649+Nilstrieb@users.noreply.github.com> 1668892260 +0100\ncommitter Nilstrieb <48135649+Nilstrieb@users.noreply.github.com> 1668892602 +0100\n\nUse `type_ascribe!` in many UI tests\n\nUse it in all UI tests that are about the semantics and not the syntax\nof type ascription.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c7d32b4f487d5712d8520d97434aa9616ad7267", "html_url": "https://github.com/rust-lang/rust/commit/2c7d32b4f487d5712d8520d97434aa9616ad7267", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c7d32b4f487d5712d8520d97434aa9616ad7267/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ee0dd97e3c5b353f4798b43bb956b9c9ccb5d64", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ee0dd97e3c5b353f4798b43bb956b9c9ccb5d64", "html_url": "https://github.com/rust-lang/rust/commit/6ee0dd97e3c5b353f4798b43bb956b9c9ccb5d64"}], "stats": {"total": 422, "additions": 198, "deletions": 224}, "files": [{"sha": "b2a437fcbfb85f242f06c8eb4478ecf6aa5b1a83", "filename": "src/test/ui/associated-consts/issue-93835.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-93835.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-93835.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-93835.rs?ref=2c7d32b4f487d5712d8520d97434aa9616ad7267", "patch": "@@ -1,9 +1,11 @@\n+#![feature(type_ascription)]\n+\n fn e() {\n-    p:a<p:p<e=6>>\n-    //~^ ERROR comparison operators\n+    type_ascribe!(p, a<p:p<e=6>>);\n+    //~^ ERROR cannot find type `a` in this scope\n     //~| ERROR cannot find value\n     //~| ERROR associated const equality\n-    //~| ERROR associated const equality\n+    //~| ERROR cannot find trait `p` in this scope\n     //~| ERROR associated type bounds\n }\n "}, {"sha": "be0573a1301afb74cad09dda2c72e36dcba178e6", "filename": "src/test/ui/associated-consts/issue-93835.stderr", "status": "modified", "additions": 20, "deletions": 45, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-93835.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-93835.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-93835.stderr?ref=2c7d32b4f487d5712d8520d97434aa9616ad7267", "patch": "@@ -1,65 +1,40 @@\n-error: comparison operators cannot be chained\n-  --> $DIR/issue-93835.rs:2:8\n-   |\n-LL | fn e() {\n-   |        - while parsing this struct\n-LL |     p:a<p:p<e=6>>\n-   |        ^        ^\n-   |\n-   = help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n-   = help: or use `(...)` if you meant to specify fn arguments\n-\n error[E0425]: cannot find value `p` in this scope\n-  --> $DIR/issue-93835.rs:2:5\n-   |\n-LL |     p:a<p:p<e=6>>\n-   |     ^ not found in this scope\n-   |\n-help: you might have meant to write a `struct` literal\n-   |\n-LL ~ fn e() { SomeStruct {\n-LL |     p:a<p:p<e=6>>\n- ...\n-LL |\n-LL ~ }}\n+  --> $DIR/issue-93835.rs:4:19\n    |\n-help: maybe you meant to write a path separator here\n-   |\n-LL |     p::a<p:p<e=6>>\n-   |      ~~\n-help: maybe you meant to write an assignment here\n-   |\n-LL |     let p:a<p:p<e=6>>\n-   |     ~~~~~\n+LL |     type_ascribe!(p, a<p:p<e=6>>);\n+   |                   ^ not found in this scope\n \n-error[E0658]: associated const equality is incomplete\n-  --> $DIR/issue-93835.rs:2:13\n+error[E0412]: cannot find type `a` in this scope\n+  --> $DIR/issue-93835.rs:4:22\n    |\n-LL |     p:a<p:p<e=6>>\n-   |             ^^^\n+LL |     type_ascribe!(p, a<p:p<e=6>>);\n+   |                      ^ not found in this scope\n+\n+error[E0405]: cannot find trait `p` in this scope\n+  --> $DIR/issue-93835.rs:4:26\n    |\n-   = note: see issue #92827 <https://github.com/rust-lang/rust/issues/92827> for more information\n-   = help: add `#![feature(associated_const_equality)]` to the crate attributes to enable\n+LL |     type_ascribe!(p, a<p:p<e=6>>);\n+   |                          ^ not found in this scope\n \n error[E0658]: associated const equality is incomplete\n-  --> $DIR/issue-93835.rs:2:13\n+  --> $DIR/issue-93835.rs:4:28\n    |\n-LL |     p:a<p:p<e=6>>\n-   |             ^^^\n+LL |     type_ascribe!(p, a<p:p<e=6>>);\n+   |                            ^^^\n    |\n    = note: see issue #92827 <https://github.com/rust-lang/rust/issues/92827> for more information\n    = help: add `#![feature(associated_const_equality)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/issue-93835.rs:2:9\n+  --> $DIR/issue-93835.rs:4:24\n    |\n-LL |     p:a<p:p<e=6>>\n-   |         ^^^^^^^^\n+LL |     type_ascribe!(p, a<p:p<e=6>>);\n+   |                        ^^^^^^^^\n    |\n    = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error: aborting due to 5 previous errors\n \n-Some errors have detailed explanations: E0425, E0658.\n-For more information about an error, try `rustc --explain E0425`.\n+Some errors have detailed explanations: E0405, E0412, E0425, E0658.\n+For more information about an error, try `rustc --explain E0405`."}, {"sha": "7ce061cd388c99602a40e9b62043fc9929372abe", "filename": "src/test/ui/closures/issue-90871.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Fclosures%2Fissue-90871.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Fclosures%2Fissue-90871.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-90871.rs?ref=2c7d32b4f487d5712d8520d97434aa9616ad7267", "patch": "@@ -1,5 +1,7 @@\n+#![feature(type_ascription)]\n+\n fn main() {\n-    2: n([u8; || 1])\n+    type_ascribe!(2, n([u8; || 1]))\n     //~^ ERROR cannot find type `n` in this scope\n     //~| ERROR mismatched types\n }"}, {"sha": "a482750fbd016bf61dcb0383277d3991a8b9d10f", "filename": "src/test/ui/closures/issue-90871.stderr", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Fclosures%2Fissue-90871.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Fclosures%2Fissue-90871.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-90871.stderr?ref=2c7d32b4f487d5712d8520d97434aa9616ad7267", "patch": "@@ -1,21 +1,26 @@\n error[E0412]: cannot find type `n` in this scope\n-  --> $DIR/issue-90871.rs:2:8\n+  --> $DIR/issue-90871.rs:4:22\n    |\n-LL |     2: n([u8; || 1])\n-   |        ^ expecting a type here because of type ascription\n+LL |     type_ascribe!(2, n([u8; || 1]))\n+   |                      ^ help: a trait with a similar name exists: `Fn`\n+   |\n+  ::: $SRC_DIR/core/src/ops/function.rs:LL:COL\n+   |\n+LL | pub trait Fn<Args: Tuple>: FnMut<Args> {\n+   | -------------------------------------- similarly named trait `Fn` defined here\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-90871.rs:2:15\n+  --> $DIR/issue-90871.rs:4:29\n    |\n-LL |     2: n([u8; || 1])\n-   |               ^^^^ expected `usize`, found closure\n+LL |     type_ascribe!(2, n([u8; || 1]))\n+   |                             ^^^^ expected `usize`, found closure\n    |\n    = note: expected type `usize`\n-           found closure `[closure@$DIR/issue-90871.rs:2:15: 2:17]`\n+           found closure `[closure@$DIR/issue-90871.rs:4:29: 4:31]`\n help: use parentheses to call this closure\n    |\n-LL |     2: n([u8; (|| 1)()])\n-   |               +    +++\n+LL |     type_ascribe!(2, n([u8; (|| 1)()]))\n+   |                             +    +++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d7b11317ad5a8029067341d5874c9f48259beb1e", "filename": "src/test/ui/coercion/coerce-expect-unsized-ascribed.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.rs?ref=2c7d32b4f487d5712d8520d97434aa9616ad7267", "patch": "@@ -6,27 +6,27 @@\n use std::fmt::Debug;\n \n pub fn main() {\n-    let _ = box { [1, 2, 3] }: Box<[i32]>; //~ ERROR mismatched types\n-    let _ = box if true { [1, 2, 3] } else { [1, 3, 4] }: Box<[i32]>; //~ ERROR mismatched types\n-    let _ = box match true { true => [1, 2, 3], false => [1, 3, 4] }: Box<[i32]>;\n+    let _ = type_ascribe!(box { [1, 2, 3] }, Box<[i32]>); //~ ERROR mismatched types\n+    let _ = type_ascribe!(box if true { [1, 2, 3] } else { [1, 3, 4] }, Box<[i32]>); //~ ERROR mismatched types\n+    let _ = type_ascribe!(box match true { true => [1, 2, 3], false => [1, 3, 4] }, Box<[i32]>);\n     //~^ ERROR mismatched types\n-    let _ = box { |x| (x as u8) }: Box<dyn Fn(i32) -> _>; //~ ERROR mismatched types\n-    let _ = box if true { false } else { true }: Box<dyn Debug>; //~ ERROR mismatched types\n-    let _ = box match true { true => 'a', false => 'b' }: Box<dyn Debug>; //~ ERROR mismatched types\n+    let _ = type_ascribe!(box { |x| (x as u8) }, Box<dyn Fn(i32) -> _>); //~ ERROR mismatched types\n+    let _ = type_ascribe!(box if true { false } else { true }, Box<dyn Debug>); //~ ERROR mismatched types\n+    let _ = type_ascribe!(box match true { true => 'a', false => 'b' }, Box<dyn Debug>); //~ ERROR mismatched types\n \n-    let _ = &{ [1, 2, 3] }: &[i32]; //~ ERROR mismatched types\n-    let _ = &if true { [1, 2, 3] } else { [1, 3, 4] }: &[i32]; //~ ERROR mismatched types\n-    let _ = &match true { true => [1, 2, 3], false => [1, 3, 4] }: &[i32];\n+    let _ = type_ascribe!(&{ [1, 2, 3] }, &[i32]); //~ ERROR mismatched types\n+    let _ = type_ascribe!(&if true { [1, 2, 3] } else { [1, 3, 4] }, &[i32]); //~ ERROR mismatched types\n+    let _ = type_ascribe!(&match true { true => [1, 2, 3], false => [1, 3, 4] }, &[i32]);\n     //~^ ERROR mismatched types\n-    let _ = &{ |x| (x as u8) }: &dyn Fn(i32) -> _; //~ ERROR mismatched types\n-    let _ = &if true { false } else { true }: &dyn Debug; //~ ERROR mismatched types\n-    let _ = &match true { true => 'a', false => 'b' }: &dyn Debug; //~ ERROR mismatched types\n+    let _ = type_ascribe!(&{ |x| (x as u8) }, &dyn Fn(i32) -> _); //~ ERROR mismatched types\n+    let _ = type_ascribe!(&if true { false } else { true }, &dyn Debug); //~ ERROR mismatched types\n+    let _ = type_ascribe!(&match true { true => 'a', false => 'b' }, &dyn Debug); //~ ERROR mismatched types\n \n-    let _ = Box::new([1, 2, 3]): Box<[i32]>; //~ ERROR mismatched types\n-    let _ = Box::new(|x| (x as u8)): Box<dyn Fn(i32) -> _>; //~ ERROR mismatched types\n+    let _ = type_ascribe!(Box::new([1, 2, 3]), Box<[i32]>); //~ ERROR mismatched types\n+    let _ = type_ascribe!(Box::new(|x| (x as u8)), Box<dyn Fn(i32) -> _>); //~ ERROR mismatched types\n \n-    let _ = vec![\n+    let _ = type_ascribe!(vec![\n         Box::new(|x| (x as u8)),\n         box |x| (x as i16 as u8),\n-    ]: Vec<Box<dyn Fn(i32) -> _>>;\n+    ], Vec<Box<dyn Fn(i32) -> _>>);\n }"}, {"sha": "44968244c4d051bf5c8fa3b1f29912a6814cb023", "filename": "src/test/ui/coercion/coerce-expect-unsized-ascribed.stderr", "status": "modified", "additions": 45, "deletions": 45, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.stderr?ref=2c7d32b4f487d5712d8520d97434aa9616ad7267", "patch": "@@ -1,128 +1,128 @@\n error[E0308]: mismatched types\n-  --> $DIR/coerce-expect-unsized-ascribed.rs:9:13\n+  --> $DIR/coerce-expect-unsized-ascribed.rs:9:27\n    |\n-LL |     let _ = box { [1, 2, 3] }: Box<[i32]>;\n-   |             ^^^^^^^^^^^^^^^^^ expected slice `[i32]`, found array `[i32; 3]`\n+LL |     let _ = type_ascribe!(box { [1, 2, 3] }, Box<[i32]>);\n+   |                           ^^^^^^^^^^^^^^^^^ expected slice `[i32]`, found array `[i32; 3]`\n    |\n    = note: expected struct `Box<[i32]>`\n               found struct `Box<[i32; 3]>`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-expect-unsized-ascribed.rs:10:13\n+  --> $DIR/coerce-expect-unsized-ascribed.rs:10:27\n    |\n-LL |     let _ = box if true { [1, 2, 3] } else { [1, 3, 4] }: Box<[i32]>;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected slice `[i32]`, found array `[i32; 3]`\n+LL |     let _ = type_ascribe!(box if true { [1, 2, 3] } else { [1, 3, 4] }, Box<[i32]>);\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected slice `[i32]`, found array `[i32; 3]`\n    |\n    = note: expected struct `Box<[i32]>`\n               found struct `Box<[i32; 3]>`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-expect-unsized-ascribed.rs:11:13\n+  --> $DIR/coerce-expect-unsized-ascribed.rs:11:27\n    |\n-LL |     let _ = box match true { true => [1, 2, 3], false => [1, 3, 4] }: Box<[i32]>;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected slice `[i32]`, found array `[i32; 3]`\n+LL |     let _ = type_ascribe!(box match true { true => [1, 2, 3], false => [1, 3, 4] }, Box<[i32]>);\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected slice `[i32]`, found array `[i32; 3]`\n    |\n    = note: expected struct `Box<[i32]>`\n               found struct `Box<[i32; 3]>`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-expect-unsized-ascribed.rs:13:13\n+  --> $DIR/coerce-expect-unsized-ascribed.rs:13:27\n    |\n-LL |     let _ = box { |x| (x as u8) }: Box<dyn Fn(i32) -> _>;\n-   |             ^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn Fn`, found closure\n+LL |     let _ = type_ascribe!(box { |x| (x as u8) }, Box<dyn Fn(i32) -> _>);\n+   |                           ^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn Fn`, found closure\n    |\n    = note: expected struct `Box<dyn Fn(i32) -> u8>`\n-              found struct `Box<[closure@$DIR/coerce-expect-unsized-ascribed.rs:13:19: 13:22]>`\n+              found struct `Box<[closure@$DIR/coerce-expect-unsized-ascribed.rs:13:33: 13:36]>`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-expect-unsized-ascribed.rs:14:13\n+  --> $DIR/coerce-expect-unsized-ascribed.rs:14:27\n    |\n-LL |     let _ = box if true { false } else { true }: Box<dyn Debug>;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn Debug`, found `bool`\n+LL |     let _ = type_ascribe!(box if true { false } else { true }, Box<dyn Debug>);\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn Debug`, found `bool`\n    |\n    = note: expected struct `Box<dyn Debug>`\n               found struct `Box<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-expect-unsized-ascribed.rs:15:13\n+  --> $DIR/coerce-expect-unsized-ascribed.rs:15:27\n    |\n-LL |     let _ = box match true { true => 'a', false => 'b' }: Box<dyn Debug>;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn Debug`, found `char`\n+LL |     let _ = type_ascribe!(box match true { true => 'a', false => 'b' }, Box<dyn Debug>);\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn Debug`, found `char`\n    |\n    = note: expected struct `Box<dyn Debug>`\n               found struct `Box<char>`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-expect-unsized-ascribed.rs:17:13\n+  --> $DIR/coerce-expect-unsized-ascribed.rs:17:27\n    |\n-LL |     let _ = &{ [1, 2, 3] }: &[i32];\n-   |             ^^^^^^^^^^^^^^ expected slice `[i32]`, found array `[i32; 3]`\n+LL |     let _ = type_ascribe!(&{ [1, 2, 3] }, &[i32]);\n+   |                           ^^^^^^^^^^^^^^ expected slice `[i32]`, found array `[i32; 3]`\n    |\n    = note: expected reference `&[i32]`\n               found reference `&[i32; 3]`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-expect-unsized-ascribed.rs:18:13\n+  --> $DIR/coerce-expect-unsized-ascribed.rs:18:27\n    |\n-LL |     let _ = &if true { [1, 2, 3] } else { [1, 3, 4] }: &[i32];\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected slice `[i32]`, found array `[i32; 3]`\n+LL |     let _ = type_ascribe!(&if true { [1, 2, 3] } else { [1, 3, 4] }, &[i32]);\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected slice `[i32]`, found array `[i32; 3]`\n    |\n    = note: expected reference `&[i32]`\n               found reference `&[i32; 3]`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-expect-unsized-ascribed.rs:19:13\n+  --> $DIR/coerce-expect-unsized-ascribed.rs:19:27\n    |\n-LL |     let _ = &match true { true => [1, 2, 3], false => [1, 3, 4] }: &[i32];\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected slice `[i32]`, found array `[i32; 3]`\n+LL |     let _ = type_ascribe!(&match true { true => [1, 2, 3], false => [1, 3, 4] }, &[i32]);\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected slice `[i32]`, found array `[i32; 3]`\n    |\n    = note: expected reference `&[i32]`\n               found reference `&[i32; 3]`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-expect-unsized-ascribed.rs:21:13\n+  --> $DIR/coerce-expect-unsized-ascribed.rs:21:27\n    |\n-LL |     let _ = &{ |x| (x as u8) }: &dyn Fn(i32) -> _;\n-   |             ^^^^^^^^^^^^^^^^^^ expected trait object `dyn Fn`, found closure\n+LL |     let _ = type_ascribe!(&{ |x| (x as u8) }, &dyn Fn(i32) -> _);\n+   |                           ^^^^^^^^^^^^^^^^^^ expected trait object `dyn Fn`, found closure\n    |\n    = note: expected reference `&dyn Fn(i32) -> u8`\n-              found reference `&[closure@$DIR/coerce-expect-unsized-ascribed.rs:21:16: 21:19]`\n+              found reference `&[closure@$DIR/coerce-expect-unsized-ascribed.rs:21:30: 21:33]`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-expect-unsized-ascribed.rs:22:13\n+  --> $DIR/coerce-expect-unsized-ascribed.rs:22:27\n    |\n-LL |     let _ = &if true { false } else { true }: &dyn Debug;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn Debug`, found `bool`\n+LL |     let _ = type_ascribe!(&if true { false } else { true }, &dyn Debug);\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn Debug`, found `bool`\n    |\n    = note: expected reference `&dyn Debug`\n               found reference `&bool`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-expect-unsized-ascribed.rs:23:13\n+  --> $DIR/coerce-expect-unsized-ascribed.rs:23:27\n    |\n-LL |     let _ = &match true { true => 'a', false => 'b' }: &dyn Debug;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn Debug`, found `char`\n+LL |     let _ = type_ascribe!(&match true { true => 'a', false => 'b' }, &dyn Debug);\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn Debug`, found `char`\n    |\n    = note: expected reference `&dyn Debug`\n               found reference `&char`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-expect-unsized-ascribed.rs:25:13\n+  --> $DIR/coerce-expect-unsized-ascribed.rs:25:27\n    |\n-LL |     let _ = Box::new([1, 2, 3]): Box<[i32]>;\n-   |             ^^^^^^^^^^^^^^^^^^^ expected slice `[i32]`, found array `[i32; 3]`\n+LL |     let _ = type_ascribe!(Box::new([1, 2, 3]), Box<[i32]>);\n+   |                           ^^^^^^^^^^^^^^^^^^^ expected slice `[i32]`, found array `[i32; 3]`\n    |\n    = note: expected struct `Box<[i32]>`\n               found struct `Box<[i32; 3]>`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-expect-unsized-ascribed.rs:26:13\n+  --> $DIR/coerce-expect-unsized-ascribed.rs:26:27\n    |\n-LL |     let _ = Box::new(|x| (x as u8)): Box<dyn Fn(i32) -> _>;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn Fn`, found closure\n+LL |     let _ = type_ascribe!(Box::new(|x| (x as u8)), Box<dyn Fn(i32) -> _>);\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn Fn`, found closure\n    |\n    = note: expected struct `Box<dyn Fn(i32) -> u8>`\n-              found struct `Box<[closure@$DIR/coerce-expect-unsized-ascribed.rs:26:22: 26:25]>`\n+              found struct `Box<[closure@$DIR/coerce-expect-unsized-ascribed.rs:26:36: 26:39]>`\n \n error: aborting due to 14 previous errors\n "}, {"sha": "1f56f581c0270b827627b9329f84d27c9d1ae719", "filename": "src/test/ui/consts/const_in_pattern/accept_structural.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Faccept_structural.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Faccept_structural.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Faccept_structural.rs?ref=2c7d32b4f487d5712d8520d97434aa9616ad7267", "patch": "@@ -45,7 +45,7 @@ fn main() {\n     const TUPLE: (OND, OND) = (None, None);\n     match (None, None) { TUPLE => dbg!(TUPLE), _ => panic!(\"whoops\"), };\n \n-    const TYPE_ASCRIPTION: OND = None: OND;\n+    const TYPE_ASCRIPTION: OND = type_ascribe!(None, OND);\n     match None { TYPE_ASCRIPTION => dbg!(TYPE_ASCRIPTION), _ => panic!(\"whoops\"), };\n \n     const ARRAY: [OND; 2] = [None, None];"}, {"sha": "75fde0d92de17d729a9681bab9d9816020a1cd5c", "filename": "src/test/ui/consts/const_in_pattern/reject_non_structural.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_structural.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_structural.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_structural.rs?ref=2c7d32b4f487d5712d8520d97434aa9616ad7267", "patch": "@@ -53,7 +53,7 @@ fn main() {\n     match (None, Some(NoDerive)) { TUPLE => dbg!(TUPLE), _ => panic!(\"whoops\"), };\n     //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n \n-    const TYPE_ASCRIPTION: OND = Some(NoDerive): OND;\n+    const TYPE_ASCRIPTION: OND = type_ascribe!(Some(NoDerive), OND);\n     match Some(NoDerive) { TYPE_ASCRIPTION => dbg!(TYPE_ASCRIPTION), _ => panic!(\"whoops\"), };\n     //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n "}, {"sha": "2eb123b7328dafde8d7a46c39bf6dce264e4ec8f", "filename": "src/test/ui/enum/issue-67945-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Fenum%2Fissue-67945-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Fenum%2Fissue-67945-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum%2Fissue-67945-2.rs?ref=2c7d32b4f487d5712d8520d97434aa9616ad7267", "patch": "@@ -1,7 +1,7 @@\n #![feature(type_ascription)]\n \n enum Bug<S> { //~ ERROR parameter `S` is never used\n-    Var = 0: S,\n+    Var = type_ascribe!(0, S),\n     //~^ ERROR generic parameters may not be used\n }\n "}, {"sha": "63d3521afe4fb598006b35d75f70f3e34030f459", "filename": "src/test/ui/enum/issue-67945-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Fenum%2Fissue-67945-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Fenum%2Fissue-67945-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum%2Fissue-67945-2.stderr?ref=2c7d32b4f487d5712d8520d97434aa9616ad7267", "patch": "@@ -1,8 +1,8 @@\n error: generic parameters may not be used in const operations\n-  --> $DIR/issue-67945-2.rs:4:14\n+  --> $DIR/issue-67945-2.rs:4:28\n    |\n-LL |     Var = 0: S,\n-   |              ^ cannot perform const operation using `S`\n+LL |     Var = type_ascribe!(0, S),\n+   |                            ^ cannot perform const operation using `S`\n    |\n    = note: type parameters may not be used in const expressions\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions"}, {"sha": "ce3d15ac183fecd1dabc232dcfed9174d2fa1577", "filename": "src/test/ui/lint/unused/issue-88519-unused-paren.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Flint%2Funused%2Fissue-88519-unused-paren.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Flint%2Funused%2Fissue-88519-unused-paren.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Fissue-88519-unused-paren.rs?ref=2c7d32b4f487d5712d8520d97434aa9616ad7267", "patch": "@@ -51,22 +51,13 @@ mod casts {\n \n mod typeascription {\n     fn outside() -> u8 {\n-        ({ 0 }): u8\n-    }\n-    fn inside() -> u8 {\n-        ({ 0 }: u8)\n+        type_ascribe!(({ 0 }), u8)\n     }\n     fn outside_match() -> u8 {\n-        (match 0 { x => x }): u8\n-    }\n-    fn inside_match() -> u8 {\n-        (match 0 { x => x }: u8)\n+        type_ascribe!((match 0 { x => x }), u8)\n     }\n     fn outside_if() -> u8 {\n-        (if false { 0 } else { 0 }): u8\n-    }\n-    fn inside_if() -> u8 {\n-        (if false { 0 } else { 0 }: u8)\n+        type_ascribe!((if false { 0 } else { 0 }), u8)\n     }\n }\n "}, {"sha": "9e04d60198721d3dcced06f6d352ee37ea94f690", "filename": "src/test/ui/mir/mir_ascription_coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Fmir%2Fmir_ascription_coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Fmir%2Fmir_ascription_coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_ascription_coercion.rs?ref=2c7d32b4f487d5712d8520d97434aa9616ad7267", "patch": "@@ -6,5 +6,5 @@\n fn main() {\n     let x = [1, 2, 3];\n     // The RHS should coerce to &[i32]\n-    let _y : &[i32] = &x : &[i32; 3];\n+    let _y : &[i32] = type_ascribe!(&x, &[i32; 3]);\n }"}, {"sha": "95c655654eaa4e550f7d1a195a8523a3775d8011", "filename": "src/test/ui/nll/user-annotations/issue-57731-ascibed-coupled-types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-57731-ascibed-coupled-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-57731-ascibed-coupled-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-57731-ascibed-coupled-types.rs?ref=2c7d32b4f487d5712d8520d97434aa9616ad7267", "patch": "@@ -8,17 +8,17 @@ type PairCoupledTypes<T> = (T, T);\n type PairCoupledRegions<'a, T> = (&'a T, &'a T);\n \n fn uncoupled_wilds_rhs<'a>(_x: &'a u32, s: &'static u32) -> &'static u32 {\n-    let ((y, _z),) = ((s, _x),): (PairUncoupled<_>,);\n+    let ((y, _z),) = type_ascribe!(((s, _x),), (PairUncoupled<_>,));\n     y // OK\n }\n \n fn coupled_wilds_rhs<'a>(_x: &'a u32, s: &'static u32) -> &'static u32 {\n-    let ((y, _z),) = ((s, _x),): (PairCoupledTypes<_>,);\n+    let ((y, _z),) = type_ascribe!(((s, _x),), (PairCoupledTypes<_>,));\n     y //~ ERROR lifetime may not live long enough\n }\n \n fn coupled_regions_rhs<'a>(_x: &'a u32, s: &'static u32) -> &'static u32 {\n-    let ((y, _z),) = ((s, _x),): (PairCoupledRegions<_>,);\n+    let ((y, _z),) = type_ascribe!(((s, _x),), (PairCoupledRegions<_>,));\n     y //~ ERROR lifetime may not live long enough\n }\n "}, {"sha": "8601691e88ad7a0381534f66da462e6d77ff4a5c", "filename": "src/test/ui/nll/user-annotations/issue-57731-ascibed-coupled-types.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-57731-ascibed-coupled-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-57731-ascibed-coupled-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-57731-ascibed-coupled-types.stderr?ref=2c7d32b4f487d5712d8520d97434aa9616ad7267", "patch": "@@ -3,7 +3,7 @@ error: lifetime may not live long enough\n    |\n LL | fn coupled_wilds_rhs<'a>(_x: &'a u32, s: &'static u32) -> &'static u32 {\n    |                      -- lifetime `'a` defined here\n-LL |     let ((y, _z),) = ((s, _x),): (PairCoupledTypes<_>,);\n+LL |     let ((y, _z),) = type_ascribe!(((s, _x),), (PairCoupledTypes<_>,));\n LL |     y\n    |     ^ returning this value requires that `'a` must outlive `'static`\n \n@@ -12,7 +12,7 @@ error: lifetime may not live long enough\n    |\n LL | fn coupled_regions_rhs<'a>(_x: &'a u32, s: &'static u32) -> &'static u32 {\n    |                        -- lifetime `'a` defined here\n-LL |     let ((y, _z),) = ((s, _x),): (PairCoupledRegions<_>,);\n+LL |     let ((y, _z),) = type_ascribe!(((s, _x),), (PairCoupledRegions<_>,));\n LL |     y\n    |     ^ returning this value requires that `'a` must outlive `'static`\n "}, {"sha": "88d646dee7c74ab5c0a3a86784a877015f405d91", "filename": "src/test/ui/nll/user-annotations/type_ascription_static_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Ftype_ascription_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Ftype_ascription_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Ftype_ascription_static_lifetime.rs?ref=2c7d32b4f487d5712d8520d97434aa9616ad7267", "patch": "@@ -3,5 +3,5 @@\n \n fn main() {\n     let x = 22_u32;\n-    let y: &u32 = &x: &'static u32; //~ ERROR E0597\n+    let y: &u32 = type_ascribe!(&x, &'static u32); //~ ERROR E0597\n }"}, {"sha": "ccbf3c1d927c6b02e29571a8645a45b8458df656", "filename": "src/test/ui/nll/user-annotations/type_ascription_static_lifetime.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Ftype_ascription_static_lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Ftype_ascription_static_lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Ftype_ascription_static_lifetime.stderr?ref=2c7d32b4f487d5712d8520d97434aa9616ad7267", "patch": "@@ -1,10 +1,10 @@\n error[E0597]: `x` does not live long enough\n-  --> $DIR/type_ascription_static_lifetime.rs:6:19\n+  --> $DIR/type_ascription_static_lifetime.rs:6:33\n    |\n-LL |     let y: &u32 = &x: &'static u32;\n-   |                   ^^--------------\n-   |                   |\n-   |                   borrowed value does not live long enough\n+LL |     let y: &u32 = type_ascribe!(&x, &'static u32);\n+   |                   --------------^^---------------\n+   |                   |             |\n+   |                   |             borrowed value does not live long enough\n    |                   type annotation requires that `x` is borrowed for `'static`\n LL | }\n    | - `x` dropped here while still borrowed"}, {"sha": "2e075a1b9e8bb2129df4f9a58a49383832c82288", "filename": "src/test/ui/raw-ref-op/raw-ref-temp-deref.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Fraw-ref-op%2Fraw-ref-temp-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Fraw-ref-op%2Fraw-ref-temp-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fraw-ref-op%2Fraw-ref-temp-deref.rs?ref=2c7d32b4f487d5712d8520d97434aa9616ad7267", "patch": "@@ -18,7 +18,7 @@ fn main() {\n     let index_deref_ref = &raw const SLICE_REF[1];\n \n     let x = 0;\n-    let ascribe_ref = &raw const (x: i32);\n-    let ascribe_deref = &raw const (*ARRAY_REF: [i32; 2]);\n-    let ascribe_index_deref = &raw const (ARRAY_REF[0]: i32);\n+    let ascribe_ref = &raw const type_ascribe!(x, i32);\n+    let ascribe_deref = &raw const type_ascribe!(*ARRAY_REF, [i32; 2]);\n+    let ascribe_index_deref = &raw const type_ascribe!(ARRAY_REF[0], i32);\n }"}, {"sha": "10e47cb34c58db9e83c9d5d642d914b6bd90f575", "filename": "src/test/ui/raw-ref-op/raw-ref-temp.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Fraw-ref-op%2Fraw-ref-temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Fraw-ref-op%2Fraw-ref-temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fraw-ref-op%2Fraw-ref-temp.rs?ref=2c7d32b4f487d5712d8520d97434aa9616ad7267", "patch": "@@ -8,24 +8,24 @@ const PAIR: (i32, i64) = (1, 2);\n const ARRAY: [i32; 2] = [1, 2];\n \n fn main() {\n-    let ref_expr = &raw const 2;                        //~ ERROR cannot take address\n-    let mut_ref_expr = &raw mut 3;                      //~ ERROR cannot take address\n-    let ref_const = &raw const FOUR;                    //~ ERROR cannot take address\n-    let mut_ref_const = &raw mut FOUR;                  //~ ERROR cannot take address\n-\n-    let field_ref_expr = &raw const (1, 2).0;           //~ ERROR cannot take address\n-    let mut_field_ref_expr = &raw mut (1, 2).0;         //~ ERROR cannot take address\n-    let field_ref = &raw const PAIR.0;                  //~ ERROR cannot take address\n-    let mut_field_ref = &raw mut PAIR.0;                //~ ERROR cannot take address\n-\n-    let index_ref_expr = &raw const [1, 2][0];          //~ ERROR cannot take address\n-    let mut_index_ref_expr = &raw mut [1, 2][0];        //~ ERROR cannot take address\n-    let index_ref = &raw const ARRAY[0];                //~ ERROR cannot take address\n-    let mut_index_ref = &raw mut ARRAY[1];              //~ ERROR cannot take address\n-\n-    let ref_ascribe = &raw const (2: i32);              //~ ERROR cannot take address\n-    let mut_ref_ascribe = &raw mut (3: i32);            //~ ERROR cannot take address\n-\n-    let ascribe_field_ref = &raw const (PAIR.0: i32);   //~ ERROR cannot take address\n-    let ascribe_index_ref = &raw mut (ARRAY[0]: i32);   //~ ERROR cannot take address\n+    let ref_expr = &raw const 2;                                    //~ ERROR cannot take address\n+    let mut_ref_expr = &raw mut 3;                                  //~ ERROR cannot take address\n+    let ref_const = &raw const FOUR;                                //~ ERROR cannot take address\n+    let mut_ref_const = &raw mut FOUR;                              //~ ERROR cannot take address\n+\n+    let field_ref_expr = &raw const (1, 2).0;                       //~ ERROR cannot take address\n+    let mut_field_ref_expr = &raw mut (1, 2).0;                     //~ ERROR cannot take address\n+    let field_ref = &raw const PAIR.0;                              //~ ERROR cannot take address\n+    let mut_field_ref = &raw mut PAIR.0;                            //~ ERROR cannot take address\n+\n+    let index_ref_expr = &raw const [1, 2][0];                      //~ ERROR cannot take address\n+    let mut_index_ref_expr = &raw mut [1, 2][0];                    //~ ERROR cannot take address\n+    let index_ref = &raw const ARRAY[0];                            //~ ERROR cannot take address\n+    let mut_index_ref = &raw mut ARRAY[1];                          //~ ERROR cannot take address\n+\n+    let ref_ascribe = &raw const type_ascribe!(2, i32);             //~ ERROR cannot take address\n+    let mut_ref_ascribe = &raw mut type_ascribe!(3, i32);           //~ ERROR cannot take address\n+\n+    let ascribe_field_ref = &raw const type_ascribe!(PAIR.0, i32);  //~ ERROR cannot take address\n+    let ascribe_index_ref = &raw mut type_ascribe!(ARRAY[0], i32);  //~ ERROR cannot take address\n }"}, {"sha": "b96661625170f264dfc9bda36e564cc28c9c3b8d", "filename": "src/test/ui/raw-ref-op/raw-ref-temp.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Fraw-ref-op%2Fraw-ref-temp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Fraw-ref-op%2Fraw-ref-temp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fraw-ref-op%2Fraw-ref-temp.stderr?ref=2c7d32b4f487d5712d8520d97434aa9616ad7267", "patch": "@@ -73,26 +73,26 @@ LL |     let mut_index_ref = &raw mut ARRAY[1];\n error[E0745]: cannot take address of a temporary\n   --> $DIR/raw-ref-temp.rs:26:34\n    |\n-LL |     let ref_ascribe = &raw const (2: i32);\n-   |                                  ^^^^^^^^ temporary value\n+LL |     let ref_ascribe = &raw const type_ascribe!(2, i32);\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^ temporary value\n \n error[E0745]: cannot take address of a temporary\n   --> $DIR/raw-ref-temp.rs:27:36\n    |\n-LL |     let mut_ref_ascribe = &raw mut (3: i32);\n-   |                                    ^^^^^^^^ temporary value\n+LL |     let mut_ref_ascribe = &raw mut type_ascribe!(3, i32);\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^ temporary value\n \n error[E0745]: cannot take address of a temporary\n   --> $DIR/raw-ref-temp.rs:29:40\n    |\n-LL |     let ascribe_field_ref = &raw const (PAIR.0: i32);\n-   |                                        ^^^^^^^^^^^^^ temporary value\n+LL |     let ascribe_field_ref = &raw const type_ascribe!(PAIR.0, i32);\n+   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ temporary value\n \n error[E0745]: cannot take address of a temporary\n   --> $DIR/raw-ref-temp.rs:30:38\n    |\n-LL |     let ascribe_index_ref = &raw mut (ARRAY[0]: i32);\n-   |                                      ^^^^^^^^^^^^^^^ temporary value\n+LL |     let ascribe_index_ref = &raw mut type_ascribe!(ARRAY[0], i32);\n+   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ temporary value\n \n error: aborting due to 16 previous errors\n "}, {"sha": "1ceb2f85971602c13fbfac0d6551ba35f9745988", "filename": "src/test/ui/reachable/expr_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Freachable%2Fexpr_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Freachable%2Fexpr_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_type.rs?ref=2c7d32b4f487d5712d8520d97434aa9616ad7267", "patch": "@@ -6,7 +6,7 @@\n \n fn a() {\n     // the cast is unreachable:\n-    let x = {return}: !; //~ ERROR unreachable\n+    let x = type_ascribe!({return}, !); //~ ERROR unreachable\n }\n \n fn main() { }"}, {"sha": "3cb4a32e02fac4011ff916ca6831d8af431b6b9d", "filename": "src/test/ui/reachable/expr_type.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Freachable%2Fexpr_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Freachable%2Fexpr_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_type.stderr?ref=2c7d32b4f487d5712d8520d97434aa9616ad7267", "patch": "@@ -1,10 +1,10 @@\n error: unreachable expression\n   --> $DIR/expr_type.rs:9:13\n    |\n-LL |     let x = {return}: !;\n-   |             ^------^^^^\n-   |             ||\n-   |             |any code following this expression is unreachable\n+LL |     let x = type_ascribe!({return}, !);\n+   |             ^^^^^^^^^^^^^^^------^^^^^\n+   |             |              |\n+   |             |              any code following this expression is unreachable\n    |             unreachable expression\n    |\n note: the lint level is defined here"}, {"sha": "08316cdcd35ec21c619c873b5677da12868ef859", "filename": "src/test/ui/type/type-ascription-soundness.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-soundness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-soundness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-soundness.rs?ref=2c7d32b4f487d5712d8520d97434aa9616ad7267", "patch": "@@ -4,10 +4,10 @@\n \n fn main() {\n     let arr = &[1u8, 2, 3];\n-    let ref x = arr: &[u8]; //~ ERROR mismatched types\n-    let ref mut x = arr: &[u8]; //~ ERROR mismatched types\n-    match arr: &[u8] { //~ ERROR mismatched types\n+    let ref x = type_ascribe!(arr, &[u8]);      //~ ERROR mismatched types\n+    let ref mut x = type_ascribe!(arr, &[u8]);  //~ ERROR mismatched types\n+    match type_ascribe!(arr, &[u8]) {           //~ ERROR mismatched types\n         ref x => {}\n     }\n-    let _len = (arr: &[u8]).len(); //~ ERROR mismatched types\n+    let _len = type_ascribe!(arr, &[u8]).len();              //~ ERROR mismatched types\n }"}, {"sha": "522d5b2e375553319b37c8bd3873e54e4896849e", "filename": "src/test/ui/type/type-ascription-soundness.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-soundness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-soundness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-soundness.stderr?ref=2c7d32b4f487d5712d8520d97434aa9616ad7267", "patch": "@@ -1,35 +1,35 @@\n error[E0308]: mismatched types\n-  --> $DIR/type-ascription-soundness.rs:7:17\n+  --> $DIR/type-ascription-soundness.rs:7:31\n    |\n-LL |     let ref x = arr: &[u8];\n-   |                 ^^^ expected slice `[u8]`, found array `[u8; 3]`\n+LL |     let ref x = type_ascribe!(arr, &[u8]);\n+   |                               ^^^ expected slice `[u8]`, found array `[u8; 3]`\n    |\n    = note: expected reference `&[u8]`\n               found reference `&[u8; 3]`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-ascription-soundness.rs:8:21\n+  --> $DIR/type-ascription-soundness.rs:8:35\n    |\n-LL |     let ref mut x = arr: &[u8];\n-   |                     ^^^ expected slice `[u8]`, found array `[u8; 3]`\n+LL |     let ref mut x = type_ascribe!(arr, &[u8]);\n+   |                                   ^^^ expected slice `[u8]`, found array `[u8; 3]`\n    |\n    = note: expected reference `&[u8]`\n               found reference `&[u8; 3]`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-ascription-soundness.rs:9:11\n+  --> $DIR/type-ascription-soundness.rs:9:25\n    |\n-LL |     match arr: &[u8] {\n-   |           ^^^ expected slice `[u8]`, found array `[u8; 3]`\n+LL |     match type_ascribe!(arr, &[u8]) {\n+   |                         ^^^ expected slice `[u8]`, found array `[u8; 3]`\n    |\n    = note: expected reference `&[u8]`\n               found reference `&[u8; 3]`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-ascription-soundness.rs:12:17\n+  --> $DIR/type-ascription-soundness.rs:12:30\n    |\n-LL |     let _len = (arr: &[u8]).len();\n-   |                 ^^^ expected slice `[u8]`, found array `[u8; 3]`\n+LL |     let _len = type_ascribe!(arr, &[u8]).len();\n+   |                              ^^^ expected slice `[u8]`, found array `[u8; 3]`\n    |\n    = note: expected reference `&[u8]`\n               found reference `&[u8; 3]`"}, {"sha": "e4a4c89d057f2701d5494c6360c290ed938cce0a", "filename": "src/test/ui/type/type-ascription.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Ftype%2Ftype-ascription.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Ftype%2Ftype-ascription.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-ascription.rs?ref=2c7d32b4f487d5712d8520d97434aa9616ad7267", "patch": "@@ -8,32 +8,32 @@\n \n use std::mem;\n \n-const C1: u8 = 10: u8;\n-const C2: [u8; 1: usize] = [1];\n+const C1: u8 = type_ascribe!(10, u8);\n+const C2: [u8; type_ascribe!(1, usize)] = [1];\n \n struct S {\n     a: u8\n }\n \n fn main() {\n-    assert_eq!(C1.into(): i32, 10);\n+    assert_eq!(type_ascribe!(C1.into(), i32), 10);\n     assert_eq!(C2[0], 1);\n \n-    let s = S { a: 10: u8 };\n+    let s = S { a: type_ascribe!(10, u8) };\n     let arr = &[1u8, 2, 3];\n \n-    let mut v = arr.iter().cloned().collect(): Vec<_>;\n+    let mut v = type_ascribe!(arr.iter().cloned().collect(), Vec<_>);\n     v.push(4);\n     assert_eq!(v, [1, 2, 3, 4]);\n \n-    let a = 1: u8;\n-    let b = a.into(): u16;\n-    assert_eq!(v[a.into(): usize], 2);\n+    let a = type_ascribe!(1, u8);\n+    let b = type_ascribe!(a.into(), u16);\n+    assert_eq!(v[type_ascribe!(a.into(), usize)], 2);\n     assert_eq!(mem::size_of_val(&a), 1);\n     assert_eq!(mem::size_of_val(&b), 2);\n-    assert_eq!(b, 1: u16);\n+    assert_eq!(b, type_ascribe!(1, u16));\n \n     let mut v = Vec::new();\n-    v: Vec<u8> = vec![1, 2, 3]; // Place expression type ascription\n+    type_ascribe!(v, Vec<u8>) = vec![1, 2, 3]; // Place expression type ascription\n     assert_eq!(v, [1u8, 2, 3]);\n }"}, {"sha": "4e39cfab5b439b1f5656c16e5bdea02264303505", "filename": "src/test/ui/typeck/issue-91267.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Ftypeck%2Fissue-91267.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Ftypeck%2Fissue-91267.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-91267.rs?ref=2c7d32b4f487d5712d8520d97434aa9616ad7267", "patch": "@@ -1,5 +1,7 @@\n+#![feature(type_ascription)]\n+\n fn main() {\n-    0: u8<e<5>=e>\n+    type_ascribe!(0, u8<e<5>=e>)\n     //~^ ERROR: cannot find type `e` in this scope [E0412]\n     //~| ERROR: associated type bindings are not allowed here [E0229]\n     //~| ERROR: mismatched types [E0308]"}, {"sha": "72acd9c673b63a4a9e0c64a566da3f2d337cc34d", "filename": "src/test/ui/typeck/issue-91267.stderr", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Ftypeck%2Fissue-91267.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c7d32b4f487d5712d8520d97434aa9616ad7267/src%2Ftest%2Fui%2Ftypeck%2Fissue-91267.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-91267.stderr?ref=2c7d32b4f487d5712d8520d97434aa9616ad7267", "patch": "@@ -1,25 +1,22 @@\n error[E0412]: cannot find type `e` in this scope\n-  --> $DIR/issue-91267.rs:2:16\n+  --> $DIR/issue-91267.rs:4:30\n    |\n-LL |     0: u8<e<5>=e>\n-   |                ^\n-   |                |\n-   |                not found in this scope\n-   |                help: maybe you meant to write an assignment here: `let e`\n+LL |     type_ascribe!(0, u8<e<5>=e>)\n+   |                              ^ not found in this scope\n \n error[E0229]: associated type bindings are not allowed here\n-  --> $DIR/issue-91267.rs:2:11\n+  --> $DIR/issue-91267.rs:4:25\n    |\n-LL |     0: u8<e<5>=e>\n-   |           ^^^^^^ associated type not allowed here\n+LL |     type_ascribe!(0, u8<e<5>=e>)\n+   |                         ^^^^^^ associated type not allowed here\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-91267.rs:2:5\n+  --> $DIR/issue-91267.rs:4:5\n    |\n LL | fn main() {\n    |           - expected `()` because of default return type\n-LL |     0: u8<e<5>=e>\n-   |     ^^^^^^^^^^^^^ expected `()`, found `u8`\n+LL |     type_ascribe!(0, u8<e<5>=e>)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found `u8`\n \n error: aborting due to 3 previous errors\n "}]}