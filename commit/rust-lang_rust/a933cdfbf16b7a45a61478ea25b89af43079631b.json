{"sha": "a933cdfbf16b7a45a61478ea25b89af43079631b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5MzNjZGZiZjE2YjdhNDVhNjE0NzhlYTI1Yjg5YWY0MzA3OTYzMWI=", "commit": {"author": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2012-12-24T14:56:04Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-01-03T23:53:06Z"}, "message": "clean up condition module:\n* use Drop trait in Guard\n* fix formatting\n* remove bare function in Condition.raise_default\n* use moved types instead of borrowed pointers in Condition.{raise,trap}\n* import common functions", "tree": {"sha": "7be293339b07e6a16206e075c618fc5b2fe88a51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7be293339b07e6a16206e075c618fc5b2fe88a51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a933cdfbf16b7a45a61478ea25b89af43079631b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a933cdfbf16b7a45a61478ea25b89af43079631b", "html_url": "https://github.com/rust-lang/rust/commit/a933cdfbf16b7a45a61478ea25b89af43079631b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a933cdfbf16b7a45a61478ea25b89af43079631b/comments", "author": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e2a59dc5d9b5fd95ff07f4bf91a4a6b5f77949f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e2a59dc5d9b5fd95ff07f4bf91a4a6b5f77949f", "html_url": "https://github.com/rust-lang/rust/commit/9e2a59dc5d9b5fd95ff07f4bf91a4a6b5f77949f"}], "stats": {"total": 85, "additions": 35, "deletions": 50}, "files": [{"sha": "9ea48a45d3c3370c18a99a26eaedbdece8a16b4a", "filename": "src/libcore/condition.rs", "status": "modified", "additions": 35, "deletions": 50, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/a933cdfbf16b7a45a61478ea25b89af43079631b/src%2Flibcore%2Fcondition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a933cdfbf16b7a45a61478ea25b89af43079631b/src%2Flibcore%2Fcondition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcondition.rs?ref=a933cdfbf16b7a45a61478ea25b89af43079631b", "patch": "@@ -9,119 +9,109 @@\n // except according to those terms.\n \n use task;\n+use task::local_data::{local_data_pop, local_data_set};\n \n // helper for transmutation, shown below.\n-type RustClosure = (int,int);\n+type RustClosure = (int, int);\n+\n pub struct Handler<T, U> {\n     handle: RustClosure,\n     prev: Option<@Handler<T, U>>,\n }\n \n pub struct Condition<T, U> {\n     name: &static/str,\n-    key: task::local_data::LocalDataKey<Handler<T,U>>\n+    key: task::local_data::LocalDataKey<Handler<T, U>>\n }\n \n-impl<T, U>  Condition<T,U> {\n-\n-    fn trap(&self, h: &self/fn(&T) ->U) -> Trap/&self<T,U> {\n+impl<T, U> Condition<T, U> {\n+    fn trap(&self, h: &self/fn(T) -> U) -> Trap/&self<T, U> {\n         unsafe {\n             let p : *RustClosure = ::cast::transmute(&h);\n             let prev = task::local_data::local_data_get(self.key);\n-            let h = @Handler{handle: *p, prev: prev};\n-            move Trap { cond: self, handler: h }\n+            let h = @Handler { handle: *p, prev: prev };\n+            Trap { cond: self, handler: h }\n         }\n     }\n \n-    fn raise(t:&T) -> U  {\n-        do self.raise_default(t) {\n-            fail fmt!(\"Unhandled condition: %s: %?\",\n-                      self.name,\n-                      t);\n-        }\n+    fn raise(t: T) -> U {\n+        let msg = fmt!(\"Unhandled condition: %s: %?\", self.name, t);\n+        self.raise_default(t, || fail msg)\n     }\n \n-    fn raise_default(t:&T, default: fn() -> U) -> U {\n+    fn raise_default(t: T, default: &fn() -> U) -> U {\n         unsafe {\n-            match task::local_data::local_data_pop(self.key) {\n+            match local_data_pop(self.key) {\n                 None => {\n                     debug!(\"Condition.raise: found no handler\");\n                     default()\n                 }\n-\n                 Some(handler) => {\n                     debug!(\"Condition.raise: found handler\");\n                     match handler.prev {\n-                        None => (),\n-                        Some(hp) =>\n-                        task::local_data::local_data_set(self.key, hp)\n+                        None => {}\n+                        Some(hp) => local_data_set(self.key, hp)\n                     }\n-                    let handle : &fn(&T) -> U =\n+                    let handle : &fn(T) -> U =\n                         ::cast::transmute(handler.handle);\n                     let u = handle(t);\n-                    task::local_data::local_data_set(self.key,\n-                                                     handler);\n-                    move u\n+                    local_data_set(self.key, handler);\n+                    u\n                 }\n             }\n         }\n     }\n }\n \n-\n-\n struct Trap<T, U> {\n-    cond: &Condition<T,U>,\n+    cond: &Condition<T, U>,\n     handler: @Handler<T, U>\n }\n \n-impl<T, U> Trap<T,U> {\n+impl<T, U> Trap<T, U> {\n     fn in<V>(&self, inner: &self/fn() -> V) -> V {\n         unsafe {\n             let _g = Guard { cond: self.cond };\n             debug!(\"Trap: pushing handler to TLS\");\n-            task::local_data::local_data_set(self.cond.key, self.handler);\n+            local_data_set(self.cond.key, self.handler);\n             inner()\n         }\n     }\n }\n \n struct Guard<T, U> {\n-    cond: &Condition<T,U>,\n-    drop {\n+    cond: &Condition<T, U>\n+}\n+\n+impl<T, U> Guard<T, U> : Drop {\n+    fn finalize(&self) {\n         unsafe {\n             debug!(\"Guard: popping handler from TLS\");\n-            let curr = task::local_data::local_data_pop(self.cond.key);\n+            let curr = local_data_pop(self.cond.key);\n             match curr {\n-                None => (),\n-                Some(h) =>\n-                match h.prev {\n-                    None => (),\n-                    Some(hp) => {\n-                        task::local_data::local_data_set(self.cond.key, hp)\n-                    }\n+                None => {}\n+                Some(h) => match h.prev {\n+                    None => {}\n+                    Some(hp) => local_data_set(self.cond.key, hp)\n                 }\n             }\n         }\n     }\n }\n \n-\n #[cfg(test)]\n mod test {\n-\n     condition! {\n         sadness: int -> int;\n     }\n \n     fn trouble(i: int) {\n-        debug!(\"trouble: raising conition\");\n-        let j = sadness::cond.raise(&i);\n+        debug!(\"trouble: raising condition\");\n+        let j = sadness::cond.raise(i);\n         debug!(\"trouble: handler recovered with %d\", j);\n     }\n \n     fn nested_trap_test_inner() {\n-\n         let mut inner_trapped = false;\n \n         do sadness::cond.trap(|_j| {\n@@ -138,7 +128,6 @@ mod test {\n \n     #[test]\n     fn nested_trap_test_outer() {\n-\n         let mut outer_trapped = false;\n \n         do sadness::cond.trap(|_j| {\n@@ -154,15 +143,14 @@ mod test {\n     }\n \n     fn nested_reraise_trap_test_inner() {\n-\n         let mut inner_trapped = false;\n \n         do sadness::cond.trap(|_j| {\n             debug!(\"nested_reraise_trap_test_inner: in handler\");\n             inner_trapped = true;\n             let i = 10;\n             debug!(\"nested_reraise_trap_test_inner: handler re-raising\");\n-            sadness::cond.raise(&i)\n+            sadness::cond.raise(i)\n         }).in {\n             debug!(\"nested_reraise_trap_test_inner: in protected block\");\n             trouble(1);\n@@ -173,7 +161,6 @@ mod test {\n \n     #[test]\n     fn nested_reraise_trap_test_outer() {\n-\n         let mut outer_trapped = false;\n \n         do sadness::cond.trap(|_j| {\n@@ -189,18 +176,16 @@ mod test {\n \n     #[test]\n     fn test_default() {\n-\n         let mut trapped = false;\n \n         do sadness::cond.trap(|j| {\n             debug!(\"test_default: in handler\");\n-            sadness::cond.raise_default(j, || {trapped=true; 5})\n+            sadness::cond.raise_default(j, || { trapped=true; 5 })\n         }).in {\n             debug!(\"test_default: in protected block\");\n             trouble(1);\n         }\n \n         assert trapped;\n     }\n-\n }"}]}