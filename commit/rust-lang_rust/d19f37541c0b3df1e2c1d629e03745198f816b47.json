{"sha": "d19f37541c0b3df1e2c1d629e03745198f816b47", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxOWYzNzU0MWMwYjNkZjFlMmMxZDYyOWUwMzc0NTE5OGY4MTZiNDc=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-02-09T01:39:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-09T01:39:53Z"}, "message": "Rollup merge of #81826 - tesuji:inline-box-zeros, r=Amanieu\n\nPrefer match over combinators to make some Box methods inlineable\n\nHopefully this patch would make two snippets generated identical code: <https://rust.godbolt.org/z/fjrj4E>.", "tree": {"sha": "54235b14f08232dbd00db9eaba361d13167125a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54235b14f08232dbd00db9eaba361d13167125a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d19f37541c0b3df1e2c1d629e03745198f816b47", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgIefqCRBK7hj4Ov3rIwAAdHIIABdN/3pPcpt6tBY3eOBrwyBi\n9DCEyCOjynpbUqLGWqAFQ4lHDW7FFCnacNmpd0b8PPXp2UkZbGSLQtF31djS3lGq\nNPzTZGfMFD6P3HnhXolmzMCEwh6wQ+g/vcZhIqHn5Lkvzs3zSCQ0ltHYaDk4omxp\nA8VgioshQ73HDoCzRDGgpQS0M6rBB2JTB1VTKX2SWr+YJr5r9eVqZWwXzpjRdu0x\n7iEmzpkyvfU4TBuGRmLSwQoUylJDsJNZ60q0o0xsYS0gd/bZ1pHm9lt4+s1CBXGI\nmk7K6dD7DselfaEqkLBHJTX4Uls+Mb430ZYXhMheC+yXgQg3+A/y3vql9Lau1oY=\n=CM+q\n-----END PGP SIGNATURE-----\n", "payload": "tree 54235b14f08232dbd00db9eaba361d13167125a1\nparent 52bc54efff7b9b08310201585b50d5a60b499efd\nparent fb4e734f99b8efc77634dc96424cafb956e4596f\nauthor Dylan DPC <dylan.dpc@gmail.com> 1612834793 +0100\ncommitter GitHub <noreply@github.com> 1612834793 +0100\n\nRollup merge of #81826 - tesuji:inline-box-zeros, r=Amanieu\n\nPrefer match over combinators to make some Box methods inlineable\n\nHopefully this patch would make two snippets generated identical code: <https://rust.godbolt.org/z/fjrj4E>.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d19f37541c0b3df1e2c1d629e03745198f816b47", "html_url": "https://github.com/rust-lang/rust/commit/d19f37541c0b3df1e2c1d629e03745198f816b47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d19f37541c0b3df1e2c1d629e03745198f816b47/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52bc54efff7b9b08310201585b50d5a60b499efd", "url": "https://api.github.com/repos/rust-lang/rust/commits/52bc54efff7b9b08310201585b50d5a60b499efd", "html_url": "https://github.com/rust-lang/rust/commit/52bc54efff7b9b08310201585b50d5a60b499efd"}, {"sha": "fb4e734f99b8efc77634dc96424cafb956e4596f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb4e734f99b8efc77634dc96424cafb956e4596f", "html_url": "https://github.com/rust-lang/rust/commit/fb4e734f99b8efc77634dc96424cafb956e4596f"}], "stats": {"total": 14, "additions": 12, "deletions": 2}, "files": [{"sha": "e87303749b423376fe514971d1f2efa432017cdc", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d19f37541c0b3df1e2c1d629e03745198f816b47/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d19f37541c0b3df1e2c1d629e03745198f816b47/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=d19f37541c0b3df1e2c1d629e03745198f816b47", "patch": "@@ -390,7 +390,12 @@ impl<T, A: Allocator> Box<T, A> {\n     // #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     pub fn new_uninit_in(alloc: A) -> Box<mem::MaybeUninit<T>, A> {\n         let layout = Layout::new::<mem::MaybeUninit<T>>();\n-        Box::try_new_uninit_in(alloc).unwrap_or_else(|_| handle_alloc_error(layout))\n+        // NOTE: Prefer match over unwrap_or_else since closure sometimes not inlineable.\n+        // That would make code size bigger.\n+        match Box::try_new_uninit_in(alloc) {\n+            Ok(m) => m,\n+            Err(_) => handle_alloc_error(layout),\n+        }\n     }\n \n     /// Constructs a new box with uninitialized contents in the provided allocator,\n@@ -447,7 +452,12 @@ impl<T, A: Allocator> Box<T, A> {\n     // #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     pub fn new_zeroed_in(alloc: A) -> Box<mem::MaybeUninit<T>, A> {\n         let layout = Layout::new::<mem::MaybeUninit<T>>();\n-        Box::try_new_zeroed_in(alloc).unwrap_or_else(|_| handle_alloc_error(layout))\n+        // NOTE: Prefer match over unwrap_or_else since closure sometimes not inlineable.\n+        // That would make code size bigger.\n+        match Box::try_new_zeroed_in(alloc) {\n+            Ok(m) => m,\n+            Err(_) => handle_alloc_error(layout),\n+        }\n     }\n \n     /// Constructs a new `Box` with uninitialized contents, with the memory"}]}