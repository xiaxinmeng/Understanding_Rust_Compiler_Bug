{"sha": "189c0085d19c2cbd8e3b6ca8274e2cab60aad515", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4OWMwMDg1ZDE5YzJjYmQ4ZTNiNmNhODI3NGUyY2FiNjBhYWQ1MTU=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-03-07T02:10:52Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-03-12T07:02:32Z"}, "message": "alpha-rename .ident to .name in Lifetime, including in rustdoc.", "tree": {"sha": "4fa2100ae551ed65fbf4c138dd9c53253229f559", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fa2100ae551ed65fbf4c138dd9c53253229f559"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/189c0085d19c2cbd8e3b6ca8274e2cab60aad515", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/189c0085d19c2cbd8e3b6ca8274e2cab60aad515", "html_url": "https://github.com/rust-lang/rust/commit/189c0085d19c2cbd8e3b6ca8274e2cab60aad515", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/189c0085d19c2cbd8e3b6ca8274e2cab60aad515/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "460ca4f037e4896f103889b694dd2971e3141eac", "url": "https://api.github.com/repos/rust-lang/rust/commits/460ca4f037e4896f103889b694dd2971e3141eac", "html_url": "https://github.com/rust-lang/rust/commit/460ca4f037e4896f103889b694dd2971e3141eac"}], "stats": {"total": 58, "additions": 29, "deletions": 29}, "files": [{"sha": "784b0cdab3d0a441724ea8fbade8e703409e9c52", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/189c0085d19c2cbd8e3b6ca8274e2cab60aad515/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/189c0085d19c2cbd8e3b6ca8274e2cab60aad515/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=189c0085d19c2cbd8e3b6ca8274e2cab60aad515", "patch": "@@ -145,7 +145,7 @@ impl<'a> Visitor<&'a ScopeChain<'a>> for LifetimeContext {\n     fn visit_lifetime_ref(&mut self,\n                           lifetime_ref: &ast::Lifetime,\n                           scope: &'a ScopeChain<'a>) {\n-        if lifetime_ref.ident == special_idents::statik.name {\n+        if lifetime_ref.name == special_idents::statik.name {\n             self.insert_lifetime(lifetime_ref, ast::DefStaticRegion);\n             return;\n         }\n@@ -262,7 +262,7 @@ impl LifetimeContext {\n         self.sess.span_err(\n             lifetime_ref.span,\n             format!(\"use of undeclared lifetime name `'{}`\",\n-                    token::get_name(lifetime_ref.ident)));\n+                    token::get_name(lifetime_ref.name)));\n     }\n \n     fn check_lifetime_names(&self, lifetimes: &OptVec<ast::Lifetime>) {\n@@ -271,23 +271,23 @@ impl LifetimeContext {\n \n             let special_idents = [special_idents::statik];\n             for lifetime in lifetimes.iter() {\n-                if special_idents.iter().any(|&i| i.name == lifetime.ident) {\n+                if special_idents.iter().any(|&i| i.name == lifetime.name) {\n                     self.sess.span_err(\n                         lifetime.span,\n                         format!(\"illegal lifetime parameter name: `{}`\",\n-                                token::get_name(lifetime.ident)));\n+                                token::get_name(lifetime.name)));\n                 }\n             }\n \n             for j in range(i + 1, lifetimes.len()) {\n                 let lifetime_j = lifetimes.get(j);\n \n-                if lifetime_i.ident == lifetime_j.ident {\n+                if lifetime_i.name == lifetime_j.name {\n                     self.sess.span_err(\n                         lifetime_j.span,\n                         format!(\"lifetime name `'{}` declared twice in \\\n                                 the same scope\",\n-                                token::get_name(lifetime_j.ident)));\n+                                token::get_name(lifetime_j.name)));\n                 }\n             }\n         }\n@@ -315,7 +315,7 @@ fn search_lifetimes(lifetimes: &OptVec<ast::Lifetime>,\n                     lifetime_ref: &ast::Lifetime)\n                     -> Option<(uint, ast::NodeId)> {\n     for (i, lifetime_decl) in lifetimes.iter().enumerate() {\n-        if lifetime_decl.ident == lifetime_ref.ident {\n+        if lifetime_decl.name == lifetime_ref.name {\n             return Some((i, lifetime_decl.id));\n         }\n     }"}, {"sha": "085a8a4efeb5c9ecdc3be7cec74c6db2834c8a84", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/189c0085d19c2cbd8e3b6ca8274e2cab60aad515/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/189c0085d19c2cbd8e3b6ca8274e2cab60aad515/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=189c0085d19c2cbd8e3b6ca8274e2cab60aad515", "patch": "@@ -92,18 +92,18 @@ pub fn ast_region_to_region(tcx: ty::ctxt, lifetime: &ast::Lifetime)\n \n         Some(&ast::DefLateBoundRegion(binder_id, _, id)) => {\n             ty::ReLateBound(binder_id, ty::BrNamed(ast_util::local_def(id),\n-                                                   lifetime.ident))\n+                                                   lifetime.name))\n         }\n \n         Some(&ast::DefEarlyBoundRegion(index, id)) => {\n-            ty::ReEarlyBound(id, index, lifetime.ident)\n+            ty::ReEarlyBound(id, index, lifetime.name)\n         }\n \n         Some(&ast::DefFreeRegion(scope_id, id)) => {\n             ty::ReFree(ty::FreeRegion {\n                     scope_id: scope_id,\n                     bound_region: ty::BrNamed(ast_util::local_def(id),\n-                                              lifetime.ident)\n+                                              lifetime.name)\n                 })\n         }\n     };"}, {"sha": "82246899fb77c3ac5ee8aff0c4e1e80af71fb277", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/189c0085d19c2cbd8e3b6ca8274e2cab60aad515/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/189c0085d19c2cbd8e3b6ca8274e2cab60aad515/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=189c0085d19c2cbd8e3b6ca8274e2cab60aad515", "patch": "@@ -966,7 +966,7 @@ pub fn ty_generics(ccx: &CrateCtxt,\n                    base_index: uint) -> ty::Generics {\n     return ty::Generics {\n         region_param_defs: Rc::new(generics.lifetimes.iter().map(|l| {\n-                ty::RegionParameterDef { name: l.ident,\n+                ty::RegionParameterDef { name: l.name,\n                                          def_id: local_def(l.id) }\n             }).collect()),\n         type_param_defs: Rc::new(generics.ty_params.mapi_to_vec(|offset, param| {"}, {"sha": "c6765bd305acbf81c8a7a45587fc2ee12f7e6a5c", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/189c0085d19c2cbd8e3b6ca8274e2cab60aad515/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/189c0085d19c2cbd8e3b6ca8274e2cab60aad515/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=189c0085d19c2cbd8e3b6ca8274e2cab60aad515", "patch": "@@ -161,8 +161,8 @@ pub fn bound_region_to_str(cx: ctxt,\n     }\n \n     match br {\n-        BrNamed(_, ident)   => format!(\"{}'{}{}\", prefix,\n-                                       token::get_name(ident), space_str),\n+        BrNamed(_, name)   => format!(\"{}'{}{}\", prefix,\n+                                      token::get_name(name), space_str),\n         BrAnon(_)           => prefix.to_str(),\n         BrFresh(_)          => prefix.to_str(),\n     }\n@@ -224,7 +224,7 @@ pub fn region_to_str(cx: ctxt, prefix: &str, space: bool, region: Region) -> ~st\n     // `explain_region()` or `note_and_explain_region()`.\n     match region {\n         ty::ReScope(_) => prefix.to_str(),\n-        ty::ReEarlyBound(_, _, ident) => token::get_name(ident).get().to_str(),\n+        ty::ReEarlyBound(_, _, name) => token::get_name(name).get().to_str(),\n         ty::ReLateBound(_, br) => bound_region_to_str(cx, prefix, space, br),\n         ty::ReFree(ref fr) => bound_region_to_str(cx, prefix, space, fr.bound_region),\n         ty::ReInfer(ReSkolemized(_, br)) => {\n@@ -720,9 +720,9 @@ impl Repr for ty::BoundRegion {\n     fn repr(&self, tcx: ctxt) -> ~str {\n         match *self {\n             ty::BrAnon(id) => format!(\"BrAnon({})\", id),\n-            ty::BrNamed(id, ident) => format!(\"BrNamed({}, {})\",\n-                                               id.repr(tcx),\n-                                               token::get_name(ident)),\n+            ty::BrNamed(id, name) => format!(\"BrNamed({}, {})\",\n+                                             id.repr(tcx),\n+                                             token::get_name(name)),\n             ty::BrFresh(id) => format!(\"BrFresh({})\", id),\n         }\n     }\n@@ -731,9 +731,9 @@ impl Repr for ty::BoundRegion {\n impl Repr for ty::Region {\n     fn repr(&self, tcx: ctxt) -> ~str {\n         match *self {\n-            ty::ReEarlyBound(id, index, ident) => {\n+            ty::ReEarlyBound(id, index, name) => {\n                 format!(\"ReEarlyBound({}, {}, {})\",\n-                        id, index, token::get_name(ident))\n+                        id, index, token::get_name(name))\n             }\n \n             ty::ReLateBound(binder_id, ref bound_region) => {"}, {"sha": "625cc5bc623463f690f916bec97c7cf8ee6a17a8", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/189c0085d19c2cbd8e3b6ca8274e2cab60aad515/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/189c0085d19c2cbd8e3b6ca8274e2cab60aad515/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=189c0085d19c2cbd8e3b6ca8274e2cab60aad515", "patch": "@@ -333,7 +333,7 @@ impl Lifetime {\n \n impl Clean<Lifetime> for ast::Lifetime {\n     fn clean(&self) -> Lifetime {\n-        Lifetime(token::get_name(self.ident).get().to_owned())\n+        Lifetime(token::get_name(self.name).get().to_owned())\n     }\n }\n "}, {"sha": "372641af5f824310cfa0a74b6a768a35000b64fe", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/189c0085d19c2cbd8e3b6ca8274e2cab60aad515/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/189c0085d19c2cbd8e3b6ca8274e2cab60aad515/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=189c0085d19c2cbd8e3b6ca8274e2cab60aad515", "patch": "@@ -118,7 +118,7 @@ pub type FnIdent = Option<Ident>;\n pub struct Lifetime {\n     id: NodeId,\n     span: Span,\n-    ident: Name\n+    name: Name\n }\n \n // a \"Path\" is essentially Rust's notion of a name;"}, {"sha": "e644eca8f7db56bf4db56321a9f47315c6c441ac", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/189c0085d19c2cbd8e3b6ca8274e2cab60aad515/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/189c0085d19c2cbd8e3b6ca8274e2cab60aad515/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=189c0085d19c2cbd8e3b6ca8274e2cab60aad515", "patch": "@@ -413,8 +413,8 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         ast::TraitTyParamBound(self.trait_ref(path))\n     }\n \n-    fn lifetime(&self, span: Span, ident: ast::Name) -> ast::Lifetime {\n-        ast::Lifetime { id: ast::DUMMY_NODE_ID, span: span, ident: ident }\n+    fn lifetime(&self, span: Span, name: ast::Name) -> ast::Lifetime {\n+        ast::Lifetime { id: ast::DUMMY_NODE_ID, span: span, name: name }\n     }\n \n     fn stmt_expr(&self, expr: @ast::Expr) -> @ast::Stmt {"}, {"sha": "99e7b6a7ab14dc991bc01eb5b494e647f40d9c85", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/189c0085d19c2cbd8e3b6ca8274e2cab60aad515/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/189c0085d19c2cbd8e3b6ca8274e2cab60aad515/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=189c0085d19c2cbd8e3b6ca8274e2cab60aad515", "patch": "@@ -435,7 +435,7 @@ pub fn fold_lifetime<T: Folder>(l: &Lifetime, fld: &mut T) -> Lifetime {\n     Lifetime {\n         id: fld.new_id(l.id),\n         span: fld.new_span(l.span),\n-        ident: l.ident\n+        name: l.name\n     }\n }\n "}, {"sha": "b6f813269cf881e35e748c2fb9c509e79e1c55bb", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/189c0085d19c2cbd8e3b6ca8274e2cab60aad515/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/189c0085d19c2cbd8e3b6ca8274e2cab60aad515/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=189c0085d19c2cbd8e3b6ca8274e2cab60aad515", "patch": "@@ -323,7 +323,7 @@ mod test {\n                         segments: vec!(\n                             ast::PathSegment {\n                                 identifier: str_to_ident(\"a\"),\n-                                lifetimes: opt_vec::Empty,\n+                                lifetimes: Vec::new(),\n                                 types: opt_vec::Empty,\n                             }\n                         ),\n@@ -342,12 +342,12 @@ mod test {\n                             segments: vec!(\n                                 ast::PathSegment {\n                                     identifier: str_to_ident(\"a\"),\n-                                    lifetimes: opt_vec::Empty,\n+                                    lifetimes: Vec::new(),\n                                     types: opt_vec::Empty,\n                                 },\n                                 ast::PathSegment {\n                                     identifier: str_to_ident(\"b\"),\n-                                    lifetimes: opt_vec::Empty,\n+                                    lifetimes: Vec::new(),\n                                     types: opt_vec::Empty,\n                                 }\n                             )"}, {"sha": "f80fc78b79c5f9546c8e0f139a3d60569c34cdce", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/189c0085d19c2cbd8e3b6ca8274e2cab60aad515/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/189c0085d19c2cbd8e3b6ca8274e2cab60aad515/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=189c0085d19c2cbd8e3b6ca8274e2cab60aad515", "patch": "@@ -1609,7 +1609,7 @@ impl Parser {\n                 return ast::Lifetime {\n                     id: ast::DUMMY_NODE_ID,\n                     span: span,\n-                    ident: i.name\n+                    name: i.name\n                 };\n             }\n             _ => {"}, {"sha": "45ab4c6956a49bb7bd36e3f5326d11d864c09b4c", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/189c0085d19c2cbd8e3b6ca8274e2cab60aad515/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/189c0085d19c2cbd8e3b6ca8274e2cab60aad515/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=189c0085d19c2cbd8e3b6ca8274e2cab60aad515", "patch": "@@ -1956,7 +1956,7 @@ pub fn print_bounds(s: &mut State, bounds: &OptVec<ast::TyParamBound>,\n pub fn print_lifetime(s: &mut State,\n                       lifetime: &ast::Lifetime) -> io::IoResult<()> {\n     try!(word(&mut s.s, \"'\"));\n-    print_name(s, lifetime.ident)\n+    print_name(s, lifetime.name)\n }\n \n pub fn print_generics(s: &mut State,"}]}