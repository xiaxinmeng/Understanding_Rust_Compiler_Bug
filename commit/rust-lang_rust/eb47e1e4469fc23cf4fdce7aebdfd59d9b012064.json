{"sha": "eb47e1e4469fc23cf4fdce7aebdfd59d9b012064", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViNDdlMWU0NDY5ZmMyM2NmNGZkY2U3YWViZGZkNTlkOWIwMTIwNjQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-21T08:04:13Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-21T17:27:34Z"}, "message": "rollup merge of #20039: barosl/if-let-friendly-error\n\nFixes #19991.", "tree": {"sha": "ea91669277cd15f97c3e482cb46c8ad10097034c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea91669277cd15f97c3e482cb46c8ad10097034c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb47e1e4469fc23cf4fdce7aebdfd59d9b012064", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb47e1e4469fc23cf4fdce7aebdfd59d9b012064", "html_url": "https://github.com/rust-lang/rust/commit/eb47e1e4469fc23cf4fdce7aebdfd59d9b012064", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb47e1e4469fc23cf4fdce7aebdfd59d9b012064/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfc815bef4b7fec0f77255188b582b4b7b5e73ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfc815bef4b7fec0f77255188b582b4b7b5e73ca", "html_url": "https://github.com/rust-lang/rust/commit/cfc815bef4b7fec0f77255188b582b4b7b5e73ca"}, {"sha": "314ed2df096858e7c174254b0babd5f949ae6d27", "url": "https://api.github.com/repos/rust-lang/rust/commits/314ed2df096858e7c174254b0babd5f949ae6d27", "html_url": "https://github.com/rust-lang/rust/commit/314ed2df096858e7c174254b0babd5f949ae6d27"}], "stats": {"total": 88, "additions": 64, "deletions": 24}, "files": [{"sha": "fddd49c8d88f3d81794b0287ced9a23db9988bf1", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb47e1e4469fc23cf4fdce7aebdfd59d9b012064/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb47e1e4469fc23cf4fdce7aebdfd59d9b012064/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=eb47e1e4469fc23cf4fdce7aebdfd59d9b012064", "patch": "@@ -1157,9 +1157,9 @@ impl LintPass for UnusedParens {\n             ast::ExprIf(ref cond, _, _) => (cond, \"`if` condition\", true),\n             ast::ExprWhile(ref cond, _, _) => (cond, \"`while` condition\", true),\n             ast::ExprMatch(ref head, _, source) => match source {\n-                ast::MatchNormal => (head, \"`match` head expression\", true),\n-                ast::MatchIfLetDesugar => (head, \"`if let` head expression\", true),\n-                ast::MatchWhileLetDesugar => (head, \"`while let` head expression\", true),\n+                ast::MatchSource::Normal => (head, \"`match` head expression\", true),\n+                ast::MatchSource::IfLetDesugar { .. } => (head, \"`if let` head expression\", true),\n+                ast::MatchSource::WhileLetDesugar => (head, \"`while let` head expression\", true),\n             },\n             ast::ExprRet(Some(ref value)) => (value, \"`return` value\", false),\n             ast::ExprAssign(_, ref value) => (value, \"assigned value\", false),"}, {"sha": "9a94eb97931466727b8b81cb16f2e5647240be1c", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb47e1e4469fc23cf4fdce7aebdfd59d9b012064/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb47e1e4469fc23cf4fdce7aebdfd59d9b012064/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=eb47e1e4469fc23cf4fdce7aebdfd59d9b012064", "patch": "@@ -307,7 +307,7 @@ fn check_arms(cx: &MatchCheckCtxt,\n             match is_useful(cx, &seen, v.as_slice(), LeaveOutWitness) {\n                 NotUseful => {\n                     match source {\n-                        ast::MatchIfLetDesugar => {\n+                        ast::MatchSource::IfLetDesugar { .. } => {\n                             if printed_if_let_err {\n                                 // we already printed an irrefutable if-let pattern error.\n                                 // We don't want two, that's just confusing.\n@@ -321,15 +321,15 @@ fn check_arms(cx: &MatchCheckCtxt,\n                             }\n                         },\n \n-                        ast::MatchWhileLetDesugar => {\n+                        ast::MatchSource::WhileLetDesugar => {\n                             // find the first arm pattern so we can use its span\n                             let &(ref first_arm_pats, _) = &arms[0];\n                             let first_pat = &first_arm_pats[0];\n                             let span = first_pat.span;\n                             span_err!(cx.tcx.sess, span, E0165, \"irrefutable while-let pattern\");\n                         },\n \n-                        ast::MatchNormal => {\n+                        ast::MatchSource::Normal => {\n                             span_err!(cx.tcx.sess, pat.span, E0001, \"unreachable pattern\")\n                         },\n                     }"}, {"sha": "921e0b15d530b9f117210beab6470297a8f1b5ee", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb47e1e4469fc23cf4fdce7aebdfd59d9b012064/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb47e1e4469fc23cf4fdce7aebdfd59d9b012064/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=eb47e1e4469fc23cf4fdce7aebdfd59d9b012064", "patch": "@@ -93,8 +93,9 @@ pub fn explain_region_and_span(cx: &ctxt, region: ty::Region)\n               ast::ExprMethodCall(..) => {\n                 explain_span(cx, \"method call\", expr.span)\n               },\n-              ast::ExprMatch(_, _, ast::MatchIfLetDesugar) => explain_span(cx, \"if let\", expr.span),\n-              ast::ExprMatch(_, _, ast::MatchWhileLetDesugar) => {\n+              ast::ExprMatch(_, _, ast::MatchSource::IfLetDesugar { .. }) =>\n+                  explain_span(cx, \"if let\", expr.span),\n+              ast::ExprMatch(_, _, ast::MatchSource::WhileLetDesugar) => {\n                   explain_span(cx, \"while let\", expr.span)\n               },\n               ast::ExprMatch(..) => explain_span(cx, \"match\", expr.span),"}, {"sha": "35ffa8ace406f50b4f11a593e494d9f3cc65cde5", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/eb47e1e4469fc23cf4fdce7aebdfd59d9b012064/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb47e1e4469fc23cf4fdce7aebdfd59d9b012064/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=eb47e1e4469fc23cf4fdce7aebdfd59d9b012064", "patch": "@@ -238,7 +238,8 @@ pub fn check_match<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                              expr: &ast::Expr,\n                              discrim: &ast::Expr,\n                              arms: &[ast::Arm],\n-                             expected: Expectation<'tcx>) {\n+                             expected: Expectation<'tcx>,\n+                             match_src: ast::MatchSource) {\n     let tcx = fcx.ccx.tcx;\n \n     let discrim_ty = fcx.infcx().next_ty_var();\n@@ -290,12 +291,27 @@ pub fn check_match<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n         if ty::type_is_error(result_ty) || ty::type_is_error(bty) {\n             ty::mk_err()\n         } else {\n+            let (origin, expected, found) = match match_src {\n+                /* if-let construct without an else block */\n+                ast::MatchSource::IfLetDesugar { contains_else_clause }\n+                if !contains_else_clause => (\n+                    infer::IfExpressionWithNoElse(expr.span),\n+                    bty,\n+                    result_ty,\n+                ),\n+                _ => (\n+                    infer::MatchExpressionArm(expr.span, arm.body.span),\n+                    result_ty,\n+                    bty,\n+                ),\n+            };\n+\n             infer::common_supertype(\n                 fcx.infcx(),\n-                infer::MatchExpressionArm(expr.span, arm.body.span),\n-                true, // result_ty is \"expected\" here\n-                result_ty,\n-                bty\n+                origin,\n+                true,\n+                expected,\n+                found,\n             )\n         }\n     });"}, {"sha": "cd9a09efe082bc1dafb34f12bdd4ceb82c102c45", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb47e1e4469fc23cf4fdce7aebdfd59d9b012064/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb47e1e4469fc23cf4fdce7aebdfd59d9b012064/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=eb47e1e4469fc23cf4fdce7aebdfd59d9b012064", "patch": "@@ -3919,8 +3919,8 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n             fcx.write_nil(id);\n         }\n       }\n-      ast::ExprMatch(ref discrim, ref arms, _) => {\n-        _match::check_match(fcx, expr, &**discrim, arms.as_slice(), expected);\n+      ast::ExprMatch(ref discrim, ref arms, match_src) => {\n+        _match::check_match(fcx, expr, &**discrim, arms.as_slice(), expected, match_src);\n       }\n       ast::ExprClosure(_, opt_kind, ref decl, ref body) => {\n           closure::check_expr_closure(fcx, expr, opt_kind, &**decl, &**body, expected);"}, {"sha": "a294706ef2c10ff67131e4cbb6b517367592b97a", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/eb47e1e4469fc23cf4fdce7aebdfd59d9b012064/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb47e1e4469fc23cf4fdce7aebdfd59d9b012064/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=eb47e1e4469fc23cf4fdce7aebdfd59d9b012064", "patch": "@@ -32,7 +32,6 @@ pub use self::LitIntType::*;\n pub use self::LocalSource::*;\n pub use self::Mac_::*;\n pub use self::MacStmtStyle::*;\n-pub use self::MatchSource::*;\n pub use self::MetaItem_::*;\n pub use self::Method_::*;\n pub use self::Mutability::*;\n@@ -760,9 +759,9 @@ pub struct QPath {\n \n #[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum MatchSource {\n-    MatchNormal,\n-    MatchIfLetDesugar,\n-    MatchWhileLetDesugar,\n+    Normal,\n+    IfLetDesugar { contains_else_clause: bool },\n+    WhileLetDesugar,\n }\n \n #[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]"}, {"sha": "9d4992f7453d0ab638982fa8756b6db6f6a43c23", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb47e1e4469fc23cf4fdce7aebdfd59d9b012064/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb47e1e4469fc23cf4fdce7aebdfd59d9b012064/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=eb47e1e4469fc23cf4fdce7aebdfd59d9b012064", "patch": "@@ -868,7 +868,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     }\n \n     fn expr_match(&self, span: Span, arg: P<ast::Expr>, arms: Vec<ast::Arm>) -> P<Expr> {\n-        self.expr(span, ast::ExprMatch(arg, arms, ast::MatchNormal))\n+        self.expr(span, ast::ExprMatch(arg, arms, ast::MatchSource::Normal))\n     }\n \n     fn expr_if(&self, span: Span, cond: P<ast::Expr>,"}, {"sha": "bf19eecbf652163c5eb6b99c4a81f666875bf432", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eb47e1e4469fc23cf4fdce7aebdfd59d9b012064/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb47e1e4469fc23cf4fdce7aebdfd59d9b012064/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=eb47e1e4469fc23cf4fdce7aebdfd59d9b012064", "patch": "@@ -97,7 +97,7 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n             // `match <expr> { ... }`\n             let arms = vec![pat_arm, break_arm];\n             let match_expr = fld.cx.expr(span,\n-                                         ast::ExprMatch(expr, arms, ast::MatchWhileLetDesugar));\n+                                    ast::ExprMatch(expr, arms, ast::MatchSource::WhileLetDesugar));\n \n             // `[opt_ident]: loop { ... }`\n             let loop_block = fld.cx.block_expr(match_expr);\n@@ -158,6 +158,8 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n                 arms\n             };\n \n+            let contains_else_clause = elseopt.is_some();\n+\n             // `_ => [<elseopt> | ()]`\n             let else_arm = {\n                 let pat_under = fld.cx.pat_wild(span);\n@@ -170,7 +172,11 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n             arms.extend(else_if_arms.into_iter());\n             arms.push(else_arm);\n \n-            let match_expr = fld.cx.expr(span, ast::ExprMatch(expr, arms, ast::MatchIfLetDesugar));\n+            let match_expr = fld.cx.expr(span,\n+                                         ast::ExprMatch(expr, arms,\n+                                                ast::MatchSource::IfLetDesugar {\n+                                                    contains_else_clause: contains_else_clause,\n+                                                }));\n             fld.fold_expr(match_expr)\n         }\n "}, {"sha": "52aa609aeaf30b166260012a327849e074955c41", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb47e1e4469fc23cf4fdce7aebdfd59d9b012064/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb47e1e4469fc23cf4fdce7aebdfd59d9b012064/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=eb47e1e4469fc23cf4fdce7aebdfd59d9b012064", "patch": "@@ -41,7 +41,7 @@ use ast::{LifetimeDef, Lit, Lit_};\n use ast::{LitBool, LitChar, LitByte, LitBinary};\n use ast::{LitStr, LitInt, Local, LocalLet};\n use ast::{MacStmtWithBraces, MacStmtWithSemicolon, MacStmtWithoutBraces};\n-use ast::{MutImmutable, MutMutable, Mac_, MacInvocTT, MatchNormal};\n+use ast::{MutImmutable, MutMutable, Mac_, MacInvocTT, MatchSource};\n use ast::{Method, MutTy, BiMul, Mutability};\n use ast::{MethodImplItem, NamedField, UnNeg, NoReturn, NodeId, UnNot};\n use ast::{Pat, PatEnum, PatIdent, PatLit, PatRange, PatRegion, PatStruct};\n@@ -3111,7 +3111,7 @@ impl<'a> Parser<'a> {\n         }\n         let hi = self.span.hi;\n         self.bump();\n-        return self.mk_expr(lo, hi, ExprMatch(discriminant, arms, MatchNormal));\n+        return self.mk_expr(lo, hi, ExprMatch(discriminant, arms, MatchSource::Normal));\n     }\n \n     pub fn parse_arm(&mut self) -> Arm {"}, {"sha": "0f1dbfa349277f215bccab001534fb8111bf4d88", "filename": "src/test/compile-fail/issue-19991.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/eb47e1e4469fc23cf4fdce7aebdfd59d9b012064/src%2Ftest%2Fcompile-fail%2Fissue-19991.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb47e1e4469fc23cf4fdce7aebdfd59d9b012064/src%2Ftest%2Fcompile-fail%2Fissue-19991.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19991.rs?ref=eb47e1e4469fc23cf4fdce7aebdfd59d9b012064", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test if the sugared if-let construct correctly prints \"missing an else clause\" when an else\n+// clause does not exist, instead of the unsympathetic \"match arms have incompatible types\"\n+\n+fn main() {\n+    if let Some(homura) = Some(\"madoka\") { //~ ERROR missing an else clause: expected `()`\n+        765i32\n+    };\n+}"}]}