{"sha": "dc23e42fb696b1106d44371170a5fb61c1d725c6", "node_id": "C_kwDOAAsO6NoAKGRjMjNlNDJmYjY5NmIxMTA2ZDQ0MzcxMTcwYTVmYjYxYzFkNzI1YzY", "commit": {"author": {"name": "Alex Macleod", "email": "alex@macleod.io", "date": "2023-02-02T15:11:31Z"}, "committer": {"name": "Alex Macleod", "email": "alex@macleod.io", "date": "2023-03-06T21:38:32Z"}, "message": "Add `format_args_collector` internal lint", "tree": {"sha": "d8cfcfd0cdad0a4fd44af44693ff05f07b004ae7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8cfcfd0cdad0a4fd44af44693ff05f07b004ae7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc23e42fb696b1106d44371170a5fb61c1d725c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc23e42fb696b1106d44371170a5fb61c1d725c6", "html_url": "https://github.com/rust-lang/rust/commit/dc23e42fb696b1106d44371170a5fb61c1d725c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc23e42fb696b1106d44371170a5fb61c1d725c6/comments", "author": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2906a1598ca16ac080f95658a8a2eae10ff25d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2906a1598ca16ac080f95658a8a2eae10ff25d5", "html_url": "https://github.com/rust-lang/rust/commit/a2906a1598ca16ac080f95658a8a2eae10ff25d5"}], "stats": {"total": 54, "additions": 34, "deletions": 20}, "files": [{"sha": "f6d14b31fef0cd30be986dcb3d7801acc44afa59", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc23e42fb696b1106d44371170a5fb61c1d725c6/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc23e42fb696b1106d44371170a5fb61c1d725c6/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=dc23e42fb696b1106d44371170a5fb61c1d725c6", "patch": "@@ -533,6 +533,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n                 .collect(),\n         ))\n     });\n+    store.register_early_pass(|| Box::new(utils::format_args_collector::FormatArgsCollector));\n     store.register_late_pass(|_| Box::new(utils::dump_hir::DumpHir));\n     store.register_late_pass(|_| Box::new(utils::author::Author));\n     let await_holding_invalid_types = conf.await_holding_invalid_types.clone();\n@@ -870,7 +871,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     let allow_dbg_in_tests = conf.allow_dbg_in_tests;\n     store.register_late_pass(move |_| Box::new(dbg_macro::DbgMacro::new(allow_dbg_in_tests)));\n     let allow_print_in_tests = conf.allow_print_in_tests;\n-    store.register_early_pass(move || Box::new(write::Write::new(allow_print_in_tests)));\n     store.register_late_pass(move |_| Box::new(write::Write::new(allow_print_in_tests)));\n     let cargo_ignore_publish = conf.cargo_ignore_publish;\n     store.register_late_pass(move |_| {"}, {"sha": "be56b842b98c63b75e1de07153e3085dcc457011", "filename": "clippy_lints/src/utils/format_args_collector.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/dc23e42fb696b1106d44371170a5fb61c1d725c6/clippy_lints%2Fsrc%2Futils%2Fformat_args_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc23e42fb696b1106d44371170a5fb61c1d725c6/clippy_lints%2Fsrc%2Futils%2Fformat_args_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fformat_args_collector.rs?ref=dc23e42fb696b1106d44371170a5fb61c1d725c6", "patch": "@@ -0,0 +1,23 @@\n+use clippy_utils::macros::collect_ast_format_args;\n+use rustc_ast::{Expr, ExprKind};\n+use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Collects [`rustc_ast::FormatArgs`] so that future late passes can call\n+    /// [`clippy_utils::macros::find_format_args`]\n+    pub FORMAT_ARGS_COLLECTOR,\n+    internal_warn,\n+    \"collects `format_args` AST nodes for use in later lints\"\n+}\n+\n+declare_lint_pass!(FormatArgsCollector => [FORMAT_ARGS_COLLECTOR]);\n+\n+impl EarlyLintPass for FormatArgsCollector {\n+    fn check_expr(&mut self, _: &EarlyContext<'_>, expr: &Expr) {\n+        if let ExprKind::FormatArgs(args) = &expr.kind {\n+            collect_ast_format_args(expr.span, args);\n+        }\n+    }\n+}"}, {"sha": "dc647af264c15893057d44bc26137b46f1151d4c", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc23e42fb696b1106d44371170a5fb61c1d725c6/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc23e42fb696b1106d44371170a5fb61c1d725c6/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=dc23e42fb696b1106d44371170a5fb61c1d725c6", "patch": "@@ -1,5 +1,6 @@\n pub mod author;\n pub mod conf;\n pub mod dump_hir;\n+pub mod format_args_collector;\n #[cfg(feature = \"internal\")]\n pub mod internal_lints;"}, {"sha": "8114a8463faad28fea39b722805bb60d36da73e6", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dc23e42fb696b1106d44371170a5fb61c1d725c6/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc23e42fb696b1106d44371170a5fb61c1d725c6/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=dc23e42fb696b1106d44371170a5fb61c1d725c6", "patch": "@@ -1,14 +1,12 @@\n use clippy_utils::diagnostics::{span_lint, span_lint_and_then};\n-use clippy_utils::macros::{\n-    find_format_args, format_arg_removal_span, populate_ast_format_args, root_macro_call_first_node, MacroCall,\n-};\n+use clippy_utils::macros::{find_format_args, format_arg_removal_span, root_macro_call_first_node, MacroCall};\n use clippy_utils::source::{expand_past_previous_comma, snippet_opt};\n use clippy_utils::{is_in_cfg_test, is_in_test_function};\n use rustc_ast::token::LitKind;\n use rustc_ast::{FormatArgPosition, FormatArgs, FormatArgsPiece, FormatOptions, FormatPlaceholder, FormatTrait};\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, Impl, Item, ItemKind};\n-use rustc_lint::{EarlyLintPass, LateContext, LateLintPass, LintContext};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{sym, BytePos};\n \n@@ -260,12 +258,6 @@ impl_lint_pass!(Write => [\n     WRITE_LITERAL,\n ]);\n \n-impl EarlyLintPass for Write {\n-    fn check_expr(&mut self, _: &rustc_lint::EarlyContext<'_>, expr: &rustc_ast::Expr) {\n-        populate_ast_format_args(expr);\n-    }\n-}\n-\n impl<'tcx> LateLintPass<'tcx> for Write {\n     fn check_item(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n         if is_debug_impl(cx, item) {"}, {"sha": "ab1c26fb9ad7b24455b3a83343c4f11fcccafefa", "filename": "clippy_utils/src/macros.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dc23e42fb696b1106d44371170a5fb61c1d725c6/clippy_utils%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc23e42fb696b1106d44371170a5fb61c1d725c6/clippy_utils%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmacros.rs?ref=dc23e42fb696b1106d44371170a5fb61c1d725c6", "patch": "@@ -19,7 +19,7 @@ use rustc_span::hygiene::{self, MacroKind, SyntaxContext};\n use rustc_span::{sym, BytePos, ExpnData, ExpnId, ExpnKind, Pos, Span, SpanData, Symbol};\n use std::cell::RefCell;\n use std::iter::{once, zip};\n-use std::ops::{ControlFlow, Deref};\n+use std::ops::ControlFlow;\n use std::sync::atomic::{AtomicBool, Ordering};\n \n const FORMAT_MACRO_DIAG_ITEMS: &[Symbol] = &[\n@@ -361,14 +361,12 @@ thread_local! {\n     };\n }\n \n-/// Record [`rustc_ast::FormatArgs`] for use in late lint passes, this only needs to be called by\n-/// one lint pass.\n-pub fn populate_ast_format_args(expr: &rustc_ast::Expr) {\n-    if let rustc_ast::ExprKind::FormatArgs(args) = &expr.kind {\n-        AST_FORMAT_ARGS.with(|ast_format_args| {\n-            ast_format_args.borrow_mut().insert(expr.span, args.deref().clone());\n-        });\n-    }\n+/// Record [`rustc_ast::FormatArgs`] for use in late lint passes, this should only be called by\n+/// `FormatArgsCollector`\n+pub fn collect_ast_format_args(span: Span, format_args: &FormatArgs) {\n+    AST_FORMAT_ARGS.with(|ast_format_args| {\n+        ast_format_args.borrow_mut().insert(span, format_args.clone());\n+    });\n }\n \n /// Calls `callback` with an AST [`FormatArgs`] node if one is found"}]}