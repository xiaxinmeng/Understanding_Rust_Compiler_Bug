{"sha": "4cae33a17631b4852453eec7a89d5c02b152e611", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjYWUzM2ExNzYzMWI0ODUyNDUzZWVjN2E4OWQ1YzAyYjE1MmU2MTE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-29T03:32:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-29T03:32:43Z"}, "message": "Rollup merge of #63811 - estebank:impl-trait-arg, r=cramertj\n\nCorrectly suggest adding bounds to `impl Trait` argument\n\nFix #63706.", "tree": {"sha": "a62dc6b52c3e50dd9f54fe8e8c06b855e6154f23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a62dc6b52c3e50dd9f54fe8e8c06b855e6154f23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cae33a17631b4852453eec7a89d5c02b152e611", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdZ0dcCRBK7hj4Ov3rIwAAdHIIAGE8PctH1jbZmp03YTSeRhVH\nm6bVKAyrEcMe+zPUfLHJZo4N8aI6mXRbR4VTv1sH5vl7LvRSGdCsf7D2TUpR0Vr1\nlhMiNDhUxoMcmT0I1Y2PUbINy7535vxabClhnOY3wwTMrvHuOWzS4kNi26k66gzU\nnVAK5AzV+9zhYuNae0+61RWfMh5WZeiTysUQMo2Wv33pf/PElCWMWbUxwhxhzQDP\n5JTemqzjuaiOkmiYNv+7id5cSdfNLgOPBqvt4kQY3Fah7tkbl5AIipTtg18b0TCl\npgE8U3IA0fMXz69cfS0chMMAHsZD5DyEcnWKifw3Nh959mqacExKMEqsMjKvPuE=\n=nQ0U\n-----END PGP SIGNATURE-----\n", "payload": "tree a62dc6b52c3e50dd9f54fe8e8c06b855e6154f23\nparent 0414dfa0aa072b6e1153ae60f94de852c07bb803\nparent 055f7e2ec23f36e522e318a64eab414caba55e7e\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1567049563 +0200\ncommitter GitHub <noreply@github.com> 1567049563 +0200\n\nRollup merge of #63811 - estebank:impl-trait-arg, r=cramertj\n\nCorrectly suggest adding bounds to `impl Trait` argument\n\nFix #63706.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cae33a17631b4852453eec7a89d5c02b152e611", "html_url": "https://github.com/rust-lang/rust/commit/4cae33a17631b4852453eec7a89d5c02b152e611", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cae33a17631b4852453eec7a89d5c02b152e611/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0414dfa0aa072b6e1153ae60f94de852c07bb803", "url": "https://api.github.com/repos/rust-lang/rust/commits/0414dfa0aa072b6e1153ae60f94de852c07bb803", "html_url": "https://github.com/rust-lang/rust/commit/0414dfa0aa072b6e1153ae60f94de852c07bb803"}, {"sha": "055f7e2ec23f36e522e318a64eab414caba55e7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/055f7e2ec23f36e522e318a64eab414caba55e7e", "html_url": "https://github.com/rust-lang/rust/commit/055f7e2ec23f36e522e318a64eab414caba55e7e"}], "stats": {"total": 73, "additions": 71, "deletions": 2}, "files": [{"sha": "440e7e5d0e3142151db41698978e5e9d148ec90c", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4cae33a17631b4852453eec7a89d5c02b152e611/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cae33a17631b4852453eec7a89d5c02b152e611/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=4cae33a17631b4852453eec7a89d5c02b152e611", "patch": "@@ -743,8 +743,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         // We do this to avoid suggesting code that ends up as `T: FooBar`,\n                         // instead we suggest `T: Foo + Bar` in that case.\n                         let mut has_bounds = false;\n+                        let mut impl_trait = false;\n                         if let Node::GenericParam(ref param) = hir.get(id) {\n-                            has_bounds = !param.bounds.is_empty();\n+                            match param.kind {\n+                                hir::GenericParamKind::Type { synthetic: Some(_), .. } => {\n+                                    // We've found `fn foo(x: impl Trait)` instead of\n+                                    // `fn foo<T>(x: T)`. We want to suggest the correct\n+                                    // `fn foo(x: impl Trait + TraitBound)` instead of\n+                                    // `fn foo<T: TraitBound>(x: T)`. (#63706)\n+                                    impl_trait = true;\n+                                    has_bounds = param.bounds.len() > 1;\n+                                }\n+                                _ => {\n+                                    has_bounds = !param.bounds.is_empty();\n+                                }\n+                            }\n                         }\n                         let sp = hir.span(id);\n                         // `sp` only covers `T`, change it so that it covers\n@@ -765,8 +778,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             sp,\n                             &msg[..],\n                             candidates.iter().map(|t| format!(\n-                                \"{}: {}{}\",\n+                                \"{}{} {}{}\",\n                                 param,\n+                                if impl_trait { \" +\" } else { \":\" },\n                                 self.tcx.def_path_str(t.def_id),\n                                 if has_bounds { \" +\"} else { \"\" },\n                             )),"}, {"sha": "5109511f95a6b4600ae006ab017cfa6ac15f1da0", "filename": "src/test/ui/suggestions/impl-trait-with-missing-trait-bounds-in-arg.fixed", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4cae33a17631b4852453eec7a89d5c02b152e611/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-trait-bounds-in-arg.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4cae33a17631b4852453eec7a89d5c02b152e611/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-trait-bounds-in-arg.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-trait-bounds-in-arg.fixed?ref=4cae33a17631b4852453eec7a89d5c02b152e611", "patch": "@@ -0,0 +1,20 @@\n+// run-rustfix\n+\n+trait Foo {}\n+\n+trait Bar {\n+    fn hello(&self) {}\n+}\n+\n+struct S;\n+\n+impl Foo for S {}\n+impl Bar for S {}\n+\n+fn test(foo: impl Foo + Bar) {\n+    foo.hello(); //~ ERROR E0599\n+}\n+\n+fn main() {\n+    test(S);\n+}"}, {"sha": "cd05b77386192270daceb3718bf12e4ec9863124", "filename": "src/test/ui/suggestions/impl-trait-with-missing-trait-bounds-in-arg.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4cae33a17631b4852453eec7a89d5c02b152e611/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-trait-bounds-in-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cae33a17631b4852453eec7a89d5c02b152e611/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-trait-bounds-in-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-trait-bounds-in-arg.rs?ref=4cae33a17631b4852453eec7a89d5c02b152e611", "patch": "@@ -0,0 +1,20 @@\n+// run-rustfix\n+\n+trait Foo {}\n+\n+trait Bar {\n+    fn hello(&self) {}\n+}\n+\n+struct S;\n+\n+impl Foo for S {}\n+impl Bar for S {}\n+\n+fn test(foo: impl Foo) {\n+    foo.hello(); //~ ERROR E0599\n+}\n+\n+fn main() {\n+    test(S);\n+}"}, {"sha": "48c2503e8eb326e4b0aac109bc329b01631fc2c2", "filename": "src/test/ui/suggestions/impl-trait-with-missing-trait-bounds-in-arg.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4cae33a17631b4852453eec7a89d5c02b152e611/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-trait-bounds-in-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4cae33a17631b4852453eec7a89d5c02b152e611/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-trait-bounds-in-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-trait-bounds-in-arg.stderr?ref=4cae33a17631b4852453eec7a89d5c02b152e611", "patch": "@@ -0,0 +1,15 @@\n+error[E0599]: no method named `hello` found for type `impl Foo` in the current scope\n+  --> $DIR/impl-trait-with-missing-trait-bounds-in-arg.rs:15:9\n+   |\n+LL |     foo.hello();\n+   |         ^^^^^\n+   |\n+   = help: items from traits can only be used if the type parameter is bounded by the trait\n+help: the following trait defines an item `hello`, perhaps you need to restrict type parameter `impl Foo` with it:\n+   |\n+LL | fn test(foo: impl Foo + Bar) {\n+   |              ^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}]}