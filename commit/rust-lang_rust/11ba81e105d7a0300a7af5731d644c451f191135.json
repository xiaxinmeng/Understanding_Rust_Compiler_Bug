{"sha": "11ba81e105d7a0300a7af5731d644c451f191135", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExYmE4MWUxMDVkN2EwMzAwYTdhZjU3MzFkNjQ0YzQ1MWYxOTExMzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-31T00:09:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-31T00:09:39Z"}, "message": "Auto merge of #29477 - alexcrichton:revert-compiler-rt, r=brson\n\nThis ended up causing regressions in a few builds I've seen:\r\n\r\n* MinGW -- [64-bit](https://ci.appveyor.com/project/alexcrichton/gcc-rs/build/1.0.338/job/2c4pkxgxa2dvqs25) and [32-bit](https://ci.appveyor.com/project/alexcrichton/gcc-rs/build/1.0.338/job/d0n7kml3k5el9gla)\r\n- MSVC - [64-bit with VS 12.0](https://ci.appveyor.com/project/alexcrichton/gcc-rs/build/job/ugldcage9ydoy1k6) and [32-bit with VS 12.0](https://ci.appveyor.com/project/alexcrichton/gcc-rs/build/job/pn59p4rhnj8gybei).\r\n\r\nI suspect the problems are along the lines of:\r\n\r\n* The emutls support needs to be disabled on Windows, it currently always used pthreads which isn't available\r\n* The objects in compiler-rt either need to be built without a CRT or not specifically against the static one.", "tree": {"sha": "c15f4dd79d3050e897009c2fab1b766c3c49def0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c15f4dd79d3050e897009c2fab1b766c3c49def0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11ba81e105d7a0300a7af5731d644c451f191135", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11ba81e105d7a0300a7af5731d644c451f191135", "html_url": "https://github.com/rust-lang/rust/commit/11ba81e105d7a0300a7af5731d644c451f191135", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11ba81e105d7a0300a7af5731d644c451f191135/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64b027764302aa67aa701a9f81bd938ca3d4052a", "url": "https://api.github.com/repos/rust-lang/rust/commits/64b027764302aa67aa701a9f81bd938ca3d4052a", "html_url": "https://github.com/rust-lang/rust/commit/64b027764302aa67aa701a9f81bd938ca3d4052a"}, {"sha": "f351b69edd50457827d849f094b1bfade4378124", "url": "https://api.github.com/repos/rust-lang/rust/commits/f351b69edd50457827d849f094b1bfade4378124", "html_url": "https://github.com/rust-lang/rust/commit/f351b69edd50457827d849f094b1bfade4378124"}], "stats": {"total": 87, "additions": 35, "deletions": 52}, "files": [{"sha": "60d366100f8c207b38132e07cbebac40dcb9bdb4", "filename": "configure", "status": "modified", "additions": 19, "deletions": 27, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/11ba81e105d7a0300a7af5731d644c451f191135/configure", "raw_url": "https://github.com/rust-lang/rust/raw/11ba81e105d7a0300a7af5731d644c451f191135/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=11ba81e105d7a0300a7af5731d644c451f191135", "patch": "@@ -1498,9 +1498,25 @@ do\n         done\n     fi\n \n-    # We need the generator later on for compiler-rt even if LLVM's not built\n-    if [ ${is_msvc} -ne 0 ]\n+    if [ ${do_reconfigure} -ne 0 ] && [ ${is_msvc} -ne 0 ]\n     then\n+        msg \"configuring LLVM for $t with cmake\"\n+\n+        CMAKE_ARGS=\"-DLLVM_INCLUDE_TESTS=OFF\"\n+        if [ -n \"$CFG_DISABLE_OPTIMIZE_LLVM\" ]; then\n+            CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_BUILD_TYPE=Debug\"\n+        else\n+            CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_BUILD_TYPE=Release\"\n+        fi\n+        if [ -z \"$CFG_ENABLE_LLVM_ASSERTIONS\" ]\n+        then\n+            CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_ENABLE_ASSERTIONS=OFF\"\n+        else\n+            CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_ENABLE_ASSERTIONS=ON\"\n+        fi\n+\n+        msg \"configuring LLVM with:\"\n+        msg \"$CMAKE_ARGS\"\n         case \"$CFG_MSVC_ROOT\" in\n             *14.0*)\n                 generator=\"Visual Studio 14 2015\"\n@@ -1522,32 +1538,8 @@ do\n                 err \"can only build LLVM for x86 platforms\"\n                 ;;\n         esac\n-        CFG_CMAKE_GENERATOR=$generator\n-        putvar CFG_CMAKE_GENERATOR\n-    fi\n-\n-    if [ ${do_reconfigure} -ne 0 ] && [ ${is_msvc} -ne 0 ]\n-    then\n-        msg \"configuring LLVM for $t with cmake\"\n-\n-        CMAKE_ARGS=\"-DLLVM_INCLUDE_TESTS=OFF\"\n-        if [ -n \"$CFG_DISABLE_OPTIMIZE_LLVM\" ]; then\n-            CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_BUILD_TYPE=Debug\"\n-        else\n-            CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_BUILD_TYPE=Release\"\n-        fi\n-        if [ -z \"$CFG_ENABLE_LLVM_ASSERTIONS\" ]\n-        then\n-            CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_ENABLE_ASSERTIONS=OFF\"\n-        else\n-            CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_ENABLE_ASSERTIONS=ON\"\n-        fi\n-\n-        msg \"configuring LLVM with:\"\n-        msg \"$CMAKE_ARGS\"\n-\n         (cd $LLVM_BUILD_DIR && \"$CFG_CMAKE\" $CFG_LLVM_SRC_DIR \\\n-                                            -G \"$CFG_CMAKE_GENERATOR\" \\\n+                                            -G \"$generator\" \\\n                                             $CMAKE_ARGS)\n         need_ok \"LLVM cmake configure failed\"\n     fi"}, {"sha": "1f60aaed4730b979c82ee199e0e1707bb86d978d", "filename": "mk/rt.mk", "status": "modified", "additions": 15, "deletions": 24, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/11ba81e105d7a0300a7af5731d644c451f191135/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/11ba81e105d7a0300a7af5731d644c451f191135/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=11ba81e105d7a0300a7af5731d644c451f191135", "patch": "@@ -216,31 +216,22 @@ COMPRT_NAME_$(1) := $$(call CFG_STATIC_LIB_NAME_$(1),compiler-rt)\n COMPRT_LIB_$(1) := $$(RT_OUTPUT_DIR_$(1))/$$(COMPRT_NAME_$(1))\n COMPRT_BUILD_DIR_$(1) := $$(RT_OUTPUT_DIR_$(1))/compiler-rt\n \n-ifeq ($$(findstring msvc,$(1)),msvc)\n-$$(COMPRT_LIB_$(1)): $$(COMPRT_DEPS) $$(MKFILE_DEPS) $$(LLVM_CONFIG_$(1))\n-\t@$$(call E, cmake: compiler-rt)\n-\t$$(Q)cd \"$$(COMPRT_BUILD_DIR_$(1))\"; $$(CFG_CMAKE) \"$(S)src/compiler-rt\" \\\n-\t\t-DCMAKE_BUILD_TYPE=$$(LLVM_BUILD_CONFIG_MODE) \\\n-\t\t-DLLVM_CONFIG_PATH=$$(LLVM_CONFIG_$(1)) \\\n-\t\t-G\"$$(CFG_CMAKE_GENERATOR)\"\n-\t$$(Q)$$(CFG_CMAKE) --build \"$$(COMPRT_BUILD_DIR_$(1))\" \\\n-\t\t--target lib/builtins/builtins \\\n-\t\t--config $$(LLVM_BUILD_CONFIG_MODE) \\\n-\t\t-- //v:m //nologo\n-\t$$(Q)cp $$(COMPRT_BUILD_DIR_$(1))/lib/windows/$$(LLVM_BUILD_CONFIG_MODE)/clang_rt.builtins-$$(HOST_$(1)).lib $$@\n-else\n+# Note that on MSVC-targeting builds we hardwire CC/AR to gcc/ar even though\n+# we're targeting MSVC. This is because although compiler-rt has a CMake build\n+# config I can't actually figure out how to use it, so I'm not sure how to use\n+# cl.exe to build the objects. Additionally, the compiler-rt library when built\n+# with gcc has the same ABI as cl.exe, so they're largely compatible\n COMPRT_CC_$(1) := $$(CC_$(1))\n COMPRT_AR_$(1) := $$(AR_$(1))\n-# We chomp -Werror here because GCC warns about the type signature of\n-# builtins not matching its own and the build fails. It's a bit hacky,\n-# but what can we do, we're building libclang-rt using GCC ......\n-COMPRT_CFLAGS_$(1) := $$(subst -Werror,,$$(CFG_GCCISH_CFLAGS_$(1))) -std=c99\n-\n-# FreeBSD Clang's packaging is problematic; it doesn't copy unwind.h to\n-# the standard include directory. This should really be in our changes to\n-# compiler-rt, but we override the CFLAGS here so there isn't much choice\n-ifeq ($$(findstring freebsd,$(1)),freebsd)\n-\tCOMPRT_CFLAGS_$(1) += -I/usr/include/c++/v1\n+COMPRT_CFLAGS_$(1) := $$(CFG_GCCISH_CFLAGS_$(1))\n+ifeq ($$(findstring msvc,$(1)),msvc)\n+COMPRT_CC_$(1) := gcc\n+COMPRT_AR_$(1) := ar\n+ifeq ($$(findstring i686,$(1)),i686)\n+COMPRT_CFLAGS_$(1) := $$(CFG_GCCISH_CFLAGS_$(1)) -m32\n+else\n+COMPRT_CFLAGS_$(1) := $$(CFG_GCCISH_CFLAGS_$(1)) -m64\n+endif\n endif\n \n $$(COMPRT_LIB_$(1)): $$(COMPRT_DEPS) $$(MKFILE_DEPS)\n@@ -255,7 +246,7 @@ $$(COMPRT_LIB_$(1)): $$(COMPRT_DEPS) $$(MKFILE_DEPS)\n \t\tTargetTriple=$(1) \\\n \t\ttriple-builtins\n \t$$(Q)cp $$(COMPRT_BUILD_DIR_$(1))/triple/builtins/libcompiler_rt.a $$@\n-endif\n+\n ################################################################################\n # libbacktrace\n #"}, {"sha": "58ab642c30d9f97735d5745b5d01781ee199c6ae", "filename": "src/compiler-rt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiler-rt?ref=11ba81e105d7a0300a7af5731d644c451f191135", "patch": "@@ -1 +1 @@\n-Subproject commit 96626ab9c1242b42a60df9b3cd9a0dc8920b5ea6\n+Subproject commit 58ab642c30d9f97735d5745b5d01781ee199c6ae"}]}