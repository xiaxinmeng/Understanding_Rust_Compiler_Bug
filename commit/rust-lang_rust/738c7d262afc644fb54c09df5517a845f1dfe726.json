{"sha": "738c7d262afc644fb54c09df5517a845f1dfe726", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczOGM3ZDI2MmFmYzY0NGZiNTRjMDlkZjU1MTdhODQ1ZjFkZmU3MjY=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-04-21T10:56:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-04-21T10:56:44Z"}, "message": "Handle Use of ! as Unreachable is not emitted nowadays.", "tree": {"sha": "cf6c4c12dfc222c1d8bb935484dfe3cf67425737", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf6c4c12dfc222c1d8bb935484dfe3cf67425737"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/738c7d262afc644fb54c09df5517a845f1dfe726", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/738c7d262afc644fb54c09df5517a845f1dfe726", "html_url": "https://github.com/rust-lang/rust/commit/738c7d262afc644fb54c09df5517a845f1dfe726", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/738c7d262afc644fb54c09df5517a845f1dfe726/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb3799b44bc50fc5b92555cd853bbbc6ff377efd", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb3799b44bc50fc5b92555cd853bbbc6ff377efd", "html_url": "https://github.com/rust-lang/rust/commit/cb3799b44bc50fc5b92555cd853bbbc6ff377efd"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "9b6bfd2ddf4129a7697ad9df4f2913133c2cbc40", "filename": "src/lvalue.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/738c7d262afc644fb54c09df5517a845f1dfe726/src%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/738c7d262afc644fb54c09df5517a845f1dfe726/src%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flvalue.rs?ref=738c7d262afc644fb54c09df5517a845f1dfe726", "patch": "@@ -108,18 +108,24 @@ impl<'tcx> Global<'tcx> {\n \n impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     pub(super) fn eval_and_read_lvalue(&mut self, lvalue: &mir::Lvalue<'tcx>) -> EvalResult<'tcx, Value> {\n+        let ty = self.lvalue_ty(lvalue);\n         let lvalue = self.eval_lvalue(lvalue)?;\n-        Ok(self.read_lvalue(lvalue))\n-    }\n \n-    pub fn read_lvalue(&self, lvalue: Lvalue<'tcx>) -> Value {\n+        if ty.is_never() {\n+            return Err(EvalError::Unreachable);\n+        }\n+\n         match lvalue {\n             Lvalue::Ptr { ptr, extra } => {\n                 assert_eq!(extra, LvalueExtra::None);\n-                Value::ByRef(ptr)\n+                Ok(Value::ByRef(ptr))\n+            }\n+            Lvalue::Local { frame, local, field } => {\n+                Ok(self.stack[frame].get_local(local, field.map(|(i, _)| i)))\n+            }\n+            Lvalue::Global(cid) => {\n+                Ok(self.globals.get(&cid).expect(\"global not cached\").value)\n             }\n-            Lvalue::Local { frame, local, field } => self.stack[frame].get_local(local, field.map(|(i, _)| i)),\n-            Lvalue::Global(cid) => self.globals.get(&cid).expect(\"global not cached\").value,\n         }\n     }\n "}]}