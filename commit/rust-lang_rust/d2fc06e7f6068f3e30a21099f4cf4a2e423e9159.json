{"sha": "d2fc06e7f6068f3e30a21099f4cf4a2e423e9159", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyZmMwNmU3ZjYwNjhmM2UzMGEyMTA5OWY0Y2Y0YTJlNDIzZTkxNTk=", "commit": {"author": {"name": "Paul Faria", "email": "Nashenas88@gmail.com", "date": "2017-07-18T02:26:21Z"}, "committer": {"name": "Paul Faria", "email": "Nashenas88@gmail.com", "date": "2017-07-30T16:09:35Z"}, "message": "Renumber regions as the first step of the non-lexical lifetimes inference", "tree": {"sha": "08e079ebb88d93400ed0fd1e30841a96b1c9409f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08e079ebb88d93400ed0fd1e30841a96b1c9409f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2fc06e7f6068f3e30a21099f4cf4a2e423e9159", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2fc06e7f6068f3e30a21099f4cf4a2e423e9159", "html_url": "https://github.com/rust-lang/rust/commit/d2fc06e7f6068f3e30a21099f4cf4a2e423e9159", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2fc06e7f6068f3e30a21099f4cf4a2e423e9159/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9", "html_url": "https://github.com/rust-lang/rust/commit/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9"}], "stats": {"total": 94, "additions": 82, "deletions": 12}, "files": [{"sha": "65294e9ef24b71c405f2c86fc5ca4b6ee8a4774a", "filename": "src/librustc_mir/transform/nll.rs", "status": "modified", "additions": 82, "deletions": 12, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/d2fc06e7f6068f3e30a21099f4cf4a2e423e9159/src%2Flibrustc_mir%2Ftransform%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2fc06e7f6068f3e30a21099f4cf4a2e423e9159/src%2Flibrustc_mir%2Ftransform%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fnll.rs?ref=d2fc06e7f6068f3e30a21099f4cf4a2e423e9159", "patch": "@@ -8,26 +8,90 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::ty::TyCtxt;\n-use rustc::mir::Mir;\n+use rustc::ty::TypeFoldable;\n+use rustc::ty::subst::Substs;\n+use rustc::ty::{Ty, TyCtxt, ClosureSubsts};\n+use rustc::mir::{Mir, Location, Rvalue, BasicBlock, Statement, StatementKind};\n use rustc::mir::visit::MutVisitor;\n use rustc::mir::transform::{MirPass, MirSource};\n+use rustc::infer::{self, InferCtxt};\n+use syntax_pos::Span;\n \n #[allow(dead_code)]\n-struct NLLVisitor<'a, 'tcx: 'a> {\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+struct NLLVisitor<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n+    infcx: InferCtxt<'a, 'gcx, 'tcx>,\n+    source: Mir<'tcx>\n }\n \n-impl<'a, 'tcx> NLLVisitor<'a, 'tcx> {\n-    pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Self {\n+impl<'a, 'gcx, 'tcx> NLLVisitor<'a, 'gcx, 'tcx> {\n+    pub fn new(infcx: InferCtxt<'a, 'gcx, 'tcx>, source: Mir<'tcx>) -> Self {\n         NLLVisitor {\n-            tcx: tcx\n+            infcx: infcx,\n+            source: source,\n         }\n     }\n+\n+    fn renumber_regions<T>(&self, value: &T, span: Span) -> T where T: TypeFoldable<'tcx> {\n+        self.infcx.tcx.fold_regions(value, &mut false, |_region, _depth| {\n+            self.infcx.next_region_var(infer::MiscVariable(span))\n+        })\n+    }\n }\n \n-impl<'a, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'tcx> {\n-    // FIXME: Nashenas88: implement me!\n+fn span_from_location<'tcx>(source: Mir<'tcx>, location: Location) -> Span {\n+    source[location.block].statements[location.statement_index].source_info.span\n+}\n+\n+impl<'a, 'gcx, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'gcx, 'tcx> {\n+    fn visit_ty(&mut self, ty: &mut Ty<'tcx>) {\n+        let old_ty = *ty;\n+        // FIXME: Nashenas88 - span should be narrowed down\n+        *ty = self.renumber_regions(&old_ty, self.source.span);\n+    }\n+\n+    fn visit_substs(&mut self, substs: &mut &'tcx Substs<'tcx>) {\n+        // FIXME: Nashenas88 - span should be narrowed down\n+        *substs = self.renumber_regions(&{*substs}, self.source.span);\n+    }\n+\n+    fn visit_rvalue(&mut self, rvalue: &mut Rvalue<'tcx>, location: Location) {\n+        match *rvalue {\n+            Rvalue::Ref(ref mut r, _, _) => {\n+                let span = span_from_location(location);\n+                let old_r = *r;\n+                *r = self.renumber_regions(&old_r, span);\n+            }\n+            Rvalue::Use(..) |\n+            Rvalue::Repeat(..) |\n+            Rvalue::Len(..) |\n+            Rvalue::Cast(..) |\n+            Rvalue::BinaryOp(..) |\n+            Rvalue::CheckedBinaryOp(..) |\n+            Rvalue::UnaryOp(..) |\n+            Rvalue::Discriminant(..) |\n+            Rvalue::NullaryOp(..) |\n+            Rvalue::Aggregate(..) => {\n+                // These variants don't contain regions.\n+            }\n+        }\n+        self.super_rvalue(rvalue, location);\n+    }\n+\n+    fn visit_closure_substs(&mut self,\n+                            substs: &mut ClosureSubsts<'tcx>) {\n+        // FIXME: Nashenas88 - span should be narrowed down\n+        *substs = self.renumber_regions(substs, self.source.span);\n+    }\n+\n+    fn visit_statement(&mut self,\n+                       block: BasicBlock,\n+                       statement: &mut Statement<'tcx>,\n+                       location: Location) {\n+        if let StatementKind::EndRegion(_) = statement.kind {\n+            statement.kind = StatementKind::Nop;\n+        }\n+        self.super_statement(block, statement, location);\n+    }\n }\n \n // MIR Pass for non-lexical lifetimes\n@@ -38,10 +102,16 @@ impl MirPass for NLL {\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           _: MirSource,\n                           mir: &mut Mir<'tcx>) {\n-        if tcx.sess.opts.debugging_opts.nll {\n+        if !tcx.sess.opts.debugging_opts.nll {\n+            return;\n+        }\n+\n+        tcx.infer_ctxt().enter(|infcx| {\n+            let mut visitor = NLLVisitor::new(infcx, mir.clone());\n             // Clone mir so we can mutate it without disturbing the rest\n             // of the compiler\n-            NLLVisitor::new(tcx).visit_mir(&mut mir.clone());\n-        }\n+            let mut mir = mir.clone();\n+            visitor.visit_mir(&mut mir);\n+        })\n     }\n }\n\\ No newline at end of file"}]}