{"sha": "2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "node_id": "C_kwDOAAsO6NoAKDJlYjFjMDhlNDMzYWFkZjIzNjJhNjVmMmVmMTM4NzY3MGE2ZDM0Y2Y", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-13T18:54:05Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-21T15:38:51Z"}, "message": "Use local key in providers", "tree": {"sha": "1d8465f4d80adbbe4a44dd72eedc3361bd2b8f7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d8465f4d80adbbe4a44dd72eedc3361bd2b8f7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "html_url": "https://github.com/rust-lang/rust/commit/2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a01b4cc9f375f1b95fa8195daeea938d3d9c4c34", "url": "https://api.github.com/repos/rust-lang/rust/commits/a01b4cc9f375f1b95fa8195daeea938d3d9c4c34", "html_url": "https://github.com/rust-lang/rust/commit/a01b4cc9f375f1b95fa8195daeea938d3d9c4c34"}], "stats": {"total": 853, "additions": 458, "deletions": 395}, "files": [{"sha": "3380864fbb2a2e11a43cc440b4eb4954ab1d3fb0", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -41,9 +41,7 @@ pub fn crates_export_threshold(crate_types: &[CrateType]) -> SymbolExportLevel {\n     }\n }\n \n-fn reachable_non_generics_provider(tcx: TyCtxt<'_>, cnum: CrateNum) -> DefIdMap<SymbolExportInfo> {\n-    assert_eq!(cnum, LOCAL_CRATE);\n-\n+fn reachable_non_generics_provider(tcx: TyCtxt<'_>, (): ()) -> DefIdMap<SymbolExportInfo> {\n     if !tcx.sess.opts.output_types.should_codegen() {\n         return Default::default();\n     }\n@@ -154,10 +152,10 @@ fn reachable_non_generics_provider(tcx: TyCtxt<'_>, cnum: CrateNum) -> DefIdMap<\n     reachable_non_generics\n }\n \n-fn is_reachable_non_generic_provider_local(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n+fn is_reachable_non_generic_provider_local(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool {\n     let export_threshold = threshold(tcx);\n \n-    if let Some(&info) = tcx.reachable_non_generics(def_id.krate).get(&def_id) {\n+    if let Some(&info) = tcx.reachable_non_generics(LOCAL_CRATE).get(&def_id.to_def_id()) {\n         info.level.is_below_threshold(export_threshold)\n     } else {\n         false\n@@ -170,10 +168,8 @@ fn is_reachable_non_generic_provider_extern(tcx: TyCtxt<'_>, def_id: DefId) -> b\n \n fn exported_symbols_provider_local(\n     tcx: TyCtxt<'_>,\n-    cnum: CrateNum,\n+    (): (),\n ) -> &[(ExportedSymbol<'_>, SymbolExportInfo)] {\n-    assert_eq!(cnum, LOCAL_CRATE);\n-\n     if !tcx.sess.opts.output_types.should_codegen() {\n         return &[];\n     }"}, {"sha": "037b07dec62972740b8b78cfb4229fec7c05840e", "filename": "compiler/rustc_codegen_ssa/src/codegen_attrs.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -43,7 +43,7 @@ fn linkage_by_name(tcx: TyCtxt<'_>, def_id: LocalDefId, name: &str) -> Linkage {\n     }\n }\n \n-fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n+fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: LocalDefId) -> CodegenFnAttrs {\n     if cfg!(debug_assertions) {\n         let def_kind = tcx.def_kind(did);\n         assert!(\n@@ -52,7 +52,6 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n         );\n     }\n \n-    let did = did.expect_local();\n     let attrs = tcx.hir().attrs(tcx.hir().local_def_id_to_hir_id(did));\n     let mut codegen_fn_attrs = CodegenFnAttrs::new();\n     if tcx.should_inherit_track_caller(did) {"}, {"sha": "088a824fd8f14c05b6a15529eea4e6b6fbe9589d", "filename": "compiler/rustc_const_eval/src/const_eval/fn_queries.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -32,8 +32,7 @@ pub fn is_parent_const_impl_raw(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool {\n /// it is a trait impl/function, return if it has a `const` modifier. If it is an intrinsic,\n /// report whether said intrinsic has a `rustc_const_{un,}stable` attribute. Otherwise, return\n /// `Constness::NotConst`.\n-fn constness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::Constness {\n-    let def_id = def_id.expect_local();\n+fn constness(tcx: TyCtxt<'_>, def_id: LocalDefId) -> hir::Constness {\n     let node = tcx.hir().get_by_def_id(def_id);\n \n     match node {"}, {"sha": "0d9cd78fe12ac9acd2f91c94fe78754dcb34783d", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -246,7 +246,7 @@ impl<'mir, 'tcx> Checker<'mir, 'tcx> {\n             self.check_local_or_return_ty(return_ty.skip_binder(), RETURN_PLACE);\n         }\n \n-        if !tcx.has_attr(def_id.to_def_id(), sym::rustc_do_not_const_check) {\n+        if !tcx.has_attr(def_id, sym::rustc_do_not_const_check) {\n             self.visit_body(&body);\n         }\n "}, {"sha": "f01ab4c5d611da57e5edc4672de9f2edc6490406", "filename": "compiler/rustc_const_eval/src/transform/check_consts/post_drop_elaboration.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -30,7 +30,7 @@ pub fn check_live_drops<'tcx>(tcx: TyCtxt<'tcx>, body: &mir::Body<'tcx>) {\n         return;\n     }\n \n-    if tcx.has_attr(def_id.to_def_id(), sym::rustc_do_not_const_check) {\n+    if tcx.has_attr(def_id, sym::rustc_do_not_const_check) {\n         return;\n     }\n "}, {"sha": "37ac37231619b045ff31c235d24f5727ee05d393", "filename": "compiler/rustc_hir/src/hir_id.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -22,6 +22,12 @@ impl From<OwnerId> for HirId {\n     }\n }\n \n+impl From<OwnerId> for DefId {\n+    fn from(value: OwnerId) -> Self {\n+        value.to_def_id()\n+    }\n+}\n+\n impl OwnerId {\n     #[inline]\n     pub fn to_def_id(self) -> DefId {"}, {"sha": "43703e1e469354ad1c582cd135c3801bb4be6fb5", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -1161,7 +1161,7 @@ fn check_enum(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     def.destructor(tcx); // force the destructor to be evaluated\n \n     if def.variants().is_empty() {\n-        if let Some(attr) = tcx.get_attrs(def_id.to_def_id(), sym::repr).next() {\n+        if let Some(attr) = tcx.get_attrs(def_id, sym::repr).next() {\n             struct_span_err!(\n                 tcx.sess,\n                 attr.span,"}, {"sha": "49665525967fa42e8538a4eeb38deb54e7ae2e7c", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -583,13 +583,13 @@ fn compare_asyncness<'tcx>(\n #[instrument(skip(tcx), level = \"debug\", ret)]\n pub(super) fn collect_return_position_impl_trait_in_trait_tys<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    def_id: DefId,\n+    impl_m_def_id: LocalDefId,\n ) -> Result<&'tcx FxHashMap<DefId, Ty<'tcx>>, ErrorGuaranteed> {\n-    let impl_m = tcx.opt_associated_item(def_id).unwrap();\n+    let impl_m = tcx.opt_associated_item(impl_m_def_id.to_def_id()).unwrap();\n     let trait_m = tcx.opt_associated_item(impl_m.trait_item_def_id.unwrap()).unwrap();\n     let impl_trait_ref =\n         tcx.impl_trait_ref(impl_m.impl_container(tcx).unwrap()).unwrap().subst_identity();\n-    let param_env = tcx.param_env(def_id);\n+    let param_env = tcx.param_env(impl_m_def_id);\n \n     // First, check a few of the same things as `compare_impl_method`,\n     // just so we don't ICE during substitution later.\n@@ -599,7 +599,6 @@ pub(super) fn collect_return_position_impl_trait_in_trait_tys<'tcx>(\n \n     let trait_to_impl_substs = impl_trait_ref.substs;\n \n-    let impl_m_def_id = impl_m.def_id.expect_local();\n     let impl_m_hir_id = tcx.hir().local_def_id_to_hir_id(impl_m_def_id);\n     let return_span = tcx.hir().fn_decl_by_hir_id(impl_m_hir_id).unwrap().output.span();\n     let cause = ObligationCause::new("}, {"sha": "1e2b37bd50c5bbfeab5fff8cd3f5ceb5de48b94d", "filename": "compiler/rustc_hir_analysis/src/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -109,8 +109,8 @@ pub fn provide(providers: &mut Providers) {\n     };\n }\n \n-fn adt_destructor(tcx: TyCtxt<'_>, def_id: DefId) -> Option<ty::Destructor> {\n-    tcx.calculate_dtor(def_id, dropck::check_drop_impl)\n+fn adt_destructor(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<ty::Destructor> {\n+    tcx.calculate_dtor(def_id.to_def_id(), dropck::check_drop_impl)\n }\n \n /// Given a `DefId` for an opaque type in return position, find its parent item's return"}, {"sha": "d5e19d913e755dc7b9286e94e9d18723b5c737c0", "filename": "compiler/rustc_hir_analysis/src/coherence/builtin.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -368,11 +368,8 @@ fn visit_implementation_of_dispatch_from_dyn(tcx: TyCtxt<'_>, impl_did: LocalDef\n     }\n }\n \n-pub fn coerce_unsized_info<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUnsizedInfo {\n+pub fn coerce_unsized_info<'tcx>(tcx: TyCtxt<'tcx>, impl_did: LocalDefId) -> CoerceUnsizedInfo {\n     debug!(\"compute_coerce_unsized_info(impl_did={:?})\", impl_did);\n-\n-    // this provider should only get invoked for local def-ids\n-    let impl_did = impl_did.expect_local();\n     let span = tcx.def_span(impl_did);\n \n     let coerce_unsized_trait = tcx.require_lang_item(LangItem::CoerceUnsized, Some(span));"}, {"sha": "d4dfe455b29a941cc3664375e5569a566470fc2a", "filename": "compiler/rustc_hir_analysis/src/coherence/inherent_impls.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -10,7 +10,7 @@\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n-use rustc_hir::def_id::{CrateNum, DefId, LocalDefId};\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::ty::fast_reject::{simplify_type, SimplifiedType, TreatParams, TreatProjections};\n use rustc_middle::ty::{self, CrateInherentImpls, Ty, TyCtxt};\n use rustc_span::symbol::sym;\n@@ -24,17 +24,15 @@ pub fn crate_inherent_impls(tcx: TyCtxt<'_>, (): ()) -> CrateInherentImpls {\n     collect.impls_map\n }\n \n-pub fn crate_incoherent_impls(tcx: TyCtxt<'_>, (_, simp): (CrateNum, SimplifiedType)) -> &[DefId] {\n+pub fn crate_incoherent_impls(tcx: TyCtxt<'_>, simp: SimplifiedType) -> &[DefId] {\n     let crate_map = tcx.crate_inherent_impls(());\n     tcx.arena.alloc_from_iter(\n         crate_map.incoherent_impls.get(&simp).unwrap_or(&Vec::new()).iter().map(|d| d.to_def_id()),\n     )\n }\n \n /// On-demand query: yields a vector of the inherent impls for a specific type.\n-pub fn inherent_impls(tcx: TyCtxt<'_>, ty_def_id: DefId) -> &[DefId] {\n-    let ty_def_id = ty_def_id.expect_local();\n-\n+pub fn inherent_impls(tcx: TyCtxt<'_>, ty_def_id: LocalDefId) -> &[DefId] {\n     let crate_map = tcx.crate_inherent_impls(());\n     match crate_map.inherent_impls.get(&ty_def_id) {\n         Some(v) => &v[..],"}, {"sha": "8a1306aae0834bd61323f1afa6fa9affb366841f", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 29, "deletions": 32, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -839,17 +839,15 @@ fn convert_variant(\n         adt_kind,\n         parent_did.to_def_id(),\n         recovered,\n-        adt_kind == AdtKind::Struct && tcx.has_attr(parent_did.to_def_id(), sym::non_exhaustive)\n-            || variant_did.map_or(false, |variant_did| {\n-                tcx.has_attr(variant_did.to_def_id(), sym::non_exhaustive)\n-            }),\n+        adt_kind == AdtKind::Struct && tcx.has_attr(parent_did, sym::non_exhaustive)\n+            || variant_did\n+                .map_or(false, |variant_did| tcx.has_attr(variant_did, sym::non_exhaustive)),\n     )\n }\n \n-fn adt_def(tcx: TyCtxt<'_>, def_id: DefId) -> ty::AdtDef<'_> {\n+fn adt_def(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::AdtDef<'_> {\n     use rustc_hir::*;\n \n-    let def_id = def_id.expect_local();\n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n     let Node::Item(item) = tcx.hir().get(hir_id) else {\n         bug!();\n@@ -908,8 +906,8 @@ fn adt_def(tcx: TyCtxt<'_>, def_id: DefId) -> ty::AdtDef<'_> {\n     tcx.mk_adt_def(def_id.to_def_id(), kind, variants, repr)\n }\n \n-fn trait_def(tcx: TyCtxt<'_>, def_id: DefId) -> ty::TraitDef {\n-    let item = tcx.hir().expect_item(def_id.expect_local());\n+fn trait_def(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::TraitDef {\n+    let item = tcx.hir().expect_item(def_id);\n \n     let (is_auto, unsafety, items) = match item.kind {\n         hir::ItemKind::Trait(is_auto, unsafety, .., items) => {\n@@ -1036,7 +1034,7 @@ fn trait_def(tcx: TyCtxt<'_>, def_id: DefId) -> ty::TraitDef {\n         });\n \n     ty::TraitDef {\n-        def_id,\n+        def_id: def_id.to_def_id(),\n         unsafety,\n         paren_sugar,\n         has_auto_impl: is_auto,\n@@ -1091,11 +1089,10 @@ pub fn get_infer_ret_ty<'hir>(output: &'hir hir::FnRetTy<'hir>) -> Option<&'hir\n }\n \n #[instrument(level = \"debug\", skip(tcx))]\n-fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::EarlyBinder<ty::PolyFnSig<'_>> {\n+fn fn_sig(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::EarlyBinder<ty::PolyFnSig<'_>> {\n     use rustc_hir::Node::*;\n     use rustc_hir::*;\n \n-    let def_id = def_id.expect_local();\n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n \n     let icx = ItemCtxt::new(tcx, def_id.to_def_id());\n@@ -1338,9 +1335,12 @@ fn suggest_impl_trait<'tcx>(\n     None\n }\n \n-fn impl_trait_ref(tcx: TyCtxt<'_>, def_id: DefId) -> Option<ty::EarlyBinder<ty::TraitRef<'_>>> {\n-    let icx = ItemCtxt::new(tcx, def_id);\n-    let impl_ = tcx.hir().expect_item(def_id.expect_local()).expect_impl();\n+fn impl_trait_ref(\n+    tcx: TyCtxt<'_>,\n+    def_id: LocalDefId,\n+) -> Option<ty::EarlyBinder<ty::TraitRef<'_>>> {\n+    let icx = ItemCtxt::new(tcx, def_id.to_def_id());\n+    let impl_ = tcx.hir().expect_item(def_id).expect_impl();\n     impl_\n         .of_trait\n         .as_ref()\n@@ -1380,9 +1380,9 @@ fn check_impl_constness(\n     }\n }\n \n-fn impl_polarity(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ImplPolarity {\n+fn impl_polarity(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::ImplPolarity {\n     let is_rustc_reservation = tcx.has_attr(def_id, sym::rustc_reservation_impl);\n-    let item = tcx.hir().expect_item(def_id.expect_local());\n+    let item = tcx.hir().expect_item(def_id);\n     match &item.kind {\n         hir::ItemKind::Impl(hir::Impl {\n             polarity: hir::ImplPolarity::Negative(span),\n@@ -1515,31 +1515,28 @@ fn compute_sig_of_foreign_fn_decl<'tcx>(\n     fty\n }\n \n-fn is_foreign_item(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n-    match tcx.hir().get_if_local(def_id) {\n-        Some(Node::ForeignItem(..)) => true,\n-        Some(_) => false,\n-        _ => bug!(\"is_foreign_item applied to non-local def-id {:?}\", def_id),\n+fn is_foreign_item(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool {\n+    match tcx.hir().get_by_def_id(def_id) {\n+        Node::ForeignItem(..) => true,\n+        _ => false,\n     }\n }\n \n-fn generator_kind(tcx: TyCtxt<'_>, def_id: DefId) -> Option<hir::GeneratorKind> {\n-    match tcx.hir().get_if_local(def_id) {\n-        Some(Node::Expr(&rustc_hir::Expr {\n+fn generator_kind(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<hir::GeneratorKind> {\n+    match tcx.hir().get_by_def_id(def_id) {\n+        Node::Expr(&rustc_hir::Expr {\n             kind: rustc_hir::ExprKind::Closure(&rustc_hir::Closure { body, .. }),\n             ..\n-        })) => tcx.hir().body(body).generator_kind(),\n-        Some(_) => None,\n-        _ => bug!(\"generator_kind applied to non-local def-id {:?}\", def_id),\n+        }) => tcx.hir().body(body).generator_kind(),\n+        _ => None,\n     }\n }\n \n-fn is_type_alias_impl_trait<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n-    match tcx.hir().get_if_local(def_id) {\n-        Some(Node::Item(hir::Item { kind: hir::ItemKind::OpaqueTy(opaque), .. })) => {\n+fn is_type_alias_impl_trait<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> bool {\n+    match tcx.hir().get_by_def_id(def_id) {\n+        Node::Item(hir::Item { kind: hir::ItemKind::OpaqueTy(opaque), .. }) => {\n             matches!(opaque.origin, hir::OpaqueTyOrigin::TyAlias)\n         }\n-        Some(_) => bug!(\"tried getting opaque_ty_origin for non-opaque: {:?}\", def_id),\n-        _ => bug!(\"tried getting opaque_ty_origin for non-local def-id {:?}\", def_id),\n+        _ => bug!(\"tried getting opaque_ty_origin for non-opaque: {:?}\", def_id),\n     }\n }"}, {"sha": "119933697a165d8311c8c0865f758d77d5718b1a", "filename": "compiler/rustc_hir_analysis/src/collect/generics_of.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -5,16 +5,16 @@ use hir::{\n };\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::LocalDefId;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::lint;\n use rustc_span::symbol::{kw, Symbol};\n use rustc_span::Span;\n \n-pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n+pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::Generics {\n     use rustc_hir::*;\n \n-    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n+    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n \n     let node = tcx.hir().get(hir_id);\n     let parent_def_id = match node {\n@@ -121,7 +121,7 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                         Some(parent_def_id.to_def_id())\n                     }\n                     Node::Expr(&Expr { kind: ExprKind::ConstBlock(_), .. }) => {\n-                        Some(tcx.typeck_root_def_id(def_id))\n+                        Some(tcx.typeck_root_def_id(def_id.to_def_id()))\n                     }\n                     // Exclude `GlobalAsm` here which cannot have generics.\n                     Node::Expr(&Expr { kind: ExprKind::InlineAsm(asm), .. })\n@@ -140,7 +140,7 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n             }\n         }\n         Node::Expr(&hir::Expr { kind: hir::ExprKind::Closure { .. }, .. }) => {\n-            Some(tcx.typeck_root_def_id(def_id))\n+            Some(tcx.typeck_root_def_id(def_id.to_def_id()))\n         }\n         Node::Item(item) => match item.kind {\n             ItemKind::OpaqueTy(hir::OpaqueTy {\n@@ -189,7 +189,7 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                     let opt_self = Some(ty::GenericParamDef {\n                         index: 0,\n                         name: kw::SelfUpper,\n-                        def_id,\n+                        def_id: def_id.to_def_id(),\n                         pure_wrt_drop: false,\n                         kind: ty::GenericParamDefKind::Type {\n                             has_default: false,\n@@ -326,7 +326,7 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n         params.extend(dummy_args.iter().map(|&arg| ty::GenericParamDef {\n             index: next_index(),\n             name: Symbol::intern(arg),\n-            def_id,\n+            def_id: def_id.to_def_id(),\n             pure_wrt_drop: false,\n             kind: ty::GenericParamDefKind::Type { has_default: false, synthetic: false },\n         }));\n@@ -339,7 +339,7 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n             params.push(ty::GenericParamDef {\n                 index: next_index(),\n                 name: Symbol::intern(\"<const_ty>\"),\n-                def_id,\n+                def_id: def_id.to_def_id(),\n                 pure_wrt_drop: false,\n                 kind: ty::GenericParamDefKind::Type { has_default: false, synthetic: false },\n             });"}, {"sha": "3f4125954acba6fcfee1ec46d1e5fe515c515363", "filename": "compiler/rustc_hir_analysis/src/collect/item_bounds.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -4,7 +4,7 @@ use rustc_hir as hir;\n use rustc_infer::traits::util;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n-use rustc_span::def_id::DefId;\n+use rustc_span::def_id::{DefId, LocalDefId};\n use rustc_span::Span;\n \n /// For associated types we include both bounds written on the type\n@@ -74,9 +74,9 @@ fn opaque_type_bounds<'tcx>(\n \n pub(super) fn explicit_item_bounds(\n     tcx: TyCtxt<'_>,\n-    def_id: DefId,\n+    def_id: LocalDefId,\n ) -> &'_ [(ty::Predicate<'_>, Span)] {\n-    match tcx.opt_rpitit_info(def_id) {\n+    match tcx.opt_rpitit_info(def_id.to_def_id()) {\n         // RPITIT's bounds are the same as opaque type bounds, but with\n         // a projection self type.\n         Some(ty::ImplTraitInTraitData::Trait { opaque_def_id, .. }) => {\n@@ -86,7 +86,10 @@ pub(super) fn explicit_item_bounds(\n                 tcx,\n                 opaque_def_id,\n                 opaque_ty.bounds,\n-                tcx.mk_projection(def_id, ty::InternalSubsts::identity_for_item(tcx, def_id)),\n+                tcx.mk_projection(\n+                    def_id.to_def_id(),\n+                    ty::InternalSubsts::identity_for_item(tcx, def_id.to_def_id()),\n+                ),\n                 item.span,\n             );\n         }\n@@ -95,25 +98,25 @@ pub(super) fn explicit_item_bounds(\n         None => {}\n     }\n \n-    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n+    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n     match tcx.hir().get(hir_id) {\n         hir::Node::TraitItem(hir::TraitItem {\n             kind: hir::TraitItemKind::Type(bounds, _),\n             span,\n             ..\n-        }) => associated_type_bounds(tcx, def_id, bounds, *span),\n+        }) => associated_type_bounds(tcx, def_id.to_def_id(), bounds, *span),\n         hir::Node::Item(hir::Item {\n             kind: hir::ItemKind::OpaqueTy(hir::OpaqueTy { bounds, in_trait, .. }),\n             span,\n             ..\n         }) => {\n-            let substs = InternalSubsts::identity_for_item(tcx, def_id);\n+            let substs = InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n             let item_ty = if *in_trait && !tcx.lower_impl_trait_in_trait_to_assoc_ty() {\n-                tcx.mk_projection(def_id, substs)\n+                tcx.mk_projection(def_id.to_def_id(), substs)\n             } else {\n-                tcx.mk_opaque(def_id, substs)\n+                tcx.mk_opaque(def_id.to_def_id(), substs)\n             };\n-            opaque_type_bounds(tcx, def_id, bounds, item_ty, *span)\n+            opaque_type_bounds(tcx, def_id.to_def_id(), bounds, item_ty, *span)\n         }\n         _ => bug!(\"item_bounds called on {:?}\", def_id),\n     }"}, {"sha": "c1d61b1efc233b15d78603cf7192043156f62f94", "filename": "compiler/rustc_hir_analysis/src/collect/predicates_of.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -62,16 +62,17 @@ pub(super) fn predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredic\n /// Returns a list of user-specified type predicates for the definition with ID `def_id`.\n /// N.B., this does not include any implied/inferred constraints.\n #[instrument(level = \"trace\", skip(tcx), ret)]\n-fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicates<'_> {\n+fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::GenericPredicates<'_> {\n     use rustc_hir::*;\n \n-    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n+    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n     let node = tcx.hir().get(hir_id);\n \n     let mut is_trait = None;\n     let mut is_default_impl_trait = None;\n \n-    let icx = ItemCtxt::new(tcx, def_id);\n+    // FIXME: Should ItemCtxt take a LocalDefId?\n+    let icx = ItemCtxt::new(tcx, def_id.to_def_id());\n \n     const NO_GENERICS: &hir::Generics<'_> = hir::Generics::empty();\n \n@@ -99,7 +100,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n             | ItemKind::Union(_, generics) => generics,\n \n             ItemKind::Trait(_, _, generics, ..) | ItemKind::TraitAlias(generics, _) => {\n-                is_trait = Some(ty::TraitRef::identity(tcx, def_id));\n+                is_trait = Some(ty::TraitRef::identity(tcx, def_id.to_def_id()));\n                 generics\n             }\n             ItemKind::OpaqueTy(OpaqueTy { generics, .. }) => generics,\n@@ -253,7 +254,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n     }\n \n     if tcx.features().generic_const_exprs {\n-        predicates.extend(const_evaluatable_predicates_of(tcx, def_id.expect_local()));\n+        predicates.extend(const_evaluatable_predicates_of(tcx, def_id));\n     }\n \n     let mut predicates: Vec<_> = predicates.into_iter().collect();\n@@ -392,19 +393,19 @@ pub(super) fn trait_explicit_predicates_and_bounds(\n     def_id: LocalDefId,\n ) -> ty::GenericPredicates<'_> {\n     assert_eq!(tcx.def_kind(def_id), DefKind::Trait);\n-    gather_explicit_predicates_of(tcx, def_id.to_def_id())\n+    gather_explicit_predicates_of(tcx, def_id)\n }\n \n pub(super) fn explicit_predicates_of<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    def_id: DefId,\n+    def_id: LocalDefId,\n ) -> ty::GenericPredicates<'tcx> {\n     let def_kind = tcx.def_kind(def_id);\n     if let DefKind::Trait = def_kind {\n         // Remove bounds on associated types from the predicates, they will be\n         // returned by `explicit_item_bounds`.\n-        let predicates_and_bounds = tcx.trait_explicit_predicates_and_bounds(def_id.expect_local());\n-        let trait_identity_substs = InternalSubsts::identity_for_item(tcx, def_id);\n+        let predicates_and_bounds = tcx.trait_explicit_predicates_and_bounds(def_id);\n+        let trait_identity_substs = InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n \n         let is_assoc_item_ty = |ty: Ty<'tcx>| {\n             // For a predicate from a where clause to become a bound on an\n@@ -418,7 +419,8 @@ pub(super) fn explicit_predicates_of<'tcx>(\n             //   supertrait).\n             if let ty::Alias(ty::Projection, projection) = ty.kind() {\n                 projection.substs == trait_identity_substs\n-                    && tcx.associated_item(projection.def_id).container_id(tcx) == def_id\n+                    && tcx.associated_item(projection.def_id).container_id(tcx)\n+                        == def_id.to_def_id()\n             } else {\n                 false\n             }\n@@ -449,7 +451,7 @@ pub(super) fn explicit_predicates_of<'tcx>(\n         }\n     } else {\n         if matches!(def_kind, DefKind::AnonConst) && tcx.lazy_normalization() {\n-            let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n+            let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n             let parent_def_id = tcx.hir().get_parent_item(hir_id);\n \n             if let Some(defaulted_param_def_id) =\n@@ -537,9 +539,9 @@ pub(super) fn explicit_predicates_of<'tcx>(\n /// the transitive super-predicates are converted.\n pub(super) fn super_predicates_of(\n     tcx: TyCtxt<'_>,\n-    trait_def_id: DefId,\n+    trait_def_id: LocalDefId,\n ) -> ty::GenericPredicates<'_> {\n-    tcx.super_predicates_that_define_assoc_type((trait_def_id, None))\n+    tcx.super_predicates_that_define_assoc_type((trait_def_id.to_def_id(), None))\n }\n \n /// Ensures that the super-predicates of the trait with a `DefId`"}, {"sha": "f1769415797c1aa411a57151c73450709ec690f8", "filename": "compiler/rustc_hir_analysis/src/collect/resolve_bound_vars.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -1051,9 +1051,8 @@ impl<'a, 'tcx> Visitor<'tcx> for BoundVarContext<'a, 'tcx> {\n     }\n }\n \n-fn object_lifetime_default(tcx: TyCtxt<'_>, param_def_id: DefId) -> ObjectLifetimeDefault {\n+fn object_lifetime_default(tcx: TyCtxt<'_>, param_def_id: LocalDefId) -> ObjectLifetimeDefault {\n     debug_assert_eq!(tcx.def_kind(param_def_id), DefKind::TyParam);\n-    let param_def_id = param_def_id.expect_local();\n     let hir::Node::GenericParam(param) = tcx.hir().get_by_def_id(param_def_id) else {\n         bug!(\"expected GenericParam for object_lifetime_default\");\n     };"}, {"sha": "91eb63bc9f2d35a038344127ed829c73ac51a90c", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -244,11 +244,13 @@ fn get_path_containing_arg_in_pat<'hir>(\n     arg_path\n }\n \n-pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::EarlyBinder<Ty<'_>> {\n+pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::EarlyBinder<Ty<'_>> {\n     // If we are computing `type_of` the synthesized associated type for an RPITIT in the impl\n     // side, use `collect_return_position_impl_trait_in_trait_tys` to infer the value of the\n     // associated type in the impl.\n-    if let Some(ImplTraitInTraitData::Impl { fn_def_id, .. }) = tcx.opt_rpitit_info(def_id) {\n+    if let Some(ImplTraitInTraitData::Impl { fn_def_id, .. }) =\n+        tcx.opt_rpitit_info(def_id.to_def_id())\n+    {\n         match tcx.collect_return_position_impl_trait_in_trait_tys(fn_def_id) {\n             Ok(map) => {\n                 let assoc_item = tcx.associated_item(def_id);\n@@ -263,7 +265,6 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::EarlyBinder<Ty<'_>>\n         }\n     }\n \n-    let def_id = def_id.expect_local();\n     use rustc_hir::*;\n \n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);"}, {"sha": "da72d2584e335ac450e5db3e4a0e8f4a87f71898", "filename": "compiler/rustc_hir_analysis/src/outlives/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fmod.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -1,6 +1,6 @@\n use hir::Node;\n use rustc_hir as hir;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::LocalDefId;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{self, CratePredicatesMap, TyCtxt};\n@@ -17,8 +17,8 @@ pub fn provide(providers: &mut Providers) {\n     *providers = Providers { inferred_outlives_of, inferred_outlives_crate, ..*providers };\n }\n \n-fn inferred_outlives_of(tcx: TyCtxt<'_>, item_def_id: DefId) -> &[(ty::Clause<'_>, Span)] {\n-    let id = tcx.hir().local_def_id_to_hir_id(item_def_id.expect_local());\n+fn inferred_outlives_of(tcx: TyCtxt<'_>, item_def_id: LocalDefId) -> &[(ty::Clause<'_>, Span)] {\n+    let id = tcx.hir().local_def_id_to_hir_id(item_def_id);\n \n     if matches!(tcx.def_kind(item_def_id), hir::def::DefKind::AnonConst) && tcx.lazy_normalization()\n     {\n@@ -45,7 +45,8 @@ fn inferred_outlives_of(tcx: TyCtxt<'_>, item_def_id: DefId) -> &[(ty::Clause<'_\n             hir::ItemKind::Struct(..) | hir::ItemKind::Enum(..) | hir::ItemKind::Union(..) => {\n                 let crate_map = tcx.inferred_outlives_crate(());\n \n-                let predicates = crate_map.predicates.get(&item_def_id).copied().unwrap_or(&[]);\n+                let predicates =\n+                    crate_map.predicates.get(&item_def_id.to_def_id()).copied().unwrap_or(&[]);\n \n                 if tcx.has_attr(item_def_id, sym::rustc_outlives) {\n                     let mut pred: Vec<String> = predicates"}, {"sha": "60f8e246ad662979967f7a8eb6c379ba52c67bb0", "filename": "compiler/rustc_hir_analysis/src/outlives/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Ftest.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -6,7 +6,7 @@ pub fn test_inferred_outlives(tcx: TyCtxt<'_>) {\n     for id in tcx.hir().items() {\n         // For unit testing: check for a special \"rustc_outlives\"\n         // attribute and report an error with various results if found.\n-        if tcx.has_attr(id.owner_id.to_def_id(), sym::rustc_outlives) {\n+        if tcx.has_attr(id.owner_id, sym::rustc_outlives) {\n             let inferred_outlives_of = tcx.inferred_outlives_of(id.owner_id);\n             struct_span_err!(\n                 tcx.sess,"}, {"sha": "72be951839d094b32541d06809e6a3bfc6241813", "filename": "compiler/rustc_hir_analysis/src/variance/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -38,7 +38,7 @@ fn crate_variances(tcx: TyCtxt<'_>, (): ()) -> CrateVariancesMap<'_> {\n     solve::solve_constraints(constraints_cx)\n }\n \n-fn variances_of(tcx: TyCtxt<'_>, item_def_id: DefId) -> &[ty::Variance] {\n+fn variances_of(tcx: TyCtxt<'_>, item_def_id: LocalDefId) -> &[ty::Variance] {\n     // Skip items with no generics - there's nothing to infer in them.\n     if tcx.generics_of(item_def_id).count() == 0 {\n         return &[];\n@@ -53,7 +53,7 @@ fn variances_of(tcx: TyCtxt<'_>, item_def_id: DefId) -> &[ty::Variance] {\n         | DefKind::Variant\n         | DefKind::Ctor(..) => {}\n         DefKind::OpaqueTy | DefKind::ImplTraitPlaceholder => {\n-            return variance_of_opaque(tcx, item_def_id.expect_local());\n+            return variance_of_opaque(tcx, item_def_id);\n         }\n         _ => {\n             // Variance not relevant.\n@@ -64,7 +64,7 @@ fn variances_of(tcx: TyCtxt<'_>, item_def_id: DefId) -> &[ty::Variance] {\n     // Everything else must be inferred.\n \n     let crate_map = tcx.crate_variances(());\n-    crate_map.variances.get(&item_def_id).copied().unwrap_or(&[])\n+    crate_map.variances.get(&item_def_id.to_def_id()).copied().unwrap_or(&[])\n }\n \n #[instrument(level = \"trace\", skip(tcx), ret)]"}, {"sha": "d57d05d7605db0770604f04978378411f54e8caf", "filename": "compiler/rustc_hir_analysis/src/variance/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Ftest.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -7,7 +7,7 @@ pub fn test_variance(tcx: TyCtxt<'_>) {\n     // For unit testing: check for a special \"rustc_variance\"\n     // attribute and report an error with various results if found.\n     for id in tcx.hir().items() {\n-        if tcx.has_attr(id.owner_id.to_def_id(), sym::rustc_variance) {\n+        if tcx.has_attr(id.owner_id, sym::rustc_variance) {\n             let variances_of = tcx.variances_of(id.owner_id);\n \n             tcx.sess.emit_err(errors::VariancesOf {"}, {"sha": "6af095cb4d437d23cbeb85b89ac335159bf9eaff", "filename": "compiler/rustc_hir_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -207,7 +207,7 @@ fn typeck_with_fallback<'tcx>(\n     let body = tcx.hir().body(body_id);\n \n     let param_env = tcx.param_env(def_id);\n-    let param_env = if tcx.has_attr(def_id.to_def_id(), sym::rustc_do_not_const_check) {\n+    let param_env = if tcx.has_attr(def_id, sym::rustc_do_not_const_check) {\n         param_env.without_const()\n     } else {\n         param_env"}, {"sha": "6e873577c1f0bfc8c0c4db9f11943b568dd22686", "filename": "compiler/rustc_hir_typeck/src/upvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -1498,7 +1498,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     fn should_log_capture_analysis(&self, closure_def_id: LocalDefId) -> bool {\n-        self.tcx.has_attr(closure_def_id.to_def_id(), sym::rustc_capture_analysis)\n+        self.tcx.has_attr(closure_def_id, sym::rustc_capture_analysis)\n     }\n \n     fn log_capture_analysis_first_pass("}, {"sha": "e876fa27593d46e1eeaabcfc3f3a89d097e7df23", "filename": "compiler/rustc_hir_typeck/src/writeback.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -44,8 +44,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // This attribute causes us to dump some writeback information\n         // in the form of errors, which is used for unit tests.\n-        let rustc_dump_user_substs =\n-            self.tcx.has_attr(item_def_id.to_def_id(), sym::rustc_dump_user_substs);\n+        let rustc_dump_user_substs = self.tcx.has_attr(item_def_id, sym::rustc_dump_user_substs);\n \n         let mut wbcx = WritebackCx::new(self, body, rustc_dump_user_substs);\n         for param in body.params {"}, {"sha": "1d88dfd20c8cd0c353ea2b6221e33c9afd5c745d", "filename": "compiler/rustc_incremental/src/persist/dirty_clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -371,7 +371,7 @@ impl<'tcx> DirtyCleanVisitor<'tcx> {\n     fn check_item(&mut self, item_id: LocalDefId) {\n         let item_span = self.tcx.def_span(item_id.to_def_id());\n         let def_path_hash = self.tcx.def_path_hash(item_id.to_def_id());\n-        for attr in self.tcx.get_attrs(item_id.to_def_id(), sym::rustc_clean) {\n+        for attr in self.tcx.get_attrs(item_id, sym::rustc_clean) {\n             let Some(assertion) = self.assertion_maybe(item_id, attr) else {\n                 continue;\n             };"}, {"sha": "ec122dc039f7715ae944187384d53805007eefb8", "filename": "compiler/rustc_infer/src/infer/error_reporting/suggest.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -356,7 +356,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n \n                 if !self.same_type_modulo_infer(*found_sig, *expected_sig)\n                     || !sig.is_suggestable(self.tcx, true)\n-                    || ty::util::is_intrinsic(self.tcx, *did)\n+                    || self.tcx.is_intrinsic(*did)\n                 {\n                     return;\n                 }\n@@ -400,8 +400,8 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 if !self.same_type_modulo_infer(*found_sig, *expected_sig)\n                     || !found_sig.is_suggestable(self.tcx, true)\n                     || !expected_sig.is_suggestable(self.tcx, true)\n-                    || ty::util::is_intrinsic(self.tcx, *did1)\n-                    || ty::util::is_intrinsic(self.tcx, *did2)\n+                    || self.tcx.is_intrinsic(*did1)\n+                    || self.tcx.is_intrinsic(*did2)\n                 {\n                     return;\n                 }"}, {"sha": "8af1a663ef5e3987a6258175dd8152e751fdd267", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -1306,7 +1306,7 @@ impl<'tcx> LateLintPass<'tcx> for UngatedAsyncFnTrackCaller {\n         if fn_kind.asyncness() == IsAsync::Async\n             && !cx.tcx.features().closure_track_caller\n             // Now, check if the function has the `#[track_caller]` attribute\n-            && let Some(attr) = cx.tcx.get_attr(def_id.to_def_id(), sym::track_caller)\n+            && let Some(attr) = cx.tcx.get_attr(def_id, sym::track_caller)\n         {\n             cx.emit_spanned_lint(UNGATED_ASYNC_FN_TRACK_CALLER, attr.span, BuiltinUngatedAsyncFnTrackCaller {\n                 label: span,\n@@ -2748,10 +2748,7 @@ impl ClashingExternDeclarations {\n                 // information, we could have codegen_fn_attrs also give span information back for\n                 // where the attribute was defined. However, until this is found to be a\n                 // bottleneck, this does just fine.\n-                (\n-                    overridden_link_name,\n-                    tcx.get_attr(fi.owner_id.to_def_id(), sym::link_name).unwrap().span,\n-                )\n+                (overridden_link_name, tcx.get_attr(fi.owner_id, sym::link_name).unwrap().span)\n             })\n         {\n             SymbolName::Link(overridden_link_name, overridden_link_name_span)"}, {"sha": "9c7feadaf874ff853b8a537dd1354f871f4828ee", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -386,7 +386,7 @@ impl LateLintPass<'_> for Diagnostics {\n         for (hir_id, parent) in cx.tcx.hir().parent_iter(expr.hir_id) {\n             if let Some(owner_did) = hir_id.as_owner() {\n                 found_parent_with_attr = found_parent_with_attr\n-                    || cx.tcx.has_attr(owner_did.to_def_id(), sym::rustc_lint_diagnostics);\n+                    || cx.tcx.has_attr(owner_did, sym::rustc_lint_diagnostics);\n             }\n \n             debug!(?parent);"}, {"sha": "0f44dde59485adf2713216a71fa0236392e758b3", "filename": "compiler/rustc_lint/src/nonstandard_style.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -384,9 +384,7 @@ impl<'tcx> LateLintPass<'tcx> for NonSnakeCase {\n         match &fk {\n             FnKind::Method(ident, sig, ..) => match method_context(cx, id) {\n                 MethodLateContext::PlainImpl => {\n-                    if sig.header.abi != Abi::Rust\n-                        && cx.tcx.has_attr(id.to_def_id(), sym::no_mangle)\n-                    {\n+                    if sig.header.abi != Abi::Rust && cx.tcx.has_attr(id, sym::no_mangle) {\n                         return;\n                     }\n                     self.check_snake_case(cx, \"method\", ident);\n@@ -398,7 +396,7 @@ impl<'tcx> LateLintPass<'tcx> for NonSnakeCase {\n             },\n             FnKind::ItemFn(ident, _, header) => {\n                 // Skip foreign-ABI #[no_mangle] functions (Issue #31924)\n-                if header.abi != Abi::Rust && cx.tcx.has_attr(id.to_def_id(), sym::no_mangle) {\n+                if header.abi != Abi::Rust && cx.tcx.has_attr(id, sym::no_mangle) {\n                     return;\n                 }\n                 self.check_snake_case(cx, \"function\", ident);"}, {"sha": "2da075221db65c744c6f384944f224d97c274907", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -367,10 +367,7 @@ pub(in crate::rmeta) fn provide(providers: &mut Providers) {\n     *providers = Providers {\n         allocator_kind: |tcx, ()| CStore::from_tcx(tcx).allocator_kind(),\n         alloc_error_handler_kind: |tcx, ()| CStore::from_tcx(tcx).alloc_error_handler_kind(),\n-        is_private_dep: |_tcx, cnum| {\n-            assert_eq!(cnum, LOCAL_CRATE);\n-            false\n-        },\n+        is_private_dep: |_tcx, ()| false,\n         native_library: |tcx, id| {\n             tcx.native_libraries(id.krate)\n                 .iter()\n@@ -386,12 +383,8 @@ pub(in crate::rmeta) fn provide(providers: &mut Providers) {\n                         .contains(&id)\n                 })\n         },\n-        native_libraries: |tcx, cnum| {\n-            assert_eq!(cnum, LOCAL_CRATE);\n-            native_libs::collect(tcx)\n-        },\n-        foreign_modules: |tcx, cnum| {\n-            assert_eq!(cnum, LOCAL_CRATE);\n+        native_libraries: |tcx, ()| native_libs::collect(tcx),\n+        foreign_modules: |tcx, ()| {\n             foreign_modules::collect(tcx).into_iter().map(|m| (m.def_id, m)).collect()\n         },\n \n@@ -489,14 +482,8 @@ pub(in crate::rmeta) fn provide(providers: &mut Providers) {\n         },\n \n         dependency_formats: |tcx, ()| Lrc::new(crate::dependency_format::calculate(tcx)),\n-        has_global_allocator: |tcx, cnum| {\n-            assert_eq!(cnum, LOCAL_CRATE);\n-            CStore::from_tcx(tcx).has_global_allocator()\n-        },\n-        has_alloc_error_handler: |tcx, cnum| {\n-            assert_eq!(cnum, LOCAL_CRATE);\n-            CStore::from_tcx(tcx).has_alloc_error_handler()\n-        },\n+        has_global_allocator: |tcx, ()| CStore::from_tcx(tcx).has_global_allocator(),\n+        has_alloc_error_handler: |tcx, ()| CStore::from_tcx(tcx).has_alloc_error_handler(),\n         postorder_cnums: |tcx, ()| {\n             tcx.arena\n                 .alloc_slice(&CStore::from_tcx(tcx).crate_dependencies_in_postorder(LOCAL_CRATE))"}, {"sha": "97ac3eccae7b0ceb8f2f612ecb9c45a8e3af4592", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -2231,18 +2231,16 @@ pub fn provide(providers: &mut Providers) {\n         doc_link_resolutions: |tcx, def_id| {\n             tcx.resolutions(())\n                 .doc_link_resolutions\n-                .get(&def_id.expect_local())\n+                .get(&def_id)\n                 .expect(\"no resolutions for a doc link\")\n         },\n         doc_link_traits_in_scope: |tcx, def_id| {\n             tcx.resolutions(())\n                 .doc_link_traits_in_scope\n-                .get(&def_id.expect_local())\n+                .get(&def_id)\n                 .expect(\"no traits in scope for a doc link\")\n         },\n-        traits_in_crate: |tcx, cnum| {\n-            assert_eq!(cnum, LOCAL_CRATE);\n-\n+        traits_in_crate: |tcx, ()| {\n             let mut traits = Vec::new();\n             for id in tcx.hir().items() {\n                 if matches!(tcx.def_kind(id.owner_id), DefKind::Trait | DefKind::TraitAlias) {\n@@ -2254,9 +2252,7 @@ pub fn provide(providers: &mut Providers) {\n             traits.sort_by_cached_key(|&def_id| tcx.def_path_hash(def_id));\n             tcx.arena.alloc_slice(&traits)\n         },\n-        trait_impls_in_crate: |tcx, cnum| {\n-            assert_eq!(cnum, LOCAL_CRATE);\n-\n+        trait_impls_in_crate: |tcx, ()| {\n             let mut trait_impls = Vec::new();\n             for id in tcx.hir().items() {\n                 if matches!(tcx.def_kind(id.owner_id), DefKind::Impl { .. })"}, {"sha": "d877a2c549425f552b5407ac23d9e36b8c207261", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -6,7 +6,7 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::{par_for_each_in, Send, Sync};\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_ID, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPath, DefPathHash};\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::*;\n@@ -1131,8 +1131,7 @@ impl<'hir> intravisit::Map<'hir> for Map<'hir> {\n     }\n }\n \n-pub(super) fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {\n-    debug_assert_eq!(crate_num, LOCAL_CRATE);\n+pub(super) fn crate_hash(tcx: TyCtxt<'_>, (): ()) -> Svh {\n     let krate = tcx.hir_crate(());\n     let hir_body_hash = krate.opt_hir_hash.expect(\"HIR hash missing while computing crate hash\");\n "}, {"sha": "0d8a8c9cdfd43f55dd8806990e5f8129aab3ce45", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -147,18 +147,18 @@ pub fn provide(providers: &mut Providers) {\n         tcx.hir_crate(()).owners[id.def_id].as_owner().map_or(AttributeMap::EMPTY, |o| &o.attrs)\n     };\n     providers.def_span = |tcx, def_id| {\n-        let def_id = def_id.expect_local();\n+        let def_id = def_id;\n         let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n         tcx.hir().opt_span(hir_id).unwrap_or(DUMMY_SP)\n     };\n     providers.def_ident_span = |tcx, def_id| {\n-        let def_id = def_id.expect_local();\n+        let def_id = def_id;\n         let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n         tcx.hir().opt_ident_span(hir_id)\n     };\n     providers.fn_arg_names = |tcx, id| {\n         let hir = tcx.hir();\n-        let def_id = id.expect_local();\n+        let def_id = id;\n         let hir_id = hir.local_def_id_to_hir_id(def_id);\n         if let Some(body_id) = hir.maybe_body_owned_by(def_id) {\n             tcx.arena.alloc_from_iter(hir.body_param_names(body_id))\n@@ -176,12 +176,10 @@ pub fn provide(providers: &mut Providers) {\n             span_bug!(hir.span(hir_id), \"fn_arg_names: unexpected item {:?}\", id);\n         }\n     };\n-    providers.opt_def_kind = |tcx, def_id| tcx.hir().opt_def_kind(def_id.expect_local());\n+    providers.opt_def_kind = |tcx, def_id| tcx.hir().opt_def_kind(def_id);\n     providers.all_local_trait_impls = |tcx, ()| &tcx.resolutions(()).trait_impls;\n-    providers.expn_that_defined = |tcx, id| {\n-        let id = id.expect_local();\n-        tcx.resolutions(()).expn_that_defined.get(&id).copied().unwrap_or(ExpnId::root())\n-    };\n+    providers.expn_that_defined =\n+        |tcx, id| tcx.resolutions(()).expn_that_defined.get(&id).copied().unwrap_or(ExpnId::root());\n     providers.in_scope_traits_map = |tcx, id| {\n         tcx.hir_crate(()).owners[id.def_id].as_owner().map(|owner_info| &owner_info.trait_map)\n     };"}, {"sha": "584e94bf847cc4a130cd194007f8c685cc20e2a1", "filename": "compiler/rustc_middle/src/query/keys.rs", "status": "modified", "additions": 202, "deletions": 109, "changes": 311, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -26,9 +26,11 @@ pub trait Key: Sized {\n     //      r-a issue: <https://github.com/rust-lang/rust-analyzer/issues/13693>\n     type CacheSelector;\n \n+    type LocalKey;\n+\n     /// Given an instance of this key, what crate is it referring to?\n     /// This is used to find the provider.\n-    fn query_crate_is_local(&self) -> bool;\n+    fn as_local_key(&self) -> Option<Self::LocalKey>;\n \n     /// In the event that a cycle occurs, if no explicit span has been\n     /// given for a query with key `self`, what span should we use?\n@@ -47,10 +49,11 @@ pub trait Key: Sized {\n \n impl Key for () {\n     type CacheSelector = SingleCacheSelector;\n+    type LocalKey = Self;\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        true\n+    fn as_local_key(&self) -> Option<Self> {\n+        Some(*self)\n     }\n \n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n@@ -60,10 +63,11 @@ impl Key for () {\n \n impl<'tcx> Key for ty::InstanceDef<'tcx> {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = Self;\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        self.def_id().is_local()\n+    fn as_local_key(&self) -> Option<Self> {\n+        self.def_id().is_local().then(|| *self)\n     }\n \n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n@@ -73,10 +77,11 @@ impl<'tcx> Key for ty::InstanceDef<'tcx> {\n \n impl<'tcx> Key for ty::Instance<'tcx> {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = Self;\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        self.def_id().is_local()\n+    fn as_local_key(&self) -> Option<Self> {\n+        self.def_id().is_local().then(|| *self)\n     }\n \n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n@@ -86,10 +91,11 @@ impl<'tcx> Key for ty::Instance<'tcx> {\n \n impl<'tcx> Key for mir::interpret::GlobalId<'tcx> {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = Self;\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        true\n+    fn as_local_key(&self) -> Option<Self> {\n+        Some(*self)\n     }\n \n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n@@ -99,10 +105,11 @@ impl<'tcx> Key for mir::interpret::GlobalId<'tcx> {\n \n impl<'tcx> Key for (Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = Self;\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        true\n+    fn as_local_key(&self) -> Option<Self> {\n+        Some(*self)\n     }\n \n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n@@ -112,10 +119,11 @@ impl<'tcx> Key for (Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>) {\n \n impl<'tcx> Key for mir::interpret::LitToConstInput<'tcx> {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = Self;\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        true\n+    fn as_local_key(&self) -> Option<Self> {\n+        Some(*self)\n     }\n \n     fn default_span(&self, _tcx: TyCtxt<'_>) -> Span {\n@@ -125,56 +133,67 @@ impl<'tcx> Key for mir::interpret::LitToConstInput<'tcx> {\n \n impl Key for CrateNum {\n     type CacheSelector = VecCacheSelector<Self>;\n+    type LocalKey = ();\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        *self == LOCAL_CRATE\n+    fn as_local_key(&self) -> Option<Self::LocalKey> {\n+        (*self == LOCAL_CRATE).then_some(())\n     }\n+\n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n     }\n }\n \n impl Key for OwnerId {\n     type CacheSelector = VecCacheSelector<Self>;\n+    type LocalKey = Self;\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        true\n+    fn as_local_key(&self) -> Option<Self> {\n+        Some(*self)\n     }\n+\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         self.to_def_id().default_span(tcx)\n     }\n+\n     fn key_as_def_id(&self) -> Option<DefId> {\n         Some(self.to_def_id())\n     }\n }\n \n impl Key for LocalDefId {\n     type CacheSelector = VecCacheSelector<Self>;\n+    type LocalKey = Self;\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        true\n+    fn as_local_key(&self) -> Option<Self> {\n+        Some(*self)\n     }\n+\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         self.to_def_id().default_span(tcx)\n     }\n+\n     fn key_as_def_id(&self) -> Option<DefId> {\n         Some(self.to_def_id())\n     }\n }\n \n impl Key for DefId {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = LocalDefId;\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        self.krate == LOCAL_CRATE\n+    fn as_local_key(&self) -> Option<Self::LocalKey> {\n+        self.as_local()\n     }\n+\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         tcx.def_span(*self)\n     }\n+\n     #[inline(always)]\n     fn key_as_def_id(&self) -> Option<DefId> {\n         Some(*self)\n@@ -183,98 +202,114 @@ impl Key for DefId {\n \n impl Key for ty::WithOptConstParam<LocalDefId> {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = Self;\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        true\n+    fn as_local_key(&self) -> Option<Self> {\n+        Some(*self)\n     }\n+\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         self.did.default_span(tcx)\n     }\n }\n \n impl Key for SimplifiedType {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = Self;\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        true\n+    fn as_local_key(&self) -> Option<Self> {\n+        Some(*self)\n     }\n+\n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n     }\n }\n \n impl Key for (DefId, DefId) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = (LocalDefId, DefId);\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        self.0.krate == LOCAL_CRATE\n+    fn as_local_key(&self) -> Option<Self::LocalKey> {\n+        Some((self.0.as_local()?, self.1))\n     }\n+\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         self.1.default_span(tcx)\n     }\n }\n \n impl<'tcx> Key for (ty::Instance<'tcx>, LocalDefId) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = Self;\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        true\n+    fn as_local_key(&self) -> Option<Self> {\n+        Some(*self)\n     }\n+\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         self.0.default_span(tcx)\n     }\n }\n \n impl Key for (DefId, LocalDefId) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = (LocalDefId, LocalDefId);\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        self.0.krate == LOCAL_CRATE\n+    fn as_local_key(&self) -> Option<Self::LocalKey> {\n+        Some((self.0.as_local()?, self.1))\n     }\n+\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         self.1.default_span(tcx)\n     }\n }\n \n impl Key for (LocalDefId, DefId) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = Self;\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        true\n+    fn as_local_key(&self) -> Option<Self> {\n+        Some(*self)\n     }\n+\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         self.0.default_span(tcx)\n     }\n }\n \n impl Key for (LocalDefId, LocalDefId) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = Self;\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        true\n+    fn as_local_key(&self) -> Option<Self> {\n+        Some(*self)\n     }\n+\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         self.0.default_span(tcx)\n     }\n }\n \n impl Key for (DefId, Option<Ident>) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = (LocalDefId, Option<Ident>);\n \n-    #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        self.0.krate == LOCAL_CRATE\n+    fn as_local_key(&self) -> Option<Self::LocalKey> {\n+        Some((self.0.as_local()?, self.1))\n     }\n+\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         tcx.def_span(self.0)\n     }\n+\n     #[inline(always)]\n     fn key_as_def_id(&self) -> Option<DefId> {\n         Some(self.0)\n@@ -283,218 +318,254 @@ impl Key for (DefId, Option<Ident>) {\n \n impl Key for (DefId, LocalDefId, Ident) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = (LocalDefId, LocalDefId, Ident);\n \n-    #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        self.0.krate == LOCAL_CRATE\n+    fn as_local_key(&self) -> Option<Self::LocalKey> {\n+        Some((self.0.as_local()?, self.1, self.2))\n     }\n+\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         self.1.default_span(tcx)\n     }\n }\n \n impl Key for (CrateNum, DefId) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = DefId;\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        self.0 == LOCAL_CRATE\n+    fn as_local_key(&self) -> Option<Self::LocalKey> {\n+        (self.0 == LOCAL_CRATE).then_some(self.1)\n     }\n+\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         self.1.default_span(tcx)\n     }\n }\n \n impl Key for (CrateNum, SimplifiedType) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = SimplifiedType;\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        self.0 == LOCAL_CRATE\n+    fn as_local_key(&self) -> Option<Self::LocalKey> {\n+        (self.0 == LOCAL_CRATE).then_some(self.1)\n     }\n+\n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n     }\n }\n \n impl Key for (DefId, SimplifiedType) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = (LocalDefId, SimplifiedType);\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        self.0.krate == LOCAL_CRATE\n+    fn as_local_key(&self) -> Option<Self::LocalKey> {\n+        Some((self.0.as_local()?, self.1))\n     }\n+\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         self.0.default_span(tcx)\n     }\n }\n \n impl<'tcx> Key for SubstsRef<'tcx> {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = Self;\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        true\n+    fn as_local_key(&self) -> Option<Self> {\n+        Some(*self)\n     }\n+\n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n     }\n }\n \n impl<'tcx> Key for (DefId, SubstsRef<'tcx>) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = (LocalDefId, SubstsRef<'tcx>);\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        self.0.krate == LOCAL_CRATE\n+    fn as_local_key(&self) -> Option<Self::LocalKey> {\n+        Some((self.0.as_local()?, self.1))\n     }\n+\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         self.0.default_span(tcx)\n     }\n }\n \n impl<'tcx> Key for (ty::UnevaluatedConst<'tcx>, ty::UnevaluatedConst<'tcx>) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = Self;\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        (self.0).def.did.krate == LOCAL_CRATE\n+    fn as_local_key(&self) -> Option<Self::LocalKey> {\n+        self.0.def.is_local().then_some(*self)\n     }\n+\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         (self.0).def.did.default_span(tcx)\n     }\n }\n \n impl<'tcx> Key for (LocalDefId, DefId, SubstsRef<'tcx>) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = Self;\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        true\n+    fn as_local_key(&self) -> Option<Self> {\n+        Some(*self)\n     }\n+\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         self.0.default_span(tcx)\n     }\n }\n \n impl<'tcx> Key for (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = Self;\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        self.1.def_id().krate == LOCAL_CRATE\n+    fn as_local_key(&self) -> Option<Self::LocalKey> {\n+        self.1.def_id().is_local().then_some(*self)\n     }\n+\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         tcx.def_span(self.1.def_id())\n     }\n }\n \n impl<'tcx> Key for (ty::Const<'tcx>, mir::Field) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = Self;\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        true\n+    fn as_local_key(&self) -> Option<Self> {\n+        Some(*self)\n     }\n+\n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n     }\n }\n \n impl<'tcx> Key for mir::interpret::ConstAlloc<'tcx> {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = Self;\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        true\n+    fn as_local_key(&self) -> Option<Self> {\n+        Some(*self)\n     }\n+\n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n     }\n }\n \n impl<'tcx> Key for ty::PolyTraitRef<'tcx> {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = Self;\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        self.def_id().krate == LOCAL_CRATE\n+    fn as_local_key(&self) -> Option<Self::LocalKey> {\n+        self.def_id().is_local().then_some(*self)\n     }\n+\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         tcx.def_span(self.def_id())\n     }\n }\n \n impl<'tcx> Key for ty::PolyExistentialTraitRef<'tcx> {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = Self;\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        self.def_id().krate == LOCAL_CRATE\n+    fn as_local_key(&self) -> Option<Self::LocalKey> {\n+        self.def_id().is_local().then_some(*self)\n     }\n+\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         tcx.def_span(self.def_id())\n     }\n }\n \n impl<'tcx> Key for (ty::PolyTraitRef<'tcx>, ty::PolyTraitRef<'tcx>) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = Self;\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        self.0.def_id().krate == LOCAL_CRATE\n+    fn as_local_key(&self) -> Option<Self::LocalKey> {\n+        self.0.def_id().is_local().then_some(*self)\n     }\n+\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         tcx.def_span(self.0.def_id())\n     }\n }\n \n impl<'tcx> Key for GenericArg<'tcx> {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = Self;\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        true\n+    fn as_local_key(&self) -> Option<Self> {\n+        Some(*self)\n     }\n+\n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n     }\n }\n \n impl<'tcx> Key for mir::ConstantKind<'tcx> {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = Self;\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        true\n+    fn as_local_key(&self) -> Option<Self> {\n+        Some(*self)\n     }\n+\n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n     }\n }\n \n impl<'tcx> Key for ty::Const<'tcx> {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = Self;\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        true\n+    fn as_local_key(&self) -> Option<Self> {\n+        Some(*self)\n     }\n+\n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n     }\n }\n \n impl<'tcx> Key for Ty<'tcx> {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = Self;\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        true\n+    fn as_local_key(&self) -> Option<Self> {\n+        Some(*self)\n     }\n+\n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n     }\n+\n     fn ty_adt_id(&self) -> Option<DefId> {\n         match self.kind() {\n             ty::Adt(adt, _) => Some(adt.did()),\n@@ -505,96 +576,110 @@ impl<'tcx> Key for Ty<'tcx> {\n \n impl<'tcx> Key for TyAndLayout<'tcx> {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = Self;\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        true\n+    fn as_local_key(&self) -> Option<Self> {\n+        Some(*self)\n     }\n+\n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n     }\n }\n \n impl<'tcx> Key for (Ty<'tcx>, Ty<'tcx>) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = Self;\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        true\n+    fn as_local_key(&self) -> Option<Self> {\n+        Some(*self)\n     }\n+\n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n     }\n }\n \n impl<'tcx> Key for &'tcx ty::List<ty::Predicate<'tcx>> {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = Self;\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        true\n+    fn as_local_key(&self) -> Option<Self> {\n+        Some(*self)\n     }\n+\n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n     }\n }\n \n impl<'tcx> Key for ty::ParamEnv<'tcx> {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = Self;\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        true\n+    fn as_local_key(&self) -> Option<Self> {\n+        Some(*self)\n     }\n+\n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n     }\n }\n \n impl<'tcx, T: Key> Key for ty::ParamEnvAnd<'tcx, T> {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = ty::ParamEnvAnd<'tcx, T::LocalKey>;\n \n-    #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        self.value.query_crate_is_local()\n+    fn as_local_key(&self) -> Option<Self::LocalKey> {\n+        self.value.as_local_key().map(|value| ty::ParamEnvAnd { param_env: self.param_env, value })\n     }\n+\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         self.value.default_span(tcx)\n     }\n }\n \n impl Key for Symbol {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = Self;\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        true\n+    fn as_local_key(&self) -> Option<Self> {\n+        Some(*self)\n     }\n+\n     fn default_span(&self, _tcx: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n     }\n }\n \n impl Key for Option<Symbol> {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = Self;\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        true\n+    fn as_local_key(&self) -> Option<Self> {\n+        Some(*self)\n     }\n+\n     fn default_span(&self, _tcx: TyCtxt<'_>) -> Span {\n         DUMMY_SP\n     }\n }\n \n /// Canonical query goals correspond to abstract trait operations that\n /// are not tied to any crate in particular.\n-impl<'tcx, T> Key for Canonical<'tcx, T> {\n+impl<'tcx, T: Clone> Key for Canonical<'tcx, T> {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = Self;\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        true\n+    fn as_local_key(&self) -> Option<Self> {\n+        Some(self.clone())\n     }\n \n     fn default_span(&self, _tcx: TyCtxt<'_>) -> Span {\n@@ -604,10 +689,11 @@ impl<'tcx, T> Key for Canonical<'tcx, T> {\n \n impl Key for (Symbol, u32, u32) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = Self;\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        true\n+    fn as_local_key(&self) -> Option<Self> {\n+        Some(*self)\n     }\n \n     fn default_span(&self, _tcx: TyCtxt<'_>) -> Span {\n@@ -617,10 +703,11 @@ impl Key for (Symbol, u32, u32) {\n \n impl<'tcx> Key for (DefId, Ty<'tcx>, SubstsRef<'tcx>, ty::ParamEnv<'tcx>) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = Self;\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        true\n+    fn as_local_key(&self) -> Option<Self> {\n+        Some(*self)\n     }\n \n     fn default_span(&self, _tcx: TyCtxt<'_>) -> Span {\n@@ -630,10 +717,11 @@ impl<'tcx> Key for (DefId, Ty<'tcx>, SubstsRef<'tcx>, ty::ParamEnv<'tcx>) {\n \n impl<'tcx> Key for (ty::Predicate<'tcx>, traits::WellFormedLoc) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = Self;\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        true\n+    fn as_local_key(&self) -> Option<Self> {\n+        Some(*self)\n     }\n \n     fn default_span(&self, _tcx: TyCtxt<'_>) -> Span {\n@@ -643,10 +731,11 @@ impl<'tcx> Key for (ty::Predicate<'tcx>, traits::WellFormedLoc) {\n \n impl<'tcx> Key for (ty::PolyFnSig<'tcx>, &'tcx ty::List<Ty<'tcx>>) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = Self;\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        true\n+    fn as_local_key(&self) -> Option<Self> {\n+        Some(*self)\n     }\n \n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n@@ -656,10 +745,11 @@ impl<'tcx> Key for (ty::PolyFnSig<'tcx>, &'tcx ty::List<Ty<'tcx>>) {\n \n impl<'tcx> Key for (ty::Instance<'tcx>, &'tcx ty::List<Ty<'tcx>>) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = Self;\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        true\n+    fn as_local_key(&self) -> Option<Self> {\n+        Some(*self)\n     }\n \n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n@@ -669,10 +759,11 @@ impl<'tcx> Key for (ty::Instance<'tcx>, &'tcx ty::List<Ty<'tcx>>) {\n \n impl<'tcx> Key for (Ty<'tcx>, ty::ValTree<'tcx>) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = Self;\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        true\n+    fn as_local_key(&self) -> Option<Self> {\n+        Some(*self)\n     }\n \n     fn default_span(&self, _: TyCtxt<'_>) -> Span {\n@@ -682,10 +773,11 @@ impl<'tcx> Key for (Ty<'tcx>, ty::ValTree<'tcx>) {\n \n impl Key for HirId {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = Self;\n \n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        true\n+    fn as_local_key(&self) -> Option<Self> {\n+        Some(*self)\n     }\n \n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n@@ -700,11 +792,12 @@ impl Key for HirId {\n \n impl<'tcx> Key for (ValidityRequirement, ty::ParamEnvAnd<'tcx, Ty<'tcx>>) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n+    type LocalKey = Self;\n \n     // Just forward to `Ty<'tcx>`\n     #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        true\n+    fn as_local_key(&self) -> Option<Self> {\n+        Some(*self)\n     }\n \n     fn default_span(&self, _: TyCtxt<'_>) -> Span {"}, {"sha": "712c1a31a52f30218fa5a1b1234a6e2272311756", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -4,7 +4,7 @@ use crate::ty::{self, InternalSubsts, ParamEnv, ParamEnvAnd, Ty, TyCtxt};\n use rustc_data_structures::intern::Interned;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::{DefId, LocalDefId};\n+use rustc_hir::def_id::LocalDefId;\n use rustc_macros::HashStable;\n use std::fmt;\n \n@@ -265,8 +265,8 @@ impl<'tcx> Const<'tcx> {\n     }\n }\n \n-pub fn const_param_default(tcx: TyCtxt<'_>, def_id: DefId) -> ty::EarlyBinder<Const<'_>> {\n-    let default_def_id = match tcx.hir().get_by_def_id(def_id.expect_local()) {\n+pub fn const_param_default(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::EarlyBinder<Const<'_>> {\n+    let default_def_id = match tcx.hir().get_by_def_id(def_id) {\n         hir::Node::GenericParam(hir::GenericParam {\n             kind: hir::GenericParamKind::Const { default: Some(ac), .. },\n             .."}, {"sha": "23ac99d3397effddb29fbb921ec26a943f9bf877", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -2518,16 +2518,11 @@ pub fn provide(providers: &mut ty::query::Providers) {\n \n     providers.extern_mod_stmt_cnum =\n         |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();\n-    providers.is_panic_runtime = |tcx, cnum| {\n-        assert_eq!(cnum, LOCAL_CRATE);\n-        tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)\n-    };\n-    providers.is_compiler_builtins = |tcx, cnum| {\n-        assert_eq!(cnum, LOCAL_CRATE);\n-        tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)\n-    };\n-    providers.has_panic_handler = |tcx, cnum| {\n-        assert_eq!(cnum, LOCAL_CRATE);\n+    providers.is_panic_runtime =\n+        |tcx, ()| tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime);\n+    providers.is_compiler_builtins =\n+        |tcx, ()| tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins);\n+    providers.has_panic_handler = |tcx, ()| {\n         // We want to check if the panic handler was defined in this crate\n         tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())\n     };"}, {"sha": "aa10a651c0711aad0a440a6e08cc0f65a998eba9", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -187,7 +187,11 @@ impl<'tcx> InstanceDef<'tcx> {\n     }\n \n     #[inline]\n-    pub fn get_attrs(&self, tcx: TyCtxt<'tcx>, attr: Symbol) -> ty::Attributes<'tcx> {\n+    pub fn get_attrs(\n+        &self,\n+        tcx: TyCtxt<'tcx>,\n+        attr: Symbol,\n+    ) -> impl Iterator<Item = &'tcx rustc_ast::Attribute> {\n         tcx.get_attrs(self.def_id(), attr)\n     }\n "}, {"sha": "d8da8e0f34a9c574dc60a62b81408f1acf7e46af", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -2027,7 +2027,6 @@ impl<'tcx> FieldDef {\n     }\n }\n \n-pub type Attributes<'tcx> = impl Iterator<Item = &'tcx ast::Attribute>;\n #[derive(Debug, PartialEq, Eq)]\n pub enum ImplOverlapKind {\n     /// These impls are always allowed to overlap.\n@@ -2375,7 +2374,12 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     /// Gets all attributes with the given name.\n-    pub fn get_attrs(self, did: DefId, attr: Symbol) -> ty::Attributes<'tcx> {\n+    pub fn get_attrs(\n+        self,\n+        did: impl Into<DefId>,\n+        attr: Symbol,\n+    ) -> impl Iterator<Item = &'tcx ast::Attribute> {\n+        let did: DefId = did.into();\n         let filter_fn = move |a: &&ast::Attribute| a.has_name(attr);\n         if let Some(did) = did.as_local() {\n             self.hir().attrs(self.hir().local_def_id_to_hir_id(did)).iter().filter(filter_fn)\n@@ -2386,16 +2390,18 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n-    pub fn get_attr(self, did: DefId, attr: Symbol) -> Option<&'tcx ast::Attribute> {\n+    pub fn get_attr(self, did: impl Into<DefId>, attr: Symbol) -> Option<&'tcx ast::Attribute> {\n         if cfg!(debug_assertions) && !rustc_feature::is_valid_for_get_attr(attr) {\n+            let did: DefId = did.into();\n             bug!(\"get_attr: unexpected called with DefId `{:?}`, attr `{:?}`\", did, attr);\n         } else {\n             self.get_attrs(did, attr).next()\n         }\n     }\n \n     /// Determines whether an item is annotated with an attribute.\n-    pub fn has_attr(self, did: DefId, attr: Symbol) -> bool {\n+    pub fn has_attr(self, did: impl Into<DefId>, attr: Symbol) -> bool {\n+        let did: DefId = did.into();\n         if cfg!(debug_assertions) && !did.is_local() && rustc_feature::is_builtin_only_local(attr) {\n             bug!(\"tried to access the `only_local` attribute `{}` from an extern crate\", attr);\n         } else {"}, {"sha": "3cf28408f690f4e119ba4276db73cb907166c00b", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -151,6 +151,24 @@ macro_rules! query_if_arena {\n     };\n }\n \n+macro_rules! separate_provide_local_decl {\n+    ([][$name:ident]) => {\n+        for<'tcx> fn(\n+            TyCtxt<'tcx>,\n+            query_keys::$name<'tcx>,\n+        ) -> query_provided::$name<'tcx>\n+    };\n+    ([(separate_provide_extern) $($rest:tt)*][$name:ident]) => {\n+        for<'tcx> fn(\n+            TyCtxt<'tcx>,\n+            query_keys_local::$name<'tcx>,\n+        ) -> query_provided::$name<'tcx>\n+    };\n+    ([$other:tt $($modifiers:tt)*][$($args:tt)*]) => {\n+        separate_provide_local_decl!([$($modifiers)*][$($args)*])\n+    };\n+}\n+\n macro_rules! separate_provide_extern_decl {\n     ([][$name:ident]) => {\n         ()\n@@ -212,6 +230,12 @@ macro_rules! define_callbacks {\n             $(pub type $name<'tcx> = $($K)*;)*\n         }\n         #[allow(nonstandard_style, unused_lifetimes)]\n+        pub mod query_keys_local {\n+            use super::*;\n+\n+            $(pub type $name<'tcx> = <$($K)* as Key>::LocalKey;)*\n+        }\n+        #[allow(nonstandard_style, unused_lifetimes)]\n         pub mod query_values {\n             use super::*;\n \n@@ -383,10 +407,7 @@ macro_rules! define_callbacks {\n         }\n \n         pub struct Providers {\n-            $(pub $name: for<'tcx> fn(\n-                TyCtxt<'tcx>,\n-                query_keys::$name<'tcx>,\n-            ) -> query_provided::$name<'tcx>,)*\n+            $(pub $name: separate_provide_local_decl!([$($modifiers)*][$name]),)*\n         }\n \n         pub struct ExternProviders {\n@@ -405,7 +426,7 @@ macro_rules! define_callbacks {\n                         If that's not the case, {} was likely never assigned to a provider function.\\n\",\n                         stringify!($name),\n                         key,\n-                        if key.query_crate_is_local() { \"local\" } else { \"external\" },\n+                        if key.as_local_key().is_some() { \"local\" } else { \"external\" },\n                         stringify!($name),\n                     ),)*\n                 }"}, {"sha": "dcd9743196e1db0977247bd894ce8a5372b6c6a8", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -15,7 +15,7 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_index::bit_set::GrowableBitSet;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_macros::HashStable;\n@@ -1439,8 +1439,7 @@ pub fn reveal_opaque_types_in_bounds<'tcx>(\n }\n \n /// Determines whether an item is annotated with `doc(hidden)`.\n-fn is_doc_hidden(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n-    assert!(def_id.is_local());\n+fn is_doc_hidden(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool {\n     tcx.get_attrs(def_id, sym::doc)\n         .filter_map(|attr| attr.meta_item_list())\n         .any(|items| items.iter().any(|item| item.has_name(sym::hidden)))\n@@ -1454,7 +1453,7 @@ pub fn is_doc_notable_trait(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n }\n \n /// Determines whether an item is an intrinsic by Abi.\n-pub fn is_intrinsic(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n+pub fn is_intrinsic(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool {\n     matches!(tcx.fn_sig(def_id).skip_binder().abi(), Abi::RustIntrinsic | Abi::PlatformIntrinsic)\n }\n "}, {"sha": "e5c3fa5646a737db238ece801f5513300d49a02c", "filename": "compiler/rustc_mir_transform/src/deduce_param_attrs.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_mir_transform%2Fsrc%2Fdeduce_param_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_mir_transform%2Fsrc%2Fdeduce_param_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdeduce_param_attrs.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -5,7 +5,7 @@\n //! purposes on a best-effort basis. We compute them here and store them into the crate metadata so\n //! dependent crates can use them.\n \n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::LocalDefId;\n use rustc_index::bit_set::BitSet;\n use rustc_middle::mir::visit::{NonMutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::{Body, Local, Location, Operand, Terminator, TerminatorKind, RETURN_PLACE};\n@@ -149,7 +149,10 @@ fn type_will_always_be_passed_directly(ty: Ty<'_>) -> bool {\n /// body of the function instead of just the signature. These can be useful for optimization\n /// purposes on a best-effort basis. We compute them here and store them into the crate metadata so\n /// dependent crates can use them.\n-pub fn deduced_param_attrs<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx [DeducedParamAttrs] {\n+pub fn deduced_param_attrs<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    def_id: LocalDefId,\n+) -> &'tcx [DeducedParamAttrs] {\n     // This computation is unfortunately rather expensive, so don't do it unless we're optimizing.\n     // Also skip it in incremental mode.\n     if tcx.sess.opts.optimize == OptLevel::No || tcx.sess.opts.incremental.is_some() {\n@@ -182,10 +185,6 @@ pub fn deduced_param_attrs<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx [Ded\n         return &[];\n     }\n \n-    // Deduced attributes for other crates should be read from the metadata instead of via this\n-    // function.\n-    debug_assert!(def_id.is_local());\n-\n     // Grab the optimized MIR. Analyze it to determine which arguments have been mutated.\n     let body: &Body<'tcx> = tcx.optimized_mir(def_id);\n     let mut deduce_read_only = DeduceReadOnly::new(body.arg_count);"}, {"sha": "1a9b1b8090b8bf4247fd6a8008610475b18fda2e", "filename": "compiler/rustc_mir_transform/src/ffi_unwind_calls.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_mir_transform%2Fsrc%2Fffi_unwind_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_mir_transform%2Fsrc%2Fffi_unwind_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fffi_unwind_calls.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -1,4 +1,4 @@\n-use rustc_hir::def_id::{CrateNum, LocalDefId, LOCAL_CRATE};\n+use rustc_hir::def_id::{LocalDefId, LOCAL_CRATE};\n use rustc_middle::mir::*;\n use rustc_middle::ty::layout;\n use rustc_middle::ty::query::Providers;\n@@ -121,9 +121,7 @@ fn has_ffi_unwind_calls(tcx: TyCtxt<'_>, local_def_id: LocalDefId) -> bool {\n     tainted\n }\n \n-fn required_panic_strategy(tcx: TyCtxt<'_>, cnum: CrateNum) -> Option<PanicStrategy> {\n-    assert_eq!(cnum, LOCAL_CRATE);\n-\n+fn required_panic_strategy(tcx: TyCtxt<'_>, (): ()) -> Option<PanicStrategy> {\n     if tcx.is_panic_runtime(LOCAL_CRATE) {\n         return Some(tcx.sess.panic_strategy());\n     }"}, {"sha": "8a6360114dc5489c4abf1dbee285c3587754442c", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -70,7 +70,7 @@ use rustc_mir_dataflow::impls::{\n };\n use rustc_mir_dataflow::storage::always_storage_live_locals;\n use rustc_mir_dataflow::{self, Analysis};\n-use rustc_span::def_id::DefId;\n+use rustc_span::def_id::{DefId, LocalDefId};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use rustc_target::abi::VariantIdx;\n@@ -1386,10 +1386,9 @@ fn create_cases<'tcx>(\n #[instrument(level = \"debug\", skip(tcx), ret)]\n pub(crate) fn mir_generator_witnesses<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    def_id: DefId,\n+    def_id: LocalDefId,\n ) -> GeneratorLayout<'tcx> {\n     assert!(tcx.sess.opts.unstable_opts.drop_tracking_mir);\n-    let def_id = def_id.expect_local();\n \n     let (body, _) = tcx.mir_promoted(ty::WithOptConstParam::unknown(def_id));\n     let body = body.borrow();"}, {"sha": "3a515fe8323e9ddafd031b10f8698f9b94bc7863", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -112,7 +112,6 @@ pub fn provide(providers: &mut Providers) {\n         mir_keys,\n         mir_const,\n         mir_const_qualif: |tcx, def_id| {\n-            let def_id = def_id.expect_local();\n             if let Some(def) = ty::WithOptConstParam::try_lookup(def_id, tcx) {\n                 tcx.mir_const_qualif_const_arg(def)\n             } else {\n@@ -133,7 +132,6 @@ pub fn provide(providers: &mut Providers) {\n         mir_callgraph_reachable: inline::cycle::mir_callgraph_reachable,\n         mir_inliner_callees: inline::cycle::mir_inliner_callees,\n         promoted_mir: |tcx, def_id| {\n-            let def_id = def_id.expect_local();\n             if let Some(def) = ty::WithOptConstParam::try_lookup(def_id, tcx) {\n                 tcx.promoted_mir_of_const_arg(def)\n             } else {\n@@ -206,8 +204,7 @@ fn remap_mir_for_const_eval_select<'tcx>(\n     body\n }\n \n-fn is_mir_available(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n-    let def_id = def_id.expect_local();\n+fn is_mir_available(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool {\n     tcx.mir_keys(()).contains(&def_id)\n }\n \n@@ -350,12 +347,11 @@ fn mir_promoted(\n }\n \n /// Compute the MIR that is used during CTFE (and thus has no optimizations run on it)\n-fn mir_for_ctfe(tcx: TyCtxt<'_>, def_id: DefId) -> &Body<'_> {\n-    let did = def_id.expect_local();\n-    if let Some(def) = ty::WithOptConstParam::try_lookup(did, tcx) {\n+fn mir_for_ctfe(tcx: TyCtxt<'_>, def_id: LocalDefId) -> &Body<'_> {\n+    if let Some(def) = ty::WithOptConstParam::try_lookup(def_id, tcx) {\n         tcx.mir_for_ctfe_of_const_arg(def)\n     } else {\n-        tcx.arena.alloc(inner_mir_for_ctfe(tcx, ty::WithOptConstParam::unknown(did)))\n+        tcx.arena.alloc(inner_mir_for_ctfe(tcx, ty::WithOptConstParam::unknown(def_id)))\n     }\n }\n \n@@ -599,8 +595,7 @@ fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n }\n \n /// Optimize the MIR and prepare it for codegen.\n-fn optimized_mir(tcx: TyCtxt<'_>, did: DefId) -> &Body<'_> {\n-    let did = did.expect_local();\n+fn optimized_mir(tcx: TyCtxt<'_>, did: LocalDefId) -> &Body<'_> {\n     assert_eq!(ty::WithOptConstParam::try_lookup(did, tcx), None);\n     tcx.arena.alloc(inner_optimized_mir(tcx, did))\n }"}, {"sha": "30dd3e4d016996a30c0e4ad621bfe60e456b4740", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -104,9 +104,7 @@ impl<'tcx> CheckConstVisitor<'tcx> {\n \n             // If this crate is not using stability attributes, or this function is not claiming to be a\n             // stable `const fn`, that is all that is required.\n-            if !tcx.features().staged_api\n-                || tcx.has_attr(def_id.to_def_id(), sym::rustc_const_unstable)\n-            {\n+            if !tcx.features().staged_api || tcx.has_attr(def_id, sym::rustc_const_unstable) {\n                 return true;\n             }\n "}, {"sha": "75ce446e6b44faf1591e191b7c31c2237755b9be", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -469,9 +469,9 @@ impl<'tcx> Visitor<'tcx> for MarkSymbolVisitor<'tcx> {\n \n fn has_allow_dead_code_or_lang_attr(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool {\n     fn has_lang_attr(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool {\n-        tcx.has_attr(def_id.to_def_id(), sym::lang)\n+        tcx.has_attr(def_id, sym::lang)\n             // Stable attribute for #[lang = \"panic_impl\"]\n-            || tcx.has_attr(def_id.to_def_id(), sym::panic_handler)\n+            || tcx.has_attr(def_id, sym::panic_handler)\n     }\n \n     fn has_allow_dead_code(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool {"}, {"sha": "9c7a3605d080ee8f2453c7891a73eed3e3684050", "filename": "compiler/rustc_passes/src/debugger_visualizer.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_passes%2Fsrc%2Fdebugger_visualizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_passes%2Fsrc%2Fdebugger_visualizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdebugger_visualizer.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -4,11 +4,9 @@ use hir::CRATE_HIR_ID;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_expand::base::resolve_path;\n use rustc_hir as hir;\n-use rustc_hir::def_id::CrateNum;\n use rustc_hir::HirId;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n-use rustc_span::def_id::LOCAL_CRATE;\n use rustc_span::{sym, DebuggerVisualizerFile, DebuggerVisualizerType};\n \n use std::sync::Arc;\n@@ -69,9 +67,7 @@ fn check_for_debugger_visualizer(\n }\n \n /// Traverses and collects the debugger visualizers for a specific crate.\n-fn debugger_visualizers(tcx: TyCtxt<'_>, cnum: CrateNum) -> Vec<DebuggerVisualizerFile> {\n-    assert_eq!(cnum, LOCAL_CRATE);\n-\n+fn debugger_visualizers(tcx: TyCtxt<'_>, (): ()) -> Vec<DebuggerVisualizerFile> {\n     // Initialize the collector.\n     let mut debugger_visualizers = FxHashSet::default();\n "}, {"sha": "b74fad66c0f0a89848f57ec58fa9e0228eed936f", "filename": "compiler/rustc_passes/src/diagnostic_items.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -14,7 +14,7 @@ use rustc_hir::diagnostic_items::DiagnosticItems;\n use rustc_hir::OwnerId;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n-use rustc_span::def_id::{CrateNum, DefId, LOCAL_CRATE};\n+use rustc_span::def_id::{DefId, LOCAL_CRATE};\n use rustc_span::symbol::{sym, Symbol};\n \n use crate::errors::DuplicateDiagnosticItemInCrate;\n@@ -62,9 +62,7 @@ fn extract(attrs: &[ast::Attribute]) -> Option<Symbol> {\n }\n \n /// Traverse and collect the diagnostic items in the current\n-fn diagnostic_items(tcx: TyCtxt<'_>, cnum: CrateNum) -> DiagnosticItems {\n-    assert_eq!(cnum, LOCAL_CRATE);\n-\n+fn diagnostic_items(tcx: TyCtxt<'_>, (): ()) -> DiagnosticItems {\n     // Initialize the collector.\n     let mut diagnostic_items = DiagnosticItems::default();\n "}, {"sha": "5a1ae808e661a937d708b8e484d3f911ae36edfc", "filename": "compiler/rustc_passes/src/layout_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_passes%2Fsrc%2Flayout_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_passes%2Fsrc%2Flayout_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flayout_test.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -18,7 +18,7 @@ pub fn test_layout(tcx: TyCtxt<'_>) {\n                 tcx.def_kind(id.owner_id),\n                 DefKind::TyAlias | DefKind::Enum | DefKind::Struct | DefKind::Union\n             ) {\n-                for attr in tcx.get_attrs(id.owner_id.to_def_id(), sym::rustc_layout) {\n+                for attr in tcx.get_attrs(id.owner_id, sym::rustc_layout) {\n                     dump_layout_of(tcx, id.owner_id.def_id, attr);\n                 }\n             }"}, {"sha": "a8471ce3b6fb2c6fac7aa6c5aadf085b7afce6a3", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -146,7 +146,7 @@ fn check_liveness(tcx: TyCtxt<'_>, def_id: DefId) {\n     // Don't run unused pass for #[derive()]\n     let parent = tcx.local_parent(local_def_id);\n     if let DefKind::Impl { .. } = tcx.def_kind(parent)\n-        && tcx.has_attr(parent.to_def_id(), sym::automatically_derived)\n+        && tcx.has_attr(parent, sym::automatically_derived)\n     {\n         return;\n     }"}, {"sha": "c398467f03ef825097f509007274b6916b404c42", "filename": "compiler/rustc_passes/src/naked_functions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -30,7 +30,7 @@ fn check_mod_naked_functions(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n             continue;\n         }\n \n-        let naked = tcx.has_attr(def_id.to_def_id(), sym::naked);\n+        let naked = tcx.has_attr(def_id, sym::naked);\n         if !naked {\n             continue;\n         }\n@@ -59,7 +59,7 @@ fn check_mod_naked_functions(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n \n /// Check that the function isn't inlined.\n fn check_inline(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n-    let attrs = tcx.get_attrs(def_id.to_def_id(), sym::inline);\n+    let attrs = tcx.get_attrs(def_id, sym::inline);\n     for attr in attrs {\n         tcx.sess.emit_err(CannotInlineNakedFunction { span: attr.span });\n     }"}, {"sha": "6d0cfea00d1fdf4e04f50e73cc84768e5e4acba1", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -691,14 +691,10 @@ pub(crate) fn provide(providers: &mut Providers) {\n         check_mod_unstable_api_usage,\n         stability_index,\n         stability_implications: |tcx, _| tcx.stability().implications.clone(),\n-        lookup_stability: |tcx, id| tcx.stability().local_stability(id.expect_local()),\n-        lookup_const_stability: |tcx, id| tcx.stability().local_const_stability(id.expect_local()),\n-        lookup_default_body_stability: |tcx, id| {\n-            tcx.stability().local_default_body_stability(id.expect_local())\n-        },\n-        lookup_deprecation_entry: |tcx, id| {\n-            tcx.stability().local_deprecation_entry(id.expect_local())\n-        },\n+        lookup_stability: |tcx, id| tcx.stability().local_stability(id),\n+        lookup_const_stability: |tcx, id| tcx.stability().local_const_stability(id),\n+        lookup_default_body_stability: |tcx, id| tcx.stability().local_default_body_stability(id),\n+        lookup_deprecation_entry: |tcx, id| tcx.stability().local_deprecation_entry(id),\n         ..*providers\n     };\n }"}, {"sha": "d884ebd9acc73b9154e0ea7f03beca7681a8b552", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -920,7 +920,7 @@ pub struct TestReachabilityVisitor<'tcx, 'a> {\n \n impl<'tcx, 'a> TestReachabilityVisitor<'tcx, 'a> {\n     fn effective_visibility_diagnostic(&mut self, def_id: LocalDefId) {\n-        if self.tcx.has_attr(def_id.to_def_id(), sym::rustc_effective_visibility) {\n+        if self.tcx.has_attr(def_id, sym::rustc_effective_visibility) {\n             let mut error_msg = String::new();\n             let span = self.tcx.def_span(def_id.to_def_id());\n             if let Some(effective_vis) = self.effective_visibilities.effective_vis(def_id) {\n@@ -2060,8 +2060,8 @@ pub fn provide(providers: &mut Providers) {\n     };\n }\n \n-fn visibility(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Visibility<DefId> {\n-    local_visibility(tcx, def_id.expect_local()).to_def_id()\n+fn visibility(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::Visibility<DefId> {\n+    local_visibility(tcx, def_id).to_def_id()\n }\n \n fn local_visibility(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::Visibility {"}, {"sha": "9bba26cc8e846359d64249377ccc644e9c1f27c1", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -274,19 +274,19 @@ macro_rules! hash_result {\n     };\n }\n \n-macro_rules! get_provider {\n-    ([][$tcx:expr, $name:ident, $key:expr]) => {{\n-        $tcx.queries.local_providers.$name\n+macro_rules! call_provider {\n+    ([][$qcx:expr, $name:ident, $key:expr]) => {{\n+        ($qcx.queries.local_providers.$name)($qcx.tcx, $key)\n     }};\n-    ([(separate_provide_extern) $($rest:tt)*][$tcx:expr, $name:ident, $key:expr]) => {{\n-        if $key.query_crate_is_local() {\n-            $tcx.queries.local_providers.$name\n+    ([(separate_provide_extern) $($rest:tt)*][$qcx:expr, $name:ident, $key:expr]) => {{\n+        if let Some(key) = $key.as_local_key() {\n+            ($qcx.queries.local_providers.$name)($qcx.tcx, key)\n         } else {\n-            $tcx.queries.extern_providers.$name\n+            ($qcx.queries.extern_providers.$name)($qcx.tcx, $key)\n         }\n     }};\n     ([$other:tt $($modifiers:tt)*][$($args:tt)*]) => {\n-        get_provider!([$($modifiers)*][$($args)*])\n+        call_provider!([$($modifiers)*][$($args)*])\n     };\n }\n \n@@ -516,7 +516,7 @@ macro_rules! define_queries {\n             fn compute(self, qcx: QueryCtxt<'tcx>, key: Self::Key) -> Self::Value {\n                 query_provided_to_value::$name(\n                     qcx.tcx,\n-                    get_provider!([$($modifiers)*][qcx, $name, key])(qcx.tcx, key)\n+                    call_provider!([$($modifiers)*][qcx, $name, key])\n                 )\n             }\n "}, {"sha": "b4d5b7f3621c8556011f0fe0d7f9c472c4e1fce2", "filename": "compiler/rustc_symbol_mangling/src/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -53,7 +53,7 @@ impl SymbolNamesTest<'_> {\n         // The formatting of `tag({})` is chosen so that tests can elect\n         // to test the entirety of the string, if they choose, or else just\n         // some subset.\n-        for attr in tcx.get_attrs(def_id.to_def_id(), SYMBOL_NAME) {\n+        for attr in tcx.get_attrs(def_id, SYMBOL_NAME) {\n             let def_id = def_id.to_def_id();\n             let instance = Instance::new(\n                 def_id,\n@@ -79,7 +79,7 @@ impl SymbolNamesTest<'_> {\n             }\n         }\n \n-        for attr in tcx.get_attrs(def_id.to_def_id(), DEF_PATH) {\n+        for attr in tcx.get_attrs(def_id, DEF_PATH) {\n             tcx.sess.emit_err(TestOutput {\n                 span: attr.span,\n                 kind: Kind::DefPath,"}, {"sha": "404ebacc15e735c596e00f5ff1fa942eed9b3e3d", "filename": "compiler/rustc_ty_utils/src/assoc.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -18,8 +18,8 @@ pub fn provide(providers: &mut ty::query::Providers) {\n     };\n }\n \n-fn associated_item_def_ids(tcx: TyCtxt<'_>, def_id: DefId) -> &[DefId] {\n-    let item = tcx.hir().expect_item(def_id.expect_local());\n+fn associated_item_def_ids(tcx: TyCtxt<'_>, def_id: LocalDefId) -> &[DefId] {\n+    let item = tcx.hir().expect_item(def_id);\n     match item.kind {\n         hir::ItemKind::Trait(.., ref trait_item_refs) => {\n             if tcx.lower_impl_trait_in_trait_to_assoc_ty() {\n@@ -107,27 +107,26 @@ fn impl_item_implementor_ids(tcx: TyCtxt<'_>, impl_id: DefId) -> DefIdMap<DefId>\n         .collect()\n }\n \n-fn associated_item(tcx: TyCtxt<'_>, def_id: DefId) -> ty::AssocItem {\n-    let id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n+fn associated_item(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::AssocItem {\n+    let id = tcx.hir().local_def_id_to_hir_id(def_id);\n     let parent_def_id = tcx.hir().get_parent_item(id);\n     let parent_item = tcx.hir().expect_item(parent_def_id.def_id);\n     match parent_item.kind {\n         hir::ItemKind::Impl(ref impl_) => {\n-            if let Some(impl_item_ref) =\n-                impl_.items.iter().find(|i| i.id.owner_id.to_def_id() == def_id)\n+            if let Some(impl_item_ref) = impl_.items.iter().find(|i| i.id.owner_id.def_id == def_id)\n             {\n                 let assoc_item = associated_item_from_impl_item_ref(impl_item_ref);\n-                debug_assert_eq!(assoc_item.def_id, def_id);\n+                debug_assert_eq!(assoc_item.def_id.expect_local(), def_id);\n                 return assoc_item;\n             }\n         }\n \n         hir::ItemKind::Trait(.., ref trait_item_refs) => {\n             if let Some(trait_item_ref) =\n-                trait_item_refs.iter().find(|i| i.id.owner_id.to_def_id() == def_id)\n+                trait_item_refs.iter().find(|i| i.id.owner_id.def_id == def_id)\n             {\n                 let assoc_item = associated_item_from_trait_item_ref(trait_item_ref);\n-                debug_assert_eq!(assoc_item.def_id, def_id);\n+                debug_assert_eq!(assoc_item.def_id.expect_local(), def_id);\n                 return assoc_item;\n             }\n         }\n@@ -191,9 +190,9 @@ fn associated_item_from_impl_item_ref(impl_item_ref: &hir::ImplItemRef) -> ty::A\n /// above, synthesize a corresponding associated type in the impl.\n fn associated_types_for_impl_traits_in_associated_fn(\n     tcx: TyCtxt<'_>,\n-    fn_def_id: DefId,\n+    fn_def_id: LocalDefId,\n ) -> &'_ [DefId] {\n-    let parent_def_id = tcx.parent(fn_def_id);\n+    let parent_def_id = tcx.local_parent(fn_def_id);\n \n     match tcx.def_kind(parent_def_id) {\n         DefKind::Trait => {\n@@ -212,7 +211,7 @@ fn associated_types_for_impl_traits_in_associated_fn(\n \n             let mut visitor = RPITVisitor { rpits: Vec::new() };\n \n-            if let Some(output) = tcx.hir().get_fn_output(fn_def_id.expect_local()) {\n+            if let Some(output) = tcx.hir().get_fn_output(fn_def_id) {\n                 visitor.visit_fn_ret_ty(output);\n \n                 tcx.arena.alloc_from_iter(visitor.rpits.iter().map(|opaque_ty_def_id| {\n@@ -232,7 +231,7 @@ fn associated_types_for_impl_traits_in_associated_fn(\n                         associated_type_for_impl_trait_in_impl(\n                             tcx,\n                             trait_assoc_def_id.expect_local(),\n-                            fn_def_id.expect_local(),\n+                            fn_def_id,\n                         )\n                         .to_def_id()\n                     },"}, {"sha": "4d0fd260de2fea8ccd92725e5b01d733ec914b2c", "filename": "compiler/rustc_ty_utils/src/consts.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -425,7 +425,6 @@ pub fn provide(providers: &mut ty::query::Providers) {\n     *providers = ty::query::Providers {\n         destructure_const,\n         thir_abstract_const: |tcx, def_id| {\n-            let def_id = def_id.expect_local();\n             if let Some(def) = ty::WithOptConstParam::try_lookup(def_id, tcx) {\n                 tcx.thir_abstract_const_of_const_arg(def)\n             } else {"}, {"sha": "26d6deab883eb7d380d0b2bf2624ad029659374c", "filename": "compiler/rustc_ty_utils/src/representability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_ty_utils%2Fsrc%2Frepresentability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_ty_utils%2Fsrc%2Frepresentability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Frepresentability.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -4,7 +4,7 @@ use rustc_hir::def::DefKind;\n use rustc_index::bit_set::BitSet;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, Representability, Ty, TyCtxt};\n-use rustc_span::def_id::{DefId, LocalDefId};\n+use rustc_span::def_id::LocalDefId;\n \n pub fn provide(providers: &mut Providers) {\n     *providers =\n@@ -85,7 +85,7 @@ fn representability_adt_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> Representab\n     Representability::Representable\n }\n \n-fn params_in_repr(tcx: TyCtxt<'_>, def_id: DefId) -> BitSet<u32> {\n+fn params_in_repr(tcx: TyCtxt<'_>, def_id: LocalDefId) -> BitSet<u32> {\n     let adt_def = tcx.adt_def(def_id);\n     let generics = tcx.generics_of(def_id);\n     let mut params_in_repr = BitSet::new_empty(generics.params.len());"}, {"sha": "70686eefbca01882de882077f3907281b28e7fef", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -7,10 +7,8 @@ use rustc_middle::ty::{\n     TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor,\n };\n use rustc_session::config::TraitSolver;\n-use rustc_span::{\n-    def_id::{DefId, CRATE_DEF_ID},\n-    DUMMY_SP,\n-};\n+use rustc_span::def_id::{DefId, LocalDefId, CRATE_DEF_ID};\n+use rustc_span::DUMMY_SP;\n use rustc_trait_selection::traits;\n \n fn sized_constraint_for_ty<'tcx>(\n@@ -79,8 +77,8 @@ fn sized_constraint_for_ty<'tcx>(\n     result\n }\n \n-fn impl_defaultness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::Defaultness {\n-    match tcx.hir().get_by_def_id(def_id.expect_local()) {\n+fn impl_defaultness(tcx: TyCtxt<'_>, def_id: LocalDefId) -> hir::Defaultness {\n+    match tcx.hir().get_by_def_id(def_id) {\n         hir::Node::Item(hir::Item { kind: hir::ItemKind::Impl(impl_), .. }) => impl_.defaultness,\n         hir::Node::ImplItem(hir::ImplItem { defaultness, .. })\n         | hir::Node::TraitItem(hir::TraitItem { defaultness, .. }) => *defaultness,\n@@ -516,8 +514,8 @@ fn issue33140_self_ty(tcx: TyCtxt<'_>, def_id: DefId) -> Option<EarlyBinder<Ty<'\n }\n \n /// Check if a function is async.\n-fn asyncness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::IsAsync {\n-    let node = tcx.hir().get_by_def_id(def_id.expect_local());\n+fn asyncness(tcx: TyCtxt<'_>, def_id: LocalDefId) -> hir::IsAsync {\n+    let node = tcx.hir().get_by_def_id(def_id);\n     node.fn_sig().map_or(hir::IsAsync::NotAsync, |sig| sig.header.asyncness)\n }\n "}, {"sha": "a8926b29ac83f3de4694c7e69aaf2328fe58c3e7", "filename": "src/tools/clippy/clippy_lints/src/cognitive_complexity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcognitive_complexity.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -143,7 +143,7 @@ impl<'tcx> LateLintPass<'tcx> for CognitiveComplexity {\n         span: Span,\n         def_id: LocalDefId,\n     ) {\n-        if !cx.tcx.has_attr(def_id.to_def_id(), sym::test) {\n+        if !cx.tcx.has_attr(def_id, sym::test) {\n             let expr = if is_async_fn(kind) {\n                 match get_async_fn_body(cx.tcx, body) {\n                     Some(b) => b,"}, {"sha": "8f68f90a2a130ccc8ce1fe4b690297f0ce8efab8", "filename": "src/tools/clippy/clippy_lints/src/derivable_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderivable_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderivable_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderivable_impls.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -181,7 +181,7 @@ impl<'tcx> LateLintPass<'tcx> for DerivableImpls {\n                 self_ty,\n                 ..\n             }) = item.kind;\n-            if !cx.tcx.has_attr(item.owner_id.to_def_id(), sym::automatically_derived);\n+            if !cx.tcx.has_attr(item.owner_id, sym::automatically_derived);\n             if !item.span.from_expansion();\n             if let Some(def_id) = trait_ref.trait_def_id();\n             if cx.tcx.is_diagnostic_item(sym::Default, def_id);"}, {"sha": "715348e869ef9ae38fea8212cf1ad86f2e071608", "filename": "src/tools/clippy/clippy_lints/src/derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -212,7 +212,7 @@ impl<'tcx> LateLintPass<'tcx> for Derive {\n         }) = item.kind\n         {\n             let ty = cx.tcx.type_of(item.owner_id).subst_identity();\n-            let is_automatically_derived = cx.tcx.has_attr(item.owner_id.to_def_id(), sym::automatically_derived);\n+            let is_automatically_derived = cx.tcx.has_attr(item.owner_id, sym::automatically_derived);\n \n             check_hash_peq(cx, item.span, trait_ref, ty, is_automatically_derived);\n             check_ord_partial_ord(cx, item.span, trait_ref, ty, is_automatically_derived);"}, {"sha": "eacbf6c6ec9b6ee36750b438bc2b3cca84e8c338", "filename": "src/tools/clippy/clippy_lints/src/functions/must_use.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -22,7 +22,7 @@ use super::{DOUBLE_MUST_USE, MUST_USE_CANDIDATE, MUST_USE_UNIT};\n \n pub(super) fn check_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n     let attrs = cx.tcx.hir().attrs(item.hir_id());\n-    let attr = cx.tcx.get_attr(item.owner_id.to_def_id(), sym::must_use);\n+    let attr = cx.tcx.get_attr(item.owner_id, sym::must_use);\n     if let hir::ItemKind::Fn(ref sig, _generics, ref body_id) = item.kind {\n         let is_public = cx.effective_visibilities.is_exported(item.owner_id.def_id);\n         let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n@@ -47,7 +47,7 @@ pub(super) fn check_impl_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Imp\n         let is_public = cx.effective_visibilities.is_exported(item.owner_id.def_id);\n         let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n         let attrs = cx.tcx.hir().attrs(item.hir_id());\n-        let attr = cx.tcx.get_attr(item.owner_id.to_def_id(), sym::must_use);\n+        let attr = cx.tcx.get_attr(item.owner_id, sym::must_use);\n         if let Some(attr) = attr {\n             check_needless_must_use(cx, sig.decl, item.owner_id, item.span, fn_header_span, attr);\n         } else if is_public\n@@ -73,7 +73,7 @@ pub(super) fn check_trait_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Tr\n         let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n \n         let attrs = cx.tcx.hir().attrs(item.hir_id());\n-        let attr = cx.tcx.get_attr(item.owner_id.to_def_id(), sym::must_use);\n+        let attr = cx.tcx.get_attr(item.owner_id, sym::must_use);\n         if let Some(attr) = attr {\n             check_needless_must_use(cx, sig.decl, item.owner_id, item.span, fn_header_span, attr);\n         } else if let hir::TraitFn::Provided(eid) = *eid {"}, {"sha": "a8c4823fe53889d643d2ebbde602cf5037170ab7", "filename": "src/tools/clippy/clippy_lints/src/partialeq_ne_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -36,7 +36,7 @@ impl<'tcx> LateLintPass<'tcx> for PartialEqNeImpl {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n         if_chain! {\n             if let ItemKind::Impl(Impl { of_trait: Some(ref trait_ref), items: impl_items, .. }) = item.kind;\n-            if !cx.tcx.has_attr(item.owner_id.to_def_id(), sym::automatically_derived);\n+            if !cx.tcx.has_attr(item.owner_id, sym::automatically_derived);\n             if let Some(eq_trait) = cx.tcx.lang_items().eq_trait();\n             if trait_ref.path.res.def_id() == eq_trait;\n             then {"}, {"sha": "b6f6ac10fd7736980d0ec93f3b26693bc05a82a0", "filename": "src/tools/miri/src/bin/miri.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb1c08e433aadf2362a65f2ef1387670a6d34cf/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs?ref=2eb1c08e433aadf2362a65f2ef1387670a6d34cf", "patch": "@@ -22,7 +22,7 @@ use log::debug;\n \n use rustc_data_structures::sync::Lrc;\n use rustc_driver::Compilation;\n-use rustc_hir::{self as hir, def_id::LOCAL_CRATE, Node};\n+use rustc_hir::{self as hir, Node};\n use rustc_interface::interface::Config;\n use rustc_middle::{\n     middle::exported_symbols::{\n@@ -107,8 +107,7 @@ impl rustc_driver::Callbacks for MiriBeRustCompilerCalls {\n             config.override_queries = Some(|_, local_providers, _| {\n                 // `exported_symbols` and `reachable_non_generics` provided by rustc always returns\n                 // an empty result if `tcx.sess.opts.output_types.should_codegen()` is false.\n-                local_providers.exported_symbols = |tcx, cnum| {\n-                    assert_eq!(cnum, LOCAL_CRATE);\n+                local_providers.exported_symbols = |tcx, ()| {\n                     let reachable_set = tcx.with_stable_hashing_context(|hcx| {\n                         tcx.reachable_set(()).to_sorted(&hcx, true)\n                     });"}]}