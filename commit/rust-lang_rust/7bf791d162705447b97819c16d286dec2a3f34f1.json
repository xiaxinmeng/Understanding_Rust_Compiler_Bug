{"sha": "7bf791d162705447b97819c16d286dec2a3f34f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiZjc5MWQxNjI3MDU0NDdiOTc4MTljMTZkMjg2ZGVjMmEzZjM0ZjE=", "commit": {"author": {"name": "Jacob Pratt", "email": "jacob@jhpratt.dev", "date": "2021-06-03T06:16:56Z"}, "committer": {"name": "Jacob Pratt", "email": "jacob@jhpratt.dev", "date": "2021-07-27T20:03:33Z"}, "message": "Stabilize `const_fn_union`", "tree": {"sha": "1abc5e1bd9283ff169896d964ff72213b921964e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1abc5e1bd9283ff169896d964ff72213b921964e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bf791d162705447b97819c16d286dec2a3f34f1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQTgxeqBxcDGar1sVhy4DhnkZitapAUCYQBmlgAKCRC4DhnkZita\npOozAQCxNamlu6oKbNbC8bsY3Y8prAt1YzBQ6y1XDJ4aLmsLlwD+OXMQ38SJOIOg\nAn52srQwNzyfwby4KiDbOP+Kt7nb1QM=\n=l+zt\n-----END PGP SIGNATURE-----", "payload": "tree 1abc5e1bd9283ff169896d964ff72213b921964e\nparent 36f02f352392f216d778808818d0e4ed56714f3c\nauthor Jacob Pratt <jacob@jhpratt.dev> 1622701016 -0400\ncommitter Jacob Pratt <jacob@jhpratt.dev> 1627416213 -0400\n\nStabilize `const_fn_union`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bf791d162705447b97819c16d286dec2a3f34f1", "html_url": "https://github.com/rust-lang/rust/commit/7bf791d162705447b97819c16d286dec2a3f34f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bf791d162705447b97819c16d286dec2a3f34f1/comments", "author": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36f02f352392f216d778808818d0e4ed56714f3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/36f02f352392f216d778808818d0e4ed56714f3c", "html_url": "https://github.com/rust-lang/rust/commit/36f02f352392f216d778808818d0e4ed56714f3c"}], "stats": {"total": 38, "additions": 5, "deletions": 33}, "files": [{"sha": "9ce5a149697f7783a292400962ee252d7017f517", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bf791d162705447b97819c16d286dec2a3f34f1/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bf791d162705447b97819c16d286dec2a3f34f1/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=7bf791d162705447b97819c16d286dec2a3f34f1", "patch": "@@ -292,6 +292,8 @@ declare_features! (\n     (accepted, bindings_after_at, \"1.54.0\", Some(65490), None),\n     /// Allows calling `transmute` in const fn\n     (accepted, const_fn_transmute, \"1.56.0\", Some(53605), None),\n+    /// Allows accessing fields of unions inside `const` functions.\n+    (accepted, const_fn_union, \"1.56.0\", Some(51909), None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: accepted features"}, {"sha": "8ab61a5d200f701850408c162986ef869f0043f5", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7bf791d162705447b97819c16d286dec2a3f34f1/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bf791d162705447b97819c16d286dec2a3f34f1/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=7bf791d162705447b97819c16d286dec2a3f34f1", "patch": "@@ -413,9 +413,6 @@ declare_features! (\n     /// Allows inferring `'static` outlives requirements (RFC 2093).\n     (active, infer_static_outlives_requirements, \"1.26.0\", Some(54185), None),\n \n-    /// Allows accessing fields of unions inside `const` functions.\n-    (active, const_fn_union, \"1.27.0\", Some(51909), None),\n-\n     /// Allows dereferencing raw pointers during const eval.\n     (active, const_raw_ptr_deref, \"1.27.0\", Some(51911), None),\n "}, {"sha": "109da59aa43800afd70f0965e66239e24b0c33e2", "filename": "compiler/rustc_mir/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7bf791d162705447b97819c16d286dec2a3f34f1/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bf791d162705447b97819c16d286dec2a3f34f1/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=7bf791d162705447b97819c16d286dec2a3f34f1", "patch": "@@ -748,12 +748,7 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n             | ProjectionElem::Downcast(..)\n             | ProjectionElem::Subslice { .. }\n             | ProjectionElem::Field(..)\n-            | ProjectionElem::Index(_) => {\n-                let base_ty = Place::ty_from(place_local, proj_base, self.body, self.tcx).ty;\n-                if base_ty.is_union() {\n-                    self.check_op(ops::UnionAccess);\n-                }\n-            }\n+            | ProjectionElem::Index(_) => {}\n         }\n     }\n "}, {"sha": "8de11fda7d75bb247c60e9c0db856aef153be6f2", "filename": "compiler/rustc_mir/src/transform/check_consts/ops.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7bf791d162705447b97819c16d286dec2a3f34f1/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bf791d162705447b97819c16d286dec2a3f34f1/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=7bf791d162705447b97819c16d286dec2a3f34f1", "patch": "@@ -501,28 +501,6 @@ impl NonConstOp for ThreadLocalAccess {\n     }\n }\n \n-#[derive(Debug)]\n-pub struct UnionAccess;\n-impl NonConstOp for UnionAccess {\n-    fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n-        // Union accesses are stable in all contexts except `const fn`.\n-        if ccx.const_kind() != hir::ConstContext::ConstFn {\n-            Status::Allowed\n-        } else {\n-            Status::Unstable(sym::const_fn_union)\n-        }\n-    }\n-\n-    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n-        feature_err(\n-            &ccx.tcx.sess.parse_sess,\n-            sym::const_fn_union,\n-            span,\n-            \"unions in const fn are unstable\",\n-        )\n-    }\n-}\n-\n // Types that cannot appear in the signature or locals of a `const fn`.\n pub mod ty {\n     use super::*;"}, {"sha": "839be5a143f711cefc102671ac554f29c850fb71", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bf791d162705447b97819c16d286dec2a3f34f1/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bf791d162705447b97819c16d286dec2a3f34f1/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=7bf791d162705447b97819c16d286dec2a3f34f1", "patch": "@@ -86,7 +86,7 @@\n #![feature(const_refs_to_cell)]\n #![feature(const_panic)]\n #![feature(const_pin)]\n-#![feature(const_fn_union)]\n+#![cfg_attr(bootstrap, feature(const_fn_union))]\n #![feature(const_impl_trait)]\n #![feature(const_fn_floating_point_arithmetic)]\n #![feature(const_fn_fn_ptr_basics)]"}, {"sha": "ce8050cee5b1b9f9d73fd361631a716a11424df0", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bf791d162705447b97819c16d286dec2a3f34f1/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bf791d162705447b97819c16d286dec2a3f34f1/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=7bf791d162705447b97819c16d286dec2a3f34f1", "patch": "@@ -100,7 +100,7 @@ impl<T> [T] {\n     #[rustc_const_stable(feature = \"const_slice_len\", since = \"1.39.0\")]\n     #[inline]\n     // SAFETY: const sound because we transmute out the length field as a usize (which it must be)\n-    #[rustc_allow_const_fn_unstable(const_fn_union)]\n+    #[cfg_attr(bootstrap, rustc_allow_const_fn_unstable(const_fn_union))]\n     pub const fn len(&self) -> usize {\n         // FIXME: Replace with `crate::ptr::metadata(self)` when that is const-stable.\n         // As of this writing this causes a \"Const-stable functions can only call other"}]}