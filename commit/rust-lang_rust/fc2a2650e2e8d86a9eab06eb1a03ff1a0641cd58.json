{"sha": "fc2a2650e2e8d86a9eab06eb1a03ff1a0641cd58", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMmEyNjUwZTJlOGQ4NmE5ZWFiMDZlYjFhMDNmZjFhMDY0MWNkNTg=", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-09-01T09:41:06Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-09-01T09:41:06Z"}, "message": "cleanup const generics FIXME", "tree": {"sha": "92991e6dd6189a730eee6154f9c19d7e2f7c4a3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92991e6dd6189a730eee6154f9c19d7e2f7c4a3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc2a2650e2e8d86a9eab06eb1a03ff1a0641cd58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc2a2650e2e8d86a9eab06eb1a03ff1a0641cd58", "html_url": "https://github.com/rust-lang/rust/commit/fc2a2650e2e8d86a9eab06eb1a03ff1a0641cd58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc2a2650e2e8d86a9eab06eb1a03ff1a0641cd58/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "608b5e1c209ffb4d6d0cf83817c823b12bbb7659", "url": "https://api.github.com/repos/rust-lang/rust/commits/608b5e1c209ffb4d6d0cf83817c823b12bbb7659", "html_url": "https://github.com/rust-lang/rust/commit/608b5e1c209ffb4d6d0cf83817c823b12bbb7659"}], "stats": {"total": 35, "additions": 5, "deletions": 30}, "files": [{"sha": "57b8a84300ff9e0db5464fc1759d913c0b6ae9c9", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 5, "deletions": 30, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/fc2a2650e2e8d86a9eab06eb1a03ff1a0641cd58/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2a2650e2e8d86a9eab06eb1a03ff1a0641cd58/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=fc2a2650e2e8d86a9eab06eb1a03ff1a0641cd58", "patch": "@@ -820,10 +820,10 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n             }\n         }\n \n-        fn visit_const(&mut self, ct: &ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n-            // First check if the type of this constant references `Self`.\n-            self.visit_ty(ct.ty)?;\n-\n+        fn visit_unevaluated_const(\n+            &mut self,\n+            uv: ty::Unevaluated<'tcx>,\n+        ) -> ControlFlow<Self::BreakTy> {\n             // Constants can only influence object safety if they reference `Self`.\n             // This is only possible for unevaluated constants, so we walk these here.\n             //\n@@ -837,7 +837,7 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n             // This shouldn't really matter though as we can't really use any\n             // constants which are not considered const evaluatable.\n             use rustc_middle::mir::abstract_const::Node;\n-            if let Ok(Some(ct)) = AbstractConst::from_const(self.tcx, ct) {\n+            if let Ok(Some(ct)) = AbstractConst::new(self.tcx, uv.shrink()) {\n                 const_evaluatable::walk_abstract_const(self.tcx, ct, |node| match node.root() {\n                     Node::Leaf(leaf) => {\n                         let leaf = leaf.subst(self.tcx, ct.substs);\n@@ -852,31 +852,6 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n                 ControlFlow::CONTINUE\n             }\n         }\n-\n-        fn visit_predicate(&mut self, pred: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {\n-            if let ty::PredicateKind::ConstEvaluatable(ct) = pred.kind().skip_binder() {\n-                // FIXME(generic_const_exprs): We should probably deduplicate the logic for\n-                // `AbstractConst`s here, it might make sense to change `ConstEvaluatable` to\n-                // take a `ty::Const` instead.\n-                use rustc_middle::mir::abstract_const::Node;\n-                if let Ok(Some(ct)) = AbstractConst::new(self.tcx, ct) {\n-                    const_evaluatable::walk_abstract_const(self.tcx, ct, |node| match node.root() {\n-                        Node::Leaf(leaf) => {\n-                            let leaf = leaf.subst(self.tcx, ct.substs);\n-                            self.visit_const(leaf)\n-                        }\n-                        Node::Cast(_, _, ty) => self.visit_ty(ty),\n-                        Node::Binop(..) | Node::UnaryOp(..) | Node::FunctionCall(_, _) => {\n-                            ControlFlow::CONTINUE\n-                        }\n-                    })\n-                } else {\n-                    ControlFlow::CONTINUE\n-                }\n-            } else {\n-                pred.super_visit_with(self)\n-            }\n-        }\n     }\n \n     value"}]}