{"sha": "59ebe6af187ce0504b40c177f1700b090b226625", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5ZWJlNmFmMTg3Y2UwNTA0YjQwYzE3N2YxNzAwYjA5MGIyMjY2MjU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-01-20T02:31:08Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-01-20T02:41:06Z"}, "message": "rustc: Make the pretty printer output commas after enum variants. Update all tests accordingly.", "tree": {"sha": "f0ca389b31de6fb10aefbc9cd6f76ae30f0e05f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0ca389b31de6fb10aefbc9cd6f76ae30f0e05f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59ebe6af187ce0504b40c177f1700b090b226625", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59ebe6af187ce0504b40c177f1700b090b226625", "html_url": "https://github.com/rust-lang/rust/commit/59ebe6af187ce0504b40c177f1700b090b226625", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59ebe6af187ce0504b40c177f1700b090b226625/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6278e53dce084a2b9a284026be45fdad6a07478", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6278e53dce084a2b9a284026be45fdad6a07478", "html_url": "https://github.com/rust-lang/rust/commit/c6278e53dce084a2b9a284026be45fdad6a07478"}], "stats": {"total": 270, "additions": 135, "deletions": 135}, "files": [{"sha": "a57cf3add14947add7dd5aced4158c94beb59667", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -451,7 +451,7 @@ fn print_item(s: ps, &&item: @ast::item) {\n                   }\n                   _ {}\n                 }\n-                word(s.s, \";\");\n+                word(s.s, \",\");\n                 end(s);\n                 maybe_print_trailing_comment(s, v.span, none::<uint>);\n             }"}, {"sha": "ec27e3f00547d9ead1b2068920bcd3d07cce292d", "filename": "src/test/bench/99bob-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Fbench%2F99bob-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Fbench%2F99bob-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2F99bob-pattern.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -8,7 +8,7 @@ use std;\n import int;\n import str;\n \n-enum bottle { none; dual; single; multiple(int); }\n+enum bottle { none, dual, single, multiple(int), }\n \n fn show(b: bottle) {\n     alt b {"}, {"sha": "4158238d19f3d38ba011036f661e2561763aee56", "filename": "src/test/bench/shootout-binarytrees.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,7 +1,7 @@\n use std;\n import int;\n \n-enum tree { nil; node(~tree, ~tree, int); }\n+enum tree { nil, node(~tree, ~tree, int), }\n \n fn item_check(t: ~tree) -> int {\n     alt *t {"}, {"sha": "c6896a20044f8a654a45a83bc6cb67da04480288", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -25,7 +25,7 @@ export grid_t, read_grid, solve_grid, write_grid;\n type grid = [[mutable u8]];\n \n // exported type of sudoku grids\n-enum grid_t { grid_ctor(grid); }\n+enum grid_t { grid_ctor(grid), }\n \n // read a sudoku problem from file f\n fn read_grid(f: io::reader) -> grid_t {"}, {"sha": "357b062471e61a807b1f60624fa6fe7faf5e6a46", "filename": "src/test/bench/task-perf-word-count.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -52,11 +52,11 @@ mod map_reduce {\n     type reducer = fn@(str, getter);\n \n     enum ctrl_proto {\n-        find_reducer(str, chan<chan<reduce_proto>>);\n-        mapper_done;\n+        find_reducer(str, chan<chan<reduce_proto>>),\n+        mapper_done,\n     }\n \n-    enum reduce_proto { emit_val(int); done; ref; release; }\n+    enum reduce_proto { emit_val(int), done, ref, release, }\n \n     fn start_mappers(ctrl: chan<ctrl_proto>, -inputs: [str]) ->\n        [joinable_task] {"}, {"sha": "878b872978e557fe8d1c7ba6037e101615de40fa", "filename": "src/test/compile-fail/alt-tag-nullary.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Fcompile-fail%2Falt-tag-nullary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Fcompile-fail%2Falt-tag-nullary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Falt-tag-nullary.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,7 +1,7 @@\n // error-pattern: mismatched types\n \n-enum a { A; }\n-enum b { B; }\n+enum a { A, }\n+enum b { B, }\n \n fn main() { let x: a = A; alt x { B { } } }\n "}, {"sha": "b3aec7290531de5d97f4c72fc99f58a17fafeec3", "filename": "src/test/compile-fail/alt-tag-unary.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Fcompile-fail%2Falt-tag-unary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Fcompile-fail%2Falt-tag-unary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Falt-tag-unary.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,7 +1,7 @@\n // error-pattern: mismatched types\n \n-enum a { A(int); }\n-enum b { B(int); }\n+enum a { A(int), }\n+enum b { B(int), }\n \n fn main() { let x: a = A(0); alt x { B(y) { } } }\n "}, {"sha": "449f12c26094ebefd458b2438aedfb9c6ef82bf8", "filename": "src/test/compile-fail/bogus-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Fcompile-fail%2Fbogus-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Fcompile-fail%2Fbogus-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbogus-tag.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -2,7 +2,7 @@\n \n // error-pattern: unresolved\n \n-enum color { rgb(int, int, int); rgba(int, int, int, int); }\n+enum color { rgb(int, int, int), rgba(int, int, int, int), }\n \n fn main() {\n     let red: color = rgb(255, 0, 0);"}, {"sha": "7de42bf0a0d6d9cfa944588c0abb3d2573ab45fa", "filename": "src/test/compile-fail/export-no-tag-variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Fcompile-fail%2Fexport-no-tag-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Fcompile-fail%2Fexport-no-tag-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexport-no-tag-variants.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -6,7 +6,7 @@\n mod foo {\n     export t;\n \n-    enum t { t1; }\n+    enum t { t1, }\n }\n \n fn main() { let x = foo::t1; }"}, {"sha": "7f0d7a90d38a3d1f40bfdc0b1a96eb4120710d53", "filename": "src/test/compile-fail/export-tag-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Fcompile-fail%2Fexport-tag-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Fcompile-fail%2Fexport-tag-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexport-tag-variant.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -5,7 +5,7 @@ mod foo {\n \n     fn x() { }\n \n-    enum y { y1; }\n+    enum y { y1, }\n }\n \n fn main() { let z = foo::y1; }"}, {"sha": "88ecff8be21e6be8b068887f7aa5bcc95c140ecb", "filename": "src/test/compile-fail/infinite-tag-type-recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Fcompile-fail%2Finfinite-tag-type-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Fcompile-fail%2Finfinite-tag-type-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finfinite-tag-type-recursion.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -3,6 +3,6 @@\n \n // error-pattern: enum of infinite size\n \n-enum mlist { cons(int, mlist); nil; }\n+enum mlist { cons(int, mlist), nil, }\n \n fn main() { let a = cons(10, cons(11, nil)); }\n\\ No newline at end of file"}, {"sha": "1d80654781f4e9cd86dda89a84166d53f424f5bf", "filename": "src/test/compile-fail/let-destruct-refutable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Fcompile-fail%2Flet-destruct-refutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Fcompile-fail%2Flet-destruct-refutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flet-destruct-refutable.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,6 +1,6 @@\n // error-pattern:refutable pattern\n \n-enum xx { xx(int); yy; }\n+enum xx { xx(int), yy, }\n \n fn main() {\n     let @{x: xx(x), y: y} = @{x: xx(10), y: 20};"}, {"sha": "06b5fbe7efa162c55d42449281a2fa466958871a", "filename": "src/test/compile-fail/name-clash-nullary-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Fcompile-fail%2Fname-clash-nullary-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Fcompile-fail%2Fname-clash-nullary-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fname-clash-nullary-2.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,5 +1,5 @@\n // error-pattern:Declaration of thpppt shadows\n-enum ack { thpppt; ffff; }\n+enum ack { thpppt, ffff, }\n \n fn main() {\n   let thpppt: int = 42;"}, {"sha": "870b86d42c3393a70bd6c05cbe42ecd3ae1b10d6", "filename": "src/test/compile-fail/occurs-check-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Fcompile-fail%2Foccurs-check-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Fcompile-fail%2Foccurs-check-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Foccurs-check-3.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,4 +1,4 @@\n // error-pattern:mismatched types\n // From Issue #778\n-enum clam<T> { a(T); }\n+enum clam<T> { a(T), }\n fn main() { let c; c = a(c); alt c { a::<int>(_) { } } }"}, {"sha": "997121f20ca24b62a54c5b86ff4f0eaa56afb7d2", "filename": "src/test/compile-fail/or-patter-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Fcompile-fail%2For-patter-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Fcompile-fail%2For-patter-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2For-patter-mismatch.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,5 +1,5 @@\n // error-pattern: mismatched types\n \n-enum blah { a(int, int, uint); b(int, int); }\n+enum blah { a(int, int, uint), b(int, int), }\n \n fn main() { alt a(1, 1, 2u) { a(_, x, y) | b(x, y) { } } }"}, {"sha": "4e7087268644b7566ff64374b9d35f93c3baebe1", "filename": "src/test/compile-fail/pattern-tyvar-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar-2.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -6,7 +6,7 @@ import option::some;\n \n // error-pattern: mismatched types\n \n-enum bar { t1((), option::t<[int]>); t2; }\n+enum bar { t1((), option::t<[int]>), t2, }\n \n fn foo(t: bar) -> int { alt t { t1(_, some(x)) { ret x * 3; } _ { fail; } } }\n "}, {"sha": "05028b7a3edfd358b5a833a28e48b5d86be08c62", "filename": "src/test/compile-fail/pattern-tyvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -5,7 +5,7 @@ import option::some;\n \n // error-pattern: mismatched types\n \n-enum bar { t1((), option::t<[int]>); t2; }\n+enum bar { t1((), option::t<[int]>), t2, }\n \n fn foo(t: bar) {\n     alt t {"}, {"sha": "1a0b39c2b949517cbfddcc712e849e0b952ce86a", "filename": "src/test/compile-fail/tag-variant-cast-non-nullary.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Fcompile-fail%2Ftag-variant-cast-non-nullary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Fcompile-fail%2Ftag-variant-cast-non-nullary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftag-variant-cast-non-nullary.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,8 +1,8 @@\n //error-pattern: non-scalar cast\n \n enum non_nullary {\n-    nullary;\n-    other(int);\n+    nullary,\n+    other(int),\n }\n \n fn main() {"}, {"sha": "4c05060598bfb70d1ab946888171ce73fd9e5ffb", "filename": "src/test/compile-fail/tag-variant-disr-dup.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Fcompile-fail%2Ftag-variant-disr-dup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Fcompile-fail%2Ftag-variant-disr-dup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftag-variant-disr-dup.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -3,9 +3,9 @@\n // black and white have the same discriminator value ...\n \n enum color {\n-    red = 0xff0000;\n-    green = 0x00ff00;\n-    blue = 0x0000ff;\n-    black = 0x000000;\n-    white = 0x000000;\n+    red = 0xff0000,\n+    green = 0x00ff00,\n+    blue = 0x0000ff,\n+    black = 0x000000,\n+    white = 0x000000,\n }"}, {"sha": "01d098c71458381a2a931c594f4c6eb89132dc71", "filename": "src/test/compile-fail/tag-variant-disr-non-nullary.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Fcompile-fail%2Ftag-variant-disr-non-nullary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Fcompile-fail%2Ftag-variant-disr-non-nullary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftag-variant-disr-non-nullary.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,10 +1,10 @@\n //error-pattern: discriminator values can only be used with a c-like enum\n \n enum color {\n-    red = 0xff0000;\n-    green = 0x00ff00;\n-    blue = 0x0000ff;\n-    black = 0x000000;\n-    white = 0xffffff;\n-    other (str);\n+    red = 0xff0000,\n+    green = 0x00ff00,\n+    blue = 0x0000ff,\n+    black = 0x000000,\n+    white = 0xffffff,\n+    other (str),\n }"}, {"sha": "4f7d2c7d05109aef0adb4b3ee8a6aa895ac2e5fb", "filename": "src/test/compile-fail/tag-variant-disr-type-mismatch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Fcompile-fail%2Ftag-variant-disr-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Fcompile-fail%2Ftag-variant-disr-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftag-variant-disr-type-mismatch.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,8 +1,8 @@\n //error-pattern: mismatched types\n \n enum color {\n-    red = 1u;\n-    blue = 2;\n+    red = 1u,\n+    blue = 2,\n }\n \n fn main() {}"}, {"sha": "89d31a41dccfd32c1dae9bc4b8f590f7e3cfb1b1", "filename": "src/test/compile-fail/unreachable-arm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Fcompile-fail%2Funreachable-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Fcompile-fail%2Funreachable-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funreachable-arm.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,5 +1,5 @@\n // error-pattern:unreachable pattern\n \n-enum foo { a(@foo, int); b(uint); }\n+enum foo { a(@foo, int), b(uint), }\n \n fn main() { alt b(1u) { b(_) | a(@_, 1) { } a(_, 1) { } } }"}, {"sha": "e2e04d4f8decf3a80a7e674bceccf9943c51252b", "filename": "src/test/pretty/tag-blank-lines.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Fpretty%2Ftag-blank-lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Fpretty%2Ftag-blank-lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Ftag-blank-lines.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,8 +1,8 @@\n // pp-exact\n \n enum foo {\n-    foo; // a foo.\n-    bar;\n+    foo, // a foo.\n+    bar,\n }\n \n fn main() { }"}, {"sha": "c6127d178c8e2df012b52eae10b656b2383e926d", "filename": "src/test/run-fail/non-exhaustive-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-fail%2Fnon-exhaustive-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-fail%2Fnon-exhaustive-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fnon-exhaustive-match.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -4,6 +4,6 @@\n // -*- rust -*-\n \n // error-pattern:non-exhaustive match failure\n-enum t { a; b; }\n+enum t { a, b, }\n \n fn main() { let x = a; alt x { b { } } }"}, {"sha": "01b850dabeb94b6af713fb4b08816ccd8542d3cd", "filename": "src/test/run-pass/alias-uninit-value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Falias-uninit-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Falias-uninit-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falias-uninit-value.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -5,7 +5,7 @@ use std;\n import option;\n import option::none;\n \n-enum sty { ty_nil; }\n+enum sty { ty_nil, }\n \n type raw_t = {struct: sty, cname: option::t<str>, hash: uint};\n "}, {"sha": "73de058949a7b2194269cc86efd5cda787a15772", "filename": "src/test/run-pass/alloca-from-derived-tydesc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Falloca-from-derived-tydesc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Falloca-from-derived-tydesc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falloca-from-derived-tydesc.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,4 +1,4 @@\n-enum option<T> { some(T); none; }\n+enum option<T> { some(T), none, }\n \n type r<T> = {mutable v: [option<T>]};\n "}, {"sha": "cd7497aeda466ce39532ed9adcdb15949cca7b3d", "filename": "src/test/run-pass/alt-path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Falt-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Falt-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-path.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,7 +1,7 @@\n \n \n mod m1 {\n-    enum foo { foo1; foo2; }\n+    enum foo { foo1, foo2, }\n }\n \n fn bar(x: m1::foo) { alt x { m1::foo1 { } } }"}, {"sha": "81ea2a2d7749ee92fcd0374cf9c3b553812f5b6f", "filename": "src/test/run-pass/alt-pattern-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -5,7 +5,7 @@ use std;\n \n import std::dbg;\n \n-enum t { make_t(@int); clam; }\n+enum t { make_t(@int), clam, }\n \n fn foo(s: @int) {\n     let count = dbg::refcount(s);"}, {"sha": "9a9acad43fdfe378251ea4e02a9630e1554feaf0", "filename": "src/test/run-pass/alt-pattern-no-type-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Falt-pattern-no-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Falt-pattern-no-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-pattern-no-type-params.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,4 +1,4 @@\n-enum maybe<T> { nothing; just(T); }\n+enum maybe<T> { nothing, just(T), }\n \n fn foo(x: maybe<int>) {\n     alt x { nothing { #error(\"A\"); } just(a) { #error(\"B\"); } }"}, {"sha": "11f0ff87a68236ed95e2b8bc25623cc8189f30fb", "filename": "src/test/run-pass/alt-phi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Falt-phi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Falt-phi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-phi.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,6 +1,6 @@\n \n \n-enum thing { a; b; c; }\n+enum thing { a, b, c, }\n \n fn foo(it: block(int)) { it(10); }\n "}, {"sha": "6b7a3e6c2792d58b2db21f9eeb55e87a3cc44608", "filename": "src/test/run-pass/alt-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Falt-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Falt-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-str.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -3,7 +3,7 @@\n fn main() {\n     alt \"test\" { \"not-test\" { fail; } \"test\" { } _ { fail; } }\n \n-    enum t { tag1(str); tag2; }\n+    enum t { tag1(str), tag2, }\n \n \n     alt tag1(\"test\") {"}, {"sha": "11fad7375b5c133db130b3c2be345421c1f32e14", "filename": "src/test/run-pass/alt-tag.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Falt-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Falt-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-tag.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -3,9 +3,9 @@\n \n // -*- rust -*-\n enum color {\n-    rgb(int, int, int);\n-    rgba(int, int, int, int);\n-    hsl(int, int, int);\n+    rgb(int, int, int),\n+    rgba(int, int, int, int),\n+    hsl(int, int, int),\n }\n \n fn process(c: color) -> int {"}, {"sha": "3eb95b70029acdb91fb205f75e2d124c346f6220", "filename": "src/test/run-pass/box-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fbox-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fbox-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-pattern.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,5 +1,5 @@\n type foo = {a: int, b: uint};\n-enum bar { u(@foo); w(int); }\n+enum bar { u(@foo), w(int), }\n \n fn main() {\n     assert (alt u(@{a: 10, b: 40u}) {"}, {"sha": "d520a1ff3a3e69fc5ba75deec16c8c56e3aee351", "filename": "src/test/run-pass/chan-leak.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fchan-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fchan-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fchan-leak.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -8,7 +8,7 @@ import comm;\n import comm::port;\n import comm::recv;\n \n-enum request { quit; close(chan<bool>); }\n+enum request { quit, close(chan<bool>), }\n \n type ctx = chan<request>;\n "}, {"sha": "0585795c13112c65afd056728ce07549940b1f81", "filename": "src/test/run-pass/conditional-compile.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-compile.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -20,9 +20,9 @@ type t = int;\n type t = bool;\n \n #[cfg(bogus)]\n-enum tg { foo; }\n+enum tg { foo, }\n \n-enum tg { bar; }\n+enum tg { bar, }\n \n #[cfg(bogus)]\n resource r(i: int) { }"}, {"sha": "c29bcbdfee28ede719db07fe7ba432df2f24080a", "filename": "src/test/run-pass/constrained-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fconstrained-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fconstrained-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconstrained-type.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,6 +1,6 @@\n // -*- rust -*-\n \n-enum list { cons(int, @list); nil; }\n+enum list { cons(int, @list), nil, }\n \n type bubu = {x: int, y: int};\n "}, {"sha": "dd00fcbbbefcd5369f36d3a4fdaa817f52130146", "filename": "src/test/run-pass/cycle-collection.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fcycle-collection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fcycle-collection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcycle-collection.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,6 +1,6 @@\n enum taggy {\n-    cons(@mutable taggy);\n-    nil;\n+    cons(@mutable taggy),\n+    nil,\n }\n \n fn f() {"}, {"sha": "3632e8833d13f3406437fccf98116f2146902edb", "filename": "src/test/run-pass/drop-on-empty-block-exit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fdrop-on-empty-block-exit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fdrop-on-empty-block-exit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-on-empty-block-exit.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,5 +1,5 @@\n \n \n-enum t { foo(@int); }\n+enum t { foo(@int), }\n \n fn main() { let tt = foo(@10); alt tt { foo(z) { } } }"}, {"sha": "63201e5c7968643615d52a4b7ada32cd5eb14327", "filename": "src/test/run-pass/empty-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fempty-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fempty-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-tag.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,4 +1,4 @@\n-enum chan { chan_t; }\n+enum chan { chan_t, }\n \n fn wrapper3(i: chan) {\n     assert i == chan_t;"}, {"sha": "afb63b7f406edd89fc7feee5a2b4473363164950", "filename": "src/test/run-pass/enum-disr-val-pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fenum-disr-val-pretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fenum-disr-val-pretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-disr-val-pretty.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,6 +1,6 @@\n // pp-exact\n \n-enum color { red = 1; green; blue; imaginary = -1; }\n+enum color { red = 1, green, blue, imaginary = -1, }\n \n fn main() {\n     test_color(red, 1, \"red\");"}, {"sha": "6a8400376419ac25f46ac26df88436d32a87b0ca", "filename": "src/test/run-pass/export-abstract-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fexport-abstract-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fexport-abstract-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-abstract-tag.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -5,7 +5,7 @@ mod foo {\n     export t;\n     export f;\n \n-    enum t { t1; }\n+    enum t { t1, }\n \n     fn f() -> t { ret t1; }\n }"}, {"sha": "5a3928cfd72bd5553e1e070ff055baf9c9c06471", "filename": "src/test/run-pass/export-non-interference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fexport-non-interference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fexport-non-interference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-non-interference.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -2,6 +2,6 @@\n export foo;\n export main;\n \n-enum list_cell<T> { cons(@list_cell<T>); }\n+enum list_cell<T> { cons(@list_cell<T>), }\n \n fn main() { }"}, {"sha": "ccdb235164cd8a9dd184eb049c94d71413fe0ec0", "filename": "src/test/run-pass/export-tag-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fexport-tag-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fexport-tag-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-tag-variant.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -2,7 +2,7 @@\n \n mod foo {\n     export t1;\n-    enum t { t1; }\n+    enum t { t1, }\n }\n \n fn main() { let v = foo::t1; }"}, {"sha": "856f568e7889fe0a6f1a50f72cdb7a7f403048dd", "filename": "src/test/run-pass/export-unexported-dep.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fexport-unexported-dep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fexport-unexported-dep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-unexported-dep.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -6,7 +6,7 @@ mod foo {\n     export g;\n \n     // not exported\n-    enum t { t1; t2; }\n+    enum t { t1, t2, }\n \n     fn f() -> t { ret t1; }\n "}, {"sha": "def9b607afe15677c4a3670180c27821d346925b", "filename": "src/test/run-pass/expr-alt-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fexpr-alt-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fexpr-alt-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-struct.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -10,7 +10,7 @@ fn test_rec() {\n }\n \n fn test_tag() {\n-    enum mood { happy; sad; }\n+    enum mood { happy, sad, }\n     let rs = alt true { true { happy } false { sad } };\n     assert (rs == happy);\n }"}, {"sha": "99787004b750deae9fd838b7f69a88b7cf95f3a9", "filename": "src/test/run-pass/expr-if-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fexpr-if-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fexpr-if-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-struct.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -10,7 +10,7 @@ fn test_rec() {\n }\n \n fn test_tag() {\n-    enum mood { happy; sad; }\n+    enum mood { happy, sad, }\n     let rs = if true { happy } else { sad };\n     assert (rs == happy);\n }"}, {"sha": "1e7de587fb9651da49a4e13fc4454600a4b4e0c9", "filename": "src/test/run-pass/generic-ivec-leak.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fgeneric-ivec-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fgeneric-ivec-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-ivec-leak.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,4 +1,4 @@\n-enum wrapper<T> { wrapped(T); }\n+enum wrapper<T> { wrapped(T), }\n \n fn main() { let w = wrapped([1, 2, 3, 4, 5]); }\n "}, {"sha": "46bc5223ec7682980d47ba0c26d022982813c277", "filename": "src/test/run-pass/generic-recursive-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fgeneric-recursive-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fgeneric-recursive-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-recursive-tag.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,6 +1,6 @@\n \n \n-enum list<T> { cons(@T, @list<T>); nil; }\n+enum list<T> { cons(@T, @list<T>), nil, }\n \n fn main() {\n     let a: list<int> ="}, {"sha": "ebbbb87d3e2cd5939ee92554f7af49f888720af7", "filename": "src/test/run-pass/generic-tag-alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fgeneric-tag-alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fgeneric-tag-alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag-alt.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,6 +1,6 @@\n \n \n-enum foo<T> { arm(T); }\n+enum foo<T> { arm(T), }\n \n fn altfoo<T>(f: foo<T>) {\n     let hit = false;"}, {"sha": "f1313f8cb6b82d493b26bcc699c24be3cbcb71f6", "filename": "src/test/run-pass/generic-tag-corruption.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fgeneric-tag-corruption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fgeneric-tag-corruption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag-corruption.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -2,6 +2,6 @@\n \n \n // This causes memory corruption in stage0.\n-enum thing<K> { some(K); }\n+enum thing<K> { some(K), }\n \n fn main() { let x = some(\"hi\"); }"}, {"sha": "d36309548c5abf7a90394fd164c8d3f9fbfc7342", "filename": "src/test/run-pass/generic-tag-local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fgeneric-tag-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fgeneric-tag-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag-local.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,5 +1,5 @@\n \n \n-enum clam<T> { a(T); }\n+enum clam<T> { a(T), }\n \n fn main() { let c = a(3); }"}, {"sha": "d8c039fa413aaccf81601a0811a50f3c37caac32", "filename": "src/test/run-pass/generic-tag-values.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -2,7 +2,7 @@\n \n \n // -*- rust -*-\n-enum noption<T> { some(T); }\n+enum noption<T> { some(T), }\n \n fn main() {\n     let nop: noption<int> = some::<int>(5);"}, {"sha": "cf134c1efdeade23804a6bbd4e3932c1a119a4e5", "filename": "src/test/run-pass/generic-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fgeneric-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fgeneric-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,5 +1,5 @@\n \n \n-enum option<T> { some(@T); none; }\n+enum option<T> { some(@T), none, }\n \n fn main() { let a: option<int> = some::<int>(@10); a = none::<int>; }"}, {"sha": "777b56c7520d3083cb7a49287b81c1fa50a3f37f", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -30,7 +30,7 @@ mod map_reduce {\n \n     type mapper = native fn(str, putter);\n \n-    enum ctrl_proto { find_reducer([u8], chan<int>); mapper_done; }\n+    enum ctrl_proto { find_reducer([u8], chan<int>), mapper_done, }\n \n     fn start_mappers(ctrl: chan<ctrl_proto>, inputs: [str]) {\n         for i: str in inputs {"}, {"sha": "3b3836dd32e0b4e8ac55704f73a6a5642e31d96b", "filename": "src/test/run-pass/init-res-into-things.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -23,7 +23,7 @@ fn test_rec() {\n \n fn test_tag() {\n     enum t {\n-        t0(r);\n+        t0(r),\n     }\n \n     let i = @mutable 0;"}, {"sha": "f0926afe759a563ef48e5e1898663c06ec6281d4", "filename": "src/test/run-pass/issue-687.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fissue-687.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fissue-687.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-687.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -7,7 +7,7 @@ import comm::port;\n import comm::recv;\n import comm::send;\n \n-enum msg { closed; received([u8]); }\n+enum msg { closed, received([u8]), }\n \n fn producer(c: chan<[u8]>) {\n     send(c, [1u8, 2u8, 3u8, 4u8]);"}, {"sha": "ddbc648ae0af0aea5ca075502e8beacc9e6acb0b", "filename": "src/test/run-pass/issue-980.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fissue-980.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fissue-980.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-980.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,6 +1,6 @@\n enum maybe_pointy {\n-    no_pointy;\n-    yes_pointy(@pointy);\n+    no_pointy,\n+    yes_pointy(@pointy),\n }\n \n type pointy = {"}, {"sha": "515b9691b222ca385442c766b1cc755d2ddbf861", "filename": "src/test/run-pass/leak-tag-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fleak-tag-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fleak-tag-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fleak-tag-copy.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,5 +1,5 @@\n \n \n-enum t { a; b(@int); }\n+enum t { a, b(@int), }\n \n fn main() { let x = b(@10); x = a; }"}, {"sha": "5916ed1d226a77a9bb82436545cb691883d2cd72", "filename": "src/test/run-pass/list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flist.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -2,6 +2,6 @@\n \n \n // -*- rust -*-\n-enum list { cons(int, @list); nil; }\n+enum list { cons(int, @list), nil, }\n \n fn main() { cons(10, @cons(11, @cons(12, @nil))); }"}, {"sha": "3cdb6c3335a053ec832c19a468dd8daeb511a9af", "filename": "src/test/run-pass/log-knows-the-names-of-variants-in-std.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -2,8 +2,8 @@ use std;\n import std::list;\n \n enum foo {\n-  a(uint);\n-  b(str);\n+  a(uint),\n+  b(str),\n }\n \n fn check_log<T>(exp: str, v: T) {"}, {"sha": "78902cf25207f62ab8c64be5bb57d17c2ad7e9a9", "filename": "src/test/run-pass/log-knows-the-names-of-variants.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,7 +1,7 @@\n enum foo {\n-  a(uint);\n-  b(str);\n-  c;\n+  a(uint),\n+  b(str),\n+  c,\n }\n \n fn main() {"}, {"sha": "0a7f0b28340cd93b273ea6b4fc6d9582a63b3176", "filename": "src/test/run-pass/log-linearized.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Flog-linearized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Flog-linearized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-linearized.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,8 +1,8 @@\n // Tests that shapes respect linearize_ty_params().\n \n enum option<T> {\n-    none;\n-    some(T);\n+    none,\n+    some(T),\n }\n \n type smallintmap<T> = @{mutable v: [mutable option<T>]};"}, {"sha": "455368c47716c598d1c87ffe80b44f1e036b2e60", "filename": "src/test/run-pass/mlist-cycle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fmlist-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fmlist-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmlist-cycle.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -4,7 +4,7 @@ use std;\n \n type cell = {mutable c: @list};\n \n-enum list { link(@cell); nil; }\n+enum list { link(@cell), nil, }\n \n fn main() {\n     let first: @cell = @{mutable c: @nil()};"}, {"sha": "cfb423553d44cc6cb01d7f637d9a9e9e5fba6274", "filename": "src/test/run-pass/mlist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fmlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fmlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmlist.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,4 +1,4 @@\n // -*- rust -*-\n-enum mlist { cons(int, @mlist); nil; }\n+enum mlist { cons(int, @mlist), nil, }\n \n fn main() { cons(10, @cons(11, @cons(12, @nil))); }"}, {"sha": "e708fe34310d39d35c40cfbdc6fd44789afe7c6f", "filename": "src/test/run-pass/mutual-recursion-group.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fmutual-recursion-group.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fmutual-recursion-group.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmutual-recursion-group.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -2,12 +2,12 @@\n \n \n // -*- rust -*-\n-enum colour { red; green; blue; }\n+enum colour { red, green, blue, }\n \n-enum tree { children(@list); leaf(colour); }\n+enum tree { children(@list), leaf(colour), }\n \n-enum list { cons(@tree, @list); nil; }\n+enum list { cons(@tree, @list), nil, }\n \n-enum small_list { kons(int, @small_list); neel; }\n+enum small_list { kons(int, @small_list), neel, }\n \n fn main() { }"}, {"sha": "2bd5e9ff33039e245c603b64e3ac60e29a7d5af6", "filename": "src/test/run-pass/nested-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fnested-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fnested-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-pattern.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -6,7 +6,7 @@ import option;\n import option::some;\n import option::none;\n \n-enum t { foo(int, uint); bar(int, option::t<int>); }\n+enum t { foo(int, uint), bar(int, option::t<int>), }\n \n fn nested(o: t) {\n     alt o {"}, {"sha": "87109cfb1d6393a41dbfbf0072c7b0068208ba55", "filename": "src/test/run-pass/nullary-or-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fnullary-or-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fnullary-or-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnullary-or-pattern.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,4 +1,4 @@\n-enum blah { a; b; }\n+enum blah { a, b, }\n \n fn or_alt(q: blah) -> int {\n   alt q { a | b { 42 } }"}, {"sha": "8419fc6ee67410ef1b1412cbefeb98fb986d566b", "filename": "src/test/run-pass/or-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2For-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2For-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2For-pattern.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,4 +1,4 @@\n-enum blah { a(int, int, uint); b(int, int); c; }\n+enum blah { a(int, int, uint), b(int, int), c, }\n \n fn or_alt(q: blah) -> int {\n     alt q { a(x, y, _) | b(x, y) { ret x + y; } c { ret 0; } }"}, {"sha": "d114c9e995dcbbf2442e01f7298a58c845063ad7", "filename": "src/test/run-pass/record-pat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Frecord-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Frecord-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frecord-pat.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,6 +1,6 @@\n-enum t1 { a(int); b(uint); }\n+enum t1 { a(int), b(uint), }\n type t2 = {x: t1, y: int};\n-enum t3 { c(t2, uint); }\n+enum t3 { c(t2, uint), }\n \n fn m(in: t3) -> int {\n     alt in {"}, {"sha": "f2dbb04f1b2d66741c0f102c418e83a48233c945", "filename": "src/test/run-pass/resource-in-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -5,7 +5,7 @@ type closable = @mutable bool;\n \n resource close_res(i: closable) { *i = false; }\n \n-enum option<T> { none; some(T); }\n+enum option<T> { none, some(T), }\n \n fn sink(res: option<close_res>) { }\n "}, {"sha": "468dbf5f3f29a24ac724d1f4f28bb80946be6d1d", "filename": "src/test/run-pass/ret-none.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fret-none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fret-none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fret-none.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,6 +1,6 @@\n \n \n-enum option<T> { none; some(T); }\n+enum option<T> { none, some(T), }\n \n fn f<T: copy>() -> option<T> { ret none; }\n "}, {"sha": "fd7edefb390538b59eb13f01fca29245a016e43d", "filename": "src/test/run-pass/shadow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshadow.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -16,6 +16,6 @@ fn foo(c: [int]) {\n     }\n }\n \n-enum t<T> { none; some(T); }\n+enum t<T> { none, some(T), }\n \n fn main() { let x = 10; let x = x + 20; assert (x == 30); foo([]); }"}, {"sha": "9777de4b1460157251063ab9b7e2da13d150a382", "filename": "src/test/run-pass/shape_intrinsic_tag_then_rec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -10,8 +10,8 @@ import option;\n enum opt_span {\n \n     //hack (as opposed to option::t), to make `span` compile\n-    os_none;\n-    os_some(@span);\n+    os_none,\n+    os_some(@span),\n }\n type span = {lo: uint, hi: uint, expanded_from: opt_span};\n type spanned<T> = { data: T, span: span };"}, {"sha": "3b1e1811ba847b08aeee80dccdff2effb2a3aced", "filename": "src/test/run-pass/simple-alt-generic-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fsimple-alt-generic-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fsimple-alt-generic-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimple-alt-generic-tag.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,6 +1,6 @@\n \n \n-enum opt<T> { none; }\n+enum opt<T> { none, }\n \n fn main() {\n     let x = none::<int>;"}, {"sha": "4e30d44304af7b84ea01d62219e5a1eff994f489", "filename": "src/test/run-pass/simple-generic-alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fsimple-generic-alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fsimple-generic-alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimple-generic-alt.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,5 +1,5 @@\n \n \n-enum clam<T> { a(T); }\n+enum clam<T> { a(T), }\n \n fn main() { let c = a(2); alt c { a::<int>(_) { } } }"}, {"sha": "0f9e3308fafcdbf664c3c5e3003088dee969edf2", "filename": "src/test/run-pass/simple-generic-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fsimple-generic-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fsimple-generic-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimple-generic-tag.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,5 +1,5 @@\n \n \n-enum clam<T> { a(T); }\n+enum clam<T> { a(T), }\n \n fn main() { }"}, {"sha": "ce70efa318e5fe0bb7cca1cb29e0a6337f085bf0", "filename": "src/test/run-pass/size-and-align.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fsize-and-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fsize-and-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsize-and-align.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -2,7 +2,7 @@\n \n \n // -*- rust -*-\n-enum clam<T> { a(T, int); b; }\n+enum clam<T> { a(T, int), b, }\n \n fn uhoh<T>(v: [clam<T>]) {\n     alt v[1] {"}, {"sha": "269cbf0363bbd403d540d8723eb1d5175c22818e", "filename": "src/test/run-pass/structured-compare-recursive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fstructured-compare-recursive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fstructured-compare-recursive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstructured-compare-recursive.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,5 +1,5 @@\n \n \n-enum taggy { foo(@taggy); bar; }\n+enum taggy { foo(@taggy), bar, }\n \n fn main() { assert (bar <= bar); }"}, {"sha": "aebebec12996dae774fa525bf4d98a4771991ac1", "filename": "src/test/run-pass/structured-compare.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fstructured-compare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fstructured-compare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstructured-compare.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,6 +1,6 @@\n \n \n-enum foo { large; small; }\n+enum foo { large, small, }\n \n fn main() {\n     let a = {x: 1, y: 2, z: 3};"}, {"sha": "7f6faf96ed422fb3c6d278c22736a245e59ec825", "filename": "src/test/run-pass/tag-auto-disr-val-shape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Ftag-auto-disr-val-shape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Ftag-auto-disr-val-shape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-auto-disr-val-shape.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,6 +1,6 @@\n // xfail-test\n \n-enum color { red; green; blue; black; white; }\n+enum color { red, green, blue, black, white, }\n \n fn main() {\n     assert (uint::to_str(red as uint, 10) == #fmt[\"%?\", red]);"}, {"sha": "0d8d48d58b8f0016f12978a517719c1736643aee", "filename": "src/test/run-pass/tag-disr-val-shape.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Ftag-disr-val-shape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Ftag-disr-val-shape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-disr-val-shape.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,11 +1,11 @@\n // xfail-pretty Issue #1510\n \n enum color {\n-    red = 0xff0000;\n-    green = 0x00ff00;\n-    blue = 0x0000ff;\n-    black = 0x000000;\n-    white = 0xFFFFFF;\n+    red = 0xff0000,\n+    green = 0x00ff00,\n+    blue = 0x0000ff,\n+    black = 0x000000,\n+    white = 0xFFFFFF,\n }\n \n fn main() {"}, {"sha": "c08d440874dab7ecb6ad6b87a0c120479412cf12", "filename": "src/test/run-pass/tag-in-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Ftag-in-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Ftag-in-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-in-block.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -2,7 +2,7 @@\n \n fn foo() {\n     fn zed(z: bar) { }\n-    enum bar { nil; }\n+    enum bar { nil, }\n     fn baz() { zed(nil); }\n }\n "}, {"sha": "003d0c6bd6a9bd8f8062dfe2adafde339bf6d9d3", "filename": "src/test/run-pass/tag-variant-disr-val.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Ftag-variant-disr-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Ftag-variant-disr-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-variant-disr-val.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,10 +1,10 @@\n enum color {\n-    red = 0xff0000;\n-    green = 0x00ff00;\n-    blue = 0x0000ff;\n-    black = 0x000000;\n-    white = 0xFFFFFF;\n-    imaginary = -1;\n+    red = 0xff0000,\n+    green = 0x00ff00,\n+    blue = 0x0000ff,\n+    black = 0x000000,\n+    white = 0xFFFFFF,\n+    imaginary = -1,\n }\n \n fn main() {"}, {"sha": "1793f5f22a2616e4dc370ddabd268e35b4a1b72b", "filename": "src/test/run-pass/tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Ftag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Ftag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -2,7 +2,7 @@\n \n \n // -*- rust -*-\n-enum colour { red(int, int); green; }\n+enum colour { red(int, int), green, }\n \n fn f() { let x = red(1, 2); let y = green; assert (x != y); }\n "}, {"sha": "2c85462245c53297564c8d023fe5540d4d5c3416", "filename": "src/test/run-pass/task-comm-16.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -50,7 +50,7 @@ fn test_str() {\n }\n \n fn test_tag() {\n-    enum t { tag1; tag2(int); tag3(int, u8, char); }\n+    enum t { tag1, tag2(int), tag3(int, u8, char), }\n     let po = port();\n     let ch = chan(po);\n     send(ch, tag1);"}, {"sha": "9666018d8146ba77c0c6703ae623b46baf6760f9", "filename": "src/test/run-pass/uniq-cc-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,6 +1,6 @@\n enum maybe_pointy {\n-    none;\n-    p(@pointy);\n+    none,\n+    p(@pointy),\n }\n \n type pointy = {"}, {"sha": "ad4581e12cd11c2c6b2ce53a94ee3a7c6ea3d252", "filename": "src/test/run-pass/uniq-cc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Funiq-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Funiq-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiq-cc.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,6 +1,6 @@\n enum maybe_pointy {\n-    none;\n-    p(@pointy);\n+    none,\n+    p(@pointy),\n }\n \n type pointy = {"}, {"sha": "47c136325247cce46a8fbb02005c226e403df0cf", "filename": "src/test/run-pass/unique-containing-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Funique-containing-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Funique-containing-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-containing-tag.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n-    enum t { t1(int); t2(int); }\n+    enum t { t1(int), t2(int), }\n \n     let x = ~t1(10);\n "}, {"sha": "d65143285bd5e2cd2d39c93853c74c866428e64d", "filename": "src/test/run-pass/unique-in-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Funique-in-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Funique-in-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-in-tag.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,5 +1,5 @@\n fn test1() {\n-    enum bar { u(~int); w(int); }\n+    enum bar { u(~int), w(int), }\n \n     let x = u(~10);\n     assert alt x {"}, {"sha": "169ce721de72c28ea7a2f2ab423e1fc00c4c4cf3", "filename": "src/test/run-pass/unique-pat-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Funique-pat-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Funique-pat-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-pat-2.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,6 +1,6 @@\n \n type foo = {a: int, b: uint};\n-enum bar { u(~foo); w(int); }\n+enum bar { u(~foo), w(int), }\n \n fn main() {\n     assert (alt u(~{a: 10, b: 40u}) {"}, {"sha": "034404f7a3fb55f9d3ac1fb7ed2e6dd9d38dce4f", "filename": "src/test/run-pass/unique-pat-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Funique-pat-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Funique-pat-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-pat-3.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,5 +1,5 @@\n \n-enum bar { u(~int); w(int); }\n+enum bar { u(~int), w(int), }\n \n fn main() {\n     assert alt u(~10) {"}, {"sha": "579b939ccb43da5ee06d2fc88e1d54563297a3f5", "filename": "src/test/run-pass/use-uninit-alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fuse-uninit-alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fuse-uninit-alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse-uninit-alt.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -6,6 +6,6 @@ fn foo<T>(o: myoption<T>) -> int {\n     ret x;\n }\n \n-enum myoption<T> { none; some(T); }\n+enum myoption<T> { none, some(T), }\n \n fn main() { log(debug, 5); }"}, {"sha": "24b7e19da5b695bebff27633ccb3154175feee62", "filename": "src/test/run-pass/use-uninit-alt2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fuse-uninit-alt2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fuse-uninit-alt2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse-uninit-alt2.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -6,6 +6,6 @@ fn foo<T>(o: myoption<T>) -> int {\n     ret x;\n }\n \n-enum myoption<T> { none; some(T); }\n+enum myoption<T> { none, some(T), }\n \n fn main() { log(debug, 5); }"}, {"sha": "b248eb332f675d9e635c3a79736f4fe9e7992b8f", "filename": "src/test/run-pass/while-prelude-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fwhile-prelude-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebe6af187ce0504b40c177f1700b090b226625/src%2Ftest%2Frun-pass%2Fwhile-prelude-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile-prelude-drop.rs?ref=59ebe6af187ce0504b40c177f1700b090b226625", "patch": "@@ -1,5 +1,5 @@\n \n-enum t { a; b(str); }\n+enum t { a, b(str), }\n \n fn make(i: int) -> t {\n     if i > 10 { ret a; }"}]}