{"sha": "82b1e3f5cc0d0fec0f7fbab0f9b8766ce732c792", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyYjFlM2Y1Y2MwZDBmZWMwZjdmYmFiMGY5Yjg3NjZjZTczMmM3OTI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-12T01:49:36Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-12T19:08:27Z"}, "message": "Convert all uses of std::io to std::ioivec", "tree": {"sha": "63ceb8283b98e964a00fd3357e4b7906c0de6ef9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63ceb8283b98e964a00fd3357e4b7906c0de6ef9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82b1e3f5cc0d0fec0f7fbab0f9b8766ce732c792", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82b1e3f5cc0d0fec0f7fbab0f9b8766ce732c792", "html_url": "https://github.com/rust-lang/rust/commit/82b1e3f5cc0d0fec0f7fbab0f9b8766ce732c792", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82b1e3f5cc0d0fec0f7fbab0f9b8766ce732c792/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0846525e8329bd39125559f08fb378a461b7957", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0846525e8329bd39125559f08fb378a461b7957", "html_url": "https://github.com/rust-lang/rust/commit/c0846525e8329bd39125559f08fb378a461b7957"}], "stats": {"total": 129, "additions": 66, "deletions": 63}, "files": [{"sha": "3b5751c806f9d027a2c8d42ff391f5cd54be19aa", "filename": "src/lib/run_program.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/82b1e3f5cc0d0fec0f7fbab0f9b8766ce732c792/src%2Flib%2Frun_program.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b1e3f5cc0d0fec0f7fbab0f9b8766ce732c792/src%2Flib%2Frun_program.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Frun_program.rs?ref=82b1e3f5cc0d0fec0f7fbab0f9b8766ce732c792", "patch": "@@ -36,9 +36,9 @@ fn run_program(prog: str, args: vec[str]) -> int {\n type program =\n     obj {\n         fn get_id() -> int;\n-        fn input() -> io::writer;\n-        fn output() -> io::reader;\n-        fn err() -> io::reader;\n+        fn input() -> ioivec::writer;\n+        fn output() -> ioivec::reader;\n+        fn err() -> ioivec::reader;\n         fn close_input();\n         fn finish() -> int;\n         fn destroy();\n@@ -65,14 +65,17 @@ fn start_program(prog: str, args: vec[str]) -> @program_res {\n                     err_file: os::libc::FILE,\n                     mutable finished: bool) {\n         fn get_id() -> int { ret pid; }\n-        fn input() -> io::writer {\n-            ret io::new_writer(io::fd_buf_writer(in_fd, option::none));\n+        fn input() -> ioivec::writer {\n+            ret ioivec::new_writer(\n+                ioivec::fd_buf_writer(in_fd, option::none));\n         }\n-        fn output() -> io::reader {\n-            ret io::new_reader(io::FILE_buf_reader(out_file, option::none));\n+        fn output() -> ioivec::reader {\n+            ret ioivec::new_reader(\n+                ioivec::FILE_buf_reader(out_file, option::none));\n         }\n-        fn err() -> io::reader {\n-            ret io::new_reader(io::FILE_buf_reader(err_file, option::none));\n+        fn err() -> ioivec::reader {\n+            ret ioivec::new_reader(\n+                ioivec::FILE_buf_reader(err_file, option::none));\n         }\n         fn close_input() {\n             let invalid_fd = -1;\n@@ -100,10 +103,10 @@ fn start_program(prog: str, args: vec[str]) -> @program_res {\n                                  false));\n }\n \n-fn read_all(rd: &io::reader) -> str {\n+fn read_all(rd: &ioivec::reader) -> str {\n     let buf = \"\";\n     while !rd.eof() {\n-        let bytes = ivec::from_vec(rd.read_bytes(4096u));\n+        let bytes = rd.read_bytes(4096u);\n         buf += str::unsafe_from_bytes(bytes);\n     }\n     ret buf;"}, {"sha": "d13b0dee3de4995fe28db2013a9959bcd274a699", "filename": "src/lib/term.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/82b1e3f5cc0d0fec0f7fbab0f9b8766ce732c792/src%2Flib%2Fterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b1e3f5cc0d0fec0f7fbab0f9b8766ce732c792/src%2Flib%2Fterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fterm.rs?ref=82b1e3f5cc0d0fec0f7fbab0f9b8766ce732c792", "patch": "@@ -40,11 +40,11 @@ const color_bright_cyan: u8 = 14u8;\n \n const color_bright_white: u8 = 15u8;\n \n-fn esc(writer: io::buf_writer) { writer.write([0x1bu8, '[' as u8]); }\n+fn esc(writer: ioivec::buf_writer) { writer.write(~[0x1bu8, '[' as u8]); }\n \n-fn reset(writer: io::buf_writer) {\n+fn reset(writer: ioivec::buf_writer) {\n     esc(writer);\n-    writer.write(['0' as u8, 'm' as u8]);\n+    writer.write(~['0' as u8, 'm' as u8]);\n }\n \n fn color_supported() -> bool {\n@@ -55,18 +55,18 @@ fn color_supported() -> bool {\n         };\n }\n \n-fn set_color(writer: io::buf_writer, first_char: u8, color: u8) {\n+fn set_color(writer: ioivec::buf_writer, first_char: u8, color: u8) {\n     assert (color < 16u8);\n     esc(writer);\n-    if color >= 8u8 { writer.write(['1' as u8, ';' as u8]); color -= 8u8; }\n-    writer.write([first_char, ('0' as u8) + color, 'm' as u8]);\n+    if color >= 8u8 { writer.write(~['1' as u8, ';' as u8]); color -= 8u8; }\n+    writer.write(~[first_char, ('0' as u8) + color, 'm' as u8]);\n }\n \n-fn fg(writer: io::buf_writer, color: u8) {\n+fn fg(writer: ioivec::buf_writer, color: u8) {\n     ret set_color(writer, '3' as u8, color);\n }\n \n-fn bg(writer: io::buf_writer, color: u8) {\n+fn bg(writer: ioivec::buf_writer, color: u8) {\n     ret set_color(writer, '4' as u8, color);\n }\n // export fg;"}, {"sha": "044720887898205363887c4415eca428d209e747", "filename": "src/lib/test.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/82b1e3f5cc0d0fec0f7fbab0f9b8766ce732c792/src%2Flib%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b1e3f5cc0d0fec0f7fbab0f9b8766ce732c792/src%2Flib%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftest.rs?ref=82b1e3f5cc0d0fec0f7fbab0f9b8766ce732c792", "patch": "@@ -106,7 +106,7 @@ fn run_tests_console_(opts: &test_opts, tests: &[test_desc],\n                       to_task: &test_to_task) -> bool {\n \n     type test_state = @{\n-        out: io::writer,\n+        out: ioivec::writer,\n         use_color: bool,\n         mutable total: uint,\n         mutable passed: uint,\n@@ -148,7 +148,7 @@ fn run_tests_console_(opts: &test_opts, tests: &[test_desc],\n     }\n \n     let st = @{\n-        out: io::stdout(),\n+        out: ioivec::stdout(),\n         use_color: use_color(),\n         mutable total: 0u,\n         mutable passed: 0u,\n@@ -181,19 +181,19 @@ fn run_tests_console_(opts: &test_opts, tests: &[test_desc],\n \n     ret success;\n \n-    fn write_ok(out: &io::writer, use_color: bool) {\n+    fn write_ok(out: &ioivec::writer, use_color: bool) {\n         write_pretty(out, \"ok\", term::color_green, use_color);\n     }\n \n-    fn write_failed(out: &io::writer, use_color: bool) {\n+    fn write_failed(out: &ioivec::writer, use_color: bool) {\n         write_pretty(out, \"FAILED\", term::color_red, use_color);\n     }\n \n-    fn write_ignored(out: &io::writer, use_color: bool) {\n+    fn write_ignored(out: &ioivec::writer, use_color: bool) {\n         write_pretty(out, \"ignored\", term::color_yellow, use_color);\n     }\n \n-    fn write_pretty(out: &io::writer, word: &str, color: u8,\n+    fn write_pretty(out: &ioivec::writer, word: &str, color: u8,\n                     use_color: bool) {\n         if use_color && term::color_supported() {\n             term::fg(out.get_buf_writer(), color);"}, {"sha": "237a79efd16d7b326986b8ee58635df4f47b05a9", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82b1e3f5cc0d0fec0f7fbab0f9b8766ce732c792/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b1e3f5cc0d0fec0f7fbab0f9b8766ce732c792/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=82b1e3f5cc0d0fec0f7fbab0f9b8766ce732c792", "patch": "@@ -17,7 +17,7 @@ import std::uint;\n import std::time;\n import std::str;\n import std::int::range;\n-import std::io;\n+import std::ioivec;\n import std::getopts;\n import std::task;\n import std::u64;\n@@ -94,7 +94,7 @@ fn main(argv: vec[str]) {\n \n             let num_trials = 10;\n \n-            let out = io::stdout();\n+            let out = ioivec::stdout();\n \n \n             for each n: int  in range(1, max + 1) {"}, {"sha": "b0fb643fd1bdda4dc108b427020ac13d5a635a94", "filename": "src/test/bench/task-perf-word-count.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/82b1e3f5cc0d0fec0f7fbab0f9b8766ce732c792/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b1e3f5cc0d0fec0f7fbab0f9b8766ce732c792/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs?ref=82b1e3f5cc0d0fec0f7fbab0f9b8766ce732c792", "patch": "@@ -10,14 +10,14 @@\n \n use std;\n \n-import std::io;\n import option = std::option::t;\n import std::option::some;\n import std::option::none;\n import std::str;\n import std::vec;\n import std::map;\n import std::ivec;\n+import std::ioivec;\n \n import std::time;\n import std::u64;\n@@ -27,7 +27,7 @@ import clone = std::task::clone_chan;\n \n fn map(filename: str, emit: map_reduce::putter) {\n     // log_err \"mapping \" + filename;\n-    let f = io::file_reader(filename);\n+    let f = ioivec::file_reader(filename);\n \n \n     while true {\n@@ -51,7 +51,7 @@ fn reduce(word: str, get: map_reduce::getter) {\n         }\n     }\n \n-    // auto out = io::stdout();\n+    // auto out = ioivec::stdout();\n     // out.write_line(#fmt(\"%s: %d\", word, count));\n \n     // log_err \"reduce \" + word + \" done.\";\n@@ -226,7 +226,7 @@ mod map_reduce {\n \n fn main(argv: vec[str]) {\n     if vec::len(argv) < 2u {\n-        let out = io::stdout();\n+        let out = ioivec::stdout();\n \n         out.write_line(#fmt(\"Usage: %s <filename> ...\", argv.(0)));\n \n@@ -251,7 +251,7 @@ fn main(argv: vec[str]) {\n     log_err \"MapReduce completed in \" + u64::str(elapsed) + \"ms\";\n }\n \n-fn read_word(r: io::reader) -> option[str] {\n+fn read_word(r: ioivec::reader) -> option[str] {\n     let w = \"\";\n \n     while !r.eof() {"}, {"sha": "e2699ad488260deedbf199e8d0783a930e9d61ed", "filename": "src/test/compiletest/header.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82b1e3f5cc0d0fec0f7fbab0f9b8766ce732c792/src%2Ftest%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b1e3f5cc0d0fec0f7fbab0f9b8766ce732c792/src%2Ftest%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fheader.rs?ref=82b1e3f5cc0d0fec0f7fbab0f9b8766ce732c792", "patch": "@@ -1,6 +1,6 @@\n import std::option;\n import std::str;\n-import std::io;\n+import std::ioivec;\n import std::fs;\n \n import common::config;\n@@ -69,7 +69,7 @@ fn is_test_ignored(config: &config, testfile: &str) -> bool {\n }\n \n iter iter_header(testfile: &str) -> str {\n-    let rdr = io::file_reader(testfile);\n+    let rdr = ioivec::file_reader(testfile);\n     while !rdr.eof() {\n         let ln = rdr.read_line();\n "}, {"sha": "290e0185ee33e91e9a3b736100485f145c2b8ec4", "filename": "src/test/compiletest/procsrv.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/82b1e3f5cc0d0fec0f7fbab0f9b8766ce732c792/src%2Ftest%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b1e3f5cc0d0fec0f7fbab0f9b8766ce732c792/src%2Ftest%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fprocsrv.rs?ref=82b1e3f5cc0d0fec0f7fbab0f9b8766ce732c792", "patch": "@@ -12,7 +12,7 @@ import std::ivec;\n import std::os;\n import std::run;\n import std::unsafe;\n-import std::io;\n+import std::ioivec;\n import std::str;\n \n export handle;\n@@ -73,8 +73,8 @@ fn run(handle: &handle, lib_path: &str,\n \n fn writeclose(fd: int, s: &option::t[str]) {\n     if option::is_some(s) {\n-        let writer = io::new_writer(\n-            io::fd_buf_writer(fd, option::none));\n+        let writer = ioivec::new_writer(\n+            ioivec::fd_buf_writer(fd, option::none));\n         writer.write_str(option::get(s));\n     }\n \n@@ -84,10 +84,11 @@ fn writeclose(fd: int, s: &option::t[str]) {\n fn readclose(fd: int) -> str {\n     // Copied from run::program_output\n     let file = os::fd_FILE(fd);\n-    let reader = io::new_reader(io::FILE_buf_reader(file, option::none));\n+    let reader = ioivec::new_reader(\n+        ioivec::FILE_buf_reader(file, option::none));\n     let buf = \"\";\n     while !reader.eof() {\n-        let bytes = ivec::from_vec(reader.read_bytes(4096u));\n+        let bytes = reader.read_bytes(4096u);\n         buf += str::unsafe_from_bytes(bytes);\n     }\n     os::libc::fclose(file);"}, {"sha": "909838fd91708cde2ce64e438b8c9ff63d2626ca", "filename": "src/test/compiletest/runtest.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/82b1e3f5cc0d0fec0f7fbab0f9b8766ce732c792/src%2Ftest%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b1e3f5cc0d0fec0f7fbab0f9b8766ce732c792/src%2Ftest%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fruntest.rs?ref=82b1e3f5cc0d0fec0f7fbab0f9b8766ce732c792", "patch": "@@ -1,4 +1,3 @@\n-import std::io;\n import std::ioivec;\n import std::str;\n import std::option;\n@@ -24,7 +23,7 @@ fn run(cx: &cx, testfile: &str) {\n     test::configure_test_task();\n     if (cx.config.verbose) {\n         // We're going to be dumping a lot of info. Start on a new line.\n-        io::stdout().write_str(\"\\n\\n\");\n+        ioivec::stdout().write_str(\"\\n\\n\");\n     }\n     log #fmt(\"running %s\", testfile);\n     let props = load_props(testfile);\n@@ -168,7 +167,7 @@ actual:\\n\\\n ------------------------------------------\\n\\\n \\n\",\n                           expected, actual);\n-            io::stdout().write_str(msg);\n+            ioivec::stdout().write_str(msg);\n             fail;\n         }\n     }\n@@ -336,7 +335,8 @@ fn dump_output(config: &config, testfile: &str,\n fn dump_output_file(config: &config, testfile: &str,\n                     out: &str, extension: &str) {\n     let outfile = make_out_name(config, testfile, extension);\n-    let writer = io::file_writer(outfile, [io::create, io::truncate]);\n+    let writer = ioivec::file_writer(outfile,\n+                                     ~[ioivec::create, ioivec::truncate]);\n     writer.write_str(out);\n }\n \n@@ -370,15 +370,15 @@ fn maybe_dump_to_stdout(config: &config,\n         let sep2 = #fmt(\"------%s------------------------------\",\n                         \"stderr\");\n         let sep3 = \"------------------------------------------\";\n-        io::stdout().write_line(sep1);\n-        io::stdout().write_line(out);\n-        io::stdout().write_line(sep2);\n-        io::stdout().write_line(err);\n-        io::stdout().write_line(sep3);\n+        ioivec::stdout().write_line(sep1);\n+        ioivec::stdout().write_line(out);\n+        ioivec::stdout().write_line(sep2);\n+        ioivec::stdout().write_line(err);\n+        ioivec::stdout().write_line(sep3);\n     }\n }\n \n-fn error(err: &str) { io::stdout().write_line(#fmt(\"\\nerror: %s\", err)); }\n+fn error(err: &str) { ioivec::stdout().write_line(#fmt(\"\\nerror: %s\", err)); }\n \n fn fatal(err: &str) -> ! { error(err); fail; }\n \n@@ -397,6 +397,6 @@ stderr:\\n\\\n ------------------------------------------\\n\\\n \\n\",\n              err, procres.cmdline, procres.stdout, procres.stderr);\n-    io::stdout().write_str(msg);\n+    ioivec::stdout().write_str(msg);\n     fail;\n }"}, {"sha": "5c2748837ae7c7033681b652739a80a6e8837a1d", "filename": "src/test/compiletest/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82b1e3f5cc0d0fec0f7fbab0f9b8766ce732c792/src%2Ftest%2Fcompiletest%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b1e3f5cc0d0fec0f7fbab0f9b8766ce732c792/src%2Ftest%2Fcompiletest%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Futil.rs?ref=82b1e3f5cc0d0fec0f7fbab0f9b8766ce732c792", "patch": "@@ -1,6 +1,6 @@\n import std::option;\n import std::generic_os::getenv;\n-import std::io;\n+import std::ioivec;\n \n import common::config;\n \n@@ -25,5 +25,5 @@ fn lib_path_env_var() -> str { \"PATH\" }\n \n fn logv(config: &config, s: &str) {\n     log s;\n-    if config.verbose { io::stdout().write_line(s); }\n+    if config.verbose { ioivec::stdout().write_line(s); }\n }"}, {"sha": "fcfee6aace94cbd018985bab7f7f603719153c14", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/82b1e3f5cc0d0fec0f7fbab0f9b8766ce732c792/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b1e3f5cc0d0fec0f7fbab0f9b8766ce732c792/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=82b1e3f5cc0d0fec0f7fbab0f9b8766ce732c792", "patch": "@@ -6,7 +6,6 @@\n \n use std;\n \n-import std::io;\n import option = std::option::t;\n import std::option::some;\n import std::option::none;"}, {"sha": "4d29e40d8fb1a4268473e1c3afb22460837655b3", "filename": "src/test/run-pass/utf8_chars.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/82b1e3f5cc0d0fec0f7fbab0f9b8766ce732c792/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b1e3f5cc0d0fec0f7fbab0f9b8766ce732c792/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8_chars.rs?ref=82b1e3f5cc0d0fec0f7fbab0f9b8766ce732c792", "patch": "@@ -1,6 +1,5 @@\n use std;\n import std::str;\n-import std::io;\n import std::ivec;\n \n fn main() {"}, {"sha": "6b94446f563476e79f3a5caff89505f763dc6fdb", "filename": "src/test/stdtest/io.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82b1e3f5cc0d0fec0f7fbab0f9b8766ce732c792/src%2Ftest%2Fstdtest%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b1e3f5cc0d0fec0f7fbab0f9b8766ce732c792/src%2Ftest%2Fstdtest%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fio.rs?ref=82b1e3f5cc0d0fec0f7fbab0f9b8766ce732c792", "patch": "@@ -1,6 +1,6 @@\n // -*- rust -*-\n use std;\n-import std::io;\n+import std::ioivec;\n import std::str;\n \n #[cfg(target_os = \"linux\")]\n@@ -12,11 +12,11 @@ fn test_simple() {\n     let frood: str = \"A hoopy frood who really knows where his towel is.\";\n     log frood;\n     {\n-        let out: io::writer =\n-            io::file_writer(tmpfile, [io::create, io::truncate]);\n+        let out: ioivec::writer =\n+            ioivec::file_writer(tmpfile, ~[ioivec::create, ioivec::truncate]);\n         out.write_str(frood);\n     }\n-    let inp: io::reader = io::file_reader(tmpfile);\n+    let inp: ioivec::reader = ioivec::file_reader(tmpfile);\n     let frood2: str = inp.read_c_str();\n     log frood2;\n     assert (str::eq(frood, frood2));"}, {"sha": "88becdd1bae043bf2be82c99cdca9e3596def7ef", "filename": "src/test/stdtest/run.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/82b1e3f5cc0d0fec0f7fbab0f9b8766ce732c792/src%2Ftest%2Fstdtest%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b1e3f5cc0d0fec0f7fbab0f9b8766ce732c792/src%2Ftest%2Fstdtest%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Frun.rs?ref=82b1e3f5cc0d0fec0f7fbab0f9b8766ce732c792", "patch": "@@ -1,7 +1,7 @@\n use std;\n import std::run;\n import std::os;\n-import std::io;\n+import std::ioivec;\n import std::option;\n import std::str;\n import std::ivec;\n@@ -46,8 +46,8 @@ fn test_pipes() {\n     assert expected == actual;\n \n     fn writeclose(fd: int, s: &str) {\n-        let writer = io::new_writer(\n-            io::fd_buf_writer(fd, option::none));\n+        let writer = ioivec::new_writer(\n+            ioivec::fd_buf_writer(fd, option::none));\n         writer.write_str(s);\n \n         os::libc::close(fd);\n@@ -56,10 +56,11 @@ fn test_pipes() {\n     fn readclose(fd: int) -> str {\n         // Copied from run::program_output\n         let file = os::fd_FILE(fd);\n-        let reader = io::new_reader(io::FILE_buf_reader(file, option::none));\n+        let reader = ioivec::new_reader(\n+            ioivec::FILE_buf_reader(file, option::none));\n         let buf = \"\";\n         while !reader.eof() {\n-            let bytes = ivec::from_vec(reader.read_bytes(4096u));\n+            let bytes = reader.read_bytes(4096u);\n             buf += str::unsafe_from_bytes(bytes);\n         }\n         os::libc::fclose(file);"}]}