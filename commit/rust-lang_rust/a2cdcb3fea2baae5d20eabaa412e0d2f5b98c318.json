{"sha": "a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318", "node_id": "C_kwDOAAsO6NoAKGEyY2RjYjNmZWEyYmFhZTVkMjBlYWJhYTQxMmUwZDJmNWI5OGMzMTg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-04T13:03:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-04T13:03:07Z"}, "message": "Auto merge of #101296 - compiler-errors:head-span-for-enclosing-scope, r=oli-obk\n\nUse head span for `rustc_on_unimplemented`'s `enclosing_scope` attr\n\nThis may make #101281 slightly easier to understand", "tree": {"sha": "840e2d388bc6200e0042b282b4dd547395bd41ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/840e2d388bc6200e0042b282b4dd547395bd41ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318", "html_url": "https://github.com/rust-lang/rust/commit/a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b11bf65e4aaa125952b6479a63f36e9e83efc32c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b11bf65e4aaa125952b6479a63f36e9e83efc32c", "html_url": "https://github.com/rust-lang/rust/commit/b11bf65e4aaa125952b6479a63f36e9e83efc32c"}, {"sha": "edba0c92de737ff6d65255865366e0fddf76780c", "url": "https://api.github.com/repos/rust-lang/rust/commits/edba0c92de737ff6d65255865366e0fddf76780c", "html_url": "https://github.com/rust-lang/rust/commit/edba0c92de737ff6d65255865366e0fddf76780c"}], "stats": {"total": 575, "additions": 287, "deletions": 288}, "files": [{"sha": "9b4ea4f29eabbff92171462a8ce7aa2b9b780e14", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318", "patch": "@@ -662,7 +662,6 @@ symbols! {\n         emit_struct,\n         emit_struct_field,\n         enable,\n-        enclosing_scope,\n         encode,\n         end,\n         env,\n@@ -1065,6 +1064,7 @@ symbols! {\n         panic_unwind,\n         panicking,\n         param_attrs,\n+        parent_label,\n         partial_cmp,\n         partial_ord,\n         passes,"}, {"sha": "34b877d3f725158f15f7cff4e37072d645a45409", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318", "patch": "@@ -349,7 +349,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             message,\n                             label,\n                             note,\n-                            enclosing_scope,\n+                            parent_label,\n                             append_const_msg,\n                         } = self.on_unimplemented_note(trait_ref, &obligation);\n                         let have_alt_message = message.is_some() || label.is_some();\n@@ -530,7 +530,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             // If it has a custom `#[rustc_on_unimplemented]` note, let's display it\n                             err.note(s.as_str());\n                         }\n-                        if let Some(ref s) = enclosing_scope {\n+                        if let Some(ref s) = parent_label {\n                             let body = tcx\n                                 .hir()\n                                 .opt_local_def_id(obligation.cause.body_id)\n@@ -539,11 +539,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                                         hir_id: obligation.cause.body_id,\n                                     })\n                                 });\n-\n-                            let enclosing_scope_span =\n-                                tcx.hir().span_with_body(tcx.hir().local_def_id_to_hir_id(body));\n-\n-                            err.span_label(enclosing_scope_span, s);\n+                            err.span_label(tcx.def_span(body), s);\n                         }\n \n                         self.suggest_floating_point_literal(&obligation, &mut err, &trait_ref);"}, {"sha": "4a4f34b768059355ed43e33e7acf594c3e243f96", "filename": "compiler/rustc_trait_selection/src/traits/on_unimplemented.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs?ref=a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318", "patch": "@@ -22,7 +22,7 @@ pub struct OnUnimplementedDirective {\n     pub message: Option<OnUnimplementedFormatString>,\n     pub label: Option<OnUnimplementedFormatString>,\n     pub note: Option<OnUnimplementedFormatString>,\n-    pub enclosing_scope: Option<OnUnimplementedFormatString>,\n+    pub parent_label: Option<OnUnimplementedFormatString>,\n     pub append_const_msg: Option<Option<Symbol>>,\n }\n \n@@ -31,7 +31,7 @@ pub struct OnUnimplementedNote {\n     pub message: Option<String>,\n     pub label: Option<String>,\n     pub note: Option<String>,\n-    pub enclosing_scope: Option<String>,\n+    pub parent_label: Option<String>,\n     /// Append a message for `~const Trait` errors. `None` means not requested and\n     /// should fallback to a generic message, `Some(None)` suggests using the default\n     /// appended message, `Some(Some(s))` suggests use the `s` message instead of the\n@@ -74,7 +74,7 @@ impl<'tcx> OnUnimplementedDirective {\n         let mut message = None;\n         let mut label = None;\n         let mut note = None;\n-        let mut enclosing_scope = None;\n+        let mut parent_label = None;\n         let mut subcommands = vec![];\n         let mut append_const_msg = None;\n \n@@ -94,9 +94,9 @@ impl<'tcx> OnUnimplementedDirective {\n                     note = parse_value(note_)?;\n                     continue;\n                 }\n-            } else if item.has_name(sym::enclosing_scope) && enclosing_scope.is_none() {\n-                if let Some(enclosing_scope_) = item.value_str() {\n-                    enclosing_scope = parse_value(enclosing_scope_)?;\n+            } else if item.has_name(sym::parent_label) && parent_label.is_none() {\n+                if let Some(parent_label_) = item.value_str() {\n+                    parent_label = parse_value(parent_label_)?;\n                     continue;\n                 }\n             } else if item.has_name(sym::on)\n@@ -135,7 +135,7 @@ impl<'tcx> OnUnimplementedDirective {\n                 message,\n                 label,\n                 note,\n-                enclosing_scope,\n+                parent_label,\n                 append_const_msg,\n             })\n         }\n@@ -160,7 +160,7 @@ impl<'tcx> OnUnimplementedDirective {\n                     attr.span,\n                 )?),\n                 note: None,\n-                enclosing_scope: None,\n+                parent_label: None,\n                 append_const_msg: None,\n             }))\n         } else {\n@@ -181,7 +181,7 @@ impl<'tcx> OnUnimplementedDirective {\n         let mut message = None;\n         let mut label = None;\n         let mut note = None;\n-        let mut enclosing_scope = None;\n+        let mut parent_label = None;\n         let mut append_const_msg = None;\n         info!(\"evaluate({:?}, trait_ref={:?}, options={:?})\", self, trait_ref, options);\n \n@@ -217,8 +217,8 @@ impl<'tcx> OnUnimplementedDirective {\n                 note = Some(note_.clone());\n             }\n \n-            if let Some(ref enclosing_scope_) = command.enclosing_scope {\n-                enclosing_scope = Some(enclosing_scope_.clone());\n+            if let Some(ref parent_label_) = command.parent_label {\n+                parent_label = Some(parent_label_.clone());\n             }\n \n             append_const_msg = command.append_const_msg;\n@@ -228,7 +228,7 @@ impl<'tcx> OnUnimplementedDirective {\n             label: label.map(|l| l.format(tcx, trait_ref, &options_map)),\n             message: message.map(|m| m.format(tcx, trait_ref, &options_map)),\n             note: note.map(|n| n.format(tcx, trait_ref, &options_map)),\n-            enclosing_scope: enclosing_scope.map(|e_s| e_s.format(tcx, trait_ref, &options_map)),\n+            parent_label: parent_label.map(|e_s| e_s.format(tcx, trait_ref, &options_map)),\n             append_const_msg,\n         }\n     }"}, {"sha": "10f041344095c2f14614f914260b9ebe6a5160eb", "filename": "library/core/src/ops/try_trait.rs", "status": "modified", "additions": 82, "deletions": 2, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs?ref=a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318", "patch": "@@ -222,7 +222,87 @@ pub trait Try: FromResidual {\n /// Every `Try` type needs to be recreatable from its own associated\n /// `Residual` type, but can also have additional `FromResidual` implementations\n /// to support interconversion with other `Try` types.\n-#[rustc_on_unimplemented(\n+#[cfg_attr(not(bootstrap), rustc_on_unimplemented(\n+    on(\n+        all(\n+            from_desugaring = \"QuestionMark\",\n+            _Self = \"std::result::Result<T, E>\",\n+            R = \"std::option::Option<std::convert::Infallible>\"\n+        ),\n+        message = \"the `?` operator can only be used on `Result`s, not `Option`s, \\\n+            in {ItemContext} that returns `Result`\",\n+        label = \"use `.ok_or(...)?` to provide an error compatible with `{Self}`\",\n+        parent_label = \"this function returns a `Result`\"\n+    ),\n+    on(\n+        all(\n+            from_desugaring = \"QuestionMark\",\n+            _Self = \"std::result::Result<T, E>\",\n+        ),\n+        // There's a special error message in the trait selection code for\n+        // `From` in `?`, so this is not shown for result-in-result errors,\n+        // and thus it can be phrased more strongly than `ControlFlow`'s.\n+        message = \"the `?` operator can only be used on `Result`s \\\n+            in {ItemContext} that returns `Result`\",\n+        label = \"this `?` produces `{R}`, which is incompatible with `{Self}`\",\n+        parent_label = \"this function returns a `Result`\"\n+    ),\n+    on(\n+        all(\n+            from_desugaring = \"QuestionMark\",\n+            _Self = \"std::option::Option<T>\",\n+            R = \"std::result::Result<T, E>\",\n+        ),\n+        message = \"the `?` operator can only be used on `Option`s, not `Result`s, \\\n+            in {ItemContext} that returns `Option`\",\n+        label = \"use `.ok()?` if you want to discard the `{R}` error information\",\n+        parent_label = \"this function returns an `Option`\"\n+    ),\n+    on(\n+        all(\n+            from_desugaring = \"QuestionMark\",\n+            _Self = \"std::option::Option<T>\",\n+        ),\n+        // `Option`-in-`Option` always works, as there's only one possible\n+        // residual, so this can also be phrased strongly.\n+        message = \"the `?` operator can only be used on `Option`s \\\n+            in {ItemContext} that returns `Option`\",\n+        label = \"this `?` produces `{R}`, which is incompatible with `{Self}`\",\n+        parent_label = \"this function returns an `Option`\"\n+    ),\n+    on(\n+        all(\n+            from_desugaring = \"QuestionMark\",\n+            _Self = \"std::ops::ControlFlow<B, C>\",\n+            R = \"std::ops::ControlFlow<B, C>\",\n+        ),\n+        message = \"the `?` operator in {ItemContext} that returns `ControlFlow<B, _>` \\\n+            can only be used on other `ControlFlow<B, _>`s (with the same Break type)\",\n+        label = \"this `?` produces `{R}`, which is incompatible with `{Self}`\",\n+        parent_label = \"this function returns a `ControlFlow`\",\n+        note = \"unlike `Result`, there's no `From`-conversion performed for `ControlFlow`\"\n+    ),\n+    on(\n+        all(\n+            from_desugaring = \"QuestionMark\",\n+            _Self = \"std::ops::ControlFlow<B, C>\",\n+            // `R` is not a `ControlFlow`, as that case was matched previously\n+        ),\n+        message = \"the `?` operator can only be used on `ControlFlow`s \\\n+            in {ItemContext} that returns `ControlFlow`\",\n+        label = \"this `?` produces `{R}`, which is incompatible with `{Self}`\",\n+        parent_label = \"this function returns a `ControlFlow`\",\n+    ),\n+    on(\n+        all(from_desugaring = \"QuestionMark\"),\n+        message = \"the `?` operator can only be used in {ItemContext} \\\n+                    that returns `Result` or `Option` \\\n+                    (or another type that implements `{FromResidual}`)\",\n+        label = \"cannot use the `?` operator in {ItemContext} that returns `{Self}`\",\n+        parent_label = \"this function should return `Result` or `Option` to accept `?`\"\n+    ),\n+))]\n+#[cfg_attr(bootstrap, rustc_on_unimplemented(\n     on(\n         all(\n             from_desugaring = \"QuestionMark\",\n@@ -301,7 +381,7 @@ pub trait Try: FromResidual {\n         label = \"cannot use the `?` operator in {ItemContext} that returns `{Self}`\",\n         enclosing_scope = \"this function should return `Result` or `Option` to accept `?`\"\n     ),\n-)]\n+))]\n #[rustc_diagnostic_item = \"FromResidual\"]\n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n pub trait FromResidual<R = <Self as Try>::Residual> {"}, {"sha": "881bff63f5f63974cebc462cf46fc7e6eafae95e", "filename": "src/test/ui/on-unimplemented/enclosing-scope.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b11bf65e4aaa125952b6479a63f36e9e83efc32c/src%2Ftest%2Fui%2Fon-unimplemented%2Fenclosing-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b11bf65e4aaa125952b6479a63f36e9e83efc32c/src%2Ftest%2Fui%2Fon-unimplemented%2Fenclosing-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fenclosing-scope.rs?ref=b11bf65e4aaa125952b6479a63f36e9e83efc32c", "patch": "@@ -1,27 +0,0 @@\n-// Test scope annotations from `enclosing_scope` parameter\n-\n-#![feature(rustc_attrs)]\n-\n-#[rustc_on_unimplemented(enclosing_scope=\"in this scope\")]\n-trait Trait{}\n-\n-struct Foo;\n-\n-fn f<T: Trait>(x: T) {}\n-\n-fn main() {\n-    let x = || {\n-        f(Foo{}); //~ ERROR the trait bound `Foo: Trait` is not satisfied\n-        let y = || {\n-            f(Foo{}); //~ ERROR the trait bound `Foo: Trait` is not satisfied\n-        };\n-    };\n-\n-    {\n-        {\n-            f(Foo{}); //~ ERROR the trait bound `Foo: Trait` is not satisfied\n-        }\n-    }\n-\n-    f(Foo{}); //~ ERROR the trait bound `Foo: Trait` is not satisfied\n-}"}, {"sha": "67759d02a161e83db474b5275ba1ac167bee02b8", "filename": "src/test/ui/on-unimplemented/enclosing-scope.stderr", "status": "removed", "additions": 0, "deletions": 86, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/b11bf65e4aaa125952b6479a63f36e9e83efc32c/src%2Ftest%2Fui%2Fon-unimplemented%2Fenclosing-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b11bf65e4aaa125952b6479a63f36e9e83efc32c/src%2Ftest%2Fui%2Fon-unimplemented%2Fenclosing-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fenclosing-scope.stderr?ref=b11bf65e4aaa125952b6479a63f36e9e83efc32c", "patch": "@@ -1,86 +0,0 @@\n-error[E0277]: the trait bound `Foo: Trait` is not satisfied\n-  --> $DIR/enclosing-scope.rs:14:11\n-   |\n-LL |       let x = || {\n-   |  _____________-\n-LL | |         f(Foo{});\n-   | |         - ^^^^^ the trait `Trait` is not implemented for `Foo`\n-   | |         |\n-   | |         required by a bound introduced by this call\n-LL | |         let y = || {\n-LL | |             f(Foo{});\n-LL | |         };\n-LL | |     };\n-   | |_____- in this scope\n-   |\n-note: required by a bound in `f`\n-  --> $DIR/enclosing-scope.rs:10:9\n-   |\n-LL | fn f<T: Trait>(x: T) {}\n-   |         ^^^^^ required by this bound in `f`\n-\n-error[E0277]: the trait bound `Foo: Trait` is not satisfied\n-  --> $DIR/enclosing-scope.rs:16:15\n-   |\n-LL |           let y = || {\n-   |  _________________-\n-LL | |             f(Foo{});\n-   | |             - ^^^^^ the trait `Trait` is not implemented for `Foo`\n-   | |             |\n-   | |             required by a bound introduced by this call\n-LL | |         };\n-   | |_________- in this scope\n-   |\n-note: required by a bound in `f`\n-  --> $DIR/enclosing-scope.rs:10:9\n-   |\n-LL | fn f<T: Trait>(x: T) {}\n-   |         ^^^^^ required by this bound in `f`\n-\n-error[E0277]: the trait bound `Foo: Trait` is not satisfied\n-  --> $DIR/enclosing-scope.rs:22:15\n-   |\n-LL | / fn main() {\n-LL | |     let x = || {\n-LL | |         f(Foo{});\n-LL | |         let y = || {\n-...  |\n-LL | |             f(Foo{});\n-   | |             - ^^^^^ the trait `Trait` is not implemented for `Foo`\n-   | |             |\n-   | |             required by a bound introduced by this call\n-...  |\n-LL | |     f(Foo{});\n-LL | | }\n-   | |_- in this scope\n-   |\n-note: required by a bound in `f`\n-  --> $DIR/enclosing-scope.rs:10:9\n-   |\n-LL | fn f<T: Trait>(x: T) {}\n-   |         ^^^^^ required by this bound in `f`\n-\n-error[E0277]: the trait bound `Foo: Trait` is not satisfied\n-  --> $DIR/enclosing-scope.rs:26:7\n-   |\n-LL | / fn main() {\n-LL | |     let x = || {\n-LL | |         f(Foo{});\n-LL | |         let y = || {\n-...  |\n-LL | |     f(Foo{});\n-   | |     - ^^^^^ the trait `Trait` is not implemented for `Foo`\n-   | |     |\n-   | |     required by a bound introduced by this call\n-LL | | }\n-   | |_- in this scope\n-   |\n-note: required by a bound in `f`\n-  --> $DIR/enclosing-scope.rs:10:9\n-   |\n-LL | fn f<T: Trait>(x: T) {}\n-   |         ^^^^^ required by this bound in `f`\n-\n-error: aborting due to 4 previous errors\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "b65f6496831ea03d565fed1106da685adcd1fed5", "filename": "src/test/ui/on-unimplemented/parent-label.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318/src%2Ftest%2Fui%2Fon-unimplemented%2Fparent-label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318/src%2Ftest%2Fui%2Fon-unimplemented%2Fparent-label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fparent-label.rs?ref=a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318", "patch": "@@ -0,0 +1,27 @@\n+// Test scope annotations from `parent_label` parameter\n+\n+#![feature(rustc_attrs)]\n+\n+#[rustc_on_unimplemented(parent_label = \"in this scope\")]\n+trait Trait {}\n+\n+struct Foo;\n+\n+fn f<T: Trait>(x: T) {}\n+\n+fn main() {\n+    let x = || {\n+        f(Foo {}); //~ ERROR the trait bound `Foo: Trait` is not satisfied\n+        let y = || {\n+            f(Foo {}); //~ ERROR the trait bound `Foo: Trait` is not satisfied\n+        };\n+    };\n+\n+    {\n+        {\n+            f(Foo {}); //~ ERROR the trait bound `Foo: Trait` is not satisfied\n+        }\n+    }\n+\n+    f(Foo {}); //~ ERROR the trait bound `Foo: Trait` is not satisfied\n+}"}, {"sha": "8cd7412fd9d3d923743f3d938d1d72536d0d737f", "filename": "src/test/ui/on-unimplemented/parent-label.stderr", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318/src%2Ftest%2Fui%2Fon-unimplemented%2Fparent-label.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318/src%2Ftest%2Fui%2Fon-unimplemented%2Fparent-label.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fparent-label.stderr?ref=a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318", "patch": "@@ -0,0 +1,69 @@\n+error[E0277]: the trait bound `Foo: Trait` is not satisfied\n+  --> $DIR/parent-label.rs:14:11\n+   |\n+LL |     let x = || {\n+   |             -- in this scope\n+LL |         f(Foo {});\n+   |         - ^^^^^^ the trait `Trait` is not implemented for `Foo`\n+   |         |\n+   |         required by a bound introduced by this call\n+   |\n+note: required by a bound in `f`\n+  --> $DIR/parent-label.rs:10:9\n+   |\n+LL | fn f<T: Trait>(x: T) {}\n+   |         ^^^^^ required by this bound in `f`\n+\n+error[E0277]: the trait bound `Foo: Trait` is not satisfied\n+  --> $DIR/parent-label.rs:16:15\n+   |\n+LL |         let y = || {\n+   |                 -- in this scope\n+LL |             f(Foo {});\n+   |             - ^^^^^^ the trait `Trait` is not implemented for `Foo`\n+   |             |\n+   |             required by a bound introduced by this call\n+   |\n+note: required by a bound in `f`\n+  --> $DIR/parent-label.rs:10:9\n+   |\n+LL | fn f<T: Trait>(x: T) {}\n+   |         ^^^^^ required by this bound in `f`\n+\n+error[E0277]: the trait bound `Foo: Trait` is not satisfied\n+  --> $DIR/parent-label.rs:22:15\n+   |\n+LL | fn main() {\n+   | --------- in this scope\n+...\n+LL |             f(Foo {});\n+   |             - ^^^^^^ the trait `Trait` is not implemented for `Foo`\n+   |             |\n+   |             required by a bound introduced by this call\n+   |\n+note: required by a bound in `f`\n+  --> $DIR/parent-label.rs:10:9\n+   |\n+LL | fn f<T: Trait>(x: T) {}\n+   |         ^^^^^ required by this bound in `f`\n+\n+error[E0277]: the trait bound `Foo: Trait` is not satisfied\n+  --> $DIR/parent-label.rs:26:7\n+   |\n+LL | fn main() {\n+   | --------- in this scope\n+...\n+LL |     f(Foo {});\n+   |     - ^^^^^^ the trait `Trait` is not implemented for `Foo`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `f`\n+  --> $DIR/parent-label.rs:10:9\n+   |\n+LL | fn f<T: Trait>(x: T) {}\n+   |         ^^^^^ required by this bound in `f`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "bc06fde49e993c3305934510f91e48268a907558", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 15, "deletions": 33, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318", "patch": "@@ -1493,17 +1493,11 @@ LL |     if (let 0 = 0)? {}\n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/disallowed-positions.rs:132:19\n    |\n-LL | / fn nested_within_if_expr() {\n-LL | |     if &let 0 = 0 {}\n-LL | |\n-LL | |\n-...  |\n-LL | |     if (let 0 = 0)? {}\n-   | |                   ^ cannot use the `?` operator in a function that returns `()`\n-...  |\n-LL | |\n-LL | | }\n-   | |_- this function should return `Result` or `Option` to accept `?`\n+LL | fn nested_within_if_expr() {\n+   | -------------------------- this function should return `Result` or `Option` to accept `?`\n+...\n+LL |     if (let 0 = 0)? {}\n+   |                   ^ cannot use the `?` operator in a function that returns `()`\n    |\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n \n@@ -1693,17 +1687,11 @@ LL |     while (let 0 = 0)? {}\n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/disallowed-positions.rs:224:22\n    |\n-LL | / fn nested_within_while_expr() {\n-LL | |     while &let 0 = 0 {}\n-LL | |\n-LL | |\n-...  |\n-LL | |     while (let 0 = 0)? {}\n-   | |                      ^ cannot use the `?` operator in a function that returns `()`\n-...  |\n-LL | |\n-LL | | }\n-   | |_- this function should return `Result` or `Option` to accept `?`\n+LL | fn nested_within_while_expr() {\n+   | ----------------------------- this function should return `Result` or `Option` to accept `?`\n+...\n+LL |     while (let 0 = 0)? {}\n+   |                      ^ cannot use the `?` operator in a function that returns `()`\n    |\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n \n@@ -1881,17 +1869,11 @@ LL |     (let 0 = 0)?;\n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/disallowed-positions.rs:325:16\n    |\n-LL | / fn outside_if_and_while_expr() {\n-LL | |     &let 0 = 0;\n-LL | |\n-LL | |\n-...  |\n-LL | |     (let 0 = 0)?;\n-   | |                ^ cannot use the `?` operator in a function that returns `()`\n-...  |\n-LL | |\n-LL | | }\n-   | |_- this function should return `Result` or `Option` to accept `?`\n+LL | fn outside_if_and_while_expr() {\n+   | ------------------------------ this function should return `Result` or `Option` to accept `?`\n+...\n+LL |     (let 0 = 0)?;\n+   |                ^ cannot use the `?` operator in a function that returns `()`\n    |\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n "}, {"sha": "27e6a603acd91689accbfe1fbe4b6e19139170e3", "filename": "src/test/ui/try-trait/bad-interconversion.stderr", "status": "modified", "additions": 28, "deletions": 45, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr?ref=a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318", "patch": "@@ -22,13 +22,10 @@ LL |     Ok(Err(123_i32)?)\n error[E0277]: the `?` operator can only be used on `Result`s, not `Option`s, in a function that returns `Result`\n   --> $DIR/bad-interconversion.rs:11:12\n    |\n-LL | / fn option_to_result() -> Result<u64, String> {\n-LL | |     Some(3)?;\n-   | |            ^ use `.ok_or(...)?` to provide an error compatible with `Result<u64, String>`\n-LL | |\n-LL | |     Ok(10)\n-LL | | }\n-   | |_- this function returns a `Result`\n+LL | fn option_to_result() -> Result<u64, String> {\n+   | -------------------------------------------- this function returns a `Result`\n+LL |     Some(3)?;\n+   |            ^ use `.ok_or(...)?` to provide an error compatible with `Result<u64, String>`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `Result<u64, String>`\n    = help: the following other types implement trait `FromResidual<R>`:\n@@ -38,12 +35,10 @@ LL | | }\n error[E0277]: the `?` operator can only be used on `Result`s in a function that returns `Result`\n   --> $DIR/bad-interconversion.rs:17:31\n    |\n-LL | / fn control_flow_to_result() -> Result<u64, String> {\n-LL | |     Ok(ControlFlow::Break(123)?)\n-   | |                               ^ this `?` produces `ControlFlow<{integer}, Infallible>`, which is incompatible with `Result<u64, String>`\n-LL | |\n-LL | | }\n-   | |_- this function returns a `Result`\n+LL | fn control_flow_to_result() -> Result<u64, String> {\n+   | -------------------------------------------------- this function returns a `Result`\n+LL |     Ok(ControlFlow::Break(123)?)\n+   |                               ^ this `?` produces `ControlFlow<{integer}, Infallible>`, which is incompatible with `Result<u64, String>`\n    |\n    = help: the trait `FromResidual<ControlFlow<{integer}, Infallible>>` is not implemented for `Result<u64, String>`\n    = help: the following other types implement trait `FromResidual<R>`:\n@@ -53,12 +48,10 @@ LL | | }\n error[E0277]: the `?` operator can only be used on `Option`s, not `Result`s, in a function that returns `Option`\n   --> $DIR/bad-interconversion.rs:22:22\n    |\n-LL | / fn result_to_option() -> Option<u16> {\n-LL | |     Some(Err(\"hello\")?)\n-   | |                      ^ use `.ok()?` if you want to discard the `Result<Infallible, &str>` error information\n-LL | |\n-LL | | }\n-   | |_- this function returns an `Option`\n+LL | fn result_to_option() -> Option<u16> {\n+   | ------------------------------------ this function returns an `Option`\n+LL |     Some(Err(\"hello\")?)\n+   |                      ^ use `.ok()?` if you want to discard the `Result<Infallible, &str>` error information\n    |\n    = help: the trait `FromResidual<Result<Infallible, &str>>` is not implemented for `Option<u16>`\n    = help: the following other types implement trait `FromResidual<R>`:\n@@ -68,12 +61,10 @@ LL | | }\n error[E0277]: the `?` operator can only be used on `Option`s in a function that returns `Option`\n   --> $DIR/bad-interconversion.rs:27:33\n    |\n-LL | / fn control_flow_to_option() -> Option<u64> {\n-LL | |     Some(ControlFlow::Break(123)?)\n-   | |                                 ^ this `?` produces `ControlFlow<{integer}, Infallible>`, which is incompatible with `Option<u64>`\n-LL | |\n-LL | | }\n-   | |_- this function returns an `Option`\n+LL | fn control_flow_to_option() -> Option<u64> {\n+   | ------------------------------------------ this function returns an `Option`\n+LL |     Some(ControlFlow::Break(123)?)\n+   |                                 ^ this `?` produces `ControlFlow<{integer}, Infallible>`, which is incompatible with `Option<u64>`\n    |\n    = help: the trait `FromResidual<ControlFlow<{integer}, Infallible>>` is not implemented for `Option<u64>`\n    = help: the following other types implement trait `FromResidual<R>`:\n@@ -83,40 +74,32 @@ LL | | }\n error[E0277]: the `?` operator can only be used on `ControlFlow`s in a function that returns `ControlFlow`\n   --> $DIR/bad-interconversion.rs:32:39\n    |\n-LL | / fn result_to_control_flow() -> ControlFlow<String> {\n-LL | |     ControlFlow::Continue(Err(\"hello\")?)\n-   | |                                       ^ this `?` produces `Result<Infallible, &str>`, which is incompatible with `ControlFlow<String>`\n-LL | |\n-LL | | }\n-   | |_- this function returns a `ControlFlow`\n+LL | fn result_to_control_flow() -> ControlFlow<String> {\n+   | -------------------------------------------------- this function returns a `ControlFlow`\n+LL |     ControlFlow::Continue(Err(\"hello\")?)\n+   |                                       ^ this `?` produces `Result<Infallible, &str>`, which is incompatible with `ControlFlow<String>`\n    |\n    = help: the trait `FromResidual<Result<Infallible, &str>>` is not implemented for `ControlFlow<String>`\n    = help: the trait `FromResidual` is implemented for `ControlFlow<B, C>`\n \n error[E0277]: the `?` operator can only be used on `ControlFlow`s in a function that returns `ControlFlow`\n   --> $DIR/bad-interconversion.rs:37:12\n    |\n-LL | / fn option_to_control_flow() -> ControlFlow<u64> {\n-LL | |     Some(3)?;\n-   | |            ^ this `?` produces `Option<Infallible>`, which is incompatible with `ControlFlow<u64>`\n-LL | |\n-LL | |     ControlFlow::Break(10)\n-LL | | }\n-   | |_- this function returns a `ControlFlow`\n+LL | fn option_to_control_flow() -> ControlFlow<u64> {\n+   | ----------------------------------------------- this function returns a `ControlFlow`\n+LL |     Some(3)?;\n+   |            ^ this `?` produces `Option<Infallible>`, which is incompatible with `ControlFlow<u64>`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `ControlFlow<u64>`\n    = help: the trait `FromResidual` is implemented for `ControlFlow<B, C>`\n \n error[E0277]: the `?` operator in a function that returns `ControlFlow<B, _>` can only be used on other `ControlFlow<B, _>`s (with the same Break type)\n   --> $DIR/bad-interconversion.rs:43:29\n    |\n-LL | / fn control_flow_to_control_flow() -> ControlFlow<i64> {\n-LL | |     ControlFlow::Break(4_u8)?;\n-   | |                             ^ this `?` produces `ControlFlow<u8, Infallible>`, which is incompatible with `ControlFlow<i64>`\n-LL | |\n-LL | |     ControlFlow::Continue(())\n-LL | | }\n-   | |_- this function returns a `ControlFlow`\n+LL | fn control_flow_to_control_flow() -> ControlFlow<i64> {\n+   | ----------------------------------------------------- this function returns a `ControlFlow`\n+LL |     ControlFlow::Break(4_u8)?;\n+   |                             ^ this `?` produces `ControlFlow<u8, Infallible>`, which is incompatible with `ControlFlow<i64>`\n    |\n    = help: the trait `FromResidual<ControlFlow<u8, Infallible>>` is not implemented for `ControlFlow<i64>`\n    = note: unlike `Result`, there's no `From`-conversion performed for `ControlFlow`"}, {"sha": "fabc1ff2c762ec34a85441720de9a79fa4c19a97", "filename": "src/test/ui/try-trait/option-to-result.stderr", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318/src%2Ftest%2Fui%2Ftry-trait%2Foption-to-result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318/src%2Ftest%2Fui%2Ftry-trait%2Foption-to-result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Foption-to-result.stderr?ref=a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318", "patch": "@@ -1,13 +1,11 @@\n error[E0277]: the `?` operator can only be used on `Result`s, not `Option`s, in a function that returns `Result`\n   --> $DIR/option-to-result.rs:5:6\n    |\n-LL | / fn test_result() -> Result<(),()> {\n-LL | |     let a:Option<()> = Some(());\n-LL | |     a?;\n-   | |      ^ use `.ok_or(...)?` to provide an error compatible with `Result<(), ()>`\n-LL | |     Ok(())\n-LL | | }\n-   | |_- this function returns a `Result`\n+LL | fn test_result() -> Result<(),()> {\n+   | --------------------------------- this function returns a `Result`\n+LL |     let a:Option<()> = Some(());\n+LL |     a?;\n+   |      ^ use `.ok_or(...)?` to provide an error compatible with `Result<(), ()>`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `Result<(), ()>`\n    = help: the following other types implement trait `FromResidual<R>`:\n@@ -17,13 +15,11 @@ LL | | }\n error[E0277]: the `?` operator can only be used on `Option`s, not `Result`s, in a function that returns `Option`\n   --> $DIR/option-to-result.rs:11:6\n    |\n-LL | / fn test_option() -> Option<i32>{\n-LL | |     let a:Result<i32, i32> = Ok(5);\n-LL | |     a?;\n-   | |      ^ use `.ok()?` if you want to discard the `Result<Infallible, i32>` error information\n-LL | |     Some(5)\n-LL | | }\n-   | |_- this function returns an `Option`\n+LL | fn test_option() -> Option<i32>{\n+   | ------------------------------- this function returns an `Option`\n+LL |     let a:Result<i32, i32> = Ok(5);\n+LL |     a?;\n+   |      ^ use `.ok()?` if you want to discard the `Result<Infallible, i32>` error information\n    |\n    = help: the trait `FromResidual<Result<Infallible, i32>>` is not implemented for `Option<i32>`\n    = help: the following other types implement trait `FromResidual<R>`:"}, {"sha": "9ee540c79fdda6ace10d8ec0b64a889ba486cacf", "filename": "src/test/ui/try-trait/try-on-option-diagnostics.stderr", "status": "modified", "additions": 20, "deletions": 27, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option-diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option-diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option-diagnostics.stderr?ref=a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318", "patch": "@@ -1,51 +1,44 @@\n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/try-on-option-diagnostics.rs:7:6\n    |\n-LL | / fn a_function() -> u32 {\n-LL | |     let x: Option<u32> = None;\n-LL | |     x?;\n-   | |      ^ cannot use the `?` operator in a function that returns `u32`\n-LL | |     22\n-LL | | }\n-   | |_- this function should return `Result` or `Option` to accept `?`\n+LL | fn a_function() -> u32 {\n+   | ---------------------- this function should return `Result` or `Option` to accept `?`\n+LL |     let x: Option<u32> = None;\n+LL |     x?;\n+   |      ^ cannot use the `?` operator in a function that returns `u32`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `u32`\n \n error[E0277]: the `?` operator can only be used in a closure that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/try-on-option-diagnostics.rs:14:10\n    |\n-LL |       let a_closure = || {\n-   |  _____________________-\n-LL | |         let x: Option<u32> = None;\n-LL | |         x?;\n-   | |          ^ cannot use the `?` operator in a closure that returns `{integer}`\n-LL | |         22\n-LL | |     };\n-   | |_____- this function should return `Result` or `Option` to accept `?`\n+LL |     let a_closure = || {\n+   |                     -- this function should return `Result` or `Option` to accept `?`\n+LL |         let x: Option<u32> = None;\n+LL |         x?;\n+   |          ^ cannot use the `?` operator in a closure that returns `{integer}`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `{integer}`\n \n error[E0277]: the `?` operator can only be used in a method that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/try-on-option-diagnostics.rs:26:14\n    |\n-LL | /         fn a_method() {\n-LL | |             let x: Option<u32> = None;\n-LL | |             x?;\n-   | |              ^ cannot use the `?` operator in a method that returns `()`\n-LL | |         }\n-   | |_________- this function should return `Result` or `Option` to accept `?`\n+LL |         fn a_method() {\n+   |         ------------- this function should return `Result` or `Option` to accept `?`\n+LL |             let x: Option<u32> = None;\n+LL |             x?;\n+   |              ^ cannot use the `?` operator in a method that returns `()`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `()`\n \n error[E0277]: the `?` operator can only be used in a trait method that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/try-on-option-diagnostics.rs:39:14\n    |\n-LL | /         fn a_trait_method() {\n-LL | |             let x: Option<u32> = None;\n-LL | |             x?;\n-   | |              ^ cannot use the `?` operator in a trait method that returns `()`\n-LL | |         }\n-   | |_________- this function should return `Result` or `Option` to accept `?`\n+LL |         fn a_trait_method() {\n+   |         ------------------- this function should return `Result` or `Option` to accept `?`\n+LL |             let x: Option<u32> = None;\n+LL |             x?;\n+   |              ^ cannot use the `?` operator in a trait method that returns `()`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `()`\n "}, {"sha": "fad6a1fe8237b925ddd144ac937760a4f2eab81a", "filename": "src/test/ui/try-trait/try-on-option.stderr", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option.stderr?ref=a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318", "patch": "@@ -1,13 +1,11 @@\n error[E0277]: the `?` operator can only be used on `Result`s, not `Option`s, in a function that returns `Result`\n   --> $DIR/try-on-option.rs:5:6\n    |\n-LL | / fn foo() -> Result<u32, ()> {\n-LL | |     let x: Option<u32> = None;\n-LL | |     x?;\n-   | |      ^ use `.ok_or(...)?` to provide an error compatible with `Result<u32, ()>`\n-LL | |     Ok(22)\n-LL | | }\n-   | |_- this function returns a `Result`\n+LL | fn foo() -> Result<u32, ()> {\n+   | --------------------------- this function returns a `Result`\n+LL |     let x: Option<u32> = None;\n+LL |     x?;\n+   |      ^ use `.ok_or(...)?` to provide an error compatible with `Result<u32, ()>`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `Result<u32, ()>`\n    = help: the following other types implement trait `FromResidual<R>`:\n@@ -17,13 +15,11 @@ LL | | }\n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/try-on-option.rs:11:6\n    |\n-LL | / fn bar() -> u32 {\n-LL | |     let x: Option<u32> = None;\n-LL | |     x?;\n-   | |      ^ cannot use the `?` operator in a function that returns `u32`\n-LL | |     22\n-LL | | }\n-   | |_- this function should return `Result` or `Option` to accept `?`\n+LL | fn bar() -> u32 {\n+   | --------------- this function should return `Result` or `Option` to accept `?`\n+LL |     let x: Option<u32> = None;\n+LL |     x?;\n+   |      ^ cannot use the `?` operator in a function that returns `u32`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `u32`\n "}, {"sha": "7cd38e0cf95eaf339f0dcafb31d7de20b160ebb4", "filename": "src/test/ui/try-trait/try-operator-on-main.stderr", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318/src%2Ftest%2Fui%2Ftry-trait%2Ftry-operator-on-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318/src%2Ftest%2Fui%2Ftry-trait%2Ftry-operator-on-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Ftry-operator-on-main.stderr?ref=a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318", "patch": "@@ -1,15 +1,11 @@\n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/try-operator-on-main.rs:7:31\n    |\n-LL | / fn main() {\n-LL | |     // error for a `Try` type on a non-`Try` fn\n-LL | |     std::fs::File::open(\"foo\")?;\n-   | |                               ^ cannot use the `?` operator in a function that returns `()`\n-LL | |\n-...  |\n-LL | |     try_trait_generic::<()>();\n-LL | | }\n-   | |_- this function should return `Result` or `Option` to accept `?`\n+LL | fn main() {\n+   | --------- this function should return `Result` or `Option` to accept `?`\n+LL |     // error for a `Try` type on a non-`Try` fn\n+LL |     std::fs::File::open(\"foo\")?;\n+   |                               ^ cannot use the `?` operator in a function that returns `()`\n    |\n    = help: the trait `FromResidual<Result<Infallible, std::io::Error>>` is not implemented for `()`\n \n@@ -24,17 +20,11 @@ LL |     ()?;\n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/try-operator-on-main.rs:10:7\n    |\n-LL | / fn main() {\n-LL | |     // error for a `Try` type on a non-`Try` fn\n-LL | |     std::fs::File::open(\"foo\")?;\n-LL | |\n-LL | |     // a non-`Try` type on a non-`Try` fn\n-LL | |     ()?;\n-   | |       ^ cannot use the `?` operator in a function that returns `()`\n-...  |\n-LL | |     try_trait_generic::<()>();\n-LL | | }\n-   | |_- this function should return `Result` or `Option` to accept `?`\n+LL | fn main() {\n+   | --------- this function should return `Result` or `Option` to accept `?`\n+...\n+LL |     ()?;\n+   |       ^ cannot use the `?` operator in a function that returns `()`\n    |\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n "}]}