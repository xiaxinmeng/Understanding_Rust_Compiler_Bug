{"sha": "9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwNzJlMTA4YjVhODcxZTg3YmUyM2I3ZWQyYzBjMWY1YzZmZDcwYmU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-21T20:00:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-21T20:00:50Z"}, "message": "Rollup merge of #65647 - nnethercote:rm-unnecessary-traits, r=Centril\n\nRemove unnecessary trait bounds and derivations\n\nThis PR removes unnecessary trait bounds and derivations from many types.\n\nr? @nikomatsakis", "tree": {"sha": "86cdece077308f5b48852d604d99791a5108f8b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86cdece077308f5b48852d604d99791a5108f8b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdrg5yCRBK7hj4Ov3rIwAAdHIIALLWk66KZBafcZjQmLiTa4pJ\n7YOrC34JjvHqiznUkd2nY9Qjkd3XT1iC0HykjsUBMd48i8F0WoV/VT4knR/uAe65\nC2q4qQmi2N4BYeAj//T/bBpGa54GY7xWED+ZJ4xBocjaT3mp7gxl/LfSX6dWv9AP\n40bibEkVi0Id9xPefaz4gA2LYkzIPfXxjiqoXOVW7AwfMvu5nnrw93aeZz5cz7wA\n8twSQr1bjjiT3CfwLwQiMccu16NZy6343PDEhc9P503XWMp4G4hEjSTIbZYr0WN6\nY+jtBlUAoY0ZnwJ4fl/BvkuLoxzYDwYH2biSdW0QL1Jyy8LFmR3/K7Kry1Kk3AQ=\n=qmch\n-----END PGP SIGNATURE-----\n", "payload": "tree 86cdece077308f5b48852d604d99791a5108f8b6\nparent e825e21e7adc5573bb8f19c5fa104ef666398746\nparent ac6daed384d17abd31f84fc8205c21eee6a248be\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1571688050 +0200\ncommitter GitHub <noreply@github.com> 1571688050 +0200\n\nRollup merge of #65647 - nnethercote:rm-unnecessary-traits, r=Centril\n\nRemove unnecessary trait bounds and derivations\n\nThis PR removes unnecessary trait bounds and derivations from many types.\n\nr? @nikomatsakis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "html_url": "https://github.com/rust-lang/rust/commit/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e825e21e7adc5573bb8f19c5fa104ef666398746", "url": "https://api.github.com/repos/rust-lang/rust/commits/e825e21e7adc5573bb8f19c5fa104ef666398746", "html_url": "https://github.com/rust-lang/rust/commit/e825e21e7adc5573bb8f19c5fa104ef666398746"}, {"sha": "ac6daed384d17abd31f84fc8205c21eee6a248be", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac6daed384d17abd31f84fc8205c21eee6a248be", "html_url": "https://github.com/rust-lang/rust/commit/ac6daed384d17abd31f84fc8205c21eee6a248be"}], "stats": {"total": 229, "additions": 105, "deletions": 124}, "files": [{"sha": "4310f2c6fa1405902c8ee04fdf068be18dda8226", "filename": "src/bootstrap/cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Fbootstrap%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Fbootstrap%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcache.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -161,7 +161,7 @@ impl Ord for Interned<String> {\n     }\n }\n \n-struct TyIntern<T: Hash + Clone + Eq> {\n+struct TyIntern<T: Clone + Eq> {\n     items: Vec<T>,\n     set: HashMap<T, Interned<T>>,\n }"}, {"sha": "0104507f7020ff30b940af4ffe85eaf85492f33e", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -35,7 +35,7 @@ impl DepNodeIndex {\n     pub const INVALID: DepNodeIndex = DepNodeIndex::MAX;\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+#[derive(PartialEq)]\n pub enum DepNodeColor {\n     Red,\n     Green(DepNodeIndex)"}, {"sha": "d95637c3b986828638e8ea34b1b90cc56d2b2b0f", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -599,7 +599,6 @@ macro_rules! define_global_metadata_kind {\n     (pub enum GlobalMetaDataKind {\n         $($variant:ident),*\n     }) => (\n-        #[derive(Clone, Copy, Debug, Hash, RustcEncodable, RustcDecodable)]\n         pub enum GlobalMetaDataKind {\n             $($variant),*\n         }"}, {"sha": "364a8ace1aac434dd08b04403dbe7e0c3b0a5d0a", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -1077,7 +1077,7 @@ impl Mutability {\n     }\n }\n \n-#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, Hash, HashStable)]\n+#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable)]\n pub enum BinOpKind {\n     /// The `+` operator (addition).\n     Add,\n@@ -1211,7 +1211,7 @@ impl Into<ast::BinOpKind> for BinOpKind {\n \n pub type BinOp = Spanned<BinOpKind>;\n \n-#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, Hash, HashStable)]\n+#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable)]\n pub enum UnOp {\n     /// The `*` operator (deferencing).\n     UnDeref,\n@@ -1388,8 +1388,7 @@ impl Body {\n }\n \n /// The type of source expression that caused this generator to be created.\n-#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, HashStable,\n-         RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n+#[derive(Clone, PartialEq, Eq, HashStable, RustcEncodable, RustcDecodable, Debug, Copy)]\n pub enum GeneratorKind {\n     /// An explicit `async` block or the body of an async function.\n     Async(AsyncGeneratorKind),\n@@ -1412,8 +1411,7 @@ impl fmt::Display for GeneratorKind {\n ///\n /// This helps error messages but is also used to drive coercions in\n /// type-checking (see #60424).\n-#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, HashStable,\n-         RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n+#[derive(Clone, PartialEq, Eq, HashStable, RustcEncodable, RustcDecodable, Debug, Copy)]\n pub enum AsyncGeneratorKind {\n     /// An explicit `async` block written by the user.\n     Block,"}, {"sha": "7ee461a859bd6b4e78f93589f406370110e29602", "filename": "src/librustc/hir/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Fhir%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Fhir%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fptr.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -11,7 +11,7 @@ use rustc_serialize::{Encodable, Decodable, Encoder, Decoder};\n \n use rustc_data_structures::stable_hasher::{StableHasher, HashStable};\n /// An owned smart pointer.\n-#[derive(Hash, PartialEq, Eq)]\n+#[derive(PartialEq, Eq)]\n pub struct P<T: ?Sized> {\n     ptr: Box<T>\n }"}, {"sha": "de1867596c8cbc83d94c2c407fbe43431ea1d038", "filename": "src/librustc/infer/canonical/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -73,7 +73,7 @@ pub struct CanonicalVarValues<'tcx> {\n /// various parts of it with canonical variables. This struct stores\n /// those replaced bits to remember for when we process the query\n /// result.\n-#[derive(Clone, Debug, PartialEq, Eq, Hash, RustcDecodable, RustcEncodable)]\n+#[derive(Clone, Debug)]\n pub struct OriginalQueryValues<'tcx> {\n     /// Map from the universes that appear in the query to the\n     /// universes in the caller context. For the time being, we only"}, {"sha": "f06dbc72cd9611c71f7ae383813ebca1f55df0a7", "filename": "src/librustc/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcombine.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -53,7 +53,7 @@ pub struct CombineFields<'infcx, 'tcx> {\n     pub obligations: PredicateObligations<'tcx>,\n }\n \n-#[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub enum RelationDir {\n     SubtypeOf, SupertypeOf, EqTo\n }"}, {"sha": "f4ed7dac1f7c435b55fcea2a988224cdc0185319", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -407,7 +407,7 @@ pub enum RegionVariableOrigin {\n     NLL(NLLRegionVariableOrigin),\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+#[derive(Copy, Clone, Debug)]\n pub enum NLLRegionVariableOrigin {\n     /// During NLL region processing, we create variables for free\n     /// regions that we encounter in the function signature and"}, {"sha": "9a835cf5c0938930d49b6aca3c32b4a04ca9f59e", "filename": "src/librustc/infer/nll_relate/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -32,7 +32,7 @@ use crate::mir::interpret::ConstValue;\n use rustc_data_structures::fx::FxHashMap;\n use std::fmt::Debug;\n \n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n+#[derive(PartialEq)]\n pub enum NormalizationStrategy {\n     Lazy,\n     Eager,"}, {"sha": "8c6a7c9a376a79900eabcada996a0681fce73777", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -116,7 +116,7 @@ pub struct RegionConstraintData<'tcx> {\n }\n \n /// Represents a constraint that influences the inference process.\n-#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, PartialOrd, Ord)]\n+#[derive(Clone, Copy, PartialEq, Eq, Debug, PartialOrd, Ord)]\n pub enum Constraint<'tcx> {\n     /// A region variable is a subregion of another.\n     VarSubVar(RegionVid, RegionVid),"}, {"sha": "ec1e32988a607b4d0a3ac041a9b82ec8a7aea006", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -117,7 +117,7 @@ pub struct NativeLibrary {\n     pub wasm_import_module: Option<Symbol>,\n }\n \n-#[derive(Clone, Hash, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n pub struct ForeignModule {\n     pub foreign_items: Vec<DefId>,\n     pub def_id: DefId,"}, {"sha": "cbf336fdbe2f3cd69627c81f94a8f689644e2a6e", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -102,7 +102,7 @@ pub struct Upvar {\n }\n \n // different kinds of pointers:\n-#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n+#[derive(Clone, Copy, Debug, PartialEq)]\n pub enum PointerKind<'tcx> {\n     /// `Box<T>`\n     Unique,\n@@ -116,7 +116,7 @@ pub enum PointerKind<'tcx> {\n \n // We use the term \"interior\" to mean \"something reachable from the\n // base without a pointer dereference\", e.g., a field\n-#[derive(Clone, Copy, PartialEq, Eq, Hash)]\n+#[derive(Clone, PartialEq)]\n pub enum InteriorKind {\n     InteriorField(FieldIndex),\n     InteriorElement(InteriorOffsetKind),\n@@ -139,13 +139,13 @@ impl Hash for FieldIndex {\n     }\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]\n+#[derive(Clone, PartialEq)]\n pub enum InteriorOffsetKind {\n     Index,   // e.g., `array_expr[index_expr]`\n     Pattern, // e.g., `fn foo([_, a, _, _]: [A; 4]) { ... }`\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]\n+#[derive(Clone, Copy, PartialEq, Debug)]\n pub enum MutabilityCategory {\n     McImmutable, // Immutable.\n     McDeclared,  // Directly declared as mutable."}, {"sha": "e65f17c79497e169c6375153ba836883c1183ce7", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -25,7 +25,7 @@ use crate::util::nodemap::{FxHashSet, FxHashMap};\n use std::mem::replace;\n use std::cmp::Ordering;\n \n-#[derive(RustcEncodable, RustcDecodable, PartialEq, PartialOrd, Clone, Copy, Debug, Eq, Hash)]\n+#[derive(PartialEq, Clone, Copy, Debug)]\n pub enum StabilityLevel {\n     Unstable,\n     Stable,"}, {"sha": "04b1a86d4d02ef0531f20ce50b350866dcc45913", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -9,7 +9,7 @@ use crate::hir::def_id::DefId;\n use super::{InterpResult, Pointer, PointerArithmetic, Allocation, AllocId, sign_extend, truncate};\n \n /// Represents the result of a raw const operation, pre-validation.\n-#[derive(Copy, Clone, Debug, Eq, PartialEq, RustcEncodable, RustcDecodable, Hash, HashStable)]\n+#[derive(Clone, HashStable)]\n pub struct RawConst<'tcx> {\n     // the value lives here, at offset 0, and that allocation definitely is a `AllocKind::Memory`\n     // (so you can use `AllocMap::unwrap_memory`).\n@@ -487,7 +487,7 @@ impl<Tag> From<Pointer<Tag>> for Scalar<Tag> {\n     }\n }\n \n-#[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Copy, Eq, PartialEq, RustcEncodable, RustcDecodable)]\n pub enum ScalarMaybeUndef<Tag = (), Id = AllocId> {\n     Scalar(Scalar<Tag, Id>),\n     Undef,"}, {"sha": "ccf64c51e133041167bd61955d1195720d42fe09", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -468,7 +468,7 @@ impl<T: Decodable> rustc_serialize::UseSpecializedDecodable for ClearCrossCrate<\n /// Grouped information about the source code origin of a MIR entity.\n /// Intended to be inspected by diagnostics and debuginfo.\n /// Most passes can work with it as a whole, within a single function.\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, HashStable)]\n+#[derive(Copy, Clone, Debug, PartialEq, RustcEncodable, RustcDecodable, HashStable)]\n pub struct SourceInfo {\n     /// The source span for the AST pertaining to this MIR entity.\n     pub span: Span,\n@@ -608,7 +608,7 @@ pub enum LocalKind {\n     ReturnPointer,\n }\n \n-#[derive(Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub struct VarBindingForm<'tcx> {\n     /// Is variable bound via `x`, `mut x`, `ref x`, or `ref mut x`?\n     pub binding_mode: ty::BindingMode,\n@@ -630,7 +630,7 @@ pub struct VarBindingForm<'tcx> {\n     pub pat_span: Span,\n }\n \n-#[derive(Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub enum BindingForm<'tcx> {\n     /// This is a binding for a non-`self` binding, or a `self` that has an explicit type.\n     Var(VarBindingForm<'tcx>),\n@@ -641,7 +641,7 @@ pub enum BindingForm<'tcx> {\n }\n \n /// Represents what type of implicit self a function has, if any.\n-#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Copy, PartialEq, Debug, RustcEncodable, RustcDecodable)]\n pub enum ImplicitSelfKind {\n     /// Represents a `fn x(self);`.\n     Imm,\n@@ -2392,7 +2392,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n /// this does not necessarily mean that they are \"==\" in Rust -- in\n /// particular one must be wary of `NaN`!\n \n-#[derive(Copy, Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, HashStable)]\n pub struct Constant<'tcx> {\n     pub span: Span,\n \n@@ -2438,7 +2438,7 @@ pub struct Constant<'tcx> {\n /// The first will lead to the constraint `w: &'1 str` (for some\n /// inferred region `'1`). The second will lead to the constraint `w:\n /// &'static str`.\n-#[derive(Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable)]\n pub struct UserTypeProjections {\n     pub(crate) contents: Vec<(UserTypeProjection, Span)>,\n }\n@@ -2515,7 +2515,7 @@ impl<'tcx> UserTypeProjections {\n /// * `let (x, _): T = ...` -- here, the `projs` vector would contain\n ///   `field[0]` (aka `.0`), indicating that the type of `s` is\n ///   determined by finding the type of the `.0` field from `T`.\n-#[derive(Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable)]\n pub struct UserTypeProjection {\n     pub base: UserTypeAnnotationIndex,\n     pub projs: Vec<ProjectionKind>,\n@@ -2724,7 +2724,7 @@ impl Location {\n     }\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, HashStable)]\n pub enum UnsafetyViolationKind {\n     General,\n     /// Permitted both in `const fn`s and regular `fn`s.\n@@ -2733,15 +2733,15 @@ pub enum UnsafetyViolationKind {\n     BorrowPacked(hir::HirId),\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, HashStable)]\n pub struct UnsafetyViolation {\n     pub source_info: SourceInfo,\n     pub description: InternedString,\n     pub details: InternedString,\n     pub kind: UnsafetyViolationKind,\n }\n \n-#[derive(Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n pub struct UnsafetyCheckResult {\n     /// Violations that are propagated *upwards* from this function.\n     pub violations: Lrc<[UnsafetyViolation]>,"}, {"sha": "eeb997d75ca55c084f32ebef7ad7917e1b99eca4", "filename": "src/librustc/mir/mono.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmono.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -15,7 +15,7 @@ use std::fmt;\n use std::hash::Hash;\n \n /// Describes how a monomorphization will be instantiated in object files.\n-#[derive(PartialEq, Eq, Clone, Copy, Debug, Hash)]\n+#[derive(PartialEq)]\n pub enum InstantiationMode {\n     /// There will be exactly one instance of the given MonoItem. It will have\n     /// external linkage so that it can be linked to from other codegen units.\n@@ -251,7 +251,7 @@ pub struct CodegenUnit<'tcx> {\n     size_estimate: Option<usize>,\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Copy, Clone, PartialEq, Debug, RustcEncodable, RustcDecodable)]\n pub enum Linkage {\n     External,\n     AvailableExternally,\n@@ -280,7 +280,7 @@ impl_stable_hash_for!(enum self::Linkage {\n     Common\n });\n \n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub enum Visibility {\n     Default,\n     Hidden,"}, {"sha": "427540d72758e257f263cfcb57dd6212f0837034", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -947,7 +947,7 @@ impl<'tcx> MirVisitable<'tcx> for Option<Terminator<'tcx>> {\n \n /// Extra information passed to `visit_ty` and friends to give context\n /// about where the type etc appears.\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+#[derive(Debug)]\n pub enum TyContext {\n     LocalDecl {\n         /// The index of the local variable we are visiting."}, {"sha": "2446d4f4788df8035ab8d7cd41b892678d7b1243", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -62,7 +62,7 @@ impl_stable_hash_via_hash!(OptLevel);\n \n /// This is what the `LtoCli` values get mapped to after resolving defaults and\n /// and taking other command line options into account.\n-#[derive(Clone, Copy, PartialEq, Hash, Debug)]\n+#[derive(Clone, PartialEq)]\n pub enum Lto {\n     /// Don't do any LTO whatsoever\n     No,\n@@ -296,10 +296,10 @@ impl OutputTypes {\n /// Use tree-based collections to cheaply get a deterministic `Hash` implementation.\n /// *Do not* switch `BTreeMap` or `BTreeSet` out for an unsorted container type! That\n /// would break dependency tracking for command-line arguments.\n-#[derive(Clone, Hash)]\n+#[derive(Clone)]\n pub struct Externs(BTreeMap<String, ExternEntry>);\n \n-#[derive(Clone, Hash, Eq, PartialEq, Ord, PartialOrd, Debug, Default)]\n+#[derive(Clone, Debug, Default)]\n pub struct ExternEntry {\n     pub locations: BTreeSet<Option<String>>,\n     pub is_private_dep: bool\n@@ -459,7 +459,7 @@ pub enum PrintRequest {\n     NativeStaticLibs,\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+#[derive(Copy, Clone)]\n pub enum BorrowckMode {\n     Mir,\n     Migrate,"}, {"sha": "949dad751a101f69c3d1a8c9cddedc14df31f507", "filename": "src/librustc/session/search_paths.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Fsession%2Fsearch_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Fsession%2Fsearch_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fsearch_paths.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -1,5 +1,4 @@\n use std::path::{Path, PathBuf};\n-use rustc_macros::HashStable;\n use crate::session::{early_error, config};\n use crate::session::filesearch::make_target_lib_path;\n \n@@ -10,7 +9,7 @@ pub struct SearchPath {\n     pub files: Vec<PathBuf>,\n }\n \n-#[derive(Eq, PartialEq, Clone, Copy, Debug, PartialOrd, Ord, Hash, HashStable)]\n+#[derive(PartialEq, Clone, Copy, Debug, HashStable)]\n pub enum PathKind {\n     Native,\n     Crate,"}, {"sha": "f6ea77dc5cc684562944f209750988f6cbcd7135", "filename": "src/librustc/traits/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -40,7 +40,7 @@ pub type CanonicalTypeOpProvePredicateGoal<'tcx> =\n pub type CanonicalTypeOpNormalizeGoal<'tcx, T> =\n     Canonical<'tcx, ty::ParamEnvAnd<'tcx, type_op::normalize::Normalize<T>>>;\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+#[derive(Clone, Debug)]\n pub struct NoSolution;\n \n pub type Fallible<T> = Result<T, NoSolution>;"}, {"sha": "7aa98703411b28e2881a5b962d448160e393055c", "filename": "src/librustc/traits/query/type_op/implied_outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -3,7 +3,7 @@ use crate::traits::query::outlives_bounds::OutlivesBound;\n use crate::traits::query::Fallible;\n use crate::ty::{ParamEnvAnd, Ty, TyCtxt};\n \n-#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n+#[derive(Clone, Debug)]\n pub struct ImpliedOutlivesBounds<'tcx> {\n     pub ty: Ty<'tcx>,\n }"}, {"sha": "5570144489cdf315bfb783698df01ab386adab05", "filename": "src/librustc/ty/binding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Fty%2Fbinding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Fty%2Fbinding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fbinding.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -2,7 +2,7 @@ use crate::hir::BindingAnnotation::*;\n use crate::hir::BindingAnnotation;\n use crate::hir::Mutability;\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n+#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, Copy)]\n pub enum BindingMode {\n     BindByReference(Mutability),\n     BindByValue(Mutability),"}, {"sha": "1027cbd8322bbbb9933c1fa1bbc4defb8bbb358d", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -827,7 +827,7 @@ rustc_index::newtype_index! {\n pub type CanonicalUserTypeAnnotations<'tcx> =\n     IndexVec<UserTypeAnnotationIndex, CanonicalUserTypeAnnotation<'tcx>>;\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable)]\n pub struct CanonicalUserTypeAnnotation<'tcx> {\n     pub user_ty: CanonicalUserType<'tcx>,\n     pub span: Span,\n@@ -899,7 +899,7 @@ impl CanonicalUserType<'tcx> {\n /// A user-given type annotation attached to a constant. These arise\n /// from constants that are named via paths, like `Foo::<A>::new` and\n /// so forth.\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Copy, Clone, Debug, PartialEq, RustcEncodable, RustcDecodable, HashStable)]\n pub enum UserType<'tcx> {\n     Ty(Ty<'tcx>),\n "}, {"sha": "3395715f67ff98424a8d4874629ec76be93f1c17", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -51,7 +51,6 @@ pub enum TypeError<'tcx> {\n     IntrinsicCast,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Hash, Debug, Copy)]\n pub enum UnconstrainedNumeric {\n     UnconstrainedFloat,\n     UnconstrainedInt,"}, {"sha": "27a09b394b8fa32b8923140e5ff6f2219fad90fc", "filename": "src/librustc/ty/fast_reject.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffast_reject.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -19,7 +19,7 @@ pub type SimplifiedType = SimplifiedTypeGen<DefId>;\n /// the non-stable but fast to construct DefId-version is the better choice.\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, RustcEncodable, RustcDecodable)]\n pub enum SimplifiedTypeGen<D>\n-    where D: Copy + Debug + Ord + Eq + Hash\n+    where D: Copy + Debug + Ord + Eq\n {\n     BoolSimplifiedType,\n     CharSimplifiedType,\n@@ -123,10 +123,10 @@ pub fn simplify_type(\n     }\n }\n \n-impl<D: Copy + Debug + Ord + Eq + Hash> SimplifiedTypeGen<D> {\n+impl<D: Copy + Debug + Ord + Eq> SimplifiedTypeGen<D> {\n     pub fn map_def<U, F>(self, map: F) -> SimplifiedTypeGen<U>\n         where F: Fn(D) -> U,\n-              U: Copy + Debug + Ord + Eq + Hash,\n+              U: Copy + Debug + Ord + Eq,\n     {\n         match self {\n             BoolSimplifiedType => BoolSimplifiedType,\n@@ -155,7 +155,7 @@ impl<D: Copy + Debug + Ord + Eq + Hash> SimplifiedTypeGen<D> {\n \n impl<'a, D> HashStable<StableHashingContext<'a>> for SimplifiedTypeGen<D>\n where\n-    D: Copy + Debug + Ord + Eq + Hash + HashStable<StableHashingContext<'a>>,\n+    D: Copy + Debug + Ord + Eq + HashStable<StableHashingContext<'a>>,\n {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n         mem::discriminant(self).hash_stable(hcx, hasher);"}, {"sha": "c6d4aa0186928ebdb0145dd42ccc01242a21be15", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -721,7 +721,6 @@ impl<'tcx> TyCtxt<'tcx> {\n // vars. See comment on `shift_vars_through_binders` method in\n // `subst.rs` for more details.\n \n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n enum Direction {\n     In,\n     Out,"}, {"sha": "d377b7328e80b1d2a4e8f4b2b8c2d3f7201a95e5", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -159,7 +159,7 @@ impl AssocItemContainer {\n /// The \"header\" of an impl is everything outside the body: a Self type, a trait\n /// ref (in the case of a trait impl), and a set of predicates (from the\n /// bounds / where-clauses).\n-#[derive(Clone, PartialEq, Eq, Hash, Debug)]\n+#[derive(Clone, Debug)]\n pub struct ImplHeader<'tcx> {\n     pub impl_def_id: DefId,\n     pub self_ty: Ty<'tcx>,\n@@ -195,7 +195,7 @@ pub struct AssocItem {\n     pub method_has_self_argument: bool,\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq, Debug, Hash, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Copy, Clone, PartialEq, Debug, HashStable)]\n pub enum AssocKind {\n     Const,\n     Method,\n@@ -331,7 +331,7 @@ impl Visibility {\n     }\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq, RustcDecodable, RustcEncodable, Hash, HashStable)]\n+#[derive(Copy, Clone, PartialEq, RustcDecodable, RustcEncodable, HashStable)]\n pub enum Variance {\n     Covariant,      // T<A> <: T<B> iff A <: B -- e.g., function return type\n     Invariant,      // T<A> <: T<B> iff B == A -- e.g., type of mutable cell\n@@ -752,7 +752,7 @@ pub struct UpvarId {\n     pub closure_expr_id: LocalDefId,\n }\n \n-#[derive(Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable, Copy, HashStable)]\n+#[derive(Clone, PartialEq, Debug, RustcEncodable, RustcDecodable, Copy, HashStable)]\n pub enum BorrowKind {\n     /// Data must be immutable and is aliasable.\n     ImmBorrow,"}, {"sha": "f61801cd23276b86e2be67ba2751b7a46310bbaf", "filename": "src/librustc/ty/query/keys.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -8,14 +8,12 @@ use crate::ty::subst::SubstsRef;\n use crate::ty::fast_reject::SimplifiedType;\n use crate::mir;\n \n-use std::fmt::Debug;\n-use std::hash::Hash;\n use syntax_pos::{Span, DUMMY_SP};\n use syntax_pos::symbol::InternedString;\n \n /// The `Key` trait controls what types can legally be used as the key\n /// for a query.\n-pub(super) trait Key: Clone + Hash + Eq + Debug {\n+pub(super) trait Key {\n     /// Given an instance of this key, what crate is it referring to?\n     /// This is used to find the provider.\n     fn query_crate(&self) -> CrateNum;\n@@ -201,10 +199,7 @@ impl Key for InternedString {\n \n /// Canonical query goals correspond to abstract trait operations that\n /// are not tied to any crate in particular.\n-impl<'tcx, T> Key for Canonical<'tcx, T>\n-where\n-    T: Debug + Hash + Clone + Eq,\n-{\n+impl<'tcx, T> Key for Canonical<'tcx, T> {\n     fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }"}, {"sha": "41b4883793b5414c8c4f319814abd84c62192f6e", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -801,7 +801,7 @@ macro_rules! define_queries_inner {\n         }\n \n         #[allow(nonstandard_style)]\n-        #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n+        #[derive(Clone, Copy)]\n         pub enum QueryName {\n             $($name),*\n         }\n@@ -819,7 +819,7 @@ macro_rules! define_queries_inner {\n         }\n \n         #[allow(nonstandard_style)]\n-        #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+        #[derive(Clone, Debug)]\n         pub enum Query<$tcx> {\n             $($(#[$attr])* $name($K)),*\n         }"}, {"sha": "1e872eb8e45617f98fa26c95b1e16f50d0ee54e9", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -304,8 +304,7 @@ static_assert_size!(TyKind<'_>, 24);\n /// type parameters is similar, but the role of CK and CS are\n /// different. CK represents the \"yield type\" and CS represents the\n /// \"return type\" of the generator.\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug,\n-         RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Copy, Clone, Debug)]\n pub struct ClosureSubsts<'tcx> {\n     /// Lifetime and type parameters from the enclosing function,\n     /// concatenated with the types of the upvars.\n@@ -392,8 +391,7 @@ impl<'tcx> ClosureSubsts<'tcx> {\n }\n \n /// Similar to `ClosureSubsts`; see the above documentation for more.\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug,\n-         RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Copy, Clone, Debug)]\n pub struct GeneratorSubsts<'tcx> {\n     pub substs: SubstsRef<'tcx>,\n }\n@@ -1035,7 +1033,7 @@ impl<'tcx> ProjectionTy<'tcx> {\n     }\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Clone, Debug)]\n pub struct GenSig<'tcx> {\n     pub yield_ty: Ty<'tcx>,\n     pub return_ty: Ty<'tcx>,"}, {"sha": "c69942ef3f2d52fd18c0c3abdc49c153212a5d04", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -50,7 +50,7 @@ pub enum CallConv {\n }\n \n /// LLVMRustLinkage\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n+#[derive(PartialEq)]\n #[repr(C)]\n pub enum Linkage {\n     ExternalLinkage = 0,\n@@ -67,7 +67,6 @@ pub enum Linkage {\n }\n \n // LLVMRustVisibility\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n #[repr(C)]\n pub enum Visibility {\n     Default = 0,"}, {"sha": "9fdcea6df88c59a7a865a68d7d38051661be5a3a", "filename": "src/librustc_data_structures/graph/implementation/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc_data_structures%2Fgraph%2Fimplementation%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc_data_structures%2Fgraph%2Fimplementation%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fimplementation%2Fmod.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -60,10 +60,10 @@ impl<N> SnapshotVecDelegate for Edge<N> {\n     fn reverse(_: &mut Vec<Edge<N>>, _: ()) {}\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq, Debug, Hash)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub struct NodeIndex(pub usize);\n \n-#[derive(Copy, Clone, PartialEq, Eq, Debug, Hash)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub struct EdgeIndex(pub usize);\n \n pub const INVALID_EDGE_INDEX: EdgeIndex = EdgeIndex(usize::MAX);"}, {"sha": "2f972eeccdcbd2494477483ea16c3ba14abf4b8d", "filename": "src/librustc_data_structures/sharded.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc_data_structures%2Fsharded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc_data_structures%2Fsharded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsharded.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -90,7 +90,7 @@ impl<T> Sharded<T> {\n \n pub type ShardedHashMap<K, V> = Sharded<FxHashMap<K, V>>;\n \n-impl<K: Eq + Hash, V> ShardedHashMap<K, V> {\n+impl<K: Eq, V> ShardedHashMap<K, V> {\n     pub fn len(&self) -> usize {\n         self.lock_shards().iter().map(|shard| shard.len()).sum()\n     }"}, {"sha": "bdd3dc9665629a5af94a362ce3b08b53c24f110e", "filename": "src/librustc_data_structures/snapshot_map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -7,7 +7,7 @@ use std::mem;\n mod tests;\n \n pub struct SnapshotMap<K, V>\n-    where K: Hash + Clone + Eq\n+    where K: Clone + Eq\n {\n     map: FxHashMap<K, V>,\n     undo_log: Vec<UndoLog<K, V>>,"}, {"sha": "092208cfe1db74d6c3ff2ed525d6f31f3042ced1", "filename": "src/librustc_data_structures/stable_hasher.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fstable_hasher.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -169,7 +169,7 @@ pub trait HashStable<CTX> {\n /// example, for DefId that can be converted to a DefPathHash. This is used for\n /// bringing maps into a predictable order before hashing them.\n pub trait ToStableHashKey<HCX> {\n-    type KeyType: Ord + Clone + Sized + HashStable<HCX>;\n+    type KeyType: Ord + Sized + HashStable<HCX>;\n     fn to_stable_hash_key(&self, hcx: &HCX) -> Self::KeyType;\n }\n \n@@ -460,7 +460,7 @@ impl_stable_hash_via_hash!(::std::path::Path);\n impl_stable_hash_via_hash!(::std::path::PathBuf);\n \n impl<K, V, R, HCX> HashStable<HCX> for ::std::collections::HashMap<K, V, R>\n-    where K: ToStableHashKey<HCX> + Eq + Hash,\n+    where K: ToStableHashKey<HCX> + Eq,\n           V: HashStable<HCX>,\n           R: BuildHasher,\n {\n@@ -471,7 +471,7 @@ impl<K, V, R, HCX> HashStable<HCX> for ::std::collections::HashMap<K, V, R>\n }\n \n impl<K, R, HCX> HashStable<HCX> for ::std::collections::HashSet<K, R>\n-    where K: ToStableHashKey<HCX> + Eq + Hash,\n+    where K: ToStableHashKey<HCX> + Eq,\n           R: BuildHasher,\n {\n     fn hash_stable(&self, hcx: &mut HCX, hasher: &mut StableHasher) {\n@@ -513,10 +513,10 @@ pub fn hash_stable_hashmap<HCX, K, V, R, SK, F>(\n     hasher: &mut StableHasher,\n     map: &::std::collections::HashMap<K, V, R>,\n     to_stable_hash_key: F)\n-    where K: Eq + Hash,\n+    where K: Eq,\n           V: HashStable<HCX>,\n           R: BuildHasher,\n-          SK: HashStable<HCX> + Ord + Clone,\n+          SK: HashStable<HCX> + Ord,\n           F: Fn(&K, &HCX) -> SK,\n {\n     let mut entries: Vec<_> = map.iter()"}, {"sha": "f09474ff4d344a8c37f801b09cd9b2de1f42d60a", "filename": "src/librustc_data_structures/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc_data_structures%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc_data_structures%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsync.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -738,7 +738,7 @@ impl<T: Clone> Clone for RwLock<T> {\n \n /// A type which only allows its inner value to be used in one thread.\n /// It will panic if it is used on multiple threads.\n-#[derive(Copy, Clone, Hash, Debug, Eq, PartialEq)]\n+#[derive(Debug)]\n pub struct OneThread<T> {\n     #[cfg(parallel_compiler)]\n     thread: thread::ThreadId,"}, {"sha": "d97da489db8df88d11bc900dda5c8d2f51796a37", "filename": "src/librustc_data_structures/thin_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc_data_structures%2Fthin_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc_data_structures%2Fthin_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fthin_vec.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -3,7 +3,7 @@ use crate::stable_hasher::{StableHasher, HashStable};\n /// A vector type optimized for cases where this size is usually 0 (cf. `SmallVector`).\n /// The `Option<Box<..>>` wrapping allows us to represent a zero sized vector with `None`,\n /// which uses only a single (null) pointer.\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct ThinVec<T>(Option<Box<Vec<T>>>);\n \n impl<T> ThinVec<T> {"}, {"sha": "371f0f6fa0b4482eb35b3d4c5ddf3c2b832027d3", "filename": "src/librustc_data_structures/tiny_list.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc_data_structures%2Ftiny_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc_data_structures%2Ftiny_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ftiny_list.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -14,7 +14,7 @@\n #[cfg(test)]\n mod tests;\n \n-#[derive(Clone, Hash, Debug, PartialEq)]\n+#[derive(Clone)]\n pub struct TinyList<T: PartialEq> {\n     head: Option<Element<T>>\n }\n@@ -80,7 +80,7 @@ impl<T: PartialEq> TinyList<T> {\n     }\n }\n \n-#[derive(Clone, Hash, Debug, PartialEq)]\n+#[derive(Clone)]\n struct Element<T: PartialEq> {\n     data: T,\n     next: Option<Box<Element<T>>>,"}, {"sha": "a3926c15551728c996aff3b75d3a1abd0eb3093a", "filename": "src/librustc_data_structures/transitive_relation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc_data_structures%2Ftransitive_relation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc_data_structures%2Ftransitive_relation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ftransitive_relation.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -11,7 +11,7 @@ use std::mem;\n mod tests;\n \n #[derive(Clone, Debug)]\n-pub struct TransitiveRelation<T: Clone + Debug + Eq + Hash> {\n+pub struct TransitiveRelation<T: Eq + Hash> {\n     // List of elements. This is used to map from a T to a usize.\n     elements: Vec<T>,\n \n@@ -35,7 +35,7 @@ pub struct TransitiveRelation<T: Clone + Debug + Eq + Hash> {\n }\n \n // HACK(eddyb) manual impl avoids `Default` bound on `T`.\n-impl<T: Clone + Debug + Eq + Hash> Default for TransitiveRelation<T> {\n+impl<T: Eq + Hash> Default for TransitiveRelation<T> {\n     fn default() -> Self {\n         TransitiveRelation {\n             elements: Default::default(),\n@@ -46,7 +46,7 @@ impl<T: Clone + Debug + Eq + Hash> Default for TransitiveRelation<T> {\n     }\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, RustcEncodable, RustcDecodable, Debug)]\n struct Index(usize);\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Debug)]"}, {"sha": "8a242b7ee25ba861beb07b0131e8cd4a9d0f1c0e", "filename": "src/librustc_mir/borrow_check/nll/constraints/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fmod.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -71,7 +71,7 @@ impl Index<OutlivesConstraintIndex> for OutlivesConstraintSet {\n     }\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord)]\n pub struct OutlivesConstraint {\n     // NB. The ordering here is not significant for correctness, but\n     // it is for convenience. Before we dump the constraints in the"}, {"sha": "75213d30982f9a833e936d28cec1537e32a1d611", "filename": "src/librustc_mir/borrow_check/nll/member_constraints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmember_constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmember_constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmember_constraints.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -11,7 +11,7 @@ use syntax_pos::Span;\n /// indexed by the region `R0`.\n crate struct MemberConstraintSet<'tcx, R>\n where\n-    R: Copy + Hash + Eq,\n+    R: Copy + Eq,\n {\n     /// Stores the first \"member\" constraint for a given `R0`. This is an\n     /// index into the `constraints` vector below.\n@@ -191,7 +191,7 @@ where\n \n impl<'tcx, R> Index<NllMemberConstraintIndex> for MemberConstraintSet<'tcx, R>\n where\n-    R: Copy + Hash + Eq,\n+    R: Copy + Eq,\n {\n     type Output = NllMemberConstraint<'tcx>;\n "}, {"sha": "7a86536573dcf5f7728e67282211019c981791ea", "filename": "src/librustc_mir/borrow_check/nll/region_infer/values.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -129,7 +129,7 @@ rustc_index::newtype_index! {\n \n /// An individual element in a region value -- the value of a\n /// particular region variable consists of a set of these elements.\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+#[derive(Debug)]\n crate enum RegionElement {\n     /// A point in the control-flow graph.\n     Location(Location),"}, {"sha": "fd1f333010adc4b716554683b6d0f70ea6467500", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -146,7 +146,7 @@ struct UniversalRegionIndices<'tcx> {\n     indices: FxHashMap<ty::Region<'tcx>, RegionVid>,\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+#[derive(Debug, PartialEq)]\n pub enum RegionClassification {\n     /// A **global** region is one that can be named from\n     /// anywhere. There is only one, `'static`."}, {"sha": "2ab7c41bb787e0e4e56d1d305df94687db0fc5de", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -91,7 +91,7 @@ pub struct Frame<'mir, 'tcx, Tag=(), Extra=()> {\n     pub extra: Extra,\n }\n \n-#[derive(Clone, Debug, Eq, PartialEq, Hash)]\n+#[derive(Clone, Eq, PartialEq)]\n pub enum StackPopCleanup {\n     /// Jump to the next block in the caller, or cause UB if None (that's a function\n     /// that may never return). Also store layout of return place so\n@@ -113,7 +113,7 @@ pub struct LocalState<'tcx, Tag=(), Id=AllocId> {\n }\n \n /// Current value of a local variable\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n+#[derive(Clone, PartialEq, Eq)]\n pub enum LocalValue<Tag=(), Id=AllocId> {\n     /// This local is not currently alive, and cannot be used at all.\n     Dead,"}, {"sha": "eef1868ec65b69574d6d5af3a1cc3d7e5915760b", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -22,7 +22,7 @@ use super::{\n     Machine, AllocMap, MayLeak, ErrorHandled, CheckInAllocMsg,\n };\n \n-#[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]\n+#[derive(Debug, PartialEq, Copy, Clone)]\n pub enum MemoryKind<T> {\n     /// Error if deallocated except during a stack pop\n     Stack,"}, {"sha": "a0f50f21352b13db602954b98e66fb930b044a35", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -26,7 +26,7 @@ pub use rustc::mir::interpret::ScalarMaybeUndef;\n /// operations and fat pointers. This idea was taken from rustc's codegen.\n /// In particular, thanks to `ScalarPair`, arithmetic operations and casts can be entirely\n /// defined on `Immediate`, and do not have to work with a `Place`.\n-#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub enum Immediate<Tag=(), Id=AllocId> {\n     Scalar(ScalarMaybeUndef<Tag, Id>),\n     ScalarPair(ScalarMaybeUndef<Tag, Id>, ScalarMaybeUndef<Tag, Id>),\n@@ -123,7 +123,7 @@ impl<'tcx, Tag> ::std::ops::Deref for ImmTy<'tcx, Tag> {\n /// An `Operand` is the result of computing a `mir::Operand`. It can be immediate,\n /// or still in memory. The latter is an optimization, to delay reading that chunk of\n /// memory and to avoid having to store arbitrary-sized data here.\n-#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub enum Operand<Tag=(), Id=AllocId> {\n     Immediate(Immediate<Tag, Id>),\n     Indirect(MemPlace<Tag, Id>),\n@@ -153,7 +153,7 @@ impl<Tag> Operand<Tag> {\n     }\n }\n \n-#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n+#[derive(Copy, Clone, Debug, PartialEq)]\n pub struct OpTy<'tcx, Tag=()> {\n     op: Operand<Tag>, // Keep this private, it helps enforce invariants\n     pub layout: TyLayout<'tcx>,"}, {"sha": "5e31b80bec6d3d5a6f87ce2cd6841ffdfa94da1c", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -199,7 +199,7 @@ use rustc_data_structures::sync::{MTRef, MTLock, ParallelIterator, par_iter};\n \n use std::iter;\n \n-#[derive(PartialEq, Eq, Hash, Clone, Copy, Debug)]\n+#[derive(PartialEq)]\n pub enum MonoItemCollectionMode {\n     Eager,\n     Lazy"}, {"sha": "d91588db1834fa59184cd8129d17e60766566a60", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -71,8 +71,7 @@ mod riscv_base;\n mod wasm32_base;\n mod vxworks_base;\n \n-#[derive(Clone, Copy, Debug, Eq, Ord, PartialEq, PartialOrd, Hash,\n-         RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Copy, Debug, Eq, Ord, PartialEq, PartialOrd)]\n pub enum LinkerFlavor {\n     Em,\n     Gcc,\n@@ -82,8 +81,7 @@ pub enum LinkerFlavor {\n     PtxLinker,\n }\n \n-#[derive(Clone, Copy, Debug, Eq, Ord, PartialEq, PartialOrd, Hash,\n-         RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Copy, Debug, Eq, Ord, PartialEq, PartialOrd)]\n pub enum LldFlavor {\n     Wasm,\n     Ld64,"}, {"sha": "09c9757dc4d07dd08d14fa75d52b6aaffb04d6ac", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -1307,7 +1307,7 @@ impl Clean<Option<Lifetime>> for ty::RegionKind {\n     }\n }\n \n-#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n+#[derive(Clone, Debug)]\n pub enum WherePredicate {\n     BoundPredicate { ty: Type, bounds: Vec<GenericBound> },\n     RegionPredicate { lifetime: Lifetime, bounds: Vec<GenericBound> },\n@@ -1589,7 +1589,7 @@ impl Clean<GenericParamDef> for hir::GenericParam {\n }\n \n // maybe use a Generic enum and use Vec<Generic>?\n-#[derive(Clone, PartialEq, Eq, Debug, Default, Hash)]\n+#[derive(Clone, Debug, Default)]\n pub struct Generics {\n     pub params: Vec<GenericParamDef>,\n     pub where_predicates: Vec<WherePredicate>,\n@@ -3847,7 +3847,7 @@ impl Clean<Mutability> for hir::Mutability {\n     }\n }\n \n-#[derive(Clone, PartialEq, Eq, Copy, Debug, Hash)]\n+#[derive(Clone, PartialEq, Debug)]\n pub enum ImplPolarity {\n     Positive,\n     Negative,\n@@ -4506,7 +4506,6 @@ struct RegionDeps<'tcx> {\n     smaller: FxHashSet<RegionTarget<'tcx>>\n }\n \n-#[derive(Eq, PartialEq, Hash, Debug)]\n enum SimpleBound {\n     TraitBound(Vec<PathSegment>, Vec<SimpleBound>, Vec<GenericParamDef>, hir::TraitBoundModifier),\n     Outlives(Lifetime),"}, {"sha": "f2e9be14c8d12ed4198240ab7a7d8898fef0f527", "filename": "src/libserialize/collection_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibserialize%2Fcollection_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibserialize%2Fcollection_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fcollection_impls.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -143,7 +143,7 @@ impl<T> Decodable for BTreeSet<T>\n }\n \n impl<K, V, S> Encodable for HashMap<K, V, S>\n-    where K: Encodable + Hash + Eq,\n+    where K: Encodable + Eq,\n           V: Encodable,\n           S: BuildHasher,\n {\n@@ -180,7 +180,7 @@ impl<K, V, S> Decodable for HashMap<K, V, S>\n }\n \n impl<T, S> Encodable for HashSet<T, S>\n-    where T: Encodable + Hash + Eq,\n+    where T: Encodable + Eq,\n           S: BuildHasher,\n {\n     fn encode<E: Encoder>(&self, s: &mut E) -> Result<(), E::Error> {"}, {"sha": "8be7f4478fa09c0c6ffd415d153d2b651d39df21", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -1305,7 +1305,7 @@ impl MacroDef {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Copy, Hash, PartialEq)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Copy)]\n pub enum StrStyle {\n     /// A regular string, like `\"foo\"`.\n     Cooked,\n@@ -1327,7 +1327,7 @@ pub struct Lit {\n     pub span: Span,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Copy, Hash, PartialEq)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Copy)]\n pub enum LitIntType {\n     Signed(IntTy),\n     Unsigned(UintTy),\n@@ -1337,7 +1337,7 @@ pub enum LitIntType {\n /// Literal kind.\n ///\n /// E.g., `\"foo\"`, `42`, `12.34`, or `bool`.\n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Hash, PartialEq)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum LitKind {\n     /// A string literal (`\"foo\"`).\n     Str(Symbol, StrStyle),"}, {"sha": "84c86c9651fcf4a501d4e9e35f144133283b3354", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -84,15 +84,15 @@ fn handle_errors(sess: &ParseSess, span: Span, error: AttrError) {\n     }\n }\n \n-#[derive(Copy, Clone, Hash, PartialEq, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable)]\n pub enum InlineAttr {\n     None,\n     Hint,\n     Always,\n     Never,\n }\n \n-#[derive(Copy, Clone, Hash, PartialEq, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub enum OptimizeAttr {\n     None,\n     Speed,\n@@ -624,8 +624,7 @@ pub fn eval_condition<F>(cfg: &ast::MetaItem, sess: &ParseSess, eval: &mut F)\n     }\n }\n \n-\n-#[derive(RustcEncodable, RustcDecodable, PartialEq, PartialOrd, Clone, Debug, Eq, Hash)]\n+#[derive(RustcEncodable, RustcDecodable, Clone)]\n pub struct Deprecation {\n     pub since: Option<Symbol>,\n     pub note: Option<Symbol>,\n@@ -749,7 +748,7 @@ pub enum ReprAttr {\n     ReprAlign(u32),\n }\n \n-#[derive(Eq, Hash, PartialEq, Debug, RustcEncodable, RustcDecodable, Copy, Clone)]\n+#[derive(Eq, PartialEq, Debug, RustcEncodable, RustcDecodable, Copy, Clone)]\n pub enum IntType {\n     SignedInt(ast::IntTy),\n     UnsignedInt(ast::UintTy)"}, {"sha": "d987dc855b6156ec8c7ae2fbdd272167a1c47540", "filename": "src/libsyntax/ptr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibsyntax%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibsyntax%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fptr.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -35,7 +35,6 @@ use rustc_serialize::{Encodable, Decodable, Encoder, Decoder};\n \n use rustc_data_structures::stable_hasher::{StableHasher, HashStable};\n /// An owned smart pointer.\n-#[derive(Hash, PartialEq, Eq)]\n pub struct P<T: ?Sized> {\n     ptr: Box<T>\n }"}, {"sha": "a1d147637e27e82379948bbbb3550b1d300c35a2", "filename": "src/libsyntax/source_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibsyntax%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibsyntax%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsource_map.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -41,7 +41,7 @@ pub fn original_sp(sp: Span, enclosing_sp: Span) -> Span {\n     }\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Copy)]\n pub struct Spanned<T> {\n     pub node: T,\n     pub span: Span,"}, {"sha": "d0f790638efa3afd5ca07ffc3db8c7ce3c3c0c1f", "filename": "src/libsyntax_expand/mbe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibsyntax_expand%2Fmbe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibsyntax_expand%2Fmbe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fmbe.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -73,7 +73,7 @@ impl KleeneToken {\n \n /// A Kleene-style [repetition operator](http://en.wikipedia.org/wiki/Kleene_star)\n /// for token sequences.\n-#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n+#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, Copy)]\n enum KleeneOp {\n     /// Kleene star (`*`) for zero or more repetitions\n     ZeroOrMore,"}, {"sha": "7e42b931961f8638670e7e63dfcde0e3b991d1d6", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072e108b5a871e87be23b7ed2c0c1f5c6fd70be/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=9072e108b5a871e87be23b7ed2c0c1f5c6fd70be", "patch": "@@ -1311,7 +1311,7 @@ pub struct BytePos(pub u32);\n /// A character offset. Because of multibyte UTF-8 characters, a byte offset\n /// is not equivalent to a character offset. The `SourceMap` will convert `BytePos`\n /// values to `CharPos` values as necessary.\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug)]\n pub struct CharPos(pub usize);\n \n // FIXME: lots of boilerplate in these impls, but so far my attempts to fix"}]}