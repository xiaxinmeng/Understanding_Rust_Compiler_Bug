{"sha": "740dd4bf056b18e198af5ae242b2eb49b94861d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0MGRkNGJmMDU2YjE4ZTE5OGFmNWFlMjQyYjJlYjQ5Yjk0ODYxZDc=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-09-10T14:11:05Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-09-10T14:11:05Z"}, "message": "Add unexpected type to extern type bug message", "tree": {"sha": "51852f18940e1290aea57f397cdc9cad96e70515", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51852f18940e1290aea57f397cdc9cad96e70515"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/740dd4bf056b18e198af5ae242b2eb49b94861d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/740dd4bf056b18e198af5ae242b2eb49b94861d7", "html_url": "https://github.com/rust-lang/rust/commit/740dd4bf056b18e198af5ae242b2eb49b94861d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/740dd4bf056b18e198af5ae242b2eb49b94861d7/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4894123d21ed4b153a2e5c32c0870cb2d97f9b46", "url": "https://api.github.com/repos/rust-lang/rust/commits/4894123d21ed4b153a2e5c32c0870cb2d97f9b46", "html_url": "https://github.com/rust-lang/rust/commit/4894123d21ed4b153a2e5c32c0870cb2d97f9b46"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "bdb6844920d41c05e4d5ea80ea6e6b46ebc6b6d1", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/740dd4bf056b18e198af5ae242b2eb49b94861d7/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/740dd4bf056b18e198af5ae242b2eb49b94861d7/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=740dd4bf056b18e198af5ae242b2eb49b94861d7", "patch": "@@ -624,7 +624,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                     AdtKind::Struct => {\n                         if !def.repr.c() && !def.repr.transparent() {\n                             return FfiUnsafe {\n-                                ty: ty,\n+                                ty,\n                                 reason: \"this struct has unspecified layout\",\n                                 help: Some(\"consider adding a `#[repr(C)]` or \\\n                                             `#[repr(transparent)]` attribute to this struct\"),\n@@ -633,7 +633,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n \n                         if def.non_enum_variant().fields.is_empty() {\n                             return FfiUnsafe {\n-                                ty: ty,\n+                                ty,\n                                 reason: \"this struct has no fields\",\n                                 help: Some(\"consider adding a member to this struct\"),\n                             };\n@@ -669,7 +669,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                     AdtKind::Union => {\n                         if !def.repr.c() && !def.repr.transparent() {\n                             return FfiUnsafe {\n-                                ty: ty,\n+                                ty,\n                                 reason: \"this union has unspecified layout\",\n                                 help: Some(\"consider adding a `#[repr(C)]` or \\\n                                             `#[repr(transparent)]` attribute to this union\"),\n@@ -678,7 +678,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n \n                         if def.non_enum_variant().fields.is_empty() {\n                             return FfiUnsafe {\n-                                ty: ty,\n+                                ty,\n                                 reason: \"this union has no fields\",\n                                 help: Some(\"consider adding a field to this union\"),\n                             };\n@@ -721,7 +721,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                             // Special-case types like `Option<extern fn()>`.\n                             if !is_repr_nullable_ptr(cx, ty, def, substs) {\n                                 return FfiUnsafe {\n-                                    ty: ty,\n+                                    ty,\n                                     reason: \"enum has no representation hint\",\n                                     help: Some(\"consider adding a `#[repr(C)]`, \\\n                                                 `#[repr(transparent)]`, or integer `#[repr(...)]` \\\n@@ -750,7 +750,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                                     }\n                                     FfiPhantom(..) => {\n                                         return FfiUnsafe {\n-                                            ty: ty,\n+                                            ty,\n                                             reason: \"this enum contains a PhantomData field\",\n                                             help: None,\n                                         };\n@@ -764,13 +764,13 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n             }\n \n             ty::Char => FfiUnsafe {\n-                ty: ty,\n+                ty,\n                 reason: \"the `char` type has no C equivalent\",\n                 help: Some(\"consider using `u32` or `libc::wchar_t` instead\"),\n             },\n \n             ty::Int(ast::IntTy::I128) | ty::Uint(ast::UintTy::U128) => FfiUnsafe {\n-                ty: ty,\n+                ty,\n                 reason: \"128-bit integers don't currently have a known stable ABI\",\n                 help: None,\n             },\n@@ -779,25 +779,25 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n             ty::Bool | ty::Int(..) | ty::Uint(..) | ty::Float(..) | ty::Never => FfiSafe,\n \n             ty::Slice(_) => FfiUnsafe {\n-                ty: ty,\n+                ty,\n                 reason: \"slices have no C equivalent\",\n                 help: Some(\"consider using a raw pointer instead\"),\n             },\n \n             ty::Dynamic(..) => FfiUnsafe {\n-                ty: ty,\n+                ty,\n                 reason: \"trait objects have no C equivalent\",\n                 help: None,\n             },\n \n             ty::Str => FfiUnsafe {\n-                ty: ty,\n+                ty,\n                 reason: \"string slices have no C equivalent\",\n                 help: Some(\"consider using `*const u8` and a length instead\"),\n             },\n \n             ty::Tuple(..) => FfiUnsafe {\n-                ty: ty,\n+                ty,\n                 reason: \"tuples have unspecified layout\",\n                 help: Some(\"consider using a struct instead\"),\n             },\n@@ -811,7 +811,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                 match sig.abi() {\n                     Abi::Rust | Abi::RustIntrinsic | Abi::PlatformIntrinsic | Abi::RustCall => {\n                         return FfiUnsafe {\n-                            ty: ty,\n+                            ty,\n                             reason: \"this function pointer has Rust-specific calling convention\",\n                             help: Some(\"consider using an `extern fn(...) -> ...` \\\n                                         function pointer instead\"),\n@@ -855,7 +855,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n             ty::UnnormalizedProjection(..) |\n             ty::Projection(..) |\n             ty::Opaque(..) |\n-            ty::FnDef(..) => bug!(\"Unexpected type in foreign function\"),\n+            ty::FnDef(..) => bug!(\"unexpected type in foreign function: {:?}\", ty),\n         }\n     }\n "}]}