{"sha": "d1dbdcf332e1a91666999d25ee6a0900512dda82", "node_id": "C_kwDOAAsO6NoAKGQxZGJkY2YzMzJlMWE5MTY2Njk5OWQyNWVlNmEwOTAwNTEyZGRhODI", "commit": {"author": {"name": "kraktus", "email": "kraktus@users.noreply.github.com", "date": "2022-09-18T18:41:41Z"}, "committer": {"name": "kraktus", "email": "kraktus@users.noreply.github.com", "date": "2022-09-18T18:41:41Z"}, "message": "refactor `needless_return`", "tree": {"sha": "acb5fe54d6095c29aaca809467c442d749aaaee8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acb5fe54d6095c29aaca809467c442d749aaaee8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1dbdcf332e1a91666999d25ee6a0900512dda82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1dbdcf332e1a91666999d25ee6a0900512dda82", "html_url": "https://github.com/rust-lang/rust/commit/d1dbdcf332e1a91666999d25ee6a0900512dda82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1dbdcf332e1a91666999d25ee6a0900512dda82/comments", "author": {"login": "kraktus", "id": 56031107, "node_id": "MDQ6VXNlcjU2MDMxMTA3", "avatar_url": "https://avatars.githubusercontent.com/u/56031107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kraktus", "html_url": "https://github.com/kraktus", "followers_url": "https://api.github.com/users/kraktus/followers", "following_url": "https://api.github.com/users/kraktus/following{/other_user}", "gists_url": "https://api.github.com/users/kraktus/gists{/gist_id}", "starred_url": "https://api.github.com/users/kraktus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kraktus/subscriptions", "organizations_url": "https://api.github.com/users/kraktus/orgs", "repos_url": "https://api.github.com/users/kraktus/repos", "events_url": "https://api.github.com/users/kraktus/events{/privacy}", "received_events_url": "https://api.github.com/users/kraktus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kraktus", "id": 56031107, "node_id": "MDQ6VXNlcjU2MDMxMTA3", "avatar_url": "https://avatars.githubusercontent.com/u/56031107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kraktus", "html_url": "https://github.com/kraktus", "followers_url": "https://api.github.com/users/kraktus/followers", "following_url": "https://api.github.com/users/kraktus/following{/other_user}", "gists_url": "https://api.github.com/users/kraktus/gists{/gist_id}", "starred_url": "https://api.github.com/users/kraktus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kraktus/subscriptions", "organizations_url": "https://api.github.com/users/kraktus/orgs", "repos_url": "https://api.github.com/users/kraktus/repos", "events_url": "https://api.github.com/users/kraktus/events{/privacy}", "received_events_url": "https://api.github.com/users/kraktus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e120fb10c60a27670c72e7ec99e93d16c045f493", "url": "https://api.github.com/repos/rust-lang/rust/commits/e120fb10c60a27670c72e7ec99e93d16c045f493", "html_url": "https://github.com/rust-lang/rust/commit/e120fb10c60a27670c72e7ec99e93d16c045f493"}], "stats": {"total": 111, "additions": 47, "deletions": 64}, "files": [{"sha": "63c8811f62d9aa2195345c5682fad4c5cd9ac6ee", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 47, "deletions": 64, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/d1dbdcf332e1a91666999d25ee6a0900512dda82/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1dbdcf332e1a91666999d25ee6a0900512dda82/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=d1dbdcf332e1a91666999d25ee6a0900512dda82", "patch": "@@ -72,6 +72,28 @@ enum RetReplacement {\n     Unit,\n }\n \n+impl RetReplacement {\n+    fn sugg_help(&self) -> &'static str {\n+        match *self {\n+            Self::Empty => \"remove `return`\",\n+            Self::Block => \"replace `return` with an empty block\",\n+            Self::Unit => \"replace `return` with a unit value\",\n+\n+        }\n+    }\n+}\n+\n+impl ToString for RetReplacement {\n+    fn to_string(&self) -> String {\n+        match *self {\n+            Self::Empty => \"\",\n+            Self::Block => \"{}\",\n+            Self::Unit => \"()\",\n+        }\n+        .to_string()\n+    }\n+}\n+\n declare_lint_pass!(Return => [LET_AND_RETURN, NEEDLESS_RETURN]);\n \n impl<'tcx> LateLintPass<'tcx> for Return {\n@@ -221,74 +243,35 @@ fn emit_return_lint(\n     if ret_span.from_expansion() {\n         return;\n     }\n-    match inner_span {\n-        Some(inner_span) => {\n-            let mut applicability = Applicability::MachineApplicable;\n-            span_lint_hir_and_then(\n-                cx,\n-                NEEDLESS_RETURN,\n-                emission_place,\n-                ret_span,\n-                \"unneeded `return` statement\",\n-                |diag| {\n-                    let (snippet, _) = snippet_with_context(cx, inner_span, ret_span.ctxt(), \"..\", &mut applicability);\n-                    diag.span_suggestion(ret_span, \"remove `return`\", snippet, applicability);\n-                },\n-            );\n-        },\n-        None => match replacement {\n-            RetReplacement::Empty => {\n-                span_lint_hir_and_then(\n-                    cx,\n-                    NEEDLESS_RETURN,\n-                    emission_place,\n-                    ret_span,\n-                    \"unneeded `return` statement\",\n-                    |diag| {\n-                        diag.span_suggestion(\n-                            ret_span,\n-                            \"remove `return`\",\n-                            String::new(),\n-                            Applicability::MachineApplicable,\n-                        );\n-                    },\n-                );\n-            },\n-            RetReplacement::Block => {\n-                span_lint_hir_and_then(\n-                    cx,\n-                    NEEDLESS_RETURN,\n-                    emission_place,\n-                    ret_span,\n-                    \"unneeded `return` statement\",\n-                    |diag| {\n-                        diag.span_suggestion(\n-                            ret_span,\n-                            \"replace `return` with an empty block\",\n-                            \"{}\".to_string(),\n-                            Applicability::MachineApplicable,\n-                        );\n-                    },\n-                );\n+    if let Some(inner_span) = inner_span {\n+        let mut applicability = Applicability::MachineApplicable;\n+        span_lint_hir_and_then(\n+            cx,\n+            NEEDLESS_RETURN,\n+            emission_place,\n+            ret_span,\n+            \"unneeded `return` statement\",\n+            |diag| {\n+                let (snippet, _) = snippet_with_context(cx, inner_span, ret_span.ctxt(), \"..\", &mut applicability);\n+                diag.span_suggestion(ret_span, \"remove `return`\", snippet, applicability);\n             },\n-            RetReplacement::Unit => {\n-                span_lint_hir_and_then(\n-                    cx,\n-                    NEEDLESS_RETURN,\n-                    emission_place,\n+        );\n+    } else {\n+        span_lint_hir_and_then(\n+            cx,\n+            NEEDLESS_RETURN,\n+            emission_place,\n+            ret_span,\n+            \"unneeded `return` statement\",\n+            |diag| {\n+                diag.span_suggestion(\n                     ret_span,\n-                    \"unneeded `return` statement\",\n-                    |diag| {\n-                        diag.span_suggestion(\n-                            ret_span,\n-                            \"replace `return` with a unit value\",\n-                            \"()\".to_string(),\n-                            Applicability::MachineApplicable,\n-                        );\n-                    },\n+                    replacement.sugg_help(),\n+                    replacement.to_string(),\n+                    Applicability::MachineApplicable,\n                 );\n             },\n-        },\n+        )\n     }\n }\n "}]}