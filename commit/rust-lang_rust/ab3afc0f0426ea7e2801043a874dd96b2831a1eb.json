{"sha": "ab3afc0f0426ea7e2801043a874dd96b2831a1eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiM2FmYzBmMDQyNmVhN2UyODAxMDQzYTg3NGRkOTZiMjgzMWExZWI=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2019-12-11T20:05:28Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2019-12-11T20:05:28Z"}, "message": "Make TinyList::remove iterate instead of recurse", "tree": {"sha": "5b129b92b690ca3a20c0d1820a5a2d4c1b539080", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b129b92b690ca3a20c0d1820a5a2d4c1b539080"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab3afc0f0426ea7e2801043a874dd96b2831a1eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab3afc0f0426ea7e2801043a874dd96b2831a1eb", "html_url": "https://github.com/rust-lang/rust/commit/ab3afc0f0426ea7e2801043a874dd96b2831a1eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab3afc0f0426ea7e2801043a874dd96b2831a1eb/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90b957a17c1abba979aa41234ce0993a61030e67", "url": "https://api.github.com/repos/rust-lang/rust/commits/90b957a17c1abba979aa41234ce0993a61030e67", "html_url": "https://github.com/rust-lang/rust/commit/90b957a17c1abba979aa41234ce0993a61030e67"}], "stats": {"total": 40, "additions": 16, "deletions": 24}, "files": [{"sha": "78cbc1240b182654cb23cc45f26d1e3a61753833", "filename": "src/librustc_data_structures/tiny_list.rs", "status": "modified", "additions": 16, "deletions": 24, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ab3afc0f0426ea7e2801043a874dd96b2831a1eb/src%2Flibrustc_data_structures%2Ftiny_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3afc0f0426ea7e2801043a874dd96b2831a1eb/src%2Flibrustc_data_structures%2Ftiny_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ftiny_list.rs?ref=ab3afc0f0426ea7e2801043a874dd96b2831a1eb", "patch": "@@ -16,41 +16,29 @@ mod tests;\n \n #[derive(Clone)]\n pub struct TinyList<T: PartialEq> {\n-    head: Option<Element<T>>\n+    head: Option<Element<T>>,\n }\n \n impl<T: PartialEq> TinyList<T> {\n     #[inline]\n     pub fn new() -> TinyList<T> {\n-        TinyList {\n-            head: None\n-        }\n+        TinyList { head: None }\n     }\n \n     #[inline]\n     pub fn new_single(data: T) -> TinyList<T> {\n-        TinyList {\n-            head: Some(Element {\n-                data,\n-                next: None,\n-            })\n-        }\n+        TinyList { head: Some(Element { data, next: None }) }\n     }\n \n     #[inline]\n     pub fn insert(&mut self, data: T) {\n-        self.head = Some(Element {\n-            data,\n-            next: self.head.take().map(Box::new)\n-        });\n+        self.head = Some(Element { data, next: self.head.take().map(Box::new) });\n     }\n \n     #[inline]\n     pub fn remove(&mut self, data: &T) -> bool {\n         self.head = match self.head {\n-            Some(ref mut head) if head.data == *data => {\n-                head.next.take().map(|x| *x)\n-            }\n+            Some(ref mut head) if head.data == *data => head.next.take().map(|x| *x),\n             Some(ref mut head) => return head.remove_next(data),\n             None => return false,\n         };\n@@ -88,12 +76,16 @@ struct Element<T: PartialEq> {\n \n impl<T: PartialEq> Element<T> {\n     fn remove_next(&mut self, data: &T) -> bool {\n-        let new_next = match self.next {\n-            Some(ref mut next) if next.data == *data => next.next.take(),\n-            Some(ref mut next) => return next.remove_next(data),\n-            None => return false,\n-        };\n-        self.next = new_next;\n-        true\n+        let mut n = self;\n+        loop {\n+            match n.next {\n+                Some(ref mut next) if next.data == *data => {\n+                    n.next = next.next.take();\n+                    return true;\n+                }\n+                Some(ref mut next) => n = next,\n+                None => return false,\n+            }\n+        }\n     }\n }"}]}