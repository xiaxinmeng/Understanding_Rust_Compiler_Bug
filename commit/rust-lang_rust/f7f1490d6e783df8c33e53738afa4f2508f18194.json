{"sha": "f7f1490d6e783df8c33e53738afa4f2508f18194", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3ZjE0OTBkNmU3ODNkZjhjMzNlNTM3MzhhZmE0ZjI1MDhmMTgxOTQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-23T00:19:01Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-23T02:07:31Z"}, "message": "rt: Run resource destructors during cycle collection", "tree": {"sha": "0f76a299b0fa32627573be2e377f98c392238bb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f76a299b0fa32627573be2e377f98c392238bb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7f1490d6e783df8c33e53738afa4f2508f18194", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7f1490d6e783df8c33e53738afa4f2508f18194", "html_url": "https://github.com/rust-lang/rust/commit/f7f1490d6e783df8c33e53738afa4f2508f18194", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7f1490d6e783df8c33e53738afa4f2508f18194/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3fe85dad70f860a1cc2f3ac69da57ab97ac1aa7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3fe85dad70f860a1cc2f3ac69da57ab97ac1aa7", "html_url": "https://github.com/rust-lang/rust/commit/f3fe85dad70f860a1cc2f3ac69da57ab97ac1aa7"}], "stats": {"total": 90, "additions": 90, "deletions": 0}, "files": [{"sha": "c727aec694e296fb6aab8aa27a3bfb6c99e8d34b", "filename": "src/rt/rust_cc.cpp", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f7f1490d6e783df8c33e53738afa4f2508f18194/src%2Frt%2Frust_cc.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/f7f1490d6e783df8c33e53738afa4f2508f18194/src%2Frt%2Frust_cc.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_cc.cpp?ref=f7f1490d6e783df8c33e53738afa4f2508f18194", "patch": "@@ -565,9 +565,26 @@ class sweep : public shape::data<sweep,shape::ptr> {\n         }\n     }\n \n+    struct run_dtor_args {\n+        const shape::rust_fn *dtor;\n+        void *data;\n+    };\n+\n+    typedef void (*dtor)(void **retptr, void *env, void *dptr);\n+\n+    static void run_dtor(run_dtor_args *args) {\n+        dtor f = (dtor)args->dtor;\n+        f(NULL, args->dtor->env, args->data);\n+    }\n+\n     void walk_res2(const shape::rust_fn *dtor, unsigned n_params,\n                    const shape::type_param *params, const uint8_t *end_sp,\n                    bool live) {\n+        void *data = (void*)(uintptr_t)dp;\n+        // Switch back to the Rust stack to run the destructor\n+        run_dtor_args args = {dtor, data};\n+        task->call_on_rust_stack((void*)&args, (void*)run_dtor);\n+\n         while (this->sp != end_sp) {\n             this->walk();\n             align = true;"}, {"sha": "fb6448cfae8c3a337190c123bc697187408c8599", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7f1490d6e783df8c33e53738afa4f2508f18194/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/f7f1490d6e783df8c33e53738afa4f2508f18194/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=f7f1490d6e783df8c33e53738afa4f2508f18194", "patch": "@@ -252,6 +252,7 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     void prev_stack();\n     void record_stack_limit();\n     void reset_stack_limit();\n+    \n     bool on_rust_stack();\n     void check_stack_canary();\n     void delete_all_stacks();\n@@ -334,6 +335,7 @@ inline void\n rust_task::call_on_rust_stack(void *args, void *fn_ptr) {\n     // Too expensive to check\n     // I(thread, !on_rust_stack());\n+    A(thread, get_sp_limit() != 0, \"Stack must be configured\");\n     I(thread, next_rust_sp);\n \n     bool had_reentered_rust_stack = reentered_rust_stack;\n@@ -344,6 +346,8 @@ rust_task::call_on_rust_stack(void *args, void *fn_ptr) {\n \n     uintptr_t sp = sanitize_next_sp(next_rust_sp);\n \n+    // FIXME(2047): There are times when this is called and needs\n+    // to be able to throw, and we don't account for that.\n     __morestack(args, fn_ptr, sp);\n \n     next_c_sp = prev_c_sp;"}, {"sha": "d991fc2dffa3d375d09b92ff519777a8580124f4", "filename": "src/test/run-pass/resource-cycle.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f7f1490d6e783df8c33e53738afa4f2508f18194/src%2Ftest%2Frun-pass%2Fresource-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7f1490d6e783df8c33e53738afa4f2508f18194/src%2Ftest%2Frun-pass%2Fresource-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-cycle.rs?ref=f7f1490d6e783df8c33e53738afa4f2508f18194", "patch": "@@ -0,0 +1,30 @@\n+// Don't leak the unique pointers\n+\n+resource r(v: *int) unsafe {\n+    let v2: ~int = unsafe::reinterpret_cast(v);\n+}\n+\n+enum t = {\n+    mut next: option<@t>,\n+    r: r\n+};\n+\n+fn main() unsafe {\n+    let i1 = ~0;\n+    let i1p = unsafe::reinterpret_cast(i1);\n+    unsafe::forget(i1);\n+    let i2 = ~0;\n+    let i2p = unsafe::reinterpret_cast(i2);\n+    unsafe::forget(i2);\n+\n+    let x1 = @t({\n+        mut next: none,\n+        r: r(i1p)\n+    });\n+    let x2 = @t({\n+        mut next: none,\n+        r: r(i2p)\n+    });\n+    x1.next = some(x2);\n+    x2.next = some(x1);\n+}"}, {"sha": "85bfc195bd4a38e8e7324f61a2d15b3468ef2fc9", "filename": "src/test/run-pass/resource-cycle2.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f7f1490d6e783df8c33e53738afa4f2508f18194/src%2Ftest%2Frun-pass%2Fresource-cycle2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7f1490d6e783df8c33e53738afa4f2508f18194/src%2Ftest%2Frun-pass%2Fresource-cycle2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-cycle2.rs?ref=f7f1490d6e783df8c33e53738afa4f2508f18194", "patch": "@@ -0,0 +1,39 @@\n+// Don't leak the unique pointers\n+\n+type u = {\n+    a: int,\n+    b: int,\n+    c: *int\n+};\n+\n+resource r(v: u) unsafe {\n+    let v2: ~int = unsafe::reinterpret_cast(v.c);\n+}\n+\n+enum t = {\n+    mut next: option<@t>,\n+    r: r\n+};\n+\n+fn main() unsafe {\n+    let i1 = ~0xA;\n+    let i1p = unsafe::reinterpret_cast(i1);\n+    unsafe::forget(i1);\n+    let i2 = ~0xA;\n+    let i2p = unsafe::reinterpret_cast(i2);\n+    unsafe::forget(i2);\n+\n+    let u1 = {a: 0xB, b: 0xC, c: i1p};\n+    let u2 = {a: 0xB, b: 0xC, c: i2p};\n+\n+    let x1 = @t({\n+        mut next: none,\n+        r: r(u1)\n+    });\n+    let x2 = @t({\n+        mut next: none,\n+        r: r(u2)\n+    });\n+    x1.next = some(x2);\n+    x2.next = some(x1);\n+}"}]}