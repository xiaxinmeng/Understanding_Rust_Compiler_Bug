{"sha": "f7c6e0efbe11343562c713dce1d28e2d141dcb89", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3YzZlMGVmYmUxMTM0MzU2MmM3MTNkY2UxZDI4ZTJkMTQxZGNiODk=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-19T20:49:00Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-19T20:49:00Z"}, "message": "Do additional bounds checks", "tree": {"sha": "8d7cb993939b3b6a5c4d7d79b159847d36fb79df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d7cb993939b3b6a5c4d7d79b159847d36fb79df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7c6e0efbe11343562c713dce1d28e2d141dcb89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7c6e0efbe11343562c713dce1d28e2d141dcb89", "html_url": "https://github.com/rust-lang/rust/commit/f7c6e0efbe11343562c713dce1d28e2d141dcb89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7c6e0efbe11343562c713dce1d28e2d141dcb89/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab059671cb78016bb039b3db07c62279d37ef42b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab059671cb78016bb039b3db07c62279d37ef42b", "html_url": "https://github.com/rust-lang/rust/commit/ab059671cb78016bb039b3db07c62279d37ef42b"}], "stats": {"total": 10, "additions": 7, "deletions": 3}, "files": [{"sha": "63380199beab418776f9f464e0d1e09e492fcdc8", "filename": "src/helpers.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f7c6e0efbe11343562c713dce1d28e2d141dcb89/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7c6e0efbe11343562c713dce1d28e2d141dcb89/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=f7c6e0efbe11343562c713dce1d28e2d141dcb89", "patch": "@@ -356,12 +356,16 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let len = bytes.len();\n         // If `size` is smaller or equal than `bytes.len()`, writing `bytes` plus the required null\n         // terminator to memory using the `ptr` pointer would cause an overflow.\n-        if size <= bytes.len() as u64 {\n+        if size <= len as u64 {\n             throw_unsup_format!(\"OsString of length {} is too large for destination buffer of size {}\", len, size)\n         }\n-\n+        let actual_len = (len as u64)\n+            .checked_add(1)\n+            .map(Size::from_bytes)\n+            .ok_or_else(|| err_unsup_format!(\"OsString of length {} is too large\", len))?;\n         let this = self.eval_context_mut();\n-        let buffer = this.memory.get_mut(ptr.alloc_id)?.get_bytes_mut(&*this.tcx, ptr, Size::from_bytes(len as u64 + 1))?;\n+        this.memory.check_ptr_access(ptr.into(), actual_len, Align::from_bytes(1).unwrap())?;\n+        let buffer = this.memory.get_mut(ptr.alloc_id)?.get_bytes_mut(&*this.tcx, ptr, actual_len)?;\n         buffer[..len].copy_from_slice(bytes);\n         // This is ok because the buffer was strictly larger than `bytes`, so after adding the\n         // null terminator, the buffer size is larger or equal to `bytes.len()`, meaning that"}]}