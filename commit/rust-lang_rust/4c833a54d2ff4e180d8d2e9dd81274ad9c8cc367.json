{"sha": "4c833a54d2ff4e180d8d2e9dd81274ad9c8cc367", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjODMzYTU0ZDJmZjRlMTgwZDhkMmU5ZGQ4MTI3NGFkOWM4Y2MzNjc=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-03T15:41:36Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-03T15:41:36Z"}, "message": "globally cache statics and promoteds", "tree": {"sha": "85cd327172d84d042d42a01bf94028ff1827e495", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85cd327172d84d042d42a01bf94028ff1827e495"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c833a54d2ff4e180d8d2e9dd81274ad9c8cc367", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXUaUwAAoJEFbW7qD8Z6xGh0cP/2NRwoXRR0nYc6RKbX9zNz0d\nJAmwI86UgbqCdXEffq3uUO4E4RYOc0+3dbW5HrtWDgRGJ3DRNe/JLjXVt3vyINOo\nPl7Fw93TRDobqXcssftyLFy3Lz6U+ZuMMcmM/y1B7JASlGlqbaU+dX2Heg6oE0Oa\nmOuWF4257Y2ocYs7Mfe3jpIecB9sYXR/BAtD1CwssWLAiEaSKtDpU/df/x6TVXkh\nxIjETPGvoQg34nhZ7e50d/oOXT9rk0VUEwDpU87vtFufI/2YA91qytOCzBTnVo61\nfGk6tKdA+Yt/XJXX5YFet69X//qPsMeK6N8IH5sDMFkmHeS5C6GH20ZjVofhKzvD\n1XJOO08OA37K2QWLEJnJBuXKw7+rlLeOlHLmPv46TBTtjf6rF7Fq1mJRF6aAhrFz\njt3EEE8ByCm2iBdVsb/duqPYXjNQ8D/MHXRHzPxngRB8wOHSi4EitlZj0Ra1TCyS\nQJmpZjv4vp4eo2O3zyjmgC3Y/zu1MAb/rbTqP1+aJhHpKUhghm/TQhrfV2BohAwy\nMGSA6c3yejsbrqbKNvi1cqMYa6ypPgt6vwBdP3LKTQcyRxAy6EKIM7CnpoE1E5WL\nVRhLyBuhERk/j8afrHT5ZWvxV7KVQGwGmazCkkXBKe9rv+PiPwdztXUhieBiqrjL\nSmWdMMNEepovA+0ePom4\n=fYzJ\n-----END PGP SIGNATURE-----", "payload": "tree 85cd327172d84d042d42a01bf94028ff1827e495\nparent dc85b1142111401f33a797fc449d8e36291f4444\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1464968496 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1464968496 +0200\n\nglobally cache statics and promoteds"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c833a54d2ff4e180d8d2e9dd81274ad9c8cc367", "html_url": "https://github.com/rust-lang/rust/commit/4c833a54d2ff4e180d8d2e9dd81274ad9c8cc367", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c833a54d2ff4e180d8d2e9dd81274ad9c8cc367/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc85b1142111401f33a797fc449d8e36291f4444", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc85b1142111401f33a797fc449d8e36291f4444", "html_url": "https://github.com/rust-lang/rust/commit/dc85b1142111401f33a797fc449d8e36291f4444"}], "stats": {"total": 95, "additions": 57, "deletions": 38}, "files": [{"sha": "1b8be7bebd62d2a9547551651050c4c4444b69d7", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 37, "deletions": 11, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4c833a54d2ff4e180d8d2e9dd81274ad9c8cc367/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c833a54d2ff4e180d8d2e9dd81274ad9c8cc367/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=4c833a54d2ff4e180d8d2e9dd81274ad9c8cc367", "patch": "@@ -37,8 +37,8 @@ struct GlobalEvalContext<'a, 'tcx: 'a> {\n     /// The virtual memory system.\n     memory: Memory,\n \n-    /// Precomputed statics and constants\n-    statics: DefIdMap<Pointer>,\n+    /// Precomputed statics, constants and promoteds\n+    statics: HashMap<ConstantId<'tcx>, Pointer>,\n }\n \n struct FnEvalContext<'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> {\n@@ -92,9 +92,6 @@ struct Frame<'a, 'tcx: 'a> {\n     /// The offset of the first temporary in `self.locals`.\n     temp_offset: usize,\n \n-    /// List of precomputed promoted constants\n-    promoted: HashMap<usize, Pointer>,\n-\n     /// The index of the currently evaluated statment\n     stmt: usize,\n \n@@ -136,10 +133,28 @@ enum TerminatorTarget {\n \n #[derive(Clone, Debug, Eq, PartialEq, Hash)]\n enum ConstantId<'tcx> {\n-    Promoted { index: usize },\n+    Promoted { def_id: DefId, substs: &'tcx Substs<'tcx>, index: usize },\n     Static { def_id: DefId, substs: &'tcx Substs<'tcx> },\n }\n \n+impl<'tcx> ConstantId<'tcx> {\n+    fn substs(&self) -> &'tcx Substs<'tcx> {\n+        use self::ConstantId::*;\n+        match *self {\n+            Promoted { substs, .. } |\n+            Static { substs, .. } => substs\n+        }\n+    }\n+\n+    fn def_id(&self) -> DefId {\n+        use self::ConstantId::*;\n+        match *self {\n+            Promoted { def_id, .. } |\n+            Static { def_id, .. } => def_id,\n+        }\n+    }\n+}\n+\n \n impl<'a, 'tcx> GlobalEvalContext<'a, 'tcx> {\n     fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>, mir_map: &'a MirMap<'tcx>) -> Self {\n@@ -152,7 +167,7 @@ impl<'a, 'tcx> GlobalEvalContext<'a, 'tcx> {\n                                    .uint_type\n                                    .bit_width()\n                                    .expect(\"Session::target::uint_type was usize\")/8),\n-            statics: DefIdMap(),\n+            statics: HashMap::new(),\n         }\n     }\n \n@@ -248,7 +263,6 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n             locals: Vec::new(),\n             var_offset: num_args,\n             temp_offset: num_args + num_vars,\n-            promoted: HashMap::new(),\n             span: span,\n             def_id: def_id,\n             substs: substs,\n@@ -1025,10 +1039,18 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n                         if item_ty.ty.is_fn() {\n                             Err(EvalError::Unimplemented(\"unimplemented: mentions of function items\".to_string()))\n                         } else {\n-                            Ok(*self.statics.get(&def_id).expect(\"static should have been cached (rvalue)\"))\n+                            let cid = ConstantId::Static{ def_id: def_id, substs: substs };\n+                            Ok(*self.statics.get(&cid).expect(\"static should have been cached (rvalue)\"))\n                         }\n                     },\n-                    Promoted { index } => Ok(*self.frame().promoted.get(&index).expect(\"a promoted constant hasn't been precomputed\")),\n+                    Promoted { index } => {\n+                        let cid = ConstantId::Promoted {\n+                            def_id: self.frame().def_id,\n+                            substs: self.substs(),\n+                            index: index,\n+                        };\n+                        Ok(*self.statics.get(&cid).expect(\"a promoted constant hasn't been precomputed\"))\n+                    },\n                 }\n             }\n         }\n@@ -1043,7 +1065,11 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n             Var(i) => self.frame().locals[self.frame().var_offset + i as usize],\n             Temp(i) => self.frame().locals[self.frame().temp_offset + i as usize],\n \n-            Static(def_id) => *self.gecx.statics.get(&def_id).expect(\"static should have been cached (lvalue)\"),\n+            Static(def_id) => {\n+                let substs = self.tcx.mk_substs(subst::Substs::empty());\n+                let cid = ConstantId::Static{ def_id: def_id, substs: substs };\n+                *self.gecx.statics.get(&cid).expect(\"static should have been cached (lvalue)\")\n+            },\n \n             Projection(ref proj) => {\n                 let base = self.eval_lvalue(&proj.base)?;"}, {"sha": "1a2fbe43408a0bec83c300ed79343b13a0c09533", "filename": "src/interpreter/stepper.rs", "status": "modified", "additions": 20, "deletions": 27, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/4c833a54d2ff4e180d8d2e9dd81274ad9c8cc367/src%2Finterpreter%2Fstepper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c833a54d2ff4e180d8d2e9dd81274ad9c8cc367/src%2Finterpreter%2Fstepper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fstepper.rs?ref=4c833a54d2ff4e180d8d2e9dd81274ad9c8cc367", "patch": "@@ -10,7 +10,6 @@ use rustc::ty::subst::{self, Subst};\n use rustc::hir::def_id::DefId;\n use rustc::mir::visit::{Visitor, LvalueContext};\n use syntax::codemap::Span;\n-use memory::Pointer;\n use std::rc::Rc;\n \n pub enum Event {\n@@ -73,23 +72,11 @@ impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx\n     }\n \n     fn constant(&mut self) -> EvalResult<()> {\n-        match self.fncx.frame_mut().constants.pop() {\n-            Some((ConstantId::Promoted { index }, span, return_ptr, mir)) => {\n-                trace!(\"adding promoted constant {}, {:?}\", index, span);\n-                let substs = self.fncx.substs();\n-                // FIXME: somehow encode that this is a promoted constant's frame\n-                let def_id = self.fncx.frame().def_id;\n-                self.fncx.push_stack_frame(def_id, span, mir, substs, Some(return_ptr));\n-                self.mir = self.fncx.mir();\n-            },\n-            Some((ConstantId::Static { def_id, substs }, span, return_ptr, mir)) => {\n-                trace!(\"adding static {:?}, {:?}\", def_id, span);\n-                self.fncx.gecx.statics.insert(def_id, return_ptr);\n-                self.fncx.push_stack_frame(def_id, span, mir, substs, Some(return_ptr));\n-                self.mir = self.fncx.mir();\n-            },\n-            None => unreachable!(),\n-        }\n+        let (cid, span, return_ptr, mir) = self.fncx.frame_mut().constants.pop().expect(\"state machine broken\");\n+        let def_id = cid.def_id();\n+        let substs = cid.substs();\n+        self.fncx.push_stack_frame(def_id, span, mir, substs, Some(return_ptr));\n+        self.mir = self.fncx.mir();\n         Ok(())\n     }\n \n@@ -164,16 +151,17 @@ struct ConstantExtractor<'a: 'c, 'b: 'a + 'mir + 'c, 'c, 'mir: 'c, 'tcx: 'a + 'b\n }\n \n impl<'a, 'b, 'c, 'mir, 'tcx> ConstantExtractor<'a, 'b, 'c, 'mir, 'tcx> {\n-    fn constant(&mut self, def_id: DefId, substs: &'tcx subst::Substs<'tcx>, span: Span) {\n-        if self.fncx.gecx.statics.contains_key(&def_id) {\n-            return;\n-        }\n+    fn static_item(&mut self, def_id: DefId, substs: &'tcx subst::Substs<'tcx>, span: Span) {\n         let cid = ConstantId::Static {\n             def_id: def_id,\n             substs: substs,\n         };\n+        if self.fncx.gecx.statics.contains_key(&cid) {\n+            return;\n+        }\n         let mir = self.fncx.load_mir(def_id);\n         let ptr = self.fncx.alloc_ret_ptr(mir.return_ty).expect(\"there's no such thing as an unreachable static\");\n+        self.fncx.statics.insert(cid.clone(), ptr);\n         self.fncx.frame_mut().constants.push((cid, span, ptr, mir));\n     }\n }\n@@ -189,19 +177,24 @@ impl<'a, 'b, 'c, 'mir, 'tcx> Visitor<'tcx> for ConstantExtractor<'a, 'b, 'c, 'mi\n                 if item_ty.ty.is_fn() {\n                     // unimplemented\n                 } else {\n-                    self.constant(def_id, substs, constant.span);\n+                    self.static_item(def_id, substs, constant.span);\n                 }\n             },\n             mir::Literal::Promoted { index } => {\n-                if self.fncx.frame().promoted.contains_key(&index) {\n+                let cid = ConstantId::Promoted {\n+                    def_id: self.fncx.frame().def_id,\n+                    substs: self.fncx.substs(),\n+                    index: index,\n+                };\n+                if self.fncx.statics.contains_key(&cid) {\n                     return;\n                 }\n                 let mir = self.mir.promoted[index].clone();\n                 let return_ty = mir.return_ty;\n                 let return_ptr = self.fncx.alloc_ret_ptr(return_ty).expect(\"there's no such thing as an unreachable static\");\n-                self.fncx.frame_mut().promoted.insert(index, return_ptr);\n                 let mir = CachedMir::Owned(Rc::new(mir));\n-                self.fncx.frame_mut().constants.push((ConstantId::Promoted { index: index }, constant.span, return_ptr, mir));\n+                self.fncx.statics.insert(cid.clone(), return_ptr);\n+                self.fncx.frame_mut().constants.push((cid, constant.span, return_ptr, mir));\n             }\n         }\n     }\n@@ -211,7 +204,7 @@ impl<'a, 'b, 'c, 'mir, 'tcx> Visitor<'tcx> for ConstantExtractor<'a, 'b, 'c, 'mi\n         if let mir::Lvalue::Static(def_id) = *lvalue {\n             let substs = self.fncx.tcx.mk_substs(subst::Substs::empty());\n             let span = self.span;\n-            self.constant(def_id, substs, span);\n+            self.static_item(def_id, substs, span);\n         }\n     }\n }"}]}