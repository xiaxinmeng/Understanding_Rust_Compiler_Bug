{"sha": "49bee9d09a8f8c2baf4aff7d6a46cebff0c64594", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5YmVlOWQwOWE4ZjhjMmJhZjRhZmY3ZDZhNDZjZWJmZjBjNjQ1OTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-08T07:12:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-08T07:12:15Z"}, "message": "Auto merge of #45735 - tirr-c:issue-45730, r=arielb1\n\nForbid casting to/from a pointer of unknown kind\n\nFixes #45730.\n\nBefore, it ICE'd when `pointer_kind` encountered `TyInfer`.", "tree": {"sha": "d94e67a8da37691ddc4281896af8e0d42c05c928", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d94e67a8da37691ddc4281896af8e0d42c05c928"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49bee9d09a8f8c2baf4aff7d6a46cebff0c64594", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49bee9d09a8f8c2baf4aff7d6a46cebff0c64594", "html_url": "https://github.com/rust-lang/rust/commit/49bee9d09a8f8c2baf4aff7d6a46cebff0c64594", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49bee9d09a8f8c2baf4aff7d6a46cebff0c64594/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e177df3d5c4a5a9432f33f54ee459ea25bf7f2d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e177df3d5c4a5a9432f33f54ee459ea25bf7f2d2", "html_url": "https://github.com/rust-lang/rust/commit/e177df3d5c4a5a9432f33f54ee459ea25bf7f2d2"}, {"sha": "99ada043b622fd6186e49b503bc19cb8eec6dcb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/99ada043b622fd6186e49b503bc19cb8eec6dcb1", "html_url": "https://github.com/rust-lang/rust/commit/99ada043b622fd6186e49b503bc19cb8eec6dcb1"}], "stats": {"total": 134, "additions": 111, "deletions": 23}, "files": [{"sha": "d68c139894b92adba2c4be525de8fa442a240300", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 59, "deletions": 23, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/49bee9d09a8f8c2baf4aff7d6a46cebff0c64594/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49bee9d09a8f8c2baf4aff7d6a46cebff0c64594/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=49bee9d09a8f8c2baf4aff7d6a46cebff0c64594", "patch": "@@ -83,28 +83,30 @@ enum PointerKind<'tcx> {\n \n impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     /// Returns the kind of unsize information of t, or None\n-    /// if t is sized or it is unknown.\n-    fn pointer_kind(&self, t: Ty<'tcx>, span: Span) -> PointerKind<'tcx> {\n+    /// if t is unknown.\n+    fn pointer_kind(&self, t: Ty<'tcx>, span: Span) -> Option<PointerKind<'tcx>> {\n         if self.type_is_known_to_be_sized(t, span) {\n-            return PointerKind::Thin;\n+            return Some(PointerKind::Thin);\n         }\n \n         match t.sty {\n-            ty::TySlice(_) | ty::TyStr => PointerKind::Length,\n+            ty::TySlice(_) | ty::TyStr => Some(PointerKind::Length),\n             ty::TyDynamic(ref tty, ..) =>\n-                PointerKind::Vtable(tty.principal().map(|p| p.def_id())),\n+                Some(PointerKind::Vtable(tty.principal().map(|p| p.def_id()))),\n             ty::TyAdt(def, substs) if def.is_struct() => {\n                 // FIXME(arielb1): do some kind of normalization\n                 match def.struct_variant().fields.last() {\n-                    None => PointerKind::Thin,\n+                    None => Some(PointerKind::Thin),\n                     Some(f) => self.pointer_kind(f.ty(self.tcx, substs), span),\n                 }\n             }\n             // Pointers to foreign types are thin, despite being unsized\n-            ty::TyForeign(..) => PointerKind::Thin,\n+            ty::TyForeign(..) => Some(PointerKind::Thin),\n             // We should really try to normalize here.\n-            ty::TyProjection(ref pi) => PointerKind::OfProjection(pi),\n-            ty::TyParam(ref p) => PointerKind::OfParam(p),\n+            ty::TyProjection(ref pi) => Some(PointerKind::OfProjection(pi)),\n+            ty::TyParam(ref p) => Some(PointerKind::OfParam(p)),\n+            // Insufficient type information.\n+            ty::TyInfer(_) => None,\n             _ => panic!(),\n         }\n     }\n@@ -123,6 +125,8 @@ enum CastError {\n     NeedViaThinPtr,\n     NeedViaInt,\n     NonScalar,\n+    UnknownExprPtrKind,\n+    UnknownCastPtrKind,\n }\n \n fn make_invalid_casting_error<'a, 'gcx, 'tcx>(sess: &'a Session,\n@@ -241,6 +245,25 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n                                  self.expr_ty,\n                                  fcx.ty_to_string(self.cast_ty)).emit();\n             }\n+            CastError::UnknownCastPtrKind |\n+            CastError::UnknownExprPtrKind => {\n+                let unknown_cast_to = match e {\n+                    CastError::UnknownCastPtrKind => true,\n+                    CastError::UnknownExprPtrKind => false,\n+                    _ => bug!(),\n+                };\n+                let mut err = struct_span_err!(fcx.tcx.sess, self.span, E0641,\n+                                               \"cannot cast {} a pointer of an unknown kind\",\n+                                               if unknown_cast_to { \"to\" } else { \"from\" });\n+                err.note(\"The type information given here is insufficient to check whether \\\n+                          the pointer cast is valid\");\n+                if unknown_cast_to {\n+                    err.span_suggestion_short(self.cast_span,\n+                                              \"consider giving more type information\",\n+                                              String::new());\n+                }\n+                err.emit();\n+            }\n         }\n     }\n \n@@ -457,14 +480,27 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n         debug!(\"check_ptr_ptr_cast m_expr={:?} m_cast={:?}\", m_expr, m_cast);\n         // ptr-ptr cast. vtables must match.\n \n-        // Cast to thin pointer is OK\n+        let expr_kind = fcx.pointer_kind(m_expr.ty, self.span);\n         let cast_kind = fcx.pointer_kind(m_cast.ty, self.span);\n+\n+        let cast_kind = match cast_kind {\n+            // We can't cast if target pointer kind is unknown\n+            None => return Err(CastError::UnknownCastPtrKind),\n+            Some(cast_kind) => cast_kind,\n+        };\n+\n+        // Cast to thin pointer is OK\n         if cast_kind == PointerKind::Thin {\n             return Ok(CastKind::PtrPtrCast);\n         }\n \n+        let expr_kind = match expr_kind {\n+            // We can't cast to fat pointer if source pointer kind is unknown\n+            None => return Err(CastError::UnknownExprPtrKind),\n+            Some(expr_kind) => expr_kind,\n+        };\n+\n         // thin -> fat? report invalid cast (don't complain about vtable kinds)\n-        let expr_kind = fcx.pointer_kind(m_expr.ty, self.span);\n         if expr_kind == PointerKind::Thin {\n             return Err(CastError::SizedUnsizedCast);\n         }\n@@ -483,10 +519,10 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n                            -> Result<CastKind, CastError> {\n         // fptr-ptr cast. must be to thin ptr\n \n-        if fcx.pointer_kind(m_cast.ty, self.span) == PointerKind::Thin {\n-            Ok(CastKind::FnPtrPtrCast)\n-        } else {\n-            Err(CastError::IllegalCast)\n+        match fcx.pointer_kind(m_cast.ty, self.span) {\n+            None => Err(CastError::UnknownCastPtrKind),\n+            Some(PointerKind::Thin) => Ok(CastKind::FnPtrPtrCast),\n+            _ => Err(CastError::IllegalCast),\n         }\n     }\n \n@@ -496,10 +532,10 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n                            -> Result<CastKind, CastError> {\n         // ptr-addr cast. must be from thin ptr\n \n-        if fcx.pointer_kind(m_expr.ty, self.span) == PointerKind::Thin {\n-            Ok(CastKind::PtrAddrCast)\n-        } else {\n-            Err(CastError::NeedViaThinPtr)\n+        match fcx.pointer_kind(m_expr.ty, self.span) {\n+            None => Err(CastError::UnknownExprPtrKind),\n+            Some(PointerKind::Thin) => Ok(CastKind::PtrAddrCast),\n+            _ => Err(CastError::NeedViaThinPtr),\n         }\n     }\n \n@@ -533,10 +569,10 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n                            m_cast: &'tcx ty::TypeAndMut<'tcx>)\n                            -> Result<CastKind, CastError> {\n         // ptr-addr cast. pointer must be thin.\n-        if fcx.pointer_kind(m_cast.ty, self.span) == PointerKind::Thin {\n-            Ok(CastKind::AddrPtrCast)\n-        } else {\n-            Err(CastError::IllegalCast)\n+        match fcx.pointer_kind(m_cast.ty, self.span) {\n+            None => Err(CastError::UnknownCastPtrKind),\n+            Some(PointerKind::Thin) => Ok(CastKind::AddrPtrCast),\n+            _ => Err(CastError::IllegalCast),\n         }\n     }\n "}, {"sha": "a23c7ded526360b8d4c0aa440f9d80d806ab39a2", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/49bee9d09a8f8c2baf4aff7d6a46cebff0c64594/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49bee9d09a8f8c2baf4aff7d6a46cebff0c64594/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=49bee9d09a8f8c2baf4aff7d6a46cebff0c64594", "patch": "@@ -4743,4 +4743,5 @@ register_diagnostics! {\n     E0627, // yield statement outside of generator literal\n     E0632, // cannot provide explicit type parameters when `impl Trait` is used in\n            // argument position.\n+    E0641, // cannot cast to/from a pointer with an unknown kind\n }"}, {"sha": "f725d69ca65cd065f8d2bb0dd7973d91b7770c7c", "filename": "src/test/ui/issue-45730.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/49bee9d09a8f8c2baf4aff7d6a46cebff0c64594/src%2Ftest%2Fui%2Fissue-45730.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49bee9d09a8f8c2baf4aff7d6a46cebff0c64594/src%2Ftest%2Fui%2Fissue-45730.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-45730.rs?ref=49bee9d09a8f8c2baf4aff7d6a46cebff0c64594", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::fmt;\n+fn main() {\n+    let x: *const _ = 0 as _;\n+\n+    let x: *const _ = 0 as *const _;\n+    let y: Option<*const fmt::Debug> = Some(x) as _;\n+\n+    let x = 0 as *const i32 as *const _ as *mut _;\n+}"}, {"sha": "c4f2e856b7b57990b0f8cfdbb11a736fe82eba9b", "filename": "src/test/ui/issue-45730.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/49bee9d09a8f8c2baf4aff7d6a46cebff0c64594/src%2Ftest%2Fui%2Fissue-45730.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49bee9d09a8f8c2baf4aff7d6a46cebff0c64594/src%2Ftest%2Fui%2Fissue-45730.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-45730.stderr?ref=49bee9d09a8f8c2baf4aff7d6a46cebff0c64594", "patch": "@@ -0,0 +1,32 @@\n+error[E0641]: cannot cast to a pointer of an unknown kind\n+  --> $DIR/issue-45730.rs:13:23\n+   |\n+13 |     let x: *const _ = 0 as _;\n+   |                       ^^^^^-\n+   |                            |\n+   |                            help: consider giving more type information\n+   |\n+   = note: The type information given here is insufficient to check whether the pointer cast is valid\n+\n+error[E0641]: cannot cast to a pointer of an unknown kind\n+  --> $DIR/issue-45730.rs:15:23\n+   |\n+15 |     let x: *const _ = 0 as *const _;\n+   |                       ^^^^^--------\n+   |                            |\n+   |                            help: consider giving more type information\n+   |\n+   = note: The type information given here is insufficient to check whether the pointer cast is valid\n+\n+error[E0641]: cannot cast to a pointer of an unknown kind\n+  --> $DIR/issue-45730.rs:18:13\n+   |\n+18 |     let x = 0 as *const i32 as *const _ as *mut _;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------\n+   |                                            |\n+   |                                            help: consider giving more type information\n+   |\n+   = note: The type information given here is insufficient to check whether the pointer cast is valid\n+\n+error: aborting due to 3 previous errors\n+"}]}