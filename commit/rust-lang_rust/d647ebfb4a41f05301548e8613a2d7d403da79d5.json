{"sha": "d647ebfb4a41f05301548e8613a2d7d403da79d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2NDdlYmZiNGE0MWYwNTMwMTU0OGU4NjEzYTJkN2Q0MDNkYTc5ZDU=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2021-09-08T17:40:32Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2021-09-09T13:14:16Z"}, "message": "Revert \"Allow formatting `Anonymous{Struct, Union}` declarations\"\n\nThis reverts commit 64acb7d92135ae722dfce89f0ca9d7cf6576de66.", "tree": {"sha": "dceccbedde622ea088ef5e67e1af3d4c2ab125ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dceccbedde622ea088ef5e67e1af3d4c2ab125ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d647ebfb4a41f05301548e8613a2d7d403da79d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d647ebfb4a41f05301548e8613a2d7d403da79d5", "html_url": "https://github.com/rust-lang/rust/commit/d647ebfb4a41f05301548e8613a2d7d403da79d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d647ebfb4a41f05301548e8613a2d7d403da79d5/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6271dedd8d1b72e8860ebeb19576be2fefd9bc2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6271dedd8d1b72e8860ebeb19576be2fefd9bc2d", "html_url": "https://github.com/rust-lang/rust/commit/6271dedd8d1b72e8860ebeb19576be2fefd9bc2d"}], "stats": {"total": 77, "additions": 12, "deletions": 65}, "files": [{"sha": "14041539b9dfd618536dc240416b65a60f283d3d", "filename": "src/items.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d647ebfb4a41f05301548e8613a2d7d403da79d5/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d647ebfb4a41f05301548e8613a2d7d403da79d5/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=d647ebfb4a41f05301548e8613a2d7d403da79d5", "patch": "@@ -6,7 +6,7 @@ use std::cmp::{max, min, Ordering};\n use regex::Regex;\n use rustc_ast::visit;\n use rustc_ast::{ast, ptr};\n-use rustc_span::{symbol, BytePos, Span};\n+use rustc_span::{symbol, BytePos, Span, DUMMY_SP};\n \n use crate::attr::filter_inline_attrs;\n use crate::comment::{\n@@ -31,7 +31,12 @@ use crate::stmt::Stmt;\n use crate::utils::*;\n use crate::vertical::rewrite_with_alignment;\n use crate::visitor::FmtVisitor;\n-use crate::DEFAULT_VISIBILITY;\n+\n+const DEFAULT_VISIBILITY: ast::Visibility = ast::Visibility {\n+    kind: ast::VisibilityKind::Inherited,\n+    span: DUMMY_SP,\n+    tokens: None,\n+};\n \n fn type_annotation_separator(config: &Config) -> &str {\n     colon_spaces(config)\n@@ -972,7 +977,7 @@ impl<'a> StructParts<'a> {\n         format_header(context, self.prefix, self.ident, self.vis, offset)\n     }\n \n-    pub(crate) fn from_variant(variant: &'a ast::Variant) -> Self {\n+    fn from_variant(variant: &'a ast::Variant) -> Self {\n         StructParts {\n             prefix: \"\",\n             ident: variant.ident,"}, {"sha": "47a7b9d4dbe3cb80baa2d08d979e9e94e2b56241", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d647ebfb4a41f05301548e8613a2d7d403da79d5/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d647ebfb4a41f05301548e8613a2d7d403da79d5/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=d647ebfb4a41f05301548e8613a2d7d403da79d5", "patch": "@@ -32,7 +32,7 @@ use std::path::PathBuf;\n use std::rc::Rc;\n \n use rustc_ast::ast;\n-use rustc_span::{symbol, DUMMY_SP};\n+use rustc_span::symbol;\n use thiserror::Error;\n \n use crate::comment::LineClasses;\n@@ -96,11 +96,6 @@ mod types;\n mod vertical;\n pub(crate) mod visitor;\n \n-const DEFAULT_VISIBILITY: ast::Visibility = ast::Visibility {\n-    kind: ast::VisibilityKind::Inherited,\n-    span: DUMMY_SP,\n-    tokens: None,\n-};\n /// The various errors that can occur during formatting. Note that not all of\n /// these can currently be propagated to clients.\n #[derive(Error, Debug)]"}, {"sha": "76bf58e875b1f6d48218fce5a909ac010ddd2b40", "filename": "src/types.rs", "status": "modified", "additions": 3, "deletions": 56, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/d647ebfb4a41f05301548e8613a2d7d403da79d5/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d647ebfb4a41f05301548e8613a2d7d403da79d5/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=d647ebfb4a41f05301548e8613a2d7d403da79d5", "patch": "@@ -1,15 +1,15 @@\n use std::iter::ExactSizeIterator;\n use std::ops::Deref;\n \n-use rustc_ast::ast::{self, AttrVec, FnRetTy, Mutability};\n-use rustc_span::{symbol::kw, symbol::Ident, BytePos, Pos, Span};\n+use rustc_ast::ast::{self, FnRetTy, Mutability};\n+use rustc_span::{symbol::kw, BytePos, Pos, Span};\n \n+use crate::comment::{combine_strs_with_missing_comments, contains_comment};\n use crate::config::lists::*;\n use crate::config::{IndentStyle, TypeDensity, Version};\n use crate::expr::{\n     format_expr, rewrite_assign_rhs, rewrite_call, rewrite_tuple, rewrite_unary_prefix, ExprType,\n };\n-use crate::items::StructParts;\n use crate::lists::{\n     definitive_tactic, itemize_list, write_list, ListFormatting, ListItem, Separator,\n };\n@@ -24,11 +24,6 @@ use crate::utils::{\n     colon_spaces, extra_offset, first_line_width, format_extern, format_mutability,\n     last_line_extendable, last_line_width, mk_sp, rewrite_ident,\n };\n-use crate::DEFAULT_VISIBILITY;\n-use crate::{\n-    comment::{combine_strs_with_missing_comments, contains_comment},\n-    items::format_struct_struct,\n-};\n \n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n pub(crate) enum PathContext {\n@@ -769,54 +764,6 @@ impl Rewrite for ast::Ty {\n             ast::TyKind::Tup(ref items) => {\n                 rewrite_tuple(context, items.iter(), self.span, shape, items.len() == 1)\n             }\n-            ast::TyKind::AnonymousStruct(ref fields, recovered) => {\n-                let ident = Ident::new(\n-                    kw::Struct,\n-                    mk_sp(self.span.lo(), self.span.lo() + BytePos(6)),\n-                );\n-                let data = ast::VariantData::Struct(fields.clone(), recovered);\n-                let variant = ast::Variant {\n-                    attrs: AttrVec::new(),\n-                    id: self.id,\n-                    span: self.span,\n-                    vis: DEFAULT_VISIBILITY,\n-                    ident,\n-                    data,\n-                    disr_expr: None,\n-                    is_placeholder: false,\n-                };\n-                format_struct_struct(\n-                    &context,\n-                    &StructParts::from_variant(&variant),\n-                    fields,\n-                    shape.indent,\n-                    None,\n-                )\n-            }\n-            ast::TyKind::AnonymousUnion(ref fields, recovered) => {\n-                let ident = Ident::new(\n-                    kw::Union,\n-                    mk_sp(self.span.lo(), self.span.lo() + BytePos(5)),\n-                );\n-                let data = ast::VariantData::Struct(fields.clone(), recovered);\n-                let variant = ast::Variant {\n-                    attrs: AttrVec::new(),\n-                    id: self.id,\n-                    span: self.span,\n-                    vis: DEFAULT_VISIBILITY,\n-                    ident,\n-                    data,\n-                    disr_expr: None,\n-                    is_placeholder: false,\n-                };\n-                format_struct_struct(\n-                    &context,\n-                    &StructParts::from_variant(&variant),\n-                    fields,\n-                    shape.indent,\n-                    None,\n-                )\n-            }\n             ast::TyKind::Path(ref q_self, ref path) => {\n                 rewrite_path(context, PathContext::Type, q_self.as_ref(), path, shape)\n             }"}]}