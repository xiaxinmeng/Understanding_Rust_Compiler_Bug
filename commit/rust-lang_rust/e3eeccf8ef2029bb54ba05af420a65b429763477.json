{"sha": "e3eeccf8ef2029bb54ba05af420a65b429763477", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzZWVjY2Y4ZWYyMDI5YmI1NGJhMDVhZjQyMGE2NWI0Mjk3NjM0Nzc=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-01-29T14:59:52Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-01-29T14:59:52Z"}, "message": "Prefer ValueNS when resolving hir path for PathExpressions", "tree": {"sha": "b705e1a79a02af2cdc54804d5a2f07170e753ee6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b705e1a79a02af2cdc54804d5a2f07170e753ee6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3eeccf8ef2029bb54ba05af420a65b429763477", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3eeccf8ef2029bb54ba05af420a65b429763477", "html_url": "https://github.com/rust-lang/rust/commit/e3eeccf8ef2029bb54ba05af420a65b429763477", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3eeccf8ef2029bb54ba05af420a65b429763477/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "426ad8e165aeb70a3d12b8bc870cb0c57a308bc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/426ad8e165aeb70a3d12b8bc870cb0c57a308bc7", "html_url": "https://github.com/rust-lang/rust/commit/426ad8e165aeb70a3d12b8bc870cb0c57a308bc7"}], "stats": {"total": 45, "additions": 31, "deletions": 14}, "files": [{"sha": "626c3078a01edc070797670a26f993074833fa31", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 31, "deletions": 14, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/e3eeccf8ef2029bb54ba05af420a65b429763477/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3eeccf8ef2029bb54ba05af420a65b429763477/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=e3eeccf8ef2029bb54ba05af420a65b429763477", "patch": "@@ -222,6 +222,7 @@ impl SourceAnalyzer {\n         db: &dyn HirDatabase,\n         path: &ast::Path,\n     ) -> Option<PathResolution> {\n+        let mut prefer_value_ns = false;\n         if let Some(path_expr) = path.syntax().parent().and_then(ast::PathExpr::cast) {\n             let expr_id = self.expr_id(db, &path_expr.into())?;\n             let infer = self.infer.as_ref()?;\n@@ -233,9 +234,7 @@ impl SourceAnalyzer {\n             {\n                 return Some(PathResolution::Def(ModuleDef::Variant(variant.into())));\n             }\n-            if let Some(func) = infer[expr_id].as_fn_def() {\n-                return Some(PathResolution::Def(ModuleDef::Function(func.into())));\n-            }\n+            prefer_value_ns = true;\n         }\n \n         if let Some(path_pat) = path.syntax().parent().and_then(ast::PathPat::cast) {\n@@ -281,7 +280,7 @@ impl SourceAnalyzer {\n             }\n         }\n \n-        resolve_hir_path(db, &self.resolver, &hir_path)\n+        resolve_hir_path_(db, &self.resolver, &hir_path, prefer_value_ns)\n     }\n \n     pub(crate) fn record_literal_missing_fields(\n@@ -451,12 +450,22 @@ fn adjust(\n         .map(|(_ptr, scope)| *scope)\n }\n \n+#[inline]\n pub(crate) fn resolve_hir_path(\n     db: &dyn HirDatabase,\n     resolver: &Resolver,\n     path: &Path,\n ) -> Option<PathResolution> {\n-    let types =\n+    resolve_hir_path_(db, resolver, path, false)\n+}\n+\n+fn resolve_hir_path_(\n+    db: &dyn HirDatabase,\n+    resolver: &Resolver,\n+    path: &Path,\n+    prefer_value_ns: bool,\n+) -> Option<PathResolution> {\n+    let types = || {\n         resolver.resolve_path_in_type_ns_fully(db.upcast(), path.mod_path()).map(|ty| match ty {\n             TypeNs::SelfType(it) => PathResolution::SelfType(it.into()),\n             TypeNs::GenericParam(id) => PathResolution::TypeParam(TypeParam { id }),\n@@ -467,10 +476,11 @@ pub(crate) fn resolve_hir_path(\n             TypeNs::TypeAliasId(it) => PathResolution::Def(TypeAlias::from(it).into()),\n             TypeNs::BuiltinType(it) => PathResolution::Def(it.into()),\n             TypeNs::TraitId(it) => PathResolution::Def(Trait::from(it).into()),\n-        });\n+        })\n+    };\n \n     let body_owner = resolver.body_owner();\n-    let values =\n+    let values = || {\n         resolver.resolve_path_in_value_ns_fully(db.upcast(), path.mod_path()).and_then(|val| {\n             let res = match val {\n                 ValueNs::LocalBinding(pat_id) => {\n@@ -486,18 +496,25 @@ pub(crate) fn resolve_hir_path(\n                 ValueNs::GenericParam(it) => PathResolution::ConstParam(it.into()),\n             };\n             Some(res)\n-        });\n+        })\n+    };\n \n-    let items = resolver\n-        .resolve_module_path_in_items(db.upcast(), path.mod_path())\n-        .take_types()\n-        .map(|it| PathResolution::Def(it.into()));\n+    let items = || {\n+        resolver\n+            .resolve_module_path_in_items(db.upcast(), path.mod_path())\n+            .take_types()\n+            .map(|it| PathResolution::Def(it.into()))\n+    };\n \n-    types.or(values).or(items).or_else(|| {\n+    let macros = || {\n         resolver\n             .resolve_path_as_macro(db.upcast(), path.mod_path())\n             .map(|def| PathResolution::Macro(def.into()))\n-    })\n+    };\n+\n+    if prefer_value_ns { values().or_else(types) } else { types().or_else(values) }\n+        .or_else(items)\n+        .or_else(macros)\n }\n \n /// Resolves a path where we know it is a qualifier of another path."}]}