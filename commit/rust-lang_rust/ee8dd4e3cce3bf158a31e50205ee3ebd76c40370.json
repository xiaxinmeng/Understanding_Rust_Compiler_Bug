{"sha": "ee8dd4e3cce3bf158a31e50205ee3ebd76c40370", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlOGRkNGUzY2NlM2JmMTU4YTMxZTUwMjA1ZWUzZWJkNzZjNDAzNzA=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-07-04T17:30:45Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-07-04T17:30:45Z"}, "message": "Fix const prop ICE\n\nwe used to erase the local just before we tried to read it for diagnostics", "tree": {"sha": "cf7a030e3a7788e9f98604b0fd12df2e33831076", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf7a030e3a7788e9f98604b0fd12df2e33831076"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee8dd4e3cce3bf158a31e50205ee3ebd76c40370", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee8dd4e3cce3bf158a31e50205ee3ebd76c40370", "html_url": "https://github.com/rust-lang/rust/commit/ee8dd4e3cce3bf158a31e50205ee3ebd76c40370", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee8dd4e3cce3bf158a31e50205ee3ebd76c40370/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cd7ff7ddfb75a38dca81ad3e76b1e984129e939", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cd7ff7ddfb75a38dca81ad3e76b1e984129e939", "html_url": "https://github.com/rust-lang/rust/commit/0cd7ff7ddfb75a38dca81ad3e76b1e984129e939"}], "stats": {"total": 49, "additions": 30, "deletions": 19}, "files": [{"sha": "fbe3377d87500f754797dfb1845d83c42594a379", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ee8dd4e3cce3bf158a31e50205ee3ebd76c40370/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee8dd4e3cce3bf158a31e50205ee3ebd76c40370/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=ee8dd4e3cce3bf158a31e50205ee3ebd76c40370", "patch": "@@ -1004,14 +1004,6 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                     let expected = ScalarMaybeUninit::from(Scalar::from_bool(*expected));\n                     let value_const = self.ecx.read_scalar(value).unwrap();\n                     if expected != value_const {\n-                        // Poison all places this operand references so that further code\n-                        // doesn't use the invalid value\n-                        match cond {\n-                            Operand::Move(ref place) | Operand::Copy(ref place) => {\n-                                Self::remove_const(&mut self.ecx, place.local);\n-                            }\n-                            Operand::Constant(_) => {}\n-                        }\n                         let mut eval_to_int = |op| {\n                             let op = self\n                                 .eval_operand(op, source_info)\n@@ -1020,27 +1012,37 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                         };\n                         let msg = match msg {\n                             AssertKind::DivisionByZero(op) => {\n-                                AssertKind::DivisionByZero(eval_to_int(op))\n+                                Some(AssertKind::DivisionByZero(eval_to_int(op)))\n                             }\n                             AssertKind::RemainderByZero(op) => {\n-                                AssertKind::RemainderByZero(eval_to_int(op))\n+                                Some(AssertKind::RemainderByZero(eval_to_int(op)))\n                             }\n                             AssertKind::BoundsCheck { ref len, ref index } => {\n                                 let len = eval_to_int(len);\n                                 let index = eval_to_int(index);\n-                                AssertKind::BoundsCheck { len, index }\n+                                Some(AssertKind::BoundsCheck { len, index })\n                             }\n                             // Overflow is are already covered by checks on the binary operators.\n-                            AssertKind::Overflow(..) | AssertKind::OverflowNeg(_) => return,\n+                            AssertKind::Overflow(..) | AssertKind::OverflowNeg(_) => None,\n                             // Need proper const propagator for these.\n-                            _ => return,\n+                            _ => None,\n                         };\n-                        self.report_assert_as_lint(\n-                            lint::builtin::UNCONDITIONAL_PANIC,\n-                            source_info,\n-                            \"this operation will panic at runtime\",\n-                            msg,\n-                        );\n+                        // Poison all places this operand references so that further code\n+                        // doesn't use the invalid value\n+                        match cond {\n+                            Operand::Move(ref place) | Operand::Copy(ref place) => {\n+                                Self::remove_const(&mut self.ecx, place.local);\n+                            }\n+                            Operand::Constant(_) => {}\n+                        }\n+                        if let Some(msg) = msg {\n+                            self.report_assert_as_lint(\n+                                lint::builtin::UNCONDITIONAL_PANIC,\n+                                source_info,\n+                                \"this operation will panic at runtime\",\n+                                msg,\n+                            );\n+                        }\n                     } else {\n                         if self.should_const_prop(value) {\n                             if let ScalarMaybeUninit::Scalar(scalar) = value_const {"}, {"sha": "5f2d5e80243fe62a76362679ffc08cb042142daf", "filename": "src/test/ui/const_prop/ice-assert-fail-div-by-zero.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ee8dd4e3cce3bf158a31e50205ee3ebd76c40370/src%2Ftest%2Fui%2Fconst_prop%2Fice-assert-fail-div-by-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee8dd4e3cce3bf158a31e50205ee3ebd76c40370/src%2Ftest%2Fui%2Fconst_prop%2Fice-assert-fail-div-by-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst_prop%2Fice-assert-fail-div-by-zero.rs?ref=ee8dd4e3cce3bf158a31e50205ee3ebd76c40370", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+\n+pub struct Fixed64(i64);\n+\n+pub fn div(f: Fixed64) {\n+    f.0 / 0;\n+}\n+\n+fn main() {}"}]}