{"sha": "86bdb3ed0912b6a8810815342a5ab570cac56ce5", "node_id": "C_kwDOAAsO6NoAKDg2YmRiM2VkMDkxMmI2YTg4MTA4MTUzNDJhNWFiNTcwY2FjNTZjZTU", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-08-09T17:41:42Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-08-10T09:21:52Z"}, "message": "Rustdoc-Json: Add `Path` type for traits.\n\nCloses #100106", "tree": {"sha": "e9af8407ee31d907ffd2663df1e941478a323a34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9af8407ee31d907ffd2663df1e941478a323a34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86bdb3ed0912b6a8810815342a5ab570cac56ce5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86bdb3ed0912b6a8810815342a5ab570cac56ce5", "html_url": "https://github.com/rust-lang/rust/commit/86bdb3ed0912b6a8810815342a5ab570cac56ce5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86bdb3ed0912b6a8810815342a5ab570cac56ce5/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "html_url": "https://github.com/rust-lang/rust/commit/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e"}], "stats": {"total": 190, "additions": 96, "deletions": 94}, "files": [{"sha": "ce06a79a21c3f58a770606027708e84b6552afa0", "filename": "src/etc/check_missing_items.py", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/86bdb3ed0912b6a8810815342a5ab570cac56ce5/src%2Fetc%2Fcheck_missing_items.py", "raw_url": "https://github.com/rust-lang/rust/raw/86bdb3ed0912b6a8810815342a5ab570cac56ce5/src%2Fetc%2Fcheck_missing_items.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcheck_missing_items.py?ref=86bdb3ed0912b6a8810815342a5ab570cac56ce5", "patch": "@@ -57,7 +57,7 @@ def check_generic_bound(bound):\n     if \"trait_bound\" in bound:\n         for param in bound[\"trait_bound\"][\"generic_params\"]:\n             check_generic_param(param)\n-        check_type(bound[\"trait_bound\"][\"trait\"])\n+        check_path(bound[\"trait_bound\"][\"trait\"])\n \n \n def check_decl(decl):\n@@ -66,35 +66,35 @@ def check_decl(decl):\n     if decl[\"output\"]:\n         check_type(decl[\"output\"])\n \n+def check_path(path):\n+    args = path[\"args\"]\n+    if args:\n+        if \"angle_bracketed\" in args:\n+            for arg in args[\"angle_bracketed\"][\"args\"]:\n+                if \"type\" in arg:\n+                    check_type(arg[\"type\"])\n+                elif \"const\" in arg:\n+                    check_type(arg[\"const\"][\"type\"])\n+            for binding in args[\"angle_bracketed\"][\"bindings\"]:\n+                if \"equality\" in binding[\"binding\"]:\n+                    term = binding[\"binding\"][\"equality\"]\n+                    if \"type\" in term: check_type(term[\"type\"])\n+                    elif \"const\" in term: check_type(term[\"const\"])\n+                elif \"constraint\" in binding[\"binding\"]:\n+                    for bound in binding[\"binding\"][\"constraint\"]:\n+                        check_generic_bound(bound)\n+        elif \"parenthesized\" in args:\n+            for input_ty in args[\"parenthesized\"][\"inputs\"]:\n+                check_type(input_ty)\n+            if args[\"parenthesized\"][\"output\"]:\n+                check_type(args[\"parenthesized\"][\"output\"])\n+    if not valid_id(path[\"id\"]):\n+        print(\"Type contained an invalid ID:\", path[\"id\"])\n+        sys.exit(1)\n \n def check_type(ty):\n     if ty[\"kind\"] == \"resolved_path\":\n-        for bound in ty[\"inner\"][\"param_names\"]:\n-            check_generic_bound(bound)\n-        args = ty[\"inner\"][\"args\"]\n-        if args:\n-            if \"angle_bracketed\" in args:\n-                for arg in args[\"angle_bracketed\"][\"args\"]:\n-                    if \"type\" in arg:\n-                        check_type(arg[\"type\"])\n-                    elif \"const\" in arg:\n-                        check_type(arg[\"const\"][\"type\"])\n-                for binding in args[\"angle_bracketed\"][\"bindings\"]:\n-                    if \"equality\" in binding[\"binding\"]:\n-                        term = binding[\"binding\"][\"equality\"]\n-                        if \"type\" in term: check_type(term[\"type\"])\n-                        elif \"const\" in term: check_type(term[\"const\"])\n-                    elif \"constraint\" in binding[\"binding\"]:\n-                        for bound in binding[\"binding\"][\"constraint\"]:\n-                            check_generic_bound(bound)\n-            elif \"parenthesized\" in args:\n-                for input_ty in args[\"parenthesized\"][\"inputs\"]:\n-                    check_type(input_ty)\n-                if args[\"parenthesized\"][\"output\"]:\n-                    check_type(args[\"parenthesized\"][\"output\"])\n-        if not valid_id(ty[\"inner\"][\"id\"]):\n-            print(\"Type contained an invalid ID:\", ty[\"inner\"][\"id\"])\n-            sys.exit(1)\n+        check_path(ty[\"inner\"])\n     elif ty[\"kind\"] == \"tuple\":\n         for ty in ty[\"inner\"]:\n             check_type(ty)\n@@ -111,7 +111,7 @@ def check_type(ty):\n         check_decl(ty[\"inner\"][\"decl\"])\n     elif ty[\"kind\"] == \"qualified_path\":\n         check_type(ty[\"inner\"][\"self_type\"])\n-        check_type(ty[\"inner\"][\"trait\"])\n+        check_path(ty[\"inner\"][\"trait\"])\n \n \n work_list = set([crate[\"root\"]])\n@@ -174,7 +174,7 @@ def check_type(ty):\n     elif item[\"kind\"] == \"impl\":\n         check_generics(item[\"inner\"][\"generics\"])\n         if item[\"inner\"][\"trait\"]:\n-            check_type(item[\"inner\"][\"trait\"])\n+            check_path(item[\"inner\"][\"trait\"])\n         if item[\"inner\"][\"blanket_impl\"]:\n             check_type(item[\"inner\"][\"blanket_impl\"])\n         check_type(item[\"inner\"][\"for\"])"}, {"sha": "9795504175cd5c4f8b0d6c1084bb5e502121f50d", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 20, "deletions": 26, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/86bdb3ed0912b6a8810815342a5ab570cac56ce5/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86bdb3ed0912b6a8810815342a5ab570cac56ce5/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=86bdb3ed0912b6a8810815342a5ab570cac56ce5", "patch": "@@ -428,10 +428,8 @@ impl FromWithTcx<clean::GenericBound> for GenericBound {\n         use clean::GenericBound::*;\n         match bound {\n             TraitBound(clean::PolyTrait { trait_, generic_params }, modifier) => {\n-                // FIXME: should `trait_` be a clean::Path equivalent in JSON?\n-                let trait_ = clean::Type::Path { path: trait_ }.into_tcx(tcx);\n                 GenericBound::TraitBound {\n-                    trait_,\n+                    trait_: trait_.into_tcx(tcx),\n                     generic_params: generic_params.into_tcx(tcx),\n                     modifier: from_trait_bound_modifier(modifier),\n                 }\n@@ -460,12 +458,7 @@ impl FromWithTcx<clean::Type> for Type {\n         };\n \n         match ty {\n-            clean::Type::Path { path } => Type::ResolvedPath {\n-                name: path.whole_name(),\n-                id: from_item_id(path.def_id().into(), tcx),\n-                args: path.segments.last().map(|args| Box::new(args.clone().args.into_tcx(tcx))),\n-                param_names: Vec::new(),\n-            },\n+            clean::Type::Path { path } => Type::ResolvedPath(path.into_tcx(tcx)),\n             clean::Type::DynTrait(bounds, lt) => Type::DynTrait(DynTrait {\n                 lifetime: lt.map(convert_lifetime),\n                 traits: bounds.into_tcx(tcx),\n@@ -487,16 +480,22 @@ impl FromWithTcx<clean::Type> for Type {\n                 mutable: mutability == ast::Mutability::Mut,\n                 type_: Box::new((*type_).into_tcx(tcx)),\n             },\n-            QPath { assoc, self_type, trait_, .. } => {\n-                // FIXME: should `trait_` be a clean::Path equivalent in JSON?\n-                let trait_ = clean::Type::Path { path: trait_ }.into_tcx(tcx);\n-                Type::QualifiedPath {\n-                    name: assoc.name.to_string(),\n-                    args: Box::new(assoc.args.clone().into_tcx(tcx)),\n-                    self_type: Box::new((*self_type).into_tcx(tcx)),\n-                    trait_: Box::new(trait_),\n-                }\n-            }\n+            QPath { assoc, self_type, trait_, .. } => Type::QualifiedPath {\n+                name: assoc.name.to_string(),\n+                args: Box::new(assoc.args.clone().into_tcx(tcx)),\n+                self_type: Box::new((*self_type).into_tcx(tcx)),\n+                trait_: trait_.into_tcx(tcx),\n+            },\n+        }\n+    }\n+}\n+\n+impl FromWithTcx<clean::Path> for Path {\n+    fn from_tcx(path: clean::Path, tcx: TyCtxt<'_>) -> Path {\n+        Path {\n+            name: path.whole_name(),\n+            id: from_item_id(path.def_id().into(), tcx),\n+            args: path.segments.last().map(|args| Box::new(args.clone().args.into_tcx(tcx))),\n         }\n     }\n }\n@@ -565,19 +564,14 @@ impl FromWithTcx<clean::PolyTrait> for PolyTrait {\n         clean::PolyTrait { trait_, generic_params }: clean::PolyTrait,\n         tcx: TyCtxt<'_>,\n     ) -> Self {\n-        PolyTrait {\n-            trait_: clean::Type::Path { path: trait_ }.into_tcx(tcx),\n-            generic_params: generic_params.into_tcx(tcx),\n-        }\n+        PolyTrait { trait_: trait_.into_tcx(tcx), generic_params: generic_params.into_tcx(tcx) }\n     }\n }\n \n impl FromWithTcx<clean::Impl> for Impl {\n     fn from_tcx(impl_: clean::Impl, tcx: TyCtxt<'_>) -> Self {\n         let provided_trait_methods = impl_.provided_trait_methods(tcx);\n         let clean::Impl { unsafety, generics, trait_, for_, items, polarity, kind } = impl_;\n-        // FIXME: should `trait_` be a clean::Path equivalent in JSON?\n-        let trait_ = trait_.map(|path| clean::Type::Path { path }.into_tcx(tcx));\n         // FIXME: use something like ImplKind in JSON?\n         let (synthetic, blanket_impl) = match kind {\n             clean::ImplKind::Normal | clean::ImplKind::FakeVaradic => (false, None),\n@@ -595,7 +589,7 @@ impl FromWithTcx<clean::Impl> for Impl {\n                 .into_iter()\n                 .map(|x| x.to_string())\n                 .collect(),\n-            trait_,\n+            trait_: trait_.map(|path| path.into_tcx(tcx)),\n             for_: for_.into_tcx(tcx),\n             items: ids(items, tcx),\n             negative: negative_polarity,"}, {"sha": "c9b08fc2006585f7bdbd85fbee4e396176db9167", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/86bdb3ed0912b6a8810815342a5ab570cac56ce5/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86bdb3ed0912b6a8810815342a5ab570cac56ce5/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=86bdb3ed0912b6a8810815342a5ab570cac56ce5", "patch": "@@ -9,7 +9,7 @@ use std::path::PathBuf;\n use serde::{Deserialize, Serialize};\n \n /// rustdoc format-version.\n-pub const FORMAT_VERSION: u32 = 17;\n+pub const FORMAT_VERSION: u32 = 18;\n \n /// A `Crate` is the root of the emitted JSON blob. It contains all type/documentation information\n /// about the language items in the local crate, as well as info about external items to allow\n@@ -133,7 +133,7 @@ pub struct DynTrait {\n /// A trait and potential HRTBs\n pub struct PolyTrait {\n     #[serde(rename = \"trait\")]\n-    pub trait_: Type,\n+    pub trait_: Path,\n     /// Used for Higher-Rank Trait Bounds (HRTBs)\n     /// ```text\n     /// dyn for<'a> Fn() -> &'a i32\"\n@@ -447,7 +447,7 @@ pub enum WherePredicate {\n pub enum GenericBound {\n     TraitBound {\n         #[serde(rename = \"trait\")]\n-        trait_: Type,\n+        trait_: Path,\n         /// Used for Higher-Rank Trait Bounds (HRTBs)\n         /// ```text\n         /// where F: for<'a, 'b> Fn(&'a u8, &'b u8)\n@@ -481,12 +481,7 @@ pub enum Term {\n #[serde(tag = \"kind\", content = \"inner\")]\n pub enum Type {\n     /// Structs, enums, and traits\n-    ResolvedPath {\n-        name: String,\n-        id: Id,\n-        args: Option<Box<GenericArgs>>,\n-        param_names: Vec<GenericBound>,\n-    },\n+    ResolvedPath(Path),\n     DynTrait(DynTrait),\n     /// Parameterized types\n     Generic(String),\n@@ -527,10 +522,24 @@ pub enum Type {\n         args: Box<GenericArgs>,\n         self_type: Box<Type>,\n         #[serde(rename = \"trait\")]\n-        trait_: Box<Type>,\n+        trait_: Path,\n     },\n }\n \n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n+pub struct Path {\n+    pub name: String,\n+    pub id: Id,\n+    /// Generic arguments to the type\n+    /// ```test\n+    /// std::borrow::Cow<'static, str>\n+    ///                 ^^^^^^^^^^^^^^\n+    ///                 |\n+    ///                 this part\n+    /// ```\n+    pub args: Option<Box<GenericArgs>>,\n+}\n+\n #[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct FunctionPointer {\n     pub decl: FnDecl,\n@@ -574,7 +583,7 @@ pub struct Impl {\n     pub generics: Generics,\n     pub provided_trait_methods: Vec<String>,\n     #[serde(rename = \"trait\")]\n-    pub trait_: Option<Type>,\n+    pub trait_: Option<Path>,\n     #[serde(rename = \"for\")]\n     pub for_: Type,\n     pub items: Vec<Id>,"}, {"sha": "98ba8e99d820c79b1a8b20ef8e43402e591f5ae2", "filename": "src/test/rustdoc-json/fns/generic_args.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/86bdb3ed0912b6a8810815342a5ab570cac56ce5/src%2Ftest%2Frustdoc-json%2Ffns%2Fgeneric_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86bdb3ed0912b6a8810815342a5ab570cac56ce5/src%2Ftest%2Frustdoc-json%2Ffns%2Fgeneric_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ffns%2Fgeneric_args.rs?ref=86bdb3ed0912b6a8810815342a5ab570cac56ce5", "patch": "@@ -14,7 +14,7 @@ pub trait GenericFoo<'a> {}\n // @is - \"$.index[*][?(@.name=='generics')].inner.generics.params[0].name\" '\"F\"'\n // @is - \"$.index[*][?(@.name=='generics')].inner.generics.params[0].kind.type.default\" 'null'\n // @count - \"$.index[*][?(@.name=='generics')].inner.generics.params[0].kind.type.bounds[*]\" 1\n-// @is - \"$.index[*][?(@.name=='generics')].inner.generics.params[0].kind.type.bounds[0].trait_bound.trait.inner.id\" '$foo'\n+// @is - \"$.index[*][?(@.name=='generics')].inner.generics.params[0].kind.type.bounds[0].trait_bound.trait.id\" '$foo'\n // @count - \"$.index[*][?(@.name=='generics')].inner.decl.inputs[*]\" 1\n // @is - \"$.index[*][?(@.name=='generics')].inner.decl.inputs[0][0]\" '\"f\"'\n // @is - \"$.index[*][?(@.name=='generics')].inner.decl.inputs[0][1].kind\" '\"generic\"'\n@@ -24,12 +24,12 @@ pub fn generics<F: Foo>(f: F) {}\n // @is - \"$.index[*][?(@.name=='impl_trait')].inner.generics.where_predicates\" \"[]\"\n // @count - \"$.index[*][?(@.name=='impl_trait')].inner.generics.params[*]\" 1\n // @is - \"$.index[*][?(@.name=='impl_trait')].inner.generics.params[0].name\" '\"impl Foo\"'\n-// @is - \"$.index[*][?(@.name=='impl_trait')].inner.generics.params[0].kind.type.bounds[0].trait_bound.trait.inner.id\" $foo\n+// @is - \"$.index[*][?(@.name=='impl_trait')].inner.generics.params[0].kind.type.bounds[0].trait_bound.trait.id\" $foo\n // @count - \"$.index[*][?(@.name=='impl_trait')].inner.decl.inputs[*]\" 1\n // @is - \"$.index[*][?(@.name=='impl_trait')].inner.decl.inputs[0][0]\" '\"f\"'\n // @is - \"$.index[*][?(@.name=='impl_trait')].inner.decl.inputs[0][1].kind\" '\"impl_trait\"'\n // @count - \"$.index[*][?(@.name=='impl_trait')].inner.decl.inputs[0][1].inner[*]\" 1\n-// @is - \"$.index[*][?(@.name=='impl_trait')].inner.decl.inputs[0][1].inner[0].trait_bound.trait.inner.id\" $foo\n+// @is - \"$.index[*][?(@.name=='impl_trait')].inner.decl.inputs[0][1].inner[0].trait_bound.trait.id\" $foo\n pub fn impl_trait(f: impl Foo) {}\n \n // @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.params[*]\" 3\n@@ -43,11 +43,11 @@ pub fn impl_trait(f: impl Foo) {}\n \n // @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[0].bound_predicate.type\" '{\"inner\": \"F\", \"kind\": \"generic\"}'\n // @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[0].bound_predicate.bounds[*]\" 1\n-// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[0].bound_predicate.bounds[0].trait_bound.trait.inner.id\" $foo\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[0].bound_predicate.bounds[0].trait_bound.trait.id\" $foo\n \n // @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.type\" '{\"inner\": \"G\", \"kind\": \"generic\"}'\n // @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.bounds[*]\" 1\n-// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.bounds[0].trait_bound.trait.inner.id\" $generic_foo\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.bounds[0].trait_bound.trait.id\" $generic_foo\n // @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.bounds[0].trait_bound.generic_params[*]\" 1\n // @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.bounds[0].trait_bound.generic_params[0].name\" \\\"\\'a\\\"\n // @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.bounds[0].trait_bound.generic_params[0].kind\" '{ \"lifetime\": { \"outlives\": [] } }'\n@@ -57,7 +57,7 @@ pub fn impl_trait(f: impl Foo) {}\n // @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.type.inner.lifetime\" \\\"\\'b\\\"\n // @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.type.inner.type\" '{\"inner\": \"H\", \"kind\": \"generic\"}'\n // @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.bounds[*]\" 1\n-// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.bounds[0].trait_bound.trait.inner.id\" $foo\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.bounds[0].trait_bound.trait.id\" $foo\n // @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.bounds[0].trait_bound.generic_params\" \"[]\"\n // @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.generic_params[*]\" 1\n // @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.generic_params[0].name\" \\\"\\'b\\\""}, {"sha": "46f250a99b9b665e993b5c27ac6111e3111e56ab", "filename": "src/test/rustdoc-json/fns/generic_returns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86bdb3ed0912b6a8810815342a5ab570cac56ce5/src%2Ftest%2Frustdoc-json%2Ffns%2Fgeneric_returns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86bdb3ed0912b6a8810815342a5ab570cac56ce5/src%2Ftest%2Frustdoc-json%2Ffns%2Fgeneric_returns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ffns%2Fgeneric_returns.rs?ref=86bdb3ed0912b6a8810815342a5ab570cac56ce5", "patch": "@@ -11,7 +11,7 @@ pub trait Foo {}\n // @is - \"$.index[*][?(@.name=='get_foo')].inner.decl.inputs\" []\n // @is - \"$.index[*][?(@.name=='get_foo')].inner.decl.output.kind\" '\"impl_trait\"'\n // @count - \"$.index[*][?(@.name=='get_foo')].inner.decl.output.inner[*]\" 1\n-// @is - \"$.index[*][?(@.name=='get_foo')].inner.decl.output.inner[0].trait_bound.trait.inner.id\" $foo\n+// @is - \"$.index[*][?(@.name=='get_foo')].inner.decl.output.inner[0].trait_bound.trait.id\" $foo\n pub fn get_foo() -> impl Foo {\n     Fooer {}\n }"}, {"sha": "e55e1e9400dc6c4b50df07521866249641dc08fd", "filename": "src/test/rustdoc-json/fns/generics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86bdb3ed0912b6a8810815342a5ab570cac56ce5/src%2Ftest%2Frustdoc-json%2Ffns%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86bdb3ed0912b6a8810815342a5ab570cac56ce5/src%2Ftest%2Frustdoc-json%2Ffns%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ffns%2Fgenerics.rs?ref=86bdb3ed0912b6a8810815342a5ab570cac56ce5", "patch": "@@ -10,17 +10,17 @@ pub trait Wham {}\n // @count - \"$.index[*][?(@.name=='one_generic_param_fn')].inner.generics.params[*]\" 1\n // @is    - \"$.index[*][?(@.name=='one_generic_param_fn')].inner.generics.params[0].name\" '\"T\"'\n // @has   - \"$.index[*][?(@.name=='one_generic_param_fn')].inner.generics.params[0].kind.type.synthetic\" false\n-// @has   - \"$.index[*][?(@.name=='one_generic_param_fn')].inner.generics.params[0].kind.type.bounds[0].trait_bound.trait.inner.id\" $wham_id\n+// @has   - \"$.index[*][?(@.name=='one_generic_param_fn')].inner.generics.params[0].kind.type.bounds[0].trait_bound.trait.id\" $wham_id\n // @is    - \"$.index[*][?(@.name=='one_generic_param_fn')].inner.decl.inputs\" '[[\"w\", {\"inner\": \"T\", \"kind\": \"generic\"}]]'\n pub fn one_generic_param_fn<T: Wham>(w: T) {}\n \n // @is    - \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.generics.where_predicates\" []\n // @count - \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.generics.params[*]\" 1\n // @is    - \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.generics.params[0].name\" '\"impl Wham\"'\n // @has   - \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.generics.params[0].kind.type.synthetic\" true\n-// @has   - \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.generics.params[0].kind.type.bounds[0].trait_bound.trait.inner.id\" $wham_id\n+// @has   - \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.generics.params[0].kind.type.bounds[0].trait_bound.trait.id\" $wham_id\n // @count - \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.decl.inputs[*]\" 1\n // @is    - \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.decl.inputs[0][0]\" '\"w\"'\n // @is    - \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.decl.inputs[0][1].kind\" '\"impl_trait\"'\n-// @is    - \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.decl.inputs[0][1].inner[0].trait_bound.trait.inner.id\" $wham_id\n+// @is    - \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.decl.inputs[0][1].inner[0].trait_bound.trait.id\" $wham_id\n pub fn one_synthetic_generic_param_fn(w: impl Wham) {}"}, {"sha": "ce2f3912ba650168f9f4630c8acde94aaf32ccd6", "filename": "src/test/rustdoc-json/traits/supertrait.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/86bdb3ed0912b6a8810815342a5ab570cac56ce5/src%2Ftest%2Frustdoc-json%2Ftraits%2Fsupertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86bdb3ed0912b6a8810815342a5ab570cac56ce5/src%2Ftest%2Frustdoc-json%2Ftraits%2Fsupertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ftraits%2Fsupertrait.rs?ref=86bdb3ed0912b6a8810815342a5ab570cac56ce5", "patch": "@@ -9,18 +9,18 @@ pub trait Loud {}\n \n // @set very_loud_id = - \"$.index[*][?(@.name=='VeryLoud')].id\"\n // @count - \"$.index[*][?(@.name=='VeryLoud')].inner.bounds[*]\" 1\n-// @is -    \"$.index[*][?(@.name=='VeryLoud')].inner.bounds[0].trait_bound.trait.inner.id\" $loud_id\n+// @is -    \"$.index[*][?(@.name=='VeryLoud')].inner.bounds[0].trait_bound.trait.id\" $loud_id\n pub trait VeryLoud: Loud {}\n \n // @set sounds_good_id = - \"$.index[*][?(@.name=='SoundsGood')].id\"\n pub trait SoundsGood {}\n \n // @count - \"$.index[*][?(@.name=='MetalBand')].inner.bounds[*]\" 2\n-// @is -    \"$.index[*][?(@.name=='MetalBand')].inner.bounds[0].trait_bound.trait.inner.id\" $very_loud_id\n-// @is -    \"$.index[*][?(@.name=='MetalBand')].inner.bounds[1].trait_bound.trait.inner.id\" $sounds_good_id\n+// @is -    \"$.index[*][?(@.name=='MetalBand')].inner.bounds[0].trait_bound.trait.id\" $very_loud_id\n+// @is -    \"$.index[*][?(@.name=='MetalBand')].inner.bounds[1].trait_bound.trait.id\" $sounds_good_id\n pub trait MetalBand: VeryLoud + SoundsGood {}\n \n // @count - \"$.index[*][?(@.name=='DnabLatem')].inner.bounds[*]\" 2\n-// @is -    \"$.index[*][?(@.name=='DnabLatem')].inner.bounds[1].trait_bound.trait.inner.id\" $very_loud_id\n-// @is -    \"$.index[*][?(@.name=='DnabLatem')].inner.bounds[0].trait_bound.trait.inner.id\" $sounds_good_id\n+// @is -    \"$.index[*][?(@.name=='DnabLatem')].inner.bounds[1].trait_bound.trait.id\" $very_loud_id\n+// @is -    \"$.index[*][?(@.name=='DnabLatem')].inner.bounds[0].trait_bound.trait.id\" $sounds_good_id\n pub trait DnabLatem: SoundsGood + VeryLoud {}"}, {"sha": "690dccc8287042e30095d29795928afae00453b5", "filename": "src/test/rustdoc-json/type/dyn.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/86bdb3ed0912b6a8810815342a5ab570cac56ce5/src%2Ftest%2Frustdoc-json%2Ftype%2Fdyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86bdb3ed0912b6a8810815342a5ab570cac56ce5/src%2Ftest%2Frustdoc-json%2Ftype%2Fdyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ftype%2Fdyn.rs?ref=86bdb3ed0912b6a8810815342a5ab570cac56ce5", "patch": "@@ -21,10 +21,10 @@ use std::fmt::Debug;\n // @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[0].generic_params\" []\n // @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[1].generic_params\" []\n // @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[2].generic_params\" []\n-// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[0].trait.inner.name\" '\"Fn\"'\n-// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[1].trait.inner.name\" '\"Send\"'\n-// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[2].trait.inner.name\" '\"Sync\"'\n-// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[0].trait.inner.args\" '{\"parenthesized\": {\"inputs\": [],\"output\": {\"inner\": \"i32\",\"kind\": \"primitive\"}}}'\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[0].trait.name\" '\"Fn\"'\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[1].trait.name\" '\"Send\"'\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[2].trait.name\" '\"Sync\"'\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[0].trait.args\" '{\"parenthesized\": {\"inputs\": [],\"output\": {\"inner\": \"i32\",\"kind\": \"primitive\"}}}'\n pub type SyncIntGen = Box<dyn Fn() -> i32 + Send + Sync + 'static>;\n \n // @is - \"$.index[*][?(@.name=='RefFn')].kind\" \\\"typedef\\\"\n@@ -36,14 +36,13 @@ pub type SyncIntGen = Box<dyn Fn() -> i32 + Send + Sync + 'static>;\n // @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.lifetime\" null\n // @count - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[*]\" 1\n // @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].generic_params\" '[{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''b\"}]'\n-// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.kind\" '\"resolved_path\"'\n-// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.inner.name\" '\"Fn\"'\n-// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.inner.args.parenthesized.inputs[0].kind\" '\"borrowed_ref\"'\n-// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.inner.args.parenthesized.inputs[0].inner.lifetime\" \"\\\"'b\\\"\"\n-// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.inner.args.parenthesized.output.kind\" '\"borrowed_ref\"'\n-// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.inner.args.parenthesized.output.inner.lifetime\" \"\\\"'b\\\"\"\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.name\" '\"Fn\"'\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.args.parenthesized.inputs[0].kind\" '\"borrowed_ref\"'\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.args.parenthesized.inputs[0].inner.lifetime\" \"\\\"'b\\\"\"\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.args.parenthesized.output.kind\" '\"borrowed_ref\"'\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.args.parenthesized.output.inner.lifetime\" \"\\\"'b\\\"\"\n pub type RefFn<'a> = &'a dyn for<'b> Fn(&'b i32) -> &'b i32;\n \n-// @is    - \"$.index[*][?(@.name=='WeirdOrder')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[0].trait.inner.name\" '\"Send\"'\n-// @is    - \"$.index[*][?(@.name=='WeirdOrder')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[1].trait.inner.name\" '\"Debug\"'\n+// @is    - \"$.index[*][?(@.name=='WeirdOrder')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[0].trait.name\" '\"Send\"'\n+// @is    - \"$.index[*][?(@.name=='WeirdOrder')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[1].trait.name\" '\"Debug\"'\n pub type WeirdOrder = Box<dyn Send + Debug>;"}, {"sha": "5b0c4caee21869550698fa747f3635939d2cd9f7", "filename": "src/test/rustdoc-json/type/hrtb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86bdb3ed0912b6a8810815342a5ab570cac56ce5/src%2Ftest%2Frustdoc-json%2Ftype%2Fhrtb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86bdb3ed0912b6a8810815342a5ab570cac56ce5/src%2Ftest%2Frustdoc-json%2Ftype%2Fhrtb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ftype%2Fhrtb.rs?ref=86bdb3ed0912b6a8810815342a5ab570cac56ce5", "patch": "@@ -19,7 +19,7 @@ where\n // @is - \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].inner.type.inner.lifetime\" null\n // @count - \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].inner.type.inner.traits[*]\" 1\n // @is - \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].inner.type.inner.traits[0].generic_params\" '[{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''a\"},{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''b\"}]'\n-// @is - \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].inner.type.inner.traits[0].trait.inner.name\" '\"Fn\"'\n+// @is - \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].inner.type.inner.traits[0].trait.name\" '\"Fn\"'\n pub fn dynfn(f: &dyn for<'a, 'b> Fn(&'a i32, &'b i32)) {\n     let zero = 0;\n     f(&zero, &zero);"}]}