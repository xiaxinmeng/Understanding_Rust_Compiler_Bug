{"sha": "21dc6c267842ede373c846fef398d6d7dfa9dfc8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxZGM2YzI2Nzg0MmVkZTM3M2M4NDZmZWYzOThkNmQ3ZGZhOWRmYzg=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-30T09:49:01Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-30T09:49:01Z"}, "message": "Rollup merge of #33937 - srinivasreddy:rustfmt_librand, r=GuillaumeGomez\n\nrun rustfmt on librand folder", "tree": {"sha": "3376a26b512147b6edf1977991f9a4b8e1faf4d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3376a26b512147b6edf1977991f9a4b8e1faf4d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21dc6c267842ede373c846fef398d6d7dfa9dfc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21dc6c267842ede373c846fef398d6d7dfa9dfc8", "html_url": "https://github.com/rust-lang/rust/commit/21dc6c267842ede373c846fef398d6d7dfa9dfc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21dc6c267842ede373c846fef398d6d7dfa9dfc8/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0072e6b9e39a4da43fd19ccbe64851e072f9f8cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0072e6b9e39a4da43fd19ccbe64851e072f9f8cd", "html_url": "https://github.com/rust-lang/rust/commit/0072e6b9e39a4da43fd19ccbe64851e072f9f8cd"}, {"sha": "72baa41b88fb0baed65c35e7cf2217f53ab4b7b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/72baa41b88fb0baed65c35e7cf2217f53ab4b7b7", "html_url": "https://github.com/rust-lang/rust/commit/72baa41b88fb0baed65c35e7cf2217f53ab4b7b7"}], "stats": {"total": 81, "additions": 44, "deletions": 37}, "files": [{"sha": "5fba44a1c38f13e1f35de30498f5064a1b8fc9b5", "filename": "src/librand/chacha.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21dc6c267842ede373c846fef398d6d7dfa9dfc8/src%2Flibrand%2Fchacha.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dc6c267842ede373c846fef398d6d7dfa9dfc8/src%2Flibrand%2Fchacha.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fchacha.rs?ref=21dc6c267842ede373c846fef398d6d7dfa9dfc8", "patch": "@@ -10,7 +10,7 @@\n \n //! The ChaCha random number generator.\n \n-use {Rng, SeedableRng, Rand};\n+use {Rand, Rng, SeedableRng};\n \n const KEY_WORDS: usize = 8; // 8 words for the 256-bit key\n const STATE_WORDS: usize = 16;\n@@ -216,7 +216,8 @@ mod tests {\n         let s = ::test::rng().gen_iter::<u32>().take(8).collect::<Vec<u32>>();\n         let mut ra: ChaChaRng = SeedableRng::from_seed(&*s);\n         let mut rb: ChaChaRng = SeedableRng::from_seed(&*s);\n-        assert!(ra.gen_ascii_chars().take(100)\n+        assert!(ra.gen_ascii_chars()\n+                  .take(100)\n                   .eq(rb.gen_ascii_chars().take(100)));\n     }\n \n@@ -225,7 +226,8 @@ mod tests {\n         let seed: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7];\n         let mut ra: ChaChaRng = SeedableRng::from_seed(seed);\n         let mut rb: ChaChaRng = SeedableRng::from_seed(seed);\n-        assert!(ra.gen_ascii_chars().take(100)\n+        assert!(ra.gen_ascii_chars()\n+                  .take(100)\n                   .eq(rb.gen_ascii_chars().take(100)));\n     }\n "}, {"sha": "5a8558efc024437b82300161ec3133c147795a8a", "filename": "src/librand/distributions/exponential.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21dc6c267842ede373c846fef398d6d7dfa9dfc8/src%2Flibrand%2Fdistributions%2Fexponential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dc6c267842ede373c846fef398d6d7dfa9dfc8/src%2Flibrand%2Fdistributions%2Fexponential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fexponential.rs?ref=21dc6c267842ede373c846fef398d6d7dfa9dfc8", "patch": "@@ -13,8 +13,8 @@\n #[cfg(not(test))] // only necessary for no_std\n use FloatMath;\n \n-use {Rng, Rand};\n-use distributions::{ziggurat, ziggurat_tables, Sample, IndependentSample};\n+use {Rand, Rng};\n+use distributions::{IndependentSample, Sample, ziggurat, ziggurat_tables};\n \n /// A wrapper around an `f64` to generate Exp(1) random numbers.\n ///\n@@ -88,7 +88,7 @@ impl IndependentSample<f64> for Exp {\n \n #[cfg(test)]\n mod tests {\n-    use distributions::{Sample, IndependentSample};\n+    use distributions::{IndependentSample, Sample};\n     use super::Exp;\n \n     #[test]"}, {"sha": "9ca13e85b533304f2f2c5c7bc5657da138556343", "filename": "src/librand/distributions/gamma.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21dc6c267842ede373c846fef398d6d7dfa9dfc8/src%2Flibrand%2Fdistributions%2Fgamma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dc6c267842ede373c846fef398d6d7dfa9dfc8/src%2Flibrand%2Fdistributions%2Fgamma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fgamma.rs?ref=21dc6c267842ede373c846fef398d6d7dfa9dfc8", "patch": "@@ -16,9 +16,9 @@ use self::ChiSquaredRepr::*;\n #[cfg(not(test))] // only necessary for no_std\n use FloatMath;\n \n-use {Rng, Open01};\n+use {Open01, Rng};\n use super::normal::StandardNormal;\n-use super::{IndependentSample, Sample, Exp};\n+use super::{Exp, IndependentSample, Sample};\n \n /// The Gamma distribution `Gamma(shape, scale)` distribution.\n ///\n@@ -291,8 +291,8 @@ impl IndependentSample<f64> for StudentT {\n \n #[cfg(test)]\n mod tests {\n-    use distributions::{Sample, IndependentSample};\n-    use super::{ChiSquared, StudentT, FisherF};\n+    use distributions::{IndependentSample, Sample};\n+    use super::{ChiSquared, FisherF, StudentT};\n \n     #[test]\n     fn test_chi_squared_one() {"}, {"sha": "36c9f783ff5e03aef4707f3af5f4eb661e14b09f", "filename": "src/librand/distributions/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/21dc6c267842ede373c846fef398d6d7dfa9dfc8/src%2Flibrand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dc6c267842ede373c846fef398d6d7dfa9dfc8/src%2Flibrand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fmod.rs?ref=21dc6c267842ede373c846fef398d6d7dfa9dfc8", "patch": "@@ -22,11 +22,11 @@ use core::num::Float;\n \n use core::marker::PhantomData;\n \n-use {Rng, Rand};\n+use {Rand, Rng};\n \n pub use self::range::Range;\n-pub use self::gamma::{Gamma, ChiSquared, FisherF, StudentT};\n-pub use self::normal::{Normal, LogNormal};\n+pub use self::gamma::{ChiSquared, FisherF, Gamma, StudentT};\n+pub use self::normal::{LogNormal, Normal};\n pub use self::exponential::Exp;\n \n pub mod range;\n@@ -266,8 +266,8 @@ fn ziggurat<R: Rng, P, Z>(rng: &mut R,\n \n #[cfg(test)]\n mod tests {\n-    use {Rng, Rand};\n-    use super::{RandSample, WeightedChoice, Weighted, Sample, IndependentSample};\n+    use {Rand, Rng};\n+    use super::{IndependentSample, RandSample, Sample, Weighted, WeightedChoice};\n \n     #[derive(PartialEq, Debug)]\n     struct ConstRand(usize);"}, {"sha": "811d5b14c71129c40bd51f580e53c02d463fcfd0", "filename": "src/librand/distributions/normal.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21dc6c267842ede373c846fef398d6d7dfa9dfc8/src%2Flibrand%2Fdistributions%2Fnormal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dc6c267842ede373c846fef398d6d7dfa9dfc8/src%2Flibrand%2Fdistributions%2Fnormal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fnormal.rs?ref=21dc6c267842ede373c846fef398d6d7dfa9dfc8", "patch": "@@ -13,8 +13,8 @@\n #[cfg(not(test))] // only necessary for no_std\n use FloatMath;\n \n-use {Rng, Rand, Open01};\n-use distributions::{ziggurat, ziggurat_tables, Sample, IndependentSample};\n+use {Open01, Rand, Rng};\n+use distributions::{IndependentSample, Sample, ziggurat, ziggurat_tables};\n \n /// A wrapper around an `f64` to generate N(0, 1) random numbers\n /// (a.k.a.  a standard normal, or Gaussian).\n@@ -145,8 +145,8 @@ impl IndependentSample<f64> for LogNormal {\n \n #[cfg(test)]\n mod tests {\n-    use distributions::{Sample, IndependentSample};\n-    use super::{Normal, LogNormal};\n+    use distributions::{IndependentSample, Sample};\n+    use super::{LogNormal, Normal};\n \n     #[test]\n     fn test_normal() {"}, {"sha": "ba8554a979b899309a3ebae5f4a1a869a1ddcf64", "filename": "src/librand/distributions/range.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21dc6c267842ede373c846fef398d6d7dfa9dfc8/src%2Flibrand%2Fdistributions%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dc6c267842ede373c846fef398d6d7dfa9dfc8/src%2Flibrand%2Fdistributions%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Frange.rs?ref=21dc6c267842ede373c846fef398d6d7dfa9dfc8", "patch": "@@ -14,7 +14,7 @@\n \n use core::marker::Sized;\n use Rng;\n-use distributions::{Sample, IndependentSample};\n+use distributions::{IndependentSample, Sample};\n \n /// Sample values uniformly between two bounds.\n ///\n@@ -148,7 +148,7 @@ float_impl! { f64 }\n \n #[cfg(test)]\n mod tests {\n-    use distributions::{Sample, IndependentSample};\n+    use distributions::{IndependentSample, Sample};\n     use super::Range;\n \n     #[should_panic]"}, {"sha": "e8cc7b5cc2dacc76448b4bda3a492c9fbe7e6b41", "filename": "src/librand/isaac.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/21dc6c267842ede373c846fef398d6d7dfa9dfc8/src%2Flibrand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dc6c267842ede373c846fef398d6d7dfa9dfc8/src%2Flibrand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fisaac.rs?ref=21dc6c267842ede373c846fef398d6d7dfa9dfc8", "patch": "@@ -16,7 +16,7 @@ use core::slice;\n use core::iter::repeat;\n use core::num::Wrapping as w;\n \n-use {Rng, SeedableRng, Rand};\n+use {Rand, Rng, SeedableRng};\n \n type w32 = w<u32>;\n type w64 = w<u64>;\n@@ -591,22 +591,24 @@ mod tests {\n     use std::prelude::v1::*;\n \n     use {Rng, SeedableRng};\n-    use super::{IsaacRng, Isaac64Rng};\n+    use super::{Isaac64Rng, IsaacRng};\n \n     #[test]\n     fn test_rng_32_rand_seeded() {\n         let s = ::test::rng().gen_iter::<u32>().take(256).collect::<Vec<u32>>();\n         let mut ra: IsaacRng = SeedableRng::from_seed(&s[..]);\n         let mut rb: IsaacRng = SeedableRng::from_seed(&s[..]);\n-        assert!(ra.gen_ascii_chars().take(100)\n+        assert!(ra.gen_ascii_chars()\n+                  .take(100)\n                   .eq(rb.gen_ascii_chars().take(100)));\n     }\n     #[test]\n     fn test_rng_64_rand_seeded() {\n         let s = ::test::rng().gen_iter::<u64>().take(256).collect::<Vec<u64>>();\n         let mut ra: Isaac64Rng = SeedableRng::from_seed(&s[..]);\n         let mut rb: Isaac64Rng = SeedableRng::from_seed(&s[..]);\n-        assert!(ra.gen_ascii_chars().take(100)\n+        assert!(ra.gen_ascii_chars()\n+                  .take(100)\n                   .eq(rb.gen_ascii_chars().take(100)));\n     }\n \n@@ -615,15 +617,17 @@ mod tests {\n         let seed: &[_] = &[1, 23, 456, 7890, 12345];\n         let mut ra: IsaacRng = SeedableRng::from_seed(seed);\n         let mut rb: IsaacRng = SeedableRng::from_seed(seed);\n-        assert!(ra.gen_ascii_chars().take(100)\n+        assert!(ra.gen_ascii_chars()\n+                  .take(100)\n                   .eq(rb.gen_ascii_chars().take(100)));\n     }\n     #[test]\n     fn test_rng_64_seeded() {\n         let seed: &[_] = &[1, 23, 456, 7890, 12345];\n         let mut ra: Isaac64Rng = SeedableRng::from_seed(seed);\n         let mut rb: Isaac64Rng = SeedableRng::from_seed(seed);\n-        assert!(ra.gen_ascii_chars().take(100)\n+        assert!(ra.gen_ascii_chars()\n+                  .take(100)\n                   .eq(rb.gen_ascii_chars().take(100)));\n     }\n "}, {"sha": "c31a0ed53207d0385a5c831cb795206a13e76e15", "filename": "src/librand/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/21dc6c267842ede373c846fef398d6d7dfa9dfc8/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dc6c267842ede373c846fef398d6d7dfa9dfc8/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=21dc6c267842ede373c846fef398d6d7dfa9dfc8", "patch": "@@ -47,10 +47,10 @@ use core::f64;\n use core::intrinsics;\n use core::marker::PhantomData;\n \n-pub use isaac::{IsaacRng, Isaac64Rng};\n+pub use isaac::{Isaac64Rng, IsaacRng};\n pub use chacha::ChaChaRng;\n \n-use distributions::{Range, IndependentSample};\n+use distributions::{IndependentSample, Range};\n use distributions::range::SampleRange;\n \n #[cfg(test)]\n@@ -67,7 +67,7 @@ mod rand_impls;\n // depend on libstd.  This will go away when librand is integrated\n // into libstd.\n #[doc(hidden)]\n-trait FloatMath : Sized {\n+trait FloatMath: Sized {\n     fn exp(self) -> Self;\n     fn ln(self) -> Self;\n     fn sqrt(self) -> Self;\n@@ -102,14 +102,14 @@ impl FloatMath for f64 {\n \n /// A type that can be randomly generated using an `Rng`.\n #[doc(hidden)]\n-pub trait Rand : Sized {\n+pub trait Rand: Sized {\n     /// Generates a random instance of this type using the specified source of\n     /// randomness.\n     fn rand<R: Rng>(rng: &mut R) -> Self;\n }\n \n /// A random number generator.\n-pub trait Rng : Sized {\n+pub trait Rng: Sized {\n     /// Return the next random u32.\n     ///\n     /// This rarely needs to be called directly, prefer `r.gen()` to"}, {"sha": "c7d560eb1f8e253ebd0bcc1b7c8431954f93e447", "filename": "src/librand/reseeding.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/21dc6c267842ede373c846fef398d6d7dfa9dfc8/src%2Flibrand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dc6c267842ede373c846fef398d6d7dfa9dfc8/src%2Flibrand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Freseeding.rs?ref=21dc6c267842ede373c846fef398d6d7dfa9dfc8", "patch": "@@ -83,8 +83,8 @@ impl<S, R: SeedableRng<S>, Rsdr: Reseeder<R> + Default>\n         self.bytes_generated = 0;\n     }\n \n-    /// Create a new `ReseedingRng` from the given reseeder and\n-    /// seed. This uses a default value for `generation_threshold`.\n+/// Create a new `ReseedingRng` from the given reseeder and\n+/// seed. This uses a default value for `generation_threshold`.\n     fn from_seed((rsdr, seed): (Rsdr, S)) -> ReseedingRng<R, Rsdr> {\n         ReseedingRng {\n             rng: SeedableRng::from_seed(seed),\n@@ -122,8 +122,8 @@ impl Default for ReseedWithDefault {\n mod tests {\n     use std::prelude::v1::*;\n \n-    use super::{ReseedingRng, ReseedWithDefault};\n-    use {SeedableRng, Rng};\n+    use super::{ReseedWithDefault, ReseedingRng};\n+    use {Rng, SeedableRng};\n \n     struct Counter {\n         i: u32,\n@@ -166,7 +166,8 @@ mod tests {\n     fn test_rng_seeded() {\n         let mut ra: MyRng = SeedableRng::from_seed((ReseedWithDefault, 2));\n         let mut rb: MyRng = SeedableRng::from_seed((ReseedWithDefault, 2));\n-        assert!(ra.gen_ascii_chars().take(100)\n+        assert!(ra.gen_ascii_chars()\n+                  .take(100)\n                   .eq(rb.gen_ascii_chars().take(100)));\n     }\n "}]}