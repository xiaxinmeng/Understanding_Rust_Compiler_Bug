{"sha": "9372c4f6acddce4ec3077a2f8e170549f35b6282", "node_id": "C_kwDOAAsO6NoAKDkzNzJjNGY2YWNkZGNlNGVjMzA3N2EyZjhlMTcwNTQ5ZjM1YjYyODI", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2022-08-25T06:42:07Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2022-08-25T06:42:07Z"}, "message": "error::Error: remove some comments\n\nSigned-off-by: Nick Cameron <nrc@ncameron.org>", "tree": {"sha": "d6b187f9b0c60e08b71ee9e198b5a42041f6b6cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6b187f9b0c60e08b71ee9e198b5a42041f6b6cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9372c4f6acddce4ec3077a2f8e170549f35b6282", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9372c4f6acddce4ec3077a2f8e170549f35b6282", "html_url": "https://github.com/rust-lang/rust/commit/9372c4f6acddce4ec3077a2f8e170549f35b6282", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9372c4f6acddce4ec3077a2f8e170549f35b6282/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b556a5be5a0425b453495e2eb636aca4faa37720", "url": "https://api.github.com/repos/rust-lang/rust/commits/b556a5be5a0425b453495e2eb636aca4faa37720", "html_url": "https://github.com/rust-lang/rust/commit/b556a5be5a0425b453495e2eb636aca4faa37720"}], "stats": {"total": 30, "additions": 0, "deletions": 30}, "files": [{"sha": "4a8efe15e596ba8ffd0a32b8d3b29c4ea8f010ce", "filename": "library/core/src/error.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9372c4f6acddce4ec3077a2f8e170549f35b6282/library%2Fcore%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9372c4f6acddce4ec3077a2f8e170549f35b6282/library%2Fcore%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ferror.rs?ref=9372c4f6acddce4ec3077a2f8e170549f35b6282", "patch": "@@ -1,17 +1,6 @@\n #![doc = include_str!(\"error.md\")]\n #![unstable(feature = \"error_in_core\", issue = \"none\")]\n \n-// A note about crates and the facade:\n-//\n-// Originally, the `Error` trait was defined in libcore, and the impls\n-// were scattered about. However, coherence objected to this\n-// arrangement, because to create the blanket impls for `Box` required\n-// knowing that `&str: !Error`, and we have no means to deal with that\n-// sort of conflict just now. Therefore, for the time being, we have\n-// moved the `Error` trait into libstd. As we evolve a sol'n to the\n-// coherence challenge (e.g., specialization, neg impls, etc) we can\n-// reconsider what crate these items belong in.\n-\n #[cfg(test)]\n mod tests;\n \n@@ -417,10 +406,6 @@ impl dyn Error {\n         // because that means the method can't be called on trait objects (we'd also need the\n         // 'static bound, but that isn't allowed because methods with bounds on Self other than\n         // Sized are not object-safe). Requiring an Unsize bound is not backwards compatible.\n-        //\n-        // Two possible solutions are to start the iterator at self.source() instead of self (see\n-        // discussion on the tracking issue), or to wait for dyn* to exist (which would then permit\n-        // the coercion).\n \n         Source { current: Some(self) }\n     }"}, {"sha": "e45059595362f00c7fc348a2e87b50f691ee3d76", "filename": "library/std/src/error.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9372c4f6acddce4ec3077a2f8e170549f35b6282/library%2Fstd%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9372c4f6acddce4ec3077a2f8e170549f35b6282/library%2Fstd%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ferror.rs?ref=9372c4f6acddce4ec3077a2f8e170549f35b6282", "patch": "@@ -1,17 +1,6 @@\n #![doc = include_str!(\"../../core/src/error.md\")]\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-// A note about crates and the facade:\n-//\n-// Originally, the `Error` trait was defined in libcore, and the impls\n-// were scattered about. However, coherence objected to this\n-// arrangement, because to create the blanket impls for `Box` required\n-// knowing that `&str: !Error`, and we have no means to deal with that\n-// sort of conflict just now. Therefore, for the time being, we have\n-// moved the `Error` trait into libstd. As we evolve a sol'n to the\n-// coherence challenge (e.g., specialization, neg impls, etc) we can\n-// reconsider what crate these items belong in.\n-\n #[cfg(test)]\n mod tests;\n \n@@ -996,10 +985,6 @@ impl dyn Error {\n         // because that means the method can't be called on trait objects (we'd also need the\n         // 'static bound, but that isn't allowed because methods with bounds on Self other than\n         // Sized are not object-safe). Requiring an Unsize bound is not backwards compatible.\n-        //\n-        // Two possible solutions are to start the iterator at self.source() instead of self (see\n-        // discussion on the tracking issue), or to wait for dyn* to exist (which would then permit\n-        // the coercion).\n \n         Sources { current: Some(self) }\n     }"}]}