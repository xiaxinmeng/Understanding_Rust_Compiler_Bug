{"sha": "5c5a5182c94d07409fac8cb40b2cdab488c140ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjNWE1MTgyYzk0ZDA3NDA5ZmFjOGNiNDBiMmNkYWI0ODhjMTQwZmY=", "commit": {"author": {"name": "Stjepan Glavina", "email": "stjepang@gmail.com", "date": "2017-04-07T15:28:55Z"}, "committer": {"name": "Stjepan Glavina", "email": "stjepang@gmail.com", "date": "2017-04-07T15:36:50Z"}, "message": "Optimize AtomicBool::fetch_nand", "tree": {"sha": "26c8b3344ab5d7e448db21009d33c6e5ade7ff10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26c8b3344ab5d7e448db21009d33c6e5ade7ff10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c5a5182c94d07409fac8cb40b2cdab488c140ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c5a5182c94d07409fac8cb40b2cdab488c140ff", "html_url": "https://github.com/rust-lang/rust/commit/5c5a5182c94d07409fac8cb40b2cdab488c140ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c5a5182c94d07409fac8cb40b2cdab488c140ff/comments", "author": null, "committer": null, "parents": [{"sha": "4c59c92bc4d4d6e5b2b66c4cc08dd1a058283a0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c59c92bc4d4d6e5b2b66c4cc08dd1a058283a0d", "html_url": "https://github.com/rust-lang/rust/commit/4c59c92bc4d4d6e5b2b66c4cc08dd1a058283a0d"}], "stats": {"total": 37, "additions": 27, "deletions": 10}, "files": [{"sha": "dd0069502dee757d8fe56a404066ca0423f9317f", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5c5a5182c94d07409fac8cb40b2cdab488c140ff/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5a5182c94d07409fac8cb40b2cdab488c140ff/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=5c5a5182c94d07409fac8cb40b2cdab488c140ff", "patch": "@@ -539,17 +539,21 @@ impl AtomicBool {\n         // We can't use atomic_nand here because it can result in a bool with\n         // an invalid value. This happens because the atomic operation is done\n         // with an 8-bit integer internally, which would set the upper 7 bits.\n-        // So we just use a compare-exchange loop instead, which is what the\n-        // intrinsic actually expands to anyways on many platforms.\n-        let mut old = self.load(Relaxed);\n-        loop {\n-            let new = !(old && val);\n-            match self.compare_exchange_weak(old, new, order, Relaxed) {\n-                Ok(_) => break,\n-                Err(x) => old = x,\n+        // So we just use fetch_xor or compare_exchange instead.\n+        if val {\n+            // !(x & true) == !x\n+            // We must invert the bool.\n+            self.fetch_xor(true, order)\n+        } else {\n+            // !(x & false) == true\n+            // We must set the bool to true. Instead of delegating to swap or fetch_or, use\n+            // compare_exchange instead in order to avoid unnecessary writes to memory, which\n+            // might minimize cache-coherence traffic.\n+            match self.compare_exchange(false, true, order, Ordering::Relaxed) {\n+                Ok(_) => false,\n+                Err(_) => true,\n             }\n         }\n-        old\n     }\n \n     /// Logical \"or\" with a boolean value."}, {"sha": "9babe24a985634e14975237f000d9edc400fba7e", "filename": "src/libcore/tests/atomic.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5c5a5182c94d07409fac8cb40b2cdab488c140ff/src%2Flibcore%2Ftests%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5a5182c94d07409fac8cb40b2cdab488c140ff/src%2Flibcore%2Ftests%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fatomic.rs?ref=5c5a5182c94d07409fac8cb40b2cdab488c140ff", "patch": "@@ -24,10 +24,23 @@ fn bool_() {\n #[test]\n fn bool_and() {\n     let a = AtomicBool::new(true);\n-    assert_eq!(a.fetch_and(false, SeqCst),true);\n+    assert_eq!(a.fetch_and(false, SeqCst), true);\n     assert_eq!(a.load(SeqCst),false);\n }\n \n+#[test]\n+fn bool_nand() {\n+    let a = AtomicBool::new(false);\n+    assert_eq!(a.fetch_nand(false, SeqCst), false);\n+    assert_eq!(a.load(SeqCst), true);\n+    assert_eq!(a.fetch_nand(false, SeqCst), true);\n+    assert_eq!(a.load(SeqCst), true);\n+    assert_eq!(a.fetch_nand(true, SeqCst), true);\n+    assert_eq!(a.load(SeqCst), false);\n+    assert_eq!(a.fetch_nand(true, SeqCst), false);\n+    assert_eq!(a.load(SeqCst), true);\n+}\n+\n #[test]\n fn uint_and() {\n     let x = AtomicUsize::new(0xf731);"}]}