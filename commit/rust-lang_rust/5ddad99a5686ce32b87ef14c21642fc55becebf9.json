{"sha": "5ddad99a5686ce32b87ef14c21642fc55becebf9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkZGFkOTlhNTY4NmNlMzJiODdlZjE0YzIxNjQyZmM1NWJlY2ViZjk=", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2020-12-15T20:03:25Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2021-01-22T16:07:27Z"}, "message": "add and update tests", "tree": {"sha": "2c0c578b7fcb989c9d33557be621fcfbcb920712", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c0c578b7fcb989c9d33557be621fcfbcb920712"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ddad99a5686ce32b87ef14c21642fc55becebf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ddad99a5686ce32b87ef14c21642fc55becebf9", "html_url": "https://github.com/rust-lang/rust/commit/5ddad99a5686ce32b87ef14c21642fc55becebf9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ddad99a5686ce32b87ef14c21642fc55becebf9/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "728d257839ad2397e34c71f8ceda151fa579242d", "url": "https://api.github.com/repos/rust-lang/rust/commits/728d257839ad2397e34c71f8ceda151fa579242d", "html_url": "https://github.com/rust-lang/rust/commit/728d257839ad2397e34c71f8ceda151fa579242d"}], "stats": {"total": 179, "additions": 141, "deletions": 38}, "files": [{"sha": "8abc4ccc9a5fa590e7fa88bff8e21c49608afbcc", "filename": "src/test/ui/generic-associated-types/parse/trait-path-expected-token.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ddad99a5686ce32b87ef14c21642fc55becebf9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-expected-token.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ddad99a5686ce32b87ef14c21642fc55becebf9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-expected-token.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-expected-token.stderr?ref=5ddad99a5686ce32b87ef14c21642fc55becebf9", "patch": "@@ -2,7 +2,9 @@ error: expected one of `!`, `(`, `+`, `,`, `::`, `<`, or `>`, found `=`\n   --> $DIR/trait-path-expected-token.rs:8:33\n    |\n LL | fn f1<'a>(arg : Box<dyn X<Y = B = &'a ()>>) {}\n-   |                                 ^ expected one of 7 possible tokens\n+   |                               - ^ expected one of 7 possible tokens\n+   |                               |\n+   |                               maybe try to close unmatched angle bracket\n \n warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/trait-path-expected-token.rs:1:12"}, {"sha": "5e50c6b35c9602ab2abae3b2aa76269527ff7f53", "filename": "src/test/ui/generic-associated-types/parse/trait-path-expressions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ddad99a5686ce32b87ef14c21642fc55becebf9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ddad99a5686ce32b87ef14c21642fc55becebf9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-expressions.rs?ref=5ddad99a5686ce32b87ef14c21642fc55becebf9", "patch": "@@ -17,7 +17,7 @@ mod error2 {\n   }\n \n   fn f2<'a>(arg : Box<dyn X< { 1 } = 32 >>) {}\n-    //~^ ERROR: only types can be used in associated type constraints\n+    //~^ ERROR: expected one of\n }\n \n fn main() {}"}, {"sha": "27e1a750b213197f865e0a16ea5b9b4b336b6488", "filename": "src/test/ui/generic-associated-types/parse/trait-path-expressions.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ddad99a5686ce32b87ef14c21642fc55becebf9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-expressions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ddad99a5686ce32b87ef14c21642fc55becebf9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-expressions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-expressions.stderr?ref=5ddad99a5686ce32b87ef14c21642fc55becebf9", "patch": "@@ -6,11 +6,13 @@ LL |   fn f1<'a>(arg : Box<dyn X< 1 = 32 >>) {}\n    |                              |\n    |                              while parsing a const generic argument starting here\n \n-error: only types can be used in associated type constraints\n-  --> $DIR/trait-path-expressions.rs:19:30\n+error: expected one of `,`, `:`, or `>`, found `=`\n+  --> $DIR/trait-path-expressions.rs:19:36\n    |\n LL |   fn f2<'a>(arg : Box<dyn X< { 1 } = 32 >>) {}\n-   |                              ^^^^^\n+   |                                  - ^ expected one of `,`, `:`, or `>`\n+   |                                  |\n+   |                                  maybe try to close unmatched angle bracket\n \n warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/trait-path-expressions.rs:1:12"}, {"sha": "1b9de455713e9b09bd4bbb872ed9e9ee5ac1947e", "filename": "src/test/ui/generic-associated-types/parse/trait-path-missing-gen_arg.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ddad99a5686ce32b87ef14c21642fc55becebf9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-missing-gen_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ddad99a5686ce32b87ef14c21642fc55becebf9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-missing-gen_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-missing-gen_arg.stderr?ref=5ddad99a5686ce32b87ef14c21642fc55becebf9", "patch": "@@ -28,7 +28,9 @@ error: expected one of `>`, a const expression, lifetime, or type, found `=`\n   --> $DIR/trait-path-missing-gen_arg.rs:17:30\n    |\n LL |   fn f1<'a>(arg : Box<dyn X< = 32 >>) {}\n-   |                              ^ expected one of `>`, a const expression, lifetime, or type\n+   |                            - ^ expected one of `>`, const, lifetime, or type\n+   |                            |\n+   |                            maybe try to close unmatched angle bracket\n \n warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/trait-path-missing-gen_arg.rs:1:12"}, {"sha": "eba30e1438f04c75d4c1d54207018bddb5546be8", "filename": "src/test/ui/generic-associated-types/parse/trait-path-segments.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ddad99a5686ce32b87ef14c21642fc55becebf9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-segments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ddad99a5686ce32b87ef14c21642fc55becebf9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-segments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-segments.rs?ref=5ddad99a5686ce32b87ef14c21642fc55becebf9", "patch": "@@ -7,7 +7,7 @@ const _: () = {\n     }\n \n     fn f1<'a>(arg : Box<dyn X<X::Y = u32>>) {}\n-        //~^ ERROR: paths with multiple segments cannot be used in associated type constraints\n+        //~^ ERROR: expected one of\n   };\n \n const _: () = {\n@@ -18,7 +18,7 @@ const _: () = {\n     trait Z {}\n \n     impl<T : X<<Self as X>::Y<'a> = &'a u32>> Z for T {}\n-        //~^ ERROR: qualified paths cannot be used in associated type constraints\n+        //~^ ERROR: expected one of\n };\n \n const _: () = {\n@@ -29,7 +29,7 @@ const _: () = {\n     trait Z {}\n \n     impl<T : X<X::Y<'a> = &'a u32>> Z for T {}\n-        //~^ ERROR: paths with multiple segments cannot be used in associated type constraints\n+        //~^ ERROR: expected one of\n };\n \n fn main() {}"}, {"sha": "c82953aaed7dd5022d18506fa0b5a9db722150f6", "filename": "src/test/ui/generic-associated-types/parse/trait-path-segments.stderr", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5ddad99a5686ce32b87ef14c21642fc55becebf9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-segments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ddad99a5686ce32b87ef14c21642fc55becebf9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-segments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-segments.stderr?ref=5ddad99a5686ce32b87ef14c21642fc55becebf9", "patch": "@@ -1,22 +1,26 @@\n-error: paths with multiple segments cannot be used in associated type constraints\n-  --> $DIR/trait-path-segments.rs:9:31\n+error: expected one of `!`, `(`, `+`, `,`, `::`, `:`, `<`, or `>`, found `=`\n+  --> $DIR/trait-path-segments.rs:9:36\n    |\n LL |     fn f1<'a>(arg : Box<dyn X<X::Y = u32>>) {}\n-   |                               ^^^^\n+   |                                  - ^ expected one of 8 possible tokens\n+   |                                  |\n+   |                                  maybe try to close unmatched angle bracket\n \n-error: qualified paths cannot be used in associated type constraints\n-  --> $DIR/trait-path-segments.rs:20:16\n+error: expected one of `,`, `::`, `:`, or `>`, found `=`\n+  --> $DIR/trait-path-segments.rs:20:35\n    |\n LL |     impl<T : X<<Self as X>::Y<'a> = &'a u32>> Z for T {}\n-   |                ^^^^^^^^^-^^^^^^^^\n-   |                         |\n-   |                         not allowed in associated type constraints\n+   |                                 - ^ expected one of `,`, `::`, `:`, or `>`\n+   |                                 |\n+   |                                 maybe try to close unmatched angle bracket\n \n-error: paths with multiple segments cannot be used in associated type constraints\n-  --> $DIR/trait-path-segments.rs:31:16\n+error: expected one of `!`, `+`, `,`, `::`, `:`, or `>`, found `=`\n+  --> $DIR/trait-path-segments.rs:31:25\n    |\n LL |     impl<T : X<X::Y<'a> = &'a u32>> Z for T {}\n-   |                ^^^^^^^^\n+   |                       - ^ expected one of `!`, `+`, `,`, `::`, `:`, or `>`\n+   |                       |\n+   |                       maybe try to close unmatched angle bracket\n \n warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/trait-path-segments.rs:1:12"}, {"sha": "522b3edc638ea73b988d2c6123d89ad2650d9d7c", "filename": "src/test/ui/generic-associated-types/parse/trait-path-types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ddad99a5686ce32b87ef14c21642fc55becebf9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ddad99a5686ce32b87ef14c21642fc55becebf9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-types.rs?ref=5ddad99a5686ce32b87ef14c21642fc55becebf9", "patch": "@@ -7,17 +7,17 @@ trait X {\n \n const _: () = {\n   fn f<'a>(arg : Box<dyn X< [u8; 1] = u32>>) {}\n-      //~^ ERROR: only path types can be used in associated type constraints\n+      //~^ ERROR: expected one of\n };\n \n const _: () = {\n   fn f1<'a>(arg : Box<dyn X<(Y<'a>) = &'a ()>>) {}\n-      //~^ ERROR: only path types can be used in associated type constraints\n+      //~^ ERROR: expected one of\n };\n \n const _: () = {\n   fn f1<'a>(arg : Box<dyn X< 'a = u32 >>) {}\n-      //~^ ERROR: only types can be used in associated type constraints\n+      //~^ ERROR: expected one of\n };\n \n fn main() {}"}, {"sha": "ac791c224810e8c15ccffec76ae16f30ee3a8fbf", "filename": "src/test/ui/generic-associated-types/parse/trait-path-types.stderr", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5ddad99a5686ce32b87ef14c21642fc55becebf9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ddad99a5686ce32b87ef14c21642fc55becebf9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-types.stderr?ref=5ddad99a5686ce32b87ef14c21642fc55becebf9", "patch": "@@ -1,20 +1,26 @@\n-error: only path types can be used in associated type constraints\n-  --> $DIR/trait-path-types.rs:9:29\n+error: expected one of `,`, `:`, or `>`, found `=`\n+  --> $DIR/trait-path-types.rs:9:37\n    |\n LL |   fn f<'a>(arg : Box<dyn X< [u8; 1] = u32>>) {}\n-   |                             ^^^^^^^\n+   |                                   - ^ expected one of `,`, `:`, or `>`\n+   |                                   |\n+   |                                   maybe try to close unmatched angle bracket\n \n-error: only path types can be used in associated type constraints\n-  --> $DIR/trait-path-types.rs:14:29\n+error: expected one of `,`, `:`, or `>`, found `=`\n+  --> $DIR/trait-path-types.rs:14:37\n    |\n LL |   fn f1<'a>(arg : Box<dyn X<(Y<'a>) = &'a ()>>) {}\n-   |                             ^^^^^^^\n+   |                                   - ^ expected one of `,`, `:`, or `>`\n+   |                                   |\n+   |                                   maybe try to close unmatched angle bracket\n \n-error: only types can be used in associated type constraints\n-  --> $DIR/trait-path-types.rs:19:30\n+error: expected one of `,`, `:`, or `>`, found `=`\n+  --> $DIR/trait-path-types.rs:19:33\n    |\n LL |   fn f1<'a>(arg : Box<dyn X< 'a = u32 >>) {}\n-   |                              ^^\n+   |                              -- ^ expected one of `,`, `:`, or `>`\n+   |                              |\n+   |                              maybe try to close unmatched angle bracket\n \n warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/trait-path-types.rs:1:12"}, {"sha": "51486bc40de0ca6cb7d7dde3e54ee366f7bd2ba9", "filename": "src/test/ui/issues/issue-34334.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ddad99a5686ce32b87ef14c21642fc55becebf9/src%2Ftest%2Fui%2Fissues%2Fissue-34334.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ddad99a5686ce32b87ef14c21642fc55becebf9/src%2Ftest%2Fui%2Fissues%2Fissue-34334.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34334.rs?ref=5ddad99a5686ce32b87ef14c21642fc55becebf9", "patch": "@@ -1,6 +1,8 @@\n fn main () {\n     let sr: Vec<(u32, _, _) = vec![];\n-    //~^ ERROR only path types can be used in associated type constraints\n+    //~^ ERROR expected one of\n+\n     let sr2: Vec<(u32, _, _)> = sr.iter().map(|(faction, th_sender, th_receiver)| {}).collect();\n     //~^ ERROR a value of type `Vec<(u32, _, _)>` cannot be built\n+\n }"}, {"sha": "acb44ce2c3545a27c8ad7f87a26ce4d15a49097b", "filename": "src/test/ui/issues/issue-34334.stderr", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5ddad99a5686ce32b87ef14c21642fc55becebf9/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ddad99a5686ce32b87ef14c21642fc55becebf9/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr?ref=5ddad99a5686ce32b87ef14c21642fc55becebf9", "patch": "@@ -1,13 +1,14 @@\n-error: only path types can be used in associated type constraints\n-  --> $DIR/issue-34334.rs:2:17\n+error: expected one of `,`, `:`, or `>`, found `=`\n+  --> $DIR/issue-34334.rs:2:29\n    |\n LL |     let sr: Vec<(u32, _, _) = vec![];\n-   |         --      ^^^^^^^^^^^\n-   |         |\n+   |         --                - ^ expected one of `,`, `:`, or `>`\n+   |         |                 |\n+   |         |                 maybe try to close unmatched angle bracket\n    |         while parsing the type for `sr`\n \n error[E0277]: a value of type `Vec<(u32, _, _)>` cannot be built from an iterator over elements of type `()`\n-  --> $DIR/issue-34334.rs:4:87\n+  --> $DIR/issue-34334.rs:5:87\n    |\n LL |     let sr2: Vec<(u32, _, _)> = sr.iter().map(|(faction, th_sender, th_receiver)| {}).collect();\n    |                                                                                       ^^^^^^^ value of type `Vec<(u32, _, _)>` cannot be built from `std::iter::Iterator<Item=()>`"}, {"sha": "da95c1bfa2709e0742cd56263792bfd0b759bb31", "filename": "src/test/ui/parser/missing-closing-angle-bracket-eq-constraint.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5ddad99a5686ce32b87ef14c21642fc55becebf9/src%2Ftest%2Fui%2Fparser%2Fmissing-closing-angle-bracket-eq-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ddad99a5686ce32b87ef14c21642fc55becebf9/src%2Ftest%2Fui%2Fparser%2Fmissing-closing-angle-bracket-eq-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmissing-closing-angle-bracket-eq-constraint.rs?ref=5ddad99a5686ce32b87ef14c21642fc55becebf9", "patch": "@@ -0,0 +1,23 @@\n+struct Foo<T1, T2> {\n+  _a : T1,\n+  _b : T2,\n+}\n+\n+fn test1<T>(arg : T) {\n+  let v : Vec<(u32,_) = vec![];\n+    //~^ ERROR: expected one of\n+    //~| ERROR: type annotations needed\n+}\n+\n+fn test2<T1, T2>(arg1 : T1, arg2 : T2) {\n+  let foo : Foo::<T1, T2 = Foo {_a : arg1, _b : arg2};\n+    //~^ ERROR: expected one of\n+}\n+\n+fn test3<'a>(arg : &'a u32) {\n+  let v : Vec<'a = vec![];\n+    //~^ ERROR: expected one of\n+    //~| ERROR: type annotations needed for `Vec<T>`\n+}\n+\n+fn main() {}"}, {"sha": "ae53334f5e02a439e90ad8e78af4404e83b8828d", "filename": "src/test/ui/parser/missing-closing-angle-bracket-eq-constraint.stderr", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/5ddad99a5686ce32b87ef14c21642fc55becebf9/src%2Ftest%2Fui%2Fparser%2Fmissing-closing-angle-bracket-eq-constraint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ddad99a5686ce32b87ef14c21642fc55becebf9/src%2Ftest%2Fui%2Fparser%2Fmissing-closing-angle-bracket-eq-constraint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmissing-closing-angle-bracket-eq-constraint.stderr?ref=5ddad99a5686ce32b87ef14c21642fc55becebf9", "patch": "@@ -0,0 +1,49 @@\n+error: expected one of `,`, `:`, or `>`, found `=`\n+  --> $DIR/missing-closing-angle-bracket-eq-constraint.rs:7:23\n+   |\n+LL |   let v : Vec<(u32,_) = vec![];\n+   |       -             - ^ expected one of `,`, `:`, or `>`\n+   |       |             |\n+   |       |             maybe try to close unmatched angle bracket\n+   |       while parsing the type for `v`\n+\n+error: expected one of `!`, `(`, `+`, `,`, `::`, `<`, or `>`, found `{`\n+  --> $DIR/missing-closing-angle-bracket-eq-constraint.rs:13:32\n+   |\n+LL |   let foo : Foo::<T1, T2 = Foo {_a : arg1, _b : arg2};\n+   |       ---                      ^ expected one of 7 possible tokens\n+   |       |\n+   |       while parsing the type for `foo`\n+\n+error: expected one of `,`, `:`, or `>`, found `=`\n+  --> $DIR/missing-closing-angle-bracket-eq-constraint.rs:18:18\n+   |\n+LL |   let v : Vec<'a = vec![];\n+   |       -       -- ^ expected one of `,`, `:`, or `>`\n+   |       |       |\n+   |       |       maybe try to close unmatched angle bracket\n+   |       while parsing the type for `v`\n+\n+error[E0282]: type annotations needed for `Vec<T>`\n+  --> $DIR/missing-closing-angle-bracket-eq-constraint.rs:7:25\n+   |\n+LL |   let v : Vec<(u32,_) = vec![];\n+   |       -                 ^^^^^^ cannot infer type for type parameter `T`\n+   |       |\n+   |       consider giving `v` the explicit type `Vec<T>`, where the type parameter `T` is specified\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0282]: type annotations needed for `Vec<T>`\n+  --> $DIR/missing-closing-angle-bracket-eq-constraint.rs:18:20\n+   |\n+LL |   let v : Vec<'a = vec![];\n+   |       -            ^^^^^^ cannot infer type for type parameter `T`\n+   |       |\n+   |       consider giving `v` the explicit type `Vec<T>`, where the type parameter `T` is specified\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "84ffdd176aea058617d2a8373413b33570ff5002", "filename": "src/test/ui/parser/nested-missing-closing-angle-bracket.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ddad99a5686ce32b87ef14c21642fc55becebf9/src%2Ftest%2Fui%2Fparser%2Fnested-missing-closing-angle-bracket.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ddad99a5686ce32b87ef14c21642fc55becebf9/src%2Ftest%2Fui%2Fparser%2Fnested-missing-closing-angle-bracket.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fnested-missing-closing-angle-bracket.rs?ref=5ddad99a5686ce32b87ef14c21642fc55becebf9", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+  let v : Vec::<Vec<(u32,_,_)> = vec![vec![]];\n+    //~^ ERROR: expected one of\n+}"}, {"sha": "b85bc02568c7710e8f6637d60ccebcdecca78f6d", "filename": "src/test/ui/parser/nested-missing-closing-angle-bracket.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ddad99a5686ce32b87ef14c21642fc55becebf9/src%2Ftest%2Fui%2Fparser%2Fnested-missing-closing-angle-bracket.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ddad99a5686ce32b87ef14c21642fc55becebf9/src%2Ftest%2Fui%2Fparser%2Fnested-missing-closing-angle-bracket.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fnested-missing-closing-angle-bracket.stderr?ref=5ddad99a5686ce32b87ef14c21642fc55becebf9", "patch": "@@ -0,0 +1,8 @@\n+error: expected one of `,` or `>`, found `;`\n+  --> $DIR/nested-missing-closing-angle-bracket.rs:2:46\n+   |\n+LL |   let v : Vec::<Vec<(u32,_,_)> = vec![vec![]];\n+   |       - while parsing the type for `v`       ^ expected one of `,` or `>`\n+\n+error: aborting due to previous error\n+"}]}