{"sha": "b8615f3bea67f12db7a84687923d62d5aabc22c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4NjE1ZjNiZWE2N2YxMmRiN2E4NDY4NzkyM2Q2MmQ1YWFiYzIyYzE=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2017-10-25T19:10:48Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-10-31T16:41:39Z"}, "message": "add reborrow constraints", "tree": {"sha": "d1120935ea8b3865e4909fd13084cc894fda3e92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1120935ea8b3865e4909fd13084cc894fda3e92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8615f3bea67f12db7a84687923d62d5aabc22c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8615f3bea67f12db7a84687923d62d5aabc22c1", "html_url": "https://github.com/rust-lang/rust/commit/b8615f3bea67f12db7a84687923d62d5aabc22c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8615f3bea67f12db7a84687923d62d5aabc22c1/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f700728a3bcb1f82b5457c4ac3051c672460ed7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f700728a3bcb1f82b5457c4ac3051c672460ed7e", "html_url": "https://github.com/rust-lang/rust/commit/f700728a3bcb1f82b5457c4ac3051c672460ed7e"}], "stats": {"total": 74, "additions": 74, "deletions": 0}, "files": [{"sha": "1fc7dbd5bd0aa3657e6a4e9e3f8638d1db2efc97", "filename": "src/librustc_mir/transform/nll/constraint_generation.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b8615f3bea67f12db7a84687923d62d5aabc22c1/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8615f3bea67f12db7a84687923d62d5aabc22c1/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fconstraint_generation.rs?ref=b8615f3bea67f12db7a84687923d62d5aabc22c1", "patch": "@@ -8,9 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use rustc::hir;\n use rustc::mir::{BasicBlock, BorrowKind, Location, Lvalue, Mir, Rvalue, Statement, StatementKind};\n use rustc::mir::transform::MirSource;\n use rustc::mir::visit::Visitor;\n+use rustc::mir::Lvalue::Projection;\n+use rustc::mir::{LvalueProjection, ProjectionElem};\n use rustc::infer::InferCtxt;\n use rustc::traits::{self, ObligationCause};\n use rustc::ty::{self, Ty};\n@@ -198,6 +201,37 @@ impl<'cx, 'gcx, 'tcx> ConstraintGeneration<'cx, 'gcx, 'tcx> {\n                                    destination_region.to_region_index(),\n                                    location.successor_within_block());\n     }\n+\n+    fn add_reborrow_constraint(\n+        &mut self,\n+        location: Location,\n+        borrow_region: ty::Region<'tcx>,\n+        borrowed_lv: &Lvalue<'tcx>,\n+    ) {\n+        if let Projection(ref proj) = *borrowed_lv {\n+            let LvalueProjection { ref base, ref elem } = **proj;\n+\n+            if let ProjectionElem::Deref = *elem {\n+                let tcx = self.infcx.tcx;\n+                let base_ty = base.ty(self.mir, tcx).to_ty(tcx);\n+                let base_sty = &base_ty.sty;\n+\n+                if let ty::TyRef(base_region, ty::TypeAndMut{ ty: _, mutbl }) = *base_sty {\n+                    match mutbl {\n+                        hir::Mutability::MutImmutable => { },\n+\n+                        hir::Mutability::MutMutable => {\n+                            self.add_reborrow_constraint(location, borrow_region, base);\n+                        },\n+                    }\n+\n+                    self.regioncx.add_outlives(base_region.to_region_index(),\n+                                               borrow_region.to_region_index(),\n+                                               location.successor_within_block());\n+                }\n+            }\n+        }\n+    }\n }\n \n impl<'cx, 'gcx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cx, 'gcx, 'tcx> {\n@@ -214,6 +248,7 @@ impl<'cx, 'gcx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cx, 'gcx, 'tcx> {\n         if let StatementKind::Assign(ref destination_lv, ref rv) = statement.kind {\n             if let Rvalue::Ref(region, bk, ref borrowed_lv) = *rv {\n                 self.add_borrow_constraint(location, destination_lv, region, bk, borrowed_lv);\n+                self.add_reborrow_constraint(location, region, borrowed_lv);\n             }\n         }\n "}, {"sha": "1983478a4e1a3fef55f89164507824135c6457cd", "filename": "src/test/mir-opt/nll/reborrow-basic.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b8615f3bea67f12db7a84687923d62d5aabc22c1/src%2Ftest%2Fmir-opt%2Fnll%2Freborrow-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8615f3bea67f12db7a84687923d62d5aabc22c1/src%2Ftest%2Fmir-opt%2Fnll%2Freborrow-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Freborrow-basic.rs?ref=b8615f3bea67f12db7a84687923d62d5aabc22c1", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2012-2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Basic test for reborrow constraints: the region (`R5`) that appears\n+// in the type of `r_a` must outlive the region (`R7`) that appears in\n+// the type of `r_b`\n+\n+// compile-flags:-Znll -Zverbose\n+//                     ^^^^^^^^^ force compiler to dump more region information\n+\n+#![allow(warnings)]\n+\n+fn use_x(_: &mut i32) -> bool { true }\n+\n+fn main() {\n+    let mut foo: i32     = 22;\n+    let r_a: &mut i32 = &mut foo;\n+    let r_b: &mut i32 = &mut *r_a;\n+    use_x(r_b);\n+}\n+\n+// END RUST SOURCE\n+// START rustc.node13.nll.0.mir\n+// | R5: {bb0[6], bb0[7], bb0[8], bb0[9], bb0[10], bb0[11], bb0[12], bb0[13], bb0[14]}\n+// ...\n+// | R7: {bb0[11], bb0[12], bb0[13], bb0[14]}\n+// END rustc.node13.nll.0.mir\n+// START rustc.node13.nll.0.mir\n+// let _2: &'_#5r mut i32;\n+// ...\n+// let _4: &'_#7r mut i32;\n+// END rustc.node13.nll.0.mir"}]}