{"sha": "1ebd9adef4e65deb6f34d99b516c592cb9a06b38", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlYmQ5YWRlZjRlNjVkZWI2ZjM0ZDk5YjUxNmM1OTJjYjlhMDZiMzg=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-06-27T22:15:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-06-27T22:15:39Z"}, "message": "Rollup merge of #51658 - oli-obk:unregress_perf, r=nikomatsakis\n\nOnly do sanity check with debug assertions on\n\nr? @nnethercote\n\nI'm slighty confused. These changes address code that the `unused-warnings` benchmark doesn't go through, yet I see a 5% improvement to nightly on the `check` run, and no improvement on the other runs.\n\nMaybe this change allows unrelated code in the same function to be better optimized?", "tree": {"sha": "ef2eeb1da4c7b91ea8093ecbb8fa46d12a45e22f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef2eeb1da4c7b91ea8093ecbb8fa46d12a45e22f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ebd9adef4e65deb6f34d99b516c592cb9a06b38", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbNAyLCRBK7hj4Ov3rIwAAdHIIAIrQW4pw2saJ+SCfOwn18M81\nHt9Mqkj7QXdPfVpuz8qChFbqXzEulAAWbkOr7Zk3howDMpVyWGMB8jgKa3iTCNPO\nbi/oPGtpZQdHSoErkPuTlMLL80RMV4QxuwLFSFn4/qtDUABmzzYxNFh8bp/EVA0C\nYabT6HIoTpqd3HnjHbLhMkWgi0KDPnXlIqBZQVIEaXTTIBx2jFDNyvjt1r0rCSMb\nleNZjItZV+KzMVO2TMkI8by+JWFu+VHcYvuIl3eNRzhG2JvmdxnUpEW3KUJFNgu8\nbcIADP5o3BiIurl9Ym9jnZmlzUQ18SpRMDtz956G/pGYJ7eqy7cR7dMmD2wWc2g=\n=Y5EO\n-----END PGP SIGNATURE-----\n", "payload": "tree ef2eeb1da4c7b91ea8093ecbb8fa46d12a45e22f\nparent 63531f515d74e20806454961fd5d05a7f1cce354\nparent a693c9206bd8c6bb69979de7082977444b9309d0\nauthor kennytm <kennytm@gmail.com> 1530137739 +0800\ncommitter GitHub <noreply@github.com> 1530137739 +0800\n\nRollup merge of #51658 - oli-obk:unregress_perf, r=nikomatsakis\n\nOnly do sanity check with debug assertions on\n\nr? @nnethercote\n\nI'm slighty confused. These changes address code that the `unused-warnings` benchmark doesn't go through, yet I see a 5% improvement to nightly on the `check` run, and no improvement on the other runs.\n\nMaybe this change allows unrelated code in the same function to be better optimized?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ebd9adef4e65deb6f34d99b516c592cb9a06b38", "html_url": "https://github.com/rust-lang/rust/commit/1ebd9adef4e65deb6f34d99b516c592cb9a06b38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ebd9adef4e65deb6f34d99b516c592cb9a06b38/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63531f515d74e20806454961fd5d05a7f1cce354", "url": "https://api.github.com/repos/rust-lang/rust/commits/63531f515d74e20806454961fd5d05a7f1cce354", "html_url": "https://github.com/rust-lang/rust/commit/63531f515d74e20806454961fd5d05a7f1cce354"}, {"sha": "a693c9206bd8c6bb69979de7082977444b9309d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a693c9206bd8c6bb69979de7082977444b9309d0", "html_url": "https://github.com/rust-lang/rust/commit/a693c9206bd8c6bb69979de7082977444b9309d0"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "6d2df4c201813b5dafe62a7f115891af497c8dca", "filename": "src/librustc/traits/query/normalize.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ebd9adef4e65deb6f34d99b516c592cb9a06b38/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ebd9adef4e65deb6f34d99b516c592cb9a06b38/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs?ref=1ebd9adef4e65deb6f34d99b516c592cb9a06b38", "patch": "@@ -124,10 +124,10 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for QueryNormalizer<'cx, 'gcx, 'tcx\n                         let concrete_ty = generic_ty.subst(self.tcx(), substs);\n                         self.anon_depth += 1;\n                         if concrete_ty == ty {\n-                            println!(\"generic_ty: {:#?}\", generic_ty);\n-                            println!(\"substs {:#?}\", substs);\n+                            bug!(\"infinite recursion generic_ty: {:#?}, substs: {:#?}, \\\n+                                  concrete_ty: {:#?}, ty: {:#?}\", generic_ty, substs, concrete_ty,\n+                                  ty);\n                         }\n-                        assert_ne!(concrete_ty, ty, \"infinite recursion\");\n                         let folded_ty = self.fold_ty(concrete_ty);\n                         self.anon_depth -= 1;\n                         folded_ty"}]}