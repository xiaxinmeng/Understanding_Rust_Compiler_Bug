{"sha": "f81459211d0cf2738ed02f5c7fe24f56c8032960", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4MTQ1OTIxMWQwY2YyNzM4ZWQwMmY1YzdmZTI0ZjU2YzgwMzI5NjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-29T01:18:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-29T01:18:46Z"}, "message": "auto merge of #5593 : luqmana/rust/inline-asm, r=catamorphism\n\nClean things up a bit. Also, allow selecting intel syntax in addition to the default AT&T dialect.", "tree": {"sha": "d67a85c098dd7a2af05bd4ef4a3155f115565169", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d67a85c098dd7a2af05bd4ef4a3155f115565169"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f81459211d0cf2738ed02f5c7fe24f56c8032960", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f81459211d0cf2738ed02f5c7fe24f56c8032960", "html_url": "https://github.com/rust-lang/rust/commit/f81459211d0cf2738ed02f5c7fe24f56c8032960", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f81459211d0cf2738ed02f5c7fe24f56c8032960/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "943d7adedc2401b54e103ea3635d0e50b1822d5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/943d7adedc2401b54e103ea3635d0e50b1822d5a", "html_url": "https://github.com/rust-lang/rust/commit/943d7adedc2401b54e103ea3635d0e50b1822d5a"}, {"sha": "a3996c1626003472437b9c29e179583daf9e53bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3996c1626003472437b9c29e179583daf9e53bf", "html_url": "https://github.com/rust-lang/rust/commit/a3996c1626003472437b9c29e179583daf9e53bf"}], "stats": {"total": 364, "additions": 226, "deletions": 138}, "files": [{"sha": "35f2679a3c60e7bf13b9bf769336f636354e6e5e", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f81459211d0cf2738ed02f5c7fe24f56c8032960/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f81459211d0cf2738ed02f5c7fe24f56c8032960/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=f81459211d0cf2738ed02f5c7fe24f56c8032960", "patch": "@@ -1306,11 +1306,11 @@ pub impl Liveness {\n             self.propagate_through_expr(e, succ)\n           }\n \n-          expr_inline_asm(_, ref ins, ref outs, _, _, _) =>{\n-            let succ = do ins.foldr(succ) |&(_, expr), succ| {\n+          expr_inline_asm(ref ia) =>{\n+            let succ = do ia.inputs.foldr(succ) |&(_, expr), succ| {\n                 self.propagate_through_expr(expr, succ)\n             };\n-            do outs.foldr(succ) |&(_, expr), succ| {\n+            do ia.outputs.foldr(succ) |&(_, expr), succ| {\n                 self.propagate_through_expr(expr, succ)\n             }\n           }\n@@ -1580,14 +1580,19 @@ fn check_expr(expr: @expr, &&self: @Liveness, vt: vt<@Liveness>) {\n         visit::visit_expr(expr, self, vt);\n       }\n \n-      expr_inline_asm(_, ref ins, ref outs, _, _, _) => {\n-        for ins.each |&(_, in)| {\n+      expr_inline_asm(ref ia) => {\n+        for ia.inputs.each |&(_, in)| {\n           (vt.visit_expr)(in, self, vt);\n         }\n \n         // Output operands must be lvalues\n-        for outs.each |&(_, out)| {\n-          self.check_lvalue(out, vt);\n+        for ia.outputs.each |&(_, out)| {\n+          match out.node {\n+            expr_addr_of(_, inner) => {\n+              self.check_lvalue(inner, vt);\n+            }\n+            _ => {}\n+          }\n           (vt.visit_expr)(out, self, vt);\n         }\n "}, {"sha": "b3b23a8730d1a055f5d3e852555b7d9a10047c8e", "filename": "src/librustc/middle/trans/asm.rs", "status": "added", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/f81459211d0cf2738ed02f5c7fe24f56c8032960/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f81459211d0cf2738ed02f5c7fe24f56c8032960/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs?ref=f81459211d0cf2738ed02f5c7fe24f56c8032960", "patch": "@@ -0,0 +1,154 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/*!\n+# Translation of inline assembly.\n+*/\n+\n+use core::prelude::*;\n+\n+use lib;\n+use middle::trans::build::*;\n+use middle::trans::callee;\n+use middle::trans::common::*;\n+use middle::ty;\n+\n+use syntax::ast;\n+\n+// Take an inline assembly expression and splat it out via LLVM\n+pub fn trans_inline_asm(bcx: block, ia: &ast::inline_asm) -> block {\n+\n+    let mut bcx = bcx;\n+    let mut constraints = ~[];\n+    let mut cleanups = ~[];\n+    let mut aoutputs = ~[];\n+\n+    // Prepare the output operands\n+    let outputs = do ia.outputs.map |&(c, out)| {\n+        constraints.push(copy *c);\n+\n+        let aoutty = ty::arg {\n+            mode: ast::expl(ast::by_copy),\n+            ty: expr_ty(bcx, out)\n+        };\n+        aoutputs.push(unpack_result!(bcx, {\n+            callee::trans_arg_expr(bcx, aoutty, out, &mut cleanups, None, callee::DontAutorefArg)\n+        }));\n+\n+        let e = match out.node {\n+            ast::expr_addr_of(_, e) => e,\n+            _ => fail!(~\"Expression must be addr of\")\n+        };\n+\n+        let outty = ty::arg {\n+            mode: ast::expl(ast::by_copy),\n+            ty: expr_ty(bcx, e)\n+        };\n+\n+        unpack_result!(bcx, {\n+            callee::trans_arg_expr(bcx, outty, e, &mut cleanups, None, callee::DontAutorefArg)\n+        })\n+\n+    };\n+\n+    for cleanups.each |c| {\n+        revoke_clean(bcx, *c);\n+    }\n+    cleanups.clear();\n+\n+    // Now the input operands\n+    let inputs = do ia.inputs.map |&(c, in)| {\n+        constraints.push(copy *c);\n+\n+        let inty = ty::arg {\n+            mode: ast::expl(ast::by_copy),\n+            ty: expr_ty(bcx, in)\n+        };\n+\n+        unpack_result!(bcx, {\n+            callee::trans_arg_expr(bcx, inty, in, &mut cleanups, None, callee::DontAutorefArg)\n+        })\n+\n+    };\n+\n+    for cleanups.each |c| {\n+        revoke_clean(bcx, *c);\n+    }\n+\n+    let mut constraints = str::connect(constraints, \",\");\n+\n+    let mut clobbers = getClobbers();\n+    if *ia.clobbers != ~\"\" && clobbers != ~\"\" {\n+        clobbers = *ia.clobbers + ~\",\" + clobbers;\n+    } else {\n+        clobbers += *ia.clobbers;\n+    };\n+\n+    // Add the clobbers to our constraints list\n+    if clobbers != ~\"\" && constraints != ~\"\" {\n+        constraints += ~\",\" + clobbers;\n+    } else {\n+        constraints += clobbers;\n+    }\n+\n+    debug!(\"Asm Constraints: %?\", constraints);\n+\n+    let numOutputs = outputs.len();\n+\n+    // Depending on how many outputs we have, the return type is different\n+    let output = if numOutputs == 0 {\n+        T_void()\n+    } else if numOutputs == 1 {\n+        val_ty(outputs[0])\n+    } else {\n+        T_struct(outputs.map(|o| val_ty(*o)))\n+    };\n+\n+    let dialect = match ia.dialect {\n+        ast::asm_att   => lib::llvm::AD_ATT,\n+        ast::asm_intel => lib::llvm::AD_Intel\n+    };\n+\n+    let r = do str::as_c_str(*ia.asm) |a| {\n+        do str::as_c_str(constraints) |c| {\n+            InlineAsmCall(bcx, a, c, inputs, output, ia.volatile, ia.alignstack, dialect)\n+        }\n+    };\n+\n+    // Again, based on how many outputs we have\n+    if numOutputs == 1 {\n+        let op = PointerCast(bcx, aoutputs[0], T_ptr(val_ty(outputs[0])));\n+        Store(bcx, r, op);\n+    } else {\n+        for aoutputs.eachi |i, o| {\n+            let v = ExtractValue(bcx, r, i);\n+            let op = PointerCast(bcx, *o, T_ptr(val_ty(outputs[i])));\n+            Store(bcx, v, op);\n+        }\n+    }\n+\n+    return bcx;\n+\n+}\n+\n+// Default per-arch clobbers\n+// Basically what clang does\n+\n+#[cfg(target_arch = \"arm\")]\n+#[cfg(target_arch = \"mips\")]\n+fn getClobbers() -> ~str {\n+    ~\"\"\n+}\n+\n+#[cfg(target_arch = \"x86\")]\n+#[cfg(target_arch = \"x86_64\")]\n+fn getClobbers() -> ~str {\n+    ~\"~{dirflag},~{fpsr},~{flags}\"\n+}"}, {"sha": "53a872696dbfa1916479268f171181a23398f959", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 3, "deletions": 102, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/f81459211d0cf2738ed02f5c7fe24f56c8032960/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f81459211d0cf2738ed02f5c7fe24f56c8032960/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=f81459211d0cf2738ed02f5c7fe24f56c8032960", "patch": "@@ -128,6 +128,7 @@ use metadata::csearch;\n use middle::borrowck::root_map_key;\n use middle::trans::_match;\n use middle::trans::adt;\n+use middle::trans::asm;\n use middle::trans::base;\n use middle::trans::base::*;\n use middle::trans::build::*;\n@@ -548,108 +549,8 @@ fn trans_rvalue_stmt_unadjusted(bcx: block, expr: @ast::expr) -> block {\n         ast::expr_paren(a) => {\n             return trans_rvalue_stmt_unadjusted(bcx, a);\n         }\n-        ast::expr_inline_asm(asm, ref ins, ref outs,\n-                             clobs, volatile, alignstack) => {\n-            let mut constraints = ~[];\n-            let mut cleanups = ~[];\n-            let mut aoutputs = ~[];\n-\n-            let outputs = do outs.map |&(c, out)| {\n-                constraints.push(copy *c);\n-\n-                let aoutty = ty::arg {\n-                    mode: ast::expl(ast::by_copy),\n-                    ty: expr_ty(bcx, out)\n-                };\n-                aoutputs.push(unpack_result!(bcx, {\n-                    callee::trans_arg_expr(bcx, aoutty, out, &mut cleanups,\n-                                           None, callee::DontAutorefArg)\n-                    }));\n-\n-                let e = match out.node {\n-                    ast::expr_addr_of(_, e) => e,\n-                    _ => fail!(~\"Expression must be addr of\")\n-                };\n-\n-                let outty = ty::arg {\n-                    mode: ast::expl(ast::by_copy),\n-                    ty: expr_ty(bcx, e)\n-                };\n-\n-                unpack_result!(bcx, {\n-                    callee::trans_arg_expr(bcx, outty, e, &mut cleanups,\n-                                           None, callee::DontAutorefArg)\n-                })\n-\n-            };\n-\n-            for cleanups.each |c| {\n-                revoke_clean(bcx, *c);\n-            }\n-            cleanups = ~[];\n-\n-            let inputs = do ins.map |&(c, in)| {\n-                constraints.push(copy *c);\n-\n-                let inty = ty::arg {\n-                    mode: ast::expl(ast::by_copy),\n-                    ty: expr_ty(bcx, in)\n-                };\n-\n-                unpack_result!(bcx, {\n-                    callee::trans_arg_expr(bcx, inty, in, &mut cleanups,\n-                                           None, callee::DontAutorefArg)\n-                })\n-\n-            };\n-\n-            for cleanups.each |c| {\n-                revoke_clean(bcx, *c);\n-            }\n-\n-            let mut constraints = str::connect(constraints, \",\");\n-\n-            // Add the clobbers\n-            if *clobs != ~\"\" {\n-                if constraints == ~\"\" {\n-                    constraints += *clobs;\n-                } else {\n-                    constraints += ~\",\" + *clobs;\n-                }\n-            } else {\n-                constraints += *clobs;\n-            }\n-\n-            debug!(\"Asm Constraints: %?\", constraints);\n-\n-            let output = if outputs.len() == 0 {\n-                T_void()\n-            } else if outputs.len() == 1 {\n-                val_ty(outputs[0])\n-            } else {\n-                T_struct(outputs.map(|o| val_ty(*o)))\n-            };\n-\n-            let r = do str::as_c_str(*asm) |a| {\n-                do str::as_c_str(constraints) |c| {\n-                    InlineAsmCall(bcx, a, c, inputs, output, volatile,\n-                                  alignstack, lib::llvm::AD_ATT)\n-                }\n-            };\n-\n-            if outputs.len() == 1 {\n-                let op = PointerCast(bcx, aoutputs[0],\n-                                     T_ptr(val_ty(outputs[0])));\n-                Store(bcx, r, op);\n-            } else {\n-                for aoutputs.eachi |i, o| {\n-                    let v = ExtractValue(bcx, r, i);\n-                    let op = PointerCast(bcx, *o, T_ptr(val_ty(outputs[i])));\n-                    Store(bcx, v, op);\n-                }\n-            }\n-\n-            return bcx;\n+        ast::expr_inline_asm(ref a) => {\n+            return asm::trans_inline_asm(bcx, a);\n         }\n         _ => {\n             bcx.tcx().sess.span_bug("}, {"sha": "689983425a8bbbbcd472885123ccb12069b77a86", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f81459211d0cf2738ed02f5c7fe24f56c8032960/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f81459211d0cf2738ed02f5c7fe24f56c8032960/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=f81459211d0cf2738ed02f5c7fe24f56c8032960", "patch": "@@ -360,11 +360,11 @@ pub fn mark_for_expr(cx: Context, e: @expr) {\n         mark_for_method_call(cx, e.id, e.callee_id);\n       }\n \n-      expr_inline_asm(_, ref ins, ref outs, _, _, _) => {\n-        for ins.each |&(_, in)| {\n+      expr_inline_asm(ref ia) => {\n+        for ia.inputs.each |&(_, in)| {\n           node_type_needs(cx, use_repr, in.id);\n         }\n-        for outs.each |&(_, out)| {\n+        for ia.outputs.each |&(_, out)| {\n           node_type_needs(cx, use_repr, out.id);\n         }\n       }"}, {"sha": "a52a8d2f43d6ef94d901c65020a45e5f6648999b", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f81459211d0cf2738ed02f5c7fe24f56c8032960/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f81459211d0cf2738ed02f5c7fe24f56c8032960/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=f81459211d0cf2738ed02f5c7fe24f56c8032960", "patch": "@@ -2336,13 +2336,13 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n         let region_lb = ty::re_scope(expr.id);\n         instantiate_path(fcx, pth, tpt, expr.span, expr.id, region_lb);\n       }\n-      ast::expr_inline_asm(_, ref ins, ref outs, _, _, _) => {\n+      ast::expr_inline_asm(ref ia) => {\n           fcx.require_unsafe(expr.span, ~\"use of inline assembly\");\n \n-          for ins.each |&(_, in)| {\n+          for ia.inputs.each |&(_, in)| {\n               check_expr(fcx, in);\n           }\n-          for outs.each |&(_, out)| {\n+          for ia.outputs.each |&(_, out)| {\n               check_expr(fcx, out);\n           }\n           fcx.write_nil(id);"}, {"sha": "456f9743afab40b2f1e5644465ff65a826094be5", "filename": "src/librustc/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f81459211d0cf2738ed02f5c7fe24f56c8032960/src%2Flibrustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/f81459211d0cf2738ed02f5c7fe24f56c8032960/src%2Flibrustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rc?ref=f81459211d0cf2738ed02f5c7fe24f56c8032960", "patch": "@@ -80,6 +80,7 @@ pub mod middle {\n         pub mod reachable;\n         pub mod machine;\n         pub mod adt;\n+        pub mod asm;\n     }\n     pub mod ty;\n     pub mod resolve;"}, {"sha": "c2f098f3c3ec471da41f614d315b05440acf15d2", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f81459211d0cf2738ed02f5c7fe24f56c8032960/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f81459211d0cf2738ed02f5c7fe24f56c8032960/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=f81459211d0cf2738ed02f5c7fe24f56c8032960", "patch": "@@ -593,10 +593,7 @@ pub enum expr_ {\n     expr_ret(Option<@expr>),\n     expr_log(@expr, @expr),\n \n-    expr_inline_asm(@~str,              // asm\n-                    ~[(@~str, @expr)],  // inputs\n-                    ~[(@~str, @expr)],  // outputs\n-                    @~str, bool, bool), // clobbers, volatile, align stack\n+    expr_inline_asm(inline_asm),\n \n     expr_mac(mac),\n \n@@ -930,6 +927,27 @@ impl to_bytes::IterBytes for Ty {\n     }\n }\n \n+#[auto_encode]\n+#[auto_decode]\n+#[deriving(Eq)]\n+pub enum asm_dialect {\n+    asm_att,\n+    asm_intel\n+}\n+\n+#[auto_encode]\n+#[auto_decode]\n+#[deriving(Eq)]\n+pub struct inline_asm {\n+    asm: @~str,\n+    clobbers: @~str,\n+    inputs: ~[(@~str, @expr)],\n+    outputs: ~[(@~str, @expr)],\n+    volatile: bool,\n+    alignstack: bool,\n+    dialect: asm_dialect\n+}\n+\n #[auto_encode]\n #[auto_decode]\n #[deriving(Eq)]"}, {"sha": "b070948d4059fb63ff3dd901cee6e0263fff2b0c", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f81459211d0cf2738ed02f5c7fe24f56c8032960/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f81459211d0cf2738ed02f5c7fe24f56c8032960/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=f81459211d0cf2738ed02f5c7fe24f56c8032960", "patch": "@@ -53,13 +53,14 @@ pub fn expand_asm(cx: @ext_ctxt, sp: span, tts: &[ast::token_tree])\n     let mut cons = ~\"\";\n     let mut volatile = false;\n     let mut alignstack = false;\n+    let mut dialect = ast::asm_att;\n \n     let mut state = Asm;\n     loop outer: {\n         match state {\n             Asm => {\n                 asm = expr_to_str(cx, p.parse_expr(),\n-                                ~\"inline assembly must be a string literal.\");\n+                                  ~\"inline assembly must be a string literal.\");\n             }\n             Outputs => {\n                 while *p.token != token::EOF &&\n@@ -125,6 +126,8 @@ pub fn expand_asm(cx: @ext_ctxt, sp: span, tts: &[ast::token_tree])\n                     volatile = true;\n                 } else if option == ~\"alignstack\" {\n                     alignstack = true;\n+                } else if option == ~\"intel\" {\n+                    dialect = ast::asm_intel;\n                 }\n \n                 if *p.token == token::COMMA {\n@@ -163,8 +166,15 @@ pub fn expand_asm(cx: @ext_ctxt, sp: span, tts: &[ast::token_tree])\n     MRExpr(@ast::expr {\n         id: cx.next_id(),\n         callee_id: cx.next_id(),\n-        node: ast::expr_inline_asm(@asm, inputs, outputs,\n-                                   @cons, volatile, alignstack),\n+        node: ast::expr_inline_asm(ast::inline_asm {\n+            asm: @asm,\n+            clobbers: @cons,\n+            inputs: inputs,\n+            outputs: outputs,\n+            volatile: volatile,\n+            alignstack: alignstack,\n+            dialect: dialect\n+        }),\n         span: sp\n     })\n }"}, {"sha": "f43e541052e9fd4a4eeb77cea839d3d7e470fbbd", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f81459211d0cf2738ed02f5c7fe24f56c8032960/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f81459211d0cf2738ed02f5c7fe24f56c8032960/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=f81459211d0cf2738ed02f5c7fe24f56c8032960", "patch": "@@ -555,13 +555,12 @@ pub fn noop_fold_expr(e: &expr_, fld: @ast_fold) -> expr_ {\n                 fld.fold_expr(e)\n             )\n         }\n-        expr_inline_asm(asm, ins, outs, c, v, a) => {\n-            expr_inline_asm(\n-                asm,\n-                ins.map(|&(c, in)| (c, fld.fold_expr(in))),\n-                outs.map(|&(c, out)| (c, fld.fold_expr(out))),\n-                c, v, a\n-            )\n+        expr_inline_asm(a) => {\n+            expr_inline_asm(inline_asm {\n+                inputs: a.inputs.map(|&(c, in)| (c, fld.fold_expr(in))),\n+                outputs: a.outputs.map(|&(c, out)| (c, fld.fold_expr(out))),\n+                .. a\n+            })\n         }\n         expr_mac(ref mac) => expr_mac(fold_mac((*mac))),\n         expr_struct(path, ref fields, maybe_expr) => {"}, {"sha": "242156f2d7e27baa3117c3ddb464d9f03840cc7c", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f81459211d0cf2738ed02f5c7fe24f56c8032960/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f81459211d0cf2738ed02f5c7fe24f56c8032960/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=f81459211d0cf2738ed02f5c7fe24f56c8032960", "patch": "@@ -1388,32 +1388,32 @@ pub fn print_expr(s: @ps, &&expr: @ast::expr) {\n         print_expr(s, expr);\n         pclose(s);\n       }\n-      ast::expr_inline_asm(a, in, out, c, v, _) => {\n-        if v {\n+      ast::expr_inline_asm(a) => {\n+        if a.volatile {\n             word(s.s, ~\"__volatile__ asm!\");\n         } else {\n             word(s.s, ~\"asm!\");\n         }\n         popen(s);\n-        print_string(s, *a);\n+        print_string(s, *a.asm);\n         word_space(s, ~\":\");\n-        for out.each |&(co, o)| {\n+        for a.outputs.each |&(co, o)| {\n             print_string(s, *co);\n             popen(s);\n             print_expr(s, o);\n             pclose(s);\n             word_space(s, ~\",\");\n         }\n         word_space(s, ~\":\");\n-        for in.each |&(co, o)| {\n+        for a.inputs.each |&(co, o)| {\n             print_string(s, *co);\n             popen(s);\n             print_expr(s, o);\n             pclose(s);\n             word_space(s, ~\",\");\n         }\n         word_space(s, ~\":\");\n-        print_string(s, *c);\n+        print_string(s, *a.clobbers);\n         pclose(s);\n       }\n       ast::expr_mac(ref m) => print_mac(s, (*m)),"}, {"sha": "dd724948b32e16cbab7a52f69da5eed5969fc575", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f81459211d0cf2738ed02f5c7fe24f56c8032960/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f81459211d0cf2738ed02f5c7fe24f56c8032960/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=f81459211d0cf2738ed02f5c7fe24f56c8032960", "patch": "@@ -562,11 +562,11 @@ pub fn visit_expr<E>(ex: @expr, e: E, v: vt<E>) {\n         }\n         expr_mac(ref mac) => visit_mac((*mac), e, v),\n         expr_paren(x) => (v.visit_expr)(x, e, v),\n-        expr_inline_asm(_, ins, outs, _, _, _) => {\n-            for ins.each |&(_, in)| {\n+        expr_inline_asm(ref a) => {\n+            for a.inputs.each |&(_, in)| {\n                 (v.visit_expr)(in, e, v);\n             }\n-            for outs.each |&(_, out)| {\n+            for a.outputs.each |&(_, out)| {\n                 (v.visit_expr)(out, e, v);\n             }\n         }"}]}