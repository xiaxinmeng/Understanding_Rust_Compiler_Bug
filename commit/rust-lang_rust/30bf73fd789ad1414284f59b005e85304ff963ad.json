{"sha": "30bf73fd789ad1414284f59b005e85304ff963ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwYmY3M2ZkNzg5YWQxNDE0Mjg0ZjU5YjAwNWU4NTMwNGZmOTYzYWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-27T23:11:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-27T23:11:39Z"}, "message": "auto merge of #14447 : erickt/rust/show-treemap, r=kballard\n\nThis is a hodge podge of a couple small cleanup commits. It implements `Show` for `TreeMap` and `TreeSet`, and some removal of commented out code.", "tree": {"sha": "5bf07be28c75144d479b35e9a2832795f76d2437", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bf07be28c75144d479b35e9a2832795f76d2437"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30bf73fd789ad1414284f59b005e85304ff963ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30bf73fd789ad1414284f59b005e85304ff963ad", "html_url": "https://github.com/rust-lang/rust/commit/30bf73fd789ad1414284f59b005e85304ff963ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30bf73fd789ad1414284f59b005e85304ff963ad/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fc29ef0c8c35eacf7d72e5eb0e7c961009ab4c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fc29ef0c8c35eacf7d72e5eb0e7c961009ab4c9", "html_url": "https://github.com/rust-lang/rust/commit/1fc29ef0c8c35eacf7d72e5eb0e7c961009ab4c9"}, {"sha": "926504c8853458dcde5f4ab66a10e11a6fcda2e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/926504c8853458dcde5f4ab66a10e11a6fcda2e7", "html_url": "https://github.com/rust-lang/rust/commit/926504c8853458dcde5f4ab66a10e11a6fcda2e7"}], "stats": {"total": 104, "additions": 72, "deletions": 32}, "files": [{"sha": "c51061067dc1e72867c1c7197cc38f2e46fd7727", "filename": "src/libcollections/hashmap.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/30bf73fd789ad1414284f59b005e85304ff963ad/src%2Flibcollections%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bf73fd789ad1414284f59b005e85304ff963ad/src%2Flibcollections%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhashmap.rs?ref=30bf73fd789ad1414284f59b005e85304ff963ad", "patch": "@@ -2003,6 +2003,20 @@ mod test_map {\n         assert_eq!(m1, m2);\n     }\n \n+    #[test]\n+    fn test_show() {\n+        let mut map: HashMap<int, int> = HashMap::new();\n+        let empty: HashMap<int, int> = HashMap::new();\n+\n+        map.insert(1, 2);\n+        map.insert(3, 4);\n+\n+        let map_str = format!(\"{}\", map);\n+\n+        assert!(map_str == \"{1: 2, 3: 4}\".to_owned() || map_str == \"{3: 4, 1: 2}\".to_owned());\n+        assert_eq!(format!(\"{}\", empty), \"{}\".to_owned());\n+    }\n+\n     #[test]\n     fn test_expand() {\n         let mut m = HashMap::new();"}, {"sha": "fb663d91131af970c3204f824299c3e3713e7f48", "filename": "src/libcollections/treemap.rs", "status": "modified", "additions": 58, "deletions": 2, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/30bf73fd789ad1414284f59b005e85304ff963ad/src%2Flibcollections%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bf73fd789ad1414284f59b005e85304ff963ad/src%2Flibcollections%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftreemap.rs?ref=30bf73fd789ad1414284f59b005e85304ff963ad", "patch": "@@ -12,9 +12,11 @@\n //! trees. The only requirement for the types is that the key implements\n //! `TotalOrd`.\n \n-use std::iter;\n-use std::iter::{Peekable};\n use std::cmp::Ordering;\n+use std::fmt::Show;\n+use std::fmt;\n+use std::iter::Peekable;\n+use std::iter;\n use std::mem::{replace, swap};\n use std::ptr;\n \n@@ -67,6 +69,19 @@ impl<K: Ord + TotalOrd, V: Ord> Ord for TreeMap<K, V> {\n     fn lt(&self, other: &TreeMap<K, V>) -> bool { lt(self, other) }\n }\n \n+impl<K: TotalOrd + Show, V: Show> Show for TreeMap<K, V> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        try!(write!(f, r\"\\{\"));\n+\n+        for (i, (k, v)) in self.iter().enumerate() {\n+            if i != 0 { try!(write!(f, \", \")); }\n+            try!(write!(f, \"{}: {}\", *k, *v));\n+        }\n+\n+        write!(f, r\"\\}\")\n+    }\n+}\n+\n impl<K: TotalOrd, V> Container for TreeMap<K, V> {\n     fn len(&self) -> uint { self.length }\n }\n@@ -547,6 +562,19 @@ impl<T: Ord + TotalOrd> Ord for TreeSet<T> {\n     fn lt(&self, other: &TreeSet<T>) -> bool { self.map < other.map }\n }\n \n+impl<T: TotalOrd + Show> Show for TreeSet<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        try!(write!(f, r\"\\{\"));\n+\n+        for (i, x) in self.iter().enumerate() {\n+            if i != 0 { try!(write!(f, \", \")); }\n+            try!(write!(f, \"{}\", *x));\n+        }\n+\n+        write!(f, r\"\\}\")\n+    }\n+}\n+\n impl<T: TotalOrd> Container for TreeSet<T> {\n     #[inline]\n     fn len(&self) -> uint { self.map.len() }\n@@ -1328,6 +1356,20 @@ mod test_treemap {\n         assert!(a < b && a <= b);\n     }\n \n+    #[test]\n+    fn test_show() {\n+        let mut map: TreeMap<int, int> = TreeMap::new();\n+        let empty: TreeMap<int, int> = TreeMap::new();\n+\n+        map.insert(1, 2);\n+        map.insert(3, 4);\n+\n+        let map_str = format!(\"{}\", map);\n+\n+        assert!(map_str == \"{1: 2, 3: 4}\".to_owned());\n+        assert_eq!(format!(\"{}\", empty), \"{}\".to_owned());\n+    }\n+\n     #[test]\n     fn test_lazy_iterator() {\n         let mut m = TreeMap::new();\n@@ -1723,4 +1765,18 @@ mod test_set {\n             assert!(set.contains(x));\n         }\n     }\n+\n+    #[test]\n+    fn test_show() {\n+        let mut set: TreeSet<int> = TreeSet::new();\n+        let empty: TreeSet<int> = TreeSet::new();\n+\n+        set.insert(1);\n+        set.insert(2);\n+\n+        let set_str = format!(\"{}\", set);\n+\n+        assert!(set_str == \"{1, 2}\".to_owned());\n+        assert_eq!(format!(\"{}\", empty), \"{}\".to_owned());\n+    }\n }"}, {"sha": "0991c22d4a3c15a0f406e5b3b47eb9384c0d01ee", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/30bf73fd789ad1414284f59b005e85304ff963ad/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bf73fd789ad1414284f59b005e85304ff963ad/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=30bf73fd789ad1414284f59b005e85304ff963ad", "patch": "@@ -1434,36 +1434,6 @@ impl<T: Iterator<char>> Parser<T> {\n                         },\n                     },\n                     _ => return self.error(InvalidEscape),\n-/*=======\n-                    'u' => {\n-                        // Parse \\u1234.\n-                        let mut i = 0u;\n-                        let mut n = 0u;\n-                        while i < 4u && !self.eof() {\n-                            self.bump();\n-                            n = match self.ch_or_null() {\n-                                c @ '0' .. '9' => n * 16u + (c as uint) - ('0' as uint),\n-                                'a' | 'A' => n * 16u + 10u,\n-                                'b' | 'B' => n * 16u + 11u,\n-                                'c' | 'C' => n * 16u + 12u,\n-                                'd' | 'D' => n * 16u + 13u,\n-                                'e' | 'E' => n * 16u + 14u,\n-                                'f' | 'F' => n * 16u + 15u,\n-                                _ => return self.error(UnrecognizedHex)\n-                            };\n-\n-                            i += 1u;\n-                        }\n-\n-                        // Error out if we didn't parse 4 digits.\n-                        if i != 4u {\n-                            return self.error(NotFourDigit);\n-                        }\n-\n-                        res.push_char(char::from_u32(n as u32).unwrap());\n-                    }\n-                    _ => return self.error(InvalidEscape),\n->>>>>>> Add a streaming parser to serialize::json.*/\n                 }\n                 escape = false;\n             } else if self.ch_is('\\\\') {"}]}