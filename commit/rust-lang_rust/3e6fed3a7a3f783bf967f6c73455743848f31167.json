{"sha": "3e6fed3a7a3f783bf967f6c73455743848f31167", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlNmZlZDNhN2EzZjc4M2JmOTY3ZjZjNzM0NTU3NDM4NDhmMzExNjc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-03-08T21:42:32Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-03-08T21:44:14Z"}, "message": "rustbuild: Add the error-index-generator\n\nThis adds a step and a rule for building the error index as part of rustbuild.", "tree": {"sha": "6baf0a53c21e5e239f64138adce104c422a1da5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6baf0a53c21e5e239f64138adce104c422a1da5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e6fed3a7a3f783bf967f6c73455743848f31167", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e6fed3a7a3f783bf967f6c73455743848f31167", "html_url": "https://github.com/rust-lang/rust/commit/3e6fed3a7a3f783bf967f6c73455743848f31167", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e6fed3a7a3f783bf967f6c73455743848f31167/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9cb96a56ab6dc883703928825ec7587db74dc1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9cb96a56ab6dc883703928825ec7587db74dc1e", "html_url": "https://github.com/rust-lang/rust/commit/e9cb96a56ab6dc883703928825ec7587db74dc1e"}], "stats": {"total": 78, "additions": 61, "deletions": 17}, "files": [{"sha": "4099da59893c1f25af6094c3ca984bdc95d60130", "filename": "mk/crates.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6fed3a7a3f783bf967f6c73455743848f31167/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3e6fed3a7a3f783bf967f6c73455743848f31167/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=3e6fed3a7a3f783bf967f6c73455743848f31167", "patch": "@@ -126,7 +126,7 @@ TOOL_SOURCE_compiletest := $(S)src/compiletest/compiletest.rs\n TOOL_SOURCE_rustdoc := $(S)src/driver/driver.rs\n TOOL_SOURCE_rustc := $(S)src/driver/driver.rs\n TOOL_SOURCE_rustbook := $(S)src/tools/rustbook/main.rs\n-TOOL_SOURCE_error_index_generator := $(S)src/error_index_generator/main.rs\n+TOOL_SOURCE_error_index_generator := $(S)src/tools/error_index_generator/main.rs\n \n ONLY_RLIB_core := 1\n ONLY_RLIB_libc := 1"}, {"sha": "51bf752e06d342452455a7d3b2f0c9d2e2a5839d", "filename": "src/bootstrap/build/doc.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3e6fed3a7a3f783bf967f6c73455743848f31167/src%2Fbootstrap%2Fbuild%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6fed3a7a3f783bf967f6c73455743848f31167/src%2Fbootstrap%2Fbuild%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fdoc.rs?ref=3e6fed3a7a3f783bf967f6c73455743848f31167", "patch": "@@ -139,3 +139,16 @@ pub fn rustc(build: &Build, stage: u32, host: &str, out: &Path) {\n     build.run(&mut cargo);\n     cp_r(&out_dir, out)\n }\n+\n+pub fn error_index(build: &Build, stage: u32, host: &str, out: &Path) {\n+    println!(\"Documenting stage{} error index ({})\", stage, host);\n+    let compiler = Compiler::new(stage, host);\n+    let mut index = Command::new(build.tool(&compiler, \"error_index_generator\"));\n+    index.arg(\"html\");\n+    index.arg(out.join(\"error-index.html\"));\n+\n+    // FIXME: shouldn't have to pass this env var\n+    index.env(\"CFG_BUILD\", &build.config.build);\n+\n+    build.run(&mut index);\n+}"}, {"sha": "058f27c33f60799d7f4fc767fa7d9462ae7cbf83", "filename": "src/bootstrap/build/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3e6fed3a7a3f783bf967f6c73455743848f31167/src%2Fbootstrap%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6fed3a7a3f783bf967f6c73455743848f31167/src%2Fbootstrap%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fmod.rs?ref=3e6fed3a7a3f783bf967f6c73455743848f31167", "patch": "@@ -178,6 +178,10 @@ impl Build {\n                 ToolRustbook { stage } => {\n                     compile::tool(self, stage, target.target, \"rustbook\");\n                 }\n+                ToolErrorIndex { stage } => {\n+                    compile::tool(self, stage, target.target,\n+                                  \"error_index_generator\");\n+                }\n                 DocBook { stage } => {\n                     doc::rustbook(self, stage, target.target, \"book\", &doc_out);\n                 }\n@@ -198,6 +202,9 @@ impl Build {\n                 DocRustc { stage } => {\n                     doc::rustc(self, stage, target.target, &doc_out);\n                 }\n+                DocErrorIndex { stage } => {\n+                    doc::error_index(self, stage, target.target, &doc_out);\n+                }\n \n                 CheckLinkcheck { stage } => {\n                     check::linkcheck(self, stage, target.target);"}, {"sha": "720ba4fd2094dc63d58ae010713139afbfe3a822", "filename": "src/bootstrap/build/step.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3e6fed3a7a3f783bf967f6c73455743848f31167/src%2Fbootstrap%2Fbuild%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6fed3a7a3f783bf967f6c73455743848f31167/src%2Fbootstrap%2Fbuild%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fstep.rs?ref=3e6fed3a7a3f783bf967f6c73455743848f31167", "patch": "@@ -48,6 +48,7 @@ macro_rules! targets {\n             // Various tools that we can build as part of the build.\n             (tool_linkchecker, ToolLinkchecker { stage: u32 }),\n             (tool_rustbook, ToolRustbook { stage: u32 }),\n+            (tool_error_index, ToolErrorIndex { stage: u32 }),\n \n             // Steps for long-running native builds. Ideally these wouldn't\n             // actually exist and would be part of build scripts, but for now\n@@ -68,6 +69,7 @@ macro_rules! targets {\n             (doc_standalone, DocStandalone { stage: u32 }),\n             (doc_std, DocStd { stage: u32 }),\n             (doc_rustc, DocRustc { stage: u32 }),\n+            (doc_error_index, DocErrorIndex { stage: u32 }),\n \n             // Steps for running tests. The 'check' target is just a pseudo\n             // target to depend on a bunch of others.\n@@ -265,6 +267,9 @@ impl<'a> Step<'a> {\n             Source::DocStyle { stage } => {\n                 vec![self.tool_rustbook(stage)]\n             }\n+            Source::DocErrorIndex { stage } => {\n+                vec![self.tool_error_index(stage)]\n+            }\n             Source::DocStandalone { stage } => {\n                 vec![self.rustc(stage)]\n             }\n@@ -274,7 +279,8 @@ impl<'a> Step<'a> {\n             Source::Doc { stage } => {\n                 vec![self.doc_book(stage), self.doc_nomicon(stage),\n                      self.doc_style(stage), self.doc_standalone(stage),\n-                     self.doc_std(stage)]\n+                     self.doc_std(stage),\n+                     self.doc_error_index(stage)]\n             }\n             Source::Check { stage, compiler: _ } => {\n                 vec![self.check_linkcheck(stage)]\n@@ -286,6 +292,7 @@ impl<'a> Step<'a> {\n             Source::ToolLinkchecker { stage } => {\n                 vec![self.libstd(stage, self.compiler(stage))]\n             }\n+            Source::ToolErrorIndex { stage } |\n             Source::ToolRustbook { stage } => {\n                 vec![self.librustc(stage, self.compiler(stage))]\n             }"}, {"sha": "b7d2cfcaaa1a8c04f58b697beb60ff6385a15906", "filename": "src/tools/error_index_generator/Cargo.lock", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e6fed3a7a3f783bf967f6c73455743848f31167/src%2Ftools%2Ferror_index_generator%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/3e6fed3a7a3f783bf967f6c73455743848f31167/src%2Ftools%2Ferror_index_generator%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2FCargo.lock?ref=3e6fed3a7a3f783bf967f6c73455743848f31167", "patch": "@@ -0,0 +1,4 @@\n+[root]\n+name = \"error_index_generator\"\n+version = \"0.0.0\"\n+"}, {"sha": "5c5ca273e9ca39f931988c49b5f83b6537e46dd0", "filename": "src/tools/error_index_generator/Cargo.toml", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e6fed3a7a3f783bf967f6c73455743848f31167/src%2Ftools%2Ferror_index_generator%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3e6fed3a7a3f783bf967f6c73455743848f31167/src%2Ftools%2Ferror_index_generator%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2FCargo.toml?ref=3e6fed3a7a3f783bf967f6c73455743848f31167", "patch": "@@ -0,0 +1,8 @@\n+[package]\n+authors = [\"The Rust Project Developers\"]\n+name = \"error_index_generator\"\n+version = \"0.0.0\"\n+\n+[[bin]]\n+name = \"error_index_generator\"\n+path = \"main.rs\""}, {"sha": "4343aef00a9081a548743f1390c38588ad28e5fd", "filename": "src/tools/error_index_generator/main.rs", "status": "renamed", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3e6fed3a7a3f783bf967f6c73455743848f31167/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6fed3a7a3f783bf967f6c73455743848f31167/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fmain.rs?ref=3e6fed3a7a3f783bf967f6c73455743848f31167", "patch": "@@ -15,11 +15,12 @@ extern crate rustdoc;\n extern crate serialize as rustc_serialize;\n \n use std::collections::BTreeMap;\n+use std::env;\n+use std::error::Error;\n use std::fs::{read_dir, File};\n use std::io::{Read, Write};\n-use std::env;\n use std::path::Path;\n-use std::error::Error;\n+use std::path::PathBuf;\n \n use syntax::diagnostics::metadata::{get_metadata_dir, ErrorMetadataMap, ErrorMetadata};\n \n@@ -173,31 +174,35 @@ fn render_error_page<T: Formatter>(err_map: &ErrorMetadataMap, output_path: &Pat\n     formatter.footer(&mut output_file)\n }\n \n-fn main_with_result(format: OutputFormat) -> Result<(), Box<Error>> {\n+fn main_with_result(format: OutputFormat, dst: &Path) -> Result<(), Box<Error>> {\n     let build_arch = try!(env::var(\"CFG_BUILD\"));\n     let metadata_dir = get_metadata_dir(&build_arch);\n     let err_map = try!(load_all_errors(&metadata_dir));\n     match format {\n         OutputFormat::Unknown(s)  => panic!(\"Unknown output format: {}\", s),\n-        OutputFormat::HTML(h)     => try!(render_error_page(&err_map,\n-                                                            Path::new(\"doc/error-index.html\"),\n-                                                            h)),\n-        OutputFormat::Markdown(m) => try!(render_error_page(&err_map,\n-                                                            Path::new(\"doc/error-index.md\"),\n-                                                            m)),\n+        OutputFormat::HTML(h)     => try!(render_error_page(&err_map, dst, h)),\n+        OutputFormat::Markdown(m) => try!(render_error_page(&err_map, dst, m)),\n     }\n     Ok(())\n }\n \n-fn parse_args() -> OutputFormat {\n-    for arg in env::args().skip(1) {\n-        return OutputFormat::from(&arg);\n-    }\n-    OutputFormat::from(\"html\")\n+fn parse_args() -> (OutputFormat, PathBuf) {\n+    let mut args = env::args().skip(1);\n+    let format = args.next().map(|a| OutputFormat::from(&a))\n+                            .unwrap_or(OutputFormat::from(\"html\"));\n+    let dst = args.next().map(PathBuf::from).unwrap_or_else(|| {\n+        match format {\n+            OutputFormat::HTML(..) => PathBuf::from(\"doc/error-index.html\"),\n+            OutputFormat::Markdown(..) => PathBuf::from(\"doc/error-index.md\"),\n+            OutputFormat::Unknown(..) => PathBuf::from(\"<nul>\"),\n+        }\n+    });\n+    (format, dst)\n }\n \n fn main() {\n-    if let Err(e) = main_with_result(parse_args()) {\n+    let (format, dst) = parse_args();\n+    if let Err(e) = main_with_result(format, &dst) {\n         panic!(\"{}\", e.description());\n     }\n }", "previous_filename": "src/error_index_generator/main.rs"}]}