{"sha": "9d7b13004192b8eef1f68501035d05c85dee8c47", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkN2IxMzAwNDE5MmI4ZWVmMWY2ODUwMTAzNWQwNWM4NWRlZThjNDc=", "commit": {"author": {"name": "Benjamin Herr", "email": "ben@0x539.de", "date": "2013-10-08T00:49:10Z"}, "committer": {"name": "Benjamin Herr", "email": "ben@0x539.de", "date": "2013-10-08T01:43:28Z"}, "message": "add new enum ast::StrStyle as field to ast::lit_str\n\nFor the benefit of the pretty printer we want to keep track of how\nstring literals in the ast were originally represented in the source\ncode.\n\nThis commit changes parser functions so they don't extract strings from\nthe token stream without at least also returning what style of string\nliteral it was. This is stored in the resulting ast node for string\nliterals, obviously, for the package id in `extern mod = r\"package id\"`\nview items, for the inline asm in `asm!()` invocations.\n\nFor `asm!()`'s other arguments or for `extern \"Rust\" fn()` items, I just\nthe style of string, because it seemed disproportionally cumbersome to\nthread that information through the string processing that happens with\nthose string literals, given the limited advantage raw string literals\nwould provide in these positions.\n\nThe other syntax extensions don't seem to store passed string literals\nin the ast, so they also discard the style of strings they parse.", "tree": {"sha": "c96d00a2f583c825b91836764219440f5b9cb7b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c96d00a2f583c825b91836764219440f5b9cb7b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d7b13004192b8eef1f68501035d05c85dee8c47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d7b13004192b8eef1f68501035d05c85dee8c47", "html_url": "https://github.com/rust-lang/rust/commit/9d7b13004192b8eef1f68501035d05c85dee8c47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d7b13004192b8eef1f68501035d05c85dee8c47/comments", "author": {"login": "ben0x539", "id": 24142, "node_id": "MDQ6VXNlcjI0MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/24142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben0x539", "html_url": "https://github.com/ben0x539", "followers_url": "https://api.github.com/users/ben0x539/followers", "following_url": "https://api.github.com/users/ben0x539/following{/other_user}", "gists_url": "https://api.github.com/users/ben0x539/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben0x539/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben0x539/subscriptions", "organizations_url": "https://api.github.com/users/ben0x539/orgs", "repos_url": "https://api.github.com/users/ben0x539/repos", "events_url": "https://api.github.com/users/ben0x539/events{/privacy}", "received_events_url": "https://api.github.com/users/ben0x539/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ben0x539", "id": 24142, "node_id": "MDQ6VXNlcjI0MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/24142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben0x539", "html_url": "https://github.com/ben0x539", "followers_url": "https://api.github.com/users/ben0x539/followers", "following_url": "https://api.github.com/users/ben0x539/following{/other_user}", "gists_url": "https://api.github.com/users/ben0x539/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben0x539/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben0x539/subscriptions", "organizations_url": "https://api.github.com/users/ben0x539/orgs", "repos_url": "https://api.github.com/users/ben0x539/repos", "events_url": "https://api.github.com/users/ben0x539/events{/privacy}", "received_events_url": "https://api.github.com/users/ben0x539/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97878725532c4d1dd1af07e88175462178d78cdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/97878725532c4d1dd1af07e88175462178d78cdb", "html_url": "https://github.com/rust-lang/rust/commit/97878725532c4d1dd1af07e88175462178d78cdb"}], "stats": {"total": 165, "additions": 92, "deletions": 73}, "files": [{"sha": "aad2228f66fda6a04126541f6514adebddc8e0c1", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=9d7b13004192b8eef1f68501035d05c85dee8c47", "patch": "@@ -407,7 +407,7 @@ fn mk_test_desc_and_fn_rec(cx: &TestCtxt, test: &Test) -> @ast::Expr {\n     debug2!(\"encoding {}\", ast_util::path_name_i(path));\n \n     let name_lit: ast::lit =\n-        nospan(ast::lit_str(ast_util::path_name_i(path).to_managed()));\n+        nospan(ast::lit_str(ast_util::path_name_i(path).to_managed(), ast::CookedStr));\n \n     let name_expr = @ast::Expr {\n           id: ast::DUMMY_NODE_ID,"}, {"sha": "fd4f31c3dc75f4392bc213eed3d1da501c071263", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=9d7b13004192b8eef1f68501035d05c85dee8c47", "patch": "@@ -142,7 +142,7 @@ fn visit_view_item(e: @mut Env, i: &ast::view_item) {\n           let ident = token::ident_to_str(&ident);\n           let meta_items = match path_opt {\n               None => meta_items.clone(),\n-              Some(p) => {\n+              Some((p, _path_str_style)) => {\n                   let p_path = Path(p);\n                   match p_path.filestem() {\n                       Some(s) =>"}, {"sha": "75564f039bf3f34289b54f9607ecb8d937006c56", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=9d7b13004192b8eef1f68501035d05c85dee8c47", "patch": "@@ -1446,7 +1446,7 @@ fn encode_meta_item(ebml_w: &mut writer::Encoder, mi: @MetaItem) {\n       }\n       MetaNameValue(name, value) => {\n         match value.node {\n-          lit_str(value) => {\n+          lit_str(value, _) => {\n             ebml_w.start_tag(tag_meta_item_name_value);\n             ebml_w.start_tag(tag_meta_item_name);\n             ebml_w.writer.write(name.as_bytes());"}, {"sha": "dd624a882839abb9428c85eb46143332d6fb56f0", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=9d7b13004192b8eef1f68501035d05c85dee8c47", "patch": "@@ -86,7 +86,7 @@ pub fn check_pat(v: &mut CheckCrateVisitor, p: @Pat, _is_const: bool) {\n         match e.node {\n             ExprVstore(\n                 @Expr { node: ExprLit(@codemap::Spanned {\n-                    node: lit_str(_),\n+                    node: lit_str(*),\n                     _}),\n                        _ },\n                 ExprVstoreUniq\n@@ -120,7 +120,7 @@ pub fn check_expr(v: &mut CheckCrateVisitor,\n                           \"disallowed operator in constant expression\");\n             return;\n           }\n-          ExprLit(@codemap::Spanned {node: lit_str(_), _}) => { }\n+          ExprLit(@codemap::Spanned {node: lit_str(*), _}) => { }\n           ExprBinary(*) | ExprUnary(*) => {\n             if method_map.contains_key(&e.id) {\n                 sess.span_err(e.span, \"user-defined operators are not \\"}, {"sha": "77cba0f33eae29fc962726386c8716d1fcdfee08", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=9d7b13004192b8eef1f68501035d05c85dee8c47", "patch": "@@ -475,7 +475,7 @@ pub fn eval_const_expr_partial<T: ty::ExprTyProvider>(tcx: &T, e: &Expr)\n \n pub fn lit_to_const(lit: &lit) -> const_val {\n     match lit.node {\n-      lit_str(s) => const_str(s),\n+      lit_str(s, _) => const_str(s),\n       lit_char(n) => const_uint(n as u64),\n       lit_int(n, _) => const_int(n),\n       lit_uint(n, _) => const_uint(n),"}, {"sha": "dd938b5a60f8d7c997f865f55f7e876afc31c591", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=9d7b13004192b8eef1f68501035d05c85dee8c47", "patch": "@@ -71,7 +71,7 @@ pub fn const_lit(cx: &mut CrateContext, e: &ast::Expr, lit: ast::lit)\n       }\n       ast::lit_bool(b) => C_bool(b),\n       ast::lit_nil => C_nil(),\n-      ast::lit_str(s) => C_estr_slice(cx, s)\n+      ast::lit_str(s, _) => C_estr_slice(cx, s)\n     }\n }\n "}, {"sha": "df5e69f0b4fdb4799cc97e6046ad80bf232cf66b", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=9d7b13004192b8eef1f68501035d05c85dee8c47", "patch": "@@ -705,7 +705,7 @@ fn trans_rvalue_dps_unadjusted(bcx: @mut Block, expr: &ast::Expr,\n                 args.iter().enumerate().map(|(i, arg)| (i, *arg)).collect();\n             return trans_adt(bcx, repr, 0, numbered_fields, None, dest);\n         }\n-        ast::ExprLit(@codemap::Spanned {node: ast::lit_str(s), _}) => {\n+        ast::ExprLit(@codemap::Spanned {node: ast::lit_str(s, _), _}) => {\n             return tvec::trans_lit_str(bcx, expr, s, dest);\n         }\n         ast::ExprVstore(contents, ast::ExprVstoreSlice) |"}, {"sha": "7bcbedf50f75fd385dba50cb22f962aa053a59ae", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=9d7b13004192b8eef1f68501035d05c85dee8c47", "patch": "@@ -205,7 +205,7 @@ pub fn trans_slice_vstore(bcx: @mut Block,\n \n     // Handle the &\"...\" case:\n     match content_expr.node {\n-        ast::ExprLit(@codemap::Spanned {node: ast::lit_str(s), span: _}) => {\n+        ast::ExprLit(@codemap::Spanned {node: ast::lit_str(s, _), span: _}) => {\n             return trans_lit_str(bcx, content_expr, s, dest);\n         }\n         _ => {}\n@@ -296,7 +296,7 @@ pub fn trans_uniq_or_managed_vstore(bcx: @mut Block, heap: heap, vstore_expr: &a\n         heap_exchange => {\n             match content_expr.node {\n                 ast::ExprLit(@codemap::Spanned {\n-                    node: ast::lit_str(s), span\n+                    node: ast::lit_str(s, _), span\n                 }) => {\n                     let llptrval = C_cstr(bcx.ccx(), s);\n                     let llptrval = PointerCast(bcx, llptrval, Type::i8p());\n@@ -357,7 +357,7 @@ pub fn write_content(bcx: @mut Block,\n     let _indenter = indenter();\n \n     match content_expr.node {\n-        ast::ExprLit(@codemap::Spanned { node: ast::lit_str(s), _ }) => {\n+        ast::ExprLit(@codemap::Spanned { node: ast::lit_str(s, _), _ }) => {\n             match dest {\n                 Ignore => {\n                     return bcx;\n@@ -490,7 +490,7 @@ pub fn elements_required(bcx: @mut Block, content_expr: &ast::Expr) -> uint {\n     //! Figure out the number of elements we need to store this content\n \n     match content_expr.node {\n-        ast::ExprLit(@codemap::Spanned { node: ast::lit_str(s), _ }) => {\n+        ast::ExprLit(@codemap::Spanned { node: ast::lit_str(s, _), _ }) => {\n             s.len()\n         },\n         ast::ExprVec(ref es, _) => es.len(),"}, {"sha": "d14e81244596a413765c315062020b1a5979f218", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=9d7b13004192b8eef1f68501035d05c85dee8c47", "patch": "@@ -3266,7 +3266,7 @@ pub fn expr_kind(tcx: ctxt,\n         ast::ExprDoBody(*) |\n         ast::ExprBlock(*) |\n         ast::ExprRepeat(*) |\n-        ast::ExprLit(@codemap::Spanned {node: lit_str(_), _}) |\n+        ast::ExprLit(@codemap::Spanned {node: lit_str(*), _}) |\n         ast::ExprVstore(_, ast::ExprVstoreSlice) |\n         ast::ExprVstore(_, ast::ExprVstoreMutSlice) |\n         ast::ExprVec(*) => {"}, {"sha": "ec5ee3838b1875edb17674a37745b554d8e53d84", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=9d7b13004192b8eef1f68501035d05c85dee8c47", "patch": "@@ -2259,7 +2259,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n     match expr.node {\n       ast::ExprVstore(ev, vst) => {\n         let typ = match ev.node {\n-          ast::ExprLit(@codemap::Spanned { node: ast::lit_str(_), _ }) => {\n+          ast::ExprLit(@codemap::Spanned { node: ast::lit_str(*), _ }) => {\n             let tt = ast_expr_vstore_to_vstore(fcx, ev, vst);\n             ty::mk_estr(tcx, tt)\n           }"}, {"sha": "54b8a5c038d965cd29947836e7abd088559888a3", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=9d7b13004192b8eef1f68501035d05c85dee8c47", "patch": "@@ -1008,7 +1008,7 @@ impl Clean<ViewItemInner> for ast::view_item_ {\n     fn clean(&self) -> ViewItemInner {\n         match self {\n             &ast::view_item_extern_mod(ref i, ref p, ref mi, ref id) =>\n-                ExternMod(i.clean(), p.map(|x| x.to_owned()),  mi.clean(), *id),\n+                ExternMod(i.clean(), p.map(|&(ref x, _)| x.to_owned()),  mi.clean(), *id),\n             &ast::view_item_use(ref vp) => Import(vp.clean())\n         }\n     }\n@@ -1114,7 +1114,7 @@ impl ToSource for syntax::codemap::Span {\n \n fn lit_to_str(lit: &ast::lit) -> ~str {\n     match lit.node {\n-        ast::lit_str(st) => st.to_owned(),\n+        ast::lit_str(st, _) => st.to_owned(),\n         ast::lit_char(c) => ~\"'\" + std::char::from_u32(c).unwrap().to_str() + \"'\",\n         ast::lit_int(i, _t) => i.to_str(),\n         ast::lit_uint(u, _t) => u.to_str(),"}, {"sha": "d7138139bc1b6f4dd2e8664acbae2aa6846b600b", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=9d7b13004192b8eef1f68501035d05c85dee8c47", "patch": "@@ -406,7 +406,7 @@ impl<'self> Visitor<()> for ViewItemVisitor<'self> {\n             // ignore metadata, I guess\n             ast::view_item_extern_mod(lib_ident, path_opt, _, _) => {\n                 let lib_name = match path_opt {\n-                    Some(p) => p,\n+                    Some((p, _)) => p,\n                     None => self.sess.str_of(lib_ident)\n                 };\n                 debug2!(\"Finding and installing... {}\", lib_name);\n@@ -513,7 +513,7 @@ pub fn find_and_install_dependencies(context: &BuildContext,\n \n pub fn mk_string_lit(s: @str) -> ast::lit {\n     Spanned {\n-        node: ast::lit_str(s),\n+        node: ast::lit_str(s, ast::CookedStr),\n         span: dummy_sp()\n     }\n }"}, {"sha": "63c2f0e519147fb01adca39fd689c3311acd0cc8", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=9d7b13004192b8eef1f68501035d05c85dee8c47", "patch": "@@ -680,11 +680,17 @@ pub enum mac_ {\n     mac_invoc_tt(Path,~[token_tree],SyntaxContext),   // new macro-invocation\n }\n \n+#[deriving(Clone, Eq, Encodable, Decodable, IterBytes)]\n+pub enum StrStyle {\n+    CookedStr,\n+    RawStr(uint)\n+}\n+\n pub type lit = Spanned<lit_>;\n \n #[deriving(Clone, Eq, Encodable, Decodable, IterBytes)]\n pub enum lit_ {\n-    lit_str(@str),\n+    lit_str(@str, StrStyle),\n     lit_char(u32),\n     lit_int(i64, int_ty),\n     lit_uint(u64, uint_ty),\n@@ -862,6 +868,7 @@ pub enum asm_dialect {\n #[deriving(Clone, Eq, Encodable, Decodable, IterBytes)]\n pub struct inline_asm {\n     asm: @str,\n+    asm_str_style: StrStyle,\n     clobbers: @str,\n     inputs: ~[(@str, @Expr)],\n     outputs: ~[(@str, @Expr)],\n@@ -1027,7 +1034,7 @@ pub enum view_item_ {\n     // optional @str: if present, this is a location (containing\n     // arbitrary characters) from which to fetch the crate sources\n     // For example, extern mod whatever = \"github.com/mozilla/rust\"\n-    view_item_extern_mod(Ident, Option<@str>, ~[@MetaItem], NodeId),\n+    view_item_extern_mod(Ident, Option<(@str, StrStyle)>, ~[@MetaItem], NodeId),\n     view_item_use(~[@view_path]),\n }\n "}, {"sha": "d9a23f6eb35cf6d7edf5f81f0d6d8d69ff604625", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=9d7b13004192b8eef1f68501035d05c85dee8c47", "patch": "@@ -67,7 +67,7 @@ impl AttrMetaMethods for MetaItem {\n         match self.node {\n             MetaNameValue(_, ref v) => {\n                 match v.node {\n-                    ast::lit_str(s) => Some(s),\n+                    ast::lit_str(s, _) => Some(s),\n                     _ => None,\n                 }\n             },\n@@ -127,7 +127,7 @@ impl AttributeMethods for Attribute {\n /* Constructors */\n \n pub fn mk_name_value_item_str(name: @str, value: @str) -> @MetaItem {\n-    let value_lit = dummy_spanned(ast::lit_str(value));\n+    let value_lit = dummy_spanned(ast::lit_str(value, ast::CookedStr));\n     mk_name_value_item(name, value_lit)\n }\n \n@@ -153,7 +153,7 @@ pub fn mk_attr(item: @MetaItem) -> Attribute {\n \n pub fn mk_sugared_doc_attr(text: @str, lo: BytePos, hi: BytePos) -> Attribute {\n     let style = doc_comment_style(text);\n-    let lit = spanned(lo, hi, ast::lit_str(text));\n+    let lit = spanned(lo, hi, ast::lit_str(text, ast::CookedStr));\n     let attr = Attribute_ {\n         style: style,\n         value: @spanned(lo, hi, MetaNameValue(@\"doc\", lit)),"}, {"sha": "e836367555a74136b66c6def808aa134aa1e8639", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=9d7b13004192b8eef1f68501035d05c85dee8c47", "patch": "@@ -44,6 +44,7 @@ pub fn expand_asm(cx: @ExtCtxt, sp: Span, tts: &[ast::token_tree])\n                                        tts.to_owned());\n \n     let mut asm = @\"\";\n+    let mut asm_str_style = None;\n     let mut outputs = ~[];\n     let mut inputs = ~[];\n     let mut cons = ~\"\";\n@@ -58,8 +59,11 @@ pub fn expand_asm(cx: @ExtCtxt, sp: Span, tts: &[ast::token_tree])\n     while continue_ {\n         match state {\n             Asm => {\n-                asm = expr_to_str(cx, p.parse_expr(),\n-                                  \"inline assembly must be a string literal.\");\n+                let (s, style) =\n+                    expr_to_str(cx, p.parse_expr(),\n+                                \"inline assembly must be a string literal.\");\n+                asm = s;\n+                asm_str_style = Some(style);\n             }\n             Outputs => {\n                 while *p.token != token::EOF &&\n@@ -70,7 +74,7 @@ pub fn expand_asm(cx: @ExtCtxt, sp: Span, tts: &[ast::token_tree])\n                         p.eat(&token::COMMA);\n                     }\n \n-                    let constraint = p.parse_str();\n+                    let (constraint, _str_style) = p.parse_str();\n                     p.expect(&token::LPAREN);\n                     let out = p.parse_expr();\n                     p.expect(&token::RPAREN);\n@@ -93,7 +97,7 @@ pub fn expand_asm(cx: @ExtCtxt, sp: Span, tts: &[ast::token_tree])\n                         p.eat(&token::COMMA);\n                     }\n \n-                    let constraint = p.parse_str();\n+                    let (constraint, _str_style) = p.parse_str();\n                     p.expect(&token::LPAREN);\n                     let input = p.parse_expr();\n                     p.expect(&token::RPAREN);\n@@ -111,14 +115,15 @@ pub fn expand_asm(cx: @ExtCtxt, sp: Span, tts: &[ast::token_tree])\n                         p.eat(&token::COMMA);\n                     }\n \n-                    let clob = format!(\"~\\\\{{}\\\\}\", p.parse_str());\n+                    let (s, _str_style) = p.parse_str();\n+                    let clob = format!(\"~\\\\{{}\\\\}\", s);\n                     clobs.push(clob);\n                 }\n \n                 cons = clobs.connect(\",\");\n             }\n             Options => {\n-                let option = p.parse_str();\n+                let (option, _str_style) = p.parse_str();\n \n                 if \"volatile\" == option {\n                     volatile = true;\n@@ -175,6 +180,7 @@ pub fn expand_asm(cx: @ExtCtxt, sp: Span, tts: &[ast::token_tree])\n         id: ast::DUMMY_NODE_ID,\n         node: ast::ExprInlineAsm(ast::inline_asm {\n             asm: asm,\n+            asm_str_style: asm_str_style.unwrap(),\n             clobbers: cons.to_managed(),\n             inputs: inputs,\n             outputs: outputs,"}, {"sha": "7f89271927c63ff2e256dafad596a5e00efb21b5", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=9d7b13004192b8eef1f68501035d05c85dee8c47", "patch": "@@ -410,10 +410,10 @@ impl ExtCtxt {\n     }\n }\n \n-pub fn expr_to_str(cx: @ExtCtxt, expr: @ast::Expr, err_msg: &str) -> @str {\n+pub fn expr_to_str(cx: @ExtCtxt, expr: @ast::Expr, err_msg: &str) -> (@str, ast::StrStyle) {\n     match expr.node {\n       ast::ExprLit(l) => match l.node {\n-        ast::lit_str(s) => s,\n+        ast::lit_str(s, style) => (s, style),\n         _ => cx.span_fatal(l.span, err_msg)\n       },\n       _ => cx.span_fatal(expr.span, err_msg)"}, {"sha": "a5336187200835e9bb65b932459c2f82c2004f4b", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=9d7b13004192b8eef1f68501035d05c85dee8c47", "patch": "@@ -562,7 +562,7 @@ impl AstBuilder for @ExtCtxt {\n         self.expr_vstore(sp, self.expr_vec(sp, exprs), ast::ExprVstoreSlice)\n     }\n     fn expr_str(&self, sp: Span, s: @str) -> @ast::Expr {\n-        self.expr_lit(sp, ast::lit_str(s))\n+        self.expr_lit(sp, ast::lit_str(s, ast::CookedStr))\n     }\n     fn expr_str_uniq(&self, sp: Span, s: @str) -> @ast::Expr {\n         self.expr_vstore(sp, self.expr_str(sp, s), ast::ExprVstoreUniq)"}, {"sha": "5ebaea2ce44c8d849a68bca8dc1959fc380ddde4", "filename": "src/libsyntax/ext/bytes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibsyntax%2Fext%2Fbytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibsyntax%2Fext%2Fbytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbytes.rs?ref=9d7b13004192b8eef1f68501035d05c85dee8c47", "patch": "@@ -28,7 +28,7 @@ pub fn expand_syntax_ext(cx: @ExtCtxt, sp: Span, tts: &[ast::token_tree]) -> bas\n             // expression is a literal\n             ast::ExprLit(lit) => match lit.node {\n                 // string literal, push each byte to vector expression\n-                ast::lit_str(s) => {\n+                ast::lit_str(s, _) => {\n                     for byte in s.byte_iter() {\n                         bytes.push(cx.expr_u8(expr.span, byte));\n                     }"}, {"sha": "c31c609d4e74afd0001a3279f7682db9c46a31aa", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=9d7b13004192b8eef1f68501035d05c85dee8c47", "patch": "@@ -361,7 +361,7 @@ impl<'self> TraitDef<'self> {\n             span,\n             cx.meta_name_value(span,\n                                @\"doc\",\n-                               ast::lit_str(@\"Automatically derived.\")));\n+                               ast::lit_str(@\"Automatically derived.\", ast::CookedStr)));\n         cx.item(\n             span,\n             ::parse::token::special_idents::clownshoes_extensions,"}, {"sha": "15630e37eadd514ca4e23697d164156172950a6d", "filename": "src/libsyntax/ext/env.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibsyntax%2Fext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibsyntax%2Fext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fenv.rs?ref=9d7b13004192b8eef1f68501035d05c85dee8c47", "patch": "@@ -41,10 +41,13 @@ pub fn expand_env(cx: @ExtCtxt, sp: Span, tts: &[ast::token_tree])\n         cx.span_fatal(sp, \"env! takes 1 or 2 arguments\");\n     }\n \n-    let var = expr_to_str(cx, exprs[0], \"expected string literal\");\n+    let (var, _var_str_style) = expr_to_str(cx, exprs[0], \"expected string literal\");\n     let msg = match exprs.len() {\n         1 => format!(\"Environment variable {} not defined\", var).to_managed(),\n-        2 => expr_to_str(cx, exprs[1], \"expected string literal\"),\n+        2 => {\n+            let (s, _style) = expr_to_str(cx, exprs[1], \"expected string literal\");\n+            s\n+        }\n         _ => cx.span_fatal(sp, \"env! takes 1 or 2 arguments\")\n     };\n "}, {"sha": "8258048a04db1485c02d4941f7cf05ce17076aef", "filename": "src/libsyntax/ext/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ffmt.rs?ref=9d7b13004192b8eef1f68501035d05c85dee8c47", "patch": "@@ -30,7 +30,7 @@ pub fn expand_syntax_ext(cx: @ExtCtxt, sp: Span, tts: &[ast::token_tree])\n     if args.len() == 0 {\n         cx.span_fatal(sp, \"fmt! takes at least 1 argument.\");\n     }\n-    let fmt =\n+    let (fmt, _fmt_str_style) =\n         expr_to_str(cx, args[0],\n                     \"first argument to fmt! must be a string literal.\");\n     let fmtspan = args[0].span;"}, {"sha": "171748e9b2e9943aa13eb5aa48ded356ef863e2d", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=9d7b13004192b8eef1f68501035d05c85dee8c47", "patch": "@@ -722,8 +722,8 @@ pub fn expand_args(ecx: @ExtCtxt, sp: Span,\n         (_, None) => { return MRExpr(ecx.expr_uint(sp, 2)); }\n     };\n     cx.fmtsp = efmt.span;\n-    let fmt = expr_to_str(ecx, efmt,\n-                          \"format argument must be a string literal.\");\n+    let (fmt, _fmt_str_style) = expr_to_str(ecx, efmt,\n+                                            \"format argument must be a string literal.\");\n \n     let mut err = false;\n     do parse::parse_error::cond.trap(|m| {"}, {"sha": "4bef960185523d8e1b8b3db6471e4a05d5af000e", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=9d7b13004192b8eef1f68501035d05c85dee8c47", "patch": "@@ -118,7 +118,7 @@ pub mod rt {\n \n     impl<'self> ToSource for &'self str {\n         fn to_source(&self) -> @str {\n-            let lit = dummy_spanned(ast::lit_str(self.to_managed()));\n+            let lit = dummy_spanned(ast::lit_str(self.to_managed(), ast::CookedStr));\n             pprust::lit_to_str(@lit).to_managed()\n         }\n     }"}, {"sha": "ffebe7980bf5101544f8cfa7e3ddf3768bd1d308", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=9d7b13004192b8eef1f68501035d05c85dee8c47", "patch": "@@ -48,6 +48,7 @@ use ast::{BiRem, required};\n use ast::{ret_style, return_val, BiShl, BiShr, Stmt, StmtDecl};\n use ast::{StmtExpr, StmtSemi, StmtMac, struct_def, struct_field};\n use ast::{struct_variant_kind, BiSub};\n+use ast::StrStyle;\n use ast::{sty_box, sty_region, sty_static, sty_uniq, sty_value};\n use ast::{token_tree, trait_method, trait_ref, tt_delim, tt_seq, tt_tok};\n use ast::{tt_nonterminal, tuple_variant_kind, Ty, ty_, ty_bot, ty_box};\n@@ -1282,8 +1283,8 @@ impl Parser {\n             token::LIT_FLOAT(s, ft) => lit_float(self.id_to_str(s), ft),\n             token::LIT_FLOAT_UNSUFFIXED(s) =>\n                 lit_float_unsuffixed(self.id_to_str(s)),\n-            token::LIT_STR(s) => lit_str(self.id_to_str(s)),\n-            token::LIT_STR_RAW(s, _) => lit_str(self.id_to_str(s)),\n+            token::LIT_STR(s) => lit_str(self.id_to_str(s), ast::CookedStr),\n+            token::LIT_STR_RAW(s, n) => lit_str(self.id_to_str(s), ast::RawStr(n)),\n             token::LPAREN => { self.expect(&token::RPAREN); lit_nil },\n             _ => { self.unexpected_last(tok); }\n         }\n@@ -2158,7 +2159,7 @@ impl Parser {\n                 // HACK: turn &[...] into a &-evec\n                 ex = match e.node {\n                   ExprVec(*) | ExprLit(@codemap::Spanned {\n-                    node: lit_str(_), span: _\n+                    node: lit_str(*), span: _\n                   })\n                   if m == MutImmutable => {\n                     ExprVstore(e, ExprVstoreSlice)\n@@ -2182,7 +2183,7 @@ impl Parser {\n               ExprVec(*) | ExprRepeat(*) if m == MutMutable =>\n                 ExprVstore(e, ExprVstoreMutBox),\n               ExprVec(*) |\n-              ExprLit(@codemap::Spanned { node: lit_str(_), span: _}) |\n+              ExprLit(@codemap::Spanned { node: lit_str(*), span: _}) |\n               ExprRepeat(*) if m == MutImmutable => ExprVstore(e, ExprVstoreBox),\n               _ => self.mk_unary(UnBox(m), e)\n             };\n@@ -2195,7 +2196,7 @@ impl Parser {\n             // HACK: turn ~[...] into a ~-evec\n             ex = match e.node {\n               ExprVec(*) |\n-              ExprLit(@codemap::Spanned { node: lit_str(_), span: _}) |\n+              ExprLit(@codemap::Spanned { node: lit_str(*), span: _}) |\n               ExprRepeat(*) => ExprVstore(e, ExprVstoreUniq),\n               _ => self.mk_unary(UnUniq, e)\n             };\n@@ -2707,7 +2708,7 @@ impl Parser {\n             pat = match sub.node {\n               PatLit(e@@Expr {\n                 node: ExprLit(@codemap::Spanned {\n-                    node: lit_str(_),\n+                    node: lit_str(*),\n                     span: _}), _\n               }) => {\n                 let vst = @Expr {\n@@ -2735,7 +2736,7 @@ impl Parser {\n             pat = match sub.node {\n               PatLit(e@@Expr {\n                 node: ExprLit(@codemap::Spanned {\n-                    node: lit_str(_),\n+                    node: lit_str(*),\n                     span: _}), _\n               }) => {\n                 let vst = @Expr {\n@@ -2764,7 +2765,7 @@ impl Parser {\n               pat = match sub.node {\n                   PatLit(e@@Expr {\n                       node: ExprLit(@codemap::Spanned {\n-                            node: lit_str(_), span: _}), _\n+                            node: lit_str(*), span: _}), _\n                   }) => {\n                       let vst = @Expr {\n                           id: ast::DUMMY_NODE_ID,\n@@ -4373,15 +4374,15 @@ impl Parser {\n                                      abi::all_names().connect(\", \"),\n                                      word));\n                         }\n-                    }\n-                }\n+                     }\n+                 }\n                 Some(abis)\n             }\n \n             _ => {\n                 None\n-            }\n-        }\n+             }\n+         }\n     }\n \n     // parse one of the items or view items allowed by the\n@@ -4932,18 +4933,17 @@ impl Parser {\n         }\n     }\n \n-    pub fn parse_optional_str(&self) -> Option<@str> {\n-        match *self.token {\n-            token::LIT_STR(s)\n-            | token::LIT_STR_RAW(s, _) => {\n-                self.bump();\n-                Some(ident_to_str(&s))\n-            }\n-            _ => None\n-        }\n+    pub fn parse_optional_str(&self) -> Option<(@str, ast::StrStyle)> {\n+        let (s, style) = match *self.token {\n+            token::LIT_STR(s) => (s, ast::CookedStr),\n+            token::LIT_STR_RAW(s, n) => (s, ast::RawStr(n)),\n+            _ => return None\n+        };\n+        self.bump();\n+        Some((ident_to_str(&s), style))\n     }\n \n-    pub fn parse_str(&self) -> @str {\n+    pub fn parse_str(&self) -> (@str, StrStyle) {\n         match self.parse_optional_str() {\n             Some(s) => { s }\n             _ =>  self.fatal(\"expected string literal\")"}, {"sha": "7091a2d5518773201c22f732301bf6bd9720be7d", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7b13004192b8eef1f68501035d05c85dee8c47/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=9d7b13004192b8eef1f68501035d05c85dee8c47", "patch": "@@ -1433,25 +1433,25 @@ pub fn print_expr(s: @ps, expr: &ast::Expr) {\n             word(s.s, \"asm!\");\n         }\n         popen(s);\n-        print_string(s, a.asm);\n+        print_string(s, a.asm, a.asm_str_style);\n         word_space(s, \":\");\n         for &(co, o) in a.outputs.iter() {\n-            print_string(s, co);\n+            print_string(s, co, ast::CookedStr);\n             popen(s);\n             print_expr(s, o);\n             pclose(s);\n             word_space(s, \",\");\n         }\n         word_space(s, \":\");\n         for &(co, o) in a.inputs.iter() {\n-            print_string(s, co);\n+            print_string(s, co, ast::CookedStr);\n             popen(s);\n             print_expr(s, o);\n             pclose(s);\n             word_space(s, \",\");\n         }\n         word_space(s, \":\");\n-        print_string(s, a.clobbers);\n+        print_string(s, a.clobbers, ast::CookedStr);\n         pclose(s);\n       }\n       ast::ExprMac(ref m) => print_mac(s, m),\n@@ -1894,11 +1894,11 @@ pub fn print_view_item(s: @ps, item: &ast::view_item) {\n         ast::view_item_extern_mod(id, ref optional_path, ref mta, _) => {\n             head(s, \"extern mod\");\n             print_ident(s, id);\n-            for p in optional_path.iter() {\n+            for &(ref p, style) in optional_path.iter() {\n                 space(s.s);\n                 word(s.s, \"=\");\n                 space(s.s);\n-                print_string(s, *p);\n+                print_string(s, *p, style);\n             }\n             if !mta.is_empty() {\n                 popen(s);\n@@ -2060,7 +2060,7 @@ pub fn print_literal(s: @ps, lit: &ast::lit) {\n       _ => ()\n     }\n     match lit.node {\n-      ast::lit_str(st) => print_string(s, st),\n+      ast::lit_str(st, style) => print_string(s, st, style),\n       ast::lit_char(ch) => {\n           let mut res = ~\"'\";\n           do char::from_u32(ch).unwrap().escape_default |c| {\n@@ -2180,10 +2180,13 @@ pub fn print_comment(s: @ps, cmnt: &comments::cmnt) {\n     }\n }\n \n-pub fn print_string(s: @ps, st: &str) {\n-    word(s.s, \"\\\"\");\n-    word(s.s, st.escape_default());\n-    word(s.s, \"\\\"\");\n+pub fn print_string(s: @ps, st: &str, style: ast::StrStyle) {\n+    let st = match style {\n+        ast::CookedStr => format!(\"\\\"{}\\\"\", st.escape_default()),\n+        ast::RawStr(n) => format!(\"r{delim}\\\"{string}\\\"{delim}\",\n+                                  delim=\"#\".repeat(n), string=st)\n+    };\n+    word(s.s, st);\n }\n \n pub fn to_str<T>(t: &T, f: &fn(@ps, &T), intr: @ident_interner) -> ~str {"}]}