{"sha": "a3c30e440a7a2cb36b6d8d405fdf7d5d50110903", "node_id": "C_kwDOAAsO6NoAKGEzYzMwZTQ0MGE3YTJjYjM2YjZkOGQ0MDVmZGY3ZDVkNTAxMTA5MDM", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2022-04-07T14:56:25Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2022-05-03T16:52:52Z"}, "message": "std::io: Modify some ReadBuf method signatures to return `&mut Self`\n\nThis allows using `ReadBuf` in a builder-like style and to setup a `ReadBuf` and\npass it to `read_buf` in a single expression, e.g.,\n\n```\n// With this PR:\nreader.read_buf(ReadBuf::uninit(buf).assume_init(init_len))?;\n\n// Previously:\nlet mut buf = ReadBuf::uninit(buf);\nbuf.assume_init(init_len);\nreader.read_buf(&mut buf)?;\n```\n\nSigned-off-by: Nick Cameron <nrc@ncameron.org>", "tree": {"sha": "2b712e7a2d570fd049cc08ce019b95451017c801", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b712e7a2d570fd049cc08ce019b95451017c801"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3c30e440a7a2cb36b6d8d405fdf7d5d50110903", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3c30e440a7a2cb36b6d8d405fdf7d5d50110903", "html_url": "https://github.com/rust-lang/rust/commit/a3c30e440a7a2cb36b6d8d405fdf7d5d50110903", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3c30e440a7a2cb36b6d8d405fdf7d5d50110903/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d237ab52920924694f6fc3e47ee8588514bfa70", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d237ab52920924694f6fc3e47ee8588514bfa70", "html_url": "https://github.com/rust-lang/rust/commit/3d237ab52920924694f6fc3e47ee8588514bfa70"}], "stats": {"total": 18, "additions": 11, "deletions": 7}, "files": [{"sha": "78d1113f8375a2593ee06ca8c795fcd4034dc1d8", "filename": "library/std/src/io/readbuf.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a3c30e440a7a2cb36b6d8d405fdf7d5d50110903/library%2Fstd%2Fsrc%2Fio%2Freadbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c30e440a7a2cb36b6d8d405fdf7d5d50110903/library%2Fstd%2Fsrc%2Fio%2Freadbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Freadbuf.rs?ref=a3c30e440a7a2cb36b6d8d405fdf7d5d50110903", "patch": "@@ -166,8 +166,8 @@ impl<'a> ReadBuf<'a> {\n     ///\n     /// The number of initialized bytes is not changed, and the contents of the buffer are not modified.\n     #[inline]\n-    pub fn clear(&mut self) {\n-        self.set_filled(0); // The assertion in `set_filled` is optimized out\n+    pub fn clear(&mut self) -> &mut Self {\n+        self.set_filled(0) // The assertion in `set_filled` is optimized out\n     }\n \n     /// Increases the size of the filled region of the buffer.\n@@ -178,8 +178,8 @@ impl<'a> ReadBuf<'a> {\n     ///\n     /// Panics if the filled region of the buffer would become larger than the initialized region.\n     #[inline]\n-    pub fn add_filled(&mut self, n: usize) {\n-        self.set_filled(self.filled + n);\n+    pub fn add_filled(&mut self, n: usize) -> &mut Self {\n+        self.set_filled(self.filled + n)\n     }\n \n     /// Sets the size of the filled region of the buffer.\n@@ -193,10 +193,11 @@ impl<'a> ReadBuf<'a> {\n     ///\n     /// Panics if the filled region of the buffer would become larger than the initialized region.\n     #[inline]\n-    pub fn set_filled(&mut self, n: usize) {\n+    pub fn set_filled(&mut self, n: usize) -> &mut Self {\n         assert!(n <= self.initialized);\n \n         self.filled = n;\n+        self\n     }\n \n     /// Asserts that the first `n` unfilled bytes of the buffer are initialized.\n@@ -208,8 +209,9 @@ impl<'a> ReadBuf<'a> {\n     ///\n     /// The caller must ensure that the first `n` unfilled bytes of the buffer have already been initialized.\n     #[inline]\n-    pub unsafe fn assume_init(&mut self, n: usize) {\n+    pub unsafe fn assume_init(&mut self, n: usize) -> &mut Self {\n         self.initialized = cmp::max(self.initialized, self.filled + n);\n+        self\n     }\n \n     /// Appends data to the buffer, advancing the written position and possibly also the initialized position.\n@@ -227,7 +229,9 @@ impl<'a> ReadBuf<'a> {\n         }\n \n         // SAFETY: We just added the entire contents of buf to the filled section.\n-        unsafe { self.assume_init(buf.len()) }\n+        unsafe {\n+            self.assume_init(buf.len());\n+        }\n         self.add_filled(buf.len());\n     }\n "}]}