{"sha": "0fc9d3909ac1601d5f91f8da58634ea32b089d90", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmYzlkMzkwOWFjMTYwMWQ1ZjkxZjhkYTU4NjM0ZWEzMmIwODlkOTA=", "commit": {"author": {"name": "Donough Liu", "email": "ldm2993593805@163.com", "date": "2020-04-24T18:06:53Z"}, "committer": {"name": "Donough Liu", "email": "ldm2993593805@163.com", "date": "2020-04-24T18:06:53Z"}, "message": "Minimize parameter of coerce_borrowed_pointer()", "tree": {"sha": "5c256782a9a66204692c44cddc729b0df25ad627", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c256782a9a66204692c44cddc729b0df25ad627"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fc9d3909ac1601d5f91f8da58634ea32b089d90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fc9d3909ac1601d5f91f8da58634ea32b089d90", "html_url": "https://github.com/rust-lang/rust/commit/0fc9d3909ac1601d5f91f8da58634ea32b089d90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fc9d3909ac1601d5f91f8da58634ea32b089d90/comments", "author": {"login": "ldm0", "id": 31354274, "node_id": "MDQ6VXNlcjMxMzU0Mjc0", "avatar_url": "https://avatars.githubusercontent.com/u/31354274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ldm0", "html_url": "https://github.com/ldm0", "followers_url": "https://api.github.com/users/ldm0/followers", "following_url": "https://api.github.com/users/ldm0/following{/other_user}", "gists_url": "https://api.github.com/users/ldm0/gists{/gist_id}", "starred_url": "https://api.github.com/users/ldm0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ldm0/subscriptions", "organizations_url": "https://api.github.com/users/ldm0/orgs", "repos_url": "https://api.github.com/users/ldm0/repos", "events_url": "https://api.github.com/users/ldm0/events{/privacy}", "received_events_url": "https://api.github.com/users/ldm0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ldm0", "id": 31354274, "node_id": "MDQ6VXNlcjMxMzU0Mjc0", "avatar_url": "https://avatars.githubusercontent.com/u/31354274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ldm0", "html_url": "https://github.com/ldm0", "followers_url": "https://api.github.com/users/ldm0/followers", "following_url": "https://api.github.com/users/ldm0/following{/other_user}", "gists_url": "https://api.github.com/users/ldm0/gists{/gist_id}", "starred_url": "https://api.github.com/users/ldm0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ldm0/subscriptions", "organizations_url": "https://api.github.com/users/ldm0/orgs", "repos_url": "https://api.github.com/users/ldm0/repos", "events_url": "https://api.github.com/users/ldm0/events{/privacy}", "received_events_url": "https://api.github.com/users/ldm0/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "061256835886be38fcb2255d585ec4e1292b77d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/061256835886be38fcb2255d585ec4e1292b77d0", "html_url": "https://github.com/rust-lang/rust/commit/061256835886be38fcb2255d585ec4e1292b77d0"}], "stats": {"total": 21, "additions": 9, "deletions": 12}, "files": [{"sha": "3d665123f6767dd07b268b35fa5e2857ef3cf410", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0fc9d3909ac1601d5f91f8da58634ea32b089d90/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc9d3909ac1601d5f91f8da58634ea32b089d90/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=0fc9d3909ac1601d5f91f8da58634ea32b089d90", "patch": "@@ -211,12 +211,9 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             ty::RawPtr(mt_b) => {\n                 return self.coerce_unsafe_ptr(a, b, mt_b.mutbl);\n             }\n-\n-            ty::Ref(r_b, ty, mutbl) => {\n-                let mt_b = ty::TypeAndMut { ty, mutbl };\n-                return self.coerce_borrowed_pointer(a, b, r_b, mt_b);\n+            ty::Ref(r_b, _, mutbl_b) => {\n+                return self.coerce_borrowed_pointer(a, b, r_b, mutbl_b);\n             }\n-\n             _ => {}\n         }\n \n@@ -255,7 +252,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         a: Ty<'tcx>,\n         b: Ty<'tcx>,\n         r_b: ty::Region<'tcx>,\n-        mt_b: TypeAndMut<'tcx>,\n+        mutbl_b: hir::Mutability,\n     ) -> CoerceResult<'tcx> {\n         debug!(\"coerce_borrowed_pointer(a={:?}, b={:?})\", a, b);\n \n@@ -268,7 +265,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         let (r_a, mt_a) = match a.kind {\n             ty::Ref(r_a, ty, mutbl) => {\n                 let mt_a = ty::TypeAndMut { ty, mutbl };\n-                coerce_mutbls(mt_a.mutbl, mt_b.mutbl)?;\n+                coerce_mutbls(mt_a.mutbl, mutbl_b)?;\n                 (r_a, mt_a)\n             }\n             _ => return self.unify_and(a, b, identity),\n@@ -364,7 +361,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                 r_a // [3] above\n             } else {\n                 if r_borrow_var.is_none() {\n-                    // create var lazilly, at most once\n+                    // create var lazily, at most once\n                     let coercion = Coercion(span);\n                     let r = self.next_region_var(coercion);\n                     r_borrow_var = Some(r); // [4] above\n@@ -375,7 +372,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                 r,\n                 TypeAndMut {\n                     ty: referent_ty,\n-                    mutbl: mt_b.mutbl, // [1] above\n+                    mutbl: mutbl_b, // [1] above\n                 },\n             );\n             match self.unify(derefd_ty_a, b) {\n@@ -417,11 +414,11 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             // `self.x` both have `&mut `type would be a move of\n             // `self.x`, but we auto-coerce it to `foo(&mut *self.x)`,\n             // which is a borrow.\n-            assert_eq!(mt_b.mutbl, hir::Mutability::Not); // can only coerce &T -> &U\n+            assert_eq!(mutbl_b, hir::Mutability::Not); // can only coerce &T -> &U\n             return success(vec![], ty, obligations);\n         }\n \n-        let needs = Needs::maybe_mut_place(mt_b.mutbl);\n+        let needs = Needs::maybe_mut_place(mutbl_b);\n         let InferOk { value: mut adjustments, obligations: o } =\n             autoderef.adjust_steps_as_infer_ok(self, needs);\n         obligations.extend(o);\n@@ -433,7 +430,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             ty::Ref(r_borrow, _, _) => r_borrow,\n             _ => span_bug!(span, \"expected a ref type, got {:?}\", ty),\n         };\n-        let mutbl = match mt_b.mutbl {\n+        let mutbl = match mutbl_b {\n             hir::Mutability::Not => AutoBorrowMutability::Not,\n             hir::Mutability::Mut => {\n                 AutoBorrowMutability::Mut { allow_two_phase_borrow: self.allow_two_phase }"}]}