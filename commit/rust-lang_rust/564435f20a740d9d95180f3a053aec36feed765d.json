{"sha": "564435f20a740d9d95180f3a053aec36feed765d", "node_id": "C_kwDOAAsO6NoAKDU2NDQzNWYyMGE3NDBkOWQ5NTE4MGYzYTA1M2FlYzM2ZmVlZDc2NWQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-27T04:28:02Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-27T05:09:43Z"}, "message": "Suppress suggestions for nested use tree", "tree": {"sha": "079fa8cb5baf40b052802bfb5803fc20aa840c0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/079fa8cb5baf40b052802bfb5803fc20aa840c0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/564435f20a740d9d95180f3a053aec36feed765d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/564435f20a740d9d95180f3a053aec36feed765d", "html_url": "https://github.com/rust-lang/rust/commit/564435f20a740d9d95180f3a053aec36feed765d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/564435f20a740d9d95180f3a053aec36feed765d/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "caa64e5b5e7605a1c1428b2a402021bef83f3e1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/caa64e5b5e7605a1c1428b2a402021bef83f3e1e", "html_url": "https://github.com/rust-lang/rust/commit/caa64e5b5e7605a1c1428b2a402021bef83f3e1e"}], "stats": {"total": 67, "additions": 50, "deletions": 17}, "files": [{"sha": "f9121ae046ad8cf5053f51ff3e2e86d624238544", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 27, "deletions": 17, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/564435f20a740d9d95180f3a053aec36feed765d/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/564435f20a740d9d95180f3a053aec36feed765d/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=564435f20a740d9d95180f3a053aec36feed765d", "patch": "@@ -475,12 +475,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                     errors = vec![];\n                 }\n                 if seen_spans.insert(err.span) {\n-                    let path = import_path_to_string(\n-                        &import.module_path.iter().map(|seg| seg.ident).collect::<Vec<_>>(),\n-                        &import.kind,\n-                        err.span,\n-                    );\n-                    errors.push((path, err));\n+                    errors.push((import, err));\n                     prev_root_id = import.root_id;\n                 }\n             } else if is_indeterminate {\n@@ -496,8 +491,10 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                     suggestion: None,\n                     candidate: None,\n                 };\n+                // FIXME: there should be a better way of doing this than\n+                // formatting this as a string then checking for `::`\n                 if path.contains(\"::\") {\n-                    errors.push((path, err))\n+                    errors.push((import, err))\n                 }\n             }\n         }\n@@ -507,7 +504,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n         }\n     }\n \n-    fn throw_unresolved_import_error(&self, errors: Vec<(String, UnresolvedImportError)>) {\n+    fn throw_unresolved_import_error(&self, errors: Vec<(&Import<'_>, UnresolvedImportError)>) {\n         if errors.is_empty() {\n             return;\n         }\n@@ -516,7 +513,17 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n         const MAX_LABEL_COUNT: usize = 10;\n \n         let span = MultiSpan::from_spans(errors.iter().map(|(_, err)| err.span).collect());\n-        let paths = errors.iter().map(|(path, _)| format!(\"`{}`\", path)).collect::<Vec<_>>();\n+        let paths = errors\n+            .iter()\n+            .map(|(import, err)| {\n+                let path = import_path_to_string(\n+                    &import.module_path.iter().map(|seg| seg.ident).collect::<Vec<_>>(),\n+                    &import.kind,\n+                    err.span,\n+                );\n+                format!(\"`{path}`\")\n+            })\n+            .collect::<Vec<_>>();\n         let msg = format!(\"unresolved import{} {}\", pluralize!(paths.len()), paths.join(\", \"),);\n \n         let mut diag = struct_span_err!(self.r.session, span, E0432, \"{}\", &msg);\n@@ -525,7 +532,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n             diag.note(note);\n         }\n \n-        for (_, err) in errors.into_iter().take(MAX_LABEL_COUNT) {\n+        for (import, err) in errors.into_iter().take(MAX_LABEL_COUNT) {\n             if let Some(label) = err.label {\n                 diag.span_label(err.span, label);\n             }\n@@ -539,13 +546,16 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n             }\n \n             if let Some(candidate) = &err.candidate {\n-                import_candidates(\n-                    self.r.session,\n-                    &self.r.untracked.source_span,\n-                    &mut diag,\n-                    Some(err.span),\n-                    &candidate,\n-                )\n+                match &import.kind {\n+                    ImportKind::Single { nested: false, .. } => import_candidates(\n+                        self.r.session,\n+                        &self.r.untracked.source_span,\n+                        &mut diag,\n+                        Some(err.span),\n+                        &candidate,\n+                    ),\n+                    _ => {}\n+                }\n             }\n         }\n "}, {"sha": "5ab0d3d60c9c2c1b13574f86577aefbb9c557091", "filename": "src/test/ui/imports/bad-import-in-nested.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/564435f20a740d9d95180f3a053aec36feed765d/src%2Ftest%2Fui%2Fimports%2Fbad-import-in-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/564435f20a740d9d95180f3a053aec36feed765d/src%2Ftest%2Fui%2Fimports%2Fbad-import-in-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fbad-import-in-nested.rs?ref=564435f20a740d9d95180f3a053aec36feed765d", "patch": "@@ -0,0 +1,14 @@\n+#![allow(unused)]\n+\n+mod A {\n+    pub(crate) type AA = ();\n+}\n+\n+mod C {}\n+\n+mod B {\n+    use crate::C::{self, AA};\n+    //~^ ERROR unresolved import `crate::C::AA`\n+}\n+\n+fn main() {}"}, {"sha": "a107048d579cac390ef3207ba17a4ae7ac56b7d3", "filename": "src/test/ui/imports/bad-import-in-nested.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/564435f20a740d9d95180f3a053aec36feed765d/src%2Ftest%2Fui%2Fimports%2Fbad-import-in-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/564435f20a740d9d95180f3a053aec36feed765d/src%2Ftest%2Fui%2Fimports%2Fbad-import-in-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fbad-import-in-nested.stderr?ref=564435f20a740d9d95180f3a053aec36feed765d", "patch": "@@ -0,0 +1,9 @@\n+error[E0432]: unresolved import `crate::C::AA`\n+  --> $DIR/bad-import-in-nested.rs:10:26\n+   |\n+LL |     use crate::C::{self, AA};\n+   |                          ^^ no `AA` in `C`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0432`."}]}