{"sha": "49e2501c633d519d56352609afda8103dbe8a2e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5ZTI1MDFjNjMzZDUxOWQ1NjM1MjYwOWFmZGE4MTAzZGJlOGEyZTg=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-13T14:36:57Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-13T14:36:57Z"}, "message": "Fix false positive for `ifs_same_cond` and `cfg!`", "tree": {"sha": "103d77150417335931da0991031172a7bfda91b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/103d77150417335931da0991031172a7bfda91b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49e2501c633d519d56352609afda8103dbe8a2e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49e2501c633d519d56352609afda8103dbe8a2e8", "html_url": "https://github.com/rust-lang/rust/commit/49e2501c633d519d56352609afda8103dbe8a2e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49e2501c633d519d56352609afda8103dbe8a2e8/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e176cae5da892c2920abeeaa84feeb12f3c5442", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e176cae5da892c2920abeeaa84feeb12f3c5442", "html_url": "https://github.com/rust-lang/rust/commit/1e176cae5da892c2920abeeaa84feeb12f3c5442"}], "stats": {"total": 29, "additions": 25, "deletions": 4}, "files": [{"sha": "e527f63ebbd0e898163e110864c2828b6c51df11", "filename": "src/utils/hir.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/49e2501c633d519d56352609afda8103dbe8a2e8/src%2Futils%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49e2501c633d519d56352609afda8103dbe8a2e8/src%2Futils%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils%2Fhir.rs?ref=49e2501c633d519d56352609afda8103dbe8a2e8", "patch": "@@ -4,6 +4,7 @@ use rustc_front::hir::*;\n use std::hash::{Hash, Hasher, SipHasher};\n use syntax::ast::Name;\n use syntax::ptr::P;\n+use utils::differing_macro_contexts;\n \n /// Type used to check whether two ast are the same. This is different from the operator\n /// `==` on ast types as this operator would compare true equality with ID and span.\n@@ -53,6 +54,10 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n     // ok, it\u2019s a big function, but mostly one big match with simples cases\n     #[allow(cyclomatic_complexity)]\n     pub fn eq_expr(&self, left: &Expr, right: &Expr) -> bool {\n+        if self.ignore_fn && differing_macro_contexts(left.span, right.span) {\n+            return false;\n+        }\n+\n         if let (Some(l), Some(r)) = (constant(self.cx, left), constant(self.cx, right)) {\n             if l == r {\n                 return true;"}, {"sha": "7a17b345fa8653ba0174bce918efb696a0587644", "filename": "tests/compile-fail/copies.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/49e2501c633d519d56352609afda8103dbe8a2e8/tests%2Fcompile-fail%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49e2501c633d519d56352609afda8103dbe8a2e8/tests%2Fcompile-fail%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcopies.rs?ref=49e2501c633d519d56352609afda8103dbe8a2e8", "patch": "@@ -12,7 +12,7 @@ fn foo() -> bool { unimplemented!() }\n \n #[deny(if_same_then_else)]\n #[deny(match_same_arms)]\n-fn if_same_then_else() -> &'static str {\n+fn if_same_then_else() -> Result<&'static str, ()> {\n     if true {\n         foo();\n     }\n@@ -129,17 +129,24 @@ fn if_same_then_else() -> &'static str {\n         _ => (),\n     }\n \n+    if true {\n+        try!(Ok(\"foo\"));\n+    }\n+    else { //~ERROR this `if` has identical blocks\n+        try!(Ok(\"foo\"));\n+    }\n+\n     if true {\n         let foo = \"\";\n-        return &foo[0..];\n+        return Ok(&foo[0..]);\n     }\n     else if false {\n         let foo = \"bar\";\n-        return &foo[0..];\n+        return Ok(&foo[0..]);\n     }\n     else { //~ERROR this `if` has identical blocks\n         let foo = \"\";\n-        return &foo[0..];\n+        return Ok(&foo[0..]);\n     }\n }\n \n@@ -168,6 +175,15 @@ fn ifs_same_cond() {\n     else if a == 1 {\n     }\n \n+    // See #659\n+    if cfg!(feature = \"feature1-659\") {\n+        1\n+    } else if cfg!(feature = \"feature2-659\") {\n+        2\n+    } else {\n+        3\n+    };\n+\n     let mut v = vec![1];\n     if v.pop() == None { // ok, functions\n     }"}]}