{"sha": "632f80479763b325b396ac6633cad5235379a47d", "node_id": "C_kwDOAAsO6NoAKDYzMmY4MDQ3OTc2M2IzMjViMzk2YWM2NjMzY2FkNTIzNTM3OWE0N2Q", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-10T11:30:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-10T11:30:14Z"}, "message": "Auto merge of #13750 - lowr:fix/rpit-in-projection, r=flodiebold\n\nfix: normalize projection after discarding free `BoundVar`s in RPIT\n\nFixes #13307\n\nWhen we lower the return type of a function, it may contain free `BoundVar`s in `OpaqueType`'s substitution, which would cause panic during canonicalization as part of projection normalization. Those `BoundVar`s are irrelevant in this context and will be discarded, and we should defer projection normalization until then.", "tree": {"sha": "352041fec17aba7c1dd5da8c00c3547f81e2bdfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/352041fec17aba7c1dd5da8c00c3547f81e2bdfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/632f80479763b325b396ac6633cad5235379a47d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/632f80479763b325b396ac6633cad5235379a47d", "html_url": "https://github.com/rust-lang/rust/commit/632f80479763b325b396ac6633cad5235379a47d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/632f80479763b325b396ac6633cad5235379a47d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "518e39bfe6e0f8b3502ffb296dba82d1a2ba9dd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/518e39bfe6e0f8b3502ffb296dba82d1a2ba9dd5", "html_url": "https://github.com/rust-lang/rust/commit/518e39bfe6e0f8b3502ffb296dba82d1a2ba9dd5"}, {"sha": "34b11d99815e257f0502d06c5951f3126d049e95", "url": "https://api.github.com/repos/rust-lang/rust/commits/34b11d99815e257f0502d06c5951f3126d049e95", "html_url": "https://github.com/rust-lang/rust/commit/34b11d99815e257f0502d06c5951f3126d049e95"}], "stats": {"total": 54, "additions": 34, "deletions": 20}, "files": [{"sha": "ad7ec485e9d383c72e5ea73408cbc1a0584fdc1c", "filename": "crates/hir-ty/src/infer.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/632f80479763b325b396ac6633cad5235379a47d/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/632f80479763b325b396ac6633cad5235379a47d/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer.rs?ref=632f80479763b325b396ac6633cad5235379a47d", "patch": "@@ -503,7 +503,7 @@ impl<'a> InferenceContext<'a> {\n             result: InferenceResult::default(),\n             table: unify::InferenceTable::new(db, trait_env.clone()),\n             trait_env,\n-            return_ty: TyKind::Error.intern(Interner), // set in collect_fn_signature\n+            return_ty: TyKind::Error.intern(Interner), // set in collect_* calls\n             resume_yield_tys: None,\n             db,\n             owner,\n@@ -582,14 +582,17 @@ impl<'a> InferenceContext<'a> {\n         } else {\n             &*data.ret_type\n         };\n-        let return_ty = self.make_ty_with_mode(return_ty, ImplTraitLoweringMode::Opaque);\n-        self.return_ty = return_ty;\n \n-        if let Some(rpits) = self.db.return_type_impl_traits(func) {\n+        let ctx = crate::lower::TyLoweringContext::new(self.db, &self.resolver)\n+            .with_impl_trait_mode(ImplTraitLoweringMode::Opaque);\n+        let return_ty = ctx.lower_ty(return_ty);\n+        let return_ty = self.insert_type_vars(return_ty);\n+\n+        let return_ty = if let Some(rpits) = self.db.return_type_impl_traits(func) {\n             // RPIT opaque types use substitution of their parent function.\n             let fn_placeholders = TyBuilder::placeholder_subst(self.db, func);\n-            self.return_ty = fold_tys(\n-                self.return_ty.clone(),\n+            fold_tys(\n+                return_ty,\n                 |ty, _| {\n                     let opaque_ty_id = match ty.kind(Interner) {\n                         TyKind::OpaqueType(opaque_ty_id, _) => *opaque_ty_id,\n@@ -610,14 +613,18 @@ impl<'a> InferenceContext<'a> {\n                         let (var_predicate, binders) = predicate\n                             .substitute(Interner, &var_subst)\n                             .into_value_and_skipped_binders();\n-                        always!(binders.len(Interner) == 0); // quantified where clauses not yet handled\n+                        always!(binders.is_empty(Interner)); // quantified where clauses not yet handled\n                         self.push_obligation(var_predicate.cast(Interner));\n                     }\n                     var\n                 },\n                 DebruijnIndex::INNERMOST,\n-            );\n-        }\n+            )\n+        } else {\n+            return_ty\n+        };\n+\n+        self.return_ty = self.normalize_associated_types_in(return_ty);\n     }\n \n     fn infer_body(&mut self) {\n@@ -652,23 +659,14 @@ impl<'a> InferenceContext<'a> {\n         self.result.diagnostics.push(diagnostic);\n     }\n \n-    fn make_ty_with_mode(\n-        &mut self,\n-        type_ref: &TypeRef,\n-        impl_trait_mode: ImplTraitLoweringMode,\n-    ) -> Ty {\n+    fn make_ty(&mut self, type_ref: &TypeRef) -> Ty {\n         // FIXME use right resolver for block\n-        let ctx = crate::lower::TyLoweringContext::new(self.db, &self.resolver)\n-            .with_impl_trait_mode(impl_trait_mode);\n+        let ctx = crate::lower::TyLoweringContext::new(self.db, &self.resolver);\n         let ty = ctx.lower_ty(type_ref);\n         let ty = self.insert_type_vars(ty);\n         self.normalize_associated_types_in(ty)\n     }\n \n-    fn make_ty(&mut self, type_ref: &TypeRef) -> Ty {\n-        self.make_ty_with_mode(type_ref, ImplTraitLoweringMode::Disallowed)\n-    }\n-\n     fn err_ty(&self) -> Ty {\n         self.result.standard_types.unknown.clone()\n     }"}, {"sha": "a9fd01ee011d9a97c94b22275d36a901b8687ee8", "filename": "crates/hir-ty/src/tests/traits.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/632f80479763b325b396ac6633cad5235379a47d/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/632f80479763b325b396ac6633cad5235379a47d/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs?ref=632f80479763b325b396ac6633cad5235379a47d", "patch": "@@ -1388,6 +1388,22 @@ fn foo<const C: u8, T>() -> (impl FnOnce(&str, T), impl Trait<u8>) {\n     );\n }\n \n+#[test]\n+fn return_pos_impl_trait_in_projection() {\n+    // Note that the unused type param `X` is significant; see #13307.\n+    check_no_mismatches(\n+        r#\"\n+//- minicore: sized\n+trait Future { type Output; }\n+impl Future for () { type Output = i32; }\n+type Foo<F> = (<F as Future>::Output, F);\n+fn foo<X>() -> Foo<impl Future<Output = ()>> {\n+    (0, ())\n+}\n+\"#,\n+    )\n+}\n+\n #[test]\n fn dyn_trait() {\n     check_infer("}]}