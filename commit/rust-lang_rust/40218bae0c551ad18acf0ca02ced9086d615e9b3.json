{"sha": "40218bae0c551ad18acf0ca02ced9086d615e9b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwMjE4YmFlMGM1NTFhZDE4YWNmMGNhMDJjZWQ5MDg2ZDYxNWU5YjM=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-04-18T09:48:55Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-04-18T09:50:45Z"}, "message": "Format code", "tree": {"sha": "da4b6643fd7aa317979912edd4a8a8332b73d1ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da4b6643fd7aa317979912edd4a8a8332b73d1ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40218bae0c551ad18acf0ca02ced9086d615e9b3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEdgbJzPSa+gJi9jP1Acg2tkD/37EFAly4SHUACgkQAcg2tkD/\n37Ha/xAAn3S9QVtrD5YNGPwtyBTd3btc+jqTdczN2rWwLvxc9gxhAFFX+xMZjj1Z\n+VJQ41K9P5edB5j5lOMAKOFg46c9NYi23dyis1/TyfDxWu7eM0g9XlNi1HH1MKvg\nC+qZDcz2KsNhr/Sw9uHOglxr8Y/IbWrc+nj0uyefSbQVZT9KzqMI75Yya4n0C+Qc\nW2x8fQeT3gvBCfnEo/SvcUcaC1BYESu643w76U9tVsof6kfzjuchw3OFqs6Ba+mK\nvhSfCA5Zsgtx+DHD4Cg7z8lVJpReahtYWGq3qOKoxH5GtAescXZhpkbAuwcaKOtA\n0o0aoSeuXHRk/QzTTzxUtIbBuY7dH04X88PoVBSYHhTDHC+GQhKY/5F7HBcSFjRx\nWEz+XS5+9eX9cjiDEgsqqgwxq6sOWnB81qZgSOG2JWMBkfbkj/1yKmKVlbx4WzWz\nAj2CNHifmYtwDle6jQ5o2ftcrYb0fSzg5OE1B3nkY7IIIooNx25DPWUppPbH+aAP\nw6+kHY9nLNNaPBIL+0Vfd63HKzGVIWyaNADCgGdCAv8hu2FZWVsKeQe+RzP8pu9k\nzwSDnrTiRqwzqCGIM+Vb3nSsdqEcR0xC3dpof29c0gGeoxDBjMgd2i2K6QsllnJn\n7JaCiKNnAmjtHCYD3lQlxFH7HQXFOTabQA/nGP4tBpkNNNtNd7s=\n=2vrN\n-----END PGP SIGNATURE-----", "payload": "tree da4b6643fd7aa317979912edd4a8a8332b73d1ef\nparent 5b836e344c4363595b820da4f4b924bcdabdf236\nauthor flip1995 <hello@philkrones.com> 1555580935 +0200\ncommitter flip1995 <hello@philkrones.com> 1555581045 +0200\n\nFormat code\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40218bae0c551ad18acf0ca02ced9086d615e9b3", "html_url": "https://github.com/rust-lang/rust/commit/40218bae0c551ad18acf0ca02ced9086d615e9b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40218bae0c551ad18acf0ca02ced9086d615e9b3/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b836e344c4363595b820da4f4b924bcdabdf236", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b836e344c4363595b820da4f4b924bcdabdf236", "html_url": "https://github.com/rust-lang/rust/commit/5b836e344c4363595b820da4f4b924bcdabdf236"}], "stats": {"total": 39, "additions": 27, "deletions": 12}, "files": [{"sha": "1750ffae837c9127b48664ea4096ef78a54bb2ec", "filename": "clippy_lints/src/assertions_on_constants.rs", "status": "modified", "additions": 27, "deletions": 12, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/40218bae0c551ad18acf0ca02ced9086d615e9b3/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40218bae0c551ad18acf0ca02ced9086d615e9b3/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassertions_on_constants.rs?ref=40218bae0c551ad18acf0ca02ced9086d615e9b3", "patch": "@@ -47,29 +47,44 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssertionsOnConstants {\n                 if let ExprKind::Lit(ref inner) = lit.node {\n                     match inner.node {\n                         LitKind::Bool(true) => {\n-                            span_help_and_lint(cx, ASSERTIONS_ON_CONSTANTS, e.span,\n-                                \"assert!(true) will be optimized out by the compiler\",\n-                                \"remove it\");\n+                            span_help_and_lint(\n+                                cx,\n+                                ASSERTIONS_ON_CONSTANTS,\n+                                e.span,\n+                                \"`assert!(true)` will be optimized out by the compiler\",\n+                                \"remove it\"\n+                            );\n                         },\n                         LitKind::Bool(false) if !is_debug_assert => {\n                             span_help_and_lint(\n-                                cx, ASSERTIONS_ON_CONSTANTS, e.span,\n-                                \"assert!(false) should probably be replaced\",\n-                                \"use panic!() or unreachable!()\");\n+                                cx,\n+                                ASSERTIONS_ON_CONSTANTS,\n+                                e.span,\n+                                \"`assert!(false)` should probably be replaced\",\n+                                \"use `panic!()` or `unreachable!()`\"\n+                            );\n                         },\n                         _ => (),\n                     }\n                 } else if let Some(bool_const) = constant(cx, cx.tables, lit) {\n                     match bool_const.0 {\n                         Constant::Bool(true) => {\n-                            span_help_and_lint(cx, ASSERTIONS_ON_CONSTANTS, e.span,\n-                                \"assert!(const: true) will be optimized out by the compiler\",\n-                                \"remove it\");\n+                            span_help_and_lint(\n+                                cx,\n+                                ASSERTIONS_ON_CONSTANTS,\n+                                e.span,\n+                                \"`assert!(const: true)` will be optimized out by the compiler\",\n+                                \"remove it\"\n+                            );\n                         },\n                         Constant::Bool(false) if !is_debug_assert => {\n-                            span_help_and_lint(cx, ASSERTIONS_ON_CONSTANTS, e.span,\n-                                \"assert!(const: false) should probably be replaced\",\n-                                \"use panic!() or unreachable!()\");\n+                            span_help_and_lint(\n+                                cx,\n+                                ASSERTIONS_ON_CONSTANTS,\n+                                e.span,\n+                                \"`assert!(const: false)` should probably be replaced\",\n+                                \"use `panic!()` or `unreachable!()`\"\n+                            );\n                         },\n                         _ => (),\n                     }"}]}