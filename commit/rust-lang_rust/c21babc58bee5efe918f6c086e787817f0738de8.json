{"sha": "c21babc58bee5efe918f6c086e787817f0738de8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyMWJhYmM1OGJlZTVlZmU5MThmNmMwODZlNzg3ODE3ZjA3MzhkZTg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-04T13:39:51Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-04T13:39:51Z"}, "message": "Minor cleanup", "tree": {"sha": "65303fe18462e28adf21d8e7fab43838111f2743", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65303fe18462e28adf21d8e7fab43838111f2743"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c21babc58bee5efe918f6c086e787817f0738de8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c21babc58bee5efe918f6c086e787817f0738de8", "html_url": "https://github.com/rust-lang/rust/commit/c21babc58bee5efe918f6c086e787817f0738de8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c21babc58bee5efe918f6c086e787817f0738de8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f57682c0b3b17a09d728c77134200b4151b2358d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f57682c0b3b17a09d728c77134200b4151b2358d", "html_url": "https://github.com/rust-lang/rust/commit/f57682c0b3b17a09d728c77134200b4151b2358d"}], "stats": {"total": 30, "additions": 14, "deletions": 16}, "files": [{"sha": "33c566025e958eed070e9ed27966f8470225ba8d", "filename": "crates/ra_hir/src/source_analyzer.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c21babc58bee5efe918f6c086e787817f0738de8/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21babc58bee5efe918f6c086e787817f0738de8/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs?ref=c21babc58bee5efe918f6c086e787817f0738de8", "patch": "@@ -110,32 +110,30 @@ impl SourceAnalyzer {\n     fn expand_expr(\n         &self,\n         db: &impl HirDatabase,\n-        expr: InFile<&ast::Expr>,\n+        expr: InFile<ast::MacroCall>,\n     ) -> Option<InFile<ast::Expr>> {\n-        let macro_call = ast::MacroCall::cast(expr.value.syntax().clone())?;\n-        let macro_file =\n-            self.body_source_map.as_ref()?.node_macro_file(expr.with_value(&macro_call))?;\n+        let macro_file = self.body_source_map.as_ref()?.node_macro_file(expr.as_ref())?;\n         let expanded = db.parse_or_expand(macro_file)?;\n-        let kind = expanded.kind();\n-        let expr = InFile::new(macro_file, ast::Expr::cast(expanded)?);\n \n-        if ast::MacroCall::can_cast(kind) {\n-            self.expand_expr(db, expr.as_ref())\n-        } else {\n-            Some(expr)\n-        }\n+        let res = match ast::MacroCall::cast(expanded.clone()) {\n+            Some(call) => self.expand_expr(db, InFile::new(macro_file, call))?,\n+            _ => InFile::new(macro_file, ast::Expr::cast(expanded)?),\n+        };\n+        Some(res)\n     }\n \n     fn trait_env(&self, db: &impl HirDatabase) -> Arc<TraitEnvironment> {\n         TraitEnvironment::lower(db, &self.resolver)\n     }\n \n     pub(crate) fn type_of(&self, db: &impl HirDatabase, expr: &ast::Expr) -> Option<Type> {\n-        let expr_id = if let Some(expr) = self.expand_expr(db, InFile::new(self.file_id, expr)) {\n-            self.body_source_map.as_ref()?.node_expr(expr.as_ref())?\n-        } else {\n-            self.expr_id(expr)?\n-        };\n+        let expr_id = match expr {\n+            ast::Expr::MacroCall(call) => {\n+                let expr = self.expand_expr(db, InFile::new(self.file_id, call.clone()))?;\n+                self.body_source_map.as_ref()?.node_expr(expr.as_ref())\n+            }\n+            _ => self.expr_id(expr),\n+        }?;\n \n         let ty = self.infer.as_ref()?[expr_id].clone();\n         let environment = self.trait_env(db);"}]}