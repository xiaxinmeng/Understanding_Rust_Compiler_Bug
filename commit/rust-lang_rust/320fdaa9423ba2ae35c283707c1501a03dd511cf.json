{"sha": "320fdaa9423ba2ae35c283707c1501a03dd511cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyMGZkYWE5NDIzYmEyYWUzNWMyODM3MDdjMTUwMWEwM2RkNTExY2Y=", "commit": {"author": {"name": "Kurtis Nusbaum", "email": "kurtis@uber.com", "date": "2018-04-20T04:03:21Z"}, "committer": {"name": "Kurtis Nusbaum", "email": "kurtis@uber.com", "date": "2018-04-20T04:03:21Z"}, "message": "add EDITIONS_NAME_LIST, make edition tracked, enforce that only stable editions are allowed to be used on non-nightly builds", "tree": {"sha": "04b22eba29a5108a371b1b476278bd6412db7f82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04b22eba29a5108a371b1b476278bd6412db7f82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/320fdaa9423ba2ae35c283707c1501a03dd511cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/320fdaa9423ba2ae35c283707c1501a03dd511cf", "html_url": "https://github.com/rust-lang/rust/commit/320fdaa9423ba2ae35c283707c1501a03dd511cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/320fdaa9423ba2ae35c283707c1501a03dd511cf/comments", "author": {"login": "klnusbaum", "id": 495570, "node_id": "MDQ6VXNlcjQ5NTU3MA==", "avatar_url": "https://avatars.githubusercontent.com/u/495570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klnusbaum", "html_url": "https://github.com/klnusbaum", "followers_url": "https://api.github.com/users/klnusbaum/followers", "following_url": "https://api.github.com/users/klnusbaum/following{/other_user}", "gists_url": "https://api.github.com/users/klnusbaum/gists{/gist_id}", "starred_url": "https://api.github.com/users/klnusbaum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klnusbaum/subscriptions", "organizations_url": "https://api.github.com/users/klnusbaum/orgs", "repos_url": "https://api.github.com/users/klnusbaum/repos", "events_url": "https://api.github.com/users/klnusbaum/events{/privacy}", "received_events_url": "https://api.github.com/users/klnusbaum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "klnusbaum", "id": 495570, "node_id": "MDQ6VXNlcjQ5NTU3MA==", "avatar_url": "https://avatars.githubusercontent.com/u/495570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klnusbaum", "html_url": "https://github.com/klnusbaum", "followers_url": "https://api.github.com/users/klnusbaum/followers", "following_url": "https://api.github.com/users/klnusbaum/following{/other_user}", "gists_url": "https://api.github.com/users/klnusbaum/gists{/gist_id}", "starred_url": "https://api.github.com/users/klnusbaum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klnusbaum/subscriptions", "organizations_url": "https://api.github.com/users/klnusbaum/orgs", "repos_url": "https://api.github.com/users/klnusbaum/repos", "events_url": "https://api.github.com/users/klnusbaum/events{/privacy}", "received_events_url": "https://api.github.com/users/klnusbaum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51f51109ce8c3070ab186624c241216620942360", "url": "https://api.github.com/repos/rust-lang/rust/commits/51f51109ce8c3070ab186624c241216620942360", "html_url": "https://github.com/rust-lang/rust/commit/51f51109ce8c3070ab186624c241216620942360"}], "stats": {"total": 41, "additions": 30, "deletions": 11}, "files": [{"sha": "aac1c2fc02bbe806026d10914d83a6f84b0f31ea", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/320fdaa9423ba2ae35c283707c1501a03dd511cf/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/320fdaa9423ba2ae35c283707c1501a03dd511cf/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=320fdaa9423ba2ae35c283707c1501a03dd511cf", "patch": "@@ -30,7 +30,7 @@ use middle::cstore;\n \n use syntax::ast::{self, IntTy, UintTy};\n use syntax::codemap::{FileName, FilePathMapping};\n-use syntax::edition::{Edition, ALL_EDITIONS, DEFAULT_EDITION};\n+use syntax::edition::{Edition, EDITION_NAME_LIST, DEFAULT_EDITION};\n use syntax::parse::token;\n use syntax::parse;\n use syntax::symbol::Symbol;\n@@ -412,7 +412,7 @@ top_level_options!(\n \n         // Remap source path prefixes in all output (messages, object files, debug, etc)\n         remap_path_prefix: Vec<(PathBuf, PathBuf)> [UNTRACKED],\n-        edition: Edition [UNTRACKED],\n+        edition: Edition [TRACKED],\n     }\n );\n \n@@ -1643,7 +1643,7 @@ pub fn rustc_optgroups() -> Vec<RustcOptGroup> {\n             \"\",\n             \"edition\",\n             \"Specify which edition of the compiler to use when compiling code.\",\n-            &edition_name_list(),\n+            EDITION_NAME_LIST,\n         ),\n         opt::multi_s(\n             \"\",\n@@ -1712,14 +1712,26 @@ pub fn build_session_options_and_crate_config(\n                 &format!(\n                     \"argument for --edition must be one of: \\\n                     {}. (instead was `{}`)\",\n-                    edition_name_list(),\n+                    EDITION_NAME_LIST,\n                     arg\n                 ),\n             ),\n         }\n         None => DEFAULT_EDITION,\n     };\n \n+    if !edition.is_stable() && !nightly_options::is_nightly_build() {\n+        early_error(\n+                ErrorOutputType::default(),\n+                &format!(\n+                    \"Edition {} is unstable an only\\\n+                    available for nightly builds of rustc.\",\n+                    edition,\n+                )\n+        )\n+    }\n+\n+\n     // We need the opts_present check because the driver will send us Matches\n     // with only stable options if no unstable options are used. Since error-format\n     // is unstable, it will not be present. We have to use opts_present not\n@@ -2311,6 +2323,7 @@ mod dep_tracking {\n     use syntax::feature_gate::UnstableFeatures;\n     use rustc_back::{PanicStrategy, RelroLevel};\n     use rustc_back::target::TargetTriple;\n+    use syntax::edition::Edition;\n \n     pub trait DepTrackingHash {\n         fn hash(&self, hasher: &mut DefaultHasher, error_format: ErrorOutputType);\n@@ -2370,6 +2383,7 @@ mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(Sanitizer);\n     impl_dep_tracking_hash_via_hash!(Option<Sanitizer>);\n     impl_dep_tracking_hash_via_hash!(TargetTriple);\n+    impl_dep_tracking_hash_via_hash!(Edition);\n \n     impl_dep_tracking_hash_for_sortable_vec_of!(String);\n     impl_dep_tracking_hash_for_sortable_vec_of!(PathBuf);\n@@ -2427,11 +2441,6 @@ mod dep_tracking {\n     }\n }\n \n-pub fn edition_name_list() -> String {\n-    let names: Vec<String> = ALL_EDITIONS.iter().map(|e| format!(\"{}\", e)).collect();\n-    names.join(\"|\")\n-}\n-\n #[cfg(test)]\n mod tests {\n     use errors;"}, {"sha": "2c781fda4ed03a38a39689e9a6794934b3bad901", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/320fdaa9423ba2ae35c283707c1501a03dd511cf/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/320fdaa9423ba2ae35c283707c1501a03dd511cf/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=320fdaa9423ba2ae35c283707c1501a03dd511cf", "patch": "@@ -691,7 +691,7 @@ where\n         krate,\n         &sess.parse_sess,\n         sess.opts.test,\n-        sess.opts.debugging_opts.edition,\n+        sess.edition(),\n     );\n     // these need to be set \"early\" so that expansion sees `quote` if enabled.\n     sess.init_features(features);"}, {"sha": "3fc1c279f5a22ea971f55be431a2df2a0820e8b2", "filename": "src/libsyntax/edition.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/320fdaa9423ba2ae35c283707c1501a03dd511cf/src%2Flibsyntax%2Fedition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/320fdaa9423ba2ae35c283707c1501a03dd511cf/src%2Flibsyntax%2Fedition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fedition.rs?ref=320fdaa9423ba2ae35c283707c1501a03dd511cf", "patch": "@@ -24,14 +24,17 @@ pub enum Edition {\n \n     // when adding new editions, be sure to update:\n     //\n-    // - the list in the `parse_edition` static in librustc::session::config\n+    // - Update the `ALL_EDITIONS` const\n+    // - Update the EDITION_NAME_LIST const\n     // - add a `rust_####()` function to the session\n     // - update the enum in Cargo's sources as well\n }\n \n // must be in order from oldest to newest\n pub const ALL_EDITIONS: &[Edition] = &[Edition::Edition2015, Edition::Edition2018];\n \n+pub const EDITION_NAME_LIST: &'static str = \"2015|2018\";\n+\n pub const DEFAULT_EDITION: Edition = Edition::Edition2015;\n \n impl fmt::Display for Edition {\n@@ -58,6 +61,13 @@ impl Edition {\n             Edition::Edition2018 => \"rust_2018_preview\",\n         }\n     }\n+\n+    pub fn is_stable(&self) -> bool {\n+        match *self {\n+            Edition::Edition2015 => true,\n+            Edition::Edition2018 => false,\n+        }\n+    }\n }\n \n impl FromStr for Edition {"}]}