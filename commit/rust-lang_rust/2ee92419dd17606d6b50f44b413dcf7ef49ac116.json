{"sha": "2ee92419dd17606d6b50f44b413dcf7ef49ac116", "node_id": "C_kwDOAAsO6NoAKDJlZTkyNDE5ZGQxNzYwNmQ2YjUwZjQ0YjQxM2RjZjdlZjQ5YWMxMTY", "commit": {"author": {"name": "Chris Denton", "email": "christophersdenton@gmail.com", "date": "2022-06-28T10:37:48Z"}, "committer": {"name": "Chris Denton", "email": "christophersdenton@gmail.com", "date": "2022-06-28T10:37:48Z"}, "message": "Remove feature `const_option` from std", "tree": {"sha": "8f25db7966c71e25c63f7b15913fe5cb20d6ba6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f25db7966c71e25c63f7b15913fe5cb20d6ba6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ee92419dd17606d6b50f44b413dcf7ef49ac116", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+p/jD6jrzmnSIWJLcTRy8vRWJ94FAmK62gUACgkQcTRy8vRW\nJ97esxAAovkVyIlBQFWA8dEUSN4L5h3wmML7zPLzfkcSTxysCEZiaajpew2d0Laq\nwQuI5wL7XK0TOfd+54T1h3WQ2AIEZmDXY/9PGD3TblJ99iQqQFgZpNqk/4L9UHVI\nV2de8cbfdPcR/LSQrfLA4PtjnYKoaf6NYmswdtbMBjAwN710WDbG/gur78trNozr\nnWlFcwzI66cGBIqyzo1jNlAKRf8sqQgPCOuvGHpOni7I08/2Okyx/zBBF4uE1NEC\nKPNrNfUp3j/u06VgnOXprnyMBqmevQy8WeSLGQU3NXgfMuFryPW9aRx99bQKgn0J\nCTPtNN8E2dvTUoayU9ZhIgoY1p99CBo0POZPo9TUxJLA879o/gIcga1QIGGITItH\nl//Ujm7c6PjsoJAnCfbDN2hyr2y5L9bzWOTjIksbEZRG/sfKq1X9rLM9nhquuE6B\nk216X978aVvEOp0wIP20jMmlIRG9iW/jKxvzSG97t4+MphFq4P6mkk3ua6sIvyrF\nt+9OhKW2nRiC16uz47sF6X3ysOjH8hdniYKwpyotBgBgSrSRg1mME7liXQCxj6hK\nFbMpZxv45xDDRG5Vf/L4gcghnsM0Vs/8PVy9WNN3+v8bsvd7qZMF9L2eMdzaZ9Q6\n3EPE+rScJy6AU8YBtTsz0ollyAemvZdlW6XnkVCml6vbAcYUvrQ=\n=YG3E\n-----END PGP SIGNATURE-----", "payload": "tree 8f25db7966c71e25c63f7b15913fe5cb20d6ba6c\nparent 64eb9ab869bc3f9ef3645302fbf22e706eea16cf\nauthor Chris Denton <christophersdenton@gmail.com> 1656412668 +0100\ncommitter Chris Denton <christophersdenton@gmail.com> 1656412668 +0100\n\nRemove feature `const_option` from std\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ee92419dd17606d6b50f44b413dcf7ef49ac116", "html_url": "https://github.com/rust-lang/rust/commit/2ee92419dd17606d6b50f44b413dcf7ef49ac116", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ee92419dd17606d6b50f44b413dcf7ef49ac116/comments", "author": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64eb9ab869bc3f9ef3645302fbf22e706eea16cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/64eb9ab869bc3f9ef3645302fbf22e706eea16cf", "html_url": "https://github.com/rust-lang/rust/commit/64eb9ab869bc3f9ef3645302fbf22e706eea16cf"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "65b8df429966329615eb3570e38c2d81a18698c6", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2ee92419dd17606d6b50f44b413dcf7ef49ac116/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ee92419dd17606d6b50f44b413dcf7ef49ac116/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=2ee92419dd17606d6b50f44b413dcf7ef49ac116", "patch": "@@ -335,7 +335,6 @@\n #![feature(const_ip)]\n #![feature(const_ipv4)]\n #![feature(const_ipv6)]\n-#![feature(const_option)]\n #![feature(const_socketaddr)]\n #![feature(thread_local_internals)]\n //"}, {"sha": "361cf0590a17c00c21ff86667d88b8186ab3a88a", "filename": "library/std/src/sys/windows/args.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2ee92419dd17606d6b50f44b413dcf7ef49ac116/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ee92419dd17606d6b50f44b413dcf7ef49ac116/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fargs.rs?ref=2ee92419dd17606d6b50f44b413dcf7ef49ac116", "patch": "@@ -21,6 +21,14 @@ use crate::vec;\n \n use core::iter;\n \n+/// This is the const equivalent to `NonZeroU16::new(n).unwrap()`\n+const fn non_zero_u16(n: u16) -> NonZeroU16 {\n+    match NonZeroU16::new(n) {\n+        Some(n) => n,\n+        None => panic!(\"called `unwrap` on a `None` value\"),\n+    }\n+}\n+\n pub fn args() -> Args {\n     // SAFETY: `GetCommandLineW` returns a pointer to a null terminated UTF-16\n     // string so it's safe for `WStrUnits` to use.\n@@ -58,10 +66,10 @@ fn parse_lp_cmd_line<'a, F: Fn() -> OsString>(\n     lp_cmd_line: Option<WStrUnits<'a>>,\n     exe_name: F,\n ) -> Vec<OsString> {\n-    const BACKSLASH: NonZeroU16 = NonZeroU16::new(b'\\\\' as u16).unwrap();\n-    const QUOTE: NonZeroU16 = NonZeroU16::new(b'\"' as u16).unwrap();\n-    const TAB: NonZeroU16 = NonZeroU16::new(b'\\t' as u16).unwrap();\n-    const SPACE: NonZeroU16 = NonZeroU16::new(b' ' as u16).unwrap();\n+    const BACKSLASH: NonZeroU16 = non_zero_u16(b'\\\\' as u16);\n+    const QUOTE: NonZeroU16 = non_zero_u16(b'\"' as u16);\n+    const TAB: NonZeroU16 = non_zero_u16(b'\\t' as u16);\n+    const SPACE: NonZeroU16 = non_zero_u16(b' ' as u16);\n \n     let mut ret_val = Vec::new();\n     // If the cmd line pointer is null or it points to an empty string then"}]}