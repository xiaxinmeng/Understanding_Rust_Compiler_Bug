{"sha": "742ca0caf25813ee30b70d9e29ab3eacb0076302", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0MmNhMGNhZjI1ODEzZWUzMGI3MGQ5ZTI5YWIzZWFjYjAwNzYzMDI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-08-12T22:31:37Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-08-14T04:07:03Z"}, "message": "std: Respect formatting flags for str-like OsStr\n\nHistorically many `Display` and `Debug` implementations for `OsStr`-like\nabstractions have gone through `String::from_utf8_lossy`, but this was updated\nin #42613 to use an internal `Utf8Lossy` abstraction instead. This had the\nunfortunate side effect of causing a regression (#43765) in code which relied on\nthese `fmt` trait implementations respecting the various formatting flags\nspecified.\n\nThis commit opportunistically adds back interpretation of formatting trait flags\nin the \"common case\" where where `OsStr`-like \"thing\" is all valid utf-8 and can\ndelegate to the formatting implementation for `str`. This doesn't entirely solve\nthe regression as non-utf8 paths will format differently than they did before\nstill (in that they will not respect formatting flags), but this should solve\nthe regression for all \"real world\" use cases of paths and such. The door's also\nstill open for handling these flags in the future!\n\nCloses #43765", "tree": {"sha": "53bbef3d12527ccc5a7f530a39f993e2e0709cfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53bbef3d12527ccc5a7f530a39f993e2e0709cfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/742ca0caf25813ee30b70d9e29ab3eacb0076302", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/742ca0caf25813ee30b70d9e29ab3eacb0076302", "html_url": "https://github.com/rust-lang/rust/commit/742ca0caf25813ee30b70d9e29ab3eacb0076302", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/742ca0caf25813ee30b70d9e29ab3eacb0076302/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3cf2062015200c0705ec2820dd02a7b9dc9bb22", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3cf2062015200c0705ec2820dd02a7b9dc9bb22", "html_url": "https://github.com/rust-lang/rust/commit/f3cf2062015200c0705ec2820dd02a7b9dc9bb22"}], "stats": {"total": 35, "additions": 29, "deletions": 6}, "files": [{"sha": "c657e5638d0c8a927aee54aef05d2d1b1b432582", "filename": "src/libstd/path.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/742ca0caf25813ee30b70d9e29ab3eacb0076302/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/742ca0caf25813ee30b70d9e29ab3eacb0076302/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=742ca0caf25813ee30b70d9e29ab3eacb0076302", "patch": "@@ -3953,4 +3953,10 @@ mod tests {\n         assert_eq!(path, path_buf);\n         assert!(path_buf.into_os_string().capacity() >= 15);\n     }\n+\n+    #[test]\n+    fn display_format_flags() {\n+        assert_eq!(format!(\"a{:#<5}b\", Path::new(\"\").display()), \"a#####b\");\n+        assert_eq!(format!(\"a{:#<5}b\", Path::new(\"a\").display()), \"aa####b\");\n+    }\n }"}, {"sha": "b89a73cd28a090ea8aa684c4d3a51569ff6efe27", "filename": "src/libstd/sys_common/wtf8.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/742ca0caf25813ee30b70d9e29ab3eacb0076302/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/742ca0caf25813ee30b70d9e29ab3eacb0076302/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fwtf8.rs?ref=742ca0caf25813ee30b70d9e29ab3eacb0076302", "patch": "@@ -452,10 +452,14 @@ impl fmt::Display for Wtf8 {\n                     pos = surrogate_pos + 3;\n                 },\n                 None => {\n-                    formatter.write_str(unsafe {\n+                    let s = unsafe {\n                         str::from_utf8_unchecked(&wtf8_bytes[pos..])\n-                    })?;\n-                    return Ok(());\n+                    };\n+                    if pos == 0 {\n+                        return s.fmt(formatter)\n+                    } else {\n+                        return formatter.write_str(s)\n+                    }\n                 }\n             }\n         }"}, {"sha": "d568baa2cd7706c2da8619c1f28139b60721f67f", "filename": "src/libstd_unicode/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/742ca0caf25813ee30b70d9e29ab3eacb0076302/src%2Flibstd_unicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/742ca0caf25813ee30b70d9e29ab3eacb0076302/src%2Flibstd_unicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd_unicode%2Flib.rs?ref=742ca0caf25813ee30b70d9e29ab3eacb0076302", "patch": "@@ -34,7 +34,6 @@\n \n #![feature(core_char_ext)]\n #![feature(str_internals)]\n-#![feature(core_intrinsics)]\n #![feature(decode_utf8)]\n #![feature(fused)]\n #![feature(fn_traits)]"}, {"sha": "253dcb6a159510735506e2d7ecd988166d4832ed", "filename": "src/libstd_unicode/lossy.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/742ca0caf25813ee30b70d9e29ab3eacb0076302/src%2Flibstd_unicode%2Flossy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/742ca0caf25813ee30b70d9e29ab3eacb0076302/src%2Flibstd_unicode%2Flossy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd_unicode%2Flossy.rs?ref=742ca0caf25813ee30b70d9e29ab3eacb0076302", "patch": "@@ -12,7 +12,7 @@ use core::str as core_str;\n use core::fmt;\n use core::fmt::Write;\n use char;\n-use core::intrinsics;\n+use core::mem;\n \n \n /// Lossy UTF-8 string.\n@@ -27,7 +27,7 @@ impl Utf8Lossy {\n     }\n \n     pub fn from_bytes(bytes: &[u8]) -> &Utf8Lossy {\n-        unsafe { intrinsics::transmute(bytes) }\n+        unsafe { mem::transmute(bytes) }\n     }\n \n     pub fn chunks(&self) -> Utf8LossyChunksIter {\n@@ -153,7 +153,21 @@ impl<'a> Iterator for Utf8LossyChunksIter<'a> {\n \n impl fmt::Display for Utf8Lossy {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        // If we're the empty string then our iterator won't actually yield\n+        // anything, so perform the formatting manually\n+        if self.bytes.len() == 0 {\n+            return \"\".fmt(f)\n+        }\n+\n         for Utf8LossyChunk { valid, broken } in self.chunks() {\n+            // If we successfully decoded the whole chunk as a valid string then\n+            // we can return a direct formatting of the string which will also\n+            // respect various formatting flags if possible.\n+            if valid.len() == self.bytes.len() {\n+                assert!(broken.is_empty());\n+                return valid.fmt(f)\n+            }\n+\n             f.write_str(valid)?;\n             if !broken.is_empty() {\n                 f.write_char(char::REPLACEMENT_CHARACTER)?;"}]}