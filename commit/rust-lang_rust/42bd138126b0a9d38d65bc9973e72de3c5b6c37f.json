{"sha": "42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "node_id": "C_kwDOAAsO6NoAKDQyYmQxMzgxMjZiMGE5ZDM4ZDY1YmM5OTczZTcyZGUzYzViNmMzN2Y", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-13T14:32:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-13T14:32:33Z"}, "message": "Auto merge of #98145 - ouz-a:some_branch, r=oli-obk\n\nPull Derefer before ElaborateDrops\n\n_Follow up work to #97025 #96549 #96116 #95887 #95649_\n\nThis moves `Derefer` before `ElaborateDrops` and creates a new `Rvalue` called `VirtualRef` that allows us to bypass many constraints for `DerefTemp`.\n\nr? `@oli-obk`", "tree": {"sha": "5131b9e992cc222b6d221be7bab4351c72f028f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5131b9e992cc222b6d221be7bab4351c72f028f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "html_url": "https://github.com/rust-lang/rust/commit/42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca4e39400ef33198e2715973d1c67a1d3cee15e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca4e39400ef33198e2715973d1c67a1d3cee15e7", "html_url": "https://github.com/rust-lang/rust/commit/ca4e39400ef33198e2715973d1c67a1d3cee15e7"}, {"sha": "b4c3a2af7ba0199e99de8ef64a3b112824efebb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4c3a2af7ba0199e99de8ef64a3b112824efebb6", "html_url": "https://github.com/rust-lang/rust/commit/b4c3a2af7ba0199e99de8ef64a3b112824efebb6"}], "stats": {"total": 628, "additions": 401, "deletions": 227}, "files": [{"sha": "ec521b1cf0afdfa0fe7786725a174a679b0113b9", "filename": "compiler/rustc_borrowck/src/invalidation.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs?ref=42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "patch": "@@ -289,6 +289,10 @@ impl<'cx, 'tcx> InvalidationGenerator<'cx, 'tcx> {\n             | Rvalue::ShallowInitBox(ref operand, _ /*ty*/) => {\n                 self.consume_operand(location, operand)\n             }\n+            Rvalue::CopyForDeref(ref place) => {\n+                let op = &Operand::Copy(*place);\n+                self.consume_operand(location, op);\n+            }\n \n             Rvalue::Len(place) | Rvalue::Discriminant(place) => {\n                 let af = match *rvalue {"}, {"sha": "e6142cab5c299f28b2f6ed32582de574a7293c29", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "patch": "@@ -1236,6 +1236,23 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             | Rvalue::ShallowInitBox(ref operand, _ /*ty*/) => {\n                 self.consume_operand(location, (operand, span), flow_state)\n             }\n+            Rvalue::CopyForDeref(place) => {\n+                self.access_place(\n+                    location,\n+                    (place, span),\n+                    (Deep, Read(ReadKind::Copy)),\n+                    LocalMutationIsAllowed::No,\n+                    flow_state,\n+                );\n+\n+                // Finally, check if path was already moved.\n+                self.check_if_path_or_subpath_is_moved(\n+                    location,\n+                    InitializationRequiringAction::Use,\n+                    (place.as_ref(), span),\n+                    flow_state,\n+                );\n+            }\n \n             Rvalue::Len(place) | Rvalue::Discriminant(place) => {\n                 let af = match *rvalue {"}, {"sha": "cf2140097e6da02b45253fef2e86ec5777de83d4", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "patch": "@@ -2269,6 +2269,10 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             Rvalue::Use(operand) | Rvalue::UnaryOp(_, operand) => {\n                 self.check_operand(operand, location);\n             }\n+            Rvalue::CopyForDeref(place) => {\n+                let op = &Operand::Copy(*place);\n+                self.check_operand(op, location);\n+            }\n \n             Rvalue::BinaryOp(_, box (left, right))\n             | Rvalue::CheckedBinaryOp(_, box (left, right)) => {\n@@ -2299,6 +2303,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             | Rvalue::BinaryOp(..)\n             | Rvalue::CheckedBinaryOp(..)\n             | Rvalue::NullaryOp(..)\n+            | Rvalue::CopyForDeref(..)\n             | Rvalue::UnaryOp(..)\n             | Rvalue::Discriminant(..) => None,\n "}, {"sha": "63cd4d6de4c3e12fab188e78f1c323e019e8915e", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "patch": "@@ -503,6 +503,11 @@ fn codegen_stmt<'tcx>(\n                     let val = codegen_operand(fx, operand);\n                     lval.write_cvalue(fx, val);\n                 }\n+                Rvalue::CopyForDeref(place) => {\n+                    let cplace = codegen_place(fx, place);\n+                    let val = cplace.to_cvalue(fx);\n+                    lval.write_cvalue(fx, val)\n+                }\n                 Rvalue::Ref(_, _, place) | Rvalue::AddressOf(_, place) => {\n                     let place = codegen_place(fx, place);\n                     let ref_ = place.place_ref(fx, lval.layout());"}, {"sha": "26b9fbf44284628cdf19e8bbd042de40375d8670", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "patch": "@@ -8,6 +8,7 @@ use crate::traits::*;\n use crate::MemFlags;\n \n use rustc_middle::mir;\n+use rustc_middle::mir::Operand;\n use rustc_middle::ty::cast::{CastTy, IntTy};\n use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf};\n use rustc_middle::ty::{self, adjustment::PointerCast, Instance, Ty, TyCtxt};\n@@ -344,6 +345,10 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 self.codegen_place_to_pointer(bx, place, mk_ref)\n             }\n \n+            mir::Rvalue::CopyForDeref(place) => {\n+                let operand = self.codegen_operand(&mut bx, &Operand::Copy(place));\n+                (bx, operand)\n+            }\n             mir::Rvalue::AddressOf(mutability, place) => {\n                 let mk_ptr = move |tcx: TyCtxt<'tcx>, ty: Ty<'tcx>| {\n                     tcx.mk_ptr(ty::TypeAndMut { ty, mutbl: mutability })\n@@ -698,6 +703,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     pub fn rvalue_creates_operand(&self, rvalue: &mir::Rvalue<'tcx>, span: Span) -> bool {\n         match *rvalue {\n             mir::Rvalue::Ref(..) |\n+            mir::Rvalue::CopyForDeref(..) |\n             mir::Rvalue::AddressOf(..) |\n             mir::Rvalue::Len(..) |\n             mir::Rvalue::Cast(..) | // (*)"}, {"sha": "fea158a9fe4507b1cc3ecc131b82240f462e3a82", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "patch": "@@ -172,6 +172,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.copy_op(&op, &dest, /*allow_transmute*/ false)?;\n             }\n \n+            CopyForDeref(ref place) => {\n+                let op = self.eval_place_to_op(*place, Some(dest.layout))?;\n+                self.copy_op(&op, &dest, /* allow_transmute*/ false)?;\n+            }\n+\n             BinaryOp(bin_op, box (ref left, ref right)) => {\n                 let layout = binop_left_homogeneous(bin_op).then_some(dest.layout);\n                 let left = self.read_immediate(&self.eval_operand(left, layout)?)?;"}, {"sha": "39fabd17c52718ddedd99dc42a3ee2e32be1f8f5", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "patch": "@@ -446,6 +446,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n             Rvalue::ThreadLocalRef(_) => self.check_op(ops::ThreadLocalAccess),\n \n             Rvalue::Use(_)\n+            | Rvalue::CopyForDeref(..)\n             | Rvalue::Repeat(..)\n             | Rvalue::Discriminant(..)\n             | Rvalue::Len(_)"}, {"sha": "9941afe5a12d099698cd76a0de1a8a244ad3a462", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "patch": "@@ -260,6 +260,8 @@ where\n             in_place::<Q, _>(cx, in_local, place.as_ref())\n         }\n \n+        Rvalue::CopyForDeref(place) => in_place::<Q, _>(cx, in_local, place.as_ref()),\n+\n         Rvalue::Use(operand)\n         | Rvalue::Repeat(operand, _)\n         | Rvalue::UnaryOp(_, operand)"}, {"sha": "60c1e4950292d6e060516cb05c38105f6a450e48", "filename": "compiler/rustc_const_eval/src/transform/check_consts/resolver.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fresolver.rs?ref=42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "patch": "@@ -199,6 +199,7 @@ where\n             mir::Rvalue::Cast(..)\n             | mir::Rvalue::ShallowInitBox(..)\n             | mir::Rvalue::Use(..)\n+            | mir::Rvalue::CopyForDeref(..)\n             | mir::Rvalue::ThreadLocalRef(..)\n             | mir::Rvalue::Repeat(..)\n             | mir::Rvalue::Len(..)"}, {"sha": "ed4d8c95d1e6178d882bcaef5a3c9b5bad620a39", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "patch": "@@ -494,6 +494,10 @@ impl<'tcx> Validator<'_, 'tcx> {\n             Rvalue::Use(operand) | Rvalue::Repeat(operand, _) => {\n                 self.validate_operand(operand)?;\n             }\n+            Rvalue::CopyForDeref(place) => {\n+                let op = &Operand::Copy(*place);\n+                self.validate_operand(op)?\n+            }\n \n             Rvalue::Discriminant(place) | Rvalue::Len(place) => {\n                 self.validate_place(place.as_ref())?"}, {"sha": "cd2b8be0acd2af253bb3670f692bc55196ad4147", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "patch": "@@ -382,7 +382,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n             };\n         }\n         match rvalue {\n-            Rvalue::Use(_) => {}\n+            Rvalue::Use(_) | Rvalue::CopyForDeref(_) => {}\n             Rvalue::Aggregate(agg_kind, _) => {\n                 let disallowed = match **agg_kind {\n                     AggregateKind::Array(..) => false,\n@@ -592,6 +592,15 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                         ),\n                     );\n                 }\n+                if let Rvalue::CopyForDeref(place) = rvalue {\n+                    if !place.ty(&self.body.local_decls, self.tcx).ty.builtin_deref(true).is_some()\n+                    {\n+                        self.fail(\n+                            location,\n+                            \"`CopyForDeref` should only be used for dereferenceable types\",\n+                        )\n+                    }\n+                }\n                 // FIXME(JakobDegen): Check this for all rvalues, not just this one.\n                 if let Rvalue::Use(Operand::Copy(src) | Operand::Move(src)) = rvalue {\n                     // The sides of an assignment must not alias. Currently this just checks whether"}, {"sha": "333a88ba5208da48972766eafd1dc8822e0c3d06", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "patch": "@@ -61,7 +61,7 @@ mod syntax;\n pub use syntax::*;\n mod switch_sources;\n pub mod tcx;\n-mod terminator;\n+pub mod terminator;\n pub use terminator::*;\n \n pub mod traversal;\n@@ -925,6 +925,15 @@ impl<'tcx> LocalDecl<'tcx> {\n         }\n     }\n \n+    /// Returns `true` if this is a DerefTemp\n+    pub fn is_deref_temp(&self) -> bool {\n+        match self.local_info {\n+            Some(box LocalInfo::DerefTemp) => return true,\n+            _ => (),\n+        }\n+        return false;\n+    }\n+\n     /// Returns `true` is the local is from a compiler desugaring, e.g.,\n     /// `__next` from a `for` loop.\n     #[inline]\n@@ -1795,6 +1804,7 @@ impl<'tcx> Rvalue<'tcx> {\n             Rvalue::Cast(CastKind::PointerExposeAddress, _, _) => false,\n \n             Rvalue::Use(_)\n+            | Rvalue::CopyForDeref(_)\n             | Rvalue::Repeat(_, _)\n             | Rvalue::Ref(_, _, _)\n             | Rvalue::ThreadLocalRef(_)\n@@ -1889,6 +1899,8 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                 write!(fmt, \"&{}{}{:?}\", region, kind_str, place)\n             }\n \n+            CopyForDeref(ref place) => write!(fmt, \"deref_copy {:#?}\", place),\n+\n             AddressOf(mutability, ref place) => {\n                 let kind_str = match mutability {\n                     Mutability::Mut => \"mut\","}, {"sha": "510316c778bc7678a0ebd40ec4a8549cebbec164", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "patch": "@@ -52,6 +52,8 @@ pub enum MirPhase {\n     /// of the `mir_promoted` query), these promoted elements are available in the `promoted_mir`\n     /// query.\n     ConstsPromoted = 2,\n+    /// After this projections may only contain deref projections as the first element.\n+    Derefered = 3,\n     /// Beginning with this phase, the following variants are disallowed:\n     /// * [`TerminatorKind::DropAndReplace`]\n     /// * [`TerminatorKind::FalseUnwind`]\n@@ -66,9 +68,7 @@ pub enum MirPhase {\n     /// Furthermore, `Drop` now uses explicit drop flags visible in the MIR and reaching a `Drop`\n     /// terminator means that the auto-generated drop glue will be invoked. Also, `Copy` operands\n     /// are allowed for non-`Copy` types.\n-    DropsLowered = 3,\n-    /// After this projections may only contain deref projections as the first element.\n-    Derefered = 4,\n+    DropsLowered = 4,\n     /// Beginning with this phase, the following variant is disallowed:\n     /// * [`Rvalue::Aggregate`] for any `AggregateKind` except `Array`\n     ///\n@@ -1051,6 +1051,16 @@ pub enum Rvalue<'tcx> {\n     /// initialized but its content as uninitialized. Like other pointer casts, this in general\n     /// affects alias analysis.\n     ShallowInitBox(Operand<'tcx>, Ty<'tcx>),\n+\n+    /// A CopyForDeref is equivalent to a read from a place at the\n+    /// codegen level, but is treated specially by drop elaboration. When such a read happens, it\n+    /// is guaranteed (via nature of the mir_opt `Derefer` in rustc_mir_transform/src/deref_separator)\n+    /// that the only use of the returned value is a deref operation, immediately\n+    /// followed by one or more projections. Drop elaboration treats this rvalue as if the\n+    /// read never happened and just projects further. This allows simplifying various MIR\n+    /// optimizations and codegen backends that previously had to handle deref operations anywhere\n+    /// in a place.\n+    CopyForDeref(Place<'tcx>),\n }\n \n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]"}, {"sha": "fd3359ea80fe50e6d6776d25d861db65cd1a4df9", "filename": "compiler/rustc_middle/src/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs?ref=42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "patch": "@@ -211,6 +211,7 @@ impl<'tcx> Rvalue<'tcx> {\n                 }\n             },\n             Rvalue::ShallowInitBox(_, ty) => tcx.mk_box(ty),\n+            Rvalue::CopyForDeref(ref place) => place.ty(local_decls, tcx).ty,\n         }\n     }\n "}, {"sha": "82a6b0c506f58c0087ce9dff2713ae2c6314dee1", "filename": "compiler/rustc_middle/src/mir/type_foldable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs?ref=42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "patch": "@@ -122,6 +122,7 @@ impl<'tcx> TypeFoldable<'tcx> for Rvalue<'tcx> {\n             Ref(region, bk, place) => {\n                 Ref(region.try_fold_with(folder)?, bk, place.try_fold_with(folder)?)\n             }\n+            CopyForDeref(place) => CopyForDeref(place.try_fold_with(folder)?),\n             AddressOf(mutability, place) => AddressOf(mutability, place.try_fold_with(folder)?),\n             Len(place) => Len(place.try_fold_with(folder)?),\n             Cast(kind, op, ty) => Cast(kind, op.try_fold_with(folder)?, ty.try_fold_with(folder)?),"}, {"sha": "6a0801cb0dd252af70bbfb043264b07ad91e2f6b", "filename": "compiler/rustc_middle/src/mir/type_visitable.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs?ref=42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "patch": "@@ -78,6 +78,10 @@ impl<'tcx> TypeVisitable<'tcx> for Rvalue<'tcx> {\n         use crate::mir::Rvalue::*;\n         match *self {\n             Use(ref op) => op.visit_with(visitor),\n+            CopyForDeref(ref place) => {\n+                let op = &Operand::Copy(*place);\n+                op.visit_with(visitor)\n+            }\n             Repeat(ref op, _) => op.visit_with(visitor),\n             ThreadLocalRef(did) => did.visit_with(visitor),\n             Ref(region, _, ref place) => {"}, {"sha": "d285728ec0783002073eaf556b9aefd8bbc832cd", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "patch": "@@ -711,6 +711,13 @@ macro_rules! make_mir_visitor {\n                         };\n                         self.visit_place(path, ctx, location);\n                     }\n+                    Rvalue::CopyForDeref(place) => {\n+                        self.visit_place(\n+                            place,\n+                            PlaceContext::NonMutatingUse(NonMutatingUseContext::Inspect),\n+                            location\n+                        );\n+                    }\n \n                     Rvalue::AddressOf(m, path) => {\n                         let ctx = match m {"}, {"sha": "0f8e86d1d6679b846ba18b177400c942793ebfec", "filename": "compiler/rustc_mir_dataflow/src/impls/borrowed_locals.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs?ref=42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "patch": "@@ -102,7 +102,8 @@ where\n             | mir::Rvalue::NullaryOp(..)\n             | mir::Rvalue::UnaryOp(..)\n             | mir::Rvalue::Discriminant(..)\n-            | mir::Rvalue::Aggregate(..) => {}\n+            | mir::Rvalue::Aggregate(..)\n+            | mir::Rvalue::CopyForDeref(..) => {}\n         }\n     }\n "}, {"sha": "5793a286bd03dda7d12363ee8eaca8373bb9ef0a", "filename": "compiler/rustc_mir_dataflow/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs?ref=42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "patch": "@@ -38,6 +38,7 @@ pub mod impls;\n pub mod move_paths;\n pub mod rustc_peek;\n pub mod storage;\n+pub mod un_derefer;\n \n pub(crate) mod indexes {\n     pub(crate) use super::move_paths::MovePathIndex;"}, {"sha": "19aa71d7bc77213ac3268f8a1cb7a0e956b27c6b", "filename": "compiler/rustc_mir_dataflow/src/move_paths/builder.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs?ref=42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "patch": "@@ -1,3 +1,4 @@\n+use crate::un_derefer::UnDerefer;\n use rustc_index::vec::IndexVec;\n use rustc_middle::mir::tcx::RvalueInitializationState;\n use rustc_middle::mir::*;\n@@ -19,6 +20,7 @@ struct MoveDataBuilder<'a, 'tcx> {\n     param_env: ty::ParamEnv<'tcx>,\n     data: MoveData<'tcx>,\n     errors: Vec<(Place<'tcx>, MoveError<'tcx>)>,\n+    un_derefer: UnDerefer<'tcx>,\n }\n \n impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n@@ -32,6 +34,7 @@ impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n             tcx,\n             param_env,\n             errors: Vec::new(),\n+            un_derefer: UnDerefer { tcx: tcx, derefer_sidetable: Default::default() },\n             data: MoveData {\n                 moves: IndexVec::new(),\n                 loc_map: LocationMap::new(body),\n@@ -94,6 +97,11 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n     ///\n     /// Maybe we should have separate \"borrowck\" and \"moveck\" modes.\n     fn move_path_for(&mut self, place: Place<'tcx>) -> Result<MovePathIndex, MoveError<'tcx>> {\n+        if let Some(new_place) = self.builder.un_derefer.derefer(place.as_ref(), self.builder.body)\n+        {\n+            return self.move_path_for(new_place);\n+        }\n+\n         debug!(\"lookup({:?})\", place);\n         let mut base = self.builder.data.rev_lookup.locals[place.local];\n \n@@ -276,6 +284,12 @@ struct Gatherer<'b, 'a, 'tcx> {\n impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n     fn gather_statement(&mut self, stmt: &Statement<'tcx>) {\n         match &stmt.kind {\n+            StatementKind::Assign(box (place, Rvalue::CopyForDeref(reffed))) => {\n+                assert!(place.projection.is_empty());\n+                if self.builder.body.local_decls[place.local].is_deref_temp() {\n+                    self.builder.un_derefer.derefer_sidetable.insert(place.local, *reffed);\n+                }\n+            }\n             StatementKind::Assign(box (place, rval)) => {\n                 self.create_move_path(*place);\n                 if let RvalueInitializationState::Shallow = rval.initialization_state() {\n@@ -294,7 +308,10 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             }\n             StatementKind::StorageLive(_) => {}\n             StatementKind::StorageDead(local) => {\n-                self.gather_move(Place::from(*local));\n+                // DerefTemp locals (results of CopyForDeref) don't actually move anything.\n+                if !self.builder.un_derefer.derefer_sidetable.contains_key(&local) {\n+                    self.gather_move(Place::from(*local));\n+                }\n             }\n             StatementKind::SetDiscriminant { .. } | StatementKind::Deinit(..) => {\n                 span_bug!(\n@@ -328,6 +345,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n                     self.gather_operand(operand);\n                 }\n             }\n+            Rvalue::CopyForDeref(..) => unreachable!(),\n             Rvalue::Ref(..)\n             | Rvalue::AddressOf(..)\n             | Rvalue::Discriminant(..)\n@@ -439,6 +457,11 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n \n     fn gather_move(&mut self, place: Place<'tcx>) {\n         debug!(\"gather_move({:?}, {:?})\", self.loc, place);\n+        if let Some(new_place) = self.builder.un_derefer.derefer(place.as_ref(), self.builder.body)\n+        {\n+            self.gather_move(new_place);\n+            return;\n+        }\n \n         if let [ref base @ .., ProjectionElem::Subslice { from, to, from_end: false }] =\n             **place.projection\n@@ -494,6 +517,11 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n     fn gather_init(&mut self, place: PlaceRef<'tcx>, kind: InitKind) {\n         debug!(\"gather_init({:?}, {:?})\", self.loc, place);\n \n+        if let Some(new_place) = self.builder.un_derefer.derefer(place, self.builder.body) {\n+            self.gather_init(new_place.as_ref(), kind);\n+            return;\n+        }\n+\n         let mut place = place;\n \n         // Check if we are assigning into a field of a union, if so, lookup the place"}, {"sha": "ec2e516f7ac5f3076fb69607a951cffd63a263f4", "filename": "compiler/rustc_mir_dataflow/src/un_derefer.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_mir_dataflow%2Fsrc%2Fun_derefer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_mir_dataflow%2Fsrc%2Fun_derefer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fun_derefer.rs?ref=42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "patch": "@@ -0,0 +1,36 @@\n+use rustc_data_structures::stable_map::FxHashMap;\n+use rustc_middle::mir::*;\n+use rustc_middle::ty::TyCtxt;\n+\n+/// Used for reverting changes made by `DerefSeparator`\n+pub struct UnDerefer<'tcx> {\n+    pub tcx: TyCtxt<'tcx>,\n+    pub derefer_sidetable: FxHashMap<Local, Place<'tcx>>,\n+}\n+\n+impl<'tcx> UnDerefer<'tcx> {\n+    pub fn derefer(&self, place: PlaceRef<'tcx>, body: &Body<'tcx>) -> Option<Place<'tcx>> {\n+        let reffed = self.derefer_sidetable.get(&place.local)?;\n+\n+        let new_place = reffed.project_deeper(place.projection, self.tcx);\n+        if body.local_decls[new_place.local].is_deref_temp() {\n+            return self.derefer(new_place.as_ref(), body);\n+        }\n+        Some(new_place)\n+    }\n+\n+    pub fn ref_finder(&mut self, body: &Body<'tcx>) {\n+        for (_bb, data) in body.basic_blocks().iter_enumerated() {\n+            for stmt in data.statements.iter() {\n+                match stmt.kind {\n+                    StatementKind::Assign(box (place, Rvalue::CopyForDeref(reffed))) => {\n+                        if body.local_decls[place.local].is_deref_temp() {\n+                            self.derefer_sidetable.insert(place.local, reffed);\n+                        }\n+                    }\n+                    _ => (),\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "13ec1e7bb7289c8f6040a7dd454b4bfad77c8d13", "filename": "compiler/rustc_mir_transform/src/add_retag.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs?ref=42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "patch": "@@ -70,17 +70,6 @@ fn may_contain_reference<'tcx>(ty: Ty<'tcx>, depth: u32, tcx: TyCtxt<'tcx>) -> b\n     }\n }\n \n-/// Determines whether or not this LocalDecl is temp, if not it needs retagging.\n-fn is_not_temp<'tcx>(local_decl: &LocalDecl<'tcx>) -> bool {\n-    if let Some(local_info) = &local_decl.local_info {\n-        match local_info.as_ref() {\n-            LocalInfo::DerefTemp => return false,\n-            _ => (),\n-        };\n-    }\n-    return true;\n-}\n-\n impl<'tcx> MirPass<'tcx> for AddRetag {\n     fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n         sess.opts.debugging_opts.mir_emit_retag\n@@ -98,7 +87,7 @@ impl<'tcx> MirPass<'tcx> for AddRetag {\n             // a temporary and retag on that.\n             is_stable(place.as_ref())\n                 && may_contain_reference(place.ty(&*local_decls, tcx).ty, /*depth*/ 3, tcx)\n-                && is_not_temp(&local_decls[place.local])\n+                && !local_decls[place.local].is_deref_temp()\n         };\n         let place_base_raw = |place: &Place<'tcx>| {\n             // If this is a `Deref`, get the type of what we are deref'ing."}, {"sha": "acd9e6053537826ba86155556850f1ff6b6d4d6b", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "patch": "@@ -621,6 +621,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             // There's no other checking to do at this time.\n             Rvalue::Aggregate(..)\n             | Rvalue::Use(..)\n+            | Rvalue::CopyForDeref(..)\n             | Rvalue::Repeat(..)\n             | Rvalue::Len(..)\n             | Rvalue::Cast(..)"}, {"sha": "49db140c4742ee2e1d67f04d96d6fdb4527e70ad", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "patch": "@@ -693,6 +693,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             // There's no other checking to do at this time.\n             Rvalue::Aggregate(..)\n             | Rvalue::Use(..)\n+            | Rvalue::CopyForDeref(..)\n             | Rvalue::Repeat(..)\n             | Rvalue::Len(..)\n             | Rvalue::Cast(..)"}, {"sha": "a00bb16f7ac67c79c32c93c785beab9fb3b9a40c", "filename": "compiler/rustc_mir_transform/src/deref_separator.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_mir_transform%2Fsrc%2Fderef_separator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_mir_transform%2Fsrc%2Fderef_separator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fderef_separator.rs?ref=42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "patch": "@@ -35,6 +35,7 @@ impl<'tcx> MutVisitor<'tcx> for DerefChecker<'tcx> {\n                     last_deref_idx = idx;\n                 }\n             }\n+\n             for (idx, (p_ref, p_elem)) in place.iter_projections().enumerate() {\n                 if !p_ref.projection.is_empty() && p_elem == ProjectionElem::Deref {\n                     let ty = p_ref.ty(&self.local_decls, self.tcx).ty;\n@@ -54,7 +55,7 @@ impl<'tcx> MutVisitor<'tcx> for DerefChecker<'tcx> {\n                     self.patcher.add_assign(\n                         loc,\n                         Place::from(temp),\n-                        Rvalue::Use(Operand::Move(deref_place)),\n+                        Rvalue::CopyForDeref(deref_place),\n                     );\n                     place_local = temp;\n                     last_len = p_ref.projection.len();"}, {"sha": "71ab6dee1b6621e8162818c5b059e22a933590d6", "filename": "compiler/rustc_mir_transform/src/elaborate_drops.rs", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs?ref=42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "patch": "@@ -1,3 +1,4 @@\n+use crate::deref_separator::deref_finder;\n use crate::MirPass;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_index::bit_set::BitSet;\n@@ -9,6 +10,7 @@ use rustc_mir_dataflow::elaborate_drops::{DropElaborator, DropFlagMode, DropStyl\n use rustc_mir_dataflow::impls::{MaybeInitializedPlaces, MaybeUninitializedPlaces};\n use rustc_mir_dataflow::move_paths::{LookupResult, MoveData, MovePathIndex};\n use rustc_mir_dataflow::on_lookup_result_bits;\n+use rustc_mir_dataflow::un_derefer::UnDerefer;\n use rustc_mir_dataflow::MoveDataParamEnv;\n use rustc_mir_dataflow::{on_all_children_bits, on_all_drop_children_bits};\n use rustc_mir_dataflow::{Analysis, ResultsCursor};\n@@ -26,6 +28,8 @@ impl<'tcx> MirPass<'tcx> for ElaborateDrops {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         debug!(\"elaborate_drops({:?} @ {:?})\", body.source, body.span);\n \n+        let mut un_derefer = UnDerefer { tcx: tcx, derefer_sidetable: Default::default() };\n+        un_derefer.ref_finder(body);\n         let def_id = body.source.def_id();\n         let param_env = tcx.param_env_reveal_all_normalized(def_id);\n         let move_data = match MoveData::gather_moves(body, tcx, param_env) {\n@@ -41,7 +45,7 @@ impl<'tcx> MirPass<'tcx> for ElaborateDrops {\n         let elaborate_patch = {\n             let body = &*body;\n             let env = MoveDataParamEnv { move_data, param_env };\n-            let dead_unwinds = find_dead_unwinds(tcx, body, &env);\n+            let dead_unwinds = find_dead_unwinds(tcx, body, &env, &un_derefer);\n \n             let inits = MaybeInitializedPlaces::new(tcx, body, &env)\n                 .into_engine(tcx, body)\n@@ -65,10 +69,12 @@ impl<'tcx> MirPass<'tcx> for ElaborateDrops {\n                 init_data: InitializationData { inits, uninits },\n                 drop_flags: Default::default(),\n                 patch: MirPatch::new(body),\n+                un_derefer: un_derefer,\n             }\n             .elaborate()\n         };\n         elaborate_patch.apply(body);\n+        deref_finder(tcx, body);\n     }\n }\n \n@@ -79,6 +85,7 @@ fn find_dead_unwinds<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     body: &Body<'tcx>,\n     env: &MoveDataParamEnv<'tcx>,\n+    und: &UnDerefer<'tcx>,\n ) -> BitSet<BasicBlock> {\n     debug!(\"find_dead_unwinds({:?})\", body.span);\n     // We only need to do this pass once, because unwind edges can only\n@@ -92,7 +99,9 @@ fn find_dead_unwinds<'tcx>(\n     for (bb, bb_data) in body.basic_blocks().iter_enumerated() {\n         let place = match bb_data.terminator().kind {\n             TerminatorKind::Drop { ref place, unwind: Some(_), .. }\n-            | TerminatorKind::DropAndReplace { ref place, unwind: Some(_), .. } => place,\n+            | TerminatorKind::DropAndReplace { ref place, unwind: Some(_), .. } => {\n+                und.derefer(place.as_ref(), body).unwrap_or(*place)\n+            }\n             _ => continue,\n         };\n \n@@ -256,6 +265,7 @@ struct ElaborateDropsCtxt<'a, 'tcx> {\n     init_data: InitializationData<'a, 'tcx>,\n     drop_flags: FxHashMap<MovePathIndex, Local>,\n     patch: MirPatch<'tcx>,\n+    un_derefer: UnDerefer<'tcx>,\n }\n \n impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n@@ -298,7 +308,9 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n             let terminator = data.terminator();\n             let place = match terminator.kind {\n                 TerminatorKind::Drop { ref place, .. }\n-                | TerminatorKind::DropAndReplace { ref place, .. } => place,\n+                | TerminatorKind::DropAndReplace { ref place, .. } => {\n+                    self.un_derefer.derefer(place.as_ref(), self.body).unwrap_or(*place)\n+                }\n                 _ => continue,\n             };\n \n@@ -312,12 +324,17 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n                 LookupResult::Parent(None) => continue,\n                 LookupResult::Parent(Some(parent)) => {\n                     let (_maybe_live, maybe_dead) = self.init_data.maybe_live_dead(parent);\n+\n+                    if self.body.local_decls[place.local].is_deref_temp() {\n+                        continue;\n+                    }\n+\n                     if maybe_dead {\n                         self.tcx.sess.delay_span_bug(\n                             terminator.source_info.span,\n                             &format!(\n                                 \"drop of untracked, uninitialized value {:?}, place {:?} ({:?})\",\n-                                bb, place, path,\n+                                bb, place, path\n                             ),\n                         );\n                     }\n@@ -348,7 +365,11 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n \n             let resume_block = self.patch.resume_block();\n             match terminator.kind {\n-                TerminatorKind::Drop { place, target, unwind } => {\n+                TerminatorKind::Drop { mut place, target, unwind } => {\n+                    if let Some(new_place) = self.un_derefer.derefer(place.as_ref(), self.body) {\n+                        place = new_place;\n+                    }\n+\n                     self.init_data.seek_before(loc);\n                     match self.move_data().rev_lookup.find(place.as_ref()) {\n                         LookupResult::Exact(path) => elaborate_drop(\n@@ -372,9 +393,12 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n                         }\n                     }\n                 }\n-                TerminatorKind::DropAndReplace { place, ref value, target, unwind } => {\n+                TerminatorKind::DropAndReplace { mut place, ref value, target, unwind } => {\n                     assert!(!data.is_cleanup);\n \n+                    if let Some(new_place) = self.un_derefer.derefer(place.as_ref(), self.body) {\n+                        place = new_place;\n+                    }\n                     self.elaborate_replace(loc, place, value, target, unwind);\n                 }\n                 _ => continue,"}, {"sha": "9e5c22308e776666087fbf74c99bcce11b6f459a", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "patch": "@@ -420,6 +420,7 @@ fn run_post_borrowck_cleanup_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tc\n         &remove_noop_landing_pads::RemoveNoopLandingPads,\n         &cleanup_post_borrowck::CleanupNonCodegenStatements,\n         &simplify::SimplifyCfg::new(\"early-opt\"),\n+        &deref_separator::Derefer,\n         // These next passes must be executed together\n         &add_call_guards::CriticalCallEdges,\n         &elaborate_drops::ElaborateDrops,\n@@ -432,7 +433,6 @@ fn run_post_borrowck_cleanup_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tc\n         &add_moves_for_packed_drops::AddMovesForPackedDrops,\n         // `AddRetag` needs to run after `ElaborateDrops`. Otherwise it should run fairly late,\n         // but before optimizations begin.\n-        &deref_separator::Derefer,\n         &elaborate_box_derefs::ElaborateBoxDerefs,\n         &add_retag::AddRetag,\n         &lower_intrinsics::LowerIntrinsics,"}, {"sha": "925eb10a1f75fec68ad1c23659e400a36b448358", "filename": "compiler/rustc_mir_transform/src/separate_const_switch.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs?ref=42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "patch": "@@ -218,6 +218,7 @@ fn is_likely_const<'tcx>(mut tracked_place: Place<'tcx>, block: &BasicBlockData<\n                         // These rvalues move the place to track\n                         Rvalue::Cast(_, Operand::Copy(place) | Operand::Move(place), _)\n                         | Rvalue::Use(Operand::Copy(place) | Operand::Move(place))\n+                        | Rvalue::CopyForDeref(place)\n                         | Rvalue::UnaryOp(_, Operand::Copy(place) | Operand::Move(place))\n                         | Rvalue::Discriminant(place) => tracked_place = place,\n                     }\n@@ -279,6 +280,7 @@ fn find_determining_place<'tcx>(\n                     // that may be const in the predecessor\n                     Rvalue::Use(Operand::Move(new) | Operand::Copy(new))\n                     | Rvalue::UnaryOp(_, Operand::Copy(new) | Operand::Move(new))\n+                    | Rvalue::CopyForDeref(new)\n                     | Rvalue::Cast(_, Operand::Move(new) | Operand::Copy(new), _)\n                     | Rvalue::Repeat(Operand::Move(new) | Operand::Copy(new), _)\n                     | Rvalue::Discriminant(new)"}, {"sha": "9affe5a50061dd0a8d1c8526e67dbfc5289dafd1", "filename": "src/test/mir-opt/derefer_complex_case.main.Derefer.diff", "status": "modified", "additions": 69, "deletions": 69, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/src%2Ftest%2Fmir-opt%2Fderefer_complex_case.main.Derefer.diff", "raw_url": "https://github.com/rust-lang/rust/raw/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/src%2Ftest%2Fmir-opt%2Fderefer_complex_case.main.Derefer.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_complex_case.main.Derefer.diff?ref=42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "patch": "@@ -2,110 +2,110 @@\n + // MIR for `main` after Derefer\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/derefer_complex_case.rs:3:11: 3:11\n-      let mut _1: std::slice::Iter<i32>;   // in scope 0 at $DIR/derefer_complex_case.rs:4:17: 4:26\n-      let mut _2: &[i32; 2];               // in scope 0 at $DIR/derefer_complex_case.rs:4:17: 4:26\n-      let _3: [i32; 2];                    // in scope 0 at $DIR/derefer_complex_case.rs:4:18: 4:26\n-      let mut _4: std::slice::Iter<i32>;   // in scope 0 at $DIR/derefer_complex_case.rs:4:17: 4:26\n-      let mut _5: ();                      // in scope 0 at $DIR/derefer_complex_case.rs:3:1: 5:2\n-      let _6: ();                          // in scope 0 at $DIR/derefer_complex_case.rs:4:17: 4:26\n-      let mut _7: std::option::Option<&i32>; // in scope 0 at $DIR/derefer_complex_case.rs:4:17: 4:26\n-      let mut _8: &mut std::slice::Iter<i32>; // in scope 0 at $DIR/derefer_complex_case.rs:4:17: 4:26\n-      let mut _9: &mut std::slice::Iter<i32>; // in scope 0 at $DIR/derefer_complex_case.rs:4:17: 4:26\n-      let mut _10: isize;                  // in scope 0 at $DIR/derefer_complex_case.rs:4:5: 4:40\n-      let mut _11: !;                      // in scope 0 at $DIR/derefer_complex_case.rs:4:5: 4:40\n-      let mut _13: i32;                    // in scope 0 at $DIR/derefer_complex_case.rs:4:34: 4:37\n-      let mut _14: &[i32; 2];              // in scope 0 at $DIR/derefer_complex_case.rs:4:17: 4:26\n-+     let mut _15: &i32;                   // in scope 0 at $DIR/derefer_complex_case.rs:4:17: 4:26\n+      let mut _0: ();                      // return place in scope 0 at $DIR/derefer_complex_case.rs:4:11: 4:11\n+      let mut _1: std::slice::Iter<i32>;   // in scope 0 at $DIR/derefer_complex_case.rs:5:17: 5:26\n+      let mut _2: &[i32; 2];               // in scope 0 at $DIR/derefer_complex_case.rs:5:17: 5:26\n+      let _3: [i32; 2];                    // in scope 0 at $DIR/derefer_complex_case.rs:5:18: 5:26\n+      let mut _4: std::slice::Iter<i32>;   // in scope 0 at $DIR/derefer_complex_case.rs:5:17: 5:26\n+      let mut _5: ();                      // in scope 0 at $DIR/derefer_complex_case.rs:4:1: 6:2\n+      let _6: ();                          // in scope 0 at $DIR/derefer_complex_case.rs:5:17: 5:26\n+      let mut _7: std::option::Option<&i32>; // in scope 0 at $DIR/derefer_complex_case.rs:5:17: 5:26\n+      let mut _8: &mut std::slice::Iter<i32>; // in scope 0 at $DIR/derefer_complex_case.rs:5:17: 5:26\n+      let mut _9: &mut std::slice::Iter<i32>; // in scope 0 at $DIR/derefer_complex_case.rs:5:17: 5:26\n+      let mut _10: isize;                  // in scope 0 at $DIR/derefer_complex_case.rs:5:5: 5:40\n+      let mut _11: !;                      // in scope 0 at $DIR/derefer_complex_case.rs:5:5: 5:40\n+      let mut _13: i32;                    // in scope 0 at $DIR/derefer_complex_case.rs:5:34: 5:37\n+      let mut _14: &[i32; 2];              // in scope 0 at $DIR/derefer_complex_case.rs:5:17: 5:26\n++     let mut _15: &i32;                   // in scope 0 at $DIR/derefer_complex_case.rs:5:17: 5:26\n       scope 1 {\n-          debug iter => _4;                // in scope 1 at $DIR/derefer_complex_case.rs:4:17: 4:26\n-          let _12: i32;                    // in scope 1 at $DIR/derefer_complex_case.rs:4:10: 4:13\n+          debug iter => _4;                // in scope 1 at $DIR/derefer_complex_case.rs:5:17: 5:26\n+          let _12: i32;                    // in scope 1 at $DIR/derefer_complex_case.rs:5:10: 5:13\n           scope 2 {\n-              debug foo => _12;            // in scope 2 at $DIR/derefer_complex_case.rs:4:10: 4:13\n+              debug foo => _12;            // in scope 2 at $DIR/derefer_complex_case.rs:5:10: 5:13\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/derefer_complex_case.rs:4:17: 4:26\n-          StorageLive(_2);                 // scope 0 at $DIR/derefer_complex_case.rs:4:17: 4:26\n-          _14 = const main::promoted[0];   // scope 0 at $DIR/derefer_complex_case.rs:4:17: 4:26\n+          StorageLive(_1);                 // scope 0 at $DIR/derefer_complex_case.rs:5:17: 5:26\n+          StorageLive(_2);                 // scope 0 at $DIR/derefer_complex_case.rs:5:17: 5:26\n+          _14 = const main::promoted[0];   // scope 0 at $DIR/derefer_complex_case.rs:5:17: 5:26\n                                            // mir::Constant\n-                                           // + span: $DIR/derefer_complex_case.rs:4:17: 4:26\n+                                           // + span: $DIR/derefer_complex_case.rs:5:17: 5:26\n                                            // + literal: Const { ty: &[i32; 2], val: Unevaluated(main, [], Some(promoted[0])) }\n-          _2 = &(*_14);                    // scope 0 at $DIR/derefer_complex_case.rs:4:17: 4:26\n-          _1 = <&[i32; 2] as IntoIterator>::into_iter(move _2) -> bb1; // scope 0 at $DIR/derefer_complex_case.rs:4:17: 4:26\n+          _2 = &(*_14);                    // scope 0 at $DIR/derefer_complex_case.rs:5:17: 5:26\n+          _1 = <&[i32; 2] as IntoIterator>::into_iter(move _2) -> bb1; // scope 0 at $DIR/derefer_complex_case.rs:5:17: 5:26\n                                            // mir::Constant\n-                                           // + span: $DIR/derefer_complex_case.rs:4:17: 4:26\n+                                           // + span: $DIR/derefer_complex_case.rs:5:17: 5:26\n                                            // + literal: Const { ty: fn(&[i32; 2]) -> <&[i32; 2] as IntoIterator>::IntoIter {<&[i32; 2] as IntoIterator>::into_iter}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageDead(_2);                 // scope 0 at $DIR/derefer_complex_case.rs:4:25: 4:26\n-          StorageLive(_4);                 // scope 0 at $DIR/derefer_complex_case.rs:4:17: 4:26\n-          _4 = move _1;                    // scope 0 at $DIR/derefer_complex_case.rs:4:17: 4:26\n-          goto -> bb2;                     // scope 1 at $DIR/derefer_complex_case.rs:4:5: 4:40\n+          StorageDead(_2);                 // scope 0 at $DIR/derefer_complex_case.rs:5:25: 5:26\n+          StorageLive(_4);                 // scope 0 at $DIR/derefer_complex_case.rs:5:17: 5:26\n+          _4 = move _1;                    // scope 0 at $DIR/derefer_complex_case.rs:5:17: 5:26\n+          goto -> bb2;                     // scope 1 at $DIR/derefer_complex_case.rs:5:5: 5:40\n       }\n   \n       bb2: {\n-          StorageLive(_6);                 // scope 1 at $DIR/derefer_complex_case.rs:4:17: 4:26\n-          StorageLive(_7);                 // scope 1 at $DIR/derefer_complex_case.rs:4:17: 4:26\n-          StorageLive(_8);                 // scope 1 at $DIR/derefer_complex_case.rs:4:17: 4:26\n-          StorageLive(_9);                 // scope 1 at $DIR/derefer_complex_case.rs:4:17: 4:26\n-          _9 = &mut _4;                    // scope 1 at $DIR/derefer_complex_case.rs:4:17: 4:26\n-          _8 = &mut (*_9);                 // scope 1 at $DIR/derefer_complex_case.rs:4:17: 4:26\n-          _7 = <std::slice::Iter<i32> as Iterator>::next(move _8) -> bb3; // scope 1 at $DIR/derefer_complex_case.rs:4:17: 4:26\n+          StorageLive(_6);                 // scope 1 at $DIR/derefer_complex_case.rs:5:17: 5:26\n+          StorageLive(_7);                 // scope 1 at $DIR/derefer_complex_case.rs:5:17: 5:26\n+          StorageLive(_8);                 // scope 1 at $DIR/derefer_complex_case.rs:5:17: 5:26\n+          StorageLive(_9);                 // scope 1 at $DIR/derefer_complex_case.rs:5:17: 5:26\n+          _9 = &mut _4;                    // scope 1 at $DIR/derefer_complex_case.rs:5:17: 5:26\n+          _8 = &mut (*_9);                 // scope 1 at $DIR/derefer_complex_case.rs:5:17: 5:26\n+          _7 = <std::slice::Iter<i32> as Iterator>::next(move _8) -> bb3; // scope 1 at $DIR/derefer_complex_case.rs:5:17: 5:26\n                                            // mir::Constant\n-                                           // + span: $DIR/derefer_complex_case.rs:4:17: 4:26\n+                                           // + span: $DIR/derefer_complex_case.rs:5:17: 5:26\n                                            // + literal: Const { ty: for<'r> fn(&'r mut std::slice::Iter<i32>) -> Option<<std::slice::Iter<i32> as Iterator>::Item> {<std::slice::Iter<i32> as Iterator>::next}, val: Value(<ZST>) }\n       }\n   \n       bb3: {\n-          StorageDead(_8);                 // scope 1 at $DIR/derefer_complex_case.rs:4:25: 4:26\n-          _10 = discriminant(_7);          // scope 1 at $DIR/derefer_complex_case.rs:4:17: 4:26\n-          switchInt(move _10) -> [0_isize: bb6, 1_isize: bb4, otherwise: bb5]; // scope 1 at $DIR/derefer_complex_case.rs:4:17: 4:26\n+          StorageDead(_8);                 // scope 1 at $DIR/derefer_complex_case.rs:5:25: 5:26\n+          _10 = discriminant(_7);          // scope 1 at $DIR/derefer_complex_case.rs:5:17: 5:26\n+          switchInt(move _10) -> [0_isize: bb6, 1_isize: bb4, otherwise: bb5]; // scope 1 at $DIR/derefer_complex_case.rs:5:17: 5:26\n       }\n   \n       bb4: {\n-          StorageLive(_12);                // scope 1 at $DIR/derefer_complex_case.rs:4:10: 4:13\n--         _12 = (*((_7 as Some).0: &i32)); // scope 1 at $DIR/derefer_complex_case.rs:4:10: 4:13\n-+         StorageLive(_15);                // scope 1 at $DIR/derefer_complex_case.rs:4:10: 4:13\n-+         _15 = move ((_7 as Some).0: &i32); // scope 1 at $DIR/derefer_complex_case.rs:4:10: 4:13\n-+         _12 = (*_15);                    // scope 1 at $DIR/derefer_complex_case.rs:4:10: 4:13\n-+         StorageDead(_15);                // scope 2 at $DIR/derefer_complex_case.rs:4:34: 4:37\n-          StorageLive(_13);                // scope 2 at $DIR/derefer_complex_case.rs:4:34: 4:37\n-          _13 = _12;                       // scope 2 at $DIR/derefer_complex_case.rs:4:34: 4:37\n-          _6 = std::mem::drop::<i32>(move _13) -> bb7; // scope 2 at $DIR/derefer_complex_case.rs:4:29: 4:38\n+          StorageLive(_12);                // scope 1 at $DIR/derefer_complex_case.rs:5:10: 5:13\n+-         _12 = (*((_7 as Some).0: &i32)); // scope 1 at $DIR/derefer_complex_case.rs:5:10: 5:13\n++         StorageLive(_15);                // scope 1 at $DIR/derefer_complex_case.rs:5:10: 5:13\n++         _15 = deref_copy ((_7 as Some).0: &i32); // scope 1 at $DIR/derefer_complex_case.rs:5:10: 5:13\n++         _12 = (*_15);                    // scope 1 at $DIR/derefer_complex_case.rs:5:10: 5:13\n++         StorageDead(_15);                // scope 2 at $DIR/derefer_complex_case.rs:5:34: 5:37\n+          StorageLive(_13);                // scope 2 at $DIR/derefer_complex_case.rs:5:34: 5:37\n+          _13 = _12;                       // scope 2 at $DIR/derefer_complex_case.rs:5:34: 5:37\n+          _6 = std::mem::drop::<i32>(move _13) -> bb7; // scope 2 at $DIR/derefer_complex_case.rs:5:29: 5:38\n                                            // mir::Constant\n-                                           // + span: $DIR/derefer_complex_case.rs:4:29: 4:33\n+                                           // + span: $DIR/derefer_complex_case.rs:5:29: 5:33\n                                            // + literal: Const { ty: fn(i32) {std::mem::drop::<i32>}, val: Value(<ZST>) }\n       }\n   \n       bb5: {\n-          unreachable;                     // scope 1 at $DIR/derefer_complex_case.rs:4:17: 4:26\n+          unreachable;                     // scope 1 at $DIR/derefer_complex_case.rs:5:17: 5:26\n       }\n   \n       bb6: {\n-          _0 = const ();                   // scope 1 at $DIR/derefer_complex_case.rs:4:5: 4:40\n-          StorageDead(_9);                 // scope 1 at $DIR/derefer_complex_case.rs:4:39: 4:40\n-          StorageDead(_7);                 // scope 1 at $DIR/derefer_complex_case.rs:4:39: 4:40\n-          StorageDead(_6);                 // scope 1 at $DIR/derefer_complex_case.rs:4:39: 4:40\n-          StorageDead(_4);                 // scope 0 at $DIR/derefer_complex_case.rs:4:39: 4:40\n-          StorageDead(_1);                 // scope 0 at $DIR/derefer_complex_case.rs:4:39: 4:40\n-          return;                          // scope 0 at $DIR/derefer_complex_case.rs:5:2: 5:2\n+          _0 = const ();                   // scope 1 at $DIR/derefer_complex_case.rs:5:5: 5:40\n+          StorageDead(_9);                 // scope 1 at $DIR/derefer_complex_case.rs:5:39: 5:40\n+          StorageDead(_7);                 // scope 1 at $DIR/derefer_complex_case.rs:5:39: 5:40\n+          StorageDead(_6);                 // scope 1 at $DIR/derefer_complex_case.rs:5:39: 5:40\n+          StorageDead(_4);                 // scope 0 at $DIR/derefer_complex_case.rs:5:39: 5:40\n+          StorageDead(_1);                 // scope 0 at $DIR/derefer_complex_case.rs:5:39: 5:40\n+          return;                          // scope 0 at $DIR/derefer_complex_case.rs:6:2: 6:2\n       }\n   \n       bb7: {\n-          StorageDead(_13);                // scope 2 at $DIR/derefer_complex_case.rs:4:37: 4:38\n-          StorageDead(_12);                // scope 1 at $DIR/derefer_complex_case.rs:4:39: 4:40\n-          StorageDead(_9);                 // scope 1 at $DIR/derefer_complex_case.rs:4:39: 4:40\n-          StorageDead(_7);                 // scope 1 at $DIR/derefer_complex_case.rs:4:39: 4:40\n-          StorageDead(_6);                 // scope 1 at $DIR/derefer_complex_case.rs:4:39: 4:40\n-          _5 = const ();                   // scope 1 at $DIR/derefer_complex_case.rs:4:5: 4:40\n-          goto -> bb2;                     // scope 1 at $DIR/derefer_complex_case.rs:4:5: 4:40\n-      }\n-  \n-      bb8 (cleanup): {\n-          resume;                          // scope 0 at $DIR/derefer_complex_case.rs:3:1: 5:2\n+          StorageDead(_13);                // scope 2 at $DIR/derefer_complex_case.rs:5:37: 5:38\n+          StorageDead(_12);                // scope 1 at $DIR/derefer_complex_case.rs:5:39: 5:40\n+          StorageDead(_9);                 // scope 1 at $DIR/derefer_complex_case.rs:5:39: 5:40\n+          StorageDead(_7);                 // scope 1 at $DIR/derefer_complex_case.rs:5:39: 5:40\n+          StorageDead(_6);                 // scope 1 at $DIR/derefer_complex_case.rs:5:39: 5:40\n+          _5 = const ();                   // scope 1 at $DIR/derefer_complex_case.rs:5:5: 5:40\n+          goto -> bb2;                     // scope 1 at $DIR/derefer_complex_case.rs:5:5: 5:40\n++     }\n++ \n++     bb8 (cleanup): {\n++         resume;                          // scope 0 at $DIR/derefer_complex_case.rs:4:1: 6:2\n       }\n   }\n   "}, {"sha": "48bec39074c899f0367bb221c9edc33aba52c86d", "filename": "src/test/mir-opt/derefer_complex_case.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/src%2Ftest%2Fmir-opt%2Fderefer_complex_case.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/src%2Ftest%2Fmir-opt%2Fderefer_complex_case.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_complex_case.rs?ref=42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "patch": "@@ -1,4 +1,5 @@\n // EMIT_MIR derefer_complex_case.main.Derefer.diff\n+// ignore-wasm32\n \n fn main() {\n     for &foo in &[42, 43] { drop(foo) }"}, {"sha": "fe64156f42f8474ef287dd11816beae22ec1b5ce", "filename": "src/test/mir-opt/derefer_inline_test.main.Derefer.diff", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/src%2Ftest%2Fmir-opt%2Fderefer_inline_test.main.Derefer.diff", "raw_url": "https://github.com/rust-lang/rust/raw/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/src%2Ftest%2Fmir-opt%2Fderefer_inline_test.main.Derefer.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_inline_test.main.Derefer.diff?ref=42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "patch": "@@ -8,7 +8,6 @@\n       let mut _3: usize;                   // in scope 0 at $DIR/derefer_inline_test.rs:10:5: 10:12\n       let mut _4: *mut u8;                 // in scope 0 at $DIR/derefer_inline_test.rs:10:5: 10:12\n       let mut _5: std::boxed::Box<std::boxed::Box<u32>>; // in scope 0 at $DIR/derefer_inline_test.rs:10:5: 10:12\n-      let mut _6: ();                      // in scope 0 at $DIR/derefer_inline_test.rs:10:11: 10:12\n       scope 1 {\n       }\n   \n@@ -25,20 +24,20 @@\n       bb1: {\n           StorageLive(_5);                 // scope 0 at $DIR/derefer_inline_test.rs:10:5: 10:12\n           _5 = ShallowInitBox(move _4, std::boxed::Box<u32>); // scope 0 at $DIR/derefer_inline_test.rs:10:5: 10:12\n-          (*_5) = f() -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/derefer_inline_test.rs:10:9: 10:12\n+          (*_5) = f() -> [return: bb2, unwind: bb6]; // scope 0 at $DIR/derefer_inline_test.rs:10:9: 10:12\n                                            // mir::Constant\n                                            // + span: $DIR/derefer_inline_test.rs:10:9: 10:10\n                                            // + literal: Const { ty: fn() -> Box<u32> {f}, val: Value(<ZST>) }\n       }\n   \n       bb2: {\n           _1 = move _5;                    // scope 0 at $DIR/derefer_inline_test.rs:10:5: 10:12\n-          goto -> bb3;                     // scope 0 at $DIR/derefer_inline_test.rs:10:11: 10:12\n+          drop(_5) -> [return: bb3, unwind: bb5]; // scope 0 at $DIR/derefer_inline_test.rs:10:11: 10:12\n       }\n   \n       bb3: {\n           StorageDead(_5);                 // scope 0 at $DIR/derefer_inline_test.rs:10:11: 10:12\n-          drop(_1) -> [return: bb4, unwind: bb6]; // scope 0 at $DIR/derefer_inline_test.rs:10:12: 10:13\n+          drop(_1) -> bb4;                 // scope 0 at $DIR/derefer_inline_test.rs:10:12: 10:13\n       }\n   \n       bb4: {\n@@ -48,22 +47,15 @@\n       }\n   \n       bb5 (cleanup): {\n-          goto -> bb8;                     // scope 0 at $DIR/derefer_inline_test.rs:10:11: 10:12\n+          drop(_1) -> bb7;                 // scope 0 at $DIR/derefer_inline_test.rs:10:12: 10:13\n       }\n   \n       bb6 (cleanup): {\n-          resume;                          // scope 0 at $DIR/derefer_inline_test.rs:9:1: 11:2\n+          drop(_5) -> bb7;                 // scope 0 at $DIR/derefer_inline_test.rs:10:11: 10:12\n       }\n   \n       bb7 (cleanup): {\n-          _6 = alloc::alloc::box_free::<Box<u32>, std::alloc::Global>(move (_5.0: std::ptr::Unique<std::boxed::Box<u32>>), move (_5.1: std::alloc::Global)) -> bb6; // scope 0 at $DIR/derefer_inline_test.rs:10:11: 10:12\n-                                           // mir::Constant\n-                                           // + span: $DIR/derefer_inline_test.rs:10:11: 10:12\n-                                           // + literal: Const { ty: unsafe fn(Unique<Box<u32>>, std::alloc::Global) {alloc::alloc::box_free::<Box<u32>, std::alloc::Global>}, val: Value(<ZST>) }\n-      }\n-  \n-      bb8 (cleanup): {\n-          goto -> bb7;                     // scope 0 at $DIR/derefer_inline_test.rs:10:11: 10:12\n+          resume;                          // scope 0 at $DIR/derefer_inline_test.rs:9:1: 11:2\n       }\n   }\n   "}, {"sha": "003803fbd5ca94304d98fd9a740bfbd2cf311684", "filename": "src/test/mir-opt/derefer_terminator_test.main.Derefer.diff", "status": "modified", "additions": 67, "deletions": 67, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/src%2Ftest%2Fmir-opt%2Fderefer_terminator_test.main.Derefer.diff", "raw_url": "https://github.com/rust-lang/rust/raw/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/src%2Ftest%2Fmir-opt%2Fderefer_terminator_test.main.Derefer.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_terminator_test.main.Derefer.diff?ref=42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "patch": "@@ -2,102 +2,102 @@\n + // MIR for `main` after Derefer\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/derefer_terminator_test.rs:2:11: 2:11\n-      let _1: bool;                        // in scope 0 at $DIR/derefer_terminator_test.rs:3:9: 3:10\n-      let _3: ();                          // in scope 0 at $DIR/derefer_terminator_test.rs:5:5: 8:6\n-      let mut _4: &&&&bool;                // in scope 0 at $DIR/derefer_terminator_test.rs:5:15: 5:22\n-      let _5: &&&bool;                     // in scope 0 at $DIR/derefer_terminator_test.rs:5:17: 5:21\n-      let _6: &&bool;                      // in scope 0 at $DIR/derefer_terminator_test.rs:5:18: 5:21\n-      let _7: &bool;                       // in scope 0 at $DIR/derefer_terminator_test.rs:5:19: 5:21\n-+     let mut _10: &&&bool;                // in scope 0 at $DIR/derefer_terminator_test.rs:5:15: 5:22\n-+     let mut _11: &&bool;                 // in scope 0 at $DIR/derefer_terminator_test.rs:5:15: 5:22\n-+     let mut _12: &bool;                  // in scope 0 at $DIR/derefer_terminator_test.rs:5:15: 5:22\n+      let mut _0: ();                      // return place in scope 0 at $DIR/derefer_terminator_test.rs:4:11: 4:11\n+      let _1: bool;                        // in scope 0 at $DIR/derefer_terminator_test.rs:5:9: 5:10\n+      let _3: ();                          // in scope 0 at $DIR/derefer_terminator_test.rs:7:5: 10:6\n+      let mut _4: &&&&bool;                // in scope 0 at $DIR/derefer_terminator_test.rs:7:15: 7:22\n+      let _5: &&&bool;                     // in scope 0 at $DIR/derefer_terminator_test.rs:7:17: 7:21\n+      let _6: &&bool;                      // in scope 0 at $DIR/derefer_terminator_test.rs:7:18: 7:21\n+      let _7: &bool;                       // in scope 0 at $DIR/derefer_terminator_test.rs:7:19: 7:21\n++     let mut _10: &&&bool;                // in scope 0 at $DIR/derefer_terminator_test.rs:7:15: 7:22\n++     let mut _11: &&bool;                 // in scope 0 at $DIR/derefer_terminator_test.rs:7:15: 7:22\n++     let mut _12: &bool;                  // in scope 0 at $DIR/derefer_terminator_test.rs:7:15: 7:22\n       scope 1 {\n-          debug b => _1;                   // in scope 1 at $DIR/derefer_terminator_test.rs:3:9: 3:10\n-          let _2: bool;                    // in scope 1 at $DIR/derefer_terminator_test.rs:4:9: 4:10\n+          debug b => _1;                   // in scope 1 at $DIR/derefer_terminator_test.rs:5:9: 5:10\n+          let _2: bool;                    // in scope 1 at $DIR/derefer_terminator_test.rs:6:9: 6:10\n           scope 2 {\n-              debug d => _2;               // in scope 2 at $DIR/derefer_terminator_test.rs:4:9: 4:10\n-              let _8: i32;                 // in scope 2 at $DIR/derefer_terminator_test.rs:6:22: 6:23\n-              let _9: i32;                 // in scope 2 at $DIR/derefer_terminator_test.rs:9:9: 9:10\n+              debug d => _2;               // in scope 2 at $DIR/derefer_terminator_test.rs:6:9: 6:10\n+              let _8: i32;                 // in scope 2 at $DIR/derefer_terminator_test.rs:8:22: 8:23\n+              let _9: i32;                 // in scope 2 at $DIR/derefer_terminator_test.rs:11:9: 11:10\n               scope 3 {\n-                  debug x => _8;           // in scope 3 at $DIR/derefer_terminator_test.rs:6:22: 6:23\n+                  debug x => _8;           // in scope 3 at $DIR/derefer_terminator_test.rs:8:22: 8:23\n               }\n               scope 4 {\n-                  debug y => _9;           // in scope 4 at $DIR/derefer_terminator_test.rs:9:9: 9:10\n+                  debug y => _9;           // in scope 4 at $DIR/derefer_terminator_test.rs:11:9: 11:10\n               }\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/derefer_terminator_test.rs:3:9: 3:10\n-          _1 = foo() -> bb1;               // scope 0 at $DIR/derefer_terminator_test.rs:3:13: 3:18\n+          StorageLive(_1);                 // scope 0 at $DIR/derefer_terminator_test.rs:5:9: 5:10\n+          _1 = foo() -> bb1;               // scope 0 at $DIR/derefer_terminator_test.rs:5:13: 5:18\n                                            // mir::Constant\n-                                           // + span: $DIR/derefer_terminator_test.rs:3:13: 3:16\n+                                           // + span: $DIR/derefer_terminator_test.rs:5:13: 5:16\n                                            // + literal: Const { ty: fn() -> bool {foo}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageLive(_2);                 // scope 1 at $DIR/derefer_terminator_test.rs:4:9: 4:10\n-          _2 = foo() -> bb2;               // scope 1 at $DIR/derefer_terminator_test.rs:4:13: 4:18\n+          StorageLive(_2);                 // scope 1 at $DIR/derefer_terminator_test.rs:6:9: 6:10\n+          _2 = foo() -> bb2;               // scope 1 at $DIR/derefer_terminator_test.rs:6:13: 6:18\n                                            // mir::Constant\n-                                           // + span: $DIR/derefer_terminator_test.rs:4:13: 4:16\n+                                           // + span: $DIR/derefer_terminator_test.rs:6:13: 6:16\n                                            // + literal: Const { ty: fn() -> bool {foo}, val: Value(<ZST>) }\n       }\n   \n       bb2: {\n-          StorageLive(_3);                 // scope 2 at $DIR/derefer_terminator_test.rs:5:5: 8:6\n-          StorageLive(_4);                 // scope 2 at $DIR/derefer_terminator_test.rs:5:15: 5:22\n-          StorageLive(_5);                 // scope 2 at $DIR/derefer_terminator_test.rs:5:17: 5:21\n-          StorageLive(_6);                 // scope 2 at $DIR/derefer_terminator_test.rs:5:18: 5:21\n-          StorageLive(_7);                 // scope 2 at $DIR/derefer_terminator_test.rs:5:19: 5:21\n-          _7 = &_1;                        // scope 2 at $DIR/derefer_terminator_test.rs:5:19: 5:21\n-          _6 = &_7;                        // scope 2 at $DIR/derefer_terminator_test.rs:5:18: 5:21\n-          _5 = &_6;                        // scope 2 at $DIR/derefer_terminator_test.rs:5:17: 5:21\n-          _4 = &_5;                        // scope 2 at $DIR/derefer_terminator_test.rs:5:15: 5:22\n--         switchInt((*(*(*(*_4))))) -> [false: bb3, otherwise: bb4]; // scope 2 at $DIR/derefer_terminator_test.rs:5:5: 5:22\n-+         StorageLive(_10);                // scope 2 at $DIR/derefer_terminator_test.rs:5:5: 5:22\n-+         _10 = move (*_4);                // scope 2 at $DIR/derefer_terminator_test.rs:5:5: 5:22\n-+         StorageLive(_11);                // scope 2 at $DIR/derefer_terminator_test.rs:5:5: 5:22\n-+         _11 = move (*_10);               // scope 2 at $DIR/derefer_terminator_test.rs:5:5: 5:22\n-+         StorageDead(_10);                // scope 2 at $DIR/derefer_terminator_test.rs:5:5: 5:22\n-+         StorageLive(_12);                // scope 2 at $DIR/derefer_terminator_test.rs:5:5: 5:22\n-+         _12 = move (*_11);               // scope 2 at $DIR/derefer_terminator_test.rs:5:5: 5:22\n-+         StorageDead(_11);                // scope 2 at $DIR/derefer_terminator_test.rs:5:5: 5:22\n-+         switchInt((*_12)) -> [false: bb3, otherwise: bb4]; // scope 2 at $DIR/derefer_terminator_test.rs:5:5: 5:22\n+          StorageLive(_3);                 // scope 2 at $DIR/derefer_terminator_test.rs:7:5: 10:6\n+          StorageLive(_4);                 // scope 2 at $DIR/derefer_terminator_test.rs:7:15: 7:22\n+          StorageLive(_5);                 // scope 2 at $DIR/derefer_terminator_test.rs:7:17: 7:21\n+          StorageLive(_6);                 // scope 2 at $DIR/derefer_terminator_test.rs:7:18: 7:21\n+          StorageLive(_7);                 // scope 2 at $DIR/derefer_terminator_test.rs:7:19: 7:21\n+          _7 = &_1;                        // scope 2 at $DIR/derefer_terminator_test.rs:7:19: 7:21\n+          _6 = &_7;                        // scope 2 at $DIR/derefer_terminator_test.rs:7:18: 7:21\n+          _5 = &_6;                        // scope 2 at $DIR/derefer_terminator_test.rs:7:17: 7:21\n+          _4 = &_5;                        // scope 2 at $DIR/derefer_terminator_test.rs:7:15: 7:22\n+-         switchInt((*(*(*(*_4))))) -> [false: bb3, otherwise: bb4]; // scope 2 at $DIR/derefer_terminator_test.rs:7:5: 7:22\n++         StorageLive(_10);                // scope 2 at $DIR/derefer_terminator_test.rs:7:5: 7:22\n++         _10 = deref_copy (*_4);          // scope 2 at $DIR/derefer_terminator_test.rs:7:5: 7:22\n++         StorageLive(_11);                // scope 2 at $DIR/derefer_terminator_test.rs:7:5: 7:22\n++         _11 = deref_copy (*_10);         // scope 2 at $DIR/derefer_terminator_test.rs:7:5: 7:22\n++         StorageDead(_10);                // scope 2 at $DIR/derefer_terminator_test.rs:7:5: 7:22\n++         StorageLive(_12);                // scope 2 at $DIR/derefer_terminator_test.rs:7:5: 7:22\n++         _12 = deref_copy (*_11);         // scope 2 at $DIR/derefer_terminator_test.rs:7:5: 7:22\n++         StorageDead(_11);                // scope 2 at $DIR/derefer_terminator_test.rs:7:5: 7:22\n++         switchInt((*_12)) -> [false: bb3, otherwise: bb4]; // scope 2 at $DIR/derefer_terminator_test.rs:7:5: 7:22\n       }\n   \n       bb3: {\n-+         StorageDead(_12);                // scope 2 at $DIR/derefer_terminator_test.rs:5:5: 5:22\n-          _3 = const ();                   // scope 2 at $DIR/derefer_terminator_test.rs:7:18: 7:20\n-          goto -> bb5;                     // scope 2 at $DIR/derefer_terminator_test.rs:7:18: 7:20\n++         StorageDead(_12);                // scope 2 at $DIR/derefer_terminator_test.rs:7:5: 7:22\n+          _3 = const ();                   // scope 2 at $DIR/derefer_terminator_test.rs:9:18: 9:20\n+          goto -> bb5;                     // scope 2 at $DIR/derefer_terminator_test.rs:9:18: 9:20\n       }\n   \n       bb4: {\n-+         StorageDead(_12);                // scope 2 at $DIR/derefer_terminator_test.rs:5:5: 5:22\n-          StorageLive(_8);                 // scope 2 at $DIR/derefer_terminator_test.rs:6:22: 6:23\n-          _8 = const 5_i32;                // scope 2 at $DIR/derefer_terminator_test.rs:6:26: 6:27\n-          _3 = const ();                   // scope 2 at $DIR/derefer_terminator_test.rs:6:17: 6:29\n-          StorageDead(_8);                 // scope 2 at $DIR/derefer_terminator_test.rs:6:28: 6:29\n-          goto -> bb5;                     // scope 2 at $DIR/derefer_terminator_test.rs:6:28: 6:29\n++         StorageDead(_12);                // scope 2 at $DIR/derefer_terminator_test.rs:7:5: 7:22\n+          StorageLive(_8);                 // scope 2 at $DIR/derefer_terminator_test.rs:8:22: 8:23\n+          _8 = const 5_i32;                // scope 2 at $DIR/derefer_terminator_test.rs:8:26: 8:27\n+          _3 = const ();                   // scope 2 at $DIR/derefer_terminator_test.rs:8:17: 8:29\n+          StorageDead(_8);                 // scope 2 at $DIR/derefer_terminator_test.rs:8:28: 8:29\n+          goto -> bb5;                     // scope 2 at $DIR/derefer_terminator_test.rs:8:28: 8:29\n       }\n   \n       bb5: {\n-          StorageDead(_7);                 // scope 2 at $DIR/derefer_terminator_test.rs:8:5: 8:6\n-          StorageDead(_6);                 // scope 2 at $DIR/derefer_terminator_test.rs:8:5: 8:6\n-          StorageDead(_5);                 // scope 2 at $DIR/derefer_terminator_test.rs:8:5: 8:6\n-          StorageDead(_4);                 // scope 2 at $DIR/derefer_terminator_test.rs:8:5: 8:6\n-          StorageDead(_3);                 // scope 2 at $DIR/derefer_terminator_test.rs:8:5: 8:6\n-          StorageLive(_9);                 // scope 2 at $DIR/derefer_terminator_test.rs:9:9: 9:10\n-          _9 = const 42_i32;               // scope 2 at $DIR/derefer_terminator_test.rs:9:13: 9:15\n-          _0 = const ();                   // scope 0 at $DIR/derefer_terminator_test.rs:2:11: 10:2\n-          StorageDead(_9);                 // scope 2 at $DIR/derefer_terminator_test.rs:10:1: 10:2\n-          StorageDead(_2);                 // scope 1 at $DIR/derefer_terminator_test.rs:10:1: 10:2\n-          StorageDead(_1);                 // scope 0 at $DIR/derefer_terminator_test.rs:10:1: 10:2\n-          return;                          // scope 0 at $DIR/derefer_terminator_test.rs:10:2: 10:2\n-      }\n-  \n-      bb6 (cleanup): {\n-          resume;                          // scope 0 at $DIR/derefer_terminator_test.rs:2:1: 10:2\n+          StorageDead(_7);                 // scope 2 at $DIR/derefer_terminator_test.rs:10:5: 10:6\n+          StorageDead(_6);                 // scope 2 at $DIR/derefer_terminator_test.rs:10:5: 10:6\n+          StorageDead(_5);                 // scope 2 at $DIR/derefer_terminator_test.rs:10:5: 10:6\n+          StorageDead(_4);                 // scope 2 at $DIR/derefer_terminator_test.rs:10:5: 10:6\n+          StorageDead(_3);                 // scope 2 at $DIR/derefer_terminator_test.rs:10:5: 10:6\n+          StorageLive(_9);                 // scope 2 at $DIR/derefer_terminator_test.rs:11:9: 11:10\n+          _9 = const 42_i32;               // scope 2 at $DIR/derefer_terminator_test.rs:11:13: 11:15\n+          _0 = const ();                   // scope 0 at $DIR/derefer_terminator_test.rs:4:11: 12:2\n+          StorageDead(_9);                 // scope 2 at $DIR/derefer_terminator_test.rs:12:1: 12:2\n+          StorageDead(_2);                 // scope 1 at $DIR/derefer_terminator_test.rs:12:1: 12:2\n+          StorageDead(_1);                 // scope 0 at $DIR/derefer_terminator_test.rs:12:1: 12:2\n+          return;                          // scope 0 at $DIR/derefer_terminator_test.rs:12:2: 12:2\n++     }\n++ \n++     bb6 (cleanup): {\n++         resume;                          // scope 0 at $DIR/derefer_terminator_test.rs:4:1: 12:2\n       }\n   }\n   "}, {"sha": "787b14ae735d5c5fa89dff6fed1f22d982204046", "filename": "src/test/mir-opt/derefer_terminator_test.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/src%2Ftest%2Fmir-opt%2Fderefer_terminator_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/src%2Ftest%2Fmir-opt%2Fderefer_terminator_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_terminator_test.rs?ref=42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "patch": "@@ -1,4 +1,6 @@\n // EMIT_MIR derefer_terminator_test.main.Derefer.diff\n+// ignore-wasm32\n+\n fn main() {\n     let b = foo();\n     let d = foo();"}, {"sha": "df76b3ebc2deb6f04be32eab4759014294703364", "filename": "src/test/mir-opt/derefer_test.main.Derefer.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/src%2Ftest%2Fmir-opt%2Fderefer_test.main.Derefer.diff", "raw_url": "https://github.com/rust-lang/rust/raw/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/src%2Ftest%2Fmir-opt%2Fderefer_test.main.Derefer.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_test.main.Derefer.diff?ref=42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "patch": "@@ -34,13 +34,13 @@\n           StorageLive(_4);                 // scope 2 at $DIR/derefer_test.rs:5:9: 5:10\n -         _4 = &mut ((*(_2.1: &mut (i32, i32))).0: i32); // scope 2 at $DIR/derefer_test.rs:5:13: 5:26\n +         StorageLive(_6);                 // scope 2 at $DIR/derefer_test.rs:5:13: 5:26\n-+         _6 = move (_2.1: &mut (i32, i32)); // scope 2 at $DIR/derefer_test.rs:5:13: 5:26\n++         _6 = deref_copy (_2.1: &mut (i32, i32)); // scope 2 at $DIR/derefer_test.rs:5:13: 5:26\n +         _4 = &mut ((*_6).0: i32);        // scope 2 at $DIR/derefer_test.rs:5:13: 5:26\n +         StorageDead(_6);                 // scope 3 at $DIR/derefer_test.rs:6:9: 6:10\n           StorageLive(_5);                 // scope 3 at $DIR/derefer_test.rs:6:9: 6:10\n -         _5 = &mut ((*(_2.1: &mut (i32, i32))).1: i32); // scope 3 at $DIR/derefer_test.rs:6:13: 6:26\n +         StorageLive(_7);                 // scope 3 at $DIR/derefer_test.rs:6:13: 6:26\n-+         _7 = move (_2.1: &mut (i32, i32)); // scope 3 at $DIR/derefer_test.rs:6:13: 6:26\n++         _7 = deref_copy (_2.1: &mut (i32, i32)); // scope 3 at $DIR/derefer_test.rs:6:13: 6:26\n +         _5 = &mut ((*_7).1: i32);        // scope 3 at $DIR/derefer_test.rs:6:13: 6:26\n +         StorageDead(_7);                 // scope 0 at $DIR/derefer_test.rs:2:11: 7:2\n           _0 = const ();                   // scope 0 at $DIR/derefer_test.rs:2:11: 7:2\n@@ -49,10 +49,10 @@\n           StorageDead(_2);                 // scope 1 at $DIR/derefer_test.rs:7:1: 7:2\n           StorageDead(_1);                 // scope 0 at $DIR/derefer_test.rs:7:1: 7:2\n           return;                          // scope 0 at $DIR/derefer_test.rs:7:2: 7:2\n-      }\n-  \n-      bb1 (cleanup): {\n-          resume;                          // scope 0 at $DIR/derefer_test.rs:2:1: 7:2\n++     }\n++ \n++     bb1 (cleanup): {\n++         resume;                          // scope 0 at $DIR/derefer_test.rs:2:1: 7:2\n       }\n   }\n   "}, {"sha": "044c92a2f432589032e9b0bbd13d9dd6ed37f366", "filename": "src/test/mir-opt/derefer_test_multiple.main.Derefer.diff", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/src%2Ftest%2Fmir-opt%2Fderefer_test_multiple.main.Derefer.diff", "raw_url": "https://github.com/rust-lang/rust/raw/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/src%2Ftest%2Fmir-opt%2Fderefer_test_multiple.main.Derefer.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_test_multiple.main.Derefer.diff?ref=42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "patch": "@@ -58,24 +58,24 @@\n           StorageLive(_8);                 // scope 4 at $DIR/derefer_test_multiple.rs:7:9: 7:10\n -         _8 = &mut ((*((*((*(_6.1: &mut (i32, &mut (i32, &mut (i32, i32))))).1: &mut (i32, &mut (i32, i32)))).1: &mut (i32, i32))).1: i32); // scope 4 at $DIR/derefer_test_multiple.rs:7:13: 7:30\n +         StorageLive(_10);                // scope 4 at $DIR/derefer_test_multiple.rs:7:13: 7:30\n-+         _10 = move (_6.1: &mut (i32, &mut (i32, &mut (i32, i32)))); // scope 4 at $DIR/derefer_test_multiple.rs:7:13: 7:30\n++         _10 = deref_copy (_6.1: &mut (i32, &mut (i32, &mut (i32, i32)))); // scope 4 at $DIR/derefer_test_multiple.rs:7:13: 7:30\n +         StorageLive(_11);                // scope 4 at $DIR/derefer_test_multiple.rs:7:13: 7:30\n-+         _11 = move ((*_10).1: &mut (i32, &mut (i32, i32))); // scope 4 at $DIR/derefer_test_multiple.rs:7:13: 7:30\n++         _11 = deref_copy ((*_10).1: &mut (i32, &mut (i32, i32))); // scope 4 at $DIR/derefer_test_multiple.rs:7:13: 7:30\n +         StorageDead(_10);                // scope 4 at $DIR/derefer_test_multiple.rs:7:13: 7:30\n +         StorageLive(_12);                // scope 4 at $DIR/derefer_test_multiple.rs:7:13: 7:30\n-+         _12 = move ((*_11).1: &mut (i32, i32)); // scope 4 at $DIR/derefer_test_multiple.rs:7:13: 7:30\n++         _12 = deref_copy ((*_11).1: &mut (i32, i32)); // scope 4 at $DIR/derefer_test_multiple.rs:7:13: 7:30\n +         StorageDead(_11);                // scope 4 at $DIR/derefer_test_multiple.rs:7:13: 7:30\n +         _8 = &mut ((*_12).1: i32);       // scope 4 at $DIR/derefer_test_multiple.rs:7:13: 7:30\n +         StorageDead(_12);                // scope 5 at $DIR/derefer_test_multiple.rs:8:9: 8:10\n           StorageLive(_9);                 // scope 5 at $DIR/derefer_test_multiple.rs:8:9: 8:10\n -         _9 = &mut ((*((*((*(_6.1: &mut (i32, &mut (i32, &mut (i32, i32))))).1: &mut (i32, &mut (i32, i32)))).1: &mut (i32, i32))).1: i32); // scope 5 at $DIR/derefer_test_multiple.rs:8:13: 8:30\n +         StorageLive(_13);                // scope 5 at $DIR/derefer_test_multiple.rs:8:13: 8:30\n-+         _13 = move (_6.1: &mut (i32, &mut (i32, &mut (i32, i32)))); // scope 5 at $DIR/derefer_test_multiple.rs:8:13: 8:30\n++         _13 = deref_copy (_6.1: &mut (i32, &mut (i32, &mut (i32, i32)))); // scope 5 at $DIR/derefer_test_multiple.rs:8:13: 8:30\n +         StorageLive(_14);                // scope 5 at $DIR/derefer_test_multiple.rs:8:13: 8:30\n-+         _14 = move ((*_13).1: &mut (i32, &mut (i32, i32))); // scope 5 at $DIR/derefer_test_multiple.rs:8:13: 8:30\n++         _14 = deref_copy ((*_13).1: &mut (i32, &mut (i32, i32))); // scope 5 at $DIR/derefer_test_multiple.rs:8:13: 8:30\n +         StorageDead(_13);                // scope 5 at $DIR/derefer_test_multiple.rs:8:13: 8:30\n +         StorageLive(_15);                // scope 5 at $DIR/derefer_test_multiple.rs:8:13: 8:30\n-+         _15 = move ((*_14).1: &mut (i32, i32)); // scope 5 at $DIR/derefer_test_multiple.rs:8:13: 8:30\n++         _15 = deref_copy ((*_14).1: &mut (i32, i32)); // scope 5 at $DIR/derefer_test_multiple.rs:8:13: 8:30\n +         StorageDead(_14);                // scope 5 at $DIR/derefer_test_multiple.rs:8:13: 8:30\n +         _9 = &mut ((*_15).1: i32);       // scope 5 at $DIR/derefer_test_multiple.rs:8:13: 8:30\n +         StorageDead(_15);                // scope 0 at $DIR/derefer_test_multiple.rs:2:12: 9:2\n@@ -87,10 +87,10 @@\n           StorageDead(_2);                 // scope 1 at $DIR/derefer_test_multiple.rs:9:1: 9:2\n           StorageDead(_1);                 // scope 0 at $DIR/derefer_test_multiple.rs:9:1: 9:2\n           return;                          // scope 0 at $DIR/derefer_test_multiple.rs:9:2: 9:2\n-      }\n-  \n-      bb1 (cleanup): {\n-          resume;                          // scope 0 at $DIR/derefer_test_multiple.rs:2:1: 9:2\n++     }\n++ \n++     bb1 (cleanup): {\n++         resume;                          // scope 0 at $DIR/derefer_test_multiple.rs:2:1: 9:2\n       }\n   }\n   "}, {"sha": "988694000ee996c6d141a8dcc348f6ccfdfc4325", "filename": "src/test/mir-opt/early_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyConstCondition-final.after.diff", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyConstCondition-final.after.diff", "raw_url": "https://github.com/rust-lang/rust/raw/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyConstCondition-final.after.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyConstCondition-final.after.diff?ref=42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "patch": "@@ -93,15 +93,15 @@\n -         StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:23: 21:24\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:23: 21:24\n           StorageLive(_34);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          _34 = move (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n+          _34 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n           _11 = discriminant((*_34));      // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n           StorageDead(_34);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n           switchInt(move _11) -> [0_isize: bb1, 1_isize: bb3, 2_isize: bb4, 3_isize: bb5, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n       }\n   \n       bb1: {\n           StorageLive(_35);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          _35 = move (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n+          _35 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n           _7 = discriminant((*_35));       // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n           StorageDead(_35);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n           switchInt(move _7) -> [0_isize: bb6, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n@@ -123,23 +123,23 @@\n   \n       bb3: {\n           StorageLive(_36);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          _36 = move (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n+          _36 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n           _8 = discriminant((*_36));       // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n           StorageDead(_36);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n           switchInt(move _8) -> [1_isize: bb7, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n       }\n   \n       bb4: {\n           StorageLive(_37);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          _37 = move (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n+          _37 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n           _9 = discriminant((*_37));       // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n           StorageDead(_37);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n           switchInt(move _9) -> [2_isize: bb8, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n       }\n   \n       bb5: {\n           StorageLive(_38);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          _38 = move (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n+          _38 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n           _10 = discriminant((*_38));      // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n           StorageDead(_38);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n           switchInt(move _10) -> [3_isize: bb9, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n@@ -149,14 +149,14 @@\n -         StorageLive(_12);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:17\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:17\n           StorageLive(_39);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:17\n-          _39 = move (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:17\n+          _39 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:17\n -         _12 = (((*_39) as Vw).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:17\n +         _15 = (((*_39) as Vw).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:17\n           StorageDead(_39);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:24: 22:29\n -         StorageLive(_13);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:24: 22:29\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:24: 22:29\n           StorageLive(_40);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:24: 22:29\n-          _40 = move (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:24: 22:29\n+          _40 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:24: 22:29\n -         _13 = (((*_40) as Vw).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:24: 22:29\n +         _16 = (((*_40) as Vw).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:24: 22:29\n           StorageDead(_40);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:38: 22:49\n@@ -195,14 +195,14 @@\n -         StorageLive(_17);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n           StorageLive(_41);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n-          _41 = move (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n+          _41 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n -         _17 = (((*_41) as Vh).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n +         _20 = (((*_41) as Vh).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n           StorageDead(_41);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n -         StorageLive(_18);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n           StorageLive(_42);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n-          _42 = move (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n+          _42 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n -         _18 = (((*_42) as Vh).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n +         _21 = (((*_42) as Vh).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n           StorageDead(_42);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:49\n@@ -241,14 +241,14 @@\n -         StorageLive(_22);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:16: 24:19\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:16: 24:19\n           StorageLive(_43);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:16: 24:19\n-          _43 = move (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:16: 24:19\n+          _43 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:16: 24:19\n -         _22 = (((*_43) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:16: 24:19\n +         _25 = (((*_43) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:16: 24:19\n           StorageDead(_43);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:28: 24:33\n -         StorageLive(_23);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:28: 24:33\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:28: 24:33\n           StorageLive(_44);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:28: 24:33\n-          _44 = move (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:28: 24:33\n+          _44 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:28: 24:33\n -         _23 = (((*_44) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:28: 24:33\n +         _26 = (((*_44) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:28: 24:33\n           StorageDead(_44);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:55\n@@ -287,14 +287,14 @@\n -         StorageLive(_27);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n           StorageLive(_45);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n-          _45 = move (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n+          _45 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n -         _27 = (((*_45) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n +         _30 = (((*_45) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n           StorageDead(_45);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n -         StorageLive(_28);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n           StorageLive(_46);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n-          _46 = move (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n+          _46 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n -         _28 = (((*_46) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n +         _31 = (((*_46) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n           StorageDead(_46);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:55"}, {"sha": "1b090a33ffcd70dae5ab4794a879de2bef54c21e", "filename": "src/test/mir-opt/early_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff?ref=42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "patch": "@@ -79,15 +79,15 @@\n           StorageDead(_6);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:23: 21:24\n           StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:23: 21:24\n           StorageLive(_34);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          _34 = move (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n+          _34 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n           _11 = discriminant((*_34));      // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n           StorageDead(_34);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n           switchInt(move _11) -> [0_isize: bb1, 1_isize: bb3, 2_isize: bb4, 3_isize: bb5, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n       }\n   \n       bb1: {\n           StorageLive(_35);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          _35 = move (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n+          _35 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n           _7 = discriminant((*_35));       // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n           StorageDead(_35);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n           switchInt(move _7) -> [0_isize: bb6, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n@@ -107,23 +107,23 @@\n   \n       bb3: {\n           StorageLive(_36);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          _36 = move (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n+          _36 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n           _8 = discriminant((*_36));       // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n           StorageDead(_36);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n           switchInt(move _8) -> [1_isize: bb7, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n       }\n   \n       bb4: {\n           StorageLive(_37);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          _37 = move (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n+          _37 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n           _9 = discriminant((*_37));       // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n           StorageDead(_37);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n           switchInt(move _9) -> [2_isize: bb8, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n       }\n   \n       bb5: {\n           StorageLive(_38);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          _38 = move (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n+          _38 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n           _10 = discriminant((*_38));      // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n           StorageDead(_38);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n           switchInt(move _10) -> [3_isize: bb9, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n@@ -132,12 +132,12 @@\n       bb6: {\n           StorageLive(_12);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:17\n           StorageLive(_39);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:17\n-          _39 = move (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:17\n+          _39 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:17\n           _12 = (((*_39) as Vw).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:17\n           StorageDead(_39);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:24: 22:29\n           StorageLive(_13);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:24: 22:29\n           StorageLive(_40);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:24: 22:29\n-          _40 = move (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:24: 22:29\n+          _40 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:24: 22:29\n           _13 = (((*_40) as Vw).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:24: 22:29\n           StorageDead(_40);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:38: 22:49\n           StorageLive(_14);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:38: 22:49\n@@ -160,12 +160,12 @@\n       bb7: {\n           StorageLive(_17);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n           StorageLive(_41);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n-          _41 = move (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n+          _41 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n           _17 = (((*_41) as Vh).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n           StorageDead(_41);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n           StorageLive(_18);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n           StorageLive(_42);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n-          _42 = move (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n+          _42 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n           _18 = (((*_42) as Vh).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n           StorageDead(_42);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:49\n           StorageLive(_19);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:49\n@@ -188,12 +188,12 @@\n       bb8: {\n           StorageLive(_22);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:16: 24:19\n           StorageLive(_43);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:16: 24:19\n-          _43 = move (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:16: 24:19\n+          _43 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:16: 24:19\n           _22 = (((*_43) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:16: 24:19\n           StorageDead(_43);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:28: 24:33\n           StorageLive(_23);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:28: 24:33\n           StorageLive(_44);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:28: 24:33\n-          _44 = move (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:28: 24:33\n+          _44 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:28: 24:33\n           _23 = (((*_44) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:28: 24:33\n           StorageDead(_44);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:55\n           StorageLive(_24);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:44: 24:55\n@@ -216,12 +216,12 @@\n       bb9: {\n           StorageLive(_27);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n           StorageLive(_45);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n-          _45 = move (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n+          _45 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n           _27 = (((*_45) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n           StorageDead(_45);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n           StorageLive(_28);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n           StorageLive(_46);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n-          _46 = move (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n+          _46 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n           _28 = (((*_46) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n           StorageDead(_46);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:55\n           StorageLive(_29);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:55"}, {"sha": "2ee7374250217cb304c927795509db2b8281f4cf", "filename": "src/test/mir-opt/early_otherwise_branch_soundness.no_downcast.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.no_downcast.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.no_downcast.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.no_downcast.EarlyOtherwiseBranch.diff?ref=42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "patch": "@@ -17,7 +17,7 @@\n   \n       bb1: {\n           StorageLive(_4);                 // scope 1 at $DIR/early_otherwise_branch_soundness.rs:13:12: 13:31\n-          _4 = move (((*_1) as Some).0: &E); // scope 1 at $DIR/early_otherwise_branch_soundness.rs:13:12: 13:31\n+          _4 = deref_copy (((*_1) as Some).0: &E); // scope 1 at $DIR/early_otherwise_branch_soundness.rs:13:12: 13:31\n           _2 = discriminant((*_4));        // scope 1 at $DIR/early_otherwise_branch_soundness.rs:13:12: 13:31\n           StorageDead(_4);                 // scope 1 at $DIR/early_otherwise_branch_soundness.rs:13:12: 13:31\n           switchInt(move _2) -> [1_isize: bb2, otherwise: bb3]; // scope 1 at $DIR/early_otherwise_branch_soundness.rs:13:12: 13:31"}, {"sha": "0e6ae6578e2a3d18f4735959abdad2e815eb1b13", "filename": "src/test/mir-opt/inline/inline_closure_captures.foo.Inline.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir?ref=42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "patch": "@@ -46,12 +46,12 @@ fn foo(_1: T, _2: i32) -> (i32, T) {\n         _9 = move (_7.0: i32);           // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n         StorageLive(_10);                // scope 2 at $DIR/inline-closure-captures.rs:11:19: 11:20\n         StorageLive(_12);                // scope 2 at $DIR/inline-closure-captures.rs:11:19: 11:20\n-        _12 = move ((*_6).0: &i32);      // scope 2 at $DIR/inline-closure-captures.rs:11:19: 11:20\n+        _12 = deref_copy ((*_6).0: &i32); // scope 2 at $DIR/inline-closure-captures.rs:11:19: 11:20\n         _10 = (*_12);                    // scope 2 at $DIR/inline-closure-captures.rs:11:19: 11:20\n         StorageDead(_12);                // scope 2 at $DIR/inline-closure-captures.rs:11:22: 11:23\n         StorageLive(_11);                // scope 2 at $DIR/inline-closure-captures.rs:11:22: 11:23\n         StorageLive(_13);                // scope 2 at $DIR/inline-closure-captures.rs:11:22: 11:23\n-        _13 = move ((*_6).1: &T);        // scope 2 at $DIR/inline-closure-captures.rs:11:22: 11:23\n+        _13 = deref_copy ((*_6).1: &T);  // scope 2 at $DIR/inline-closure-captures.rs:11:22: 11:23\n         _11 = (*_13);                    // scope 2 at $DIR/inline-closure-captures.rs:11:22: 11:23\n         StorageDead(_13);                // scope 2 at $DIR/inline-closure-captures.rs:11:18: 11:24\n         Deinit(_0);                      // scope 2 at $DIR/inline-closure-captures.rs:11:18: 11:24"}, {"sha": "b4f0abd1af54bc0b2b89597d7addef863b3ac9b2", "filename": "src/test/mir-opt/inline/inline_generator.main.Inline.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff?ref=42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "patch": "@@ -77,7 +77,7 @@\n +         StorageLive(_11);                // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n +         StorageLive(_12);                // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n +         StorageLive(_13);                // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n-+         _13 = move (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n++         _13 = deref_copy (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n +         _12 = discriminant((*_13));      // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n +         StorageDead(_13);                // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n +         switchInt(move _12) -> [0_u32: bb3, 1_u32: bb8, 3_u32: bb7, otherwise: bb9]; // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n@@ -125,7 +125,7 @@\n +         ((_1 as Yielded).0: i32) = move _8; // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n +         discriminant(_1) = 0;            // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n +         StorageLive(_14);                // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n-+         _14 = move (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n++         _14 = deref_copy (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n +         discriminant((*_14)) = 3;        // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n +         StorageDead(_14);                // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n +         goto -> bb1;                     // scope 0 at $DIR/inline-generator.rs:15:11: 15:39\n@@ -139,7 +139,7 @@\n +         ((_1 as Complete).0: bool) = move _10; // scope 6 at $DIR/inline-generator.rs:15:8: 15:8\n +         discriminant(_1) = 1;            // scope 6 at $DIR/inline-generator.rs:15:8: 15:8\n +         StorageLive(_15);                // scope 6 at $DIR/inline-generator.rs:15:8: 15:8\n-+         _15 = move (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline-generator.rs:15:8: 15:8\n++         _15 = deref_copy (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline-generator.rs:15:8: 15:8\n +         discriminant((*_15)) = 1;        // scope 6 at $DIR/inline-generator.rs:15:8: 15:8\n +         StorageDead(_15);                // scope 6 at $DIR/inline-generator.rs:15:8: 15:8\n +         goto -> bb1;                     // scope 0 at $DIR/inline-generator.rs:15:8: 15:8"}, {"sha": "b45dfb17bfe8257ec1e07dcaf52899795c63e665", "filename": "src/test/mir-opt/inline/issue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir?ref=42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "patch": "@@ -22,7 +22,7 @@ fn b(_1: &mut Box<T>) -> &mut T {\n         StorageLive(_5);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         StorageLive(_6);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         StorageLive(_7);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        _7 = move (*_4);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        _7 = deref_copy (*_4);           // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         StorageLive(_8);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         _8 = (((_7.0: std::ptr::Unique<T>).0: std::ptr::NonNull<T>).0: *const T); // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         _6 = &mut (*_8);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL"}, {"sha": "4e8547419ae1fffd8bb805327a177367a73a188c", "filename": "src/test/mir-opt/inline/issue_58867_inline_as_ref_as_mut.d.Inline.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.d.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.d.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.d.Inline.after.mir?ref=42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "patch": "@@ -16,7 +16,7 @@ fn d(_1: &Box<T>) -> &T {\n         StorageLive(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n         _3 = &(*_1);                     // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n         StorageLive(_4);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-        _4 = move (*_3);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        _4 = deref_copy (*_3);           // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         StorageLive(_5);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         _5 = (((_4.0: std::ptr::Unique<T>).0: std::ptr::NonNull<T>).0: *const T); // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         _2 = &(*_5);                     // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL"}, {"sha": "f3283588c7320358f121169f0837a3f8ccb4aca0", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42bd138126b0a9d38d65bc9973e72de3c5b6c37f/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "patch": "@@ -124,6 +124,7 @@ fn check_rvalue<'tcx>(\n         Rvalue::Len(place) | Rvalue::Discriminant(place) | Rvalue::Ref(_, _, place) | Rvalue::AddressOf(_, place) => {\n             check_place(tcx, *place, span, body)\n         },\n+        Rvalue::CopyForDeref(place) => check_place(tcx, *place, span, body),\n         Rvalue::Repeat(operand, _)\n         | Rvalue::Use(operand)\n         | Rvalue::Cast("}]}