{"sha": "7c94f1cb5e86739864871dc56fcbd7a6de116315", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjOTRmMWNiNWU4NjczOTg2NDg3MWRjNTZmY2JkN2E2ZGUxMTYzMTU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-11-03T18:59:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-03T18:59:15Z"}, "message": "Merge #6454\n\n6454: Fix overflow panic in convert_interger_literal assist r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "0d8b672609e730efdf45b38c0955d9a26fc620ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d8b672609e730efdf45b38c0955d9a26fc620ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c94f1cb5e86739864871dc56fcbd7a6de116315", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfoaiDCRBK7hj4Ov3rIwAAdHIIACex9FYer5aJQFQoXTDFy5sL\nx6u81/g1Owl3QFt+C6HhukVGk8rozzWErkY4/uX7/6aUKBH1bg3UIGrII3VBxWAg\nqGZ/4raGuPBtcEqrpX4mgnEIi0osmioq0KH7VJqB/y7vPcWuV185jRvCago6AlH4\nafPNHXZsY+ApeuO/8NbPJsJXkwyHOWXqH/25XEOUJPpdneFcGuj8y2P4q5f+RXKb\n2kHTosQc2CJHsQKZV3tfERNMUYCgPkAo8QJf+BE1magtXXHAL44db9if7kRLwqYB\naSLbtkAHJz1qi2WGEtEBZoidPRa1fAk/HlYrksoBRXg+irb+JYqEQibOsaUEOEs=\n=LYaH\n-----END PGP SIGNATURE-----\n", "payload": "tree 0d8b672609e730efdf45b38c0955d9a26fc620ed\nparent 060c8b2c96a0de4a131c4d780d2aac80afe13de8\nparent 9349353e044c06a5baa9cfbcfd98e7d329b0bc0e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1604429955 +0000\ncommitter GitHub <noreply@github.com> 1604429955 +0000\n\nMerge #6454\n\n6454: Fix overflow panic in convert_interger_literal assist r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c94f1cb5e86739864871dc56fcbd7a6de116315", "html_url": "https://github.com/rust-lang/rust/commit/7c94f1cb5e86739864871dc56fcbd7a6de116315", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c94f1cb5e86739864871dc56fcbd7a6de116315/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "060c8b2c96a0de4a131c4d780d2aac80afe13de8", "url": "https://api.github.com/repos/rust-lang/rust/commits/060c8b2c96a0de4a131c4d780d2aac80afe13de8", "html_url": "https://github.com/rust-lang/rust/commit/060c8b2c96a0de4a131c4d780d2aac80afe13de8"}, {"sha": "9349353e044c06a5baa9cfbcfd98e7d329b0bc0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9349353e044c06a5baa9cfbcfd98e7d329b0bc0e", "html_url": "https://github.com/rust-lang/rust/commit/9349353e044c06a5baa9cfbcfd98e7d329b0bc0e"}], "stats": {"total": 273, "additions": 137, "deletions": 136}, "files": [{"sha": "c8af807012dad36e5d3b6dac34350fe6f7013a66", "filename": "crates/assists/src/handlers/convert_integer_literal.rs", "status": "modified", "additions": 71, "deletions": 135, "changes": 206, "blob_url": "https://github.com/rust-lang/rust/blob/7c94f1cb5e86739864871dc56fcbd7a6de116315/crates%2Fassists%2Fsrc%2Fhandlers%2Fconvert_integer_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c94f1cb5e86739864871dc56fcbd7a6de116315/crates%2Fassists%2Fsrc%2Fhandlers%2Fconvert_integer_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fconvert_integer_literal.rs?ref=7c94f1cb5e86739864871dc56fcbd7a6de116315", "patch": "@@ -1,4 +1,4 @@\n-use syntax::{ast, AstNode, SmolStr};\n+use syntax::{ast, ast::Radix, AstNode};\n \n use crate::{AssistContext, AssistId, AssistKind, Assists, GroupLabel};\n \n@@ -15,37 +15,34 @@ use crate::{AssistContext, AssistId, AssistKind, Assists, GroupLabel};\n // ```\n pub(crate) fn convert_integer_literal(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let literal = ctx.find_node_at_offset::<ast::Literal>()?;\n+    let (radix, value) = literal.int_value()?;\n+\n     let range = literal.syntax().text_range();\n     let group_id = GroupLabel(\"Convert integer base\".into());\n-\n     let suffix = match literal.kind() {\n         ast::LiteralKind::IntNumber { suffix } => suffix,\n         _ => return None,\n     };\n-    let suffix_len = suffix.as_ref().map(|s| s.len()).unwrap_or(0);\n-    let raw_literal_text = literal.syntax().to_string();\n-\n-    // Gets the literal's text without the type suffix and without underscores.\n-    let literal_text = raw_literal_text\n-        .chars()\n-        .take(raw_literal_text.len() - suffix_len)\n-        .filter(|c| *c != '_')\n-        .collect::<SmolStr>();\n-    let literal_base = IntegerLiteralBase::identify(&literal_text)?;\n-\n-    for base in IntegerLiteralBase::bases() {\n-        if *base == literal_base {\n+\n+    for &target_radix in Radix::ALL {\n+        if target_radix == radix {\n             continue;\n         }\n \n-        let mut converted = literal_base.convert(&literal_text, base);\n-\n-        let label = if let Some(suffix) = &suffix {\n-            format!(\"Convert {} ({}) to {}\", &literal_text, suffix, &converted)\n-        } else {\n-            format!(\"Convert {} to {}\", &literal_text, &converted)\n+        let mut converted = match target_radix {\n+            Radix::Binary => format!(\"0b{:b}\", value),\n+            Radix::Octal => format!(\"0o{:o}\", value),\n+            Radix::Decimal => value.to_string(),\n+            Radix::Hexadecimal => format!(\"0x{:X}\", value),\n         };\n \n+        let label = format!(\n+            \"Convert {} to {}{}\",\n+            literal,\n+            converted,\n+            suffix.as_deref().unwrap_or_default()\n+        );\n+\n         // Appends the type suffix back into the new literal if it exists.\n         if let Some(suffix) = &suffix {\n             converted.push_str(&suffix);\n@@ -63,79 +60,11 @@ pub(crate) fn convert_integer_literal(acc: &mut Assists, ctx: &AssistContext) ->\n     Some(())\n }\n \n-#[derive(Debug, PartialEq, Eq)]\n-enum IntegerLiteralBase {\n-    Binary,\n-    Octal,\n-    Decimal,\n-    Hexadecimal,\n-}\n-\n-impl IntegerLiteralBase {\n-    fn identify(literal_text: &str) -> Option<Self> {\n-        // We cannot express a literal in anything other than decimal in under 3 characters, so we return here if possible.\n-        if literal_text.len() < 3 && literal_text.chars().all(|c| c.is_digit(10)) {\n-            return Some(Self::Decimal);\n-        }\n-\n-        let base = match &literal_text[..2] {\n-            \"0b\" => Self::Binary,\n-            \"0o\" => Self::Octal,\n-            \"0x\" => Self::Hexadecimal,\n-            _ => Self::Decimal,\n-        };\n-\n-        // Checks that all characters after the base prefix are all valid digits for that base.\n-        if literal_text[base.prefix_len()..].chars().all(|c| c.is_digit(base.base())) {\n-            Some(base)\n-        } else {\n-            None\n-        }\n-    }\n-\n-    fn convert(&self, literal_text: &str, to: &IntegerLiteralBase) -> String {\n-        let digits = &literal_text[self.prefix_len()..];\n-        let value = u128::from_str_radix(digits, self.base()).unwrap();\n-\n-        match to {\n-            Self::Binary => format!(\"0b{:b}\", value),\n-            Self::Octal => format!(\"0o{:o}\", value),\n-            Self::Decimal => value.to_string(),\n-            Self::Hexadecimal => format!(\"0x{:X}\", value),\n-        }\n-    }\n-\n-    const fn base(&self) -> u32 {\n-        match self {\n-            Self::Binary => 2,\n-            Self::Octal => 8,\n-            Self::Decimal => 10,\n-            Self::Hexadecimal => 16,\n-        }\n-    }\n-\n-    const fn prefix_len(&self) -> usize {\n-        match self {\n-            Self::Decimal => 0,\n-            _ => 2,\n-        }\n-    }\n-\n-    const fn bases() -> &'static [IntegerLiteralBase] {\n-        &[\n-            IntegerLiteralBase::Binary,\n-            IntegerLiteralBase::Octal,\n-            IntegerLiteralBase::Decimal,\n-            IntegerLiteralBase::Hexadecimal,\n-        ]\n-    }\n-}\n-\n #[cfg(test)]\n mod tests {\n+    use crate::tests::{check_assist_by_label, check_assist_not_applicable, check_assist_target};\n \n     use super::*;\n-    use crate::tests::{check_assist_by_label, check_assist_target};\n \n     #[test]\n     fn binary_target() {\n@@ -317,21 +246,21 @@ mod tests {\n             convert_integer_literal,\n             before,\n             \"const _: i32 = 0b1111101000;\",\n-            \"Convert 1000 to 0b1111101000\",\n+            \"Convert 1_00_0 to 0b1111101000\",\n         );\n \n         check_assist_by_label(\n             convert_integer_literal,\n             before,\n             \"const _: i32 = 0o1750;\",\n-            \"Convert 1000 to 0o1750\",\n+            \"Convert 1_00_0 to 0o1750\",\n         );\n \n         check_assist_by_label(\n             convert_integer_literal,\n             before,\n             \"const _: i32 = 0x3E8;\",\n-            \"Convert 1000 to 0x3E8\",\n+            \"Convert 1_00_0 to 0x3E8\",\n         );\n     }\n \n@@ -343,21 +272,21 @@ mod tests {\n             convert_integer_literal,\n             before,\n             \"const _: i32 = 0b1010;\",\n-            \"Convert 10 to 0b1010\",\n+            \"Convert 1_0 to 0b1010\",\n         );\n \n         check_assist_by_label(\n             convert_integer_literal,\n             before,\n             \"const _: i32 = 0o12;\",\n-            \"Convert 10 to 0o12\",\n+            \"Convert 1_0 to 0o12\",\n         );\n \n         check_assist_by_label(\n             convert_integer_literal,\n             before,\n             \"const _: i32 = 0xA;\",\n-            \"Convert 10 to 0xA\",\n+            \"Convert 1_0 to 0xA\",\n         );\n     }\n \n@@ -369,21 +298,21 @@ mod tests {\n             convert_integer_literal,\n             before,\n             \"const _: i32 = 0b11111111;\",\n-            \"Convert 0xFF to 0b11111111\",\n+            \"Convert 0x_F_F to 0b11111111\",\n         );\n \n         check_assist_by_label(\n             convert_integer_literal,\n             before,\n             \"const _: i32 = 0o377;\",\n-            \"Convert 0xFF to 0o377\",\n+            \"Convert 0x_F_F to 0o377\",\n         );\n \n         check_assist_by_label(\n             convert_integer_literal,\n             before,\n             \"const _: i32 = 255;\",\n-            \"Convert 0xFF to 255\",\n+            \"Convert 0x_F_F to 255\",\n         );\n     }\n \n@@ -395,21 +324,21 @@ mod tests {\n             convert_integer_literal,\n             before,\n             \"const _: i32 = 0o377;\",\n-            \"Convert 0b11111111 to 0o377\",\n+            \"Convert 0b1111_1111 to 0o377\",\n         );\n \n         check_assist_by_label(\n             convert_integer_literal,\n             before,\n             \"const _: i32 = 255;\",\n-            \"Convert 0b11111111 to 255\",\n+            \"Convert 0b1111_1111 to 255\",\n         );\n \n         check_assist_by_label(\n             convert_integer_literal,\n             before,\n             \"const _: i32 = 0xFF;\",\n-            \"Convert 0b11111111 to 0xFF\",\n+            \"Convert 0b1111_1111 to 0xFF\",\n         );\n     }\n \n@@ -421,21 +350,21 @@ mod tests {\n             convert_integer_literal,\n             before,\n             \"const _: i32 = 0b11111111;\",\n-            \"Convert 0o377 to 0b11111111\",\n+            \"Convert 0o3_77 to 0b11111111\",\n         );\n \n         check_assist_by_label(\n             convert_integer_literal,\n             before,\n             \"const _: i32 = 255;\",\n-            \"Convert 0o377 to 255\",\n+            \"Convert 0o3_77 to 255\",\n         );\n \n         check_assist_by_label(\n             convert_integer_literal,\n             before,\n             \"const _: i32 = 0xFF;\",\n-            \"Convert 0o377 to 0xFF\",\n+            \"Convert 0o3_77 to 0xFF\",\n         );\n     }\n \n@@ -447,21 +376,21 @@ mod tests {\n             convert_integer_literal,\n             before,\n             \"const _: i32 = 0b1111101000i32;\",\n-            \"Convert 1000 (i32) to 0b1111101000\",\n+            \"Convert 1000i32 to 0b1111101000i32\",\n         );\n \n         check_assist_by_label(\n             convert_integer_literal,\n             before,\n             \"const _: i32 = 0o1750i32;\",\n-            \"Convert 1000 (i32) to 0o1750\",\n+            \"Convert 1000i32 to 0o1750i32\",\n         );\n \n         check_assist_by_label(\n             convert_integer_literal,\n             before,\n             \"const _: i32 = 0x3E8i32;\",\n-            \"Convert 1000 (i32) to 0x3E8\",\n+            \"Convert 1000i32 to 0x3E8i32\",\n         );\n     }\n \n@@ -473,21 +402,21 @@ mod tests {\n             convert_integer_literal,\n             before,\n             \"const _: i32 = 0b1010i32;\",\n-            \"Convert 10 (i32) to 0b1010\",\n+            \"Convert 10i32 to 0b1010i32\",\n         );\n \n         check_assist_by_label(\n             convert_integer_literal,\n             before,\n             \"const _: i32 = 0o12i32;\",\n-            \"Convert 10 (i32) to 0o12\",\n+            \"Convert 10i32 to 0o12i32\",\n         );\n \n         check_assist_by_label(\n             convert_integer_literal,\n             before,\n             \"const _: i32 = 0xAi32;\",\n-            \"Convert 10 (i32) to 0xA\",\n+            \"Convert 10i32 to 0xAi32\",\n         );\n     }\n \n@@ -499,21 +428,21 @@ mod tests {\n             convert_integer_literal,\n             before,\n             \"const _: i32 = 0b11111111i32;\",\n-            \"Convert 0xFF (i32) to 0b11111111\",\n+            \"Convert 0xFFi32 to 0b11111111i32\",\n         );\n \n         check_assist_by_label(\n             convert_integer_literal,\n             before,\n             \"const _: i32 = 0o377i32;\",\n-            \"Convert 0xFF (i32) to 0o377\",\n+            \"Convert 0xFFi32 to 0o377i32\",\n         );\n \n         check_assist_by_label(\n             convert_integer_literal,\n             before,\n             \"const _: i32 = 255i32;\",\n-            \"Convert 0xFF (i32) to 255\",\n+            \"Convert 0xFFi32 to 255i32\",\n         );\n     }\n \n@@ -525,21 +454,21 @@ mod tests {\n             convert_integer_literal,\n             before,\n             \"const _: i32 = 0o377i32;\",\n-            \"Convert 0b11111111 (i32) to 0o377\",\n+            \"Convert 0b11111111i32 to 0o377i32\",\n         );\n \n         check_assist_by_label(\n             convert_integer_literal,\n             before,\n             \"const _: i32 = 255i32;\",\n-            \"Convert 0b11111111 (i32) to 255\",\n+            \"Convert 0b11111111i32 to 255i32\",\n         );\n \n         check_assist_by_label(\n             convert_integer_literal,\n             before,\n             \"const _: i32 = 0xFFi32;\",\n-            \"Convert 0b11111111 (i32) to 0xFF\",\n+            \"Convert 0b11111111i32 to 0xFFi32\",\n         );\n     }\n \n@@ -551,21 +480,21 @@ mod tests {\n             convert_integer_literal,\n             before,\n             \"const _: i32 = 0b11111111i32;\",\n-            \"Convert 0o377 (i32) to 0b11111111\",\n+            \"Convert 0o377i32 to 0b11111111i32\",\n         );\n \n         check_assist_by_label(\n             convert_integer_literal,\n             before,\n             \"const _: i32 = 255i32;\",\n-            \"Convert 0o377 (i32) to 255\",\n+            \"Convert 0o377i32 to 255i32\",\n         );\n \n         check_assist_by_label(\n             convert_integer_literal,\n             before,\n             \"const _: i32 = 0xFFi32;\",\n-            \"Convert 0o377 (i32) to 0xFF\",\n+            \"Convert 0o377i32 to 0xFFi32\",\n         );\n     }\n \n@@ -577,21 +506,21 @@ mod tests {\n             convert_integer_literal,\n             before,\n             \"const _: i32 = 0b1111101000i32;\",\n-            \"Convert 1000 (i32) to 0b1111101000\",\n+            \"Convert 1_00_0i32 to 0b1111101000i32\",\n         );\n \n         check_assist_by_label(\n             convert_integer_literal,\n             before,\n             \"const _: i32 = 0o1750i32;\",\n-            \"Convert 1000 (i32) to 0o1750\",\n+            \"Convert 1_00_0i32 to 0o1750i32\",\n         );\n \n         check_assist_by_label(\n             convert_integer_literal,\n             before,\n             \"const _: i32 = 0x3E8i32;\",\n-            \"Convert 1000 (i32) to 0x3E8\",\n+            \"Convert 1_00_0i32 to 0x3E8i32\",\n         );\n     }\n \n@@ -603,21 +532,21 @@ mod tests {\n             convert_integer_literal,\n             before,\n             \"const _: i32 = 0b1010i32;\",\n-            \"Convert 10 (i32) to 0b1010\",\n+            \"Convert 1_0i32 to 0b1010i32\",\n         );\n \n         check_assist_by_label(\n             convert_integer_literal,\n             before,\n             \"const _: i32 = 0o12i32;\",\n-            \"Convert 10 (i32) to 0o12\",\n+            \"Convert 1_0i32 to 0o12i32\",\n         );\n \n         check_assist_by_label(\n             convert_integer_literal,\n             before,\n             \"const _: i32 = 0xAi32;\",\n-            \"Convert 10 (i32) to 0xA\",\n+            \"Convert 1_0i32 to 0xAi32\",\n         );\n     }\n \n@@ -629,21 +558,21 @@ mod tests {\n             convert_integer_literal,\n             before,\n             \"const _: i32 = 0b11111111i32;\",\n-            \"Convert 0xFF (i32) to 0b11111111\",\n+            \"Convert 0x_F_Fi32 to 0b11111111i32\",\n         );\n \n         check_assist_by_label(\n             convert_integer_literal,\n             before,\n             \"const _: i32 = 0o377i32;\",\n-            \"Convert 0xFF (i32) to 0o377\",\n+            \"Convert 0x_F_Fi32 to 0o377i32\",\n         );\n \n         check_assist_by_label(\n             convert_integer_literal,\n             before,\n             \"const _: i32 = 255i32;\",\n-            \"Convert 0xFF (i32) to 255\",\n+            \"Convert 0x_F_Fi32 to 255i32\",\n         );\n     }\n \n@@ -655,21 +584,21 @@ mod tests {\n             convert_integer_literal,\n             before,\n             \"const _: i32 = 0o377i32;\",\n-            \"Convert 0b11111111 (i32) to 0o377\",\n+            \"Convert 0b1111_1111i32 to 0o377i32\",\n         );\n \n         check_assist_by_label(\n             convert_integer_literal,\n             before,\n             \"const _: i32 = 255i32;\",\n-            \"Convert 0b11111111 (i32) to 255\",\n+            \"Convert 0b1111_1111i32 to 255i32\",\n         );\n \n         check_assist_by_label(\n             convert_integer_literal,\n             before,\n             \"const _: i32 = 0xFFi32;\",\n-            \"Convert 0b11111111 (i32) to 0xFF\",\n+            \"Convert 0b1111_1111i32 to 0xFFi32\",\n         );\n     }\n \n@@ -681,21 +610,28 @@ mod tests {\n             convert_integer_literal,\n             before,\n             \"const _: i32 = 0b11111111i32;\",\n-            \"Convert 0o377 (i32) to 0b11111111\",\n+            \"Convert 0o3_77i32 to 0b11111111i32\",\n         );\n \n         check_assist_by_label(\n             convert_integer_literal,\n             before,\n             \"const _: i32 = 255i32;\",\n-            \"Convert 0o377 (i32) to 255\",\n+            \"Convert 0o3_77i32 to 255i32\",\n         );\n \n         check_assist_by_label(\n             convert_integer_literal,\n             before,\n             \"const _: i32 = 0xFFi32;\",\n-            \"Convert 0o377 (i32) to 0xFF\",\n+            \"Convert 0o3_77i32 to 0xFFi32\",\n         );\n     }\n+\n+    #[test]\n+    fn convert_overflowing_literal() {\n+        let before = \"const _: i32 =\n+            111111111111111111111111111111111111111111111111111111111111111111111111<|>;\";\n+        check_assist_not_applicable(convert_integer_literal, before);\n+    }\n }"}, {"sha": "a16ac6a7c90862d00e22abd84aca8dfe09b27beb", "filename": "crates/syntax/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c94f1cb5e86739864871dc56fcbd7a6de116315/crates%2Fsyntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c94f1cb5e86739864871dc56fcbd7a6de116315/crates%2Fsyntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast.rs?ref=7c94f1cb5e86739864871dc56fcbd7a6de116315", "patch": "@@ -16,7 +16,7 @@ use crate::{\n };\n \n pub use self::{\n-    expr_ext::{ArrayExprKind, BinOp, Effect, ElseBranch, LiteralKind, PrefixOp, RangeOp},\n+    expr_ext::{ArrayExprKind, BinOp, Effect, ElseBranch, LiteralKind, PrefixOp, Radix, RangeOp},\n     generated::{nodes::*, tokens::*},\n     node_ext::{\n         AttrKind, FieldKind, NameOrNameRef, PathSegmentKind, SelfParamKind, SlicePatComponents,"}, {"sha": "3aff01e837a2eee6678625d2f3c90e587d21ea73", "filename": "crates/syntax/src/ast/expr_ext.rs", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/7c94f1cb5e86739864871dc56fcbd7a6de116315/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c94f1cb5e86739864871dc56fcbd7a6de116315/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs?ref=7c94f1cb5e86739864871dc56fcbd7a6de116315", "patch": "@@ -358,6 +358,71 @@ impl ast::Literal {\n             _ => unreachable!(),\n         }\n     }\n+\n+    // FIXME: should probably introduce string token type?\n+    // https://github.com/rust-analyzer/rust-analyzer/issues/6308\n+    pub fn int_value(&self) -> Option<(Radix, u128)> {\n+        let suffix = match self.kind() {\n+            LiteralKind::IntNumber { suffix } => suffix,\n+            _ => return None,\n+        };\n+\n+        let token = self.token();\n+        let mut text = token.text().as_str();\n+        text = &text[..text.len() - suffix.map_or(0, |it| it.len())];\n+\n+        let buf;\n+        if text.contains(\"_\") {\n+            buf = text.replace('_', \"\");\n+            text = buf.as_str();\n+        };\n+\n+        let radix = Radix::identify(text)?;\n+        let digits = &text[radix.prefix_len()..];\n+        let value = u128::from_str_radix(digits, radix as u32).ok()?;\n+        Some((radix, value))\n+    }\n+}\n+\n+#[derive(Debug, PartialEq, Eq, Copy, Clone)]\n+pub enum Radix {\n+    Binary = 2,\n+    Octal = 8,\n+    Decimal = 10,\n+    Hexadecimal = 16,\n+}\n+\n+impl Radix {\n+    pub const ALL: &'static [Radix] =\n+        &[Radix::Binary, Radix::Octal, Radix::Decimal, Radix::Hexadecimal];\n+\n+    fn identify(literal_text: &str) -> Option<Self> {\n+        // We cannot express a literal in anything other than decimal in under 3 characters, so we return here if possible.\n+        if literal_text.len() < 3 && literal_text.chars().all(|c| c.is_digit(10)) {\n+            return Some(Self::Decimal);\n+        }\n+\n+        let res = match &literal_text[..2] {\n+            \"0b\" => Radix::Binary,\n+            \"0o\" => Radix::Octal,\n+            \"0x\" => Radix::Hexadecimal,\n+            _ => Radix::Decimal,\n+        };\n+\n+        // Checks that all characters after the base prefix are all valid digits for that base.\n+        if literal_text[res.prefix_len()..].chars().all(|c| c.is_digit(res as u32)) {\n+            Some(res)\n+        } else {\n+            None\n+        }\n+    }\n+\n+    const fn prefix_len(&self) -> usize {\n+        match self {\n+            Self::Decimal => 0,\n+            _ => 2,\n+        }\n+    }\n }\n \n #[derive(Debug, Clone, PartialEq, Eq)]"}]}