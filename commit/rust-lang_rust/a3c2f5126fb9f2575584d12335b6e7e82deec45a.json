{"sha": "a3c2f5126fb9f2575584d12335b6e7e82deec45a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzYzJmNTEyNmZiOWYyNTc1NTg0ZDEyMzM1YjZlN2U4MmRlZWM0NWE=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-06-19T22:36:02Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-06-19T22:36:02Z"}, "message": "Recursively compute impl sets", "tree": {"sha": "47efdd24baa653e2023e790463dbd77e219f1b98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47efdd24baa653e2023e790463dbd77e219f1b98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3c2f5126fb9f2575584d12335b6e7e82deec45a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3c2f5126fb9f2575584d12335b6e7e82deec45a", "html_url": "https://github.com/rust-lang/rust/commit/a3c2f5126fb9f2575584d12335b6e7e82deec45a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3c2f5126fb9f2575584d12335b6e7e82deec45a/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a91c2e94b7947d8dcf3437f809cbdab0b4493a77", "url": "https://api.github.com/repos/rust-lang/rust/commits/a91c2e94b7947d8dcf3437f809cbdab0b4493a77", "html_url": "https://github.com/rust-lang/rust/commit/a91c2e94b7947d8dcf3437f809cbdab0b4493a77"}], "stats": {"total": 39, "additions": 26, "deletions": 13}, "files": [{"sha": "ed638c195a84a55760597335a4ef19f27608d759", "filename": "crates/ra_hir_ty/src/method_resolution.rs", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a3c2f5126fb9f2575584d12335b6e7e82deec45a/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c2f5126fb9f2575584d12335b6e7e82deec45a/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs?ref=a3c2f5126fb9f2575584d12335b6e7e82deec45a", "patch": "@@ -65,26 +65,20 @@ impl CrateImplDefs {\n         db: &dyn HirDatabase,\n         krate: CrateId,\n     ) -> Arc<CrateImplDefs> {\n-        // FIXME: This should take visibility and orphan rules into account to keep the result\n-        // smaller.\n         let _p = profile(\"impls_from_deps_query\");\n         let crate_graph = db.crate_graph();\n         let mut res = CrateImplDefs {\n             inherent_impls: FxHashMap::default(),\n             impls_by_trait: FxHashMap::default(),\n         };\n-        let mut seen = FxHashSet::default();\n-        let mut worklist =\n-            crate_graph[krate].dependencies.iter().map(|dep| dep.crate_id).collect::<Vec<_>>();\n-        while let Some(krate) = worklist.pop() {\n-            if !seen.insert(krate) {\n-                continue;\n-            }\n-\n-            // No deduplication, since a) impls can't be reexported, b) we visit a crate only once\n-            res.fill(db, krate);\n \n-            worklist.extend(crate_graph[krate].dependencies.iter().map(|dep| dep.crate_id));\n+        // For each dependency, calculate `impls_from_deps` recursively, then add its own\n+        // `impls_in_crate`.\n+        // As we might visit crates multiple times, `merge` has to deduplicate impls to avoid\n+        // wasting memory.\n+        for dep in &crate_graph[krate].dependencies {\n+            res.merge(&db.impls_from_deps(dep.crate_id));\n+            res.merge(&db.impls_in_crate(dep.crate_id));\n         }\n \n         Arc::new(res)\n@@ -116,6 +110,25 @@ impl CrateImplDefs {\n         }\n     }\n \n+    fn merge(&mut self, other: &Self) {\n+        for (fp, impls) in &other.inherent_impls {\n+            let vec = self.inherent_impls.entry(*fp).or_default();\n+            vec.extend(impls);\n+            vec.sort();\n+            vec.dedup();\n+        }\n+\n+        for (trait_, other_map) in &other.impls_by_trait {\n+            let map = self.impls_by_trait.entry(*trait_).or_default();\n+            for (fp, impls) in other_map {\n+                let vec = map.entry(*fp).or_default();\n+                vec.extend(impls);\n+                vec.sort();\n+                vec.dedup();\n+            }\n+        }\n+    }\n+\n     pub fn lookup_impl_defs(&self, ty: &Ty) -> impl Iterator<Item = ImplId> + '_ {\n         let fingerprint = TyFingerprint::for_impl(ty);\n         fingerprint.and_then(|f| self.inherent_impls.get(&f)).into_iter().flatten().copied()"}]}