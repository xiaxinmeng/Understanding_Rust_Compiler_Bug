{"sha": "3037965b5bb762b6ed0dc860aefe01b664943ce8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwMzc5NjViNWJiNzYyYjZlZDBkYzg2MGFlZmUwMWI2NjQ5NDNjZTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-14T06:34:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-14T06:34:20Z"}, "message": "Auto merge of #45137 - theotherjimmy:vtable-methods-query, r=nikomatsakis\n\nQueryify Vtable methods\n\nThis query might come with a downside: It converts an iterator to a Vec, which may increase the working set of rustc on programs that use many many traits (I think that's where this is used).", "tree": {"sha": "6bc315386efbd3051021c93a0d1a0f2c1a0fc72a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bc315386efbd3051021c93a0d1a0f2c1a0fc72a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3037965b5bb762b6ed0dc860aefe01b664943ce8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3037965b5bb762b6ed0dc860aefe01b664943ce8", "html_url": "https://github.com/rust-lang/rust/commit/3037965b5bb762b6ed0dc860aefe01b664943ce8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3037965b5bb762b6ed0dc860aefe01b664943ce8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2aeff0f1b3208e10feaabfb95e3dc06646b35669", "url": "https://api.github.com/repos/rust-lang/rust/commits/2aeff0f1b3208e10feaabfb95e3dc06646b35669", "html_url": "https://github.com/rust-lang/rust/commit/2aeff0f1b3208e10feaabfb95e3dc06646b35669"}, {"sha": "fcb8bc9d4e08924d4e4bde1ef4995b329fbc11b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcb8bc9d4e08924d4e4bde1ef4995b329fbc11b5", "html_url": "https://github.com/rust-lang/rust/commit/fcb8bc9d4e08924d4e4bde1ef4995b329fbc11b5"}], "stats": {"total": 226, "additions": 79, "deletions": 147}, "files": [{"sha": "4600cdbc692e7f37e51bf1d0a510bc346cb6c979", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3037965b5bb762b6ed0dc860aefe01b664943ce8/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3037965b5bb762b6ed0dc860aefe01b664943ce8/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=3037965b5bb762b6ed0dc860aefe01b664943ce8", "patch": "@@ -506,6 +506,7 @@ define_dep_nodes!( <'tcx>\n     [] SpecializationGraph(DefId),\n     [] ObjectSafety(DefId),\n     [] FulfillObligation { param_env: ParamEnv<'tcx>, trait_ref: PolyTraitRef<'tcx> },\n+    [] VtableMethods { trait_ref: PolyTraitRef<'tcx> },\n \n     [] IsCopy { param_env: ParamEnvAnd<'tcx, Ty<'tcx>> },\n     [] IsSized { param_env: ParamEnvAnd<'tcx, Ty<'tcx>> },"}, {"sha": "1fddb1864175f0752b2043d7101dbb9f3edcd8f7", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 48, "deletions": 44, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/3037965b5bb762b6ed0dc860aefe01b664943ce8/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3037965b5bb762b6ed0dc860aefe01b664943ce8/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=3037965b5bb762b6ed0dc860aefe01b664943ce8", "patch": "@@ -650,53 +650,55 @@ pub fn normalize_and_test_predicates<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n /// Given a trait `trait_ref`, iterates the vtable entries\n /// that come from `trait_ref`, including its supertraits.\n #[inline] // FIXME(#35870) Avoid closures being unexported due to impl Trait.\n-pub fn get_vtable_methods<'a, 'tcx>(\n+fn vtable_methods<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     trait_ref: ty::PolyTraitRef<'tcx>)\n-    -> impl Iterator<Item=Option<(DefId, &'tcx Substs<'tcx>)>> + 'a\n+    -> Rc<Vec<Option<(DefId, &'tcx Substs<'tcx>)>>>\n {\n-    debug!(\"get_vtable_methods({:?})\", trait_ref);\n-\n-    supertraits(tcx, trait_ref).flat_map(move |trait_ref| {\n-        let trait_methods = tcx.associated_items(trait_ref.def_id())\n-            .filter(|item| item.kind == ty::AssociatedKind::Method);\n-\n-        // Now list each method's DefId and Substs (for within its trait).\n-        // If the method can never be called from this object, produce None.\n-        trait_methods.map(move |trait_method| {\n-            debug!(\"get_vtable_methods: trait_method={:?}\", trait_method);\n-            let def_id = trait_method.def_id;\n-\n-            // Some methods cannot be called on an object; skip those.\n-            if !tcx.is_vtable_safe_method(trait_ref.def_id(), &trait_method) {\n-                debug!(\"get_vtable_methods: not vtable safe\");\n-                return None;\n-            }\n-\n-            // the method may have some early-bound lifetimes, add\n-            // regions for those\n-            let substs = Substs::for_item(tcx, def_id,\n-                                          |_, _| tcx.types.re_erased,\n-                                          |def, _| trait_ref.substs().type_for_def(def));\n-\n-            // the trait type may have higher-ranked lifetimes in it;\n-            // so erase them if they appear, so that we get the type\n-            // at some particular call site\n-            let substs = tcx.erase_late_bound_regions_and_normalize(&ty::Binder(substs));\n-\n-            // It's possible that the method relies on where clauses that\n-            // do not hold for this particular set of type parameters.\n-            // Note that this method could then never be called, so we\n-            // do not want to try and trans it, in that case (see #23435).\n-            let predicates = tcx.predicates_of(def_id).instantiate_own(tcx, substs);\n-            if !normalize_and_test_predicates(tcx, predicates.predicates) {\n-                debug!(\"get_vtable_methods: predicates do not hold\");\n-                return None;\n-            }\n-\n-            Some((def_id, substs))\n-        })\n-    })\n+    debug!(\"vtable_methods({:?})\", trait_ref);\n+\n+    Rc::new(\n+        supertraits(tcx, trait_ref).flat_map(move |trait_ref| {\n+            let trait_methods = tcx.associated_items(trait_ref.def_id())\n+                .filter(|item| item.kind == ty::AssociatedKind::Method);\n+\n+            // Now list each method's DefId and Substs (for within its trait).\n+            // If the method can never be called from this object, produce None.\n+            trait_methods.map(move |trait_method| {\n+                debug!(\"vtable_methods: trait_method={:?}\", trait_method);\n+                let def_id = trait_method.def_id;\n+\n+                // Some methods cannot be called on an object; skip those.\n+                if !tcx.is_vtable_safe_method(trait_ref.def_id(), &trait_method) {\n+                    debug!(\"vtable_methods: not vtable safe\");\n+                    return None;\n+                }\n+\n+                // the method may have some early-bound lifetimes, add\n+                // regions for those\n+                let substs = Substs::for_item(tcx, def_id,\n+                                              |_, _| tcx.types.re_erased,\n+                                              |def, _| trait_ref.substs().type_for_def(def));\n+\n+                // the trait type may have higher-ranked lifetimes in it;\n+                // so erase them if they appear, so that we get the type\n+                // at some particular call site\n+                let substs = tcx.erase_late_bound_regions_and_normalize(&ty::Binder(substs));\n+\n+                // It's possible that the method relies on where clauses that\n+                // do not hold for this particular set of type parameters.\n+                // Note that this method could then never be called, so we\n+                // do not want to try and trans it, in that case (see #23435).\n+                let predicates = tcx.predicates_of(def_id).instantiate_own(tcx, substs);\n+                if !normalize_and_test_predicates(tcx, predicates.predicates) {\n+                    debug!(\"vtable_methods: predicates do not hold\");\n+                    return None;\n+                }\n+\n+                Some((def_id, substs))\n+            })\n+        }).collect()\n+    )\n }\n \n impl<'tcx,O> Obligation<'tcx,O> {\n@@ -836,6 +838,7 @@ pub fn provide(providers: &mut ty::maps::Providers) {\n         specialization_graph_of: specialize::specialization_graph_provider,\n         specializes: specialize::specializes,\n         trans_fulfill_obligation: trans::trans_fulfill_obligation,\n+        vtable_methods,\n         ..*providers\n     };\n }\n@@ -846,6 +849,7 @@ pub fn provide_extern(providers: &mut ty::maps::Providers) {\n         specialization_graph_of: specialize::specialization_graph_provider,\n         specializes: specialize::specializes,\n         trans_fulfill_obligation: trans::trans_fulfill_obligation,\n+        vtable_methods,\n         ..*providers\n     };\n }"}, {"sha": "137039598a55b5601ca6b7d887d6f740d0fd760f", "filename": "src/librustc/ty/maps/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3037965b5bb762b6ed0dc860aefe01b664943ce8/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3037965b5bb762b6ed0dc860aefe01b664943ce8/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs?ref=3037965b5bb762b6ed0dc860aefe01b664943ce8", "patch": "@@ -503,6 +503,12 @@ impl<'tcx> QueryDescription for queries::has_clone_closures<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription for queries::vtable_methods<'tcx> {\n+    fn describe(tcx: TyCtxt, key: ty::PolyTraitRef<'tcx> ) -> String {\n+        format!(\"finding all methods for trait {}\", tcx.item_path_str(key.def_id()))\n+    }\n+}\n+\n impl<'tcx> QueryDescription for queries::has_copy_closures<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         format!(\"seeing if the crate has enabled `Copy` closures\")"}, {"sha": "ee4523d6f3e1ef8b148cc4c7605a9e54cfd041f1", "filename": "src/librustc/ty/maps/keys.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3037965b5bb762b6ed0dc860aefe01b664943ce8/src%2Flibrustc%2Fty%2Fmaps%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3037965b5bb762b6ed0dc860aefe01b664943ce8/src%2Flibrustc%2Fty%2Fmaps%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fkeys.rs?ref=3037965b5bb762b6ed0dc860aefe01b664943ce8", "patch": "@@ -143,6 +143,15 @@ impl<'tcx> Key for (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>) {\n     }\n }\n \n+impl<'tcx> Key for ty::PolyTraitRef<'tcx>{\n+    fn map_crate(&self) -> CrateNum {\n+        self.def_id().krate\n+    }\n+    fn default_span(&self, tcx: TyCtxt) -> Span {\n+        tcx.def_span(self.def_id())\n+    }\n+}\n+\n impl<'tcx> Key for Ty<'tcx> {\n     fn map_crate(&self) -> CrateNum {\n         LOCAL_CRATE"}, {"sha": "4b68f5addd2be3c7d4d700d4774231f863b9a42b", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3037965b5bb762b6ed0dc860aefe01b664943ce8/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3037965b5bb762b6ed0dc860aefe01b664943ce8/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=3037965b5bb762b6ed0dc860aefe01b664943ce8", "patch": "@@ -228,6 +228,8 @@ define_maps! { <'tcx>\n     [] fn item_body_nested_bodies: ItemBodyNestedBodies(DefId) -> ExternBodyNestedBodies,\n     [] fn const_is_rvalue_promotable_to_static: ConstIsRvaluePromotableToStatic(DefId) -> bool,\n     [] fn is_mir_available: IsMirAvailable(DefId) -> bool,\n+    [] fn vtable_methods: vtable_methods_node(ty::PolyTraitRef<'tcx>)\n+                          -> Rc<Vec<Option<(DefId, &'tcx Substs<'tcx>)>>>,\n \n     [] fn trans_fulfill_obligation: fulfill_obligation_dep_node(\n         (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>)) -> Vtable<'tcx, ()>,\n@@ -470,3 +472,7 @@ fn collect_and_partition_translation_items_node<'tcx>(_: CrateNum) -> DepConstru\n fn output_filenames_node<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n     DepConstructor::OutputFilenames\n }\n+\n+fn vtable_methods_node<'tcx>(trait_ref: ty::PolyTraitRef<'tcx>) -> DepConstructor<'tcx> {\n+    DepConstructor::VtableMethods{ trait_ref }\n+}"}, {"sha": "3f215303ccbeeade0af0793f4dc80253b34b814d", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 5, "deletions": 99, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/3037965b5bb762b6ed0dc860aefe01b664943ce8/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3037965b5bb762b6ed0dc860aefe01b664943ce8/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=3037965b5bb762b6ed0dc860aefe01b664943ce8", "patch": "@@ -468,8 +468,7 @@ macro_rules! define_maps {\n \n         define_provider_struct! {\n             tcx: $tcx,\n-            input: ($(([$($modifiers)*] [$name] [$K] [$V]))*),\n-            output: ()\n+            input: ($(([$($modifiers)*] [$name] [$K] [$V]))*)\n         }\n \n         impl<$tcx> Copy for Providers<$tcx> {}\n@@ -480,78 +479,19 @@ macro_rules! define_maps {\n }\n \n macro_rules! define_map_struct {\n-    // Initial state\n     (tcx: $tcx:tt,\n-     input: $input:tt) => {\n-        define_map_struct! {\n-            tcx: $tcx,\n-            input: $input,\n-            output: ()\n-        }\n-    };\n-\n-    // Final output\n-    (tcx: $tcx:tt,\n-     input: (),\n-     output: ($($output:tt)*)) => {\n+     input: ($(([$(modifiers:tt)*] [$($attr:tt)*] [$name:ident]))*)) => {\n         pub struct Maps<$tcx> {\n             providers: IndexVec<CrateNum, Providers<$tcx>>,\n             query_stack: RefCell<Vec<(Span, Query<$tcx>)>>,\n-            $($output)*\n-        }\n-    };\n-\n-    // Field recognized and ready to shift into the output\n-    (tcx: $tcx:tt,\n-     ready: ([$($pub:tt)*] [$($attr:tt)*] [$name:ident]),\n-     input: $input:tt,\n-     output: ($($output:tt)*)) => {\n-        define_map_struct! {\n-            tcx: $tcx,\n-            input: $input,\n-            output: ($($output)*\n-                     $(#[$attr])* $($pub)* $name: RefCell<QueryMap<queries::$name<$tcx>>>,)\n-        }\n-    };\n-\n-    // No modifiers left? This is a private item.\n-    (tcx: $tcx:tt,\n-     input: (([] $attrs:tt $name:tt) $($input:tt)*),\n-     output: $output:tt) => {\n-        define_map_struct! {\n-            tcx: $tcx,\n-            ready: ([] $attrs $name),\n-            input: ($($input)*),\n-            output: $output\n-        }\n-    };\n-\n-    // Skip other modifiers\n-    (tcx: $tcx:tt,\n-     input: (([$other_modifier:tt $($modifiers:tt)*] $($fields:tt)*) $($input:tt)*),\n-     output: $output:tt) => {\n-        define_map_struct! {\n-            tcx: $tcx,\n-            input: (([$($modifiers)*] $($fields)*) $($input)*),\n-            output: $output\n+            $($(#[$attr])*  $name: RefCell<QueryMap<queries::$name<$tcx>>>,)*\n         }\n     };\n }\n \n macro_rules! define_provider_struct {\n-    // Initial state:\n-    (tcx: $tcx:tt, input: $input:tt) => {\n-        define_provider_struct! {\n-            tcx: $tcx,\n-            input: $input,\n-            output: ()\n-        }\n-    };\n-\n-    // Final state:\n     (tcx: $tcx:tt,\n-     input: (),\n-     output: ($(([$name:ident] [$K:ty] [$R:ty]))*)) => {\n+     input: ($(([$($modifiers:tt)*] [$name:ident] [$K:ty] [$R:ty]))*)) => {\n         pub struct Providers<$tcx> {\n             $(pub $name: for<'a> fn(TyCtxt<'a, $tcx, $tcx>, $K) -> $R,)*\n         }\n@@ -566,41 +506,6 @@ macro_rules! define_provider_struct {\n             }\n         }\n     };\n-\n-    // Something ready to shift:\n-    (tcx: $tcx:tt,\n-     ready: ($name:tt $K:tt $V:tt),\n-     input: $input:tt,\n-     output: ($($output:tt)*)) => {\n-        define_provider_struct! {\n-            tcx: $tcx,\n-            input: $input,\n-            output: ($($output)* ($name $K $V))\n-        }\n-    };\n-\n-    // Regular queries produce a `V` only.\n-    (tcx: $tcx:tt,\n-     input: (([] $name:tt $K:tt $V:tt) $($input:tt)*),\n-     output: $output:tt) => {\n-        define_provider_struct! {\n-            tcx: $tcx,\n-            ready: ($name $K $V),\n-            input: ($($input)*),\n-            output: $output\n-        }\n-    };\n-\n-    // Skip modifiers.\n-    (tcx: $tcx:tt,\n-     input: (([$other_modifier:tt $($modifiers:tt)*] $($fields:tt)*) $($input:tt)*),\n-     output: $output:tt) => {\n-        define_provider_struct! {\n-            tcx: $tcx,\n-            input: (([$($modifiers)*] $($fields)*) $($input)*),\n-            output: $output\n-        }\n-    };\n }\n \n \n@@ -749,6 +654,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::CodegenUnit |\n         DepKind::CompileCodegenUnit |\n         DepKind::FulfillObligation |\n+        DepKind::VtableMethods |\n \n         // These are just odd\n         DepKind::Null |"}, {"sha": "33a2e96ee6621bb4282ad980d1ab8349c1ba15df", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3037965b5bb762b6ed0dc860aefe01b664943ce8/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3037965b5bb762b6ed0dc860aefe01b664943ce8/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=3037965b5bb762b6ed0dc860aefe01b664943ce8", "patch": "@@ -849,8 +849,8 @@ fn create_trans_items_for_vtable_methods<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             assert!(!poly_trait_ref.has_escaping_regions());\n \n             // Walk all methods of the trait, including those of its supertraits\n-            let methods = traits::get_vtable_methods(tcx, poly_trait_ref);\n-            let methods = methods.filter_map(|method| method)\n+            let methods = tcx.vtable_methods(poly_trait_ref);\n+            let methods = methods.iter().cloned().filter_map(|method| method)\n                 .map(|(def_id, substs)| ty::Instance::resolve(\n                         tcx,\n                         ty::ParamEnv::empty(traits::Reveal::All),"}, {"sha": "3253a0339a850ec209451c5ae0e2f4d9cdbd6356", "filename": "src/librustc_trans/meth.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3037965b5bb762b6ed0dc860aefe01b664943ce8/src%2Flibrustc_trans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3037965b5bb762b6ed0dc860aefe01b664943ce8/src%2Flibrustc_trans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmeth.rs?ref=3037965b5bb762b6ed0dc860aefe01b664943ce8", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use llvm::ValueRef;\n-use rustc::traits;\n use callee;\n use common::*;\n use builder::Builder;\n@@ -87,7 +86,8 @@ pub fn get_vtable<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n \n     if let Some(trait_ref) = trait_ref {\n         let trait_ref = trait_ref.with_self_ty(tcx, ty);\n-        let methods = traits::get_vtable_methods(tcx, trait_ref).map(|opt_mth| {\n+        let methods = tcx.vtable_methods(trait_ref);\n+        let methods = methods.iter().cloned().map(|opt_mth| {\n             opt_mth.map_or(nullptr, |(def_id, substs)| {\n                 callee::resolve_and_get_fn(ccx, def_id, substs)\n             })"}]}