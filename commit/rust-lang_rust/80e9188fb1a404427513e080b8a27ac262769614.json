{"sha": "80e9188fb1a404427513e080b8a27ac262769614", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwZTkxODhmYjFhNDA0NDI3NTEzZTA4MGI4YTI3YWMyNjI3Njk2MTQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-06-20T10:41:40Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-06-20T10:56:47Z"}, "message": "Rewrite cargo.sh in rust", "tree": {"sha": "54787da560eb828454135b25579ca94d0c4fabe3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54787da560eb828454135b25579ca94d0c4fabe3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80e9188fb1a404427513e080b8a27ac262769614", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80e9188fb1a404427513e080b8a27ac262769614", "html_url": "https://github.com/rust-lang/rust/commit/80e9188fb1a404427513e080b8a27ac262769614", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80e9188fb1a404427513e080b8a27ac262769614/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fd8fa21231e488c3f784e811b9f7c7548561594", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fd8fa21231e488c3f784e811b9f7c7548561594", "html_url": "https://github.com/rust-lang/rust/commit/9fd8fa21231e488c3f784e811b9f7c7548561594"}], "stats": {"total": 184, "additions": 121, "deletions": 63}, "files": [{"sha": "dad8ed90b53b8307fb1c4b72d40b15a59c2878bd", "filename": "Readme.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80e9188fb1a404427513e080b8a27ac262769614/Readme.md", "raw_url": "https://github.com/rust-lang/rust/raw/80e9188fb1a404427513e080b8a27ac262769614/Readme.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Readme.md?ref=80e9188fb1a404427513e080b8a27ac262769614", "patch": "@@ -37,7 +37,7 @@ Assuming `$cg_clif_dir` is the directory you cloned this repo into and you follo\n In the directory with your project (where you can do the usual `cargo build`), run:\n \n ```bash\n-$ $cg_clif_dir/build/cargo.sh build\n+$ $cg_clif_dir/build/cargo build\n ```\n \n This will build your project with rustc_codegen_cranelift instead of the usual LLVM backend."}, {"sha": "507af3f9aa797e70e1d39ee914a766e02feb56c5", "filename": "build_system/build_sysroot.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/80e9188fb1a404427513e080b8a27ac262769614/build_system%2Fbuild_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e9188fb1a404427513e080b8a27ac262769614/build_system%2Fbuild_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_sysroot.rs?ref=80e9188fb1a404427513e080b8a27ac262769614", "patch": "@@ -43,10 +43,14 @@ pub(crate) fn build_sysroot(\n         );\n     }\n \n-    // Copy supporting files\n-    try_hard_link(\"rust-toolchain\", target_dir.join(\"rust-toolchain\"));\n-    try_hard_link(\"scripts/config.sh\", target_dir.join(\"config.sh\"));\n-    try_hard_link(\"scripts/cargo.sh\", target_dir.join(\"cargo.sh\"));\n+    // Build and copy cargo wrapper\n+    let mut build_cargo_wrapper_cmd = Command::new(\"rustc\");\n+    build_cargo_wrapper_cmd\n+        .arg(\"scripts/cargo.rs\")\n+        .arg(\"-o\")\n+        .arg(target_dir.join(\"cargo\"))\n+        .arg(\"-g\");\n+    spawn_and_wait(build_cargo_wrapper_cmd);\n \n     let default_sysroot = crate::rustc_info::get_default_sysroot();\n "}, {"sha": "aac44b62d0127a941dcdd4297db6829d56c5ac84", "filename": "docs/usage.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/80e9188fb1a404427513e080b8a27ac262769614/docs%2Fusage.md", "raw_url": "https://github.com/rust-lang/rust/raw/80e9188fb1a404427513e080b8a27ac262769614/docs%2Fusage.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fusage.md?ref=80e9188fb1a404427513e080b8a27ac262769614", "patch": "@@ -9,7 +9,7 @@ Assuming `$cg_clif_dir` is the directory you cloned this repo into and you follo\n In the directory with your project (where you can do the usual `cargo build`), run:\n \n ```bash\n-$ $cg_clif_dir/build/cargo.sh build\n+$ $cg_clif_dir/build/cargo build\n ```\n \n This will build your project with rustc_codegen_cranelift instead of the usual LLVM backend.\n@@ -30,7 +30,7 @@ In jit mode cg_clif will immediately execute your code without creating an execu\n > The jit mode will probably need cargo integration to make this possible.\n \n ```bash\n-$ $cg_clif_dir/build/cargo.sh jit\n+$ $cg_clif_dir/build/cargo jit\n ```\n \n or\n@@ -44,7 +44,7 @@ first called. It currently does not work with multi-threaded programs. When a no\n function is called from another thread than the main thread, you will get an ICE.\n \n ```bash\n-$ $cg_clif_dir/build/cargo.sh lazy-jit\n+$ $cg_clif_dir/build/cargo lazy-jit\n ```\n \n ## Shell"}, {"sha": "543e7c192765aac7eee665d91eb28e7e58e67614", "filename": "scripts/cargo.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/80e9188fb1a404427513e080b8a27ac262769614/scripts%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e9188fb1a404427513e080b8a27ac262769614/scripts%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Fcargo.rs?ref=80e9188fb1a404427513e080b8a27ac262769614", "patch": "@@ -0,0 +1,85 @@\n+use std::env;\n+use std::os::unix::process::CommandExt;\n+use std::path::PathBuf;\n+use std::process::{Command, Stdio};\n+\n+fn main() {\n+    if env::var(\"RUSTC_WRAPPER\").map_or(false, |wrapper| wrapper.contains(\"sccache\")) {\n+        eprintln!(\n+            \"\\x1b[1;93m=== Warning: Unsetting RUSTC_WRAPPER to prevent interference with sccache ===\\x1b[0m\"\n+        );\n+        env::remove_var(\"RUSTC_WRAPPER\");\n+    }\n+\n+    let sysroot = PathBuf::from(env::current_exe().unwrap().parent().unwrap());\n+\n+    env::set_var(\"RUSTC\", sysroot.join(\"bin/cg_clif\".to_string() + env::consts::EXE_SUFFIX));\n+\n+    let mut rustdoc_flags = env::var(\"RUSTDOCFLAGS\").unwrap_or(String::new());\n+    rustdoc_flags.push_str(\" -Cpanic=abort -Zpanic-abort-tests -Zcodegen-backend=\");\n+    rustdoc_flags.push_str(\n+        sysroot\n+            .join(if cfg!(windows) { \"bin\" } else { \"lib\" })\n+            .join(\n+                env::consts::DLL_PREFIX.to_string()\n+                    + \"rustc_codegen_cranelift\"\n+                    + env::consts::DLL_SUFFIX,\n+            )\n+            .to_str()\n+            .unwrap(),\n+    );\n+    rustdoc_flags.push_str(\" --sysroot \");\n+    rustdoc_flags.push_str(sysroot.to_str().unwrap());\n+    env::set_var(\"RUSTDOCFLAGS\", rustdoc_flags);\n+\n+    let default_sysroot = Command::new(\"rustc\")\n+        .stderr(Stdio::inherit())\n+        .args(&[\"--print\", \"sysroot\"])\n+        .output()\n+        .unwrap()\n+        .stdout;\n+    let default_sysroot = std::str::from_utf8(&default_sysroot).unwrap().trim();\n+\n+    let extra_ld_lib_path =\n+        default_sysroot.to_string() + \":\" + sysroot.join(\"lib\").to_str().unwrap();\n+    if cfg!(target_os = \"macos\") {\n+        env::set_var(\n+            \"DYLD_LIBRARY_PATH\",\n+            env::var(\"DYLD_LIBRARY_PATH\").unwrap_or(String::new()) + \":\" + &extra_ld_lib_path,\n+        );\n+    } else if cfg!(unix) {\n+        env::set_var(\n+            \"LD_LIBRARY_PATH\",\n+            env::var(\"LD_LIBRARY_PATH\").unwrap_or(String::new()) + \":\" + &extra_ld_lib_path,\n+        );\n+    }\n+\n+    // Ensure that the right toolchain is used\n+    env::set_var(\"RUSTUP_TOOLCHAIN\", env!(\"RUSTUP_TOOLCHAIN\"));\n+\n+    let args: Vec<_> = match env::args().nth(1).as_deref() {\n+        Some(\"jit\") => {\n+            env::set_var(\n+                \"RUSTFLAGS\",\n+                env::var(\"RUSTFLAGS\").unwrap_or(String::new()) + \" -Cprefer-dynamic\",\n+            );\n+            std::array::IntoIter::new([\"rustc\".to_string()])\n+                .chain(env::args().skip(2))\n+                .chain([\"--\".to_string(), \"-Cllvm-args=mode=jit\".to_string()])\n+                .collect()\n+        }\n+        Some(\"lazy-jit\") => {\n+            env::set_var(\n+                \"RUSTFLAGS\",\n+                env::var(\"RUSTFLAGS\").unwrap_or(String::new()) + \" -Cprefer-dynamic\",\n+            );\n+            std::array::IntoIter::new([\"rustc\".to_string()])\n+                .chain(env::args().skip(2))\n+                .chain([\"--\".to_string(), \"-Cllvm-args=mode=jit-lazy\".to_string()])\n+                .collect()\n+        }\n+        _ => env::args().skip(1).collect(),\n+    };\n+\n+    Command::new(\"cargo\").args(args).exec();\n+}"}, {"sha": "267b5d99a08da76639068bd5efd418f6c65a66a1", "filename": "scripts/cargo.sh", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9fd8fa21231e488c3f784e811b9f7c7548561594/scripts%2Fcargo.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9fd8fa21231e488c3f784e811b9f7c7548561594/scripts%2Fcargo.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Fcargo.sh?ref=9fd8fa21231e488c3f784e811b9f7c7548561594", "patch": "@@ -1,18 +0,0 @@\n-#!/usr/bin/env bash\n-\n-dir=$(dirname \"$0\")\n-source \"$dir/config.sh\"\n-\n-# read nightly compiler from rust-toolchain file\n-TOOLCHAIN=$(cat \"$dir/rust-toolchain\" | grep channel | sed \"s/channel = \\\"\\(.*\\)\\\"/\\1/\")\n-\n-cmd=$1\n-shift || true\n-\n-if [[ \"$cmd\" = \"jit\" ]]; then\n-RUSTFLAGS=\"-Cprefer-dynamic\" cargo \"+${TOOLCHAIN}\" rustc \"$@\" -- -Cllvm-args=mode=jit\n-elif [[ \"$cmd\" = \"lazy-jit\" ]]; then\n-RUSTFLAGS=\"-Cprefer-dynamic\" cargo \"+${TOOLCHAIN}\" rustc \"$@\" -- -Cllvm-args=mode=jit-lazy\n-else\n-cargo \"+${TOOLCHAIN}\" \"$cmd\" \"$@\"\n-fi"}, {"sha": "cf325ab574e1525a4880654e95832c5032298328", "filename": "scripts/config.sh", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/80e9188fb1a404427513e080b8a27ac262769614/scripts%2Fconfig.sh", "raw_url": "https://github.com/rust-lang/rust/raw/80e9188fb1a404427513e080b8a27ac262769614/scripts%2Fconfig.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Fconfig.sh?ref=80e9188fb1a404427513e080b8a27ac262769614", "patch": "@@ -2,21 +2,6 @@\n \n set -e\n \n-dylib=$(echo \"\" | rustc --print file-names --crate-type dylib --crate-name rustc_codegen_cranelift -)\n-\n-if echo \"$RUSTC_WRAPPER\" | grep sccache; then\n-echo\n-echo -e \"\\x1b[1;93m=== Warning: Unset RUSTC_WRAPPER to prevent interference with sccache ===\\x1b[0m\"\n-echo\n-export RUSTC_WRAPPER=\n-fi\n-\n-dir=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\"; pwd)\n-\n-export RUSTC=$dir\"/bin/cg_clif\"\n-\n-export RUSTDOCFLAGS=$linker' -Cpanic=abort -Zpanic-abort-tests '\\\n-'-Zcodegen-backend='$dir'/lib/'$dylib' --sysroot '$dir\n-\n+dir=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")/../build\"; pwd)\n export LD_LIBRARY_PATH=\"$(rustc --print sysroot)/lib:\"$dir\"/lib\"\n export DYLD_LIBRARY_PATH=$LD_LIBRARY_PATH"}, {"sha": "11d6c4c83186743f2751a2403c2996eab66746be", "filename": "scripts/ext_config.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80e9188fb1a404427513e080b8a27ac262769614/scripts%2Fext_config.sh", "raw_url": "https://github.com/rust-lang/rust/raw/80e9188fb1a404427513e080b8a27ac262769614/scripts%2Fext_config.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Fext_config.sh?ref=80e9188fb1a404427513e080b8a27ac262769614", "patch": "@@ -1,6 +1,6 @@\n # Note to people running shellcheck: this file should only be sourced, not executed directly.\n \n-# Various env vars that should only be set for the build system but not for cargo.sh\n+# Various env vars that should only be set for the build system\n \n set -e\n "}, {"sha": "9e196afbe4f57c38b36576fb9621f4cee56373b5", "filename": "scripts/filter_profile.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/80e9188fb1a404427513e080b8a27ac262769614/scripts%2Ffilter_profile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e9188fb1a404427513e080b8a27ac262769614/scripts%2Ffilter_profile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Ffilter_profile.rs?ref=80e9188fb1a404427513e080b8a27ac262769614", "patch": "@@ -2,9 +2,10 @@\n #![forbid(unsafe_code)]/* This line is ignored by bash\n # This block is ignored by rustc\n pushd $(dirname \"$0\")/../\n-source build/config.sh\n+source scripts/config.sh\n+RUSTC=\"$(pwd)/build/bin/cg_clif\"\n popd\n-PROFILE=$1 OUTPUT=$2 exec $RUSTC $RUSTFLAGS -Cllvm-args=mode=jit -Cprefer-dynamic $0\n+PROFILE=$1 OUTPUT=$2 exec $RUSTC -Cllvm-args=mode=jit -Cprefer-dynamic $0\n #*/\n \n //! This program filters away uninteresting samples and trims uninteresting frames for stackcollapse"}, {"sha": "52adaaa8de673d3661903b9353ed96ec1bbbb5dc", "filename": "scripts/setup_rust_fork.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80e9188fb1a404427513e080b8a27ac262769614/scripts%2Fsetup_rust_fork.sh", "raw_url": "https://github.com/rust-lang/rust/raw/80e9188fb1a404427513e080b8a27ac262769614/scripts%2Fsetup_rust_fork.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Fsetup_rust_fork.sh?ref=80e9188fb1a404427513e080b8a27ac262769614", "patch": "@@ -2,7 +2,7 @@\n set -e\n \n ./y.rs build\n-source build/config.sh\n+source scripts/config.sh\n \n echo \"[SETUP] Rust fork\"\n git clone https://github.com/rust-lang/rust.git || true"}, {"sha": "c875aad2849134a51d7af6234b0e18890b2e0a30", "filename": "scripts/tests.sh", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/80e9188fb1a404427513e080b8a27ac262769614/scripts%2Ftests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/80e9188fb1a404427513e080b8a27ac262769614/scripts%2Ftests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Ftests.sh?ref=80e9188fb1a404427513e080b8a27ac262769614", "patch": "@@ -2,9 +2,10 @@\n \n set -e\n \n-source build/config.sh\n+source scripts/config.sh\n source scripts/ext_config.sh\n-MY_RUSTC=\"$RUSTC $RUSTFLAGS -L crate=target/out --out-dir target/out -Cdebuginfo=2\"\n+export RUSTC=false # ensure that cg_llvm isn't accidentally used\n+MY_RUSTC=\"$(pwd)/build/bin/cg_clif $RUSTFLAGS -L crate=target/out --out-dir target/out -Cdebuginfo=2\"\n \n function no_sysroot_tests() {\n     echo \"[BUILD] mini_core\"\n@@ -75,64 +76,64 @@ function base_sysroot_tests() {\n \n function extended_sysroot_tests() {\n     pushd rand\n-    cargo clean\n+    ../build/cargo clean\n     if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n         echo \"[TEST] rust-random/rand\"\n-        ../build/cargo.sh test --workspace\n+        ../build/cargo test --workspace\n     else\n         echo \"[AOT] rust-random/rand\"\n-        ../build/cargo.sh build --workspace --target $TARGET_TRIPLE --tests\n+        ../build/cargo build --workspace --target $TARGET_TRIPLE --tests\n     fi\n     popd\n \n     pushd simple-raytracer\n     if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n         echo \"[BENCH COMPILE] ebobby/simple-raytracer\"\n-        hyperfine --runs \"${RUN_RUNS:-10}\" --warmup 1 --prepare \"cargo clean\" \\\n+        hyperfine --runs \"${RUN_RUNS:-10}\" --warmup 1 --prepare \"../build/cargo clean\" \\\n         \"RUSTC=rustc RUSTFLAGS='' cargo build\" \\\n-        \"../build/cargo.sh build\"\n+        \"../build/cargo build\"\n \n         echo \"[BENCH RUN] ebobby/simple-raytracer\"\n         cp ./target/debug/main ./raytracer_cg_clif\n         hyperfine --runs \"${RUN_RUNS:-10}\" ./raytracer_cg_llvm ./raytracer_cg_clif\n     else\n-        cargo clean\n+        ../build/cargo clean\n         echo \"[BENCH COMPILE] ebobby/simple-raytracer (skipped)\"\n         echo \"[COMPILE] ebobby/simple-raytracer\"\n-        ../build/cargo.sh build --target $TARGET_TRIPLE\n+        ../build/cargo build --target $TARGET_TRIPLE\n         echo \"[BENCH RUN] ebobby/simple-raytracer (skipped)\"\n     fi\n     popd\n \n     pushd build_sysroot/sysroot_src/library/core/tests\n     echo \"[TEST] libcore\"\n-    cargo clean\n+    ../../../../../build/cargo clean\n     if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n-        ../../../../../build/cargo.sh test\n+        ../../../../../build/cargo test\n     else\n-        ../../../../../build/cargo.sh build --target $TARGET_TRIPLE --tests\n+        ../../../../../build/cargo build --target $TARGET_TRIPLE --tests\n     fi\n     popd\n \n     pushd regex\n     echo \"[TEST] rust-lang/regex example shootout-regex-dna\"\n-    cargo clean\n+    ../build/cargo clean\n     export RUSTFLAGS=\"$RUSTFLAGS --cap-lints warn\" # newer aho_corasick versions throw a deprecation warning\n     # Make sure `[codegen mono items] start` doesn't poison the diff\n-    ../build/cargo.sh build --example shootout-regex-dna --target $TARGET_TRIPLE\n+    ../build/cargo build --example shootout-regex-dna --target $TARGET_TRIPLE\n     if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n         cat examples/regexdna-input.txt \\\n-            | ../build/cargo.sh run --example shootout-regex-dna --target $TARGET_TRIPLE \\\n+            | ../build/cargo run --example shootout-regex-dna --target $TARGET_TRIPLE \\\n             | grep -v \"Spawned thread\" > res.txt\n         diff -u res.txt examples/regexdna-output.txt\n     fi\n \n     if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n         echo \"[TEST] rust-lang/regex tests\"\n-        ../build/cargo.sh test --tests -- --exclude-should-panic --test-threads 1 -Zunstable-options -q\n+        ../build/cargo test --tests -- --exclude-should-panic --test-threads 1 -Zunstable-options -q\n     else\n         echo \"[AOT] rust-lang/regex tests\"\n-        ../build/cargo.sh build --tests --target $TARGET_TRIPLE\n+        ../build/cargo build --tests --target $TARGET_TRIPLE\n     fi\n     popd\n }"}]}