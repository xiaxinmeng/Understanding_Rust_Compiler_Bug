{"sha": "ba483c51dfc1d17c75dc4502397ad92c78a53e77", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhNDgzYzUxZGZjMWQxN2M3NWRjNDUwMjM5N2FkOTJjNzhhNTNlNzc=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-07T18:38:25Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-16T04:19:00Z"}, "message": "Take sys/vxworks/args from sys/unix instead.", "tree": {"sha": "172c36a4cb3cafb490cda0a1542bfaa4a0bbba57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/172c36a4cb3cafb490cda0a1542bfaa4a0bbba57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba483c51dfc1d17c75dc4502397ad92c78a53e77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba483c51dfc1d17c75dc4502397ad92c78a53e77", "html_url": "https://github.com/rust-lang/rust/commit/ba483c51dfc1d17c75dc4502397ad92c78a53e77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba483c51dfc1d17c75dc4502397ad92c78a53e77/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08bcaac0913a8efe0a6b21255d9c850dc1229894", "url": "https://api.github.com/repos/rust-lang/rust/commits/08bcaac0913a8efe0a6b21255d9c850dc1229894", "html_url": "https://github.com/rust-lang/rust/commit/08bcaac0913a8efe0a6b21255d9c850dc1229894"}], "stats": {"total": 99, "additions": 3, "deletions": 96}, "files": [{"sha": "69676472493909b72be73204bc05a7262e595815", "filename": "library/std/src/sys/unix/args.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba483c51dfc1d17c75dc4502397ad92c78a53e77/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba483c51dfc1d17c75dc4502397ad92c78a53e77/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs?ref=ba483c51dfc1d17c75dc4502397ad92c78a53e77", "patch": "@@ -70,7 +70,8 @@ impl DoubleEndedIterator for Args {\n     target_os = \"haiku\",\n     target_os = \"l4re\",\n     target_os = \"fuchsia\",\n-    target_os = \"redox\"\n+    target_os = \"redox\",\n+    target_os = \"vxworks\"\n ))]\n mod imp {\n     use super::Args;"}, {"sha": "30cf7a707c7af9e08d53ec1e6719d98f837ab357", "filename": "library/std/src/sys/vxworks/args.rs", "status": "removed", "additions": 0, "deletions": 95, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/08bcaac0913a8efe0a6b21255d9c850dc1229894/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08bcaac0913a8efe0a6b21255d9c850dc1229894/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fargs.rs?ref=08bcaac0913a8efe0a6b21255d9c850dc1229894", "patch": "@@ -1,95 +0,0 @@\n-#![allow(dead_code)] // runtime init functions not used during testing\n-use crate::ffi::OsString;\n-use crate::marker::PhantomData;\n-use crate::vec;\n-\n-/// One-time global initialization.\n-pub unsafe fn init(argc: isize, argv: *const *const u8) {\n-    imp::init(argc, argv)\n-}\n-\n-/// One-time global cleanup.\n-pub unsafe fn cleanup() {\n-    imp::cleanup()\n-}\n-\n-/// Returns the command line arguments\n-pub fn args() -> Args {\n-    imp::args()\n-}\n-\n-pub struct Args {\n-    iter: vec::IntoIter<OsString>,\n-    _dont_send_or_sync_me: PhantomData<*mut ()>,\n-}\n-\n-impl Args {\n-    pub fn inner_debug(&self) -> &[OsString] {\n-        self.iter.as_slice()\n-    }\n-}\n-\n-impl Iterator for Args {\n-    type Item = OsString;\n-    fn next(&mut self) -> Option<OsString> {\n-        self.iter.next()\n-    }\n-    fn size_hint(&self) -> (usize, Option<usize>) {\n-        self.iter.size_hint()\n-    }\n-}\n-\n-impl ExactSizeIterator for Args {\n-    fn len(&self) -> usize {\n-        self.iter.len()\n-    }\n-}\n-\n-impl DoubleEndedIterator for Args {\n-    fn next_back(&mut self) -> Option<OsString> {\n-        self.iter.next_back()\n-    }\n-}\n-\n-mod imp {\n-    use super::Args;\n-    use crate::ffi::{CStr, OsString};\n-    use crate::marker::PhantomData;\n-    use crate::ptr;\n-\n-    use crate::sys_common::mutex::StaticMutex;\n-\n-    static mut ARGC: isize = 0;\n-    static mut ARGV: *const *const u8 = ptr::null();\n-    static LOCK: StaticMutex = StaticMutex::new();\n-\n-    pub unsafe fn init(argc: isize, argv: *const *const u8) {\n-        let _guard = LOCK.lock();\n-        ARGC = argc;\n-        ARGV = argv;\n-    }\n-\n-    pub unsafe fn cleanup() {\n-        let _guard = LOCK.lock();\n-        ARGC = 0;\n-        ARGV = ptr::null();\n-    }\n-\n-    pub fn args() -> Args {\n-        Args { iter: clone().into_iter(), _dont_send_or_sync_me: PhantomData }\n-    }\n-\n-    fn clone() -> Vec<OsString> {\n-        unsafe {\n-            let _guard = LOCK.lock();\n-            let ret = (0..ARGC)\n-                .map(|i| {\n-                    let cstr = CStr::from_ptr(*ARGV.offset(i) as *const libc::c_char);\n-                    use crate::sys::vxworks::ext::ffi::OsStringExt;\n-                    OsStringExt::from_vec(cstr.to_bytes().to_vec())\n-                })\n-                .collect();\n-            return ret;\n-        }\n-    }\n-}"}, {"sha": "f4a811074ca25eba0ce32cc42146739e833a88a0", "filename": "library/std/src/sys/vxworks/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba483c51dfc1d17c75dc4502397ad92c78a53e77/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba483c51dfc1d17c75dc4502397ad92c78a53e77/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fmod.rs?ref=ba483c51dfc1d17c75dc4502397ad92c78a53e77", "patch": "@@ -13,6 +13,7 @@ pub mod weak;\n \n #[path = \"../unix/alloc.rs\"]\n pub mod alloc;\n+#[path = \"../unix/args.rs\"]\n pub mod args;\n pub mod cmath;\n #[path = \"../unix/condvar.rs\"]"}]}