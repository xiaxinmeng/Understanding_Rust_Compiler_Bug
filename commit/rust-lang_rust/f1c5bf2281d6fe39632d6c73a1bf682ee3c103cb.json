{"sha": "f1c5bf2281d6fe39632d6c73a1bf682ee3c103cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxYzViZjIyODFkNmZlMzk2MzJkNmM3M2ExYmY2ODJlZTNjMTAzY2I=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-29T13:58:26Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-29T13:58:26Z"}, "message": "fix intrinsics and implement more of them", "tree": {"sha": "76ba94d97435733c834430be3d86b46afd3e1d5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76ba94d97435733c834430be3d86b46afd3e1d5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1c5bf2281d6fe39632d6c73a1bf682ee3c103cb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJX7R4CAAoJEFbW7qD8Z6xGxdwP/RT3dUP1Ax7+vMF3wAdoXuY4\nQrVCeuxe2qq3tomE+hUUOliU99zFlJ8y1TGeTgPFYZnAR7c7I+Bliw2IHV06qgX8\nXdqhYHbW1JTUwvcALDBu3vWP3YNaEMIQG/UwSJczFJWmDnCJ/oHJHpJHj9YwdGae\nRUN2aR3QGmLedgenlXKSnBUgQ5sIpwFOLv/WIp4s3zqdmcMaP1beezTMF/EH6+CK\nJ+zWzt2cwju9qtnxRAUjql8Q011wbsq8QATgau8dBn9Y16LnWds18ZOFNfKMlcz+\nDyPZUD5BHCwA4cMXUN++WYU/jY+uYtPtzJPGEBbQ4dXbArfXjJWZK6NzE7jKJ8OK\nPXwXrJb09f2pxUcYBvmzJ6ATlOZvl9k85pSwXM6umjWQVrmd0aawpchozvoOsCLx\n9EbqOZKq9tQNCgpoUkBTy1QfRBrMzZb/LzKbuR33EIqKKaAaI1SDLz1UatuOPXax\nbmjMVj7XitIoB+uICPJNy111CaSWp7dv2rggoO8OcVdgFnTEwRWTw58+5rdh8DVP\ndvp3nPuyFfZ8BzpInz7le7JuKLTZGOkkUI5VKRCE13gl4aD/kGoaIXszx7FoIRCa\nAfu3NYa4shgxFyORNa42tZZPIYBB39BBN7vkscNispAEfLKNX+c6EmpZ8on6T1fn\nNouI/Lgvny/HXKY2wRtE\n=53eC\n-----END PGP SIGNATURE-----", "payload": "tree 76ba94d97435733c834430be3d86b46afd3e1d5d\nparent 2080faefa9a15a69289f5124b861a9376e35b762\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1475157506 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1475157506 +0200\n\nfix intrinsics and implement more of them"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1c5bf2281d6fe39632d6c73a1bf682ee3c103cb", "html_url": "https://github.com/rust-lang/rust/commit/f1c5bf2281d6fe39632d6c73a1bf682ee3c103cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1c5bf2281d6fe39632d6c73a1bf682ee3c103cb/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2080faefa9a15a69289f5124b861a9376e35b762", "url": "https://api.github.com/repos/rust-lang/rust/commits/2080faefa9a15a69289f5124b861a9376e35b762", "html_url": "https://github.com/rust-lang/rust/commit/2080faefa9a15a69289f5124b861a9376e35b762"}], "stats": {"total": 157, "additions": 154, "deletions": 3}, "files": [{"sha": "f07688202ef703bdf6bf710cd820392d1ec6a421", "filename": "src/interpreter/terminator/intrinsics.rs", "status": "modified", "additions": 49, "deletions": 3, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/f1c5bf2281d6fe39632d6c73a1bf682ee3c103cb/src%2Finterpreter%2Fterminator%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1c5bf2281d6fe39632d6c73a1bf682ee3c103cb/src%2Finterpreter%2Fterminator%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator%2Fintrinsics.rs?ref=f1c5bf2281d6fe39632d6c73a1bf682ee3c103cb", "patch": "@@ -67,15 +67,61 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             \"ctpop\" => {\n                 let elem_ty = substs.type_at(0);\n                 let elem_size = self.type_size(elem_ty);\n-                let num = self.value_to_primval(args_ptrs[2], elem_ty)?.expect_int(\"ctpop second arg not integral\");\n-                let num = num.count_ones();\n+                let num = self.value_to_primval(args_ptrs[0], elem_ty)?;\n+                let num = match num {\n+                    PrimVal::I8(i) => i.count_ones(),\n+                    PrimVal::U8(i) => i.count_ones(),\n+                    PrimVal::I16(i) => i.count_ones(),\n+                    PrimVal::U16(i) => i.count_ones(),\n+                    PrimVal::I32(i) => i.count_ones(),\n+                    PrimVal::U32(i) => i.count_ones(),\n+                    PrimVal::I64(i) => i.count_ones(),\n+                    PrimVal::U64(i) => i.count_ones(),\n+                    _ => bug!(\"ctpop called with non-integer type\"),\n+                };\n+                self.memory.write_uint(dest, num.into(), elem_size)?;\n+            }\n+\n+            \"bswap\" => {\n+                let elem_ty = substs.type_at(0);\n+                let elem_size = self.type_size(elem_ty);\n+                let num = self.value_to_primval(args_ptrs[0], elem_ty)?;\n+                let num = match num {\n+                    PrimVal::I8(i) => i.swap_bytes() as u64,\n+                    PrimVal::U8(i) => i.swap_bytes() as u64,\n+                    PrimVal::I16(i) => i.swap_bytes() as u64,\n+                    PrimVal::U16(i) => i.swap_bytes() as u64,\n+                    PrimVal::I32(i) => i.swap_bytes() as u64,\n+                    PrimVal::U32(i) => i.swap_bytes() as u64,\n+                    PrimVal::I64(i) => i.swap_bytes() as u64,\n+                    PrimVal::U64(i) => i.swap_bytes(),\n+                    _ => bug!(\"bswap called with non-integer type\"),\n+                };\n+                self.memory.write_uint(dest, num, elem_size)?;\n+            }\n+\n+            \"cttz\" => {\n+                let elem_ty = substs.type_at(0);\n+                let elem_size = self.type_size(elem_ty);\n+                let num = self.value_to_primval(args_ptrs[0], elem_ty)?;\n+                let num = match num {\n+                    PrimVal::I8(i) => i.trailing_zeros(),\n+                    PrimVal::U8(i) => i.trailing_zeros(),\n+                    PrimVal::I16(i) => i.trailing_zeros(),\n+                    PrimVal::U16(i) => i.trailing_zeros(),\n+                    PrimVal::I32(i) => i.trailing_zeros(),\n+                    PrimVal::U32(i) => i.trailing_zeros(),\n+                    PrimVal::I64(i) => i.trailing_zeros(),\n+                    PrimVal::U64(i) => i.trailing_zeros(),\n+                    _ => bug!(\"cttz called with non-integer type\"),\n+                };\n                 self.memory.write_uint(dest, num.into(), elem_size)?;\n             }\n \n             \"ctlz\" => {\n                 let elem_ty = substs.type_at(0);\n                 let elem_size = self.type_size(elem_ty);\n-                let num = self.value_to_primval(args_ptrs[2], elem_ty)?;\n+                let num = self.value_to_primval(args_ptrs[0], elem_ty)?;\n                 let num = match num {\n                     PrimVal::I8(i) => i.leading_zeros(),\n                     PrimVal::U8(i) => i.leading_zeros(),"}, {"sha": "759dc515456de1784a2421661821f348a7b4a16d", "filename": "tests/run-pass/intrinsics-integer.rs", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/f1c5bf2281d6fe39632d6c73a1bf682ee3c103cb/tests%2Frun-pass%2Fintrinsics-integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1c5bf2281d6fe39632d6c73a1bf682ee3c103cb/tests%2Frun-pass%2Fintrinsics-integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fintrinsics-integer.rs?ref=f1c5bf2281d6fe39632d6c73a1bf682ee3c103cb", "patch": "@@ -0,0 +1,105 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(intrinsics)]\n+\n+mod rusti {\n+    extern \"rust-intrinsic\" {\n+        pub fn ctpop<T>(x: T) -> T;\n+        pub fn ctlz<T>(x: T) -> T;\n+        pub fn cttz<T>(x: T) -> T;\n+        pub fn bswap<T>(x: T) -> T;\n+    }\n+}\n+\n+pub fn main() {\n+    unsafe {\n+        use rusti::*;\n+\n+        assert_eq!(ctpop(0u8), 0); assert_eq!(ctpop(0i8), 0);\n+        assert_eq!(ctpop(0u16), 0); assert_eq!(ctpop(0i16), 0);\n+        assert_eq!(ctpop(0u32), 0); assert_eq!(ctpop(0i32), 0);\n+        assert_eq!(ctpop(0u64), 0); assert_eq!(ctpop(0i64), 0);\n+\n+        assert_eq!(ctpop(1u8), 1); assert_eq!(ctpop(1i8), 1);\n+        assert_eq!(ctpop(1u16), 1); assert_eq!(ctpop(1i16), 1);\n+        assert_eq!(ctpop(1u32), 1); assert_eq!(ctpop(1i32), 1);\n+        assert_eq!(ctpop(1u64), 1); assert_eq!(ctpop(1i64), 1);\n+\n+        assert_eq!(ctpop(10u8), 2); assert_eq!(ctpop(10i8), 2);\n+        assert_eq!(ctpop(10u16), 2); assert_eq!(ctpop(10i16), 2);\n+        assert_eq!(ctpop(10u32), 2); assert_eq!(ctpop(10i32), 2);\n+        assert_eq!(ctpop(10u64), 2); assert_eq!(ctpop(10i64), 2);\n+\n+        assert_eq!(ctpop(100u8), 3); assert_eq!(ctpop(100i8), 3);\n+        assert_eq!(ctpop(100u16), 3); assert_eq!(ctpop(100i16), 3);\n+        assert_eq!(ctpop(100u32), 3); assert_eq!(ctpop(100i32), 3);\n+        assert_eq!(ctpop(100u64), 3); assert_eq!(ctpop(100i64), 3);\n+\n+        assert_eq!(ctpop(-1i8 as u8), 8); assert_eq!(ctpop(-1i8), 8);\n+        assert_eq!(ctpop(-1i16 as u16), 16); assert_eq!(ctpop(-1i16), 16);\n+        assert_eq!(ctpop(-1i32 as u32), 32); assert_eq!(ctpop(-1i32), 32);\n+        assert_eq!(ctpop(-1i64 as u64), 64); assert_eq!(ctpop(-1i64), 64);\n+\n+        assert_eq!(ctlz(0u8), 8); assert_eq!(ctlz(0i8), 8);\n+        assert_eq!(ctlz(0u16), 16); assert_eq!(ctlz(0i16), 16);\n+        assert_eq!(ctlz(0u32), 32); assert_eq!(ctlz(0i32), 32);\n+        assert_eq!(ctlz(0u64), 64); assert_eq!(ctlz(0i64), 64);\n+\n+        assert_eq!(ctlz(1u8), 7); assert_eq!(ctlz(1i8), 7);\n+        assert_eq!(ctlz(1u16), 15); assert_eq!(ctlz(1i16), 15);\n+        assert_eq!(ctlz(1u32), 31); assert_eq!(ctlz(1i32), 31);\n+        assert_eq!(ctlz(1u64), 63); assert_eq!(ctlz(1i64), 63);\n+\n+        assert_eq!(ctlz(10u8), 4); assert_eq!(ctlz(10i8), 4);\n+        assert_eq!(ctlz(10u16), 12); assert_eq!(ctlz(10i16), 12);\n+        assert_eq!(ctlz(10u32), 28); assert_eq!(ctlz(10i32), 28);\n+        assert_eq!(ctlz(10u64), 60); assert_eq!(ctlz(10i64), 60);\n+\n+        assert_eq!(ctlz(100u8), 1); assert_eq!(ctlz(100i8), 1);\n+        assert_eq!(ctlz(100u16), 9); assert_eq!(ctlz(100i16), 9);\n+        assert_eq!(ctlz(100u32), 25); assert_eq!(ctlz(100i32), 25);\n+        assert_eq!(ctlz(100u64), 57); assert_eq!(ctlz(100i64), 57);\n+\n+        assert_eq!(cttz(-1i8 as u8), 0); assert_eq!(cttz(-1i8), 0);\n+        assert_eq!(cttz(-1i16 as u16), 0); assert_eq!(cttz(-1i16), 0);\n+        assert_eq!(cttz(-1i32 as u32), 0); assert_eq!(cttz(-1i32), 0);\n+        assert_eq!(cttz(-1i64 as u64), 0); assert_eq!(cttz(-1i64), 0);\n+\n+        assert_eq!(cttz(0u8), 8); assert_eq!(cttz(0i8), 8);\n+        assert_eq!(cttz(0u16), 16); assert_eq!(cttz(0i16), 16);\n+        assert_eq!(cttz(0u32), 32); assert_eq!(cttz(0i32), 32);\n+        assert_eq!(cttz(0u64), 64); assert_eq!(cttz(0i64), 64);\n+\n+        assert_eq!(cttz(1u8), 0); assert_eq!(cttz(1i8), 0);\n+        assert_eq!(cttz(1u16), 0); assert_eq!(cttz(1i16), 0);\n+        assert_eq!(cttz(1u32), 0); assert_eq!(cttz(1i32), 0);\n+        assert_eq!(cttz(1u64), 0); assert_eq!(cttz(1i64), 0);\n+\n+        assert_eq!(cttz(10u8), 1); assert_eq!(cttz(10i8), 1);\n+        assert_eq!(cttz(10u16), 1); assert_eq!(cttz(10i16), 1);\n+        assert_eq!(cttz(10u32), 1); assert_eq!(cttz(10i32), 1);\n+        assert_eq!(cttz(10u64), 1); assert_eq!(cttz(10i64), 1);\n+\n+        assert_eq!(cttz(100u8), 2); assert_eq!(cttz(100i8), 2);\n+        assert_eq!(cttz(100u16), 2); assert_eq!(cttz(100i16), 2);\n+        assert_eq!(cttz(100u32), 2); assert_eq!(cttz(100i32), 2);\n+        assert_eq!(cttz(100u64), 2); assert_eq!(cttz(100i64), 2);\n+\n+        assert_eq!(bswap(0x0Au8), 0x0A); // no-op\n+        assert_eq!(bswap(0x0Ai8), 0x0A); // no-op\n+        assert_eq!(bswap(0x0A0Bu16), 0x0B0A);\n+        assert_eq!(bswap(0x0A0Bi16), 0x0B0A);\n+        assert_eq!(bswap(0x0ABBCC0Du32), 0x0DCCBB0A);\n+        assert_eq!(bswap(0x0ABBCC0Di32), 0x0DCCBB0A);\n+        assert_eq!(bswap(0x0122334455667708u64), 0x0877665544332201);\n+        assert_eq!(bswap(0x0122334455667708i64), 0x0877665544332201);\n+    }\n+}"}]}