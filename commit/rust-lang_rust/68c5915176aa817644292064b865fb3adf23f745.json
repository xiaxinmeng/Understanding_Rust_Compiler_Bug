{"sha": "68c5915176aa817644292064b865fb3adf23f745", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4YzU5MTUxNzZhYTgxNzY0NDI5MjA2NGI4NjVmYjNhZGYyM2Y3NDU=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-04-19T13:48:45Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-05-01T06:57:08Z"}, "message": "Remove TODO from 'rewrite_generics'", "tree": {"sha": "77349d557ac3e8cfee61d8342a1ed16dafd7fafd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77349d557ac3e8cfee61d8342a1ed16dafd7fafd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68c5915176aa817644292064b865fb3adf23f745", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68c5915176aa817644292064b865fb3adf23f745", "html_url": "https://github.com/rust-lang/rust/commit/68c5915176aa817644292064b865fb3adf23f745", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68c5915176aa817644292064b865fb3adf23f745/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "883db2f95268f24613ac50cf9aea7f8d24e10275", "url": "https://api.github.com/repos/rust-lang/rust/commits/883db2f95268f24613ac50cf9aea7f8d24e10275", "html_url": "https://github.com/rust-lang/rust/commit/883db2f95268f24613ac50cf9aea7f8d24e10275"}], "stats": {"total": 76, "additions": 30, "deletions": 46}, "files": [{"sha": "01758bb9a75513319d3488b9cf174e769023347b", "filename": "src/items.rs", "status": "modified", "additions": 30, "deletions": 46, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/68c5915176aa817644292064b865fb3adf23f745/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68c5915176aa817644292064b865fb3adf23f745/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=68c5915176aa817644292064b865fb3adf23f745", "patch": "@@ -38,7 +38,8 @@ impl Rewrite for ast::Local {\n                shape.indent);\n         let mut result = \"let \".to_owned();\n \n-        let pat_shape = try_opt!(shape.offset_left(result.len()));\n+        // 4 = \"let \".len()\n+        let pat_shape = try_opt!(shape.offset_left(4));\n         // 1 = ;\n         let pat_shape = try_opt!(pat_shape.sub_width(1));\n         let pat_str = try_opt!(self.pat.rewrite(&context, pat_shape));\n@@ -70,7 +71,6 @@ impl Rewrite for ast::Local {\n \n         if let Some(ref ex) = self.init {\n             // 1 = trailing semicolon;\n-            //let budget = try_opt!(shape.width.checked_sub(shape.indent.block_only().width() + 1));\n             let nested_shape = try_opt!(shape.sub_width(1));\n \n             result = try_opt!(rewrite_assign_rhs(&context, result, ex, nested_shape));\n@@ -380,7 +380,6 @@ impl<'a> FmtVisitor<'a> {\n                                            self.config.item_brace_style,\n                                            enum_def.variants.is_empty(),\n                                            self.block_indent,\n-                                           self.block_indent.block_indent(self.config),\n                                            mk_sp(span.lo, body_start))\n                 .unwrap();\n         self.buffer.push_str(&generics_str);\n@@ -644,12 +643,9 @@ fn format_impl_ref_and_type(context: &RewriteContext,\n             Some(ref tr) => tr.path.span.lo,\n             None => self_ty.span.lo,\n         };\n-        let generics_str = try_opt!(rewrite_generics(context,\n-                                                     generics,\n-                                                     Shape::legacy(context.config.max_width,\n-                                                                   offset),\n-                                                     offset + result.len(),\n-                                                     mk_sp(lo, hi)));\n+        let generics_indent = offset + last_line_width(&result);\n+        let shape = try_opt!(generics_shape(context.config, generics_indent));\n+        let generics_str = try_opt!(rewrite_generics(context, generics, shape, mk_sp(lo, hi)));\n         result.push_str(&generics_str);\n \n         if polarity == ast::ImplPolarity::Negative {\n@@ -759,12 +755,10 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n \n         let body_lo = context.codemap.span_after(item.span, \"{\");\n \n-        let generics_str = try_opt!(rewrite_generics(context,\n-                                                     generics,\n-                                                     Shape::legacy(context.config.max_width,\n-                                                                   offset),\n-                                                     offset + result.len(),\n-                                                     mk_sp(item.span.lo, body_lo)));\n+        let generics_indent = offset + last_line_width(&result);\n+        let shape = try_opt!(generics_shape(context.config, generics_indent));\n+        let generics_str =\n+            try_opt!(rewrite_generics(context, generics, shape, mk_sp(item.span.lo, body_lo)));\n         result.push_str(&generics_str);\n \n         let trait_bound_str =\n@@ -902,7 +896,6 @@ fn format_struct_struct(context: &RewriteContext,\n                                      context.config.item_brace_style,\n                                      fields.is_empty(),\n                                      offset,\n-                                     offset + header_str.len(),\n                                      mk_sp(span.lo, body_lo)))\n         }\n         None => {\n@@ -1011,12 +1004,10 @@ fn format_tuple_struct(context: &RewriteContext,\n \n     let where_clause_str = match generics {\n         Some(generics) => {\n-            let generics_str = try_opt!(rewrite_generics(context,\n-                                                         generics,\n-                                                         Shape::legacy(context.config.max_width,\n-                                                                       offset),\n-                                                         offset + header_str.len(),\n-                                                         mk_sp(span.lo, body_lo)));\n+            let generics_indent = offset + last_line_width(&header_str);\n+            let shape = try_opt!(generics_shape(context.config, generics_indent));\n+            let generics_str =\n+                try_opt!(rewrite_generics(context, generics, shape, mk_sp(span.lo, body_lo)));\n             result.push_str(&generics_str);\n \n             let where_budget = try_opt!(context\n@@ -1130,12 +1121,9 @@ pub fn rewrite_type_alias(context: &RewriteContext,\n \n     let generics_indent = indent + result.len();\n     let generics_span = mk_sp(context.codemap.span_after(span, \"type\"), ty.span.lo);\n-    let generics_width = context.config.max_width - \" =\".len();\n-    let generics_str = try_opt!(rewrite_generics(context,\n-                                                 generics,\n-                                                 Shape::legacy(generics_width, indent),\n-                                                 generics_indent,\n-                                                 generics_span));\n+    let shape = try_opt!(try_opt!(generics_shape(context.config, generics_indent))\n+                             .sub_width(\" =\".len()));\n+    let generics_str = try_opt!(rewrite_generics(context, generics, shape, generics_span));\n \n     result.push_str(&generics_str);\n \n@@ -1551,13 +1539,10 @@ fn rewrite_fn_base(context: &RewriteContext,\n     result.push_str(&ident.to_string());\n \n     // Generics.\n-    let generics_indent = indent + result.len();\n+    let generics_indent = indent + last_line_width(&result);\n     let generics_span = mk_sp(span.lo, span_for_return(&fd.output).lo);\n-    let generics_str = try_opt!(rewrite_generics(context,\n-                                                 generics,\n-                                                 Shape::legacy(context.config.max_width, indent),\n-                                                 generics_indent,\n-                                                 generics_span));\n+    let shape = try_opt!(generics_shape(context.config, generics_indent));\n+    let generics_str = try_opt!(rewrite_generics(context, generics, shape, generics_span));\n     result.push_str(&generics_str);\n \n     let snuggle_angle_bracket = last_line_width(&generics_str) == 1;\n@@ -1964,8 +1949,6 @@ fn newline_for_brace(config: &Config, where_clause: &ast::WhereClause) -> bool {\n fn rewrite_generics(context: &RewriteContext,\n                     generics: &ast::Generics,\n                     shape: Shape,\n-                    // TODO shouldn't need this\n-                    generics_offset: Indent,\n                     span: Span)\n                     -> Option<String> {\n     // FIXME: convert bounds to where clauses where they get too big or if\n@@ -1977,12 +1960,12 @@ fn rewrite_generics(context: &RewriteContext,\n     }\n \n     let offset = match context.config.generics_indent {\n-        IndentStyle::Block => shape.indent.block_indent(context.config),\n+        IndentStyle::Block => shape.indent.block_only().block_indent(context.config),\n         // 1 = <\n-        IndentStyle::Visual => generics_offset + 1,\n+        IndentStyle::Visual => shape.indent + 1,\n     };\n \n-    let h_budget = try_opt!(shape.width.checked_sub(generics_offset.width() + 2));\n+    let h_budget = try_opt!(shape.width.checked_sub(2));\n     // FIXME: might need to insert a newline if the generics are really long.\n \n     // Strings for the generics.\n@@ -2022,7 +2005,7 @@ fn rewrite_generics(context: &RewriteContext,\n         format!(\"<\\n{}{}\\n{}>\",\n                 offset.to_string(context.config),\n                 list_str,\n-                shape.indent.to_string(context.config))\n+                shape.indent.block_only().to_string(context.config))\n     } else if context.config.spaces_within_angle_brackets {\n         format!(\"< {} >\", list_str)\n     } else {\n@@ -2224,14 +2207,10 @@ fn format_generics(context: &RewriteContext,\n                    brace_style: BraceStyle,\n                    force_same_line_brace: bool,\n                    offset: Indent,\n-                   generics_offset: Indent,\n                    span: Span)\n                    -> Option<String> {\n-    let mut result = try_opt!(rewrite_generics(context,\n-                                               generics,\n-                                               Shape::legacy(context.config.max_width, offset),\n-                                               generics_offset,\n-                                               span));\n+    let shape = try_opt!(generics_shape(context.config, offset));\n+    let mut result = try_opt!(rewrite_generics(context, generics, shape, span));\n \n     if !generics.where_clause.predicates.is_empty() || result.contains('\\n') {\n         let budget = try_opt!(context\n@@ -2273,3 +2252,8 @@ fn format_generics(context: &RewriteContext,\n \n     Some(result)\n }\n+\n+fn generics_shape(config: &Config, indent: Indent) -> Option<Shape> {\n+    Some(Shape::legacy(try_opt!(config.max_width.checked_sub(indent.width())),\n+                       indent))\n+}"}]}