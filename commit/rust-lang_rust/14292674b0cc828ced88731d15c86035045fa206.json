{"sha": "14292674b0cc828ced88731d15c86035045fa206", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0MjkyNjc0YjBjYzgyOGNlZDg4NzMxZDE1Yzg2MDM1MDQ1ZmEyMDY=", "commit": {"author": {"name": "Joshua Holmer", "email": "holmerj@uindy.edu", "date": "2016-02-09T19:44:42Z"}, "committer": {"name": "Joshua Holmer", "email": "holmerj@uindy.edu", "date": "2016-02-09T19:44:42Z"}, "message": "display suggestion separately from lint", "tree": {"sha": "25cb7b24b2766ae9318ee345300e86f8c020ad34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25cb7b24b2766ae9318ee345300e86f8c020ad34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14292674b0cc828ced88731d15c86035045fa206", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14292674b0cc828ced88731d15c86035045fa206", "html_url": "https://github.com/rust-lang/rust/commit/14292674b0cc828ced88731d15c86035045fa206", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14292674b0cc828ced88731d15c86035045fa206/comments", "author": null, "committer": null, "parents": [{"sha": "56b3e7b4c2308be84ce4eed18f03743cc592b780", "url": "https://api.github.com/repos/rust-lang/rust/commits/56b3e7b4c2308be84ce4eed18f03743cc592b780", "html_url": "https://github.com/rust-lang/rust/commit/56b3e7b4c2308be84ce4eed18f03743cc592b780"}], "stats": {"total": 67, "additions": 45, "deletions": 22}, "files": [{"sha": "a40b4b3a252625fc1e6314e1200ec509e0be8d5d", "filename": "src/needless_bool.rs", "status": "modified", "additions": 29, "deletions": 17, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/14292674b0cc828ced88731d15c86035045fa206/src%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14292674b0cc828ced88731d15c86035045fa206/src%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fneedless_bool.rs?ref=14292674b0cc828ced88731d15c86035045fa206", "patch": "@@ -8,7 +8,7 @@ use rustc_front::hir::*;\n use syntax::ast::Lit_;\n use syntax::codemap::Spanned;\n \n-use utils::{span_lint, snippet};\n+use utils::{span_lint, span_lint_and_then, snippet};\n \n /// **What it does:** This lint checks for expressions of the form `if c { true } else { false }` (or vice versa) and suggest using the condition directly.\n ///\n@@ -109,34 +109,46 @@ impl LateLintPass for BoolComparison {\n                 (Some(true), None) => {\n                     let side_snip = snippet(cx, right_side.span, \"..\");\n                     let hint = format!(\"`{}`\", side_snip);\n-                    span_lint(cx,\n-                              BOOL_COMPARISON,\n-                              e.span,\n-                              &format!(\"you can simplify this boolean comparison to {}\", hint));\n+                    span_lint_and_then(cx,\n+                                       BOOL_COMPARISON,\n+                                       e.span,\n+                                       \"equality checks against booleans are unnecesary\",\n+                                       |db| {\n+                                           db.span_suggestion(e.span, \"try simplifying it:\", hint);\n+                                       });\n                 }\n                 (None, Some(true)) => {\n                     let side_snip = snippet(cx, left_side.span, \"..\");\n                     let hint = format!(\"`{}`\", side_snip);\n-                    span_lint(cx,\n-                              BOOL_COMPARISON,\n-                              e.span,\n-                              &format!(\"you can simplify this boolean comparison to {}\", hint));\n+                    span_lint_and_then(cx,\n+                                       BOOL_COMPARISON,\n+                                       e.span,\n+                                       \"equality checks against booleans are unnecesary\",\n+                                       |db| {\n+                                           db.span_suggestion(e.span, \"try simplifying it:\", hint);\n+                                       });\n                 }\n                 (Some(false), None) => {\n                     let side_snip = snippet(cx, right_side.span, \"..\");\n                     let hint = format!(\"`!{}`\", side_snip);\n-                    span_lint(cx,\n-                              BOOL_COMPARISON,\n-                              e.span,\n-                              &format!(\"you can simplify this boolean comparison to {}\", hint));\n+                    span_lint_and_then(cx,\n+                                       BOOL_COMPARISON,\n+                                       e.span,\n+                                       \"equality checks against booleans are unnecesary\",\n+                                       |db| {\n+                                           db.span_suggestion(e.span, \"try simplifying it:\", hint);\n+                                       });\n                 }\n                 (None, Some(false)) => {\n                     let side_snip = snippet(cx, left_side.span, \"..\");\n                     let hint = format!(\"`!{}`\", side_snip);\n-                    span_lint(cx,\n-                              BOOL_COMPARISON,\n-                              e.span,\n-                              &format!(\"you can simplify this boolean comparison to {}\", hint));\n+                    span_lint_and_then(cx,\n+                                       BOOL_COMPARISON,\n+                                       e.span,\n+                                       \"equality checks against booleans are unnecesary\",\n+                                       |db| {\n+                                           db.span_suggestion(e.span, \"try simplifying it:\", hint);\n+                                       });\n                 }\n                 _ => (),\n             }"}, {"sha": "468b8382e94901b058a8c67916134f79aa914f00", "filename": "tests/compile-fail/bool_comparison.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/14292674b0cc828ced88731d15c86035045fa206/tests%2Fcompile-fail%2Fbool_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14292674b0cc828ced88731d15c86035045fa206/tests%2Fcompile-fail%2Fbool_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbool_comparison.rs?ref=14292674b0cc828ced88731d15c86035045fa206", "patch": "@@ -1,12 +1,23 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n \n-#[allow(needless_bool)]\n #[deny(bool_comparison)]\n fn main() {\n     let x = true;\n-    if x == true { true } else { false }; //~ERROR you can simplify this boolean comparison to `x`\n-    if x == false { true } else { false }; //~ERROR you can simplify this boolean comparison to `!x`\n-    if true == x { true } else { false }; //~ERROR you can simplify this boolean comparison to `x`\n-    if false == x { true } else { false }; //~ERROR you can simplify this boolean comparison to `!x`\n+    if x == true { \"yes\" } else { \"no\" };\n+    //~^ ERROR equality checks against booleans are unnecesary\n+    //~| HELP try simplifying it:\n+    //~| SUGGESTION x\n+    if x == false { \"yes\" } else { \"no\" };\n+    //~^ ERROR equality checks against booleans are unnecesary\n+    //~| HELP try simplifying it:\n+    //~| SUGGESTION !x\n+    if true == x { \"yes\" } else { \"no\" };\n+    //~^ ERROR equality checks against booleans are unnecesary\n+    //~| HELP try simplifying it:\n+    //~| SUGGESTION x\n+    if false == x { \"yes\" } else { \"no\" };\n+    //~^ ERROR equality checks against booleans are unnecesary\n+    //~| HELP try simplifying it:\n+    //~| SUGGESTION !x\n }"}]}