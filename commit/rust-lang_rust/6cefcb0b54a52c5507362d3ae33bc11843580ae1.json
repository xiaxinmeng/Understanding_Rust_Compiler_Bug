{"sha": "6cefcb0b54a52c5507362d3ae33bc11843580ae1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjZWZjYjBiNTRhNTJjNTUwNzM2MmQzYWUzM2JjMTE4NDM1ODBhZTE=", "commit": {"author": {"name": "Tim Hutt", "email": "tdhutt@gmail.com", "date": "2019-10-07T12:32:07Z"}, "committer": {"name": "Tim Hutt", "email": "timh@graphcore.ai", "date": "2019-10-15T20:19:08Z"}, "message": "Add File::with_options\n\nThis provides a more fluent API to create files with options, and also avoids the need to import OpenOptions.", "tree": {"sha": "23c87a6b04b4743b5737d67b06c4073f7a4d197f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23c87a6b04b4743b5737d67b06c4073f7a4d197f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6cefcb0b54a52c5507362d3ae33bc11843580ae1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6cefcb0b54a52c5507362d3ae33bc11843580ae1", "html_url": "https://github.com/rust-lang/rust/commit/6cefcb0b54a52c5507362d3ae33bc11843580ae1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6cefcb0b54a52c5507362d3ae33bc11843580ae1/comments", "author": {"login": "Timmmm", "id": 376842, "node_id": "MDQ6VXNlcjM3Njg0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/376842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Timmmm", "html_url": "https://github.com/Timmmm", "followers_url": "https://api.github.com/users/Timmmm/followers", "following_url": "https://api.github.com/users/Timmmm/following{/other_user}", "gists_url": "https://api.github.com/users/Timmmm/gists{/gist_id}", "starred_url": "https://api.github.com/users/Timmmm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Timmmm/subscriptions", "organizations_url": "https://api.github.com/users/Timmmm/orgs", "repos_url": "https://api.github.com/users/Timmmm/repos", "events_url": "https://api.github.com/users/Timmmm/events{/privacy}", "received_events_url": "https://api.github.com/users/Timmmm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "237d54ff6c4fb3577e02d4c5af02813c11b63d01", "url": "https://api.github.com/repos/rust-lang/rust/commits/237d54ff6c4fb3577e02d4c5af02813c11b63d01", "html_url": "https://github.com/rust-lang/rust/commit/237d54ff6c4fb3577e02d4c5af02813c11b63d01"}], "stats": {"total": 35, "additions": 33, "deletions": 2}, "files": [{"sha": "ce1680fde2236c54dba010d044d7ed4fbae5da5c", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/6cefcb0b54a52c5507362d3ae33bc11843580ae1/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cefcb0b54a52c5507362d3ae33bc11843580ae1/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=6cefcb0b54a52c5507362d3ae33bc11843580ae1", "patch": "@@ -29,7 +29,7 @@ use crate::time::SystemTime;\n ///\n /// # Examples\n ///\n-/// Creates a new file and write bytes to it:\n+/// Creates a new file and write bytes to it (you can also use [`std::fs::write`]):\n ///\n /// ```no_run\n /// use std::fs::File;\n@@ -42,7 +42,7 @@ use crate::time::SystemTime;\n /// }\n /// ```\n ///\n-/// Read the contents of a file into a [`String`]:\n+/// Read the contents of a file into a [`String`] (you can also use [`std::fs::read`]):\n ///\n /// ```no_run\n /// use std::fs::File;\n@@ -397,6 +397,37 @@ impl File {\n         OpenOptions::new().write(true).create(true).truncate(true).open(path.as_ref())\n     }\n \n+    /// Returns a new OpenOptions object.\n+    ///\n+    /// This function returns a new OpenOptions object that you can use to\n+    /// open or create a file with specific options if `open()` or `create()`\n+    /// are not appropriate.\n+    ///\n+    /// It is equivalent to `OpenOptions::new()` but allows you to write more\n+    /// readable code. Instead of `OpenOptions::new().read(true).open(\"foo.txt\")`\n+    /// you can write `File::with_options().read(true).open(\"foo.txt\"). This\n+    /// also avoids the need to import `OpenOptions`.\n+    ///\n+    /// See the [`OpenOptions::new`] function for more details.\n+    ///\n+    /// [`OpenOptions::new`]: struct.OpenOptions.html#method.new\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// #![feature(with_options)]\n+    /// use std::fs::File;\n+    ///\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let mut f = File::with_options().read(true).open(\"foo.txt\")?;\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"with_options\", issue = \"65439\")]\n+    pub fn with_options() -> OpenOptions {\n+        OpenOptions::new()\n+    }\n+\n     /// Attempts to sync all OS-internal metadata to disk.\n     ///\n     /// This function will attempt to ensure that all in-memory data reaches the"}]}