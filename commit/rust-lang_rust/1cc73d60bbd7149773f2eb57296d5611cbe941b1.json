{"sha": "1cc73d60bbd7149773f2eb57296d5611cbe941b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjYzczZDYwYmJkNzE0OTc3M2YyZWI1NzI5NmQ1NjExY2JlOTQxYjE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-03T09:03:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-03T09:03:15Z"}, "message": "Merge #7068\n\n7068: Add VSCode command to view the hir of a function body r=theotherphil a=theotherphil\n\nWill fix https://github.com/rust-analyzer/rust-analyzer/issues/7061. Very rough initial version just to work out where I needed to wire everything up.\r\n\r\n@matklad would you be happy merging a hir visualiser of some kind? If so, do you have any thoughts on what you'd like it show, and how?\r\n\r\nI've spent very little time on this thus far, so I'm fine with throwing away the contents of this PR, but I want to avoid taking the time to make this more polished/interactive/useful only to discover that no-one else has any interest in this functionality.\r\n\r\n![image](https://user-images.githubusercontent.com/1974256/103236081-bb58f700-493b-11eb-9d12-55ae1b870f8f.png)\r\n\n\nCo-authored-by: Phil Ellison <phil.j.ellison@gmail.com>", "tree": {"sha": "631a683b73784e633baf84c826a81903922095a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/631a683b73784e633baf84c826a81903922095a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cc73d60bbd7149773f2eb57296d5611cbe941b1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf8YhTCRBK7hj4Ov3rIwAAdHIIAEjx7ne72EkOotzbHXVEY702\nHovUTB58ANTEiDx9X2OR/EegWb4wWmEgHh5+LgT6eT3nUMjMijOuaezNXH6KoF3L\noHs4Nz3uNUmq3Tub6pq2SoY2Wi+BA2ZsWlmj/IxYK5kF4aCcYqhVKf0FYGPJdGXO\nSJZxx6nby1McPikFJNJY+Je4IZ0Zc7zQ88XBIyhbSs8hrlAcqr8B+gqOkyPNhoCV\nxQNZGbI900O7HZglxUbf0NSZ2CtnA+z+ZbYYv1KpN+J2DtsPo0TrQMas8Q9BdOhA\nwprzimVA4pfv6HlYsHaLu7dEhN7bG2znJN+OzbIA9LyZmqoqhFTvg/BQKZA+ZWA=\n=/oqY\n-----END PGP SIGNATURE-----\n", "payload": "tree 631a683b73784e633baf84c826a81903922095a7\nparent 520b8a5a4dde032ba6118efb02801611191acc4e\nparent ee7c3f79e29bf140fe6faaf52bee63dba2fc29b1\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1609664595 +0000\ncommitter GitHub <noreply@github.com> 1609664595 +0000\n\nMerge #7068\n\n7068: Add VSCode command to view the hir of a function body r=theotherphil a=theotherphil\n\nWill fix https://github.com/rust-analyzer/rust-analyzer/issues/7061. Very rough initial version just to work out where I needed to wire everything up.\r\n\r\n@matklad would you be happy merging a hir visualiser of some kind? If so, do you have any thoughts on what you'd like it show, and how?\r\n\r\nI've spent very little time on this thus far, so I'm fine with throwing away the contents of this PR, but I want to avoid taking the time to make this more polished/interactive/useful only to discover that no-one else has any interest in this functionality.\r\n\r\n![image](https://user-images.githubusercontent.com/1974256/103236081-bb58f700-493b-11eb-9d12-55ae1b870f8f.png)\r\n\n\nCo-authored-by: Phil Ellison <phil.j.ellison@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cc73d60bbd7149773f2eb57296d5611cbe941b1", "html_url": "https://github.com/rust-lang/rust/commit/1cc73d60bbd7149773f2eb57296d5611cbe941b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cc73d60bbd7149773f2eb57296d5611cbe941b1/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "520b8a5a4dde032ba6118efb02801611191acc4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/520b8a5a4dde032ba6118efb02801611191acc4e", "html_url": "https://github.com/rust-lang/rust/commit/520b8a5a4dde032ba6118efb02801611191acc4e"}, {"sha": "ee7c3f79e29bf140fe6faaf52bee63dba2fc29b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee7c3f79e29bf140fe6faaf52bee63dba2fc29b1", "html_url": "https://github.com/rust-lang/rust/commit/ee7c3f79e29bf140fe6faaf52bee63dba2fc29b1"}], "stats": {"total": 145, "additions": 143, "deletions": 2}, "files": [{"sha": "62eccf4752d1a0a67717eab191366404f0cbf275", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1cc73d60bbd7149773f2eb57296d5611cbe941b1/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc73d60bbd7149773f2eb57296d5611cbe941b1/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=1cc73d60bbd7149773f2eb57296d5611cbe941b1", "patch": "@@ -39,7 +39,7 @@ use hir_ty::{\n     TyDefId, TyKind, TypeCtor,\n };\n use rustc_hash::FxHashSet;\n-use stdx::impl_from;\n+use stdx::{format_to, impl_from};\n use syntax::{\n     ast::{self, AttrsOwner, NameOwner},\n     AstNode, SmolStr,\n@@ -797,6 +797,19 @@ impl Function {\n     pub fn has_body(self, db: &dyn HirDatabase) -> bool {\n         db.function_data(self.id).has_body\n     }\n+\n+    /// A textual representation of the HIR of this function for debugging purposes.\n+    pub fn debug_hir(self, db: &dyn HirDatabase) -> String {\n+        let body = db.body(self.id.into());\n+\n+        let mut result = String::new();\n+        format_to!(result, \"HIR expressions in the body of `{}`:\\n\", self.name(db));\n+        for (id, expr) in body.exprs.iter() {\n+            format_to!(result, \"{:?}: {:?}\\n\", id, expr);\n+        }\n+\n+        result\n+    }\n }\n \n // Note: logically, this belongs to `hir_ty`, but we are not using it there yet."}, {"sha": "a450794f3be214f27145d66453068b94bb28d356", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1cc73d60bbd7149773f2eb57296d5611cbe941b1/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc73d60bbd7149773f2eb57296d5611cbe941b1/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=1cc73d60bbd7149773f2eb57296d5611cbe941b1", "patch": "@@ -31,6 +31,7 @@ mod folding_ranges;\n mod goto_definition;\n mod goto_implementation;\n mod goto_type_definition;\n+mod view_hir;\n mod hover;\n mod inlay_hints;\n mod join_lines;\n@@ -271,6 +272,10 @@ impl Analysis {\n         self.with_db(|db| syntax_tree::syntax_tree(&db, file_id, text_range))\n     }\n \n+    pub fn view_hir(&self, position: FilePosition) -> Cancelable<String> {\n+        self.with_db(|db| view_hir::view_hir(&db, position))\n+    }\n+\n     pub fn expand_macro(&self, position: FilePosition) -> Cancelable<Option<ExpandedMacro>> {\n         self.with_db(|db| expand_macro::expand_macro(db, position))\n     }"}, {"sha": "cfcfb7cfbc00504cae8f8c223df4b462c953f50e", "filename": "crates/ide/src/view_hir.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1cc73d60bbd7149773f2eb57296d5611cbe941b1/crates%2Fide%2Fsrc%2Fview_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc73d60bbd7149773f2eb57296d5611cbe941b1/crates%2Fide%2Fsrc%2Fview_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fview_hir.rs?ref=1cc73d60bbd7149773f2eb57296d5611cbe941b1", "patch": "@@ -0,0 +1,25 @@\n+use hir::{Function, Semantics};\n+use ide_db::base_db::FilePosition;\n+use ide_db::RootDatabase;\n+use syntax::{algo::find_node_at_offset, ast, AstNode};\n+\n+// Feature: View Hir\n+//\n+// |===\n+// | Editor  | Action Name\n+//\n+// | VS Code | **Rust Analyzer: View Hir**\n+// |===\n+pub(crate) fn view_hir(db: &RootDatabase, position: FilePosition) -> String {\n+    body_hir(db, position).unwrap_or(\"Not inside a function body\".to_string())\n+}\n+\n+fn body_hir(db: &RootDatabase, position: FilePosition) -> Option<String> {\n+    let sema = Semantics::new(db);\n+    let source_file = sema.parse(position.file_id);\n+\n+    let function = find_node_at_offset::<ast::Fn>(source_file.syntax(), position.offset)?;\n+\n+    let function: Function = sema.to_def(&function)?;\n+    Some(function.debug_hir(db))\n+}"}, {"sha": "dd486070b9179f60d1af6f6c7406a439de1b48e0", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1cc73d60bbd7149773f2eb57296d5611cbe941b1/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc73d60bbd7149773f2eb57296d5611cbe941b1/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=1cc73d60bbd7149773f2eb57296d5611cbe941b1", "patch": "@@ -105,6 +105,16 @@ pub(crate) fn handle_syntax_tree(\n     Ok(res)\n }\n \n+pub(crate) fn handle_view_hir(\n+    snap: GlobalStateSnapshot,\n+    params: lsp_types::TextDocumentPositionParams,\n+) -> Result<String> {\n+    let _p = profile::span(\"handle_view_hir\");\n+    let position = from_proto::file_position(&snap, params)?;\n+    let res = snap.analysis.view_hir(position)?;\n+    Ok(res)\n+}\n+\n pub(crate) fn handle_expand_macro(\n     snap: GlobalStateSnapshot,\n     params: lsp_ext::ExpandMacroParams,"}, {"sha": "a85978737b3a346360878db300f1316521c48dc4", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1cc73d60bbd7149773f2eb57296d5611cbe941b1/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc73d60bbd7149773f2eb57296d5611cbe941b1/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=1cc73d60bbd7149773f2eb57296d5611cbe941b1", "patch": "@@ -53,6 +53,14 @@ pub struct SyntaxTreeParams {\n     pub range: Option<Range>,\n }\n \n+pub enum ViewHir {}\n+\n+impl Request for ViewHir {\n+    type Params = lsp_types::TextDocumentPositionParams;\n+    type Result = String;\n+    const METHOD: &'static str = \"rust-analyzer/viewHir\";\n+}\n+\n pub enum ExpandMacro {}\n \n impl Request for ExpandMacro {"}, {"sha": "8eca79f7ee40c239eb3283b73c0ba90df9be941e", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1cc73d60bbd7149773f2eb57296d5611cbe941b1/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc73d60bbd7149773f2eb57296d5611cbe941b1/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=1cc73d60bbd7149773f2eb57296d5611cbe941b1", "patch": "@@ -443,6 +443,7 @@ impl GlobalState {\n             .on_sync::<lsp_ext::MemoryUsage>(|s, p| handlers::handle_memory_usage(s, p))?\n             .on::<lsp_ext::AnalyzerStatus>(handlers::handle_analyzer_status)\n             .on::<lsp_ext::SyntaxTree>(handlers::handle_syntax_tree)\n+            .on::<lsp_ext::ViewHir>(handlers::handle_view_hir)\n             .on::<lsp_ext::ExpandMacro>(handlers::handle_expand_macro)\n             .on::<lsp_ext::ParentModule>(handlers::handle_parent_module)\n             .on::<lsp_ext::Runnables>(handlers::handle_runnables)"}, {"sha": "55527bab0aae83fb2f88b6c43da92281a6deeb8f", "filename": "docs/dev/README.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cc73d60bbd7149773f2eb57296d5611cbe941b1/docs%2Fdev%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/1cc73d60bbd7149773f2eb57296d5611cbe941b1/docs%2Fdev%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2FREADME.md?ref=1cc73d60bbd7149773f2eb57296d5611cbe941b1", "patch": "@@ -227,6 +227,8 @@ There are also two VS Code commands which might be of interest:\n \n * `Rust Analyzer: Syntax Tree` shows syntax tree of the current file/selection.\n \n+* `Rust Analyzer: View Hir` shows the HIR expressions within the function containing the cursor.\n+\n   You can hover over syntax nodes in the opened text file to see the appropriate\n   rust code that it refers to and the rust editor will also highlight the proper\n   text range."}, {"sha": "78d86f060a67a20825f976b5d7d4ba0779ff7c10", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1cc73d60bbd7149773f2eb57296d5611cbe941b1/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/1cc73d60bbd7149773f2eb57296d5611cbe941b1/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=1cc73d60bbd7149773f2eb57296d5611cbe941b1", "patch": "@@ -1,5 +1,5 @@\n <!---\n-lsp_ext.rs hash: 203fdf79b21b5987\n+lsp_ext.rs hash: 91f2c62457e0a20f\n \n If you need to change the above hash to make the test pass, please check if you\n need to adjust this doc as well and ping this  issue:\n@@ -449,6 +449,17 @@ interface SyntaxTeeParams {\n Returns textual representation of a parse tree for the file/selected region.\n Primarily for debugging, but very useful for all people working on rust-analyzer itself.\n \n+## View Hir\n+\n+**Method:** `rust-analyzer/viewHir`\n+\n+**Request:** `TextDocumentPositionParams`\n+\n+**Response:** `string`\n+\n+Returns a textual representation of the HIR of the function containing the cursor.\n+For debugging or when working on rust-analyzer itself.\n+\n ## Expand Macro\n \n **Method:** `rust-analyzer/expandMacro`"}, {"sha": "3e55a35234373ac8d45f44a6427f8621ed5986a6", "filename": "editors/code/package.json", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1cc73d60bbd7149773f2eb57296d5611cbe941b1/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/1cc73d60bbd7149773f2eb57296d5611cbe941b1/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=1cc73d60bbd7149773f2eb57296d5611cbe941b1", "patch": "@@ -103,6 +103,11 @@\n                 \"title\": \"Show Syntax Tree\",\n                 \"category\": \"Rust Analyzer\"\n             },\n+            {\n+                \"command\": \"rust-analyzer.viewHir\",\n+                \"title\": \"View Hir\",\n+                \"category\": \"Rust Analyzer\"\n+            },\n             {\n                 \"command\": \"rust-analyzer.expandMacro\",\n                 \"title\": \"Expand macro recursively\",\n@@ -1006,6 +1011,10 @@\n                     \"command\": \"rust-analyzer.syntaxTree\",\n                     \"when\": \"inRustProject\"\n                 },\n+                {\n+                    \"command\": \"rust-analyzer.viewHir\",\n+                    \"when\": \"inRustProject\"\n+                },\n                 {\n                     \"command\": \"rust-analyzer.expandMacro\",\n                     \"when\": \"inRustProject\""}, {"sha": "c1c9f9754dd08c193edeb507d22179b9e3fa1c78", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/1cc73d60bbd7149773f2eb57296d5611cbe941b1/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/1cc73d60bbd7149773f2eb57296d5611cbe941b1/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=1cc73d60bbd7149773f2eb57296d5611cbe941b1", "patch": "@@ -340,6 +340,61 @@ export function syntaxTree(ctx: Ctx): Cmd {\n     };\n }\n \n+// Opens the virtual file that will show the HIR of the function containing the cursor position\n+//\n+// The contents of the file come from the `TextDocumentContentProvider`\n+export function viewHir(ctx: Ctx): Cmd {\n+    const tdcp = new class implements vscode.TextDocumentContentProvider {\n+        readonly uri = vscode.Uri.parse('rust-analyzer://viewHir/hir.txt');\n+        readonly eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n+        constructor() {\n+            vscode.workspace.onDidChangeTextDocument(this.onDidChangeTextDocument, this, ctx.subscriptions);\n+            vscode.window.onDidChangeActiveTextEditor(this.onDidChangeActiveTextEditor, this, ctx.subscriptions);\n+        }\n+\n+        private onDidChangeTextDocument(event: vscode.TextDocumentChangeEvent) {\n+            if (isRustDocument(event.document)) {\n+                // We need to order this after language server updates, but there's no API for that.\n+                // Hence, good old sleep().\n+                void sleep(10).then(() => this.eventEmitter.fire(this.uri));\n+            }\n+        }\n+        private onDidChangeActiveTextEditor(editor: vscode.TextEditor | undefined) {\n+            if (editor && isRustEditor(editor)) {\n+                this.eventEmitter.fire(this.uri);\n+            }\n+        }\n+\n+        provideTextDocumentContent(_uri: vscode.Uri, ct: vscode.CancellationToken): vscode.ProviderResult<string> {\n+            const rustEditor = ctx.activeRustEditor;\n+            const client = ctx.client;\n+            if (!rustEditor || !client) return '';\n+\n+            const params = {\n+                textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(rustEditor.document),\n+                position: client.code2ProtocolConverter.asPosition(\n+                    rustEditor.selection.active,\n+                ),\n+            };\n+            return client.sendRequest(ra.viewHir, params, ct);\n+        }\n+\n+        get onDidChange(): vscode.Event<vscode.Uri> {\n+            return this.eventEmitter.event;\n+        }\n+    };\n+\n+    ctx.pushCleanup(vscode.workspace.registerTextDocumentContentProvider('rust-analyzer', tdcp));\n+\n+    return async () => {\n+        const document = await vscode.workspace.openTextDocument(tdcp.uri);\n+        tdcp.eventEmitter.fire(tdcp.uri);\n+        void await vscode.window.showTextDocument(document, {\n+            viewColumn: vscode.ViewColumn.Two,\n+            preserveFocus: true\n+        });\n+    };\n+}\n \n // Opens the virtual file that will show the syntax tree\n //"}, {"sha": "d21a3db862de7d02d3d814caf377769ebe53a23d", "filename": "editors/code/src/lsp_ext.ts", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1cc73d60bbd7149773f2eb57296d5611cbe941b1/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "raw_url": "https://github.com/rust-lang/rust/raw/1cc73d60bbd7149773f2eb57296d5611cbe941b1/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Flsp_ext.ts?ref=1cc73d60bbd7149773f2eb57296d5611cbe941b1", "patch": "@@ -24,6 +24,7 @@ export interface SyntaxTreeParams {\n }\n export const syntaxTree = new lc.RequestType<SyntaxTreeParams, string, void>(\"rust-analyzer/syntaxTree\");\n \n+export const viewHir = new lc.RequestType<lc.TextDocumentPositionParams, string, void>(\"rust-analyzer/viewHir\");\n \n export interface ExpandMacroParams {\n     textDocument: lc.TextDocumentIdentifier;"}, {"sha": "60907dfd40d2ad12bb38bda41c6f678b40f89a72", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1cc73d60bbd7149773f2eb57296d5611cbe941b1/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/1cc73d60bbd7149773f2eb57296d5611cbe941b1/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=1cc73d60bbd7149773f2eb57296d5611cbe941b1", "patch": "@@ -105,6 +105,7 @@ async function tryActivate(context: vscode.ExtensionContext) {\n     ctx.registerCommand('joinLines', commands.joinLines);\n     ctx.registerCommand('parentModule', commands.parentModule);\n     ctx.registerCommand('syntaxTree', commands.syntaxTree);\n+    ctx.registerCommand('viewHir', commands.viewHir);\n     ctx.registerCommand('expandMacro', commands.expandMacro);\n     ctx.registerCommand('run', commands.run);\n     ctx.registerCommand('debug', commands.debug);"}]}