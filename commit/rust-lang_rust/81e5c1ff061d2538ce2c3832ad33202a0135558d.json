{"sha": "81e5c1ff061d2538ce2c3832ad33202a0135558d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxZTVjMWZmMDYxZDI1MzhjZTJjMzgzMmFkMzMyMDJhMDEzNTU1OGQ=", "commit": {"author": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-06-16T22:53:13Z"}, "committer": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-06-23T07:10:19Z"}, "message": "Remove the mostly unecessary ParamBounds struct", "tree": {"sha": "16621b5c965fda55964891ad6d1226b09f92d8f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16621b5c965fda55964891ad6d1226b09f92d8f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81e5c1ff061d2538ce2c3832ad33202a0135558d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81e5c1ff061d2538ce2c3832ad33202a0135558d", "html_url": "https://github.com/rust-lang/rust/commit/81e5c1ff061d2538ce2c3832ad33202a0135558d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81e5c1ff061d2538ce2c3832ad33202a0135558d/comments", "author": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e749f724b07121e965120f6974aa0b3fda888944", "url": "https://api.github.com/repos/rust-lang/rust/commits/e749f724b07121e965120f6974aa0b3fda888944", "html_url": "https://github.com/rust-lang/rust/commit/e749f724b07121e965120f6974aa0b3fda888944"}], "stats": {"total": 326, "additions": 100, "deletions": 226}, "files": [{"sha": "3907b0624b42e00b01db9920dfeb1bc304078738", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 17, "deletions": 71, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/81e5c1ff061d2538ce2c3832ad33202a0135558d/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e5c1ff061d2538ce2c3832ad33202a0135558d/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=81e5c1ff061d2538ce2c3832ad33202a0135558d", "patch": "@@ -195,15 +195,6 @@ pub fn parse_substs_data<'tcx, F>(data: &[u8], crate_num: ast::CrateNum, pos: us\n     parse_substs(&mut st, conv)\n }\n \n-pub fn parse_bounds_data<'tcx, F>(data: &[u8], crate_num: ast::CrateNum,\n-                                  pos: usize, tcx: &ty::ctxt<'tcx>, conv: F)\n-                                  -> ty::ParamBounds<'tcx> where\n-    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n-{\n-    let mut st = parse_state_from_data(data, crate_num, pos, tcx);\n-    parse_bounds(&mut st, conv)\n-}\n-\n pub fn parse_existential_bounds_data<'tcx, F>(data: &[u8], crate_num: ast::CrateNum,\n                                               pos: usize, tcx: &ty::ctxt<'tcx>, conv: F)\n                                               -> ty::ExistentialBounds<'tcx> where\n@@ -879,11 +870,23 @@ fn parse_existential_bounds_<'a,'tcx, F>(st: &mut PState<'a,'tcx>,\n                                         -> ty::ExistentialBounds<'tcx> where\n     F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n {\n-    let ty::ParamBounds { trait_bounds, mut region_bounds, builtin_bounds, projection_bounds } =\n-         parse_bounds_(st, conv);\n-    assert_eq!(region_bounds.len(), 1);\n-    assert_eq!(trait_bounds.len(), 0);\n-    let region_bound = region_bounds.pop().unwrap();\n+    let builtin_bounds = parse_builtin_bounds_(st, conv);\n+    let region_bound = parse_region_(st, conv);\n+    let mut projection_bounds = Vec::new();\n+\n+    loop {\n+        match next(st) {\n+            'P' => {\n+                projection_bounds.push(\n+                    ty::Binder(parse_projection_predicate_(st, conv)));\n+                }\n+            '.' => { break; }\n+            c => {\n+                panic!(\"parse_bounds: bad bounds ('{}')\", c)\n+            }\n+        }\n+    }\n+\n     return ty::ExistentialBounds { region_bound: region_bound,\n                                    builtin_bounds: builtin_bounds,\n                                    projection_bounds: projection_bounds };\n@@ -923,60 +926,3 @@ fn parse_builtin_bounds_<F>(st: &mut PState, _conv: &mut F) -> ty::BuiltinBounds\n         }\n     }\n }\n-\n-fn parse_bounds<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>, mut conv: F)\n-                             -> ty::ParamBounds<'tcx> where\n-    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n-{\n-    parse_bounds_(st, &mut conv)\n-}\n-\n-fn parse_bounds_<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>, conv: &mut F)\n-                              -> ty::ParamBounds<'tcx> where\n-    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n-{\n-    let builtin_bounds = parse_builtin_bounds_(st, conv);\n-\n-    let region_bounds = parse_region_bounds_(st, conv);\n-\n-    let mut param_bounds = ty::ParamBounds {\n-        region_bounds: region_bounds,\n-        builtin_bounds: builtin_bounds,\n-        trait_bounds: Vec::new(),\n-        projection_bounds: Vec::new(),\n-    };\n-\n-\n-    loop {\n-        match next(st) {\n-            'I' => {\n-                param_bounds.trait_bounds.push(\n-                    ty::Binder(parse_trait_ref_(st, conv)));\n-            }\n-            'P' => {\n-                param_bounds.projection_bounds.push(\n-                    ty::Binder(parse_projection_predicate_(st, conv)));\n-            }\n-            '.' => {\n-                return param_bounds;\n-            }\n-            c => {\n-                panic!(\"parse_bounds: bad bounds ('{}')\", c)\n-            }\n-        }\n-    }\n-}\n-\n-fn parse_region_bounds_<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>, conv: &mut F)\n-                              -> Vec<ty::Region> where\n-    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n-{\n-    let mut region_bounds = Vec::new();\n-    loop {\n-        match next(st) {\n-            'R' => { region_bounds.push(parse_region_(st, conv)); }\n-            '.' => { return region_bounds; }\n-            c => { panic!(\"parse_bounds: bad bounds ('{}')\", c); }\n-        }\n-    }\n-}"}, {"sha": "c078b62dd2d8aaceb92ae4d1f7e60ac7aaf2befb", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/81e5c1ff061d2538ce2c3832ad33202a0135558d/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e5c1ff061d2538ce2c3832ad33202a0135558d/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=81e5c1ff061d2538ce2c3832ad33202a0135558d", "patch": "@@ -380,23 +380,9 @@ pub fn enc_builtin_bounds(w: &mut Encoder, _cx: &ctxt, bs: &ty::BuiltinBounds) {\n pub fn enc_existential_bounds<'a,'tcx>(w: &mut Encoder,\n                                        cx: &ctxt<'a,'tcx>,\n                                        bs: &ty::ExistentialBounds<'tcx>) {\n-    let param_bounds = ty::ParamBounds { trait_bounds: vec!(),\n-                                         region_bounds: vec!(bs.region_bound),\n-                                         builtin_bounds: bs.builtin_bounds,\n-                                         projection_bounds: bs.projection_bounds.clone() };\n-    enc_bounds(w, cx, &param_bounds);\n-}\n-\n-pub fn enc_bounds<'a, 'tcx>(w: &mut Encoder, cx: &ctxt<'a, 'tcx>,\n-                            bs: &ty::ParamBounds<'tcx>) {\n     enc_builtin_bounds(w, cx, &bs.builtin_bounds);\n \n-    enc_region_bounds(w, cx, &bs.region_bounds);\n-\n-    for tp in &bs.trait_bounds {\n-        mywrite!(w, \"I\");\n-        enc_trait_ref(w, cx, tp.0);\n-    }\n+    enc_region(w, cx, bs.region_bound);\n \n     for tp in &bs.projection_bounds {\n         mywrite!(w, \"P\");"}, {"sha": "bbfa3c9fdfa3f986a0dfa75fba1580384ee6d118", "filename": "src/librustc/middle/implicator.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/81e5c1ff061d2538ce2c3832ad33202a0135558d/src%2Flibrustc%2Fmiddle%2Fimplicator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e5c1ff061d2538ce2c3832ad33202a0135558d/src%2Flibrustc%2Fmiddle%2Fimplicator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fimplicator.rs?ref=81e5c1ff061d2538ce2c3832ad33202a0135558d", "patch": "@@ -13,7 +13,7 @@\n use middle::infer::{InferCtxt, GenericKind};\n use middle::subst::Substs;\n use middle::traits;\n-use middle::ty::{self, RegionEscape, ToPolyTraitRef, Ty};\n+use middle::ty::{self, RegionEscape, ToPolyTraitRef, AsPredicate, Ty};\n use middle::ty_fold::{TypeFoldable, TypeFolder};\n \n use syntax::ast;\n@@ -444,13 +444,8 @@ pub fn object_region_bounds<'tcx>(\n     let substs = tcx.mk_substs(principal.0.substs.with_self_ty(open_ty));\n     let trait_refs = vec!(ty::Binder(ty::TraitRef::new(principal.0.def_id, substs)));\n \n-    let param_bounds = ty::ParamBounds {\n-        region_bounds: Vec::new(),\n-        builtin_bounds: others,\n-        trait_bounds: trait_refs,\n-        projection_bounds: Vec::new(), // not relevant to computing region bounds\n-    };\n+    let mut predicates = others.to_predicates(tcx, open_ty);\n+    predicates.extend(trait_refs.iter().map(|t| t.as_predicate()));\n \n-    let predicates = ty::predicates(tcx, open_ty, &param_bounds);\n     ty::required_region_bounds(tcx, open_ty, predicates)\n }"}, {"sha": "0e3b1375b873db536c8ee8a601902101e082dfc5", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 13, "deletions": 59, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/81e5c1ff061d2538ce2c3832ad33202a0135558d/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e5c1ff061d2538ce2c3832ad33202a0135558d/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=81e5c1ff061d2538ce2c3832ad33202a0135558d", "patch": "@@ -1847,21 +1847,8 @@ pub enum type_err<'tcx> {\n     terr_projection_bounds_length(expected_found<usize>),\n }\n \n-/// Bounds suitable for a named type parameter like `A` in `fn foo<A>`\n-/// as well as the existential type parameter in an object type.\n-#[derive(PartialEq, Eq, Hash, Clone)]\n-pub struct ParamBounds<'tcx> {\n-    pub region_bounds: Vec<ty::Region>,\n-    pub builtin_bounds: BuiltinBounds,\n-    pub trait_bounds: Vec<PolyTraitRef<'tcx>>,\n-    pub projection_bounds: Vec<PolyProjectionPredicate<'tcx>>,\n-}\n-\n /// Bounds suitable for an existentially quantified type parameter\n-/// such as those that appear in object types or closure types. The\n-/// major difference between this case and `ParamBounds` is that\n-/// general purpose trait bounds are omitted and there must be\n-/// *exactly one* region.\n+/// such as those that appear in object types or closure types.\n #[derive(PartialEq, Eq, Hash, Clone)]\n pub struct ExistentialBounds<'tcx> {\n     pub region_bound: ty::Region,\n@@ -1873,13 +1860,24 @@ pub struct ExistentialBounds<'tcx> {\n pub struct BuiltinBounds(EnumSet<BuiltinBound>);\n \n impl BuiltinBounds {\n-    pub fn empty() -> BuiltinBounds {\n+       pub fn empty() -> BuiltinBounds {\n         BuiltinBounds(EnumSet::new())\n     }\n \n     pub fn iter(&self) -> enum_set::Iter<BuiltinBound> {\n         self.into_iter()\n     }\n+\n+    pub fn to_predicates<'tcx>(&self,\n+                               tcx: &ty::ctxt<'tcx>,\n+                               self_ty: Ty<'tcx>) -> Vec<Predicate<'tcx>> {\n+        self.iter().filter_map(|builtin_bound|\n+            match traits::trait_ref_for_builtin_bound(tcx, builtin_bound, self_ty) {\n+                Ok(trait_ref) => Some(trait_ref.as_predicate()),\n+                Err(ErrorReported) => { None }\n+            }\n+        ).collect()\n+    }\n }\n \n impl ops::Deref for BuiltinBounds {\n@@ -3703,17 +3701,6 @@ impl<'tcx> ItemSubsts<'tcx> {\n     }\n }\n \n-impl<'tcx> ParamBounds<'tcx> {\n-    pub fn empty() -> ParamBounds<'tcx> {\n-        ParamBounds {\n-            builtin_bounds: BuiltinBounds::empty(),\n-            trait_bounds: Vec::new(),\n-            region_bounds: Vec::new(),\n-            projection_bounds: Vec::new(),\n-        }\n-    }\n-}\n-\n // Type utilities\n \n pub fn type_is_nil(ty: Ty) -> bool {\n@@ -6142,39 +6129,6 @@ pub fn lookup_super_predicates<'tcx>(cx: &ctxt<'tcx>, did: ast::DefId)\n         || csearch::get_super_predicates(cx, did))\n }\n \n-pub fn predicates<'tcx>(\n-    tcx: &ctxt<'tcx>,\n-    param_ty: Ty<'tcx>,\n-    bounds: &ParamBounds<'tcx>)\n-    -> Vec<Predicate<'tcx>>\n-{\n-    let mut vec = Vec::new();\n-\n-    for builtin_bound in &bounds.builtin_bounds {\n-        match traits::trait_ref_for_builtin_bound(tcx, builtin_bound, param_ty) {\n-            Ok(trait_ref) => { vec.push(trait_ref.as_predicate()); }\n-            Err(ErrorReported) => { }\n-        }\n-    }\n-\n-    for &region_bound in &bounds.region_bounds {\n-        // account for the binder being introduced below; no need to shift `param_ty`\n-        // because, at present at least, it can only refer to early-bound regions\n-        let region_bound = ty_fold::shift_region(region_bound, 1);\n-        vec.push(ty::Binder(ty::OutlivesPredicate(param_ty, region_bound)).as_predicate());\n-    }\n-\n-    for bound_trait_ref in &bounds.trait_bounds {\n-        vec.push(bound_trait_ref.as_predicate());\n-    }\n-\n-    for projection in &bounds.projection_bounds {\n-        vec.push(projection.as_predicate());\n-    }\n-\n-    vec\n-}\n-\n /// Get the attributes of a definition.\n pub fn get_attrs<'tcx>(tcx: &'tcx ctxt, did: DefId)\n                        -> Cow<'tcx, [ast::Attribute]> {"}, {"sha": "fe89ca751e7ce5461515006e873ea5d07061db74", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/81e5c1ff061d2538ce2c3832ad33202a0135558d/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e5c1ff061d2538ce2c3832ad33202a0135558d/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=81e5c1ff061d2538ce2c3832ad33202a0135558d", "patch": "@@ -350,17 +350,6 @@ impl<'tcx> TypeFoldable<'tcx> for ty::ExistentialBounds<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for ty::ParamBounds<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::ParamBounds<'tcx> {\n-        ty::ParamBounds {\n-            region_bounds: self.region_bounds.fold_with(folder),\n-            builtin_bounds: self.builtin_bounds.fold_with(folder),\n-            trait_bounds: self.trait_bounds.fold_with(folder),\n-            projection_bounds: self.projection_bounds.fold_with(folder),\n-        }\n-    }\n-}\n-\n impl<'tcx> TypeFoldable<'tcx> for ty::TypeParameterDef<'tcx> {\n     fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::TypeParameterDef<'tcx> {\n         ty::TypeParameterDef {"}, {"sha": "0ae089df50dd2c174a0b5ac5dc42cd4c528afa4a", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/81e5c1ff061d2538ce2c3832ad33202a0135558d/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e5c1ff061d2538ce2c3832ad33202a0135558d/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=81e5c1ff061d2538ce2c3832ad33202a0135558d", "patch": "@@ -347,23 +347,6 @@ impl fmt::Debug for subst::RegionSubsts {\n     }\n }\n \n-\n-impl<'tcx> fmt::Debug for ty::ParamBounds<'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        try!(write!(f, \"{:?}\", self.builtin_bounds));\n-        let mut bounds = self.trait_bounds.iter();\n-        if self.builtin_bounds.is_empty() {\n-            if let Some(bound) = bounds.next() {\n-                try!(write!(f, \"{:?}\", bound));\n-            }\n-        }\n-        for bound in bounds {\n-            try!(write!(f, \" + {:?}\", bound));\n-        }\n-        Ok(())\n-    }\n-}\n-\n impl<'tcx> fmt::Debug for ty::TraitRef<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         // when printing out the debug representation, we don't need\n@@ -539,22 +522,6 @@ impl<'tcx> fmt::Debug for ty::MethodObject<'tcx> {\n     }\n }\n \n-impl<'tcx> fmt::Display for ty::ParamBounds<'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        try!(write!(f, \"{}\", self.builtin_bounds));\n-        let mut bounds = self.trait_bounds.iter();\n-        if self.builtin_bounds.is_empty() {\n-            if let Some(bound) = bounds.next() {\n-                try!(write!(f, \"{}\", bound));\n-            }\n-        }\n-        for bound in bounds {\n-            try!(write!(f, \" + {}\", bound));\n-        }\n-        Ok(())\n-    }\n-}\n-\n impl<'tcx> fmt::Debug for ty::ExistentialBounds<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let mut empty = true;"}, {"sha": "72ff0792475422418d3eb91456336594af3adb4e", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/81e5c1ff061d2538ce2c3832ad33202a0135558d/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e5c1ff061d2538ce2c3832ad33202a0135558d/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=81e5c1ff061d2538ce2c3832ad33202a0135558d", "patch": "@@ -56,7 +56,8 @@ use middle::resolve_lifetime as rl;\n use middle::privacy::{AllPublic, LastMod};\n use middle::subst::{FnSpace, TypeSpace, SelfSpace, Subst, Substs};\n use middle::traits;\n-use middle::ty::{self, RegionEscape, Ty};\n+use middle::ty::{self, RegionEscape, Ty, AsPredicate};\n+use middle::ty_fold;\n use rscope::{self, UnelidableRscope, RegionScope, ElidableRscope, ExplicitRscope,\n              ObjectLifetimeDefaultRscope, ShiftedRscope, BindingRscope};\n use util::common::{ErrorReported, FN_OUTPUT_NAME};\n@@ -2191,3 +2192,47 @@ fn report_lifetime_number_error(tcx: &ty::ctxt, span: Span, number: usize, expec\n               \"wrong number of lifetime parameters: expected {}, found {}\",\n               expected, number);\n }\n+\n+// A helper struct for conveniently grouping a set of bounds which we pass to\n+// and return from functions in multiple places.\n+#[derive(PartialEq, Eq, Clone, Debug)]\n+pub struct Bounds<'tcx> {\n+    pub region_bounds: Vec<ty::Region>,\n+    pub builtin_bounds: ty::BuiltinBounds,\n+    pub trait_bounds: Vec<ty::PolyTraitRef<'tcx>>,\n+    pub projection_bounds: Vec<ty::PolyProjectionPredicate<'tcx>>,\n+}\n+\n+impl<'tcx> Bounds<'tcx> {\n+    pub fn predicates(&self,\n+        tcx: &ty::ctxt<'tcx>,\n+        param_ty: Ty<'tcx>)\n+        -> Vec<ty::Predicate<'tcx>>\n+    {\n+        let mut vec = Vec::new();\n+\n+        for builtin_bound in &self.builtin_bounds {\n+            match traits::trait_ref_for_builtin_bound(tcx, builtin_bound, param_ty) {\n+                Ok(trait_ref) => { vec.push(trait_ref.as_predicate()); }\n+                Err(ErrorReported) => { }\n+            }\n+        }\n+\n+        for &region_bound in &self.region_bounds {\n+            // account for the binder being introduced below; no need to shift `param_ty`\n+            // because, at present at least, it can only refer to early-bound regions\n+            let region_bound = ty_fold::shift_region(region_bound, 1);\n+            vec.push(ty::Binder(ty::OutlivesPredicate(param_ty, region_bound)).as_predicate());\n+        }\n+\n+        for bound_trait_ref in &self.trait_bounds {\n+            vec.push(bound_trait_ref.as_predicate());\n+        }\n+\n+        for projection in &self.projection_bounds {\n+            vec.push(projection.as_predicate());\n+        }\n+\n+        vec\n+    }\n+}"}, {"sha": "22926126f7ab30c81b8e916b2fd026d7bcc82bdc", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/81e5c1ff061d2538ce2c3832ad33202a0135558d/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e5c1ff061d2538ce2c3832ad33202a0135558d/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=81e5c1ff061d2538ce2c3832ad33202a0135558d", "patch": "@@ -1178,9 +1178,13 @@ fn ensure_super_predicates_step(ccx: &CrateCtxt,\n \n         // Convert the bounds that follow the colon, e.g. `Bar+Zed` in `trait Foo : Bar+Zed`.\n         let self_param_ty = ty::mk_self_type(tcx);\n-        let superbounds1 = compute_bounds(&ccx.icx(scope), self_param_ty, bounds,\n-                                          SizedByDefault::No, item.span);\n-        let superbounds1 = ty::predicates(tcx, self_param_ty, &superbounds1);\n+        let superbounds1 = compute_bounds(&ccx.icx(scope),\n+                                    self_param_ty,\n+                                    bounds,\n+                                    SizedByDefault::No,\n+                                    item.span);\n+\n+        let superbounds1 = superbounds1.predicates(tcx, self_param_ty);\n \n         // Convert any explicit superbounds in the where clause,\n         // e.g. `trait Foo where Self : Bar`:\n@@ -1395,7 +1399,7 @@ fn convert_trait_predicates<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>, it: &ast::Item)\n                                         SizedByDefault::Yes,\n                                         trait_item.span);\n \n-            ty::predicates(ccx.tcx, assoc_ty, &bounds).into_iter()\n+            bounds.predicates(ccx.tcx, assoc_ty).into_iter()\n         }).collect()\n     }\n }\n@@ -1743,7 +1747,7 @@ fn ty_generic_predicates<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n                                     &param.bounds,\n                                     SizedByDefault::Yes,\n                                     param.span);\n-        let predicates = ty::predicates(ccx.tcx, param_ty, &bounds);\n+        let predicates = bounds.predicates(ccx.tcx, param_ty);\n         result.predicates.extend(space, predicates.into_iter());\n     }\n \n@@ -1989,23 +1993,24 @@ fn compute_bounds<'tcx>(astconv: &AstConv<'tcx>,\n                         ast_bounds: &[ast::TyParamBound],\n                         sized_by_default: SizedByDefault,\n                         span: Span)\n-                        -> ty::ParamBounds<'tcx>\n+                        -> astconv::Bounds<'tcx>\n {\n-    let mut param_bounds = conv_param_bounds(astconv,\n-                                             span,\n-                                             param_ty,\n-                                             ast_bounds);\n+    let mut bounds =\n+        conv_param_bounds(astconv,\n+                          span,\n+                          param_ty,\n+                          ast_bounds);\n \n     if let SizedByDefault::Yes = sized_by_default {\n         add_unsized_bound(astconv,\n-                          &mut param_bounds.builtin_bounds,\n+                          &mut bounds.builtin_bounds,\n                           ast_bounds,\n                           span);\n     }\n \n-    param_bounds.trait_bounds.sort_by(|a,b| a.def_id().cmp(&b.def_id()));\n+    bounds.trait_bounds.sort_by(|a,b| a.def_id().cmp(&b.def_id()));\n \n-    param_bounds\n+    bounds\n }\n \n /// Converts a specific TyParamBound from the AST into a set of\n@@ -2055,7 +2060,7 @@ fn conv_param_bounds<'a,'tcx>(astconv: &AstConv<'tcx>,\n                               span: Span,\n                               param_ty: ty::Ty<'tcx>,\n                               ast_bounds: &[ast::TyParamBound])\n-                              -> ty::ParamBounds<'tcx>\n+                              -> astconv::Bounds<'tcx>\n {\n     let tcx = astconv.tcx();\n     let astconv::PartitionedBounds {\n@@ -2079,7 +2084,7 @@ fn conv_param_bounds<'a,'tcx>(astconv: &AstConv<'tcx>,\n                      .map(|r| ast_region_to_region(tcx, r))\n                      .collect();\n \n-    ty::ParamBounds {\n+    astconv::Bounds {\n         region_bounds: region_bounds,\n         builtin_bounds: builtin_bounds,\n         trait_bounds: trait_bounds,"}, {"sha": "8ba4470c3efbd007ef5f89250ae8a73e5896af51", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/81e5c1ff061d2538ce2c3832ad33202a0135558d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e5c1ff061d2538ce2c3832ad33202a0135558d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=81e5c1ff061d2538ce2c3832ad33202a0135558d", "patch": "@@ -716,19 +716,6 @@ impl<'tcx> Clean<TyParamBound> for ty::TraitRef<'tcx> {\n     }\n }\n \n-impl<'tcx> Clean<Vec<TyParamBound>> for ty::ParamBounds<'tcx> {\n-    fn clean(&self, cx: &DocContext) -> Vec<TyParamBound> {\n-        let mut v = Vec::new();\n-        for t in &self.trait_bounds {\n-            v.push(t.clean(cx));\n-        }\n-        for r in self.region_bounds.iter().filter_map(|r| r.clean(cx)) {\n-            v.push(RegionBound(r));\n-        }\n-        v\n-    }\n-}\n-\n impl<'tcx> Clean<Option<Vec<TyParamBound>>> for subst::Substs<'tcx> {\n     fn clean(&self, cx: &DocContext) -> Option<Vec<TyParamBound>> {\n         let mut v = Vec::new();"}]}