{"sha": "e1562fbe71c8b444e0f5b2977bf8e36ddfc36b8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxNTYyZmJlNzFjOGI0NDRlMGY1YjI5NzdiZjhlMzZkZGZjMzZiOGI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-06-06T17:15:39Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-06-06T17:15:54Z"}, "message": "comments", "tree": {"sha": "3f3a357db7a1e4574195fb461ebd679b50874b04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f3a357db7a1e4574195fb461ebd679b50874b04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1562fbe71c8b444e0f5b2977bf8e36ddfc36b8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1562fbe71c8b444e0f5b2977bf8e36ddfc36b8b", "html_url": "https://github.com/rust-lang/rust/commit/e1562fbe71c8b444e0f5b2977bf8e36ddfc36b8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1562fbe71c8b444e0f5b2977bf8e36ddfc36b8b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cad0188c720a939dc6e10b05f555fe46e538e5b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/cad0188c720a939dc6e10b05f555fe46e538e5b0", "html_url": "https://github.com/rust-lang/rust/commit/cad0188c720a939dc6e10b05f555fe46e538e5b0"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "66180d6075c716aa68ab1012d98474c38e12b2b8", "filename": "src/memory.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e1562fbe71c8b444e0f5b2977bf8e36ddfc36b8b/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1562fbe71c8b444e0f5b2977bf8e36ddfc36b8b/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=e1562fbe71c8b444e0f5b2977bf8e36ddfc36b8b", "patch": "@@ -166,7 +166,8 @@ pub struct Memory<'a, 'tcx> {\n     /// We mark memory as \"packed\" or \"unaligned\" for a single statement, and clear the marking\n     /// afterwards. In the case where no packed structs are present, it's just a single emptyness\n     /// check of a set instead of heavily influencing all memory access code as other solutions\n-    /// would.\n+    /// would.  This is simpler than the alternative of passing a \"packed\" parameter to every\n+    /// load/store method.\n     ///\n     /// One disadvantage of this solution is the fact that you can cast a pointer to a packed\n     /// struct to a pointer to a normal struct and if you access a field of both in the same MIR"}, {"sha": "ce3216f00153a8c74a494fb14a58e283549cfa3f", "filename": "src/terminator/intrinsic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1562fbe71c8b444e0f5b2977bf8e36ddfc36b8b/src%2Fterminator%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1562fbe71c8b444e0f5b2977bf8e36ddfc36b8b/src%2Fterminator%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fintrinsic.rs?ref=e1562fbe71c8b444e0f5b2977bf8e36ddfc36b8b", "patch": "@@ -43,7 +43,6 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n \n             \"arith_offset\" => {\n-                // FIXME: Switch to non-checked, wrapped version of pointer_offset\n                 let offset = self.value_to_primval(arg_vals[1], isize)?.to_i128()? as i64;\n                 let ptr = arg_vals[0].read_ptr(&self.memory)?;\n                 let result_ptr = self.wrapping_pointer_offset(ptr, substs.type_at(0), offset)?;"}]}