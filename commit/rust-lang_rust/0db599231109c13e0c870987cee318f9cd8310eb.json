{"sha": "0db599231109c13e0c870987cee318f9cd8310eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkYjU5OTIzMTEwOWMxM2UwYzg3MDk4N2NlZTMxOGY5Y2Q4MzEwZWI=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-10T15:03:24Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-10T15:03:24Z"}, "message": "`replace_qualified_name_with_use` keeps qualifier for import", "tree": {"sha": "2199de0b04a29179c10dec22d914b50ae49266d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2199de0b04a29179c10dec22d914b50ae49266d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0db599231109c13e0c870987cee318f9cd8310eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0db599231109c13e0c870987cee318f9cd8310eb", "html_url": "https://github.com/rust-lang/rust/commit/0db599231109c13e0c870987cee318f9cd8310eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0db599231109c13e0c870987cee318f9cd8310eb/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10ac4e5c0d04bd6b2b6d14aa7ce9e54390d5f12d", "url": "https://api.github.com/repos/rust-lang/rust/commits/10ac4e5c0d04bd6b2b6d14aa7ce9e54390d5f12d", "html_url": "https://github.com/rust-lang/rust/commit/10ac4e5c0d04bd6b2b6d14aa7ce9e54390d5f12d"}], "stats": {"total": 66, "additions": 57, "deletions": 9}, "files": [{"sha": "4a30b83b5a3d0849c0ed6ee4744f2ea3327ff610", "filename": "crates/ide_assists/src/handlers/replace_qualified_name_with_use.rs", "status": "modified", "additions": 57, "deletions": 9, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/0db599231109c13e0c870987cee318f9cd8310eb/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0db599231109c13e0c870987cee318f9cd8310eb/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs?ref=0db599231109c13e0c870987cee318f9cd8310eb", "patch": "@@ -3,7 +3,10 @@ use ide_db::helpers::{\n     insert_use::{insert_use, ImportScope},\n     mod_path_to_ast,\n };\n-use syntax::{ast, match_ast, ted, AstNode, SyntaxNode};\n+use syntax::{\n+    ast::{self, make},\n+    match_ast, ted, AstNode, SyntaxNode,\n+};\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n@@ -38,20 +41,26 @@ pub(crate) fn replace_qualified_name_with_use(\n         return None;\n     }\n \n-    let res = ctx.sema.resolve_path(&path)?;\n-    let def: hir::ItemInNs = match res {\n-        hir::PathResolution::Def(def) if def.as_assoc_item(ctx.sema.db).is_none() => def.into(),\n-        hir::PathResolution::Macro(mac) => mac.into(),\n+    // only offer replacement for non assoc items\n+    match ctx.sema.resolve_path(&path)? {\n+        hir::PathResolution::Def(def) if def.as_assoc_item(ctx.sema.db).is_none() => (),\n+        hir::PathResolution::Macro(_) => (),\n+        _ => return None,\n+    }\n+    // then search for an import for the first path segment of what we want to replace\n+    // that way it is less likely that we import the item from a different location due re-exports\n+    let module = match ctx.sema.resolve_path(&path.first_qualifier_or_self())? {\n+        hir::PathResolution::Def(module @ hir::ModuleDef::Module(_)) => module,\n         _ => return None,\n     };\n \n-    let target = path.syntax().text_range();\n     let scope = ImportScope::find_insert_use_container_with_macros(path.syntax(), &ctx.sema)?;\n-    let mod_path = ctx.sema.scope(path.syntax()).module()?.find_use_path_prefixed(\n+    let path_to_qualifier = ctx.sema.scope(path.syntax()).module()?.find_use_path_prefixed(\n         ctx.sema.db,\n-        def,\n+        module,\n         ctx.config.insert_use.prefix_kind,\n     )?;\n+    let target = path.syntax().text_range();\n     acc.add(\n         AssistId(\"replace_qualified_name_with_use\", AssistKind::RefactorRewrite),\n         \"Replace qualified path with use\",\n@@ -64,7 +73,11 @@ pub(crate) fn replace_qualified_name_with_use(\n                 ImportScope::Module(it) => ImportScope::Module(builder.make_mut(it)),\n                 ImportScope::Block(it) => ImportScope::Block(builder.make_mut(it)),\n             };\n-            let path = mod_path_to_ast(&mod_path);\n+            // stick the found import in front of the to be replaced path\n+            let path = match mod_path_to_ast(&path_to_qualifier).qualifier() {\n+                Some(qualifier) => make::path_concat(qualifier, path),\n+                None => path,\n+            };\n             shorten_paths(scope.as_syntax_node(), &path.clone_for_update());\n             insert_use(&scope, path, &ctx.config.insert_use);\n         },\n@@ -300,6 +313,41 @@ impl Foo {\n fn main() {\n     Foo::foo$0();\n }\n+\",\n+        );\n+    }\n+\n+    #[test]\n+    fn replace_reuses_path_qualifier() {\n+        check_assist(\n+            replace_qualified_name_with_use,\n+            r\"\n+pub mod foo {\n+    struct Foo;\n+}\n+\n+mod bar {\n+    pub use super::foo::Foo as Bar;\n+}\n+\n+fn main() {\n+    foo::Foo$0;\n+}\n+\",\n+            r\"\n+use foo::Foo;\n+\n+pub mod foo {\n+    struct Foo;\n+}\n+\n+mod bar {\n+    pub use super::foo::Foo as Bar;\n+}\n+\n+fn main() {\n+    Foo;\n+}\n \",\n         );\n     }"}]}