{"sha": "136abb9fb5ec89f0958602ea8d1fb4058a2d3461", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzNmFiYjlmYjVlYzg5ZjA5NTg2MDJlYThkMWZiNDA1OGEyZDM0NjE=", "commit": {"author": {"name": "Inokentiy Babushkin", "email": "twk@twki.de", "date": "2018-04-01T20:38:47Z"}, "committer": {"name": "Inokentiy Babushkin", "email": "twk@twki.de", "date": "2018-04-26T19:54:28Z"}, "message": "Made some bits of the auto trait machinery public.", "tree": {"sha": "a822bcd814389784b935000353dfbb18657e145f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a822bcd814389784b935000353dfbb18657e145f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/136abb9fb5ec89f0958602ea8d1fb4058a2d3461", "comment_count": 0, "verification": {"verified": false, "reason": "unverified_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEXezFNCHL3+3lgSPSfvyOxSJN6OwFAlriLnQACgkQfvyOxSJN\n6OxowBAAleqVQOEN3kXN445h2iqwN4hC7O0cQ+Skkn7e5DRrvUdUfC8gelfWg7dq\nkx/4uJpVYm4dVEIKWcmuWgz9hut6mUMd2/i9JCAAaB9NFF4wUJLV/WVRktPNxFc0\nhxDznGNX4JMBibnDvw1VshhVMJWe/gRDORFuC6ngmpeuUDH+AGN8PZvJDWl9yJOx\n6cYtUANcbtqLce0GUx5yv/WbLSsP76B81tHHWzJp9cx//38eoLpbnvfFvjjoyJW2\nfTKYkXcT96RCmd/rukXduscSdrmq5M0KbP6NM6nJETFv9+ZYLNJ990g1OvmKUNGu\n477bwJLjFJyAfwiWqVNmqdcH2219POxZ/bYJsohZWuy2PU6RKI/F8z1MMw0APhBz\nm2IfC0rTYmKx4NMiMv66ss2g9X1CiqjGIOc1UTKFqB7h17mtjWmUwhHw8XjuehWw\nYPhNHI6H2JtYScgXEeieAi449B7OYtpJxpab2EDcXly+MOsvbcgcNpVJi09clDy8\nxSe4FhiEtIQ+XL1bvRcRTDNv8nC2cm+0fUePq2UDWRRLFNADoAe8yhlP8njPxZ1T\ntlHwWRJ3BTPAfKDNQfPLsLaMthGHOkV6NIfE2X/dPVwgHOF/kgWZFAC4/k2vksG9\nQHaU/iE3jdp/sZq3iP9lN7kEvSTNiFwLLvA5tASRj+ofnn9hKlA=\n=mae7\n-----END PGP SIGNATURE-----", "payload": "tree a822bcd814389784b935000353dfbb18657e145f\nparent 7365bee5066aae03e52a67c3fac6a8129140d90f\nauthor Inokentiy Babushkin <twk@twki.de> 1522615127 +0200\ncommitter Inokentiy Babushkin <twk@twki.de> 1524772468 +0200\n\nMade some bits of the auto trait machinery public.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/136abb9fb5ec89f0958602ea8d1fb4058a2d3461", "html_url": "https://github.com/rust-lang/rust/commit/136abb9fb5ec89f0958602ea8d1fb4058a2d3461", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/136abb9fb5ec89f0958602ea8d1fb4058a2d3461/comments", "author": {"login": "ibabushkin", "id": 10811417, "node_id": "MDQ6VXNlcjEwODExNDE3", "avatar_url": "https://avatars.githubusercontent.com/u/10811417?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibabushkin", "html_url": "https://github.com/ibabushkin", "followers_url": "https://api.github.com/users/ibabushkin/followers", "following_url": "https://api.github.com/users/ibabushkin/following{/other_user}", "gists_url": "https://api.github.com/users/ibabushkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibabushkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibabushkin/subscriptions", "organizations_url": "https://api.github.com/users/ibabushkin/orgs", "repos_url": "https://api.github.com/users/ibabushkin/repos", "events_url": "https://api.github.com/users/ibabushkin/events{/privacy}", "received_events_url": "https://api.github.com/users/ibabushkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibabushkin", "id": 10811417, "node_id": "MDQ6VXNlcjEwODExNDE3", "avatar_url": "https://avatars.githubusercontent.com/u/10811417?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibabushkin", "html_url": "https://github.com/ibabushkin", "followers_url": "https://api.github.com/users/ibabushkin/followers", "following_url": "https://api.github.com/users/ibabushkin/following{/other_user}", "gists_url": "https://api.github.com/users/ibabushkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibabushkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibabushkin/subscriptions", "organizations_url": "https://api.github.com/users/ibabushkin/orgs", "repos_url": "https://api.github.com/users/ibabushkin/repos", "events_url": "https://api.github.com/users/ibabushkin/events{/privacy}", "received_events_url": "https://api.github.com/users/ibabushkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7365bee5066aae03e52a67c3fac6a8129140d90f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7365bee5066aae03e52a67c3fac6a8129140d90f", "html_url": "https://github.com/rust-lang/rust/commit/7365bee5066aae03e52a67c3fac6a8129140d90f"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "a55150ab11ba9658c4cd440aa24907d0b4c9a32e", "filename": "src/librustc/traits/auto_trait.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/136abb9fb5ec89f0958602ea8d1fb4058a2d3461/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/136abb9fb5ec89f0958602ea8d1fb4058a2d3461/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fauto_trait.rs?ref=136abb9fb5ec89f0958602ea8d1fb4058a2d3461", "patch": "@@ -25,18 +25,18 @@ use ty::fold::TypeFolder;\n \n // TODO(twk): this is obviously not nice to duplicate like that\n #[derive(Eq, PartialEq, Hash, Copy, Clone, Debug)]\n-enum RegionTarget<'tcx> {\n+pub enum RegionTarget<'tcx> {\n     Region(Region<'tcx>),\n     RegionVid(RegionVid)\n }\n \n #[derive(Default, Debug, Clone)]\n-struct RegionDeps<'tcx> {\n+pub struct RegionDeps<'tcx> {\n     larger: FxHashSet<RegionTarget<'tcx>>,\n     smaller: FxHashSet<RegionTarget<'tcx>>\n }\n \n-enum AutoTraitResult {\n+pub enum AutoTraitResult {\n     ExplicitImpl,\n     PositiveImpl, /*(ty::Generics), TODO(twk)*/\n     NegativeImpl,\n@@ -56,7 +56,7 @@ pub struct AutoTraitFinder<'a, 'tcx: 'a> {\n }\n \n impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n-    fn find_auto_trait_generics(\n+    pub fn find_auto_trait_generics(\n         &self,\n         did: DefId,\n         trait_did: DefId,\n@@ -277,9 +277,9 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n     // the final synthesized generics: we don't want our generated docs page to contain something\n     // like 'T: Copy + Clone', as that's redundant. Therefore, we keep track of a separate\n     // 'user_env', which only holds the predicates that will actually be displayed to the user.\n-    fn evaluate_predicates<'b, 'gcx, 'c>(\n+    pub fn evaluate_predicates<'b, 'gcx, 'c>(\n         &self,\n-        infcx: &mut InferCtxt<'b, 'tcx, 'c>,\n+        infcx: & InferCtxt<'b, 'tcx, 'c>,\n         ty_did: DefId,\n         trait_did: DefId,\n         ty: ty::Ty<'c>,\n@@ -387,7 +387,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n     // starting conditions (e.g. user-provided code). For this reason, it's easier\n     // to perform the calculations we need on our own, rather than trying to make\n     // existing inference/solver code do what we want.\n-    fn handle_lifetimes<'cx>(\n+    pub fn handle_lifetimes<'cx>(\n         &self,\n         regions: &RegionConstraintData<'cx>,\n         names_map: &FxHashMap<String, String>, // TODO(twk): lifetime branding\n@@ -533,15 +533,15 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         lifetime_predicates\n     }\n \n-    fn region_name(&self, region: Region) -> Option<String> {\n+    pub fn region_name(&self, region: Region) -> Option<String> {\n         match region {\n             &ty::ReEarlyBound(r) => Some(r.name.as_str().to_string()),\n             _ => None,\n         }\n     }\n \n     // TODO(twk): lifetime branding\n-    fn get_lifetime(&self, region: Region, names_map: &FxHashMap<String, String>) -> String {\n+    pub fn get_lifetime(&self, region: Region, names_map: &FxHashMap<String, String>) -> String {\n         self.region_name(region)\n             .map(|name| {\n                 names_map.get(&name).unwrap_or_else(|| {\n@@ -555,7 +555,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n \n     // This is very similar to handle_lifetimes. However, instead of matching ty::Region's\n     // to each other, we match ty::RegionVid's to ty::Region's\n-    fn map_vid_to_region<'cx>(\n+    pub fn map_vid_to_region<'cx>(\n         &self,\n         regions: &RegionConstraintData<'cx>,\n     ) -> FxHashMap<ty::RegionVid, ty::Region<'cx>> {\n@@ -655,7 +655,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         finished_map\n     }\n \n-    fn is_of_param(&self, substs: &Substs) -> bool {\n+    pub fn is_of_param(&self, substs: &Substs) -> bool {\n         if substs.is_noop() {\n             return false;\n         }\n@@ -667,7 +667,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         };\n     }\n \n-    fn evaluate_nested_obligations<'b, 'c, 'd, 'cx,\n+    pub fn evaluate_nested_obligations<'b, 'c, 'd, 'cx,\n                                     T: Iterator<Item = Obligation<'cx, ty::Predicate<'cx>>>>(\n         &self,\n         ty: ty::Ty,\n@@ -775,7 +775,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         return true;\n     }\n \n-    fn clean_pred<'c, 'd, 'cx>(\n+    pub fn clean_pred<'c, 'd, 'cx>(\n         &self,\n         infcx: &InferCtxt<'c, 'd, 'cx>,\n         p: ty::Predicate<'cx>,\n@@ -785,7 +785,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n }\n \n // Replaces all ReVars in a type with ty::Region's, using the provided map\n-struct RegionReplacer<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n+pub struct RegionReplacer<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     vid_to_region: &'a FxHashMap<ty::RegionVid, ty::Region<'tcx>>,\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n }"}]}