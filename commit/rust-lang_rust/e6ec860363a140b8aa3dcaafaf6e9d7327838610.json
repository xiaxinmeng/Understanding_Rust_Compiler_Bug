{"sha": "e6ec860363a140b8aa3dcaafaf6e9d7327838610", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2ZWM4NjAzNjNhMTQwYjhhYTNkY2FhZmFmNmU5ZDczMjc4Mzg2MTA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-31T13:21:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-31T13:21:31Z"}, "message": "Merge #9039\n\n9039: feat: Complete fields and methods with `self.` prefixed when inside methods r=matklad a=Veykril\n\n\r\n![w65NbjkZiG](https://user-images.githubusercontent.com/3757771/119984385-a0111700-bfc1-11eb-9dbf-52fdaa4d72b5.gif)\r\nCloses #7173\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "cacaf711d01ce64074ecf675287ab03c85487ec1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cacaf711d01ce64074ecf675287ab03c85487ec1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6ec860363a140b8aa3dcaafaf6e9d7327838610", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgtOLbCRBK7hj4Ov3rIwAAqFcIAHrVFeD+4TNJobhwPDSwIFN7\n9L3Cd+b4a5PszQlprPGf80SvIcB4e8Ad1HYIIF7PFYSbq6aZg2qDGcV691FeHtpF\nGczHrG670QX+jns5FfmkfXPdvEeQOt/OtIUn+C8ZjLDLbLI3zhp85GeR4odLtQSs\nWnSTkPVZtMGEycMqlnTTfYVzKHWEfK3n6VsbB4lSjbylamNUXytQscxAhNwkbgTj\n7LS59YZNKM9Pw4DhH5i+63OZm6FFmlFDs0umfFAQdcqZwSHKHYBQaAkflbRG4vB9\nrrxBLRYcZ3+ixZOa/ziPLdzL/h4tDW17jMjchpT51qqzIE/0C8bPMPPvIOftnHU=\n=hopC\n-----END PGP SIGNATURE-----\n", "payload": "tree cacaf711d01ce64074ecf675287ab03c85487ec1\nparent e9a797748daa7e25cde66927b8907b2d976201a5\nparent fb7105a5801ab1d0ede830cd53bbc3ccbf0b5e2c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1622467291 +0000\ncommitter GitHub <noreply@github.com> 1622467291 +0000\n\nMerge #9039\n\n9039: feat: Complete fields and methods with `self.` prefixed when inside methods r=matklad a=Veykril\n\n\r\n![w65NbjkZiG](https://user-images.githubusercontent.com/3757771/119984385-a0111700-bfc1-11eb-9dbf-52fdaa4d72b5.gif)\r\nCloses #7173\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6ec860363a140b8aa3dcaafaf6e9d7327838610", "html_url": "https://github.com/rust-lang/rust/commit/e6ec860363a140b8aa3dcaafaf6e9d7327838610", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6ec860363a140b8aa3dcaafaf6e9d7327838610/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9a797748daa7e25cde66927b8907b2d976201a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9a797748daa7e25cde66927b8907b2d976201a5", "html_url": "https://github.com/rust-lang/rust/commit/e9a797748daa7e25cde66927b8907b2d976201a5"}, {"sha": "fb7105a5801ab1d0ede830cd53bbc3ccbf0b5e2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb7105a5801ab1d0ede830cd53bbc3ccbf0b5e2c", "html_url": "https://github.com/rust-lang/rust/commit/fb7105a5801ab1d0ede830cd53bbc3ccbf0b5e2c"}], "stats": {"total": 196, "additions": 170, "deletions": 26}, "files": [{"sha": "ffdcdc930a943973cef3521950eb1db8ad5c80fc", "filename": "crates/ide_completion/src/completions.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e6ec860363a140b8aa3dcaafaf6e9d7327838610/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6ec860363a140b8aa3dcaafaf6e9d7327838610/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions.rs?ref=e6ec860363a140b8aa3dcaafaf6e9d7327838610", "patch": "@@ -69,18 +69,25 @@ impl Completions {\n         items.into_iter().for_each(|item| self.add(item.into()))\n     }\n \n-    pub(crate) fn add_field(&mut self, ctx: &CompletionContext, field: hir::Field, ty: &hir::Type) {\n-        let item = render_field(RenderContext::new(ctx), field, ty);\n+    pub(crate) fn add_field(\n+        &mut self,\n+        ctx: &CompletionContext,\n+        receiver: Option<hir::Name>,\n+        field: hir::Field,\n+        ty: &hir::Type,\n+    ) {\n+        let item = render_field(RenderContext::new(ctx), receiver, field, ty);\n         self.add(item);\n     }\n \n     pub(crate) fn add_tuple_field(\n         &mut self,\n         ctx: &CompletionContext,\n+        receiver: Option<hir::Name>,\n         field: usize,\n         ty: &hir::Type,\n     ) {\n-        let item = render_tuple_field(RenderContext::new(ctx), field, ty);\n+        let item = render_tuple_field(RenderContext::new(ctx), receiver, field, ty);\n         self.add(item);\n     }\n \n@@ -132,9 +139,11 @@ impl Completions {\n         &mut self,\n         ctx: &CompletionContext,\n         func: hir::Function,\n+        receiver: Option<hir::Name>,\n         local_name: Option<hir::Name>,\n     ) {\n-        if let Some(item) = render_method(RenderContext::new(ctx), None, local_name, func) {\n+        if let Some(item) = render_method(RenderContext::new(ctx), None, receiver, local_name, func)\n+        {\n             self.add(item)\n         }\n     }"}, {"sha": "302c9ccbd369678eeb12ec95891602174396002e", "filename": "crates/ide_completion/src/completions/dot.rs", "status": "modified", "additions": 75, "deletions": 9, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/e6ec860363a140b8aa3dcaafaf6e9d7327838610/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6ec860363a140b8aa3dcaafaf6e9d7327838610/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=e6ec860363a140b8aa3dcaafaf6e9d7327838610", "patch": "@@ -1,6 +1,7 @@\n //! Completes references after dot (fields and method calls).\n \n-use hir::{HasVisibility, Type};\n+use either::Either;\n+use hir::{HasVisibility, ScopeDef};\n use rustc_hash::FxHashSet;\n \n use crate::{context::CompletionContext, Completions};\n@@ -9,7 +10,7 @@ use crate::{context::CompletionContext, Completions};\n pub(crate) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext) {\n     let dot_receiver = match &ctx.dot_receiver {\n         Some(expr) => expr,\n-        _ => return,\n+        _ => return complete_undotted_self(acc, ctx),\n     };\n \n     let receiver_ty = match ctx.sema.type_of_expr(&dot_receiver) {\n@@ -20,29 +21,64 @@ pub(crate) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext) {\n     if ctx.is_call {\n         cov_mark::hit!(test_no_struct_field_completion_for_method_call);\n     } else {\n-        complete_fields(acc, ctx, &receiver_ty);\n+        complete_fields(ctx, &receiver_ty, |field, ty| match field {\n+            Either::Left(field) => acc.add_field(ctx, None, field, &ty),\n+            Either::Right(tuple_idx) => acc.add_tuple_field(ctx, None, tuple_idx, &ty),\n+        });\n     }\n-    complete_methods(acc, ctx, &receiver_ty);\n+    complete_methods(ctx, &receiver_ty, |func| acc.add_method(ctx, func, None, None));\n+}\n+\n+fn complete_undotted_self(acc: &mut Completions, ctx: &CompletionContext) {\n+    if !ctx.is_trivial_path || !ctx.config.enable_self_on_the_fly {\n+        return;\n+    }\n+    ctx.scope.process_all_names(&mut |name, def| {\n+        if let ScopeDef::Local(local) = &def {\n+            if local.is_self(ctx.db) {\n+                let ty = local.ty(ctx.db);\n+                complete_fields(ctx, &ty, |field, ty| match field {\n+                    either::Either::Left(field) => {\n+                        acc.add_field(ctx, Some(name.clone()), field, &ty)\n+                    }\n+                    either::Either::Right(tuple_idx) => {\n+                        acc.add_tuple_field(ctx, Some(name.clone()), tuple_idx, &ty)\n+                    }\n+                });\n+                complete_methods(ctx, &ty, |func| {\n+                    acc.add_method(ctx, func, Some(name.clone()), None)\n+                });\n+            }\n+        }\n+    });\n }\n \n-fn complete_fields(acc: &mut Completions, ctx: &CompletionContext, receiver: &Type) {\n+fn complete_fields(\n+    ctx: &CompletionContext,\n+    receiver: &hir::Type,\n+    mut f: impl FnMut(Either<hir::Field, usize>, hir::Type),\n+) {\n     for receiver in receiver.autoderef(ctx.db) {\n         for (field, ty) in receiver.fields(ctx.db) {\n             if ctx.scope.module().map_or(false, |m| !field.is_visible_from(ctx.db, m)) {\n                 // Skip private field. FIXME: If the definition location of the\n                 // field is editable, we should show the completion\n                 continue;\n             }\n-            acc.add_field(ctx, field, &ty);\n+            f(Either::Left(field), ty);\n         }\n         for (i, ty) in receiver.tuple_fields(ctx.db).into_iter().enumerate() {\n             // FIXME: Handle visibility\n-            acc.add_tuple_field(ctx, i, &ty);\n+            f(Either::Right(i), ty);\n         }\n     }\n }\n \n-fn complete_methods(acc: &mut Completions, ctx: &CompletionContext, receiver: &Type) {\n+fn complete_methods(\n+    ctx: &CompletionContext,\n+    receiver: &hir::Type,\n+    mut f: impl FnMut(hir::Function),\n+) {\n     if let Some(krate) = ctx.krate {\n         let mut seen_methods = FxHashSet::default();\n         let traits_in_scope = ctx.scope.traits_in_scope();\n@@ -51,7 +87,7 @@ fn complete_methods(acc: &mut Completions, ctx: &CompletionContext, receiver: &T\n                 && ctx.scope.module().map_or(true, |m| func.is_visible_from(ctx.db, m))\n                 && seen_methods.insert(func.name(ctx.db))\n             {\n-                acc.add_method(ctx, func, None);\n+                f(func);\n             }\n             None::<()>\n         });\n@@ -484,4 +520,34 @@ impl S {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn completes_bare_fields_and_methods_in_methods() {\n+        check(\n+            r#\"\n+struct Foo { field: i32 }\n+\n+impl Foo { fn foo(&self) { $0 } }\"#,\n+            expect![[r#\"\n+                lc self       &Foo\n+                sp Self\n+                st Foo\n+                fd self.field i32\n+                me self.foo() fn(&self)\n+            \"#]],\n+        );\n+        check(\n+            r#\"\n+struct Foo(i32);\n+\n+impl Foo { fn foo(&mut self) { $0 } }\"#,\n+            expect![[r#\"\n+                lc self       &mut Foo\n+                sp Self\n+                st Foo\n+                fd self.0     i32\n+                me self.foo() fn(&mut self)\n+            \"#]],\n+        );\n+    }\n }"}, {"sha": "0ac47cdbe7eb8b273609a6ca1f5bbeacc4e42b1c", "filename": "crates/ide_completion/src/completions/record.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6ec860363a140b8aa3dcaafaf6e9d7327838610/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6ec860363a140b8aa3dcaafaf6e9d7327838610/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs?ref=e6ec860363a140b8aa3dcaafaf6e9d7327838610", "patch": "@@ -39,7 +39,7 @@ pub(crate) fn complete_record(acc: &mut Completions, ctx: &CompletionContext) ->\n     };\n \n     for (field, ty) in missing_fields {\n-        acc.add_field(ctx, field, &ty);\n+        acc.add_field(ctx, None, field, &ty);\n     }\n \n     Some(())"}, {"sha": "20188a7ddc600f75154e00aa62d9ece23d09bbc3", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6ec860363a140b8aa3dcaafaf6e9d7327838610/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6ec860363a140b8aa3dcaafaf6e9d7327838610/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=e6ec860363a140b8aa3dcaafaf6e9d7327838610", "patch": "@@ -11,6 +11,7 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n     if ctx.is_path_disallowed() || ctx.expects_item() {\n         return;\n     }\n+\n     if ctx.expects_assoc_item() {\n         ctx.scope.process_all_names(&mut |name, def| {\n             if let ScopeDef::MacroDef(macro_def) = def {\n@@ -32,6 +33,7 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n         });\n         return;\n     }\n+\n     if let Some(hir::Adt::Enum(e)) =\n         ctx.expected_type.as_ref().and_then(|ty| ty.strip_references().as_adt())\n     {"}, {"sha": "c300ce887befed5bc35a43894bfc485396cb5dcf", "filename": "crates/ide_completion/src/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e6ec860363a140b8aa3dcaafaf6e9d7327838610/crates%2Fide_completion%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6ec860363a140b8aa3dcaafaf6e9d7327838610/crates%2Fide_completion%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fconfig.rs?ref=e6ec860363a140b8aa3dcaafaf6e9d7327838610", "patch": "@@ -10,6 +10,7 @@ use ide_db::helpers::{insert_use::InsertUseConfig, SnippetCap};\n pub struct CompletionConfig {\n     pub enable_postfix_completions: bool,\n     pub enable_imports_on_the_fly: bool,\n+    pub enable_self_on_the_fly: bool,\n     pub add_call_parenthesis: bool,\n     pub add_call_argument_snippets: bool,\n     pub snippet_cap: Option<SnippetCap>,"}, {"sha": "a49a6071127bd7bab49df0ddf4b966756cd299cd", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e6ec860363a140b8aa3dcaafaf6e9d7327838610/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6ec860363a140b8aa3dcaafaf6e9d7327838610/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=e6ec860363a140b8aa3dcaafaf6e9d7327838610", "patch": "@@ -25,18 +25,20 @@ use crate::{\n \n pub(crate) fn render_field<'a>(\n     ctx: RenderContext<'a>,\n+    receiver: Option<hir::Name>,\n     field: hir::Field,\n     ty: &hir::Type,\n ) -> CompletionItem {\n-    Render::new(ctx).render_field(field, ty)\n+    Render::new(ctx).render_field(receiver, field, ty)\n }\n \n pub(crate) fn render_tuple_field<'a>(\n     ctx: RenderContext<'a>,\n+    receiver: Option<hir::Name>,\n     field: usize,\n     ty: &hir::Type,\n ) -> CompletionItem {\n-    Render::new(ctx).render_tuple_field(field, ty)\n+    Render::new(ctx).render_tuple_field(receiver, field, ty)\n }\n \n pub(crate) fn render_resolution<'a>(\n@@ -126,11 +128,19 @@ impl<'a> Render<'a> {\n         Render { ctx }\n     }\n \n-    fn render_field(&self, field: hir::Field, ty: &hir::Type) -> CompletionItem {\n+    fn render_field(\n+        &self,\n+        receiver: Option<hir::Name>,\n+        field: hir::Field,\n+        ty: &hir::Type,\n+    ) -> CompletionItem {\n         let is_deprecated = self.ctx.is_deprecated(field);\n         let name = field.name(self.ctx.db()).to_string();\n-        let mut item =\n-            CompletionItem::new(CompletionKind::Reference, self.ctx.source_range(), name.clone());\n+        let mut item = CompletionItem::new(\n+            CompletionKind::Reference,\n+            self.ctx.source_range(),\n+            receiver.map_or_else(|| name.clone(), |receiver| format!(\"{}.{}\", receiver, name)),\n+        );\n         item.kind(SymbolKind::Field)\n             .detail(ty.display(self.ctx.db()).to_string())\n             .set_documentation(field.docs(self.ctx.db()))\n@@ -151,11 +161,17 @@ impl<'a> Render<'a> {\n         item.build()\n     }\n \n-    fn render_tuple_field(&self, field: usize, ty: &hir::Type) -> CompletionItem {\n+    fn render_tuple_field(\n+        &self,\n+        receiver: Option<hir::Name>,\n+        field: usize,\n+        ty: &hir::Type,\n+    ) -> CompletionItem {\n         let mut item = CompletionItem::new(\n             CompletionKind::Reference,\n             self.ctx.source_range(),\n-            field.to_string(),\n+            receiver\n+                .map_or_else(|| field.to_string(), |receiver| format!(\"{}.{}\", receiver, field)),\n         );\n \n         item.kind(SymbolKind::Field).detail(ty.display(self.ctx.db()).to_string());"}, {"sha": "3ec77ca0f4a0a409cae19bbb2130df62a25da8d3", "filename": "crates/ide_completion/src/render/function.rs", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e6ec860363a140b8aa3dcaafaf6e9d7327838610/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6ec860363a140b8aa3dcaafaf6e9d7327838610/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs?ref=e6ec860363a140b8aa3dcaafaf6e9d7327838610", "patch": "@@ -20,23 +20,25 @@ pub(crate) fn render_fn<'a>(\n     fn_: hir::Function,\n ) -> Option<CompletionItem> {\n     let _p = profile::span(\"render_fn\");\n-    Some(FunctionRender::new(ctx, local_name, fn_, false)?.render(import_to_add))\n+    Some(FunctionRender::new(ctx, None, local_name, fn_, false)?.render(import_to_add))\n }\n \n pub(crate) fn render_method<'a>(\n     ctx: RenderContext<'a>,\n     import_to_add: Option<ImportEdit>,\n+    receiver: Option<hir::Name>,\n     local_name: Option<hir::Name>,\n     fn_: hir::Function,\n ) -> Option<CompletionItem> {\n     let _p = profile::span(\"render_method\");\n-    Some(FunctionRender::new(ctx, local_name, fn_, true)?.render(import_to_add))\n+    Some(FunctionRender::new(ctx, receiver, local_name, fn_, true)?.render(import_to_add))\n }\n \n #[derive(Debug)]\n struct FunctionRender<'a> {\n     ctx: RenderContext<'a>,\n     name: String,\n+    receiver: Option<hir::Name>,\n     func: hir::Function,\n     ast_node: Fn,\n     is_method: bool,\n@@ -45,18 +47,22 @@ struct FunctionRender<'a> {\n impl<'a> FunctionRender<'a> {\n     fn new(\n         ctx: RenderContext<'a>,\n+        receiver: Option<hir::Name>,\n         local_name: Option<hir::Name>,\n         fn_: hir::Function,\n         is_method: bool,\n     ) -> Option<FunctionRender<'a>> {\n         let name = local_name.unwrap_or_else(|| fn_.name(ctx.db())).to_string();\n         let ast_node = fn_.source(ctx.db())?.value;\n \n-        Some(FunctionRender { ctx, name, func: fn_, ast_node, is_method })\n+        Some(FunctionRender { ctx, name, receiver, func: fn_, ast_node, is_method })\n     }\n \n-    fn render(self, import_to_add: Option<ImportEdit>) -> CompletionItem {\n+    fn render(mut self, import_to_add: Option<ImportEdit>) -> CompletionItem {\n         let params = self.params();\n+        if let Some(receiver) = &self.receiver {\n+            self.name = format!(\"{}.{}\", receiver, &self.name)\n+        }\n         let mut item = CompletionItem::new(\n             CompletionKind::Reference,\n             self.ctx.source_range(),\n@@ -148,7 +154,7 @@ impl<'a> FunctionRender<'a> {\n         };\n \n         let mut params_pats = Vec::new();\n-        let params_ty = if self.ctx.completion.dot_receiver.is_some() {\n+        let params_ty = if self.ctx.completion.dot_receiver.is_some() || self.receiver.is_some() {\n             self.func.method_params(self.ctx.db()).unwrap_or_default()\n         } else {\n             if let Some(s) = ast_params.self_param() {\n@@ -253,6 +259,26 @@ impl S {\n fn bar(s: &S) {\n     s.foo(${1:x})$0\n }\n+\"#,\n+        );\n+\n+        check_edit(\n+            \"self.foo\",\n+            r#\"\n+struct S {}\n+impl S {\n+    fn foo(&self, x: i32) {\n+        $0\n+    }\n+}\n+\"#,\n+            r#\"\n+struct S {}\n+impl S {\n+    fn foo(&self, x: i32) {\n+        self.foo(${1:x})$0\n+    }\n+}\n \"#,\n         );\n     }"}, {"sha": "b0a4b2026b0b947ee243438438a40f8f24172fa7", "filename": "crates/ide_completion/src/test_utils.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e6ec860363a140b8aa3dcaafaf6e9d7327838610/crates%2Fide_completion%2Fsrc%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6ec860363a140b8aa3dcaafaf6e9d7327838610/crates%2Fide_completion%2Fsrc%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftest_utils.rs?ref=e6ec860363a140b8aa3dcaafaf6e9d7327838610", "patch": "@@ -19,6 +19,7 @@ use crate::{item::CompletionKind, CompletionConfig, CompletionItem};\n pub(crate) const TEST_CONFIG: CompletionConfig = CompletionConfig {\n     enable_postfix_completions: true,\n     enable_imports_on_the_fly: true,\n+    enable_self_on_the_fly: true,\n     add_call_parenthesis: true,\n     add_call_argument_snippets: true,\n     snippet_cap: SnippetCap::new(true),"}, {"sha": "ae78fd4f612e97af868fecd6bb06c2be030cd49e", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e6ec860363a140b8aa3dcaafaf6e9d7327838610/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6ec860363a140b8aa3dcaafaf6e9d7327838610/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=e6ec860363a140b8aa3dcaafaf6e9d7327838610", "patch": "@@ -100,6 +100,9 @@ config_data! {\n         /// Toggles the additional completions that automatically add imports when completed.\n         /// Note that your client must specify the `additionalTextEdits` LSP client capability to truly have this feature enabled.\n         completion_autoimport_enable: bool       = \"true\",\n+        /// Toggles the additional completions that automatically show method calls and field accesses\n+        /// with `self` prefixed to them when inside a method.\n+        completion_autoself_enable: bool       = \"true\",\n \n         /// Whether to show native rust-analyzer diagnostics.\n         diagnostics_enable: bool                = \"true\",\n@@ -666,6 +669,7 @@ impl Config {\n             enable_postfix_completions: self.data.completion_postfix_enable,\n             enable_imports_on_the_fly: self.data.completion_autoimport_enable\n                 && completion_item_edit_resolve(&self.caps),\n+            enable_self_on_the_fly: self.data.completion_autoself_enable,\n             add_call_parenthesis: self.data.completion_addCallParenthesis,\n             add_call_argument_snippets: self.data.completion_addCallArgumentSnippets,\n             insert_use: self.insert_use_config(),"}, {"sha": "ec36a5f5c0094e6e5bb58fb4a520fff842e8ae16", "filename": "crates/rust-analyzer/src/integrated_benchmarks.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6ec860363a140b8aa3dcaafaf6e9d7327838610/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6ec860363a140b8aa3dcaafaf6e9d7327838610/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs?ref=e6ec860363a140b8aa3dcaafaf6e9d7327838610", "patch": "@@ -132,6 +132,7 @@ fn integrated_completion_benchmark() {\n         let config = CompletionConfig {\n             enable_postfix_completions: true,\n             enable_imports_on_the_fly: true,\n+            enable_self_on_the_fly: true,\n             add_call_parenthesis: true,\n             add_call_argument_snippets: true,\n             snippet_cap: SnippetCap::new(true),\n@@ -166,6 +167,7 @@ fn integrated_completion_benchmark() {\n         let config = CompletionConfig {\n             enable_postfix_completions: true,\n             enable_imports_on_the_fly: true,\n+            enable_self_on_the_fly: true,\n             add_call_parenthesis: true,\n             add_call_argument_snippets: true,\n             snippet_cap: SnippetCap::new(true),"}, {"sha": "7428a3043ba1944198ddd770e565edb159127f2f", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e6ec860363a140b8aa3dcaafaf6e9d7327838610/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6ec860363a140b8aa3dcaafaf6e9d7327838610/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=e6ec860363a140b8aa3dcaafaf6e9d7327838610", "patch": "@@ -1178,6 +1178,7 @@ mod tests {\n                 &ide::CompletionConfig {\n                     enable_postfix_completions: true,\n                     enable_imports_on_the_fly: true,\n+                    enable_self_on_the_fly: true,\n                     add_call_parenthesis: true,\n                     add_call_argument_snippets: true,\n                     snippet_cap: SnippetCap::new(true),"}, {"sha": "2624069a5ccd8baa5ecf7e26be9a05cb3d9bca7e", "filename": "docs/dev/architecture.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e6ec860363a140b8aa3dcaafaf6e9d7327838610/docs%2Fdev%2Farchitecture.md", "raw_url": "https://github.com/rust-lang/rust/raw/e6ec860363a140b8aa3dcaafaf6e9d7327838610/docs%2Fdev%2Farchitecture.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Farchitecture.md?ref=e6ec860363a140b8aa3dcaafaf6e9d7327838610", "patch": "@@ -447,3 +447,8 @@ This is cheap enough to enable in production.\n \n Similarly, we save live object counting (`RA_COUNT=1`).\n It is not cheap enough to enable in prod, and this is a bug which should be fixed.\n+\n+### Configurability\n+\n+rust-analyzer strives to be as configurable as possible while offering reasonable defaults where no configuration exists yet.\n+There will always be features that some people find more annoying than helpful, so giving the users the ability to tweak or disable these is a big part of offering a good user experience."}, {"sha": "dbd9a3503b5569601a48f1600141f4852baa8408", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e6ec860363a140b8aa3dcaafaf6e9d7327838610/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/e6ec860363a140b8aa3dcaafaf6e9d7327838610/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=e6ec860363a140b8aa3dcaafaf6e9d7327838610", "patch": "@@ -136,6 +136,12 @@ Whether to show postfix snippets like `dbg`, `if`, `not`, etc.\n Toggles the additional completions that automatically add imports when completed.\n Note that your client must specify the `additionalTextEdits` LSP client capability to truly have this feature enabled.\n --\n+[[rust-analyzer.completion.autoself.enable]]rust-analyzer.completion.autoself.enable (default: `true`)::\n++\n+--\n+Toggles the additional completions that automatically show method calls and field accesses\n+with `self` prefixed to them when inside a method.\n+--\n [[rust-analyzer.diagnostics.enable]]rust-analyzer.diagnostics.enable (default: `true`)::\n +\n --"}, {"sha": "42a06e13744c81707cc6be2f912809c98ee485ff", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e6ec860363a140b8aa3dcaafaf6e9d7327838610/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/e6ec860363a140b8aa3dcaafaf6e9d7327838610/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=e6ec860363a140b8aa3dcaafaf6e9d7327838610", "patch": "@@ -572,6 +572,11 @@\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n+                \"rust-analyzer.completion.autoself.enable\": {\n+                    \"markdownDescription\": \"Toggles the additional completions that automatically show method calls and field accesses\\nwith `self` prefixed to them when inside a method.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n                 \"rust-analyzer.diagnostics.enable\": {\n                     \"markdownDescription\": \"Whether to show native rust-analyzer diagnostics.\",\n                     \"default\": true,"}]}