{"sha": "b70baa4f922a1809d79caeaeb902800c3be283b9", "node_id": "C_kwDOAAsO6NoAKGI3MGJhYTRmOTIyYTE4MDlkNzljYWVhZWI5MDI4MDBjM2JlMjgzYjk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-14T19:14:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-14T19:14:39Z"}, "message": "Auto merge of #105703 - matthiaskrgr:rollup-tfpeam2, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #105399 (Use more LFS functions.)\n - #105578 (Fix transmutes between pointers in different address spaces (e.g. fn ptrs on AVR))\n - #105598 (explain mem::forget(env_lock) in fork/exec)\n - #105624 (Fix unsoundness in bootstrap cache code)\n - #105630 (Add a test for #92481)\n - #105684 (Improve rustdoc markdown variable naming)\n - #105697 (Remove fee1-dead from reviewers)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "5a0604d612b44709a6ad083a1d975ae29b526252", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a0604d612b44709a6ad083a1d975ae29b526252"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b70baa4f922a1809d79caeaeb902800c3be283b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b70baa4f922a1809d79caeaeb902800c3be283b9", "html_url": "https://github.com/rust-lang/rust/commit/b70baa4f922a1809d79caeaeb902800c3be283b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b70baa4f922a1809d79caeaeb902800c3be283b9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbf8b937b44d39ba03835b82ed7ea443321eb7c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbf8b937b44d39ba03835b82ed7ea443321eb7c7", "html_url": "https://github.com/rust-lang/rust/commit/fbf8b937b44d39ba03835b82ed7ea443321eb7c7"}, {"sha": "3069bc0c14a79721bb73a4174620cee2aa27382d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3069bc0c14a79721bb73a4174620cee2aa27382d", "html_url": "https://github.com/rust-lang/rust/commit/3069bc0c14a79721bb73a4174620cee2aa27382d"}], "stats": {"total": 176, "additions": 150, "deletions": 26}, "files": [{"sha": "3860138018bb14c2a69bdfe4a5cfc37bfc1e6da3", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b70baa4f922a1809d79caeaeb902800c3be283b9/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70baa4f922a1809d79caeaeb902800c3be283b9/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=b70baa4f922a1809d79caeaeb902800c3be283b9", "patch": "@@ -1802,15 +1802,20 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         match (src.layout.abi, dst.layout.abi) {\n             (abi::Abi::Scalar(src_scalar), abi::Abi::Scalar(dst_scalar)) => {\n                 // HACK(eddyb) LLVM doesn't like `bitcast`s between pointers and non-pointers.\n-                if (src_scalar.primitive() == abi::Pointer)\n-                    == (dst_scalar.primitive() == abi::Pointer)\n-                {\n+                let src_is_ptr = src_scalar.primitive() == abi::Pointer;\n+                let dst_is_ptr = dst_scalar.primitive() == abi::Pointer;\n+                if src_is_ptr == dst_is_ptr {\n                     assert_eq!(src.layout.size, dst.layout.size);\n \n                     // NOTE(eddyb) the `from_immediate` and `to_immediate_scalar`\n                     // conversions allow handling `bool`s the same as `u8`s.\n                     let src = bx.from_immediate(src.immediate());\n-                    let src_as_dst = bx.bitcast(src, bx.backend_type(dst.layout));\n+                    // LLVM also doesn't like `bitcast`s between pointers in different address spaces.\n+                    let src_as_dst = if src_is_ptr {\n+                        bx.pointercast(src, bx.backend_type(dst.layout))\n+                    } else {\n+                        bx.bitcast(src, bx.backend_type(dst.layout))\n+                    };\n                     Immediate(bx.to_immediate_scalar(src_as_dst, dst_scalar)).store(bx, dst);\n                     return;\n                 }"}, {"sha": "818914a2df074d3f3d0ba46a57ef805f42dc6347", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b70baa4f922a1809d79caeaeb902800c3be283b9/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70baa4f922a1809d79caeaeb902800c3be283b9/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=b70baa4f922a1809d79caeaeb902800c3be283b9", "patch": "@@ -1759,8 +1759,13 @@ mod remove_dir_impl {\n     use crate::sys::common::small_c_string::run_path_with_cstr;\n     use crate::sys::{cvt, cvt_r};\n \n-    #[cfg(not(all(target_os = \"macos\", not(target_arch = \"aarch64\")),))]\n+    #[cfg(not(any(\n+        target_os = \"linux\",\n+        all(target_os = \"macos\", not(target_arch = \"aarch64\"))\n+    )))]\n     use libc::{fdopendir, openat, unlinkat};\n+    #[cfg(target_os = \"linux\")]\n+    use libc::{fdopendir, openat64 as openat, unlinkat};\n     #[cfg(all(target_os = \"macos\", not(target_arch = \"aarch64\")))]\n     use macos_weak::{fdopendir, openat, unlinkat};\n "}, {"sha": "6fa85e859c05b303495ac8e2d808832a13fd0e5b", "filename": "library/std/src/sys/unix/kernel_copy.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b70baa4f922a1809d79caeaeb902800c3be283b9/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70baa4f922a1809d79caeaeb902800c3be283b9/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs?ref=b70baa4f922a1809d79caeaeb902800c3be283b9", "patch": "@@ -61,6 +61,10 @@ use crate::ptr;\n use crate::sync::atomic::{AtomicBool, AtomicU8, Ordering};\n use crate::sys::cvt;\n use crate::sys::weak::syscall;\n+#[cfg(not(target_os = \"linux\"))]\n+use libc::sendfile as sendfile64;\n+#[cfg(target_os = \"linux\")]\n+use libc::sendfile64;\n use libc::{EBADF, EINVAL, ENOSYS, EOPNOTSUPP, EOVERFLOW, EPERM, EXDEV};\n \n #[cfg(test)]\n@@ -647,7 +651,7 @@ fn sendfile_splice(mode: SpliceMode, reader: RawFd, writer: RawFd, len: u64) ->\n \n         let result = match mode {\n             SpliceMode::Sendfile => {\n-                cvt(unsafe { libc::sendfile(writer, reader, ptr::null_mut(), chunk_size) })\n+                cvt(unsafe { sendfile64(writer, reader, ptr::null_mut(), chunk_size) })\n             }\n             SpliceMode::Splice => cvt(unsafe {\n                 splice(reader, ptr::null_mut(), writer, ptr::null_mut(), chunk_size, 0)"}, {"sha": "3d60941e84e393c0a7fac39d1fb70f736ed448db", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b70baa4f922a1809d79caeaeb902800c3be283b9/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70baa4f922a1809d79caeaeb902800c3be283b9/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=b70baa4f922a1809d79caeaeb902800c3be283b9", "patch": "@@ -95,6 +95,10 @@ pub unsafe fn init(argc: isize, argv: *const *const u8, sigpipe: u8) {\n         )))]\n         'poll: {\n             use crate::sys::os::errno;\n+            #[cfg(not(target_os = \"linux\"))]\n+            use libc::open as open64;\n+            #[cfg(target_os = \"linux\")]\n+            use libc::open64;\n             let pfds: &mut [_] = &mut [\n                 libc::pollfd { fd: 0, events: 0, revents: 0 },\n                 libc::pollfd { fd: 1, events: 0, revents: 0 },\n@@ -116,7 +120,7 @@ pub unsafe fn init(argc: isize, argv: *const *const u8, sigpipe: u8) {\n                 if pfd.revents & libc::POLLNVAL == 0 {\n                     continue;\n                 }\n-                if libc::open(\"/dev/null\\0\".as_ptr().cast(), libc::O_RDWR, 0) == -1 {\n+                if open64(\"/dev/null\\0\".as_ptr().cast(), libc::O_RDWR, 0) == -1 {\n                     // If the stream is closed but we failed to reopen it, abort the\n                     // process. Otherwise we wouldn't preserve the safety of\n                     // operations on the corresponding Rust object Stdin, Stdout, or\n@@ -139,9 +143,13 @@ pub unsafe fn init(argc: isize, argv: *const *const u8, sigpipe: u8) {\n         )))]\n         {\n             use crate::sys::os::errno;\n+            #[cfg(not(target_os = \"linux\"))]\n+            use libc::open as open64;\n+            #[cfg(target_os = \"linux\")]\n+            use libc::open64;\n             for fd in 0..3 {\n                 if libc::fcntl(fd, libc::F_GETFD) == -1 && errno() == libc::EBADF {\n-                    if libc::open(\"/dev/null\\0\".as_ptr().cast(), libc::O_RDWR, 0) == -1 {\n+                    if open64(\"/dev/null\\0\".as_ptr().cast(), libc::O_RDWR, 0) == -1 {\n                         // If the stream is closed but we failed to reopen it, abort the\n                         // process. Otherwise we wouldn't preserve the safety of\n                         // operations on the corresponding Rust object Stdin, Stdout, or"}, {"sha": "c0716a089bc38b1b2b3be521c41165e259daeb46", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b70baa4f922a1809d79caeaeb902800c3be283b9/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70baa4f922a1809d79caeaeb902800c3be283b9/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=b70baa4f922a1809d79caeaeb902800c3be283b9", "patch": "@@ -66,14 +66,15 @@ impl Command {\n         //\n         // Note that as soon as we're done with the fork there's no need to hold\n         // a lock any more because the parent won't do anything and the child is\n-        // in its own process. Thus the parent drops the lock guard while the child\n-        // forgets it to avoid unlocking it on a new thread, which would be invalid.\n+        // in its own process. Thus the parent drops the lock guard immediately.\n+        // The child calls `mem::forget` to leak the lock, which is crucial because\n+        // releasing a lock is not async-signal-safe.\n         let env_lock = sys::os::env_read_lock();\n         let (pid, pidfd) = unsafe { self.do_fork()? };\n \n         if pid == 0 {\n             crate::panic::always_abort();\n-            mem::forget(env_lock);\n+            mem::forget(env_lock); // avoid non-async-signal-safe unlocking\n             drop(input);\n             let Err(err) = unsafe { self.do_exec(theirs, envp.as_ref()) };\n             let errno = err.raw_os_error().unwrap_or(libc::EINVAL) as u32;"}, {"sha": "957e086798fd3cd786acd7f01970f42b813f2231", "filename": "library/std/src/sys/unix/stack_overflow.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b70baa4f922a1809d79caeaeb902800c3be283b9/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70baa4f922a1809d79caeaeb902800c3be283b9/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstack_overflow.rs?ref=b70baa4f922a1809d79caeaeb902800c3be283b9", "patch": "@@ -45,7 +45,10 @@ mod imp {\n     use crate::thread;\n \n     use libc::MAP_FAILED;\n-    use libc::{mmap, munmap};\n+    #[cfg(not(target_os = \"linux\"))]\n+    use libc::{mmap as mmap64, munmap};\n+    #[cfg(target_os = \"linux\")]\n+    use libc::{mmap64, munmap};\n     use libc::{sigaction, sighandler_t, SA_ONSTACK, SA_SIGINFO, SIGBUS, SIG_DFL};\n     use libc::{sigaltstack, SIGSTKSZ, SS_DISABLE};\n     use libc::{MAP_ANON, MAP_PRIVATE, PROT_NONE, PROT_READ, PROT_WRITE, SIGSEGV};\n@@ -135,7 +138,7 @@ mod imp {\n         #[cfg(not(any(target_os = \"openbsd\", target_os = \"netbsd\", target_os = \"linux\",)))]\n         let flags = MAP_PRIVATE | MAP_ANON;\n         let stackp =\n-            mmap(ptr::null_mut(), SIGSTKSZ + page_size(), PROT_READ | PROT_WRITE, flags, -1, 0);\n+            mmap64(ptr::null_mut(), SIGSTKSZ + page_size(), PROT_READ | PROT_WRITE, flags, -1, 0);\n         if stackp == MAP_FAILED {\n             panic!(\"failed to allocate an alternative stack: {}\", io::Error::last_os_error());\n         }"}, {"sha": "d454a2a717c0639a326555d3dc8b21a60450b1dd", "filename": "library/std/src/sys/unix/thread.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b70baa4f922a1809d79caeaeb902800c3be283b9/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70baa4f922a1809d79caeaeb902800c3be283b9/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs?ref=b70baa4f922a1809d79caeaeb902800c3be283b9", "patch": "@@ -653,7 +653,10 @@ pub mod guard {\n ))]\n #[cfg_attr(test, allow(dead_code))]\n pub mod guard {\n-    use libc::{mmap, mprotect};\n+    #[cfg(not(target_os = \"linux\"))]\n+    use libc::{mmap as mmap64, mprotect};\n+    #[cfg(target_os = \"linux\")]\n+    use libc::{mmap64, mprotect};\n     use libc::{MAP_ANON, MAP_FAILED, MAP_FIXED, MAP_PRIVATE, PROT_NONE, PROT_READ, PROT_WRITE};\n \n     use crate::io;\n@@ -803,7 +806,7 @@ pub mod guard {\n             // read/write permissions and only then mprotect() it to\n             // no permissions at all. See issue #50313.\n             let stackptr = get_stack_start_aligned()?;\n-            let result = mmap(\n+            let result = mmap64(\n                 stackptr,\n                 page_size,\n                 PROT_READ | PROT_WRITE,"}, {"sha": "05f25af68ea8fe5985e11370df9bbe03c2951e01", "filename": "src/bootstrap/cache.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b70baa4f922a1809d79caeaeb902800c3be283b9/src%2Fbootstrap%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70baa4f922a1809d79caeaeb902800c3be283b9/src%2Fbootstrap%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcache.rs?ref=b70baa4f922a1809d79caeaeb902800c3be283b9", "patch": "@@ -89,16 +89,16 @@ impl<T: Internable + Hash> Hash for Interned<T> {\n \n impl<T: Internable + Deref> Deref for Interned<T> {\n     type Target = T::Target;\n-    fn deref(&self) -> &'static Self::Target {\n+    fn deref(&self) -> &Self::Target {\n         let l = T::intern_cache().lock().unwrap();\n-        unsafe { mem::transmute::<&Self::Target, &'static Self::Target>(l.get(*self)) }\n+        unsafe { mem::transmute::<&Self::Target, &Self::Target>(l.get(*self)) }\n     }\n }\n \n impl<T: Internable + AsRef<U>, U: ?Sized> AsRef<U> for Interned<T> {\n-    fn as_ref(&self) -> &'static U {\n+    fn as_ref(&self) -> &U {\n         let l = T::intern_cache().lock().unwrap();\n-        unsafe { mem::transmute::<&U, &'static U>(l.get(*self).as_ref()) }\n+        unsafe { mem::transmute::<&U, &U>(l.get(*self).as_ref()) }\n     }\n }\n "}, {"sha": "b141820fe423c549217a41e58745f56d763009b6", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b70baa4f922a1809d79caeaeb902800c3be283b9/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70baa4f922a1809d79caeaeb902800c3be283b9/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=b70baa4f922a1809d79caeaeb902800c3be283b9", "patch": "@@ -236,12 +236,12 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'_, 'a, I> {\n             return event;\n         };\n \n-        let mut origtext = String::new();\n+        let mut original_text = String::new();\n         for event in &mut self.inner {\n             match event {\n                 Event::End(Tag::CodeBlock(..)) => break,\n                 Event::Text(ref s) => {\n-                    origtext.push_str(s);\n+                    original_text.push_str(s);\n                 }\n                 _ => {}\n             }\n@@ -258,7 +258,7 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'_, 'a, I> {\n                                  <pre class=\\\"language-{}\\\"><code>{}</code></pre>\\\n                              </div>\",\n                             lang,\n-                            Escape(&origtext),\n+                            Escape(&original_text),\n                         )\n                         .into(),\n                     ));\n@@ -268,7 +268,7 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'_, 'a, I> {\n             CodeBlockKind::Indented => Default::default(),\n         };\n \n-        let lines = origtext.lines().filter_map(|l| map_line(l).for_html());\n+        let lines = original_text.lines().filter_map(|l| map_line(l).for_html());\n         let text = lines.intersperse(\"\\n\".into()).collect::<String>();\n \n         compile_fail = parse_result.compile_fail;\n@@ -285,7 +285,7 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'_, 'a, I> {\n             if url.is_empty() {\n                 return None;\n             }\n-            let test = origtext\n+            let test = original_text\n                 .lines()\n                 .map(|l| map_line(l).for_code())\n                 .intersperse(\"\\n\".into())"}, {"sha": "e9740e30da483d6a5231c8e47a17fe2a678d015a", "filename": "src/test/codegen/avr/avr-func-addrspace.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b70baa4f922a1809d79caeaeb902800c3be283b9/src%2Ftest%2Fcodegen%2Favr%2Favr-func-addrspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70baa4f922a1809d79caeaeb902800c3be283b9/src%2Ftest%2Fcodegen%2Favr%2Favr-func-addrspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Favr%2Favr-func-addrspace.rs?ref=b70baa4f922a1809d79caeaeb902800c3be283b9", "patch": "@@ -9,7 +9,7 @@\n // It also validates that functions can be called through function pointers\n // through traits.\n \n-#![feature(no_core, lang_items, unboxed_closures, arbitrary_self_types)]\n+#![feature(no_core, lang_items, intrinsics, unboxed_closures, arbitrary_self_types)]\n #![crate_type = \"lib\"]\n #![no_core]\n \n@@ -49,6 +49,10 @@ pub trait Fn<Args: Tuple>: FnOnce<Args> {\n     extern \"rust-call\" fn call(&self, args: Args) -> Self::Output;\n }\n \n+extern \"rust-intrinsic\" {\n+    pub fn transmute<Src, Dst>(src: Src) -> Dst;\n+}\n+\n pub static mut STORAGE_FOO: fn(&usize, &mut u32) -> Result<(), ()> = arbitrary_black_box;\n pub static mut STORAGE_BAR: u32 = 12;\n \n@@ -87,3 +91,21 @@ pub extern \"C\" fn test() {\n         STORAGE_FOO(&1, &mut buf);\n     }\n }\n+\n+// Validate that we can codegen transmutes between data ptrs and fn ptrs.\n+\n+// CHECK: define{{.+}}{{void \\(\\) addrspace\\(1\\)\\*|ptr addrspace\\(1\\)}} @transmute_data_ptr_to_fn({{\\{\\}\\*|ptr}}{{.*}} %x)\n+#[no_mangle]\n+pub unsafe fn transmute_data_ptr_to_fn(x: *const ()) -> fn() {\n+    // It doesn't matter precisely how this is codegenned (through memory or an addrspacecast),\n+    // as long as it doesn't cause a verifier error by using `bitcast`.\n+    transmute(x)\n+}\n+\n+// CHECK: define{{.+}}{{\\{\\}\\*|ptr}} @transmute_fn_ptr_to_data({{void \\(\\) addrspace\\(1\\)\\*|ptr addrspace\\(1\\)}}{{.*}} %x)\n+#[no_mangle]\n+pub unsafe fn transmute_fn_ptr_to_data(x: fn()) -> *const () {\n+    // It doesn't matter precisely how this is codegenned (through memory or an addrspacecast),\n+    // as long as it doesn't cause a verifier error by using `bitcast`.\n+    transmute(x)\n+}"}, {"sha": "0a6b1843d996cb488e5d029dc691b9a99777f119", "filename": "src/test/ui/typeck/issue-92481.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b70baa4f922a1809d79caeaeb902800c3be283b9/src%2Ftest%2Fui%2Ftypeck%2Fissue-92481.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70baa4f922a1809d79caeaeb902800c3be283b9/src%2Ftest%2Fui%2Ftypeck%2Fissue-92481.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-92481.rs?ref=b70baa4f922a1809d79caeaeb902800c3be283b9", "patch": "@@ -0,0 +1,14 @@\n+//check-fail\n+\n+#![crate_type=\"lib\"]\n+\n+fn r({) {\n+    Ok {             //~ ERROR mismatched types [E0308]\n+        d..||_=m\n+    }\n+}\n+//~^^^^^ ERROR expected parameter name, found `{`\n+//~| ERROR expected one of `,`, `:`, or `}`, found `..`\n+//~^^^^^ ERROR cannot find value `d` in this scope [E0425]\n+//~| ERROR cannot find value `m` in this scope [E0425]\n+//~| ERROR variant `Result<_, _>::Ok` has no field named `d` [E0559]"}, {"sha": "cd778a649b621003694cd24858a3676316db0536", "filename": "src/test/ui/typeck/issue-92481.stderr", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/b70baa4f922a1809d79caeaeb902800c3be283b9/src%2Ftest%2Fui%2Ftypeck%2Fissue-92481.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b70baa4f922a1809d79caeaeb902800c3be283b9/src%2Ftest%2Fui%2Ftypeck%2Fissue-92481.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-92481.stderr?ref=b70baa4f922a1809d79caeaeb902800c3be283b9", "patch": "@@ -0,0 +1,60 @@\n+error: expected parameter name, found `{`\n+  --> $DIR/issue-92481.rs:5:6\n+   |\n+LL | fn r({) {\n+   |      ^ expected parameter name\n+\n+error: expected one of `,`, `:`, or `}`, found `..`\n+  --> $DIR/issue-92481.rs:5:6\n+   |\n+LL | fn r({) {\n+   |      ^ unclosed delimiter\n+LL |     Ok {\n+LL |         d..||_=m\n+   |          -^\n+   |          |\n+   |          help: `}` may belong here\n+\n+error[E0425]: cannot find value `d` in this scope\n+  --> $DIR/issue-92481.rs:7:9\n+   |\n+LL |         d..||_=m\n+   |         ^ not found in this scope\n+\n+error[E0425]: cannot find value `m` in this scope\n+  --> $DIR/issue-92481.rs:7:16\n+   |\n+LL |         d..||_=m\n+   |                ^ not found in this scope\n+\n+error[E0559]: variant `Result<_, _>::Ok` has no field named `d`\n+  --> $DIR/issue-92481.rs:7:9\n+   |\n+LL |         d..||_=m\n+   |         ^ field does not exist\n+  --> $SRC_DIR/core/src/result.rs:LL:COL\n+   |\n+   = note: `Result<_, _>::Ok` defined here\n+   |\n+help: `Result<_, _>::Ok` is a tuple variant, use the appropriate syntax\n+   |\n+LL |     Result<_, _>::Ok(/* fields */)\n+   |\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-92481.rs:6:5\n+   |\n+LL |   fn r({) {\n+   |           - help: a return type might be missing here: `-> _`\n+LL | /     Ok {\n+LL | |         d..||_=m\n+LL | |     }\n+   | |_____^ expected `()`, found enum `Result`\n+   |\n+   = note: expected unit type `()`\n+                   found enum `Result<_, _>`\n+\n+error: aborting due to 6 previous errors\n+\n+Some errors have detailed explanations: E0308, E0425, E0559.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "46a3bab42a17e21364007d6c5657b206012a99e6", "filename": "triagebot.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b70baa4f922a1809d79caeaeb902800c3be283b9/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b70baa4f922a1809d79caeaeb902800c3be283b9/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=b70baa4f922a1809d79caeaeb902800c3be283b9", "patch": "@@ -467,7 +467,6 @@ compiler-team-contributors = [\n     \"@compiler-errors\",\n     \"@eholk\",\n     \"@jackh726\",\n-    \"@fee1-dead\",\n     \"@TaKO8Ki\",\n     \"@Nilstrieb\",\n ]"}]}