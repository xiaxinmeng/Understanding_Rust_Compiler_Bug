{"sha": "74258eaefacee4272cd68819a135d79dfd278291", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0MjU4ZWFlZmFjZWU0MjcyY2Q2ODgxOWExMzVkNzlkZmQyNzgyOTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-12T07:16:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-12T07:16:27Z"}, "message": "auto merge of #11491 : wting/rust/wting_7959_document_inline_attributes, r=alexcrichton\n\nCloses #7959.", "tree": {"sha": "dd7bbde792a9165d6cb9bcf2cee151ab60f0e71f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd7bbde792a9165d6cb9bcf2cee151ab60f0e71f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74258eaefacee4272cd68819a135d79dfd278291", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74258eaefacee4272cd68819a135d79dfd278291", "html_url": "https://github.com/rust-lang/rust/commit/74258eaefacee4272cd68819a135d79dfd278291", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74258eaefacee4272cd68819a135d79dfd278291/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e8a4a0e0065be2ad4c6e0cfd8c2d2bc0fc702d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e8a4a0e0065be2ad4c6e0cfd8c2d2bc0fc702d8", "html_url": "https://github.com/rust-lang/rust/commit/3e8a4a0e0065be2ad4c6e0cfd8c2d2bc0fc702d8"}, {"sha": "826f24bdf1a8871e2684738b47952d3c7c2a9cdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/826f24bdf1a8871e2684738b47952d3c7c2a9cdf", "html_url": "https://github.com/rust-lang/rust/commit/826f24bdf1a8871e2684738b47952d3c7c2a9cdf"}], "stats": {"total": 34, "additions": 28, "deletions": 6}, "files": [{"sha": "5672e00e6d11bd5cd286aa8e5d92c6f9a4362185", "filename": "doc/rust.md", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/74258eaefacee4272cd68819a135d79dfd278291/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/74258eaefacee4272cd68819a135d79dfd278291/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=74258eaefacee4272cd68819a135d79dfd278291", "patch": "@@ -1215,7 +1215,7 @@ A static item must have a _constant expression_ giving its definition.\n \n Static items must be explicitly typed.\n The type may be ```bool```, ```char```, a number, or a type derived from those primitive types.\n-The derived types are references with the `'static` lifetime,\n+The derived types are references with the `static` lifetime,\n fixed-size arrays, tuples, and structs.\n \n ~~~~\n@@ -1730,14 +1730,17 @@ names are effectively reserved. Some significant attributes include:\n \n * The `doc` attribute, for documenting code in-place.\n * The `cfg` attribute, for conditional-compilation by build-configuration.\n-* The `lang` attribute, for custom definitions of traits and functions that are known to the Rust compiler (see [Language items](#language-items)).\n-* The `link` attribute, for describing linkage metadata for a extern blocks.\n * The `crate_id` attribute, for describing the package ID of a crate.\n+* The `lang` attribute, for custom definitions of traits and functions that are\n+  known to the Rust compiler (see [Language items](#language-items)).\n+* The `link` attribute, for describing linkage metadata for a extern blocks.\n * The `test` attribute, for marking functions as unit tests.\n * The `allow`, `warn`, `forbid`, and `deny` attributes, for\n   controlling lint checks (see [Lint check attributes](#lint-check-attributes)).\n * The `deriving` attribute, for automatically generating\n   implementations of certain traits.\n+* The `inline` attribute, for expanding functions at caller location (see\n+  [Inline attributes](#inline-attributes)).\n * The `static_assert` attribute, for asserting that a static bool is true at compiletime\n * The `thread_local` attribute, for defining a `static mut` as a thread-local. Note that this is\n   only a low-level building block, and is not local to a *task*, nor does it provide safety.\n@@ -1910,6 +1913,25 @@ A complete list of the built-in language items follows:\n > **Note:** This list is likely to become out of date. We should auto-generate it\n > from `librustc/middle/lang_items.rs`.\n \n+### Inline attributes\n+\n+The inline attribute is used to suggest to the compiler to perform an inline\n+expansion and place a copy of the function in the caller rather than generating\n+code to call the function where it is defined.\n+\n+The compiler automatically inlines functions based on internal heuristics.\n+Incorrectly inlining functions can actually making the program slower, so it\n+should be used with care.\n+\n+`#[inline]` and `#[inline(always)]` always causes the function to be serialized\n+into crate metadata to allow cross-crate inlining.\n+\n+There are three different types of inline attributes:\n+\n+* `#[inline]` hints the compiler to perform an inline expansion.\n+* `#[inline(always)]` asks the compiler to always perform an inline expansion.\n+* `#[inline(never)]` asks the compiler to never perform an inline expansion.\n+\n ### Deriving\n \n The `deriving` attribute allows certain traits to be automatically\n@@ -3223,12 +3245,12 @@ The type of a closure mapping an input of type `A` to an output of type `B` is `\n An example of creating and calling a closure:\n \n ```rust\n-let captured_var = 10; \n+let captured_var = 10;\n \n-let closure_no_args = || println!(\"captured_var={}\", captured_var); \n+let closure_no_args = || println!(\"captured_var={}\", captured_var);\n \n let closure_args = |arg: int| -> int {\n-  println!(\"captured_var={}, arg={}\", captured_var, arg); \n+  println!(\"captured_var={}, arg={}\", captured_var, arg);\n   arg // Note lack of semicolon after 'arg'\n };\n "}]}