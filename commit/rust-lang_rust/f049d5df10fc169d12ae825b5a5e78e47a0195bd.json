{"sha": "f049d5df10fc169d12ae825b5a5e78e47a0195bd", "node_id": "C_kwDOAAsO6NoAKGYwNDlkNWRmMTBmYzE2OWQxMmFlODI1YjVhNWU3OGU0N2EwMTk1YmQ", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-03-31T04:06:08Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-03-31T04:34:00Z"}, "message": "Remove an unnecessary use of `with_session_globals`.\n\nWe can easily pass in the source map.", "tree": {"sha": "e63b4e5ce33b8f5b196c4751000b203323d8a6f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e63b4e5ce33b8f5b196c4751000b203323d8a6f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f049d5df10fc169d12ae825b5a5e78e47a0195bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f049d5df10fc169d12ae825b5a5e78e47a0195bd", "html_url": "https://github.com/rust-lang/rust/commit/f049d5df10fc169d12ae825b5a5e78e47a0195bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f049d5df10fc169d12ae825b5a5e78e47a0195bd/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1d3610ac1ddd1cd605479274047fd0a3f37d220", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1d3610ac1ddd1cd605479274047fd0a3f37d220", "html_url": "https://github.com/rust-lang/rust/commit/c1d3610ac1ddd1cd605479274047fd0a3f37d220"}], "stats": {"total": 26, "additions": 12, "deletions": 14}, "files": [{"sha": "26bc216f678cfb5be2f18d5e2facfef20c668037", "filename": "compiler/rustc_expand/src/proc_macro.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f049d5df10fc169d12ae825b5a5e78e47a0195bd/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f049d5df10fc169d12ae825b5a5e78e47a0195bd/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs?ref=f049d5df10fc169d12ae825b5a5e78e47a0195bd", "patch": "@@ -54,7 +54,7 @@ impl base::BangProcMacro for BangProcMacro {\n     ) -> Result<TokenStream, ErrorGuaranteed> {\n         let _timer =\n             ecx.sess.prof.generic_activity_with_arg_recorder(\"expand_proc_macro\", |recorder| {\n-                recorder.record_arg_with_span(ecx.expansion_descr(), span);\n+                recorder.record_arg_with_span(ecx.sess.source_map(), ecx.expansion_descr(), span);\n             });\n \n         let proc_macro_backtrace = ecx.ecfg.proc_macro_backtrace;\n@@ -85,7 +85,7 @@ impl base::AttrProcMacro for AttrProcMacro {\n     ) -> Result<TokenStream, ErrorGuaranteed> {\n         let _timer =\n             ecx.sess.prof.generic_activity_with_arg_recorder(\"expand_proc_macro\", |recorder| {\n-                recorder.record_arg_with_span(ecx.expansion_descr(), span);\n+                recorder.record_arg_with_span(ecx.sess.source_map(), ecx.expansion_descr(), span);\n             });\n \n         let proc_macro_backtrace = ecx.ecfg.proc_macro_backtrace;\n@@ -134,7 +134,11 @@ impl MultiItemModifier for DeriveProcMacro {\n         let stream = {\n             let _timer =\n                 ecx.sess.prof.generic_activity_with_arg_recorder(\"expand_proc_macro\", |recorder| {\n-                    recorder.record_arg_with_span(ecx.expansion_descr(), span);\n+                    recorder.record_arg_with_span(\n+                        ecx.sess.source_map(),\n+                        ecx.expansion_descr(),\n+                        span,\n+                    );\n                 });\n             let proc_macro_backtrace = ecx.ecfg.proc_macro_backtrace;\n             let strategy = exec_strategy(ecx);"}, {"sha": "66e5369da3ae1a8da287a3f2f5b15f743551b7cc", "filename": "compiler/rustc_span/src/profiling.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f049d5df10fc169d12ae825b5a5e78e47a0195bd/compiler%2Frustc_span%2Fsrc%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f049d5df10fc169d12ae825b5a5e78e47a0195bd/compiler%2Frustc_span%2Fsrc%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fprofiling.rs?ref=f049d5df10fc169d12ae825b5a5e78e47a0195bd", "patch": "@@ -1,3 +1,5 @@\n+use crate::source_map::SourceMap;\n+\n use std::borrow::Borrow;\n \n use rustc_data_structures::profiling::EventArgRecorder;\n@@ -11,25 +13,17 @@ pub trait SpannedEventArgRecorder {\n     ///\n     /// Note: when self-profiling with costly event arguments, at least one argument\n     /// needs to be recorded. A panic will be triggered if that doesn't happen.\n-    fn record_arg_with_span<A>(&mut self, event_arg: A, span: crate::Span)\n+    fn record_arg_with_span<A>(&mut self, source_map: &SourceMap, event_arg: A, span: crate::Span)\n     where\n         A: Borrow<str> + Into<String>;\n }\n \n impl SpannedEventArgRecorder for EventArgRecorder<'_> {\n-    fn record_arg_with_span<A>(&mut self, event_arg: A, span: crate::Span)\n+    fn record_arg_with_span<A>(&mut self, source_map: &SourceMap, event_arg: A, span: crate::Span)\n     where\n         A: Borrow<str> + Into<String>,\n     {\n         self.record_arg(event_arg);\n-\n-        let span_arg = crate::with_session_globals(|session_globals| {\n-            if let Some(source_map) = &*session_globals.source_map.borrow() {\n-                source_map.span_to_embeddable_string(span)\n-            } else {\n-                format!(\"{span:?}\")\n-            }\n-        });\n-        self.record_arg(span_arg);\n+        self.record_arg(source_map.span_to_embeddable_string(span));\n     }\n }"}]}