{"sha": "0c38f31bf23506ad33bbd922ea6095f1010712df", "node_id": "C_kwDOAAsO6NoAKDBjMzhmMzFiZjIzNTA2YWQzM2JiZDkyMmVhNjA5NWYxMDEwNzEyZGY", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-10-22T20:39:33Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-10-29T12:25:15Z"}, "message": "Add tests for recursive deref", "tree": {"sha": "d3c6ee062db7dba2780aee58b41846db38749aa7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3c6ee062db7dba2780aee58b41846db38749aa7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c38f31bf23506ad33bbd922ea6095f1010712df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c38f31bf23506ad33bbd922ea6095f1010712df", "html_url": "https://github.com/rust-lang/rust/commit/0c38f31bf23506ad33bbd922ea6095f1010712df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c38f31bf23506ad33bbd922ea6095f1010712df/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a473ca3469340741a7108d52dd488c799f70fad", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a473ca3469340741a7108d52dd488c799f70fad", "html_url": "https://github.com/rust-lang/rust/commit/8a473ca3469340741a7108d52dd488c799f70fad"}], "stats": {"total": 177, "additions": 169, "deletions": 8}, "files": [{"sha": "b306eb98bb55e0b64e5fabaee888bbf903f0c73d", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0c38f31bf23506ad33bbd922ea6095f1010712df/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c38f31bf23506ad33bbd922ea6095f1010712df/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=0c38f31bf23506ad33bbd922ea6095f1010712df", "patch": "@@ -81,8 +81,8 @@ crate fn collect_trait_impls(krate: Crate, cx: &mut DocContext<'_>) -> Crate {\n     // scan through included items ahead of time to splice in Deref targets to the \"valid\" sets\n     for it in &new_items {\n         if let ImplItem(Impl { ref for_, ref trait_, ref items, .. }) = *it.kind {\n-            if cleaner.keep_impl(for_)\n-                && trait_.as_ref().map(|t| t.def_id()) == cx.tcx.lang_items().deref_trait()\n+            if trait_.as_ref().map(|t| t.def_id()) == cx.tcx.lang_items().deref_trait()\n+                && cleaner.keep_impl(for_)\n             {\n                 let target = items\n                     .iter()\n@@ -221,8 +221,11 @@ impl BadImplStripper {\n             true\n         } else if let Some(prim) = ty.primitive_type() {\n             self.prims.contains(&prim)\n-        } else if let Some(did) = ty.def_id_no_primitives() {\n-            self.keep_impl_with_def_id(did.into())\n+        } else if ty.def_id_no_primitives().is_some() {\n+            // We want to keep *ALL* deref implementations in case some of them are used in\n+            // the current crate.\n+            // FIXME: Try to filter the one actually used...\n+            true\n         } else {\n             false\n         }"}, {"sha": "c44fd27f40305b38e454d00232ae2859dbcccfef", "filename": "src/test/rustdoc-ui/recursive-deref-ice.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0c38f31bf23506ad33bbd922ea6095f1010712df/src%2Ftest%2Frustdoc-ui%2Frecursive-deref-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c38f31bf23506ad33bbd922ea6095f1010712df/src%2Ftest%2Frustdoc-ui%2Frecursive-deref-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Frecursive-deref-ice.rs?ref=0c38f31bf23506ad33bbd922ea6095f1010712df", "patch": "@@ -0,0 +1,19 @@\n+// check-pass\n+\n+// ICE found in https://github.com/rust-lang/rust/issues/83123\n+\n+pub struct Attribute;\n+\n+pub struct Map<'hir> {}\n+impl<'hir> Map<'hir> {\n+    pub fn attrs(&self) -> &'hir [Attribute] { &[] }\n+}\n+\n+pub struct List<T>(T);\n+\n+impl<T> std::ops::Deref for List<T> {\n+    type Target = [T];\n+    fn deref(&self) -> &[T] {\n+        &[]\n+    }\n+}"}, {"sha": "ac23eced38671b5d3c7bad5787f9a8a3d8b381e1", "filename": "src/test/rustdoc/deref-recursive-pathbuf.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0c38f31bf23506ad33bbd922ea6095f1010712df/src%2Ftest%2Frustdoc%2Fderef-recursive-pathbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c38f31bf23506ad33bbd922ea6095f1010712df/src%2Ftest%2Frustdoc%2Fderef-recursive-pathbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fderef-recursive-pathbuf.rs?ref=0c38f31bf23506ad33bbd922ea6095f1010712df", "patch": "@@ -0,0 +1,24 @@\n+// #26207: Show all methods reachable via Deref impls, recursing through multiple dereferencing\n+// levels and across multiple crates.\n+\n+// @has 'foo/struct.Foo.html'\n+// @has '-' '//*[@id=\"deref-methods-PathBuf\"]' 'Methods from Deref<Target = PathBuf>'\n+// @has '-' '//*[@class=\"impl-items\"]//*[@id=\"method.as_path\"]' 'pub fn as_path(&self)'\n+// @has '-' '//*[@id=\"deref-methods-Path\"]' 'Methods from Deref<Target = Path>'\n+// @has '-' '//*[@class=\"impl-items\"]//*[@id=\"method.exists\"]' 'pub fn exists(&self)'\n+// @has '-' '//*[@class=\"sidebar-title\"]/a[@href=\"#deref-methods-PathBuf\"]' 'Methods from Deref<Target=PathBuf>'\n+// @has '-' '//*[@class=\"sidebar-links\"]/a[@href=\"#method.as_path\"]' 'as_path'\n+// @has '-' '//*[@class=\"sidebar-title\"]/a[@href=\"#deref-methods-Path\"]' 'Methods from Deref<Target=Path>'\n+// @has '-' '//*[@class=\"sidebar-links\"]/a[@href=\"#method.exists\"]' 'exists'\n+\n+#![crate_name = \"foo\"]\n+\n+use std::ops::Deref;\n+use std::path::PathBuf;\n+\n+pub struct Foo(PathBuf);\n+\n+impl Deref for Foo {\n+    type Target = PathBuf;\n+    fn deref(&self) -> &PathBuf { &self.0 }\n+}"}, {"sha": "ac43b10ec85f57b72c6dabea13faf89cb2346fc7", "filename": "src/test/rustdoc/deref-recursive.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/0c38f31bf23506ad33bbd922ea6095f1010712df/src%2Ftest%2Frustdoc%2Fderef-recursive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c38f31bf23506ad33bbd922ea6095f1010712df/src%2Ftest%2Frustdoc%2Fderef-recursive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fderef-recursive.rs?ref=0c38f31bf23506ad33bbd922ea6095f1010712df", "patch": "@@ -0,0 +1,40 @@\n+// #26207: Show all methods reachable via Deref impls, recursing through multiple dereferencing\n+// levels if needed.\n+\n+// @has 'foo/struct.Foo.html'\n+// @has '-' '//*[@id=\"deref-methods-Bar\"]' 'Methods from Deref<Target = Bar>'\n+// @has '-' '//*[@class=\"impl-items\"]//*[@id=\"method.bar\"]' 'pub fn bar(&self)'\n+// @has '-' '//*[@id=\"deref-methods-Baz\"]' 'Methods from Deref<Target = Baz>'\n+// @has '-' '//*[@class=\"impl-items\"]//*[@id=\"method.baz\"]' 'pub fn baz(&self)'\n+// @has '-' '//*[@class=\"sidebar-title\"]/a[@href=\"#deref-methods-Bar\"]' 'Methods from Deref<Target=Bar>'\n+// @has '-' '//*[@class=\"sidebar-links\"]/a[@href=\"#method.bar\"]' 'bar'\n+// @has '-' '//*[@class=\"sidebar-title\"]/a[@href=\"#deref-methods-Baz\"]' 'Methods from Deref<Target=Baz>'\n+// @has '-' '//*[@class=\"sidebar-links\"]/a[@href=\"#method.baz\"]' 'baz'\n+\n+#![crate_name = \"foo\"]\n+\n+use std::ops::Deref;\n+\n+pub struct Foo(Bar);\n+pub struct Bar(Baz);\n+pub struct Baz;\n+\n+impl Deref for Foo {\n+    type Target = Bar;\n+    fn deref(&self) -> &Bar { &self.0 }\n+}\n+\n+impl Deref for Bar {\n+    type Target = Baz;\n+    fn deref(&self) -> &Baz { &self.0 }\n+}\n+\n+impl Bar {\n+    /// This appears under `Foo` methods\n+    pub fn bar(&self) {}\n+}\n+\n+impl Baz {\n+    /// This should also appear in `Foo` methods when recursing\n+    pub fn baz(&self) {}\n+}"}, {"sha": "ad7a96c5dad1fc7c6ce37cc1746c13b7387b85d7", "filename": "src/test/rustdoc/deref-typedef.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c38f31bf23506ad33bbd922ea6095f1010712df/src%2Ftest%2Frustdoc%2Fderef-typedef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c38f31bf23506ad33bbd922ea6095f1010712df/src%2Ftest%2Frustdoc%2Fderef-typedef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fderef-typedef.rs?ref=0c38f31bf23506ad33bbd922ea6095f1010712df", "patch": "@@ -1,12 +1,12 @@\n #![crate_name = \"foo\"]\n \n // @has 'foo/struct.Bar.html'\n-// @has '-' '//*[@id=\"deref-methods\"]' 'Methods from Deref<Target = FooJ>'\n+// @has '-' '//*[@id=\"deref-methods-FooJ\"]' 'Methods from Deref<Target = FooJ>'\n // @has '-' '//*[@class=\"impl-items\"]//*[@id=\"method.foo_a\"]' 'pub fn foo_a(&self)'\n // @has '-' '//*[@class=\"impl-items\"]//*[@id=\"method.foo_b\"]' 'pub fn foo_b(&self)'\n // @has '-' '//*[@class=\"impl-items\"]//*[@id=\"method.foo_c\"]' 'pub fn foo_c(&self)'\n // @has '-' '//*[@class=\"impl-items\"]//*[@id=\"method.foo_j\"]' 'pub fn foo_j(&self)'\n-// @has '-' '//*[@class=\"sidebar-title\"]/a[@href=\"#deref-methods\"]' 'Methods from Deref<Target=FooJ>'\n+// @has '-' '//*[@class=\"sidebar-title\"]/a[@href=\"#deref-methods-FooJ\"]' 'Methods from Deref<Target=FooJ>'\n // @has '-' '//*[@class=\"sidebar-links\"]/a[@href=\"#method.foo_a\"]' 'foo_a'\n // @has '-' '//*[@class=\"sidebar-links\"]/a[@href=\"#method.foo_b\"]' 'foo_b'\n // @has '-' '//*[@class=\"sidebar-links\"]/a[@href=\"#method.foo_c\"]' 'foo_c'"}, {"sha": "65a7debc2538dd8e1804d0a302956a0e60fe5c2c", "filename": "src/test/rustdoc/recursive-deref-sidebar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c38f31bf23506ad33bbd922ea6095f1010712df/src%2Ftest%2Frustdoc%2Frecursive-deref-sidebar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c38f31bf23506ad33bbd922ea6095f1010712df/src%2Ftest%2Frustdoc%2Frecursive-deref-sidebar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Frecursive-deref-sidebar.rs?ref=0c38f31bf23506ad33bbd922ea6095f1010712df", "patch": "@@ -15,7 +15,7 @@ impl Deref for A {\n     fn deref(&self) -> &B { todo!() }\n }\n \n-// @!has recursive_deref_sidebar/struct.A.html '//div[@class=\"sidebar-links\"]' 'foo_c'\n+// @has recursive_deref_sidebar/struct.A.html '//div[@class=\"sidebar-links\"]' 'foo_c'\n impl Deref for B {\n     type Target = C;\n     fn deref(&self) -> &C { todo!() }"}, {"sha": "18634e1b3606dd0135b25cbf67df08ea5b03d38d", "filename": "src/test/rustdoc/recursive-deref.rs", "status": "modified", "additions": 76, "deletions": 1, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/0c38f31bf23506ad33bbd922ea6095f1010712df/src%2Ftest%2Frustdoc%2Frecursive-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c38f31bf23506ad33bbd922ea6095f1010712df/src%2Ftest%2Frustdoc%2Frecursive-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Frecursive-deref.rs?ref=0c38f31bf23506ad33bbd922ea6095f1010712df", "patch": "@@ -1,7 +1,9 @@\n use std::ops::Deref;\n \n+// Cyclic deref with the parent (which is not the top parent).\n pub struct A;\n pub struct B;\n+pub struct C;\n \n // @has recursive_deref/struct.A.html '//h3[@class=\"code-header in-band\"]' 'impl Deref for A'\n impl Deref for A {\n@@ -14,7 +16,80 @@ impl Deref for A {\n \n // @has recursive_deref/struct.B.html '//h3[@class=\"code-header in-band\"]' 'impl Deref for B'\n impl Deref for B {\n-    type Target = A;\n+    type Target = C;\n+\n+    fn deref(&self) -> &Self::Target {\n+        panic!()\n+    }\n+}\n+\n+// @has recursive_deref/struct.C.html '//h3[@class=\"code-header in-band\"]' 'impl Deref for C'\n+impl Deref for C {\n+    type Target = B;\n+\n+    fn deref(&self) -> &Self::Target {\n+        panic!()\n+    }\n+}\n+\n+// Cyclic deref with the grand-parent (which is not the top parent).\n+pub struct D;\n+pub struct E;\n+pub struct F;\n+pub struct G;\n+\n+// @has recursive_deref/struct.D.html '//h3[@class=\"code-header in-band\"]' 'impl Deref for D'\n+impl Deref for D {\n+    type Target = E;\n+\n+    fn deref(&self) -> &Self::Target {\n+        panic!()\n+    }\n+}\n+\n+// @has recursive_deref/struct.E.html '//h3[@class=\"code-header in-band\"]' 'impl Deref for E'\n+impl Deref for E {\n+    type Target = F;\n+\n+    fn deref(&self) -> &Self::Target {\n+        panic!()\n+    }\n+}\n+\n+// @has recursive_deref/struct.F.html '//h3[@class=\"code-header in-band\"]' 'impl Deref for F'\n+impl Deref for F {\n+    type Target = G;\n+\n+    fn deref(&self) -> &Self::Target {\n+        panic!()\n+    }\n+}\n+\n+// @has recursive_deref/struct.G.html '//h3[@class=\"code-header in-band\"]' 'impl Deref for G'\n+impl Deref for G {\n+    type Target = E;\n+\n+    fn deref(&self) -> &Self::Target {\n+        panic!()\n+    }\n+}\n+\n+// Cyclic deref with top parent.\n+pub struct H;\n+pub struct I;\n+\n+// @has recursive_deref/struct.H.html '//h3[@class=\"code-header in-band\"]' 'impl Deref for H'\n+impl Deref for H {\n+    type Target = I;\n+\n+    fn deref(&self) -> &Self::Target {\n+        panic!()\n+    }\n+}\n+\n+// @has recursive_deref/struct.I.html '//h3[@class=\"code-header in-band\"]' 'impl Deref for I'\n+impl Deref for I {\n+    type Target = H;\n \n     fn deref(&self) -> &Self::Target {\n         panic!()"}]}