{"sha": "df0bcfe6448793e423bd6b8fd5294f10798dd469", "node_id": "C_kwDOAAsO6NoAKGRmMGJjZmU2NDQ4NzkzZTQyM2JkNmI4ZmQ1Mjk0ZjEwNzk4ZGQ0Njk", "commit": {"author": {"name": "Lukas Markeffsky", "email": "@", "date": "2022-10-22T19:20:04Z"}, "committer": {"name": "Lukas Markeffsky", "email": "@", "date": "2022-11-19T15:47:42Z"}, "message": "address more review comments\n\n* `cfg` only the body of `align_offset`\n* put explicit panics back\n* explain why `ptr.align_offset(align) == 0` is slow", "tree": {"sha": "13f4f78e2bd37b45e9de5a2cb2eab914f49d5516", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13f4f78e2bd37b45e9de5a2cb2eab914f49d5516"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df0bcfe6448793e423bd6b8fd5294f10798dd469", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df0bcfe6448793e423bd6b8fd5294f10798dd469", "html_url": "https://github.com/rust-lang/rust/commit/df0bcfe6448793e423bd6b8fd5294f10798dd469", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df0bcfe6448793e423bd6b8fd5294f10798dd469/comments", "author": null, "committer": null, "parents": [{"sha": "093c02ed460cfe726badc7d7bee2c868f8288e16", "url": "https://api.github.com/repos/rust-lang/rust/commits/093c02ed460cfe726badc7d7bee2c868f8288e16", "html_url": "https://github.com/rust-lang/rust/commit/093c02ed460cfe726badc7d7bee2c868f8288e16"}], "stats": {"total": 108, "additions": 52, "deletions": 56}, "files": [{"sha": "37679c504b30353e353832bd86f29b55dbef7d64", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 26, "deletions": 28, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/df0bcfe6448793e423bd6b8fd5294f10798dd469/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df0bcfe6448793e423bd6b8fd5294f10798dd469/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=df0bcfe6448793e423bd6b8fd5294f10798dd469", "patch": "@@ -1323,21 +1323,6 @@ impl<T: ?Sized> *const T {\n     #[must_use]\n     #[stable(feature = \"align_offset\", since = \"1.36.0\")]\n     #[rustc_const_unstable(feature = \"const_align_offset\", issue = \"90962\")]\n-    #[cfg(not(bootstrap))]\n-    pub const fn align_offset(self, align: usize) -> usize\n-    where\n-        T: Sized,\n-    {\n-        assert!(align.is_power_of_two(), \"align_offset: align is not a power-of-two\");\n-\n-        // SAFETY: `align` has been checked to be a power of 2 above\n-        unsafe { align_offset(self, align) }\n-    }\n-\n-    #[stable(feature = \"align_offset\", since = \"1.36.0\")]\n-    #[rustc_const_unstable(feature = \"const_align_offset\", issue = \"90962\")]\n-    #[allow(missing_docs)]\n-    #[cfg(bootstrap)]\n     pub const fn align_offset(self, align: usize) -> usize\n     where\n         T: Sized,\n@@ -1346,21 +1331,30 @@ impl<T: ?Sized> *const T {\n             panic!(\"align_offset: align is not a power-of-two\");\n         }\n \n-        fn rt_impl<T>(p: *const T, align: usize) -> usize {\n-            // SAFETY: `align` has been checked to be a power of 2 above\n-            unsafe { align_offset(p, align) }\n-        }\n+        #[cfg(bootstrap)]\n+        {\n+            fn rt_impl<T>(p: *const T, align: usize) -> usize {\n+                // SAFETY: `align` has been checked to be a power of 2 above\n+                unsafe { align_offset(p, align) }\n+            }\n \n-        const fn ctfe_impl<T>(_: *const T, _: usize) -> usize {\n-            usize::MAX\n+            const fn ctfe_impl<T>(_: *const T, _: usize) -> usize {\n+                usize::MAX\n+            }\n+\n+            // SAFETY:\n+            // It is permissible for `align_offset` to always return `usize::MAX`,\n+            // algorithm correctness can not depend on `align_offset` returning non-max values.\n+            //\n+            // As such the behaviour can't change after replacing `align_offset` with `usize::MAX`, only performance can.\n+            unsafe { intrinsics::const_eval_select((self, align), ctfe_impl, rt_impl) }\n         }\n \n-        // SAFETY:\n-        // It is permissible for `align_offset` to always return `usize::MAX`,\n-        // algorithm correctness can not depend on `align_offset` returning non-max values.\n-        //\n-        // As such the behaviour can't change after replacing `align_offset` with `usize::MAX`, only performance can.\n-        unsafe { intrinsics::const_eval_select((self, align), ctfe_impl, rt_impl) }\n+        #[cfg(not(bootstrap))]\n+        {\n+            // SAFETY: `align` has been checked to be a power of 2 above\n+            unsafe { align_offset(self, align) }\n+        }\n     }\n \n     /// Returns whether the pointer is properly aligned for `T`.\n@@ -1522,13 +1516,17 @@ impl<T: ?Sized> *const T {\n     #[unstable(feature = \"pointer_is_aligned\", issue = \"96284\")]\n     #[rustc_const_unstable(feature = \"const_pointer_is_aligned\", issue = \"none\")]\n     pub const fn is_aligned_to(self, align: usize) -> bool {\n-        assert!(align.is_power_of_two(), \"is_aligned_to: align is not a power-of-two\");\n+        if !align.is_power_of_two() {\n+            panic!(\"is_aligned_to: align is not a power-of-two\")\n+        }\n \n         #[inline]\n         fn runtime(ptr: *const u8, align: usize) -> bool {\n             ptr.addr() & (align - 1) == 0\n         }\n \n+        // This optimizes to `(ptr + align - 1) & -align == ptr`, which is slightly\n+        // slower than `ptr & (align - 1) == 0`\n         const fn comptime(ptr: *const u8, align: usize) -> bool {\n             ptr.align_offset(align) == 0\n         }"}, {"sha": "9174728868936db5f2cb221fe9580cf9e45ffe5f", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 26, "deletions": 28, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/df0bcfe6448793e423bd6b8fd5294f10798dd469/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df0bcfe6448793e423bd6b8fd5294f10798dd469/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=df0bcfe6448793e423bd6b8fd5294f10798dd469", "patch": "@@ -1591,21 +1591,6 @@ impl<T: ?Sized> *mut T {\n     #[must_use]\n     #[stable(feature = \"align_offset\", since = \"1.36.0\")]\n     #[rustc_const_unstable(feature = \"const_align_offset\", issue = \"90962\")]\n-    #[cfg(not(bootstrap))]\n-    pub const fn align_offset(self, align: usize) -> usize\n-    where\n-        T: Sized,\n-    {\n-        assert!(align.is_power_of_two(), \"align_offset: align is not a power-of-two\");\n-\n-        // SAFETY: `align` has been checked to be a power of 2 above\n-        unsafe { align_offset(self, align) }\n-    }\n-\n-    #[stable(feature = \"align_offset\", since = \"1.36.0\")]\n-    #[rustc_const_unstable(feature = \"const_align_offset\", issue = \"90962\")]\n-    #[allow(missing_docs)]\n-    #[cfg(bootstrap)]\n     pub const fn align_offset(self, align: usize) -> usize\n     where\n         T: Sized,\n@@ -1614,21 +1599,30 @@ impl<T: ?Sized> *mut T {\n             panic!(\"align_offset: align is not a power-of-two\");\n         }\n \n-        fn rt_impl<T>(p: *mut T, align: usize) -> usize {\n-            // SAFETY: `align` has been checked to be a power of 2 above\n-            unsafe { align_offset(p, align) }\n+        #[cfg(bootstrap)]\n+        {\n+            fn rt_impl<T>(p: *mut T, align: usize) -> usize {\n+                // SAFETY: `align` has been checked to be a power of 2 above\n+                unsafe { align_offset(p, align) }\n+            }\n+\n+            const fn ctfe_impl<T>(_: *mut T, _: usize) -> usize {\n+                usize::MAX\n+            }\n+\n+            // SAFETY:\n+            // It is permissible for `align_offset` to always return `usize::MAX`,\n+            // algorithm correctness can not depend on `align_offset` returning non-max values.\n+            //\n+            // As such the behaviour can't change after replacing `align_offset` with `usize::MAX`, only performance can.\n+            unsafe { intrinsics::const_eval_select((self, align), ctfe_impl, rt_impl) }\n         }\n \n-        const fn ctfe_impl<T>(_: *mut T, _: usize) -> usize {\n-            usize::MAX\n+        #[cfg(not(bootstrap))]\n+        {\n+            // SAFETY: `align` has been checked to be a power of 2 above\n+            unsafe { align_offset(self, align) }\n         }\n-\n-        // SAFETY:\n-        // It is permissible for `align_offset` to always return `usize::MAX`,\n-        // algorithm correctness can not depend on `align_offset` returning non-max values.\n-        //\n-        // As such the behaviour can't change after replacing `align_offset` with `usize::MAX`, only performance can.\n-        unsafe { intrinsics::const_eval_select((self, align), ctfe_impl, rt_impl) }\n     }\n \n     /// Returns whether the pointer is properly aligned for `T`.\n@@ -1790,13 +1784,17 @@ impl<T: ?Sized> *mut T {\n     #[unstable(feature = \"pointer_is_aligned\", issue = \"96284\")]\n     #[rustc_const_unstable(feature = \"const_pointer_is_aligned\", issue = \"none\")]\n     pub const fn is_aligned_to(self, align: usize) -> bool {\n-        assert!(align.is_power_of_two(), \"is_aligned_to: align is not a power-of-two\");\n+        if !align.is_power_of_two() {\n+            panic!(\"is_aligned_to: align is not a power-of-two\")\n+        }\n \n         #[inline]\n         fn runtime(ptr: *mut u8, align: usize) -> bool {\n             ptr.addr() & (align - 1) == 0\n         }\n \n+        // This optimizes to `(ptr + align - 1) & -align == ptr`, which is slightly\n+        // slower than `ptr & (align - 1) == 0`\n         const fn comptime(ptr: *mut u8, align: usize) -> bool {\n             ptr.align_offset(align) == 0\n         }"}]}