{"sha": "60a658250ea2ee6dd10425d7070c373262762b1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwYTY1ODI1MGVhMmVlNmRkMTA0MjVkNzA3MGMzNzMyNjI3NjJiMWM=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-06-20T21:33:25Z"}, "committer": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-06-20T21:33:25Z"}, "message": "Don't force resolution of integral type vars in unary minus exprs\n\nThese were getting resolved too early, when they were still\nunconstrained by the rest of the typing context.  Waiting a bit longer\nto resolve them gives the rest of the typing context a chance to come\ninto play, so that they don't default to `int`.", "tree": {"sha": "a361d352e845b94eb2c5fe40f360eb6145c8f995", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a361d352e845b94eb2c5fe40f360eb6145c8f995"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60a658250ea2ee6dd10425d7070c373262762b1c", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60a658250ea2ee6dd10425d7070c373262762b1c", "html_url": "https://github.com/rust-lang/rust/commit/60a658250ea2ee6dd10425d7070c373262762b1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60a658250ea2ee6dd10425d7070c373262762b1c/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64912c9a56415c8a8586cd743ddbf3ab9baea2de", "url": "https://api.github.com/repos/rust-lang/rust/commits/64912c9a56415c8a8586cd743ddbf3ab9baea2de", "html_url": "https://github.com/rust-lang/rust/commit/64912c9a56415c8a8586cd743ddbf3ab9baea2de"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "b126e5c55ff0addfbb9e7c1bd0aa3f2ed42ba802", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/60a658250ea2ee6dd10425d7070c373262762b1c/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60a658250ea2ee6dd10425d7070c373262762b1c/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=60a658250ea2ee6dd10425d7070c373262762b1c", "patch": "@@ -1198,7 +1198,14 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n             }\n           }\n           ast::neg {\n-            oprnd_t = structurally_resolved_type(fcx, oprnd.span, oprnd_t);\n+            // If the operand's type is an integral type variable, we\n+            // don't want to resolve it yet, because the rest of the\n+            // typing context might not have had the opportunity to\n+            // constrain it yet.\n+            if !(ty::type_is_var_integral(oprnd_t)) {\n+                oprnd_t = structurally_resolved_type(fcx, oprnd.span,\n+                                                     oprnd_t);\n+            }\n             if !(ty::type_is_integral(oprnd_t) ||\n                  ty::type_is_fp(oprnd_t)) {\n                 oprnd_t = check_user_unop(fcx, \"-\", \"unary-\", expr,"}, {"sha": "5d157658aa1b47154b6719b43cafa07a0e79b124", "filename": "src/test/run-pass/integer-literal-suffix-inference.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/60a658250ea2ee6dd10425d7070c373262762b1c/src%2Ftest%2Frun-pass%2Finteger-literal-suffix-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60a658250ea2ee6dd10425d7070c373262762b1c/src%2Ftest%2Frun-pass%2Finteger-literal-suffix-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finteger-literal-suffix-inference.rs?ref=60a658250ea2ee6dd10425d7070c373262762b1c", "patch": "@@ -16,22 +16,22 @@ fn main() {\n \n     let _i: i8 = -128;\n     let j = -128;\n-    // id_i8(j);\n+    id_i8(j);\n     id_i8(-128);\n \n     let _i: i16 = -32_768;\n     let j = -32_768;\n-    // id_i16(j);\n+    id_i16(j);\n     id_i16(-32_768);\n \n     let _i: i32 = -2_147_483_648;\n     let j = -2_147_483_648;\n-    // id_i32(j);\n+    id_i32(j);\n     id_i32(-2_147_483_648);\n \n     let _i: i64 = -9_223_372_036_854_775_808;\n     let j = -9_223_372_036_854_775_808;\n-    // id_i64(j);\n+    id_i64(j);\n     id_i64(-9_223_372_036_854_775_808);\n \n     let _i: uint = 1;"}]}