{"sha": "9f1d341ee9bf399fa8fa2a5d2fb5f91e1b319702", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmMWQzNDFlZTliZjM5OWZhOGZhMmE1ZDJmYjVmOTFlMWIzMTk3MDI=", "commit": {"author": {"name": "Luciano Bestia", "email": "LucianoBestia@gmail.com", "date": "2021-01-18T18:45:42Z"}, "committer": {"name": "Luciano Bestia", "email": "LucianoBestia@gmail.com", "date": "2021-01-18T18:45:42Z"}, "message": "added region folding", "tree": {"sha": "2aef832786e9d6eaccfe7cf566113fd35421a46a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2aef832786e9d6eaccfe7cf566113fd35421a46a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f1d341ee9bf399fa8fa2a5d2fb5f91e1b319702", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f1d341ee9bf399fa8fa2a5d2fb5f91e1b319702", "html_url": "https://github.com/rust-lang/rust/commit/9f1d341ee9bf399fa8fa2a5d2fb5f91e1b319702", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f1d341ee9bf399fa8fa2a5d2fb5f91e1b319702/comments", "author": null, "committer": null, "parents": [{"sha": "a1c72451bb8b657f4e5a015428112090402de106", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1c72451bb8b657f4e5a015428112090402de106", "html_url": "https://github.com/rust-lang/rust/commit/a1c72451bb8b657f4e5a015428112090402de106"}], "stats": {"total": 105, "additions": 92, "deletions": 13}, "files": [{"sha": "674c75450b8d21108b194cdcfc02bd1872434814", "filename": "Cargo.lock", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9f1d341ee9bf399fa8fa2a5d2fb5f91e1b319702/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/9f1d341ee9bf399fa8fa2a5d2fb5f91e1b319702/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=9f1d341ee9bf399fa8fa2a5d2fb5f91e1b319702", "patch": "@@ -15,6 +15,15 @@ version = \"0.2.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"ee2a4ec343196209d6594e19543ae87a39f96d5534d7174822a3ad825dd6ed7e\"\n \n+[[package]]\n+name = \"aho-corasick\"\n+version = \"0.7.15\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7404febffaa47dac81aa44dba71523c9d069b1bdc50a77db41195149e17f68e5\"\n+dependencies = [\n+ \"memchr\",\n+]\n+\n [[package]]\n name = \"ansi_term\"\n version = \"0.12.1\"\n@@ -634,16 +643,19 @@ dependencies = [\n  \"cfg\",\n  \"completion\",\n  \"either\",\n+ \"env_logger\",\n  \"expect-test\",\n  \"hir\",\n  \"ide_db\",\n  \"indexmap\",\n  \"itertools 0.10.0\",\n+ \"lazy_static\",\n  \"log\",\n  \"oorandom\",\n  \"profile\",\n  \"pulldown-cmark\",\n  \"pulldown-cmark-to-cmark\",\n+ \"regex\",\n  \"rustc-hash\",\n  \"ssr\",\n  \"stdx\",\n@@ -1301,11 +1313,14 @@ checksum = \"41cc0f7e4d5d4544e8861606a285bb08d3e70712ccc7d2b84d7c0ccfaf4b05ce\"\n \n [[package]]\n name = \"regex\"\n-version = \"1.4.2\"\n+version = \"1.4.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"38cf2c13ed4745de91a5eb834e11c00bcc3709e773173b2ce4c56c9fbde04b9c\"\n+checksum = \"d9251239e129e16308e70d853559389de218ac275b515068abc96829d05b948a\"\n dependencies = [\n+ \"aho-corasick\",\n+ \"memchr\",\n  \"regex-syntax\",\n+ \"thread_local\",\n ]\n \n [[package]]\n@@ -1320,9 +1335,9 @@ dependencies = [\n \n [[package]]\n name = \"regex-syntax\"\n-version = \"0.6.21\"\n+version = \"0.6.22\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3b181ba2dcf07aaccad5448e8ead58db5b742cf85dfe035e2227f137a539a189\"\n+checksum = \"b5eb417147ba9860a96cfe72a0b93bf88fee1744b5636ec99ab20c1aa9376581\"\n \n [[package]]\n name = \"rowan\""}, {"sha": "6ec1064267e308eab020dc90e0fc992cb7eeb3d2", "filename": "crates/ide/Cargo.toml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f1d341ee9bf399fa8fa2a5d2fb5f91e1b319702/crates%2Fide%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9f1d341ee9bf399fa8fa2a5d2fb5f91e1b319702/crates%2Fide%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2FCargo.toml?ref=9f1d341ee9bf399fa8fa2a5d2fb5f91e1b319702", "patch": "@@ -31,6 +31,10 @@ assists = { path = \"../assists\", version = \"0.0.0\" }\n ssr = { path = \"../ssr\", version = \"0.0.0\" }\n completion = { path = \"../completion\", version = \"0.0.0\" }\n \n+lazy_static = \"1.4.0\"\n+regex = \"1.4.3\"\n+env_logger = { version = \"0.8.1\", default-features = false }\n+\n # ide should depend only on the top-level `hir` package. if you need\n # something from some `hir_xxx` subpackage, reexport the API via `hir`.\n hir = { path = \"../hir\", version = \"0.0.0\" }"}, {"sha": "99f0c3c99af7397c691a75370a4f9312741ff9c0", "filename": "crates/ide/src/folding_ranges.rs", "status": "modified", "additions": 68, "deletions": 8, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/9f1d341ee9bf399fa8fa2a5d2fb5f91e1b319702/crates%2Fide%2Fsrc%2Ffolding_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1d341ee9bf399fa8fa2a5d2fb5f91e1b319702/crates%2Fide%2Fsrc%2Ffolding_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffolding_ranges.rs?ref=9f1d341ee9bf399fa8fa2a5d2fb5f91e1b319702", "patch": "@@ -6,16 +6,19 @@ use syntax::{\n     ast::{self, AstNode, AstToken, VisibilityOwner},\n     Direction, NodeOrToken, SourceFile,\n     SyntaxKind::{self, *},\n-    SyntaxNode, TextRange,\n+    SyntaxNode, TextRange, TextSize,\n };\n \n+use lazy_static::lazy_static;\n+\n #[derive(Debug, PartialEq, Eq)]\n pub enum FoldKind {\n     Comment,\n     Imports,\n     Mods,\n     Block,\n     ArgList,\n+    Region,\n }\n \n #[derive(Debug)]\n@@ -29,6 +32,8 @@ pub(crate) fn folding_ranges(file: &SourceFile) -> Vec<Fold> {\n     let mut visited_comments = FxHashSet::default();\n     let mut visited_imports = FxHashSet::default();\n     let mut visited_mods = FxHashSet::default();\n+    // regions can be nested, here is a LIFO buffer\n+    let mut regions_starts: Vec<TextSize> = vec![];\n \n     for element in file.syntax().descendants_with_tokens() {\n         // Fold items that span multiple lines\n@@ -48,10 +53,32 @@ pub(crate) fn folding_ranges(file: &SourceFile) -> Vec<Fold> {\n                 // Fold groups of comments\n                 if let Some(comment) = ast::Comment::cast(token) {\n                     if !visited_comments.contains(&comment) {\n-                        if let Some(range) =\n-                            contiguous_range_for_comment(comment, &mut visited_comments)\n-                        {\n-                            res.push(Fold { range, kind: FoldKind::Comment })\n+                        // regions are not really comments\n+                        use regex::Regex;\n+                        lazy_static! {\n+                            static ref RE_START: Regex =\n+                                Regex::new(r\"^\\s*//\\s*#?region\\b\").unwrap();\n+                            static ref RE_END: Regex =\n+                                Regex::new(r\"^\\s*//\\s*#?endregion\\b\").unwrap();\n+                        }\n+                        if RE_START.is_match(comment.text()) {\n+                            regions_starts.push(comment.syntax().text_range().start());\n+                        } else if RE_END.is_match(comment.text()) {\n+                            if !regions_starts.is_empty() {\n+                                res.push(Fold {\n+                                    range: TextRange::new(\n+                                        regions_starts.pop().unwrap(),\n+                                        comment.syntax().text_range().end(),\n+                                    ),\n+                                    kind: FoldKind::Region,\n+                                })\n+                            }\n+                        } else {\n+                            if let Some(range) =\n+                                contiguous_range_for_comment(comment, &mut visited_comments)\n+                            {\n+                                res.push(Fold { range, kind: FoldKind::Comment })\n+                            }\n                         }\n                     }\n                 }\n@@ -175,9 +202,21 @@ fn contiguous_range_for_comment(\n                 }\n                 if let Some(c) = ast::Comment::cast(token) {\n                     if c.kind() == group_kind {\n-                        visited.insert(c.clone());\n-                        last = c;\n-                        continue;\n+                        // regions are not really comments\n+                        use regex::Regex;\n+                        lazy_static! {\n+                            static ref RE_START: Regex =\n+                                Regex::new(r\"^\\s*//\\s*#?region\\b\").unwrap();\n+                            static ref RE_END: Regex =\n+                                Regex::new(r\"^\\s*//\\s*#?endregion\\b\").unwrap();\n+                        }\n+                        if RE_START.is_match(c.text()) || RE_END.is_match(c.text()) {\n+                            break;\n+                        } else {\n+                            visited.insert(c.clone());\n+                            last = c;\n+                            continue;\n+                        }\n                     }\n                 }\n                 // The comment group ends because either:\n@@ -224,6 +263,7 @@ mod tests {\n                 FoldKind::Mods => \"mods\",\n                 FoldKind::Block => \"block\",\n                 FoldKind::ArgList => \"arglist\",\n+                FoldKind::Region => \"region\",\n             };\n             assert_eq!(kind, &attr.unwrap());\n         }\n@@ -418,4 +458,24 @@ fn foo<fold arglist>(\n \"#,\n         )\n     }\n+\n+    #[test]\n+    fn fold_region() {\n+        log_init_for_test_debug();\n+        // only error level log is printed on the terminal\n+        log::error!(\"test fold_region\");\n+        check(\n+            r#\"\n+// 1. some normal comment\n+<fold region>// region: test\n+// 2. some normal comment\n+calling_function(x,y);\n+// endregion: test</fold>\n+\"#,\n+        )\n+    }\n+\n+    fn log_init_for_test_debug() {\n+        let _ = env_logger::builder().is_test(true).try_init();\n+    }\n }"}, {"sha": "c903ab523ca1b22189ab48b3183a39eda1986123", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f1d341ee9bf399fa8fa2a5d2fb5f91e1b319702/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1d341ee9bf399fa8fa2a5d2fb5f91e1b319702/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=9f1d341ee9bf399fa8fa2a5d2fb5f91e1b319702", "patch": "@@ -465,7 +465,7 @@ pub(crate) fn folding_range(\n     let kind = match fold.kind {\n         FoldKind::Comment => Some(lsp_types::FoldingRangeKind::Comment),\n         FoldKind::Imports => Some(lsp_types::FoldingRangeKind::Imports),\n-        FoldKind::Mods | FoldKind::Block | FoldKind::ArgList => None,\n+        FoldKind::Mods | FoldKind::Block | FoldKind::ArgList | FoldKind::Region => None,\n     };\n \n     let range = range(line_index, fold.range);"}]}