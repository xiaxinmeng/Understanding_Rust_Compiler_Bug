{"sha": "0dc186f61250134400846c4784568ad2ce072161", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkYzE4NmY2MTI1MDEzNDQwMDg0NmM0Nzg0NTY4YWQyY2UwNzIxNjE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-07-11T10:42:19Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-07-11T10:42:19Z"}, "message": "Let the client care about presentation", "tree": {"sha": "8db99abcba23034cd0fb5a21d26e57a7cb07ba91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8db99abcba23034cd0fb5a21d26e57a7cb07ba91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0dc186f61250134400846c4784568ad2ce072161", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0dc186f61250134400846c4784568ad2ce072161", "html_url": "https://github.com/rust-lang/rust/commit/0dc186f61250134400846c4784568ad2ce072161", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0dc186f61250134400846c4784568ad2ce072161/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "148e11aa9e04ff2570c16d828340af1fcbc6d641", "url": "https://api.github.com/repos/rust-lang/rust/commits/148e11aa9e04ff2570c16d828340af1fcbc6d641", "html_url": "https://github.com/rust-lang/rust/commit/148e11aa9e04ff2570c16d828340af1fcbc6d641"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "ef3aab5b6528f96c6b5170d30ac28a1d34ce55c6", "filename": "crates/ide/src/annotations.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0dc186f61250134400846c4784568ad2ce072161/crates%2Fide%2Fsrc%2Fannotations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc186f61250134400846c4784568ad2ce072161/crates%2Fide%2Fsrc%2Fannotations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fannotations.rs?ref=0dc186f61250134400846c4784568ad2ce072161", "patch": "@@ -59,20 +59,10 @@ pub(crate) fn annotations(\n \n             let range = runnable.nav.focus_or_full_range();\n \n-            // dbg_runnable should go after the run annotation, to prevent a clone we do it this way\n-            let dbg_runnable = (runnable.debugee() && config.debug).then(|| Annotation {\n+            annotations.push(Annotation {\n                 range,\n-                kind: AnnotationKind::Runnable { debug: true, runnable: runnable.clone() },\n+                kind: AnnotationKind::Runnable { debug: false, runnable },\n             });\n-\n-            if config.run {\n-                annotations.push(Annotation {\n-                    range,\n-                    kind: AnnotationKind::Runnable { debug: false, runnable },\n-                });\n-            }\n-\n-            annotations.extend(dbg_runnable);\n         }\n     }\n "}, {"sha": "0e18581a3186f10a4a7978d98dfa40f0474fdb35", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0dc186f61250134400846c4784568ad2ce072161/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc186f61250134400846c4784568ad2ce072161/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=0dc186f61250134400846c4784568ad2ce072161", "patch": "@@ -998,16 +998,26 @@ pub(crate) fn code_lens(\n             let annotation_range = range(&line_index, annotation.range);\n \n             let title = run.title();\n+            let can_debug = run.debugee();\n             let r = runnable(snap, run)?;\n \n-            let command =\n-                if debug { command::debug_single(&r) } else { command::run_single(&r, &title) };\n-\n-            acc.push(lsp_types::CodeLens {\n-                range: annotation_range,\n-                command: Some(command),\n-                data: None,\n-            })\n+            let lens_config = snap.config.lens();\n+            if lens_config.run {\n+                let command = command::run_single(&r, &title);\n+                acc.push(lsp_types::CodeLens {\n+                    range: annotation_range,\n+                    command: Some(command),\n+                    data: None,\n+                })\n+            }\n+            if lens_config.debug && can_debug {\n+                let command = command::debug_single(&r);\n+                acc.push(lsp_types::CodeLens {\n+                    range: annotation_range,\n+                    command: Some(command),\n+                    data: None,\n+                })\n+            }\n         }\n         AnnotationKind::HasImpls { position: file_position, data } => {\n             let line_index = snap.file_line_index(file_position.file_id)?;"}]}