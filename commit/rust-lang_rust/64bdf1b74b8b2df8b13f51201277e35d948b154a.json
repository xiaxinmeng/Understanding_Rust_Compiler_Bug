{"sha": "64bdf1b74b8b2df8b13f51201277e35d948b154a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0YmRmMWI3NGI4YjJkZjhiMTNmNTEyMDEyNzdlMzVkOTQ4YjE1NGE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-09-14T21:51:46Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-10-04T19:20:38Z"}, "message": "Set `NON_ZERO_SIZED` flag correctly for struct/union ctors\n\nAnd for methods/functions as well, they are zero-sized now", "tree": {"sha": "273bec7e46e16899e9b89c0418cbff6aade06a33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/273bec7e46e16899e9b89c0418cbff6aade06a33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64bdf1b74b8b2df8b13f51201277e35d948b154a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64bdf1b74b8b2df8b13f51201277e35d948b154a", "html_url": "https://github.com/rust-lang/rust/commit/64bdf1b74b8b2df8b13f51201277e35d948b154a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64bdf1b74b8b2df8b13f51201277e35d948b154a/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c95b280d723ae6a6243b04ac06be100c622634b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c95b280d723ae6a6243b04ac06be100c622634b4", "html_url": "https://github.com/rust-lang/rust/commit/c95b280d723ae6a6243b04ac06be100c622634b4"}], "stats": {"total": 24, "additions": 8, "deletions": 16}, "files": [{"sha": "ee731dd042e4fe0c6d4f5ec027097f1e429e3729", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/64bdf1b74b8b2df8b13f51201277e35d948b154a/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64bdf1b74b8b2df8b13f51201277e35d948b154a/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=64bdf1b74b8b2df8b13f51201277e35d948b154a", "patch": "@@ -33,7 +33,7 @@ use rustc_const_eval::ErrKind::{ErroneousReferencedConstant, MiscBinaryOp, NonCo\n use rustc_const_eval::ErrKind::UnresolvedPath;\n use rustc_const_eval::EvalHint::ExprTypeChecked;\n use rustc_const_math::{ConstMathErr, Op};\n-use rustc::hir::def::Def;\n+use rustc::hir::def::{Def, CtorKind};\n use rustc::hir::def_id::DefId;\n use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::mem_categorization as mc;\n@@ -489,20 +489,12 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Expr, node\n         }\n         hir::ExprPath(..) => {\n             match v.tcx.expect_def(e.id) {\n-                Def::VariantCtor(..) => {\n-                    // Count the discriminator or function pointer.\n-                    v.add_qualif(ConstQualif::NON_ZERO_SIZED);\n-                }\n-                Def::StructCtor(..) => {\n-                    if let ty::TyFnDef(..) = node_ty.sty {\n-                        // Count the function pointer.\n-                        v.add_qualif(ConstQualif::NON_ZERO_SIZED);\n-                    }\n-                }\n-                Def::Fn(..) | Def::Method(..) => {\n-                    // Count the function pointer.\n+                Def::VariantCtor(_, CtorKind::Const) => {\n+                    // Size is determined by the whole enum, may be non-zero.\n                     v.add_qualif(ConstQualif::NON_ZERO_SIZED);\n                 }\n+                Def::VariantCtor(..) | Def::StructCtor(..) |\n+                Def::Fn(..) | Def::Method(..) => {}\n                 Def::Static(..) => {\n                     match v.mode {\n                         Mode::Static | Mode::StaticMut => {}\n@@ -539,9 +531,9 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Expr, node\n             }\n             // The callee is an arbitrary expression, it doesn't necessarily have a definition.\n             let is_const = match v.tcx.expect_def_or_none(callee.id) {\n-                Some(Def::StructCtor(..)) => true,\n-                Some(Def::VariantCtor(..)) => {\n-                    // Count the discriminator.\n+                Some(Def::StructCtor(_, CtorKind::Fn)) |\n+                Some(Def::VariantCtor(_, CtorKind::Fn)) => {\n+                    // `NON_ZERO_SIZED` is about the call result, not about the ctor itself.\n                     v.add_qualif(ConstQualif::NON_ZERO_SIZED);\n                     true\n                 }"}]}