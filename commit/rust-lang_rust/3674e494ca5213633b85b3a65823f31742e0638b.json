{"sha": "3674e494ca5213633b85b3a65823f31742e0638b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2NzRlNDk0Y2E1MjEzNjMzYjg1YjNhNjU4MjNmMzE3NDJlMDYzOGI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-11T18:03:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-11T18:03:09Z"}, "message": "Merge #6819\n\n6819: Add builtin attributes for use in nameres r=jonas-schievink a=jonas-schievink\n\nThese are not yet used, but have to go through nameres later in order to support procedural macro attributes\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "2e426347c9ba65e2f535c576de4604eeb7daeaf9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e426347c9ba65e2f535c576de4604eeb7daeaf9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3674e494ca5213633b85b3a65823f31742e0638b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf07RdCRBK7hj4Ov3rIwAAdHIIAEn0MkN2lOIAvb8FTQ2P4W4H\ncYMZ0GQ6V6urPzkYMXSI8GuVmPS/u2unuhTTeRUU9g3finr4/6E4sAiv6ibJvGsQ\no4oVqjkFec16edQYudkJYrtLcd/qEyyjmOsLLKzzMEV3cpSNSvVJB9eH+bOVTn7n\nPaUjGKFyeMUFpeOxXPXjzIZkE9f9lvOHvU3ozCT3jtvNraU/QFcJ63p461xl5Dob\nwGihe+/R+6KkWv6kTWnL3s0sHINBdNK0Xq7GCCh6jicPurYoeROiZaqgwR7iCuWk\n4p0MwqIR6ZuYMQ9Ujsux2KeG6nnRDg9hvpwNQ0LZvM95SS3iT4OFQgNWNxFXT5k=\n=epix\n-----END PGP SIGNATURE-----\n", "payload": "tree 2e426347c9ba65e2f535c576de4604eeb7daeaf9\nparent 3df4b8c1fa4c1686228162bff03e4db3f01b9826\nparent 253678ead2a7a977340ab182685c4b932b855b3b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1607709789 +0000\ncommitter GitHub <noreply@github.com> 1607709789 +0000\n\nMerge #6819\n\n6819: Add builtin attributes for use in nameres r=jonas-schievink a=jonas-schievink\n\nThese are not yet used, but have to go through nameres later in order to support procedural macro attributes\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3674e494ca5213633b85b3a65823f31742e0638b", "html_url": "https://github.com/rust-lang/rust/commit/3674e494ca5213633b85b3a65823f31742e0638b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3674e494ca5213633b85b3a65823f31742e0638b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3df4b8c1fa4c1686228162bff03e4db3f01b9826", "url": "https://api.github.com/repos/rust-lang/rust/commits/3df4b8c1fa4c1686228162bff03e4db3f01b9826", "html_url": "https://github.com/rust-lang/rust/commit/3df4b8c1fa4c1686228162bff03e4db3f01b9826"}, {"sha": "253678ead2a7a977340ab182685c4b932b855b3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/253678ead2a7a977340ab182685c4b932b855b3b", "html_url": "https://github.com/rust-lang/rust/commit/253678ead2a7a977340ab182685c4b932b855b3b"}], "stats": {"total": 429, "additions": 429, "deletions": 0}, "files": [{"sha": "a02bf01cd7695bb69ddc09bc211a63cb4dcafd19", "filename": "crates/hir_def/src/builtin_attr.rs", "status": "added", "additions": 428, "deletions": 0, "changes": 428, "blob_url": "https://github.com/rust-lang/rust/blob/3674e494ca5213633b85b3a65823f31742e0638b/crates%2Fhir_def%2Fsrc%2Fbuiltin_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3674e494ca5213633b85b3a65823f31742e0638b/crates%2Fhir_def%2Fsrc%2Fbuiltin_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbuiltin_attr.rs?ref=3674e494ca5213633b85b3a65823f31742e0638b", "patch": "@@ -0,0 +1,428 @@\n+//! Builtin attributes resolved by nameres.\n+//!\n+//! The actual definitions were copied from rustc's `compiler/rustc_feature/src/builtin_attrs.rs`.\n+//!\n+//! The macros were adjusted to only expand to the attribute name, since that is all we need to do\n+//! name resolution, and `BUILTIN_ATTRIBUTES` is almost entirely unchanged from the original, to\n+//! ease updating.\n+\n+/// Ignored attribute namespaces used by tools.\n+pub const TOOL_MODULES: &[&str] = &[\"rustfmt\", \"clippy\"];\n+\n+type BuiltinAttribute = &'static str;\n+\n+macro_rules! ungated {\n+    ($attr:ident, $typ:expr, $tpl:expr $(,)?) => {\n+        stringify!($attr)\n+    };\n+}\n+\n+macro_rules! gated {\n+    ($attr:ident $($rest:tt)*) => {\n+        stringify!($attr)\n+    };\n+}\n+\n+macro_rules! rustc_attr {\n+    (TEST, $attr:ident $($rest:tt)*) => {\n+        stringify!($attr)\n+    };\n+    ($attr:ident $($rest:tt)*) => {\n+        stringify!($attr)\n+    };\n+}\n+\n+/// Attributes that have a special meaning to rustc or rustdoc.\n+#[rustfmt::skip]\n+pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n+    // ==========================================================================\n+    // Stable attributes:\n+    // ==========================================================================\n+\n+    // Conditional compilation:\n+    ungated!(cfg, Normal, template!(List: \"predicate\")),\n+    ungated!(cfg_attr, Normal, template!(List: \"predicate, attr1, attr2, ...\")),\n+\n+    // Testing:\n+    ungated!(ignore, Normal, template!(Word, NameValueStr: \"reason\")),\n+    ungated!(\n+        should_panic, Normal,\n+        template!(Word, List: r#\"expected = \"reason\"#, NameValueStr: \"reason\"),\n+    ),\n+    // FIXME(Centril): This can be used on stable but shouldn't.\n+    ungated!(reexport_test_harness_main, Normal, template!(NameValueStr: \"name\")),\n+\n+    // Macros:\n+    ungated!(derive, Normal, template!(List: \"Trait1, Trait2, ...\")),\n+    ungated!(automatically_derived, Normal, template!(Word)),\n+    // FIXME(#14407)\n+    ungated!(macro_use, Normal, template!(Word, List: \"name1, name2, ...\")),\n+    ungated!(macro_escape, Normal, template!(Word)), // Deprecated synonym for `macro_use`.\n+    ungated!(macro_export, Normal, template!(Word, List: \"local_inner_macros\")),\n+    ungated!(proc_macro, Normal, template!(Word)),\n+    ungated!(\n+        proc_macro_derive, Normal,\n+        template!(List: \"TraitName, /*opt*/ attributes(name1, name2, ...)\"),\n+    ),\n+    ungated!(proc_macro_attribute, Normal, template!(Word)),\n+\n+    // Lints:\n+    ungated!(warn, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#)),\n+    ungated!(allow, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#)),\n+    ungated!(forbid, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#)),\n+    ungated!(deny, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#)),\n+    ungated!(must_use, AssumedUsed, template!(Word, NameValueStr: \"reason\")),\n+    // FIXME(#14407)\n+    ungated!(\n+        deprecated, Normal,\n+        template!(\n+            Word,\n+            List: r#\"/*opt*/ since = \"version\", /*opt*/ note = \"reason\"\"#,\n+            NameValueStr: \"reason\"\n+        ),\n+    ),\n+\n+    // Crate properties:\n+    ungated!(crate_name, CrateLevel, template!(NameValueStr: \"name\")),\n+    ungated!(crate_type, CrateLevel, template!(NameValueStr: \"bin|lib|...\")),\n+    ungated!(crate_id, CrateLevel, template!(NameValueStr: \"ignored\")),\n+\n+    // ABI, linking, symbols, and FFI\n+    ungated!(\n+        link, AssumedUsed,\n+        template!(List: r#\"name = \"...\", /*opt*/ kind = \"dylib|static|...\", /*opt*/ wasm_import_module = \"...\"\"#),\n+    ),\n+    ungated!(link_name, AssumedUsed, template!(NameValueStr: \"name\")),\n+    ungated!(no_link, Normal, template!(Word)),\n+    ungated!(repr, Normal, template!(List: \"C\")),\n+    ungated!(export_name, AssumedUsed, template!(NameValueStr: \"name\")),\n+    ungated!(link_section, AssumedUsed, template!(NameValueStr: \"name\")),\n+    ungated!(no_mangle, AssumedUsed, template!(Word)),\n+    ungated!(used, AssumedUsed, template!(Word)),\n+\n+    // Limits:\n+    ungated!(recursion_limit, CrateLevel, template!(NameValueStr: \"N\")),\n+    ungated!(type_length_limit, CrateLevel, template!(NameValueStr: \"N\")),\n+    gated!(\n+        const_eval_limit, CrateLevel, template!(NameValueStr: \"N\"), const_eval_limit,\n+        experimental!(const_eval_limit)\n+    ),\n+\n+    // Entry point:\n+    ungated!(main, Normal, template!(Word)),\n+    ungated!(start, Normal, template!(Word)),\n+    ungated!(no_start, CrateLevel, template!(Word)),\n+    ungated!(no_main, CrateLevel, template!(Word)),\n+\n+    // Modules, prelude, and resolution:\n+    ungated!(path, Normal, template!(NameValueStr: \"file\")),\n+    ungated!(no_std, CrateLevel, template!(Word)),\n+    ungated!(no_implicit_prelude, Normal, template!(Word)),\n+    ungated!(non_exhaustive, AssumedUsed, template!(Word)),\n+\n+    // Runtime\n+    ungated!(windows_subsystem, AssumedUsed, template!(NameValueStr: \"windows|console\")),\n+    ungated!(panic_handler, Normal, template!(Word)), // RFC 2070\n+\n+    // Code generation:\n+    ungated!(inline, AssumedUsed, template!(Word, List: \"always|never\")),\n+    ungated!(cold, AssumedUsed, template!(Word)),\n+    ungated!(no_builtins, AssumedUsed, template!(Word)),\n+    ungated!(target_feature, AssumedUsed, template!(List: r#\"enable = \"name\"\"#)),\n+    ungated!(track_caller, AssumedUsed, template!(Word)),\n+    gated!(\n+        no_sanitize, AssumedUsed,\n+        template!(List: \"address, memory, thread\"),\n+        experimental!(no_sanitize)\n+    ),\n+\n+    // FIXME: #14408 assume docs are used since rustdoc looks at them.\n+    ungated!(doc, AssumedUsed, template!(List: \"hidden|inline|...\", NameValueStr: \"string\")),\n+\n+    // ==========================================================================\n+    // Unstable attributes:\n+    // ==========================================================================\n+\n+    // Linking:\n+    gated!(naked, AssumedUsed, template!(Word), naked_functions, experimental!(naked)),\n+    gated!(\n+        link_args, Normal, template!(NameValueStr: \"args\"),\n+        \"the `link_args` attribute is experimental and not portable across platforms, \\\n+        it is recommended to use `#[link(name = \\\"foo\\\")] instead\",\n+    ),\n+    gated!(\n+        link_ordinal, AssumedUsed, template!(List: \"ordinal\"), raw_dylib,\n+        experimental!(link_ordinal)\n+    ),\n+\n+    // Plugins:\n+    // XXX Modified for use in rust-analyzer\n+    gated!(plugin_registrar),\n+    gated!(plugin),\n+\n+    // Testing:\n+    gated!(allow_fail, Normal, template!(Word), experimental!(allow_fail)),\n+    gated!(\n+        test_runner, CrateLevel, template!(List: \"path\"), custom_test_frameworks,\n+        \"custom test frameworks are an unstable feature\",\n+    ),\n+    // RFC #1268\n+    gated!(marker, Normal, template!(Word), marker_trait_attr, experimental!(marker)),\n+    gated!(\n+        thread_local, AssumedUsed, template!(Word),\n+        \"`#[thread_local]` is an experimental feature, and does not currently handle destructors\",\n+    ),\n+    gated!(no_core, CrateLevel, template!(Word), experimental!(no_core)),\n+    // RFC 2412\n+    gated!(\n+        optimize, AssumedUsed, template!(List: \"size|speed\"), optimize_attribute,\n+        experimental!(optimize),\n+    ),\n+    // RFC 2867\n+    gated!(instruction_set, AssumedUsed, template!(List: \"set\"), isa_attribute, experimental!(instruction_set)),\n+\n+    gated!(ffi_returns_twice, AssumedUsed, template!(Word), experimental!(ffi_returns_twice)),\n+    gated!(ffi_pure, AssumedUsed, template!(Word), experimental!(ffi_pure)),\n+    gated!(ffi_const, AssumedUsed, template!(Word), experimental!(ffi_const)),\n+    gated!(\n+        register_attr, CrateLevel, template!(List: \"attr1, attr2, ...\"),\n+        experimental!(register_attr),\n+    ),\n+    gated!(\n+        register_tool, CrateLevel, template!(List: \"tool1, tool2, ...\"),\n+        experimental!(register_tool),\n+    ),\n+\n+    gated!(cmse_nonsecure_entry, AssumedUsed, template!(Word), experimental!(cmse_nonsecure_entry)),\n+\n+    // ==========================================================================\n+    // Internal attributes: Stability, deprecation, and unsafe:\n+    // ==========================================================================\n+\n+    ungated!(feature, CrateLevel, template!(List: \"name1, name1, ...\")),\n+    // FIXME(#14407) -- only looked at on-demand so we can't\n+    // guarantee they'll have already been checked.\n+    ungated!(\n+        rustc_deprecated, AssumedUsed,\n+        template!(List: r#\"since = \"version\", reason = \"...\"\"#)\n+    ),\n+    // FIXME(#14407)\n+    ungated!(stable, AssumedUsed, template!(List: r#\"feature = \"name\", since = \"version\"\"#)),\n+    // FIXME(#14407)\n+    ungated!(\n+        unstable, AssumedUsed,\n+        template!(List: r#\"feature = \"name\", reason = \"...\", issue = \"N\"\"#),\n+    ),\n+    // FIXME(#14407)\n+    ungated!(rustc_const_unstable, AssumedUsed, template!(List: r#\"feature = \"name\"\"#)),\n+    // FIXME(#14407)\n+    ungated!(rustc_const_stable, AssumedUsed, template!(List: r#\"feature = \"name\"\"#)),\n+    gated!(\n+        allow_internal_unstable, AssumedUsed, template!(Word, List: \"feat1, feat2, ...\"),\n+        \"allow_internal_unstable side-steps feature gating and stability checks\",\n+    ),\n+    gated!(\n+        rustc_allow_const_fn_unstable, AssumedUsed, template!(Word, List: \"feat1, feat2, ...\"),\n+        \"rustc_allow_const_fn_unstable side-steps feature gating and stability checks\"\n+    ),\n+    gated!(\n+        allow_internal_unsafe, Normal, template!(Word),\n+        \"allow_internal_unsafe side-steps the unsafe_code lint\",\n+    ),\n+\n+    // ==========================================================================\n+    // Internal attributes: Type system related:\n+    // ==========================================================================\n+\n+    gated!(fundamental, AssumedUsed, template!(Word), experimental!(fundamental)),\n+    gated!(\n+        may_dangle, Normal, template!(Word), dropck_eyepatch,\n+        \"`may_dangle` has unstable semantics and may be removed in the future\",\n+    ),\n+\n+    // ==========================================================================\n+    // Internal attributes: Runtime related:\n+    // ==========================================================================\n+\n+    rustc_attr!(rustc_allocator, AssumedUsed, template!(Word), IMPL_DETAIL),\n+    rustc_attr!(rustc_allocator_nounwind, AssumedUsed, template!(Word), IMPL_DETAIL),\n+    gated!(alloc_error_handler, Normal, template!(Word), experimental!(alloc_error_handler)),\n+    gated!(\n+        default_lib_allocator, AssumedUsed, template!(Word), allocator_internals,\n+        experimental!(default_lib_allocator),\n+    ),\n+    gated!(\n+        needs_allocator, Normal, template!(Word), allocator_internals,\n+        experimental!(needs_allocator),\n+    ),\n+    gated!(panic_runtime, AssumedUsed, template!(Word), experimental!(panic_runtime)),\n+    gated!(needs_panic_runtime, AssumedUsed, template!(Word), experimental!(needs_panic_runtime)),\n+    gated!(\n+        unwind, AssumedUsed, template!(List: \"allowed|aborts\"), unwind_attributes,\n+        experimental!(unwind),\n+    ),\n+    gated!(\n+        compiler_builtins, AssumedUsed, template!(Word),\n+        \"the `#[compiler_builtins]` attribute is used to identify the `compiler_builtins` crate \\\n+        which contains compiler-rt intrinsics and will never be stable\",\n+    ),\n+    gated!(\n+        profiler_runtime, AssumedUsed, template!(Word),\n+        \"the `#[profiler_runtime]` attribute is used to identify the `profiler_builtins` crate \\\n+        which contains the profiler runtime and will never be stable\",\n+    ),\n+\n+    // ==========================================================================\n+    // Internal attributes, Linkage:\n+    // ==========================================================================\n+\n+    gated!(\n+        linkage, AssumedUsed, template!(NameValueStr: \"external|internal|...\"),\n+        \"the `linkage` attribute is experimental and not portable across platforms\",\n+    ),\n+    rustc_attr!(rustc_std_internal_symbol, AssumedUsed, template!(Word), INTERNAL_UNSTABLE),\n+\n+    // ==========================================================================\n+    // Internal attributes, Macro related:\n+    // ==========================================================================\n+\n+    rustc_attr!(rustc_builtin_macro, AssumedUsed, template!(Word), IMPL_DETAIL),\n+    rustc_attr!(rustc_proc_macro_decls, Normal, template!(Word), INTERNAL_UNSTABLE),\n+    rustc_attr!(\n+        rustc_macro_transparency, AssumedUsed,\n+        template!(NameValueStr: \"transparent|semitransparent|opaque\"),\n+        \"used internally for testing macro hygiene\",\n+    ),\n+\n+    // ==========================================================================\n+    // Internal attributes, Diagnostics related:\n+    // ==========================================================================\n+\n+    rustc_attr!(\n+        rustc_on_unimplemented, AssumedUsed,\n+        template!(\n+            List: r#\"/*opt*/ message = \"...\", /*opt*/ label = \"...\", /*opt*/ note = \"...\"\"#,\n+            NameValueStr: \"message\"\n+        ),\n+        INTERNAL_UNSTABLE\n+    ),\n+    // Enumerates \"identity-like\" conversion methods to suggest on type mismatch.\n+    rustc_attr!(rustc_conversion_suggestion, AssumedUsed, template!(Word), INTERNAL_UNSTABLE),\n+\n+    // ==========================================================================\n+    // Internal attributes, Const related:\n+    // ==========================================================================\n+\n+    rustc_attr!(rustc_promotable, AssumedUsed, template!(Word), IMPL_DETAIL),\n+    rustc_attr!(rustc_args_required_const, AssumedUsed, template!(List: \"N\"), INTERNAL_UNSTABLE),\n+\n+    // ==========================================================================\n+    // Internal attributes, Layout related:\n+    // ==========================================================================\n+\n+    rustc_attr!(\n+        rustc_layout_scalar_valid_range_start, AssumedUsed, template!(List: \"value\"),\n+        \"the `#[rustc_layout_scalar_valid_range_start]` attribute is just used to enable \\\n+        niche optimizations in libcore and will never be stable\",\n+    ),\n+    rustc_attr!(\n+        rustc_layout_scalar_valid_range_end, AssumedUsed, template!(List: \"value\"),\n+        \"the `#[rustc_layout_scalar_valid_range_end]` attribute is just used to enable \\\n+        niche optimizations in libcore and will never be stable\",\n+    ),\n+    rustc_attr!(\n+        rustc_nonnull_optimization_guaranteed, AssumedUsed, template!(Word),\n+        \"the `#[rustc_nonnull_optimization_guaranteed]` attribute is just used to enable \\\n+        niche optimizations in libcore and will never be stable\",\n+    ),\n+\n+    // ==========================================================================\n+    // Internal attributes, Misc:\n+    // ==========================================================================\n+    gated!(\n+        lang, Normal, template!(NameValueStr: \"name\"), lang_items,\n+        \"language items are subject to change\",\n+    ),\n+    gated!(rustc_diagnostic_item), // XXX modified in rust-analyzer\n+    gated!(\n+        // Used in resolve:\n+        prelude_import, AssumedUsed, template!(Word),\n+        \"`#[prelude_import]` is for use by rustc only\",\n+    ),\n+    gated!(\n+        rustc_paren_sugar, Normal, template!(Word), unboxed_closures,\n+        \"unboxed_closures are still evolving\",\n+    ),\n+    rustc_attr!(\n+        rustc_inherit_overflow_checks, AssumedUsed, template!(Word),\n+        \"the `#[rustc_inherit_overflow_checks]` attribute is just used to control \\\n+        overflow checking behavior of several libcore functions that are inlined \\\n+        across crates and will never be stable\",\n+    ),\n+    rustc_attr!(rustc_reservation_impl, Normal, template!(NameValueStr: \"reservation message\"),\n+                \"the `#[rustc_reservation_impl]` attribute is internally used \\\n+                 for reserving for `for<T> From<!> for T` impl\"\n+    ),\n+    rustc_attr!(\n+        rustc_test_marker, Normal, template!(Word),\n+        \"the `#[rustc_test_marker]` attribute is used internally to track tests\",\n+    ),\n+    rustc_attr!(\n+        rustc_unsafe_specialization_marker, Normal, template!(Word),\n+        \"the `#[rustc_unsafe_specialization_marker]` attribute is used to check specializations\"\n+    ),\n+    rustc_attr!(\n+        rustc_specialization_trait, Normal, template!(Word),\n+        \"the `#[rustc_specialization_trait]` attribute is used to check specializations\"\n+    ),\n+\n+    // ==========================================================================\n+    // Internal attributes, Testing:\n+    // ==========================================================================\n+\n+    rustc_attr!(TEST, rustc_outlives, Normal, template!(Word)),\n+    rustc_attr!(TEST, rustc_capture_analysis, Normal, template!(Word)),\n+    rustc_attr!(TEST, rustc_variance, Normal, template!(Word)),\n+    rustc_attr!(TEST, rustc_layout, Normal, template!(List: \"field1, field2, ...\")),\n+    rustc_attr!(TEST, rustc_regions, Normal, template!(Word)),\n+    rustc_attr!(\n+        TEST, rustc_error, AssumedUsed,\n+        template!(Word, List: \"delay_span_bug_from_inside_query\")\n+    ),\n+    rustc_attr!(TEST, rustc_dump_user_substs, AssumedUsed, template!(Word)),\n+    rustc_attr!(TEST, rustc_if_this_changed, AssumedUsed, template!(Word, List: \"DepNode\")),\n+    rustc_attr!(TEST, rustc_then_this_would_need, AssumedUsed, template!(List: \"DepNode\")),\n+    rustc_attr!(\n+        TEST, rustc_dirty, AssumedUsed,\n+        template!(List: r#\"cfg = \"...\", /*opt*/ label = \"...\", /*opt*/ except = \"...\"\"#),\n+    ),\n+    rustc_attr!(\n+        TEST, rustc_clean, AssumedUsed,\n+        template!(List: r#\"cfg = \"...\", /*opt*/ label = \"...\", /*opt*/ except = \"...\"\"#),\n+    ),\n+    rustc_attr!(\n+        TEST, rustc_partition_reused, AssumedUsed,\n+        template!(List: r#\"cfg = \"...\", module = \"...\"\"#),\n+    ),\n+    rustc_attr!(\n+        TEST, rustc_partition_codegened, AssumedUsed,\n+        template!(List: r#\"cfg = \"...\", module = \"...\"\"#),\n+    ),\n+    rustc_attr!(\n+        TEST, rustc_expected_cgu_reuse, AssumedUsed,\n+        template!(List: r#\"cfg = \"...\", module = \"...\", kind = \"...\"\"#),\n+    ),\n+    rustc_attr!(TEST, rustc_synthetic, AssumedUsed, template!(Word)),\n+    rustc_attr!(TEST, rustc_symbol_name, AssumedUsed, template!(Word)),\n+    rustc_attr!(TEST, rustc_polymorphize_error, AssumedUsed, template!(Word)),\n+    rustc_attr!(TEST, rustc_def_path, AssumedUsed, template!(Word)),\n+    rustc_attr!(TEST, rustc_mir, AssumedUsed, template!(List: \"arg1, arg2, ...\")),\n+    rustc_attr!(TEST, rustc_dump_program_clauses, AssumedUsed, template!(Word)),\n+    rustc_attr!(TEST, rustc_dump_env_program_clauses, AssumedUsed, template!(Word)),\n+    rustc_attr!(TEST, rustc_object_lifetime_default, AssumedUsed, template!(Word)),\n+    rustc_attr!(TEST, rustc_dummy, Normal, template!(Word /* doesn't matter*/)),\n+    gated!(\n+        omit_gdb_pretty_printer_section, AssumedUsed, template!(Word),\n+        \"the `#[omit_gdb_pretty_printer_section]` attribute is just used for the Rust test suite\",\n+    ),\n+];"}, {"sha": "a75d4d302f83b5f57f60b1c73d66418c37508b4f", "filename": "crates/hir_def/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3674e494ca5213633b85b3a65823f31742e0638b/crates%2Fhir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3674e494ca5213633b85b3a65823f31742e0638b/crates%2Fhir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Flib.rs?ref=3674e494ca5213633b85b3a65823f31742e0638b", "patch": "@@ -18,6 +18,7 @@ pub mod attr;\n pub mod path;\n pub mod type_ref;\n pub mod builtin_type;\n+pub mod builtin_attr;\n pub mod diagnostics;\n pub mod per_ns;\n pub mod item_scope;"}]}