{"sha": "592e7ffdf8894c928d8661cca32b0b2395762ec2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5MmU3ZmZkZjg4OTRjOTI4ZDg2NjFjY2EzMmIwYjIzOTU3NjJlYzI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2015-03-18T23:44:37Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-19T02:54:40Z"}, "message": "core: Inline most cell methods.\n\nThis is a significant performance problem in Servo.", "tree": {"sha": "be8582c16f831c77c0e3c70825ec99d329dda11f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be8582c16f831c77c0e3c70825ec99d329dda11f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/592e7ffdf8894c928d8661cca32b0b2395762ec2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/592e7ffdf8894c928d8661cca32b0b2395762ec2", "html_url": "https://github.com/rust-lang/rust/commit/592e7ffdf8894c928d8661cca32b0b2395762ec2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/592e7ffdf8894c928d8661cca32b0b2395762ec2/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12cb7c6a2847959460ecac75b2c983d071585472", "url": "https://api.github.com/repos/rust-lang/rust/commits/12cb7c6a2847959460ecac75b2c983d071585472", "html_url": "https://github.com/rust-lang/rust/commit/12cb7c6a2847959460ecac75b2c983d071585472"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "e3a7f23851cde3905ecc061368c2a00340330626", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/592e7ffdf8894c928d8661cca32b0b2395762ec2/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592e7ffdf8894c928d8661cca32b0b2395762ec2/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=592e7ffdf8894c928d8661cca32b0b2395762ec2", "patch": "@@ -168,6 +168,7 @@ impl<T:Copy> Cell<T> {\n     /// let c = Cell::new(5);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn new(value: T) -> Cell<T> {\n         Cell {\n             value: UnsafeCell::new(value),\n@@ -237,6 +238,7 @@ unsafe impl<T> Send for Cell<T> where T: Send {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T:Copy> Clone for Cell<T> {\n+    #[inline]\n     fn clone(&self) -> Cell<T> {\n         Cell::new(self.get())\n     }\n@@ -245,13 +247,15 @@ impl<T:Copy> Clone for Cell<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T:Default + Copy> Default for Cell<T> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     fn default() -> Cell<T> {\n         Cell::new(Default::default())\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T:PartialEq + Copy> PartialEq for Cell<T> {\n+    #[inline]\n     fn eq(&self, other: &Cell<T>) -> bool {\n         self.get() == other.get()\n     }\n@@ -295,6 +299,7 @@ impl<T> RefCell<T> {\n     /// let c = RefCell::new(5);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn new(value: T) -> RefCell<T> {\n         RefCell {\n             value: UnsafeCell::new(value),\n@@ -314,6 +319,7 @@ impl<T> RefCell<T> {\n     /// let five = c.into_inner();\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn into_inner(self) -> T {\n         // Since this function takes `self` (the `RefCell`) by value, the\n         // compiler statically verifies that it is not currently borrowed.\n@@ -327,6 +333,7 @@ impl<T> RefCell<T> {\n     /// The returned value can be dispatched on to determine if a call to\n     /// `borrow` or `borrow_mut` would succeed.\n     #[unstable(feature = \"std_misc\")]\n+    #[inline]\n     pub fn borrow_state(&self) -> BorrowState {\n         match self.borrow.get() {\n             WRITING => BorrowState::Writing,\n@@ -344,6 +351,7 @@ impl<T> RefCell<T> {\n     #[unstable(feature = \"core\", reason = \"may be renamed or removed\")]\n     #[deprecated(since = \"1.0.0\",\n                  reason = \"dispatch on `cell.borrow_state()` instead\")]\n+    #[inline]\n     pub fn try_borrow<'a>(&'a self) -> Option<Ref<'a, T>> {\n         match BorrowRef::new(&self.borrow) {\n             Some(b) => Some(Ref { _value: unsafe { &*self.value.get() }, _borrow: b }),\n@@ -387,6 +395,7 @@ impl<T> RefCell<T> {\n     /// assert!(result.is_err());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn borrow<'a>(&'a self) -> Ref<'a, T> {\n         match BorrowRef::new(&self.borrow) {\n             Some(b) => Ref {\n@@ -406,6 +415,7 @@ impl<T> RefCell<T> {\n     #[unstable(feature = \"core\", reason = \"may be renamed or removed\")]\n     #[deprecated(since = \"1.0.0\",\n                  reason = \"dispatch on `cell.borrow_state()` instead\")]\n+    #[inline]\n     pub fn try_borrow_mut<'a>(&'a self) -> Option<RefMut<'a, T>> {\n         match BorrowRefMut::new(&self.borrow) {\n             Some(b) => Some(RefMut { _value: unsafe { &mut *self.value.get() }, _borrow: b }),\n@@ -448,6 +458,7 @@ impl<T> RefCell<T> {\n     /// assert!(result.is_err());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn borrow_mut<'a>(&'a self) -> RefMut<'a, T> {\n         match BorrowRefMut::new(&self.borrow) {\n             Some(b) => RefMut {\n@@ -475,6 +486,7 @@ unsafe impl<T> Send for RefCell<T> where T: Send {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Clone> Clone for RefCell<T> {\n+    #[inline]\n     fn clone(&self) -> RefCell<T> {\n         RefCell::new(self.borrow().clone())\n     }\n@@ -483,13 +495,15 @@ impl<T: Clone> Clone for RefCell<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T:Default> Default for RefCell<T> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     fn default() -> RefCell<T> {\n         RefCell::new(Default::default())\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: PartialEq> PartialEq for RefCell<T> {\n+    #[inline]\n     fn eq(&self, other: &RefCell<T>) -> bool {\n         *self.borrow() == *other.borrow()\n     }\n@@ -500,6 +514,7 @@ struct BorrowRef<'b> {\n }\n \n impl<'b> BorrowRef<'b> {\n+    #[inline]\n     fn new(borrow: &'b Cell<BorrowFlag>) -> Option<BorrowRef<'b>> {\n         match borrow.get() {\n             WRITING => None,\n@@ -513,6 +528,7 @@ impl<'b> BorrowRef<'b> {\n \n #[unsafe_destructor]\n impl<'b> Drop for BorrowRef<'b> {\n+    #[inline]\n     fn drop(&mut self) {\n         let borrow = self._borrow.get();\n         debug_assert!(borrow != WRITING && borrow != UNUSED);\n@@ -521,6 +537,7 @@ impl<'b> Drop for BorrowRef<'b> {\n }\n \n impl<'b> Clone for BorrowRef<'b> {\n+    #[inline]\n     fn clone(&self) -> BorrowRef<'b> {\n         // Since this Ref exists, we know the borrow flag\n         // is not set to WRITING.\n@@ -561,6 +578,7 @@ impl<'b, T> Deref for Ref<'b, T> {\n /// use of `r.borrow().clone()` to clone the contents of a `RefCell`.\n #[unstable(feature = \"core\",\n            reason = \"likely to be moved to a method, pending language changes\")]\n+#[inline]\n pub fn clone_ref<'b, T:Clone>(orig: &Ref<'b, T>) -> Ref<'b, T> {\n     Ref {\n         _value: orig._value,\n@@ -574,6 +592,7 @@ struct BorrowRefMut<'b> {\n \n #[unsafe_destructor]\n impl<'b> Drop for BorrowRefMut<'b> {\n+    #[inline]\n     fn drop(&mut self) {\n         let borrow = self._borrow.get();\n         debug_assert!(borrow == WRITING);\n@@ -582,6 +601,7 @@ impl<'b> Drop for BorrowRefMut<'b> {\n }\n \n impl<'b> BorrowRefMut<'b> {\n+    #[inline]\n     fn new(borrow: &'b Cell<BorrowFlag>) -> Option<BorrowRefMut<'b>> {\n         match borrow.get() {\n             UNUSED => {\n@@ -674,6 +694,7 @@ impl<T> UnsafeCell<T> {\n     /// let uc = UnsafeCell::new(5);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn new(value: T) -> UnsafeCell<T> {\n         UnsafeCell { value: value }\n     }"}]}