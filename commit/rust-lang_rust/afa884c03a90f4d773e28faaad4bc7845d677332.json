{"sha": "afa884c03a90f4d773e28faaad4bc7845d677332", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmYTg4NGMwM2E5MGY0ZDc3M2UyOGZhYWFkNGJjNzg0NWQ2NzczMzI=", "commit": {"author": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-11-01T14:30:37Z"}, "committer": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-11-13T11:28:43Z"}, "message": "Instantiate all bound vars existentially", "tree": {"sha": "e91cfa82db867a2540ed00b66bd2db799c442c2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e91cfa82db867a2540ed00b66bd2db799c442c2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afa884c03a90f4d773e28faaad4bc7845d677332", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afa884c03a90f4d773e28faaad4bc7845d677332", "html_url": "https://github.com/rust-lang/rust/commit/afa884c03a90f4d773e28faaad4bc7845d677332", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afa884c03a90f4d773e28faaad4bc7845d677332/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79b6c41bc2d4e9cb9a0c92c0c446882a0cf1a804", "url": "https://api.github.com/repos/rust-lang/rust/commits/79b6c41bc2d4e9cb9a0c92c0c446882a0cf1a804", "html_url": "https://github.com/rust-lang/rust/commit/79b6c41bc2d4e9cb9a0c92c0c446882a0cf1a804"}], "stats": {"total": 133, "additions": 68, "deletions": 65}, "files": [{"sha": "70ce5d0d8dc0c13e6bd6a6a02c3690c9319ca383", "filename": "src/librustc/infer/canonical/substitute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa884c03a90f4d773e28faaad4bc7845d677332/src%2Flibrustc%2Finfer%2Fcanonical%2Fsubstitute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa884c03a90f4d773e28faaad4bc7845d677332/src%2Flibrustc%2Finfer%2Fcanonical%2Fsubstitute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fsubstitute.rs?ref=afa884c03a90f4d773e28faaad4bc7845d677332", "patch": "@@ -80,6 +80,6 @@ where\n             }\n         };\n \n-        tcx.replace_escaping_bound_vars(value, fld_r, fld_t)\n+        tcx.replace_escaping_bound_vars(value, fld_r, fld_t).0\n     }\n }"}, {"sha": "642382bcf0fa31311e17bb035a75c552b17ed31d", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/afa884c03a90f4d773e28faaad4bc7845d677332/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa884c03a90f4d773e28faaad4bc7845d677332/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=afa884c03a90f4d773e28faaad4bc7845d677332", "patch": "@@ -59,11 +59,11 @@ impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n             // with a fresh region variable. These region variables --\n             // but no other pre-existing region variables -- can name\n             // the placeholders.\n-            let (a_prime, _) =\n-                self.infcx.replace_late_bound_regions_with_fresh_var(\n-                    span,\n-                    HigherRankedType,\n-                    a);\n+            let (a_prime, _) = self.infcx.replace_bound_vars_with_fresh_vars(\n+                span,\n+                HigherRankedType,\n+                a\n+            );\n \n             debug!(\"a_prime={:?}\", a_prime);\n             debug!(\"b_prime={:?}\", b_prime);"}, {"sha": "4ddf47c88ddbaa8e21cba5b59f59be173195da62", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/afa884c03a90f4d773e28faaad4bc7845d677332/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa884c03a90f4d773e28faaad4bc7845d677332/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=afa884c03a90f4d773e28faaad4bc7845d677332", "patch": "@@ -1328,18 +1328,18 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         self.report_and_explain_type_error(trace, &err)\n     }\n \n-    pub fn replace_late_bound_regions_with_fresh_var<T>(\n+    pub fn replace_bound_vars_with_fresh_vars<T>(\n         &self,\n         span: Span,\n         lbrct: LateBoundRegionConversionTime,\n-        value: &ty::Binder<T>,\n+        value: &ty::Binder<T>\n     ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: TypeFoldable<'tcx>\n     {\n-        self.tcx.replace_late_bound_regions(value, |br| {\n-            self.next_region_var(LateBoundRegion(span, br, lbrct))\n-        })\n+        let fld_r = |br| self.next_region_var(LateBoundRegion(span, br, lbrct));\n+        let fld_t = |_| self.next_ty_var(TypeVariableOrigin::MiscVariable(span));\n+        self.tcx.replace_bound_vars(value, fld_r, fld_t)\n     }\n \n     /// Given a higher-ranked projection predicate like:"}, {"sha": "2761a954cea88deb69adb23334728fb9cb839698", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/afa884c03a90f4d773e28faaad4bc7845d677332/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa884c03a90f4d773e28faaad4bc7845d677332/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=afa884c03a90f4d773e28faaad4bc7845d677332", "patch": "@@ -212,10 +212,11 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             // cause I have no idea for a good error message.\n             if let ty::Predicate::Projection(ref data) = predicate {\n                 let mut selcx = SelectionContext::new(self);\n-                let (data, _) = self.replace_late_bound_regions_with_fresh_var(\n+                let (data, _) = self.replace_bound_vars_with_fresh_vars(\n                     obligation.cause.span,\n                     infer::LateBoundRegionConversionTime::HigherRankedType,\n-                    data);\n+                    data\n+                );\n                 let mut obligations = vec![];\n                 let normalized_ty = super::normalize_projection_type(\n                     &mut selcx,"}, {"sha": "a897afa0ca663ea1b8979c42045a6a9b3e6f3b35", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/afa884c03a90f4d773e28faaad4bc7845d677332/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa884c03a90f4d773e28faaad4bc7845d677332/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=afa884c03a90f4d773e28faaad4bc7845d677332", "patch": "@@ -520,22 +520,14 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn replace_late_bound_regions<T, F>(\n         self,\n         value: &Binder<T>,\n-        mut fld_r: F\n+        fld_r: F\n     ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)\n         where F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,\n               T: TypeFoldable<'tcx>\n     {\n-        let mut map = BTreeMap::new();\n-        let mut real_fldr = |br| {\n-            *map.entry(br).or_insert_with(|| fld_r(br))\n-        };\n-\n         // identity for bound types\n-        let mut fld_t = |bound_ty| self.mk_ty(ty::Bound(bound_ty));\n-\n-        let mut replacer = BoundVarReplacer::new(self, &mut real_fldr, &mut fld_t);\n-        let result = value.skip_binder().fold_with(&mut replacer);\n-        (result, map)\n+        let fld_t = |bound_ty| self.mk_ty(ty::Bound(bound_ty));\n+        self.replace_escaping_bound_vars(value.skip_binder(), fld_r, fld_t)\n     }\n \n     /// Replace all escaping bound vars. The `fld_r` closure replaces escaping\n@@ -545,17 +537,23 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         value: &T,\n         mut fld_r: F,\n         mut fld_t: G\n-    ) -> T\n+    ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)\n         where F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,\n               G: FnMut(ty::BoundTy) -> ty::Ty<'tcx>,\n               T: TypeFoldable<'tcx>\n     {\n+        let mut map = BTreeMap::new();\n+\n         if !value.has_escaping_bound_vars() {\n-            value.clone()\n+            (value.clone(), map)\n         } else {\n-            let mut replacer = BoundVarReplacer::new(self, &mut fld_r, &mut fld_t);\n+            let mut real_fld_r = |br| {\n+                *map.entry(br).or_insert_with(|| fld_r(br))\n+            };\n+\n+            let mut replacer = BoundVarReplacer::new(self, &mut real_fld_r, &mut fld_t);\n             let result = value.fold_with(&mut replacer);\n-            result\n+            (result, map)\n         }\n     }\n \n@@ -567,7 +565,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         value: &Binder<T>,\n         fld_r: F,\n         fld_t: G\n-    ) -> T\n+    ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)\n         where F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,\n               G: FnMut(ty::BoundTy) -> ty::Ty<'tcx>,\n               T: TypeFoldable<'tcx>"}, {"sha": "85ea39e538f785a6aee3b9969b4da7872d7bef1b", "filename": "src/librustc_mir/borrow_check/nll/type_check/input_output.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa884c03a90f4d773e28faaad4bc7845d677332/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa884c03a90f4d773e28faaad4bc7845d677332/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs?ref=afa884c03a90f4d773e28faaad4bc7845d677332", "patch": "@@ -62,7 +62,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                     // \"inside\" the closure.\n                     Some(\n                         self.infcx\n-                            .replace_late_bound_regions_with_fresh_var(\n+                            .replace_bound_vars_with_fresh_vars(\n                                 mir.span,\n                                 LateBoundRegionConversionTime::FnCall,\n                                 &poly_sig,"}, {"sha": "2193dba9fcac8b9053d5b1ee004070308e5f9dcb", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa884c03a90f4d773e28faaad4bc7845d677332/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa884c03a90f4d773e28faaad4bc7845d677332/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=afa884c03a90f4d773e28faaad4bc7845d677332", "patch": "@@ -1406,7 +1406,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                         return;\n                     }\n                 };\n-                let (sig, map) = self.infcx.replace_late_bound_regions_with_fresh_var(\n+                let (sig, map) = self.infcx.replace_bound_vars_with_fresh_vars(\n                     term.source_info.span,\n                     LateBoundRegionConversionTime::FnCall,\n                     &sig,"}, {"sha": "0fd9f607a54628df1e04f18c544644b272ebc9e0", "filename": "src/librustc_traits/chalk_context/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/afa884c03a90f4d773e28faaad4bc7845d677332/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa884c03a90f4d773e28faaad4bc7845d677332/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs?ref=afa884c03a90f4d773e28faaad4bc7845d677332", "patch": "@@ -347,12 +347,11 @@ impl context::UnificationOps<ChalkArenas<'gcx>, ChalkArenas<'tcx>>\n         &mut self,\n         arg: &ty::Binder<Goal<'tcx>>,\n     ) -> Goal<'tcx> {\n-        let (value, _map) = self.infcx.replace_late_bound_regions_with_fresh_var(\n+        self.infcx.replace_bound_vars_with_fresh_vars(\n             DUMMY_SP,\n             LateBoundRegionConversionTime::HigherRankedType,\n-            arg,\n-        );\n-        value\n+            arg\n+        ).0\n     }\n \n     fn debug_ex_clause(&mut self, value: &'v ChalkExClause<'tcx>) -> Box<dyn Debug + 'v> {"}, {"sha": "411583b36b9e36aa280210bdb15a0516c1e9caa4", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/afa884c03a90f4d773e28faaad4bc7845d677332/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa884c03a90f4d773e28faaad4bc7845d677332/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=afa884c03a90f4d773e28faaad4bc7845d677332", "patch": "@@ -110,10 +110,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 // fnmut vs fnonce. If so, we have to defer further processing.\n                 if self.closure_kind(def_id, substs).is_none() {\n                     let closure_ty = self.closure_sig(def_id, substs);\n-                    let fn_sig = self.replace_late_bound_regions_with_fresh_var(call_expr.span,\n-                                                                   infer::FnCall,\n-                                                                   &closure_ty)\n-                        .0;\n+                    let fn_sig = self.replace_bound_vars_with_fresh_vars(\n+                        call_expr.span,\n+                        infer::FnCall,\n+                        &closure_ty\n+                    ).0;\n                     let adjustments = autoderef.adjust_steps(Needs::None);\n                     self.record_deferred_call_resolution(def_id, DeferredCallResolution {\n                         call_expr,\n@@ -284,7 +285,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // previously appeared within a `Binder<>` and hence would not\n         // have been normalized before.\n         let fn_sig =\n-            self.replace_late_bound_regions_with_fresh_var(call_expr.span, infer::FnCall, &fn_sig)\n+            self.replace_bound_vars_with_fresh_vars(call_expr.span, infer::FnCall, &fn_sig)\n                 .0;\n         let fn_sig = self.normalize_associated_types_in(call_expr.span, &fn_sig);\n "}, {"sha": "10ac2448d007b01c73d65dd33f2bcdce8dbac6fe", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/afa884c03a90f4d773e28faaad4bc7845d677332/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa884c03a90f4d773e28faaad4bc7845d677332/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=afa884c03a90f4d773e28faaad4bc7845d677332", "patch": "@@ -564,7 +564,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             // `liberated_sig` is E'.\n             {\n                 // Instantiate (this part of..) S to S', i.e., with fresh variables.\n-                let (supplied_ty, _) = self.infcx.replace_late_bound_regions_with_fresh_var(\n+                let (supplied_ty, _) = self.infcx.replace_bound_vars_with_fresh_vars(\n                     hir_ty.span,\n                     LateBoundRegionConversionTime::FnCall,\n                     &ty::Binder::bind(supplied_ty),\n@@ -605,7 +605,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 );\n             }\n \n-            let (supplied_output_ty, _) = self.infcx.replace_late_bound_regions_with_fresh_var(\n+            let (supplied_output_ty, _) = self.infcx.replace_bound_vars_with_fresh_vars(\n                 decl.output.span(),\n                 LateBoundRegionConversionTime::FnCall,\n                 &supplied_sig.output(),"}, {"sha": "e30ebe07e54185a26a704dc0a289d6b7c838f376", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/afa884c03a90f4d773e28faaad4bc7845d677332/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa884c03a90f4d773e28faaad4bc7845d677332/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=afa884c03a90f4d773e28faaad4bc7845d677332", "patch": "@@ -233,7 +233,7 @@ fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         let mut selcx = traits::SelectionContext::new(&infcx);\n \n         let impl_m_own_bounds = impl_m_predicates.instantiate_own(tcx, impl_to_skol_substs);\n-        let (impl_m_own_bounds, _) = infcx.replace_late_bound_regions_with_fresh_var(\n+        let (impl_m_own_bounds, _) = infcx.replace_bound_vars_with_fresh_vars(\n             impl_m_span,\n             infer::HigherRankedType,\n             &ty::Binder::bind(impl_m_own_bounds.predicates)\n@@ -262,10 +262,11 @@ fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // Compute placeholder form of impl and trait method tys.\n         let tcx = infcx.tcx;\n \n-        let (impl_sig, _) =\n-            infcx.replace_late_bound_regions_with_fresh_var(impl_m_span,\n-                                                            infer::HigherRankedType,\n-                                                            &tcx.fn_sig(impl_m.def_id));\n+        let (impl_sig, _) = infcx.replace_bound_vars_with_fresh_vars(\n+            impl_m_span,\n+            infer::HigherRankedType,\n+            &tcx.fn_sig(impl_m.def_id)\n+        );\n         let impl_sig =\n             inh.normalize_associated_types_in(impl_m_span,\n                                               impl_m_node_id,"}, {"sha": "5144f3e41d4a9ad4a7c8fc32955fcd21354510d9", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/afa884c03a90f4d773e28faaad4bc7845d677332/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa884c03a90f4d773e28faaad4bc7845d677332/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=afa884c03a90f4d773e28faaad4bc7845d677332", "patch": "@@ -245,7 +245,7 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n                     let original_poly_trait_ref = principal.with_self_ty(this.tcx, object_ty);\n                     let upcast_poly_trait_ref = this.upcast(original_poly_trait_ref, trait_def_id);\n                     let upcast_trait_ref =\n-                        this.replace_late_bound_regions_with_fresh_var(&upcast_poly_trait_ref);\n+                        this.replace_bound_vars_with_fresh_vars(&upcast_poly_trait_ref);\n                     debug!(\"original_poly_trait_ref={:?} upcast_trait_ref={:?} target_trait={:?}\",\n                            original_poly_trait_ref,\n                            upcast_trait_ref,\n@@ -268,7 +268,7 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n             probe::WhereClausePick(ref poly_trait_ref) => {\n                 // Where clauses can have bound regions in them. We need to instantiate\n                 // those to convert from a poly-trait-ref to a trait-ref.\n-                self.replace_late_bound_regions_with_fresh_var(&poly_trait_ref).substs\n+                self.replace_bound_vars_with_fresh_vars(&poly_trait_ref).substs\n             }\n         }\n     }\n@@ -398,7 +398,7 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n         // NB: Instantiate late-bound regions first so that\n         // `instantiate_type_scheme` can normalize associated types that\n         // may reference those regions.\n-        let method_sig = self.replace_late_bound_regions_with_fresh_var(&sig);\n+        let method_sig = self.replace_bound_vars_with_fresh_vars(&sig);\n         debug!(\"late-bound lifetimes from method instantiated, method_sig={:?}\",\n                method_sig);\n \n@@ -633,11 +633,9 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n         upcast_trait_refs.into_iter().next().unwrap()\n     }\n \n-    fn replace_late_bound_regions_with_fresh_var<T>(&self, value: &ty::Binder<T>) -> T\n+    fn replace_bound_vars_with_fresh_vars<T>(&self, value: &ty::Binder<T>) -> T\n         where T: TypeFoldable<'tcx>\n     {\n-        self.fcx\n-            .replace_late_bound_regions_with_fresh_var(self.span, infer::FnCall, value)\n-            .0\n+        self.fcx.replace_bound_vars_with_fresh_vars(self.span, infer::FnCall, value).0\n     }\n }"}, {"sha": "ac338ba667865204cf25deb0658583934cb2b835", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/afa884c03a90f4d773e28faaad4bc7845d677332/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa884c03a90f4d773e28faaad4bc7845d677332/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=afa884c03a90f4d773e28faaad4bc7845d677332", "patch": "@@ -311,9 +311,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // `instantiate_type_scheme` can normalize associated types that\n         // may reference those regions.\n         let fn_sig = tcx.fn_sig(def_id);\n-        let fn_sig = self.replace_late_bound_regions_with_fresh_var(span,\n-                                                                    infer::FnCall,\n-                                                                    &fn_sig).0;\n+        let fn_sig = self.replace_bound_vars_with_fresh_vars(\n+            span,\n+            infer::FnCall,\n+            &fn_sig\n+        ).0;\n         let fn_sig = fn_sig.subst(self.tcx, substs);\n         let fn_sig = match self.normalize_associated_types_in_as_infer_ok(span, &fn_sig) {\n             InferOk { value, obligations: o } => {"}, {"sha": "4c06cae1d0752391595ad13a18595749b7e1a810", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/afa884c03a90f4d773e28faaad4bc7845d677332/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa884c03a90f4d773e28faaad4bc7845d677332/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=afa884c03a90f4d773e28faaad4bc7845d677332", "patch": "@@ -755,8 +755,11 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                 self.probe(|_| {\n                     let substs = self.fresh_substs_for_item(self.span, method.def_id);\n                     let fty = fty.subst(self.tcx, substs);\n-                    let (fty, _) = self.replace_late_bound_regions_with_fresh_var(\n-                        self.span, infer::FnCall, &fty);\n+                    let (fty, _) = self.replace_bound_vars_with_fresh_vars(\n+                        self.span,\n+                        infer::FnCall,\n+                        &fty\n+                    );\n \n                     if let Some(self_ty) = self_ty {\n                         if self.at(&ObligationCause::dummy(), self.param_env)"}, {"sha": "41e0c6c0a19722f45d057f611869cee78e5185c3", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/afa884c03a90f4d773e28faaad4bc7845d677332/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa884c03a90f4d773e28faaad4bc7845d677332/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=afa884c03a90f4d773e28faaad4bc7845d677332", "patch": "@@ -1921,11 +1921,11 @@ impl<'a, 'gcx, 'tcx> AstConv<'gcx, 'tcx> for FnCtxt<'a, 'gcx, 'tcx> {\n                                         poly_trait_ref: ty::PolyTraitRef<'tcx>)\n                                         -> Ty<'tcx>\n     {\n-        let (trait_ref, _) =\n-            self.replace_late_bound_regions_with_fresh_var(\n-                span,\n-                infer::LateBoundRegionConversionTime::AssocTypeProjection(item_def_id),\n-                &poly_trait_ref);\n+        let (trait_ref, _) = self.replace_bound_vars_with_fresh_vars(\n+            span,\n+            infer::LateBoundRegionConversionTime::AssocTypeProjection(item_def_id),\n+            &poly_trait_ref\n+        );\n \n         self.tcx().mk_projection(item_def_id, trait_ref.substs)\n     }"}]}