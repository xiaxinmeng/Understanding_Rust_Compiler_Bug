{"sha": "d030752f63b9d52bb5fa8733080e674697640866", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwMzA3NTJmNjNiOWQ1MmJiNWZhODczMzA4MGU2NzQ2OTc2NDA4NjY=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-06-24T15:54:13Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-27T19:06:36Z"}, "message": "refactor query_outlives_constraints_into_obligations", "tree": {"sha": "2700be6fb4bcb5d315143e1a903a7180e32cc950", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2700be6fb4bcb5d315143e1a903a7180e32cc950"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d030752f63b9d52bb5fa8733080e674697640866", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d030752f63b9d52bb5fa8733080e674697640866", "html_url": "https://github.com/rust-lang/rust/commit/d030752f63b9d52bb5fa8733080e674697640866", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d030752f63b9d52bb5fa8733080e674697640866/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ba61922d2500e156df7f76ffeccf022cdeb0f9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ba61922d2500e156df7f76ffeccf022cdeb0f9a", "html_url": "https://github.com/rust-lang/rust/commit/3ba61922d2500e156df7f76ffeccf022cdeb0f9a"}], "stats": {"total": 19, "additions": 6, "deletions": 13}, "files": [{"sha": "1a54fa0657c5684a8b6409fdcdc89074a152f296", "filename": "src/librustc_infer/infer/canonical/query_response.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d030752f63b9d52bb5fa8733080e674697640866/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d030752f63b9d52bb5fa8733080e674697640866/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs?ref=d030752f63b9d52bb5fa8733080e674697640866", "patch": "@@ -525,12 +525,10 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n         result_subst: &'a CanonicalVarValues<'tcx>,\n     ) -> impl Iterator<Item = PredicateObligation<'tcx>> + 'a + Captures<'tcx> {\n         unsubstituted_region_constraints.iter().map(move |constraint| {\n-            let constraint = substitute_value(self.tcx, result_subst, constraint);\n+            let ty::OutlivesPredicate(k1, r2) =\n+                *substitute_value(self.tcx, result_subst, constraint).skip_binder();\n \n-            let to_predicate = |ty::OutlivesPredicate(k1, r2): ty::OutlivesPredicate<\n-                GenericArg<'tcx>,\n-                ty::Region<'tcx>,\n-            >| match k1.unpack() {\n+            let predicate = match k1.unpack() {\n                 GenericArgKind::Lifetime(r1) => {\n                     ty::PredicateKind::RegionOutlives(ty::OutlivesPredicate(r1, r2))\n                         .to_predicate(self.tcx)\n@@ -541,16 +539,11 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n                 }\n                 GenericArgKind::Const(..) => {\n                     // Consts cannot outlive one another, so we don't expect to\n-                    // ecounter this branch.\n+                    // encounter this branch.\n                     span_bug!(cause.span, \"unexpected const outlives {:?}\", constraint);\n                 }\n-            };\n-\n-            let predicate = if let Some(constraint) = constraint.no_bound_vars() {\n-                to_predicate(constraint)\n-            } else {\n-                ty::PredicateKind::ForAll(constraint.map_bound(to_predicate)).to_predicate(self.tcx)\n-            };\n+            }\n+            .potentially_quantified(self.tcx, ty::PredicateKind::ForAll);\n \n             Obligation::new(cause.clone(), param_env, predicate)\n         })"}]}