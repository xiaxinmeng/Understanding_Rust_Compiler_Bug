{"sha": "9631e9f9b3ffcf98b2654eeee8c4dd5f3a2ca50c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2MzFlOWY5YjNmZmNmOThiMjY1NGVlZWU4YzRkZDVmM2EyY2E1MGM=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2016-09-19T07:32:28Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2016-09-19T07:48:08Z"}, "message": "rustc: implement -C link-arg\n\nthis flag lets you pass a _single_ argument to the linker but can be\nused _repeatedly_. For example, instead of using:\n\n```\nrustc -C link-args='-l bar' (..)\n```\n\nyou could write\n\n```\nrustc -C link-arg='-l' -C link-arg='bar' (..)\n```\n\nThis new flag can be used with RUSTFLAGS where `-C link-args` has\nproblems with \"nested\" spaces:\n\n```\nRUSTFLAGS='-C link-args=\"-Tlayout.ld -nostartfiles\"'\n```\n\nThis passes three arguments to rustc: `-C` `link-args=\"-Tlayout.ld` and\n`-nostartfiles\"` to `rustc`. That's not what we meant. But this does\nwhat we want:\n\n```\nRUSTFLAGS='-C link-arg=-Tlayout.ld -C link-arg=-nostartfiles`\n```\n\ncc rust-lang/rfcs#1509", "tree": {"sha": "d3440baac928b78cc6251a064cbd1b5748d2644d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3440baac928b78cc6251a064cbd1b5748d2644d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9631e9f9b3ffcf98b2654eeee8c4dd5f3a2ca50c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9631e9f9b3ffcf98b2654eeee8c4dd5f3a2ca50c", "html_url": "https://github.com/rust-lang/rust/commit/9631e9f9b3ffcf98b2654eeee8c4dd5f3a2ca50c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9631e9f9b3ffcf98b2654eeee8c4dd5f3a2ca50c/comments", "author": null, "committer": null, "parents": [{"sha": "fb62f4d544c954d355716dca8beb55726036721e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb62f4d544c954d355716dca8beb55726036721e", "html_url": "https://github.com/rust-lang/rust/commit/fb62f4d544c954d355716dca8beb55726036721e"}], "stats": {"total": 14, "additions": 13, "deletions": 1}, "files": [{"sha": "05227e6858670d87eea362388937670b8e17958f", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9631e9f9b3ffcf98b2654eeee8c4dd5f3a2ca50c/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9631e9f9b3ffcf98b2654eeee8c4dd5f3a2ca50c/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=9631e9f9b3ffcf98b2654eeee8c4dd5f3a2ca50c", "patch": "@@ -606,6 +606,7 @@ macro_rules! options {\n         pub const parse_opt_bool: Option<&'static str> =\n             Some(\"one of: `y`, `yes`, `on`, `n`, `no`, or `off`\");\n         pub const parse_string: Option<&'static str> = Some(\"a string\");\n+        pub const parse_string_push: Option<&'static str> = Some(\"a string\");\n         pub const parse_opt_string: Option<&'static str> = Some(\"a string\");\n         pub const parse_list: Option<&'static str> = Some(\"a space-separated list of strings\");\n         pub const parse_opt_list: Option<&'static str> = Some(\"a space-separated list of strings\");\n@@ -668,6 +669,13 @@ macro_rules! options {\n             }\n         }\n \n+        fn parse_string_push(slot: &mut Vec<String>, v: Option<&str>) -> bool {\n+            match v {\n+                Some(s) => { slot.push(s.to_string()); true },\n+                None => false,\n+            }\n+        }\n+\n         fn parse_list(slot: &mut Vec<String>, v: Option<&str>)\n                       -> bool {\n             match v {\n@@ -743,6 +751,8 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n         \"tool to assemble archives with\"),\n     linker: Option<String> = (None, parse_opt_string, [UNTRACKED],\n         \"system linker to link outputs with\"),\n+    link_arg: Vec<String> = (vec![], parse_string_push, [UNTRACKED],\n+        \"a single extra argument to pass to the linker (can be used several times)\"),\n     link_args: Option<Vec<String>> = (None, parse_opt_list, [UNTRACKED],\n         \"extra arguments to pass to the linker (space separated)\"),\n     link_dead_code: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "afdc815e5f47ebf4f040450f20521bd85ad4a4c6", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9631e9f9b3ffcf98b2654eeee8c4dd5f3a2ca50c/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9631e9f9b3ffcf98b2654eeee8c4dd5f3a2ca50c/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=9631e9f9b3ffcf98b2654eeee8c4dd5f3a2ca50c", "patch": "@@ -753,7 +753,8 @@ fn link_args(cmd: &mut Linker,\n         let empty_vec = Vec::new();\n         let empty_str = String::new();\n         let args = sess.opts.cg.link_args.as_ref().unwrap_or(&empty_vec);\n-        let mut args = args.iter().chain(used_link_args.iter());\n+        let more_args = &sess.opts.cg.link_arg;\n+        let mut args = args.iter().chain(more_args.iter()).chain(used_link_args.iter());\n         let relocation_model = sess.opts.cg.relocation_model.as_ref()\n                                    .unwrap_or(&empty_str);\n         if (t.options.relocation_model == \"pic\" || *relocation_model == \"pic\")\n@@ -843,6 +844,7 @@ fn link_args(cmd: &mut Linker,\n     if let Some(ref args) = sess.opts.cg.link_args {\n         cmd.args(args);\n     }\n+    cmd.args(&sess.opts.cg.link_arg);\n     cmd.args(&used_link_args);\n }\n "}]}