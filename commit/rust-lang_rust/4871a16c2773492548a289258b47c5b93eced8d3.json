{"sha": "4871a16c2773492548a289258b47c5b93eced8d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4NzFhMTZjMjc3MzQ5MjU0OGEyODkyNThiNDdjNWI5M2VjZWQ4ZDM=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-04-15T21:33:37Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-04-23T16:19:30Z"}, "message": "rustc: Remove root_map usage from lifetime", "tree": {"sha": "a7208d01a36f5efb7133ec3646a50f7a1a0a88ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7208d01a36f5efb7133ec3646a50f7a1a0a88ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4871a16c2773492548a289258b47c5b93eced8d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4871a16c2773492548a289258b47c5b93eced8d3", "html_url": "https://github.com/rust-lang/rust/commit/4871a16c2773492548a289258b47c5b93eced8d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4871a16c2773492548a289258b47c5b93eced8d3/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c1b1a31b08cf53f2f05cd56994e87e55e230f44", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c1b1a31b08cf53f2f05cd56994e87e55e230f44", "html_url": "https://github.com/rust-lang/rust/commit/3c1b1a31b08cf53f2f05cd56994e87e55e230f44"}], "stats": {"total": 117, "additions": 2, "deletions": 115}, "files": [{"sha": "a582964bb7c50c270f226ab46140eb41543568bf", "filename": "src/librustc/middle/borrowck/gather_loans/lifetime.rs", "status": "modified", "additions": 2, "deletions": 57, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/4871a16c2773492548a289258b47c5b93eced8d3/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4871a16c2773492548a289258b47c5b93eced8d3/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs?ref=4871a16c2773492548a289258b47c5b93eced8d3", "patch": "@@ -90,7 +90,7 @@ impl<'a> GuaranteeLifetimeContext<'a> {\n                 Ok(())\n             }\n \n-            mc::cat_deref(ref base, derefs, mc::GcPtr) => {\n+            mc::cat_deref(ref base, _, mc::GcPtr) => {\n                 let base_scope = self.scope(base);\n \n                 // L-Deref-Managed-Imm-User-Root\n@@ -102,7 +102,7 @@ impl<'a> GuaranteeLifetimeContext<'a> {\n                 if !omit_root {\n                     // L-Deref-Managed-Imm-Compiler-Root\n                     // L-Deref-Managed-Mut-Compiler-Root\n-                    self.check_root(cmt, base, derefs, discr_scope)\n+                    Err(())\n                 } else {\n                     debug!(\"omitting root, base={}, base_scope={:?}\",\n                            base.repr(self.tcx()), base_scope);\n@@ -187,61 +187,6 @@ impl<'a> GuaranteeLifetimeContext<'a> {\n         }\n     }\n \n-    fn check_root(&self,\n-                  cmt_deref: &mc::cmt,\n-                  cmt_base: &mc::cmt,\n-                  derefs: uint,\n-                  discr_scope: Option<ast::NodeId>) -> R {\n-        debug!(\"check_root(cmt_deref={}, cmt_base={}, derefs={:?}, \\\n-                discr_scope={:?})\",\n-               cmt_deref.repr(self.tcx()),\n-               cmt_base.repr(self.tcx()),\n-               derefs,\n-               discr_scope);\n-\n-        // Make sure that the loan does not exceed the maximum time\n-        // that we can root the value, dynamically.\n-        let root_region = ty::ReScope(self.root_scope_id);\n-        if !self.bccx.is_subregion_of(self.loan_region, root_region) {\n-            return Err(self.report_error(\n-                err_out_of_root_scope(root_region, self.loan_region)));\n-        }\n-\n-        // Extract the scope id that indicates how long the rooting is required\n-        let root_scope = match self.loan_region {\n-            ty::ReScope(id) => id,\n-            _ => {\n-                // the check above should fail for anything is not ReScope\n-                self.bccx.tcx.sess.span_bug(\n-                    cmt_base.span,\n-                    format!(\"cannot issue root for scope region: {:?}\",\n-                         self.loan_region));\n-            }\n-        };\n-\n-        // If inside of a match arm, expand the rooting to the entire\n-        // match. See the detailed discussion in `check()` above.\n-        let root_scope = match discr_scope {\n-            None => root_scope,\n-            Some(id) => {\n-                if self.bccx.is_subscope_of(root_scope, id) {\n-                    id\n-                } else {\n-                    root_scope\n-                }\n-            }\n-        };\n-\n-        // Add a record of what is required\n-        let rm_key = root_map_key {id: cmt_deref.id, derefs: derefs};\n-        let root_info = RootInfo {scope: root_scope};\n-\n-        self.bccx.root_map.borrow_mut().insert(rm_key, root_info);\n-\n-        debug!(\"root_key: {:?} root_info: {:?}\", rm_key, root_info);\n-        Ok(())\n-    }\n-\n     fn check_scope(&self, max_scope: ty::Region) -> R {\n         //! Reports an error if `loan_region` is larger than `valid_scope`\n "}, {"sha": "b069a35ad7a262b414bcf987a30371e62f141400", "filename": "src/test/compile-fail/regions-infer-borrow-scope-too-big.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3c1b1a31b08cf53f2f05cd56994e87e55e230f44/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-too-big.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c1b1a31b08cf53f2f05cd56994e87e55e230f44/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-too-big.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-too-big.rs?ref=3c1b1a31b08cf53f2f05cd56994e87e55e230f44", "patch": "@@ -1,28 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(managed_boxes)]\n-\n-struct point {\n-    x: int,\n-    y: int,\n-}\n-\n-fn x_coord<'r>(p: &'r point) -> &'r int {\n-    return &p.x;\n-}\n-\n-fn foo(p: @point) -> &int {\n-    let xc = x_coord(p); //~ ERROR cannot root\n-    assert_eq!(*xc, 3);\n-    return xc;\n-}\n-\n-fn main() {}"}, {"sha": "9be8a5fef4dee3822e176e5cb8f8886b436a0c94", "filename": "src/test/compile-fail/regions-infer-borrow-scope-within-loop.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3c1b1a31b08cf53f2f05cd56994e87e55e230f44/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-within-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c1b1a31b08cf53f2f05cd56994e87e55e230f44/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-within-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-within-loop.rs?ref=3c1b1a31b08cf53f2f05cd56994e87e55e230f44", "patch": "@@ -1,30 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(managed_boxes)]\n-\n-fn borrow<'r, T>(x: &'r T) -> &'r T {x}\n-\n-fn foo(cond: || -> bool, make_box: || -> @int) {\n-    let mut y: &int;\n-    loop {\n-        let x = make_box();\n-\n-        // Here we complain because the resulting region\n-        // of this borrow is the fn body as a whole.\n-        y = borrow(x); //~ ERROR cannot root\n-\n-        assert_eq!(*x, *y);\n-        if cond() { break; }\n-    }\n-    assert!(*y != 0);\n-}\n-\n-fn main() {}"}]}