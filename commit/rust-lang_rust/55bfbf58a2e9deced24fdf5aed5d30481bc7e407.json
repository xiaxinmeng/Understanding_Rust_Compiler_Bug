{"sha": "55bfbf58a2e9deced24fdf5aed5d30481bc7e407", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1YmZiZjU4YTJlOWRlY2VkMjRmZGY1YWVkNWQzMDQ4MWJjN2U0MDc=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2017-02-10T15:55:05Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2017-02-10T15:55:05Z"}, "message": "Resolve Drop impls to get the right substs.\n\nFixes #133.", "tree": {"sha": "cf35d0f49f125661bc3e63c4f1e09723b2589d71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf35d0f49f125661bc3e63c4f1e09723b2589d71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55bfbf58a2e9deced24fdf5aed5d30481bc7e407", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55bfbf58a2e9deced24fdf5aed5d30481bc7e407", "html_url": "https://github.com/rust-lang/rust/commit/55bfbf58a2e9deced24fdf5aed5d30481bc7e407", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55bfbf58a2e9deced24fdf5aed5d30481bc7e407/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f0b9460cbdc16a30971e03593af99d0aaf06b91", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f0b9460cbdc16a30971e03593af99d0aaf06b91", "html_url": "https://github.com/rust-lang/rust/commit/7f0b9460cbdc16a30971e03593af99d0aaf06b91"}], "stats": {"total": 14, "additions": 12, "deletions": 2}, "files": [{"sha": "26e2b6d3dc0999f6323bdc897f381fb1b2ec26af", "filename": "src/terminator/drop.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/55bfbf58a2e9deced24fdf5aed5d30481bc7e407/src%2Fterminator%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55bfbf58a2e9deced24fdf5aed5d30481bc7e407/src%2Fterminator%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fdrop.rs?ref=55bfbf58a2e9deced24fdf5aed5d30481bc7e407", "patch": "@@ -1,4 +1,5 @@\n use rustc::hir::def_id::DefId;\n+use rustc::traits;\n use rustc::ty::layout::Layout;\n use rustc::ty::subst::{Substs, Kind};\n use rustc::ty::{self, Ty};\n@@ -13,7 +14,6 @@ use value::PrimVal;\n use value::Value;\n \n impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n-\n     /// Creates stack frames for all drop impls. See `drop` for the actual content.\n     pub fn eval_drop_impls(&mut self, drops: Vec<(DefId, Value, &'tcx Substs<'tcx>)>, span: Span) -> EvalResult<'tcx> {\n         // add them to the stack in reverse order, because the impl that needs to run the last\n@@ -98,10 +98,20 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     Lvalue::Ptr { ptr, .. } => ptr,\n                     _ => bug!(\"force allocation can only yield Lvalue::Ptr\"),\n                 };\n+\n                 // run drop impl before the fields' drop impls\n                 if let Some(drop_def_id) = adt_def.destructor() {\n-                    drop.push((drop_def_id, Value::ByVal(PrimVal::Ptr(adt_ptr)), substs));\n+                    let trait_ref = ty::Binder(ty::TraitRef {\n+                        def_id: self.tcx.lang_items.drop_trait().unwrap(),\n+                        substs: self.tcx.mk_substs_trait(ty, &[]),\n+                    });\n+                    let vtable = match self.fulfill_obligation(trait_ref) {\n+                        traits::VtableImpl(data) => data,\n+                        _ => bug!(\"dtor for {:?} is not an impl???\", ty)\n+                    };\n+                    drop.push((drop_def_id, Value::ByVal(PrimVal::Ptr(adt_ptr)), vtable.substs));\n                 }\n+\n                 let layout = self.type_layout(ty)?;\n                 let fields = match *layout {\n                     Layout::Univariant { .. } => &adt_def.struct_variant().fields,"}]}