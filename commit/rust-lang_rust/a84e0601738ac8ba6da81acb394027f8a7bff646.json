{"sha": "a84e0601738ac8ba6da81acb394027f8a7bff646", "node_id": "C_kwDOAAsO6NoAKGE4NGUwNjAxNzM4YWM4YmE2ZGE4MWFjYjM5NDAyN2Y4YTdiZmY2NDY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-26T05:15:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-26T05:15:27Z"}, "message": "Rollup merge of #107272 - compiler-errors:new-solver-more-predicates, r=lcnr\n\nImplement ObjectSafe and WF in the new solver\n\nr? ``@lcnr``", "tree": {"sha": "df8e135b6a0b7abb1e110e3f4793793bbe2eaa3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df8e135b6a0b7abb1e110e3f4793793bbe2eaa3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a84e0601738ac8ba6da81acb394027f8a7bff646", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj0gxvCRBK7hj4Ov3rIwAApnoIADRYu0un9okuruwuf9cDJGrS\nNlOK7bTTH09A4tl6WyWs6tmjd2CsoeOVlC/VkKoObznc+3gcsAeuulNc+b07m9L3\n7Z7AMgEh10gqtzFzSuWJt+DXdoAYCwTBRnT1rl1j3VspRI/tYdNTNaSHIi5XO+VP\nuUGCjP/vZnL/Yld3f7NxRi4jUygHblf53Q4Skc4UbyAxUzoggA39H1t9X58uZ48s\nVp4eF7v8fZ5/P930jhjEXsLhBtihuhcayWCHxCTor/DUu6wweKk733jEV8RmWeFA\nddbQ4E/3ZmAp8swRodCLZikzt7RyplJZpnQWB3FSuLmpdwRvKY3UvgE4/GJt3eE=\n=D2l0\n-----END PGP SIGNATURE-----\n", "payload": "tree df8e135b6a0b7abb1e110e3f4793793bbe2eaa3a\nparent a8b5e5d9dba8a8dce32c89882c40e28de2134cc5\nparent 02b80d2f9c2034b6dcaa1f83bf8c6e1eca4d8388\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1674710127 +0100\ncommitter GitHub <noreply@github.com> 1674710127 +0100\n\nRollup merge of #107272 - compiler-errors:new-solver-more-predicates, r=lcnr\n\nImplement ObjectSafe and WF in the new solver\n\nr? ``@lcnr``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a84e0601738ac8ba6da81acb394027f8a7bff646", "html_url": "https://github.com/rust-lang/rust/commit/a84e0601738ac8ba6da81acb394027f8a7bff646", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a84e0601738ac8ba6da81acb394027f8a7bff646/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8b5e5d9dba8a8dce32c89882c40e28de2134cc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8b5e5d9dba8a8dce32c89882c40e28de2134cc5", "html_url": "https://github.com/rust-lang/rust/commit/a8b5e5d9dba8a8dce32c89882c40e28de2134cc5"}, {"sha": "02b80d2f9c2034b6dcaa1f83bf8c6e1eca4d8388", "url": "https://api.github.com/repos/rust-lang/rust/commits/02b80d2f9c2034b6dcaa1f83bf8c6e1eca4d8388", "html_url": "https://github.com/rust-lang/rust/commit/02b80d2f9c2034b6dcaa1f83bf8c6e1eca4d8388"}], "stats": {"total": 83, "additions": 70, "deletions": 13}, "files": [{"sha": "6298d1e366bc62728c1679aabb7b984aa8eb75dd", "filename": "Cargo.lock", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a84e0601738ac8ba6da81acb394027f8a7bff646/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a84e0601738ac8ba6da81acb394027f8a7bff646/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=a84e0601738ac8ba6da81acb394027f8a7bff646", "patch": "@@ -351,7 +351,7 @@ dependencies = [\n  \"cargo-test-macro\",\n  \"cargo-test-support\",\n  \"cargo-util\",\n- \"clap 4.1.3\",\n+ \"clap 4.1.4\",\n  \"crates-io\",\n  \"curl\",\n  \"curl-sys\",\n@@ -655,9 +655,9 @@ dependencies = [\n \n [[package]]\n name = \"clap\"\n-version = \"4.1.3\"\n+version = \"4.1.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d8d93d855ce6a0aa87b8473ef9169482f40abaa2e9e0993024c35c902cbd5920\"\n+checksum = \"f13b9c79b5d1dd500d20ef541215a6423c75829ef43117e1b4d17fd8af0b5d76\"\n dependencies = [\n  \"bitflags\",\n  \"clap_derive 4.1.0\",\n@@ -675,7 +675,7 @@ version = \"4.0.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"10861370d2ba66b0f5989f83ebf35db6421713fd92351790e7fdd6c36774c56b\"\n dependencies = [\n- \"clap 4.1.3\",\n+ \"clap 4.1.4\",\n ]\n \n [[package]]\n@@ -2294,7 +2294,7 @@ name = \"jsondoclint\"\n version = \"0.1.0\"\n dependencies = [\n  \"anyhow\",\n- \"clap 4.1.3\",\n+ \"clap 4.1.4\",\n  \"fs-err\",\n  \"rustdoc-json-types\",\n  \"serde\",\n@@ -2557,7 +2557,7 @@ dependencies = [\n  \"ammonia\",\n  \"anyhow\",\n  \"chrono\",\n- \"clap 4.1.3\",\n+ \"clap 4.1.4\",\n  \"clap_complete\",\n  \"elasticlunr-rs\",\n  \"env_logger 0.10.0\",\n@@ -3528,7 +3528,7 @@ dependencies = [\n name = \"rustbook\"\n version = \"0.1.0\"\n dependencies = [\n- \"clap 4.1.3\",\n+ \"clap 4.1.4\",\n  \"env_logger 0.7.1\",\n  \"mdbook\",\n ]"}, {"sha": "f44648c95d742530298274dc3467dc6645e127e6", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a84e0601738ac8ba6da81acb394027f8a7bff646/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a84e0601738ac8ba6da81acb394027f8a7bff646/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=a84e0601738ac8ba6da81acb394027f8a7bff646", "patch": "@@ -277,12 +277,15 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n                         param_env,\n                         predicate: (def_id, substs, kind),\n                     }),\n+                ty::PredicateKind::ObjectSafe(trait_def_id) => {\n+                    self.compute_object_safe_goal(trait_def_id)\n+                }\n+                ty::PredicateKind::WellFormed(arg) => {\n+                    self.compute_well_formed_goal(Goal { param_env, predicate: arg })\n+                }\n                 ty::PredicateKind::Ambiguous => self.make_canonical_response(Certainty::AMBIGUOUS),\n                 // FIXME: implement these predicates :)\n-                ty::PredicateKind::WellFormed(_)\n-                | ty::PredicateKind::ObjectSafe(_)\n-                | ty::PredicateKind::ConstEvaluatable(_)\n-                | ty::PredicateKind::ConstEquate(_, _) => {\n+                ty::PredicateKind::ConstEvaluatable(_) | ty::PredicateKind::ConstEquate(_, _) => {\n                     self.make_canonical_response(Certainty::Yes)\n                 }\n                 ty::PredicateKind::TypeWellFormedFromEnv(..) => {\n@@ -362,6 +365,32 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n             Err(NoSolution)\n         }\n     }\n+\n+    fn compute_object_safe_goal(&mut self, trait_def_id: DefId) -> QueryResult<'tcx> {\n+        if self.tcx().is_object_safe(trait_def_id) {\n+            self.make_canonical_response(Certainty::Yes)\n+        } else {\n+            Err(NoSolution)\n+        }\n+    }\n+\n+    fn compute_well_formed_goal(\n+        &mut self,\n+        goal: Goal<'tcx, ty::GenericArg<'tcx>>,\n+    ) -> QueryResult<'tcx> {\n+        self.infcx.probe(|_| {\n+            match crate::traits::wf::unnormalized_obligations(\n+                self.infcx,\n+                goal.param_env,\n+                goal.predicate,\n+            ) {\n+                Some(obligations) => self.evaluate_all_and_make_canonical_response(\n+                    obligations.into_iter().map(|o| o.into()).collect(),\n+                ),\n+                None => self.make_canonical_response(Certainty::AMBIGUOUS),\n+            }\n+        })\n+    }\n }\n \n impl<'tcx> EvalCtxt<'_, 'tcx> {"}, {"sha": "767e31ddf781a9666bde067a1162e10ada3f478a", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a84e0601738ac8ba6da81acb394027f8a7bff646/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a84e0601738ac8ba6da81acb394027f8a7bff646/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=a84e0601738ac8ba6da81acb394027f8a7bff646", "patch": "@@ -4,8 +4,8 @@ use rustc_hir as hir;\n use rustc_hir::lang_items::LangItem;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, SubstsRef};\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitable};\n-use rustc_span::def_id::{DefId, LocalDefId};\n-use rustc_span::Span;\n+use rustc_span::def_id::{DefId, LocalDefId, CRATE_DEF_ID};\n+use rustc_span::{Span, DUMMY_SP};\n \n use std::iter;\n /// Returns the set of obligations needed to make `arg` well-formed.\n@@ -75,6 +75,34 @@ pub fn obligations<'tcx>(\n     Some(result)\n }\n \n+/// Compute the predicates that are required for a type to be well-formed.\n+///\n+/// This is only intended to be used in the new solver, since it does not\n+/// take into account recursion depth or proper error-reporting spans.\n+pub fn unnormalized_obligations<'tcx>(\n+    infcx: &InferCtxt<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    arg: GenericArg<'tcx>,\n+) -> Option<Vec<traits::PredicateObligation<'tcx>>> {\n+    if let ty::GenericArgKind::Lifetime(..) = arg.unpack() {\n+        return Some(vec![]);\n+    }\n+\n+    debug_assert_eq!(arg, infcx.resolve_vars_if_possible(arg));\n+\n+    let mut wf = WfPredicates {\n+        tcx: infcx.tcx,\n+        param_env,\n+        body_id: CRATE_DEF_ID,\n+        span: DUMMY_SP,\n+        out: vec![],\n+        recursion_depth: 0,\n+        item: None,\n+    };\n+    wf.compute(arg);\n+    Some(wf.out)\n+}\n+\n /// Returns the obligations that make this trait reference\n /// well-formed. For example, if there is a trait `Set` defined like\n /// `trait Set<K:Eq>`, then the trait reference `Foo: Set<Bar>` is WF"}]}