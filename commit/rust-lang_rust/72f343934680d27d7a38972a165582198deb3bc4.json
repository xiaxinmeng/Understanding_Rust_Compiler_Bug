{"sha": "72f343934680d27d7a38972a165582198deb3bc4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyZjM0MzkzNDY4MGQyN2Q3YTM4OTcyYTE2NTU4MjE5OGRlYjNiYzQ=", "commit": {"author": {"name": "HMPerson1", "email": "hmperson1@gmail.com", "date": "2019-10-18T04:03:27Z"}, "committer": {"name": "HMPerson1", "email": "hmperson1@gmail.com", "date": "2019-10-18T04:03:27Z"}, "message": "Suggest calling `iter` if needed in `explicit_counter_loop`", "tree": {"sha": "09bab27e3db4d0ea5cc936dd073e1d8a6e4c0ff0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09bab27e3db4d0ea5cc936dd073e1d8a6e4c0ff0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72f343934680d27d7a38972a165582198deb3bc4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFIBAABCAAyFiEE30PRORiHa0gkBHJnH7R33dJ4Ic4FAl2pOZcUHGhtcGVyc29u\nMUBnbWFpbC5jb20ACgkQH7R33dJ4Ic6fLQgAwxNwkKTP/YlfiqrD2/xkIGWdziW4\nu4ZFT6dLU/p9cAHnGLfIPlT6ojqaRC9bhstfGN6y59Mc+l285IXypihNvUiaWo7P\nauXLaWdN4U9wqUe06lKkzDBdkI8dtdoCCaj2P/NHtxRGHL2Qi6BaIAGi63nHiVXb\nm9GIAQ6HWYil4vLDpoIR172BAo9tH53YH9CulWkrZzjpJZAwRKYQHb4bf2tplzjP\ns/n3aOhZlonnMlPdauRAApMr4KjflX2tb23uzfNz/eUmbHTs9H+n+Bd7X9fbtS+q\nzvuxQSgQUbcI0e1vSda/V5eDtL050Apy2L2ZztzvQY/5wHLBZ/xC4DDJ0Q==\n=3RJh\n-----END PGP SIGNATURE-----", "payload": "tree 09bab27e3db4d0ea5cc936dd073e1d8a6e4c0ff0\nparent 77092a54d7cc0b3a54e6d42f68e7c3ccda404712\nauthor HMPerson1 <hmperson1@gmail.com> 1571371407 -0400\ncommitter HMPerson1 <hmperson1@gmail.com> 1571371407 -0400\n\nSuggest calling `iter` if needed in `explicit_counter_loop`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72f343934680d27d7a38972a165582198deb3bc4", "html_url": "https://github.com/rust-lang/rust/commit/72f343934680d27d7a38972a165582198deb3bc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72f343934680d27d7a38972a165582198deb3bc4/comments", "author": {"login": "HMPerson1", "id": 2219904, "node_id": "MDQ6VXNlcjIyMTk5MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2219904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HMPerson1", "html_url": "https://github.com/HMPerson1", "followers_url": "https://api.github.com/users/HMPerson1/followers", "following_url": "https://api.github.com/users/HMPerson1/following{/other_user}", "gists_url": "https://api.github.com/users/HMPerson1/gists{/gist_id}", "starred_url": "https://api.github.com/users/HMPerson1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HMPerson1/subscriptions", "organizations_url": "https://api.github.com/users/HMPerson1/orgs", "repos_url": "https://api.github.com/users/HMPerson1/repos", "events_url": "https://api.github.com/users/HMPerson1/events{/privacy}", "received_events_url": "https://api.github.com/users/HMPerson1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HMPerson1", "id": 2219904, "node_id": "MDQ6VXNlcjIyMTk5MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2219904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HMPerson1", "html_url": "https://github.com/HMPerson1", "followers_url": "https://api.github.com/users/HMPerson1/followers", "following_url": "https://api.github.com/users/HMPerson1/following{/other_user}", "gists_url": "https://api.github.com/users/HMPerson1/gists{/gist_id}", "starred_url": "https://api.github.com/users/HMPerson1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HMPerson1/subscriptions", "organizations_url": "https://api.github.com/users/HMPerson1/orgs", "repos_url": "https://api.github.com/users/HMPerson1/repos", "events_url": "https://api.github.com/users/HMPerson1/events{/privacy}", "received_events_url": "https://api.github.com/users/HMPerson1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77092a54d7cc0b3a54e6d42f68e7c3ccda404712", "url": "https://api.github.com/repos/rust-lang/rust/commits/77092a54d7cc0b3a54e6d42f68e7c3ccda404712", "html_url": "https://github.com/rust-lang/rust/commit/77092a54d7cc0b3a54e6d42f68e7c3ccda404712"}], "stats": {"total": 88, "additions": 67, "deletions": 21}, "files": [{"sha": "81a8c313e9de21088ddc58b704397d77efdce08a", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 38, "deletions": 14, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/72f343934680d27d7a38972a165582198deb3bc4/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f343934680d27d7a38972a165582198deb3bc4/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=72f343934680d27d7a38972a165582198deb3bc4", "patch": "@@ -27,9 +27,10 @@ use syntax_pos::{BytePos, Symbol};\n \n use crate::utils::paths;\n use crate::utils::{\n-    get_enclosing_block, get_parent_expr, has_iter_method, higher, is_integer_const, is_refutable, last_path_segment,\n-    match_trait_method, match_type, match_var, multispan_sugg, snippet, snippet_opt, snippet_with_applicability,\n-    span_help_and_lint, span_lint, span_lint_and_sugg, span_lint_and_then, SpanlessEq,\n+    get_enclosing_block, get_parent_expr, get_trait_def_id, has_iter_method, higher, implements_trait,\n+    is_integer_const, is_refutable, last_path_segment, match_trait_method, match_type, match_var, multispan_sugg,\n+    snippet, snippet_opt, snippet_with_applicability, span_help_and_lint, span_lint, span_lint_and_sugg,\n+    span_lint_and_then, SpanlessEq,\n };\n \n declare_clippy_lint! {\n@@ -1470,17 +1471,7 @@ fn check_for_loop_explicit_counter<'a, 'tcx>(\n                             \"for ({}, {}) in {}.enumerate()\",\n                             name,\n                             snippet_with_applicability(cx, pat.span, \"item\", &mut applicability),\n-                            if higher::range(cx, arg).is_some() {\n-                                format!(\n-                                    \"({})\",\n-                                    snippet_with_applicability(cx, arg.span, \"_\", &mut applicability)\n-                                )\n-                            } else {\n-                                format!(\n-                                    \"{}\",\n-                                    sugg::Sugg::hir_with_applicability(cx, arg, \"_\", &mut applicability).maybe_par()\n-                                )\n-                            }\n+                            make_iterator_snippet(cx, arg, &mut applicability),\n                         ),\n                         applicability,\n                     );\n@@ -1490,6 +1481,39 @@ fn check_for_loop_explicit_counter<'a, 'tcx>(\n     }\n }\n \n+/// If `arg` was the argument to a `for` loop, return the \"cleanest\" way of writing the\n+/// actual `Iterator` that the loop uses.\n+fn make_iterator_snippet(cx: &LateContext<'_, '_>, arg: &Expr, applic_ref: &mut Applicability) -> String {\n+    let impls_iterator = get_trait_def_id(cx, &paths::ITERATOR)\n+        .map_or(false, |id| implements_trait(cx, cx.tables.expr_ty(arg), id, &[]));\n+    if impls_iterator {\n+        format!(\n+            \"{}\",\n+            sugg::Sugg::hir_with_applicability(cx, arg, \"_\", applic_ref).maybe_par()\n+        )\n+    } else {\n+        // (&x).into_iter() ==> x.iter()\n+        // (&mut x).into_iter() ==> x.iter_mut()\n+        match &arg.kind {\n+            ExprKind::AddrOf(mutability, arg_inner) if has_iter_method(cx, cx.tables.expr_ty(&arg_inner)).is_some() => {\n+                let meth_name = match mutability {\n+                    MutMutable => \"iter_mut\",\n+                    MutImmutable => \"iter\",\n+                };\n+                format!(\n+                    \"{}.{}()\",\n+                    sugg::Sugg::hir_with_applicability(cx, &arg_inner, \"_\", applic_ref).maybe_par(),\n+                    meth_name,\n+                )\n+            },\n+            _ => format!(\n+                \"{}.into_iter()\",\n+                sugg::Sugg::hir_with_applicability(cx, arg, \"_\", applic_ref).maybe_par()\n+            ),\n+        }\n+    }\n+}\n+\n /// Checks for the `FOR_KV_MAP` lint.\n fn check_for_loop_over_map_kv<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,"}, {"sha": "e6fbf83a2879cb18057e8db0f42ac1b39db6d84e", "filename": "tests/ui/explicit_counter_loop.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/72f343934680d27d7a38972a165582198deb3bc4/tests%2Fui%2Fexplicit_counter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f343934680d27d7a38972a165582198deb3bc4/tests%2Fui%2Fexplicit_counter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_counter_loop.rs?ref=72f343934680d27d7a38972a165582198deb3bc4", "patch": "@@ -12,6 +12,16 @@ fn main() {\n     for _v in &vec {\n         _index += 1\n     }\n+\n+    let mut _index = 0;\n+    for _v in &mut vec {\n+        _index += 1;\n+    }\n+\n+    let mut _index = 0;\n+    for _v in vec {\n+        _index += 1;\n+    }\n }\n \n mod issue_1219 {"}, {"sha": "c5643a857b1d9316cf5a01754b1e5c0288096d21", "filename": "tests/ui/explicit_counter_loop.stderr", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/72f343934680d27d7a38972a165582198deb3bc4/tests%2Fui%2Fexplicit_counter_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72f343934680d27d7a38972a165582198deb3bc4/tests%2Fui%2Fexplicit_counter_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_counter_loop.stderr?ref=72f343934680d27d7a38972a165582198deb3bc4", "patch": "@@ -2,33 +2,45 @@ error: the variable `_index` is used as a loop counter.\n   --> $DIR/explicit_counter_loop.rs:6:15\n    |\n LL |     for _v in &vec {\n-   |               ^^^^ help: consider using: `for (_index, _v) in (&vec).enumerate()`\n+   |               ^^^^ help: consider using: `for (_index, _v) in vec.iter().enumerate()`\n    |\n    = note: `-D clippy::explicit-counter-loop` implied by `-D warnings`\n \n error: the variable `_index` is used as a loop counter.\n   --> $DIR/explicit_counter_loop.rs:12:15\n    |\n LL |     for _v in &vec {\n-   |               ^^^^ help: consider using: `for (_index, _v) in (&vec).enumerate()`\n+   |               ^^^^ help: consider using: `for (_index, _v) in vec.iter().enumerate()`\n+\n+error: the variable `_index` is used as a loop counter.\n+  --> $DIR/explicit_counter_loop.rs:17:15\n+   |\n+LL |     for _v in &mut vec {\n+   |               ^^^^^^^^ help: consider using: `for (_index, _v) in vec.iter_mut().enumerate()`\n+\n+error: the variable `_index` is used as a loop counter.\n+  --> $DIR/explicit_counter_loop.rs:22:15\n+   |\n+LL |     for _v in vec {\n+   |               ^^^ help: consider using: `for (_index, _v) in vec.into_iter().enumerate()`\n \n error: the variable `count` is used as a loop counter.\n-  --> $DIR/explicit_counter_loop.rs:51:19\n+  --> $DIR/explicit_counter_loop.rs:61:19\n    |\n LL |         for ch in text.chars() {\n    |                   ^^^^^^^^^^^^ help: consider using: `for (count, ch) in text.chars().enumerate()`\n \n error: the variable `count` is used as a loop counter.\n-  --> $DIR/explicit_counter_loop.rs:62:19\n+  --> $DIR/explicit_counter_loop.rs:72:19\n    |\n LL |         for ch in text.chars() {\n    |                   ^^^^^^^^^^^^ help: consider using: `for (count, ch) in text.chars().enumerate()`\n \n error: the variable `count` is used as a loop counter.\n-  --> $DIR/explicit_counter_loop.rs:120:19\n+  --> $DIR/explicit_counter_loop.rs:130:19\n    |\n LL |         for _i in 3..10 {\n-   |                   ^^^^^ help: consider using: `for (count, _i) in (3..10).enumerate()`\n+   |                   ^^^^^ help: consider using: `for (count, _i) in 3..10.enumerate()`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 7 previous errors\n "}]}