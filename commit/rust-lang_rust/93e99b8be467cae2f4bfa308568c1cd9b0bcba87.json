{"sha": "93e99b8be467cae2f4bfa308568c1cd9b0bcba87", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzZTk5YjhiZTQ2N2NhZTJmNGJmYTMwODU2OGMxY2Q5YjBiY2JhODc=", "commit": {"author": {"name": "Scott Lawrence", "email": "bytbox@gmail.com", "date": "2014-01-27T03:57:42Z"}, "committer": {"name": "Scott Lawrence", "email": "bytbox@gmail.com", "date": "2014-01-29T14:15:41Z"}, "message": "Remove do keyword from librustuv", "tree": {"sha": "d7e19c73e5f3fe29f33c4698e42e3ea275eab6ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7e19c73e5f3fe29f33c4698e42e3ea275eab6ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93e99b8be467cae2f4bfa308568c1cd9b0bcba87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93e99b8be467cae2f4bfa308568c1cd9b0bcba87", "html_url": "https://github.com/rust-lang/rust/commit/93e99b8be467cae2f4bfa308568c1cd9b0bcba87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93e99b8be467cae2f4bfa308568c1cd9b0bcba87/comments", "author": {"login": "bytbox", "id": 160033, "node_id": "MDQ6VXNlcjE2MDAzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/160033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bytbox", "html_url": "https://github.com/bytbox", "followers_url": "https://api.github.com/users/bytbox/followers", "following_url": "https://api.github.com/users/bytbox/following{/other_user}", "gists_url": "https://api.github.com/users/bytbox/gists{/gist_id}", "starred_url": "https://api.github.com/users/bytbox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bytbox/subscriptions", "organizations_url": "https://api.github.com/users/bytbox/orgs", "repos_url": "https://api.github.com/users/bytbox/repos", "events_url": "https://api.github.com/users/bytbox/events{/privacy}", "received_events_url": "https://api.github.com/users/bytbox/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bytbox", "id": 160033, "node_id": "MDQ6VXNlcjE2MDAzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/160033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bytbox", "html_url": "https://github.com/bytbox", "followers_url": "https://api.github.com/users/bytbox/followers", "following_url": "https://api.github.com/users/bytbox/following{/other_user}", "gists_url": "https://api.github.com/users/bytbox/gists{/gist_id}", "starred_url": "https://api.github.com/users/bytbox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bytbox/subscriptions", "organizations_url": "https://api.github.com/users/bytbox/orgs", "repos_url": "https://api.github.com/users/bytbox/repos", "events_url": "https://api.github.com/users/bytbox/events{/privacy}", "received_events_url": "https://api.github.com/users/bytbox/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25e7e7f8076d879f824f013faa6f7470e69c818b", "url": "https://api.github.com/repos/rust-lang/rust/commits/25e7e7f8076d879f824f013faa6f7470e69c818b", "html_url": "https://github.com/rust-lang/rust/commit/25e7e7f8076d879f824f013faa6f7470e69c818b"}], "stats": {"total": 100, "additions": 50, "deletions": 50}, "files": [{"sha": "5dc50beb8506176648245916c9260aa21d63121c", "filename": "src/librustuv/async.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93e99b8be467cae2f4bfa308568c1cd9b0bcba87/src%2Flibrustuv%2Fasync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93e99b8be467cae2f4bfa308568c1cd9b0bcba87/src%2Flibrustuv%2Fasync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fasync.rs?ref=93e99b8be467cae2f4bfa308568c1cd9b0bcba87", "patch": "@@ -152,10 +152,10 @@ mod test_remote {\n         let watcher = AsyncWatcher::new(&mut local_loop().loop_,\n                                         cb as ~Callback);\n \n-        let thread = do Thread::start {\n+        let thread = Thread::start(proc() {\n             let mut watcher = watcher;\n             watcher.fire();\n-        };\n+        });\n \n         assert_eq!(port.recv(), 1);\n         thread.join();"}, {"sha": "8d3e71312cd9510be048e73c654541fd65b0962a", "filename": "src/librustuv/homing.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/93e99b8be467cae2f4bfa308568c1cd9b0bcba87/src%2Flibrustuv%2Fhoming.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93e99b8be467cae2f4bfa308568c1cd9b0bcba87/src%2Flibrustuv%2Fhoming.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fhoming.rs?ref=93e99b8be467cae2f4bfa308568c1cd9b0bcba87", "patch": "@@ -170,14 +170,14 @@ mod test {\n             event_loop_factory: None,\n         });\n \n-        do pool.spawn(TaskOpts::new()) {\n+        pool.spawn(TaskOpts::new(), proc() {\n             let listener = UdpWatcher::bind(local_loop(), next_test_ip4());\n             chan.send(listener.unwrap());\n-        }\n+        });\n \n-        let task = do pool.task(TaskOpts::new()) {\n+        let task = pool.task(TaskOpts::new(), proc() {\n             port.recv();\n-        };\n+        });\n         pool.spawn_sched().send(sched::TaskFromFriend(task));\n \n         pool.shutdown();\n@@ -191,20 +191,20 @@ mod test {\n             event_loop_factory: None,\n         });\n \n-        do pool.spawn(TaskOpts::new()) {\n+        pool.spawn(TaskOpts::new(), proc() {\n             let addr1 = next_test_ip4();\n             let addr2 = next_test_ip4();\n             let listener = UdpWatcher::bind(local_loop(), addr2);\n             chan.send((listener.unwrap(), addr1));\n             let mut listener = UdpWatcher::bind(local_loop(), addr1).unwrap();\n             listener.sendto([1, 2, 3, 4], addr2);\n-        }\n+        });\n \n-        let task = do pool.task(TaskOpts::new()) {\n+        let task = pool.task(TaskOpts::new(), proc() {\n             let (mut watcher, addr) = port.recv();\n             let mut buf = [0, ..10];\n             assert_eq!(watcher.recvfrom(buf).unwrap(), (4, addr));\n-        };\n+        });\n         pool.spawn_sched().send(sched::TaskFromFriend(task));\n \n         pool.shutdown();"}, {"sha": "0b889e17a445ea2eb3f62a2c8195f111c6cb7cb1", "filename": "src/librustuv/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93e99b8be467cae2f4bfa308568c1cd9b0bcba87/src%2Flibrustuv%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93e99b8be467cae2f4bfa308568c1cd9b0bcba87/src%2Flibrustuv%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Flib.rs?ref=93e99b8be467cae2f4bfa308568c1cd9b0bcba87", "patch": "@@ -433,10 +433,10 @@ mod test {\n \n     #[test]\n     fn loop_smoke_test() {\n-        do run_in_bare_thread {\n+        run_in_bare_thread(proc() {\n             let mut loop_ = Loop::new();\n             loop_.run();\n             loop_.close();\n-        }\n+        });\n     }\n }"}, {"sha": "8919ecfa97ef40308ee5928829f61c60920991ee", "filename": "src/librustuv/net.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/93e99b8be467cae2f4bfa308568c1cd9b0bcba87/src%2Flibrustuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93e99b8be467cae2f4bfa308568c1cd9b0bcba87/src%2Flibrustuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fnet.rs?ref=93e99b8be467cae2f4bfa308568c1cd9b0bcba87", "patch": "@@ -692,7 +692,7 @@ mod test {\n         let (port, chan) = Chan::new();\n         let addr = next_test_ip4();\n \n-        do spawn {\n+        spawn(proc() {\n             let w = match TcpListener::bind(local_loop(), addr) {\n                 Ok(w) => w, Err(e) => fail!(\"{:?}\", e)\n             };\n@@ -712,7 +712,7 @@ mod test {\n                 }\n                 Err(e) => fail!(\"{:?}\", e)\n             }\n-        }\n+        });\n \n         port.recv();\n         let mut w = match TcpWatcher::connect(local_loop(), addr) {\n@@ -728,7 +728,7 @@ mod test {\n         let (port, chan) = Chan::new();\n         let addr = next_test_ip6();\n \n-        do spawn {\n+        spawn(proc() {\n             let w = match TcpListener::bind(local_loop(), addr) {\n                 Ok(w) => w, Err(e) => fail!(\"{:?}\", e)\n             };\n@@ -748,7 +748,7 @@ mod test {\n                 }\n                 Err(e) => fail!(\"{:?}\", e)\n             }\n-        }\n+        });\n \n         port.recv();\n         let mut w = match TcpWatcher::connect(local_loop(), addr) {\n@@ -765,7 +765,7 @@ mod test {\n         let client = next_test_ip4();\n         let server = next_test_ip4();\n \n-        do spawn {\n+        spawn(proc() {\n             match UdpWatcher::bind(local_loop(), server) {\n                 Ok(mut w) => {\n                     chan.send(());\n@@ -780,7 +780,7 @@ mod test {\n                 }\n                 Err(e) => fail!(\"{:?}\", e)\n             }\n-        }\n+        });\n \n         port.recv();\n         let mut w = match UdpWatcher::bind(local_loop(), client) {\n@@ -797,7 +797,7 @@ mod test {\n         let client = next_test_ip6();\n         let server = next_test_ip6();\n \n-        do spawn {\n+        spawn(proc() {\n             match UdpWatcher::bind(local_loop(), server) {\n                 Ok(mut w) => {\n                     chan.send(());\n@@ -812,7 +812,7 @@ mod test {\n                 }\n                 Err(e) => fail!(\"{:?}\", e)\n             }\n-        }\n+        });\n \n         port.recv();\n         let mut w = match UdpWatcher::bind(local_loop(), client) {\n@@ -829,7 +829,7 @@ mod test {\n         static MAX: uint = 5000;\n         let (port, chan) = Chan::new();\n \n-        do spawn {\n+        spawn(proc() {\n             let listener = TcpListener::bind(local_loop(), addr).unwrap();\n             let mut acceptor = listener.listen().unwrap();\n             chan.send(());\n@@ -841,7 +841,7 @@ mod test {\n                 uvdebug!(\"wrote bytes\");\n                 total_bytes_written += buf.len();\n             }\n-        }\n+        });\n \n         port.recv();\n         let mut stream = TcpWatcher::connect(local_loop(), addr).unwrap();\n@@ -864,12 +864,12 @@ mod test {\n         let client_addr = next_test_ip4();\n         let (port, chan) = Chan::new();\n \n-        do spawn {\n+        spawn(proc() {\n             let mut client = UdpWatcher::bind(local_loop(), client_addr).unwrap();\n             port.recv();\n             assert!(client.sendto([1], server_addr).is_ok());\n             assert!(client.sendto([2], server_addr).is_ok());\n-        }\n+        });\n \n         let mut server = UdpWatcher::bind(local_loop(), server_addr).unwrap();\n         chan.send(());\n@@ -896,7 +896,7 @@ mod test {\n         let (p1, c1) = Chan::new();\n         let (p2, c2) = Chan::new();\n \n-        do spawn {\n+        spawn(proc() {\n             let l = local_loop();\n             let mut server_out = UdpWatcher::bind(l, server_out_addr).unwrap();\n             let mut server_in = UdpWatcher::bind(l, server_in_addr).unwrap();\n@@ -918,7 +918,7 @@ mod test {\n                 assert_eq!(src, client_out_addr);\n             }\n             assert!(total_bytes_sent >= MAX);\n-        }\n+        });\n \n         let l = local_loop();\n         let mut client_out = UdpWatcher::bind(l, client_out_addr).unwrap();\n@@ -950,7 +950,7 @@ mod test {\n         let addr = next_test_ip4();\n         let (port, chan) = Chan::<Port<()>>::new();\n \n-        do spawn {\n+        spawn(proc() {\n             let port2 = port.recv();\n             let mut stream = TcpWatcher::connect(local_loop(), addr).unwrap();\n             stream.write([0, 1, 2, 3, 4, 5, 6, 7]);\n@@ -959,7 +959,7 @@ mod test {\n             stream.write([0, 1, 2, 3, 4, 5, 6, 7]);\n             stream.write([0, 1, 2, 3, 4, 5, 6, 7]);\n             port2.recv();\n-        }\n+        });\n \n         let listener = TcpListener::bind(local_loop(), addr).unwrap();\n         let mut acceptor = listener.listen().unwrap();\n@@ -992,7 +992,7 @@ mod test {\n     fn test_simple_tcp_server_and_client_on_diff_threads() {\n         let addr = next_test_ip4();\n \n-        do spawn {\n+        spawn(proc() {\n             let listener = TcpListener::bind(local_loop(), addr).unwrap();\n             let mut acceptor = listener.listen().unwrap();\n             let mut stream = acceptor.accept().unwrap();\n@@ -1002,7 +1002,7 @@ mod test {\n             for i in range(0u, nread) {\n                 assert_eq!(buf[i], i as u8);\n             }\n-        }\n+        });\n \n         let mut stream = TcpWatcher::connect(local_loop(), addr);\n         while stream.is_err() {\n@@ -1024,12 +1024,12 @@ mod test {\n         let (port, chan) = Chan::new();\n         let addr = next_test_ip4();\n \n-        do spawn {\n+        spawn(proc() {\n             let w = TcpListener::bind(local_loop(), addr).unwrap();\n             let mut w = w.listen().unwrap();\n             chan.send(());\n             w.accept();\n-        }\n+        });\n         port.recv();\n         let _w = TcpWatcher::connect(local_loop(), addr).unwrap();\n         fail!();\n@@ -1050,10 +1050,10 @@ mod test {\n         // force the handle to be created on a different scheduler, failure in\n         // the original task will force a homing operation back to this\n         // scheduler.\n-        do spawn {\n+        spawn(proc() {\n             let w = UdpWatcher::bind(local_loop(), addr).unwrap();\n             chan.send(w);\n-        }\n+        });\n \n         let _w = port.recv();\n         fail!();"}, {"sha": "cfe86d739abcf935c95fec374b3994e9fadd3003", "filename": "src/librustuv/pipe.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93e99b8be467cae2f4bfa308568c1cd9b0bcba87/src%2Flibrustuv%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93e99b8be467cae2f4bfa308568c1cd9b0bcba87/src%2Flibrustuv%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fpipe.rs?ref=93e99b8be467cae2f4bfa308568c1cd9b0bcba87", "patch": "@@ -278,7 +278,7 @@ mod tests {\n         let path2 = path.clone();\n         let (port, chan) = Chan::new();\n \n-        do spawn {\n+        spawn(proc() {\n             let p = PipeListener::bind(local_loop(), &path2.to_c_str()).unwrap();\n             let mut p = p.listen().unwrap();\n             chan.send(());\n@@ -287,7 +287,7 @@ mod tests {\n             assert!(client.read(buf).unwrap() == 1);\n             assert_eq!(buf[0], 1);\n             assert!(client.write([2]).is_ok());\n-        }\n+        });\n         port.recv();\n         let mut c = PipeWatcher::connect(local_loop(), &path.to_c_str()).unwrap();\n         assert!(c.write([1]).is_ok());\n@@ -302,12 +302,12 @@ mod tests {\n         let path2 = path.clone();\n         let (port, chan) = Chan::new();\n \n-        do spawn {\n+        spawn(proc() {\n             let p = PipeListener::bind(local_loop(), &path2.to_c_str()).unwrap();\n             let mut p = p.listen().unwrap();\n             chan.send(());\n             p.accept();\n-        }\n+        });\n         port.recv();\n         let _c = PipeWatcher::connect(local_loop(), &path.to_c_str()).unwrap();\n         fail!()"}, {"sha": "8cb0c1f0a52d70c8b7fe54f9908d3c32f7131420", "filename": "src/librustuv/signal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93e99b8be467cae2f4bfa308568c1cd9b0bcba87/src%2Flibrustuv%2Fsignal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93e99b8be467cae2f4bfa308568c1cd9b0bcba87/src%2Flibrustuv%2Fsignal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fsignal.rs?ref=93e99b8be467cae2f4bfa308568c1cd9b0bcba87", "patch": "@@ -85,9 +85,9 @@ mod test {\n         let _signal = SignalWatcher::new(local_loop(), signal::Interrupt,\n                                          chan);\n \n-        do spawn {\n+        spawn(proc() {\n             port.try_recv();\n-        }\n+        });\n \n         // when we drop the SignalWatcher we're going to destroy the channel,\n         // which must wake up the task on the other end"}, {"sha": "aeda1a45175eacdad0c943db86ebf3898f3ae12e", "filename": "src/librustuv/timer.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/93e99b8be467cae2f4bfa308568c1cd9b0bcba87/src%2Flibrustuv%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93e99b8be467cae2f4bfa308568c1cd9b0bcba87/src%2Flibrustuv%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Ftimer.rs?ref=93e99b8be467cae2f4bfa308568c1cd9b0bcba87", "patch": "@@ -245,9 +245,9 @@ mod test {\n         let mut timer = TimerWatcher::new(local_loop());\n         let timer_port = timer.period(1000);\n \n-        do spawn {\n+        spawn(proc() {\n             timer_port.recv_opt();\n-        }\n+        });\n \n         // when we drop the TimerWatcher we're going to destroy the channel,\n         // which must wake up the task on the other end\n@@ -259,9 +259,9 @@ mod test {\n         let mut timer = TimerWatcher::new(local_loop());\n         let timer_port = timer.period(1000);\n \n-        do spawn {\n+        spawn(proc() {\n             timer_port.recv_opt();\n-        }\n+        });\n \n         timer.oneshot(1);\n     }\n@@ -271,9 +271,9 @@ mod test {\n         let mut timer = TimerWatcher::new(local_loop());\n         let timer_port = timer.period(1000);\n \n-        do spawn {\n+        spawn(proc() {\n             timer_port.recv_opt();\n-        }\n+        });\n \n         timer.sleep(1);\n     }"}, {"sha": "e0bff059b0c91344305c64535150427b2538cc07", "filename": "src/librustuv/uvio.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93e99b8be467cae2f4bfa308568c1cd9b0bcba87/src%2Flibrustuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93e99b8be467cae2f4bfa308568c1cd9b0bcba87/src%2Flibrustuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvio.rs?ref=93e99b8be467cae2f4bfa308568c1cd9b0bcba87", "patch": "@@ -111,16 +111,16 @@ pub fn new_loop() -> ~rtio::EventLoop {\n #[test]\n fn test_callback_run_once() {\n     use std::rt::rtio::EventLoop;\n-    do run_in_bare_thread {\n+    run_in_bare_thread(proc() {\n         let mut event_loop = UvEventLoop::new();\n         let mut count = 0;\n         let count_ptr: *mut int = &mut count;\n-        do event_loop.callback {\n+        event_loop.callback(proc() {\n             unsafe { *count_ptr += 1 }\n-        }\n+        });\n         event_loop.run();\n         assert_eq!(count, 1);\n-    }\n+    });\n }\n \n pub struct UvIoFactory {"}]}