{"sha": "195d837f18e2efb7d621d6568212a59c29fc184e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5NWQ4MzdmMThlMmVmYjdkNjIxZDY1NjgyMTJhNTljMjlmYzE4NGU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-08T19:01:22Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-09T14:18:05Z"}, "message": "When suggesting fn call use an appropriate number of placeholder arguments", "tree": {"sha": "f8e8ab533043056fc39f5bd57147cb991cdf2edd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8e8ab533043056fc39f5bd57147cb991cdf2edd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/195d837f18e2efb7d621d6568212a59c29fc184e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/195d837f18e2efb7d621d6568212a59c29fc184e", "html_url": "https://github.com/rust-lang/rust/commit/195d837f18e2efb7d621d6568212a59c29fc184e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/195d837f18e2efb7d621d6568212a59c29fc184e/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94fe8a3c1761acadd5043b24ad821b0b369922ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/94fe8a3c1761acadd5043b24ad821b0b369922ee", "html_url": "https://github.com/rust-lang/rust/commit/94fe8a3c1761acadd5043b24ad821b0b369922ee"}], "stats": {"total": 164, "additions": 148, "deletions": 16}, "files": [{"sha": "130cc8f3a60509b9c8287eccc018ed0f038c9d19", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 31, "deletions": 12, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/195d837f18e2efb7d621d6568212a59c29fc184e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195d837f18e2efb7d621d6568212a59c29fc184e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=195d837f18e2efb7d621d6568212a59c29fc184e", "patch": "@@ -3833,19 +3833,38 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 .0;\n             let sig = self.normalize_associated_types_in(expr.span, &sig);\n             if let Ok(_) = self.try_coerce(expr, sig.output(), expected, AllowTwoPhase::No) {\n-                if let Ok(code) = self.sess().source_map().span_to_snippet(expr.span) {\n-                    err.span_suggestion(expr.span, \"use parentheses to call this function\", format!(\n-                        \"{}({})\",\n-                        code,\n-                        if sig.inputs().len() > 0 {\n-                            \"...\"\n-                        } else {\n-                            \"\"\n-                        }), if sig.inputs().len() > 0 {\n-                            Applicability::MachineApplicable\n-                        } else {\n-                            Applicability::HasPlaceholders\n+                let (mut sugg_call, applicability) = if sig.inputs().is_empty() {\n+                    (String::new(), Applicability::MachineApplicable)\n+                } else {\n+                    (\"...\".to_owned(), Applicability::HasPlaceholders)\n+                };\n+                let mut msg = \"call this function\";\n+                if let ty::FnDef(def_id, ..) = found.sty {\n+                    match self.tcx.hir().get_if_local(def_id) {\n+                        Some(Node::Item(hir::Item {\n+                            node: ItemKind::Fn(.., body_id),\n+                            ..\n+                        })) => {\n+                            let body = self.tcx.hir().body(*body_id);\n+                            sugg_call = body.arguments.iter()\n+                                .map(|arg| hir::print::to_string(\n+                                    hir::print::NO_ANN,\n+                                    |s| s.print_pat(&arg.pat),\n+                                )).collect::<Vec<_>>().join(\", \");\n+                        }\n+                        Some(Node::Ctor(hir::VariantData::Tuple(field, _))) => {\n+                            sugg_call = field.iter().map(|_| \"_\").collect::<Vec<_>>().join(\", \");\n+                            msg = \"instatiate this tuple struct\";\n                         }\n+                        _ => {}\n+                    }\n+                };\n+                if let Ok(code) = self.sess().source_map().span_to_snippet(expr.span) {\n+                    err.span_suggestion(\n+                        expr.span,\n+                        &format!(\"use parentheses to {}\", msg),\n+                        format!(\"{}({})\", code, sugg_call),\n+                        applicability,\n                     );\n                     return true;\n                 }"}, {"sha": "8befc6873857ee011b12fa179851c7f380c6fa42", "filename": "src/test/ui/issues/issue-35241.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/195d837f18e2efb7d621d6568212a59c29fc184e/src%2Ftest%2Fui%2Fissues%2Fissue-35241.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/195d837f18e2efb7d621d6568212a59c29fc184e/src%2Ftest%2Fui%2Fissues%2Fissue-35241.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35241.stderr?ref=195d837f18e2efb7d621d6568212a59c29fc184e", "patch": "@@ -8,7 +8,7 @@ LL | fn test() -> Foo { Foo }\n    |              ---   ^^^\n    |              |     |\n    |              |     expected struct `Foo`, found fn item\n-   |              |     help: use parentheses to call this function: `Foo(...)`\n+   |              |     help: use parentheses to instatiate this tuple struct: `Foo(_)`\n    |              expected `Foo` because of return type\n    |\n    = note: expected type `Foo`"}, {"sha": "49092562feebaf67f0d1e4a9725629e473c6e9bd", "filename": "src/test/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/195d837f18e2efb7d621d6568212a59c29fc184e/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/195d837f18e2efb7d621d6568212a59c29fc184e/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=195d837f18e2efb7d621d6568212a59c29fc184e", "patch": "@@ -202,7 +202,7 @@ LL |         let _: Z = Z::Fn;\n    |                    ^^^^^\n    |                    |\n    |                    expected enum `m::n::Z`, found fn item\n-   |                    help: use parentheses to call this function: `Z::Fn(...)`\n+   |                    help: use parentheses to instatiate this tuple struct: `Z::Fn(_)`\n    |\n    = note: expected type `m::n::Z`\n               found type `fn(u8) -> m::n::Z {m::n::Z::Fn}`\n@@ -232,7 +232,7 @@ LL |     let _: E = m::E::Fn;\n    |                ^^^^^^^^\n    |                |\n    |                expected enum `m::E`, found fn item\n-   |                help: use parentheses to call this function: `m::E::Fn(...)`\n+   |                help: use parentheses to instatiate this tuple struct: `m::E::Fn(_)`\n    |\n    = note: expected type `m::E`\n               found type `fn(u8) -> m::E {m::E::Fn}`\n@@ -262,7 +262,7 @@ LL |     let _: E = E::Fn;\n    |                ^^^^^\n    |                |\n    |                expected enum `m::E`, found fn item\n-   |                help: use parentheses to call this function: `E::Fn(...)`\n+   |                help: use parentheses to instatiate this tuple struct: `E::Fn(_)`\n    |\n    = note: expected type `m::E`\n               found type `fn(u8) -> m::E {m::E::Fn}`"}, {"sha": "6758c1d5f238e4fea568a2b5ee628ba0c070765f", "filename": "src/test/ui/suggestions/fn-or-tuple-struct-without-args.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/195d837f18e2efb7d621d6568212a59c29fc184e/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195d837f18e2efb7d621d6568212a59c29fc184e/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.rs?ref=195d837f18e2efb7d621d6568212a59c29fc184e", "patch": "@@ -0,0 +1,20 @@\n+fn foo(a: usize, b: usize) -> usize { a }\n+\n+fn bar() -> usize { 42 }\n+\n+struct S(usize, usize);\n+struct V();\n+\n+trait T {\n+    fn baz(x: usize, y: usize) -> usize { x }\n+    fn bat() -> usize { 42 }\n+}\n+\n+fn main() {\n+    let _: usize = foo; //~ ERROR mismatched types\n+    let _: S = S; //~ ERROR mismatched types\n+    let _: usize = bar; //~ ERROR mismatched types\n+    let _: V = V; //~ ERROR mismatched types\n+    let _: usize = T::baz; //~ ERROR mismatched types\n+    let _: usize = T::bat; //~ ERROR mismatched types\n+}"}, {"sha": "524c779979e3b456fdc418ccb51e6dc6d876afcf", "filename": "src/test/ui/suggestions/fn-or-tuple-struct-without-args.stderr", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/195d837f18e2efb7d621d6568212a59c29fc184e/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/195d837f18e2efb7d621d6568212a59c29fc184e/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr?ref=195d837f18e2efb7d621d6568212a59c29fc184e", "patch": "@@ -0,0 +1,93 @@\n+error[E0308]: mismatched types\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:14:20\n+   |\n+LL | fn foo(a: usize, b: usize) -> usize { a }\n+   | ----------------------------------- fn(usize, usize) -> usize {foo} defined here\n+...\n+LL |     let _: usize = foo;\n+   |                    ^^^\n+   |                    |\n+   |                    expected usize, found fn item\n+   |                    help: use parentheses to call this function: `foo(a, b)`\n+   |\n+   = note: expected type `usize`\n+              found type `fn(usize, usize) -> usize {foo}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:15:16\n+   |\n+LL | struct S(usize, usize);\n+   | ----------------------- fn(usize, usize) -> S {S} defined here\n+...\n+LL |     let _: S = S;\n+   |                ^\n+   |                |\n+   |                expected struct `S`, found fn item\n+   |                help: use parentheses to instatiate this tuple struct: `S(_, _)`\n+   |\n+   = note: expected type `S`\n+              found type `fn(usize, usize) -> S {S}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:16:20\n+   |\n+LL | fn bar() -> usize { 42 }\n+   | ----------------- fn() -> usize {bar} defined here\n+...\n+LL |     let _: usize = bar;\n+   |                    ^^^\n+   |                    |\n+   |                    expected usize, found fn item\n+   |                    help: use parentheses to call this function: `bar()`\n+   |\n+   = note: expected type `usize`\n+              found type `fn() -> usize {bar}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:17:16\n+   |\n+LL | struct V();\n+   | ----------- fn() -> V {V} defined here\n+...\n+LL |     let _: V = V;\n+   |                ^\n+   |                |\n+   |                expected struct `V`, found fn item\n+   |                help: use parentheses to instatiate this tuple struct: `V()`\n+   |\n+   = note: expected type `V`\n+              found type `fn() -> V {V}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:18:20\n+   |\n+LL |     fn baz(x: usize, y: usize) -> usize { x }\n+   |     ----------------------------------- fn(usize, usize) -> usize {<_ as T>::baz} defined here\n+...\n+LL |     let _: usize = T::baz;\n+   |                    ^^^^^^\n+   |                    |\n+   |                    expected usize, found fn item\n+   |                    help: use parentheses to call this function: `T::baz(...)`\n+   |\n+   = note: expected type `usize`\n+              found type `fn(usize, usize) -> usize {<_ as T>::baz}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:19:20\n+   |\n+LL |     fn bat() -> usize { 42 }\n+   |     ----------------- fn() -> usize {<_ as T>::bat} defined here\n+...\n+LL |     let _: usize = T::bat;\n+   |                    ^^^^^^\n+   |                    |\n+   |                    expected usize, found fn item\n+   |                    help: use parentheses to call this function: `T::bat()`\n+   |\n+   = note: expected type `usize`\n+              found type `fn() -> usize {<_ as T>::bat}`\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}