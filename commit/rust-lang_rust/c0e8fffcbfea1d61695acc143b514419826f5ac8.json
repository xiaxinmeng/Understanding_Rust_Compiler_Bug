{"sha": "c0e8fffcbfea1d61695acc143b514419826f5ac8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwZThmZmZjYmZlYTFkNjE2OTVhY2MxNDNiNTE0NDE5ODI2ZjVhYzg=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-05-20T14:52:05Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-06-01T05:59:47Z"}, "message": "rustc: remove unused TypeFolder methods.", "tree": {"sha": "9af4bf74a0d4b1ec10babf122f968cbbfcad372c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9af4bf74a0d4b1ec10babf122f968cbbfcad372c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0e8fffcbfea1d61695acc143b514419826f5ac8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0e8fffcbfea1d61695acc143b514419826f5ac8", "html_url": "https://github.com/rust-lang/rust/commit/c0e8fffcbfea1d61695acc143b514419826f5ac8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0e8fffcbfea1d61695acc143b514419826f5ac8/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "552ab37a100231f8f2416b5ecc7e350c17e6487f", "url": "https://api.github.com/repos/rust-lang/rust/commits/552ab37a100231f8f2416b5ecc7e350c17e6487f", "html_url": "https://github.com/rust-lang/rust/commit/552ab37a100231f8f2416b5ecc7e350c17e6487f"}], "stats": {"total": 47, "additions": 0, "deletions": 47}, "files": [{"sha": "bb13031a2b7c4ac0580771dc4c1acd5a326b5ff1", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c0e8fffcbfea1d61695acc143b514419826f5ac8/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e8fffcbfea1d61695acc143b514419826f5ac8/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=c0e8fffcbfea1d61695acc143b514419826f5ac8", "patch": "@@ -39,8 +39,6 @@\n //! These methods return true to indicate that the visitor has found what it is looking for\n //! and does not need to visit anything else.\n \n-use ty::subst::Substs;\n-use ty::adjustment;\n use ty::{self, Binder, Ty, TyCtxt, TypeFlags};\n \n use std::fmt;\n@@ -138,34 +136,9 @@ pub trait TypeFolder<'gcx: 'tcx, 'tcx> : Sized {\n         t.super_fold_with(self)\n     }\n \n-    fn fold_mt(&mut self, t: &ty::TypeAndMut<'tcx>) -> ty::TypeAndMut<'tcx> {\n-        t.super_fold_with(self)\n-    }\n-\n-    fn fold_impl_header(&mut self, imp: &ty::ImplHeader<'tcx>) -> ty::ImplHeader<'tcx> {\n-        imp.super_fold_with(self)\n-    }\n-\n-    fn fold_substs(&mut self,\n-                   substs: &'tcx Substs<'tcx>)\n-                   -> &'tcx Substs<'tcx> {\n-        substs.super_fold_with(self)\n-    }\n-\n-    fn fold_fn_sig(&mut self,\n-                   sig: &ty::FnSig<'tcx>)\n-                   -> ty::FnSig<'tcx> {\n-        sig.super_fold_with(self)\n-    }\n-\n     fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n         r.super_fold_with(self)\n     }\n-\n-    fn fold_autoref(&mut self, ar: &adjustment::AutoBorrow<'tcx>)\n-                    -> adjustment::AutoBorrow<'tcx> {\n-        ar.super_fold_with(self)\n-    }\n }\n \n pub trait TypeVisitor<'tcx> : Sized {"}, {"sha": "60dbbae90cae3b4dda57d27bc2107eb8c0402d8d", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c0e8fffcbfea1d61695acc143b514419826f5ac8/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e8fffcbfea1d61695acc143b514419826f5ac8/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=c0e8fffcbfea1d61695acc143b514419826f5ac8", "patch": "@@ -532,10 +532,6 @@ impl<'tcx> TypeFoldable<'tcx> for ty::TypeAndMut<'tcx> {\n         ty::TypeAndMut { ty: self.ty.fold_with(folder), mutbl: self.mutbl }\n     }\n \n-    fn fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n-        folder.fold_mt(self)\n-    }\n-\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         self.ty.visit_with(visitor)\n     }\n@@ -552,10 +548,6 @@ impl<'tcx> TypeFoldable<'tcx> for ty::FnSig<'tcx> {\n         }\n     }\n \n-    fn fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n-        folder.fold_fn_sig(self)\n-    }\n-\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         self.inputs().iter().any(|i| i.visit_with(visitor)) ||\n         self.output().visit_with(visitor)\n@@ -602,10 +594,6 @@ impl<'tcx> TypeFoldable<'tcx> for ty::ImplHeader<'tcx> {\n         }\n     }\n \n-    fn fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n-        folder.fold_impl_header(self)\n-    }\n-\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         self.self_ty.visit_with(visitor) ||\n             self.trait_ref.map(|r| r.visit_with(visitor)).unwrap_or(false) ||\n@@ -653,10 +641,6 @@ impl<'tcx> TypeFoldable<'tcx> for ty::adjustment::AutoBorrow<'tcx> {\n         }\n     }\n \n-    fn fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n-        folder.fold_autoref(self)\n-    }\n-\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         match *self {\n             ty::adjustment::AutoBorrow::Ref(r, _m) => r.visit_with(visitor),"}, {"sha": "d0d61323392c732c983c288867e814a2219efaa4", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0e8fffcbfea1d61695acc143b514419826f5ac8/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e8fffcbfea1d61695acc143b514419826f5ac8/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=c0e8fffcbfea1d61695acc143b514419826f5ac8", "patch": "@@ -320,10 +320,6 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx Substs<'tcx> {\n         }\n     }\n \n-    fn fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n-        folder.fold_substs(self)\n-    }\n-\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         self.iter().any(|t| t.visit_with(visitor))\n     }"}]}