{"sha": "a5a319fa047b04b525066d560115ad93a18e4a4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1YTMxOWZhMDQ3YjA0YjUyNTA2NmQ1NjAxMTVhZDkzYTE4ZTRhNGY=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-03-27T20:29:21Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-29T04:14:03Z"}, "message": "Teach rustc to use the result of if expressions", "tree": {"sha": "af19f3a3b4416049149e05020df2df849a8e0383", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af19f3a3b4416049149e05020df2df849a8e0383"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5a319fa047b04b525066d560115ad93a18e4a4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5a319fa047b04b525066d560115ad93a18e4a4f", "html_url": "https://github.com/rust-lang/rust/commit/a5a319fa047b04b525066d560115ad93a18e4a4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5a319fa047b04b525066d560115ad93a18e4a4f/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b27d12ce1b3babf4adea41d669140019cb80b8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b27d12ce1b3babf4adea41d669140019cb80b8a", "html_url": "https://github.com/rust-lang/rust/commit/2b27d12ce1b3babf4adea41d669140019cb80b8a"}], "stats": {"total": 115, "additions": 111, "deletions": 4}, "files": [{"sha": "82ba8654bb3074eac635a5a968f0b0877ead6161", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a5a319fa047b04b525066d560115ad93a18e4a4f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5a319fa047b04b525066d560115ad93a18e4a4f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=a5a319fa047b04b525066d560115ad93a18e4a4f", "patch": "@@ -3037,21 +3037,30 @@ fn trans_if(@block_ctxt cx, @ast.expr cond,\n     auto then_res = trans_block(then_cx, thn);\n \n     auto else_cx = new_scope_block_ctxt(cx, \"else\");\n-    auto else_res = res(else_cx, C_nil());\n \n+    auto else_res;\n+    auto expr_llty;\n     alt (els) {\n         case (some[@ast.expr](?elexpr)) {\n             else_res = trans_expr(else_cx, elexpr);\n+\n+            // If we have an else expression, then the entire\n+            // if expression can have a non-nil type.\n+            // FIXME: Handle dynamic type sizes\n+            auto expr_ty = ty.expr_ty(elexpr);\n+            expr_llty = type_of(else_res.bcx.fcx.ccx, expr_ty);\n+        }\n+        case (_) {\n+            else_res = res(else_cx, C_nil());\n+            expr_llty = T_nil();\n         }\n-        case (_) { /* fall through */ }\n     }\n \n     cond_res.bcx.build.CondBr(cond_res.val,\n                               then_cx.llbb,\n                               else_cx.llbb);\n \n-    // FIXME: use inferred type when available.\n-    ret join_results(cx, T_nil(),\n+    ret join_results(cx, expr_llty,\n                      vec(then_res, else_res));\n }\n "}, {"sha": "e69a629f9d055a3859ca4c69fbfdeb0881688663", "filename": "src/test/run-pass/expr-if.rs", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/a5a319fa047b04b525066d560115ad93a18e4a4f/src%2Ftest%2Frun-pass%2Fexpr-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5a319fa047b04b525066d560115ad93a18e4a4f/src%2Ftest%2Frun-pass%2Fexpr-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if.rs?ref=a5a319fa047b04b525066d560115ad93a18e4a4f", "patch": "@@ -0,0 +1,98 @@\n+// xfail-boot\n+// -*- rust -*-\n+\n+// Tests for if as expressions\n+\n+fn test_if() {\n+  let bool res = if (true) { true } else { false };\n+  check (res);\n+}\n+\n+fn test_else() {\n+  let bool res = if (false) { false } else { true };\n+  check (res);\n+}\n+\n+fn test_elseif1() {\n+  let bool res = if (true) {\n+    true\n+  } else if (true) {\n+    false\n+  } else {\n+    false\n+  };\n+  check (res);\n+}\n+\n+fn test_elseif2() {\n+  let bool res = if (false) {\n+    false\n+  } else if (true) {\n+    true\n+  } else {\n+    false\n+  };\n+  check (res);\n+}\n+\n+fn test_elseif3() {\n+  let bool res = if (false) {\n+    false\n+  } else if (false) {\n+    false\n+  } else {\n+    true\n+  };\n+  check (res);\n+}\n+\n+fn test_inferrence() {\n+  auto res = if (true) { true } else { false };\n+  check (res);\n+}\n+\n+fn test_if_as_if_condition() {\n+  auto res1 = if (if (false) { false } else { true }) {\n+    true\n+  } else {\n+    false\n+  };\n+  check (res1);\n+\n+  auto res2 = if (if (true) { false } else { true }) {\n+    false\n+  } else {\n+    true\n+  };\n+  check (res2);\n+}\n+\n+fn test_if_as_block_result() {\n+  auto res = if (true) {\n+    if (false) {\n+      false\n+    } else {\n+      true\n+    }\n+  } else {\n+    false\n+  };\n+  check (res);\n+}\n+\n+fn test_str() {\n+  auto res = if (true) { \"happy\" } else { \"sad\" };\n+  check (res == \"happy\");\n+}\n+\n+fn main() {\n+  test_if();\n+  test_else();\n+  test_elseif1();\n+  test_elseif2();\n+  test_elseif3();\n+  test_inferrence();\n+  test_if_as_if_condition();\n+  test_if_as_block_result();\n+  test_str();\n+}"}]}