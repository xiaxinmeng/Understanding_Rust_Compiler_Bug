{"sha": "d1dc2afd05a0f501512d9ed24f2d1785f7228eba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxZGMyYWZkMDVhMGY1MDE1MTJkOWVkMjRmMmQxNzg1ZjcyMjhlYmE=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-03-19T23:49:01Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-04-30T20:01:22Z"}, "message": "wf: handle \"livelock\" checking before reaching `WfPredicates::compute`.", "tree": {"sha": "3e4cff19ea7f6b43f73d3b47d101c035dd5a4c18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e4cff19ea7f6b43f73d3b47d101c035dd5a4c18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1dc2afd05a0f501512d9ed24f2d1785f7228eba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1dc2afd05a0f501512d9ed24f2d1785f7228eba", "html_url": "https://github.com/rust-lang/rust/commit/d1dc2afd05a0f501512d9ed24f2d1785f7228eba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1dc2afd05a0f501512d9ed24f2d1785f7228eba/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eece58a8e35c444afba6fa34873bc0244e32cd29", "url": "https://api.github.com/repos/rust-lang/rust/commits/eece58a8e35c444afba6fa34873bc0244e32cd29", "html_url": "https://github.com/rust-lang/rust/commit/eece58a8e35c444afba6fa34873bc0244e32cd29"}], "stats": {"total": 80, "additions": 38, "deletions": 42}, "files": [{"sha": "d11a3e61c65897ae5e97da9f9bdc7431228404b9", "filename": "src/librustc_trait_selection/traits/wf.rs", "status": "modified", "additions": 38, "deletions": 42, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/d1dc2afd05a0f501512d9ed24f2d1785f7228eba/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1dc2afd05a0f501512d9ed24f2d1785f7228eba/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs?ref=d1dc2afd05a0f501512d9ed24f2d1785f7228eba", "patch": "@@ -22,16 +22,27 @@ pub fn obligations<'a, 'tcx>(\n     ty: Ty<'tcx>,\n     span: Span,\n ) -> Option<Vec<traits::PredicateObligation<'tcx>>> {\n+    // Handle the \"livelock\" case (see comment above) by bailing out if necessary.\n+    let ty = match ty.kind {\n+        ty::Infer(_) => {\n+            let resolved_ty = infcx.shallow_resolve(ty);\n+            if resolved_ty == ty {\n+                // No progress, bail out to prevent \"livelock\".\n+                return None;\n+            }\n+\n+            resolved_ty\n+        }\n+        _ => ty,\n+    };\n+\n     let mut wf = WfPredicates { infcx, param_env, body_id, span, out: vec![], item: None };\n-    if wf.compute(ty) {\n-        debug!(\"wf::obligations({:?}, body_id={:?}) = {:?}\", ty, body_id, wf.out);\n-\n-        let result = wf.normalize();\n-        debug!(\"wf::obligations({:?}, body_id={:?}) ~~> {:?}\", ty, body_id, result);\n-        Some(result)\n-    } else {\n-        None // no progress made, return None\n-    }\n+    wf.compute(ty);\n+    debug!(\"wf::obligations({:?}, body_id={:?}) = {:?}\", ty, body_id, wf.out);\n+\n+    let result = wf.normalize();\n+    debug!(\"wf::obligations({:?}, body_id={:?}) ~~> {:?}\", ty, body_id, result);\n+    Some(result)\n }\n \n /// Returns the obligations that make this trait reference\n@@ -311,12 +322,9 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n         }\n     }\n \n-    /// Pushes new obligations into `out`. Returns `true` if it was able\n-    /// to generate all the predicates needed to validate that `ty0`\n-    /// is WF. Returns false if `ty0` is an unresolved type variable,\n-    /// in which case we are not able to simplify at all.\n-    fn compute(&mut self, ty0: Ty<'tcx>) -> bool {\n-        let mut walker = ty0.walk();\n+    /// Pushes all the predicates needed to validate that `ty` is WF into `out`.\n+    fn compute(&mut self, ty: Ty<'tcx>) {\n+        let mut walker = ty.walk();\n         let param_env = self.param_env;\n         while let Some(arg) = walker.next() {\n             let ty = match arg.unpack() {\n@@ -442,8 +450,9 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                     // are not directly inspecting closure types\n                     // anyway, except via auto trait matching (which\n                     // only inspects the upvar types).\n-                    walker.skip_current_subtree(); // subtree handled by compute_projection\n+                    walker.skip_current_subtree(); // subtree handled below\n                     for upvar_ty in substs.as_closure().upvar_tys() {\n+                        // FIXME(eddyb) add the type to `walker` instead of recursing.\n                         self.compute(upvar_ty);\n                     }\n                 }\n@@ -496,44 +505,31 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                 //\n                 // 1. Check if they have been resolved, and if so proceed with\n                 //    THAT type.\n-                // 2. If not, check whether this is the type that we\n-                //    started with (ty0). In that case, we've made no\n-                //    progress at all, so return false. Otherwise,\n-                //    we've at least simplified things (i.e., we went\n-                //    from `Vec<$0>: WF` to `$0: WF`, so we can\n+                // 2. If not, we've at least simplified things (e.g., we went\n+                //    from `Vec<$0>: WF` to `$0: WF`), so we can\n                 //    register a pending obligation and keep\n                 //    moving. (Goal is that an \"inductive hypothesis\"\n                 //    is satisfied to ensure termination.)\n+                // See also the comment on `fn obligations`, describing \"livelock\"\n+                // prevention, which happens before this can be reached.\n                 ty::Infer(_) => {\n                     let ty = self.infcx.shallow_resolve(ty);\n                     if let ty::Infer(_) = ty.kind {\n-                        // not yet resolved...\n-                        if ty == ty0 {\n-                            // ...this is the type we started from! no progress.\n-                            return false;\n-                        }\n-\n+                        // Not yet resolved, but we've made progress.\n                         let cause = self.cause(traits::MiscObligation);\n-                        self.out.push(\n-                            // ...not the type we started from, so we made progress.\n-                            traits::Obligation::new(\n-                                cause,\n-                                self.param_env,\n-                                ty::Predicate::WellFormed(ty),\n-                            ),\n-                        );\n+                        self.out.push(traits::Obligation::new(\n+                            cause,\n+                            param_env,\n+                            ty::Predicate::WellFormed(ty),\n+                        ));\n                     } else {\n-                        // Yes, resolved, proceed with the\n-                        // result. Should never return false because\n-                        // `ty` is not a Infer.\n-                        assert!(self.compute(ty));\n+                        // Yes, resolved, proceed with the result.\n+                        // FIXME(eddyb) add the type to `walker` instead of recursing.\n+                        self.compute(ty);\n                     }\n                 }\n             }\n         }\n-\n-        // if we made it through that loop above, we made progress!\n-        true\n     }\n \n     fn nominal_obligations("}]}