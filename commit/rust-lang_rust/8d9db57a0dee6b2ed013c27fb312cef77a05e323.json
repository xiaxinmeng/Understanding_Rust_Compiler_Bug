{"sha": "8d9db57a0dee6b2ed013c27fb312cef77a05e323", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkOWRiNTdhMGRlZTZiMmVkMDEzYzI3ZmIzMTJjZWY3N2EwNWUzMjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-20T08:39:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-20T08:39:29Z"}, "message": "Auto merge of #1335 - vakaras:add-threads-noop, r=RalfJung\n\nMove the stack to the evaluator. (no-op PR for 70598)\n\nThe changes to Miri to make it to compile with Rustc PR https://github.com/rust-lang/rust/pull/70598.", "tree": {"sha": "8a3da9a72e13c34ada08d6bb0240245088010dfe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a3da9a72e13c34ada08d6bb0240245088010dfe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d9db57a0dee6b2ed013c27fb312cef77a05e323", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d9db57a0dee6b2ed013c27fb312cef77a05e323", "html_url": "https://github.com/rust-lang/rust/commit/8d9db57a0dee6b2ed013c27fb312cef77a05e323", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d9db57a0dee6b2ed013c27fb312cef77a05e323/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "763782aa0809ba4e92d5a6e442b843ab86c2d1f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/763782aa0809ba4e92d5a6e442b843ab86c2d1f0", "html_url": "https://github.com/rust-lang/rust/commit/763782aa0809ba4e92d5a6e442b843ab86c2d1f0"}, {"sha": "7406c1224b2dd7123ddcd6d06b809dd571fba2dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/7406c1224b2dd7123ddcd6d06b809dd571fba2dd", "html_url": "https://github.com/rust-lang/rust/commit/7406c1224b2dd7123ddcd6d06b809dd571fba2dd"}], "stats": {"total": 103, "additions": 60, "deletions": 43}, "files": [{"sha": "b48a98d229f250866b8f43618225d9f47aac0b91", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d9db57a0dee6b2ed013c27fb312cef77a05e323/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/8d9db57a0dee6b2ed013c27fb312cef77a05e323/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=8d9db57a0dee6b2ed013c27fb312cef77a05e323", "patch": "@@ -1 +1 @@\n-b2c1a606feb1fbdb0ac0acba76f881ef172ed474\n+9b2f8dbba39dd4167f22a7026674a585c3d907d8"}, {"sha": "5189982b1361a14f01235ce129ed62cfa84d45d5", "filename": "src/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8d9db57a0dee6b2ed013c27fb312cef77a05e323/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9db57a0dee6b2ed013c27fb312cef77a05e323/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=8d9db57a0dee6b2ed013c27fb312cef77a05e323", "patch": "@@ -47,7 +47,7 @@ pub enum NonHaltingDiagnostic {\n \n /// Emit a custom diagnostic without going through the miri-engine machinery\n pub fn report_error<'tcx, 'mir>(\n-    ecx: &InterpCx<'mir, 'tcx, Evaluator<'tcx>>,\n+    ecx: &InterpCx<'mir, 'tcx, Evaluator<'mir, 'tcx>>,\n     mut e: InterpErrorInfo<'tcx>,\n ) -> Option<i64> {\n     use InterpError::*;\n@@ -121,13 +121,13 @@ pub fn report_error<'tcx, 'mir>(\n /// Report an error or note (depending on the `error` argument) at the current frame's current statement.\n /// Also emits a full stacktrace of the interpreter stack.\n fn report_msg<'tcx, 'mir>(\n-    ecx: &InterpCx<'mir, 'tcx, Evaluator<'tcx>>,\n+    ecx: &InterpCx<'mir, 'tcx, Evaluator<'mir, 'tcx>>,\n     title: &str,\n     span_msg: String,\n     mut helps: Vec<String>,\n     error: bool,\n ) -> Option<i64> {\n-    let span = if let Some(frame) = ecx.stack().last() {\n+    let span = if let Some(frame) = ecx.machine.stack.last() {\n         frame.current_source_info().unwrap().span\n     } else {\n         DUMMY_SP\n@@ -159,7 +159,7 @@ fn report_msg<'tcx, 'mir>(\n \n     err.emit();\n \n-    for (i, frame) in ecx.stack().iter().enumerate() {\n+    for (i, frame) in ecx.machine.stack.iter().enumerate() {\n         trace!(\"-------------------\");\n         trace!(\"Frame {}\", i);\n         trace!(\"    return: {:?}\", frame.return_place.map(|p| *p));\n@@ -181,7 +181,7 @@ pub fn register_diagnostic(e: NonHaltingDiagnostic) {\n     DIAGNOSTICS.with(|diagnostics| diagnostics.borrow_mut().push(e));\n }\n \n-impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     /// Emit all diagnostics that were registed with `register_diagnostics`\n     fn process_diagnostics(&self) {"}, {"sha": "548ecee7bc426be647d00d4f1aebbac00011f80a", "filename": "src/eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d9db57a0dee6b2ed013c27fb312cef77a05e323/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9db57a0dee6b2ed013c27fb312cef77a05e323/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=8d9db57a0dee6b2ed013c27fb312cef77a05e323", "patch": "@@ -62,7 +62,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     tcx: TyCtxt<'tcx>,\n     main_id: DefId,\n     config: MiriConfig,\n-) -> InterpResult<'tcx, (InterpCx<'mir, 'tcx, Evaluator<'tcx>>, MPlaceTy<'tcx, Tag>)> {\n+) -> InterpResult<'tcx, (InterpCx<'mir, 'tcx, Evaluator<'mir, 'tcx>>, MPlaceTy<'tcx, Tag>)> {\n     let tcx_at = tcx.at(rustc_span::source_map::DUMMY_SP);\n     let param_env = ty::ParamEnv::reveal_all();\n     let layout_cx = LayoutCx { tcx, param_env };"}, {"sha": "644ea25fbc4bf0dfca966300f9bca5220ca065da", "filename": "src/helpers.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d9db57a0dee6b2ed013c27fb312cef77a05e323/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9db57a0dee6b2ed013c27fb312cef77a05e323/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=8d9db57a0dee6b2ed013c27fb312cef77a05e323", "patch": "@@ -13,7 +13,7 @@ use rand::RngCore;\n \n use crate::*;\n \n-impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n \n /// Gets an instance for a path.\n fn try_resolve_did<'mir, 'tcx>(tcx: TyCtxt<'tcx>, path: &[&str]) -> Option<DefId> {\n@@ -265,7 +265,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             unsafe_cell_action: F,\n         }\n \n-        impl<'ecx, 'mir, 'tcx, F> ValueVisitor<'mir, 'tcx, Evaluator<'tcx>>\n+        impl<'ecx, 'mir, 'tcx: 'mir, F> ValueVisitor<'mir, 'tcx, Evaluator<'mir, 'tcx>>\n             for UnsafeCellVisitor<'ecx, 'mir, 'tcx, F>\n         where\n             F: FnMut(MPlaceTy<'tcx, Tag>) -> InterpResult<'tcx>,"}, {"sha": "5413e6b935b9b735a64f7929238ea76b4ef37729", "filename": "src/intptrcast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d9db57a0dee6b2ed013c27fb312cef77a05e323/src%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9db57a0dee6b2ed013c27fb312cef77a05e323/src%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintptrcast.rs?ref=8d9db57a0dee6b2ed013c27fb312cef77a05e323", "patch": "@@ -41,7 +41,7 @@ impl Default for GlobalState {\n impl<'mir, 'tcx> GlobalState {\n     pub fn int_to_ptr(\n         int: u64,\n-        memory: &Memory<'mir, 'tcx, Evaluator<'tcx>>,\n+        memory: &Memory<'mir, 'tcx, Evaluator<'mir, 'tcx>>,\n     ) -> InterpResult<'tcx, Pointer<Tag>> {\n         let global_state = memory.extra.intptrcast.borrow();\n         let pos = global_state.int_to_ptr_map.binary_search_by_key(&int, |(addr, _)| *addr);\n@@ -73,7 +73,7 @@ impl<'mir, 'tcx> GlobalState {\n \n     pub fn ptr_to_int(\n         ptr: Pointer<Tag>,\n-        memory: &Memory<'mir, 'tcx, Evaluator<'tcx>>,\n+        memory: &Memory<'mir, 'tcx, Evaluator<'mir, 'tcx>>,\n     ) -> InterpResult<'tcx, u64> {\n         let mut global_state = memory.extra.intptrcast.borrow_mut();\n         let global_state = &mut *global_state;"}, {"sha": "2ab5f10af66d87e4689c5aaa7f822390ece8b35a", "filename": "src/machine.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8d9db57a0dee6b2ed013c27fb312cef77a05e323/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9db57a0dee6b2ed013c27fb312cef77a05e323/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=8d9db57a0dee6b2ed013c27fb312cef77a05e323", "patch": "@@ -215,7 +215,7 @@ impl<'mir, 'tcx: 'mir> PrimitiveLayouts<'tcx> {\n }\n \n /// The machine itself.\n-pub struct Evaluator<'tcx> {\n+pub struct Evaluator<'mir, 'tcx> {\n     /// Environment variables set by `setenv`.\n     /// Miri does not expose env vars from the host to the emulated program.\n     pub(crate) env_vars: EnvVars<'tcx>,\n@@ -251,11 +251,14 @@ pub struct Evaluator<'tcx> {\n     /// The \"time anchor\" for this machine's monotone clock (for `Instant` simulation).\n     pub(crate) time_anchor: Instant,\n \n+    /// The call stack.\n+    pub(crate) stack: Vec<Frame<'mir, 'tcx, Tag, FrameData<'tcx>>>,\n+\n     /// Precomputed `TyLayout`s for primitive data types that are commonly used inside Miri.\n     pub(crate) layouts: PrimitiveLayouts<'tcx>,\n }\n \n-impl<'tcx> Evaluator<'tcx> {\n+impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n     pub(crate) fn new(\n         communicate: bool,\n         validate: bool,\n@@ -279,12 +282,13 @@ impl<'tcx> Evaluator<'tcx> {\n             panic_payload: None,\n             time_anchor: Instant::now(),\n             layouts,\n+            stack: Vec::default(),\n         }\n     }\n }\n \n /// A rustc InterpCx for Miri.\n-pub type MiriEvalContext<'mir, 'tcx> = InterpCx<'mir, 'tcx, Evaluator<'tcx>>;\n+pub type MiriEvalContext<'mir, 'tcx> = InterpCx<'mir, 'tcx, Evaluator<'mir, 'tcx>>;\n \n /// A little trait that's useful to be inherited by extension traits.\n pub trait MiriEvalContextExt<'mir, 'tcx> {\n@@ -303,7 +307,7 @@ impl<'mir, 'tcx> MiriEvalContextExt<'mir, 'tcx> for MiriEvalContext<'mir, 'tcx>\n }\n \n /// Machine hook implementations.\n-impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n+impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n     type MemoryKind = MiriMemoryKind;\n \n     type FrameExtra = FrameData<'tcx>;\n@@ -521,6 +525,20 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n         Ok(frame.with_extra(extra))\n     }\n \n+    #[inline(always)]\n+    fn stack<'a>(\n+        ecx: &'a InterpCx<'mir, 'tcx, Self>,\n+    ) -> &'a [Frame<'mir, 'tcx, Self::PointerTag, Self::FrameExtra>] {\n+        &ecx.machine.stack\n+    }\n+\n+    #[inline(always)]\n+    fn stack_mut<'a>(\n+        ecx: &'a mut InterpCx<'mir, 'tcx, Self>,\n+    ) -> &'a mut Vec<Frame<'mir, 'tcx, Self::PointerTag, Self::FrameExtra>> {\n+        &mut ecx.machine.stack\n+    }\n+\n     #[inline(always)]\n     fn after_stack_push(ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx> {\n         if ecx.memory.extra.stacked_borrows.is_some() {"}, {"sha": "0f6ba63e984f38cc54f2153181bf48341c9b52a9", "filename": "src/shims/dlsym.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d9db57a0dee6b2ed013c27fb312cef77a05e323/src%2Fshims%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9db57a0dee6b2ed013c27fb312cef77a05e323/src%2Fshims%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fdlsym.rs?ref=8d9db57a0dee6b2ed013c27fb312cef77a05e323", "patch": "@@ -20,7 +20,7 @@ impl Dlsym {\n     }\n }\n \n-impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     fn call_dlsym(\n         &mut self,"}, {"sha": "8459aa3241c8eb4e17d2c2a95b27a9745cc818ac", "filename": "src/shims/env.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8d9db57a0dee6b2ed013c27fb312cef77a05e323/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9db57a0dee6b2ed013c27fb312cef77a05e323/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=8d9db57a0dee6b2ed013c27fb312cef77a05e323", "patch": "@@ -35,7 +35,7 @@ pub struct EnvVars<'tcx> {\n \n impl<'tcx> EnvVars<'tcx> {\n     pub(crate) fn init<'mir>(\n-        ecx: &mut InterpCx<'mir, 'tcx, Evaluator<'tcx>>,\n+        ecx: &mut InterpCx<'mir, 'tcx, Evaluator<'mir, 'tcx>>,\n         mut excluded_env_vars: Vec<String>,\n     ) -> InterpResult<'tcx> {\n         let target_os = ecx.tcx.sess.target.target.target_os.as_str();\n@@ -61,7 +61,7 @@ impl<'tcx> EnvVars<'tcx> {\n     }\n \n     pub(crate) fn cleanup<'mir>(\n-        ecx: &mut InterpCx<'mir, 'tcx, Evaluator<'tcx>>,\n+        ecx: &mut InterpCx<'mir, 'tcx, Evaluator<'mir, 'tcx>>,\n     ) -> InterpResult<'tcx> {\n         // Deallocate individual env vars.\n         for (_name, ptr) in ecx.machine.env_vars.map.drain() {\n@@ -78,7 +78,7 @@ impl<'tcx> EnvVars<'tcx> {\n fn alloc_env_var_as_c_str<'mir, 'tcx>(\n     name: &OsStr,\n     value: &OsStr,\n-    ecx: &mut InterpCx<'mir, 'tcx, Evaluator<'tcx>>,\n+    ecx: &mut InterpCx<'mir, 'tcx, Evaluator<'mir, 'tcx>>,\n ) -> InterpResult<'tcx, Pointer<Tag>> {\n     let mut name_osstring = name.to_os_string();\n     name_osstring.push(\"=\");\n@@ -89,15 +89,15 @@ fn alloc_env_var_as_c_str<'mir, 'tcx>(\n fn alloc_env_var_as_wide_str<'mir, 'tcx>(\n     name: &OsStr,\n     value: &OsStr,\n-    ecx: &mut InterpCx<'mir, 'tcx, Evaluator<'tcx>>,\n+    ecx: &mut InterpCx<'mir, 'tcx, Evaluator<'mir, 'tcx>>,\n ) -> InterpResult<'tcx, Pointer<Tag>> {\n     let mut name_osstring = name.to_os_string();\n     name_osstring.push(\"=\");\n     name_osstring.push(value);\n     Ok(ecx.alloc_os_str_as_wide_str(name_osstring.as_os_str(), MiriMemoryKind::Env.into()))\n }\n \n-impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     fn getenv(&mut self, name_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, Scalar<Tag>> {\n         let this = self.eval_context_mut();"}, {"sha": "9e531accd06a8dae6c8bf9d77f84d6eed35c92d4", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d9db57a0dee6b2ed013c27fb312cef77a05e323/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9db57a0dee6b2ed013c27fb312cef77a05e323/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=8d9db57a0dee6b2ed013c27fb312cef77a05e323", "patch": "@@ -12,7 +12,7 @@ use rustc_ast::attr;\n \n use crate::*;\n \n-impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     /// Returns the minimum alignment for the target architecture for allocations of the given size.\n     fn min_align(&self, size: u64, kind: MiriMemoryKind) -> Align {"}, {"sha": "70e16a65b59b36bc3136192fe4a74cfa9bf97eba", "filename": "src/shims/foreign_items/posix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d9db57a0dee6b2ed013c27fb312cef77a05e323/src%2Fshims%2Fforeign_items%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9db57a0dee6b2ed013c27fb312cef77a05e323/src%2Fshims%2Fforeign_items%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix.rs?ref=8d9db57a0dee6b2ed013c27fb312cef77a05e323", "patch": "@@ -9,7 +9,7 @@ use crate::*;\n use rustc_middle::mir;\n use rustc_target::abi::{Align, LayoutOf, Size};\n \n-impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     fn emulate_foreign_item_by_name(\n         &mut self,"}, {"sha": "b00704e47a0251c742ba6a688e87f81a7bd377f7", "filename": "src/shims/foreign_items/posix/linux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d9db57a0dee6b2ed013c27fb312cef77a05e323/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9db57a0dee6b2ed013c27fb312cef77a05e323/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs?ref=8d9db57a0dee6b2ed013c27fb312cef77a05e323", "patch": "@@ -1,7 +1,7 @@\n use crate::*;\n use rustc_middle::mir;\n \n-impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     fn emulate_foreign_item_by_name(\n         &mut self,"}, {"sha": "125b6b7685301fa5eb38e73f29e85d0681d1caca", "filename": "src/shims/foreign_items/posix/macos.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d9db57a0dee6b2ed013c27fb312cef77a05e323/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9db57a0dee6b2ed013c27fb312cef77a05e323/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs?ref=8d9db57a0dee6b2ed013c27fb312cef77a05e323", "patch": "@@ -1,7 +1,7 @@\n use crate::*;\n use rustc_middle::mir;\n \n-impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     fn emulate_foreign_item_by_name(\n         &mut self,"}, {"sha": "0950a02bf92f945f5f3172ac4d6aebb8d35283d3", "filename": "src/shims/foreign_items/windows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d9db57a0dee6b2ed013c27fb312cef77a05e323/src%2Fshims%2Fforeign_items%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9db57a0dee6b2ed013c27fb312cef77a05e323/src%2Fshims%2Fforeign_items%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fwindows.rs?ref=8d9db57a0dee6b2ed013c27fb312cef77a05e323", "patch": "@@ -5,7 +5,7 @@ use rustc_target::abi::Size;\n \n use crate::*;\n \n-impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     fn emulate_foreign_item_by_name(\n         &mut self,"}, {"sha": "3e20f5f972889b3ec1ed92511ced6d92962062d1", "filename": "src/shims/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d9db57a0dee6b2ed013c27fb312cef77a05e323/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9db57a0dee6b2ed013c27fb312cef77a05e323/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=8d9db57a0dee6b2ed013c27fb312cef77a05e323", "patch": "@@ -64,7 +64,7 @@ impl FileHandler {\n     }\n }\n \n-impl<'mir, 'tcx> EvalContextExtPrivate<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+impl<'mir, 'tcx: 'mir> EvalContextExtPrivate<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n trait EvalContextExtPrivate<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     /// Emulate `stat` or `lstat` on `macos`. This function is not intended to be\n     /// called directly from `emulate_foreign_item_by_name`, so it does not check if isolation is\n@@ -232,7 +232,7 @@ impl Default for DirHandler {\n     }\n }\n \n-impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     fn open(\n         &mut self,"}, {"sha": "b64aeef485ea45c3ae6df4af40ba458919a8a27a", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d9db57a0dee6b2ed013c27fb312cef77a05e323/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9db57a0dee6b2ed013c27fb312cef77a05e323/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=8d9db57a0dee6b2ed013c27fb312cef77a05e323", "patch": "@@ -8,7 +8,7 @@ use rustc_target::abi::{Align, LayoutOf, Size};\n \n use crate::*;\n \n-impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     fn call_intrinsic(\n         &mut self,"}, {"sha": "71ff6024ec6fe5e1dc057450f1a45448f1ae77e1", "filename": "src/shims/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d9db57a0dee6b2ed013c27fb312cef77a05e323/src%2Fshims%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9db57a0dee6b2ed013c27fb312cef77a05e323/src%2Fshims%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fmod.rs?ref=8d9db57a0dee6b2ed013c27fb312cef77a05e323", "patch": "@@ -17,7 +17,7 @@ use rustc_middle::{mir, ty};\n \n use crate::*;\n \n-impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     fn find_mir_or_eval_fn(\n         &mut self,"}, {"sha": "73dc9119a820f1c5d454d2ac4f3508a6041462e7", "filename": "src/shims/os_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d9db57a0dee6b2ed013c27fb312cef77a05e323/src%2Fshims%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9db57a0dee6b2ed013c27fb312cef77a05e323/src%2Fshims%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fos_str.rs?ref=8d9db57a0dee6b2ed013c27fb312cef77a05e323", "patch": "@@ -60,7 +60,7 @@ fn convert_path_separator<'a>(\n     };\n }\n \n-impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     /// Helper function to read an OsString from a null-terminated sequence of bytes, which is what\n     /// the Unix APIs usually handle."}, {"sha": "c926046a04423d2cd2505d6f4d6ad81978af7c58", "filename": "src/shims/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d9db57a0dee6b2ed013c27fb312cef77a05e323/src%2Fshims%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9db57a0dee6b2ed013c27fb312cef77a05e323/src%2Fshims%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fpanic.rs?ref=8d9db57a0dee6b2ed013c27fb312cef77a05e323", "patch": "@@ -31,7 +31,7 @@ pub struct CatchUnwindData<'tcx> {\n     ret: mir::BasicBlock,\n }\n \n-impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     /// Check if panicking is supported on this target, and give a good error otherwise.\n     fn check_panic_supported(&self) -> InterpResult<'tcx> {"}, {"sha": "e26d2ce2e39d216630fd88b3e50675f35948fc45", "filename": "src/shims/time.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d9db57a0dee6b2ed013c27fb312cef77a05e323/src%2Fshims%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9db57a0dee6b2ed013c27fb312cef77a05e323/src%2Fshims%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftime.rs?ref=8d9db57a0dee6b2ed013c27fb312cef77a05e323", "patch": "@@ -11,8 +11,7 @@ pub fn system_time_to_duration<'tcx>(time: &SystemTime) -> InterpResult<'tcx, Du\n         .map_err(|_| err_unsup_format!(\"times before the Unix epoch are not supported\").into())\n }\n \n-\n-impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     fn clock_gettime(\n         &mut self,"}, {"sha": "7b84468402953ab7cc9ae4624bd292557488a6e1", "filename": "src/shims/tls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d9db57a0dee6b2ed013c27fb312cef77a05e323/src%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9db57a0dee6b2ed013c27fb312cef77a05e323/src%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftls.rs?ref=8d9db57a0dee6b2ed013c27fb312cef77a05e323", "patch": "@@ -154,7 +154,7 @@ impl<'tcx> TlsData<'tcx> {\n     }\n }\n \n-impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     fn run_tls_dtors(&mut self) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();"}, {"sha": "3412f00964b4a1934157d54e0c90da429f399b11", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d9db57a0dee6b2ed013c27fb312cef77a05e323/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9db57a0dee6b2ed013c27fb312cef77a05e323/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=8d9db57a0dee6b2ed013c27fb312cef77a05e323", "patch": "@@ -506,7 +506,7 @@ impl Stacks {\n \n /// Retagging/reborrowing.  There is some policy in here, such as which permissions\n /// to grant for which references, and when to add protectors.\n-impl<'mir, 'tcx> EvalContextPrivExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+impl<'mir, 'tcx: 'mir> EvalContextPrivExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     fn reborrow(\n         &mut self,\n@@ -607,7 +607,7 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     }\n }\n \n-impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     fn retag(&mut self, kind: RetagKind, place: PlaceTy<'tcx, Tag>) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();"}, {"sha": "b1f5fc17262002414cd955bb51e0661a36428e12", "filename": "test-cargo-miri/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d9db57a0dee6b2ed013c27fb312cef77a05e323/test-cargo-miri%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9db57a0dee6b2ed013c27fb312cef77a05e323/test-cargo-miri%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Fbuild.rs?ref=8d9db57a0dee6b2ed013c27fb312cef77a05e323", "patch": "@@ -1,10 +1,10 @@\n-#![feature(asm)]\n+#![feature(llvm_asm)]\n \n fn not_in_miri() -> i32 {\n     // Inline assembly definitely does not work in Miri.\n     let dummy = 42;\n     unsafe {\n-        asm!(\"\" : : \"r\"(&dummy));\n+        llvm_asm!(\"\" : : \"r\"(&dummy));\n     }\n     return dummy;\n }"}, {"sha": "0b98c7d2bba3d6c26a5fc543f9f1c2c9070fca10", "filename": "tests/compile-fail/rc_as_ptr.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8d9db57a0dee6b2ed013c27fb312cef77a05e323/tests%2Fcompile-fail%2Frc_as_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9db57a0dee6b2ed013c27fb312cef77a05e323/tests%2Fcompile-fail%2Frc_as_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Frc_as_ptr.rs?ref=8d9db57a0dee6b2ed013c27fb312cef77a05e323", "patch": "@@ -5,17 +5,17 @@\n use std::rc::{Rc, Weak};\n use std::ptr;\n \n-/// Taken from the `Weak::as_raw` doctest.\n+/// Taken from the `Weak::as_ptr` doctest.\n fn main() {\n     let strong = Rc::new(Box::new(42));\n     let weak = Rc::downgrade(&strong);\n     // Both point to the same object\n-    assert!(ptr::eq(&*strong, Weak::as_raw(&weak)));\n+    assert!(ptr::eq(&*strong, Weak::as_ptr(&weak)));\n     // The strong here keeps it alive, so we can still access the object.\n-    assert_eq!(42, **unsafe { &*Weak::as_raw(&weak) });\n+    assert_eq!(42, **unsafe { &*Weak::as_ptr(&weak) });\n     \n     drop(strong);\n     // But not any more. We can do Weak::as_raw(&weak), but accessing the pointer would lead to\n     // undefined behaviour.\n-    assert_eq!(42, **unsafe { &*Weak::as_raw(&weak) }); //~ ERROR dereferenced after this allocation got freed\n+    assert_eq!(42, **unsafe { &*Weak::as_ptr(&weak) }); //~ ERROR dereferenced after this allocation got freed\n }", "previous_filename": "tests/compile-fail/rc_as_raw.rs"}]}