{"sha": "7db973d06f90784ecd5ac3aaffd8e3762e69765f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkYjk3M2QwNmY5MDc4NGVjZDVhYzNhYWZmZDhlMzc2MmU2OTc2NWY=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-11-23T16:56:13Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-11-23T16:56:13Z"}, "message": "Merge remote-tracking branch 'FlorianRohm/issue/4623' into rollup-new-lints", "tree": {"sha": "c0cd31eb40ea11d88662204a367d58cae0bad05f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0cd31eb40ea11d88662204a367d58cae0bad05f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7db973d06f90784ecd5ac3aaffd8e3762e69765f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAl3ZZK4ACgkQaTCGhp1Q\nZjemdA//YEHEG39LFRiNWjlHIA8qWv/Df7zvRGOsWLSBD71Np38OhYE9V+lQ4K+D\nq0+WABxvTfnrNCkncTed1/SwtjPFtgC6RylK75KKr6o4Av00l79JIFFmK8LOliaC\np+E/yOVyqMRLsMgc/eyUNWJ4pn4TBU8VxJ+1E1nHoPTUPpLU9ZodB4PnvI4ifl3e\nZBlfVLvxQ0g4DQNvU4OSHhbVh9d1beAycEkuNHohvCQ7V8JqOr1KeXbNF54I2VWP\nE3GUzNEwtzATeQ3FvJhZ75tTneLe9j2WEzYtfNtCxD+XJuyOkTn5VpCd+vyW6Bml\ncRPCk9qLyCACIutxScbIebxIbv/d8e4NYzmAZOACa6xG9DlxiI2HE1b/Y838S9FZ\nydJMLV5+VjykwLv42X8q0vXeDYjhUcT9UXvawOUWKEVWqTHg2P8ZF5jkOnkIQnUI\nBJk5rbc2LfCRJhTeMia6fcA8fMwMT0VG8nfpjxhaT/gwD5ZYD7on6NZgV/DtE+6I\nsCVJryzfXUNHgAxIVXz6xB1WdEuCbjRd0kPZh2kn1wUCfSZP20V7RXI3BpSPDP52\nsqvWinDA0JoaIYwQhVE6CH3zhmCoaWbFzTlVkRl4Rv6IY+bMBw7QPsVJl2+BrN1z\nXCWn4BM2pin/e2QcepEwAZPk9BOtcNC/1WalqeNHSgUeh029urw=\n=PSvm\n-----END PGP SIGNATURE-----", "payload": "tree c0cd31eb40ea11d88662204a367d58cae0bad05f\nparent 353668ee6c5b07dd865f6855ad83f0c2aa234dc7\nparent 73806b72a90c205b43a58545462ce154e0c398d8\nauthor flip1995 <hello@philkrones.com> 1574528173 +0100\ncommitter flip1995 <hello@philkrones.com> 1574528173 +0100\n\nMerge remote-tracking branch 'FlorianRohm/issue/4623' into rollup-new-lints\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7db973d06f90784ecd5ac3aaffd8e3762e69765f", "html_url": "https://github.com/rust-lang/rust/commit/7db973d06f90784ecd5ac3aaffd8e3762e69765f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7db973d06f90784ecd5ac3aaffd8e3762e69765f/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "353668ee6c5b07dd865f6855ad83f0c2aa234dc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/353668ee6c5b07dd865f6855ad83f0c2aa234dc7", "html_url": "https://github.com/rust-lang/rust/commit/353668ee6c5b07dd865f6855ad83f0c2aa234dc7"}, {"sha": "73806b72a90c205b43a58545462ce154e0c398d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/73806b72a90c205b43a58545462ce154e0c398d8", "html_url": "https://github.com/rust-lang/rust/commit/73806b72a90c205b43a58545462ce154e0c398d8"}], "stats": {"total": 328, "additions": 328, "deletions": 0}, "files": [{"sha": "72773df604c51cb4b8e0be389854fc72a9118f21", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7db973d06f90784ecd5ac3aaffd8e3762e69765f/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/7db973d06f90784ecd5ac3aaffd8e3762e69765f/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=7db973d06f90784ecd5ac3aaffd8e3762e69765f", "patch": "@@ -1203,6 +1203,7 @@ Released 2018-09-13\n [`suspicious_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_map\n [`suspicious_op_assign_impl`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_op_assign_impl\n [`suspicious_unary_op_formatting`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_unary_op_formatting\n+[`tabs_in_doc_comments`]: https://rust-lang.github.io/rust-clippy/master/index.html#tabs_in_doc_comments\n [`temporary_assignment`]: https://rust-lang.github.io/rust-clippy/master/index.html#temporary_assignment\n [`temporary_cstring_as_ptr`]: https://rust-lang.github.io/rust-clippy/master/index.html#temporary_cstring_as_ptr\n [`to_digit_is_some`]: https://rust-lang.github.io/rust-clippy/master/index.html#to_digit_is_some"}, {"sha": "de55f3d2bb8cc42790ac30a78a17f060d930e13e", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7db973d06f90784ecd5ac3aaffd8e3762e69765f/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db973d06f90784ecd5ac3aaffd8e3762e69765f/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=7db973d06f90784ecd5ac3aaffd8e3762e69765f", "patch": "@@ -275,6 +275,7 @@ pub mod slow_vector_initialization;\n pub mod strings;\n pub mod suspicious_trait_impl;\n pub mod swap;\n+pub mod tabs_in_doc_comments;\n pub mod temporary_assignment;\n pub mod to_digit_is_some;\n pub mod trait_bounds;\n@@ -720,6 +721,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         &suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL,\n         &swap::ALMOST_SWAPPED,\n         &swap::MANUAL_SWAP,\n+        &tabs_in_doc_comments::TABS_IN_DOC_COMMENTS,\n         &temporary_assignment::TEMPORARY_ASSIGNMENT,\n         &to_digit_is_some::TO_DIGIT_IS_SOME,\n         &trait_bounds::TYPE_REPETITION_IN_BOUNDS,\n@@ -950,6 +952,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n     store.register_early_pass(|| box utils::internal_lints::ClippyLintsInternal);\n     let enum_variant_name_threshold = conf.enum_variant_name_threshold;\n     store.register_early_pass(move || box enum_variants::EnumVariantNames::new(enum_variant_name_threshold));\n+    store.register_early_pass(|| box tabs_in_doc_comments::TabsInDocComments);\n     store.register_late_pass(|| box unused_self::UnusedSelf);\n     store.register_late_pass(|| box mutable_debug_assertion::DebugAssertWithMutCall);\n     store.register_late_pass(|| box exit::Exit);\n@@ -1252,6 +1255,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         LintId::of(&suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL),\n         LintId::of(&swap::ALMOST_SWAPPED),\n         LintId::of(&swap::MANUAL_SWAP),\n+        LintId::of(&tabs_in_doc_comments::TABS_IN_DOC_COMMENTS),\n         LintId::of(&temporary_assignment::TEMPORARY_ASSIGNMENT),\n         LintId::of(&to_digit_is_some::TO_DIGIT_IS_SOME),\n         LintId::of(&transmute::CROSSPOINTER_TRANSMUTE),\n@@ -1379,6 +1383,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         LintId::of(&returns::NEEDLESS_RETURN),\n         LintId::of(&returns::UNUSED_UNIT),\n         LintId::of(&strings::STRING_LIT_AS_BYTES),\n+        LintId::of(&tabs_in_doc_comments::TABS_IN_DOC_COMMENTS),\n         LintId::of(&to_digit_is_some::TO_DIGIT_IS_SOME),\n         LintId::of(&try_err::TRY_ERR),\n         LintId::of(&types::FN_TO_NUMERIC_CAST),"}, {"sha": "ccea700f3538d0d381e03b9d49a85b0865b6ba0e", "filename": "clippy_lints/src/tabs_in_doc_comments.rs", "status": "added", "additions": 219, "deletions": 0, "changes": 219, "blob_url": "https://github.com/rust-lang/rust/blob/7db973d06f90784ecd5ac3aaffd8e3762e69765f/clippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db973d06f90784ecd5ac3aaffd8e3762e69765f/clippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs?ref=7db973d06f90784ecd5ac3aaffd8e3762e69765f", "patch": "@@ -0,0 +1,219 @@\n+use crate::utils::span_lint_and_sugg;\n+use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n+use rustc_errors::Applicability;\n+use std::convert::TryFrom;\n+use syntax::ast;\n+use syntax::source_map::{BytePos, Span};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks doc comments for usage of tab characters.\n+    ///\n+    /// **Why is this bad?** The rust style-guide promotes spaces instead of tabs for indentation.\n+    /// To keep a consistent view on the source, also doc comments should not have tabs.\n+    /// Also, explaining ascii-diagrams containing tabs can get displayed incorrectly when the\n+    /// display settings of the author and reader differ.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```rust\n+    /// ///\n+    /// /// Struct to hold two strings:\n+    /// /// \t- first\t\tone\n+    /// /// \t- second\tone\n+    /// pub struct DoubleString {\n+    ///    ///\n+    ///    /// \t- First String:\n+    ///    /// \t\t- needs to be inside here\n+    ///    first_string: String,\n+    ///    ///\n+    ///    /// \t- Second String:\n+    ///    /// \t\t- needs to be inside here\n+    ///    second_string: String,\n+    ///}\n+    /// ```\n+    ///\n+    /// Will be converted to:\n+     /// ```rust\n+    /// ///\n+    /// /// Struct to hold two strings:\n+    /// ///     - first        one\n+    /// ///     - second    one\n+    /// pub struct DoubleString {\n+    ///    ///\n+    ///    ///     - First String:\n+    ///    ///         - needs to be inside here\n+    ///    first_string: String,\n+    ///    ///\n+    ///    ///     - Second String:\n+    ///    ///         - needs to be inside here\n+    ///    second_string: String,\n+    ///}\n+    /// ```\n+    pub TABS_IN_DOC_COMMENTS,\n+    style,\n+    \"using tabs in doc comments is not recommended\"\n+}\n+\n+declare_lint_pass!(TabsInDocComments => [TABS_IN_DOC_COMMENTS]);\n+\n+impl TabsInDocComments {\n+    fn warn_if_tabs_in_doc(cx: &EarlyContext<'_>, attr: &ast::Attribute) {\n+        if let ast::AttrKind::DocComment(comment) = attr.kind {\n+            let comment = comment.as_str();\n+\n+            for (lo, hi) in get_chunks_of_tabs(&comment) {\n+                let new_span = Span::new(\n+                    attr.span.lo() + BytePos(lo),\n+                    attr.span.lo() + BytePos(hi),\n+                    attr.span.ctxt(),\n+                );\n+                span_lint_and_sugg(\n+                    cx,\n+                    TABS_IN_DOC_COMMENTS,\n+                    new_span,\n+                    \"using tabs in doc comments is not recommended\",\n+                    \"consider using four spaces per tab\",\n+                    \"    \".repeat((hi - lo) as usize),\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+        }\n+    }\n+}\n+\n+impl EarlyLintPass for TabsInDocComments {\n+    fn check_attribute(&mut self, cx: &EarlyContext<'_>, attribute: &ast::Attribute) {\n+        Self::warn_if_tabs_in_doc(cx, &attribute);\n+    }\n+}\n+\n+///\n+/// scans the string for groups of tabs and returns the start(inclusive) and end positions\n+/// (exclusive) of all groups\n+/// e.g. \"sd\\tasd\\t\\taa\" will be converted to [(2, 3), (6, 8)] as\n+///       012 3456 7 89\n+///         ^-^  ^---^\n+fn get_chunks_of_tabs(the_str: &str) -> Vec<(u32, u32)> {\n+    let line_length_way_to_long = \"doc comment longer than 2^32 chars\";\n+    let mut spans: Vec<(u32, u32)> = vec![];\n+    let mut current_start: u32 = 0;\n+\n+    // tracker to decide if the last group of tabs is not closed by a non-tab character\n+    let mut is_active = false;\n+\n+    let chars_array: Vec<_> = the_str.chars().collect();\n+\n+    if chars_array == vec!['\\t'] {\n+        return vec![(0, 1)];\n+    }\n+\n+    for (index, arr) in chars_array.windows(2).enumerate() {\n+        let index = u32::try_from(index).expect(line_length_way_to_long);\n+        match arr {\n+            ['\\t', '\\t'] => {\n+                // either string starts with double tab, then we have to set it active,\n+                // otherwise is_active is true anyway\n+                is_active = true;\n+            },\n+            [_, '\\t'] => {\n+                // as ['\\t', '\\t'] is excluded, this has to be a start of a tab group,\n+                // set indices accordingly\n+                is_active = true;\n+                current_start = index + 1;\n+            },\n+            ['\\t', _] => {\n+                // this now has to be an end of the group, hence we have to push a new tuple\n+                is_active = false;\n+                spans.push((current_start, index + 1));\n+            },\n+            _ => {},\n+        }\n+    }\n+\n+    // only possible when tabs are at the end, insert last group\n+    if is_active {\n+        spans.push((\n+            current_start,\n+            u32::try_from(the_str.chars().count()).expect(line_length_way_to_long),\n+        ));\n+    }\n+\n+    spans\n+}\n+\n+#[cfg(test)]\n+mod tests_for_get_chunks_of_tabs {\n+    use super::get_chunks_of_tabs;\n+\n+    #[test]\n+    fn test_empty_string() {\n+        let res = get_chunks_of_tabs(\"\");\n+\n+        assert_eq!(res, vec![]);\n+    }\n+\n+    #[test]\n+    fn test_simple() {\n+        let res = get_chunks_of_tabs(\"sd\\t\\t\\taa\");\n+\n+        assert_eq!(res, vec![(2, 5)]);\n+    }\n+\n+    #[test]\n+    fn test_only_t() {\n+        let res = get_chunks_of_tabs(\"\\t\\t\");\n+\n+        assert_eq!(res, vec![(0, 2)]);\n+    }\n+\n+    #[test]\n+    fn test_only_one_t() {\n+        let res = get_chunks_of_tabs(\"\\t\");\n+\n+        assert_eq!(res, vec![(0, 1)]);\n+    }\n+\n+    #[test]\n+    fn test_double() {\n+        let res = get_chunks_of_tabs(\"sd\\tasd\\t\\taa\");\n+\n+        assert_eq!(res, vec![(2, 3), (6, 8)]);\n+    }\n+\n+    #[test]\n+    fn test_start() {\n+        let res = get_chunks_of_tabs(\"\\t\\taa\");\n+\n+        assert_eq!(res, vec![(0, 2)]);\n+    }\n+\n+    #[test]\n+    fn test_end() {\n+        let res = get_chunks_of_tabs(\"aa\\t\\t\");\n+\n+        assert_eq!(res, vec![(2, 4)]);\n+    }\n+\n+    #[test]\n+    fn test_start_single() {\n+        let res = get_chunks_of_tabs(\"\\taa\");\n+\n+        assert_eq!(res, vec![(0, 1)]);\n+    }\n+\n+    #[test]\n+    fn test_end_single() {\n+        let res = get_chunks_of_tabs(\"aa\\t\");\n+\n+        assert_eq!(res, vec![(2, 3)]);\n+    }\n+\n+    #[test]\n+    fn test_no_tabs() {\n+        let res = get_chunks_of_tabs(\"dsfs\");\n+\n+        assert_eq!(res, vec![]);\n+    }\n+}"}, {"sha": "2958e77fd5e02eb85457580b89c22af1669dfe54", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7db973d06f90784ecd5ac3aaffd8e3762e69765f/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db973d06f90784ecd5ac3aaffd8e3762e69765f/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=7db973d06f90784ecd5ac3aaffd8e3762e69765f", "patch": "@@ -1876,6 +1876,13 @@ pub const ALL_LINTS: [Lint; 334] = [\n         deprecation: None,\n         module: \"formatting\",\n     },\n+    Lint {\n+        name: \"tabs_in_doc_comments\",\n+        group: \"style\",\n+        desc: \"using tabs in doc comments is not recommended\",\n+        deprecation: None,\n+        module: \"tabs_in_doc_comments\",\n+    },\n     Lint {\n         name: \"temporary_assignment\",\n         group: \"complexity\","}, {"sha": "4bc4bc86c76c291dd2fd9417c00fc7ec16a0e195", "filename": "tests/ui/tabs_in_doc_comments.fixed", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7db973d06f90784ecd5ac3aaffd8e3762e69765f/tests%2Fui%2Ftabs_in_doc_comments.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7db973d06f90784ecd5ac3aaffd8e3762e69765f/tests%2Fui%2Ftabs_in_doc_comments.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftabs_in_doc_comments.fixed?ref=7db973d06f90784ecd5ac3aaffd8e3762e69765f", "patch": "@@ -0,0 +1,22 @@\n+// run-rustfix\n+\n+#![warn(clippy::tabs_in_doc_comments)]\n+#[allow(dead_code)]\n+\n+///\n+/// Struct to hold two strings:\n+///     - first        one\n+///     - second    one\n+pub struct DoubleString {\n+    ///\n+    ///     - First String:\n+    ///         - needs to be inside here\n+    first_string: String,\n+    ///\n+    ///     - Second String:\n+    ///         - needs to be inside here\n+    second_string: String,\n+}\n+\n+/// This is main\n+fn main() {}"}, {"sha": "9db3416e6596409c385bf20c1a40e746a24b1b01", "filename": "tests/ui/tabs_in_doc_comments.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7db973d06f90784ecd5ac3aaffd8e3762e69765f/tests%2Fui%2Ftabs_in_doc_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db973d06f90784ecd5ac3aaffd8e3762e69765f/tests%2Fui%2Ftabs_in_doc_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftabs_in_doc_comments.rs?ref=7db973d06f90784ecd5ac3aaffd8e3762e69765f", "patch": "@@ -0,0 +1,22 @@\n+// run-rustfix\n+\n+#![warn(clippy::tabs_in_doc_comments)]\n+#[allow(dead_code)]\n+\n+///\n+/// Struct to hold two strings:\n+/// \t- first\t\tone\n+/// \t- second\tone\n+pub struct DoubleString {\n+    ///\n+    /// \t- First String:\n+    /// \t\t- needs to be inside here\n+    first_string: String,\n+    ///\n+    /// \t- Second String:\n+    /// \t\t- needs to be inside here\n+    second_string: String,\n+}\n+\n+/// This is main\n+fn main() {}"}, {"sha": "355f2e805796436a09d4900cb596ed3848926bc7", "filename": "tests/ui/tabs_in_doc_comments.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/7db973d06f90784ecd5ac3aaffd8e3762e69765f/tests%2Fui%2Ftabs_in_doc_comments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7db973d06f90784ecd5ac3aaffd8e3762e69765f/tests%2Fui%2Ftabs_in_doc_comments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftabs_in_doc_comments.stderr?ref=7db973d06f90784ecd5ac3aaffd8e3762e69765f", "patch": "@@ -0,0 +1,52 @@\n+error: using tabs in doc comments is not recommended\n+  --> $DIR/tabs_in_doc_comments.rs:12:9\n+   |\n+LL |     ///     - First String:\n+   |         ^^^^ help: consider using four spaces per tab\n+   |\n+   = note: `-D clippy::tabs-in-doc-comments` implied by `-D warnings`\n+\n+error: using tabs in doc comments is not recommended\n+  --> $DIR/tabs_in_doc_comments.rs:13:9\n+   |\n+LL |     ///         - needs to be inside here\n+   |         ^^^^^^^^ help: consider using four spaces per tab\n+\n+error: using tabs in doc comments is not recommended\n+  --> $DIR/tabs_in_doc_comments.rs:16:9\n+   |\n+LL |     ///     - Second String:\n+   |         ^^^^ help: consider using four spaces per tab\n+\n+error: using tabs in doc comments is not recommended\n+  --> $DIR/tabs_in_doc_comments.rs:17:9\n+   |\n+LL |     ///         - needs to be inside here\n+   |         ^^^^^^^^ help: consider using four spaces per tab\n+\n+error: using tabs in doc comments is not recommended\n+  --> $DIR/tabs_in_doc_comments.rs:8:5\n+   |\n+LL | ///     - first        one\n+   |     ^^^^ help: consider using four spaces per tab\n+\n+error: using tabs in doc comments is not recommended\n+  --> $DIR/tabs_in_doc_comments.rs:8:13\n+   |\n+LL | ///     - first        one\n+   |                ^^^^^^^^ help: consider using four spaces per tab\n+\n+error: using tabs in doc comments is not recommended\n+  --> $DIR/tabs_in_doc_comments.rs:9:5\n+   |\n+LL | ///     - second    one\n+   |     ^^^^ help: consider using four spaces per tab\n+\n+error: using tabs in doc comments is not recommended\n+  --> $DIR/tabs_in_doc_comments.rs:9:14\n+   |\n+LL | ///     - second    one\n+   |                 ^^^^ help: consider using four spaces per tab\n+\n+error: aborting due to 8 previous errors\n+"}]}