{"sha": "600d9602610d1e6a79f98a2a07a660e945e3d22a", "node_id": "C_kwDOAAsO6NoAKDYwMGQ5NjAyNjEwZDFlNmE3OWY5OGEyYTA3YTY2MGU5NDVlM2QyMmE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-05-10T11:24:39Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-05-10T12:23:32Z"}, "message": "even tighter checks for layouts on immediate field projections", "tree": {"sha": "cfb4c984363d0fe2e6d927aa6726e3797204c678", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfb4c984363d0fe2e6d927aa6726e3797204c678"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/600d9602610d1e6a79f98a2a07a660e945e3d22a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/600d9602610d1e6a79f98a2a07a660e945e3d22a", "html_url": "https://github.com/rust-lang/rust/commit/600d9602610d1e6a79f98a2a07a660e945e3d22a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/600d9602610d1e6a79f98a2a07a660e945e3d22a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79c169d5cfab584ac3f9b5c3264d876c9f95db71", "url": "https://api.github.com/repos/rust-lang/rust/commits/79c169d5cfab584ac3f9b5c3264d876c9f95db71", "html_url": "https://github.com/rust-lang/rust/commit/79c169d5cfab584ac3f9b5c3264d876c9f95db71"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "1b32d8873678544c25ff6b08ce644f2520511d73", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/600d9602610d1e6a79f98a2a07a660e945e3d22a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600d9602610d1e6a79f98a2a07a660e945e3d22a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=600d9602610d1e6a79f98a2a07a660e945e3d22a", "patch": "@@ -398,22 +398,27 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         };\n \n         let field_layout = base.layout.field(self, field);\n-        if field_layout.is_zst() {\n-            let immediate = Scalar::ZST.into();\n-            return Ok(OpTy { op: Operand::Immediate(immediate), layout: field_layout });\n-        }\n-\n         let offset = base.layout.fields.offset(field);\n         // This makes several assumptions about what layouts we will encounter; we match what\n         // codegen does as good as we can (see `extract_field` in `rustc_codegen_ssa/src/mir/operand.rs`).\n-        let field_val = match (*base, base.layout.abi) {\n+        let field_val: Immediate<_> = match (*base, base.layout.abi) {\n+            // the field contains no information\n+            _ if field_layout.is_zst() => {\n+                Scalar::ZST.into()\n+            }\n             // the field covers the entire type\n             _ if field_layout.size == base.layout.size => {\n+                assert!(match (base.layout.abi, field_layout.abi) {\n+                    (Abi::Scalar(..), Abi::Scalar(..)) => true,\n+                    (Abi::ScalarPair(..), Abi::ScalarPair(..)) => true,\n+                    _ => false,\n+                });\n                 assert!(offset.bytes() == 0);\n                 *base\n             }\n             // extract fields from types with `ScalarPair` ABI\n             (Immediate::ScalarPair(a_val, b_val), Abi::ScalarPair(a, b)) => {\n+                assert!(matches!(field_layout.abi, Abi::Scalar(..)));\n                 Immediate::from(if offset.bytes() == 0 {\n                     assert_eq!(field_layout.size, a.size(self));\n                     a_val"}]}