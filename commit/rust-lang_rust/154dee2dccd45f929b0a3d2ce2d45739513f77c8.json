{"sha": "154dee2dccd45f929b0a3d2ce2d45739513f77c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1NGRlZTJkY2NkNDVmOTI5YjBhM2QyY2UyZDQ1NzM5NTEzZjc3Yzg=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@commure.com", "date": "2018-07-20T01:53:26Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@commure.com", "date": "2018-07-20T06:18:07Z"}, "message": "rework println", "tree": {"sha": "4170231db8b43d3c03f074eb1521ec7f010c2720", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4170231db8b43d3c03f074eb1521ec7f010c2720"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/154dee2dccd45f929b0a3d2ce2d45739513f77c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/154dee2dccd45f929b0a3d2ce2d45739513f77c8", "html_url": "https://github.com/rust-lang/rust/commit/154dee2dccd45f929b0a3d2ce2d45739513f77c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/154dee2dccd45f929b0a3d2ce2d45739513f77c8/comments", "author": null, "committer": null, "parents": [{"sha": "a47653214f8f8561196acf25b8898e7148f1c052", "url": "https://api.github.com/repos/rust-lang/rust/commits/a47653214f8f8561196acf25b8898e7148f1c052", "html_url": "https://github.com/rust-lang/rust/commit/a47653214f8f8561196acf25b8898e7148f1c052"}], "stats": {"total": 72, "additions": 63, "deletions": 9}, "files": [{"sha": "ee590bc3b5ecf123dec3345b116e8e46912f0d36", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/154dee2dccd45f929b0a3d2ce2d45739513f77c8/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154dee2dccd45f929b0a3d2ce2d45739513f77c8/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=154dee2dccd45f929b0a3d2ce2d45739513f77c8", "patch": "@@ -273,7 +273,11 @@ impl<'a> Parser<'a> {\n             }\n         } else {\n             let msg = format!(\"expected `{:?}` but string was terminated\", c);\n-            let pos = self.input.len() + 1; // point at closing `\"`\n+            // point at closing `\"`, unless the last char is `\\n` to account for `println`\n+            let pos = match self.input.chars().last() {\n+                Some('\\n') => self.input.len(),\n+                _ => self.input.len() + 1,\n+            };\n             if c == '}' {\n                 self.err_with_note(msg,\n                                    format!(\"expected `{:?}`\", c),"}, {"sha": "a4bcf7fd26c5c162bf6ec2f31157ec0339bd6bd3", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/154dee2dccd45f929b0a3d2ce2d45739513f77c8/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154dee2dccd45f929b0a3d2ce2d45739513f77c8/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=154dee2dccd45f929b0a3d2ce2d45739513f77c8", "patch": "@@ -153,9 +153,17 @@ macro_rules! print {\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow_internal_unstable]\n macro_rules! println {\n     () => (print!(\"\\n\"));\n-    ($($arg:tt)*) => (print!(\"{}\\n\", format_args!($($arg)*)));\n+    ($($arg:tt)*) => ({\n+        #[cfg(not(stage0))] {\n+            ($crate::io::_print(format_args_nl!($($arg)*)));\n+        }\n+        #[cfg(stage0)] {\n+            print!(\"{}\\n\", format_args!($($arg)*))\n+        }\n+    })\n }\n \n /// Macro for printing to the standard error.\n@@ -211,7 +219,8 @@ macro_rules! eprint {\n #[stable(feature = \"eprint\", since = \"1.19.0\")]\n macro_rules! eprintln {\n     () => (eprint!(\"\\n\"));\n-    ($($arg:tt)*) => (eprint!(\"{}\\n\", format_args!($($arg)*)));\n+    ($fmt:expr) => (eprint!(concat!($fmt, \"\\n\")));\n+    ($fmt:expr, $($arg:tt)*) => (eprint!(concat!($fmt, \"\\n\"), $($arg)*));\n }\n \n #[macro_export]\n@@ -397,6 +406,19 @@ pub mod builtin {\n         ($fmt:expr, $($args:tt)*) => ({ /* compiler built-in */ });\n     }\n \n+    /// Internal version of [`format_args`].\n+    ///\n+    /// This macro differs from [`format_args`] in that it appends a newline to the format string\n+    /// and nothing more. It is perma-unstable.\n+    ///\n+    /// [`format_args`]: ../std/macro.format_args.html\n+    #[doc(hidden)]\n+    #[unstable(feature = \"println_format_args\", issue=\"0\")]\n+    #[macro_export]\n+    macro_rules! format_args_nl {\n+        ($fmt:expr) => ({ /* compiler built-in */ });\n+        ($fmt:expr, $($args:tt)*) => ({ /* compiler built-in */ });\n+    }\n     /// Inspect an environment variable at compile time.\n     ///\n     /// This macro will expand to the value of the named environment variable at"}, {"sha": "d3e5adf68350588e58047092785fc1fae69c5bb5", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/154dee2dccd45f929b0a3d2ce2d45739513f77c8/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154dee2dccd45f929b0a3d2ce2d45739513f77c8/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=154dee2dccd45f929b0a3d2ce2d45739513f77c8", "patch": "@@ -683,7 +683,20 @@ pub fn expand_format_args<'cx>(ecx: &'cx mut ExtCtxt,\n     sp = sp.apply_mark(ecx.current_expansion.mark);\n     match parse_args(ecx, sp, tts) {\n         Some((efmt, args, names)) => {\n-            MacEager::expr(expand_preparsed_format_args(ecx, sp, efmt, args, names))\n+            MacEager::expr(expand_preparsed_format_args(ecx, sp, efmt, args, names, false))\n+        }\n+        None => DummyResult::expr(sp),\n+    }\n+}\n+\n+pub fn expand_format_args_nl<'cx>(ecx: &'cx mut ExtCtxt,\n+                                  mut sp: Span,\n+                                  tts: &[tokenstream::TokenTree])\n+                                  -> Box<dyn base::MacResult + 'cx> {\n+    sp = sp.apply_mark(ecx.current_expansion.mark);\n+    match parse_args(ecx, sp, tts) {\n+        Some((efmt, args, names)) => {\n+            MacEager::expr(expand_preparsed_format_args(ecx, sp, efmt, args, names, true))\n         }\n         None => DummyResult::expr(sp),\n     }\n@@ -695,7 +708,8 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n                                     sp: Span,\n                                     efmt: P<ast::Expr>,\n                                     args: Vec<P<ast::Expr>>,\n-                                    names: HashMap<String, usize>)\n+                                    names: HashMap<String, usize>,\n+                                    append_newline: bool)\n                                     -> P<ast::Expr> {\n     // NOTE: this verbose way of initializing `Vec<Vec<ArgumentType>>` is because\n     // `ArgumentType` does not derive `Clone`.\n@@ -706,6 +720,10 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n     let msg = \"format argument must be a string literal\";\n     let fmt_sp = efmt.span;\n     let fmt = match expr_to_spanned_string(ecx, efmt, msg) {\n+        Ok(mut fmt) if append_newline => {\n+            fmt.node.0 = Symbol::intern(&format!(\"{}\\n\", fmt.node.0));\n+            fmt\n+        }\n         Ok(fmt) => fmt,\n         Err(mut err) => {\n             let sugg_fmt = match args.len() {"}, {"sha": "ff76e788b3c291311b24afa70ca9267126a85d55", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/154dee2dccd45f929b0a3d2ce2d45739513f77c8/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154dee2dccd45f929b0a3d2ce2d45739513f77c8/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=154dee2dccd45f929b0a3d2ce2d45739513f77c8", "patch": "@@ -139,6 +139,16 @@ pub fn register_builtins(resolver: &mut dyn syntax::ext::base::Resolver,\n                 unstable_feature: None,\n                 edition: hygiene::default_edition(),\n             });\n+    register(Symbol::intern(\"format_args_nl\"),\n+             NormalTT {\n+                 expander: Box::new(format::expand_format_args_nl),\n+                 def_info: None,\n+                 allow_internal_unstable: true,\n+                 allow_internal_unsafe: false,\n+                 local_inner_macros: false,\n+                 unstable_feature: None,\n+                 edition: hygiene::default_edition(),\n+             });\n \n     for (name, ext) in user_exts {\n         register(name, ext);"}, {"sha": "2a30d9837517e2dcd42f805328e4b8683246afb7", "filename": "src/test/ui/macros/trace-macro.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/154dee2dccd45f929b0a3d2ce2d45739513f77c8/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/154dee2dccd45f929b0a3d2ce2d45739513f77c8/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.stderr?ref=154dee2dccd45f929b0a3d2ce2d45739513f77c8", "patch": "@@ -5,8 +5,8 @@ LL |     println!(\"Hello, World!\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expanding `println! { \"Hello, World!\" }`\n-   = note: to `print ! ( \"{}/n\" , format_args ! ( \"Hello, World!\" ) )`\n-   = note: expanding `print! { \"{}/n\" , format_args ! ( \"Hello, World!\" ) }`\n-   = note: to `$crate :: io :: _print (\n-           format_args ! ( \"{}/n\" , format_args ! ( \"Hello, World!\" ) ) )`\n+   = note: to `{\n+           # [ cfg ( not ( stage0 ) ) ] {\n+           ( $crate :: io :: _print ( format_args_nl ! ( \"Hello, World!\" ) ) ) ; } # [\n+           cfg ( stage0 ) ] { print ! ( \"{}/n\" , format_args ! ( \"Hello, World!\" ) ) } }`\n "}]}