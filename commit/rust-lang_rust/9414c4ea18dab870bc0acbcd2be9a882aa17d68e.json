{"sha": "9414c4ea18dab870bc0acbcd2be9a882aa17d68e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0MTRjNGVhMThkYWI4NzBiYzBhY2JjZDJiZTlhODgyYWExN2Q2OGU=", "commit": {"author": {"name": "arcnmx", "email": "arcnmx@users.noreply.github.com", "date": "2016-02-23T06:36:50Z"}, "committer": {"name": "arcnmx", "email": "arcnmx@users.noreply.github.com", "date": "2016-02-23T15:12:39Z"}, "message": "Link cstr from_bytes to tracking issue", "tree": {"sha": "b16f62d645c0e2ae50f6e1b302e924618cfdd1d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b16f62d645c0e2ae50f6e1b302e924618cfdd1d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9414c4ea18dab870bc0acbcd2be9a882aa17d68e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9414c4ea18dab870bc0acbcd2be9a882aa17d68e", "html_url": "https://github.com/rust-lang/rust/commit/9414c4ea18dab870bc0acbcd2be9a882aa17d68e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9414c4ea18dab870bc0acbcd2be9a882aa17d68e/comments", "author": {"login": "arcnmx", "id": 13426784, "node_id": "MDQ6VXNlcjEzNDI2Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/13426784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arcnmx", "html_url": "https://github.com/arcnmx", "followers_url": "https://api.github.com/users/arcnmx/followers", "following_url": "https://api.github.com/users/arcnmx/following{/other_user}", "gists_url": "https://api.github.com/users/arcnmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/arcnmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arcnmx/subscriptions", "organizations_url": "https://api.github.com/users/arcnmx/orgs", "repos_url": "https://api.github.com/users/arcnmx/repos", "events_url": "https://api.github.com/users/arcnmx/events{/privacy}", "received_events_url": "https://api.github.com/users/arcnmx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arcnmx", "id": 13426784, "node_id": "MDQ6VXNlcjEzNDI2Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/13426784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arcnmx", "html_url": "https://github.com/arcnmx", "followers_url": "https://api.github.com/users/arcnmx/followers", "following_url": "https://api.github.com/users/arcnmx/following{/other_user}", "gists_url": "https://api.github.com/users/arcnmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/arcnmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arcnmx/subscriptions", "organizations_url": "https://api.github.com/users/arcnmx/orgs", "repos_url": "https://api.github.com/users/arcnmx/repos", "events_url": "https://api.github.com/users/arcnmx/events{/privacy}", "received_events_url": "https://api.github.com/users/arcnmx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16f218b6006faa752925ca5934372c34f1eb2953", "url": "https://api.github.com/repos/rust-lang/rust/commits/16f218b6006faa752925ca5934372c34f1eb2953", "html_url": "https://github.com/rust-lang/rust/commit/16f218b6006faa752925ca5934372c34f1eb2953"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "f3561622fa377ad38443343e5e4aee674c54424c", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9414c4ea18dab870bc0acbcd2be9a882aa17d68e/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9414c4ea18dab870bc0acbcd2be9a882aa17d68e/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=9414c4ea18dab870bc0acbcd2be9a882aa17d68e", "patch": "@@ -439,7 +439,7 @@ impl CStr {\n     /// Creates a C string wrapper from a byte slice.\n     ///\n     /// This function will cast the provided `bytes` to a `CStr` wrapper after\n-    /// ensuring that it is null terminated but does not contain any interior\n+    /// ensuring that it is null terminated and does not contain any interior\n     /// nul bytes.\n     ///\n     /// # Examples\n@@ -453,8 +453,8 @@ impl CStr {\n     /// assert!(cstr.is_some());\n     /// # }\n     /// ```\n-    #[unstable(feature = \"cstr_from_bytes\", reason = \"recently added\", issue = \"0\")]\n-    pub fn from_bytes_with_nul<'a>(bytes: &'a [u8]) -> Option<&'a CStr> {\n+    #[unstable(feature = \"cstr_from_bytes\", reason = \"recently added\", issue = \"31190\")]\n+    pub fn from_bytes_with_nul(bytes: &[u8]) -> Option<&CStr> {\n         if bytes.is_empty() || memchr::memchr(0, &bytes) != Some(bytes.len() - 1) {\n             None\n         } else {\n@@ -482,8 +482,8 @@ impl CStr {\n     /// }\n     /// # }\n     /// ```\n-    #[unstable(feature = \"cstr_from_bytes\", reason = \"recently added\", issue = \"0\")]\n-    pub unsafe fn from_bytes_with_nul_unchecked<'a>(bytes: &'a [u8]) -> &'a CStr {\n+    #[unstable(feature = \"cstr_from_bytes\", reason = \"recently added\", issue = \"31190\")]\n+    pub unsafe fn from_bytes_with_nul_unchecked(bytes: &[u8]) -> &CStr {\n         mem::transmute(bytes)\n     }\n "}]}