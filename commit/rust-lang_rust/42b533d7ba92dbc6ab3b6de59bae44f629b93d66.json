{"sha": "42b533d7ba92dbc6ab3b6de59bae44f629b93d66", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyYjUzM2Q3YmE5MmRiYzZhYjNiNmRlNTliYWU0NGY2MjliOTNkNjY=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-20T22:30:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-20T22:30:57Z"}, "message": "Rollup merge of #71285 - ljedrz:mir_inline_span_for_optimized_mir, r=ecstatic-morse\n\nMIR: use HirId instead of NodeId to avoid cycles while inlining\n\nI wanted to see if I could limit the number of uses of `NodeId` when `HirId` is available and I saw that some of the MIR `Inliner` code could use `Span` instead of `NodeId`, not unlike in https://github.com/rust-lang/rust/pull/71197.\n\n~If I'm understanding the reason for not calling `optimized_mir` in incremental builds here correctly, this change could also allow us to do so.~\n\nThis change could affect performance, so if this approach makes sense, a perf run is probably a good idea.", "tree": {"sha": "a7033bb1a03396644459b745b116166d5fad7945", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7033bb1a03396644459b745b116166d5fad7945"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42b533d7ba92dbc6ab3b6de59bae44f629b93d66", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeniKhCRBK7hj4Ov3rIwAAdHIIAGQjqHZwGp44MII5gDBgeKEG\nMgK9SjND+hj3ouPO2JUWgYH5076CMsUbDnXX4SFBtGL5F+evHLqj0yt3SW7vb2g5\n26+wM6OW4wMIqQ84mbuQHmI8JjpDnxJ/on25Mb+wn0OA3b6xazqLMVRtqYkC84cO\na8giORiqcJlz5JFMolO4PUGO3NHp8l2tctzDUMQRI0PWmaH/GRPFkJbg2l+X6xba\neHe4KR2RLshCsC05Jn9+bjHc9mmCVzyZ1uygF4Azefz2wWJpgp3aKBQhYeJO3siF\nCb7wUbuYETmUJmhoRDpfrPhdZEvBVYgYXjir02ci1E3u3VxaMf6yMuuoUYUXTrs=\n=OoYT\n-----END PGP SIGNATURE-----\n", "payload": "tree a7033bb1a03396644459b745b116166d5fad7945\nparent e3a514c44a7a896b210dcc59635452229703b9e6\nparent 3c455fe8e1712af5996232053cd6ea3ea743a487\nauthor Dylan DPC <dylan.dpc@gmail.com> 1587421857 +0200\ncommitter GitHub <noreply@github.com> 1587421857 +0200\n\nRollup merge of #71285 - ljedrz:mir_inline_span_for_optimized_mir, r=ecstatic-morse\n\nMIR: use HirId instead of NodeId to avoid cycles while inlining\n\nI wanted to see if I could limit the number of uses of `NodeId` when `HirId` is available and I saw that some of the MIR `Inliner` code could use `Span` instead of `NodeId`, not unlike in https://github.com/rust-lang/rust/pull/71197.\n\n~If I'm understanding the reason for not calling `optimized_mir` in incremental builds here correctly, this change could also allow us to do so.~\n\nThis change could affect performance, so if this approach makes sense, a perf run is probably a good idea.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42b533d7ba92dbc6ab3b6de59bae44f629b93d66", "html_url": "https://github.com/rust-lang/rust/commit/42b533d7ba92dbc6ab3b6de59bae44f629b93d66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42b533d7ba92dbc6ab3b6de59bae44f629b93d66/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3a514c44a7a896b210dcc59635452229703b9e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3a514c44a7a896b210dcc59635452229703b9e6", "html_url": "https://github.com/rust-lang/rust/commit/e3a514c44a7a896b210dcc59635452229703b9e6"}, {"sha": "3c455fe8e1712af5996232053cd6ea3ea743a487", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c455fe8e1712af5996232053cd6ea3ea743a487", "html_url": "https://github.com/rust-lang/rust/commit/3c455fe8e1712af5996232053cd6ea3ea743a487"}], "stats": {"total": 12, "additions": 5, "deletions": 7}, "files": [{"sha": "173c2a3f1d8641b2201c05aa9d7f5f57b8799d81", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/42b533d7ba92dbc6ab3b6de59bae44f629b93d66/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42b533d7ba92dbc6ab3b6de59bae44f629b93d66/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=42b533d7ba92dbc6ab3b6de59bae44f629b93d66", "patch": "@@ -94,17 +94,15 @@ impl Inliner<'tcx> {\n                     continue;\n                 }\n \n-                let self_node_id = self.tcx.hir().as_local_node_id(self.source.def_id()).unwrap();\n-                let callee_node_id = self.tcx.hir().as_local_node_id(callsite.callee);\n+                let callee_hir_id = self.tcx.hir().as_local_hir_id(callsite.callee);\n \n-                let callee_body = if let Some(callee_node_id) = callee_node_id {\n+                let callee_body = if let Some(callee_hir_id) = callee_hir_id {\n+                    let self_hir_id = self.tcx.hir().as_local_hir_id(self.source.def_id()).unwrap();\n                     // Avoid a cycle here by only using `optimized_mir` only if we have\n-                    // a lower node id than the callee. This ensures that the callee will\n+                    // a lower `HirId` than the callee. This ensures that the callee will\n                     // not inline us. This trick only works without incremental compilation.\n                     // So don't do it if that is enabled.\n-                    if !self.tcx.dep_graph.is_fully_enabled()\n-                        && self_node_id.as_u32() < callee_node_id.as_u32()\n-                    {\n+                    if !self.tcx.dep_graph.is_fully_enabled() && self_hir_id < callee_hir_id {\n                         self.tcx.optimized_mir(callsite.callee)\n                     } else {\n                         continue;"}]}