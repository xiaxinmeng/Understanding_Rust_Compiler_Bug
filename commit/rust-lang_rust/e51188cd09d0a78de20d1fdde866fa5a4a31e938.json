{"sha": "e51188cd09d0a78de20d1fdde866fa5a4a31e938", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1MTE4OGNkMDlkMGE3OGRlMjBkMWZkZGU4NjZmYTVhNGEzMWU5Mzg=", "commit": {"author": {"name": "Aramis Razzaghipour", "email": "aramisnoah@gmail.com", "date": "2021-05-24T04:48:42Z"}, "committer": {"name": "Aramis Razzaghipour", "email": "aramisnoah@gmail.com", "date": "2021-05-24T04:54:48Z"}, "message": "Rename \u2018foreign\u2019 semantic token modifier to \u2018library\u2019", "tree": {"sha": "1c94f821b735db86359aa97f8843f68f164269cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c94f821b735db86359aa97f8843f68f164269cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e51188cd09d0a78de20d1fdde866fa5a4a31e938", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEqQsXYYwP2wJc1ykb94j36ZATYAMFAmCrMZgACgkQ94j36ZAT\nYAMTyQ//bNTm7nLePv/csn6hMfD+A0pihiF9yJPsTEZrWv+icOBlcQMIGQ++WQxI\nF2coAf9L72NjpezwfShzHVV2vO1lmHOYHPVJWaKl9vT5XephB/jQQt8SFl+D3QHk\nKLS2mTkjgSZpigoybv28LsWCCgS0ie4Zc5GrfQbG1EqdampkQt1fxuTx8zjW2GIq\nvCRg1v9PJVcmjfZR186PhprlYxF+O4Zxp9HU6K3h3kwZVFOQat4LvBJzC53V3Wv/\nUCWlh19v7RN2FZGOf5LVo+Ven5HZE3kLj89/N2/SyrXtWEgsJEnH77AsaJKB21Ds\nsoNBJJgRmHp7L+u/tP6nCpZ23Y8ynYahWND++4Ks8L3C0MqdvXCbDRSCOBS1JfA2\nVQoG/YSobMWR4rMgiL4lq980JAuhbyIWA7vx917mrMGaBrtPIni12Z/7bsTvkRgn\niYgoVHLjkyUURsrLA1jwFlloqZggztukszwb9E60zqrUCDEmWPl7zRbdRhWI6qWS\nYa58rDcDajzmG/LjnvhzUcmKF2duh2kaG8RYMPvLH7Igtbuy9kmUsoEIgeCXo/ac\nocorSr6S4g0uAYNHj3jlwUWozLJ2jNtLGw/GjRKdkPheoYRF+PIl744Htj8xz0SU\n94zcBOh7IM8seXEhMPSfnrlZWvJsB2765/m1F/LkzwAWZ91hX/Y=\n=E1H5\n-----END PGP SIGNATURE-----", "payload": "tree 1c94f821b735db86359aa97f8843f68f164269cd\nparent fa0d0bfb7fc402baf00ea6c6a0d87fb22157a3fb\nauthor Aramis Razzaghipour <aramisnoah@gmail.com> 1621831722 +1000\ncommitter Aramis Razzaghipour <aramisnoah@gmail.com> 1621832088 +1000\n\nRename \u2018foreign\u2019 semantic token modifier to \u2018library\u2019\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e51188cd09d0a78de20d1fdde866fa5a4a31e938", "html_url": "https://github.com/rust-lang/rust/commit/e51188cd09d0a78de20d1fdde866fa5a4a31e938", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e51188cd09d0a78de20d1fdde866fa5a4a31e938/comments", "author": {"login": "lunacookies", "id": 31783266, "node_id": "MDQ6VXNlcjMxNzgzMjY2", "avatar_url": "https://avatars.githubusercontent.com/u/31783266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lunacookies", "html_url": "https://github.com/lunacookies", "followers_url": "https://api.github.com/users/lunacookies/followers", "following_url": "https://api.github.com/users/lunacookies/following{/other_user}", "gists_url": "https://api.github.com/users/lunacookies/gists{/gist_id}", "starred_url": "https://api.github.com/users/lunacookies/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lunacookies/subscriptions", "organizations_url": "https://api.github.com/users/lunacookies/orgs", "repos_url": "https://api.github.com/users/lunacookies/repos", "events_url": "https://api.github.com/users/lunacookies/events{/privacy}", "received_events_url": "https://api.github.com/users/lunacookies/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lunacookies", "id": 31783266, "node_id": "MDQ6VXNlcjMxNzgzMjY2", "avatar_url": "https://avatars.githubusercontent.com/u/31783266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lunacookies", "html_url": "https://github.com/lunacookies", "followers_url": "https://api.github.com/users/lunacookies/followers", "following_url": "https://api.github.com/users/lunacookies/following{/other_user}", "gists_url": "https://api.github.com/users/lunacookies/gists{/gist_id}", "starred_url": "https://api.github.com/users/lunacookies/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lunacookies/subscriptions", "organizations_url": "https://api.github.com/users/lunacookies/orgs", "repos_url": "https://api.github.com/users/lunacookies/repos", "events_url": "https://api.github.com/users/lunacookies/events{/privacy}", "received_events_url": "https://api.github.com/users/lunacookies/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa0d0bfb7fc402baf00ea6c6a0d87fb22157a3fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa0d0bfb7fc402baf00ea6c6a0d87fb22157a3fb", "html_url": "https://github.com/rust-lang/rust/commit/fa0d0bfb7fc402baf00ea6c6a0d87fb22157a3fb"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "f070601fd849a8955f0495fa0c0d1144a540fef5", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e51188cd09d0a78de20d1fdde866fa5a4a31e938/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e51188cd09d0a78de20d1fdde866fa5a4a31e938/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=e51188cd09d0a78de20d1fdde866fa5a4a31e938", "patch": "@@ -288,7 +288,7 @@ fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition)\n             let mut h = Highlight::new(HlTag::Symbol(SymbolKind::Macro));\n \n             if m.module(db).map(hir::Module::krate) != krate {\n-                h |= HlMod::Foreign;\n+                h |= HlMod::Library;\n             }\n \n             return h;\n@@ -297,7 +297,7 @@ fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition)\n             let mut h = Highlight::new(HlTag::Symbol(SymbolKind::Field));\n \n             if Some(field.parent_def(db).module(db).krate()) != krate {\n-                h |= HlMod::Foreign;\n+                h |= HlMod::Library;\n             }\n \n             return h;\n@@ -307,7 +307,7 @@ fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition)\n                 let mut h = Highlight::new(HlTag::Symbol(SymbolKind::Module));\n \n                 if Some(module.krate()) != krate {\n-                    h |= HlMod::Foreign;\n+                    h |= HlMod::Library;\n                 }\n \n                 return h;\n@@ -344,7 +344,7 @@ fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition)\n                     h |= HlMod::Async;\n                 }\n                 if Some(func.module(db).krate()) != krate {\n-                    h |= HlMod::Foreign;\n+                    h |= HlMod::Library;\n                 }\n                 return h;\n             }\n@@ -357,7 +357,7 @@ fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition)\n                 let mut h = Highlight::new(h);\n \n                 if Some(adt.module(db).krate()) != krate {\n-                    h |= HlMod::Foreign;\n+                    h |= HlMod::Library;\n                 }\n \n                 return h;\n@@ -366,7 +366,7 @@ fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition)\n                 let mut h = Highlight::new(HlTag::Symbol(SymbolKind::Variant));\n \n                 if Some(variant.module(db).krate()) != krate {\n-                    h |= HlMod::Foreign;\n+                    h |= HlMod::Library;\n                 }\n \n                 return h;\n@@ -389,7 +389,7 @@ fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition)\n                 }\n \n                 if Some(konst.module(db).krate()) != krate {\n-                    h |= HlMod::Foreign;\n+                    h |= HlMod::Library;\n                 }\n \n                 return h;\n@@ -402,7 +402,7 @@ fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition)\n                 }\n \n                 if Some(trait_.module(db).krate()) != krate {\n-                    h |= HlMod::Foreign;\n+                    h |= HlMod::Library;\n                 }\n \n                 return h;\n@@ -425,7 +425,7 @@ fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition)\n                 }\n \n                 if Some(type_.module(db).krate()) != krate {\n-                    h |= HlMod::Foreign;\n+                    h |= HlMod::Library;\n                 }\n \n                 return h;\n@@ -440,7 +440,7 @@ fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition)\n                 }\n \n                 if Some(s.module(db).krate()) != krate {\n-                    h |= HlMod::Foreign;\n+                    h |= HlMod::Library;\n                 }\n \n                 return h;"}, {"sha": "e94f17cd98b4e0e1a7f95f4a557a3e524d6cbf33", "filename": "crates/ide/src/syntax_highlighting/tags.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e51188cd09d0a78de20d1fdde866fa5a4a31e938/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e51188cd09d0a78de20d1fdde866fa5a4a31e938/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs?ref=e51188cd09d0a78de20d1fdde866fa5a4a31e938", "patch": "@@ -68,7 +68,7 @@ pub enum HlMod {\n     /// Used with keywords like `async` and `await`.\n     Async,\n     /// Used for items from other crates.\n-    Foreign,\n+    Library,\n     // Keep this last!\n     /// Used for unsafe functions, unsafe traits, mutable statics, union accesses and unsafe operations.\n     Unsafe,\n@@ -191,7 +191,7 @@ impl HlMod {\n         HlMod::Static,\n         HlMod::Trait,\n         HlMod::Async,\n-        HlMod::Foreign,\n+        HlMod::Library,\n         HlMod::Unsafe,\n     ];\n \n@@ -210,7 +210,7 @@ impl HlMod {\n             HlMod::Static => \"static\",\n             HlMod::Trait => \"trait\",\n             HlMod::Async => \"async\",\n-            HlMod::Foreign => \"foreign\",\n+            HlMod::Library => \"library\",\n             HlMod::Unsafe => \"unsafe\",\n         }\n     }"}, {"sha": "055d2110901ac554b1f052789af28a4a8010490a", "filename": "crates/ide/src/syntax_highlighting/test_data/highlighting.html", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e51188cd09d0a78de20d1fdde866fa5a4a31e938/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/e51188cd09d0a78de20d1fdde866fa5a4a31e938/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html?ref=e51188cd09d0a78de20d1fdde866fa5a4a31e938", "patch": "@@ -251,14 +251,14 @@\n <span class=\"keyword\">impl</span> <span class=\"trait unsafe\">Dangerous</span> <span class=\"keyword\">for</span> <span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n <span class=\"keyword\">fn</span> <span class=\"function declaration\">use_foo_items</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n-    <span class=\"keyword\">let</span> <span class=\"variable declaration\">bob</span> <span class=\"operator\">=</span> <span class=\"module foreign\">foo</span><span class=\"operator\">::</span><span class=\"struct foreign\">Person</span> <span class=\"brace\">{</span>\n-        <span class=\"field foreign\">name</span><span class=\"colon\">:</span> <span class=\"string_literal\">\"Bob\"</span><span class=\"comma\">,</span>\n-        <span class=\"field foreign\">age</span><span class=\"colon\">:</span> <span class=\"module foreign\">foo</span><span class=\"operator\">::</span><span class=\"module foreign\">consts</span><span class=\"operator\">::</span><span class=\"constant foreign\">NUMBER</span><span class=\"comma\">,</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\">bob</span> <span class=\"operator\">=</span> <span class=\"module library\">foo</span><span class=\"operator\">::</span><span class=\"struct library\">Person</span> <span class=\"brace\">{</span>\n+        <span class=\"field library\">name</span><span class=\"colon\">:</span> <span class=\"string_literal\">\"Bob\"</span><span class=\"comma\">,</span>\n+        <span class=\"field library\">age</span><span class=\"colon\">:</span> <span class=\"module library\">foo</span><span class=\"operator\">::</span><span class=\"module library\">consts</span><span class=\"operator\">::</span><span class=\"constant library\">NUMBER</span><span class=\"comma\">,</span>\n     <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n \n-    <span class=\"keyword\">let</span> <span class=\"variable declaration\">control_flow</span> <span class=\"operator\">=</span> <span class=\"module foreign\">foo</span><span class=\"operator\">::</span><span class=\"function foreign\">identity</span><span class=\"parenthesis\">(</span><span class=\"module foreign\">foo</span><span class=\"operator\">::</span><span class=\"enum foreign\">ControlFlow</span><span class=\"operator\">::</span><span class=\"enum_variant foreign\">Continue</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\">control_flow</span> <span class=\"operator\">=</span> <span class=\"module library\">foo</span><span class=\"operator\">::</span><span class=\"function library\">identity</span><span class=\"parenthesis\">(</span><span class=\"module library\">foo</span><span class=\"operator\">::</span><span class=\"enum library\">ControlFlow</span><span class=\"operator\">::</span><span class=\"enum_variant library\">Continue</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n \n-    <span class=\"keyword control\">if</span> <span class=\"keyword\">let</span> <span class=\"module foreign\">foo</span><span class=\"operator\">::</span><span class=\"enum foreign\">ControlFlow</span><span class=\"operator\">::</span><span class=\"enum_variant foreign\">Die</span> <span class=\"operator\">=</span> <span class=\"variable\">control_flow</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword control\">if</span> <span class=\"keyword\">let</span> <span class=\"module library\">foo</span><span class=\"operator\">::</span><span class=\"enum library\">ControlFlow</span><span class=\"operator\">::</span><span class=\"enum_variant library\">Die</span> <span class=\"operator\">=</span> <span class=\"variable\">control_flow</span> <span class=\"brace\">{</span>\n         foo::<span class=\"macro\">die!</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"brace\">}</span>\n <span class=\"brace\">}</span>"}, {"sha": "6129af95fcd7706bcac7b1487fdafa60833ff0f2", "filename": "crates/rust-analyzer/src/semantic_tokens.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e51188cd09d0a78de20d1fdde866fa5a4a31e938/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e51188cd09d0a78de20d1fdde866fa5a4a31e938/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs?ref=e51188cd09d0a78de20d1fdde866fa5a4a31e938", "patch": "@@ -92,7 +92,7 @@ define_semantic_token_modifiers![\n     (MUTABLE, \"mutable\"),\n     (CONSUMING, \"consuming\"),\n     (ASYNC, \"async\"),\n-    (FOREIGN, \"foreign\"),\n+    (LIBRARY, \"library\"),\n     (UNSAFE, \"unsafe\"),\n     (ATTRIBUTE_MODIFIER, \"attribute\"),\n     (TRAIT_MODIFIER, \"trait\"),"}, {"sha": "af5152b9c5cae72223537d48936b2f39910fbe68", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e51188cd09d0a78de20d1fdde866fa5a4a31e938/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e51188cd09d0a78de20d1fdde866fa5a4a31e938/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=e51188cd09d0a78de20d1fdde866fa5a4a31e938", "patch": "@@ -504,7 +504,7 @@ fn semantic_token_type_and_modifiers(\n             HlMod::Mutable => semantic_tokens::MUTABLE,\n             HlMod::Consuming => semantic_tokens::CONSUMING,\n             HlMod::Async => semantic_tokens::ASYNC,\n-            HlMod::Foreign => semantic_tokens::FOREIGN,\n+            HlMod::Library => semantic_tokens::LIBRARY,\n             HlMod::Unsafe => semantic_tokens::UNSAFE,\n             HlMod::Callable => semantic_tokens::CALLABLE,\n             HlMod::Static => lsp_types::SemanticTokenModifier::STATIC,"}]}