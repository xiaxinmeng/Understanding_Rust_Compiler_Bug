{"sha": "6f1e1775d3586d0f82bd202de461e4de27a0fe1c", "node_id": "C_kwDOAAsO6NoAKDZmMWUxNzc1ZDM1ODZkMGY4MmJkMjAyZGU0NjFlNGRlMjdhMGZlMWM", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-01-14T17:40:16Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-01-14T17:40:16Z"}, "message": "Introduce SysrootTarget", "tree": {"sha": "22730df4d60a134209c73b30590e87794fb62208", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22730df4d60a134209c73b30590e87794fb62208"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f1e1775d3586d0f82bd202de461e4de27a0fe1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f1e1775d3586d0f82bd202de461e4de27a0fe1c", "html_url": "https://github.com/rust-lang/rust/commit/6f1e1775d3586d0f82bd202de461e4de27a0fe1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f1e1775d3586d0f82bd202de461e4de27a0fe1c/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c950f2265ef898ff760219d16298bd96fecb7155", "url": "https://api.github.com/repos/rust-lang/rust/commits/c950f2265ef898ff760219d16298bd96fecb7155", "html_url": "https://github.com/rust-lang/rust/commit/c950f2265ef898ff760219d16298bd96fecb7155"}], "stats": {"total": 69, "additions": 46, "deletions": 23}, "files": [{"sha": "218db67a0ecedd970079150ed1e4562c87a8d687", "filename": "build_system/build_sysroot.rs", "status": "modified", "additions": 46, "deletions": 23, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e1775d3586d0f82bd202de461e4de27a0fe1c/build_system%2Fbuild_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e1775d3586d0f82bd202de461e4de27a0fe1c/build_system%2Fbuild_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_sysroot.rs?ref=6f1e1775d3586d0f82bd202de461e4de27a0fe1c", "patch": "@@ -1,5 +1,5 @@\n use std::fs;\n-use std::path::Path;\n+use std::path::{Path, PathBuf};\n use std::process::{self, Command};\n \n use super::path::{Dirs, RelPath};\n@@ -56,35 +56,40 @@ pub(crate) fn build_sysroot(\n         spawn_and_wait(build_cargo_wrapper_cmd);\n     }\n \n-    let default_sysroot = super::rustc_info::get_default_sysroot(&bootstrap_host_compiler.rustc);\n-\n-    let host_rustlib_lib =\n-        RUSTLIB_DIR.to_path(dirs).join(&bootstrap_host_compiler.triple).join(\"lib\");\n-    let target_rustlib_lib = RUSTLIB_DIR.to_path(dirs).join(&target_triple).join(\"lib\");\n-    fs::create_dir_all(&host_rustlib_lib).unwrap();\n-    fs::create_dir_all(&target_rustlib_lib).unwrap();\n-\n     if target_triple.ends_with(\"windows-gnu\") {\n         eprintln!(\"[BUILD] rtstartup for {target_triple}\");\n \n         let rtstartup_src = SYSROOT_SRC.to_path(dirs).join(\"library\").join(\"rtstartup\");\n+        let mut target_libs = SysrootTarget { triple: target_triple.clone(), libs: vec![] };\n \n         for file in [\"rsbegin\", \"rsend\"] {\n+            let obj = RelPath::BUILD.to_path(dirs).join(format!(\"{file}.o\"));\n             let mut build_rtstartup_cmd = Command::new(&bootstrap_host_compiler.rustc);\n             build_rtstartup_cmd\n                 .arg(\"--target\")\n                 .arg(&target_triple)\n                 .arg(\"--emit=obj\")\n                 .arg(\"-o\")\n-                .arg(target_rustlib_lib.join(format!(\"{file}.o\")))\n+                .arg(&obj)\n                 .arg(rtstartup_src.join(format!(\"{file}.rs\")));\n             spawn_and_wait(build_rtstartup_cmd);\n+            target_libs.libs.push(obj);\n         }\n-    }\n \n+        target_libs.install_into_sysroot(&DIST_DIR.to_path(dirs))\n+    }\n     match sysroot_kind {\n         SysrootKind::None => {} // Nothing to do\n         SysrootKind::Llvm => {\n+            let default_sysroot =\n+                super::rustc_info::get_default_sysroot(&bootstrap_host_compiler.rustc);\n+\n+            let host_rustlib_lib =\n+                RUSTLIB_DIR.to_path(dirs).join(&bootstrap_host_compiler.triple).join(\"lib\");\n+            let target_rustlib_lib = RUSTLIB_DIR.to_path(dirs).join(&target_triple).join(\"lib\");\n+            fs::create_dir_all(&host_rustlib_lib).unwrap();\n+            fs::create_dir_all(&target_rustlib_lib).unwrap();\n+\n             for file in fs::read_dir(\n                 default_sysroot\n                     .join(\"lib\")\n@@ -122,12 +127,13 @@ pub(crate) fn build_sysroot(\n             }\n         }\n         SysrootKind::Clif => {\n-            build_clif_sysroot_for_triple(\n+            let host = build_clif_sysroot_for_triple(\n                 dirs,\n                 channel,\n                 bootstrap_host_compiler.clone(),\n                 &cg_clif_dylib_path,\n             );\n+            host.install_into_sysroot(&DIST_DIR.to_path(dirs));\n \n             if !is_native {\n                 build_clif_sysroot_for_triple(\n@@ -140,16 +146,16 @@ pub(crate) fn build_sysroot(\n                         bootstrap_target_compiler\n                     },\n                     &cg_clif_dylib_path,\n-                );\n+                )\n+                .install_into_sysroot(&DIST_DIR.to_path(dirs));\n             }\n \n             // Copy std for the host to the lib dir. This is necessary for the jit mode to find\n             // libstd.\n-            for file in fs::read_dir(host_rustlib_lib).unwrap() {\n-                let file = file.unwrap().path();\n-                let filename = file.file_name().unwrap().to_str().unwrap();\n+            for lib in host.libs {\n+                let filename = lib.file_name().unwrap().to_str().unwrap();\n                 if filename.contains(\"std-\") && !filename.contains(\".rlib\") {\n-                    try_hard_link(&file, LIB_DIR.to_path(dirs).join(file.file_name().unwrap()));\n+                    try_hard_link(&lib, LIB_DIR.to_path(dirs).join(lib.file_name().unwrap()));\n                 }\n             }\n         }\n@@ -162,19 +168,36 @@ pub(crate) fn build_sysroot(\n     target_compiler\n }\n \n+struct SysrootTarget {\n+    triple: String,\n+    libs: Vec<PathBuf>,\n+}\n+\n+impl SysrootTarget {\n+    fn install_into_sysroot(&self, sysroot: &Path) {\n+        let target_rustlib_lib = sysroot.join(\"lib\").join(\"rustlib\").join(&self.triple).join(\"lib\");\n+        fs::create_dir_all(&target_rustlib_lib).unwrap();\n+\n+        for lib in &self.libs {\n+            try_hard_link(lib, target_rustlib_lib.join(lib.file_name().unwrap()));\n+        }\n+    }\n+}\n+\n pub(crate) static ORIG_BUILD_SYSROOT: RelPath = RelPath::SOURCE.join(\"build_sysroot\");\n pub(crate) static BUILD_SYSROOT: RelPath = RelPath::DOWNLOAD.join(\"sysroot\");\n pub(crate) static SYSROOT_RUSTC_VERSION: RelPath = BUILD_SYSROOT.join(\"rustc_version\");\n pub(crate) static SYSROOT_SRC: RelPath = BUILD_SYSROOT.join(\"sysroot_src\");\n pub(crate) static STANDARD_LIBRARY: CargoProject =\n     CargoProject::new(&BUILD_SYSROOT, \"build_sysroot\");\n \n+#[must_use]\n fn build_clif_sysroot_for_triple(\n     dirs: &Dirs,\n     channel: &str,\n     mut compiler: Compiler,\n     cg_clif_dylib_path: &Path,\n-) {\n+) -> SysrootTarget {\n     match fs::read_to_string(SYSROOT_RUSTC_VERSION.to_path(dirs)) {\n         Err(e) => {\n             eprintln!(\"Failed to get rustc version for patched sysroot source: {}\", e);\n@@ -219,7 +242,8 @@ fn build_clif_sysroot_for_triple(\n     build_cmd.env(\"__CARGO_DEFAULT_LIB_METADATA\", \"cg_clif\");\n     spawn_and_wait(build_cmd);\n \n-    // Copy all relevant files to the sysroot\n+    let mut target_libs = SysrootTarget { triple: compiler.triple, libs: vec![] };\n+\n     for entry in fs::read_dir(build_dir.join(\"deps\")).unwrap() {\n         let entry = entry.unwrap();\n         if let Some(ext) = entry.path().extension() {\n@@ -229,9 +253,8 @@ fn build_clif_sysroot_for_triple(\n         } else {\n             continue;\n         };\n-        try_hard_link(\n-            entry.path(),\n-            RUSTLIB_DIR.to_path(dirs).join(&compiler.triple).join(\"lib\").join(entry.file_name()),\n-        );\n+        target_libs.libs.push(entry.path());\n     }\n+\n+    target_libs\n }"}]}