{"sha": "f83ce99c326ae13eabd5b4f6bd5459a5a764c13b", "node_id": "C_kwDOAAsO6NoAKGY4M2NlOTljMzI2YWUxM2VhYmQ1YjRmNmJkNTQ1OWE1YTc2NGMxM2I", "commit": {"author": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-02-28T01:21:15Z"}, "committer": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-02-28T01:21:15Z"}, "message": "Remove the `capture_disjoint_fields` feature", "tree": {"sha": "65670a65068fb557cb2e1e1f8e17b1f23d5a25b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65670a65068fb557cb2e1e1f8e17b1f23d5a25b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f83ce99c326ae13eabd5b4f6bd5459a5a764c13b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f83ce99c326ae13eabd5b4f6bd5459a5a764c13b", "html_url": "https://github.com/rust-lang/rust/commit/f83ce99c326ae13eabd5b4f6bd5459a5a764c13b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f83ce99c326ae13eabd5b4f6bd5459a5a764c13b/comments", "author": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7281249a19a9755e9d889ee251ec323629caadab", "url": "https://api.github.com/repos/rust-lang/rust/commits/7281249a19a9755e9d889ee251ec323629caadab", "html_url": "https://github.com/rust-lang/rust/commit/7281249a19a9755e9d889ee251ec323629caadab"}], "stats": {"total": 46, "additions": 17, "deletions": 29}, "files": [{"sha": "d38350f10ae9145bccc843c7aaf0a486b7a8968d", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f83ce99c326ae13eabd5b4f6bd5459a5a764c13b/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83ce99c326ae13eabd5b4f6bd5459a5a764c13b/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=f83ce99c326ae13eabd5b4f6bd5459a5a764c13b", "patch": "@@ -317,8 +317,6 @@ declare_features! (\n     (active, c_unwind, \"1.52.0\", Some(74990), None),\n     /// Allows using C-variadics.\n     (active, c_variadic, \"1.34.0\", Some(44930), None),\n-    /// Allows capturing disjoint fields in a closure/generator (RFC 2229).\n-    (incomplete, capture_disjoint_fields, \"1.49.0\", Some(53488), None),\n     /// Allows the use of `#[cfg(sanitize = \"option\")]`; set when -Zsanitizer is used.\n     (active, cfg_sanitize, \"1.41.0\", Some(39699), None),\n     /// Allows `cfg(target_abi = \"...\")`."}, {"sha": "04d4f6cb14e4ceb6ea6c06e2357d13a7520d0ef4", "filename": "compiler/rustc_feature/src/removed.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f83ce99c326ae13eabd5b4f6bd5459a5a764c13b/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83ce99c326ae13eabd5b4f6bd5459a5a764c13b/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs?ref=f83ce99c326ae13eabd5b4f6bd5459a5a764c13b", "patch": "@@ -52,6 +52,8 @@ declare_features! (\n     (removed, allow_fail, \"1.19.0\", Some(46488), None, Some(\"removed due to no clear use cases\")),\n     (removed, await_macro, \"1.38.0\", Some(50547), None,\n      Some(\"subsumed by `.await` syntax\")),\n+    /// Allows capturing disjoint fields in a closure/generator (RFC 2229).\n+    (removed, capture_disjoint_fields, \"1.49.0\", Some(53488), None, Some(\"stabilized in Rust 2021\")),\n     /// Allows comparing raw pointers during const eval.\n     (removed, const_compare_raw_pointers, \"1.46.0\", Some(53020), None,\n      Some(\"cannot be allowed in const eval in any meaningful way\")),"}, {"sha": "00cc4c3befc67fee5f271ae9eb54dcdad1c4a2ad", "filename": "compiler/rustc_hir_typeck/src/upvar.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f83ce99c326ae13eabd5b4f6bd5459a5a764c13b/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83ce99c326ae13eabd5b4f6bd5459a5a764c13b/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs?ref=f83ce99c326ae13eabd5b4f6bd5459a5a764c13b", "patch": "@@ -231,7 +231,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // We now fake capture information for all variables that are mentioned within the closure\n         // We do this after handling migrations so that min_captures computes before\n-        if !enable_precise_capture(self.tcx, span) {\n+        if !enable_precise_capture(span) {\n             let mut capture_information: InferredCaptureInformation<'tcx> = Default::default();\n \n             if let Some(upvars) = self.tcx.upvars_mentioned(closure_def_id) {\n@@ -265,7 +265,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             // If we have an origin, store it.\n             if let Some(origin) = origin {\n-                let origin = if enable_precise_capture(self.tcx, span) {\n+                let origin = if enable_precise_capture(span) {\n                     (origin.0, origin.1)\n                 } else {\n                     (origin.0, Place { projections: vec![], ..origin.1 })\n@@ -1240,8 +1240,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ///\n     /// This will make more sense with an example:\n     ///\n-    /// ```rust\n-    /// #![feature(capture_disjoint_fields)]\n+    /// ```rust,edition2021\n     ///\n     /// struct FancyInteger(i32); // This implements Drop\n     ///\n@@ -2247,12 +2246,10 @@ fn truncate_capture_for_optimization(\n     (place, curr_mode)\n }\n \n-/// Precise capture is enabled if the feature gate `capture_disjoint_fields` is enabled or if\n-/// user is using Rust Edition 2021 or higher.\n-///\n+/// Precise capture is enabled if user is using Rust Edition 2021 or higher.\n /// `span` is the span of the closure.\n-fn enable_precise_capture(tcx: TyCtxt<'_>, span: Span) -> bool {\n+fn enable_precise_capture(span: Span) -> bool {\n     // We use span here to ensure that if the closure was generated by a macro with a different\n     // edition.\n-    tcx.features().capture_disjoint_fields || span.rust_2021()\n+    span.rust_2021()\n }"}, {"sha": "33200b80a572d82fa95b038376781eaa274d04db", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f83ce99c326ae13eabd5b4f6bd5459a5a764c13b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83ce99c326ae13eabd5b4f6bd5459a5a764c13b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=f83ce99c326ae13eabd5b4f6bd5459a5a764c13b", "patch": "@@ -11,7 +11,7 @@ use rustc_middle::mir::AssertKind::BoundsCheck;\n use rustc_middle::mir::*;\n use rustc_middle::thir::*;\n use rustc_middle::ty::AdtDef;\n-use rustc_middle::ty::{self, CanonicalUserTypeAnnotation, Ty, TyCtxt, Variance};\n+use rustc_middle::ty::{self, CanonicalUserTypeAnnotation, Ty, Variance};\n use rustc_span::Span;\n use rustc_target::abi::VariantIdx;\n \n@@ -183,7 +183,7 @@ fn to_upvars_resolved_place_builder<'tcx>(\n             &projection,\n         ) else {\n         let closure_span = cx.tcx.def_span(closure_def_id);\n-        if !enable_precise_capture(cx.tcx, closure_span) {\n+        if !enable_precise_capture(closure_span) {\n             bug!(\n                 \"No associated capture found for {:?}[{:#?}] even though \\\n                     capture_disjoint_fields isn't enabled\",\n@@ -745,8 +745,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     }\n }\n \n-/// Precise capture is enabled if the feature gate `capture_disjoint_fields` is enabled or if\n-/// user is using Rust Edition 2021 or higher.\n-fn enable_precise_capture(tcx: TyCtxt<'_>, closure_span: Span) -> bool {\n-    tcx.features().capture_disjoint_fields || closure_span.rust_2021()\n+/// Precise capture is enabled if user is using Rust Edition 2021 or higher.\n+fn enable_precise_capture(closure_span: Span) -> bool {\n+    closure_span.rust_2021()\n }"}, {"sha": "b71734c2354df2f96f0b8d42409cb9a846ec69be", "filename": "tests/debuginfo/captured-fields-1.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f83ce99c326ae13eabd5b4f6bd5459a5a764c13b/tests%2Fdebuginfo%2Fcaptured-fields-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83ce99c326ae13eabd5b4f6bd5459a5a764c13b/tests%2Fdebuginfo%2Fcaptured-fields-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdebuginfo%2Fcaptured-fields-1.rs?ref=f83ce99c326ae13eabd5b4f6bd5459a5a764c13b", "patch": "@@ -1,5 +1,5 @@\n // compile-flags:-g\n-\n+// edition:2021\n // === GDB TESTS ===================================================================================\n \n // gdb-command:run\n@@ -44,7 +44,6 @@\n // lldbg-check:(captured_fields_1::main::{closure_env#5}) $5 = { my_var = { my_field1 = 11 my_field2 = 22 } }\n // lldb-command:continue\n \n-#![feature(capture_disjoint_fields)]\n #![allow(unused)]\n \n struct MyStruct {"}, {"sha": "8d463fb2451624c97e69ea8cd784a1cf04c2ab5b", "filename": "tests/debuginfo/captured-fields-2.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f83ce99c326ae13eabd5b4f6bd5459a5a764c13b/tests%2Fdebuginfo%2Fcaptured-fields-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83ce99c326ae13eabd5b4f6bd5459a5a764c13b/tests%2Fdebuginfo%2Fcaptured-fields-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdebuginfo%2Fcaptured-fields-2.rs?ref=f83ce99c326ae13eabd5b4f6bd5459a5a764c13b", "patch": "@@ -1,5 +1,5 @@\n // compile-flags:-g\n-\n+// edition:2021\n // === GDB TESTS ===================================================================================\n \n // gdb-command:run\n@@ -20,7 +20,6 @@\n // lldbg-check:(unsigned int) $1 = 22\n // lldb-command:continue\n \n-#![feature(capture_disjoint_fields)]\n #![allow(unused)]\n \n struct MyStruct {\n@@ -29,10 +28,7 @@ struct MyStruct {\n }\n \n fn main() {\n-    let mut my_var = MyStruct {\n-        my_field1: 11,\n-        my_field2: 22,\n-    };\n+    let mut my_var = MyStruct { my_field1: 11, my_field2: 22 };\n     let my_ref = &mut my_var;\n \n     let test = || {"}, {"sha": "bfb487649a3ce5856731bacb954ce835e14ecc3d", "filename": "tests/ui/closures/2229_closure_analysis/issue_88118.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f83ce99c326ae13eabd5b4f6bd5459a5a764c13b/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue_88118.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83ce99c326ae13eabd5b4f6bd5459a5a764c13b/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue_88118.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue_88118.rs?ref=f83ce99c326ae13eabd5b4f6bd5459a5a764c13b", "patch": "@@ -1,10 +1,7 @@\n // Regression test for #88118. Used to ICE.\n-//\n+// edition:2021\n // check-pass\n \n-#![allow(incomplete_features)]\n-#![feature(capture_disjoint_fields)]\n-\n fn foo<MsU>(handler: impl FnOnce() -> MsU + Clone + 'static) {\n     Box::new(move |value| {\n         (|_| handler.clone()())(value);"}]}