{"sha": "5b4fa5bf989e4d630512998789f4bb79f1d9f134", "node_id": "C_kwDOAAsO6NoAKDViNGZhNWJmOTg5ZTRkNjMwNTEyOTk4Nzg5ZjRiYjc5ZjFkOWYxMzQ", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-03-20T09:46:43Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-03-20T09:46:43Z"}, "message": "fix typo", "tree": {"sha": "7fcd8bf6e5fae2d9dea2d790bd3e68a0b26e6572", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fcd8bf6e5fae2d9dea2d790bd3e68a0b26e6572"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b4fa5bf989e4d630512998789f4bb79f1d9f134", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b4fa5bf989e4d630512998789f4bb79f1d9f134", "html_url": "https://github.com/rust-lang/rust/commit/5b4fa5bf989e4d630512998789f4bb79f1d9f134", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b4fa5bf989e4d630512998789f4bb79f1d9f134/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e91364bcf5100017a8bd5b18cdebefdd3e5f0bb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e91364bcf5100017a8bd5b18cdebefdd3e5f0bb1", "html_url": "https://github.com/rust-lang/rust/commit/e91364bcf5100017a8bd5b18cdebefdd3e5f0bb1"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "b5e8de3c9a7d2803eea106fa3d43714a5e0a4c11", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b4fa5bf989e4d630512998789f4bb79f1d9f134/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b4fa5bf989e4d630512998789f4bb79f1d9f134/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=5b4fa5bf989e4d630512998789f4bb79f1d9f134", "patch": "@@ -593,7 +593,7 @@ fn find_opaque_ty_constraints_for_tait(tcx: TyCtxt<'_>, def_id: LocalDefId) -> T\n         found: Option<ty::OpaqueHiddenType<'tcx>>,\n \n         /// In the presence of dead code, typeck may figure out a hidden type\n-        /// while borrowck will now. We collect these cases here and check at\n+        /// while borrowck will not. We collect these cases here and check at\n         /// the end that we actually found a type that matches (modulo regions).\n         typeck_types: Vec<ty::OpaqueHiddenType<'tcx>>,\n     }"}]}