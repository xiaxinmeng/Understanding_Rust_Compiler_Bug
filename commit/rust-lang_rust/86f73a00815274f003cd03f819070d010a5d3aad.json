{"sha": "86f73a00815274f003cd03f819070d010a5d3aad", "node_id": "C_kwDOAAsO6NoAKDg2ZjczYTAwODE1Mjc0ZjAwM2NkMDNmODE5MDcwZDAxMGE1ZDNhYWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-24T12:08:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-24T12:08:51Z"}, "message": "Auto merge of #14017 - lowr:patch/remove-type-walk, r=Veykril\n\ninternal: remove `TypeWalk`\n\nBecause less code is better!\n\n`hir_ty::TypeWalk` is only used in analysis-stats and its usage can be replaced by checking `TypeFlags` (which is precomputed upon `TyKind` interning so it should make analysis-stats a bit faster, though it was really negligible in my local environment).\n\nWe should just use chalk's `TypeVisitor` or `TypeFolder` instead even if we come to need it again.", "tree": {"sha": "81aede515fd002bb5ff681782b416eb81154a30d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81aede515fd002bb5ff681782b416eb81154a30d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86f73a00815274f003cd03f819070d010a5d3aad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86f73a00815274f003cd03f819070d010a5d3aad", "html_url": "https://github.com/rust-lang/rust/commit/86f73a00815274f003cd03f819070d010a5d3aad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86f73a00815274f003cd03f819070d010a5d3aad/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e46c242a38396c5dd1cb85b5002ca17f83c4c1b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e46c242a38396c5dd1cb85b5002ca17f83c4c1b7", "html_url": "https://github.com/rust-lang/rust/commit/e46c242a38396c5dd1cb85b5002ca17f83c4c1b7"}, {"sha": "e9f14c505f4a87e67bf3e2f0c743a5e25119b367", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9f14c505f4a87e67bf3e2f0c743a5e25119b367", "html_url": "https://github.com/rust-lang/rust/commit/e9f14c505f4a87e67bf3e2f0c743a5e25119b367"}], "stats": {"total": 167, "additions": 8, "deletions": 159}, "files": [{"sha": "a1182445ede58a75f739c4b55349d0dbab8394e3", "filename": "crates/hir-ty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86f73a00815274f003cd03f819070d010a5d3aad/crates%2Fhir-ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f73a00815274f003cd03f819070d010a5d3aad/crates%2Fhir-ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flib.rs?ref=86f73a00815274f003cd03f819070d010a5d3aad", "patch": "@@ -20,7 +20,6 @@ mod lower;\n mod mapping;\n mod tls;\n mod utils;\n-mod walk;\n pub mod db;\n pub mod diagnostics;\n pub mod display;\n@@ -71,7 +70,6 @@ pub use mapping::{\n };\n pub use traits::TraitEnvironment;\n pub use utils::{all_super_traits, is_fn_unsafe_to_call};\n-pub use walk::TypeWalk;\n \n pub use chalk_ir::{\n     cast::Cast, AdtId, BoundVar, DebruijnIndex, Mutability, Safety, Scalar, TyVariableKind,\n@@ -107,6 +105,7 @@ pub type GenericArgData = chalk_ir::GenericArgData<Interner>;\n \n pub type Ty = chalk_ir::Ty<Interner>;\n pub type TyKind = chalk_ir::TyKind<Interner>;\n+pub type TypeFlags = chalk_ir::TypeFlags;\n pub type DynTy = chalk_ir::DynTy<Interner>;\n pub type FnPointer = chalk_ir::FnPointer<Interner>;\n // pub type FnSubst = chalk_ir::FnSubst<Interner>;"}, {"sha": "c476894552e6c879e2a1d18841ad5e594bf2bac3", "filename": "crates/hir-ty/src/walk.rs", "status": "removed", "additions": 0, "deletions": 147, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/e46c242a38396c5dd1cb85b5002ca17f83c4c1b7/crates%2Fhir-ty%2Fsrc%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e46c242a38396c5dd1cb85b5002ca17f83c4c1b7/crates%2Fhir-ty%2Fsrc%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fwalk.rs?ref=e46c242a38396c5dd1cb85b5002ca17f83c4c1b7", "patch": "@@ -1,147 +0,0 @@\n-//! The `TypeWalk` trait (probably to be replaced by Chalk's `Fold` and\n-//! `Visit`).\n-\n-use chalk_ir::interner::HasInterner;\n-\n-use crate::{\n-    AliasEq, AliasTy, Binders, CallableSig, FnSubst, GenericArg, GenericArgData, Interner,\n-    OpaqueTy, ProjectionTy, Substitution, TraitRef, Ty, TyKind, WhereClause,\n-};\n-\n-/// This allows walking structures that contain types to do something with those\n-/// types, similar to Chalk's `Fold` trait.\n-pub trait TypeWalk {\n-    fn walk(&self, f: &mut impl FnMut(&Ty));\n-}\n-\n-impl TypeWalk for Ty {\n-    fn walk(&self, f: &mut impl FnMut(&Ty)) {\n-        match self.kind(Interner) {\n-            TyKind::Alias(AliasTy::Projection(p_ty)) => {\n-                for t in p_ty.substitution.iter(Interner) {\n-                    t.walk(f);\n-                }\n-            }\n-            TyKind::Alias(AliasTy::Opaque(o_ty)) => {\n-                for t in o_ty.substitution.iter(Interner) {\n-                    t.walk(f);\n-                }\n-            }\n-            TyKind::Dyn(dyn_ty) => {\n-                for p in dyn_ty.bounds.skip_binders().interned().iter() {\n-                    p.walk(f);\n-                }\n-            }\n-            TyKind::Slice(ty)\n-            | TyKind::Array(ty, _)\n-            | TyKind::Ref(_, _, ty)\n-            | TyKind::Raw(_, ty) => {\n-                ty.walk(f);\n-            }\n-            TyKind::Function(fn_pointer) => {\n-                fn_pointer.substitution.0.walk(f);\n-            }\n-            TyKind::Adt(_, substs)\n-            | TyKind::FnDef(_, substs)\n-            | TyKind::Tuple(_, substs)\n-            | TyKind::OpaqueType(_, substs)\n-            | TyKind::AssociatedType(_, substs)\n-            | TyKind::Closure(.., substs) => {\n-                substs.walk(f);\n-            }\n-            _ => {}\n-        }\n-        f(self);\n-    }\n-}\n-\n-impl<T: TypeWalk> TypeWalk for Vec<T> {\n-    fn walk(&self, f: &mut impl FnMut(&Ty)) {\n-        for t in self {\n-            t.walk(f);\n-        }\n-    }\n-}\n-\n-impl TypeWalk for OpaqueTy {\n-    fn walk(&self, f: &mut impl FnMut(&Ty)) {\n-        self.substitution.walk(f);\n-    }\n-}\n-\n-impl TypeWalk for ProjectionTy {\n-    fn walk(&self, f: &mut impl FnMut(&Ty)) {\n-        self.substitution.walk(f);\n-    }\n-}\n-\n-impl TypeWalk for AliasTy {\n-    fn walk(&self, f: &mut impl FnMut(&Ty)) {\n-        match self {\n-            AliasTy::Projection(it) => it.walk(f),\n-            AliasTy::Opaque(it) => it.walk(f),\n-        }\n-    }\n-}\n-\n-impl TypeWalk for GenericArg {\n-    fn walk(&self, f: &mut impl FnMut(&Ty)) {\n-        if let GenericArgData::Ty(ty) = &self.interned() {\n-            ty.walk(f);\n-        }\n-    }\n-}\n-\n-impl TypeWalk for Substitution {\n-    fn walk(&self, f: &mut impl FnMut(&Ty)) {\n-        for t in self.iter(Interner) {\n-            t.walk(f);\n-        }\n-    }\n-}\n-\n-impl<T: TypeWalk + HasInterner<Interner = Interner>> TypeWalk for Binders<T> {\n-    fn walk(&self, f: &mut impl FnMut(&Ty)) {\n-        self.skip_binders().walk(f);\n-    }\n-}\n-\n-impl TypeWalk for TraitRef {\n-    fn walk(&self, f: &mut impl FnMut(&Ty)) {\n-        self.substitution.walk(f);\n-    }\n-}\n-\n-impl TypeWalk for WhereClause {\n-    fn walk(&self, f: &mut impl FnMut(&Ty)) {\n-        match self {\n-            WhereClause::Implemented(trait_ref) => trait_ref.walk(f),\n-            WhereClause::AliasEq(alias_eq) => alias_eq.walk(f),\n-            _ => {}\n-        }\n-    }\n-}\n-\n-impl TypeWalk for CallableSig {\n-    fn walk(&self, f: &mut impl FnMut(&Ty)) {\n-        for t in self.params_and_return.iter() {\n-            t.walk(f);\n-        }\n-    }\n-}\n-\n-impl TypeWalk for AliasEq {\n-    fn walk(&self, f: &mut impl FnMut(&Ty)) {\n-        self.ty.walk(f);\n-        match &self.alias {\n-            AliasTy::Projection(projection_ty) => projection_ty.walk(f),\n-            AliasTy::Opaque(opaque) => opaque.walk(f),\n-        }\n-    }\n-}\n-\n-impl TypeWalk for FnSubst<Interner> {\n-    fn walk(&self, f: &mut impl FnMut(&Ty)) {\n-        self.0.walk(f)\n-    }\n-}"}, {"sha": "4415bef4bb1c7bcc9dea7df8ad17d4adb39bf451", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/86f73a00815274f003cd03f819070d010a5d3aad/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f73a00815274f003cd03f819070d010a5d3aad/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=86f73a00815274f003cd03f819070d010a5d3aad", "patch": "@@ -3168,6 +3168,8 @@ impl Type {\n     }\n \n     pub fn contains_unknown(&self) -> bool {\n+        // FIXME: When we get rid of `ConstScalar::Unknown`, we can just look at precomputed\n+        // `TypeFlags` in `TyData`.\n         return go(&self.ty);\n \n         fn go(ty: &Ty) -> bool {\n@@ -3482,10 +3484,9 @@ impl Type {\n         Type { env: self.env.clone(), ty }\n     }\n \n+    /// Visits every type, including generic arguments, in this type. `cb` is called with type\n+    /// itself first, and then with its generic arguments.\n     pub fn walk(&self, db: &dyn HirDatabase, mut cb: impl FnMut(Type)) {\n-        // TypeWalk::walk for a Ty at first visits parameters and only after that the Ty itself.\n-        // We need a different order here.\n-\n         fn walk_substs(\n             db: &dyn HirDatabase,\n             type_: &Type,"}, {"sha": "4b91433f63a68d88c324c057759846bc572301ef", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/86f73a00815274f003cd03f819070d010a5d3aad/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f73a00815274f003cd03f819070d010a5d3aad/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=86f73a00815274f003cd03f819070d010a5d3aad", "patch": "@@ -15,7 +15,7 @@ use hir_def::{\n     expr::ExprId,\n     FunctionId,\n };\n-use hir_ty::{TyExt, TypeWalk};\n+use hir_ty::{Interner, TyExt, TypeFlags};\n use ide::{Analysis, AnalysisHost, LineCol, RootDatabase};\n use ide_db::base_db::{\n     salsa::{self, debug::DebugQueryTable, ParallelDatabase},\n@@ -280,12 +280,8 @@ impl flags::AnalysisStats {\n                     }\n                     true\n                 } else {\n-                    let mut is_partially_unknown = false;\n-                    ty.walk(&mut |ty| {\n-                        if ty.is_unknown() {\n-                            is_partially_unknown = true;\n-                        }\n-                    });\n+                    let is_partially_unknown =\n+                        ty.data(Interner).flags.contains(TypeFlags::HAS_ERROR);\n                     if is_partially_unknown {\n                         num_exprs_partially_unknown += 1;\n                     }"}]}