{"sha": "24094a04b66467623174199b2605e2f49be166f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0MDk0YTA0YjY2NDY3NjIzMTc0MTk5YjI2MDVlMmY0OWJlMTY2Zjk=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-07-02T19:50:53Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-07-02T21:14:05Z"}, "message": "optimize chunks and chunks_mut", "tree": {"sha": "13a67b8a710d96dcadafada75385edbd8246b1e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13a67b8a710d96dcadafada75385edbd8246b1e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24094a04b66467623174199b2605e2f49be166f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24094a04b66467623174199b2605e2f49be166f9", "html_url": "https://github.com/rust-lang/rust/commit/24094a04b66467623174199b2605e2f49be166f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24094a04b66467623174199b2605e2f49be166f9/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "851c82e88ade86bfe3b4ee785d5e5ab1d954b61c", "url": "https://api.github.com/repos/rust-lang/rust/commits/851c82e88ade86bfe3b4ee785d5e5ab1d954b61c", "html_url": "https://github.com/rust-lang/rust/commit/851c82e88ade86bfe3b4ee785d5e5ab1d954b61c"}], "stats": {"total": 24, "additions": 11, "deletions": 13}, "files": [{"sha": "5cbc6343e3a77424a85696d80abfe1941bd5211f", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/24094a04b66467623174199b2605e2f49be166f9/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24094a04b66467623174199b2605e2f49be166f9/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=24094a04b66467623174199b2605e2f49be166f9", "patch": "@@ -1418,18 +1418,17 @@ impl<'a, T> Iterator for Chunks<'a, T> {\n     #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item {\n         let start = idx * self.chunk_size;\n-        let end = match start.checked_add(self.chunk_size) {\n-            None => self.v.len(),\n-            Some(end) => cmp::min(end, self.v.len()),\n-        };\n         // SAFETY: the caller guarantees that `i` is in bounds,\n         // which means that `start` must be in bounds of the\n-        // underlying `self.v` slice, and we made sure that `end`\n+        // underlying `self.v` slice, and we made sure that `len`\n         // is also in bounds of `self.v`. Thus, `start` cannot overflow\n         // an `isize`, and the slice constructed by `from_raw_parts`\n         // is a subslice of `self.v` which is guaranteed to be valid\n         // for the lifetime `'a` of `self.v`.\n-        unsafe { from_raw_parts(self.v.as_ptr().add(start), end - start) }\n+        unsafe {\n+            let len = cmp::min(self.v.len().unchecked_sub(start), self.chunk_size);\n+            from_raw_parts(self.v.as_ptr().add(start), len)\n+        }\n     }\n }\n \n@@ -1457,7 +1456,7 @@ impl<'a, T> DoubleEndedIterator for Chunks<'a, T> {\n         } else {\n             let start = (len - 1 - n) * self.chunk_size;\n             let end = match start.checked_add(self.chunk_size) {\n-                Some(res) => cmp::min(res, self.v.len()),\n+                Some(res) => cmp::min(self.v.len(), res),\n                 None => self.v.len(),\n             };\n             let nth_back = &self.v[start..end];\n@@ -1579,17 +1578,16 @@ impl<'a, T> Iterator for ChunksMut<'a, T> {\n     #[doc(hidden)]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item {\n         let start = idx * self.chunk_size;\n-        let end = match start.checked_add(self.chunk_size) {\n-            None => self.v.len(),\n-            Some(end) => cmp::min(end, self.v.len()),\n-        };\n         // SAFETY: see comments for `Chunks::__iterator_get_unchecked`.\n         //\n         // Also note that the caller also guarantees that we're never called\n         // with the same index again, and that no other methods that will\n         // access this subslice are called, so it is valid for the returned\n         // slice to be mutable.\n-        unsafe { from_raw_parts_mut(self.v.as_mut_ptr().add(start), end - start) }\n+        unsafe {\n+            let len = cmp::min(self.v.len().unchecked_sub(start), self.chunk_size);\n+            from_raw_parts_mut(self.v.as_mut_ptr().add(start), len)\n+        }\n     }\n }\n \n@@ -1619,7 +1617,7 @@ impl<'a, T> DoubleEndedIterator for ChunksMut<'a, T> {\n         } else {\n             let start = (len - 1 - n) * self.chunk_size;\n             let end = match start.checked_add(self.chunk_size) {\n-                Some(res) => cmp::min(res, self.v.len()),\n+                Some(res) => cmp::min(self.v.len(), res),\n                 None => self.v.len(),\n             };\n             let (temp, _tail) = mem::replace(&mut self.v, &mut []).split_at_mut(end);"}]}