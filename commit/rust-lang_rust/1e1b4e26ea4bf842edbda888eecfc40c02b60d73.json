{"sha": "1e1b4e26ea4bf842edbda888eecfc40c02b60d73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlMWI0ZTI2ZWE0YmY4NDJlZGJkYTg4OGVlY2ZjNDBjMDJiNjBkNzM=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-06-05T15:08:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-06-05T15:08:33Z"}, "message": "Merge pull request #2814 from VKlayd/fn_to_int\n\nWIP: Add lint on cast Fn to all numerical except usize.", "tree": {"sha": "d2d64ede568a47363eb762200540a9724163c3e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2d64ede568a47363eb762200540a9724163c3e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e1b4e26ea4bf842edbda888eecfc40c02b60d73", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbFqdxCRBK7hj4Ov3rIwAAdHIIAJXlK4vQrwsCYYYjOiT/KgQl\nFxGkknBOi7x2ZDMNWdg8u9Vsz9bivAXrIaV5w5yr4dkzL5IO763kGWehzVGY0u8I\nL7Nc5IZuRaXAgG8bfYaDrkHrCAO7lmXysRIKzAWhDH/4G2/KCo7s/88IKKtzro32\nkAok639wgo8AyumMzKM1O4E+ugWXLBfjZXekGYBA/h+YNupnfX2182i/0kxHQfQO\nvM7Pfu4AL3/dZVI0pma8JI9KviQMQrCR6/teKtKbZlZNB+BNXHno2BC5zPK2qncP\nnVDzZjscgAegXSHBfb2skEmcECAkEEI+AMp8auu5w2KwDEEcTYThnxUOcIMmM5c=\n=0Der\n-----END PGP SIGNATURE-----\n", "payload": "tree d2d64ede568a47363eb762200540a9724163c3e4\nparent 3d7cdd4ac5311b7166d14de9ce8e6c1768674f44\nparent 24ab207671b0ac61c3b2008f9557a56cd4191efc\nauthor Oliver Schneider <github35764891676564198441@oli-obk.de> 1528211313 +0200\ncommitter GitHub <noreply@github.com> 1528211313 +0200\n\nMerge pull request #2814 from VKlayd/fn_to_int\n\nWIP: Add lint on cast Fn to all numerical except usize."}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e1b4e26ea4bf842edbda888eecfc40c02b60d73", "html_url": "https://github.com/rust-lang/rust/commit/1e1b4e26ea4bf842edbda888eecfc40c02b60d73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e1b4e26ea4bf842edbda888eecfc40c02b60d73/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d7cdd4ac5311b7166d14de9ce8e6c1768674f44", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d7cdd4ac5311b7166d14de9ce8e6c1768674f44", "html_url": "https://github.com/rust-lang/rust/commit/3d7cdd4ac5311b7166d14de9ce8e6c1768674f44"}, {"sha": "24ab207671b0ac61c3b2008f9557a56cd4191efc", "url": "https://api.github.com/repos/rust-lang/rust/commits/24ab207671b0ac61c3b2008f9557a56cd4191efc", "html_url": "https://github.com/rust-lang/rust/commit/24ab207671b0ac61c3b2008f9557a56cd4191efc"}], "stats": {"total": 159, "additions": 158, "deletions": 1}, "files": [{"sha": "f4bf3c44711429c54036f54d65ed5f1a5aff5fc2", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e1b4e26ea4bf842edbda888eecfc40c02b60d73/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1b4e26ea4bf842edbda888eecfc40c02b60d73/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=1e1b4e26ea4bf842edbda888eecfc40c02b60d73", "patch": "@@ -678,6 +678,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         types::UNIT_ARG,\n         types::UNIT_CMP,\n         types::UNNECESSARY_CAST,\n+        types::FN_TO_NUMERIC_CAST,\n         unicode::ZERO_WIDTH_SPACE,\n         unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME,\n         unused_io_amount::UNUSED_IO_AMOUNT,"}, {"sha": "a71d47e408542b9f4059b321b368b15d606fbb33", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 69, "deletions": 1, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/1e1b4e26ea4bf842edbda888eecfc40c02b60d73/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1b4e26ea4bf842edbda888eecfc40c02b60d73/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=1e1b4e26ea4bf842edbda888eecfc40c02b60d73", "patch": "@@ -679,6 +679,40 @@ declare_clippy_lint! {\n     \"cast to the same type, e.g. `x as i32` where `x: i32`\"\n }\n \n+/// **What it does:** Checks for casts of a function pointer to a numeric type not enough to store address.\n+///\n+/// **Why is this bad?** Casting a function pointer to not eligable type could truncate the address value.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// fn test_fn() -> i16;\n+/// let _ = test_fn as i32\n+/// ```\n+declare_clippy_lint! {\n+    pub FN_TO_NUMERIC_CAST_WITH_TRUNCATION,\n+    correctness,\n+    \"cast function pointer to the numeric type with value truncation\"\n+}\n+\n+/// **What it does:** Checks for casts of a function pointer to a numeric type except `usize`.\n+///\n+/// **Why is this bad?** Casting a function pointer to something other than `usize` is not a good style.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// fn test_fn() -> i16;\n+/// let _ = test_fn as i128\n+/// ```\n+declare_clippy_lint! {\n+    pub FN_TO_NUMERIC_CAST,\n+    style,\n+    \"cast function pointer to the numeric type\"\n+}\n+\n /// **What it does:** Checks for casts from a less-strictly-aligned pointer to a\n /// more-strictly-aligned pointer\n ///\n@@ -891,7 +925,9 @@ impl LintPass for CastPass {\n             CAST_POSSIBLE_WRAP,\n             CAST_LOSSLESS,\n             UNNECESSARY_CAST,\n-            CAST_PTR_ALIGNMENT\n+            CAST_PTR_ALIGNMENT,\n+            FN_TO_NUMERIC_CAST,\n+            FN_TO_NUMERIC_CAST_WITH_TRUNCATION,\n         )\n     }\n }\n@@ -975,6 +1011,38 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CastPass {\n                     },\n                 }\n             }\n+\n+            match &cast_from.sty {\n+                ty::TyFnDef(..) |\n+                ty::TyFnPtr(..) => {\n+                    if cast_to.is_numeric() && cast_to.sty != ty::TyUint(UintTy::Usize){\n+                        let to_nbits = int_ty_to_nbits(cast_to, cx.tcx);\n+                        let pointer_nbits = cx.tcx.data_layout.pointer_size.bits();\n+                        if to_nbits < pointer_nbits || (to_nbits == pointer_nbits && cast_to.is_signed()) {\n+                            span_lint_and_sugg(\n+                                cx,\n+                                FN_TO_NUMERIC_CAST_WITH_TRUNCATION,\n+                                expr.span,\n+                                &format!(\"casting a `{}` to `{}` may truncate the function address value.\", cast_from, cast_to),\n+                                \"if you need the address of the function, consider\",\n+                                format!(\"{} as usize\", &snippet(cx, ex.span, \"x\"))\n+                            );\n+                        } else {\n+                            span_lint_and_sugg(\n+                                cx,\n+                                FN_TO_NUMERIC_CAST,\n+                                expr.span,\n+                                &format!(\"casting a `{}` to `{}` is bad style.\", cast_from, cast_to),\n+                                \"if you need the address of the function, consider\",\n+                                format!(\"{} as usize\", &snippet(cx, ex.span, \"x\"))\n+                            );\n+\n+                        };\n+                    }\n+                }\n+                _ => ()\n+            }\n+\n             if_chain!{\n                 if let ty::TyRawPtr(from_ptr_ty) = &cast_from.sty;\n                 if let ty::TyRawPtr(to_ptr_ty) = &cast_to.sty;"}, {"sha": "8387586c3e94a9ad30ab697a01d1d1c05b2dde93", "filename": "tests/ui/types_fn_to_int.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1e1b4e26ea4bf842edbda888eecfc40c02b60d73/tests%2Fui%2Ftypes_fn_to_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1b4e26ea4bf842edbda888eecfc40c02b60d73/tests%2Fui%2Ftypes_fn_to_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypes_fn_to_int.rs?ref=1e1b4e26ea4bf842edbda888eecfc40c02b60d73", "patch": "@@ -0,0 +1,22 @@\n+enum Foo {\n+    A(usize),\n+    B\n+}\n+\n+fn bar() -> i32 {\n+    0i32\n+}\n+\n+fn main() {\n+    let x = Foo::A;\n+    let _y = x as i32;\n+    let _y1 = Foo::A as i32;\n+    let _y = x as u32;\n+    let _z = bar as u32;\n+    let _y = bar as i64;\n+    let _y = bar as u64;\n+    let _z = Foo::A as i128;\n+    let _z = Foo::A as u128;\n+    let _z = bar as i128;\n+    let _z = bar as u128;\n+}"}, {"sha": "bbdf4ce2e70ab6ba20b1df7ab934adb8337aa120", "filename": "tests/ui/types_fn_to_int.stderr", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/1e1b4e26ea4bf842edbda888eecfc40c02b60d73/tests%2Fui%2Ftypes_fn_to_int.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e1b4e26ea4bf842edbda888eecfc40c02b60d73/tests%2Fui%2Ftypes_fn_to_int.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypes_fn_to_int.stderr?ref=1e1b4e26ea4bf842edbda888eecfc40c02b60d73", "patch": "@@ -0,0 +1,66 @@\n+error: casting a `fn(usize) -> Foo {Foo::A}` to `i32` may truncate the function address value.\n+  --> $DIR/types_fn_to_int.rs:12:14\n+   |\n+12 |     let _y = x as i32;\n+   |              ^^^^^^^^ help: if you need the address of the function, consider: `x as usize`\n+   |\n+   = note: #[deny(fn_to_numeric_cast_with_truncation)] on by default\n+\n+error: casting a `fn(usize) -> Foo {Foo::A}` to `i32` may truncate the function address value.\n+  --> $DIR/types_fn_to_int.rs:13:15\n+   |\n+13 |     let _y1 = Foo::A as i32;\n+   |               ^^^^^^^^^^^^^ help: if you need the address of the function, consider: `Foo::A as usize`\n+\n+error: casting a `fn(usize) -> Foo {Foo::A}` to `u32` may truncate the function address value.\n+  --> $DIR/types_fn_to_int.rs:14:14\n+   |\n+14 |     let _y = x as u32;\n+   |              ^^^^^^^^ help: if you need the address of the function, consider: `x as usize`\n+\n+error: casting a `fn() -> i32 {bar}` to `u32` may truncate the function address value.\n+  --> $DIR/types_fn_to_int.rs:15:14\n+   |\n+15 |     let _z = bar as u32;\n+   |              ^^^^^^^^^^ help: if you need the address of the function, consider: `bar as usize`\n+\n+error: casting a `fn() -> i32 {bar}` to `i64` may truncate the function address value.\n+  --> $DIR/types_fn_to_int.rs:16:14\n+   |\n+16 |     let _y = bar as i64;\n+   |              ^^^^^^^^^^ help: if you need the address of the function, consider: `bar as usize`\n+\n+error: casting a `fn() -> i32 {bar}` to `u64` is bad style.\n+  --> $DIR/types_fn_to_int.rs:17:14\n+   |\n+17 |     let _y = bar as u64;\n+   |              ^^^^^^^^^^ help: if you need the address of the function, consider: `bar as usize`\n+   |\n+   = note: `-D fn-to-numeric-cast` implied by `-D warnings`\n+\n+error: casting a `fn(usize) -> Foo {Foo::A}` to `i128` is bad style.\n+  --> $DIR/types_fn_to_int.rs:18:14\n+   |\n+18 |     let _z = Foo::A as i128;\n+   |              ^^^^^^^^^^^^^^ help: if you need the address of the function, consider: `Foo::A as usize`\n+\n+error: casting a `fn(usize) -> Foo {Foo::A}` to `u128` is bad style.\n+  --> $DIR/types_fn_to_int.rs:19:14\n+   |\n+19 |     let _z = Foo::A as u128;\n+   |              ^^^^^^^^^^^^^^ help: if you need the address of the function, consider: `Foo::A as usize`\n+\n+error: casting a `fn() -> i32 {bar}` to `i128` is bad style.\n+  --> $DIR/types_fn_to_int.rs:20:14\n+   |\n+20 |     let _z = bar as i128;\n+   |              ^^^^^^^^^^^ help: if you need the address of the function, consider: `bar as usize`\n+\n+error: casting a `fn() -> i32 {bar}` to `u128` is bad style.\n+  --> $DIR/types_fn_to_int.rs:21:14\n+   |\n+21 |     let _z = bar as u128;\n+   |              ^^^^^^^^^^^ help: if you need the address of the function, consider: `bar as usize`\n+\n+error: aborting due to 10 previous errors\n+"}]}