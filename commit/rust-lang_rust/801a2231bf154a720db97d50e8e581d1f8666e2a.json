{"sha": "801a2231bf154a720db97d50e8e581d1f8666e2a", "node_id": "C_kwDOAAsO6NoAKDgwMWEyMjMxYmYxNTRhNzIwZGI5N2Q1MGU4ZTU4MWQxZjg2NjZlMmE", "commit": {"author": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2022-12-01T15:39:57Z"}, "committer": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2022-12-20T22:48:02Z"}, "message": "Implement location link for type inlay hints", "tree": {"sha": "17aa6420e5168eb211b2b387ff7e890c3cdbca8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17aa6420e5168eb211b2b387ff7e890c3cdbca8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/801a2231bf154a720db97d50e8e581d1f8666e2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/801a2231bf154a720db97d50e8e581d1f8666e2a", "html_url": "https://github.com/rust-lang/rust/commit/801a2231bf154a720db97d50e8e581d1f8666e2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/801a2231bf154a720db97d50e8e581d1f8666e2a/comments", "author": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "927d56a67d10299a751b3b571c841d1c6b6af106", "url": "https://api.github.com/repos/rust-lang/rust/commits/927d56a67d10299a751b3b571c841d1c6b6af106", "html_url": "https://github.com/rust-lang/rust/commit/927d56a67d10299a751b3b571c841d1c6b6af106"}], "stats": {"total": 444, "additions": 362, "deletions": 82}, "files": [{"sha": "57a15d114f071e2520e9c3de8331b209caa2d723", "filename": "crates/hir-ty/src/display.rs", "status": "modified", "additions": 45, "deletions": 9, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/801a2231bf154a720db97d50e8e581d1f8666e2a/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/801a2231bf154a720db97d50e8e581d1f8666e2a/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs?ref=801a2231bf154a720db97d50e8e581d1f8666e2a", "patch": "@@ -16,7 +16,7 @@ use hir_def::{\n     path::{Path, PathKind},\n     type_ref::{ConstScalar, TraitBoundModifier, TypeBound, TypeRef},\n     visibility::Visibility,\n-    HasModule, ItemContainerId, Lookup, ModuleId, TraitId,\n+    HasModule, ItemContainerId, Lookup, ModuleDefId, ModuleId, TraitId,\n };\n use hir_expand::{hygiene::Hygiene, name::Name};\n use itertools::Itertools;\n@@ -35,16 +35,44 @@ use crate::{\n     TraitRefExt, Ty, TyExt, TyKind, WhereClause,\n };\n \n+pub trait HirWrite: fmt::Write {\n+    fn start_location_link(&mut self, location: ModuleDefId);\n+    fn end_location_link(&mut self);\n+}\n+\n+// String will ignore link metadata\n+impl HirWrite for String {\n+    fn start_location_link(&mut self, _: ModuleDefId) {}\n+\n+    fn end_location_link(&mut self) {}\n+}\n+\n+// `core::Formatter` will ignore metadata\n+impl HirWrite for fmt::Formatter<'_> {\n+    fn start_location_link(&mut self, _: ModuleDefId) {}\n+    fn end_location_link(&mut self) {}\n+}\n+\n pub struct HirFormatter<'a> {\n     pub db: &'a dyn HirDatabase,\n-    fmt: &'a mut dyn fmt::Write,\n+    fmt: &'a mut dyn HirWrite,\n     buf: String,\n     curr_size: usize,\n     pub(crate) max_size: Option<usize>,\n     omit_verbose_types: bool,\n     display_target: DisplayTarget,\n }\n \n+impl HirFormatter<'_> {\n+    fn start_location_link(&mut self, location: ModuleDefId) {\n+        self.fmt.start_location_link(location);\n+    }\n+\n+    fn end_location_link(&mut self) {\n+        self.fmt.end_location_link();\n+    }\n+}\n+\n pub trait HirDisplay {\n     fn hir_fmt(&self, f: &mut HirFormatter<'_>) -> Result<(), HirDisplayError>;\n \n@@ -245,20 +273,26 @@ pub struct HirDisplayWrapper<'a, T> {\n     display_target: DisplayTarget,\n }\n \n-impl<'a, T> fmt::Display for HirDisplayWrapper<'a, T>\n-where\n-    T: HirDisplay,\n-{\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.t.hir_fmt(&mut HirFormatter {\n+impl<T: HirDisplay> HirDisplayWrapper<'_, T> {\n+    pub fn write_to<F: HirWrite>(&self, f: &mut F) -> Result<(), HirDisplayError> {\n+        self.t.hir_fmt(&mut HirFormatter {\n             db: self.db,\n             fmt: f,\n             buf: String::with_capacity(20),\n             curr_size: 0,\n             max_size: self.max_size,\n             omit_verbose_types: self.omit_verbose_types,\n             display_target: self.display_target,\n-        }) {\n+        })\n+    }\n+}\n+\n+impl<'a, T> fmt::Display for HirDisplayWrapper<'a, T>\n+where\n+    T: HirDisplay,\n+{\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self.write_to(f) {\n             Ok(()) => Ok(()),\n             Err(HirDisplayError::FmtError) => Err(fmt::Error),\n             Err(HirDisplayError::DisplaySourceCodeError(_)) => {\n@@ -530,6 +564,7 @@ impl HirDisplay for Ty {\n                 }\n             }\n             TyKind::Adt(AdtId(def_id), parameters) => {\n+                f.start_location_link((*def_id).into());\n                 match f.display_target {\n                     DisplayTarget::Diagnostics | DisplayTarget::Test => {\n                         let name = match *def_id {\n@@ -554,6 +589,7 @@ impl HirDisplay for Ty {\n                         }\n                     }\n                 }\n+                f.end_location_link();\n \n                 if parameters.len(Interner) > 0 {\n                     let parameters_to_write = if f.display_target.is_source_code()"}, {"sha": "80b3a7b02bcb81d20d36478f10098d243e13bb5d", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/801a2231bf154a720db97d50e8e581d1f8666e2a/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/801a2231bf154a720db97d50e8e581d1f8666e2a/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=801a2231bf154a720db97d50e8e581d1f8666e2a", "patch": "@@ -114,12 +114,20 @@ pub use {\n         path::{ModPath, PathKind},\n         type_ref::{Mutability, TypeRef},\n         visibility::Visibility,\n+        // FIXME: This is here since it is input of a method in `HirWrite`\n+        // and things outside of hir need to implement that trait. We probably\n+        // should move whole `hir_ty::display` to this crate so we will become\n+        // able to use `ModuleDef` or `Definition` instead of `ModuleDefId`.\n+        ModuleDefId,\n     },\n     hir_expand::{\n         name::{known, Name},\n         ExpandResult, HirFileId, InFile, MacroFile, Origin,\n     },\n-    hir_ty::{display::HirDisplay, PointerCast, Safety},\n+    hir_ty::{\n+        display::{HirDisplay, HirWrite},\n+        PointerCast, Safety,\n+    },\n };\n \n // These are negative re-exports: pub using these names is forbidden, they"}, {"sha": "8163697fbfcb8e4ae11904a35579e87ba64b2cb6", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 104, "deletions": 24, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/801a2231bf154a720db97d50e8e581d1f8666e2a/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/801a2231bf154a720db97d50e8e581d1f8666e2a/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=801a2231bf154a720db97d50e8e581d1f8666e2a", "patch": "@@ -1,15 +1,19 @@\n-use std::fmt;\n+use std::{\n+    fmt::{self, Write},\n+    mem::take,\n+};\n \n use either::Either;\n-use hir::{known, HasVisibility, HirDisplay, Semantics};\n+use hir::{known, HasVisibility, HirDisplay, HirWrite, ModuleDef, ModuleDefId, Semantics};\n use ide_db::{base_db::FileRange, famous_defs::FamousDefs, RootDatabase};\n use itertools::Itertools;\n+use stdx::never;\n use syntax::{\n     ast::{self, AstNode},\n     match_ast, NodeOrToken, SyntaxNode, TextRange, TextSize,\n };\n \n-use crate::FileId;\n+use crate::{navigation_target::TryToNav, FileId};\n \n mod closing_brace;\n mod implicit_static;\n@@ -89,6 +93,7 @@ pub enum InlayTooltip {\n     HoverOffset(FileId, TextSize),\n }\n \n+#[derive(Default)]\n pub struct InlayHintLabel {\n     pub parts: Vec<InlayHintLabelPart>,\n }\n@@ -172,6 +177,96 @@ impl fmt::Debug for InlayHintLabelPart {\n     }\n }\n \n+#[derive(Debug)]\n+struct InlayHintLabelBuilder<'a> {\n+    db: &'a RootDatabase,\n+    result: InlayHintLabel,\n+    last_part: String,\n+    location: Option<FileRange>,\n+}\n+\n+impl fmt::Write for InlayHintLabelBuilder<'_> {\n+    fn write_str(&mut self, s: &str) -> fmt::Result {\n+        self.last_part.write_str(s)\n+    }\n+}\n+\n+impl HirWrite for InlayHintLabelBuilder<'_> {\n+    fn start_location_link(&mut self, def: ModuleDefId) {\n+        if self.location.is_some() {\n+            never!(\"location link is already started\");\n+        }\n+        self.make_new_part();\n+        let Some(location) = ModuleDef::from(def).try_to_nav(self.db) else { return };\n+        let location =\n+            FileRange { file_id: location.file_id, range: location.focus_or_full_range() };\n+        self.location = Some(location);\n+    }\n+\n+    fn end_location_link(&mut self) {\n+        self.make_new_part();\n+    }\n+}\n+\n+impl InlayHintLabelBuilder<'_> {\n+    fn make_new_part(&mut self) {\n+        self.result.parts.push(InlayHintLabelPart {\n+            text: take(&mut self.last_part),\n+            linked_location: self.location.take(),\n+        });\n+    }\n+\n+    fn finish(mut self) -> InlayHintLabel {\n+        self.make_new_part();\n+        self.result\n+    }\n+}\n+\n+fn label_of_ty(\n+    sema: &Semantics<'_, RootDatabase>,\n+    desc_pat: &impl AstNode,\n+    config: &InlayHintsConfig,\n+    ty: hir::Type,\n+) -> Option<InlayHintLabel> {\n+    fn rec(\n+        sema: &Semantics<'_, RootDatabase>,\n+        famous_defs: &FamousDefs<'_, '_>,\n+        mut max_length: Option<usize>,\n+        ty: hir::Type,\n+        label_builder: &mut InlayHintLabelBuilder<'_>,\n+    ) {\n+        let iter_item_type = hint_iterator(sema, &famous_defs, &ty);\n+        match iter_item_type {\n+            Some(ty) => {\n+                const LABEL_START: &str = \"impl Iterator<Item = \";\n+                const LABEL_END: &str = \">\";\n+\n+                max_length =\n+                    max_length.map(|len| len.saturating_sub(LABEL_START.len() + LABEL_END.len()));\n+\n+                label_builder.write_str(LABEL_START).unwrap();\n+                rec(sema, famous_defs, max_length, ty, label_builder);\n+                label_builder.write_str(LABEL_END).unwrap();\n+            }\n+            None => {\n+                let _ = ty.display_truncated(sema.db, max_length).write_to(label_builder);\n+            }\n+        };\n+    }\n+\n+    let krate = sema.scope(desc_pat.syntax())?.krate();\n+    let famous_defs = FamousDefs(sema, krate);\n+    let mut label_builder = InlayHintLabelBuilder {\n+        db: sema.db,\n+        last_part: String::new(),\n+        location: None,\n+        result: InlayHintLabel::default(),\n+    };\n+    rec(sema, &famous_defs, config.max_length, ty, &mut label_builder);\n+    let r = label_builder.finish();\n+    Some(r)\n+}\n+\n // Feature: Inlay Hints\n //\n // rust-analyzer shows additional information inline with the source code.\n@@ -224,7 +319,7 @@ pub(crate) fn inlay_hints(\n \n fn hints(\n     hints: &mut Vec<InlayHint>,\n-    famous_defs @ FamousDefs(sema, _): &FamousDefs<'_, '_>,\n+    FamousDefs(sema, _): &FamousDefs<'_, '_>,\n     config: &InlayHintsConfig,\n     file_id: FileId,\n     node: SyntaxNode,\n@@ -233,14 +328,14 @@ fn hints(\n     match_ast! {\n         match node {\n             ast::Expr(expr) => {\n-                chaining::hints(hints, sema, &famous_defs, config, file_id, &expr);\n+                chaining::hints(hints, sema, config, file_id, &expr);\n                 adjustment::hints(hints, sema, config, &expr);\n                 match expr {\n                     ast::Expr::CallExpr(it) => param_name::hints(hints, sema, config, ast::Expr::from(it)),\n                     ast::Expr::MethodCallExpr(it) => {\n                         param_name::hints(hints, sema, config, ast::Expr::from(it))\n                     }\n-                    ast::Expr::ClosureExpr(it) => closure_ret::hints(hints, sema, &famous_defs, config, file_id, it),\n+                    ast::Expr::ClosureExpr(it) => closure_ret::hints(hints, sema, config, file_id, it),\n                     // We could show reborrows for all expressions, but usually that is just noise to the user\n                     // and the main point here is to show why \"moving\" a mutable reference doesn't necessarily move it\n                     // ast::Expr::PathExpr(_) => reborrow_hints(hints, sema, config, &expr),\n@@ -270,13 +365,12 @@ fn hints(\n     };\n }\n \n-/// Checks if the type is an Iterator from std::iter and replaces its hint with an `impl Iterator<Item = Ty>`.\n+/// Checks if the type is an Iterator from std::iter and returns its item type.\n fn hint_iterator(\n     sema: &Semantics<'_, RootDatabase>,\n     famous_defs: &FamousDefs<'_, '_>,\n-    config: &InlayHintsConfig,\n     ty: &hir::Type,\n-) -> Option<String> {\n+) -> Option<hir::Type> {\n     let db = sema.db;\n     let strukt = ty.strip_references().as_adt()?;\n     let krate = strukt.module(db).krate();\n@@ -299,21 +393,7 @@ fn hint_iterator(\n             _ => None,\n         })?;\n         if let Some(ty) = ty.normalize_trait_assoc_type(db, &[], assoc_type_item) {\n-            const LABEL_START: &str = \"impl Iterator<Item = \";\n-            const LABEL_END: &str = \">\";\n-\n-            let ty_display = hint_iterator(sema, famous_defs, config, &ty)\n-                .map(|assoc_type_impl| assoc_type_impl.to_string())\n-                .unwrap_or_else(|| {\n-                    ty.display_truncated(\n-                        db,\n-                        config\n-                            .max_length\n-                            .map(|len| len.saturating_sub(LABEL_START.len() + LABEL_END.len())),\n-                    )\n-                    .to_string()\n-                });\n-            return Some(format!(\"{}{}{}\", LABEL_START, ty_display, LABEL_END));\n+            return Some(ty);\n         }\n     }\n "}, {"sha": "c9f787e07488c340290a06de13f7da00319baeb3", "filename": "crates/ide/src/inlay_hints/bind_pat.rs", "status": "modified", "additions": 37, "deletions": 21, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/801a2231bf154a720db97d50e8e581d1f8666e2a/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/801a2231bf154a720db97d50e8e581d1f8666e2a/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs?ref=801a2231bf154a720db97d50e8e581d1f8666e2a", "patch": "@@ -3,8 +3,8 @@\n //! fn f(a: i32, b: i32) -> i32 { a + b }\n //! let _x /* i32 */= f(4, 4);\n //! ```\n-use hir::{HirDisplay, Semantics, TypeInfo};\n-use ide_db::{base_db::FileId, famous_defs::FamousDefs, RootDatabase};\n+use hir::{Semantics, TypeInfo};\n+use ide_db::{base_db::FileId, RootDatabase};\n \n use itertools::Itertools;\n use syntax::{\n@@ -13,10 +13,11 @@ use syntax::{\n };\n \n use crate::{\n-    inlay_hints::{closure_has_block_body, hint_iterator},\n-    InlayHint, InlayHintsConfig, InlayKind, InlayTooltip,\n+    inlay_hints::closure_has_block_body, InlayHint, InlayHintsConfig, InlayKind, InlayTooltip,\n };\n \n+use super::label_of_ty;\n+\n pub(super) fn hints(\n     acc: &mut Vec<InlayHint>,\n     sema: &Semantics<'_, RootDatabase>,\n@@ -36,30 +37,21 @@ pub(super) fn hints(\n         return None;\n     }\n \n-    let krate = sema.scope(desc_pat.syntax())?.krate();\n-    let famous_defs = FamousDefs(sema, krate);\n-    let label = hint_iterator(sema, &famous_defs, config, &ty);\n+    let label = label_of_ty(sema, desc_pat, config, ty)?;\n \n-    let label = match label {\n-        Some(label) => label,\n-        None => {\n-            let ty_name = ty.display_truncated(sema.db, config.max_length).to_string();\n-            if config.hide_named_constructor_hints\n-                && is_named_constructor(sema, pat, &ty_name).is_some()\n-            {\n-                return None;\n-            }\n-            ty_name\n-        }\n-    };\n+    if config.hide_named_constructor_hints\n+        && is_named_constructor(sema, pat, &label.to_string()).is_some()\n+    {\n+        return None;\n+    }\n \n     acc.push(InlayHint {\n         range: match pat.name() {\n             Some(name) => name.syntax().text_range(),\n             None => pat.syntax().text_range(),\n         },\n         kind: InlayKind::TypeHint,\n-        label: label.into(),\n+        label,\n         tooltip: pat\n             .name()\n             .map(|it| it.syntax().text_range())\n@@ -346,7 +338,31 @@ fn main(a: SliceIter<'_, Container>) {\n                         range: 484..485,\n                         kind: ChainingHint,\n                         label: [\n-                            \"SliceIter<Container>\",\n+                            \"\",\n+                            InlayHintLabelPart {\n+                                text: \"SliceIter\",\n+                                linked_location: Some(\n+                                    FileRange {\n+                                        file_id: FileId(\n+                                            0,\n+                                        ),\n+                                        range: 289..298,\n+                                    },\n+                                ),\n+                            },\n+                            \"<\",\n+                            InlayHintLabelPart {\n+                                text: \"Container\",\n+                                linked_location: Some(\n+                                    FileRange {\n+                                        file_id: FileId(\n+                                            0,\n+                                        ),\n+                                        range: 238..247,\n+                                    },\n+                                ),\n+                            },\n+                            \">\",\n                         ],\n                         tooltip: Some(\n                             HoverRanged("}, {"sha": "c9aabcbb044a3a4a6b46a7d36c346d43d07779f6", "filename": "crates/ide/src/inlay_hints/chaining.rs", "status": "modified", "additions": 160, "deletions": 19, "changes": 179, "blob_url": "https://github.com/rust-lang/rust/blob/801a2231bf154a720db97d50e8e581d1f8666e2a/crates%2Fide%2Fsrc%2Finlay_hints%2Fchaining.rs", "raw_url": "https://github.com/rust-lang/rust/raw/801a2231bf154a720db97d50e8e581d1f8666e2a/crates%2Fide%2Fsrc%2Finlay_hints%2Fchaining.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fchaining.rs?ref=801a2231bf154a720db97d50e8e581d1f8666e2a", "patch": "@@ -1,19 +1,18 @@\n //! Implementation of \"chaining\" inlay hints.\n-use hir::{HirDisplay, Semantics};\n-use ide_db::{famous_defs::FamousDefs, RootDatabase};\n+use hir::Semantics;\n+use ide_db::RootDatabase;\n use syntax::{\n     ast::{self, AstNode},\n     Direction, NodeOrToken, SyntaxKind, T,\n };\n \n-use crate::{\n-    inlay_hints::hint_iterator, FileId, InlayHint, InlayHintsConfig, InlayKind, InlayTooltip,\n-};\n+use crate::{FileId, InlayHint, InlayHintsConfig, InlayKind, InlayTooltip};\n+\n+use super::label_of_ty;\n \n pub(super) fn hints(\n     acc: &mut Vec<InlayHint>,\n     sema: &Semantics<'_, RootDatabase>,\n-    famous_defs: &FamousDefs<'_, '_>,\n     config: &InlayHintsConfig,\n     file_id: FileId,\n     expr: &ast::Expr,\n@@ -62,9 +61,7 @@ pub(super) fn hints(\n             acc.push(InlayHint {\n                 range: expr.syntax().text_range(),\n                 kind: InlayKind::ChainingHint,\n-                label: hint_iterator(sema, &famous_defs, config, &ty)\n-                    .unwrap_or_else(|| ty.display_truncated(sema.db, config.max_length).to_string())\n-                    .into(),\n+                label: label_of_ty(sema, desc_expr, config, ty)?,\n                 tooltip: Some(InlayTooltip::HoverRanged(file_id, expr.syntax().text_range())),\n             });\n         }\n@@ -110,7 +107,19 @@ fn main() {\n                         range: 147..172,\n                         kind: ChainingHint,\n                         label: [\n-                            \"B\",\n+                            \"\",\n+                            InlayHintLabelPart {\n+                                text: \"B\",\n+                                linked_location: Some(\n+                                    FileRange {\n+                                        file_id: FileId(\n+                                            0,\n+                                        ),\n+                                        range: 63..64,\n+                                    },\n+                                ),\n+                            },\n+                            \"\",\n                         ],\n                         tooltip: Some(\n                             HoverRanged(\n@@ -125,7 +134,19 @@ fn main() {\n                         range: 147..154,\n                         kind: ChainingHint,\n                         label: [\n-                            \"A\",\n+                            \"\",\n+                            InlayHintLabelPart {\n+                                text: \"A\",\n+                                linked_location: Some(\n+                                    FileRange {\n+                                        file_id: FileId(\n+                                            0,\n+                                        ),\n+                                        range: 7..8,\n+                                    },\n+                                ),\n+                            },\n+                            \"\",\n                         ],\n                         tooltip: Some(\n                             HoverRanged(\n@@ -185,7 +206,19 @@ fn main() {\n                         range: 143..190,\n                         kind: ChainingHint,\n                         label: [\n-                            \"C\",\n+                            \"\",\n+                            InlayHintLabelPart {\n+                                text: \"C\",\n+                                linked_location: Some(\n+                                    FileRange {\n+                                        file_id: FileId(\n+                                            0,\n+                                        ),\n+                                        range: 51..52,\n+                                    },\n+                                ),\n+                            },\n+                            \"\",\n                         ],\n                         tooltip: Some(\n                             HoverRanged(\n@@ -200,7 +233,19 @@ fn main() {\n                         range: 143..179,\n                         kind: ChainingHint,\n                         label: [\n-                            \"B\",\n+                            \"\",\n+                            InlayHintLabelPart {\n+                                text: \"B\",\n+                                linked_location: Some(\n+                                    FileRange {\n+                                        file_id: FileId(\n+                                            0,\n+                                        ),\n+                                        range: 29..30,\n+                                    },\n+                                ),\n+                            },\n+                            \"\",\n                         ],\n                         tooltip: Some(\n                             HoverRanged(\n@@ -245,7 +290,31 @@ fn main() {\n                         range: 246..283,\n                         kind: ChainingHint,\n                         label: [\n-                            \"B<X<i32, bool>>\",\n+                            \"\",\n+                            InlayHintLabelPart {\n+                                text: \"B\",\n+                                linked_location: Some(\n+                                    FileRange {\n+                                        file_id: FileId(\n+                                            0,\n+                                        ),\n+                                        range: 23..24,\n+                                    },\n+                                ),\n+                            },\n+                            \"<\",\n+                            InlayHintLabelPart {\n+                                text: \"X\",\n+                                linked_location: Some(\n+                                    FileRange {\n+                                        file_id: FileId(\n+                                            0,\n+                                        ),\n+                                        range: 55..56,\n+                                    },\n+                                ),\n+                            },\n+                            \"<i32, bool>>\",\n                         ],\n                         tooltip: Some(\n                             HoverRanged(\n@@ -260,7 +329,31 @@ fn main() {\n                         range: 246..265,\n                         kind: ChainingHint,\n                         label: [\n-                            \"A<X<i32, bool>>\",\n+                            \"\",\n+                            InlayHintLabelPart {\n+                                text: \"A\",\n+                                linked_location: Some(\n+                                    FileRange {\n+                                        file_id: FileId(\n+                                            0,\n+                                        ),\n+                                        range: 7..8,\n+                                    },\n+                                ),\n+                            },\n+                            \"<\",\n+                            InlayHintLabelPart {\n+                                text: \"X\",\n+                                linked_location: Some(\n+                                    FileRange {\n+                                        file_id: FileId(\n+                                            0,\n+                                        ),\n+                                        range: 55..56,\n+                                    },\n+                                ),\n+                            },\n+                            \"<i32, bool>>\",\n                         ],\n                         tooltip: Some(\n                             HoverRanged(\n@@ -352,7 +445,19 @@ fn main() {\n                         range: 174..189,\n                         kind: ChainingHint,\n                         label: [\n-                            \"&mut MyIter\",\n+                            \"&mut \",\n+                            InlayHintLabelPart {\n+                                text: \"MyIter\",\n+                                linked_location: Some(\n+                                    FileRange {\n+                                        file_id: FileId(\n+                                            0,\n+                                        ),\n+                                        range: 24..30,\n+                                    },\n+                                ),\n+                            },\n+                            \"\",\n                         ],\n                         tooltip: Some(\n                             HoverRanged(\n@@ -396,7 +501,19 @@ fn main() {\n                         range: 124..130,\n                         kind: TypeHint,\n                         label: [\n-                            \"Struct\",\n+                            \"\",\n+                            InlayHintLabelPart {\n+                                text: \"Struct\",\n+                                linked_location: Some(\n+                                    FileRange {\n+                                        file_id: FileId(\n+                                            0,\n+                                        ),\n+                                        range: 7..13,\n+                                    },\n+                                ),\n+                            },\n+                            \"\",\n                         ],\n                         tooltip: Some(\n                             HoverRanged(\n@@ -411,7 +528,19 @@ fn main() {\n                         range: 145..185,\n                         kind: ChainingHint,\n                         label: [\n-                            \"Struct\",\n+                            \"\",\n+                            InlayHintLabelPart {\n+                                text: \"Struct\",\n+                                linked_location: Some(\n+                                    FileRange {\n+                                        file_id: FileId(\n+                                            0,\n+                                        ),\n+                                        range: 7..13,\n+                                    },\n+                                ),\n+                            },\n+                            \"\",\n                         ],\n                         tooltip: Some(\n                             HoverRanged(\n@@ -426,7 +555,19 @@ fn main() {\n                         range: 145..168,\n                         kind: ChainingHint,\n                         label: [\n-                            \"Struct\",\n+                            \"\",\n+                            InlayHintLabelPart {\n+                                text: \"Struct\",\n+                                linked_location: Some(\n+                                    FileRange {\n+                                        file_id: FileId(\n+                                            0,\n+                                        ),\n+                                        range: 7..13,\n+                                    },\n+                                ),\n+                            },\n+                            \"\",\n                         ],\n                         tooltip: Some(\n                             HoverRanged("}, {"sha": "247a4abcc5654e916f12a5a1e6a0afc4729ea19c", "filename": "crates/ide/src/inlay_hints/closure_ret.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/801a2231bf154a720db97d50e8e581d1f8666e2a/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosure_ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/801a2231bf154a720db97d50e8e581d1f8666e2a/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosure_ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosure_ret.rs?ref=801a2231bf154a720db97d50e8e581d1f8666e2a", "patch": "@@ -1,17 +1,18 @@\n //! Implementation of \"closure return type\" inlay hints.\n-use hir::{HirDisplay, Semantics};\n-use ide_db::{base_db::FileId, famous_defs::FamousDefs, RootDatabase};\n+use hir::Semantics;\n+use ide_db::{base_db::FileId, RootDatabase};\n use syntax::ast::{self, AstNode};\n \n use crate::{\n-    inlay_hints::{closure_has_block_body, hint_iterator},\n-    ClosureReturnTypeHints, InlayHint, InlayHintsConfig, InlayKind, InlayTooltip,\n+    inlay_hints::closure_has_block_body, ClosureReturnTypeHints, InlayHint, InlayHintsConfig,\n+    InlayKind, InlayTooltip,\n };\n \n+use super::label_of_ty;\n+\n pub(super) fn hints(\n     acc: &mut Vec<InlayHint>,\n     sema: &Semantics<'_, RootDatabase>,\n-    famous_defs: &FamousDefs<'_, '_>,\n     config: &InlayHintsConfig,\n     file_id: FileId,\n     closure: ast::ClosureExpr,\n@@ -42,9 +43,7 @@ pub(super) fn hints(\n     acc.push(InlayHint {\n         range: param_list.syntax().text_range(),\n         kind: InlayKind::ClosureReturnTypeHint,\n-        label: hint_iterator(sema, &famous_defs, config, &ty)\n-            .unwrap_or_else(|| ty.display_truncated(sema.db, config.max_length).to_string())\n-            .into(),\n+        label: label_of_ty(sema, &param_list, config, ty)?,\n         tooltip: Some(InlayTooltip::HoverRanged(file_id, param_list.syntax().text_range())),\n     });\n     Some(())"}]}