{"sha": "95b989ec3059eca140d9bfffee1bc52e30f9d17b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1Yjk4OWVjMzA1OWVjYTE0MGQ5YmZmZmVlMWJjNTJlMzBmOWQxN2I=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-25T17:50:42Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-25T17:50:42Z"}, "message": "Simplify", "tree": {"sha": "4d3872fa4b9987041627e31fd15c459bd3355402", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d3872fa4b9987041627e31fd15c459bd3355402"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95b989ec3059eca140d9bfffee1bc52e30f9d17b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95b989ec3059eca140d9bfffee1bc52e30f9d17b", "html_url": "https://github.com/rust-lang/rust/commit/95b989ec3059eca140d9bfffee1bc52e30f9d17b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95b989ec3059eca140d9bfffee1bc52e30f9d17b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "726938f598378f6d88b6b5ee91e1cea8f323029d", "url": "https://api.github.com/repos/rust-lang/rust/commits/726938f598378f6d88b6b5ee91e1cea8f323029d", "html_url": "https://github.com/rust-lang/rust/commit/726938f598378f6d88b6b5ee91e1cea8f323029d"}], "stats": {"total": 37, "additions": 17, "deletions": 20}, "files": [{"sha": "4bbe5cb12d2463c7765847e28b8efdf2d14a25d4", "filename": "crates/ra_prof/src/hprof.rs", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/95b989ec3059eca140d9bfffee1bc52e30f9d17b/crates%2Fra_prof%2Fsrc%2Fhprof.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b989ec3059eca140d9bfffee1bc52e30f9d17b/crates%2Fra_prof%2Fsrc%2Fhprof.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2Fsrc%2Fhprof.rs?ref=95b989ec3059eca140d9bfffee1bc52e30f9d17b", "patch": "@@ -77,6 +77,19 @@ impl Profiler {\n     }\n }\n \n+impl Drop for Profiler {\n+    fn drop(&mut self) {\n+        match self {\n+            Profiler { label: Some(label), detail } => {\n+                PROFILE_STACK.with(|stack| {\n+                    stack.borrow_mut().pop(label, detail.take());\n+                });\n+            }\n+            Profiler { label: None, .. } => (),\n+        }\n+    }\n+}\n+\n static PROFILING_ENABLED: AtomicBool = AtomicBool::new(false);\n static FILTER: Lazy<RwLock<Filter>> = Lazy::new(Default::default);\n thread_local!(static PROFILE_STACK: RefCell<ProfileStack> = RefCell::new(ProfileStack::new()));\n@@ -90,10 +103,6 @@ struct Filter {\n }\n \n impl Filter {\n-    fn new(depth: usize, allowed: HashSet<String>, longer_than: Duration) -> Filter {\n-        Filter { depth, allowed, longer_than, version: 0 }\n-    }\n-\n     fn disabled() -> Filter {\n         Filter::default()\n     }\n@@ -116,7 +125,7 @@ impl Filter {\n         };\n         let allowed =\n             if spec == \"*\" { HashSet::new() } else { spec.split('|').map(String::from).collect() };\n-        Filter::new(depth, allowed, longer_than)\n+        Filter { depth, allowed, longer_than, version: 0 }\n     }\n \n     fn install(mut self) {\n@@ -171,28 +180,16 @@ impl ProfileStack {\n         let level = self.starts.len();\n         self.messages.push(Message { level, duration, label, detail });\n         if level == 0 {\n-            let stdout = stderr();\n             let longer_than = self.filter.longer_than;\n             // Convert to millis for comparison to avoid problems with rounding\n             // (otherwise we could print `0ms` despite user's `>0` filter when\n             // `duration` is just a few nanos).\n             if duration.as_millis() > longer_than.as_millis() {\n-                print(&self.messages, longer_than, &mut stdout.lock());\n+                let stderr = stderr();\n+                print(&self.messages, longer_than, &mut stderr.lock());\n             }\n             self.messages.clear();\n-        }\n-    }\n-}\n-\n-impl Drop for Profiler {\n-    fn drop(&mut self) {\n-        match self {\n-            Profiler { label: Some(label), detail } => {\n-                PROFILE_STACK.with(|stack| {\n-                    stack.borrow_mut().pop(label, detail.take());\n-                });\n-            }\n-            Profiler { label: None, .. } => (),\n+            assert!(self.starts.is_empty())\n         }\n     }\n }"}]}