{"sha": "d40f24e956a698e47a209541031c4045acc5a684", "node_id": "C_kwDOAAsO6NoAKGQ0MGYyNGU5NTZhNjk4ZTQ3YTIwOTU0MTAzMWM0MDQ1YWNjNWE2ODQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-16T07:45:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-16T07:45:03Z"}, "message": "Auto merge of #98161 - matthiaskrgr:rollup-8csenk9, r=matthiaskrgr\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #97757 (Support lint expectations for `--force-warn` lints (RFC 2383))\n - #98125 (Entry and_modify doc)\n - #98137 (debuginfo: Fix NatVis for Rc and Arc with unsized pointees.)\n - #98147 (Make #[cfg(bootstrap)] not error in proc macros on later stages )\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "2e7c5ead17356f49f1808e39d3a47a904b09be07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e7c5ead17356f49f1808e39d3a47a904b09be07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d40f24e956a698e47a209541031c4045acc5a684", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d40f24e956a698e47a209541031c4045acc5a684", "html_url": "https://github.com/rust-lang/rust/commit/d40f24e956a698e47a209541031c4045acc5a684", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d40f24e956a698e47a209541031c4045acc5a684/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "392d2728683f140f6125732240e462c43c5caff4", "url": "https://api.github.com/repos/rust-lang/rust/commits/392d2728683f140f6125732240e462c43c5caff4", "html_url": "https://github.com/rust-lang/rust/commit/392d2728683f140f6125732240e462c43c5caff4"}, {"sha": "97a7a3c9ea29b13ced87c4641e5aea10cfb89253", "url": "https://api.github.com/repos/rust-lang/rust/commits/97a7a3c9ea29b13ced87c4641e5aea10cfb89253", "html_url": "https://github.com/rust-lang/rust/commit/97a7a3c9ea29b13ced87c4641e5aea10cfb89253"}], "stats": {"total": 683, "additions": 550, "deletions": 133}, "files": [{"sha": "ab8874d796df22d053c7ef9afdeefb3cae4098c0", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d40f24e956a698e47a209541031c4045acc5a684/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d40f24e956a698e47a209541031c4045acc5a684/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=d40f24e956a698e47a209541031c4045acc5a684", "patch": "@@ -336,7 +336,7 @@ fn report_inline_asm(\n     }\n     let level = match level {\n         llvm::DiagnosticLevel::Error => Level::Error { lint: false },\n-        llvm::DiagnosticLevel::Warning => Level::Warning,\n+        llvm::DiagnosticLevel::Warning => Level::Warning(None),\n         llvm::DiagnosticLevel::Note | llvm::DiagnosticLevel::Remark => Level::Note,\n     };\n     cgcx.diag_emitter.inline_asm_error(cookie as u32, msg, level, source);"}, {"sha": "632f07c5c2d80d63ba5515f0550f5e0bfcca0a48", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d40f24e956a698e47a209541031c4045acc5a684/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d40f24e956a698e47a209541031c4045acc5a684/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=d40f24e956a698e47a209541031c4045acc5a684", "patch": "@@ -1761,7 +1761,7 @@ impl SharedEmitterMain {\n \n                     let mut err = match level {\n                         Level::Error { lint: false } => sess.struct_err(msg).forget_guarantee(),\n-                        Level::Warning => sess.struct_warn(msg),\n+                        Level::Warning(_) => sess.struct_warn(msg),\n                         Level::Note => sess.struct_note_without_error(msg),\n                         _ => bug!(\"Invalid inline asm diagnostic level\"),\n                     };"}, {"sha": "0fcd61d1e58c37f2b06456dd7149d20c0108f2f3", "filename": "compiler/rustc_errors/src/annotate_snippet_emitter_writer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d40f24e956a698e47a209541031c4045acc5a684/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d40f24e956a698e47a209541031c4045acc5a684/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs?ref=d40f24e956a698e47a209541031c4045acc5a684", "patch": "@@ -87,7 +87,7 @@ fn annotation_type_for_level(level: Level) -> AnnotationType {\n         Level::Bug | Level::DelayedBug | Level::Fatal | Level::Error { .. } => {\n             AnnotationType::Error\n         }\n-        Level::Warning => AnnotationType::Warning,\n+        Level::Warning(_) => AnnotationType::Warning,\n         Level::Note | Level::OnceNote => AnnotationType::Note,\n         Level::Help => AnnotationType::Help,\n         // FIXME(#59346): Not sure how to map this level"}, {"sha": "b8545139cecc11f484a7187dc6676e2dfe239d5f", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d40f24e956a698e47a209541031c4045acc5a684/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d40f24e956a698e47a209541031c4045acc5a684/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=d40f24e956a698e47a209541031c4045acc5a684", "patch": "@@ -209,7 +209,7 @@ impl Diagnostic {\n             | Level::Error { .. }\n             | Level::FailureNote => true,\n \n-            Level::Warning\n+            Level::Warning(_)\n             | Level::Note\n             | Level::OnceNote\n             | Level::Help\n@@ -222,7 +222,9 @@ impl Diagnostic {\n         &mut self,\n         unstable_to_stable: &FxHashMap<LintExpectationId, LintExpectationId>,\n     ) {\n-        if let Level::Expect(expectation_id) = &mut self.level {\n+        if let Level::Expect(expectation_id) | Level::Warning(Some(expectation_id)) =\n+            &mut self.level\n+        {\n             if expectation_id.is_stable() {\n                 return;\n             }\n@@ -450,7 +452,7 @@ impl Diagnostic {\n     /// Add a warning attached to this diagnostic.\n     #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn warn(&mut self, msg: impl Into<SubdiagnosticMessage>) -> &mut Self {\n-        self.sub(Level::Warning, msg, MultiSpan::new(), None);\n+        self.sub(Level::Warning(None), msg, MultiSpan::new(), None);\n         self\n     }\n \n@@ -462,7 +464,7 @@ impl Diagnostic {\n         sp: S,\n         msg: impl Into<SubdiagnosticMessage>,\n     ) -> &mut Self {\n-        self.sub(Level::Warning, msg, sp.into(), None);\n+        self.sub(Level::Warning(None), msg, sp.into(), None);\n         self\n     }\n "}, {"sha": "d4d1491c16945f40d2b1225bac3be0a39a3bc190", "filename": "compiler/rustc_errors/src/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d40f24e956a698e47a209541031c4045acc5a684/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d40f24e956a698e47a209541031c4045acc5a684/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fjson.rs?ref=d40f24e956a698e47a209541031c4045acc5a684", "patch": "@@ -154,7 +154,7 @@ impl Emitter for JsonEmitter {\n             .into_iter()\n             .map(|mut diag| {\n                 if diag.level == crate::Level::Allow {\n-                    diag.level = crate::Level::Warning;\n+                    diag.level = crate::Level::Warning(None);\n                 }\n                 FutureBreakageItem { diagnostic: Diagnostic::from_errors_diagnostic(&diag, self) }\n             })"}, {"sha": "aa4ea82dffb6147566c19c41b45ffc49f3f123c9", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 64, "deletions": 32, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/d40f24e956a698e47a209541031c4045acc5a684/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d40f24e956a698e47a209541031c4045acc5a684/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=d40f24e956a698e47a209541031c4045acc5a684", "patch": "@@ -660,6 +660,23 @@ impl Handler {\n         result\n     }\n \n+    /// Construct a builder at the `Warning` level at the given `span` and with the `msg`.\n+    /// The `id` is used for lint emissions which should also fulfill a lint expectation.\n+    ///\n+    /// Attempting to `.emit()` the builder will only emit if either:\n+    /// * `can_emit_warnings` is `true`\n+    /// * `is_force_warn` was set in `DiagnosticId::Lint`\n+    pub fn struct_span_warn_with_expectation(\n+        &self,\n+        span: impl Into<MultiSpan>,\n+        msg: impl Into<DiagnosticMessage>,\n+        id: LintExpectationId,\n+    ) -> DiagnosticBuilder<'_, ()> {\n+        let mut result = self.struct_warn_with_expectation(msg, id);\n+        result.set_span(span);\n+        result\n+    }\n+\n     /// Construct a builder at the `Allow` level at the given `span` and with the `msg`.\n     #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_span_allow(\n@@ -693,7 +710,21 @@ impl Handler {\n     /// * `is_force_warn` was set in `DiagnosticId::Lint`\n     #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_warn(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n-        DiagnosticBuilder::new(self, Level::Warning, msg)\n+        DiagnosticBuilder::new(self, Level::Warning(None), msg)\n+    }\n+\n+    /// Construct a builder at the `Warning` level with the `msg`. The `id` is used for\n+    /// lint emissions which should also fulfill a lint expectation.\n+    ///\n+    /// Attempting to `.emit()` the builder will only emit if either:\n+    /// * `can_emit_warnings` is `true`\n+    /// * `is_force_warn` was set in `DiagnosticId::Lint`\n+    pub fn struct_warn_with_expectation(\n+        &self,\n+        msg: impl Into<DiagnosticMessage>,\n+        id: LintExpectationId,\n+    ) -> DiagnosticBuilder<'_, ()> {\n+        DiagnosticBuilder::new(self, Level::Warning(Some(id)), msg)\n     }\n \n     /// Construct a builder at the `Allow` level with the `msg`.\n@@ -864,7 +895,7 @@ impl Handler {\n \n     #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn span_warn(&self, span: impl Into<MultiSpan>, msg: impl Into<DiagnosticMessage>) {\n-        self.emit_diag_at_span(Diagnostic::new(Warning, msg), span);\n+        self.emit_diag_at_span(Diagnostic::new(Warning(None), msg), span);\n     }\n \n     #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n@@ -874,7 +905,7 @@ impl Handler {\n         msg: impl Into<DiagnosticMessage>,\n         code: DiagnosticId,\n     ) {\n-        self.emit_diag_at_span(Diagnostic::new_with_code(Warning, Some(code), msg), span);\n+        self.emit_diag_at_span(Diagnostic::new_with_code(Warning(None), Some(code), msg), span);\n     }\n \n     pub fn span_bug(&self, span: impl Into<MultiSpan>, msg: impl Into<DiagnosticMessage>) -> ! {\n@@ -928,7 +959,7 @@ impl Handler {\n     }\n \n     pub fn warn(&self, msg: impl Into<DiagnosticMessage>) {\n-        let mut db = DiagnosticBuilder::new(self, Warning, msg);\n+        let mut db = DiagnosticBuilder::new(self, Warning(None), msg);\n         db.emit();\n     }\n \n@@ -1033,13 +1064,10 @@ impl Handler {\n             for mut diag in diags.into_iter() {\n                 diag.update_unstable_expectation_id(unstable_to_stable);\n \n-                let stable_id = diag\n-                    .level\n-                    .get_expectation_id()\n-                    .expect(\"all diagnostics inside `unstable_expect_diagnostics` must have a `LintExpectationId`\");\n-                inner.fulfilled_expectations.insert(stable_id);\n-\n-                (*TRACK_DIAGNOSTICS)(&diag);\n+                // Here the diagnostic is given back to `emit_diagnostic` where it was first\n+                // intercepted. Now it should be processed as usual, since the unstable expectation\n+                // id is now stable.\n+                inner.emit_diagnostic(&mut diag);\n             }\n         }\n \n@@ -1089,6 +1117,15 @@ impl HandlerInner {\n \n     // FIXME(eddyb) this should ideally take `diagnostic` by value.\n     fn emit_diagnostic(&mut self, diagnostic: &mut Diagnostic) -> Option<ErrorGuaranteed> {\n+        // The `LintExpectationId` can be stable or unstable depending on when it was created.\n+        // Diagnostics created before the definition of `HirId`s are unstable and can not yet\n+        // be stored. Instead, they are buffered until the `LintExpectationId` is replaced by\n+        // a stable one by the `LintLevelsBuilder`.\n+        if let Some(LintExpectationId::Unstable { .. }) = diagnostic.level.get_expectation_id() {\n+            self.unstable_expect_diagnostics.push(diagnostic.clone());\n+            return None;\n+        }\n+\n         if diagnostic.level == Level::DelayedBug {\n             // FIXME(eddyb) this should check for `has_errors` and stop pushing\n             // once *any* errors were emitted (and truncate `delayed_span_bugs`\n@@ -1105,7 +1142,12 @@ impl HandlerInner {\n             self.future_breakage_diagnostics.push(diagnostic.clone());\n         }\n \n-        if diagnostic.level == Warning\n+        if let Some(expectation_id) = diagnostic.level.get_expectation_id() {\n+            self.suppressed_expected_diag = true;\n+            self.fulfilled_expectations.insert(expectation_id);\n+        }\n+\n+        if matches!(diagnostic.level, Warning(_))\n             && !self.flags.can_emit_warnings\n             && !diagnostic.is_force_warn()\n         {\n@@ -1115,22 +1157,9 @@ impl HandlerInner {\n             return None;\n         }\n \n-        // The `LintExpectationId` can be stable or unstable depending on when it was created.\n-        // Diagnostics created before the definition of `HirId`s are unstable and can not yet\n-        // be stored. Instead, they are buffered until the `LintExpectationId` is replaced by\n-        // a stable one by the `LintLevelsBuilder`.\n-        if let Level::Expect(LintExpectationId::Unstable { .. }) = diagnostic.level {\n-            self.unstable_expect_diagnostics.push(diagnostic.clone());\n-            return None;\n-        }\n-\n         (*TRACK_DIAGNOSTICS)(diagnostic);\n \n-        if let Level::Expect(expectation_id) = diagnostic.level {\n-            self.suppressed_expected_diag = true;\n-            self.fulfilled_expectations.insert(expectation_id);\n-            return None;\n-        } else if diagnostic.level == Allow {\n+        if matches!(diagnostic.level, Level::Expect(_) | Level::Allow) {\n             return None;\n         }\n \n@@ -1167,7 +1196,7 @@ impl HandlerInner {\n             self.emitter.emit_diagnostic(&diagnostic);\n             if diagnostic.is_error() {\n                 self.deduplicated_err_count += 1;\n-            } else if diagnostic.level == Warning {\n+            } else if let Warning(_) = diagnostic.level {\n                 self.deduplicated_warn_count += 1;\n             }\n         }\n@@ -1220,7 +1249,7 @@ impl HandlerInner {\n         match (errors.len(), warnings.len()) {\n             (0, 0) => return,\n             (0, _) => self.emitter.emit_diagnostic(&Diagnostic::new(\n-                Level::Warning,\n+                Level::Warning(None),\n                 DiagnosticMessage::Str(warnings),\n             )),\n             (_, 0) => {\n@@ -1453,7 +1482,10 @@ pub enum Level {\n         /// If this error comes from a lint, don't abort compilation even when abort_if_errors() is called.\n         lint: bool,\n     },\n-    Warning,\n+    /// This [`LintExpectationId`] is used for expected lint diagnostics, which should\n+    /// also emit a warning due to the `force-warn` flag. In all other cases this should\n+    /// be `None`.\n+    Warning(Option<LintExpectationId>),\n     Note,\n     /// A note that is only emitted once.\n     OnceNote,\n@@ -1476,7 +1508,7 @@ impl Level {\n             Bug | DelayedBug | Fatal | Error { .. } => {\n                 spec.set_fg(Some(Color::Red)).set_intense(true);\n             }\n-            Warning => {\n+            Warning(_) => {\n                 spec.set_fg(Some(Color::Yellow)).set_intense(cfg!(windows));\n             }\n             Note | OnceNote => {\n@@ -1495,7 +1527,7 @@ impl Level {\n         match self {\n             Bug | DelayedBug => \"error: internal compiler error\",\n             Fatal | Error { .. } => \"error\",\n-            Warning => \"warning\",\n+            Warning(_) => \"warning\",\n             Note | OnceNote => \"note\",\n             Help => \"help\",\n             FailureNote => \"failure-note\",\n@@ -1510,7 +1542,7 @@ impl Level {\n \n     pub fn get_expectation_id(&self) -> Option<LintExpectationId> {\n         match self {\n-            Level::Expect(id) => Some(*id),\n+            Level::Expect(id) | Level::Warning(Some(id)) => Some(*id),\n             _ => None,\n         }\n     }"}, {"sha": "e7ce9e7f1b7050783e506738e88369a68d8284c6", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d40f24e956a698e47a209541031c4045acc5a684/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d40f24e956a698e47a209541031c4045acc5a684/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=d40f24e956a698e47a209541031c4045acc5a684", "patch": "@@ -267,7 +267,7 @@ impl ToInternal<rustc_errors::Level> for Level {\n     fn to_internal(self) -> rustc_errors::Level {\n         match self {\n             Level::Error => rustc_errors::Level::Error { lint: false },\n-            Level::Warning => rustc_errors::Level::Warning,\n+            Level::Warning => rustc_errors::Level::Warning(None),\n             Level::Note => rustc_errors::Level::Note,\n             Level::Help => rustc_errors::Level::Help,\n             _ => unreachable!(\"unknown proc_macro::Level variant: {:?}\", self),"}, {"sha": "eeb66f2d73871d0caf70c4c7f092a89187c3d246", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d40f24e956a698e47a209541031c4045acc5a684/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d40f24e956a698e47a209541031c4045acc5a684/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=d40f24e956a698e47a209541031c4045acc5a684", "patch": "@@ -324,7 +324,7 @@ impl LintStore {\n         registered_tools: &RegisteredTools,\n     ) {\n         let (tool_name, lint_name_only) = parse_lint_and_tool_name(lint_name);\n-        if lint_name_only == crate::WARNINGS.name_lower() && level == Level::ForceWarn {\n+        if lint_name_only == crate::WARNINGS.name_lower() && matches!(level, Level::ForceWarn(_)) {\n             struct_span_err!(\n                 sess,\n                 DUMMY_SP,\n@@ -375,7 +375,7 @@ impl LintStore {\n                 match level {\n                     Level::Allow => \"-A\",\n                     Level::Warn => \"-W\",\n-                    Level::ForceWarn => \"--force-warn\",\n+                    Level::ForceWarn(_) => \"--force-warn\",\n                     Level::Deny => \"-D\",\n                     Level::Forbid => \"-F\",\n                     Level::Expect(_) => {"}, {"sha": "95e3125045db4128e8a96eb7050acef4fcee21e7", "filename": "compiler/rustc_lint/src/expect.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d40f24e956a698e47a209541031c4045acc5a684/compiler%2Frustc_lint%2Fsrc%2Fexpect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d40f24e956a698e47a209541031c4045acc5a684/compiler%2Frustc_lint%2Fsrc%2Fexpect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fexpect.rs?ref=d40f24e956a698e47a209541031c4045acc5a684", "patch": "@@ -19,16 +19,16 @@ fn check_expectations(tcx: TyCtxt<'_>, tool_filter: Option<Symbol>) {\n     let lint_expectations = &tcx.lint_levels(()).lint_expectations;\n \n     for (id, expectation) in lint_expectations {\n-        if !fulfilled_expectations.contains(id)\n-            && tool_filter.map_or(true, |filter| expectation.lint_tool == Some(filter))\n-        {\n-            // This check will always be true, since `lint_expectations` only\n-            // holds stable ids\n-            if let LintExpectationId::Stable { hir_id, .. } = id {\n+        // This check will always be true, since `lint_expectations` only\n+        // holds stable ids\n+        if let LintExpectationId::Stable { hir_id, .. } = id {\n+            if !fulfilled_expectations.contains(&id)\n+                && tool_filter.map_or(true, |filter| expectation.lint_tool == Some(filter))\n+            {\n                 emit_unfulfilled_expectation_lint(tcx, *hir_id, expectation);\n-            } else {\n-                unreachable!(\"at this stage all `LintExpectationId`s are stable\");\n             }\n+        } else {\n+            unreachable!(\"at this stage all `LintExpectationId`s are stable\");\n         }\n     }\n }"}, {"sha": "4773feded12fa300a31c791c0116b8534693310c", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d40f24e956a698e47a209541031c4045acc5a684/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d40f24e956a698e47a209541031c4045acc5a684/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=d40f24e956a698e47a209541031c4045acc5a684", "patch": "@@ -117,7 +117,9 @@ impl<'s> LintLevelsBuilder<'s> {\n             };\n             for id in ids {\n                 // ForceWarn and Forbid cannot be overridden\n-                if let Some((Level::ForceWarn | Level::Forbid, _)) = self.current_specs().get(&id) {\n+                if let Some((Level::ForceWarn(_) | Level::Forbid, _)) =\n+                    self.current_specs().get(&id)\n+                {\n                     continue;\n                 }\n \n@@ -226,11 +228,18 @@ impl<'s> LintLevelsBuilder<'s> {\n             return;\n         }\n \n-        if let Level::ForceWarn = old_level {\n-            self.current_specs_mut().insert(id, (old_level, old_src));\n-        } else {\n-            self.current_specs_mut().insert(id, (level, src));\n-        }\n+        match (old_level, level) {\n+            // If the new level is an expectation store it in `ForceWarn`\n+            (Level::ForceWarn(_), Level::Expect(expectation_id)) => self\n+                .current_specs_mut()\n+                .insert(id, (Level::ForceWarn(Some(expectation_id)), old_src)),\n+            // Keep `ForceWarn` level but drop the expectation\n+            (Level::ForceWarn(_), _) => {\n+                self.current_specs_mut().insert(id, (Level::ForceWarn(None), old_src))\n+            }\n+            // Set the lint level as normal\n+            _ => self.current_specs_mut().insert(id, (level, src)),\n+        };\n     }\n \n     /// Pushes a list of AST lint attributes onto this context.\n@@ -269,6 +278,7 @@ impl<'s> LintLevelsBuilder<'s> {\n \n             let level = match Level::from_attr(attr) {\n                 None => continue,\n+                // This is the only lint level with a `LintExpectationId` that can be created from an attribute\n                 Some(Level::Expect(unstable_id)) if let Some(hir_id) = source_hir_id => {\n                     let stable_id = self.create_stable_id(unstable_id, hir_id, attr_index);\n "}, {"sha": "cb1c6f40987677545ce1f783807dc8883b9917c0", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d40f24e956a698e47a209541031c4045acc5a684/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d40f24e956a698e47a209541031c4045acc5a684/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=d40f24e956a698e47a209541031c4045acc5a684", "patch": "@@ -162,13 +162,19 @@ pub enum Level {\n     ///\n     /// See RFC 2383.\n     ///\n-    /// The `LintExpectationId` is used to later link a lint emission to the actual\n+    /// The [`LintExpectationId`] is used to later link a lint emission to the actual\n     /// expectation. It can be ignored in most cases.\n     Expect(LintExpectationId),\n     /// The `warn` level will produce a warning if the lint was violated, however the\n     /// compiler will continue with its execution.\n     Warn,\n-    ForceWarn,\n+    /// This lint level is a special case of [`Warn`], that can't be overridden. This is used\n+    /// to ensure that a lint can't be suppressed. This lint level can currently only be set\n+    /// via the console and is therefore session specific.\n+    ///\n+    /// The [`LintExpectationId`] is intended to fulfill expectations marked via the\n+    /// `#[expect]` attribute, that will still be suppressed due to the level.\n+    ForceWarn(Option<LintExpectationId>),\n     /// The `deny` level will produce an error and stop further execution after the lint\n     /// pass is complete.\n     Deny,\n@@ -184,7 +190,7 @@ impl Level {\n             Level::Allow => \"allow\",\n             Level::Expect(_) => \"expect\",\n             Level::Warn => \"warn\",\n-            Level::ForceWarn => \"force-warn\",\n+            Level::ForceWarn(_) => \"force-warn\",\n             Level::Deny => \"deny\",\n             Level::Forbid => \"forbid\",\n         }\n@@ -219,7 +225,7 @@ impl Level {\n \n     pub fn is_error(self) -> bool {\n         match self {\n-            Level::Allow | Level::Expect(_) | Level::Warn | Level::ForceWarn => false,\n+            Level::Allow | Level::Expect(_) | Level::Warn | Level::ForceWarn(_) => false,\n             Level::Deny | Level::Forbid => true,\n         }\n     }"}, {"sha": "215d8decf2a88f9c30ac6875069276d115601a91", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d40f24e956a698e47a209541031c4045acc5a684/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d40f24e956a698e47a209541031c4045acc5a684/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=d40f24e956a698e47a209541031c4045acc5a684", "patch": "@@ -115,7 +115,7 @@ impl LintLevelSets {\n \n         // Ensure that we never exceed the `--cap-lints` argument\n         // unless the source is a --force-warn\n-        level = if let LintLevelSource::CommandLine(_, Level::ForceWarn) = src {\n+        level = if let LintLevelSource::CommandLine(_, Level::ForceWarn(_)) = src {\n             level\n         } else {\n             cmp::min(level, self.lint_cap)\n@@ -266,7 +266,7 @@ pub fn explain_lint_level_source(\n                 Level::Deny => \"-D\",\n                 Level::Forbid => \"-F\",\n                 Level::Allow => \"-A\",\n-                Level::ForceWarn => \"--force-warn\",\n+                Level::ForceWarn(_) => \"--force-warn\",\n                 Level::Expect(_) => {\n                     unreachable!(\"the expect level does not have a commandline flag\")\n                 }\n@@ -352,8 +352,14 @@ pub fn struct_lint_level<'s, 'd>(\n                 // create a `DiagnosticBuilder` and continue as we would for warnings.\n                 sess.struct_expect(\"\", expect_id)\n             }\n-            (Level::Warn | Level::ForceWarn, Some(span)) => sess.struct_span_warn(span, \"\"),\n-            (Level::Warn | Level::ForceWarn, None) => sess.struct_warn(\"\"),\n+            (Level::ForceWarn(Some(expect_id)), Some(span)) => {\n+                sess.struct_span_warn_with_expectation(span, \"\", expect_id)\n+            }\n+            (Level::ForceWarn(Some(expect_id)), None) => {\n+                sess.struct_warn_with_expectation(\"\", expect_id)\n+            }\n+            (Level::Warn | Level::ForceWarn(None), Some(span)) => sess.struct_span_warn(span, \"\"),\n+            (Level::Warn | Level::ForceWarn(None), None) => sess.struct_warn(\"\"),\n             (Level::Deny | Level::Forbid, Some(span)) => {\n                 let mut builder = sess.diagnostic().struct_err_lint(\"\");\n                 builder.set_span(span);\n@@ -398,7 +404,7 @@ pub fn struct_lint_level<'s, 'd>(\n         explain_lint_level_source(lint, level, src, &mut err);\n \n         let name = lint.name_lower();\n-        let is_force_warn = matches!(level, Level::ForceWarn);\n+        let is_force_warn = matches!(level, Level::ForceWarn(_));\n         err.code(DiagnosticId::Lint { name, has_future_breakage, is_force_warn });\n \n         if let Some(future_incompatible) = future_incompatible {"}, {"sha": "89d724626ccc0355490bf95ce34019160b468914", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d40f24e956a698e47a209541031c4045acc5a684/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d40f24e956a698e47a209541031c4045acc5a684/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=d40f24e956a698e47a209541031c4045acc5a684", "patch": "@@ -1432,7 +1432,7 @@ pub fn get_cmd_lint_options(\n     let mut lint_opts_with_position = vec![];\n     let mut describe_lints = false;\n \n-    for level in [lint::Allow, lint::Warn, lint::ForceWarn, lint::Deny, lint::Forbid] {\n+    for level in [lint::Allow, lint::Warn, lint::ForceWarn(None), lint::Deny, lint::Forbid] {\n         for (arg_pos, lint_name) in matches.opt_strs_pos(level.as_str()) {\n             if lint_name == \"help\" {\n                 describe_lints = true;"}, {"sha": "f1814eebfa6fd1f8edcc70deb6adbc495a7db659", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d40f24e956a698e47a209541031c4045acc5a684/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d40f24e956a698e47a209541031c4045acc5a684/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=d40f24e956a698e47a209541031c4045acc5a684", "patch": "@@ -287,6 +287,14 @@ impl Session {\n     ) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_span_warn(sp, msg)\n     }\n+    pub fn struct_span_warn_with_expectation<S: Into<MultiSpan>>(\n+        &self,\n+        sp: S,\n+        msg: impl Into<DiagnosticMessage>,\n+        id: lint::LintExpectationId,\n+    ) -> DiagnosticBuilder<'_, ()> {\n+        self.diagnostic().struct_span_warn_with_expectation(sp, msg, id)\n+    }\n     pub fn struct_span_warn_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -298,6 +306,13 @@ impl Session {\n     pub fn struct_warn(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_warn(msg)\n     }\n+    pub fn struct_warn_with_expectation(\n+        &self,\n+        msg: impl Into<DiagnosticMessage>,\n+        id: lint::LintExpectationId,\n+    ) -> DiagnosticBuilder<'_, ()> {\n+        self.diagnostic().struct_warn_with_expectation(msg, id)\n+    }\n     pub fn struct_span_allow<S: Into<MultiSpan>>(\n         &self,\n         sp: S,"}, {"sha": "f23980faa041739fb65805cd9157f0b2f6031ae8", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d40f24e956a698e47a209541031c4045acc5a684/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d40f24e956a698e47a209541031c4045acc5a684/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=d40f24e956a698e47a209541031c4045acc5a684", "patch": "@@ -161,6 +161,9 @@ pub(super) const MIN_LEN: usize = node::MIN_LEN_AFTER_SPLIT;\n /// // update a key, guarding against the key possibly not being set\n /// let stat = player_stats.entry(\"attack\").or_insert(100);\n /// *stat += random_stat_buff();\n+///\n+/// // modify an entry before an insert with in-place mutation\n+/// player_stats.entry(\"mana\").and_modify(|mana| *mana += 200).or_insert(100);\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"BTreeMap\")]\n@@ -1211,10 +1214,12 @@ impl<K, V, A: Allocator> BTreeMap<K, V, A> {\n     ///\n     /// // count the number of occurrences of letters in the vec\n     /// for x in [\"a\", \"b\", \"a\", \"c\", \"a\", \"b\"] {\n-    ///     *count.entry(x).or_insert(0) += 1;\n+    ///     count.entry(x).and_modify(|curr| *curr += 1).or_insert(1);\n     /// }\n     ///\n     /// assert_eq!(count[\"a\"], 3);\n+    /// assert_eq!(count[\"b\"], 2);\n+    /// assert_eq!(count[\"c\"], 1);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn entry(&mut self, key: K) -> Entry<'_, K, V, A>"}, {"sha": "192a21f2ffc2d2eff53645aee1a38ad9ef55aef8", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d40f24e956a698e47a209541031c4045acc5a684/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d40f24e956a698e47a209541031c4045acc5a684/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=d40f24e956a698e47a209541031c4045acc5a684", "patch": "@@ -164,6 +164,9 @@ use crate::sys;\n /// // update a key, guarding against the key possibly not being set\n /// let stat = player_stats.entry(\"attack\").or_insert(100);\n /// *stat += random_stat_buff();\n+///\n+/// // modify an entry before an insert with in-place mutation\n+/// player_stats.entry(\"mana\").and_modify(|mana| *mana += 200).or_insert(100);\n /// ```\n ///\n /// The easiest way to use `HashMap` with a custom key type is to derive [`Eq`] and [`Hash`].\n@@ -829,8 +832,7 @@ where\n     /// let mut letters = HashMap::new();\n     ///\n     /// for ch in \"a short treatise on fungi\".chars() {\n-    ///     let counter = letters.entry(ch).or_insert(0);\n-    ///     *counter += 1;\n+    ///     letters.entry(ch).and_modify(|counter| *counter += 1).or_insert(1);\n     /// }\n     ///\n     /// assert_eq!(letters[&'s'], 2);"}, {"sha": "40a3cc6d12cac0b30ebda5d17b0d1a3b91b28404", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d40f24e956a698e47a209541031c4045acc5a684/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d40f24e956a698e47a209541031c4045acc5a684/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=d40f24e956a698e47a209541031c4045acc5a684", "patch": "@@ -127,12 +127,18 @@ fn main() {\n             }\n         }\n \n+        // Cargo doesn't pass RUSTFLAGS to proc_macros:\n+        // https://github.com/rust-lang/cargo/issues/4423\n+        // Thus, if we are on stage 0, we explicitly set `--cfg=bootstrap`.\n+        // We also declare that the flag is expected, which is mainly needed for\n+        // later stages so that they don't warn about #[cfg(bootstrap)],\n+        // but enabling it for stage 0 too lets any warnings, if they occur,\n+        // occur more early on, e.g. about #[cfg(bootstrap = \"foo\")].\n         if stage == \"0\" {\n-            // Cargo doesn't pass RUSTFLAGS to proc_macros:\n-            // https://github.com/rust-lang/cargo/issues/4423\n-            // Set `--cfg=bootstrap` explicitly instead.\n             cmd.arg(\"--cfg=bootstrap\");\n         }\n+        cmd.arg(\"-Zunstable-options\");\n+        cmd.arg(\"--check-cfg=values(bootstrap)\");\n     }\n \n     if let Ok(map) = env::var(\"RUSTC_DEBUGINFO_MAP\") {"}, {"sha": "912418fa7d1eb0eeecf041d7beb117f15891d13d", "filename": "src/etc/natvis/liballoc.natvis", "status": "modified", "additions": 110, "deletions": 16, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/d40f24e956a698e47a209541031c4045acc5a684/src%2Fetc%2Fnatvis%2Fliballoc.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/d40f24e956a698e47a209541031c4045acc5a684/src%2Fetc%2Fnatvis%2Fliballoc.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fnatvis%2Fliballoc.natvis?ref=d40f24e956a698e47a209541031c4045acc5a684", "patch": "@@ -59,39 +59,133 @@\n     </Expand>\n   </Type>\n \n+  <!--\n+      The display string for Rc, Arc, etc is optional because the expression cannot be evaluated\n+      if the pointee is unsized (i.e. if `ptr.pointer` is a fat pointer).\n+\n+      There are also two versions for the reference count fields, one for sized and one for\n+      dyn pointees.\n+\n+      Rc<[T]> and Arc<[T]> are handled separately altogether so we can actually show\n+      the slice values.\n+  -->\n+  <!-- alloc::rc::Rc<T> -->\n   <Type Name=\"alloc::rc::Rc&lt;*&gt;\">\n-    <DisplayString>{ptr.pointer->value}</DisplayString>\n+    <DisplayString Optional=\"true\">{ptr.pointer->value}</DisplayString>\n     <Expand>\n-      <ExpandedItem>ptr.pointer->value</ExpandedItem>\n-      <Item Name=\"[Reference count]\">ptr.pointer->strong</Item>\n-      <Item Name=\"[Weak reference count]\">ptr.pointer->weak</Item>\n+      <!-- thin -->\n+      <ExpandedItem Optional=\"true\">ptr.pointer->value</ExpandedItem>\n+      <Item Name=\"[Reference count]\" Optional=\"true\">ptr.pointer->strong</Item>\n+      <Item Name=\"[Weak reference count]\" Optional=\"true\">ptr.pointer->weak</Item>\n+\n+      <!-- dyn -->\n+      <Item Name=\"[Reference count]\" Optional=\"true\">ptr.pointer.pointer->strong</Item>\n+      <Item Name=\"[Weak reference count]\" Optional=\"true\">ptr.pointer.pointer->weak</Item>\n+    </Expand>\n+  </Type>\n+\n+  <!-- alloc::rc::Rc<[T]> -->\n+  <Type Name=\"alloc::rc::Rc&lt;slice$&lt;*&gt; &gt;\">\n+    <DisplayString>{{ len={ptr.pointer.length} }}</DisplayString>\n+    <Expand>\n+      <Item Name=\"[Length]\" ExcludeView=\"simple\">ptr.pointer.length</Item>\n+      <Item Name=\"[Reference count]\">ptr.pointer.data_ptr->strong</Item>\n+      <Item Name=\"[Weak reference count]\">ptr.pointer.data_ptr->weak</Item>\n+      <ArrayItems>\n+        <Size>ptr.pointer.length</Size>\n+        <!-- We add +2 to the data_ptr in order to skip the ref count fields in the RcBox -->\n+        <ValuePointer>($T1*)(((size_t*)ptr.pointer.data_ptr) + 2)</ValuePointer>\n+      </ArrayItems>\n     </Expand>\n   </Type>\n+\n+  <!-- alloc::rc::Weak<T> -->\n   <Type Name=\"alloc::rc::Weak&lt;*&gt;\">\n-    <DisplayString>{ptr.pointer->value}</DisplayString>\n+    <DisplayString Optional=\"true\">{ptr.pointer->value}</DisplayString>\n+    <Expand>\n+      <!-- thin -->\n+      <ExpandedItem Optional=\"true\">ptr.pointer->value</ExpandedItem>\n+      <Item Name=\"[Reference count]\" Optional=\"true\">ptr.pointer->strong</Item>\n+      <Item Name=\"[Weak reference count]\" Optional=\"true\">ptr.pointer->weak</Item>\n+\n+      <!-- dyn -->\n+      <Item Name=\"[Reference count]\" Optional=\"true\">ptr.pointer.pointer->strong</Item>\n+      <Item Name=\"[Weak reference count]\" Optional=\"true\">ptr.pointer.pointer->weak</Item>\n+    </Expand>\n+  </Type>\n+\n+  <!-- alloc::rc::Weak<[T]> -->\n+  <Type Name=\"alloc::rc::Weak&lt;slice$&lt;*&gt; &gt;\">\n+    <DisplayString>{{ len={ptr.pointer.length} }}</DisplayString>\n     <Expand>\n-      <ExpandedItem>ptr.pointer->value</ExpandedItem>\n-      <Item Name=\"[Reference count]\">ptr.pointer->strong</Item>\n-      <Item Name=\"[Weak reference count]\">ptr.pointer->weak</Item>\n+      <Item Name=\"[Length]\" ExcludeView=\"simple\">ptr.pointer.length</Item>\n+      <Item Name=\"[Reference count]\">ptr.pointer.data_ptr->strong</Item>\n+      <Item Name=\"[Weak reference count]\">ptr.pointer.data_ptr->weak</Item>\n+      <ArrayItems>\n+        <Size>ptr.pointer.length</Size>\n+        <ValuePointer>($T1*)(((size_t*)ptr.pointer.data_ptr) + 2)</ValuePointer>\n+      </ArrayItems>\n     </Expand>\n   </Type>\n \n+  <!-- alloc::sync::Arc<T> -->\n   <Type Name=\"alloc::sync::Arc&lt;*&gt;\">\n-    <DisplayString>{ptr.pointer->data}</DisplayString>\n+    <DisplayString Optional=\"true\">{ptr.pointer->data}</DisplayString>\n     <Expand>\n-      <ExpandedItem>ptr.pointer->data</ExpandedItem>\n-      <Item Name=\"[Reference count]\">ptr.pointer->strong</Item>\n-      <Item Name=\"[Weak reference count]\">ptr.pointer->weak</Item>\n+      <!-- thin -->\n+      <ExpandedItem Optional=\"true\">ptr.pointer->data</ExpandedItem>\n+      <Item Name=\"[Reference count]\" Optional=\"true\">ptr.pointer->strong</Item>\n+      <Item Name=\"[Weak reference count]\" Optional=\"true\">ptr.pointer->weak</Item>\n+\n+      <!-- dyn -->\n+      <Item Name=\"[Reference count]\" Optional=\"true\">ptr.pointer.pointer->strong</Item>\n+      <Item Name=\"[Weak reference count]\" Optional=\"true\">ptr.pointer.pointer->weak</Item>\n+    </Expand>\n+  </Type>\n+\n+  <!-- alloc::sync::Arc<[T]> -->\n+  <Type Name=\"alloc::sync::Arc&lt;slice$&lt;*&gt; &gt;\">\n+    <DisplayString>{{ len={ptr.pointer.length} }}</DisplayString>\n+    <Expand>\n+      <Item Name=\"[Length]\" ExcludeView=\"simple\">ptr.pointer.length</Item>\n+      <Item Name=\"[Reference count]\">ptr.pointer.data_ptr->strong</Item>\n+      <Item Name=\"[Weak reference count]\">ptr.pointer.data_ptr->weak</Item>\n+      <ArrayItems>\n+        <Size>ptr.pointer.length</Size>\n+        <ValuePointer>($T1*)(((size_t*)ptr.pointer.data_ptr) + 2)</ValuePointer>\n+      </ArrayItems>\n     </Expand>\n   </Type>\n+\n+  <!-- alloc::sync::Weak<T> -->\n   <Type Name=\"alloc::sync::Weak&lt;*&gt;\">\n-    <DisplayString>{ptr.pointer->data}</DisplayString>\n+    <DisplayString Optional=\"true\">{ptr.pointer->data}</DisplayString>\n     <Expand>\n-      <ExpandedItem>ptr.pointer->data</ExpandedItem>\n-      <Item Name=\"[Reference count]\">ptr.pointer->strong</Item>\n-      <Item Name=\"[Weak reference count]\">ptr.pointer->weak</Item>\n+      <!-- thin -->\n+      <ExpandedItem Optional=\"true\">ptr.pointer->data</ExpandedItem>\n+      <Item Name=\"[Reference count]\" Optional=\"true\">ptr.pointer->strong</Item>\n+      <Item Name=\"[Weak reference count]\" Optional=\"true\">ptr.pointer->weak</Item>\n+\n+      <!-- dyn -->\n+      <Item Name=\"[Reference count]\" Optional=\"true\">ptr.pointer.pointer->strong</Item>\n+      <Item Name=\"[Weak reference count]\" Optional=\"true\">ptr.pointer.pointer->weak</Item>\n+    </Expand>\n+  </Type>\n+\n+  <!-- alloc::sync::Weak<[T]> -->\n+  <Type Name=\"alloc::sync::Weak&lt;slice$&lt;*&gt; &gt;\">\n+    <DisplayString>{{ len={ptr.pointer.length} }}</DisplayString>\n+    <Expand>\n+      <Item Name=\"[Length]\" ExcludeView=\"simple\">ptr.pointer.length</Item>\n+      <Item Name=\"[Reference count]\">ptr.pointer.data_ptr->strong</Item>\n+      <Item Name=\"[Weak reference count]\">ptr.pointer.data_ptr->weak</Item>\n+      <ArrayItems>\n+        <Size>ptr.pointer.length</Size>\n+        <ValuePointer>($T1*)(((size_t*)ptr.pointer.data_ptr) + 2)</ValuePointer>\n+      </ArrayItems>\n     </Expand>\n   </Type>\n+\n   <Type Name=\"alloc::borrow::Cow&lt;*&gt;\">\n     <DisplayString Condition=\"RUST$ENUM$DISR == 0x0\">Borrowed({__0})</DisplayString>\n     <DisplayString Condition=\"RUST$ENUM$DISR == 0x1\">Owned({__0})</DisplayString>"}, {"sha": "c05c565d95634e5e86227f6d42ac6f75ce73e7ad", "filename": "src/test/debuginfo/rc_arc.rs", "status": "modified", "additions": 104, "deletions": 40, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/d40f24e956a698e47a209541031c4045acc5a684/src%2Ftest%2Fdebuginfo%2Frc_arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d40f24e956a698e47a209541031c4045acc5a684/src%2Ftest%2Fdebuginfo%2Frc_arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Frc_arc.rs?ref=d40f24e956a698e47a209541031c4045acc5a684", "patch": "@@ -8,74 +8,138 @@\n \n // gdb-command:run\n \n-// gdb-command:print r\n-// gdb-check:[...]$1 = Rc(strong=2, weak=1) = {value = 42, strong = 2, weak = 1}\n-// gdb-command:print a\n-// gdb-check:[...]$2 = Arc(strong=2, weak=1) = {value = 42, strong = 2, weak = 1}\n-\n+// gdb-command:print rc\n+// gdb-check:[...]$1 = Rc(strong=11, weak=1) = {value = 111, strong = 11, weak = 1}\n+// gdb-command:print arc\n+// gdb-check:[...]$2 = Arc(strong=21, weak=1) = {value = 222, strong = 21, weak = 1}\n \n // === LLDB TESTS ==================================================================================\n \n // lldb-command:run\n \n-// lldb-command:print r\n-// lldb-check:[...]$0 = strong=2, weak=1 { value = 42 }\n-// lldb-command:print a\n-// lldb-check:[...]$1 = strong=2, weak=1 { data = 42 }\n+// lldb-command:print rc\n+// lldb-check:[...]$0 = strong=11, weak=1 { value = 111 }\n+// lldb-command:print arc\n+// lldb-check:[...]$1 = strong=21, weak=1 { data = 222 }\n \n // === CDB TESTS ==================================================================================\n \n // cdb-command:g\n \n-// cdb-command:dx r,d\n-// cdb-check:r,d              : 42 [Type: alloc::rc::Rc<i32>]\n-// cdb-check:    [<Raw View>]     [Type: alloc::rc::Rc<i32>]\n-// cdb-check:    [Reference count] : 2 [Type: core::cell::Cell<usize>]\n+// cdb-command:dx rc,d\n+// cdb-check:rc,d             : 111 [Type: alloc::rc::Rc<i32>]\n+// cdb-check:    [Reference count] : 11 [Type: core::cell::Cell<usize>]\n+// cdb-check:    [Weak reference count] : 2 [Type: core::cell::Cell<usize>]\n+\n+// cdb-command:dx weak_rc,d\n+// cdb-check:weak_rc,d        : 111 [Type: alloc::rc::Weak<i32>]\n+// cdb-check:    [Reference count] : 11 [Type: core::cell::Cell<usize>]\n+// cdb-check:    [Weak reference count] : 2 [Type: core::cell::Cell<usize>]\n+\n+// cdb-command:dx arc,d\n+// cdb-check:arc,d            : 222 [Type: alloc::sync::Arc<i32>]\n+// cdb-check:    [Reference count] : 21 [Type: core::sync::atomic::AtomicUsize]\n+// cdb-check:    [Weak reference count] : 2 [Type: core::sync::atomic::AtomicUsize]\n+\n+// cdb-command:dx weak_arc,d\n+// cdb-check:weak_arc,d       : 222 [Type: alloc::sync::Weak<i32>]\n+// cdb-check:    [Reference count] : 21 [Type: core::sync::atomic::AtomicUsize]\n+// cdb-check:    [Weak reference count] : 2 [Type: core::sync::atomic::AtomicUsize]\n+\n+// cdb-command:dx dyn_rc,d\n+// cdb-check:dyn_rc,d         [Type: alloc::rc::Rc<dyn$<core::fmt::Debug> >]\n+// cdb-check:    [Reference count] : 31 [Type: core::cell::Cell<usize>]\n // cdb-check:    [Weak reference count] : 2 [Type: core::cell::Cell<usize>]\n \n-// cdb-command:dx r1,d\n-// cdb-check:r1,d             : 42 [Type: alloc::rc::Rc<i32>]\n-// cdb-check:    [<Raw View>]     [Type: alloc::rc::Rc<i32>]\n-// cdb-check:    [Reference count] : 2 [Type: core::cell::Cell<usize>]\n+// cdb-command:dx dyn_rc_weak,d\n+// cdb-check:dyn_rc_weak,d    [Type: alloc::rc::Weak<dyn$<core::fmt::Debug> >]\n+// cdb-check:    [Reference count] : 31 [Type: core::cell::Cell<usize>]\n // cdb-check:    [Weak reference count] : 2 [Type: core::cell::Cell<usize>]\n \n-// cdb-command:dx w1,d\n-// cdb-check:w1,d             : 42 [Type: alloc::rc::Weak<i32>]\n-// cdb-check:    [<Raw View>]     [Type: alloc::rc::Weak<i32>]\n-// cdb-check:    [Reference count] : 2 [Type: core::cell::Cell<usize>]\n+// cdb-command:dx slice_rc,d\n+// cdb-check:slice_rc,d       : { len=3 } [Type: alloc::rc::Rc<slice$<u32> >]\n+// cdb-check:    [Length]         : 3 [Type: [...]]\n+// cdb-check:    [Reference count] : 41 [Type: core::cell::Cell<usize>]\n // cdb-check:    [Weak reference count] : 2 [Type: core::cell::Cell<usize>]\n+// cdb-check:    [0]              : 1 [Type: u32]\n+// cdb-check:    [1]              : 2 [Type: u32]\n+// cdb-check:    [2]              : 3 [Type: u32]\n+\n+// cdb-command:dx slice_rc_weak,d\n+// cdb-check:slice_rc_weak,d  : { len=3 } [Type: alloc::rc::Weak<slice$<u32> >]\n+// cdb-check:    [Length]         : 3 [Type: [...]]\n+// cdb-check:    [Reference count] : 41 [Type: core::cell::Cell<usize>]\n+// cdb-check:    [Weak reference count] : 2 [Type: core::cell::Cell<usize>]\n+// cdb-check:    [0]              : 1 [Type: u32]\n+// cdb-check:    [1]              : 2 [Type: u32]\n+// cdb-check:    [2]              : 3 [Type: u32]\n \n-// cdb-command:dx a,d\n-// cdb-check:a,d              : 42 [Type: alloc::sync::Arc<i32>]\n-// cdb-check:    [<Raw View>]     [Type: alloc::sync::Arc<i32>]\n-// cdb-check:    [Reference count] : 2 [Type: core::sync::atomic::AtomicUsize]\n+// cdb-command:dx dyn_arc,d\n+// cdb-check:dyn_arc,d        [Type: alloc::sync::Arc<dyn$<core::fmt::Debug> >]\n+// cdb-check:    [Reference count] : 51 [Type: core::sync::atomic::AtomicUsize]\n // cdb-check:    [Weak reference count] : 2 [Type: core::sync::atomic::AtomicUsize]\n \n-// cdb-command:dx a1,d\n-// cdb-check:a1,d             : 42 [Type: alloc::sync::Arc<i32>]\n-// cdb-check:    [<Raw View>]     [Type: alloc::sync::Arc<i32>]\n-// cdb-check:    [Reference count] : 2 [Type: core::sync::atomic::AtomicUsize]\n+// cdb-command:dx dyn_arc_weak,d\n+// cdb-check:dyn_arc_weak,d   [Type: alloc::sync::Weak<dyn$<core::fmt::Debug> >]\n+// cdb-check:    [Reference count] : 51 [Type: core::sync::atomic::AtomicUsize]\n // cdb-check:    [Weak reference count] : 2 [Type: core::sync::atomic::AtomicUsize]\n \n-// cdb-command:dx w2,d\n-// cdb-check:w2,d             : 42 [Type: alloc::sync::Weak<i32>]\n-// cdb-check:    [<Raw View>]     [Type: alloc::sync::Weak<i32>]\n-// cdb-check:    [Reference count] : 2 [Type: core::sync::atomic::AtomicUsize]\n+// cdb-command:dx slice_arc,d\n+// cdb-check:slice_arc,d      : { len=3 } [Type: alloc::sync::Arc<slice$<u32> >]\n+// cdb-check:    [Length]         : 3 [Type: [...]]\n+// cdb-check:    [Reference count] : 61 [Type: core::sync::atomic::AtomicUsize]\n+// cdb-check:    [Weak reference count] : 2 [Type: core::sync::atomic::AtomicUsize]\n+// cdb-check:    [0]              : 4 [Type: u32]\n+// cdb-check:    [1]              : 5 [Type: u32]\n+// cdb-check:    [2]              : 6 [Type: u32]\n+\n+// cdb-command:dx slice_arc_weak,d\n+// cdb-check:slice_arc_weak,d : { len=3 } [Type: alloc::sync::Weak<slice$<u32> >]\n+// cdb-check:    [Length]         : 3 [Type: [...]]\n+// cdb-check:    [Reference count] : 61 [Type: core::sync::atomic::AtomicUsize]\n // cdb-check:    [Weak reference count] : 2 [Type: core::sync::atomic::AtomicUsize]\n+// cdb-check:    [0]              : 4 [Type: u32]\n+// cdb-check:    [1]              : 5 [Type: u32]\n+// cdb-check:    [2]              : 6 [Type: u32]\n \n+use std::fmt::Debug;\n use std::rc::Rc;\n use std::sync::Arc;\n \n fn main() {\n-    let r = Rc::new(42);\n-    let r1 = Rc::clone(&r);\n-    let w1 = Rc::downgrade(&r);\n+    let rc = Rc::new(111);\n+    inc_ref_count(&rc, 10);\n+    let weak_rc = Rc::downgrade(&rc);\n+\n+    let arc = Arc::new(222);\n+    inc_ref_count(&arc, 20);\n+    let weak_arc = Arc::downgrade(&arc);\n+\n+    let dyn_rc: Rc<dyn Debug> = Rc::new(333);\n+    inc_ref_count(&dyn_rc, 30);\n+    let dyn_rc_weak = Rc::downgrade(&dyn_rc);\n+\n+    let slice_rc: Rc<[u32]> = Rc::from(vec![1, 2, 3]);\n+    inc_ref_count(&slice_rc, 40);\n+    let slice_rc_weak = Rc::downgrade(&slice_rc);\n \n-    let a = Arc::new(42);\n-    let a1 = Arc::clone(&a);\n-    let w2 = Arc::downgrade(&a);\n+    let dyn_arc: Arc<dyn Debug> = Arc::new(444);\n+    inc_ref_count(&dyn_arc, 50);\n+    let dyn_arc_weak = Arc::downgrade(&dyn_arc);\n+\n+    let slice_arc: Arc<[u32]> = Arc::from(vec![4, 5, 6]);\n+    inc_ref_count(&slice_arc, 60);\n+    let slice_arc_weak = Arc::downgrade(&slice_arc);\n \n     zzz(); // #break\n }\n \n-fn zzz() { () }\n+fn inc_ref_count<T: Clone>(rc: &T, count: usize) {\n+    for _ in 0..count {\n+        std::mem::forget(rc.clone());\n+    }\n+}\n+\n+fn zzz() {\n+    ()\n+}"}, {"sha": "a3c3933d70038a98d750ffd571ceb5c2cedf7d5a", "filename": "src/test/ui/lint/rfc-2383-lint-reason/force_warn_expected_lints_fulfilled.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d40f24e956a698e47a209541031c4045acc5a684/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fforce_warn_expected_lints_fulfilled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d40f24e956a698e47a209541031c4045acc5a684/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fforce_warn_expected_lints_fulfilled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fforce_warn_expected_lints_fulfilled.rs?ref=d40f24e956a698e47a209541031c4045acc5a684", "patch": "@@ -0,0 +1,48 @@\n+// compile-flags: --force-warn while_true\n+// compile-flags: --force-warn unused_variables\n+// compile-flags: --force-warn unused_mut\n+// check-pass\n+\n+#![feature(lint_reasons)]\n+\n+fn expect_early_pass_lint() {\n+    #[expect(while_true)]\n+    while true {\n+        //~^ WARNING denote infinite loops with `loop { ... }` [while_true]\n+        //~| NOTE requested on the command line with `--force-warn while-true`\n+        //~| HELP use `loop`\n+        println!(\"I never stop\")\n+    }\n+}\n+\n+#[expect(unused_variables, reason=\"<this should fail and display this reason>\")]\n+fn check_specific_lint() {\n+    let x = 2;\n+    //~^ WARNING unused variable: `x` [unused_variables]\n+    //~| NOTE requested on the command line with `--force-warn unused-variables`\n+    //~| HELP if this is intentional, prefix it with an underscore\n+}\n+\n+#[expect(unused)]\n+fn check_multiple_lints_with_lint_group() {\n+    let fox_name = \"Sir Nibbles\";\n+    //~^ WARNING unused variable: `fox_name` [unused_variables]\n+    //~| HELP if this is intentional, prefix it with an underscore\n+\n+    let mut what_does_the_fox_say = \"*ding* *deng* *dung*\";\n+    //~^ WARNING variable does not need to be mutable [unused_mut]\n+    //~| NOTE requested on the command line with `--force-warn unused-mut`\n+    //~| HELP remove this `mut`\n+\n+    println!(\"The fox says: {what_does_the_fox_say}\");\n+}\n+\n+#[allow(unused_variables)]\n+fn check_expect_overrides_allow_lint_level() {\n+    #[expect(unused_variables)]\n+    let this_should_fulfill_the_expectation = \"The `#[allow]` has no power here\";\n+    //~^ WARNING unused variable: `this_should_fulfill_the_expectation` [unused_variables]\n+    //~| HELP if this is intentional, prefix it with an underscore\n+}\n+\n+fn main() {}"}, {"sha": "06befcbb5117e53fc5ee4bc2df1b533231d2e3c4", "filename": "src/test/ui/lint/rfc-2383-lint-reason/force_warn_expected_lints_fulfilled.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d40f24e956a698e47a209541031c4045acc5a684/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fforce_warn_expected_lints_fulfilled.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d40f24e956a698e47a209541031c4045acc5a684/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fforce_warn_expected_lints_fulfilled.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fforce_warn_expected_lints_fulfilled.stderr?ref=d40f24e956a698e47a209541031c4045acc5a684", "patch": "@@ -0,0 +1,40 @@\n+warning: denote infinite loops with `loop { ... }`\n+  --> $DIR/force_warn_expected_lints_fulfilled.rs:10:5\n+   |\n+LL |     while true {\n+   |     ^^^^^^^^^^ help: use `loop`\n+   |\n+   = note: requested on the command line with `--force-warn while-true`\n+\n+warning: unused variable: `x`\n+  --> $DIR/force_warn_expected_lints_fulfilled.rs:20:9\n+   |\n+LL |     let x = 2;\n+   |         ^ help: if this is intentional, prefix it with an underscore: `_x`\n+   |\n+   = note: requested on the command line with `--force-warn unused-variables`\n+\n+warning: unused variable: `fox_name`\n+  --> $DIR/force_warn_expected_lints_fulfilled.rs:28:9\n+   |\n+LL |     let fox_name = \"Sir Nibbles\";\n+   |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_fox_name`\n+\n+warning: unused variable: `this_should_fulfill_the_expectation`\n+  --> $DIR/force_warn_expected_lints_fulfilled.rs:43:9\n+   |\n+LL |     let this_should_fulfill_the_expectation = \"The `#[allow]` has no power here\";\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_this_should_fulfill_the_expectation`\n+\n+warning: variable does not need to be mutable\n+  --> $DIR/force_warn_expected_lints_fulfilled.rs:32:9\n+   |\n+LL |     let mut what_does_the_fox_say = \"*ding* *deng* *dung*\";\n+   |         ----^^^^^^^^^^^^^^^^^^^^^\n+   |         |\n+   |         help: remove this `mut`\n+   |\n+   = note: requested on the command line with `--force-warn unused-mut`\n+\n+warning: 5 warnings emitted\n+"}, {"sha": "080e300232b038b9595f07298db07bdf6fdbfcc4", "filename": "src/test/ui/lint/rfc-2383-lint-reason/force_warn_expected_lints_unfulfilled.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/d40f24e956a698e47a209541031c4045acc5a684/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fforce_warn_expected_lints_unfulfilled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d40f24e956a698e47a209541031c4045acc5a684/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fforce_warn_expected_lints_unfulfilled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fforce_warn_expected_lints_unfulfilled.rs?ref=d40f24e956a698e47a209541031c4045acc5a684", "patch": "@@ -0,0 +1,49 @@\n+// compile-flags: --force-warn while_true\n+// compile-flags: --force-warn unused_variables\n+// compile-flags: --force-warn unused_mut\n+// check-pass\n+\n+#![feature(lint_reasons)]\n+\n+fn expect_early_pass_lint(terminate: bool) {\n+    #[expect(while_true)]\n+    //~^ WARNING this lint expectation is unfulfilled [unfulfilled_lint_expectations]\n+    //~| NOTE `#[warn(unfulfilled_lint_expectations)]` on by default\n+    while !terminate {\n+        println!(\"Do you know what a spin lock is?\")\n+    }\n+}\n+\n+#[expect(unused_variables, reason=\"<this should fail and display this reason>\")]\n+//~^ WARNING this lint expectation is unfulfilled [unfulfilled_lint_expectations]\n+//~| NOTE <this should fail and display this reason>\n+fn check_specific_lint() {\n+    let _x = 2;\n+}\n+\n+#[expect(unused)]\n+//~^ WARNING this lint expectation is unfulfilled [unfulfilled_lint_expectations]\n+fn check_multiple_lints_with_lint_group() {\n+    let fox_name = \"Sir Nibbles\";\n+\n+    let what_does_the_fox_say = \"*ding* *deng* *dung*\";\n+\n+    println!(\"The fox says: {what_does_the_fox_say}\");\n+    println!(\"~ {fox_name}\")\n+}\n+\n+\n+#[expect(unused)]\n+//~^ WARNING this lint expectation is unfulfilled [unfulfilled_lint_expectations]\n+fn check_overridden_expectation_lint_level() {\n+    #[allow(unused_variables)]\n+    let this_should_not_fulfill_the_expectation = \"maybe\";\n+    //~^ WARNING unused variable: `this_should_not_fulfill_the_expectation` [unused_variables]\n+    //~| NOTE requested on the command line with `--force-warn unused-variables`\n+    //~| HELP if this is intentional, prefix it with an underscore\n+}\n+\n+fn main() {\n+    check_multiple_lints_with_lint_group();\n+    check_overridden_expectation_lint_level();\n+}"}, {"sha": "c74fabe27dc874198aed94183411d5cb5ea08007", "filename": "src/test/ui/lint/rfc-2383-lint-reason/force_warn_expected_lints_unfulfilled.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d40f24e956a698e47a209541031c4045acc5a684/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fforce_warn_expected_lints_unfulfilled.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d40f24e956a698e47a209541031c4045acc5a684/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fforce_warn_expected_lints_unfulfilled.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fforce_warn_expected_lints_unfulfilled.stderr?ref=d40f24e956a698e47a209541031c4045acc5a684", "patch": "@@ -0,0 +1,38 @@\n+warning: unused variable: `this_should_not_fulfill_the_expectation`\n+  --> $DIR/force_warn_expected_lints_unfulfilled.rs:40:9\n+   |\n+LL |     let this_should_not_fulfill_the_expectation = \"maybe\";\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_this_should_not_fulfill_the_expectation`\n+   |\n+   = note: requested on the command line with `--force-warn unused-variables`\n+\n+warning: this lint expectation is unfulfilled\n+  --> $DIR/force_warn_expected_lints_unfulfilled.rs:9:14\n+   |\n+LL |     #[expect(while_true)]\n+   |              ^^^^^^^^^^\n+   |\n+   = note: `#[warn(unfulfilled_lint_expectations)]` on by default\n+\n+warning: this lint expectation is unfulfilled\n+  --> $DIR/force_warn_expected_lints_unfulfilled.rs:17:10\n+   |\n+LL | #[expect(unused_variables, reason=\"<this should fail and display this reason>\")]\n+   |          ^^^^^^^^^^^^^^^^\n+   |\n+   = note: <this should fail and display this reason>\n+\n+warning: this lint expectation is unfulfilled\n+  --> $DIR/force_warn_expected_lints_unfulfilled.rs:24:10\n+   |\n+LL | #[expect(unused)]\n+   |          ^^^^^^\n+\n+warning: this lint expectation is unfulfilled\n+  --> $DIR/force_warn_expected_lints_unfulfilled.rs:36:10\n+   |\n+LL | #[expect(unused)]\n+   |          ^^^^^^\n+\n+warning: 5 warnings emitted\n+"}, {"sha": "23db5421910365de9693434cc0eccb1926578954", "filename": "src/tools/rustfmt/src/parse/session.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d40f24e956a698e47a209541031c4045acc5a684/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d40f24e956a698e47a209541031c4045acc5a684/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs?ref=d40f24e956a698e47a209541031c4045acc5a684", "patch": "@@ -433,7 +433,7 @@ mod tests {\n                 Some(ignore_list),\n             );\n             let span = MultiSpan::from_span(mk_sp(BytePos(0), BytePos(1)));\n-            let non_fatal_diagnostic = build_diagnostic(DiagnosticLevel::Warning, Some(span));\n+            let non_fatal_diagnostic = build_diagnostic(DiagnosticLevel::Warning(None), Some(span));\n             emitter.emit_diagnostic(&non_fatal_diagnostic);\n             assert_eq!(num_emitted_errors.load(Ordering::Acquire), 0);\n             assert_eq!(can_reset_errors.load(Ordering::Acquire), true);\n@@ -457,7 +457,7 @@ mod tests {\n                 None,\n             );\n             let span = MultiSpan::from_span(mk_sp(BytePos(0), BytePos(1)));\n-            let non_fatal_diagnostic = build_diagnostic(DiagnosticLevel::Warning, Some(span));\n+            let non_fatal_diagnostic = build_diagnostic(DiagnosticLevel::Warning(None), Some(span));\n             emitter.emit_diagnostic(&non_fatal_diagnostic);\n             assert_eq!(num_emitted_errors.load(Ordering::Acquire), 1);\n             assert_eq!(can_reset_errors.load(Ordering::Acquire), false);\n@@ -494,8 +494,8 @@ mod tests {\n             );\n             let bar_span = MultiSpan::from_span(mk_sp(BytePos(0), BytePos(1)));\n             let foo_span = MultiSpan::from_span(mk_sp(BytePos(21), BytePos(22)));\n-            let bar_diagnostic = build_diagnostic(DiagnosticLevel::Warning, Some(bar_span));\n-            let foo_diagnostic = build_diagnostic(DiagnosticLevel::Warning, Some(foo_span));\n+            let bar_diagnostic = build_diagnostic(DiagnosticLevel::Warning(None), Some(bar_span));\n+            let foo_diagnostic = build_diagnostic(DiagnosticLevel::Warning(None), Some(foo_span));\n             let fatal_diagnostic = build_diagnostic(DiagnosticLevel::Fatal, None);\n             emitter.emit_diagnostic(&bar_diagnostic);\n             emitter.emit_diagnostic(&foo_diagnostic);"}]}