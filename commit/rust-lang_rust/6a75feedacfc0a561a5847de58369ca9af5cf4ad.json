{"sha": "6a75feedacfc0a561a5847de58369ca9af5cf4ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhNzVmZWVkYWNmYzBhNTYxYTU4NDdkZTU4MzY5Y2E5YWY1Y2Y0YWQ=", "commit": {"author": {"name": "St\u00e9phane Campinas", "email": "stephane.campinas@gmail.com", "date": "2019-02-23T12:16:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-23T12:16:23Z"}, "message": "Merge pull request #3409 from rchaser53/issue-3343\n\nadd config inline_attribute_width", "tree": {"sha": "59e13abfebc1418f8cbf67b62b9054ebe79fc74c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59e13abfebc1418f8cbf67b62b9054ebe79fc74c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a75feedacfc0a561a5847de58369ca9af5cf4ad", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJccTmXCRBK7hj4Ov3rIwAAdHIIADXMpOtTbMPuR49audr1a7Oa\nZ7mvu11d7+QWnDEc75EGuL478TT4iqpqx6CLjEGe1/4sNwbpkgB60zSm4O2/+Fy+\ntbK1sZ7eugDCuTgClcrNe2Efu5Lz2GxjPwBHFtPn2omMBZZs7yDLbET6C1Sir9yn\nGZeOI22xmwC08PzuoUNyBV+czMohxgv/gnnrQCxlqHHKVfI+eOrrSk8UThoG2xP5\nz9qbjmBtVGgEHtz13nGHFwUdYswUW1zbhTrhkdJY0d6W7ASbNrDRIrnYoPD+sAiP\nhcq1j6Xp0DA/a47CN4r9toX4JzS2bOgV/l7vl0qia6dd+21jYL0VzQL5ifK+NnM=\n=uzpL\n-----END PGP SIGNATURE-----\n", "payload": "tree 59e13abfebc1418f8cbf67b62b9054ebe79fc74c\nparent 29a597c4317076bcf11884da628e1c4a60eb88e5\nparent be7b3ba2e2c8d71fd01dfd7daa0200133d62cfea\nauthor St\u00e9phane Campinas <stephane.campinas@gmail.com> 1550924183 +0100\ncommitter GitHub <noreply@github.com> 1550924183 +0100\n\nMerge pull request #3409 from rchaser53/issue-3343\n\nadd config inline_attribute_width"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a75feedacfc0a561a5847de58369ca9af5cf4ad", "html_url": "https://github.com/rust-lang/rust/commit/6a75feedacfc0a561a5847de58369ca9af5cf4ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a75feedacfc0a561a5847de58369ca9af5cf4ad/comments", "author": {"login": "scampi", "id": 795879, "node_id": "MDQ6VXNlcjc5NTg3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/795879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scampi", "html_url": "https://github.com/scampi", "followers_url": "https://api.github.com/users/scampi/followers", "following_url": "https://api.github.com/users/scampi/following{/other_user}", "gists_url": "https://api.github.com/users/scampi/gists{/gist_id}", "starred_url": "https://api.github.com/users/scampi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scampi/subscriptions", "organizations_url": "https://api.github.com/users/scampi/orgs", "repos_url": "https://api.github.com/users/scampi/repos", "events_url": "https://api.github.com/users/scampi/events{/privacy}", "received_events_url": "https://api.github.com/users/scampi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29a597c4317076bcf11884da628e1c4a60eb88e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/29a597c4317076bcf11884da628e1c4a60eb88e5", "html_url": "https://github.com/rust-lang/rust/commit/29a597c4317076bcf11884da628e1c4a60eb88e5"}, {"sha": "be7b3ba2e2c8d71fd01dfd7daa0200133d62cfea", "url": "https://api.github.com/repos/rust-lang/rust/commits/be7b3ba2e2c8d71fd01dfd7daa0200133d62cfea", "html_url": "https://github.com/rust-lang/rust/commit/be7b3ba2e2c8d71fd01dfd7daa0200133d62cfea"}], "stats": {"total": 152, "additions": 150, "deletions": 2}, "files": [{"sha": "4f72e33b121a1c00015cacc55c6d0fccdb8c28f7", "filename": "Configurations.md", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6a75feedacfc0a561a5847de58369ca9af5cf4ad/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/6a75feedacfc0a561a5847de58369ca9af5cf4ad/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=6a75feedacfc0a561a5847de58369ca9af5cf4ad", "patch": "@@ -2408,6 +2408,27 @@ pub enum Foo {}\n pub enum Foo {}\n ```\n \n+## `inline_attribute_width`\n+\n+Write an item and its attribute on the same line if their combined width is below a threshold\n+\n+- **Default value**: 0\n+- **Possible values**: any positive integer\n+- **Stable**: No (tracking issue: #3343)\n+\n+### Example\n+\n+#### `0` (default):\n+```rust\n+#[cfg(feature = \"alloc\")]\n+use core::slice;\n+```\n+\n+#### `50`:\n+```rust\n+#[cfg(feature = \"alloc\")] use core::slice;\n+```\n+\n ## `emit_mode`\n \n Internal option"}, {"sha": "4f78a105cdb6e8c99cdd79a93ff27a9583a5343a", "filename": "src/config/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6a75feedacfc0a561a5847de58369ca9af5cf4ad/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a75feedacfc0a561a5847de58369ca9af5cf4ad/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=6a75feedacfc0a561a5847de58369ca9af5cf4ad", "patch": "@@ -105,6 +105,9 @@ create_config! {\n         \"Minimum number of blank lines which must be put between items\";\n     edition: Edition, Edition::Edition2015, true, \"The edition of the parser (RFC 2052)\";\n     version: Version, Version::One, false, \"Version of formatting rules\";\n+    inline_attribute_width: usize, 0, false,\n+        \"Write an item and its attribute on the same line \\\n+        if their combined width is below a threshold\";\n \n     // Options that can change the source code beyond whitespace/blocks (somewhat linty things)\n     merge_derives: bool, true, true, \"Merge multiple `#[derive(...)]` into a single one\";"}, {"sha": "a87d100ca9b1bfecd9776c78808f0ebf822eef43", "filename": "src/imports.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6a75feedacfc0a561a5847de58369ca9af5cf4ad/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a75feedacfc0a561a5847de58369ca9af5cf4ad/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=6a75feedacfc0a561a5847de58369ca9af5cf4ad", "patch": "@@ -249,7 +249,23 @@ impl UseTree {\n             let lo = attrs.last().as_ref()?.span().hi();\n             let hi = self.span.lo();\n             let span = mk_sp(lo, hi);\n-            combine_strs_with_missing_comments(context, &attr_str, &use_str, span, shape, false)\n+\n+            let allow_extend = if attrs.len() == 1 {\n+                let line_len = attr_str.len() + 1 + use_str.len();\n+                !attrs.first().unwrap().is_sugared_doc\n+                    && context.config.inline_attribute_width() >= line_len\n+            } else {\n+                false\n+            };\n+\n+            combine_strs_with_missing_comments(\n+                context,\n+                &attr_str,\n+                &use_str,\n+                span,\n+                shape,\n+                allow_extend,\n+            )\n         } else {\n             Some(use_str)\n         }"}, {"sha": "e206d9249e76e193921b5d11bba3081fa8429736", "filename": "src/reorder.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6a75feedacfc0a561a5847de58369ca9af5cf4ad/src%2Freorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a75feedacfc0a561a5847de58369ca9af5cf4ad/src%2Freorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Freorder.rs?ref=6a75feedacfc0a561a5847de58369ca9af5cf4ad", "patch": "@@ -83,7 +83,22 @@ fn rewrite_reorderable_item(\n         _ => return None,\n     };\n \n-    combine_strs_with_missing_comments(context, &attrs_str, &item_str, missed_span, shape, false)\n+    let allow_extend = if attrs.len() == 1 {\n+        let line_len = attrs_str.len() + 1 + item_str.len();\n+        !attrs.first().unwrap().is_sugared_doc\n+            && context.config.inline_attribute_width() >= line_len\n+    } else {\n+        false\n+    };\n+\n+    combine_strs_with_missing_comments(\n+        context,\n+        &attrs_str,\n+        &item_str,\n+        missed_span,\n+        shape,\n+        allow_extend,\n+    )\n }\n \n /// Rewrite a list of items with reordering. Every item in `items` must have"}, {"sha": "760d84dc3c37fc26bd450438afd6fbfa098b242b", "filename": "tests/source/issue-3343.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6a75feedacfc0a561a5847de58369ca9af5cf4ad/tests%2Fsource%2Fissue-3343.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a75feedacfc0a561a5847de58369ca9af5cf4ad/tests%2Fsource%2Fissue-3343.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-3343.rs?ref=6a75feedacfc0a561a5847de58369ca9af5cf4ad", "patch": "@@ -0,0 +1,48 @@\n+// rustfmt-inline_attribute_width: 50\n+\n+#[cfg(feature = \"alloc\")]\n+use core::slice;\n+\n+#[cfg(feature = \"alloc\")]\n+use total_len_is::_50__;\n+\n+#[cfg(feature = \"alloc\")]\n+use total_len_is::_51___;\n+\n+#[cfg(feature = \"alloc\")]\n+extern crate len_is_50_;\n+\n+#[cfg(feature = \"alloc\")]\n+extern crate len_is_51__;\n+\n+/// this is a comment to test is_sugared_doc property\n+use core::convert;\n+\n+#[fooooo]\n+#[barrrrr]\n+use total_len_is_::_51______;\n+\n+#[cfg(not(all(\n+    feature = \"std\",\n+    any(\n+        target_os = \"linux\",\n+        target_os = \"android\",\n+        target_os = \"netbsd\",\n+        target_os = \"dragonfly\",\n+        target_os = \"haiku\",\n+        target_os = \"emscripten\",\n+        target_os = \"solaris\",\n+        target_os = \"cloudabi\",\n+        target_os = \"macos\",\n+        target_os = \"ios\",\n+        target_os = \"freebsd\",\n+        target_os = \"openbsd\",\n+        target_os = \"bitrig\",\n+        target_os = \"redox\",\n+        target_os = \"fuchsia\",\n+        windows,\n+        all(target_arch = \"wasm32\", feature = \"stdweb\"),\n+        all(target_arch = \"wasm32\", feature = \"wasm-bindgen\"),\n+    )\n+)))]\n+use core::slice;"}, {"sha": "4a1496ef364fdb97b44d5626a9aba537d1df39f5", "filename": "tests/target/issue-3343.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/6a75feedacfc0a561a5847de58369ca9af5cf4ad/tests%2Ftarget%2Fissue-3343.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a75feedacfc0a561a5847de58369ca9af5cf4ad/tests%2Ftarget%2Fissue-3343.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3343.rs?ref=6a75feedacfc0a561a5847de58369ca9af5cf4ad", "patch": "@@ -0,0 +1,45 @@\n+// rustfmt-inline_attribute_width: 50\n+\n+#[cfg(feature = \"alloc\")] use core::slice;\n+\n+#[cfg(feature = \"alloc\")] use total_len_is::_50__;\n+\n+#[cfg(feature = \"alloc\")]\n+use total_len_is::_51___;\n+\n+#[cfg(feature = \"alloc\")] extern crate len_is_50_;\n+\n+#[cfg(feature = \"alloc\")]\n+extern crate len_is_51__;\n+\n+/// this is a comment to test is_sugared_doc property\n+use core::convert;\n+\n+#[fooooo]\n+#[barrrrr]\n+use total_len_is_::_51______;\n+\n+#[cfg(not(all(\n+    feature = \"std\",\n+    any(\n+        target_os = \"linux\",\n+        target_os = \"android\",\n+        target_os = \"netbsd\",\n+        target_os = \"dragonfly\",\n+        target_os = \"haiku\",\n+        target_os = \"emscripten\",\n+        target_os = \"solaris\",\n+        target_os = \"cloudabi\",\n+        target_os = \"macos\",\n+        target_os = \"ios\",\n+        target_os = \"freebsd\",\n+        target_os = \"openbsd\",\n+        target_os = \"bitrig\",\n+        target_os = \"redox\",\n+        target_os = \"fuchsia\",\n+        windows,\n+        all(target_arch = \"wasm32\", feature = \"stdweb\"),\n+        all(target_arch = \"wasm32\", feature = \"wasm-bindgen\"),\n+    )\n+)))]\n+use core::slice;"}]}