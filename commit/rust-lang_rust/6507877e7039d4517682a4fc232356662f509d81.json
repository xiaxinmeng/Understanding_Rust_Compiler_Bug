{"sha": "6507877e7039d4517682a4fc232356662f509d81", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1MDc4NzdlNzAzOWQ0NTE3NjgyYTRmYzIzMjM1NjY2MmY1MDlkODE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-11-02T11:18:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-02T11:18:03Z"}, "message": "Merge #6437\n\n6437: Document doer object anti-pattern r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "758ef751e20a4ab4b437b2abd7f0a49fc04245e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/758ef751e20a4ab4b437b2abd7f0a49fc04245e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6507877e7039d4517682a4fc232356662f509d81", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfn+rrCRBK7hj4Ov3rIwAAdHIIAIrxBfdXYoTlVvAHn2hGFs8h\nPaczMGuJQX/BysQK1fPMnST1qB/B0ZmqlaqvVgL0LF2TDQlQVBflWr7l1c+r+Wxm\nVxkwjhxlj2Oj2FqCEqYw5OzKw6ipM6TCjRrq5DCdZpqFFDuWW/YD1bK2x0KftSNE\nh9iM3Rlugr8k87lAdcYD6Irbw6GB+u95z4bbY6IhEz+F8LkS5LBx9P6Kdux74zur\n1cIo7H4IkFIEqRx7jz4dEGsVUGnsd/0i7PqxuTBrufMz2gz9xJvW1MEp0+Xy36XW\ngzJI93Fw8iz6ro6JSbKxf8bXI+xo802EOX2bdB5L9VRV6KQCy9BQBIo5je3jhg4=\n=YF84\n-----END PGP SIGNATURE-----\n", "payload": "tree 758ef751e20a4ab4b437b2abd7f0a49fc04245e8\nparent e7f90866bcf4b04a11e958eda0ac53f7ff0a607b\nparent 412d6b3db54a7efccf625d16d1e829cb7b5b1def\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1604315883 +0000\ncommitter GitHub <noreply@github.com> 1604315883 +0000\n\nMerge #6437\n\n6437: Document doer object anti-pattern r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6507877e7039d4517682a4fc232356662f509d81", "html_url": "https://github.com/rust-lang/rust/commit/6507877e7039d4517682a4fc232356662f509d81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6507877e7039d4517682a4fc232356662f509d81/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7f90866bcf4b04a11e958eda0ac53f7ff0a607b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7f90866bcf4b04a11e958eda0ac53f7ff0a607b", "html_url": "https://github.com/rust-lang/rust/commit/e7f90866bcf4b04a11e958eda0ac53f7ff0a607b"}, {"sha": "412d6b3db54a7efccf625d16d1e829cb7b5b1def", "url": "https://api.github.com/repos/rust-lang/rust/commits/412d6b3db54a7efccf625d16d1e829cb7b5b1def", "html_url": "https://github.com/rust-lang/rust/commit/412d6b3db54a7efccf625d16d1e829cb7b5b1def"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "8d57fc04983bc38800a6714ef05d03ab50ebdd01", "filename": "docs/dev/style.md", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/6507877e7039d4517682a4fc232356662f509d81/docs%2Fdev%2Fstyle.md", "raw_url": "https://github.com/rust-lang/rust/raw/6507877e7039d4517682a4fc232356662f509d81/docs%2Fdev%2Fstyle.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fstyle.md?ref=6507877e7039d4517682a4fc232356662f509d81", "patch": "@@ -211,6 +211,60 @@ impl Foo {\n \n Prefer `Default` even it has to be implemented manually.\n \n+## Functions Over Objects\n+\n+Avoid creating \"doer\" objects.\n+That is, objects which are created only to execute a single action.\n+\n+```rust\n+// Good\n+do_thing(arg1, arg2);\n+\n+// Not as good\n+ThingDoer::new(arg1, arg2).do();\n+```\n+\n+Note that this concerns only outward API.\n+When implementing `do_thing`, it might be very useful to create a context object.\n+\n+```rust\n+pub fn do_thing(arg1: Arg1, arg2: Arg2) -> Res {\n+    let mut ctx = Ctx { arg1, arg2 }\n+    ctx.run()\n+}\n+\n+struct Ctx {\n+    arg1: Arg1, arg2: Arg2\n+}\n+\n+impl Ctx {\n+    fn run(self) -> Res {\n+        ...\n+    }\n+}\n+```\n+\n+The difference is that `Ctx` is an impl detail here.\n+\n+Sometimes a middle ground is acceptable if this can save some busywork:\n+\n+```rust\n+ThingDoer::do(arg1, arg2);\n+\n+pub struct ThingDoer {\n+    arg1: Arg1, arg2: Arg2,\n+}\n+\n+impl ThingDoer {\n+    pub fn do(arg1: Arg1, arg2: Arg2) -> Res {\n+        ThingDoer { arg1, arg2 }.run()\n+    }\n+    fn run(self) -> Res {\n+        ...\n+    }\n+}\n+```\n+\n ## Avoid Monomorphization\n \n Rust uses monomorphization to compile generic code, meaning that for each instantiation of a generic functions with concrete types, the function is compiled afresh, *per crate*."}]}