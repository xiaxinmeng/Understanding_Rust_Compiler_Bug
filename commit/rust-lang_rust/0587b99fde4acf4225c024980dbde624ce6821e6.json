{"sha": "0587b99fde4acf4225c024980dbde624ce6821e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1ODdiOTlmZGU0YWNmNDIyNWMwMjQ5ODBkYmRlNjI0Y2U2ODIxZTY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-01-20T14:41:18Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-01-20T14:41:18Z"}, "message": "Make public DefMap fields private", "tree": {"sha": "0d60b83216f04eb8e2cbb35c1871c07364035a0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d60b83216f04eb8e2cbb35c1871c07364035a0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0587b99fde4acf4225c024980dbde624ce6821e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0587b99fde4acf4225c024980dbde624ce6821e6", "html_url": "https://github.com/rust-lang/rust/commit/0587b99fde4acf4225c024980dbde624ce6821e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0587b99fde4acf4225c024980dbde624ce6821e6/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de5aabd48be33898ae2280f1544bffe166075348", "url": "https://api.github.com/repos/rust-lang/rust/commits/de5aabd48be33898ae2280f1544bffe166075348", "html_url": "https://github.com/rust-lang/rust/commit/de5aabd48be33898ae2280f1544bffe166075348"}], "stats": {"total": 54, "additions": 31, "deletions": 23}, "files": [{"sha": "aaa7013b66a676554fb254782e418031dd51c96f", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0587b99fde4acf4225c024980dbde624ce6821e6/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0587b99fde4acf4225c024980dbde624ce6821e6/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=0587b99fde4acf4225c024980dbde624ce6821e6", "patch": "@@ -90,7 +90,7 @@ impl Crate {\n     }\n \n     pub fn root_module(self, db: &dyn HirDatabase) -> Module {\n-        let module_id = db.crate_def_map(self.id).root;\n+        let module_id = db.crate_def_map(self.id).root();\n         Module::new(self, module_id)\n     }\n \n@@ -302,7 +302,7 @@ impl Module {\n     /// in the module tree of any target in `Cargo.toml`.\n     pub fn crate_root(self, db: &dyn HirDatabase) -> Module {\n         let def_map = db.crate_def_map(self.id.krate);\n-        self.with_module_id(def_map.root)\n+        self.with_module_id(def_map.root())\n     }\n \n     /// Iterates over all child modules.\n@@ -1000,7 +1000,7 @@ impl MacroDef {\n     /// early, in `hir_expand`, where modules simply do not exist yet.\n     pub fn module(self, db: &dyn HirDatabase) -> Option<Module> {\n         let krate = self.id.krate;\n-        let module_id = db.crate_def_map(krate).root;\n+        let module_id = db.crate_def_map(krate).root();\n         Some(Module::new(Crate { id: krate }, module_id))\n     }\n "}, {"sha": "d7b7b9cc0dcc2dc790e9e5344889794a373593c0", "filename": "crates/hir_def/src/find_path.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0587b99fde4acf4225c024980dbde624ce6821e6/crates%2Fhir_def%2Fsrc%2Ffind_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0587b99fde4acf4225c024980dbde624ce6821e6/crates%2Fhir_def%2Fsrc%2Ffind_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ffind_path.rs?ref=0587b99fde4acf4225c024980dbde624ce6821e6", "patch": "@@ -51,7 +51,7 @@ fn check_self_super(def_map: &DefMap, item: ItemInNs, from: ModuleId) -> Option<\n     if item == ItemInNs::Types(from.into()) {\n         // - if the item is the module we're in, use `self`\n         Some(ModPath::from_segments(PathKind::Super(0), Vec::new()))\n-    } else if let Some(parent_id) = def_map.modules[from.local_id].parent {\n+    } else if let Some(parent_id) = def_map[from.local_id].parent {\n         // - if the item is the parent module, use `super` (this is not used recursively, since `super::super` is ugly)\n         if item\n             == ItemInNs::Types(ModuleDefId::ModuleId(ModuleId {\n@@ -111,7 +111,7 @@ fn find_path_inner(\n \n     // - if the item is already in scope, return the name under which it is\n     let def_map = db.crate_def_map(from.krate);\n-    let from_scope: &crate::item_scope::ItemScope = &def_map.modules[from.local_id].scope;\n+    let from_scope: &crate::item_scope::ItemScope = &def_map[from.local_id].scope;\n     let scope_name =\n         if let Some((name, _)) = from_scope.name_of(item) { Some(name.clone()) } else { None };\n     if prefixed.is_none() && scope_name.is_some() {\n@@ -123,7 +123,7 @@ fn find_path_inner(\n     if item\n         == ItemInNs::Types(ModuleDefId::ModuleId(ModuleId {\n             krate: from.krate,\n-            local_id: def_map.root,\n+            local_id: def_map.root(),\n         }))\n     {\n         return Some(ModPath::from_segments(PathKind::Crate, Vec::new()));\n@@ -147,7 +147,7 @@ fn find_path_inner(\n     if let Some(prelude_module) = def_map.prelude {\n         let prelude_def_map = db.crate_def_map(prelude_module.krate);\n         let prelude_scope: &crate::item_scope::ItemScope =\n-            &prelude_def_map.modules[prelude_module.local_id].scope;\n+            &prelude_def_map[prelude_module.local_id].scope;\n         if let Some((name, vis)) = prelude_scope.name_of(item) {\n             if vis.is_visible_from(db, from) {\n                 return Some(ModPath::from_segments(PathKind::Plain, vec![name.clone()]));\n@@ -175,7 +175,7 @@ fn find_path_inner(\n \n     // - otherwise, look for modules containing (reexporting) it and import it from one of those\n \n-    let crate_root = ModuleId { local_id: def_map.root, krate: from.krate };\n+    let crate_root = ModuleId { local_id: def_map.root(), krate: from.krate };\n     let crate_attrs = db.attrs(crate_root.into());\n     let prefer_no_std = crate_attrs.by_key(\"no_std\").exists();\n     let mut best_path = None;\n@@ -287,7 +287,7 @@ fn find_local_import_locations(\n \n     // Compute the initial worklist. We start with all direct child modules of `from` as well as all\n     // of its (recursive) parent modules.\n-    let data = &def_map.modules[from.local_id];\n+    let data = &def_map[from.local_id];\n     let mut worklist = data\n         .children\n         .values()\n@@ -296,7 +296,7 @@ fn find_local_import_locations(\n     let mut parent = data.parent;\n     while let Some(p) = parent {\n         worklist.push(ModuleId { krate: from.krate, local_id: p });\n-        parent = def_map.modules[p].parent;\n+        parent = def_map[p].parent;\n     }\n \n     let mut seen: FxHashSet<_> = FxHashSet::default();"}, {"sha": "0251d016b74af757c833bde67babd5d5d8e068bb", "filename": "crates/hir_def/src/import_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0587b99fde4acf4225c024980dbde624ce6821e6/crates%2Fhir_def%2Fsrc%2Fimport_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0587b99fde4acf4225c024980dbde624ce6821e6/crates%2Fhir_def%2Fsrc%2Fimport_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fimport_map.rs?ref=0587b99fde4acf4225c024980dbde624ce6821e6", "patch": "@@ -75,7 +75,7 @@ impl ImportMap {\n \n         // We look only into modules that are public(ly reexported), starting with the crate root.\n         let empty = ImportPath { segments: vec![] };\n-        let root = ModuleId { krate, local_id: def_map.root };\n+        let root = ModuleId { krate, local_id: def_map.root() };\n         let mut worklist = vec![(root, empty)];\n         while let Some((module, mod_path)) = worklist.pop() {\n             let ext_def_map;"}, {"sha": "9e90f745ce285b6455e1801e8d93e7b056d28af7", "filename": "crates/hir_def/src/lang_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0587b99fde4acf4225c024980dbde624ce6821e6/crates%2Fhir_def%2Fsrc%2Flang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0587b99fde4acf4225c024980dbde624ce6821e6/crates%2Fhir_def%2Fsrc%2Flang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Flang_item.rs?ref=0587b99fde4acf4225c024980dbde624ce6821e6", "patch": "@@ -84,7 +84,7 @@ impl LangItems {\n \n         let crate_def_map = db.crate_def_map(krate);\n \n-        for (_, module_data) in crate_def_map.modules.iter() {\n+        for (_, module_data) in crate_def_map.modules() {\n             for impl_def in module_data.scope.impls() {\n                 lang_items.collect_lang_item(db, impl_def, LangItemTarget::ImplDefId)\n             }"}, {"sha": "c3d3efc6bd88538d801efe30ce4d872676d2b019", "filename": "crates/hir_def/src/nameres.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0587b99fde4acf4225c024980dbde624ce6821e6/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0587b99fde4acf4225c024980dbde624ce6821e6/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres.rs?ref=0587b99fde4acf4225c024980dbde624ce6821e6", "patch": "@@ -75,8 +75,8 @@ use crate::{\n /// Contains all top-level defs from a macro-expanded crate\n #[derive(Debug, PartialEq, Eq)]\n pub struct DefMap {\n-    pub root: LocalModuleId,\n-    pub modules: Arena<ModuleData>,\n+    root: LocalModuleId,\n+    modules: Arena<ModuleData>,\n     pub(crate) krate: CrateId,\n     /// The prelude module for this crate. This either comes from an import\n     /// marked with the `prelude_import` attribute, or (in the normal case) from\n@@ -208,6 +208,14 @@ impl DefMap {\n             .map(|(id, _data)| id)\n     }\n \n+    pub fn modules(&self) -> impl Iterator<Item = (LocalModuleId, &ModuleData)> + '_ {\n+        self.modules.iter()\n+    }\n+\n+    pub fn root(&self) -> LocalModuleId {\n+        self.root\n+    }\n+\n     pub(crate) fn resolve_path(\n         &self,\n         db: &dyn DefDatabase,"}, {"sha": "4ff219fb702f6d2566ad49115979fd6cb3d7b9b5", "filename": "crates/hir_def/src/test_db.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0587b99fde4acf4225c024980dbde624ce6821e6/crates%2Fhir_def%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0587b99fde4acf4225c024980dbde624ce6821e6/crates%2Fhir_def%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ftest_db.rs?ref=0587b99fde4acf4225c024980dbde624ce6821e6", "patch": "@@ -75,7 +75,7 @@ impl TestDB {\n     pub(crate) fn module_for_file(&self, file_id: FileId) -> crate::ModuleId {\n         for &krate in self.relevant_crates(file_id).iter() {\n             let crate_def_map = self.crate_def_map(krate);\n-            for (local_id, data) in crate_def_map.modules.iter() {\n+            for (local_id, data) in crate_def_map.modules() {\n                 if data.origin.file_id() == Some(file_id) {\n                     return crate::ModuleId { krate, local_id };\n                 }\n@@ -110,7 +110,7 @@ impl TestDB {\n         let crate_graph = self.crate_graph();\n         for krate in crate_graph.iter() {\n             let crate_def_map = self.crate_def_map(krate);\n-            for (module_id, _) in crate_def_map.modules.iter() {\n+            for (module_id, _) in crate_def_map.modules() {\n                 let file_id = crate_def_map[module_id].origin.file_id();\n                 files.extend(file_id)\n             }\n@@ -135,7 +135,7 @@ impl TestDB {\n             let crate_def_map = self.crate_def_map(krate);\n \n             let mut sink = DiagnosticSinkBuilder::new().build(&mut cb);\n-            for (module_id, module) in crate_def_map.modules.iter() {\n+            for (module_id, module) in crate_def_map.modules() {\n                 crate_def_map.add_diagnostics(self, module_id, &mut sink);\n \n                 for decl in module.scope.declarations() {"}, {"sha": "247da43f22d13ae7a796068087793f2034a9145f", "filename": "crates/hir_ty/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0587b99fde4acf4225c024980dbde624ce6821e6/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0587b99fde4acf4225c024980dbde624ce6821e6/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs?ref=0587b99fde4acf4225c024980dbde624ce6821e6", "patch": "@@ -409,7 +409,7 @@ mod tests {\n                 let crate_def_map = self.crate_def_map(krate);\n \n                 let mut fns = Vec::new();\n-                for (module_id, _) in crate_def_map.modules.iter() {\n+                for (module_id, _) in crate_def_map.modules() {\n                     for decl in crate_def_map[module_id].scope.declarations() {\n                         let mut sink = DiagnosticSinkBuilder::new().build(&mut cb);\n                         validate_module_item(self, krate, decl, &mut sink);"}, {"sha": "f06aeeb4286eaebf62dce2641758fc836c94025f", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0587b99fde4acf4225c024980dbde624ce6821e6/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0587b99fde4acf4225c024980dbde624ce6821e6/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=0587b99fde4acf4225c024980dbde624ce6821e6", "patch": "@@ -112,7 +112,7 @@ impl TraitImpls {\n         let mut impls = Self { map: FxHashMap::default() };\n \n         let crate_def_map = db.crate_def_map(krate);\n-        for (_module_id, module_data) in crate_def_map.modules.iter() {\n+        for (_module_id, module_data) in crate_def_map.modules() {\n             for impl_id in module_data.scope.impls() {\n                 let target_trait = match db.impl_trait(impl_id) {\n                     Some(tr) => tr.value.trait_,\n@@ -198,7 +198,7 @@ impl InherentImpls {\n         let mut map: FxHashMap<_, Vec<_>> = FxHashMap::default();\n \n         let crate_def_map = db.crate_def_map(krate);\n-        for (_module_id, module_data) in crate_def_map.modules.iter() {\n+        for (_module_id, module_data) in crate_def_map.modules() {\n             for impl_id in module_data.scope.impls() {\n                 let data = db.impl_data(impl_id);\n                 if data.target_trait.is_some() {"}, {"sha": "3bbcbc242a8131b66765e062ae22e8dd384a84ec", "filename": "crates/hir_ty/src/test_db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0587b99fde4acf4225c024980dbde624ce6821e6/crates%2Fhir_ty%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0587b99fde4acf4225c024980dbde624ce6821e6/crates%2Fhir_ty%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftest_db.rs?ref=0587b99fde4acf4225c024980dbde624ce6821e6", "patch": "@@ -81,7 +81,7 @@ impl TestDB {\n     pub(crate) fn module_for_file(&self, file_id: FileId) -> ModuleId {\n         for &krate in self.relevant_crates(file_id).iter() {\n             let crate_def_map = self.crate_def_map(krate);\n-            for (local_id, data) in crate_def_map.modules.iter() {\n+            for (local_id, data) in crate_def_map.modules() {\n                 if data.origin.file_id() == Some(file_id) {\n                     return ModuleId { krate, local_id };\n                 }\n@@ -95,7 +95,7 @@ impl TestDB {\n         let crate_graph = self.crate_graph();\n         for krate in crate_graph.iter() {\n             let crate_def_map = self.crate_def_map(krate);\n-            for (module_id, _) in crate_def_map.modules.iter() {\n+            for (module_id, _) in crate_def_map.modules() {\n                 let file_id = crate_def_map[module_id].origin.file_id();\n                 files.extend(file_id)\n             }"}, {"sha": "e954bd72e2ad02a057b1cb72b814478091103ea0", "filename": "crates/ide_db/src/symbol_index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0587b99fde4acf4225c024980dbde624ce6821e6/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0587b99fde4acf4225c024980dbde624ce6821e6/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs?ref=0587b99fde4acf4225c024980dbde624ce6821e6", "patch": "@@ -191,7 +191,7 @@ pub fn crate_symbols(db: &RootDatabase, krate: CrateId, query: Query) -> Vec<Fil\n \n     let def_map = db.crate_def_map(krate);\n     let mut files = Vec::new();\n-    let mut modules = vec![def_map.root];\n+    let mut modules = vec![def_map.root()];\n     while let Some(module) = modules.pop() {\n         let data = &def_map[module];\n         files.extend(data.origin.file_id());"}]}