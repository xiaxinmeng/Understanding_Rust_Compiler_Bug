{"sha": "17dbecfa3263d7a2ca7eec51f60a2a739078be6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3ZGJlY2ZhMzI2M2Q3YTJjYTdlZWM1MWY2MGEyYTczOTA3OGJlNmU=", "commit": {"author": {"name": "Christian Poveda", "email": "31802960+christianpoveda@users.noreply.github.com", "date": "2019-06-21T02:38:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-21T02:38:10Z"}, "message": "Merge branch 'master' into master", "tree": {"sha": "bdd25d3957a6554e6c58cb1094f4c1023045482c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdd25d3957a6554e6c58cb1094f4c1023045482c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17dbecfa3263d7a2ca7eec51f60a2a739078be6e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdDEMSCRBK7hj4Ov3rIwAAdHIIADiyuB16OqxpTzGjvRJkDyPX\nYHx21Ek/8n5SAdYEFgZx6JZrM3Zx7sDMp5KxFP/bealT1TwQ9LXEr3+UnYXfyMRl\nHce64X9T8zoSrYDNcbAG77jZlHHRkHnveZGd8v640dtMMmv73qx/xjhztrakFTX9\nCTpqMY55FfI+P4EXkPdrxS0AjY9jC9hknuVWtYdOSxsVBbCOsqmhr88h6zcCPr0w\nLK+9iEB3PqS4F+nlhTr3u4K3Ydv7AHk0JqPArtxhmbZDSgTdJG1oFkCqCmLSu/Sk\nuVQJQHCBLX/Q/TNxpPhuyvDlImnyEcBpB+W4SBF7MFj8qNtzMlZTAeVWBYhGSEo=\n=DW6J\n-----END PGP SIGNATURE-----\n", "payload": "tree bdd25d3957a6554e6c58cb1094f4c1023045482c\nparent 4211d7e1a0083456dfdb9ad466907ed17ed23cd4\nparent 53b46db5fce00b8adfc34f38190caecc63be606b\nauthor Christian Poveda <31802960+christianpoveda@users.noreply.github.com> 1561084690 -0500\ncommitter GitHub <noreply@github.com> 1561084690 -0500\n\nMerge branch 'master' into master"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17dbecfa3263d7a2ca7eec51f60a2a739078be6e", "html_url": "https://github.com/rust-lang/rust/commit/17dbecfa3263d7a2ca7eec51f60a2a739078be6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17dbecfa3263d7a2ca7eec51f60a2a739078be6e/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4211d7e1a0083456dfdb9ad466907ed17ed23cd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/4211d7e1a0083456dfdb9ad466907ed17ed23cd4", "html_url": "https://github.com/rust-lang/rust/commit/4211d7e1a0083456dfdb9ad466907ed17ed23cd4"}, {"sha": "53b46db5fce00b8adfc34f38190caecc63be606b", "url": "https://api.github.com/repos/rust-lang/rust/commits/53b46db5fce00b8adfc34f38190caecc63be606b", "html_url": "https://github.com/rust-lang/rust/commit/53b46db5fce00b8adfc34f38190caecc63be606b"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "5080a22aded9781e8ec50156b3e1fb611286c77e", "filename": ".appveyor.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17dbecfa3263d7a2ca7eec51f60a2a739078be6e/.appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/17dbecfa3263d7a2ca7eec51f60a2a739078be6e/.appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.appveyor.yml?ref=17dbecfa3263d7a2ca7eec51f60a2a739078be6e", "patch": "@@ -36,7 +36,7 @@ build_script:\n     - cargo install --all-features --force --path . --locked --offline\n     # Get ourselves a MIR-full libstd, and use it henceforth\n     - cargo miri setup\n-    - set MIRI_SYSROOT=%USERPROFILE%\\AppData\\Local\\miri\\miri\\cache\\HOST\n+    - set MIRI_SYSROOT=%USERPROFILE%\\AppData\\Local\\rust-lang\\miri\\cache\\HOST\n \n test_script:\n     # Test miri"}, {"sha": "cc95eeb7f3a0a55e0c91b0fa26426c9e3811cac3", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17dbecfa3263d7a2ca7eec51f60a2a739078be6e/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17dbecfa3263d7a2ca7eec51f60a2a739078be6e/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=17dbecfa3263d7a2ca7eec51f60a2a739078be6e", "patch": "@@ -248,7 +248,7 @@ fn setup(ask_user: bool) {\n     }\n \n     // Next, we need our own libstd. We will do this work in whatever is a good cache dir for this platform.\n-    let dirs = directories::ProjectDirs::from(\"miri\", \"miri\", \"miri\").unwrap();\n+    let dirs = directories::ProjectDirs::from(\"org\", \"rust-lang\", \"miri\").unwrap();\n     let dir = dirs.cache_dir();\n     if !dir.exists() {\n         fs::create_dir_all(&dir).unwrap();"}]}