{"sha": "b172e89c148d11afc85147294c47496bda48fce7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxNzJlODljMTQ4ZDExYWZjODUxNDcyOTRjNDc0OTZiZGE0OGZjZTc=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alex@noldorin.com", "date": "2019-01-13T03:14:18Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-13T03:58:18Z"}, "message": "Minor cosmetic changes", "tree": {"sha": "d310753c22ca69e2d076366dab73616ce87b31f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d310753c22ca69e2d076366dab73616ce87b31f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b172e89c148d11afc85147294c47496bda48fce7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b172e89c148d11afc85147294c47496bda48fce7", "html_url": "https://github.com/rust-lang/rust/commit/b172e89c148d11afc85147294c47496bda48fce7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b172e89c148d11afc85147294c47496bda48fce7/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b234f61c6e1c0dbed8d3fc7ff8cac8c08401c23", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b234f61c6e1c0dbed8d3fc7ff8cac8c08401c23", "html_url": "https://github.com/rust-lang/rust/commit/2b234f61c6e1c0dbed8d3fc7ff8cac8c08401c23"}], "stats": {"total": 20, "additions": 12, "deletions": 8}, "files": [{"sha": "5326ef1e7c12e1efe68a462dbec62e6dfd5e7754", "filename": "src/libcore/num/bignum.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b172e89c148d11afc85147294c47496bda48fce7/src%2Flibcore%2Fnum%2Fbignum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b172e89c148d11afc85147294c47496bda48fce7/src%2Flibcore%2Fnum%2Fbignum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fbignum.rs?ref=b172e89c148d11afc85147294c47496bda48fce7", "patch": "@@ -48,8 +48,8 @@ macro_rules! impl_full_ops {\n             impl FullOps for $ty {\n                 #[cfg(stage0)]\n                 fn full_add(self, other: $ty, carry: bool) -> (bool, $ty) {\n-                    // this cannot overflow, the output is between 0 and 2*2^nbits - 1\n-                    // FIXME will LLVM optimize this into ADC or similar???\n+                    // This cannot overflow; the output is between `0` and `2 * 2^nbits - 1`.\n+                    // FIXME: will LLVM optimize this into ADC or similar?\n                     let (v, carry1) = unsafe { intrinsics::add_with_overflow(self, other) };\n                     let (v, carry2) = unsafe {\n                         intrinsics::add_with_overflow(v, if carry {1} else {0})\n@@ -58,22 +58,25 @@ macro_rules! impl_full_ops {\n                 }\n                 #[cfg(not(stage0))]\n                 fn full_add(self, other: $ty, carry: bool) -> (bool, $ty) {\n-                    // this cannot overflow, the output is between 0 and 2*2^nbits - 1\n-                    // FIXME will LLVM optimize this into ADC or similar???\n+                    // This cannot overflow; the output is between `0` and `2 * 2^nbits - 1`.\n+                    // FIXME: will LLVM optimize this into ADC or similar?\n                     let (v, carry1) = intrinsics::add_with_overflow(self, other);\n                     let (v, carry2) = intrinsics::add_with_overflow(v, if carry {1} else {0});\n                     (carry1 || carry2, v)\n                 }\n \n                 fn full_mul(self, other: $ty, carry: $ty) -> ($ty, $ty) {\n-                    // this cannot overflow, the output is between 0 and 2^nbits * (2^nbits - 1)\n+                    // This cannot overflow;\n+                    // the output is between `0` and `2^nbits * (2^nbits - 1)`.\n+                    // FIXME: will LLVM optimize this into ADC or similar?\n                     let nbits = mem::size_of::<$ty>() * 8;\n                     let v = (self as $bigty) * (other as $bigty) + (carry as $bigty);\n                     ((v >> nbits) as $ty, v as $ty)\n                 }\n \n                 fn full_mul_add(self, other: $ty, other2: $ty, carry: $ty) -> ($ty, $ty) {\n-                    // this cannot overflow, the output is between 0 and 2^(2*nbits) - 1\n+                    // This cannot overflow;\n+                    // the output is between `0` and `2^nbits * (2^nbits - 1)`.\n                     let nbits = mem::size_of::<$ty>() * 8;\n                     let v = (self as $bigty) * (other as $bigty) + (other2 as $bigty) +\n                             (carry as $bigty);\n@@ -82,7 +85,7 @@ macro_rules! impl_full_ops {\n \n                 fn full_div_rem(self, other: $ty, borrow: $ty) -> ($ty, $ty) {\n                     debug_assert!(borrow < other);\n-                    // this cannot overflow, the dividend is between 0 and other * 2^nbits - 1\n+                    // This cannot overflow; the output is between `0` and `other * (2^nbits - 1)`.\n                     let nbits = mem::size_of::<$ty>() * 8;\n                     let lhs = ((borrow as $bigty) << nbits) | (self as $bigty);\n                     let rhs = other as $bigty;\n@@ -97,7 +100,8 @@ impl_full_ops! {\n     u8:  add(intrinsics::u8_add_with_overflow),  mul/div(u16);\n     u16: add(intrinsics::u16_add_with_overflow), mul/div(u32);\n     u32: add(intrinsics::u32_add_with_overflow), mul/div(u64);\n-//  u64: add(intrinsics::u64_add_with_overflow), mul/div(u128); // see RFC #521 for enabling this.\n+    // See RFC #521 for enabling this.\n+    // u64: add(intrinsics::u64_add_with_overflow), mul/div(u128);\n }\n \n /// Table of powers of 5 representable in digits. Specifically, the largest {u8, u16, u32} value"}]}