{"sha": "4e4443718021f9fb82c70f87e67bc4ae5ef67233", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlNDQ0MzcxODAyMWY5ZmI4MmM3MGY4N2U2N2JjNGFlNWVmNjcyMzM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-18T01:34:03Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-18T01:34:05Z"}, "message": "rustc: Make resolve more forgiving of missing external crates\n\nRustdoc needs to be able to resolve locals without resolving externals", "tree": {"sha": "76812738e851cd86b957d19550b38f467096ba8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76812738e851cd86b957d19550b38f467096ba8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e4443718021f9fb82c70f87e67bc4ae5ef67233", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e4443718021f9fb82c70f87e67bc4ae5ef67233", "html_url": "https://github.com/rust-lang/rust/commit/4e4443718021f9fb82c70f87e67bc4ae5ef67233", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e4443718021f9fb82c70f87e67bc4ae5ef67233/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cec1679cf60304a0992c491ed39834b48c460337", "url": "https://api.github.com/repos/rust-lang/rust/commits/cec1679cf60304a0992c491ed39834b48c460337", "html_url": "https://github.com/rust-lang/rust/commit/cec1679cf60304a0992c491ed39834b48c460337"}], "stats": {"total": 23, "additions": 16, "deletions": 7}, "files": [{"sha": "c044f32457d614e27c4668b501138833da8de2d1", "filename": "src/comp/metadata/cstore.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4e4443718021f9fb82c70f87e67bc4ae5ef67233/src%2Fcomp%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e4443718021f9fb82c70f87e67bc4ae5ef67233/src%2Fcomp%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcstore.rs?ref=4e4443718021f9fb82c70f87e67bc4ae5ef67233", "patch": "@@ -20,7 +20,7 @@ export get_used_libraries;\n export add_used_link_args;\n export get_used_link_args;\n export add_use_stmt_cnum;\n-export get_use_stmt_cnum;\n+export find_use_stmt_cnum;\n export get_dep_hashes;\n export get_path;\n \n@@ -131,8 +131,9 @@ fn add_use_stmt_cnum(cstore: cstore, use_id: ast::node_id,\n     p(cstore).use_crate_map.insert(use_id, cnum);\n }\n \n-fn get_use_stmt_cnum(cstore: cstore, use_id: ast::node_id) -> ast::crate_num {\n-    ret p(cstore).use_crate_map.get(use_id);\n+fn find_use_stmt_cnum(cstore: cstore,\n+                      use_id: ast::node_id) -> option<ast::crate_num> {\n+    p(cstore).use_crate_map.find(use_id)\n }\n \n // returns hashes of crates directly used by this crate. Hashes are"}, {"sha": "7c93f7650f45070da8ed9665b88fd770c6e64349", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4e4443718021f9fb82c70f87e67bc4ae5ef67233/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e4443718021f9fb82c70f87e67bc4ae5ef67233/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=4e4443718021f9fb82c70f87e67bc4ae5ef67233", "patch": "@@ -1285,9 +1285,17 @@ fn lookup_in_mod(e: env, m: def, sp: span, name: ident, ns: namespace,\n     }\n }\n \n-fn found_view_item(e: env, id: node_id) -> def {\n-    let cnum = cstore::get_use_stmt_cnum(e.cstore, id);\n-    ret ast::def_mod({crate: cnum, node: ast::crate_node_id});\n+fn found_view_item(e: env, id: node_id) -> option<def> {\n+    alt cstore::find_use_stmt_cnum(e.cstore, id) {\n+      some(cnum) {\n+        some(ast::def_mod({crate: cnum, node: ast::crate_node_id}))\n+      }\n+      none {\n+        // This can happen if we didn't load external crate info.\n+        // Rustdoc depends on this.\n+        none\n+      }\n+    }\n }\n \n fn lookup_import(e: env, defid: def_id, ns: namespace) -> option<def> {\n@@ -1418,7 +1426,7 @@ fn lookup_in_mie(e: env, mie: mod_index_entry, ns: namespace) ->\n    option<def> {\n     alt mie {\n       mie_view_item(_, id, _) {\n-         if ns == ns_module { ret some(found_view_item(e, id)); }\n+         if ns == ns_module { ret found_view_item(e, id); }\n       }\n       mie_import_ident(id, _) { ret lookup_import(e, local_def(id), ns); }\n       mie_item(item) { ret found_def_item(item, ns); }"}]}