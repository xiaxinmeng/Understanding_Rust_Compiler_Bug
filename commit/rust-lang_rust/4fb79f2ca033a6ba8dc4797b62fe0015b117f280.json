{"sha": "4fb79f2ca033a6ba8dc4797b62fe0015b117f280", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmYjc5ZjJjYTAzM2E2YmE4ZGM0Nzk3YjYyZmUwMDE1YjExN2YyODA=", "commit": {"author": {"name": "Emil Lauridsen", "email": "mine809@gmail.com", "date": "2020-03-16T13:17:32Z"}, "committer": {"name": "Emil Lauridsen", "email": "mine809@gmail.com", "date": "2020-03-17T13:47:05Z"}, "message": "Support specifying OUT_DIR in json project", "tree": {"sha": "28fb79d3dc3a4084448750e3b0e781d73237c4f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28fb79d3dc3a4084448750e3b0e781d73237c4f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fb79f2ca033a6ba8dc4797b62fe0015b117f280", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fb79f2ca033a6ba8dc4797b62fe0015b117f280", "html_url": "https://github.com/rust-lang/rust/commit/4fb79f2ca033a6ba8dc4797b62fe0015b117f280", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fb79f2ca033a6ba8dc4797b62fe0015b117f280/comments", "author": {"login": "kiljacken", "id": 209321, "node_id": "MDQ6VXNlcjIwOTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/209321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiljacken", "html_url": "https://github.com/kiljacken", "followers_url": "https://api.github.com/users/kiljacken/followers", "following_url": "https://api.github.com/users/kiljacken/following{/other_user}", "gists_url": "https://api.github.com/users/kiljacken/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiljacken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiljacken/subscriptions", "organizations_url": "https://api.github.com/users/kiljacken/orgs", "repos_url": "https://api.github.com/users/kiljacken/repos", "events_url": "https://api.github.com/users/kiljacken/events{/privacy}", "received_events_url": "https://api.github.com/users/kiljacken/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kiljacken", "id": 209321, "node_id": "MDQ6VXNlcjIwOTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/209321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiljacken", "html_url": "https://github.com/kiljacken", "followers_url": "https://api.github.com/users/kiljacken/followers", "following_url": "https://api.github.com/users/kiljacken/following{/other_user}", "gists_url": "https://api.github.com/users/kiljacken/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiljacken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiljacken/subscriptions", "organizations_url": "https://api.github.com/users/kiljacken/orgs", "repos_url": "https://api.github.com/users/kiljacken/repos", "events_url": "https://api.github.com/users/kiljacken/events{/privacy}", "received_events_url": "https://api.github.com/users/kiljacken/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5a2fcf8f59eda3498bbdcb87568e5ba6b4db8b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5a2fcf8f59eda3498bbdcb87568e5ba6b4db8b7", "html_url": "https://github.com/rust-lang/rust/commit/f5a2fcf8f59eda3498bbdcb87568e5ba6b4db8b7"}], "stats": {"total": 25, "additions": 22, "deletions": 3}, "files": [{"sha": "336446e58c3941fb3f566dbd85e4ff74dbd3aca3", "filename": "crates/ra_project_model/src/json_project.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fb79f2ca033a6ba8dc4797b62fe0015b117f280/crates%2Fra_project_model%2Fsrc%2Fjson_project.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fb79f2ca033a6ba8dc4797b62fe0015b117f280/crates%2Fra_project_model%2Fsrc%2Fjson_project.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fjson_project.rs?ref=4fb79f2ca033a6ba8dc4797b62fe0015b117f280", "patch": "@@ -22,6 +22,7 @@ pub struct Crate {\n     pub(crate) deps: Vec<Dep>,\n     pub(crate) atom_cfgs: FxHashSet<String>,\n     pub(crate) key_value_cfgs: FxHashMap<String, String>,\n+    pub(crate) out_dir: Option<PathBuf>,\n }\n \n #[derive(Clone, Copy, Debug, Deserialize)]"}, {"sha": "081b1fec2f55481925fe3fbb52153c91497c1faa", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4fb79f2ca033a6ba8dc4797b62fe0015b117f280/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fb79f2ca033a6ba8dc4797b62fe0015b117f280/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=4fb79f2ca033a6ba8dc4797b62fe0015b117f280", "patch": "@@ -152,7 +152,15 @@ impl ProjectWorkspace {\n \n     pub fn out_dirs(&self) -> Vec<PathBuf> {\n         match self {\n-            ProjectWorkspace::Json { project: _project } => vec![],\n+            ProjectWorkspace::Json { project } => {\n+                let mut out_dirs = Vec::with_capacity(project.crates.len());\n+                for krate in &project.crates {\n+                    if let Some(out_dir) = &krate.out_dir {\n+                        out_dirs.push(out_dir.to_path_buf());\n+                    }\n+                }\n+                out_dirs\n+            }\n             ProjectWorkspace::Cargo { cargo, sysroot: _sysroot } => {\n                 let mut out_dirs = Vec::with_capacity(cargo.packages().len());\n                 for pkg in cargo.packages() {\n@@ -202,6 +210,16 @@ impl ProjectWorkspace {\n                             opts\n                         };\n \n+                        let mut env = Env::default();\n+                        let mut extern_source = ExternSource::default();\n+                        if let Some(out_dir) = &krate.out_dir {\n+                            // FIXME: We probably mangle non UTF-8 paths here, figure out a better solution\n+                            env.set(\"OUT_DIR\", out_dir.to_string_lossy().to_string());\n+                            if let Some(&extern_source_id) = extern_source_roots.get(out_dir) {\n+                                extern_source.set_extern_path(&out_dir, extern_source_id);\n+                            }\n+                        }\n+\n                         // FIXME: No crate name in json definition such that we cannot add OUT_DIR to env\n                         crates.insert(\n                             crate_id,\n@@ -211,8 +229,8 @@ impl ProjectWorkspace {\n                                 // FIXME json definitions can store the crate name\n                                 None,\n                                 cfg_options,\n-                                Env::default(),\n-                                Default::default(),\n+                                env,\n+                                extern_source,\n                             ),\n                         );\n                     }"}]}