{"sha": "bf99a3aa932d32a1390ca58df403c68defc51a07", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmOTlhM2FhOTMyZDMyYTEzOTBjYTU4ZGY0MDNjNjhkZWZjNTFhMDc=", "commit": {"author": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2012-04-10T21:59:53Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-20T22:23:21Z"}, "message": "adding low-level uv_timer_* stuff to libuv bindings", "tree": {"sha": "81d807ca79a901058ee843112eac1dc8a5e9280e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81d807ca79a901058ee843112eac1dc8a5e9280e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf99a3aa932d32a1390ca58df403c68defc51a07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf99a3aa932d32a1390ca58df403c68defc51a07", "html_url": "https://github.com/rust-lang/rust/commit/bf99a3aa932d32a1390ca58df403c68defc51a07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf99a3aa932d32a1390ca58df403c68defc51a07/comments", "author": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d004c6df8f25e1f120279c1e9e9b1b6e38810e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d004c6df8f25e1f120279c1e9e9b1b6e38810e0", "html_url": "https://github.com/rust-lang/rust/commit/3d004c6df8f25e1f120279c1e9e9b1b6e38810e0"}], "stats": {"total": 223, "additions": 180, "deletions": 43}, "files": [{"sha": "6d548dcdc2076914eab70b560c8ebd39cf8a0c46", "filename": "src/libstd/uv.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bf99a3aa932d32a1390ca58df403c68defc51a07/src%2Flibstd%2Fuv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf99a3aa932d32a1390ca58df403c68defc51a07/src%2Flibstd%2Fuv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv.rs?ref=bf99a3aa932d32a1390ca58df403c68defc51a07", "patch": "@@ -53,15 +53,15 @@ native mod rustrt {\n         loop_handle: *libc::c_void,\n         cb: *u8,\n         id: *u8) -> *libc::c_void;\n-    fn rust_uv_timer_init(\n+    fn rust_uv_hilvl_timer_init(\n         loop_handle: *libc::c_void,\n         cb: *u8,\n         id: *u8) -> *libc::c_void;\n-    fn rust_uv_timer_start(\n+    fn rust_uv_hilvl_timer_start(\n         timer_handle: *libc::c_void,\n         timeout: libc::c_uint,\n         repeat: libc::c_uint);\n-    fn rust_uv_timer_stop(handle: *libc::c_void);\n+    fn rust_uv_timer_stop(handle: *ll::uv_timer_t) -> libc::c_int;\n     fn rust_uv_free(ptr: *libc::c_void);\n     // sizeof testing helpers\n     fn rust_uv_helper_uv_tcp_t_size() -> libc::c_uint;\n@@ -71,6 +71,7 @@ native mod rustrt {\n     fn rust_uv_helper_uv_err_t_size() -> libc::c_uint;\n     fn rust_uv_helper_sockaddr_in_size() -> libc::c_uint;\n     fn rust_uv_helper_uv_async_t_size() -> libc::c_uint;\n+    fn rust_uv_helper_uv_timer_t_size() -> libc::c_uint;\n }\n \n \n@@ -525,7 +526,7 @@ crust fn process_operation(\n           }\n           op_timer_init(id) {\n             let id_ptr = vec::unsafe::to_ptr(id);\n-            let timer_handle = rustrt::rust_uv_timer_init(\n+            let timer_handle = rustrt::rust_uv_hilvl_timer_init(\n                 lp,\n                 process_timer_call,\n                 id_ptr);\n@@ -534,11 +535,11 @@ crust fn process_operation(\n                 timer_handle));\n           }\n           op_timer_start(id, handle, timeout, repeat) {\n-            rustrt::rust_uv_timer_start(handle, timeout,\n+            rustrt::rust_uv_hilvl_timer_start(handle, timeout,\n                                               repeat);\n           }\n           op_timer_stop(id, handle, after_cb) {\n-            rustrt::rust_uv_timer_stop(handle);\n+            rustrt::rust_uv_timer_stop(handle as *ll::uv_timer_t);\n             comm::send(loop_chan, uv_timer_stop(id, after_cb));\n           }\n           op_teardown(op_handle) {\n@@ -1251,5 +1252,17 @@ mod test {\n         log(debug, output);\n         assert native_handle_size as uint == rust_handle_size;\n     }\n+    \n+    #[test]\n+    #[ignore(cfg(target_os = \"freebsd\"))]\n+    fn test_uv_struct_size_uv_timer_t() {\n+        let native_handle_size =\n+            rustrt::rust_uv_helper_uv_timer_t_size();\n+        let rust_handle_size = sys::size_of::<ll::uv_timer_t>();\n+        let output = #fmt(\"uv_timer_t -- native: %u rust: %u\",\n+                          native_handle_size as uint, rust_handle_size);\n+        log(debug, output);\n+        assert native_handle_size as uint == rust_handle_size;\n+    }\n \n }"}, {"sha": "9d9b12229dddde5e1ae67dfe20857e59722b6081", "filename": "src/libstd/uv_ll.rs", "status": "modified", "additions": 140, "deletions": 33, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/bf99a3aa932d32a1390ca58df403c68defc51a07/src%2Flibstd%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf99a3aa932d32a1390ca58df403c68defc51a07/src%2Flibstd%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_ll.rs?ref=bf99a3aa932d32a1390ca58df403c68defc51a07", "patch": "@@ -201,6 +201,36 @@ type uv_async_t = {\n     a12: *u8\n };\n \n+// 64bit unix size: 128\n+// 32bit unix size: ?\n+#[cfg(target_os = \"linux\")]\n+#[cfg(target_os = \"macos\")]\n+#[cfg(target_os = \"freebsd\")]\n+type uv_timer_t = {\n+    fields: uv_handle_fields,\n+    a00: *u8, a01: *u8, a02: *u8, a03: *u8,\n+    a04: *u8, a05: *u8, a06: *u8, a07: *u8,\n+    a08: *u8, a09: *u8,\n+    a11: uv_timer_t_32bit_unix_riders\n+};\n+#[cfg(target_arch=\"x86_64\")]\n+type uv_timer_t_32bit_unix_riders = {\n+    a10: *u8, a11: *u8\n+};\n+#[cfg(target_arch=\"x86\")]\n+type uv_timer_t_32bit_unix_riders = {\n+    a10: *u8, a11: *u8, a12: *u8, a13: *u8\n+};\n+// win32 size: ?\n+#[cfg(target_os = \"win32\")]\n+type uv_timer_t = {\n+    fields: uv_handle_fields,\n+    a00: *u8, a01: *u8, a02: *u8, a03: *u8,\n+    a04: *u8, a05: *u8, a06: *u8, a07: *u8,\n+    a08: *u8, a09: *u8, a10: *u8, a11: *u8,\n+    a12: *u8\n+};\n+\n // unix size: 16\n #[cfg(target_os = \"linux\")]\n #[cfg(target_os = \"macos\")]\n@@ -379,6 +409,57 @@ mod uv_ll_struct_stubgen {\n     #[cfg(target_os = \"linux\")]\n     #[cfg(target_os = \"macos\")]\n     #[cfg(target_os = \"freebsd\")]\n+    fn gen_stub_uv_timer_t() -> uv_timer_t {\n+        ret gen_stub_arch();\n+        #[cfg(target_arch = \"x86_64\")]\n+        fn gen_stub_arch() -> uv_timer_t {\n+            ret { fields: { loop_handle: ptr::null(), type_: 0u32,\n+                            close_cb: ptr::null(),\n+                            mut data: ptr::null() },\n+                a00: 0 as *u8, a01: 0 as *u8, a02: 0 as *u8,\n+                a03: 0 as *u8,\n+                a04: 0 as *u8, a05: 0 as *u8, a06: 0 as *u8,\n+                a07: 0 as *u8,\n+                a08: 0 as *u8, a09: 0 as *u8,\n+                a11: {\n+                    a10: 0 as *u8, a11: 0 as *u8\n+                }\n+            };\n+        }\n+        #[cfg(target_arch = \"x86\")]\n+        fn gen_stub_arch() -> uv_timer_t {\n+            ret { fields: { loop_handle: ptr::null(), type_: 0u32,\n+                            close_cb: ptr::null(),\n+                            mut data: ptr::null() },\n+                a00: 0 as *u8, a01: 0 as *u8, a02: 0 as *u8,\n+                a03: 0 as *u8,\n+                a04: 0 as *u8, a05: 0 as *u8, a06: 0 as *u8,\n+                a07: 0 as *u8,\n+                a08: 0 as *u8, a09: 0 as *u8,\n+                a11: {\n+                    a10: 0 as *u8, a11: 0 as *u8,\n+                    a12: 0 as *u8, a13: 0 as *u8\n+                }\n+            };\n+        }\n+    }\n+    #[cfg(target_os = \"win32\")]\n+    fn gen_stub_uv_timer_t() -> uv_timer_t {\n+        ret { fields: { loop_handle: ptr::null(), type_: 0u32,\n+                        close_cb: ptr::null(),\n+                        mut data: ptr::null() },\n+            a00: 0 as *u8, a01: 0 as *u8, a02: 0 as *u8,\n+            a03: 0 as *u8,\n+            a04: 0 as *u8, a05: 0 as *u8, a06: 0 as *u8,\n+            a07: 0 as *u8,\n+            a08: 0 as *u8, a09: 0 as *u8, a10: 0 as *u8,\n+            a11: 0 as *u8,\n+            a12: 0 as *u8\n+        };\n+    }\n+    #[cfg(target_os = \"linux\")]\n+    #[cfg(target_os = \"macos\")]\n+    #[cfg(target_os = \"freebsd\")]\n     fn gen_stub_uv_write_t() -> uv_write_t {\n         ret gen_stub_arch();\n         #[cfg(target_arch=\"x86_64\")]\n@@ -467,10 +548,18 @@ native mod rustrt {\n     fn rust_uv_read_start(stream: *libc::c_void, on_alloc: *u8,\n                           on_read: *u8) -> libc::c_int;\n     fn rust_uv_read_stop(stream: *libc::c_void) -> libc::c_int;\n+    fn rust_uv_timer_init(loop_handle: *libc::c_void,\n+                          timer_handle: *uv_timer_t) -> libc::c_int;\n+    fn rust_uv_timer_start(\n+        timer_handle: *uv_timer_t,\n+        cb: *u8,\n+        timeout: libc::c_uint,\n+        repeat: libc::c_uint) -> libc::c_int;\n+    fn rust_uv_timer_stop(handle: *uv_timer_t) -> libc::c_int;\n+\n+    // data accessors/helpers for rust-mapped uv structs\n     fn rust_uv_malloc_buf_base_of(sug_size: libc::size_t) -> *u8;\n     fn rust_uv_free_base_of_buf(++buf: uv_buf_t);\n-\n-    // data accessors for rust-mapped uv structs\n     fn rust_uv_get_stream_handle_from_connect_req(\n         connect_req: *uv_connect_t)\n         -> *uv_stream_t;\n@@ -577,6 +666,50 @@ unsafe fn async_init(loop_handle: *libc::c_void,\n unsafe fn async_send(async_handle: *uv_async_t) {\n     ret rustrt::rust_uv_async_send(async_handle);\n }\n+unsafe fn buf_init(++input: *u8, len: uint) -> uv_buf_t {\n+    let out_buf = { base: ptr::null(), len: 0 as libc::size_t };\n+    let out_buf_ptr = ptr::addr_of(out_buf);\n+    log(debug, #fmt(\"ll::buf_init - input %u len %u out_buf: %u\",\n+                     input as uint,\n+                     len as uint,\n+                     out_buf_ptr as uint));\n+    // yuck :/\n+    rustrt::rust_uv_buf_init(out_buf_ptr, input, len);\n+    //let result = rustrt::rust_uv_buf_init_2(input, len);\n+    log(debug, \"after rust_uv_buf_init\");\n+    let res_base = get_base_from_buf(out_buf);\n+    let res_len = get_len_from_buf(out_buf);\n+    //let res_base = get_base_from_buf(result);\n+    log(debug, #fmt(\"ll::buf_init - result %u len %u\",\n+                     res_base as uint,\n+                     res_len as uint));\n+    ret out_buf;\n+    //ret result;\n+}\n+unsafe fn ip4_addr(ip: str, port: int)\n+-> sockaddr_in {\n+    let mut addr_vec = str::bytes(ip);\n+    addr_vec += [0u8]; // add null terminator\n+    let addr_vec_ptr = vec::unsafe::to_ptr(addr_vec);\n+    let ip_back = str::from_bytes(addr_vec);\n+    log(debug, #fmt(\"vec val: '%s' length: %u\",\n+                     ip_back, vec::len(addr_vec)));\n+    ret rustrt::rust_uv_ip4_addr(addr_vec_ptr,\n+                                 port as libc::c_int);\n+}\n+\n+unsafe fn timer_init(loop_ptr: *libc::c_void,\n+                     timer_ptr: *uv_timer_t) -> libc::c_int {\n+    ret rustrt::rust_uv_timer_init(loop_ptr, timer_ptr);\n+}\n+unsafe fn timer_start(timer_ptr: *uv_timer_t, cb: *u8, timeout: uint,\n+                      repeat: uint) -> libc::c_int {\n+    ret rustrt::rust_uv_timer_start(timer_ptr, cb, timeout as libc::c_uint,\n+                                    repeat as libc::c_uint);\n+}\n+unsafe fn timer_stop(timer_ptr: *uv_timer_t) -> libc::c_int {\n+    ret rustrt::rust_uv_timer_stop(timer_ptr);\n+}\n \n // libuv struct initializers\n unsafe fn tcp_t() -> uv_tcp_t {\n@@ -591,6 +724,11 @@ unsafe fn write_t() -> uv_write_t {\n unsafe fn async_t() -> uv_async_t {\n     ret uv_ll_struct_stubgen::gen_stub_uv_async_t();\n }\n+unsafe fn timer_t() -> uv_timer_t {\n+    ret uv_ll_struct_stubgen::gen_stub_uv_timer_t();\n+}\n+\n+// data access helpers\n unsafe fn get_loop_for_uv_handle(handle: *libc::c_void)\n     -> *libc::c_void {\n     ret rustrt::rust_uv_get_loop_for_uv_handle(handle);\n@@ -627,37 +765,6 @@ unsafe fn get_base_from_buf(buf: uv_buf_t) -> *u8 {\n unsafe fn get_len_from_buf(buf: uv_buf_t) -> libc::size_t {\n     ret rustrt::rust_uv_get_len_from_buf(buf);\n }\n-unsafe fn buf_init(++input: *u8, len: uint) -> uv_buf_t {\n-    let out_buf = { base: ptr::null(), len: 0 as libc::size_t };\n-    let out_buf_ptr = ptr::addr_of(out_buf);\n-    log(debug, #fmt(\"ll::buf_init - input %u len %u out_buf: %u\",\n-                     input as uint,\n-                     len as uint,\n-                     out_buf_ptr as uint));\n-    // yuck :/\n-    rustrt::rust_uv_buf_init(out_buf_ptr, input, len);\n-    //let result = rustrt::rust_uv_buf_init_2(input, len);\n-    log(debug, \"after rust_uv_buf_init\");\n-    let res_base = get_base_from_buf(out_buf);\n-    let res_len = get_len_from_buf(out_buf);\n-    //let res_base = get_base_from_buf(result);\n-    log(debug, #fmt(\"ll::buf_init - result %u len %u\",\n-                     res_base as uint,\n-                     res_len as uint));\n-    ret out_buf;\n-    //ret result;\n-}\n-unsafe fn ip4_addr(ip: str, port: int)\n--> sockaddr_in {\n-    let mut addr_vec = str::bytes(ip);\n-    addr_vec += [0u8]; // add null terminator\n-    let addr_vec_ptr = vec::unsafe::to_ptr(addr_vec);\n-    let ip_back = str::from_bytes(addr_vec);\n-    log(debug, #fmt(\"vec val: '%s' length: %u\",\n-                     ip_back, vec::len(addr_vec)));\n-    ret rustrt::rust_uv_ip4_addr(addr_vec_ptr,\n-                                 port as libc::c_int);\n-}\n unsafe fn malloc_buf_base_of(suggested_size: libc::size_t)\n     -> *u8 {\n     ret rustrt::rust_uv_malloc_buf_base_of(suggested_size);"}, {"sha": "de73e87f5794f709a21e9f1b46368c8ec79adc5f", "filename": "src/rt/rust_uv.cpp", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bf99a3aa932d32a1390ca58df403c68defc51a07/src%2Frt%2Frust_uv.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/bf99a3aa932d32a1390ca58df403c68defc51a07/src%2Frt%2Frust_uv.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_uv.cpp?ref=bf99a3aa932d32a1390ca58df403c68defc51a07", "patch": "@@ -189,7 +189,7 @@ rust_uv_hilvl_async_init(uv_loop_t* loop, crust_simple_cb cb,\n }\n \n extern \"C\" void*\n-rust_uv_timer_init(uv_loop_t* loop, crust_simple_cb cb,\n+rust_uv_hilvl_timer_init(uv_loop_t* loop, crust_simple_cb cb,\n         uint8_t* buf) {\n     uv_timer_t* new_timer = (uv_timer_t*)current_kernel_malloc(\n             sizeof(uv_timer_t),\n@@ -202,14 +202,25 @@ rust_uv_timer_init(uv_loop_t* loop, crust_simple_cb cb,\n }\n \n extern \"C\" void\n-rust_uv_timer_start(uv_timer_t* the_timer, uint32_t timeout,\n+rust_uv_hilvl_timer_start(uv_timer_t* the_timer, uint32_t timeout,\n         uint32_t repeat) {\n     uv_timer_start(the_timer, native_timer_cb, timeout, repeat);\n }\n \n-extern \"C\" void\n+extern \"C\" int\n+rust_uv_timer_init(uv_loop_t* loop, uv_timer_t* timer) {\n+\treturn uv_timer_init(loop, timer);\n+}\n+\n+extern \"C\" int\n+rust_uv_timer_start(uv_timer_t* the_timer, uv_timer_cb cb,\n+\t\t\t\t\t\t  uint32_t timeout, uint32_t repeat) {\n+    return uv_timer_start(the_timer, cb, timeout, repeat);\n+}\n+\n+extern \"C\" int\n rust_uv_timer_stop(uv_timer_t* the_timer) {\n-    uv_timer_stop(the_timer);\n+    return uv_timer_stop(the_timer);\n }\n \n extern \"C\" int\n@@ -288,6 +299,10 @@ extern \"C\" size_t\n rust_uv_helper_uv_async_t_size() {\n     return sizeof(uv_async_t);\n }\n+extern \"C\" size_t\n+rust_uv_helper_uv_timer_t_size() {\n+    return sizeof(uv_timer_t);\n+}\n \n extern \"C\" uv_stream_t*\n rust_uv_get_stream_handle_from_connect_req(uv_connect_t* connect) {"}, {"sha": "a17f35c64aeb27570cae2e74f5f0c1218ed11c80", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf99a3aa932d32a1390ca58df403c68defc51a07/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/bf99a3aa932d32a1390ca58df403c68defc51a07/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=bf99a3aa932d32a1390ca58df403c68defc51a07", "patch": "@@ -97,6 +97,8 @@ rust_uv_hilvl_close_timer\n rust_uv_async_send\n rust_uv_async_init\n rust_uv_hilvl_async_init\n+rust_uv_hilvl_timer_init\n+rust_uv_hilvl_timer_start\n rust_uv_timer_init\n rust_uv_timer_start\n rust_uv_timer_stop"}]}