{"sha": "2e39a3f6ec38f7671e10355bba2bb8a78a78b100", "node_id": "C_kwDOAAsO6NoAKDJlMzlhM2Y2ZWMzOGY3NjcxZTEwMzU1YmJhMmJiOGE3OGE3OGIxMDA", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2022-02-01T04:13:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-01T04:13:00Z"}, "message": "Rollup merge of #93513 - dtolnay:linewidth, r=nagisa\n\nAllow any pretty printed line to have at least 60 chars\n\nFollow-up to #93155. The rustc AST pretty printer has a tendency to get stuck in \"vertical smear mode\" when formatting highly nested code, where it puts a linebreak at *every possible* linebreak opportunity once the indentation goes beyond the pretty printer's target line width:\n\n```rust\n...\n                                                              ((&([(\"test\"\n                                                                       as\n                                                                       &str)]\n                                                                     as\n                                                                     [&str; 1])\n                                                                   as\n                                                                   &[&str; 1]),\n                                                               (&([]\n                                                                     as\n                                                                     [ArgumentV1; 0])\n                                                                   as\n                                                                   &[ArgumentV1; 0]))\n...\n```\n\n```rust\n...\n                                                                          [(1\n                                                                               as\n                                                                               i32),\n                                                                           (2\n                                                                               as\n                                                                               i32),\n                                                                           (3\n                                                                               as\n                                                                               i32)]\n                                                                             as\n                                                                             [i32; 3]\n...\n```\n\nThis is less common after #93155 because that PR greatly reduced the total amount of indentation, but the \"vertical smear mode\" failure mode is still just as present when you have deeply nested modules, functions, or trait impls, such as in the case of macro-expanded code from `-Zunpretty=expanded`.\n\nVertical smear mode is never the best way to format highly indented code though. It does not prevent the target line width from being exceeded, and it produces output that is less readable than just a longer line.\n\nThis PR makes the pretty printing algorithm allow a minimum of 60 chars on every line independent of indentation. So as code gets more indented, the right margin eventually recedes to make room for formatting without vertical smear.\n\n```console\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n  \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n      \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n          \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n            \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n              \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n            \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n          \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n      \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n  \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n```", "tree": {"sha": "230c4de16377c731c76b5015a8a1bb028d02b8f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/230c4de16377c731c76b5015a8a1bb028d02b8f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e39a3f6ec38f7671e10355bba2bb8a78a78b100", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh+LNMCRBK7hj4Ov3rIwAADe4IAFcZ9RJCQX3j247klZmvpeid\nBYhhiZVU9Yd3jXoiTgxtSEN8oE2ESzmCmVFp1Q24gyBnkrV3d523b96wOlbcy2zQ\nqn5ilNNwwOLCUxR5YcKT2hIRdkRG6cwh1HbnN49ZXg2DOSiz1uLtOj7uk8esBGR/\ntalrAJzSvQLWqzV+OyscP9xFw87r45bVcBjZPOPk2oEgVXhBwJ+n6mvn1XssVeec\nK0sdT34UrKSvXgSHnLFOzjL5rcMlI+4WUflwkrWpxELgn/zj1XOKElVq7rbqfQ0u\n/9O9MUrnuHezG4sH6yufG3tRItZw12wmoPxe9B6gFuUSEh3xqGhfwgyZMOpulI0=\n=Lyiy\n-----END PGP SIGNATURE-----\n", "payload": "tree 230c4de16377c731c76b5015a8a1bb028d02b8f9\nparent 8a70ea2394a1d431bc7ee70957afbf3979d176a0\nparent 7739fcab3062fdd71cf0d7377c86a5487e3638c1\nauthor Eric Huss <eric@huss.org> 1643688780 -0800\ncommitter GitHub <noreply@github.com> 1643688780 -0800\n\nRollup merge of #93513 - dtolnay:linewidth, r=nagisa\n\nAllow any pretty printed line to have at least 60 chars\n\nFollow-up to #93155. The rustc AST pretty printer has a tendency to get stuck in \"vertical smear mode\" when formatting highly nested code, where it puts a linebreak at *every possible* linebreak opportunity once the indentation goes beyond the pretty printer's target line width:\n\n```rust\n...\n                                                              ((&([(\"test\"\n                                                                       as\n                                                                       &str)]\n                                                                     as\n                                                                     [&str; 1])\n                                                                   as\n                                                                   &[&str; 1]),\n                                                               (&([]\n                                                                     as\n                                                                     [ArgumentV1; 0])\n                                                                   as\n                                                                   &[ArgumentV1; 0]))\n...\n```\n\n```rust\n...\n                                                                          [(1\n                                                                               as\n                                                                               i32),\n                                                                           (2\n                                                                               as\n                                                                               i32),\n                                                                           (3\n                                                                               as\n                                                                               i32)]\n                                                                             as\n                                                                             [i32; 3]\n...\n```\n\nThis is less common after #93155 because that PR greatly reduced the total amount of indentation, but the \"vertical smear mode\" failure mode is still just as present when you have deeply nested modules, functions, or trait impls, such as in the case of macro-expanded code from `-Zunpretty=expanded`.\n\nVertical smear mode is never the best way to format highly indented code though. It does not prevent the target line width from being exceeded, and it produces output that is less readable than just a longer line.\n\nThis PR makes the pretty printing algorithm allow a minimum of 60 chars on every line independent of indentation. So as code gets more indented, the right margin eventually recedes to make room for formatting without vertical smear.\n\n```console\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n  \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n      \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n          \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n            \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n              \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n            \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n          \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n      \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n  \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e39a3f6ec38f7671e10355bba2bb8a78a78b100", "html_url": "https://github.com/rust-lang/rust/commit/2e39a3f6ec38f7671e10355bba2bb8a78a78b100", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e39a3f6ec38f7671e10355bba2bb8a78a78b100/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a70ea2394a1d431bc7ee70957afbf3979d176a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a70ea2394a1d431bc7ee70957afbf3979d176a0", "html_url": "https://github.com/rust-lang/rust/commit/8a70ea2394a1d431bc7ee70957afbf3979d176a0"}, {"sha": "7739fcab3062fdd71cf0d7377c86a5487e3638c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7739fcab3062fdd71cf0d7377c86a5487e3638c1", "html_url": "https://github.com/rust-lang/rust/commit/7739fcab3062fdd71cf0d7377c86a5487e3638c1"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "26d600cefc7c0bfd68fe18da57b0e4407a4fe461", "filename": "compiler/rustc_ast_pretty/src/pp.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2e39a3f6ec38f7671e10355bba2bb8a78a78b100/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e39a3f6ec38f7671e10355bba2bb8a78a78b100/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs?ref=2e39a3f6ec38f7671e10355bba2bb8a78a78b100", "patch": "@@ -136,6 +136,7 @@ mod ring;\n \n use ring::RingBuffer;\n use std::borrow::Cow;\n+use std::cmp;\n use std::collections::VecDeque;\n use std::iter;\n \n@@ -199,10 +200,13 @@ enum PrintFrame {\n \n const SIZE_INFINITY: isize = 0xffff;\n \n+/// Target line width.\n+const MARGIN: isize = 78;\n+/// Every line is allowed at least this much space, even if highly indented.\n+const MIN_SPACE: isize = 60;\n+\n pub struct Printer {\n     out: String,\n-    /// Width of lines we're constrained to\n-    margin: isize,\n     /// Number of spaces left on line\n     space: isize,\n     /// Ring-buffer of tokens and calculated sizes\n@@ -237,11 +241,9 @@ struct BufEntry {\n \n impl Printer {\n     pub fn new() -> Self {\n-        let linewidth = 78;\n         Printer {\n             out: String::new(),\n-            margin: linewidth as isize,\n-            space: linewidth as isize,\n+            space: MARGIN,\n             buf: RingBuffer::new(),\n             left_total: 0,\n             right_total: 0,\n@@ -395,7 +397,7 @@ impl Printer {\n             self.print_stack.push(PrintFrame::Broken { indent: self.indent, breaks: token.breaks });\n             self.indent = match token.indent {\n                 IndentStyle::Block { offset } => (self.indent as isize + offset) as usize,\n-                IndentStyle::Visual => (self.margin - self.space) as usize,\n+                IndentStyle::Visual => (MARGIN - self.space) as usize,\n             };\n         } else {\n             self.print_stack.push(PrintFrame::Fits);\n@@ -421,7 +423,7 @@ impl Printer {\n             self.out.push('\\n');\n             let indent = self.indent as isize + token.offset;\n             self.pending_indentation = indent;\n-            self.space = self.margin - indent;\n+            self.space = cmp::max(MARGIN - indent, MIN_SPACE);\n         }\n     }\n "}, {"sha": "ea74a267be81e1cd03831aeaf6b75c8c2ff54a42", "filename": "src/test/pretty/issue-4264.pp", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2e39a3f6ec38f7671e10355bba2bb8a78a78b100/src%2Ftest%2Fpretty%2Fissue-4264.pp", "raw_url": "https://github.com/rust-lang/rust/raw/2e39a3f6ec38f7671e10355bba2bb8a78a78b100/src%2Ftest%2Fpretty%2Fissue-4264.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.pp?ref=2e39a3f6ec38f7671e10355bba2bb8a78a78b100", "patch": "@@ -35,8 +35,7 @@\n                             for<'r> fn(Arguments<'r>) -> String {format})(((::core::fmt::Arguments::new_v1\n                                 as\n                                 fn(&[&'static str], &[ArgumentV1]) -> Arguments {Arguments::new_v1})((&([(\"test\"\n-                                            as &str)] as [&str; 1]) as\n-                                &[&str; 1]),\n+                                            as &str)] as [&str; 1]) as &[&str; 1]),\n                             (&([] as [ArgumentV1; 0]) as &[ArgumentV1; 0])) as\n                             Arguments)) as String);\n                 (res as String)"}, {"sha": "bcab76b7c6b692620ac26809ff9deff472a7a794", "filename": "src/test/ui/match/issue-82392.stdout", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2e39a3f6ec38f7671e10355bba2bb8a78a78b100/src%2Ftest%2Fui%2Fmatch%2Fissue-82392.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/2e39a3f6ec38f7671e10355bba2bb8a78a78b100/src%2Ftest%2Fui%2Fmatch%2Fissue-82392.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fissue-82392.stdout?ref=2e39a3f6ec38f7671e10355bba2bb8a78a78b100", "patch": "@@ -11,7 +11,6 @@ pub fn main() ({\n                 ({ } as\n                     ()) else if (let Some(a) =\n                        ((Some as\n-                               fn(i32) -> Option<i32> {Option::<i32>::Some})((3\n-                               as i32)) as Option<i32>) as bool) ({ } as ())\n-                   as ())\n+                               fn(i32) -> Option<i32> {Option::<i32>::Some})((3 as i32)) as\n+                           Option<i32>) as bool) ({ } as ()) as ())\n                } as ())"}, {"sha": "a648d6b6d4b54d92f103161d6586ebedc29fd4fd", "filename": "src/test/ui/proc-macro/quote-debug.stdout", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2e39a3f6ec38f7671e10355bba2bb8a78a78b100/src%2Ftest%2Fui%2Fproc-macro%2Fquote-debug.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/2e39a3f6ec38f7671e10355bba2bb8a78a78b100/src%2Ftest%2Fui%2Fproc-macro%2Fquote-debug.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fquote-debug.stdout?ref=2e39a3f6ec38f7671e10355bba2bb8a78a78b100", "patch": "@@ -27,8 +27,7 @@ fn main() {\n                         crate::TokenStream::from(crate::TokenTree::Literal({\n                                     let mut iter =\n                                         \"\\\"world\\\"\".parse::<crate::TokenStream>().unwrap().into_iter();\n-                                    if let (Some(crate::TokenTree::Literal(mut lit)),\n-                                                None) =\n+                                    if let (Some(crate::TokenTree::Literal(mut lit)), None) =\n                                                 (iter.next(), iter.next()) {\n                                             lit.set_span(crate::Span::recover_proc_macro_span(2));\n                                             lit"}]}