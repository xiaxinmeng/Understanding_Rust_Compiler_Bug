{"sha": "caf4a90c66b838883b58ff9d51b3b0a3f968f23f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhZjRhOTBjNjZiODM4ODgzYjU4ZmY5ZDUxYjNiMGEzZjk2OGYyM2Y=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2015-01-14T05:14:56Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2015-01-14T05:14:56Z"}, "message": "syntax: Rewrite pp advance_left to use a constant stack size", "tree": {"sha": "6913eac2121e941c0166202cec817f247926e304", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6913eac2121e941c0166202cec817f247926e304"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/caf4a90c66b838883b58ff9d51b3b0a3f968f23f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/caf4a90c66b838883b58ff9d51b3b0a3f968f23f", "html_url": "https://github.com/rust-lang/rust/commit/caf4a90c66b838883b58ff9d51b3b0a3f968f23f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/caf4a90c66b838883b58ff9d51b3b0a3f968f23f/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92b48556e088a4054c49f40fb85322ceff5de453", "url": "https://api.github.com/repos/rust-lang/rust/commits/92b48556e088a4054c49f40fb85322ceff5de453", "html_url": "https://github.com/rust-lang/rust/commit/92b48556e088a4054c49f40fb85322ceff5de453"}], "stats": {"total": 68, "additions": 37, "deletions": 31}, "files": [{"sha": "06d510d37bd312dc6a032b0975a1db3380d2bcfb", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 37, "deletions": 31, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/caf4a90c66b838883b58ff9d51b3b0a3f968f23f/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caf4a90c66b838883b58ff9d51b3b0a3f968f23f/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=caf4a90c66b838883b58ff9d51b3b0a3f968f23f", "patch": "@@ -317,9 +317,7 @@ impl Printer {\n           Token::Eof => {\n             if !self.scan_stack_empty {\n                 self.check_stack(0);\n-                let left = self.token[self.left].clone();\n-                let left_size = self.size[self.left];\n-                try!(self.advance_left(left, left_size));\n+                try!(self.advance_left());\n             }\n             self.indent(0);\n             Ok(())\n@@ -370,16 +368,16 @@ impl Printer {\n             self.right_total += b.blank_space;\n             Ok(())\n           }\n-          Token::String(ref s, len) => {\n+          Token::String(s, len) => {\n             if self.scan_stack_empty {\n                 debug!(\"pp String('{}')/print ~[{},{}]\",\n-                       *s, self.left, self.right);\n-                self.print(token.clone(), len)\n+                       s, self.left, self.right);\n+                self.print(Token::String(s, len), len)\n             } else {\n                 debug!(\"pp String('{}')/buffer ~[{},{}]\",\n-                       *s, self.left, self.right);\n+                       s, self.left, self.right);\n                 self.advance_right();\n-                self.token[self.right] = token.clone();\n+                self.token[self.right] = Token::String(s, len);\n                 self.size[self.right] = len;\n                 self.right_total += len;\n                 self.check_stream()\n@@ -400,9 +398,7 @@ impl Printer {\n                     self.size[scanned] = SIZE_INFINITY;\n                 }\n             }\n-            let left = self.token[self.left].clone();\n-            let left_size = self.size[self.left];\n-            try!(self.advance_left(left, left_size));\n+            try!(self.advance_left());\n             if self.left != self.right {\n                 try!(self.check_stream());\n             }\n@@ -449,29 +445,39 @@ impl Printer {\n         self.right %= self.buf_len;\n         assert!((self.right != self.left));\n     }\n-    pub fn advance_left(&mut self, x: Token, l: int) -> io::IoResult<()> {\n+    pub fn advance_left(&mut self) -> io::IoResult<()> {\n         debug!(\"advance_left ~[{},{}], sizeof({})={}\", self.left, self.right,\n-               self.left, l);\n-        if l >= 0 {\n-            let ret = self.print(x.clone(), l);\n-            match x {\n-              Token::Break(b) => self.left_total += b.blank_space,\n-              Token::String(_, len) => {\n-                assert_eq!(len, l); self.left_total += len;\n-              }\n-              _ => ()\n-            }\n-            if self.left != self.right {\n-                self.left += 1u;\n-                self.left %= self.buf_len;\n-                let left = self.token[self.left].clone();\n-                let left_size = self.size[self.left];\n-                try!(self.advance_left(left, left_size));\n+               self.left, self.size[self.left]);\n+\n+        let mut left_size = self.size[self.left];\n+\n+        while left_size >= 0 {\n+            let left = self.token[self.left].clone();\n+\n+            let len = match left {\n+                Token::Break(b) => b.blank_space,\n+                Token::String(_, len) => {\n+                    assert_eq!(len, left_size);\n+                    len\n+                }\n+                _ => 0\n+            };\n+\n+            try!(self.print(left, left_size));\n+\n+            self.left_total += len;\n+\n+            if self.left == self.right {\n+                break;\n             }\n-            ret\n-        } else {\n-            Ok(())\n+\n+            self.left += 1u;\n+            self.left %= self.buf_len;\n+\n+            left_size = self.size[self.left];\n         }\n+\n+        Ok(())\n     }\n     pub fn check_stack(&mut self, k: int) {\n         if !self.scan_stack_empty {"}]}