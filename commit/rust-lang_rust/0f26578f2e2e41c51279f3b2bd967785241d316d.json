{"sha": "0f26578f2e2e41c51279f3b2bd967785241d316d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmMjY1NzhmMmUyZTQxYzUxMjc5ZjNiMmJkOTY3Nzg1MjQxZDMxNmQ=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-07T16:16:02Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-07T16:20:07Z"}, "message": "Get rid of UnsafeCell<MaybeUninit>s in cloudabi mutex.", "tree": {"sha": "0bfe960d8aac50254331849f01182d2ff3d7a1c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bfe960d8aac50254331849f01182d2ff3d7a1c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f26578f2e2e41c51279f3b2bd967785241d316d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f26578f2e2e41c51279f3b2bd967785241d316d", "html_url": "https://github.com/rust-lang/rust/commit/0f26578f2e2e41c51279f3b2bd967785241d316d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f26578f2e2e41c51279f3b2bd967785241d316d/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6d61ade9c1523dc2dd7cbd97206d6ebc5b5d481", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6d61ade9c1523dc2dd7cbd97206d6ebc5b5d481", "html_url": "https://github.com/rust-lang/rust/commit/e6d61ade9c1523dc2dd7cbd97206d6ebc5b5d481"}], "stats": {"total": 52, "additions": 24, "deletions": 28}, "files": [{"sha": "8f57bdd390cda064edea7313372cad39f066a251", "filename": "library/std/src/sys/cloudabi/mutex.rs", "status": "modified", "additions": 24, "deletions": 28, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/0f26578f2e2e41c51279f3b2bd967785241d316d/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f26578f2e2e41c51279f3b2bd967785241d316d/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fmutex.rs?ref=0f26578f2e2e41c51279f3b2bd967785241d316d", "patch": "@@ -1,4 +1,4 @@\n-use crate::cell::UnsafeCell;\n+use crate::cell::Cell;\n use crate::mem;\n use crate::mem::MaybeUninit;\n use crate::sync::atomic::{AtomicU32, Ordering};\n@@ -50,28 +50,23 @@ impl Mutex {\n }\n \n pub struct ReentrantMutex {\n-    lock: UnsafeCell<MaybeUninit<AtomicU32>>,\n-    recursion: UnsafeCell<MaybeUninit<u32>>,\n+    lock: AtomicU32,\n+    recursion: Cell<u32>,\n }\n \n+unsafe impl Send for ReentrantMutex {}\n+unsafe impl Sync for ReentrantMutex {}\n+\n impl ReentrantMutex {\n     pub const unsafe fn uninitialized() -> ReentrantMutex {\n-        ReentrantMutex {\n-            lock: UnsafeCell::new(MaybeUninit::uninit()),\n-            recursion: UnsafeCell::new(MaybeUninit::uninit()),\n-        }\n+        ReentrantMutex { lock: AtomicU32::new(abi::LOCK_UNLOCKED.0), recursion: Cell::new(0) }\n     }\n \n-    pub unsafe fn init(&self) {\n-        *self.lock.get() = MaybeUninit::new(AtomicU32::new(abi::LOCK_UNLOCKED.0));\n-        *self.recursion.get() = MaybeUninit::new(0);\n-    }\n+    pub unsafe fn init(&self) {}\n \n     pub unsafe fn try_lock(&self) -> bool {\n         // Attempt to acquire the lock.\n-        let lock = (*self.lock.get()).as_mut_ptr();\n-        let recursion = (*self.recursion.get()).as_mut_ptr();\n-        if let Err(old) = (*lock).compare_exchange(\n+        if let Err(old) = self.lock.compare_exchange(\n             abi::LOCK_UNLOCKED.0,\n             __pthread_thread_id.0 | abi::LOCK_WRLOCKED.0,\n             Ordering::Acquire,\n@@ -80,22 +75,22 @@ impl ReentrantMutex {\n             // If we fail to acquire the lock, it may be the case\n             // that we've already acquired it and may need to recurse.\n             if old & !abi::LOCK_KERNEL_MANAGED.0 == __pthread_thread_id.0 | abi::LOCK_WRLOCKED.0 {\n-                *recursion += 1;\n+                self.recursion.set(self.recursion.get() + 1);\n                 true\n             } else {\n                 false\n             }\n         } else {\n             // Success.\n-            assert_eq!(*recursion, 0, \"Mutex has invalid recursion count\");\n+            assert_eq!(self.recursion.get(), 0, \"Mutex has invalid recursion count\");\n             true\n         }\n     }\n \n     pub unsafe fn lock(&self) {\n         if !self.try_lock() {\n             // Call into the kernel to acquire a write lock.\n-            let lock = self.lock.get();\n+            let lock = &self.lock as *const AtomicU32;\n             let subscription = abi::subscription {\n                 type_: abi::eventtype::LOCK_WRLOCK,\n                 union: abi::subscription_union {\n@@ -116,17 +111,17 @@ impl ReentrantMutex {\n     }\n \n     pub unsafe fn unlock(&self) {\n-        let lock = (*self.lock.get()).as_mut_ptr();\n-        let recursion = (*self.recursion.get()).as_mut_ptr();\n         assert_eq!(\n-            (*lock).load(Ordering::Relaxed) & !abi::LOCK_KERNEL_MANAGED.0,\n+            self.lock.load(Ordering::Relaxed) & !abi::LOCK_KERNEL_MANAGED.0,\n             __pthread_thread_id.0 | abi::LOCK_WRLOCKED.0,\n             \"This mutex is locked by a different thread\"\n         );\n \n-        if *recursion > 0 {\n-            *recursion -= 1;\n-        } else if !(*lock)\n+        let r = self.recursion.get();\n+        if r > 0 {\n+            self.recursion.set(r - 1);\n+        } else if !self\n+            .lock\n             .compare_exchange(\n                 __pthread_thread_id.0 | abi::LOCK_WRLOCKED.0,\n                 abi::LOCK_UNLOCKED.0,\n@@ -137,19 +132,20 @@ impl ReentrantMutex {\n         {\n             // Lock is managed by kernelspace. Call into the kernel\n             // to unblock waiting threads.\n-            let ret = abi::lock_unlock(lock as *mut abi::lock, abi::scope::PRIVATE);\n+            let ret = abi::lock_unlock(\n+                &self.lock as *const AtomicU32 as *mut abi::lock,\n+                abi::scope::PRIVATE,\n+            );\n             assert_eq!(ret, abi::errno::SUCCESS, \"Failed to unlock a mutex\");\n         }\n     }\n \n     pub unsafe fn destroy(&self) {\n-        let lock = (*self.lock.get()).as_mut_ptr();\n-        let recursion = (*self.recursion.get()).as_mut_ptr();\n         assert_eq!(\n-            (*lock).load(Ordering::Relaxed),\n+            self.lock.load(Ordering::Relaxed),\n             abi::LOCK_UNLOCKED.0,\n             \"Attempted to destroy locked mutex\"\n         );\n-        assert_eq!(*recursion, 0, \"Recursion counter invalid\");\n+        assert_eq!(self.recursion.get(), 0, \"Recursion counter invalid\");\n     }\n }"}]}