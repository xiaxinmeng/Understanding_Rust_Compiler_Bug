{"sha": "6138c82803a77a44e0a56cd8999299fa7f214afe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxMzhjODI4MDNhNzdhNDRlMGE1NmNkODk5OTI5OWZhN2YyMTRhZmU=", "commit": {"author": {"name": "Donato Sciarra", "email": "sciarp@gmail.com", "date": "2018-08-18T10:14:31Z"}, "committer": {"name": "Donato Sciarra", "email": "sciarp@gmail.com", "date": "2018-08-19T21:01:01Z"}, "message": "fix tidy errors", "tree": {"sha": "7624fb64e14b12e4727175160e9704b5a8557e29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7624fb64e14b12e4727175160e9704b5a8557e29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6138c82803a77a44e0a56cd8999299fa7f214afe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6138c82803a77a44e0a56cd8999299fa7f214afe", "html_url": "https://github.com/rust-lang/rust/commit/6138c82803a77a44e0a56cd8999299fa7f214afe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6138c82803a77a44e0a56cd8999299fa7f214afe/comments", "author": {"login": "dsciarra", "id": 2036702, "node_id": "MDQ6VXNlcjIwMzY3MDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2036702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dsciarra", "html_url": "https://github.com/dsciarra", "followers_url": "https://api.github.com/users/dsciarra/followers", "following_url": "https://api.github.com/users/dsciarra/following{/other_user}", "gists_url": "https://api.github.com/users/dsciarra/gists{/gist_id}", "starred_url": "https://api.github.com/users/dsciarra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dsciarra/subscriptions", "organizations_url": "https://api.github.com/users/dsciarra/orgs", "repos_url": "https://api.github.com/users/dsciarra/repos", "events_url": "https://api.github.com/users/dsciarra/events{/privacy}", "received_events_url": "https://api.github.com/users/dsciarra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dsciarra", "id": 2036702, "node_id": "MDQ6VXNlcjIwMzY3MDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2036702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dsciarra", "html_url": "https://github.com/dsciarra", "followers_url": "https://api.github.com/users/dsciarra/followers", "following_url": "https://api.github.com/users/dsciarra/following{/other_user}", "gists_url": "https://api.github.com/users/dsciarra/gists{/gist_id}", "starred_url": "https://api.github.com/users/dsciarra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dsciarra/subscriptions", "organizations_url": "https://api.github.com/users/dsciarra/orgs", "repos_url": "https://api.github.com/users/dsciarra/repos", "events_url": "https://api.github.com/users/dsciarra/events{/privacy}", "received_events_url": "https://api.github.com/users/dsciarra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2ff845f3a4ed88037b43d73ced372fd15e98ce5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2ff845f3a4ed88037b43d73ced372fd15e98ce5", "html_url": "https://github.com/rust-lang/rust/commit/a2ff845f3a4ed88037b43d73ced372fd15e98ce5"}], "stats": {"total": 55, "additions": 36, "deletions": 19}, "files": [{"sha": "0a32963a861de6c0764eb461a0f4d5cb5a12e5e8", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6138c82803a77a44e0a56cd8999299fa7f214afe/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6138c82803a77a44e0a56cd8999299fa7f214afe/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=6138c82803a77a44e0a56cd8999299fa7f214afe", "patch": "@@ -432,7 +432,7 @@ impl SourceFile {\n     ///\n     /// ### Note\n     /// If the code span associated with this `SourceFile` was generated by an external macro, this\n-    /// may not be an actual path on the filesystem. Use [`is_real`] to check.\n+    /// macro, this may not be an actual path on the filesystem. Use [`is_real`] to check.\n     ///\n     /// Also note that even if `is_real` returns `true`, if `--remap-path-prefix` was passed on\n     /// the command line, the path as given may not actually be valid."}, {"sha": "3582c2359c8b9f653f5ed5d27148f2845e18e801", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6138c82803a77a44e0a56cd8999299fa7f214afe/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6138c82803a77a44e0a56cd8999299fa7f214afe/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=6138c82803a77a44e0a56cd8999299fa7f214afe", "patch": "@@ -55,7 +55,14 @@ pub mod registry;\n mod styled_buffer;\n mod lock;\n \n-use syntax_pos::{BytePos, Loc, FileLinesResult, SourceFile, FileName, MultiSpan, Span, NO_EXPANSION};\n+use syntax_pos::{BytePos,\n+                 Loc,\n+                 FileLinesResult,\n+                 SourceFile,\n+                 FileName,\n+                 MultiSpan,\n+                 Span,\n+                 NO_EXPANSION};\n \n #[derive(Copy, Clone, Debug, PartialEq, Hash, RustcEncodable, RustcDecodable)]\n pub enum Applicability {"}, {"sha": "0936f28a8fb1e991f4496dfb94d797adfd0df213", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6138c82803a77a44e0a56cd8999299fa7f214afe/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6138c82803a77a44e0a56cd8999299fa7f214afe/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=6138c82803a77a44e0a56cd8999299fa7f214afe", "patch": "@@ -195,7 +195,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonShorthandFieldPatterns {\n                         let mut err = cx.struct_span_lint(NON_SHORTHAND_FIELD_PATTERNS,\n                                      fieldpat.span,\n                                      &format!(\"the `{}:` in this pattern is redundant\", ident));\n-                        let subspan = cx.tcx.sess.source_map().span_through_char(fieldpat.span, ':');\n+                        let subspan = cx.tcx.sess.source_map().span_through_char(fieldpat.span,\n+                                                                                 ':');\n                         err.span_suggestion_short_with_applicability(\n                             subspan,\n                             \"remove this\","}, {"sha": "f4dd8861e2a2ce2c81eb8cc2536443f3c98bd2b4", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6138c82803a77a44e0a56cd8999299fa7f214afe/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6138c82803a77a44e0a56cd8999299fa7f214afe/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=6138c82803a77a44e0a56cd8999299fa7f214afe", "patch": "@@ -349,8 +349,10 @@ impl<'a, 'tcx> SpecializedDecoder<Span> for DecodeContext<'a, 'tcx> {\n         debug_assert!(hi >= source_file.original_start_pos &&\n                       hi <= source_file.original_end_pos);\n \n-        let lo = (lo + source_file.translated_source_file.start_pos) - source_file.original_start_pos;\n-        let hi = (hi + source_file.translated_source_file.start_pos) - source_file.original_start_pos;\n+        let lo = (lo + source_file.translated_source_file.start_pos)\n+                 - source_file.original_start_pos;\n+        let hi = (hi + source_file.translated_source_file.start_pos)\n+                 - source_file.original_start_pos;\n \n         Ok(Span::new(lo, hi, NO_EXPANSION))\n     }"}, {"sha": "9aa2ba363ed7ab41870188de93b2d8bf101ab303", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6138c82803a77a44e0a56cd8999299fa7f214afe/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6138c82803a77a44e0a56cd8999299fa7f214afe/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=6138c82803a77a44e0a56cd8999299fa7f214afe", "patch": "@@ -319,7 +319,8 @@ fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                             trait_m.ident);\n             if let TypeError::Mutability = terr {\n                 if let Some(trait_err_span) = trait_err_span {\n-                    if let Ok(trait_err_str) = tcx.sess.source_map().span_to_snippet(trait_err_span) {\n+                    if let Ok(trait_err_str) = tcx.sess.source_map().\n+                                               span_to_snippet(trait_err_span) {\n                         diag.span_suggestion(\n                             impl_err_span,\n                             \"consider change the type to match the mutability in trait\","}, {"sha": "31ec62ba70a956478917afc6d7ad410e66eb0562", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6138c82803a77a44e0a56cd8999299fa7f214afe/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6138c82803a77a44e0a56cd8999299fa7f214afe/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=6138c82803a77a44e0a56cd8999299fa7f214afe", "patch": "@@ -132,7 +132,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         };\n                         if let Some(note_span) = note_span {\n                             // We have a span pointing to the method. Show note with snippet.\n-                            err.span_note(self.tcx.sess.source_map().def_span(note_span), &note_str);\n+                            err.span_note(self.tcx.sess.source_map().def_span(note_span),\n+                                          &note_str);\n                         } else {\n                             err.note(&note_str);\n                         }"}, {"sha": "5df4862290e3c0d990e980320e3d85570a5c1495", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6138c82803a77a44e0a56cd8999299fa7f214afe/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6138c82803a77a44e0a56cd8999299fa7f214afe/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=6138c82803a77a44e0a56cd8999299fa7f214afe", "patch": "@@ -33,7 +33,8 @@ pub fn render_with_highlighting(src: &str, class: Option<&str>,\n                                 tooltip: Option<(&str, &str)>) -> String {\n     debug!(\"highlighting: ================\\n{}\\n==============\", src);\n     let sess = parse::ParseSess::new(FilePathMapping::empty());\n-    let fm = sess.source_map().new_source_file(FileName::Custom(\"stdin\".to_string()), src.to_string());\n+    let fm = sess.source_map().new_source_file(FileName::Custom(\"stdin\".to_string()),\n+                                               src.to_string());\n \n     let mut out = Vec::new();\n     if let Some((tooltip, class)) = tooltip {\n@@ -43,7 +44,8 @@ pub fn render_with_highlighting(src: &str, class: Option<&str>,\n     }\n     write_header(class, &mut out).unwrap();\n \n-    let mut classifier = Classifier::new(lexer::StringReader::new(&sess, fm, None), sess.source_map());\n+    let mut classifier = Classifier::new(lexer::StringReader::new(&sess, fm, None),\n+                                         sess.source_map());\n     if classifier.write_source(&mut out).is_err() {\n         return format!(\"<pre>{}</pre>\", src);\n     }"}, {"sha": "448ff9676c927492791e6ac08ec42391fdecfc0f", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6138c82803a77a44e0a56cd8999299fa7f214afe/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6138c82803a77a44e0a56cd8999299fa7f214afe/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=6138c82803a77a44e0a56cd8999299fa7f214afe", "patch": "@@ -180,9 +180,9 @@ impl<'a> StringReader<'a> {\n     }\n \n     /// For comments.rs, which hackily pokes into next_pos and ch\n-    fn new_raw(sess: &'a ParseSess, source_file: Lrc<syntax_pos::SourceFile>, override_span: Option<Span>)\n-        -> Self\n-    {\n+    fn new_raw(sess: &'a ParseSess,\n+               source_file: Lrc<syntax_pos::SourceFile>,\n+               override_span: Option<Span>) -> Self {\n         let mut sr = StringReader::new_raw_internal(sess, source_file, override_span);\n         sr.bump();\n \n@@ -221,9 +221,9 @@ impl<'a> StringReader<'a> {\n         }\n     }\n \n-    pub fn new(sess: &'a ParseSess, source_file: Lrc<syntax_pos::SourceFile>, override_span: Option<Span>)\n-        -> Self\n-    {\n+    pub fn new(sess: &'a ParseSess,\n+               source_file: Lrc<syntax_pos::SourceFile>,\n+               override_span: Option<Span>) -> Self {\n         let mut sr = StringReader::new_raw(sess, source_file, override_span);\n         if sr.advance_token().is_err() {\n             sr.emit_fatal_errors();"}, {"sha": "adf01197c6d9f3f6b43586763fc6cdb250d06515", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6138c82803a77a44e0a56cd8999299fa7f214afe/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6138c82803a77a44e0a56cd8999299fa7f214afe/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=6138c82803a77a44e0a56cd8999299fa7f214afe", "patch": "@@ -240,8 +240,9 @@ fn file_to_source_file(sess: &ParseSess, path: &Path, spanopt: Option<Span>)\n }\n \n /// Given a source_file, produce a sequence of token-trees\n-pub fn source_file_to_stream(sess: &ParseSess, source_file: Lrc<SourceFile>, override_span: Option<Span>)\n-                         -> TokenStream {\n+pub fn source_file_to_stream(sess: &ParseSess,\n+                             source_file: Lrc<SourceFile>,\n+                             override_span: Option<Span>) -> TokenStream {\n     let mut srdr = lexer::StringReader::new(sess, source_file, override_span);\n     srdr.real_token();\n     panictry!(srdr.parse_all_token_trees())"}, {"sha": "c65931a8577183452e063f0019edb2c7f46463bd", "filename": "src/libsyntax/source_map.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6138c82803a77a44e0a56cd8999299fa7f214afe/src%2Flibsyntax%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6138c82803a77a44e0a56cd8999299fa7f214afe/src%2Flibsyntax%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsource_map.rs?ref=6138c82803a77a44e0a56cd8999299fa7f214afe", "patch": "@@ -241,7 +241,8 @@ impl SourceMap {\n         let mut files = self.files.borrow_mut();\n \n         files.file_maps.push(source_file.clone());\n-        files.stable_id_to_source_file.insert(StableFilemapId::new(&source_file), source_file.clone());\n+        files.stable_id_to_source_file.insert(StableFilemapId::new(&source_file),\n+                                              source_file.clone());\n \n         source_file\n     }\n@@ -297,7 +298,8 @@ impl SourceMap {\n         let mut files = self.files.borrow_mut();\n \n         files.file_maps.push(source_file.clone());\n-        files.stable_id_to_source_file.insert(StableFilemapId::new(&source_file), source_file.clone());\n+        files.stable_id_to_source_file.insert(StableFilemapId::new(&source_file),\n+                                              source_file.clone());\n \n         source_file\n     }"}]}