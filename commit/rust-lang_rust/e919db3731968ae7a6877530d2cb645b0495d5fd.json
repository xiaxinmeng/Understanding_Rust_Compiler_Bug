{"sha": "e919db3731968ae7a6877530d2cb645b0495d5fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5MTlkYjM3MzE5NjhhZTdhNjg3NzUzMGQyY2I2NDViMDQ5NWQ1ZmQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-04T10:17:24Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-04T10:17:24Z"}, "message": "refine item parsing", "tree": {"sha": "02c8f9a9accf0db8f89bdf9c8a8293a81f557568", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02c8f9a9accf0db8f89bdf9c8a8293a81f557568"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e919db3731968ae7a6877530d2cb645b0495d5fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e919db3731968ae7a6877530d2cb645b0495d5fd", "html_url": "https://github.com/rust-lang/rust/commit/e919db3731968ae7a6877530d2cb645b0495d5fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e919db3731968ae7a6877530d2cb645b0495d5fd/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7264c3294b3c460da459774058c9b9fa77edac12", "url": "https://api.github.com/repos/rust-lang/rust/commits/7264c3294b3c460da459774058c9b9fa77edac12", "html_url": "https://github.com/rust-lang/rust/commit/7264c3294b3c460da459774058c9b9fa77edac12"}], "stats": {"total": 537, "additions": 328, "deletions": 209}, "files": [{"sha": "c6841992939e275100ccae5ce315617f11442b65", "filename": "src/grammar/expressions.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e919db3731968ae7a6877530d2cb645b0495d5fd/src%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e919db3731968ae7a6877530d2cb645b0495d5fd/src%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fexpressions.rs?ref=e919db3731968ae7a6877530d2cb645b0495d5fd", "patch": "@@ -229,18 +229,27 @@ fn block_expr(p: &mut Parser) -> CompletedMarker {\n     while !p.at(EOF) && !p.at(R_CURLY) {\n         match p.current() {\n             LET_KW => let_stmt(p),\n-            c => {\n+            _ => {\n                 // test block_items\n                 // fn a() { fn b() {} }\n-                if items::ITEM_FIRST.contains(c) {\n-                    items::item(p)\n-                } else {\n-                    let expr_stmt = p.start();\n-                    expressions::expr(p);\n-                    if p.eat(SEMI) {\n-                        expr_stmt.complete(p, EXPR_STMT);\n-                    } else {\n-                        expr_stmt.abandon(p);\n+                let m = p.start();\n+                match items::maybe_item(p) {\n+                    items::MaybeItem::Item(kind) => {\n+                        m.complete(p, kind);\n+                    }\n+                    items::MaybeItem::Modifiers => {\n+                        m.abandon(p);\n+                        p.error(\"expected an item\");\n+                    }\n+                    // test pub_expr\n+                    // fn foo() { pub 92; } //FIXME\n+                    items::MaybeItem::None => {\n+                        expressions::expr(p);\n+                        if p.eat(SEMI) {\n+                            m.complete(p, EXPR_STMT);\n+                        } else {\n+                            m.abandon(p);\n+                        }\n                     }\n                 }\n             }"}, {"sha": "1ed0aea07162ef05f41e58c49dd31be0fb2eb66c", "filename": "src/grammar/items/mod.rs", "status": "modified", "additions": 135, "deletions": 163, "changes": 298, "blob_url": "https://github.com/rust-lang/rust/blob/e919db3731968ae7a6877530d2cb645b0495d5fd/src%2Fgrammar%2Fitems%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e919db3731968ae7a6877530d2cb645b0495d5fd/src%2Fgrammar%2Fitems%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fitems%2Fmod.rs?ref=e919db3731968ae7a6877530d2cb645b0495d5fd", "patch": "@@ -8,173 +8,136 @@ mod use_item;\n pub(super) fn mod_contents(p: &mut Parser, stop_on_r_curly: bool) {\n     attributes::inner_attributes(p);\n     while !p.at(EOF) && !(stop_on_r_curly && p.at(R_CURLY)) {\n-        item(p);\n+        item(p, stop_on_r_curly)\n+    }\n+}\n+\n+pub(super) fn item(p: &mut Parser, stop_on_r_curly: bool) {\n+    let m = p.start();\n+    match maybe_item(p) {\n+        MaybeItem::Item(kind) => {\n+            m.complete(p, kind);\n+        }\n+        MaybeItem::None => {\n+            m.abandon(p);\n+            if p.at(L_CURLY) {\n+                error_block(p, \"expected an item\");\n+            } else if !p.at(EOF) && !(stop_on_r_curly && p.at(R_CURLY)) {\n+                p.err_and_bump(\"expected an item\");\n+            } else {\n+                p.error(\"expected an item\");\n+            }\n+        }\n+        MaybeItem::Modifiers => {\n+            p.error(\"expected fn, trait or impl\");\n+            m.complete(p, ERROR);\n+        }\n     }\n }\n \n pub(super) const ITEM_FIRST: TokenSet =\n     token_set![EXTERN_KW, MOD_KW, USE_KW, STRUCT_KW, ENUM_KW, FN_KW, PUB_KW, POUND];\n \n-pub(super) fn item(p: &mut Parser) {\n-    let item = p.start();\n+pub(super) enum MaybeItem {\n+    None,\n+    Item(SyntaxKind),\n+    Modifiers,\n+}\n+\n+pub(super) fn maybe_item(p: &mut Parser) -> MaybeItem {\n     attributes::outer_attributes(p);\n     visibility(p);\n-    let la = p.nth(1);\n-    let item_kind = match p.current() {\n-        USE_KW => {\n-            use_item::use_item(p);\n-            USE_ITEM\n-        }\n-        // test extern_crate\n-        // extern crate foo;\n-        EXTERN_KW if la == CRATE_KW => {\n-            extern_crate_item(p);\n-            EXTERN_CRATE_ITEM\n-        }\n-        EXTERN_KW => {\n-            abi(p);\n-            match p.current() {\n-                // test extern_fn\n-                // extern fn foo() {}\n-                FN_KW => {\n-                    fn_item(p);\n-                    FN_ITEM\n-                }\n-                // test extern_block\n-                // extern {}\n-                L_CURLY => {\n-                    extern_block(p);\n-                    EXTERN_BLOCK_EXPR\n-                }\n-                // test extern_struct\n-                // extern struct Foo;\n-                _ => {\n-                    item.abandon(p);\n-                    p.error(\"expected `fn` or `{`\");\n-                    return;\n-                }\n-            }\n-        }\n-        STATIC_KW => {\n-            consts::static_item(p);\n-            STATIC_ITEM\n-        }\n-        CONST_KW => match p.nth(1) {\n-            // test const_fn\n-            // const fn foo() {}\n-            FN_KW => {\n-                p.bump();\n-                fn_item(p);\n-                FN_ITEM\n-            }\n-            // test const_unsafe_fn\n-            // const unsafe fn foo() {}\n-            UNSAFE_KW if p.nth(2) == FN_KW => {\n-                p.bump();\n-                p.bump();\n-                fn_item(p);\n-                FN_ITEM\n-            }\n-            _ => {\n-                consts::const_item(p);\n-                CONST_ITEM\n-            }\n-        },\n-        UNSAFE_KW => {\n-            p.bump();\n-            let la = p.nth(1);\n-            match p.current() {\n-                // test unsafe_trait\n-                // unsafe trait T {}\n-                TRAIT_KW => {\n-                    traits::trait_item(p);\n-                    TRAIT_ITEM\n-                }\n-\n-                // test unsafe_auto_trait\n-                // unsafe auto trait T {}\n-                IDENT if p.at_contextual_kw(\"auto\") && la == TRAIT_KW => {\n-                    p.bump_remap(AUTO_KW);\n-                    traits::trait_item(p);\n-                    TRAIT_ITEM\n-                }\n-\n-                // test unsafe_impl\n-                // unsafe impl Foo {}\n-                IMPL_KW => {\n-                    traits::impl_item(p);\n-                    IMPL_ITEM\n-                }\n-\n-                // test unsafe_default_impl\n-                // unsafe default impl Foo {}\n-                IDENT if p.at_contextual_kw(\"default\") && la == IMPL_KW => {\n-                    p.bump_remap(DEFAULT_KW);\n-                    traits::impl_item(p);\n-                    IMPL_ITEM\n-                }\n-\n-                // test unsafe_extern_fn\n-                // unsafe extern \"C\" fn foo() {}\n-                EXTERN_KW => {\n-                    abi(p);\n-                    if !p.at(FN_KW) {\n-                        item.abandon(p);\n-                        p.error(\"expected function\");\n-                        return;\n-                    }\n-                    fn_item(p);\n-                    FN_ITEM\n-                }\n-\n-                // test unsafe_fn\n-                // unsafe fn foo() {}\n-                FN_KW => {\n-                    fn_item(p);\n-                    FN_ITEM\n-                }\n-\n-                t => {\n-                    item.abandon(p);\n-                    let message = \"expected `trait`, `impl` or `fn`\";\n-\n-                    // test unsafe_block_in_mod\n-                    // fn foo(){} unsafe { } fn bar(){}\n-                    if t == L_CURLY {\n-                        error_block(p, message);\n-                    } else {\n-                        p.error(message);\n-                    }\n-                    return;\n-                }\n-            }\n-        }\n-        TRAIT_KW => {\n-            traits::trait_item(p);\n-            TRAIT_ITEM\n+    if let Some(kind) = items_without_modifiers(p) {\n+        return MaybeItem::Item(kind);\n+    }\n+\n+    let mut has_mods = false;\n+    // modifiers\n+    has_mods |= p.eat(CONST_KW);\n+\n+    // test unsafe_block_in_mod\n+    // fn foo(){} unsafe { } fn bar(){}\n+    if p.at(UNSAFE_KW) && p.nth(1) != L_CURLY {\n+        p.eat(UNSAFE_KW);\n+        has_mods = true;\n+    }\n+    if p.at(EXTERN_KW) {\n+        has_mods = true;\n+        abi(p);\n+    }\n+    if p.at(IDENT) && p.at_contextual_kw(\"auto\") && p.nth(1) == TRAIT_KW {\n+        p.bump_remap(AUTO_KW);\n+        has_mods = true;\n+    }\n+    if p.at(IDENT) && p.at_contextual_kw(\"default\") && p.nth(1) == IMPL_KW {\n+        p.bump_remap(DEFAULT_KW);\n+        has_mods = true;\n+    }\n+\n+    // items\n+    let kind = match p.current() {\n+        // test extern_fn\n+        // extern fn foo() {}\n+\n+        // test const_fn\n+        // const fn foo() {}\n+\n+        // test const_unsafe_fn\n+        // const unsafe fn foo() {}\n+\n+        // test unsafe_extern_fn\n+        // unsafe extern \"C\" fn foo() {}\n+\n+        // test unsafe_fn\n+        // unsafe fn foo() {}\n+        FN_KW => {\n+            fn_item(p);\n+            FN_ITEM\n         }\n+\n+        // test unsafe_trait\n+        // unsafe trait T {}\n+\n         // test auto_trait\n         // auto trait T {}\n-        IDENT if p.at_contextual_kw(\"auto\") && la == TRAIT_KW => {\n-            p.bump_remap(AUTO_KW);\n+\n+        // test unsafe_auto_trait\n+        // unsafe auto trait T {}\n+        TRAIT_KW => {\n             traits::trait_item(p);\n             TRAIT_ITEM\n         }\n-        IMPL_KW => {\n-            traits::impl_item(p);\n-            IMPL_ITEM\n-        }\n+\n+        // test unsafe_impl\n+        // unsafe impl Foo {}\n+\n         // test default_impl\n         // default impl Foo {}\n-        IDENT if p.at_contextual_kw(\"default\") && la == IMPL_KW => {\n-            p.bump_remap(DEFAULT_KW);\n+\n+        // test unsafe_default_impl\n+        // unsafe default impl Foo {}\n+        IMPL_KW => {\n             traits::impl_item(p);\n             IMPL_ITEM\n         }\n+        _ => return if has_mods {\n+            MaybeItem::Modifiers\n+        } else {\n+            MaybeItem::None\n+        }\n+    };\n \n-        FN_KW => {\n-            fn_item(p);\n-            FN_ITEM\n+    MaybeItem::Item(kind)\n+}\n+\n+fn items_without_modifiers(p: &mut Parser) -> Option<SyntaxKind> {\n+    let la = p.nth(1);\n+    let kind = match p.current() {\n+        // test extern_crate\n+        // extern crate foo;\n+        EXTERN_KW if la == CRATE_KW => {\n+            extern_crate_item(p);\n+            EXTERN_CRATE_ITEM\n         }\n         TYPE_KW => {\n             type_item(p);\n@@ -186,31 +149,40 @@ pub(super) fn item(p: &mut Parser) {\n         }\n         STRUCT_KW => {\n             structs::struct_item(p);\n+            if p.at(SEMI) {\n+                p.err_and_bump(\n+                    \"expected item, found `;`\\n\\\n+                     consider removing this semicolon\"\n+                );\n+            }\n             STRUCT_ITEM\n         }\n         ENUM_KW => {\n             structs::enum_item(p);\n             ENUM_ITEM\n         }\n-        L_CURLY => {\n-            item.abandon(p);\n-            error_block(p, \"expected item\");\n-            return;\n+        USE_KW => {\n+            use_item::use_item(p);\n+            USE_ITEM\n         }\n-        err_token => {\n-            item.abandon(p);\n-            let message = if err_token == SEMI {\n-                //TODO: if the item is incomplete, this message is misleading\n-                \"expected item, found `;`\\n\\\n-                 consider removing this semicolon\"\n-            } else {\n-                \"expected item\"\n-            };\n-            p.err_and_bump(message);\n-            return;\n+        CONST_KW if (la == IDENT || la == MUT_KW) => {\n+            consts::const_item(p);\n+            CONST_ITEM\n+        }\n+        STATIC_KW => {\n+            consts::static_item(p);\n+            STATIC_ITEM\n+        }\n+        // test extern_block\n+        // extern {}\n+        EXTERN_KW if la == L_CURLY || ((la == STRING || la == RAW_STRING) && p.nth(2) == L_CURLY) => {\n+            abi(p);\n+            extern_block(p);\n+            EXTERN_BLOCK_EXPR\n         }\n+        _ => return None,\n     };\n-    item.complete(p, item_kind);\n+    Some(kind)\n }\n \n fn extern_crate_item(p: &mut Parser) {"}, {"sha": "0614e8ab681ecc88cb4181f60060fe8d408de5ee", "filename": "src/grammar/items/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e919db3731968ae7a6877530d2cb645b0495d5fd/src%2Fgrammar%2Fitems%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e919db3731968ae7a6877530d2cb645b0495d5fd/src%2Fgrammar%2Fitems%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fitems%2Ftraits.rs?ref=e919db3731968ae7a6877530d2cb645b0495d5fd", "patch": "@@ -45,7 +45,7 @@ pub(super) fn impl_item(p: &mut Parser) {\n     //     fn bar(&self) {}\n     // }\n     while !p.at(EOF) && !p.at(R_CURLY) {\n-        item(p);\n+        item(p, true);\n     }\n     p.expect(R_CURLY);\n }"}, {"sha": "49612ac7376567ffa26bc33172f91cfc8d755d63", "filename": "tests/data/parser/err/0001_item_recovery_in_file.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e919db3731968ae7a6877530d2cb645b0495d5fd/tests%2Fdata%2Fparser%2Ferr%2F0001_item_recovery_in_file.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e919db3731968ae7a6877530d2cb645b0495d5fd/tests%2Fdata%2Fparser%2Ferr%2F0001_item_recovery_in_file.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Ferr%2F0001_item_recovery_in_file.txt?ref=e919db3731968ae7a6877530d2cb645b0495d5fd", "patch": "@@ -1,9 +1,9 @@\n FILE@[0; 21)\n   ERROR@[0; 3)\n     IF_KW@[0; 2)\n-    err: `expected item`\n+    err: `expected an item`\n     WHITESPACE@[2; 3)\n-    err: `expected item`\n+    err: `expected an item`\n   ERROR@[3; 10)\n     MATCH_KW@[3; 8)\n     WHITESPACE@[8; 10)"}, {"sha": "ef0ddb09a55f2f83102aad62f9843a4738a9f012", "filename": "tests/data/parser/err/0002_duplicate_shebang.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e919db3731968ae7a6877530d2cb645b0495d5fd/tests%2Fdata%2Fparser%2Ferr%2F0002_duplicate_shebang.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e919db3731968ae7a6877530d2cb645b0495d5fd/tests%2Fdata%2Fparser%2Ferr%2F0002_duplicate_shebang.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Ferr%2F0002_duplicate_shebang.txt?ref=e919db3731968ae7a6877530d2cb645b0495d5fd", "patch": "@@ -1,6 +1,6 @@\n FILE@[0; 42)\n   SHEBANG@[0; 20)\n-  err: `expected item`\n+  err: `expected an item`\n   ERROR@[20; 42)\n     WHITESPACE@[20; 21)\n     SHEBANG@[21; 41)"}, {"sha": "0a2dad70d18f9b8087430eaa55d5b08c1986a91d", "filename": "tests/data/parser/err/0003_C++_semicolon.txt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e919db3731968ae7a6877530d2cb645b0495d5fd/tests%2Fdata%2Fparser%2Ferr%2F0003_C%2B%2B_semicolon.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e919db3731968ae7a6877530d2cb645b0495d5fd/tests%2Fdata%2Fparser%2Ferr%2F0003_C%2B%2B_semicolon.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Ferr%2F0003_C%2B%2B_semicolon.txt?ref=e919db3731968ae7a6877530d2cb645b0495d5fd", "patch": "@@ -1,5 +1,5 @@\n FILE@[0; 40)\n-  STRUCT_ITEM@[0; 39)\n+  STRUCT_ITEM@[0; 40)\n     STRUCT_KW@[0; 6)\n     NAME@[6; 9)\n       WHITESPACE@[6; 7)\n@@ -34,5 +34,5 @@ FILE@[0; 40)\n     R_CURLY@[38; 39)\n     err: `expected item, found `;`\n consider removing this semicolon`\n-  ERROR@[39; 40)\n-    SEMI@[39; 40)\n+    ERROR@[39; 40)\n+      SEMI@[39; 40)"}, {"sha": "9b827d862b82f353487076c5b7087e3542d7e8b8", "filename": "tests/data/parser/err/0004_use_path_bad_segment.txt", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e919db3731968ae7a6877530d2cb645b0495d5fd/tests%2Fdata%2Fparser%2Ferr%2F0004_use_path_bad_segment.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e919db3731968ae7a6877530d2cb645b0495d5fd/tests%2Fdata%2Fparser%2Ferr%2F0004_use_path_bad_segment.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Ferr%2F0004_use_path_bad_segment.txt?ref=e919db3731968ae7a6877530d2cb645b0495d5fd", "patch": "@@ -11,11 +11,10 @@ FILE@[0; 12)\n         COLONCOLON@[7; 9)\n         err: `expected identifier`\n         err: `expected SEMI`\n-        err: `expected item`\n+        err: `expected an item`\n         PATH_SEGMENT@[9; 9)\n   ERROR@[9; 11)\n     INT_NUMBER@[9; 11) \"92\"\n-    err: `expected item, found `;`\n-consider removing this semicolon`\n+    err: `expected an item`\n   ERROR@[11; 12)\n     SEMI@[11; 12)"}, {"sha": "473fe17cbbfa022743b279b4d78dd747d0b5f374", "filename": "tests/data/parser/err/0007_stray_curly_in_file.txt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e919db3731968ae7a6877530d2cb645b0495d5fd/tests%2Fdata%2Fparser%2Ferr%2F0007_stray_curly_in_file.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e919db3731968ae7a6877530d2cb645b0495d5fd/tests%2Fdata%2Fparser%2Ferr%2F0007_stray_curly_in_file.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Ferr%2F0007_stray_curly_in_file.txt?ref=e919db3731968ae7a6877530d2cb645b0495d5fd", "patch": "@@ -1,7 +1,7 @@\n FILE@[0; 31)\n   ERROR@[0; 3)\n     R_CURLY@[0; 1)\n-    err: `expected item`\n+    err: `expected an item`\n     WHITESPACE@[1; 3)\n   STRUCT_ITEM@[3; 14)\n     STRUCT_KW@[3; 9)\n@@ -10,7 +10,7 @@ FILE@[0; 31)\n       IDENT@[10; 11) \"S\"\n     SEMI@[11; 12)\n     WHITESPACE@[12; 14)\n-    err: `expected item`\n+    err: `expected an item`\n   ERROR@[14; 17)\n     R_CURLY@[14; 15)\n     WHITESPACE@[15; 17)\n@@ -26,7 +26,7 @@ FILE@[0; 31)\n       L_CURLY@[25; 26)\n       R_CURLY@[26; 27)\n       WHITESPACE@[27; 29)\n-      err: `expected item`\n+      err: `expected an item`\n   ERROR@[29; 31)\n     R_CURLY@[29; 30)\n     WHITESPACE@[30; 31)"}, {"sha": "80253d8afd6805818a87a8165f0b594cb35bdd3b", "filename": "tests/data/parser/err/0008_item_block_recovery.txt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e919db3731968ae7a6877530d2cb645b0495d5fd/tests%2Fdata%2Fparser%2Ferr%2F0008_item_block_recovery.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e919db3731968ae7a6877530d2cb645b0495d5fd/tests%2Fdata%2Fparser%2Ferr%2F0008_item_block_recovery.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Ferr%2F0008_item_block_recovery.txt?ref=e919db3731968ae7a6877530d2cb645b0495d5fd", "patch": "@@ -13,17 +13,17 @@ FILE@[0; 95)\n       WHITESPACE@[10; 11)\n       R_CURLY@[11; 12)\n       WHITESPACE@[12; 14)\n-      err: `expected item`\n+      err: `expected an item`\n   ERROR@[14; 17)\n     IDENT@[14; 17) \"bar\"\n-    err: `expected item`\n+    err: `expected an item`\n   ERROR@[17; 18)\n     L_PAREN@[17; 18)\n-    err: `expected item`\n+    err: `expected an item`\n   ERROR@[18; 20)\n     R_PAREN@[18; 19)\n     WHITESPACE@[19; 20)\n-    err: `expected item`\n+    err: `expected an item`\n   ERROR@[20; 82)\n     L_CURLY@[20; 21)\n     WHITESPACE@[21; 26)"}, {"sha": "72e5b36e56b2aa1eb88a26e4aaac79be5924db2a", "filename": "tests/data/parser/err/0009_broken_struct_type_parameter.txt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e919db3731968ae7a6877530d2cb645b0495d5fd/tests%2Fdata%2Fparser%2Ferr%2F0009_broken_struct_type_parameter.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e919db3731968ae7a6877530d2cb645b0495d5fd/tests%2Fdata%2Fparser%2Ferr%2F0009_broken_struct_type_parameter.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Ferr%2F0009_broken_struct_type_parameter.txt?ref=e919db3731968ae7a6877530d2cb645b0495d5fd", "patch": "@@ -13,18 +13,18 @@ FILE@[0; 43)\n         err: `expected COMMA`\n         err: `expected R_ANGLE`\n         err: `expected `;`, `{`, or `(``\n-        err: `expected item`\n+        err: `expected an item`\n   ERROR@[12; 14)\n     PLUS@[12; 13)\n     WHITESPACE@[13; 14)\n-    err: `expected item`\n+    err: `expected an item`\n   ERROR@[14; 15)\n     INT_NUMBER@[14; 15) \"2\"\n-    err: `expected item`\n+    err: `expected an item`\n   ERROR@[15; 17)\n     R_ANGLE@[15; 16)\n     WHITESPACE@[16; 17)\n-    err: `expected item`\n+    err: `expected an item`\n   ERROR@[17; 33)\n     L_CURLY@[17; 18)\n     WHITESPACE@[18; 23)"}, {"sha": "c1bd0a2d1be077352504295952288647b63c14f0", "filename": "tests/data/parser/err/0011_extern_struct.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e919db3731968ae7a6877530d2cb645b0495d5fd/tests%2Fdata%2Fparser%2Ferr%2F0011_extern_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e919db3731968ae7a6877530d2cb645b0495d5fd/tests%2Fdata%2Fparser%2Ferr%2F0011_extern_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Ferr%2F0011_extern_struct.rs?ref=e919db3731968ae7a6877530d2cb645b0495d5fd", "previous_filename": "tests/data/parser/inline/0006_extern_struct.rs"}, {"sha": "288f3469b7fbdfa12aca8c5cf8c7adf4a6e982c7", "filename": "tests/data/parser/err/0011_extern_struct.txt", "status": "renamed", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e919db3731968ae7a6877530d2cb645b0495d5fd/tests%2Fdata%2Fparser%2Ferr%2F0011_extern_struct.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e919db3731968ae7a6877530d2cb645b0495d5fd/tests%2Fdata%2Fparser%2Ferr%2F0011_extern_struct.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Ferr%2F0011_extern_struct.txt?ref=e919db3731968ae7a6877530d2cb645b0495d5fd", "patch": "@@ -1,8 +1,9 @@\n FILE@[0; 19)\n-  ABI@[0; 7)\n-    EXTERN_KW@[0; 6)\n-    WHITESPACE@[6; 7)\n-    err: `expected `fn` or `{``\n+  ERROR@[0; 7)\n+    ABI@[0; 7)\n+      EXTERN_KW@[0; 6)\n+      WHITESPACE@[6; 7)\n+      err: `expected fn, trait or impl`\n   STRUCT_ITEM@[7; 19)\n     STRUCT_KW@[7; 13)\n     NAME@[13; 17)", "previous_filename": "tests/data/parser/inline/0006_extern_struct.txt"}, {"sha": "1428386921d5548089db39ea6df5e515ea4436a3", "filename": "tests/data/parser/inline/0013_unsafe_block_in_mod.txt", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e919db3731968ae7a6877530d2cb645b0495d5fd/tests%2Fdata%2Fparser%2Finline%2F0013_unsafe_block_in_mod.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e919db3731968ae7a6877530d2cb645b0495d5fd/tests%2Fdata%2Fparser%2Finline%2F0013_unsafe_block_in_mod.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0013_unsafe_block_in_mod.txt?ref=e919db3731968ae7a6877530d2cb645b0495d5fd", "patch": "@@ -11,10 +11,12 @@ FILE@[0; 33)\n       L_CURLY@[8; 9)\n       R_CURLY@[9; 10)\n       WHITESPACE@[10; 11)\n-  UNSAFE_KW@[11; 17)\n-  err: `expected `trait`, `impl` or `fn``\n-  ERROR@[17; 22)\n+      err: `expected an item`\n+  ERROR@[11; 18)\n+    UNSAFE_KW@[11; 17)\n     WHITESPACE@[17; 18)\n+    err: `expected an item`\n+  ERROR@[18; 22)\n     L_CURLY@[18; 19)\n     WHITESPACE@[19; 20)\n     R_CURLY@[20; 21)"}, {"sha": "aa600eab4486c9b0aa5ea9922775c15f58bbf29e", "filename": "tests/data/parser/inline/0023_array_type_missing_semi.txt", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e919db3731968ae7a6877530d2cb645b0495d5fd/tests%2Fdata%2Fparser%2Finline%2F0023_array_type_missing_semi.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e919db3731968ae7a6877530d2cb645b0495d5fd/tests%2Fdata%2Fparser%2Finline%2F0023_array_type_missing_semi.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0023_array_type_missing_semi.txt?ref=e919db3731968ae7a6877530d2cb645b0495d5fd", "patch": "@@ -15,14 +15,13 @@ FILE@[0; 18)\n         WHITESPACE@[12; 13)\n         err: `expected `;` or `]``\n         err: `expected SEMI`\n-        err: `expected item`\n+        err: `expected an item`\n   ERROR@[13; 15)\n     INT_NUMBER@[13; 15) \"92\"\n-    err: `expected item`\n+    err: `expected an item`\n   ERROR@[15; 16)\n     R_BRACK@[15; 16)\n-    err: `expected item, found `;`\n-consider removing this semicolon`\n+    err: `expected an item`\n   ERROR@[16; 18)\n     SEMI@[16; 17)\n     WHITESPACE@[17; 18)"}, {"sha": "82632b7bfa388eeb088a8700c7c5175e25edc18d", "filename": "tests/data/parser/inline/0029_fn_pointer_type_missing_fn.txt", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e919db3731968ae7a6877530d2cb645b0495d5fd/tests%2Fdata%2Fparser%2Finline%2F0029_fn_pointer_type_missing_fn.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e919db3731968ae7a6877530d2cb645b0495d5fd/tests%2Fdata%2Fparser%2Finline%2F0029_fn_pointer_type_missing_fn.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0029_fn_pointer_type_missing_fn.txt?ref=e919db3731968ae7a6877530d2cb645b0495d5fd", "patch": "@@ -11,14 +11,13 @@ FILE@[0; 20)\n     err: `expected `fn``\n     err: `expected SEMI`\n     WHITESPACE@[15; 16)\n-    err: `expected item`\n+    err: `expected an item`\n   ERROR@[16; 17)\n     L_PAREN@[16; 17)\n-    err: `expected item`\n+    err: `expected an item`\n   ERROR@[17; 18)\n     R_PAREN@[17; 18)\n-    err: `expected item, found `;`\n-consider removing this semicolon`\n+    err: `expected an item`\n   ERROR@[18; 20)\n     SEMI@[18; 19)\n     WHITESPACE@[19; 20)"}, {"sha": "d9d99d2d3d7fe3d48390d4bbdc9b99c47d68c50f", "filename": "tests/data/parser/inline/0068_pub_expr.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e919db3731968ae7a6877530d2cb645b0495d5fd/tests%2Fdata%2Fparser%2Finline%2F0068_pub_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e919db3731968ae7a6877530d2cb645b0495d5fd/tests%2Fdata%2Fparser%2Finline%2F0068_pub_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0068_pub_expr.rs?ref=e919db3731968ae7a6877530d2cb645b0495d5fd", "patch": "@@ -0,0 +1 @@\n+fn foo() { pub 92; } //FIXME"}, {"sha": "09cf9b2627c8705b347dba21782b8fd603aaf287", "filename": "tests/data/parser/inline/0068_pub_expr.txt", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e919db3731968ae7a6877530d2cb645b0495d5fd/tests%2Fdata%2Fparser%2Finline%2F0068_pub_expr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e919db3731968ae7a6877530d2cb645b0495d5fd/tests%2Fdata%2Fparser%2Finline%2F0068_pub_expr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0068_pub_expr.txt?ref=e919db3731968ae7a6877530d2cb645b0495d5fd", "patch": "@@ -0,0 +1,25 @@\n+FILE@[0; 29)\n+  FN_ITEM@[0; 29)\n+    FN_KW@[0; 2)\n+    NAME@[2; 6)\n+      WHITESPACE@[2; 3)\n+      IDENT@[3; 6) \"foo\"\n+    PARAM_LIST@[6; 9)\n+      L_PAREN@[6; 7)\n+      R_PAREN@[7; 8)\n+      WHITESPACE@[8; 9)\n+    BLOCK_EXPR@[9; 29)\n+      L_CURLY@[9; 10)\n+      EXPR_STMT@[10; 19)\n+        VISIBILITY@[10; 15)\n+          WHITESPACE@[10; 11)\n+          PUB_KW@[11; 14)\n+          WHITESPACE@[14; 15)\n+        LITERAL@[15; 17)\n+          INT_NUMBER@[15; 17) \"92\"\n+        SEMI@[17; 18)\n+        WHITESPACE@[18; 19)\n+      R_CURLY@[19; 20)\n+      WHITESPACE@[20; 21)\n+      COMMENT@[21; 28)\n+      WHITESPACE@[28; 29)"}, {"sha": "289809809a6b662506fec6c72f23da192f8f7790", "filename": "tests/data/parser/ok/0025_extern_fn_in_block.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e919db3731968ae7a6877530d2cb645b0495d5fd/tests%2Fdata%2Fparser%2Fok%2F0025_extern_fn_in_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e919db3731968ae7a6877530d2cb645b0495d5fd/tests%2Fdata%2Fparser%2Fok%2F0025_extern_fn_in_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Fok%2F0025_extern_fn_in_block.rs?ref=e919db3731968ae7a6877530d2cb645b0495d5fd", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    extern fn f() {}\n+}"}, {"sha": "0623740aae710a3705aea0255b1f0af3a900152d", "filename": "tests/data/parser/ok/0025_extern_fn_in_block.txt", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e919db3731968ae7a6877530d2cb645b0495d5fd/tests%2Fdata%2Fparser%2Fok%2F0025_extern_fn_in_block.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e919db3731968ae7a6877530d2cb645b0495d5fd/tests%2Fdata%2Fparser%2Fok%2F0025_extern_fn_in_block.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Fok%2F0025_extern_fn_in_block.txt?ref=e919db3731968ae7a6877530d2cb645b0495d5fd", "patch": "@@ -0,0 +1,31 @@\n+FILE@[0; 35)\n+  FN_ITEM@[0; 35)\n+    FN_KW@[0; 2)\n+    NAME@[2; 7)\n+      WHITESPACE@[2; 3)\n+      IDENT@[3; 7) \"main\"\n+    PARAM_LIST@[7; 10)\n+      L_PAREN@[7; 8)\n+      R_PAREN@[8; 9)\n+      WHITESPACE@[9; 10)\n+    BLOCK_EXPR@[10; 35)\n+      L_CURLY@[10; 11)\n+      FN_ITEM@[11; 33)\n+        ABI@[11; 23)\n+          WHITESPACE@[11; 16)\n+          EXTERN_KW@[16; 22)\n+          WHITESPACE@[22; 23)\n+        FN_KW@[23; 25)\n+        NAME@[25; 27)\n+          WHITESPACE@[25; 26)\n+          IDENT@[26; 27) \"f\"\n+        PARAM_LIST@[27; 30)\n+          L_PAREN@[27; 28)\n+          R_PAREN@[28; 29)\n+          WHITESPACE@[29; 30)\n+        BLOCK_EXPR@[30; 33)\n+          L_CURLY@[30; 31)\n+          R_CURLY@[31; 32)\n+          WHITESPACE@[32; 33)\n+      R_CURLY@[33; 34)\n+      WHITESPACE@[34; 35)"}, {"sha": "7641a3d28e666411d7d7d97982119f2873661ea2", "filename": "tests/data/parser/ok/0026_const_fn_in_block.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e919db3731968ae7a6877530d2cb645b0495d5fd/tests%2Fdata%2Fparser%2Fok%2F0026_const_fn_in_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e919db3731968ae7a6877530d2cb645b0495d5fd/tests%2Fdata%2Fparser%2Fok%2F0026_const_fn_in_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Fok%2F0026_const_fn_in_block.rs?ref=e919db3731968ae7a6877530d2cb645b0495d5fd", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    const fn f() {}\n+}"}, {"sha": "329c658463c9b176462892b449090ee8a632f93b", "filename": "tests/data/parser/ok/0026_const_fn_in_block.txt", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e919db3731968ae7a6877530d2cb645b0495d5fd/tests%2Fdata%2Fparser%2Fok%2F0026_const_fn_in_block.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e919db3731968ae7a6877530d2cb645b0495d5fd/tests%2Fdata%2Fparser%2Fok%2F0026_const_fn_in_block.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Fok%2F0026_const_fn_in_block.txt?ref=e919db3731968ae7a6877530d2cb645b0495d5fd", "patch": "@@ -0,0 +1,30 @@\n+FILE@[0; 34)\n+  FN_ITEM@[0; 34)\n+    FN_KW@[0; 2)\n+    NAME@[2; 7)\n+      WHITESPACE@[2; 3)\n+      IDENT@[3; 7) \"main\"\n+    PARAM_LIST@[7; 10)\n+      L_PAREN@[7; 8)\n+      R_PAREN@[8; 9)\n+      WHITESPACE@[9; 10)\n+    BLOCK_EXPR@[10; 34)\n+      L_CURLY@[10; 11)\n+      FN_ITEM@[11; 32)\n+        WHITESPACE@[11; 16)\n+        CONST_KW@[16; 21)\n+        WHITESPACE@[21; 22)\n+        FN_KW@[22; 24)\n+        NAME@[24; 26)\n+          WHITESPACE@[24; 25)\n+          IDENT@[25; 26) \"f\"\n+        PARAM_LIST@[26; 29)\n+          L_PAREN@[26; 27)\n+          R_PAREN@[27; 28)\n+          WHITESPACE@[28; 29)\n+        BLOCK_EXPR@[29; 32)\n+          L_CURLY@[29; 30)\n+          R_CURLY@[30; 31)\n+          WHITESPACE@[31; 32)\n+      R_CURLY@[32; 33)\n+      WHITESPACE@[33; 34)"}, {"sha": "f3c5ff93863e9e1c1c502a8147b7ea8d31f2e88b", "filename": "tests/data/parser/ok/0027_unsafe_fn_in_block.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e919db3731968ae7a6877530d2cb645b0495d5fd/tests%2Fdata%2Fparser%2Fok%2F0027_unsafe_fn_in_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e919db3731968ae7a6877530d2cb645b0495d5fd/tests%2Fdata%2Fparser%2Fok%2F0027_unsafe_fn_in_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Fok%2F0027_unsafe_fn_in_block.rs?ref=e919db3731968ae7a6877530d2cb645b0495d5fd", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    unsafe fn f() {}\n+    unsafe { 92 }\n+}"}, {"sha": "9982d0308483f28d5fa49c521849812a33c449c2", "filename": "tests/data/parser/ok/0027_unsafe_fn_in_block.txt", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e919db3731968ae7a6877530d2cb645b0495d5fd/tests%2Fdata%2Fparser%2Fok%2F0027_unsafe_fn_in_block.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e919db3731968ae7a6877530d2cb645b0495d5fd/tests%2Fdata%2Fparser%2Fok%2F0027_unsafe_fn_in_block.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Fok%2F0027_unsafe_fn_in_block.txt?ref=e919db3731968ae7a6877530d2cb645b0495d5fd", "patch": "@@ -0,0 +1,40 @@\n+FILE@[0; 53)\n+  FN_ITEM@[0; 53)\n+    FN_KW@[0; 2)\n+    NAME@[2; 7)\n+      WHITESPACE@[2; 3)\n+      IDENT@[3; 7) \"main\"\n+    PARAM_LIST@[7; 10)\n+      L_PAREN@[7; 8)\n+      R_PAREN@[8; 9)\n+      WHITESPACE@[9; 10)\n+    BLOCK_EXPR@[10; 53)\n+      L_CURLY@[10; 11)\n+      FN_ITEM@[11; 37)\n+        WHITESPACE@[11; 16)\n+        UNSAFE_KW@[16; 22)\n+        WHITESPACE@[22; 23)\n+        FN_KW@[23; 25)\n+        NAME@[25; 27)\n+          WHITESPACE@[25; 26)\n+          IDENT@[26; 27) \"f\"\n+        PARAM_LIST@[27; 30)\n+          L_PAREN@[27; 28)\n+          R_PAREN@[28; 29)\n+          WHITESPACE@[29; 30)\n+        BLOCK_EXPR@[30; 37)\n+          L_CURLY@[30; 31)\n+          R_CURLY@[31; 32)\n+          WHITESPACE@[32; 37)\n+      BLOCK_EXPR@[37; 51)\n+        UNSAFE_KW@[37; 43)\n+        WHITESPACE@[43; 44)\n+        L_CURLY@[44; 45)\n+        LITERAL@[45; 49)\n+          WHITESPACE@[45; 46)\n+          INT_NUMBER@[46; 48) \"92\"\n+          WHITESPACE@[48; 49)\n+        R_CURLY@[49; 50)\n+        WHITESPACE@[50; 51)\n+      R_CURLY@[51; 52)\n+      WHITESPACE@[52; 53)"}, {"sha": "39c82166121a987f8b0f3cab3e68af69c6c2b8eb", "filename": "tests/testutils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e919db3731968ae7a6877530d2cb645b0495d5fd/tests%2Ftestutils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e919db3731968ae7a6877530d2cb645b0495d5fd/tests%2Ftestutils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftestutils%2Fsrc%2Flib.rs?ref=e919db3731968ae7a6877530d2cb645b0495d5fd", "patch": "@@ -90,6 +90,7 @@ fn print_difference(expected: &str, actual: &str, path: &Path) {\n         return;\n     }\n     let changeset = Changeset::new(actual, expected, \"\\n\");\n+    println!(\"Expected:\\n{}\\n\\nActual:\\n{}\\n\", expected, actual);\n     print!(\"{}\", changeset);\n     println!(\"file: {}\\n\", path.display());\n     panic!(\"Comparison failed\")"}]}