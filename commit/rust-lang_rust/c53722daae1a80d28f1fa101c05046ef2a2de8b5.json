{"sha": "c53722daae1a80d28f1fa101c05046ef2a2de8b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1MzcyMmRhYWUxYTgwZDI4ZjFmYTEwMWMwNTA0NmVmMmEyZGU4YjU=", "commit": {"author": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2015-11-20T11:19:05Z"}, "committer": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2015-11-20T13:31:04Z"}, "message": "Remove slice pattern from compiler plugin example\n\ncloses #29930", "tree": {"sha": "1f8394307cefab6b9f8e7b5131c3cb1608b2704e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f8394307cefab6b9f8e7b5131c3cb1608b2704e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c53722daae1a80d28f1fa101c05046ef2a2de8b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c53722daae1a80d28f1fa101c05046ef2a2de8b5", "html_url": "https://github.com/rust-lang/rust/commit/c53722daae1a80d28f1fa101c05046ef2a2de8b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c53722daae1a80d28f1fa101c05046ef2a2de8b5/comments", "author": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2228bacd62ca8970a7a59401e78d0c5a34fc0f87", "url": "https://api.github.com/repos/rust-lang/rust/commits/2228bacd62ca8970a7a59401e78d0c5a34fc0f87", "html_url": "https://github.com/rust-lang/rust/commit/2228bacd62ca8970a7a59401e78d0c5a34fc0f87"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "2cb62cdfca555ea3d416207c01eb3d566c9c437a", "filename": "src/doc/book/compiler-plugins.md", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c53722daae1a80d28f1fa101c05046ef2a2de8b5/src%2Fdoc%2Fbook%2Fcompiler-plugins.md", "raw_url": "https://github.com/rust-lang/rust/raw/c53722daae1a80d28f1fa101c05046ef2a2de8b5/src%2Fdoc%2Fbook%2Fcompiler-plugins.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fcompiler-plugins.md?ref=c53722daae1a80d28f1fa101c05046ef2a2de8b5", "patch": "@@ -54,14 +54,21 @@ use rustc::plugin::Registry;\n fn expand_rn(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n         -> Box<MacResult + 'static> {\n \n-    static NUMERALS: &'static [(&'static str, u32)] = &[\n+    static NUMERALS: &'static [(&'static str, usize)] = &[\n         (\"M\", 1000), (\"CM\", 900), (\"D\", 500), (\"CD\", 400),\n         (\"C\",  100), (\"XC\",  90), (\"L\",  50), (\"XL\",  40),\n         (\"X\",   10), (\"IX\",   9), (\"V\",   5), (\"IV\",   4),\n         (\"I\",    1)];\n \n-    let text = match args {\n-        [TokenTree::Token(_, token::Ident(s, _))] => s.to_string(),\n+    if args.len() != 1 {\n+        cx.span_err(\n+            sp,\n+            &format!(\"argument should be a single identifier, but got {} arguments\", args.len()));\n+        return DummyResult::any(sp);\n+    }\n+\n+    let text = match args[0] {\n+        TokenTree::Token(_, token::Ident(s, _)) => s.to_string(),\n         _ => {\n             cx.span_err(sp, \"argument should be a single identifier\");\n             return DummyResult::any(sp);\n@@ -83,7 +90,7 @@ fn expand_rn(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n         }\n     }\n \n-    MacEager::expr(cx.expr_u32(sp, total))\n+    MacEager::expr(cx.expr_usize(sp, total))\n }\n \n #[plugin_registrar]"}, {"sha": "c9249fb3357e41843be5f43c6a5547f03f829d98", "filename": "src/test/auxiliary/roman_numerals.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c53722daae1a80d28f1fa101c05046ef2a2de8b5/src%2Ftest%2Fauxiliary%2Froman_numerals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53722daae1a80d28f1fa101c05046ef2a2de8b5/src%2Ftest%2Fauxiliary%2Froman_numerals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Froman_numerals.rs?ref=c53722daae1a80d28f1fa101c05046ef2a2de8b5", "patch": "@@ -39,8 +39,15 @@ fn expand_rn(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n         (\"X\",   10), (\"IX\",   9), (\"V\",   5), (\"IV\",   4),\n         (\"I\",    1)];\n \n-    let text = match args {\n-        [TokenTree::Token(_, token::Ident(s, _))] => s.to_string(),\n+    if args.len() != 1 {\n+        cx.span_err(\n+            sp,\n+            &format!(\"argument should be a single identifier, but got {} arguments\", args.len()));\n+        return DummyResult::any(sp);\n+    }\n+\n+    let text = match args[0] {\n+        TokenTree::Token(_, token::Ident(s, _)) => s.to_string(),\n         _ => {\n             cx.span_err(sp, \"argument should be a single identifier\");\n             return DummyResult::any(sp);"}]}