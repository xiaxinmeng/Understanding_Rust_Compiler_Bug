{"sha": "c2e0e71a0943b16e6e6f8aad88aaea7b6f60dea5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyZTBlNzFhMDk0M2IxNmU2ZTZmOGFhZDg4YWFlYTdiNmY2MGRlYTU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-03-29T18:31:58Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-03-29T18:31:58Z"}, "message": "Suggest correct order for arguments when encountering early constraints\n\nWhen encountering constraints before type arguments or lifetimes,\nsuggest the correct order.", "tree": {"sha": "6bcbda0b1810e9378ffd2dcd5199c811243ce39e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bcbda0b1810e9378ffd2dcd5199c811243ce39e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2e0e71a0943b16e6e6f8aad88aaea7b6f60dea5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2e0e71a0943b16e6e6f8aad88aaea7b6f60dea5", "html_url": "https://github.com/rust-lang/rust/commit/c2e0e71a0943b16e6e6f8aad88aaea7b6f60dea5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2e0e71a0943b16e6e6f8aad88aaea7b6f60dea5/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcb4e817bc8469a0a47e0eaecdf1cf0ea980a496", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcb4e817bc8469a0a47e0eaecdf1cf0ea980a496", "html_url": "https://github.com/rust-lang/rust/commit/dcb4e817bc8469a0a47e0eaecdf1cf0ea980a496"}], "stats": {"total": 120, "additions": 74, "deletions": 46}, "files": [{"sha": "f91cbe51d85d184094fdac9e63d0b363b45181c7", "filename": "src/librustc_ast/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2e0e71a0943b16e6e6f8aad88aaea7b6f60dea5/src%2Flibrustc_ast%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e0e71a0943b16e6e6f8aad88aaea7b6f60dea5/src%2Flibrustc_ast%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fast.rs?ref=c2e0e71a0943b16e6e6f8aad88aaea7b6f60dea5", "patch": "@@ -300,8 +300,8 @@ pub enum GenericBound {\n impl GenericBound {\n     pub fn span(&self) -> Span {\n         match self {\n-            &GenericBound::Trait(ref t, ..) => t.span,\n-            &GenericBound::Outlives(ref l) => l.ident.span,\n+            GenericBound::Trait(ref t, ..) => t.span,\n+            GenericBound::Outlives(ref l) => l.ident.span,\n         }\n     }\n }"}, {"sha": "4f076c963c1b60b7a626a186677c1f7aaba7ca24", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 35, "deletions": 21, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/c2e0e71a0943b16e6e6f8aad88aaea7b6f60dea5/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e0e71a0943b16e6e6f8aad88aaea7b6f60dea5/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=c2e0e71a0943b16e6e6f8aad88aaea7b6f60dea5", "patch": "@@ -640,6 +640,32 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n+    fn suggest_correct_generic_order(&self, data: &AngleBracketedArgs) -> String {\n+        // Lifetimes always come first.\n+        let lt_sugg = data.args.iter().filter_map(|arg| match arg {\n+            AngleBracketedArg::Arg(lt @ GenericArg::Lifetime(_)) => {\n+                Some(pprust::to_string(|s| s.print_generic_arg(lt)))\n+            }\n+            _ => None,\n+        });\n+        let args_sugg = data.args.iter().filter_map(|a| match a {\n+            AngleBracketedArg::Arg(GenericArg::Lifetime(_)) => None,\n+            AngleBracketedArg::Arg(arg) => Some(pprust::to_string(|s| s.print_generic_arg(arg))),\n+            AngleBracketedArg::Constraint(_) => None,\n+        });\n+        // Cosntraints always come last.\n+        let constraint_sugg = data.args.iter().filter_map(|a| match a {\n+            AngleBracketedArg::Arg(_) => None,\n+            AngleBracketedArg::Constraint(c) => {\n+                Some(pprust::to_string(|s| s.print_assoc_constraint(c)))\n+            }\n+        });\n+        format!(\n+            \"<{}>\",\n+            lt_sugg.chain(args_sugg).chain(constraint_sugg).collect::<Vec<String>>().join(\", \")\n+        )\n+    }\n+\n     /// Enforce generic args coming before constraints in `<...>` of a path segment.\n     fn check_generic_args_before_constraints(&self, data: &AngleBracketedArgs) {\n         // Early exit in case it's partitioned as it should be.\n@@ -663,20 +689,7 @@ impl<'a> AstValidator<'a> {\n                 _ => None,\n             })\n             .collect::<Vec<_>>();\n-        let snippet_span = match &constraint_spans[..] {\n-            [single] => *single,\n-            [first, .., last] => first.to(*last),\n-            [] => unreachable!(),\n-        };\n-        let removal_span = match &arg_spans[..] {\n-            [first, ..] => snippet_span.until(*first),\n-            [] => unreachable!(),\n-        };\n-        let sugg_span = match &arg_spans[..] {\n-            [.., last] => last.shrink_to_hi(),\n-            [] => unreachable!(),\n-        };\n-        let snippet = self.session.source_map().span_to_snippet(snippet_span).unwrap();\n+        let args_len = arg_spans.len();\n         let constraint_len = constraint_spans.len();\n         // ...and then error:\n         self.err_handler()\n@@ -693,13 +706,14 @@ impl<'a> AstValidator<'a> {\n                 ),\n             )\n             .span_labels(arg_spans, \"generic argument\")\n-            .multipart_suggestion(\n-                \"move the constraints after the generic arguments\",\n-                vec![\n-                    (removal_span, String::new()),\n-                    (sugg_span.shrink_to_lo(), \", \".to_string()),\n-                    (sugg_span, snippet),\n-                ],\n+            .span_suggestion_verbose(\n+                data.span,\n+                &format!(\n+                    \"move the constraint{} after the generic argument{}\",\n+                    pluralize!(constraint_len),\n+                    pluralize!(args_len)\n+                ),\n+                self.suggest_correct_generic_order(&data),\n                 Applicability::MachineApplicable,\n             )\n             .emit();"}, {"sha": "5ac96c5c8cb55607da341a1160d80a6db979238c", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2e0e71a0943b16e6e6f8aad88aaea7b6f60dea5/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e0e71a0943b16e6e6f8aad88aaea7b6f60dea5/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=c2e0e71a0943b16e6e6f8aad88aaea7b6f60dea5", "patch": "@@ -870,7 +870,7 @@ impl<'a> State<'a> {\n         }\n     }\n \n-    fn print_assoc_constraint(&mut self, constraint: &ast::AssocTyConstraint) {\n+    pub fn print_assoc_constraint(&mut self, constraint: &ast::AssocTyConstraint) {\n         self.print_ident(constraint.ident);\n         self.s.space();\n         match &constraint.kind {\n@@ -884,7 +884,7 @@ impl<'a> State<'a> {\n         }\n     }\n \n-    crate fn print_generic_arg(&mut self, generic_arg: &GenericArg) {\n+    pub fn print_generic_arg(&mut self, generic_arg: &GenericArg) {\n         match generic_arg {\n             GenericArg::Lifetime(lt) => self.print_lifetime(*lt),\n             GenericArg::Type(ty) => self.print_type(ty),"}, {"sha": "2dbd9f4e52fad36f5633d7faf18fc224771b51d6", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c2e0e71a0943b16e6e6f8aad88aaea7b6f60dea5/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e0e71a0943b16e6e6f8aad88aaea7b6f60dea5/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=c2e0e71a0943b16e6e6f8aad88aaea7b6f60dea5", "patch": "@@ -315,6 +315,20 @@ impl<'a> DiagnosticBuilder<'a> {\n         self\n     }\n \n+    pub fn span_suggestion_verbose(\n+        &mut self,\n+        sp: Span,\n+        msg: &str,\n+        suggestion: String,\n+        applicability: Applicability,\n+    ) -> &mut Self {\n+        if !self.0.allow_suggestions {\n+            return self;\n+        }\n+        self.0.diagnostic.span_suggestion_verbose(sp, msg, suggestion, applicability);\n+        self\n+    }\n+\n     pub fn span_suggestion_hidden(\n         &mut self,\n         sp: Span,"}, {"sha": "8daf76993bc066f36ca0ce2ef2e0342feec3c081", "filename": "src/test/ui/parser/issue-32214.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c2e0e71a0943b16e6e6f8aad88aaea7b6f60dea5/src%2Ftest%2Fui%2Fparser%2Fissue-32214.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2e0e71a0943b16e6e6f8aad88aaea7b6f60dea5/src%2Ftest%2Fui%2Fparser%2Fissue-32214.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-32214.stderr?ref=c2e0e71a0943b16e6e6f8aad88aaea7b6f60dea5", "patch": "@@ -6,10 +6,10 @@ LL | pub fn test<W, I: Trait<Item=(), W> >() {}\n    |                         |\n    |                         the constraint is provided here\n    |\n-help: move the constraints after the generic arguments\n+help: move the constraint after the generic argument\n    |\n-LL | pub fn test<W, I: Trait<W, Item=()> >() {}\n-   |                        --^^^^^^^\n+LL | pub fn test<W, I: Trait<W, Item = ()> >() {}\n+   |                        ^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "e8cf54e276771244f63a66d322cae6edf4b2ae0d", "filename": "src/test/ui/suggestions/suggest-move-types.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c2e0e71a0943b16e6e6f8aad88aaea7b6f60dea5/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2e0e71a0943b16e6e6f8aad88aaea7b6f60dea5/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.stderr?ref=c2e0e71a0943b16e6e6f8aad88aaea7b6f60dea5", "patch": "@@ -6,10 +6,10 @@ LL | struct A<T, M: One<A=(), T>> {\n    |                    |\n    |                    the constraint is provided here\n    |\n-help: move the constraints after the generic arguments\n+help: move the constraint after the generic argument\n    |\n-LL | struct A<T, M: One<T, A=()>> {\n-   |                   --^^^^\n+LL | struct A<T, M: One<T, A = ()>> {\n+   |                   ^^^^^^^^^^^\n \n error: generic arguments must come before the first constraint\n   --> $DIR/suggest-move-types.rs:33:43\n@@ -20,10 +20,10 @@ LL | struct Al<'a, T, M: OneWithLifetime<A=(), T, 'a>> {\n    |                                     |     generic argument\n    |                                     the constraint is provided here\n    |\n-help: move the constraints after the generic arguments\n+help: move the constraint after the generic arguments\n    |\n-LL | struct Al<'a, T, M: OneWithLifetime<T, 'a, A=()>> {\n-   |                                    --    ^^^^\n+LL | struct Al<'a, T, M: OneWithLifetime<'a, T, A = ()>> {\n+   |                                    ^^^^^^^^^^^^^^^\n \n error: generic arguments must come before the first constraint\n   --> $DIR/suggest-move-types.rs:40:46\n@@ -39,8 +39,8 @@ LL | struct B<T, U, V, M: Three<A=(), B=(), C=(), T, U, V>> {\n    |\n help: move the constraints after the generic arguments\n    |\n-LL | struct B<T, U, V, M: Three<T, U, V, A=(), B=(), C=()>> {\n-   |                           --      ^^^^^^^^^^^^^^^^\n+LL | struct B<T, U, V, M: Three<T, U, V, A = (), B = (), C = ()>> {\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: generic arguments must come before the first constraint\n   --> $DIR/suggest-move-types.rs:48:71\n@@ -59,8 +59,8 @@ LL | struct Bl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<A=(), B=(), C=(), T, U,\n    |\n help: move the constraints after the generic arguments\n    |\n-LL | struct Bl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<T, U, V, 'a, 'b, 'c, A=(), B=(), C=()>> {\n-   |                                                    --                  ^^^^^^^^^^^^^^^^\n+LL | struct Bl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<'a, 'b, 'c, T, U, V, A = (), B = (), C = ()>> {\n+   |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: generic arguments must come before the first constraint\n   --> $DIR/suggest-move-types.rs:57:28\n@@ -76,8 +76,8 @@ LL | struct C<T, U, V, M: Three<T, A=(), B=(), C=(), U, V>> {\n    |\n help: move the constraints after the generic arguments\n    |\n-LL | struct C<T, U, V, M: Three<A=(), B=(), C=(), U, V, A=(), B=(), C=()>> {\n-   |                           --                     ^^^^^^^^^^^^^^^^\n+LL | struct C<T, U, V, M: Three<T, U, V, A = (), B = (), C = ()>> {\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: generic arguments must come before the first constraint\n   --> $DIR/suggest-move-types.rs:65:53\n@@ -96,8 +96,8 @@ LL | struct Cl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<T, 'a, A=(), B=(), C=()\n    |\n help: move the constraints after the generic arguments\n    |\n-LL | struct Cl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<A=(), B=(), C=(), U, 'b, V, 'c, A=(), B=(), C=()>> {\n-   |                                                    --                             ^^^^^^^^^^^^^^^^\n+LL | struct Cl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<'a, 'b, 'c, T, U, V, A = (), B = (), C = ()>> {\n+   |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: generic arguments must come before the first constraint\n   --> $DIR/suggest-move-types.rs:74:28\n@@ -113,8 +113,8 @@ LL | struct D<T, U, V, M: Three<T, A=(), B=(), U, C=(), V>> {\n    |\n help: move the constraints after the generic arguments\n    |\n-LL | struct D<T, U, V, M: Three<A=(), B=(), U, C=(), V, A=(), B=(), U, C=()>> {\n-   |                           --                     ^^^^^^^^^^^^^^^^^^^\n+LL | struct D<T, U, V, M: Three<T, U, V, A = (), B = (), C = ()>> {\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: generic arguments must come before the first constraint\n   --> $DIR/suggest-move-types.rs:82:53\n@@ -133,8 +133,8 @@ LL | struct Dl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<T, 'a, A=(), B=(), U, '\n    |\n help: move the constraints after the generic arguments\n    |\n-LL | struct Dl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<A=(), B=(), U, 'b, C=(), V, 'c, A=(), B=(), U, 'b, C=()>> {\n-   |                                                    --                             ^^^^^^^^^^^^^^^^^^^^^^^\n+LL | struct Dl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<'a, 'b, 'c, T, U, V, A = (), B = (), C = ()>> {\n+   |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0747]: type provided when a lifetime was expected\n   --> $DIR/suggest-move-types.rs:33:43"}]}