{"sha": "f96ee10e888bac4435973972f1799db509b3318e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5NmVlMTBlODg4YmFjNDQzNTk3Mzk3MmYxNzk5ZGI1MDliMzMxOGU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-10-02T22:12:58Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-10-02T22:43:37Z"}, "message": "Test fixes from the rollup", "tree": {"sha": "d2e2937c36cd950cd48247640b2f346b279194b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2e2937c36cd950cd48247640b2f346b279194b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f96ee10e888bac4435973972f1799db509b3318e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f96ee10e888bac4435973972f1799db509b3318e", "html_url": "https://github.com/rust-lang/rust/commit/f96ee10e888bac4435973972f1799db509b3318e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f96ee10e888bac4435973972f1799db509b3318e/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ae802f57bf8a1ac2a47760a936c56e6fff16821", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ae802f57bf8a1ac2a47760a936c56e6fff16821", "html_url": "https://github.com/rust-lang/rust/commit/7ae802f57bf8a1ac2a47760a936c56e6fff16821"}], "stats": {"total": 119, "additions": 60, "deletions": 59}, "files": [{"sha": "ef3ccd5aead030131eb2c30dbe34d302bd5fefa3", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f96ee10e888bac4435973972f1799db509b3318e/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96ee10e888bac4435973972f1799db509b3318e/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=f96ee10e888bac4435973972f1799db509b3318e", "patch": "@@ -344,6 +344,7 @@ mod imp {\n mod test {\n     extern crate test;\n     use self::test::Bencher;\n+    use heap;\n \n     #[test]\n     fn basic_reallocate_inplace_noop() {"}, {"sha": "4bb4eeb4950ab0ae219babfb148bc441ef142daf", "filename": "src/libgreen/basic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f96ee10e888bac4435973972f1799db509b3318e/src%2Flibgreen%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96ee10e888bac4435973972f1799db509b3318e/src%2Flibgreen%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fbasic.rs?ref=f96ee10e888bac4435973972f1799db509b3318e", "patch": "@@ -73,13 +73,13 @@ impl BasicLoop {\n             RunRemote(i) => {\n                 match self.remotes.iter_mut().find(|& &(id, _)| id == i) {\n                     Some(&(_, ref mut f)) => f.call(),\n-                    None => unreachable!()\n+                    None => fail!(\"bad remote: {}\", i),\n                 }\n             }\n             RemoveRemote(i) => {\n                 match self.remotes.iter().position(|&(id, _)| id == i) {\n                     Some(i) => { self.remotes.remove(i).unwrap(); }\n-                    None => unreachable!()\n+                    None => fail!(\"bad remote: {}\", i),\n                 }\n             }\n         }"}, {"sha": "a86b797544a30af22caa11142a2a898ab680a047", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f96ee10e888bac4435973972f1799db509b3318e/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96ee10e888bac4435973972f1799db509b3318e/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=f96ee10e888bac4435973972f1799db509b3318e", "patch": "@@ -89,8 +89,8 @@ fn recurse_or_fail(depth: int, st: Option<State>) {\n             State {\n                 unique: box Cons((), box *st.unique),\n                 vec: st.vec.clone().append(\n-                        &[box Cons((), *st.vec.last().unwrap())]),\n-                res: r(box Cons((), st.res._l))\n+                        &[box Cons((), st.vec.last().unwrap().clone())]),\n+                res: r(box Cons((), st.res._l.clone()))\n             }\n           }\n         };"}, {"sha": "f0c63bfed0290d5f554579ba1acf9ccec5eb66b7", "filename": "src/test/debuginfo/borrowed-struct.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f96ee10e888bac4435973972f1799db509b3318e/src%2Ftest%2Fdebuginfo%2Fborrowed-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96ee10e888bac4435973972f1799db509b3318e/src%2Ftest%2Fdebuginfo%2Fborrowed-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-struct.rs?ref=f96ee10e888bac4435973972f1799db509b3318e", "patch": "@@ -30,13 +30,13 @@\n // gdb-check:$4 = {x = 11, y = 24.5}\n \n // gdb-command:print *unique_val_ref\n-// gdb-check:$8 = {x = 13, y = 26.5}\n+// gdb-check:$5 = {x = 13, y = 26.5}\n \n // gdb-command:print *unique_val_interior_ref_1\n-// gdb-check:$9 = 13\n+// gdb-check:$6 = 13\n \n // gdb-command:print *unique_val_interior_ref_2\n-// gdb-check:$10 = 26.5\n+// gdb-check:$7 = 26.5\n \n \n // === LLDB TESTS ==================================================================================\n@@ -56,13 +56,13 @@\n // lldb-check:[...]$3 = SomeStruct { x: 11, y: 24.5 }\n \n // lldb-command:print *unique_val_ref\n-// lldb-check:[...]$7 = SomeStruct { x: 13, y: 26.5 }\n+// lldb-check:[...]$4 = SomeStruct { x: 13, y: 26.5 }\n \n // lldb-command:print *unique_val_interior_ref_1\n-// lldb-check:[...]$8 = 13\n+// lldb-check:[...]$5 = 13\n \n // lldb-command:print *unique_val_interior_ref_2\n-// lldb-check:[...]$9 = 26.5\n+// lldb-check:[...]$6 = 26.5\n \n #![allow(unused_variable)]\n "}, {"sha": "e7b06af66fbea5c4f16a54b798e3a4a68b362340", "filename": "src/test/debuginfo/borrowed-tuple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f96ee10e888bac4435973972f1799db509b3318e/src%2Ftest%2Fdebuginfo%2Fborrowed-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96ee10e888bac4435973972f1799db509b3318e/src%2Ftest%2Fdebuginfo%2Fborrowed-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-tuple.rs?ref=f96ee10e888bac4435973972f1799db509b3318e", "patch": "@@ -26,7 +26,7 @@\n // gdb-check:$2 = {-15, -20}\n \n // gdb-command:print *unique_val_ref\n-// gdb-check:$4 = {-17, -22}\n+// gdb-check:$3 = {-17, -22}\n \n \n // === LLDB TESTS ==================================================================================\n@@ -40,7 +40,7 @@\n // lldb-check:[...]$1 = (-15, -20)\n \n // lldb-command:print *unique_val_ref\n-// lldb-check:[...]$3 = (-17, -22)\n+// lldb-check:[...]$2 = (-17, -22)\n \n \n #![allow(unused_variable)]"}, {"sha": "120553442fcf069aceb7c2461745ffc55d286807", "filename": "src/test/debuginfo/boxed-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f96ee10e888bac4435973972f1799db509b3318e/src%2Ftest%2Fdebuginfo%2Fboxed-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96ee10e888bac4435973972f1799db509b3318e/src%2Ftest%2Fdebuginfo%2Fboxed-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fboxed-struct.rs?ref=f96ee10e888bac4435973972f1799db509b3318e", "patch": "@@ -22,7 +22,7 @@\n // gdb-check:$1 = {x = 99, y = 999, z = 9999, w = 99999}\n \n // gdb-command:print *unique_dtor\n-// gdb-check:$3 = {x = 77, y = 777, z = 7777, w = 77777}\n+// gdb-check:$2 = {x = 77, y = 777, z = 7777, w = 77777}\n \n \n // === LLDB TESTS ==================================================================================\n@@ -33,7 +33,7 @@\n // lldb-check:[...]$0 = StructWithSomePadding { x: 99, y: 999, z: 9999, w: 99999 }\n \n // lldb-command:print *unique_dtor\n-// lldb-check:[...]$2 = StructWithDestructor { x: 77, y: 777, z: 7777, w: 77777 }\n+// lldb-check:[...]$1 = StructWithDestructor { x: 77, y: 777, z: 7777, w: 77777 }\n \n #![allow(unused_variable)]\n "}, {"sha": "40c056f5cd29907aea7e40b6e898d271cc8f67fd", "filename": "src/test/debuginfo/recursive-struct.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f96ee10e888bac4435973972f1799db509b3318e/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96ee10e888bac4435973972f1799db509b3318e/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs?ref=f96ee10e888bac4435973972f1799db509b3318e", "patch": "@@ -30,45 +30,45 @@\n // gdb-check:$4 = 3\n \n // gdb-command:print vec_unique[0].value\n-// gdb-check:$7 = 6.5\n+// gdb-check:$5 = 6.5\n // gdb-command:print vec_unique[0].next.RUST$ENCODED$ENUM$0$Empty.val->value\n-// gdb-check:$8 = 7.5\n+// gdb-check:$6 = 7.5\n \n // gdb-command:print borrowed_unique->value\n-// gdb-check:$9 = 8.5\n+// gdb-check:$7 = 8.5\n // gdb-command:print borrowed_unique->next.RUST$ENCODED$ENUM$0$Empty.val->value\n-// gdb-check:$10 = 9.5\n+// gdb-check:$8 = 9.5\n \n // LONG CYCLE\n // gdb-command:print long_cycle1.value\n-// gdb-check:$21 = 20\n+// gdb-check:$9 = 20\n // gdb-command:print long_cycle1.next->value\n-// gdb-check:$22 = 21\n+// gdb-check:$10 = 21\n // gdb-command:print long_cycle1.next->next->value\n-// gdb-check:$23 = 22\n+// gdb-check:$11 = 22\n // gdb-command:print long_cycle1.next->next->next->value\n-// gdb-check:$24 = 23\n+// gdb-check:$12 = 23\n \n // gdb-command:print long_cycle2.value\n-// gdb-check:$25 = 24\n+// gdb-check:$13 = 24\n // gdb-command:print long_cycle2.next->value\n-// gdb-check:$26 = 25\n+// gdb-check:$14 = 25\n // gdb-command:print long_cycle2.next->next->value\n-// gdb-check:$27 = 26\n+// gdb-check:$15 = 26\n \n // gdb-command:print long_cycle3.value\n-// gdb-check:$28 = 27\n+// gdb-check:$16 = 27\n // gdb-command:print long_cycle3.next->value\n-// gdb-check:$29 = 28\n+// gdb-check:$17 = 28\n \n // gdb-command:print long_cycle4.value\n-// gdb-check:$30 = 29.5\n+// gdb-check:$18 = 29.5\n \n // gdb-command:print (*****long_cycle_w_anonymous_types).value\n-// gdb-check:$31 = 30\n+// gdb-check:$19 = 30\n \n // gdb-command:print (*****((*****long_cycle_w_anonymous_types).next.RUST$ENCODED$ENUM$0$Empty.val)).value\n-// gdb-check:$32 = 31\n+// gdb-check:$20 = 31\n \n // gdb-command:continue\n "}, {"sha": "e355327a5efa1aff8d41ffd8f4be51ad9993fab4", "filename": "src/test/debuginfo/simd.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f96ee10e888bac4435973972f1799db509b3318e/src%2Ftest%2Fdebuginfo%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96ee10e888bac4435973972f1799db509b3318e/src%2Ftest%2Fdebuginfo%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fsimd.rs?ref=f96ee10e888bac4435973972f1799db509b3318e", "patch": "@@ -18,27 +18,27 @@\n // gdb-command:run\n \n // gdb-command:finish\n-// gdb-command:print/d i8x16\n+// gdb-command:print/d vi8x16\n // gdb-check:$1 = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}\n-// gdb-command:print/d i16x8\n+// gdb-command:print/d vi16x8\n // gdb-check:$2 = {16, 17, 18, 19, 20, 21, 22, 23}\n-// gdb-command:print/d i32x4\n+// gdb-command:print/d vi32x4\n // gdb-check:$3 = {24, 25, 26, 27}\n-// gdb-command:print/d i64x2\n+// gdb-command:print/d vi64x2\n // gdb-check:$4 = {28, 29}\n \n-// gdb-command:print/d u8x16\n+// gdb-command:print/d vu8x16\n // gdb-check:$5 = {30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45}\n-// gdb-command:print/d u16x8\n+// gdb-command:print/d vu16x8\n // gdb-check:$6 = {46, 47, 48, 49, 50, 51, 52, 53}\n-// gdb-command:print/d u32x4\n+// gdb-command:print/d vu32x4\n // gdb-check:$7 = {54, 55, 56, 57}\n-// gdb-command:print/d u64x2\n+// gdb-command:print/d vu64x2\n // gdb-check:$8 = {58, 59}\n \n-// gdb-command:print f32x4\n+// gdb-command:print vf32x4\n // gdb-check:$9 = {60.5, 61.5, 62.5, 63.5}\n-// gdb-command:print f64x2\n+// gdb-command:print vf64x2\n // gdb-check:$10 = {64.5, 65.5}\n \n // gdb-command:continue\n@@ -50,21 +50,21 @@ use std::simd::{i8x16, i16x8,i32x4,i64x2,u8x16,u16x8,u32x4,u64x2,f32x4,f64x2};\n \n fn main() {\n \n-    let i8x16 = i8x16(0i8, 1i8, 2i8, 3i8, 4i8, 5i8, 6i8, 7i8,\n+    let vi8x16 = i8x16(0i8, 1i8, 2i8, 3i8, 4i8, 5i8, 6i8, 7i8,\n                       8i8, 9i8, 10i8, 11i8, 12i8, 13i8, 14i8, 15i8);\n \n-    let i16x8 = i16x8(16i16, 17i16, 18i16, 19i16, 20i16, 21i16, 22i16, 23i16);\n-    let i32x4 = i32x4(24i32, 25i32, 26i32, 27i32);\n-    let i64x2 = i64x2(28i64, 29i64);\n+    let vi16x8 = i16x8(16i16, 17i16, 18i16, 19i16, 20i16, 21i16, 22i16, 23i16);\n+    let vi32x4 = i32x4(24i32, 25i32, 26i32, 27i32);\n+    let vi64x2 = i64x2(28i64, 29i64);\n \n-    let u8x16 = u8x16(30u8, 31u8, 32u8, 33u8, 34u8, 35u8, 36u8, 37u8,\n+    let vu8x16 = u8x16(30u8, 31u8, 32u8, 33u8, 34u8, 35u8, 36u8, 37u8,\n                       38u8, 39u8, 40u8, 41u8, 42u8, 43u8, 44u8, 45u8);\n-    let u16x8 = u16x8(46u16, 47u16, 48u16, 49u16, 50u16, 51u16, 52u16, 53u16);\n-    let u32x4 = u32x4(54u32, 55u32, 56u32, 57u32);\n-    let u64x2 = u64x2(58u64, 59u64);\n+    let vu16x8 = u16x8(46u16, 47u16, 48u16, 49u16, 50u16, 51u16, 52u16, 53u16);\n+    let vu32x4 = u32x4(54u32, 55u32, 56u32, 57u32);\n+    let vu64x2 = u64x2(58u64, 59u64);\n \n-    let f32x4 = f32x4(60.5f32, 61.5f32, 62.5f32, 63.5f32);\n-    let f64x2 = f64x2(64.5f64, 65.5f64);\n+    let vf32x4 = f32x4(60.5f32, 61.5f32, 62.5f32, 63.5f32);\n+    let vf64x2 = f64x2(64.5f64, 65.5f64);\n \n     zzz();\n }"}, {"sha": "d72f9256883c4557e04ebd72372f0bdf32ecea69", "filename": "src/test/debuginfo/var-captured-in-nested-closure.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f96ee10e888bac4435973972f1799db509b3318e/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96ee10e888bac4435973972f1799db509b3318e/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs?ref=f96ee10e888bac4435973972f1799db509b3318e", "patch": "@@ -29,22 +29,22 @@\n // gdb-command:print *owned\n // gdb-check:$5 = 6\n // gdb-command:print closure_local\n-// gdb-check:$7 = 8\n+// gdb-check:$6 = 8\n // gdb-command:continue\n \n // gdb-command:finish\n // gdb-command:print variable\n-// gdb-check:$8 = 1\n+// gdb-check:$7 = 1\n // gdb-command:print constant\n-// gdb-check:$9 = 2\n+// gdb-check:$8 = 2\n // gdb-command:print a_struct\n-// gdb-check:$10 = {a = -3, b = 4.5, c = 5}\n+// gdb-check:$9 = {a = -3, b = 4.5, c = 5}\n // gdb-command:print *struct_ref\n-// gdb-check:$11 = {a = -3, b = 4.5, c = 5}\n+// gdb-check:$10 = {a = -3, b = 4.5, c = 5}\n // gdb-command:print *owned\n-// gdb-check:$12 = 6\n+// gdb-check:$11 = 6\n // gdb-command:print closure_local\n-// gdb-check:$14 = 8\n+// gdb-check:$12 = 8\n // gdb-command:continue\n \n "}, {"sha": "1b1765475f3386d110f793bd652ea66c12579b65", "filename": "src/test/pretty/block-disambig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f96ee10e888bac4435973972f1799db509b3318e/src%2Ftest%2Fpretty%2Fblock-disambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96ee10e888bac4435973972f1799db509b3318e/src%2Ftest%2Fpretty%2Fblock-disambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-disambig.rs?ref=f96ee10e888bac4435973972f1799db509b3318e", "patch": "@@ -60,7 +60,7 @@ fn test9() {\n fn test10() -> int {\n     let regs = vec!(0i);\n     match true { true => { } _ => { } }\n-    *(*regs).get(0)\n+    regs[0]\n }\n \n fn test11() -> Vec<int> { if true { } vec!(1, 2) }"}, {"sha": "be3ee0e078311086d987d0bfd792ab59c2a7f0e1", "filename": "src/test/run-pass/issue-13167.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f96ee10e888bac4435973972f1799db509b3318e/src%2Ftest%2Frun-pass%2Fissue-13167.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96ee10e888bac4435973972f1799db509b3318e/src%2Ftest%2Frun-pass%2Fissue-13167.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13167.rs?ref=f96ee10e888bac4435973972f1799db509b3318e", "patch": "@@ -10,7 +10,7 @@\n \n use std::slice;\n \n-pub struct PhfMapEntries<'a, T> {\n+pub struct PhfMapEntries<'a, T: 'a> {\n     iter: slice::Items<'a, (&'static str, T)>,\n }\n "}]}