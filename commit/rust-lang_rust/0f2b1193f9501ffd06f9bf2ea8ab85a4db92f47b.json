{"sha": "0f2b1193f9501ffd06f9bf2ea8ab85a4db92f47b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmMmIxMTkzZjk1MDFmZmQwNmY5YmYyZWE4YWI4NWE0ZGI5MmY0N2I=", "commit": {"author": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-05-10T22:53:31Z"}, "committer": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-05-13T18:33:32Z"}, "message": "Remove reverse_range_loop lint", "tree": {"sha": "cbe09d36ffff18385a5d05751d85c14a0b4da40a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbe09d36ffff18385a5d05751d85c14a0b4da40a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f2b1193f9501ffd06f9bf2ea8ab85a4db92f47b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f2b1193f9501ffd06f9bf2ea8ab85a4db92f47b", "html_url": "https://github.com/rust-lang/rust/commit/0f2b1193f9501ffd06f9bf2ea8ab85a4db92f47b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f2b1193f9501ffd06f9bf2ea8ab85a4db92f47b/comments", "author": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ffa0bfaa2452eb9c80bf0f1909b039efc8dd0c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ffa0bfaa2452eb9c80bf0f1909b039efc8dd0c3", "html_url": "https://github.com/rust-lang/rust/commit/8ffa0bfaa2452eb9c80bf0f1909b039efc8dd0c3"}], "stats": {"total": 343, "additions": 32, "deletions": 311}, "files": [{"sha": "b25ef0493568d934b4869f4a3c7dcf1e89c33023", "filename": "CHANGELOG.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f2b1193f9501ffd06f9bf2ea8ab85a4db92f47b/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/0f2b1193f9501ffd06f9bf2ea8ab85a4db92f47b/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=0f2b1193f9501ffd06f9bf2ea8ab85a4db92f47b", "patch": "@@ -1545,7 +1545,6 @@ Released 2018-09-13\n [`result_map_unit_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_unit_fn\n [`result_map_unwrap_or_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_unwrap_or_else\n [`result_unwrap_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_unwrap_used\n-[`reverse_range_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#reverse_range_loop\n [`reversed_empty_ranges`]: https://rust-lang.github.io/rust-clippy/master/index.html#reversed_empty_ranges\n [`same_functions_in_if_condition`]: https://rust-lang.github.io/rust-clippy/master/index.html#same_functions_in_if_condition\n [`search_is_some`]: https://rust-lang.github.io/rust-clippy/master/index.html#search_is_some"}, {"sha": "0c4daeb731f9c1a5731a7db5ca5d41a12217236b", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0f2b1193f9501ffd06f9bf2ea8ab85a4db92f47b/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f2b1193f9501ffd06f9bf2ea8ab85a4db92f47b/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=0f2b1193f9501ffd06f9bf2ea8ab85a4db92f47b", "patch": "@@ -624,7 +624,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &loops::NEEDLESS_COLLECT,\n         &loops::NEEDLESS_RANGE_LOOP,\n         &loops::NEVER_LOOP,\n-        &loops::REVERSE_RANGE_LOOP,\n         &loops::WHILE_IMMUTABLE_CONDITION,\n         &loops::WHILE_LET_LOOP,\n         &loops::WHILE_LET_ON_ITERATOR,\n@@ -1284,7 +1283,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&loops::NEEDLESS_COLLECT),\n         LintId::of(&loops::NEEDLESS_RANGE_LOOP),\n         LintId::of(&loops::NEVER_LOOP),\n-        LintId::of(&loops::REVERSE_RANGE_LOOP),\n         LintId::of(&loops::WHILE_IMMUTABLE_CONDITION),\n         LintId::of(&loops::WHILE_LET_LOOP),\n         LintId::of(&loops::WHILE_LET_ON_ITERATOR),\n@@ -1658,7 +1656,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&loops::FOR_LOOP_OVER_RESULT),\n         LintId::of(&loops::ITER_NEXT_LOOP),\n         LintId::of(&loops::NEVER_LOOP),\n-        LintId::of(&loops::REVERSE_RANGE_LOOP),\n         LintId::of(&loops::WHILE_IMMUTABLE_CONDITION),\n         LintId::of(&mem_discriminant::MEM_DISCRIMINANT_NON_ENUM),\n         LintId::of(&mem_replace::MEM_REPLACE_WITH_UNINIT),\n@@ -1788,6 +1785,10 @@ fn register_removed_non_tool_lints(store: &mut rustc_lint::LintStore) {\n         \"unsafe_vector_initialization\",\n         \"the replacement suggested by this lint had substantially different behavior\",\n     );\n+    store.register_removed(\n+        \"reverse_range_loop\",\n+        \"this lint is now included in reversed_empty_ranges\",\n+    );\n }\n \n /// Register renamed lints."}, {"sha": "0bc6b70855ba6b98c2d476c228f3a76dbdaeef7a", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 2, "deletions": 100, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/0f2b1193f9501ffd06f9bf2ea8ab85a4db92f47b/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f2b1193f9501ffd06f9bf2ea8ab85a4db92f47b/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=0f2b1193f9501ffd06f9bf2ea8ab85a4db92f47b", "patch": "@@ -1,4 +1,4 @@\n-use crate::consts::{constant, Constant};\n+use crate::consts::constant;\n use crate::reexport::Name;\n use crate::utils::paths;\n use crate::utils::usage::{is_unused, mutated_variables};\n@@ -8,7 +8,7 @@ use crate::utils::{\n     multispan_sugg, snippet, snippet_opt, snippet_with_applicability, span_lint, span_lint_and_help,\n     span_lint_and_sugg, span_lint_and_then, SpanlessEq,\n };\n-use crate::utils::{is_type_diagnostic_item, qpath_res, same_tys, sext, sugg};\n+use crate::utils::{is_type_diagnostic_item, qpath_res, same_tys, sugg};\n use if_chain::if_chain;\n use rustc_ast::ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -270,30 +270,6 @@ declare_clippy_lint! {\n     \"collecting an iterator when collect is not needed\"\n }\n \n-declare_clippy_lint! {\n-    /// **What it does:** Checks for loops over ranges `x..y` where both `x` and `y`\n-    /// are constant and `x` is greater or equal to `y`, unless the range is\n-    /// reversed or has a negative `.step_by(_)`.\n-    ///\n-    /// **Why is it bad?** Such loops will either be skipped or loop until\n-    /// wrap-around (in debug code, this may `panic!()`). Both options are probably\n-    /// not intended.\n-    ///\n-    /// **Known problems:** The lint cannot catch loops over dynamically defined\n-    /// ranges. Doing this would require simulating all possible inputs and code\n-    /// paths through the program, which would be complex and error-prone.\n-    ///\n-    /// **Example:**\n-    /// ```ignore\n-    /// for x in 5..10 - 5 {\n-    ///     ..\n-    /// } // oops, stray `-`\n-    /// ```\n-    pub REVERSE_RANGE_LOOP,\n-    correctness,\n-    \"iteration over an empty range, such as `10..0` or `5..5`\"\n-}\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks `for` loops over slices with an explicit counter\n     /// and suggests the use of `.enumerate()`.\n@@ -463,7 +439,6 @@ declare_lint_pass!(Loops => [\n     FOR_LOOP_OVER_OPTION,\n     WHILE_LET_LOOP,\n     NEEDLESS_COLLECT,\n-    REVERSE_RANGE_LOOP,\n     EXPLICIT_COUNTER_LOOP,\n     EMPTY_LOOP,\n     WHILE_LET_ON_ITERATOR,\n@@ -761,7 +736,6 @@ fn check_for_loop<'a, 'tcx>(\n     expr: &'tcx Expr<'_>,\n ) {\n     check_for_loop_range(cx, pat, arg, body, expr);\n-    check_for_loop_reverse_range(cx, arg, expr);\n     check_for_loop_arg(cx, pat, arg, expr);\n     check_for_loop_explicit_counter(cx, pat, arg, body, expr);\n     check_for_loop_over_map_kv(cx, pat, arg, body, expr);\n@@ -1248,78 +1222,6 @@ fn is_end_eq_array_len<'tcx>(\n     false\n }\n \n-fn check_for_loop_reverse_range<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, arg: &'tcx Expr<'_>, expr: &'tcx Expr<'_>) {\n-    // if this for loop is iterating over a two-sided range...\n-    if let Some(higher::Range {\n-        start: Some(start),\n-        end: Some(end),\n-        limits,\n-    }) = higher::range(cx, arg)\n-    {\n-        // ...and both sides are compile-time constant integers...\n-        if let Some((start_idx, _)) = constant(cx, cx.tables, start) {\n-            if let Some((end_idx, _)) = constant(cx, cx.tables, end) {\n-                // ...and the start index is greater than the end index,\n-                // this loop will never run. This is often confusing for developers\n-                // who think that this will iterate from the larger value to the\n-                // smaller value.\n-                let ty = cx.tables.expr_ty(start);\n-                let (sup, eq) = match (start_idx, end_idx) {\n-                    (Constant::Int(start_idx), Constant::Int(end_idx)) => (\n-                        match ty.kind {\n-                            ty::Int(ity) => sext(cx.tcx, start_idx, ity) > sext(cx.tcx, end_idx, ity),\n-                            ty::Uint(_) => start_idx > end_idx,\n-                            _ => false,\n-                        },\n-                        start_idx == end_idx,\n-                    ),\n-                    _ => (false, false),\n-                };\n-\n-                if sup {\n-                    let start_snippet = snippet(cx, start.span, \"_\");\n-                    let end_snippet = snippet(cx, end.span, \"_\");\n-                    let dots = if limits == ast::RangeLimits::Closed {\n-                        \"..=\"\n-                    } else {\n-                        \"..\"\n-                    };\n-\n-                    span_lint_and_then(\n-                        cx,\n-                        REVERSE_RANGE_LOOP,\n-                        expr.span,\n-                        \"this range is empty so this for loop will never run\",\n-                        |diag| {\n-                            diag.span_suggestion(\n-                                arg.span,\n-                                \"consider using the following if you are attempting to iterate over this \\\n-                                 range in reverse\",\n-                                format!(\n-                                    \"({end}{dots}{start}).rev()\",\n-                                    end = end_snippet,\n-                                    dots = dots,\n-                                    start = start_snippet\n-                                ),\n-                                Applicability::MaybeIncorrect,\n-                            );\n-                        },\n-                    );\n-                } else if eq && limits != ast::RangeLimits::Closed {\n-                    // if they are equal, it's also problematic - this loop\n-                    // will never run.\n-                    span_lint(\n-                        cx,\n-                        REVERSE_RANGE_LOOP,\n-                        expr.span,\n-                        \"this range is empty so this for loop will never run\",\n-                    );\n-                }\n-            }\n-        }\n-    }\n-}\n-\n fn lint_iter_method(cx: &LateContext<'_, '_>, args: &[Expr<'_>], arg: &Expr<'_>, method_name: &str) {\n     let mut applicability = Applicability::MachineApplicable;\n     let object = snippet_with_applicability(cx, args[0].span, \"_\", &mut applicability);"}, {"sha": "e1a6d4bdd31f6674dd79363cac6a6d30bfca773d", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f2b1193f9501ffd06f9bf2ea8ab85a4db92f47b/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f2b1193f9501ffd06f9bf2ea8ab85a4db92f47b/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=0f2b1193f9501ffd06f9bf2ea8ab85a4db92f47b", "patch": "@@ -1922,11 +1922,11 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         module: \"methods\",\n     },\n     Lint {\n-        name: \"reverse_range_loop\",\n+        name: \"reversed_empty_ranges\",\n         group: \"correctness\",\n-        desc: \"iteration over an empty range, such as `10..0` or `5..5`\",\n+        desc: \"reversing the limits of range expressions, resulting in empty ranges\",\n         deprecation: None,\n-        module: \"loops\",\n+        module: \"ranges\",\n     },\n     Lint {\n         name: \"same_functions_in_if_condition\","}, {"sha": "249a88a0b3982cdccb57fa64418d5831d54c9c33", "filename": "tests/ui/for_loop_fixable.fixed", "status": "modified", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/0f2b1193f9501ffd06f9bf2ea8ab85a4db92f47b/tests%2Fui%2Ffor_loop_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0f2b1193f9501ffd06f9bf2ea8ab85a4db92f47b/tests%2Fui%2Ffor_loop_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_fixable.fixed?ref=0f2b1193f9501ffd06f9bf2ea8ab85a4db92f47b", "patch": "@@ -21,7 +21,6 @@ impl Unrelated {\n     clippy::explicit_iter_loop,\n     clippy::explicit_into_iter_loop,\n     clippy::iter_next_loop,\n-    clippy::reverse_range_loop,\n     clippy::for_kv_map\n )]\n #[allow(\n@@ -32,61 +31,8 @@ impl Unrelated {\n )]\n #[allow(clippy::many_single_char_names, unused_variables)]\n fn main() {\n-    const MAX_LEN: usize = 42;\n     let mut vec = vec![1, 2, 3, 4];\n \n-    for i in (0..10).rev() {\n-        println!(\"{}\", i);\n-    }\n-\n-    for i in (0..=10).rev() {\n-        println!(\"{}\", i);\n-    }\n-\n-    for i in (0..MAX_LEN).rev() {\n-        println!(\"{}\", i);\n-    }\n-\n-    for i in 5..=5 {\n-        // not an error, this is the range with only one element \u201c5\u201d\n-        println!(\"{}\", i);\n-    }\n-\n-    for i in 0..10 {\n-        // not an error, the start index is less than the end index\n-        println!(\"{}\", i);\n-    }\n-\n-    for i in -10..0 {\n-        // not an error\n-        println!(\"{}\", i);\n-    }\n-\n-    for i in (10..0).map(|x| x * 2) {\n-        // not an error, it can't be known what arbitrary methods do to a range\n-        println!(\"{}\", i);\n-    }\n-\n-    // testing that the empty range lint folds constants\n-    for i in (5 + 4..10).rev() {\n-        println!(\"{}\", i);\n-    }\n-\n-    for i in ((3 - 1)..(5 + 2)).rev() {\n-        println!(\"{}\", i);\n-    }\n-\n-    for i in (2 * 2)..(2 * 3) {\n-        // no error, 4..6 is fine\n-        println!(\"{}\", i);\n-    }\n-\n-    let x = 42;\n-    for i in x..10 {\n-        // no error, not constant-foldable\n-        println!(\"{}\", i);\n-    }\n-\n     // See #601\n     for i in 0..10 {\n         // no error, id_col does not exist outside the loop"}, {"sha": "306d85a6351e107f6a7e6bbb0b8c70d9843a4a93", "filename": "tests/ui/for_loop_fixable.rs", "status": "modified", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/0f2b1193f9501ffd06f9bf2ea8ab85a4db92f47b/tests%2Fui%2Ffor_loop_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f2b1193f9501ffd06f9bf2ea8ab85a4db92f47b/tests%2Fui%2Ffor_loop_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_fixable.rs?ref=0f2b1193f9501ffd06f9bf2ea8ab85a4db92f47b", "patch": "@@ -21,7 +21,6 @@ impl Unrelated {\n     clippy::explicit_iter_loop,\n     clippy::explicit_into_iter_loop,\n     clippy::iter_next_loop,\n-    clippy::reverse_range_loop,\n     clippy::for_kv_map\n )]\n #[allow(\n@@ -32,61 +31,8 @@ impl Unrelated {\n )]\n #[allow(clippy::many_single_char_names, unused_variables)]\n fn main() {\n-    const MAX_LEN: usize = 42;\n     let mut vec = vec![1, 2, 3, 4];\n \n-    for i in 10..0 {\n-        println!(\"{}\", i);\n-    }\n-\n-    for i in 10..=0 {\n-        println!(\"{}\", i);\n-    }\n-\n-    for i in MAX_LEN..0 {\n-        println!(\"{}\", i);\n-    }\n-\n-    for i in 5..=5 {\n-        // not an error, this is the range with only one element \u201c5\u201d\n-        println!(\"{}\", i);\n-    }\n-\n-    for i in 0..10 {\n-        // not an error, the start index is less than the end index\n-        println!(\"{}\", i);\n-    }\n-\n-    for i in -10..0 {\n-        // not an error\n-        println!(\"{}\", i);\n-    }\n-\n-    for i in (10..0).map(|x| x * 2) {\n-        // not an error, it can't be known what arbitrary methods do to a range\n-        println!(\"{}\", i);\n-    }\n-\n-    // testing that the empty range lint folds constants\n-    for i in 10..5 + 4 {\n-        println!(\"{}\", i);\n-    }\n-\n-    for i in (5 + 2)..(3 - 1) {\n-        println!(\"{}\", i);\n-    }\n-\n-    for i in (2 * 2)..(2 * 3) {\n-        // no error, 4..6 is fine\n-        println!(\"{}\", i);\n-    }\n-\n-    let x = 42;\n-    for i in x..10 {\n-        // no error, not constant-foldable\n-        println!(\"{}\", i);\n-    }\n-\n     // See #601\n     for i in 0..10 {\n         // no error, id_col does not exist outside the loop"}, {"sha": "ddfe66d675f91efbc8f070116c570ef9eda5a496", "filename": "tests/ui/for_loop_fixable.stderr", "status": "modified", "additions": 16, "deletions": 72, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/0f2b1193f9501ffd06f9bf2ea8ab85a4db92f47b/tests%2Fui%2Ffor_loop_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f2b1193f9501ffd06f9bf2ea8ab85a4db92f47b/tests%2Fui%2Ffor_loop_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_fixable.stderr?ref=0f2b1193f9501ffd06f9bf2ea8ab85a4db92f47b", "patch": "@@ -1,152 +1,96 @@\n-error: this range is empty so this for loop will never run\n-  --> $DIR/for_loop_fixable.rs:38:14\n-   |\n-LL |     for i in 10..0 {\n-   |              ^^^^^\n-   |\n-   = note: `-D clippy::reverse-range-loop` implied by `-D warnings`\n-help: consider using the following if you are attempting to iterate over this range in reverse\n-   |\n-LL |     for i in (0..10).rev() {\n-   |              ^^^^^^^^^^^^^\n-\n-error: this range is empty so this for loop will never run\n-  --> $DIR/for_loop_fixable.rs:42:14\n-   |\n-LL |     for i in 10..=0 {\n-   |              ^^^^^^\n-   |\n-help: consider using the following if you are attempting to iterate over this range in reverse\n-   |\n-LL |     for i in (0..=10).rev() {\n-   |              ^^^^^^^^^^^^^^\n-\n-error: this range is empty so this for loop will never run\n-  --> $DIR/for_loop_fixable.rs:46:14\n-   |\n-LL |     for i in MAX_LEN..0 {\n-   |              ^^^^^^^^^^\n-   |\n-help: consider using the following if you are attempting to iterate over this range in reverse\n-   |\n-LL |     for i in (0..MAX_LEN).rev() {\n-   |              ^^^^^^^^^^^^^^^^^^\n-\n-error: this range is empty so this for loop will never run\n-  --> $DIR/for_loop_fixable.rs:71:14\n-   |\n-LL |     for i in 10..5 + 4 {\n-   |              ^^^^^^^^^\n-   |\n-help: consider using the following if you are attempting to iterate over this range in reverse\n-   |\n-LL |     for i in (5 + 4..10).rev() {\n-   |              ^^^^^^^^^^^^^^^^^\n-\n-error: this range is empty so this for loop will never run\n-  --> $DIR/for_loop_fixable.rs:75:14\n-   |\n-LL |     for i in (5 + 2)..(3 - 1) {\n-   |              ^^^^^^^^^^^^^^^^\n-   |\n-help: consider using the following if you are attempting to iterate over this range in reverse\n-   |\n-LL |     for i in ((3 - 1)..(5 + 2)).rev() {\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:97:15\n+  --> $DIR/for_loop_fixable.rs:43:15\n    |\n LL |     for _v in vec.iter() {}\n    |               ^^^^^^^^^^ help: to write this more concisely, try: `&vec`\n    |\n    = note: `-D clippy::explicit-iter-loop` implied by `-D warnings`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:99:15\n+  --> $DIR/for_loop_fixable.rs:45:15\n    |\n LL |     for _v in vec.iter_mut() {}\n    |               ^^^^^^^^^^^^^^ help: to write this more concisely, try: `&mut vec`\n \n error: it is more concise to loop over containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:102:15\n+  --> $DIR/for_loop_fixable.rs:48:15\n    |\n LL |     for _v in out_vec.into_iter() {}\n    |               ^^^^^^^^^^^^^^^^^^^ help: to write this more concisely, try: `out_vec`\n    |\n    = note: `-D clippy::explicit-into-iter-loop` implied by `-D warnings`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:107:15\n+  --> $DIR/for_loop_fixable.rs:53:15\n    |\n LL |     for _v in [1, 2, 3].iter() {}\n    |               ^^^^^^^^^^^^^^^^ help: to write this more concisely, try: `&[1, 2, 3]`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:111:15\n+  --> $DIR/for_loop_fixable.rs:57:15\n    |\n LL |     for _v in [0; 32].iter() {}\n    |               ^^^^^^^^^^^^^^ help: to write this more concisely, try: `&[0; 32]`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:116:15\n+  --> $DIR/for_loop_fixable.rs:62:15\n    |\n LL |     for _v in ll.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&ll`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:119:15\n+  --> $DIR/for_loop_fixable.rs:65:15\n    |\n LL |     for _v in vd.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&vd`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:122:15\n+  --> $DIR/for_loop_fixable.rs:68:15\n    |\n LL |     for _v in bh.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&bh`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:125:15\n+  --> $DIR/for_loop_fixable.rs:71:15\n    |\n LL |     for _v in hm.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&hm`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:128:15\n+  --> $DIR/for_loop_fixable.rs:74:15\n    |\n LL |     for _v in bt.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&bt`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:131:15\n+  --> $DIR/for_loop_fixable.rs:77:15\n    |\n LL |     for _v in hs.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&hs`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:134:15\n+  --> $DIR/for_loop_fixable.rs:80:15\n    |\n LL |     for _v in bs.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&bs`\n \n error: it is more concise to loop over containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:309:18\n+  --> $DIR/for_loop_fixable.rs:255:18\n    |\n LL |         for i in iterator.into_iter() {\n    |                  ^^^^^^^^^^^^^^^^^^^^ help: to write this more concisely, try: `iterator`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:329:18\n+  --> $DIR/for_loop_fixable.rs:275:18\n    |\n LL |         for _ in t.into_iter() {}\n    |                  ^^^^^^^^^^^^^ help: to write this more concisely, try: `&t`\n \n error: it is more concise to loop over containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:331:18\n+  --> $DIR/for_loop_fixable.rs:277:18\n    |\n LL |         for _ in r.into_iter() {}\n    |                  ^^^^^^^^^^^^^ help: to write this more concisely, try: `r`\n \n-error: aborting due to 20 previous errors\n+error: aborting due to 15 previous errors\n "}, {"sha": "e73536052f0f5bf597dd9154b4209984d87c54a7", "filename": "tests/ui/for_loop_unfixable.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0f2b1193f9501ffd06f9bf2ea8ab85a4db92f47b/tests%2Fui%2Ffor_loop_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f2b1193f9501ffd06f9bf2ea8ab85a4db92f47b/tests%2Fui%2Ffor_loop_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_unfixable.rs?ref=0f2b1193f9501ffd06f9bf2ea8ab85a4db92f47b", "patch": "@@ -5,7 +5,6 @@\n     clippy::explicit_iter_loop,\n     clippy::explicit_into_iter_loop,\n     clippy::iter_next_loop,\n-    clippy::reverse_range_loop,\n     clippy::for_kv_map\n )]\n #[allow(\n@@ -16,25 +15,8 @@\n     unused,\n     dead_code\n )]\n-#[allow(clippy::many_single_char_names, unused_variables)]\n fn main() {\n-    for i in 5..5 {\n-        println!(\"{}\", i);\n-    }\n-\n     let vec = vec![1, 2, 3, 4];\n \n     for _v in vec.iter().next() {}\n-\n-    for i in (5 + 2)..(8 - 1) {\n-        println!(\"{}\", i);\n-    }\n-\n-    const ZERO: usize = 0;\n-\n-    for i in ZERO..vec.len() {\n-        if f(&vec[i], &vec[i]) {\n-            panic!(\"at the disco\");\n-        }\n-    }\n }"}, {"sha": "1c9287b6acbb328d5b2335a797acb4a1c903a478", "filename": "tests/ui/for_loop_unfixable.stderr", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0f2b1193f9501ffd06f9bf2ea8ab85a4db92f47b/tests%2Fui%2Ffor_loop_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f2b1193f9501ffd06f9bf2ea8ab85a4db92f47b/tests%2Fui%2Ffor_loop_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_unfixable.stderr?ref=0f2b1193f9501ffd06f9bf2ea8ab85a4db92f47b", "patch": "@@ -1,9 +1,10 @@\n-error[E0425]: cannot find function `f` in this scope\n-  --> $DIR/for_loop_unfixable.rs:36:12\n+error: you are iterating over `Iterator::next()` which is an Option; this will compile but is probably not what you want\n+  --> $DIR/for_loop_unfixable.rs:21:15\n    |\n-LL |         if f(&vec[i], &vec[i]) {\n-   |            ^ help: a local variable with a similar name exists: `i`\n+LL |     for _v in vec.iter().next() {}\n+   |               ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::iter-next-loop` implied by `-D warnings`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0425`."}, {"sha": "0083f94798fe4b2c650998d439f05cda4e7b0d0c", "filename": "tests/ui/manual_memcpy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f2b1193f9501ffd06f9bf2ea8ab85a4db92f47b/tests%2Fui%2Fmanual_memcpy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f2b1193f9501ffd06f9bf2ea8ab85a4db92f47b/tests%2Fui%2Fmanual_memcpy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_memcpy.rs?ref=0f2b1193f9501ffd06f9bf2ea8ab85a4db92f47b", "patch": "@@ -104,7 +104,7 @@ pub fn manual_copy(src: &[i32], dst: &mut [i32], dst2: &mut [i32]) {\n         dst[i - 0] = src[i];\n     }\n \n-    #[allow(clippy::reverse_range_loop)]\n+    #[allow(clippy::reversed_empty_ranges)]\n     for i in 0..0 {\n         dst[i] = src[i];\n     }"}]}