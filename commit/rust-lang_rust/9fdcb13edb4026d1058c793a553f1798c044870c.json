{"sha": "9fdcb13edb4026d1058c793a553f1798c044870c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmZGNiMTNlZGI0MDI2ZDEwNThjNzkzYTU1M2YxNzk4YzA0NDg3MGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-31T18:01:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-31T18:01:40Z"}, "message": "Auto merge of #4455 - flip1995:unit_arg_appl, r=phansch\n\nRework suggestion generation of `unit_arg` lint\n\nFound this bug while running `cargo fix --clippy` on quite a big codebase:\n\nThis would replace something like:\n```rust\nSome(fn_that_actually_does_something(&a, b))\n```\nwith\n```rust\nSome(())\n```\nwhich obviously suppresses side effects.\n\nSince pretty much every expression could have side effects, I think making this suggestion `MaybeIncorrect` is the best thing to do here.\n\nA correct suggestion would be:\n\n```rust\nfn_that_actually_does_something(&a, b);\nSome(())\n```\n\nSomehow the suggestion is not correctly applied to the arguments, when more than one argument is a unit value. I have to look into this a little more, though.\n\nchangelog: Fixes suggestion of `unit_arg` lint, so that it suggests semantic equivalent code\n\nFixes #4741", "tree": {"sha": "63b47bf0efd2943bba7bf6d0f4e31386015b7db3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63b47bf0efd2943bba7bf6d0f4e31386015b7db3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fdcb13edb4026d1058c793a553f1798c044870c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fdcb13edb4026d1058c793a553f1798c044870c", "html_url": "https://github.com/rust-lang/rust/commit/9fdcb13edb4026d1058c793a553f1798c044870c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fdcb13edb4026d1058c793a553f1798c044870c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcc3ed2cdc442b4d3b8f1cb2be5ef7686ff89b3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcc3ed2cdc442b4d3b8f1cb2be5ef7686ff89b3c", "html_url": "https://github.com/rust-lang/rust/commit/fcc3ed2cdc442b4d3b8f1cb2be5ef7686ff89b3c"}, {"sha": "77dd0ea62aa6a2af70da4c5e05de064eee182a6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/77dd0ea62aa6a2af70da4c5e05de064eee182a6c", "html_url": "https://github.com/rust-lang/rust/commit/77dd0ea62aa6a2af70da4c5e05de064eee182a6c"}], "stats": {"total": 479, "additions": 353, "deletions": 126}, "files": [{"sha": "5ca30d598eb15da4e4e98edbd22649095e3afb3d", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 113, "deletions": 20, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/9fdcb13edb4026d1058c793a553f1798c044870c/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fdcb13edb4026d1058c793a553f1798c044870c/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=9fdcb13edb4026d1058c793a553f1798c044870c", "patch": "@@ -10,7 +10,7 @@ use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::intravisit::{walk_body, walk_expr, walk_ty, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::{\n-    BinOpKind, Body, Expr, ExprKind, FnDecl, FnRetTy, FnSig, GenericArg, GenericParamKind, HirId, ImplItem,\n+    BinOpKind, Block, Body, Expr, ExprKind, FnDecl, FnRetTy, FnSig, GenericArg, GenericParamKind, HirId, ImplItem,\n     ImplItemKind, Item, ItemKind, Lifetime, Local, MatchSource, MutTy, Mutability, QPath, Stmt, StmtKind, TraitFn,\n     TraitItem, TraitItemKind, TyKind, UnOp,\n };\n@@ -29,10 +29,10 @@ use rustc_typeck::hir_ty_to_ty;\n use crate::consts::{constant, Constant};\n use crate::utils::paths;\n use crate::utils::{\n-    clip, comparisons, differing_macro_contexts, higher, in_constant, int_bits, is_type_diagnostic_item,\n+    clip, comparisons, differing_macro_contexts, higher, in_constant, indent_of, int_bits, is_type_diagnostic_item,\n     last_path_segment, match_def_path, match_path, method_chain_args, multispan_sugg, numeric_literal::NumericLiteral,\n-    qpath_res, same_tys, sext, snippet, snippet_opt, snippet_with_applicability, snippet_with_macro_callsite,\n-    span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then, unsext,\n+    qpath_res, same_tys, sext, snippet, snippet_block_with_applicability, snippet_opt, snippet_with_applicability,\n+    snippet_with_macro_callsite, span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then, unsext,\n };\n \n declare_clippy_lint! {\n@@ -779,31 +779,124 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnitArg {\n \n         match expr.kind {\n             ExprKind::Call(_, args) | ExprKind::MethodCall(_, _, args) => {\n-                for arg in args {\n-                    if is_unit(cx.tables.expr_ty(arg)) && !is_unit_literal(arg) {\n-                        if let ExprKind::Match(.., match_source) = &arg.kind {\n-                            if *match_source == MatchSource::TryDesugar {\n-                                continue;\n+                let args_to_recover = args\n+                    .iter()\n+                    .filter(|arg| {\n+                        if is_unit(cx.tables.expr_ty(arg)) && !is_unit_literal(arg) {\n+                            if let ExprKind::Match(.., MatchSource::TryDesugar) = &arg.kind {\n+                                false\n+                            } else {\n+                                true\n                             }\n+                        } else {\n+                            false\n                         }\n-\n-                        span_lint_and_sugg(\n-                            cx,\n-                            UNIT_ARG,\n-                            arg.span,\n-                            \"passing a unit value to a function\",\n-                            \"if you intended to pass a unit value, use a unit literal instead\",\n-                            \"()\".to_string(),\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                    }\n+                    })\n+                    .collect::<Vec<_>>();\n+                if !args_to_recover.is_empty() {\n+                    lint_unit_args(cx, expr, &args_to_recover);\n                 }\n             },\n             _ => (),\n         }\n     }\n }\n \n+fn lint_unit_args(cx: &LateContext<'_, '_>, expr: &Expr<'_>, args_to_recover: &[&Expr<'_>]) {\n+    let mut applicability = Applicability::MachineApplicable;\n+    let (singular, plural) = if args_to_recover.len() > 1 {\n+        (\"\", \"s\")\n+    } else {\n+        (\"a \", \"\")\n+    };\n+    span_lint_and_then(\n+        cx,\n+        UNIT_ARG,\n+        expr.span,\n+        &format!(\"passing {}unit value{} to a function\", singular, plural),\n+        |db| {\n+            let mut or = \"\";\n+            args_to_recover\n+                .iter()\n+                .filter_map(|arg| {\n+                    if_chain! {\n+                        if let ExprKind::Block(block, _) = arg.kind;\n+                        if block.expr.is_none();\n+                        if let Some(last_stmt) = block.stmts.iter().last();\n+                        if let StmtKind::Semi(last_expr) = last_stmt.kind;\n+                        if let Some(snip) = snippet_opt(cx, last_expr.span);\n+                        then {\n+                            Some((\n+                                last_stmt.span,\n+                                snip,\n+                            ))\n+                        }\n+                        else {\n+                            None\n+                        }\n+                    }\n+                })\n+                .for_each(|(span, sugg)| {\n+                    db.span_suggestion(\n+                        span,\n+                        \"remove the semicolon from the last statement in the block\",\n+                        sugg,\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                    or = \"or \";\n+                });\n+            let sugg = args_to_recover\n+                .iter()\n+                .filter(|arg| !is_empty_block(arg))\n+                .enumerate()\n+                .map(|(i, arg)| {\n+                    let indent = if i == 0 {\n+                        0\n+                    } else {\n+                        indent_of(cx, expr.span).unwrap_or(0)\n+                    };\n+                    format!(\n+                        \"{}{};\",\n+                        \" \".repeat(indent),\n+                        snippet_block_with_applicability(cx, arg.span, \"..\", Some(expr.span), &mut applicability)\n+                    )\n+                })\n+                .collect::<Vec<String>>();\n+            let mut and = \"\";\n+            if !sugg.is_empty() {\n+                let plural = if sugg.len() > 1 { \"s\" } else { \"\" };\n+                db.span_suggestion(\n+                    expr.span.with_hi(expr.span.lo()),\n+                    &format!(\"{}move the expression{} in front of the call...\", or, plural),\n+                    format!(\"{}\\n\", sugg.join(\"\\n\")),\n+                    applicability,\n+                );\n+                and = \"...and \"\n+            }\n+            db.multipart_suggestion(\n+                &format!(\"{}use {}unit literal{} instead\", and, singular, plural),\n+                args_to_recover\n+                    .iter()\n+                    .map(|arg| (arg.span, \"()\".to_string()))\n+                    .collect::<Vec<_>>(),\n+                applicability,\n+            );\n+        },\n+    );\n+}\n+\n+fn is_empty_block(expr: &Expr<'_>) -> bool {\n+    matches!(\n+        expr.kind,\n+        ExprKind::Block(\n+            Block {\n+                stmts: &[], expr: None, ..\n+            },\n+            _,\n+        )\n+    )\n+}\n+\n fn is_questionmark_desugar_marked_call(expr: &Expr<'_>) -> bool {\n     use rustc_span::hygiene::DesugaringKind;\n     if let ExprKind::Call(ref callee, _) = expr.kind {"}, {"sha": "a739cf7ad814eb8f399734e0acdc8db418244be7", "filename": "tests/ui/unit_arg.fixed", "status": "removed", "additions": 0, "deletions": 64, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/fcc3ed2cdc442b4d3b8f1cb2be5ef7686ff89b3c/tests%2Fui%2Funit_arg.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fcc3ed2cdc442b4d3b8f1cb2be5ef7686ff89b3c/tests%2Fui%2Funit_arg.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_arg.fixed?ref=fcc3ed2cdc442b4d3b8f1cb2be5ef7686ff89b3c", "patch": "@@ -1,64 +0,0 @@\n-// run-rustfix\n-#![warn(clippy::unit_arg)]\n-#![allow(unused_braces, clippy::no_effect, unused_must_use)]\n-\n-use std::fmt::Debug;\n-\n-fn foo<T: Debug>(t: T) {\n-    println!(\"{:?}\", t);\n-}\n-\n-fn foo3<T1: Debug, T2: Debug, T3: Debug>(t1: T1, t2: T2, t3: T3) {\n-    println!(\"{:?}, {:?}, {:?}\", t1, t2, t3);\n-}\n-\n-struct Bar;\n-\n-impl Bar {\n-    fn bar<T: Debug>(&self, t: T) {\n-        println!(\"{:?}\", t);\n-    }\n-}\n-\n-fn bad() {\n-    foo(());\n-    foo(());\n-    foo(());\n-    foo(());\n-    foo3((), 2, 2);\n-    let b = Bar;\n-    b.bar(());\n-}\n-\n-fn ok() {\n-    foo(());\n-    foo(1);\n-    foo({ 1 });\n-    foo3(\"a\", 3, vec![3]);\n-    let b = Bar;\n-    b.bar({ 1 });\n-    b.bar(());\n-    question_mark();\n-}\n-\n-fn question_mark() -> Result<(), ()> {\n-    Ok(Ok(())?)?;\n-    Ok(Ok(()))??;\n-    Ok(())\n-}\n-\n-#[allow(dead_code)]\n-mod issue_2945 {\n-    fn unit_fn() -> Result<(), i32> {\n-        Ok(())\n-    }\n-\n-    fn fallible() -> Result<(), i32> {\n-        Ok(unit_fn()?)\n-    }\n-}\n-\n-fn main() {\n-    bad();\n-    ok();\n-}"}, {"sha": "2992abae775b8ffb438f5ae4e645899698a1302e", "filename": "tests/ui/unit_arg.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9fdcb13edb4026d1058c793a553f1798c044870c/tests%2Fui%2Funit_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fdcb13edb4026d1058c793a553f1798c044870c/tests%2Fui%2Funit_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_arg.rs?ref=9fdcb13edb4026d1058c793a553f1798c044870c", "patch": "@@ -1,6 +1,5 @@\n-// run-rustfix\n #![warn(clippy::unit_arg)]\n-#![allow(unused_braces, clippy::no_effect, unused_must_use)]\n+#![allow(clippy::no_effect, unused_must_use, unused_variables)]\n \n use std::fmt::Debug;\n \n@@ -21,7 +20,6 @@ impl Bar {\n }\n \n fn bad() {\n-    foo({});\n     foo({\n         1;\n     });\n@@ -30,11 +28,25 @@ fn bad() {\n         foo(1);\n         foo(2);\n     });\n-    foo3({}, 2, 2);\n     let b = Bar;\n     b.bar({\n         1;\n     });\n+    taking_multiple_units(foo(0), foo(1));\n+    taking_multiple_units(foo(0), {\n+        foo(1);\n+        foo(2);\n+    });\n+    taking_multiple_units(\n+        {\n+            foo(0);\n+            foo(1);\n+        },\n+        {\n+            foo(2);\n+            foo(3);\n+        },\n+    );\n }\n \n fn ok() {\n@@ -65,6 +77,13 @@ mod issue_2945 {\n     }\n }\n \n+#[allow(dead_code)]\n+fn returning_expr() -> Option<()> {\n+    Some(foo(1))\n+}\n+\n+fn taking_multiple_units(a: (), b: ()) {}\n+\n fn main() {\n     bad();\n     ok();"}, {"sha": "56f6a855dfa554d725aa29f6cb3ba12cf5d58175", "filename": "tests/ui/unit_arg.stderr", "status": "modified", "additions": 140, "deletions": 38, "changes": 178, "blob_url": "https://github.com/rust-lang/rust/blob/9fdcb13edb4026d1058c793a553f1798c044870c/tests%2Fui%2Funit_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fdcb13edb4026d1058c793a553f1798c044870c/tests%2Fui%2Funit_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_arg.stderr?ref=9fdcb13edb4026d1058c793a553f1798c044870c", "patch": "@@ -1,79 +1,181 @@\n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:24:9\n+  --> $DIR/unit_arg.rs:23:5\n    |\n-LL |     foo({});\n-   |         ^^\n+LL | /     foo({\n+LL | |         1;\n+LL | |     });\n+   | |______^\n    |\n    = note: `-D clippy::unit-arg` implied by `-D warnings`\n-help: if you intended to pass a unit value, use a unit literal instead\n+help: remove the semicolon from the last statement in the block\n    |\n-LL |     foo(());\n-   |         ^^\n-\n-error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:25:9\n+LL |         1\n    |\n-LL |       foo({\n-   |  _________^\n-LL | |         1;\n-LL | |     });\n-   | |_____^\n+help: or move the expression in front of the call...\n    |\n-help: if you intended to pass a unit value, use a unit literal instead\n+LL |     {\n+LL |         1;\n+LL |     };\n+   |\n+help: ...and use a unit literal instead\n    |\n LL |     foo(());\n    |         ^^\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:28:9\n+  --> $DIR/unit_arg.rs:26:5\n    |\n LL |     foo(foo(1));\n-   |         ^^^^^^\n+   |     ^^^^^^^^^^^\n+   |\n+help: move the expression in front of the call...\n    |\n-help: if you intended to pass a unit value, use a unit literal instead\n+LL |     foo(1);\n+   |\n+help: ...and use a unit literal instead\n    |\n LL |     foo(());\n    |         ^^\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:29:9\n+  --> $DIR/unit_arg.rs:27:5\n    |\n-LL |       foo({\n-   |  _________^\n+LL | /     foo({\n LL | |         foo(1);\n LL | |         foo(2);\n LL | |     });\n-   | |_____^\n+   | |______^\n+   |\n+help: remove the semicolon from the last statement in the block\n+   |\n+LL |         foo(2)\n    |\n-help: if you intended to pass a unit value, use a unit literal instead\n+help: or move the expression in front of the call...\n+   |\n+LL |     {\n+LL |         foo(1);\n+LL |         foo(2);\n+LL |     };\n+   |\n+help: ...and use a unit literal instead\n    |\n LL |     foo(());\n    |         ^^\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:33:10\n+  --> $DIR/unit_arg.rs:32:5\n    |\n-LL |     foo3({}, 2, 2);\n-   |          ^^\n+LL | /     b.bar({\n+LL | |         1;\n+LL | |     });\n+   | |______^\n    |\n-help: if you intended to pass a unit value, use a unit literal instead\n+help: remove the semicolon from the last statement in the block\n    |\n-LL |     foo3((), 2, 2);\n-   |          ^^\n+LL |         1\n+   |\n+help: or move the expression in front of the call...\n+   |\n+LL |     {\n+LL |         1;\n+LL |     };\n+   |\n+help: ...and use a unit literal instead\n+   |\n+LL |     b.bar(());\n+   |           ^^\n \n-error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:35:11\n+error: passing unit values to a function\n+  --> $DIR/unit_arg.rs:35:5\n    |\n-LL |       b.bar({\n-   |  ___________^\n-LL | |         1;\n+LL |     taking_multiple_units(foo(0), foo(1));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: move the expressions in front of the call...\n+   |\n+LL |     foo(0);\n+LL |     foo(1);\n+   |\n+help: ...and use unit literals instead\n+   |\n+LL |     taking_multiple_units((), ());\n+   |                           ^^  ^^\n+\n+error: passing unit values to a function\n+  --> $DIR/unit_arg.rs:36:5\n+   |\n+LL | /     taking_multiple_units(foo(0), {\n+LL | |         foo(1);\n+LL | |         foo(2);\n LL | |     });\n+   | |______^\n+   |\n+help: remove the semicolon from the last statement in the block\n+   |\n+LL |         foo(2)\n+   |\n+help: or move the expressions in front of the call...\n+   |\n+LL |     foo(0);\n+LL |     {\n+LL |         foo(1);\n+LL |         foo(2);\n+LL |     };\n+   |\n+help: ...and use unit literals instead\n+   |\n+LL |     taking_multiple_units((), ());\n+   |                           ^^  ^^\n+\n+error: passing unit values to a function\n+  --> $DIR/unit_arg.rs:40:5\n+   |\n+LL | /     taking_multiple_units(\n+LL | |         {\n+LL | |             foo(0);\n+LL | |             foo(1);\n+...  |\n+LL | |         },\n+LL | |     );\n    | |_____^\n    |\n-help: if you intended to pass a unit value, use a unit literal instead\n+help: remove the semicolon from the last statement in the block\n    |\n-LL |     b.bar(());\n-   |           ^^\n+LL |             foo(1)\n+   |\n+help: remove the semicolon from the last statement in the block\n+   |\n+LL |             foo(3)\n+   |\n+help: or move the expressions in front of the call...\n+   |\n+LL |     {\n+LL |         foo(0);\n+LL |         foo(1);\n+LL |     };\n+LL |     {\n+LL |         foo(2);\n+ ...\n+help: ...and use unit literals instead\n+   |\n+LL |         (),\n+LL |         (),\n+   |\n+\n+error: passing a unit value to a function\n+  --> $DIR/unit_arg.rs:82:5\n+   |\n+LL |     Some(foo(1))\n+   |     ^^^^^^^^^^^^\n+   |\n+help: move the expression in front of the call...\n+   |\n+LL |     foo(1);\n+   |\n+help: ...and use a unit literal instead\n+   |\n+LL |     Some(())\n+   |          ^^\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 8 previous errors\n "}, {"sha": "18a31eb3deee26f400f9266c8bb6741017826d15", "filename": "tests/ui/unit_arg_empty_blocks.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9fdcb13edb4026d1058c793a553f1798c044870c/tests%2Fui%2Funit_arg_empty_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fdcb13edb4026d1058c793a553f1798c044870c/tests%2Fui%2Funit_arg_empty_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_arg_empty_blocks.rs?ref=9fdcb13edb4026d1058c793a553f1798c044870c", "patch": "@@ -0,0 +1,26 @@\n+#![warn(clippy::unit_arg)]\n+#![allow(clippy::no_effect, unused_must_use, unused_variables)]\n+\n+use std::fmt::Debug;\n+\n+fn foo<T: Debug>(t: T) {\n+    println!(\"{:?}\", t);\n+}\n+\n+fn foo3<T1: Debug, T2: Debug, T3: Debug>(t1: T1, t2: T2, t3: T3) {\n+    println!(\"{:?}, {:?}, {:?}\", t1, t2, t3);\n+}\n+\n+fn bad() {\n+    foo({});\n+    foo3({}, 2, 2);\n+    taking_two_units({}, foo(0));\n+    taking_three_units({}, foo(0), foo(1));\n+}\n+\n+fn taking_two_units(a: (), b: ()) {}\n+fn taking_three_units(a: (), b: (), c: ()) {}\n+\n+fn main() {\n+    bad();\n+}"}, {"sha": "bb58483584b3e9bf419df2506de17a6d52c3b0cd", "filename": "tests/ui/unit_arg_empty_blocks.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/9fdcb13edb4026d1058c793a553f1798c044870c/tests%2Fui%2Funit_arg_empty_blocks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fdcb13edb4026d1058c793a553f1798c044870c/tests%2Fui%2Funit_arg_empty_blocks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_arg_empty_blocks.stderr?ref=9fdcb13edb4026d1058c793a553f1798c044870c", "patch": "@@ -0,0 +1,51 @@\n+error: passing a unit value to a function\n+  --> $DIR/unit_arg_empty_blocks.rs:15:5\n+   |\n+LL |     foo({});\n+   |     ^^^^--^\n+   |         |\n+   |         help: use a unit literal instead: `()`\n+   |\n+   = note: `-D clippy::unit-arg` implied by `-D warnings`\n+\n+error: passing a unit value to a function\n+  --> $DIR/unit_arg_empty_blocks.rs:16:5\n+   |\n+LL |     foo3({}, 2, 2);\n+   |     ^^^^^--^^^^^^^\n+   |          |\n+   |          help: use a unit literal instead: `()`\n+\n+error: passing unit values to a function\n+  --> $DIR/unit_arg_empty_blocks.rs:17:5\n+   |\n+LL |     taking_two_units({}, foo(0));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: move the expression in front of the call...\n+   |\n+LL |     foo(0);\n+   |\n+help: ...and use unit literals instead\n+   |\n+LL |     taking_two_units((), ());\n+   |                      ^^  ^^\n+\n+error: passing unit values to a function\n+  --> $DIR/unit_arg_empty_blocks.rs:18:5\n+   |\n+LL |     taking_three_units({}, foo(0), foo(1));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: move the expressions in front of the call...\n+   |\n+LL |     foo(0);\n+LL |     foo(1);\n+   |\n+help: ...and use unit literals instead\n+   |\n+LL |     taking_three_units((), (), ());\n+   |                        ^^  ^^  ^^\n+\n+error: aborting due to 4 previous errors\n+"}]}