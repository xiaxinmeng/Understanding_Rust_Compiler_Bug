{"sha": "3d41252fcc28d9da1005f3207462e95006c232e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkNDEyNTJmY2MyOGQ5ZGExMDA1ZjMyMDc0NjJlOTUwMDZjMjMyZTQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-15T07:57:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-15T07:57:24Z"}, "message": "Rollup merge of #72556 - matthew-mcallister:trait-alias-inherent-impl, r=estebank\n\nFix trait alias inherent impl resolution\n\nFixes #60021 and fixes #72415.\n\nObviously, the fix was very easy, but getting started with the testing and debugging rust compiler was an interesting experience. Now I can cross it off my bucket list!", "tree": {"sha": "30de705d5f79e6e99519322c18caaeffbbc26f2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30de705d5f79e6e99519322c18caaeffbbc26f2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d41252fcc28d9da1005f3207462e95006c232e4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe5ynlCRBK7hj4Ov3rIwAAdHIIAHRvBMYP0Y97VT64wPL5AnSb\nZem13GpksK43mIgJxR6MsuGTZBecmoHL7Nm6y7+hJv6BlqTFVzU3EkqMCQpKA+sO\nQD+Go4sRXb56ueoztDhHGUWxgS6LuB7B0zay6/ws+yMZ92Emx2feM2+Hmc+iJSOw\n2e2TNWDM7y+fWLi0JOvjQ5S07/LiYh/jYeNZfbM3JH5KEo6zGVwnCK1Npu/6YRzF\nfTR95Zx6qVqq8g41Ik1iABZbR+12c3Xo0PiBgzeoY+uCHMqFETofr24ScUS62AZ3\nxAJ4MfCXRr8qLjiwF32MCbOydoAsX4m+o+PDZWkbMxP1lV2p8VeYK3DHwPNZ+fE=\n=Los2\n-----END PGP SIGNATURE-----\n", "payload": "tree 30de705d5f79e6e99519322c18caaeffbbc26f2e\nparent 372cb9b69c76a042d0b9d4b48ff6084f64c84a2c\nparent 98eb29cbba66561cf184f2d7f4277b38bd6b2aad\nauthor Ralf Jung <post@ralfj.de> 1592207844 +0200\ncommitter GitHub <noreply@github.com> 1592207844 +0200\n\nRollup merge of #72556 - matthew-mcallister:trait-alias-inherent-impl, r=estebank\n\nFix trait alias inherent impl resolution\n\nFixes #60021 and fixes #72415.\n\nObviously, the fix was very easy, but getting started with the testing and debugging rust compiler was an interesting experience. Now I can cross it off my bucket list!\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d41252fcc28d9da1005f3207462e95006c232e4", "html_url": "https://github.com/rust-lang/rust/commit/3d41252fcc28d9da1005f3207462e95006c232e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d41252fcc28d9da1005f3207462e95006c232e4/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "372cb9b69c76a042d0b9d4b48ff6084f64c84a2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/372cb9b69c76a042d0b9d4b48ff6084f64c84a2c", "html_url": "https://github.com/rust-lang/rust/commit/372cb9b69c76a042d0b9d4b48ff6084f64c84a2c"}, {"sha": "98eb29cbba66561cf184f2d7f4277b38bd6b2aad", "url": "https://api.github.com/repos/rust-lang/rust/commits/98eb29cbba66561cf184f2d7f4277b38bd6b2aad", "html_url": "https://github.com/rust-lang/rust/commit/98eb29cbba66561cf184f2d7f4277b38bd6b2aad"}], "stats": {"total": 36, "additions": 35, "deletions": 1}, "files": [{"sha": "8714aaec8ca858d395aa07bd49447d19075c033d", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3d41252fcc28d9da1005f3207462e95006c232e4/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d41252fcc28d9da1005f3207462e95006c232e4/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=3d41252fcc28d9da1005f3207462e95006c232e4", "patch": "@@ -795,6 +795,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n \n     fn assemble_inherent_candidates_from_param(&mut self, param_ty: ty::ParamTy) {\n         // FIXME: do we want to commit to this behavior for param bounds?\n+        debug!(\"assemble_inherent_candidates_from_param(param_ty={:?})\", param_ty);\n \n         let bounds =\n             self.param_env.caller_bounds.iter().filter_map(|predicate| match predicate.kind() {\n@@ -952,7 +953,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                         import_ids: import_ids.clone(),\n                         kind: TraitCandidate(new_trait_ref),\n                     },\n-                    true,\n+                    false,\n                 );\n             });\n         } else {"}, {"sha": "5e27ed3c6460eba62cc2ca8844ca0d1f7a2e5567", "filename": "src/test/ui/traits/trait-alias/issue-60021-assoc-method-resolve.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3d41252fcc28d9da1005f3207462e95006c232e4/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Fissue-60021-assoc-method-resolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d41252fcc28d9da1005f3207462e95006c232e4/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Fissue-60021-assoc-method-resolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Fissue-60021-assoc-method-resolve.rs?ref=3d41252fcc28d9da1005f3207462e95006c232e4", "patch": "@@ -0,0 +1,19 @@\n+// check-pass\n+\n+#![feature(trait_alias)]\n+\n+trait SomeTrait {\n+    fn map(&self) {}\n+}\n+\n+impl<T> SomeTrait for Option<T> {}\n+\n+trait SomeAlias = SomeTrait;\n+\n+fn main() {\n+    let x = Some(123);\n+    // This should resolve to the trait impl for Option\n+    Option::map(x, |z| z);\n+    // This should resolve to the trait impl for SomeTrait\n+    SomeTrait::map(&x);\n+}"}, {"sha": "e49125d10249d635391f7b231862a285e24eb175", "filename": "src/test/ui/traits/trait-alias/issue-72415-assoc-const-resolve.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3d41252fcc28d9da1005f3207462e95006c232e4/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Fissue-72415-assoc-const-resolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d41252fcc28d9da1005f3207462e95006c232e4/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Fissue-72415-assoc-const-resolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Fissue-72415-assoc-const-resolve.rs?ref=3d41252fcc28d9da1005f3207462e95006c232e4", "patch": "@@ -0,0 +1,14 @@\n+// check-pass\n+\n+#![feature(trait_alias)]\n+\n+trait Bounded { const MAX: Self; }\n+\n+impl Bounded for u32 {\n+    // This should correctly resolve to the associated const in the inherent impl of u32.\n+    const MAX: Self = u32::MAX;\n+}\n+\n+trait Num = Bounded + Copy;\n+\n+fn main() {}"}]}