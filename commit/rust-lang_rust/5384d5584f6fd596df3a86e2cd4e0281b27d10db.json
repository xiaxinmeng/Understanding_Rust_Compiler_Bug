{"sha": "5384d5584f6fd596df3a86e2cd4e0281b27d10db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzODRkNTU4NGY2ZmQ1OTZkZjNhODZlMmNkNGUwMjgxYjI3ZDEwZGI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-24T21:45:03Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-31T07:14:23Z"}, "message": "Suggest call fn ctor passed as arg to fn with type param bounds", "tree": {"sha": "e1cdd6075003de703683c8afa69cb5454cd9371a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1cdd6075003de703683c8afa69cb5454cd9371a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5384d5584f6fd596df3a86e2cd4e0281b27d10db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5384d5584f6fd596df3a86e2cd4e0281b27d10db", "html_url": "https://github.com/rust-lang/rust/commit/5384d5584f6fd596df3a86e2cd4e0281b27d10db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5384d5584f6fd596df3a86e2cd4e0281b27d10db/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "444bc3ca6607f7bdeb088b34db23c01e056900b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/444bc3ca6607f7bdeb088b34db23c01e056900b1", "html_url": "https://github.com/rust-lang/rust/commit/444bc3ca6607f7bdeb088b34db23c01e056900b1"}], "stats": {"total": 124, "additions": 117, "deletions": 7}, "files": [{"sha": "07083f155d62a197320da1af4c3785b9665490f3", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 61, "deletions": 7, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/5384d5584f6fd596df3a86e2cd4e0281b27d10db/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5384d5584f6fd596df3a86e2cd4e0281b27d10db/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=5384d5584f6fd596df3a86e2cd4e0281b27d10db", "patch": "@@ -1,20 +1,21 @@\n use super::{\n+    ConstEvalFailure,\n+    EvaluationResult,\n     FulfillmentError,\n     FulfillmentErrorCode,\n     MismatchedProjectionTypes,\n+    ObjectSafetyViolation,\n     Obligation,\n     ObligationCause,\n     ObligationCauseCode,\n     OnUnimplementedDirective,\n     OnUnimplementedNote,\n     OutputTypeParameterMismatch,\n-    TraitNotObjectSafe,\n-    ConstEvalFailure,\n+    Overflow,\n     PredicateObligation,\n     SelectionContext,\n     SelectionError,\n-    ObjectSafetyViolation,\n-    Overflow,\n+    TraitNotObjectSafe,\n };\n \n use crate::hir;\n@@ -35,7 +36,7 @@ use crate::util::nodemap::{FxHashMap, FxHashSet};\n use errors::{Applicability, DiagnosticBuilder};\n use std::fmt;\n use syntax::ast;\n-use syntax::symbol::sym;\n+use syntax::symbol::{sym, kw};\n use syntax_pos::{DUMMY_SP, Span, ExpnKind};\n \n impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n@@ -669,8 +670,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                             } else {\n                                 format!(\n                                     \"{}the trait `{}` is not implemented for `{}`\",\n-                                        pre_message,\n-                                        trait_ref,\n+                                    pre_message,\n+                                    trait_ref,\n                                     trait_ref.self_ty(),\n                                 )\n                             };\n@@ -689,6 +690,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         }\n \n                         self.suggest_borrow_on_unsized_slice(&obligation.cause.code, &mut err);\n+                        self.suggest_fn_call(&obligation, &mut err, &trait_ref);\n                         self.suggest_remove_reference(&obligation, &mut err, &trait_ref);\n                         self.suggest_semicolon_removal(&obligation, &mut err, span, &trait_ref);\n \n@@ -956,6 +958,58 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n     }\n \n+    fn suggest_fn_call(\n+        &self,\n+        obligation: &PredicateObligation<'tcx>,\n+        err: &mut DiagnosticBuilder<'tcx>,\n+        trait_ref: &ty::Binder<ty::TraitRef<'tcx>>,\n+    ) {\n+        let self_ty = trait_ref.self_ty();\n+        match self_ty.sty {\n+            ty::FnDef(def_id, _) => {\n+                // We tried to apply the bound to an `fn`. Check wether calling it\n+                // would evaluate to a type that *would* satisfy the trait binding.\n+                // If it would, suggest calling it: `bar(foo)` -> `bar(foo)`. This\n+                // case is *very* to hit if `foo` is `async`.\n+                let output_ty = self_ty.fn_sig(self.tcx).output();\n+                let new_trait_ref = ty::TraitRef {\n+                    def_id: trait_ref.def_id(),\n+                    substs: self.tcx.mk_substs_trait(output_ty.skip_binder(), &[]),\n+                };\n+                let obligation = Obligation::new(\n+                    obligation.cause.clone(),\n+                    obligation.param_env,\n+                    new_trait_ref.to_predicate(),\n+                );\n+                match self.evaluate_obligation(&obligation) {\n+                    Ok(EvaluationResult::EvaluatedToOk) |\n+                    Ok(EvaluationResult::EvaluatedToOkModuloRegions) |\n+                    Ok(EvaluationResult::EvaluatedToAmbig) => {\n+                        if let Some(hir::Node::Item(hir::Item {\n+                            ident,\n+                            node: hir::ItemKind::Fn(.., body_id),\n+                            ..\n+                        })) = self.tcx.hir().get_if_local(def_id) {\n+                            let body = self.tcx.hir().body(*body_id);\n+                            err.help(&format!(\n+                                \"it looks like you forgot to use parentheses to \\\n+                                 call the function: `{}({})`\",\n+                                ident,\n+                                body.arguments.iter()\n+                                    .map(|arg| match &arg.pat.node {\n+                                        hir::PatKind::Binding(_, _, ident, None)\n+                                        if ident.name != kw::SelfLower => ident.to_string(),\n+                                        _ => \"_\".to_string(),\n+                                    }).collect::<Vec<_>>().join(\", \")));\n+                        }\n+                    }\n+                    _ => {}\n+                }\n+            }\n+            _ => {}\n+        }\n+    }\n+\n     /// Whenever references are used by mistake, like `for (i, e) in &vec.iter().enumerate()`,\n     /// suggest removing these references until we reach a type that implements the trait.\n     fn suggest_remove_reference("}, {"sha": "a2d2ba145bc5efcd4dd2ef2a209e7de3acfd2dc7", "filename": "src/test/ui/suggestions/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5384d5584f6fd596df3a86e2cd4e0281b27d10db/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5384d5584f6fd596df3a86e2cd4e0281b27d10db/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs?ref=5384d5584f6fd596df3a86e2cd4e0281b27d10db", "patch": "@@ -0,0 +1,10 @@\n+// edition:2018\n+use std::future::Future;\n+\n+async fn foo() {}\n+\n+fn bar(f: impl Future<Output=()>) {}\n+\n+fn main() {\n+    bar(foo); //~ERROR E0277\n+}"}, {"sha": "5735f725dc380e9ff5d768080d704d504dcf4a68", "filename": "src/test/ui/suggestions/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5384d5584f6fd596df3a86e2cd4e0281b27d10db/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5384d5584f6fd596df3a86e2cd4e0281b27d10db/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr?ref=5384d5584f6fd596df3a86e2cd4e0281b27d10db", "patch": "@@ -0,0 +1,14 @@\n+error[E0277]: the trait bound `fn() -> impl std::future::Future {foo}: std::future::Future` is not satisfied\n+  --> $DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:9:5\n+   |\n+LL | fn bar(f: impl Future<Output=()>) {}\n+   | --------------------------------- required by `bar`\n+...\n+LL |     bar(foo);\n+   |     ^^^ the trait `std::future::Future` is not implemented for `fn() -> impl std::future::Future {foo}`\n+   |\n+   = help: it looks like you forgot to use parentheses to call the function: `foo()`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "acd149c5854e847fe574af8748a544ff50098526", "filename": "src/test/ui/suggestions/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5384d5584f6fd596df3a86e2cd4e0281b27d10db/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5384d5584f6fd596df3a86e2cd4e0281b27d10db/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.rs?ref=5384d5584f6fd596df3a86e2cd4e0281b27d10db", "patch": "@@ -0,0 +1,18 @@\n+// edition:2018\n+trait T {\n+    type O;\n+}\n+\n+struct S;\n+\n+impl T for S {\n+    type O = ();\n+}\n+\n+fn foo() -> impl T<O=()> { S }\n+\n+fn bar(f: impl T<O=()>) {}\n+\n+fn main() {\n+    bar(foo); //~ERROR E0277\n+}"}, {"sha": "2e4505c740588ae7f57e92d382d0cf2c2ebac474", "filename": "src/test/ui/suggestions/fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5384d5584f6fd596df3a86e2cd4e0281b27d10db/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5384d5584f6fd596df3a86e2cd4e0281b27d10db/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr?ref=5384d5584f6fd596df3a86e2cd4e0281b27d10db", "patch": "@@ -0,0 +1,14 @@\n+error[E0277]: the trait bound `fn() -> impl T {foo}: T` is not satisfied\n+  --> $DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:17:5\n+   |\n+LL | fn bar(f: impl T<O=()>) {}\n+   | ----------------------- required by `bar`\n+...\n+LL |     bar(foo);\n+   |     ^^^ the trait `T` is not implemented for `fn() -> impl T {foo}`\n+   |\n+   = help: it looks like you forgot to use parentheses to call the function: `foo()`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}