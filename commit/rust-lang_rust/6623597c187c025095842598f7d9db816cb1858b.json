{"sha": "6623597c187c025095842598f7d9db816cb1858b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2MjM1OTdjMTg3YzAyNTA5NTg0MjU5OGY3ZDlkYjgxNmNiMTg1OGI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-22T20:59:17Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-22T21:00:27Z"}, "message": "lib: Add an EBML reader module", "tree": {"sha": "de37f502a98eae013716e5366b4331c863fe95ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de37f502a98eae013716e5366b4331c863fe95ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6623597c187c025095842598f7d9db816cb1858b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6623597c187c025095842598f7d9db816cb1858b", "html_url": "https://github.com/rust-lang/rust/commit/6623597c187c025095842598f7d9db816cb1858b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6623597c187c025095842598f7d9db816cb1858b/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb75a53cbd0e326fd4f16ca284ba7080698d0d81", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb75a53cbd0e326fd4f16ca284ba7080698d0d81", "html_url": "https://github.com/rust-lang/rust/commit/bb75a53cbd0e326fd4f16ca284ba7080698d0d81"}], "stats": {"total": 110, "additions": 110, "deletions": 0}, "files": [{"sha": "7b413c635f219e346b04844263644e69f1ed8f15", "filename": "src/lib/ebml.rs", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/6623597c187c025095842598f7d9db816cb1858b/src%2Flib%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6623597c187c025095842598f7d9db816cb1858b/src%2Flib%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Febml.rs?ref=6623597c187c025095842598f7d9db816cb1858b", "patch": "@@ -0,0 +1,109 @@\n+// Simple Extensible Binary Markup Language (EBML) reader and writer on a\n+// cursor model. See the specification here:\n+//     http://www.matroska.org/technical/specs/rfc/index.html\n+\n+import option.none;\n+import option.some;\n+\n+type ebml_tag = rec(uint id, uint size);\n+type ebml_state = rec(ebml_tag ebml_tag, uint pos);\n+\n+// TODO: When we have module renaming, make \"reader\" and \"writer\" separate\n+// modules within this file.\n+\n+// EBML reading\n+\n+type reader = rec(\n+    io.reader reader,\n+    mutable vec[ebml_state] states,\n+    uint size\n+);\n+\n+// TODO: eventually use u64 or big here\n+impure fn read_vint(&io.reader reader) -> uint {\n+    auto a = reader.read_byte();\n+    if (a & 0x80u8 != 0u8) { ret (a & 0x7fu8) as uint; }\n+    auto b = reader.read_byte();\n+    if (a & 0x40u8 != 0u8) {\n+        ret (((a & 0x3fu8) as uint) << 8u) | (b as uint);\n+    }\n+    auto c = reader.read_byte();\n+    if (a & 0x20u8 != 0u8) {\n+        ret (((a & 0x1fu8) as uint) << 16u) | ((b as uint) << 8u) |\n+            (c as uint);\n+    }\n+    auto d = reader.read_byte();\n+    if (a & 0x10u8 != 0u8) {\n+        ret (((a & 0x0fu8) as uint) << 24u) | ((b as uint) << 16u) |\n+            ((c as uint) << 8u) | (d as uint);\n+    }\n+\n+    log \"vint too big\"; fail;\n+}\n+\n+impure fn create_reader(&io.reader r) -> reader {\n+    let vec[ebml_state] states = vec();\n+\n+    // Calculate the size of the stream.\n+    auto pos = r.tell();\n+    r.seek(0, io.seek_end);\n+    auto size = r.tell() - pos;\n+    r.seek(pos as int, io.seek_set);\n+\n+    ret rec(reader=r, mutable states=states, size=size);\n+}\n+\n+impure fn bytes_left(&reader r) -> uint {\n+    auto pos = r.reader.tell();\n+    alt (_vec.last[ebml_state](r.states)) {\n+        case (none[ebml_state])      { ret r.size - pos; }\n+        case (some[ebml_state](?st)) { ret st.pos + st.ebml_tag.size - pos; }\n+    }\n+}\n+\n+impure fn read_tag(&reader r) -> ebml_tag {\n+    auto id = read_vint(r.reader);\n+    auto size = read_vint(r.reader);\n+    ret rec(id=id, size=size);\n+}\n+\n+// Reads a tag and moves the cursor to its first child or data segment.\n+impure fn move_to_first_child(&reader r) {\n+    auto pos = r.reader.tell();\n+    auto t = read_tag(r);\n+    r.states += vec(rec(ebml_tag=t, pos=pos));\n+}\n+\n+// Reads a tag and skips over its contents, moving to its next sibling.\n+impure fn move_to_next_sibling(&reader r) {\n+    auto t = read_tag(r);\n+    r.reader.seek(t.size as int, io.seek_cur);\n+}\n+\n+// Moves to the parent of this tag.\n+impure fn move_to_parent(&reader r) {\n+    check (_vec.len[ebml_state](r.states) > 0u);\n+    auto st = _vec.pop[ebml_state](r.states);\n+    r.reader.seek(st.pos as int, io.seek_set);\n+}\n+\n+// Reads the data segment of a tag.\n+impure fn read_data(&reader r) -> vec[u8] {\n+    ret r.reader.read_bytes(bytes_left(r));\n+}\n+\n+impure fn peek(&reader r) -> ebml_tag {\n+    check (bytes_left(r) > 0u);\n+    auto pos = r.reader.tell();\n+    auto t = read_tag(r);\n+    r.reader.seek(pos as int, io.seek_set);\n+    ret t;\n+}\n+\n+\n+// EBML writing\n+\n+type writer = rec(io.writer writer, mutable vec[ebml_state] states);\n+\n+// TODO\n+"}, {"sha": "e434769a8dc872f345167e02bb073cb9e88a9d35", "filename": "src/lib/std.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6623597c187c025095842598f7d9db816cb1858b/src%2Flib%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/6623597c187c025095842598f7d9db816cb1858b/src%2Flib%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fstd.rc?ref=6623597c187c025095842598f7d9db816cb1858b", "patch": "@@ -77,6 +77,7 @@ mod dbg;\n mod bitv;\n mod sort;\n mod sha1;\n+mod ebml;\n \n // Local Variables:\n // mode: rust;"}]}