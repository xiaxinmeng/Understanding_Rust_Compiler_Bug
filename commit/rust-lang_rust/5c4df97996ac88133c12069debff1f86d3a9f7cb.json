{"sha": "5c4df97996ac88133c12069debff1f86d3a9f7cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjNGRmOTc5OTZhYzg4MTMzYzEyMDY5ZGViZmYxZjg2ZDNhOWY3Y2I=", "commit": {"author": {"name": "Phil Ellison", "email": "phil.j.ellison@gmail.com", "date": "2019-07-28T11:08:06Z"}, "committer": {"name": "Phil Ellison", "email": "phil.j.ellison@gmail.com", "date": "2019-07-28T11:08:06Z"}, "message": "cargo format", "tree": {"sha": "50191919a9d6462b1edafff44df9c36449d89cc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50191919a9d6462b1edafff44df9c36449d89cc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c4df97996ac88133c12069debff1f86d3a9f7cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c4df97996ac88133c12069debff1f86d3a9f7cb", "html_url": "https://github.com/rust-lang/rust/commit/5c4df97996ac88133c12069debff1f86d3a9f7cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c4df97996ac88133c12069debff1f86d3a9f7cb/comments", "author": {"login": "theotherphil", "id": 1974256, "node_id": "MDQ6VXNlcjE5NzQyNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1974256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theotherphil", "html_url": "https://github.com/theotherphil", "followers_url": "https://api.github.com/users/theotherphil/followers", "following_url": "https://api.github.com/users/theotherphil/following{/other_user}", "gists_url": "https://api.github.com/users/theotherphil/gists{/gist_id}", "starred_url": "https://api.github.com/users/theotherphil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theotherphil/subscriptions", "organizations_url": "https://api.github.com/users/theotherphil/orgs", "repos_url": "https://api.github.com/users/theotherphil/repos", "events_url": "https://api.github.com/users/theotherphil/events{/privacy}", "received_events_url": "https://api.github.com/users/theotherphil/received_events", "type": "User", "site_admin": false}, "committer": {"login": "theotherphil", "id": 1974256, "node_id": "MDQ6VXNlcjE5NzQyNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1974256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theotherphil", "html_url": "https://github.com/theotherphil", "followers_url": "https://api.github.com/users/theotherphil/followers", "following_url": "https://api.github.com/users/theotherphil/following{/other_user}", "gists_url": "https://api.github.com/users/theotherphil/gists{/gist_id}", "starred_url": "https://api.github.com/users/theotherphil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theotherphil/subscriptions", "organizations_url": "https://api.github.com/users/theotherphil/orgs", "repos_url": "https://api.github.com/users/theotherphil/repos", "events_url": "https://api.github.com/users/theotherphil/events{/privacy}", "received_events_url": "https://api.github.com/users/theotherphil/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f6909c0ce678e738a39789687af8a12e02d0be1", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f6909c0ce678e738a39789687af8a12e02d0be1", "html_url": "https://github.com/rust-lang/rust/commit/9f6909c0ce678e738a39789687af8a12e02d0be1"}], "stats": {"total": 234, "additions": 117, "deletions": 117}, "files": [{"sha": "07c2e5f94173f0d0bfc7671d41d87a5b282e812d", "filename": "crates/ra_ide_api/src/completion/complete_scope.rs", "status": "modified", "additions": 59, "deletions": 59, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/5c4df97996ac88133c12069debff1f86d3a9f7cb/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c4df97996ac88133c12069debff1f86d3a9f7cb/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs?ref=5c4df97996ac88133c12069debff1f86d3a9f7cb", "patch": "@@ -122,7 +122,7 @@ impl ImportResolver {\n #[cfg(test)]\n mod tests {\n     use crate::completion::{do_completion, CompletionItem, CompletionKind};\n-\tuse insta::assert_debug_snapshot_matches;\n+    use insta::assert_debug_snapshot_matches;\n \n     fn do_reference_completion(code: &str) -> Vec<CompletionItem> {\n         do_completion(code, CompletionKind::Reference)\n@@ -131,16 +131,16 @@ mod tests {\n     #[test]\n     fn completes_bindings_from_let() {\n         assert_debug_snapshot_matches!(\n-            do_reference_completion(\n-                r\"\n+                    do_reference_completion(\n+                        r\"\n                 fn quux(x: i32) {\n                     let y = 92;\n                     1 + <|>;\n                     let z = ();\n                 }\n                 \"\n-            ),\n-@r###\"\n+                    ),\n+        @r###\"\n        \u22ee[\n        \u22ee    CompletionItem {\n        \u22ee        label: \"quux\",\n@@ -168,14 +168,14 @@ mod tests {\n        \u22ee    },\n        \u22ee]\n         \"###\n-        );\n+                );\n     }\n \n     #[test]\n     fn completes_bindings_from_if_let() {\n         assert_debug_snapshot_matches!(\n-            do_reference_completion(\n-                r\"\n+                    do_reference_completion(\n+                        r\"\n                 fn quux() {\n                     if let Some(x) = foo() {\n                         let y = 92;\n@@ -186,8 +186,8 @@ mod tests {\n                     }\n                 }\n                 \"\n-            ),\n-@r###\"\n+                    ),\n+        @r###\"\n        \u22ee[\n        \u22ee    CompletionItem {\n        \u22ee        label: \"a\",\n@@ -214,22 +214,22 @@ mod tests {\n        \u22ee    },\n        \u22ee]\n         \"###\n-        );\n+                );\n     }\n \n     #[test]\n     fn completes_bindings_from_for() {\n         assert_debug_snapshot_matches!(\n-            do_reference_completion(\n-                r\"\n+                    do_reference_completion(\n+                        r\"\n                 fn quux() {\n                     for x in &[1, 2, 3] {\n                         <|>\n                     }\n                 }\n                 \"\n-            ),\n-@r###\"\n+                    ),\n+        @r###\"\n        \u22ee[\n        \u22ee    CompletionItem {\n        \u22ee        label: \"quux\",\n@@ -248,20 +248,20 @@ mod tests {\n        \u22ee    },\n        \u22ee]\n         \"###\n-        );\n+                );\n     }\n \n     #[test]\n     fn completes_generic_params() {\n         assert_debug_snapshot_matches!(\n-            do_reference_completion(\n-                r\"\n+                    do_reference_completion(\n+                        r\"\n                 fn quux<T>() {\n                     <|>\n                 }\n                 \"\n-            ),\n-@r###\"\n+                    ),\n+        @r###\"\n        \u22ee[\n        \u22ee    CompletionItem {\n        \u22ee        label: \"T\",\n@@ -280,20 +280,20 @@ mod tests {\n        \u22ee    },\n        \u22ee]\n         \"###\n-        );\n+                );\n     }\n \n     #[test]\n     fn completes_generic_params_in_struct() {\n         assert_debug_snapshot_matches!(\n-            do_reference_completion(\n-                r\"\n+                    do_reference_completion(\n+                        r\"\n                 struct X<T> {\n                     x: <|>\n                 }\n                 \"\n-            ),\n-@r###\"\n+                    ),\n+        @r###\"\n        \u22ee[\n        \u22ee    CompletionItem {\n        \u22ee        label: \"T\",\n@@ -311,22 +311,22 @@ mod tests {\n        \u22ee    },\n        \u22ee]\n         \"###\n-        );\n+                );\n     }\n \n     #[test]\n     fn completes_module_items() {\n         assert_debug_snapshot_matches!(\n-            do_reference_completion(\n-                r\"\n+                    do_reference_completion(\n+                        r\"\n                 struct Foo;\n                 enum Baz {}\n                 fn quux() {\n                     <|>\n                 }\n                 \"\n-            ),\n-@r###\"\n+                    ),\n+        @r###\"\n        \u22ee[\n        \u22ee    CompletionItem {\n        \u22ee        label: \"Baz\",\n@@ -352,22 +352,22 @@ mod tests {\n        \u22ee    },\n        \u22ee]\n         \"###\n-        );\n+                );\n     }\n \n     #[test]\n     fn completes_extern_prelude() {\n         assert_debug_snapshot_matches!(\n-            do_reference_completion(\n-                r\"\n+                    do_reference_completion(\n+                        r\"\n                 //- /lib.rs\n                 use <|>;\n \n                 //- /other_crate/lib.rs\n                 // nothing here\n                 \"\n-            ),\n-@r#\"[\n+                    ),\n+        @r#\"[\n     CompletionItem {\n         label: \"other_crate\",\n         source_range: [4; 4),\n@@ -376,22 +376,22 @@ mod tests {\n         kind: Module,\n     },\n ]\"#\n-        );\n+                );\n     }\n \n     #[test]\n     fn completes_module_items_in_nested_modules() {\n         assert_debug_snapshot_matches!(\n-            do_reference_completion(\n-                r\"\n+                    do_reference_completion(\n+                        r\"\n                 struct Foo;\n                 mod m {\n                     struct Bar;\n                     fn quux() { <|> }\n                 }\n                 \"\n-            ),\n-@r###\"\n+                    ),\n+        @r###\"\n        \u22ee[\n        \u22ee    CompletionItem {\n        \u22ee        label: \"Bar\",\n@@ -410,19 +410,19 @@ mod tests {\n        \u22ee    },\n        \u22ee]\n         \"###\n-        );\n+                );\n     }\n \n     #[test]\n     fn completes_return_type() {\n         assert_debug_snapshot_matches!(\n-            do_reference_completion(\n-                r\"\n+                    do_reference_completion(\n+                        r\"\n                 struct Foo;\n                 fn x() -> <|>\n                 \"\n-            ),\n-@r###\"\n+                    ),\n+        @r###\"\n        \u22ee[\n        \u22ee    CompletionItem {\n        \u22ee        label: \"Foo\",\n@@ -441,14 +441,14 @@ mod tests {\n        \u22ee    },\n        \u22ee]\n         \"###\n-        );\n+                );\n     }\n \n     #[test]\n     fn dont_show_both_completions_for_shadowing() {\n         assert_debug_snapshot_matches!(\n-            do_reference_completion(\n-                r\"\n+                    do_reference_completion(\n+                        r\"\n                 fn foo() {\n                     let bar = 92;\n                     {\n@@ -457,8 +457,8 @@ mod tests {\n                     }\n                 }\n                 \"\n-            ),\n-@r###\"\n+                    ),\n+        @r###\"\n        \u22ee[\n        \u22ee    CompletionItem {\n        \u22ee        label: \"bar\",\n@@ -478,14 +478,14 @@ mod tests {\n        \u22ee    },\n        \u22ee]\n         \"###\n-        );\n+                );\n     }\n \n     #[test]\n     fn completes_self_in_methods() {\n         assert_debug_snapshot_matches!(\n-            do_reference_completion(r\"impl S { fn foo(&self) { <|> } }\"),\n-@r#\"[\n+                    do_reference_completion(r\"impl S { fn foo(&self) { <|> } }\"),\n+        @r#\"[\n     CompletionItem {\n         label: \"Self\",\n         source_range: [25; 25),\n@@ -502,14 +502,14 @@ mod tests {\n         detail: \"&{unknown}\",\n     },\n ]\"#\n-        );\n+                );\n     }\n \n     #[test]\n     fn completes_prelude() {\n         assert_debug_snapshot_matches!(\n-            do_reference_completion(\n-                \"\n+                    do_reference_completion(\n+                        \"\n                 //- /main.rs\n                 fn foo() { let x: <|> }\n \n@@ -521,8 +521,8 @@ mod tests {\n                     struct Option;\n                 }\n                 \"\n-            ),\n-@r#\"[\n+                    ),\n+        @r#\"[\n     CompletionItem {\n         label: \"Option\",\n         source_range: [18; 18),\n@@ -546,6 +546,6 @@ mod tests {\n         kind: Module,\n     },\n ]\"#\n-        );\n+                );\n     }\n }"}, {"sha": "e0368b3b224eefa617c5b432a1651596d8b77cf6", "filename": "crates/ra_ide_api/src/completion/complete_snippet.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5c4df97996ac88133c12069debff1f86d3a9f7cb/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_snippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c4df97996ac88133c12069debff1f86d3a9f7cb/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_snippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_snippet.rs?ref=5c4df97996ac88133c12069debff1f86d3a9f7cb", "patch": "@@ -40,7 +40,7 @@ fn ${1:feature}() {\n #[cfg(test)]\n mod tests {\n     use crate::completion::{do_completion, CompletionItem, CompletionKind};\n-\tuse insta::assert_debug_snapshot_matches;\n+    use insta::assert_debug_snapshot_matches;\n \n     fn do_snippet_completion(code: &str) -> Vec<CompletionItem> {\n         do_completion(code, CompletionKind::Snippet)\n@@ -49,8 +49,8 @@ mod tests {\n     #[test]\n     fn completes_snippets_in_expressions() {\n         assert_debug_snapshot_matches!(\n-            do_snippet_completion(r\"fn foo(x: i32) { <|> }\"),\n-@r#\"[\n+                    do_snippet_completion(r\"fn foo(x: i32) { <|> }\"),\n+        @r#\"[\n     CompletionItem {\n         label: \"pd\",\n         source_range: [17; 17),\n@@ -66,33 +66,33 @@ mod tests {\n         kind: Snippet,\n     },\n ]\"#\n-        );\n+                );\n     }\n \n     #[test]\n     fn should_not_complete_snippets_in_path() {\n         assert_debug_snapshot_matches!(\n-            do_snippet_completion(r\"fn foo(x: i32) { ::foo<|> }\"),\n-@r#\"[]\"#\n-        );\n+                    do_snippet_completion(r\"fn foo(x: i32) { ::foo<|> }\"),\n+        @r#\"[]\"#\n+                );\n         assert_debug_snapshot_matches!(\n-            do_snippet_completion(r\"fn foo(x: i32) { ::<|> }\"),\n-@r#\"[]\"#\n-        );\n+                    do_snippet_completion(r\"fn foo(x: i32) { ::<|> }\"),\n+        @r#\"[]\"#\n+                );\n     }\n \n     #[test]\n     fn completes_snippets_in_items() {\n         assert_debug_snapshot_matches!(\n-            do_snippet_completion(\n-                r\"\n+                    do_snippet_completion(\n+                        r\"\n                 #[cfg(test)]\n                 mod tests {\n                     <|>\n                 }\n                 \"\n-            ),\n-@r###\"\n+                    ),\n+        @r###\"\n        \u22ee[\n        \u22ee    CompletionItem {\n        \u22ee        label: \"Test function\",\n@@ -111,6 +111,6 @@ mod tests {\n        \u22ee    },\n        \u22ee]\n         \"###\n-        );\n+                );\n     }\n }"}, {"sha": "5df19990ca06c19c12171a2bb608e1912a2320c9", "filename": "crates/ra_ide_api/src/completion/presentation.rs", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/5c4df97996ac88133c12069debff1f86d3a9f7cb/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c4df97996ac88133c12069debff1f86d3a9f7cb/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=5c4df97996ac88133c12069debff1f86d3a9f7cb", "patch": "@@ -182,9 +182,9 @@ impl Completions {\n \n #[cfg(test)]\n mod tests {\n-    use test_utils::covers;\n     use crate::completion::{do_completion, CompletionItem, CompletionKind};\n-\tuse insta::assert_debug_snapshot_matches;\n+    use insta::assert_debug_snapshot_matches;\n+    use test_utils::covers;\n \n     fn do_reference_completion(code: &str) -> Vec<CompletionItem> {\n         do_completion(code, CompletionKind::Reference)\n@@ -194,13 +194,13 @@ mod tests {\n     fn inserts_parens_for_function_calls() {\n         covers!(inserts_parens_for_function_calls);\n         assert_debug_snapshot_matches!(\n-            do_reference_completion(\n-                r\"\n+                    do_reference_completion(\n+                        r\"\n                 fn no_args() {}\n                 fn main() { no_<|> }\n                 \"\n-            ),\n-@r###\"\n+                    ),\n+        @r###\"\n        \u22ee[\n        \u22ee    CompletionItem {\n        \u22ee        label: \"main\",\n@@ -220,15 +220,15 @@ mod tests {\n        \u22ee    },\n        \u22ee]\n         \"###\n-        );\n+                );\n         assert_debug_snapshot_matches!(\n-            do_reference_completion(\n-                r\"\n+                    do_reference_completion(\n+                        r\"\n                 fn with_args(x: i32, y: String) {}\n                 fn main() { with_<|> }\n                 \"\n-            ),\n-@r###\"\n+                    ),\n+        @r###\"\n        \u22ee[\n        \u22ee    CompletionItem {\n        \u22ee        label: \"main\",\n@@ -248,10 +248,10 @@ mod tests {\n        \u22ee    },\n        \u22ee]\n         \"###\n-        );\n+                );\n         assert_debug_snapshot_matches!(\n-            do_reference_completion(\n-                r\"\n+                    do_reference_completion(\n+                        r\"\n                 struct S {}\n                 impl S {\n                     fn foo(&self) {}\n@@ -260,8 +260,8 @@ mod tests {\n                     s.f<|>\n                 }\n                 \"\n-            ),\n-@r###\"\n+                    ),\n+        @r###\"\n        \u22ee[\n        \u22ee    CompletionItem {\n        \u22ee        label: \"foo\",\n@@ -273,20 +273,20 @@ mod tests {\n        \u22ee    },\n        \u22ee]\n         \"###\n-        );\n+                );\n     }\n \n     #[test]\n     fn dont_render_function_parens_in_use_item() {\n         assert_debug_snapshot_matches!(\n-            do_reference_completion(\n-                \"\n+                    do_reference_completion(\n+                        \"\n                 //- /lib.rs\n                 mod m { pub fn foo() {} }\n                 use crate::m::f<|>;\n                 \"\n-            ),\n-@r#\"[\n+                    ),\n+        @r#\"[\n     CompletionItem {\n         label: \"foo\",\n         source_range: [40; 41),\n@@ -296,22 +296,22 @@ mod tests {\n         detail: \"pub fn foo()\",\n     },\n ]\"#\n-        );\n+                );\n     }\n \n     #[test]\n     fn dont_render_function_parens_if_already_call() {\n         assert_debug_snapshot_matches!(\n-            do_reference_completion(\n-                \"\n+                    do_reference_completion(\n+                        \"\n                 //- /lib.rs\n                 fn frobnicate() {}\n                 fn main() {\n                     frob<|>();\n                 }\n                 \"\n-            ),\n-@r#\"[\n+                    ),\n+        @r#\"[\n     CompletionItem {\n         label: \"frobnicate\",\n         source_range: [35; 39),\n@@ -329,19 +329,19 @@ mod tests {\n         detail: \"fn main()\",\n     },\n ]\"#\n-        );\n+                );\n         assert_debug_snapshot_matches!(\n-            do_reference_completion(\n-                \"\n+                    do_reference_completion(\n+                        \"\n                 //- /lib.rs\n                 struct Foo {}\n                 impl Foo { fn new() -> Foo {} }\n                 fn main() {\n                     Foo::ne<|>();\n                 }\n                 \"\n-            ),\n-@r#\"[\n+                    ),\n+        @r#\"[\n     CompletionItem {\n         label: \"new\",\n         source_range: [67; 69),\n@@ -351,6 +351,6 @@ mod tests {\n         detail: \"fn new() -> Foo\",\n     },\n ]\"#\n-        );\n+                );\n     }\n }"}, {"sha": "b026dfa59df87019734eb468e507f8268e39f005", "filename": "crates/ra_ide_api/src/display/structure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c4df97996ac88133c12069debff1f86d3a9f7cb/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fstructure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c4df97996ac88133c12069debff1f86d3a9f7cb/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fstructure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fstructure.rs?ref=5c4df97996ac88133c12069debff1f86d3a9f7cb", "patch": "@@ -205,7 +205,7 @@ fn very_obsolete() {}\n         .unwrap();\n         let structure = file_structure(&file);\n         assert_debug_snapshot_matches!(structure,\n-@r#\"[\n+        @r#\"[\n     StructureNode {\n         parent: None,\n         label: \"Foo\",\n@@ -390,6 +390,6 @@ fn very_obsolete() {}\n         deprecated: true,\n     },\n ]\"#\n-        );\n+                );\n     }\n }"}, {"sha": "09c082de9cfdd8abb10f3f6adf3a66e5045e9a8a", "filename": "crates/ra_ide_api/src/runnables.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5c4df97996ac88133c12069debff1f86d3a9f7cb/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c4df97996ac88133c12069debff1f86d3a9f7cb/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs?ref=5c4df97996ac88133c12069debff1f86d3a9f7cb", "patch": "@@ -93,7 +93,7 @@ mod tests {\n         );\n         let runnables = analysis.runnables(pos.file_id).unwrap();\n         assert_debug_snapshot_matches!(&runnables,\n-@r#\"[\n+        @r#\"[\n     Runnable {\n         range: [1; 21),\n         kind: Bin,\n@@ -111,7 +111,7 @@ mod tests {\n         },\n     },\n ]\"#\n-        );\n+                );\n     }\n \n     #[test]\n@@ -127,8 +127,8 @@ mod tests {\n         \"#,\n         );\n         let runnables = analysis.runnables(pos.file_id).unwrap();\n-        assert_debug_snapshot_matches!(&runnables, \n-@r#\"[\n+        assert_debug_snapshot_matches!(&runnables,\n+        @r#\"[\n     Runnable {\n         range: [1; 59),\n         kind: TestMod {\n@@ -142,7 +142,7 @@ mod tests {\n         },\n     },\n ]\"#\n-        );\n+                );\n     }\n \n     #[test]\n@@ -161,7 +161,7 @@ mod tests {\n         );\n         let runnables = analysis.runnables(pos.file_id).unwrap();\n         assert_debug_snapshot_matches!(&runnables,\n-@r#\"[\n+        @r#\"[\n     Runnable {\n         range: [23; 85),\n         kind: TestMod {\n@@ -175,7 +175,7 @@ mod tests {\n         },\n     },\n ]\"#\n-        );\n+                );\n     }\n \n     #[test]\n@@ -196,7 +196,7 @@ mod tests {\n         );\n         let runnables = analysis.runnables(pos.file_id).unwrap();\n         assert_debug_snapshot_matches!(&runnables,\n-@r#\"[\n+        @r#\"[\n     Runnable {\n         range: [41; 115),\n         kind: TestMod {\n@@ -210,7 +210,7 @@ mod tests {\n         },\n     },\n ]\"#\n-        );\n+                );\n     }\n \n     #[test]"}]}