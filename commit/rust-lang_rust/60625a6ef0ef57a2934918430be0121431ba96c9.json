{"sha": "60625a6ef0ef57a2934918430be0121431ba96c9", "node_id": "C_kwDOAAsO6NoAKDYwNjI1YTZlZjBlZjU3YTI5MzQ5MTg0MzBiZTAxMjE0MzFiYTk2Yzk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-22T23:28:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-22T23:28:51Z"}, "message": "Rollup merge of #88858 - spektom:to_lower_upper_rev, r=dtolnay\n\nAllow reverse iteration of lowercase'd/uppercase'd chars\n\nThe PR implements `DoubleEndedIterator` trait for `ToLowercase` and `ToUppercase`.\n\nThis enables reverse iteration of lowercase/uppercase variants of character sequences.\nOne of use cases:  determining whether a char sequence is a suffix of another one.\n\nExample:\n\n```rust\nfn endswith_ignore_case(s1: &str, s2: &str) -> bool {\n    for eob in s1\n        .chars()\n        .flat_map(|c| c.to_lowercase())\n        .rev()\n        .zip_longest(s2.chars().flat_map(|c| c.to_lowercase()).rev())\n    {\n        match eob {\n            EitherOrBoth::Both(c1, c2) => {\n                if c1 != c2 {\n                    return false;\n                }\n            }\n            EitherOrBoth::Left(_) => return true,\n            EitherOrBoth::Right(_) => return false,\n        }\n    }\n    true\n}\n```", "tree": {"sha": "236d2a7b8fdf077588da4bc2a0eaa246e6c203f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/236d2a7b8fdf077588da4bc2a0eaa246e6c203f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60625a6ef0ef57a2934918430be0121431ba96c9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhw7SzCRBK7hj4Ov3rIwAAdt0IAGjDcMEnsSGlZEBqHG0gO8NF\nHaWNkPkglA4hbqZaxfwgfbRRSX2epzGh4+n9efv9sHpvYRfAYHtWaSrYMz/d1X58\nYRov88PX1oMLVHrkAlj60Kw5v2HuSs+TEdRLZThEWDlVUpNSmCcCp2u+SCLfOSuD\nwChNnux7OFY0l6FqnSdxJFGyGaZYlE2HnPdujpVuYpcQ6vSbHNLJSnPHAf6xW0sH\nuWc0S6hMy7Sj7hJp4N43eX5AC0WdMEj/l1mroxSs7jXnUx6enwVBYu0ZBlGT7baV\n0CeZtJv03kS0zJJk18jyxOHQvdlVHN7Vsu8fT0VOlbDDm0YpC1kg5JjOBeGftXk=\n=ccwY\n-----END PGP SIGNATURE-----\n", "payload": "tree 236d2a7b8fdf077588da4bc2a0eaa246e6c203f4\nparent 34926f0a1681458588a2d4240c0715ef9eff7d35\nparent 417b6f354e98a3198f456223c97b162c30ab3a5e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1640215731 +0100\ncommitter GitHub <noreply@github.com> 1640215731 +0100\n\nRollup merge of #88858 - spektom:to_lower_upper_rev, r=dtolnay\n\nAllow reverse iteration of lowercase'd/uppercase'd chars\n\nThe PR implements `DoubleEndedIterator` trait for `ToLowercase` and `ToUppercase`.\n\nThis enables reverse iteration of lowercase/uppercase variants of character sequences.\nOne of use cases:  determining whether a char sequence is a suffix of another one.\n\nExample:\n\n```rust\nfn endswith_ignore_case(s1: &str, s2: &str) -> bool {\n    for eob in s1\n        .chars()\n        .flat_map(|c| c.to_lowercase())\n        .rev()\n        .zip_longest(s2.chars().flat_map(|c| c.to_lowercase()).rev())\n    {\n        match eob {\n            EitherOrBoth::Both(c1, c2) => {\n                if c1 != c2 {\n                    return false;\n                }\n            }\n            EitherOrBoth::Left(_) => return true,\n            EitherOrBoth::Right(_) => return false,\n        }\n    }\n    true\n}\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60625a6ef0ef57a2934918430be0121431ba96c9", "html_url": "https://github.com/rust-lang/rust/commit/60625a6ef0ef57a2934918430be0121431ba96c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60625a6ef0ef57a2934918430be0121431ba96c9/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34926f0a1681458588a2d4240c0715ef9eff7d35", "url": "https://api.github.com/repos/rust-lang/rust/commits/34926f0a1681458588a2d4240c0715ef9eff7d35", "html_url": "https://github.com/rust-lang/rust/commit/34926f0a1681458588a2d4240c0715ef9eff7d35"}, {"sha": "417b6f354e98a3198f456223c97b162c30ab3a5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/417b6f354e98a3198f456223c97b162c30ab3a5e", "html_url": "https://github.com/rust-lang/rust/commit/417b6f354e98a3198f456223c97b162c30ab3a5e"}], "stats": {"total": 71, "additions": 71, "deletions": 0}, "files": [{"sha": "e92881b1049280cecac939629b3f1e4c4977a0b9", "filename": "library/alloc/tests/str.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/60625a6ef0ef57a2934918430be0121431ba96c9/library%2Falloc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60625a6ef0ef57a2934918430be0121431ba96c9/library%2Falloc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fstr.rs?ref=60625a6ef0ef57a2934918430be0121431ba96c9", "patch": "@@ -1183,6 +1183,37 @@ fn test_rev_iterator() {\n     assert_eq!(pos, v.len());\n }\n \n+#[test]\n+fn test_to_lowercase_rev_iterator() {\n+    let s = \"A\u00d6\u00df\u00dc\ud83d\udca9\u03a3\u03a4\u0399\u0393\u039c\u0391\u03a3\u01c5\ufb01\u0130\";\n+    let v = ['\\u{307}', 'i', '\ufb01', '\u01c6', '\u03c3', '\u03b1', '\u03bc', '\u03b3', '\u03b9', '\u03c4', '\u03c3', '\ud83d\udca9', '\u00fc', '\u00df', '\u00f6', 'a'];\n+\n+    let mut pos = 0;\n+    let it = s.chars().flat_map(|c| c.to_lowercase()).rev();\n+\n+    for c in it {\n+        assert_eq!(c, v[pos]);\n+        pos += 1;\n+    }\n+    assert_eq!(pos, v.len());\n+}\n+\n+#[test]\n+fn test_to_uppercase_rev_iterator() {\n+    let s = \"a\u00f6\u00df\u00fc\ud83d\udca9\u03c3\u03c4\u03b9\u03b3\u03bc\u03b1\u03c2\u01c5\ufb01\u1f80\";\n+    let v =\n+        ['\u0399', '\u1f08', 'I', 'F', '\u01c4', '\u03a3', '\u0391', '\u039c', '\u0393', '\u0399', '\u03a4', '\u03a3', '\ud83d\udca9', '\u00dc', 'S', 'S', '\u00d6', 'A'];\n+\n+    let mut pos = 0;\n+    let it = s.chars().flat_map(|c| c.to_uppercase()).rev();\n+\n+    for c in it {\n+        assert_eq!(c, v[pos]);\n+        pos += 1;\n+    }\n+    assert_eq!(pos, v.len());\n+}\n+\n #[test]\n #[cfg_attr(miri, ignore)] // Miri is too slow\n fn test_chars_decoding() {"}, {"sha": "5f30d5790a04ff8a771206a0afe30f541afdb5d8", "filename": "library/core/src/char/mod.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/60625a6ef0ef57a2934918430be0121431ba96c9/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60625a6ef0ef57a2934918430be0121431ba96c9/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs?ref=60625a6ef0ef57a2934918430be0121431ba96c9", "patch": "@@ -393,6 +393,13 @@ impl Iterator for ToLowercase {\n     }\n }\n \n+#[stable(feature = \"case_mapping_double_ended\", since = \"1.59.0\")]\n+impl DoubleEndedIterator for ToLowercase {\n+    fn next_back(&mut self) -> Option<char> {\n+        self.0.next_back()\n+    }\n+}\n+\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl FusedIterator for ToLowercase {}\n \n@@ -420,6 +427,13 @@ impl Iterator for ToUppercase {\n     }\n }\n \n+#[stable(feature = \"case_mapping_double_ended\", since = \"1.59.0\")]\n+impl DoubleEndedIterator for ToUppercase {\n+    fn next_back(&mut self) -> Option<char> {\n+        self.0.next_back()\n+    }\n+}\n+\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl FusedIterator for ToUppercase {}\n \n@@ -479,6 +493,26 @@ impl Iterator for CaseMappingIter {\n     }\n }\n \n+impl DoubleEndedIterator for CaseMappingIter {\n+    fn next_back(&mut self) -> Option<char> {\n+        match *self {\n+            CaseMappingIter::Three(a, b, c) => {\n+                *self = CaseMappingIter::Two(a, b);\n+                Some(c)\n+            }\n+            CaseMappingIter::Two(b, c) => {\n+                *self = CaseMappingIter::One(b);\n+                Some(c)\n+            }\n+            CaseMappingIter::One(c) => {\n+                *self = CaseMappingIter::Zero;\n+                Some(c)\n+            }\n+            CaseMappingIter::Zero => None,\n+        }\n+    }\n+}\n+\n impl fmt::Display for CaseMappingIter {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {"}, {"sha": "2b857a6591929d1cbf0fa00ed7d73664fa2cfea7", "filename": "library/core/tests/char.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/60625a6ef0ef57a2934918430be0121431ba96c9/library%2Fcore%2Ftests%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60625a6ef0ef57a2934918430be0121431ba96c9/library%2Fcore%2Ftests%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fchar.rs?ref=60625a6ef0ef57a2934918430be0121431ba96c9", "patch": "@@ -103,6 +103,9 @@ fn test_to_lowercase() {\n         let iter: String = c.to_lowercase().collect();\n         let disp: String = c.to_lowercase().to_string();\n         assert_eq!(iter, disp);\n+        let iter_rev: String = c.to_lowercase().rev().collect();\n+        let disp_rev: String = disp.chars().rev().collect();\n+        assert_eq!(iter_rev, disp_rev);\n         iter\n     }\n     assert_eq!(lower('A'), \"a\");\n@@ -130,6 +133,9 @@ fn test_to_uppercase() {\n         let iter: String = c.to_uppercase().collect();\n         let disp: String = c.to_uppercase().to_string();\n         assert_eq!(iter, disp);\n+        let iter_rev: String = c.to_uppercase().rev().collect();\n+        let disp_rev: String = disp.chars().rev().collect();\n+        assert_eq!(iter_rev, disp_rev);\n         iter\n     }\n     assert_eq!(upper('a'), \"A\");"}]}