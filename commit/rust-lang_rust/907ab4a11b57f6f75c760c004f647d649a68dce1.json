{"sha": "907ab4a11b57f6f75c760c004f647d649a68dce1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwN2FiNGExMWI1N2Y2Zjc1Yzc2MGMwMDRmNjQ3ZDY0OWE2OGRjZTE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-20T00:42:19Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-20T00:42:58Z"}, "message": "rt: Find roots on the stack; stub mark and sweep routines", "tree": {"sha": "df46d01a865572806ec4c71438d3aa7132dfc105", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df46d01a865572806ec4c71438d3aa7132dfc105"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/907ab4a11b57f6f75c760c004f647d649a68dce1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/907ab4a11b57f6f75c760c004f647d649a68dce1", "html_url": "https://github.com/rust-lang/rust/commit/907ab4a11b57f6f75c760c004f647d649a68dce1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/907ab4a11b57f6f75c760c004f647d649a68dce1/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84a6b888c05cea0bfdebd825d425ba5cbee4772a", "url": "https://api.github.com/repos/rust-lang/rust/commits/84a6b888c05cea0bfdebd825d425ba5cbee4772a", "html_url": "https://github.com/rust-lang/rust/commit/84a6b888c05cea0bfdebd825d425ba5cbee4772a"}], "stats": {"total": 129, "additions": 121, "deletions": 8}, "files": [{"sha": "01ab282cc399cd91439339b83ebec4aa528531b4", "filename": "src/rt/rust_gc.cpp", "status": "modified", "additions": 121, "deletions": 8, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/907ab4a11b57f6f75c760c004f647d649a68dce1/src%2Frt%2Frust_gc.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/907ab4a11b57f6f75c760c004f647d649a68dce1/src%2Frt%2Frust_gc.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_gc.cpp?ref=907ab4a11b57f6f75c760c004f647d649a68dce1", "patch": "@@ -1,6 +1,8 @@\n // Rust garbage collection.\n \n+#include <algorithm>\n #include <utility>\n+#include <vector>\n #include <stdint.h>\n \n #include \"rust_gc.h\"\n@@ -12,33 +14,79 @@\n #include <dlfcn.h>\n #endif\n \n+#define DPRINT(fmt,...)     fprintf(stderr, fmt, ##__VA_ARGS__)\n+\n+#define END_OF_STACK_RA     (void (*)())0xdeadbeef\n+\n namespace gc {\n \n-struct root {\n+struct frame {\n+    uint8_t *bp;    // The frame pointer.\n+    void (*ra)();   // The return address.\n+\n+    frame(void *in_bp) : bp((uint8_t *)in_bp) {}\n+\n+    inline void read_ra() {\n+        ra = *(void (**)())(bp + sizeof(void *));\n+    }\n+\n+    inline void next() {\n+        bp = *(uint8_t **)bp;\n+    }\n+};\n+\n+struct root_info {\n     intptr_t frame_offset;\n     uintptr_t dynamic;  // 0 = static, 1 = dynamic\n     type_desc *tydesc;\n };\n \n+struct root {\n+    type_desc *tydesc;\n+    uint8_t *data;\n+\n+    root(const root_info &info, const frame &frame)\n+    : tydesc(info.tydesc),\n+      data((uint8_t *)frame.bp + info.frame_offset) {}\n+};\n+\n struct safe_point {\n     uintptr_t n_roots;\n-    root roots[0];\n+    root_info roots[0];\n+};\n+\n+struct safe_point_index_entry {\n+    void (*ra)();                   // The return address.\n+    const safe_point *safe_point;   // The safe point.\n+\n+    struct cmp {\n+        bool operator()(const safe_point_index_entry &entry, void (*ra)())\n+                const {\n+            return entry.ra < ra;\n+        }\n+        bool operator()(void (*ra)(), const safe_point_index_entry &entry)\n+                const {\n+            return ra < entry.ra;\n+        }\n+    };\n };\n \n class safe_point_map {\n     uintptr_t n_safe_points;\n-    const std::pair<void *,const safe_point *> *index;\n+    const safe_point_index_entry *index;\n     const safe_point *safe_points;\n \n public:\n     safe_point_map() {\n         const uintptr_t *data = get_safe_point_data();\n         n_safe_points = *data++;\n-        index = (const std::pair<void *,const safe_point *> *)data;\n+        index = (const safe_point_index_entry *)data;\n         data += n_safe_points * 2;\n         safe_points = (const safe_point *)data;\n     }\n \n+    const safe_point *get_safe_point(void (*addr)());\n+\n     static const uintptr_t *get_safe_point_data() {\n         static bool init = false;\n         static const uintptr_t *data;\n@@ -56,13 +104,76 @@ class safe_point_map {\n     }\n };\n \n+class gc {\n+private:\n+    void mark(std::vector<root> &roots);\n+    void sweep();\n+\n+public:\n+    void run(rust_task *task);\n+    std::vector<frame> backtrace();\n+};\n+\n+const safe_point *\n+safe_point_map::get_safe_point(void (*addr)()) {\n+    safe_point_index_entry::cmp cmp;\n+    const safe_point_index_entry *entry =\n+        std::lower_bound(index, index + n_safe_points, addr, cmp);\n+    return (entry && entry->ra == addr) ? entry->safe_point : NULL;\n+}\n+\n void\n-gc(rust_task *task) {\n-    safe_point_map map;\n+gc::mark(std::vector<root> &roots) {\n+    std::vector<root>::iterator ri = roots.begin(), rend = roots.end();\n+    while (ri < rend) {\n+        DPRINT(\"root: %p\\n\", ri->data);\n+        ++ri;\n+    }\n+    // TODO\n+}\n \n+void\n+gc::sweep() {\n     // TODO\n }\n \n+std::vector<frame>\n+gc::backtrace() {\n+    std::vector<frame> frames;\n+    frame f(__builtin_frame_address(0));\n+    while (f.ra != END_OF_STACK_RA) {\n+        f.read_ra();\n+        frames.push_back(f);\n+        f.next();\n+    }\n+    return frames;\n+}\n+\n+void\n+gc::run(rust_task *task) {\n+    safe_point_map map;\n+\n+    // Find roots.\n+    std::vector<root> roots;\n+    std::vector<frame> call_stack = backtrace();\n+    for (unsigned i = 0; i < call_stack.size(); i++) {\n+        frame f = call_stack[i];\n+        const safe_point *sp = map.get_safe_point(f.ra);\n+        if (!sp)\n+            continue;\n+\n+        DPRINT(\"%u: ra %p, ebp %p\\n\", i, call_stack[i].ra, call_stack[i].bp);\n+        for (unsigned j = 0; j < sp->n_roots; j++) {\n+            root r(sp->roots[j], f);\n+            roots.push_back(r);\n+        }\n+    }\n+\n+    // Mark and sweep.\n+    mark(roots);\n+    sweep();\n+}\n+\n void\n maybe_gc(rust_task *task) {\n     if (safe_point_map::get_safe_point_data() == NULL)\n@@ -75,8 +186,10 @@ maybe_gc(rust_task *task) {\n         zeal = ev && ev[0] != '\\0' && ev[0] != '0';\n     }\n \n-    if (zeal)\n-        gc::gc(task);\n+    if (zeal) {\n+        gc gc;\n+        gc.run(task);\n+    }\n }\n \n }"}]}