{"sha": "7dd7017547c83bb3d33a785047e6da0a1464c0ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkZDcwMTc1NDdjODNiYjNkMzNhNzg1MDQ3ZTZkYTBhMTQ2NGMwYWQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-06T16:02:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-06T16:02:39Z"}, "message": "Merge #8376\n\n8376: infer: remove `record_field_resolutions` field r=flodiebold a=jonas-schievink\n\nIt stores no useful data, since we can derive all fields from\r\n`variant_resolutions`\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "b391af28f6bfaee53effcc64aeab325e95b5b461", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b391af28f6bfaee53effcc64aeab325e95b5b461"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7dd7017547c83bb3d33a785047e6da0a1464c0ad", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgbIYfCRBK7hj4Ov3rIwAAdHIIACb1EF0KSZ5rElOnKegeMp3a\nMEqsP1cKuXBG1lGu/q6QGguKgV8Rr2/C/Ms9PdTt5h4VERP3eMfLDmeq6gPTve9k\nULtcaTB5wia9cezUZ9j7kh9feTsS8fGDcFBm/Jeyo9j+ETc6ahQd0xhlwSI3S9+3\nUHJeSzRP8rGZYlBFLM8Zr6EBs3fVsBF2XzWk6QKqa2C36axeJZI91MTw+wpRm367\nTGLK257zXdfu+VzPROwFV/OPr2K13aWfz1pK/PGfrCUIy8YzRMRcLnanUC8RQgMl\nXQAtv867CdJ4ReUqYSyQeSPKyGqLH72DeAlxIuqpn1s2Jxi7Z5zCQOe3vcHA7Aw=\n=r+N+\n-----END PGP SIGNATURE-----\n", "payload": "tree b391af28f6bfaee53effcc64aeab325e95b5b461\nparent 74711deb724e0a6c84a221bfdfa15eaedbdb2300\nparent e9752308bbaa2fd720e1eeaca970977fe22514d1\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1617724959 +0000\ncommitter GitHub <noreply@github.com> 1617724959 +0000\n\nMerge #8376\n\n8376: infer: remove `record_field_resolutions` field r=flodiebold a=jonas-schievink\n\nIt stores no useful data, since we can derive all fields from\r\n`variant_resolutions`\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7dd7017547c83bb3d33a785047e6da0a1464c0ad", "html_url": "https://github.com/rust-lang/rust/commit/7dd7017547c83bb3d33a785047e6da0a1464c0ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7dd7017547c83bb3d33a785047e6da0a1464c0ad/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74711deb724e0a6c84a221bfdfa15eaedbdb2300", "url": "https://api.github.com/repos/rust-lang/rust/commits/74711deb724e0a6c84a221bfdfa15eaedbdb2300", "html_url": "https://github.com/rust-lang/rust/commit/74711deb724e0a6c84a221bfdfa15eaedbdb2300"}, {"sha": "e9752308bbaa2fd720e1eeaca970977fe22514d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9752308bbaa2fd720e1eeaca970977fe22514d1", "html_url": "https://github.com/rust-lang/rust/commit/e9752308bbaa2fd720e1eeaca970977fe22514d1"}], "stats": {"total": 75, "additions": 35, "deletions": 40}, "files": [{"sha": "c013e78d945d24df3931e06ef08265e2ef1bb1e8", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7dd7017547c83bb3d33a785047e6da0a1464c0ad/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dd7017547c83bb3d33a785047e6da0a1464c0ad/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=7dd7017547c83bb3d33a785047e6da0a1464c0ad", "patch": "@@ -161,23 +161,26 @@ impl SourceAnalyzer {\n         db: &dyn HirDatabase,\n         field: &ast::RecordExprField,\n     ) -> Option<(Field, Option<Local>)> {\n-        let expr_id =\n-            self.body_source_map.as_ref()?.node_field(InFile::new(self.file_id, field))?;\n+        let record_expr = ast::RecordExpr::cast(field.syntax().parent().and_then(|p| p.parent())?)?;\n+        let expr = ast::Expr::from(record_expr);\n+        let expr_id = self.body_source_map.as_ref()?.node_expr(InFile::new(self.file_id, &expr))?;\n \n+        let local_name = field.field_name()?.as_name();\n         let local = if field.name_ref().is_some() {\n             None\n         } else {\n-            let local_name = field.field_name()?.as_name();\n-            let path = ModPath::from_segments(PathKind::Plain, once(local_name));\n+            let path = ModPath::from_segments(PathKind::Plain, once(local_name.clone()));\n             match self.resolver.resolve_path_in_value_ns_fully(db.upcast(), &path) {\n                 Some(ValueNs::LocalBinding(pat_id)) => {\n                     Some(Local { pat_id, parent: self.resolver.body_owner()? })\n                 }\n                 _ => None,\n             }\n         };\n-        let struct_field = self.infer.as_ref()?.record_field_resolution(expr_id)?;\n-        Some((struct_field.into(), local))\n+        let variant = self.infer.as_ref()?.variant_resolution_for_expr(expr_id)?;\n+        let variant_data = variant.variant_data(db.upcast());\n+        let field = FieldId { parent: variant, local_id: variant_data.field(&local_name)? };\n+        Some((field.into(), local))\n     }\n \n     pub(crate) fn resolve_record_pat_field("}, {"sha": "abd6c553fedd0a43fc65e703e94a6092406657fa", "filename": "crates/hir_def/src/lib.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7dd7017547c83bb3d33a785047e6da0a1464c0ad/crates%2Fhir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dd7017547c83bb3d33a785047e6da0a1464c0ad/crates%2Fhir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Flib.rs?ref=7dd7017547c83bb3d33a785047e6da0a1464c0ad", "patch": "@@ -56,6 +56,7 @@ use std::{\n     sync::Arc,\n };\n \n+use adt::VariantData;\n use base_db::{impl_intern_key, salsa, CrateId};\n use hir_expand::{\n     ast_id_map::FileAstId,\n@@ -442,6 +443,18 @@ pub enum VariantId {\n }\n impl_from!(EnumVariantId, StructId, UnionId for VariantId);\n \n+impl VariantId {\n+    pub fn variant_data(self, db: &dyn db::DefDatabase) -> Arc<VariantData> {\n+        match self {\n+            VariantId::StructId(it) => db.struct_data(it).variant_data.clone(),\n+            VariantId::UnionId(it) => db.union_data(it).variant_data.clone(),\n+            VariantId::EnumVariantId(it) => {\n+                db.enum_data(it.parent).variants[it.local_id].variant_data.clone()\n+            }\n+        }\n+    }\n+}\n+\n trait Intern {\n     type ID;\n     fn intern(self, db: &dyn db::DefDatabase) -> Self::ID;"}, {"sha": "79602c3dded3e4dcd54cac25a7ef924d78babaf3", "filename": "crates/hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7dd7017547c83bb3d33a785047e6da0a1464c0ad/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dd7017547c83bb3d33a785047e6da0a1464c0ad/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=7dd7017547c83bb3d33a785047e6da0a1464c0ad", "patch": "@@ -14,7 +14,6 @@ use crate::{\n         MismatchedArgCount, MissingFields, MissingMatchArms, MissingOkOrSomeInTailExpr,\n         MissingPatFields, RemoveThisSemicolon,\n     },\n-    utils::variant_data,\n     AdtId, InferenceResult, Interner, TyExt, TyKind,\n };\n \n@@ -104,7 +103,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n             let root = source_ptr.file_syntax(db.upcast());\n             if let ast::Expr::RecordExpr(record_expr) = &source_ptr.value.to_node(&root) {\n                 if let Some(_) = record_expr.record_expr_field_list() {\n-                    let variant_data = variant_data(db.upcast(), variant_def);\n+                    let variant_data = variant_def.variant_data(db.upcast());\n                     let missed_fields = missed_fields\n                         .into_iter()\n                         .map(|idx| variant_data.fields()[idx].name.clone())\n@@ -135,7 +134,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n                 let root = source_ptr.file_syntax(db.upcast());\n                 if let ast::Pat::RecordPat(record_pat) = expr.to_node(&root) {\n                     if let Some(_) = record_pat.record_pat_field_list() {\n-                        let variant_data = variant_data(db.upcast(), variant_def);\n+                        let variant_data = variant_def.variant_data(db.upcast());\n                         let missed_fields = missed_fields\n                             .into_iter()\n                             .map(|idx| variant_data.fields()[idx].name.clone())\n@@ -453,7 +452,7 @@ pub fn record_literal_missing_fields(\n         return None;\n     }\n \n-    let variant_data = variant_data(db.upcast(), variant_def);\n+    let variant_data = variant_def.variant_data(db.upcast());\n \n     let specified_fields: FxHashSet<_> = fields.iter().map(|f| &f.name).collect();\n     let missed_fields: Vec<LocalFieldId> = variant_data\n@@ -483,7 +482,7 @@ pub fn record_pattern_missing_fields(\n         return None;\n     }\n \n-    let variant_data = variant_data(db.upcast(), variant_def);\n+    let variant_data = variant_def.variant_data(db.upcast());\n \n     let specified_fields: FxHashSet<_> = fields.iter().map(|f| &f.name).collect();\n     let missed_fields: Vec<LocalFieldId> = variant_data"}, {"sha": "c63878e7a61c09e23facc55d8288720fbb3cfc93", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7dd7017547c83bb3d33a785047e6da0a1464c0ad/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dd7017547c83bb3d33a785047e6da0a1464c0ad/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=7dd7017547c83bb3d33a785047e6da0a1464c0ad", "patch": "@@ -131,8 +131,6 @@ pub struct InferenceResult {\n     method_resolutions: FxHashMap<ExprId, FunctionId>,\n     /// For each field access expr, records the field it resolves to.\n     field_resolutions: FxHashMap<ExprId, FieldId>,\n-    /// For each field in record literal, records the field it resolves to.\n-    record_field_resolutions: FxHashMap<ExprId, FieldId>,\n     record_pat_field_resolutions: FxHashMap<PatId, FieldId>,\n     /// For each struct literal, records the variant it resolves to.\n     variant_resolutions: FxHashMap<ExprOrPatId, VariantId>,\n@@ -153,9 +151,6 @@ impl InferenceResult {\n     pub fn field_resolution(&self, expr: ExprId) -> Option<FieldId> {\n         self.field_resolutions.get(&expr).copied()\n     }\n-    pub fn record_field_resolution(&self, expr: ExprId) -> Option<FieldId> {\n-        self.record_field_resolutions.get(&expr).copied()\n-    }\n     pub fn record_pat_field_resolution(&self, pat: PatId) -> Option<FieldId> {\n         self.record_pat_field_resolutions.get(&pat).copied()\n     }"}, {"sha": "9ab0fa212c2f635c12a83fe32ba0ba24c589bd13", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7dd7017547c83bb3d33a785047e6da0a1464c0ad/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dd7017547c83bb3d33a785047e6da0a1464c0ad/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=7dd7017547c83bb3d33a785047e6da0a1464c0ad", "patch": "@@ -21,7 +21,7 @@ use crate::{\n     primitive::{self, UintTy},\n     static_lifetime, to_chalk_trait_id,\n     traits::{chalk::from_chalk, FnTrait},\n-    utils::{generics, variant_data, Generics},\n+    utils::{generics, Generics},\n     AdtId, Binders, CallableDefId, FnPointer, FnSig, FnSubst, InEnvironment, Interner,\n     ProjectionTyExt, Rawness, Scalar, Substitution, TraitRef, Ty, TyBuilder, TyExt, TyKind,\n     TypeWalk,\n@@ -414,7 +414,7 @@ impl<'a> InferenceContext<'a> {\n \n                 let substs = ty.substs().cloned().unwrap_or_else(|| Substitution::empty(&Interner));\n                 let field_types = def_id.map(|it| self.db.field_types(it)).unwrap_or_default();\n-                let variant_data = def_id.map(|it| variant_data(self.db.upcast(), it));\n+                let variant_data = def_id.map(|it| it.variant_data(self.db.upcast()));\n                 for field in fields.iter() {\n                     let field_def =\n                         variant_data.as_ref().and_then(|it| match it.field(&field.name) {\n@@ -426,9 +426,6 @@ impl<'a> InferenceContext<'a> {\n                                 None\n                             }\n                         });\n-                    if let Some(field_def) = field_def {\n-                        self.result.record_field_resolutions.insert(field.expr, field_def);\n-                    }\n                     let field_ty = field_def.map_or(self.err_ty(), |it| {\n                         field_types[it.local_id].clone().substitute(&Interner, &substs)\n                     });"}, {"sha": "942f70edf534357015fbdb9f650fab5b87a5d8a7", "filename": "crates/hir_ty/src/infer/pat.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7dd7017547c83bb3d33a785047e6da0a1464c0ad/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dd7017547c83bb3d33a785047e6da0a1464c0ad/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=7dd7017547c83bb3d33a785047e6da0a1464c0ad", "patch": "@@ -13,8 +13,8 @@ use hir_expand::name::Name;\n \n use super::{BindingMode, Expectation, InferenceContext};\n use crate::{\n-    lower::lower_to_chalk_mutability, static_lifetime, utils::variant_data, Interner, Substitution,\n-    Ty, TyBuilder, TyExt, TyKind,\n+    lower::lower_to_chalk_mutability, static_lifetime, Interner, Substitution, Ty, TyBuilder,\n+    TyExt, TyKind,\n };\n \n impl<'a> InferenceContext<'a> {\n@@ -28,7 +28,7 @@ impl<'a> InferenceContext<'a> {\n         ellipsis: Option<usize>,\n     ) -> Ty {\n         let (ty, def) = self.resolve_variant(path);\n-        let var_data = def.map(|it| variant_data(self.db.upcast(), it));\n+        let var_data = def.map(|it| it.variant_data(self.db.upcast()));\n         if let Some(variant) = def {\n             self.write_variant_resolution(id.into(), variant);\n         }\n@@ -68,7 +68,7 @@ impl<'a> InferenceContext<'a> {\n         id: PatId,\n     ) -> Ty {\n         let (ty, def) = self.resolve_variant(path);\n-        let var_data = def.map(|it| variant_data(self.db.upcast(), it));\n+        let var_data = def.map(|it| it.variant_data(self.db.upcast()));\n         if let Some(variant) = def {\n             self.write_variant_resolution(id.into(), variant);\n         }"}, {"sha": "4ca6aa53856bc3b07e0f5402e1c772ed32094b51", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7dd7017547c83bb3d33a785047e6da0a1464c0ad/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dd7017547c83bb3d33a785047e6da0a1464c0ad/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=7dd7017547c83bb3d33a785047e6da0a1464c0ad", "patch": "@@ -30,8 +30,7 @@ use crate::{\n     dummy_usize_const, static_lifetime, to_assoc_type_id, to_chalk_trait_id, to_placeholder_idx,\n     traits::chalk::{Interner, ToChalk},\n     utils::{\n-        all_super_trait_refs, associated_type_by_name_including_super_traits, generics,\n-        variant_data, Generics,\n+        all_super_trait_refs, associated_type_by_name_including_super_traits, generics, Generics,\n     },\n     AliasEq, AliasTy, Binders, BoundVar, CallableSig, DebruijnIndex, DynTy, FnPointer, FnSig,\n     FnSubst, ImplTraitId, OpaqueTy, PolyFnSig, ProjectionTy, QuantifiedWhereClause,\n@@ -879,7 +878,7 @@ pub(crate) fn field_types_query(\n     db: &dyn HirDatabase,\n     variant_id: VariantId,\n ) -> Arc<ArenaMap<LocalFieldId, Binders<Ty>>> {\n-    let var_data = variant_data(db.upcast(), variant_id);\n+    let var_data = variant_id.variant_data(db.upcast());\n     let (resolver, def): (_, GenericDefId) = match variant_id {\n         VariantId::StructId(it) => (it.resolver(db.upcast()), it.into()),\n         VariantId::UnionId(it) => (it.resolver(db.upcast()), it.into()),"}, {"sha": "0a424f607d7f45db2088ebaf134cdc4faace708b", "filename": "crates/hir_ty/src/utils.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7dd7017547c83bb3d33a785047e6da0a1464c0ad/crates%2Fhir_ty%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dd7017547c83bb3d33a785047e6da0a1464c0ad/crates%2Fhir_ty%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Futils.rs?ref=7dd7017547c83bb3d33a785047e6da0a1464c0ad", "patch": "@@ -4,7 +4,6 @@ use std::sync::Arc;\n \n use chalk_ir::{BoundVar, DebruijnIndex};\n use hir_def::{\n-    adt::VariantData,\n     db::DefDatabase,\n     generics::{\n         GenericParams, TypeParamData, TypeParamProvenance, WherePredicate, WherePredicateTypeTarget,\n@@ -13,7 +12,7 @@ use hir_def::{\n     path::Path,\n     resolver::{HasResolver, TypeNs},\n     type_ref::TypeRef,\n-    AssocContainerId, GenericDefId, Lookup, TraitId, TypeAliasId, TypeParamId, VariantId,\n+    AssocContainerId, GenericDefId, Lookup, TraitId, TypeAliasId, TypeParamId,\n };\n use hir_expand::name::{name, Name};\n \n@@ -136,16 +135,6 @@ pub(super) fn associated_type_by_name_including_super_traits(\n     })\n }\n \n-pub(super) fn variant_data(db: &dyn DefDatabase, var: VariantId) -> Arc<VariantData> {\n-    match var {\n-        VariantId::StructId(it) => db.struct_data(it).variant_data.clone(),\n-        VariantId::UnionId(it) => db.union_data(it).variant_data.clone(),\n-        VariantId::EnumVariantId(it) => {\n-            db.enum_data(it.parent).variants[it.local_id].variant_data.clone()\n-        }\n-    }\n-}\n-\n /// Helper for mutating `Arc<[T]>` (i.e. `Arc::make_mut` for Arc slices).\n /// The underlying values are cloned if there are other strong references.\n pub(crate) fn make_mut_slice<T: Clone>(a: &mut Arc<[T]>) -> &mut [T] {"}]}