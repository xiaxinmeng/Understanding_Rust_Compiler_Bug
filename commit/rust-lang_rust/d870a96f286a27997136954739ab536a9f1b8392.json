{"sha": "d870a96f286a27997136954739ab536a9f1b8392", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4NzBhOTZmMjg2YTI3OTk3MTM2OTU0NzM5YWI1MzZhOWYxYjgzOTI=", "commit": {"author": {"name": "Marco Concetto Rudilosso", "email": "marcoconcettorudilosso@gmail.com", "date": "2017-10-16T18:39:32Z"}, "committer": {"name": "Marco Concetto Rudilosso", "email": "marcoconcettorudilosso@gmail.com", "date": "2017-10-21T21:50:21Z"}, "message": "trans_ -> fully_ prefix", "tree": {"sha": "1b89f1713786745d95089c8e78016be8038dcb57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b89f1713786745d95089c8e78016be8038dcb57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d870a96f286a27997136954739ab536a9f1b8392", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d870a96f286a27997136954739ab536a9f1b8392", "html_url": "https://github.com/rust-lang/rust/commit/d870a96f286a27997136954739ab536a9f1b8392", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d870a96f286a27997136954739ab536a9f1b8392/comments", "author": {"login": "Maaarcocr", "id": 9624267, "node_id": "MDQ6VXNlcjk2MjQyNjc=", "avatar_url": "https://avatars.githubusercontent.com/u/9624267?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Maaarcocr", "html_url": "https://github.com/Maaarcocr", "followers_url": "https://api.github.com/users/Maaarcocr/followers", "following_url": "https://api.github.com/users/Maaarcocr/following{/other_user}", "gists_url": "https://api.github.com/users/Maaarcocr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Maaarcocr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Maaarcocr/subscriptions", "organizations_url": "https://api.github.com/users/Maaarcocr/orgs", "repos_url": "https://api.github.com/users/Maaarcocr/repos", "events_url": "https://api.github.com/users/Maaarcocr/events{/privacy}", "received_events_url": "https://api.github.com/users/Maaarcocr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Maaarcocr", "id": 9624267, "node_id": "MDQ6VXNlcjk2MjQyNjc=", "avatar_url": "https://avatars.githubusercontent.com/u/9624267?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Maaarcocr", "html_url": "https://github.com/Maaarcocr", "followers_url": "https://api.github.com/users/Maaarcocr/followers", "following_url": "https://api.github.com/users/Maaarcocr/following{/other_user}", "gists_url": "https://api.github.com/users/Maaarcocr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Maaarcocr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Maaarcocr/subscriptions", "organizations_url": "https://api.github.com/users/Maaarcocr/orgs", "repos_url": "https://api.github.com/users/Maaarcocr/repos", "events_url": "https://api.github.com/users/Maaarcocr/events{/privacy}", "received_events_url": "https://api.github.com/users/Maaarcocr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2ebe96c6347b9929756454d26dc9efff93c3925", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2ebe96c6347b9929756454d26dc9efff93c3925", "html_url": "https://github.com/rust-lang/rust/commit/f2ebe96c6347b9929756454d26dc9efff93c3925"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "79eeebfb250316c5a4d598ae3948b05561f55f7b", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d870a96f286a27997136954739ab536a9f1b8392/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d870a96f286a27997136954739ab536a9f1b8392/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=d870a96f286a27997136954739ab536a9f1b8392", "patch": "@@ -480,16 +480,16 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n     {\n         assert!(!value.needs_subst());\n         let value = self.erase_late_bound_regions(value);\n-        self.trans_normalize_associated_types_in(&value)\n+        self.fully_normalize_associated_types_in(&value)\n     }\n \n     /// Fully normalizes any associated types in `value`, using an\n     /// empty environment and `Reveal::All` mode (therefore, suitable\n     /// only for monomorphized code during trans, basically).\n-    pub fn trans_normalize_associated_types_in<T>(self, value: &T) -> T\n+    pub fn fully_normalize_associated_types_in<T>(self, value: &T) -> T\n         where T: TransNormalize<'tcx>\n     {\n-        debug!(\"trans_normalize_associated_types_in(t={:?})\", value);\n+        debug!(\"fully_normalize_associated_types_in(t={:?})\", value);\n \n         let param_env = ty::ParamEnv::empty(Reveal::All);\n         let value = self.erase_regions(value);"}, {"sha": "4616f5a42d6d2b59db7af2312d6af1c0187a5fd3", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d870a96f286a27997136954739ab536a9f1b8392/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d870a96f286a27997136954739ab536a9f1b8392/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=d870a96f286a27997136954739ab536a9f1b8392", "patch": "@@ -2323,6 +2323,6 @@ pub fn provide(providers: &mut ty::maps::Providers) {\n         tcx.sess.features.borrow().clone_closures\n     };\n     providers.normalize_ty = |tcx, ty| {\n-        tcx.trans_normalize_associated_types_in(&ty)\n+        tcx.fully_normalize_associated_types_in(&ty)\n     };\n }"}, {"sha": "38461b0b36419d0be0b344ce64e92c4c58eed735", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d870a96f286a27997136954739ab536a9f1b8392/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d870a96f286a27997136954739ab536a9f1b8392/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=d870a96f286a27997136954739ab536a9f1b8392", "patch": "@@ -431,7 +431,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                         // fields are actually safe.\n                         let mut all_phantom = true;\n                         for field in &def.struct_variant().fields {\n-                            let field_ty = cx.trans_normalize_associated_types_in(\n+                            let field_ty = cx.fully_normalize_associated_types_in(\n                                 &field.ty(cx, substs)\n                             );\n                             let r = self.check_type_for_ffi(cache, field_ty);\n@@ -465,7 +465,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n \n                         let mut all_phantom = true;\n                         for field in &def.struct_variant().fields {\n-                            let field_ty = cx.trans_normalize_associated_types_in(\n+                            let field_ty = cx.fully_normalize_associated_types_in(\n                                 &field.ty(cx, substs)\n                             );\n                             let r = self.check_type_for_ffi(cache, field_ty);\n@@ -520,7 +520,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                         // Check the contained variants.\n                         for variant in &def.variants {\n                             for field in &variant.fields {\n-                                let arg = cx.trans_normalize_associated_types_in(\n+                                let arg = cx.fully_normalize_associated_types_in(\n                                     &field.ty(cx, substs)\n                                 );\n                                 let r = self.check_type_for_ffi(cache, arg);\n@@ -635,7 +635,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n     fn check_type_for_ffi_and_report_errors(&mut self, sp: Span, ty: Ty<'tcx>) {\n         // it is only OK to use this function because extern fns cannot have\n         // any generic types right now:\n-        let ty = self.cx.tcx.trans_normalize_associated_types_in(&ty);\n+        let ty = self.cx.tcx.fully_normalize_associated_types_in(&ty);\n \n         match self.check_type_for_ffi(&mut FxHashSet(), ty) {\n             FfiResult::FfiSafe => {}"}, {"sha": "b06f8e4e671162bc007e4a20392c3d9f43ddb601", "filename": "src/librustc_trans/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d870a96f286a27997136954739ab536a9f1b8392/src%2Flibrustc_trans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d870a96f286a27997136954739ab536a9f1b8392/src%2Flibrustc_trans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fadt.rs?ref=d870a96f286a27997136954739ab536a9f1b8392", "patch": "@@ -80,7 +80,7 @@ pub fn compute_fields<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>,\n         ty::TyGenerator(def_id, substs, _) => {\n             if variant_index > 0 { bug!(\"{} is a generator, which only has one variant\", t);}\n             substs.field_tys(def_id, cx.tcx()).map(|t| {\n-                cx.tcx().trans_normalize_associated_types_in(&t)\n+                cx.tcx().fully_normalize_associated_types_in(&t)\n             }).collect()\n         },\n         _ => bug!(\"{} is not a type that can have fields.\", t)"}, {"sha": "6fd24c1786c6971bbea09af0216ce3f4fddeb7ce", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d870a96f286a27997136954739ab536a9f1b8392/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d870a96f286a27997136954739ab536a9f1b8392/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=d870a96f286a27997136954739ab536a9f1b8392", "patch": "@@ -642,7 +642,7 @@ impl<'a, 'tcx> LayoutTyper<'tcx> for &'a SharedCrateContext<'a, 'tcx> {\n     }\n \n     fn normalize_projections(self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        self.tcx().trans_normalize_associated_types_in(&ty)\n+        self.tcx().fully_normalize_associated_types_in(&ty)\n     }\n }\n "}, {"sha": "3bde78e2c6a6075209aca3a3ea7b800c42d55b5d", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d870a96f286a27997136954739ab536a9f1b8392/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d870a96f286a27997136954739ab536a9f1b8392/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=d870a96f286a27997136954739ab536a9f1b8392", "patch": "@@ -582,7 +582,7 @@ pub fn type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         }\n         ty::TyGenerator(def_id, substs, _) => {\n             let upvar_tys : Vec<_> = substs.field_tys(def_id, cx.tcx()).map(|t| {\n-                cx.tcx().trans_normalize_associated_types_in(&t)\n+                cx.tcx().fully_normalize_associated_types_in(&t)\n             }).collect();\n             prepare_tuple_metadata(cx,\n                                    t,"}, {"sha": "1a2842920161888064f6ca04b241739ca9513836", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d870a96f286a27997136954739ab536a9f1b8392/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d870a96f286a27997136954739ab536a9f1b8392/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=d870a96f286a27997136954739ab536a9f1b8392", "patch": "@@ -376,7 +376,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                 name_to_append_suffix_to.push_str(\",\");\n             }\n \n-            let actual_type = cx.tcx().trans_normalize_associated_types_in(&actual_type);\n+            let actual_type = cx.tcx().fully_normalize_associated_types_in(&actual_type);\n             // Add actual type name to <...> clause of function name\n             let actual_type_name = compute_debuginfo_type_name(cx,\n                                                                actual_type,\n@@ -389,7 +389,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         let template_params: Vec<_> = if cx.sess().opts.debuginfo == FullDebugInfo {\n             let names = get_type_parameter_names(cx, generics);\n             substs.types().zip(names).map(|(ty, name)| {\n-                let actual_type = cx.tcx().trans_normalize_associated_types_in(&ty);\n+                let actual_type = cx.tcx().fully_normalize_associated_types_in(&ty);\n                 let actual_type_metadata = type_metadata(cx, actual_type, syntax_pos::DUMMY_SP);\n                 let name = CString::new(name.as_str().as_bytes()).unwrap();\n                 unsafe {"}, {"sha": "ab61dacf010ae1f51637f15453ebbf0a5b023095", "filename": "src/librustc_trans_utils/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d870a96f286a27997136954739ab536a9f1b8392/src%2Flibrustc_trans_utils%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d870a96f286a27997136954739ab536a9f1b8392/src%2Flibrustc_trans_utils%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Fmonomorphize.rs?ref=d870a96f286a27997136954739ab536a9f1b8392", "patch": "@@ -131,6 +131,6 @@ pub fn field_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           f: &'tcx ty::FieldDef)\n                           -> Ty<'tcx>\n {\n-    tcx.trans_normalize_associated_types_in(&f.ty(tcx, param_substs))\n+    tcx.fully_normalize_associated_types_in(&f.ty(tcx, param_substs))\n }\n "}]}