{"sha": "801be21d11806d37bacd7c7adaeb93a33871f31e", "node_id": "C_kwDOAAsO6NoAKDgwMWJlMjFkMTE4MDZkMzdiYWNkN2M3YWRhZWI5M2EzMzg3MWYzMWU", "commit": {"author": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-02-11T19:36:02Z"}, "committer": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-03-07T16:47:18Z"}, "message": "Remove dead/useless code", "tree": {"sha": "300395a83ecf0e1858ae5634566ac7baa2a5bca7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/300395a83ecf0e1858ae5634566ac7baa2a5bca7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/801be21d11806d37bacd7c7adaeb93a33871f31e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/801be21d11806d37bacd7c7adaeb93a33871f31e", "html_url": "https://github.com/rust-lang/rust/commit/801be21d11806d37bacd7c7adaeb93a33871f31e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/801be21d11806d37bacd7c7adaeb93a33871f31e/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e93a48c32852b09f4270348883b61edba5bb068", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e93a48c32852b09f4270348883b61edba5bb068", "html_url": "https://github.com/rust-lang/rust/commit/8e93a48c32852b09f4270348883b61edba5bb068"}], "stats": {"total": 58, "additions": 0, "deletions": 58}, "files": [{"sha": "3b255de6314aaf332193733def5cbf8c5cc9f1cc", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/801be21d11806d37bacd7c7adaeb93a33871f31e/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/801be21d11806d37bacd7c7adaeb93a33871f31e/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=801be21d11806d37bacd7c7adaeb93a33871f31e", "patch": "@@ -230,8 +230,6 @@ impl<'mir, 'tcx> Checker<'mir, 'tcx> {\n                 }\n             }\n \n-            self.check_item_predicates();\n-\n             for (idx, local) in body.local_decls.iter_enumerated() {\n                 // Handle the return place below.\n                 if idx == RETURN_PLACE || local.internal {\n@@ -364,40 +362,6 @@ impl<'mir, 'tcx> Checker<'mir, 'tcx> {\n         }\n     }\n \n-    fn check_item_predicates(&mut self) {\n-        let ConstCx { tcx, .. } = *self.ccx;\n-\n-        let mut current = self.def_id().to_def_id();\n-        loop {\n-            let predicates = tcx.predicates_of(current);\n-            for (predicate, _) in predicates.predicates {\n-                match predicate.kind().skip_binder() {\n-                    ty::PredicateKind::RegionOutlives(_)\n-                    | ty::PredicateKind::TypeOutlives(_)\n-                    | ty::PredicateKind::WellFormed(_)\n-                    | ty::PredicateKind::Projection(_)\n-                    | ty::PredicateKind::ConstEvaluatable(..)\n-                    | ty::PredicateKind::ConstEquate(..)\n-                    | ty::PredicateKind::Trait(..)\n-                    | ty::PredicateKind::TypeWellFormedFromEnv(..) => continue,\n-                    ty::PredicateKind::ObjectSafe(_) => {\n-                        bug!(\"object safe predicate on function: {:#?}\", predicate)\n-                    }\n-                    ty::PredicateKind::ClosureKind(..) => {\n-                        bug!(\"closure kind predicate on function: {:#?}\", predicate)\n-                    }\n-                    ty::PredicateKind::Subtype(_) | ty::PredicateKind::Coerce(_) => {\n-                        bug!(\"subtype/coerce predicate on function: {:#?}\", predicate)\n-                    }\n-                }\n-            }\n-            match predicates.parent {\n-                Some(parent) => current = parent,\n-                None => break,\n-            }\n-        }\n-    }\n-\n     fn check_mut_borrow(&mut self, local: Local, kind: hir::BorrowKind) {\n         match self.const_kind() {\n             // In a const fn all borrows are transient or point to the places given via"}, {"sha": "0f5bcabeb846ba8511beb288462279d2e675d7da", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/801be21d11806d37bacd7c7adaeb93a33871f31e/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/801be21d11806d37bacd7c7adaeb93a33871f31e/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=801be21d11806d37bacd7c7adaeb93a33871f31e", "patch": "@@ -816,26 +816,4 @@ pub mod ty {\n             )\n         }\n     }\n-\n-    /// A trait bound with the `?const Trait` opt-out\n-    #[derive(Debug)]\n-    pub struct TraitBoundNotConst;\n-    impl<'tcx> NonConstOp<'tcx> for TraitBoundNotConst {\n-        fn status_in_item(&self, _: &ConstCx<'_, 'tcx>) -> Status {\n-            Status::Unstable(sym::const_trait_bound_opt_out)\n-        }\n-\n-        fn build_error(\n-            &self,\n-            ccx: &ConstCx<'_, 'tcx>,\n-            span: Span,\n-        ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-            feature_err(\n-                &ccx.tcx.sess.parse_sess,\n-                sym::const_trait_bound_opt_out,\n-                span,\n-                \"`?const Trait` syntax is unstable\",\n-            )\n-        }\n-    }\n }"}]}