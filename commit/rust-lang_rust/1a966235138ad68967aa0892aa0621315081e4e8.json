{"sha": "1a966235138ad68967aa0892aa0621315081e4e8", "node_id": "C_kwDOAAsO6NoAKDFhOTY2MjM1MTM4YWQ2ODk2N2FhMDg5MmFhMDYyMTMxNTA4MWU0ZTg", "commit": {"author": {"name": "Martin Habovstiak", "email": "martin.habovstiak@gmail.com", "date": "2022-01-07T23:03:02Z"}, "committer": {"name": "Martin Habovstiak", "email": "martin.habovstiak@gmail.com", "date": "2022-01-08T17:04:51Z"}, "message": "Implemented const casts of raw pointers\n\nThis adds `as_mut()` method for `*const T` and `as_const()` for `*mut T`\nwhich are intended to make casting of consts safer. This was discussed\nin the [internals discussion][discussion].\n\n[discussion]: https://internals.rust-lang.org/t/casting-constness-can-be-risky-heres-a-simple-fix/15933", "tree": {"sha": "5ec8ef004249e64950d16b271849eee973fb04c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ec8ef004249e64950d16b271849eee973fb04c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a966235138ad68967aa0892aa0621315081e4e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a966235138ad68967aa0892aa0621315081e4e8", "html_url": "https://github.com/rust-lang/rust/commit/1a966235138ad68967aa0892aa0621315081e4e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a966235138ad68967aa0892aa0621315081e4e8/comments", "author": {"login": "Kixunil", "id": 1178779, "node_id": "MDQ6VXNlcjExNzg3Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178779?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kixunil", "html_url": "https://github.com/Kixunil", "followers_url": "https://api.github.com/users/Kixunil/followers", "following_url": "https://api.github.com/users/Kixunil/following{/other_user}", "gists_url": "https://api.github.com/users/Kixunil/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kixunil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kixunil/subscriptions", "organizations_url": "https://api.github.com/users/Kixunil/orgs", "repos_url": "https://api.github.com/users/Kixunil/repos", "events_url": "https://api.github.com/users/Kixunil/events{/privacy}", "received_events_url": "https://api.github.com/users/Kixunil/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kixunil", "id": 1178779, "node_id": "MDQ6VXNlcjExNzg3Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178779?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kixunil", "html_url": "https://github.com/Kixunil", "followers_url": "https://api.github.com/users/Kixunil/followers", "following_url": "https://api.github.com/users/Kixunil/following{/other_user}", "gists_url": "https://api.github.com/users/Kixunil/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kixunil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kixunil/subscriptions", "organizations_url": "https://api.github.com/users/Kixunil/orgs", "repos_url": "https://api.github.com/users/Kixunil/repos", "events_url": "https://api.github.com/users/Kixunil/events{/privacy}", "received_events_url": "https://api.github.com/users/Kixunil/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e012a191d768adeda1ee36a99ef8b92d51920154", "url": "https://api.github.com/repos/rust-lang/rust/commits/e012a191d768adeda1ee36a99ef8b92d51920154", "html_url": "https://github.com/rust-lang/rust/commit/e012a191d768adeda1ee36a99ef8b92d51920154"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "7b826f921ca87b1eef0a8a7a8a3683e3b944baec", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1a966235138ad68967aa0892aa0621315081e4e8/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a966235138ad68967aa0892aa0621315081e4e8/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=1a966235138ad68967aa0892aa0621315081e4e8", "patch": "@@ -48,6 +48,16 @@ impl<T: ?Sized> *const T {\n         self as _\n     }\n \n+    /// Changes constness without changing the type.\n+    ///\n+    /// This is a bit safer than `as` because it wouldn't silently change the type if the code is\n+    /// refactored.\n+    #[unstable(feature = \"ptr_const_cast\", issue = \"92675\")]\n+    #[rustc_const_unstable(feature = \"ptr_const_cast\", issue = \"92675\")]\n+    pub const fn as_mut(self) -> *mut T {\n+        self as _\n+    }\n+\n     /// Casts a pointer to its raw bits.\n     ///\n     /// This is equivalent to `as usize`, but is more specific to enhance readability."}, {"sha": "6c50d4052976f01e8672a943e56562eddffe75ef", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1a966235138ad68967aa0892aa0621315081e4e8/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a966235138ad68967aa0892aa0621315081e4e8/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=1a966235138ad68967aa0892aa0621315081e4e8", "patch": "@@ -47,6 +47,20 @@ impl<T: ?Sized> *mut T {\n         self as _\n     }\n \n+    /// Changes constness without changing the type.\n+    ///\n+    /// This is a bit safer than `as` because it wouldn't silently change the type if the code is\n+    /// refactored.\n+    ///\n+    /// While not strictly required (`*mut T` coerces to `*const T`), this is provided for symmetry\n+    /// with `as_mut()` on `*const T` and may have documentation value if used instead of implicit\n+    /// coercion.\n+    #[unstable(feature = \"ptr_const_cast\", issue = \"92675\")]\n+    #[rustc_const_unstable(feature = \"ptr_const_cast\", issue = \"92675\")]\n+    pub const fn as_const(self) -> *const T {\n+        self as _\n+    }\n+\n     /// Casts a pointer to its raw bits.\n     ///\n     /// This is equivalent to `as usize`, but is more specific to enhance readability."}]}