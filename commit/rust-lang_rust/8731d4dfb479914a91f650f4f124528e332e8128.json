{"sha": "8731d4dfb479914a91f650f4f124528e332e8128", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3MzFkNGRmYjQ3OTkxNGE5MWY2NTBmNGYxMjQ1MjhlMzMyZTgxMjg=", "commit": {"author": {"name": "Michael Lamparski", "email": "diagonaldevice@gmail.com", "date": "2021-06-19T19:50:29Z"}, "committer": {"name": "Michael Lamparski", "email": "diagonaldevice@gmail.com", "date": "2021-06-20T00:53:26Z"}, "message": "Automatic exponential formatting in Debug\n\n* {:.PREC?} already had legitimately useful behavior (recursive formatting of structs using\n  fixed precision for floats) and I suspect that changes to the output there would be unwelcome.\n\n  (besides, precision introduces sinister edge cases where a number can be rounded up to one\n  of the thresholds)\n\n  Thus, the new behavior of Debug is, \"dynamically switch to exponential, but only if there's\n  no precision.\"\n\n* This could not be implemented in terms of float_to_decimal_common without repeating the branch\n  on precision, so 'float_to_general_debug' is a new function.  The name is '_debug' instead of\n  '_common' because the considerations in the previous bullet make this logic pretty specific\n  to Debug.\n\n* 'float_to_decimal_common' is now only used by Display, so I inlined the min_precision argument\n  and renamed the function accordingly.", "tree": {"sha": "3c9d8f12fb1f49e9984643adcf5b067b3b069434", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c9d8f12fb1f49e9984643adcf5b067b3b069434"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8731d4dfb479914a91f650f4f124528e332e8128", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8731d4dfb479914a91f650f4f124528e332e8128", "html_url": "https://github.com/rust-lang/rust/commit/8731d4dfb479914a91f650f4f124528e332e8128", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8731d4dfb479914a91f650f4f124528e332e8128/comments", "author": {"login": "ExpHP", "id": 1411280, "node_id": "MDQ6VXNlcjE0MTEyODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1411280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ExpHP", "html_url": "https://github.com/ExpHP", "followers_url": "https://api.github.com/users/ExpHP/followers", "following_url": "https://api.github.com/users/ExpHP/following{/other_user}", "gists_url": "https://api.github.com/users/ExpHP/gists{/gist_id}", "starred_url": "https://api.github.com/users/ExpHP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ExpHP/subscriptions", "organizations_url": "https://api.github.com/users/ExpHP/orgs", "repos_url": "https://api.github.com/users/ExpHP/repos", "events_url": "https://api.github.com/users/ExpHP/events{/privacy}", "received_events_url": "https://api.github.com/users/ExpHP/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ExpHP", "id": 1411280, "node_id": "MDQ6VXNlcjE0MTEyODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1411280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ExpHP", "html_url": "https://github.com/ExpHP", "followers_url": "https://api.github.com/users/ExpHP/followers", "following_url": "https://api.github.com/users/ExpHP/following{/other_user}", "gists_url": "https://api.github.com/users/ExpHP/gists{/gist_id}", "starred_url": "https://api.github.com/users/ExpHP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ExpHP/subscriptions", "organizations_url": "https://api.github.com/users/ExpHP/orgs", "repos_url": "https://api.github.com/users/ExpHP/repos", "events_url": "https://api.github.com/users/ExpHP/events{/privacy}", "received_events_url": "https://api.github.com/users/ExpHP/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "312b894cc12240a3fcc645474c3daa14f7d568ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/312b894cc12240a3fcc645474c3daa14f7d568ea", "html_url": "https://github.com/rust-lang/rust/commit/312b894cc12240a3fcc645474c3daa14f7d568ea"}], "stats": {"total": 81, "additions": 75, "deletions": 6}, "files": [{"sha": "9ddd6c96b9642cb4a587d0941069f0424731958b", "filename": "library/core/src/fmt/float.rs", "status": "modified", "additions": 49, "deletions": 4, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/8731d4dfb479914a91f650f4f124528e332e8128/library%2Fcore%2Fsrc%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8731d4dfb479914a91f650f4f124528e332e8128/library%2Fcore%2Fsrc%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Ffloat.rs?ref=8731d4dfb479914a91f650f4f124528e332e8128", "patch": "@@ -2,6 +2,26 @@ use crate::fmt::{Debug, Display, Formatter, LowerExp, Result, UpperExp};\n use crate::mem::MaybeUninit;\n use crate::num::flt2dec;\n \n+#[doc(hidden)]\n+trait GeneralFormat: PartialOrd {\n+    /// Determines if a value should use exponential based on its magnitude, given the precondition\n+    /// that it will not be rounded any further before it is displayed.\n+    fn already_rounded_value_should_use_exponential(&self) -> bool;\n+}\n+\n+macro_rules! impl_general_format {\n+    ($($t:ident)*) => {\n+        $(impl GeneralFormat for $t {\n+            fn already_rounded_value_should_use_exponential(&self) -> bool {\n+                let abs = $t::abs_private(*self);\n+                (abs != 0.0 && abs < 1e-4) || abs >= 1e+16\n+            }\n+        })*\n+    }\n+}\n+\n+impl_general_format! { f32 f64 }\n+\n // Don't inline this so callers don't use the stack space this function\n // requires unless they have to.\n #[inline(never)]\n@@ -53,8 +73,7 @@ where\n     fmt.pad_formatted_parts(&formatted)\n }\n \n-// Common code of floating point Debug and Display.\n-fn float_to_decimal_common<T>(fmt: &mut Formatter<'_>, num: &T, min_precision: usize) -> Result\n+fn float_to_decimal_display<T>(fmt: &mut Formatter<'_>, num: &T) -> Result\n where\n     T: flt2dec::DecodableFloat,\n {\n@@ -67,6 +86,7 @@ where\n     if let Some(precision) = fmt.precision {\n         float_to_decimal_common_exact(fmt, num, sign, precision)\n     } else {\n+        let min_precision = 0;\n         float_to_decimal_common_shortest(fmt, num, sign, min_precision)\n     }\n }\n@@ -144,19 +164,44 @@ where\n     }\n }\n \n+fn float_to_general_debug<T>(fmt: &mut Formatter<'_>, num: &T) -> Result\n+where\n+    T: flt2dec::DecodableFloat + GeneralFormat,\n+{\n+    let force_sign = fmt.sign_plus();\n+    let sign = match force_sign {\n+        false => flt2dec::Sign::Minus,\n+        true => flt2dec::Sign::MinusPlus,\n+    };\n+\n+    if let Some(precision) = fmt.precision {\n+        // this behavior of {:.PREC?} predates exponential formatting for {:?}\n+        float_to_decimal_common_exact(fmt, num, sign, precision)\n+    } else {\n+        // since there is no precision, there will be no rounding\n+        if num.already_rounded_value_should_use_exponential() {\n+            let upper = false;\n+            float_to_exponential_common_shortest(fmt, num, sign, upper)\n+        } else {\n+            let min_precision = 1;\n+            float_to_decimal_common_shortest(fmt, num, sign, min_precision)\n+        }\n+    }\n+}\n+\n macro_rules! floating {\n     ($ty:ident) => {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl Debug for $ty {\n             fn fmt(&self, fmt: &mut Formatter<'_>) -> Result {\n-                float_to_decimal_common(fmt, self, 1)\n+                float_to_general_debug(fmt, self)\n             }\n         }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl Display for $ty {\n             fn fmt(&self, fmt: &mut Formatter<'_>) -> Result {\n-                float_to_decimal_common(fmt, self, 0)\n+                float_to_decimal_display(fmt, self)\n             }\n         }\n "}, {"sha": "4104d48b4a2db721620217f587db8e2901c4de0d", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8731d4dfb479914a91f650f4f124528e332e8128/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8731d4dfb479914a91f650f4f124528e332e8128/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=8731d4dfb479914a91f650f4f124528e332e8128", "patch": "@@ -448,7 +448,7 @@ impl f32 {\n     // private use internally.\n     #[inline]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n-    const fn abs_private(self) -> f32 {\n+    pub(crate) const fn abs_private(self) -> f32 {\n         f32::from_bits(self.to_bits() & 0x7fff_ffff)\n     }\n "}, {"sha": "8a8fbae1941c3212634fee9eb629722537c403e8", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8731d4dfb479914a91f650f4f124528e332e8128/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8731d4dfb479914a91f650f4f124528e332e8128/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=8731d4dfb479914a91f650f4f124528e332e8128", "patch": "@@ -447,7 +447,7 @@ impl f64 {\n     // private use internally.\n     #[inline]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n-    const fn abs_private(self) -> f64 {\n+    pub(crate) const fn abs_private(self) -> f64 {\n         f64::from_bits(self.to_bits() & 0x7fff_ffff_ffff_ffff)\n     }\n "}, {"sha": "47a7400f76ef95ecfb73146e2f295aa649ac3907", "filename": "library/core/tests/fmt/float.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8731d4dfb479914a91f650f4f124528e332e8128/library%2Fcore%2Ftests%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8731d4dfb479914a91f650f4f124528e332e8128/library%2Fcore%2Ftests%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Ffmt%2Ffloat.rs?ref=8731d4dfb479914a91f650f4f124528e332e8128", "patch": "@@ -12,6 +12,16 @@ fn test_format_f64() {\n     assert_eq!(\"1.23456789E3\", format!(\"{:E}\", 1234.56789f64));\n     assert_eq!(\"0.0\", format!(\"{:?}\", 0.0f64));\n     assert_eq!(\"1.01\", format!(\"{:?}\", 1.01f64));\n+\n+    let high_cutoff = 1e16_f64;\n+    assert_eq!(\"1e16\", format!(\"{:?}\", high_cutoff));\n+    assert_eq!(\"-1e16\", format!(\"{:?}\", -high_cutoff));\n+    assert!(!is_exponential(&format!(\"{:?}\", high_cutoff * (1.0 - 2.0 * f64::EPSILON))));\n+    assert_eq!(\"-3.0\", format!(\"{:?}\", -3f64));\n+    assert_eq!(\"0.0001\", format!(\"{:?}\", 0.0001f64));\n+    assert_eq!(\"9e-5\", format!(\"{:?}\", 0.00009f64));\n+    assert_eq!(\"1234567.9\", format!(\"{:.1?}\", 1234567.89f64));\n+    assert_eq!(\"1234.6\", format!(\"{:.1?}\", 1234.56789f64));\n }\n \n #[test]\n@@ -28,4 +38,18 @@ fn test_format_f32() {\n     assert_eq!(\"1.2345679E3\", format!(\"{:E}\", 1234.56789f32));\n     assert_eq!(\"0.0\", format!(\"{:?}\", 0.0f32));\n     assert_eq!(\"1.01\", format!(\"{:?}\", 1.01f32));\n+\n+    let high_cutoff = 1e16_f32;\n+    assert_eq!(\"1e16\", format!(\"{:?}\", high_cutoff));\n+    assert_eq!(\"-1e16\", format!(\"{:?}\", -high_cutoff));\n+    assert!(!is_exponential(&format!(\"{:?}\", high_cutoff * (1.0 - 2.0 * f32::EPSILON))));\n+    assert_eq!(\"-3.0\", format!(\"{:?}\", -3f32));\n+    assert_eq!(\"0.0001\", format!(\"{:?}\", 0.0001f32));\n+    assert_eq!(\"9e-5\", format!(\"{:?}\", 0.00009f32));\n+    assert_eq!(\"1234567.9\", format!(\"{:.1?}\", 1234567.89f32));\n+    assert_eq!(\"1234.6\", format!(\"{:.1?}\", 1234.56789f32));\n+}\n+\n+fn is_exponential(s: &str) -> bool {\n+    s.contains(\"e\") || s.contains(\"E\")\n }"}]}