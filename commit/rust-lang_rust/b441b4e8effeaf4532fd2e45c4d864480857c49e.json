{"sha": "b441b4e8effeaf4532fd2e45c4d864480857c49e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0NDFiNGU4ZWZmZWFmNDUzMmZkMmU0NWM0ZDg2NDQ4MDg1N2M0OWU=", "commit": {"author": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2019-10-30T17:36:37Z"}, "committer": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2019-10-30T17:36:37Z"}, "message": "Some clippy fixes", "tree": {"sha": "5f25f7478b8ec365b2a2d5f7bea4ec2386bdd244", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f25f7478b8ec365b2a2d5f7bea4ec2386bdd244"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b441b4e8effeaf4532fd2e45c4d864480857c49e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b441b4e8effeaf4532fd2e45c4d864480857c49e", "html_url": "https://github.com/rust-lang/rust/commit/b441b4e8effeaf4532fd2e45c4d864480857c49e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b441b4e8effeaf4532fd2e45c4d864480857c49e/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "html_url": "https://github.com/rust-lang/rust/commit/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9"}], "stats": {"total": 52, "additions": 23, "deletions": 29}, "files": [{"sha": "ad6c5695a3a4fc7905e2261c08bd39989707ca73", "filename": "crates/ra_assists/src/assists/early_return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b441b4e8effeaf4532fd2e45c4d864480857c49e/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b441b4e8effeaf4532fd2e45c4d864480857c49e/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs?ref=b441b4e8effeaf4532fd2e45c4d864480857c49e", "patch": "@@ -50,7 +50,7 @@ pub(crate) fn convert_to_guarded_return(ctx: AssistCtx<impl HirDatabase>) -> Opt\n     }\n \n     // check for early return and continue\n-    let first_in_then_block = then_block.syntax().first_child()?.clone();\n+    let first_in_then_block = then_block.syntax().first_child()?;\n     if ast::ReturnExpr::can_cast(first_in_then_block.kind())\n         || ast::ContinueExpr::can_cast(first_in_then_block.kind())\n         || first_in_then_block"}, {"sha": "a7fd9b6d2d6ef065c5854d68ecc37cf8b4c8fbb4", "filename": "crates/ra_assists/src/assists/inline_local_variable.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b441b4e8effeaf4532fd2e45c4d864480857c49e/crates%2Fra_assists%2Fsrc%2Fassists%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b441b4e8effeaf4532fd2e45c4d864480857c49e/crates%2Fra_assists%2Fsrc%2Fassists%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Finline_local_variable.rs?ref=b441b4e8effeaf4532fd2e45c4d864480857c49e", "patch": "@@ -51,10 +51,8 @@ pub(crate) fn inline_local_varialbe(ctx: AssistCtx<impl HirDatabase>) -> Option<\n     let mut wrap_in_parens = vec![true; refs.len()];\n \n     for (i, desc) in refs.iter().enumerate() {\n-        let usage_node = ctx\n-            .covering_node_for_range(desc.range)\n-            .ancestors()\n-            .find_map(|node| ast::PathExpr::cast(node))?;\n+        let usage_node =\n+            ctx.covering_node_for_range(desc.range).ancestors().find_map(ast::PathExpr::cast)?;\n         let usage_parent_option = usage_node.syntax().parent().and_then(ast::Expr::cast);\n         let usage_parent = match usage_parent_option {\n             Some(u) => u,"}, {"sha": "58f7157ae21c9f72527784fa48d6adbfda122614", "filename": "crates/ra_assists/src/assists/raw_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b441b4e8effeaf4532fd2e45c4d864480857c49e/crates%2Fra_assists%2Fsrc%2Fassists%2Fraw_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b441b4e8effeaf4532fd2e45c4d864480857c49e/crates%2Fra_assists%2Fsrc%2Fassists%2Fraw_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fraw_string.rs?ref=b441b4e8effeaf4532fd2e45c4d864480857c49e", "patch": "@@ -131,7 +131,7 @@ pub(crate) fn remove_hash(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     ctx.add_assist(AssistId(\"remove_hash\"), \"remove hash from raw string\", |edit| {\n         edit.target(token.text_range());\n         let result = &text[2..text.len() - 1];\n-        let result = if result.starts_with(\"\\\"\") {\n+        let result = if result.starts_with('\\\"') {\n             // no more hash, escape\n             let internal_str = &result[1..result.len() - 1];\n             format!(\"\\\"{}\\\"\", internal_str.escape_default().to_string())"}, {"sha": "e494f56206dca4ad02d63a57cef7d3df0c32f657", "filename": "crates/ra_ide_api/src/call_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b441b4e8effeaf4532fd2e45c4d864480857c49e/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b441b4e8effeaf4532fd2e45c4d864480857c49e/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs?ref=b441b4e8effeaf4532fd2e45c4d864480857c49e", "patch": "@@ -95,7 +95,7 @@ impl FnCallNode {\n                 Some(FnCallNode::CallExpr(expr))\n             } else if let Some(expr) = ast::MethodCallExpr::cast(node.clone()) {\n                 Some(FnCallNode::MethodCallExpr(expr))\n-            } else if let Some(expr) = ast::MacroCall::cast(node.clone()) {\n+            } else if let Some(expr) = ast::MacroCall::cast(node) {\n                 Some(FnCallNode::MacroCallExpr(expr))\n             } else {\n                 None"}, {"sha": "39c5946c7f1874ad68df343840f4248119c688fd", "filename": "crates/ra_ide_api/src/change.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b441b4e8effeaf4532fd2e45c4d864480857c49e/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b441b4e8effeaf4532fd2e45c4d864480857c49e/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fchange.rs?ref=b441b4e8effeaf4532fd2e45c4d864480857c49e", "patch": "@@ -43,7 +43,7 @@ impl fmt::Debug for AnalysisChange {\n         if !self.libraries_added.is_empty() {\n             d.field(\"libraries_added\", &self.libraries_added.len());\n         }\n-        if !self.crate_graph.is_some() {\n+        if !self.crate_graph.is_none() {\n             d.field(\"crate_graph\", &self.crate_graph);\n         }\n         d.finish()"}, {"sha": "a58fdc036fef2be742dadcc25bc0295a1b9975a1", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b441b4e8effeaf4532fd2e45c4d864480857c49e/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b441b4e8effeaf4532fd2e45c4d864480857c49e/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=b441b4e8effeaf4532fd2e45c4d864480857c49e", "patch": "@@ -67,7 +67,7 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n                 });\n             }\n         }\n-        _ => return,\n+        _ => {}\n     };\n }\n "}, {"sha": "65bb639ed508d18bb9666b3bd30b267eab80a9d9", "filename": "crates/ra_ide_api/src/completion/presentation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b441b4e8effeaf4532fd2e45c4d864480857c49e/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b441b4e8effeaf4532fd2e45c4d864480857c49e/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=b441b4e8effeaf4532fd2e45c4d864480857c49e", "patch": "@@ -136,7 +136,7 @@ impl Completions {\n         for (idx, s) in docs.match_indices(&macro_name) {\n             let (before, after) = (&docs[..idx], &docs[idx + s.len()..]);\n             // Ensure to match the full word\n-            if after.starts_with(\"!\")\n+            if after.starts_with('!')\n                 && before\n                     .chars()\n                     .rev()\n@@ -225,7 +225,7 @@ impl Completions {\n                 } else {\n                     (format!(\"{}($0)\", data.name()), format!(\"{}(\u2026)\", name))\n                 };\n-            builder = builder.lookup_by(name.clone()).label(label).insert_snippet(snippet);\n+            builder = builder.lookup_by(name).label(label).insert_snippet(snippet);\n         }\n \n         self.add(builder)"}, {"sha": "f2789e0b2a4369b1cc66d1ab0372035fc3d0ee72", "filename": "crates/ra_ide_api/src/references/search_scope.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b441b4e8effeaf4532fd2e45c4d864480857c49e/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fsearch_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b441b4e8effeaf4532fd2e45c4d864480857c49e/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fsearch_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fsearch_scope.rs?ref=b441b4e8effeaf4532fd2e45c4d864480857c49e", "patch": "@@ -111,8 +111,7 @@ impl NameDefinition {\n         if vis.as_str() != \"\" {\n             let source_root_id = db.file_source_root(file_id);\n             let source_root = db.source_root(source_root_id);\n-            let mut res =\n-                source_root.walk().map(|id| (id.into(), None)).collect::<FxHashMap<_, _>>();\n+            let mut res = source_root.walk().map(|id| (id, None)).collect::<FxHashMap<_, _>>();\n \n             // FIXME: add \"pub(in path)\"\n \n@@ -128,7 +127,7 @@ impl NameDefinition {\n                         let root_file = crate_graph.crate_root(crate_id);\n                         let source_root_id = db.file_source_root(root_file);\n                         let source_root = db.source_root(source_root_id);\n-                        res.extend(source_root.walk().map(|id| (id.into(), None)));\n+                        res.extend(source_root.walk().map(|id| (id, None)));\n                     }\n                 }\n                 return SearchScope::new(res);"}, {"sha": "d51132f736052675944a793dd01a77c0dbcbfac6", "filename": "crates/ra_ide_api/src/typing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b441b4e8effeaf4532fd2e45c4d864480857c49e/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b441b4e8effeaf4532fd2e45c4d864480857c49e/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs?ref=b441b4e8effeaf4532fd2e45c4d864480857c49e", "patch": "@@ -261,7 +261,7 @@ impl S {\n \n     fn type_char(char_typed: char, before: &str, after: &str) {\n         let (actual, file_change) = do_type_char(char_typed, before)\n-            .expect(&format!(\"typing `{}` did nothing\", char_typed));\n+            .unwrap_or_else(|| panic!(\"typing `{}` did nothing\", char_typed));\n \n         if after.contains(\"<|>\") {\n             let (offset, after) = extract_offset(after);"}, {"sha": "379dab4384f10eaec459cdcbc51ce5504b16f5ab", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b441b4e8effeaf4532fd2e45c4d864480857c49e/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b441b4e8effeaf4532fd2e45c4d864480857c49e/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=b441b4e8effeaf4532fd2e45c4d864480857c49e", "patch": "@@ -196,7 +196,7 @@ pub fn main_loop(\n     task_receiver.into_iter().for_each(|task| {\n         on_task(task, &connection.sender, &mut loop_state.pending_requests, &mut world_state)\n     });\n-    libdata_receiver.into_iter().for_each(|lib| drop(lib));\n+    libdata_receiver.into_iter().for_each(drop);\n     log::info!(\"...tasks have finished\");\n     log::info!(\"joining threadpool...\");\n     drop(pool);"}, {"sha": "33b9d483d2e1fea8bdf0855e69b8eefce0bafb5d", "filename": "crates/ra_mbe/src/mbe_expander/matcher.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b441b4e8effeaf4532fd2e45c4d864480857c49e/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b441b4e8effeaf4532fd2e45c4d864480857c49e/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs?ref=b441b4e8effeaf4532fd2e45c4d864480857c49e", "patch": "@@ -123,7 +123,6 @@ fn match_subtree(\n                     }\n                     None => bindings.push_optional(name),\n                 }\n-                ()\n             }\n             Op::Repeat { subtree, kind, separator } => {\n                 match_repeat(bindings, subtree, kind, separator, src)?\n@@ -159,7 +158,7 @@ impl<'a> TtIter<'a> {\n     pub(crate) fn expect_lifetime(&mut self) -> Result<&tt::Ident, ()> {\n         let ident = self.expect_ident()?;\n         // check if it start from \"`\"\n-        if ident.text.chars().next() != Some('\\'') {\n+        if !ident.text.starts_with('\\'') {\n             return Err(());\n         }\n         Ok(ident)"}, {"sha": "592fcf527bb311501bb136057690791c93b67bd3", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b441b4e8effeaf4532fd2e45c4d864480857c49e/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b441b4e8effeaf4532fd2e45c4d864480857c49e/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=b441b4e8effeaf4532fd2e45c4d864480857c49e", "patch": "@@ -383,7 +383,7 @@ mod tests {\n             \"#,\n         );\n         let expansion = expand(&rules, \"literals!(foo);\");\n-        let tts = &[expansion.clone().into()];\n+        let tts = &[expansion.into()];\n         let buffer = tt::buffer::TokenBuffer::new(tts);\n         let mut tt_src = SubtreeTokenSource::new(&buffer);\n         let mut tokens = vec![];"}, {"sha": "3d5f18bfae689e7c47d1e04f9d504e40907b3df5", "filename": "crates/ra_syntax/src/ast/make.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b441b4e8effeaf4532fd2e45c4d864480857c49e/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b441b4e8effeaf4532fd2e45c4d864480857c49e/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs?ref=b441b4e8effeaf4532fd2e45c4d864480857c49e", "patch": "@@ -129,11 +129,11 @@ pub fn where_clause(preds: impl Iterator<Item = ast::WherePred>) -> ast::WhereCl\n }\n \n pub fn if_expression(condition: &ast::Expr, statement: &str) -> ast::IfExpr {\n-    return ast_from_text(&format!(\n+    ast_from_text(&format!(\n         \"fn f() {{ if !{} {{\\n    {}\\n}}\\n}}\",\n         condition.syntax().text(),\n         statement\n-    ));\n+    ))\n }\n \n fn ast_from_text<N: AstNode>(text: &str) -> N {"}, {"sha": "05afda8f11183d8f472a0affdaa38d76f21a77c8", "filename": "xtask/src/codegen/gen_assists_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b441b4e8effeaf4532fd2e45c4d864480857c49e/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b441b4e8effeaf4532fd2e45c4d864480857c49e/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs?ref=b441b4e8effeaf4532fd2e45c4d864480857c49e", "patch": "@@ -53,7 +53,7 @@ fn collect_assists() -> Result<Vec<Assist>> {\n \n             let doc = take_until(lines.by_ref(), \"```\").trim().to_string();\n             assert!(\n-                doc.chars().next().unwrap().is_ascii_uppercase() && doc.ends_with(\".\"),\n+                doc.chars().next().unwrap().is_ascii_uppercase() && doc.ends_with('.'),\n                 \"\\n\\n{}: assist docs should be proper sentences, with capitalization and a full stop at the end.\\n\\n{}\\n\\n\",\n                 id, doc,\n             );"}, {"sha": "d0f0f683b817ea12c6a4fb88f4ffd45b214f650b", "filename": "xtask/src/codegen/gen_parser_tests.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b441b4e8effeaf4532fd2e45c4d864480857c49e/xtask%2Fsrc%2Fcodegen%2Fgen_parser_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b441b4e8effeaf4532fd2e45c4d864480857c49e/xtask%2Fsrc%2Fcodegen%2Fgen_parser_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_parser_tests.rs?ref=b441b4e8effeaf4532fd2e45c4d864480857c49e", "patch": "@@ -102,12 +102,10 @@ fn tests_from_dir(dir: &Path) -> Result<Tests> {\n         for test in collect_tests(&text) {\n             if test.ok {\n                 if let Some(old_test) = res.ok.insert(test.name.clone(), test) {\n-                    Err(format!(\"Duplicate test: {}\", old_test.name))?\n-                }\n-            } else {\n-                if let Some(old_test) = res.err.insert(test.name.clone(), test) {\n-                    Err(format!(\"Duplicate test: {}\", old_test.name))?\n+                    return Err(format!(\"Duplicate test: {}\", old_test.name).into());\n                 }\n+            } else if let Some(old_test) = res.err.insert(test.name.clone(), test) {\n+                return Err(format!(\"Duplicate test: {}\", old_test.name).into());\n             }\n         }\n         Ok(())"}, {"sha": "4d20232ffdccba77c21f442fe8b4266544e2b1bd", "filename": "xtask/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b441b4e8effeaf4532fd2e45c4d864480857c49e/xtask%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b441b4e8effeaf4532fd2e45c4d864480857c49e/xtask%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fmain.rs?ref=b441b4e8effeaf4532fd2e45c4d864480857c49e", "patch": "@@ -60,7 +60,7 @@ fn main() -> Result<()> {\n             matches.finish().or_else(handle_extra_flags)?;\n             let opts = InstallOpt {\n                 client: if server { None } else { Some(ClientOpt::VsCode) },\n-                server: if client_code { None } else { Some(ServerOpt { jemalloc: jemalloc }) },\n+                server: if client_code { None } else { Some(ServerOpt { jemalloc }) },\n             };\n             install(opts)?\n         }"}, {"sha": "6a629ce63e8fc6cec66ee3d7d9408f3d9607d0eb", "filename": "xtask/tests/tidy-tests/docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b441b4e8effeaf4532fd2e45c4d864480857c49e/xtask%2Ftests%2Ftidy-tests%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b441b4e8effeaf4532fd2e45c4d864480857c49e/xtask%2Ftests%2Ftidy-tests%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Ftests%2Ftidy-tests%2Fdocs.rs?ref=b441b4e8effeaf4532fd2e45c4d864480857c49e", "patch": "@@ -29,7 +29,7 @@ fn is_exclude_file(d: &DirEntry) -> bool {\n }\n \n fn is_hidden(entry: &DirEntry) -> bool {\n-    entry.file_name().to_str().map(|s| s.starts_with(\".\")).unwrap_or(false)\n+    entry.file_name().to_str().map(|s| s.starts_with('.')).unwrap_or(false)\n }\n \n #[test]"}]}