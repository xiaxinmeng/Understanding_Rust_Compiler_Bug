{"sha": "d366471e58b4387aa1d644c33c469e268abf7160", "node_id": "C_kwDOAAsO6NoAKGQzNjY0NzFlNThiNDM4N2FhMWQ2NDRjMzNjNDY5ZTI2OGFiZjcxNjA", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-10-29T13:38:00Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-10-29T13:58:32Z"}, "message": "interpret: fix align_of_val on packed types", "tree": {"sha": "b96f854a6e697c096b9a8d085e458d84f642746e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b96f854a6e697c096b9a8d085e458d84f642746e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d366471e58b4387aa1d644c33c469e268abf7160", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d366471e58b4387aa1d644c33c469e268abf7160", "html_url": "https://github.com/rust-lang/rust/commit/d366471e58b4387aa1d644c33c469e268abf7160", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d366471e58b4387aa1d644c33c469e268abf7160/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33b530e04099465a8029ef581202d52f4075558e", "url": "https://api.github.com/repos/rust-lang/rust/commits/33b530e04099465a8029ef581202d52f4075558e", "html_url": "https://github.com/rust-lang/rust/commit/33b530e04099465a8029ef581202d52f4075558e"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "51cfcdb833196996ae14aa7fce4fc5cf2f1df433", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d366471e58b4387aa1d644c33c469e268abf7160/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d366471e58b4387aa1d644c33c469e268abf7160/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=d366471e58b4387aa1d644c33c469e268abf7160", "patch": "@@ -598,7 +598,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 // the last field).  Can't have foreign types here, how would we\n                 // adjust alignment and size for them?\n                 let field = layout.field(self, layout.fields.count() - 1);\n-                let Some((unsized_size, unsized_align)) = self.size_and_align_of(metadata, &field)? else {\n+                let Some((unsized_size, mut unsized_align)) = self.size_and_align_of(metadata, &field)? else {\n                     // A field with an extern type. We don't know the actual dynamic size\n                     // or the alignment.\n                     return Ok(None);\n@@ -614,6 +614,13 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 // Return the sum of sizes and max of aligns.\n                 let size = sized_size + unsized_size; // `Size` addition\n \n+                // Packed types ignore the alignment of their fields.\n+                if let ty::Adt(def, _) = layout.ty.kind() {\n+                    if def.repr().packed() {\n+                        unsized_align = sized_align;\n+                    }\n+                }\n+\n                 // Choose max of two known alignments (combined value must\n                 // be aligned according to more restrictive of the two).\n                 let align = sized_align.max(unsized_align);"}, {"sha": "eda176d9fcbe61c307de586eb8ca416b39af0d3d", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d366471e58b4387aa1d644c33c469e268abf7160/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d366471e58b4387aa1d644c33c469e268abf7160/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=d366471e58b4387aa1d644c33c469e268abf7160", "patch": "@@ -5,6 +5,7 @@\n #![feature(bigint_helper_methods)]\n #![feature(cell_update)]\n #![feature(const_assume)]\n+#![feature(const_align_of_val_raw)]\n #![feature(const_black_box)]\n #![feature(const_bool_to_option)]\n #![feature(const_caller_location)]\n@@ -42,6 +43,7 @@\n #![feature(try_find)]\n #![feature(inline_const)]\n #![feature(is_sorted)]\n+#![feature(layout_for_ptr)]\n #![feature(pattern)]\n #![feature(pin_macro)]\n #![feature(sort_internals)]"}, {"sha": "1cfb4fd9fd186e55cc84c3b641bdf37e10858d6e", "filename": "library/core/tests/mem.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d366471e58b4387aa1d644c33c469e268abf7160/library%2Fcore%2Ftests%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d366471e58b4387aa1d644c33c469e268abf7160/library%2Fcore%2Ftests%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fmem.rs?ref=d366471e58b4387aa1d644c33c469e268abf7160", "patch": "@@ -1,4 +1,5 @@\n use core::mem::*;\n+use core::ptr;\n \n #[cfg(panic = \"unwind\")]\n use std::rc::Rc;\n@@ -75,6 +76,25 @@ fn align_of_val_basic() {\n     assert_eq!(align_of_val(&1u32), 4);\n }\n \n+#[test]\n+#[cfg(not(bootstrap))] // stage 0 doesn't have the fix yet, so the test fails\n+fn align_of_val_raw_packed() {\n+    #[repr(C, packed)]\n+    struct B {\n+        f: [u32],\n+    }\n+    let storage = [0u8; 4];\n+    let b: *const B = ptr::from_raw_parts(storage.as_ptr().cast(), 1);\n+    assert_eq!(unsafe { align_of_val_raw(b) }, 1);\n+\n+    const ALIGN_OF_VAL_RAW: usize = {\n+        let storage = [0u8; 4];\n+        let b: *const B = ptr::from_raw_parts(storage.as_ptr().cast(), 1);\n+        unsafe { align_of_val_raw(b) }\n+    };\n+    assert_eq!(ALIGN_OF_VAL_RAW, 1);\n+}\n+\n #[test]\n fn test_swap() {\n     let mut x = 31337;"}]}