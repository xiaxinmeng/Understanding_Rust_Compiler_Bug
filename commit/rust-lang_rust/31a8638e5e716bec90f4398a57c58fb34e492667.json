{"sha": "31a8638e5e716bec90f4398a57c58fb34e492667", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxYTg2MzhlNWU3MTZiZWM5MGY0Mzk4YTU3YzU4ZmIzNGU0OTI2Njc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-11-01T20:46:38Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-11-08T15:32:05Z"}, "message": "rustbuild: Tweak for vendored dependencies\n\nA few changes are included here:\n\n* The `winapi` and `url` dependencies were dropped. The source code for these\n  projects is pretty weighty, and we're about to vendor them, so let's not\n  commit to that intake just yet. If necessary we can vendor them later but for\n  now it shouldn't be necessary.\n\n* The `--frozen` flag is now always passed to Cargo, obviating the need for\n  tidy's `cargo_lock` check.\n\n* Tidy was updated to not check the vendor directory\n\nCloses #34687", "tree": {"sha": "e28494dd51e9b8eae67d32678d14de907d17b75c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e28494dd51e9b8eae67d32678d14de907d17b75c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31a8638e5e716bec90f4398a57c58fb34e492667", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31a8638e5e716bec90f4398a57c58fb34e492667", "html_url": "https://github.com/rust-lang/rust/commit/31a8638e5e716bec90f4398a57c58fb34e492667", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31a8638e5e716bec90f4398a57c58fb34e492667/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "319f46fba306f9e3dbe09e48044f941e74406ed6", "url": "https://api.github.com/repos/rust-lang/rust/commits/319f46fba306f9e3dbe09e48044f941e74406ed6", "html_url": "https://github.com/rust-lang/rust/commit/319f46fba306f9e3dbe09e48044f941e74406ed6"}], "stats": {"total": 313, "additions": 145, "deletions": 168}, "files": [{"sha": "1d4c6252f2c7503ddf6b6861250e31530d53f119", "filename": ".gitattributes", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31a8638e5e716bec90f4398a57c58fb34e492667/.gitattributes", "raw_url": "https://github.com/rust-lang/rust/raw/31a8638e5e716bec90f4398a57c58fb34e492667/.gitattributes", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitattributes?ref=31a8638e5e716bec90f4398a57c58fb34e492667", "patch": "@@ -7,3 +7,4 @@\n src/etc/pkg/rust-logo.ico binary\n src/etc/pkg/rust-logo.png binary\n *.woff binary\n+src/vendor/* binary"}, {"sha": "bf66eabc1c800bd44ca12ed1932995bf8ca3955f", "filename": ".gitignore", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31a8638e5e716bec90f4398a57c58fb34e492667/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/31a8638e5e716bec90f4398a57c58fb34e492667/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=31a8638e5e716bec90f4398a57c58fb34e492667", "patch": "@@ -98,3 +98,4 @@ tmp.*.rs\n version.md\n version.ml\n version.texi\n+.cargo"}, {"sha": "144329caa71aa8c1afb018e24bf7bda37a7edde6", "filename": ".travis.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31a8638e5e716bec90f4398a57c58fb34e492667/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/31a8638e5e716bec90f4398a57c58fb34e492667/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=31a8638e5e716bec90f4398a57c58fb34e492667", "patch": "@@ -15,7 +15,7 @@ before_install:\n script:\n   - docker run -v `pwd`:/build rust\n     sh -c \"\n-      ./configure --enable-rustbuild --llvm-root=/usr/lib/llvm-3.7 --enable-quiet-tests &&\n+      ./configure --enable-vendor --enable-rustbuild --llvm-root=/usr/lib/llvm-3.7 --enable-quiet-tests &&\n       make tidy &&\n       make check -j4\n     \""}, {"sha": "9c055e7217aa329d63a6697780a4df5de645116a", "filename": "configure", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31a8638e5e716bec90f4398a57c58fb34e492667/configure", "raw_url": "https://github.com/rust-lang/rust/raw/31a8638e5e716bec90f4398a57c58fb34e492667/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=31a8638e5e716bec90f4398a57c58fb34e492667", "patch": "@@ -634,6 +634,7 @@ opt rustbuild 0 \"use the rust and cargo based build system\"\n opt codegen-tests 1 \"run the src/test/codegen tests\"\n opt option-checking 1 \"complain about unrecognized options in this configure script\"\n opt ninja 0 \"build LLVM using the Ninja generator (for MSVC, requires building in the correct environment)\"\n+opt vendor 0 \"enable usage of vendored Rust crates\"\n \n # Optimization and debugging options. These may be overridden by the release channel, etc.\n opt_nosave optimize 1 \"build optimized rust code\""}, {"sha": "238ba8acee42f894fb7aaae3648de1a5d0d91e65", "filename": "mk/dist.mk", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/31a8638e5e716bec90f4398a57c58fb34e492667/mk%2Fdist.mk", "raw_url": "https://github.com/rust-lang/rust/raw/31a8638e5e716bec90f4398a57c58fb34e492667/mk%2Fdist.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdist.mk?ref=31a8638e5e716bec90f4398a57c58fb34e492667", "patch": "@@ -65,7 +65,8 @@ PKG_FILES := \\\n       stage0.txt                               \\\n       rust-installer                           \\\n       tools                                    \\\n-      test)                                    \\\n+      test                                     \\\n+      vendor)                                  \\\n     $(PKG_GITMODULES)                          \\\n     $(filter-out config.stamp, \\\n                  $(MKFILES_FOR_TARBALL))"}, {"sha": "d3517175d4cedb9309e14c64a5cf9171685c54a0", "filename": "src/Cargo.lock", "status": "modified", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/31a8638e5e716bec90f4398a57c58fb34e492667/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/31a8638e5e716bec90f4398a57c58fb34e492667/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=31a8638e5e716bec90f4398a57c58fb34e492667", "patch": "@@ -44,13 +44,11 @@ dependencies = [\n  \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"gcc 0.3.38 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"md5 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.1.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -149,25 +147,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n name = \"graphviz\"\n version = \"0.0.0\"\n \n-[[package]]\n-name = \"idna\"\n-version = \"0.1.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"matches 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-bidi 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-normalization 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"kernel32-sys\"\n-version = \"0.2.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"libc\"\n version = \"0.0.0\"\n@@ -183,9 +162,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n [[package]]\n name = \"linkchecker\"\n version = \"0.1.0\"\n-dependencies = [\n- \"url 1.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n \n [[package]]\n name = \"log\"\n@@ -196,11 +172,6 @@ name = \"log\"\n version = \"0.3.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"matches\"\n-version = \"0.1.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n [[package]]\n name = \"md5\"\n version = \"0.1.1\"\n@@ -705,55 +676,15 @@ dependencies = [\n  \"rustc-serialize 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"unicode-bidi\"\n-version = \"0.2.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"matches 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"unicode-normalization\"\n-version = \"0.1.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n-[[package]]\n-name = \"url\"\n-version = \"1.2.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"idna 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"matches 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"winapi\"\n-version = \"0.2.8\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n-[[package]]\n-name = \"winapi-build\"\n-version = \"0.1.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n [metadata]\n \"checksum cmake 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0e5bcf27e097a184c1df4437654ed98df3d7a516e8508a6ba45d8b092bbdf283\"\n \"checksum env_logger 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15abd780e45b3ea4f76b4e9a26ff4843258dd8a3eed2775a0e7368c2e7936c2f\"\n \"checksum filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5363ab8e4139b8568a6237db5248646e5a8a2f89bd5ccb02092182b11fd3e922\"\n \"checksum gcc 0.3.38 (registry+https://github.com/rust-lang/crates.io-index)\" = \"553f11439bdefe755bf366b264820f1da70f3aaf3924e594b886beb9c831bcf5\"\n \"checksum getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9047cfbd08a437050b363d35ef160452c5fe8ea5187ae0a624708c91581d685\"\n-\"checksum idna 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1053236e00ce4f668aeca4a769a09b3bf5a682d802abd6f3cb39374f6b162c11\"\n-\"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n \"checksum libc 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"044d1360593a78f5c8e5e710beccdc24ab71d1f01bc19a29bcacdba22e8475d8\"\n \"checksum log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ab83497bf8bf4ed2a74259c1c802351fcd67a65baa86394b6ba73c36f4838054\"\n-\"checksum matches 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bcc3ad8109fa4b522f9b0cd81440422781f564aaf8c195de6b9d6642177ad0dd\"\n \"checksum md5 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a5539a8dee9b4ae308c9c406a379838b435a8f2c84cf9fedc6d5a576be9888db\"\n \"checksum num_cpus 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cee7e88156f3f9e19bdd598f8d6c9db7bf4078f99f8381f43a55b09648d1a6e3\"\n \"checksum rustc-serialize 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6159e4e6e559c81bd706afe9c8fd68f547d3e851ce12e76b1de7914bab61691b\"\n \"checksum toml 0.1.30 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0590d72182e50e879c4da3b11c6488dae18fccb1ae0c7a3eda18e16795844796\"\n-\"checksum unicode-bidi 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c1f7ceb96afdfeedee42bade65a0d585a6a0106f681b6749c8ff4daa8df30b3f\"\n-\"checksum unicode-normalization 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"26643a2f83bac55f1976fb716c10234485f9202dcd65cfbdf9da49867b271172\"\n-\"checksum url 1.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"48ccf7bd87a81b769cf84ad556e034541fb90e1cd6d4bc375c822ed9500cd9d7\"\n-\"checksum winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"167dc9d6949a9b857f3451275e911c3f44255842c1f7a76f33c55103a909087a\"\n-\"checksum winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2d315eee3b34aca4797b2da6b13ed88266e6d612562a0c46390af8299fc699bc\""}, {"sha": "4c9b578c1349d9de291516207d8f0c7e75deae0c", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31a8638e5e716bec90f4398a57c58fb34e492667/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/31a8638e5e716bec90f4398a57c58fb34e492667/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=31a8638e5e716bec90f4398a57c58fb34e492667", "patch": "@@ -27,10 +27,6 @@ num_cpus = \"0.2\"\n toml = \"0.1\"\n getopts = \"0.2\"\n rustc-serialize = \"0.3\"\n-gcc = \"0.3.36\"\n+gcc = \"0.3.38\"\n libc = \"0.2\"\n md5 = \"0.1\"\n-\n-[target.'cfg(windows)'.dependencies]\n-winapi = \"0.2\"\n-kernel32-sys = \"0.2\""}, {"sha": "ec75530022459175bf7e098a01926071c50e4b1f", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/31a8638e5e716bec90f4398a57c58fb34e492667/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/31a8638e5e716bec90f4398a57c58fb34e492667/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=31a8638e5e716bec90f4398a57c58fb34e492667", "patch": "@@ -259,9 +259,11 @@ def build_bootstrap(self):\n         env[\"DYLD_LIBRARY_PATH\"] = os.path.join(self.bin_root(), \"lib\")\n         env[\"PATH\"] = os.path.join(self.bin_root(), \"bin\") + \\\n                       os.pathsep + env[\"PATH\"]\n-        self.run([self.cargo(), \"build\", \"--manifest-path\",\n-                  os.path.join(self.rust_root, \"src/bootstrap/Cargo.toml\")],\n-                 env)\n+        args = [self.cargo(), \"build\", \"--manifest-path\",\n+                os.path.join(self.rust_root, \"src/bootstrap/Cargo.toml\")]\n+        if self.use_vendored_sources:\n+            args.append(\"--frozen\")\n+        self.run(args, env)\n \n     def run(self, args, env):\n         proc = subprocess.Popen(args, env=env)\n@@ -384,6 +386,25 @@ def main():\n     except:\n         pass\n \n+    rb.use_vendored_sources = '\\nvendor = true' in rb.config_toml or \\\n+                              'CFG_ENABLE_VENDOR' in rb.config_mk\n+\n+    if rb.use_vendored_sources:\n+        if not os.path.exists('.cargo'):\n+            os.makedirs('.cargo')\n+        f = open('.cargo/config','w')\n+        f.write(\"\"\"\n+            [source.crates-io]\n+            replace-with = 'vendored-sources'\n+            registry = 'https://example.com'\n+\n+            [source.vendored-sources]\n+            directory = '{}/src/vendor'\n+        \"\"\".format(rb.rust_root))\n+        f.close()\n+    else:\n+        if os.path.exists('.cargo'):\n+            shutil.rmtree('.cargo')\n     data = stage0_data(rb.rust_root)\n     rb._rustc_channel, rb._rustc_date = data['rustc'].split('-', 1)\n     rb._cargo_channel, rb._cargo_date = data['cargo'].split('-', 1)"}, {"sha": "9a939fee43e8bcf06d2b8789a6b0e421fcce2e8a", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31a8638e5e716bec90f4398a57c58fb34e492667/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a8638e5e716bec90f4398a57c58fb34e492667/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=31a8638e5e716bec90f4398a57c58fb34e492667", "patch": "@@ -44,6 +44,7 @@ pub struct Config {\n     pub submodules: bool,\n     pub compiler_docs: bool,\n     pub docs: bool,\n+    pub vendor: bool,\n     pub target_config: HashMap<String, Target>,\n \n     // llvm codegen options\n@@ -126,6 +127,7 @@ struct Build {\n     docs: Option<bool>,\n     submodules: Option<bool>,\n     gdb: Option<String>,\n+    vendor: Option<bool>,\n }\n \n /// TOML representation of how the LLVM build is configured.\n@@ -234,6 +236,7 @@ impl Config {\n         set(&mut config.compiler_docs, build.compiler_docs);\n         set(&mut config.docs, build.docs);\n         set(&mut config.submodules, build.submodules);\n+        set(&mut config.vendor, build.vendor);\n \n         if let Some(ref llvm) = toml.llvm {\n             set(&mut config.ccache, llvm.ccache);\n@@ -347,6 +350,7 @@ impl Config {\n                 (\"LOCAL_REBUILD\", self.local_rebuild),\n                 (\"NINJA\", self.ninja),\n                 (\"CODEGEN_TESTS\", self.codegen_tests),\n+                (\"VENDOR\", self.vendor),\n             }\n \n             match key {"}, {"sha": "306708f9e4b68444ad4e9012d2d101c7a14456bc", "filename": "src/bootstrap/config.toml.example", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/31a8638e5e716bec90f4398a57c58fb34e492667/src%2Fbootstrap%2Fconfig.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/31a8638e5e716bec90f4398a57c58fb34e492667/src%2Fbootstrap%2Fconfig.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.toml.example?ref=31a8638e5e716bec90f4398a57c58fb34e492667", "patch": "@@ -82,6 +82,9 @@\n # The path to (or name of) the GDB executable to use\n #gdb = \"gdb\"\n \n+# Indicate whether the vendored sources are used for Rust dependencies or not\n+#vendor = false\n+\n # =============================================================================\n # Options for compiling Rust code itself\n # ============================================================================="}, {"sha": "b4d7aff97da6a30a6784865e732994b5ddc44095", "filename": "src/bootstrap/job.rs", "status": "modified", "additions": 71, "deletions": 4, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/31a8638e5e716bec90f4398a57c58fb34e492667/src%2Fbootstrap%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a8638e5e716bec90f4398a57c58fb34e492667/src%2Fbootstrap%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fjob.rs?ref=31a8638e5e716bec90f4398a57c58fb34e492667", "patch": "@@ -37,15 +37,82 @@\n //! Note that this module has a #[cfg(windows)] above it as none of this logic\n //! is required on Unix.\n \n-extern crate kernel32;\n-extern crate winapi;\n+#![allow(bad_style, dead_code)]\n \n use std::env;\n use std::io;\n use std::mem;\n \n-use self::winapi::*;\n-use self::kernel32::*;\n+type HANDLE = *mut u8;\n+type BOOL = i32;\n+type DWORD = u32;\n+type LPHANDLE = *mut HANDLE;\n+type LPVOID = *mut u8;\n+type JOBOBJECTINFOCLASS = i32;\n+type SIZE_T = usize;\n+type LARGE_INTEGER = i64;\n+type ULONG_PTR = usize;\n+type ULONGLONG = u64;\n+\n+const FALSE: BOOL = 0;\n+const DUPLICATE_SAME_ACCESS: DWORD = 0x2;\n+const PROCESS_DUP_HANDLE: DWORD = 0x40;\n+const JobObjectExtendedLimitInformation: JOBOBJECTINFOCLASS = 9;\n+const JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE: DWORD = 0x2000;\n+\n+extern \"system\" {\n+    fn CreateJobObjectW(lpJobAttributes: *mut u8, lpName: *const u8) -> HANDLE;\n+    fn CloseHandle(hObject: HANDLE) -> BOOL;\n+    fn GetCurrentProcess() -> HANDLE;\n+    fn OpenProcess(dwDesiredAccess: DWORD,\n+                   bInheritHandle: BOOL,\n+                   dwProcessId: DWORD) -> HANDLE;\n+    fn DuplicateHandle(hSourceProcessHandle: HANDLE,\n+                       hSourceHandle: HANDLE,\n+                       hTargetProcessHandle: HANDLE,\n+                       lpTargetHandle: LPHANDLE,\n+                       dwDesiredAccess: DWORD,\n+                       bInheritHandle: BOOL,\n+                       dwOptions: DWORD) -> BOOL;\n+    fn AssignProcessToJobObject(hJob: HANDLE, hProcess: HANDLE) -> BOOL;\n+    fn SetInformationJobObject(hJob: HANDLE,\n+                               JobObjectInformationClass: JOBOBJECTINFOCLASS,\n+                               lpJobObjectInformation: LPVOID,\n+                               cbJobObjectInformationLength: DWORD) -> BOOL;\n+}\n+\n+#[repr(C)]\n+struct JOBOBJECT_EXTENDED_LIMIT_INFORMATION {\n+    BasicLimitInformation: JOBOBJECT_BASIC_LIMIT_INFORMATION,\n+    IoInfo: IO_COUNTERS,\n+    ProcessMemoryLimit: SIZE_T,\n+    JobMemoryLimit: SIZE_T,\n+    PeakProcessMemoryUsed: SIZE_T,\n+    PeakJobMemoryUsed: SIZE_T,\n+}\n+\n+#[repr(C)]\n+struct IO_COUNTERS {\n+    ReadOperationCount: ULONGLONG,\n+    WriteOperationCount: ULONGLONG,\n+    OtherOperationCount: ULONGLONG,\n+    ReadTransferCount: ULONGLONG,\n+    WriteTransferCount: ULONGLONG,\n+    OtherTransferCount: ULONGLONG,\n+}\n+\n+#[repr(C)]\n+struct JOBOBJECT_BASIC_LIMIT_INFORMATION {\n+    PerProcessUserTimeLimit: LARGE_INTEGER,\n+    PerJobUserTimeLimit: LARGE_INTEGER,\n+    LimitFlags: DWORD,\n+    MinimumWorkingsetSize: SIZE_T,\n+    MaximumWorkingsetSize: SIZE_T,\n+    ActiveProcessLimit: DWORD,\n+    Affinity: ULONG_PTR,\n+    PriorityClass: DWORD,\n+    SchedulingClass: DWORD,\n+}\n \n pub unsafe fn setup() {\n     // Create a new job object for us to use"}, {"sha": "e6b88ea58c9bc0de545265f2b17a43852fdde5b9", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/31a8638e5e716bec90f4398a57c58fb34e492667/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a8638e5e716bec90f4398a57c58fb34e492667/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=31a8638e5e716bec90f4398a57c58fb34e492667", "patch": "@@ -460,6 +460,9 @@ impl Build {\n         if self.config.rust_optimize {\n             cargo.arg(\"--release\");\n         }\n+        if self.config.vendor {\n+            cargo.arg(\"--frozen\");\n+        }\n         return cargo\n     }\n "}, {"sha": "d6b7dafea40e0135b4e6b1baef68036a2f23c553", "filename": "src/tools/linkchecker/Cargo.toml", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/31a8638e5e716bec90f4398a57c58fb34e492667/src%2Ftools%2Flinkchecker%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/31a8638e5e716bec90f4398a57c58fb34e492667/src%2Ftools%2Flinkchecker%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2FCargo.toml?ref=31a8638e5e716bec90f4398a57c58fb34e492667", "patch": "@@ -3,9 +3,6 @@ name = \"linkchecker\"\n version = \"0.1.0\"\n authors = [\"Alex Crichton <alex@alexcrichton.com>\"]\n \n-[dependencies]\n-url = \"1.2\"\n-\n [[bin]]\n name = \"linkchecker\"\n path = \"main.rs\""}, {"sha": "0e70c2b432f20cf776921a88a32e3f5d9ac220ed", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 29, "deletions": 35, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/31a8638e5e716bec90f4398a57c58fb34e492667/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a8638e5e716bec90f4398a57c58fb34e492667/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=31a8638e5e716bec90f4398a57c58fb34e492667", "patch": "@@ -24,17 +24,13 @@\n //! A few whitelisted exceptions are allowed as there's known bugs in rustdoc,\n //! but this should catch the majority of \"broken link\" cases.\n \n-extern crate url;\n-\n use std::env;\n use std::fs::File;\n use std::io::prelude::*;\n-use std::path::{Path, PathBuf};\n+use std::path::{Path, PathBuf, Component};\n use std::collections::{HashMap, HashSet};\n use std::collections::hash_map::Entry;\n \n-use url::Url;\n-\n use Redirect::*;\n \n macro_rules! t {\n@@ -47,9 +43,8 @@ macro_rules! t {\n fn main() {\n     let docs = env::args().nth(1).unwrap();\n     let docs = env::current_dir().unwrap().join(docs);\n-    let mut url = Url::from_file_path(&docs).unwrap();\n     let mut errors = false;\n-    walk(&mut HashMap::new(), &docs, &docs, &mut url, &mut errors);\n+    walk(&mut HashMap::new(), &docs, &docs, &mut errors);\n     if errors {\n         panic!(\"found some broken links\");\n     }\n@@ -88,30 +83,27 @@ impl FileEntry {\n     }\n }\n \n-fn walk(cache: &mut Cache, root: &Path, dir: &Path, url: &mut Url, errors: &mut bool) {\n+fn walk(cache: &mut Cache, root: &Path, dir: &Path, errors: &mut bool) {\n     for entry in t!(dir.read_dir()).map(|e| t!(e)) {\n         let path = entry.path();\n         let kind = t!(entry.file_type());\n-        url.path_segments_mut().unwrap().push(entry.file_name().to_str().unwrap());\n         if kind.is_dir() {\n-            walk(cache, root, &path, url, errors);\n+            walk(cache, root, &path, errors);\n         } else {\n-            let pretty_path = check(cache, root, &path, url, errors);\n+            let pretty_path = check(cache, root, &path, errors);\n             if let Some(pretty_path) = pretty_path {\n                 let entry = cache.get_mut(&pretty_path).unwrap();\n                 // we don't need the source anymore,\n                 // so drop to reduce memory-usage\n                 entry.source = String::new();\n             }\n         }\n-        url.path_segments_mut().unwrap().pop();\n     }\n }\n \n fn check(cache: &mut Cache,\n          root: &Path,\n          file: &Path,\n-         base: &Url,\n          errors: &mut bool)\n          -> Option<PathBuf> {\n     // ignore js files as they are not prone to errors as the rest of the\n@@ -157,19 +149,28 @@ fn check(cache: &mut Cache,\n            url.starts_with(\"irc:\") || url.starts_with(\"data:\") {\n             return;\n         }\n+        let mut parts = url.splitn(2, \"#\");\n+        let url = parts.next().unwrap();\n+        if url.is_empty() {\n+            return\n+        }\n+        let fragment = parts.next();\n+        let mut parts = url.splitn(2, \"?\");\n+        let url = parts.next().unwrap();\n+\n         // Once we've plucked out the URL, parse it using our base url and\n         // then try to extract a file path.\n-        let (parsed_url, path) = match url_to_file_path(&base, url) {\n-            Some((url, path)) => (url, PathBuf::from(path)),\n-            None => {\n-                *errors = true;\n-                println!(\"{}:{}: invalid link - {}\",\n-                         pretty_file.display(),\n-                         i + 1,\n-                         url);\n-                return;\n+        let mut path = file.to_path_buf();\n+        path.pop();\n+        for part in Path::new(url).components() {\n+            match part {\n+                Component::Prefix(_) |\n+                Component::RootDir => panic!(),\n+                Component::CurDir => {}\n+                Component::ParentDir => { path.pop(); }\n+                Component::Normal(s) => { path.push(s); }\n             }\n-        };\n+        }\n \n         // Alright, if we've found a file name then this file had better\n         // exist! If it doesn't then we register and print an error.\n@@ -200,7 +201,7 @@ fn check(cache: &mut Cache,\n                 Err(LoadError::IsRedirect) => unreachable!(),\n             };\n \n-            if let Some(ref fragment) = parsed_url.fragment() {\n+            if let Some(ref fragment) = fragment {\n                 // Fragments like `#1-6` are most likely line numbers to be\n                 // interpreted by javascript, so we're ignoring these\n                 if fragment.splitn(2, '-')\n@@ -231,7 +232,7 @@ fn check(cache: &mut Cache,\n \n fn load_file(cache: &mut Cache,\n              root: &Path,\n-             file: PathBuf,\n+             mut file: PathBuf,\n              redirect: Redirect)\n              -> Result<(PathBuf, String), LoadError> {\n     let mut contents = String::new();\n@@ -266,10 +267,9 @@ fn load_file(cache: &mut Cache,\n             maybe\n         }\n     };\n-    let base = Url::from_file_path(&file).unwrap();\n-\n-    match maybe_redirect.and_then(|url| url_to_file_path(&base, &url)) {\n-        Some((_, redirect_file)) => {\n+    file.pop();\n+    match maybe_redirect.map(|url| file.join(url)) {\n+        Some(redirect_file) => {\n             let path = PathBuf::from(redirect_file);\n             load_file(cache, root, path, FromRedirect(true))\n         }\n@@ -293,12 +293,6 @@ fn maybe_redirect(source: &str) -> Option<String> {\n     })\n }\n \n-fn url_to_file_path(parser: &Url, url: &str) -> Option<(Url, PathBuf)> {\n-    parser.join(url)\n-          .ok()\n-          .and_then(|parsed_url| parsed_url.to_file_path().ok().map(|f| (parsed_url, f)))\n-}\n-\n fn with_attrs_in_source<F: FnMut(&str, usize)>(contents: &str, attr: &str, mut f: F) {\n     for (i, mut line) in contents.lines().enumerate() {\n         while let Some(j) = line.find(attr) {"}, {"sha": "11acb64743a7ac04270fc0d3b6cf2feab7bae148", "filename": "src/tools/tidy/src/cargo.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/31a8638e5e716bec90f4398a57c58fb34e492667/src%2Ftools%2Ftidy%2Fsrc%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a8638e5e716bec90f4398a57c58fb34e492667/src%2Ftools%2Ftidy%2Fsrc%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fcargo.rs?ref=31a8638e5e716bec90f4398a57c58fb34e492667", "patch": "@@ -20,6 +20,9 @@ use std::fs::File;\n use std::path::Path;\n \n pub fn check(path: &Path, bad: &mut bool) {\n+    if path.ends_with(\"vendor\") {\n+        return\n+    }\n     for entry in t!(path.read_dir(), path).map(|e| t!(e)) {\n         // Look for `Cargo.toml` with a sibling `src/lib.rs` or `lib.rs`\n         if entry.file_name().to_str() == Some(\"Cargo.toml\") {"}, {"sha": "165dd52758ecc525b21ad7f66b982da99a37ae49", "filename": "src/tools/tidy/src/cargo_lock.rs", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/319f46fba306f9e3dbe09e48044f941e74406ed6/src%2Ftools%2Ftidy%2Fsrc%2Fcargo_lock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319f46fba306f9e3dbe09e48044f941e74406ed6/src%2Ftools%2Ftidy%2Fsrc%2Fcargo_lock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fcargo_lock.rs?ref=319f46fba306f9e3dbe09e48044f941e74406ed6", "patch": "@@ -1,45 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use std::path::Path;\n-use std::ffi::OsStr;\n-\n-const CARGO_LOCK: &'static str = \"Cargo.lock\";\n-\n-pub fn check(path: &Path, bad: &mut bool) {\n-    use std::process::Command;\n-\n-    super::walk(path,\n-                &mut |path| super::filter_dirs(path) || path.ends_with(\"src/test\"),\n-                &mut |file| {\n-        if let Some(CARGO_LOCK) = file.file_name().and_then(OsStr::to_str) {\n-            let rel_path = file.strip_prefix(path).unwrap();\n-            let git_friendly_path = rel_path.to_str().unwrap().replace(\"\\\\\", \"/\");\n-            let ret_code = Command::new(\"git\")\n-                                        .arg(\"diff\")\n-                                        .arg(\"--exit-code\")\n-                                        .arg(\"--patch\")\n-                                        .arg(\"HEAD\")\n-                                        .arg(&git_friendly_path)\n-                                        .current_dir(path)\n-                                        .status()\n-                                        .unwrap_or_else(|e| {\n-                                            panic!(\"could not run git diff-index: {}\", e);\n-                                        });\n-            if !ret_code.success() {\n-                let parent_path = file.parent().unwrap().join(\"Cargo.toml\");\n-                print!(\"dirty lock file found at {} \", rel_path.display());\n-                println!(\"please commit your changes or update the lock file by running:\");\n-                println!(\"\\n\\tcargo update --manifest-path {}\", parent_path.display());\n-                *bad = true;\n-            }\n-        }\n-    });\n-}"}, {"sha": "cb11fe261c459a97351a4d8cd30708c8e6325749", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/31a8638e5e716bec90f4398a57c58fb34e492667/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a8638e5e716bec90f4398a57c58fb34e492667/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=31a8638e5e716bec90f4398a57c58fb34e492667", "patch": "@@ -35,7 +35,6 @@ mod style;\n mod errors;\n mod features;\n mod cargo;\n-mod cargo_lock;\n mod pal;\n \n fn main() {\n@@ -48,7 +47,6 @@ fn main() {\n     errors::check(&path, &mut bad);\n     cargo::check(&path, &mut bad);\n     features::check(&path, &mut bad);\n-    cargo_lock::check(&path, &mut bad);\n     pal::check(&path, &mut bad);\n \n     if bad {\n@@ -66,6 +64,7 @@ fn filter_dirs(path: &Path) -> bool {\n         \"src/rustllvm\",\n         \"src/rust-installer\",\n         \"src/liblibc\",\n+        \"src/vendor\",\n     ];\n     skip.iter().any(|p| path.ends_with(p))\n }"}]}