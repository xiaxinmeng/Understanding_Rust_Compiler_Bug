{"sha": "64a1f6fbfda65afe45ccbb5f5c2e78011048afd6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0YTFmNmZiZmRhNjVhZmU0NWNjYmI1ZjVjMmU3ODAxMTA0OGFmZDY=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2018-02-15T23:45:52Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2018-02-18T21:29:25Z"}, "message": "Fix inlining", "tree": {"sha": "e2647af2e4a1a5bf9ee48651a978f762e9e0051e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2647af2e4a1a5bf9ee48651a978f762e9e0051e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64a1f6fbfda65afe45ccbb5f5c2e78011048afd6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAlqJ8DUACgkQtAh+UQ6Y\nsWTzTw//Y9JTiVf69mLFXVici90FEJ9neNr5FqIr9Fr9DyqllnbJjWLblLZBYkHX\nGgUYTKVjaKzlfMFZND9IelZI3bRQVCWVTykDf5q/JF5ZRk4TsyWWDh/joLDKPXG+\n9gA7TVYWIjBHs+wzDlCeDK643dcPND/Ck3oN2p53LYqvXWf4jhYcen8Tfw66gEWX\nztdl7Y9m0Hozpt0y40qnHGquXSYSY9/HHt3uaRLBJIN3pdfNoG/4F5Hb0qxT1Y0b\npRg9YylsBK5Gb8wQw5vZVFImKXfyurYOiJtvZ/3pQ7UAo45y20vkEBMva9PA0mtL\nUrkYAC6DAQeq/+klbpCadUBoJWzN0F6UuLh5pHCA7Qo5MKE0rDnmmd74x9dFyacL\nzrsViCtTMAFen8tzbRg2xWgbTHAUWU8pEtGddFBgHYrKKFKQ9lWWBhNxBtmHY99g\nyOAhwiKKsKS1px8Sgs5hRULeXAX/fytAY4nkGFKobzoK2YA+XSJVkQfQvaSdVFTi\njcTKD6dQP8oEGp1DQmE+0Y/bc5IX5hKG3dH/Ju3watzb/ah4bYO199Kc6HZeiSCH\nnwI8DMixyGtG1o1HBOuQ733+c4VfWcWkxNM/zYsFsoLi5EacQtSZu+DzJuBIWjUv\nbHdz+fQjKZUQ5JipKBawV5qXtSvWRARC08nSMTNzhKC3X9vFxzY=\n=jJj2\n-----END PGP SIGNATURE-----", "payload": "tree e2647af2e4a1a5bf9ee48651a978f762e9e0051e\nparent 94fd4f360bacce672a6ec576331a7600edcd6d51\nauthor Aaron Hill <aa1ronham@gmail.com> 1518738352 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1518989365 -0500\n\nFix inlining\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64a1f6fbfda65afe45ccbb5f5c2e78011048afd6", "html_url": "https://github.com/rust-lang/rust/commit/64a1f6fbfda65afe45ccbb5f5c2e78011048afd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64a1f6fbfda65afe45ccbb5f5c2e78011048afd6/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94fd4f360bacce672a6ec576331a7600edcd6d51", "url": "https://api.github.com/repos/rust-lang/rust/commits/94fd4f360bacce672a6ec576331a7600edcd6d51", "html_url": "https://github.com/rust-lang/rust/commit/94fd4f360bacce672a6ec576331a7600edcd6d51"}], "stats": {"total": 20, "additions": 15, "deletions": 5}, "files": [{"sha": "37b7c6c07b0f978917e805c045daacd91abc22c2", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/64a1f6fbfda65afe45ccbb5f5c2e78011048afd6/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a1f6fbfda65afe45ccbb5f5c2e78011048afd6/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=64a1f6fbfda65afe45ccbb5f5c2e78011048afd6", "patch": "@@ -2451,6 +2451,8 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n         <ul class='item-list' id='synthetic-implementors-list'>\n     \";\n \n+    let mut synthetic_types = Vec::new();\n+\n     if let Some(implementors) = cache.implementors.get(&it.def_id) {\n         // The DefId is for the first Type found with that name. The bool is\n         // if any Types with the same name but different DefId have been found.\n@@ -2506,6 +2508,9 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n         if t.auto {\n             write!(w, \"{}\", synthetic_impl_header)?;\n             for implementor in synthetic {\n+                synthetic_types.extend(\n+                    collect_paths_for_type(implementor.inner_impl().for_.clone())\n+                );\n                 render_implementor(cx, implementor, w, &implementor_dups)?;\n             }\n             write!(w, \"</ul>\")?;\n@@ -2516,13 +2521,13 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n         write!(w, \"{}\", impl_header)?;\n         write!(w, \"</ul>\")?;\n \n-        write!(w, r#\"<script type=\"text/javascript\">window.inlined_types=new Set();</script>\"#)?;\n-\n         if t.auto {\n             write!(w, \"{}\", synthetic_impl_header)?;\n             write!(w, \"</ul>\")?;\n         }\n     }\n+    write!(w, r#\"<script type=\"text/javascript\">window.inlined_types=new Set({});</script>\"#,\n+            as_json(&synthetic_types))?;\n \n     write!(w, r#\"<script type=\"text/javascript\" async\n                          src=\"{root_path}/implementors/{path}/{ty}.{name}.js\">"}, {"sha": "5c674cabde5d81cd654159e18cc57ab8f6f387a8", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/64a1f6fbfda65afe45ccbb5f5c2e78011048afd6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/64a1f6fbfda65afe45ccbb5f5c2e78011048afd6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=64a1f6fbfda65afe45ccbb5f5c2e78011048afd6", "patch": "@@ -1565,6 +1565,7 @@\n     window.register_implementors = function(imp) {\n         var implementors = document.getElementById('implementors-list');\n         var synthetic_implementors = document.getElementById('synthetic-implementors-list');\n+\n         var libs = Object.getOwnPropertyNames(imp);\n         for (var i = 0; i < libs.length; ++i) {\n             if (libs[i] === currentCrate) { continue; }\n@@ -1573,11 +1574,15 @@\n             struct_loop:\n             for (var j = 0; j < structs.length; ++j) {\n                 var struct = structs[j];\n+\n                 var list = struct.synthetic ? synthetic_implementors : implementors;\n \n-                for (var k = 0; k < struct.types.length; k++) {\n-                    if (window.inlined_types.has(struct.types[k])) {\n-                        continue struct_loop;\n+                if (struct.synthetic) {\n+                    for (var k = 0; k < struct.types.length; k++) {\n+                        if (window.inlined_types.has(struct.types[k])) {\n+                            continue struct_loop;\n+                        }\n+                        window.inlined_types.add(struct.types[k]);\n                     }\n                 }\n "}]}