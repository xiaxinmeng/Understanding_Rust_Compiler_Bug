{"sha": "ac300eaceb76fbd3f81a7c10d70b2a91ca5b89bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjMzAwZWFjZWI3NmZiZDNmODFhN2MxMGQ3MGIyYTkxY2E1Yjg5YmM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-05T13:42:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-05T13:42:37Z"}, "message": "Merge #9497\n\n9497: Wrap inlined closures in parens when inlined in an expression in `inline_call` r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "a0101a17dabed0edd21e92e3307f293e6d90c03b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0101a17dabed0edd21e92e3307f293e6d90c03b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac300eaceb76fbd3f81a7c10d70b2a91ca5b89bc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg4wxNCRBK7hj4Ov3rIwAAABYIAK/bNvqGuoPKN+jLKihCfw2W\nCo/qG8bVhk4pHcrK46xwxbgoONhUHULRaqektXBtMKT0z9wcZ/VGw2r/AB/gH792\nvLn0GNr4+my6/y6RlQqi7CF7FQQcu6k4QgxqAU79/wznFO+jErdUzhf7NfwcDhdV\nMxOD1E/zIx+205JqiQDY/KC4v995Y9rqaZyIFpu8LPu++MtLNnnmmgzhQEBJ38Nq\n5lB5c7tK2xUqPqAia0yr4aEbBG6ribeBw1JificepUiMwRI2SzYKpyh4EGiF0buC\ngwQialYY0unupmfbGxP4vm3AT0JTAcua46q5hBI0cumq3NykmCh+/pv6WIqfL9g=\n=EhU8\n-----END PGP SIGNATURE-----\n", "payload": "tree a0101a17dabed0edd21e92e3307f293e6d90c03b\nparent 1ef077af70921e9691e45352cf90c43e370c748f\nparent dafbe6940e6cbcd4a98e31c5e851c314e3640888\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1625492557 +0000\ncommitter GitHub <noreply@github.com> 1625492557 +0000\n\nMerge #9497\n\n9497: Wrap inlined closures in parens when inlined in an expression in `inline_call` r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac300eaceb76fbd3f81a7c10d70b2a91ca5b89bc", "html_url": "https://github.com/rust-lang/rust/commit/ac300eaceb76fbd3f81a7c10d70b2a91ca5b89bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac300eaceb76fbd3f81a7c10d70b2a91ca5b89bc/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ef077af70921e9691e45352cf90c43e370c748f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ef077af70921e9691e45352cf90c43e370c748f", "html_url": "https://github.com/rust-lang/rust/commit/1ef077af70921e9691e45352cf90c43e370c748f"}, {"sha": "dafbe6940e6cbcd4a98e31c5e851c314e3640888", "url": "https://api.github.com/repos/rust-lang/rust/commits/dafbe6940e6cbcd4a98e31c5e851c314e3640888", "html_url": "https://github.com/rust-lang/rust/commit/dafbe6940e6cbcd4a98e31c5e851c314e3640888"}], "stats": {"total": 141, "additions": 101, "deletions": 40}, "files": [{"sha": "f6840a27b3074a057126713116ec7f495687479c", "filename": "crates/ide_assists/src/handlers/inline_call.rs", "status": "modified", "additions": 71, "deletions": 17, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/ac300eaceb76fbd3f81a7c10d70b2a91ca5b89bc/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac300eaceb76fbd3f81a7c10d70b2a91ca5b89bc/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs?ref=ac300eaceb76fbd3f81a7c10d70b2a91ca5b89bc", "patch": "@@ -14,26 +14,23 @@ use crate::{\n \n // Assist: inline_call\n //\n-// Inlines a function or method body.\n+// Inlines a function or method body creating a `let` statement per parameter unless the parameter\n+// can be inlined. The parameter will be inlined either if it the supplied argument is a simple local\n+// or if the parameter is only accessed inside the function body once.\n //\n // ```\n-// fn align(a: u32, b: u32) -> u32 {\n-//     (a + b - 1) & !(b - 1)\n-// }\n-// fn main() {\n-//     let x = align$0(1, 2);\n+// # //- minicore: option\n+// fn foo(name: Option<&str>) {\n+//     let name = name.unwrap$0();\n // }\n // ```\n // ->\n // ```\n-// fn align(a: u32, b: u32) -> u32 {\n-//     (a + b - 1) & !(b - 1)\n-// }\n-// fn main() {\n-//     let x = {\n-//         let b = 2;\n-//         (1 + b - 1) & !(b - 1)\n-//     };\n+// fn foo(name: Option<&str>) {\n+//     let name = match name {\n+//             Some(val) => val,\n+//             None => panic!(\"called `Option::unwrap()` on a `None` value\"),\n+//         };\n // }\n // ```\n pub(crate) fn inline_call(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n@@ -137,7 +134,7 @@ pub(crate) fn inline_(\n                                 .covering_element(range)\n                                 .ancestors()\n                                 .nth(3)\n-                                .filter(|it| ast::PathExpr::can_cast(it.kind())),\n+                                .and_then(ast::PathExpr::cast),\n                             _ => None,\n                         })\n                         .collect::<Option<Vec<_>>>()\n@@ -163,7 +160,14 @@ pub(crate) fn inline_(\n                 match &*usages {\n                     // inline single use parameters\n                     [usage] => {\n-                        ted::replace(usage, expr.syntax().clone_for_update());\n+                        let expr = if matches!(expr, ast::Expr::ClosureExpr(_))\n+                            && usage.syntax().parent().and_then(ast::Expr::cast).is_some()\n+                        {\n+                            make::expr_paren(expr)\n+                        } else {\n+                            expr\n+                        };\n+                        ted::replace(usage.syntax(), expr.syntax().clone_for_update());\n                     }\n                     // inline parameters whose expression is a simple local reference\n                     [_, ..]\n@@ -173,7 +177,7 @@ pub(crate) fn inline_(\n                         ) =>\n                     {\n                         usages.into_iter().for_each(|usage| {\n-                            ted::replace(usage, &expr.syntax().clone_for_update());\n+                            ted::replace(usage.syntax(), &expr.syntax().clone_for_update());\n                         });\n                     }\n                     // cant inline, emit a let statement\n@@ -540,6 +544,56 @@ impl Foo {\n         };\n     }\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn wraps_closure_in_paren() {\n+        check_assist(\n+            inline_call,\n+            r#\"\n+fn foo(x: fn()) {\n+    x();\n+}\n+\n+fn main() {\n+    foo$0(|| {})\n+}\n+\"#,\n+            r#\"\n+fn foo(x: fn()) {\n+    x();\n+}\n+\n+fn main() {\n+    {\n+        (|| {})();\n+    }\n+}\n+\"#,\n+        );\n+        check_assist(\n+            inline_call,\n+            r#\"\n+fn foo(x: fn()) {\n+    x();\n+}\n+\n+fn main() {\n+    foo$0(main)\n+}\n+\"#,\n+            r#\"\n+fn foo(x: fn()) {\n+    x();\n+}\n+\n+fn main() {\n+    {\n+        main();\n+    }\n+}\n \"#,\n         );\n     }"}, {"sha": "e35e68b40dcafe53a2654aadbc26db279bb4e774", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ac300eaceb76fbd3f81a7c10d70b2a91ca5b89bc/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac300eaceb76fbd3f81a7c10d70b2a91ca5b89bc/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=ac300eaceb76fbd3f81a7c10d70b2a91ca5b89bc", "patch": "@@ -923,22 +923,17 @@ fn doctest_inline_call() {\n     check_doc_test(\n         \"inline_call\",\n         r#####\"\n-fn align(a: u32, b: u32) -> u32 {\n-    (a + b - 1) & !(b - 1)\n-}\n-fn main() {\n-    let x = align$0(1, 2);\n+//- minicore: option\n+fn foo(name: Option<&str>) {\n+    let name = name.unwrap$0();\n }\n \"#####,\n         r#####\"\n-fn align(a: u32, b: u32) -> u32 {\n-    (a + b - 1) & !(b - 1)\n-}\n-fn main() {\n-    let x = {\n-        let b = 2;\n-        (1 + b - 1) & !(b - 1)\n-    };\n+fn foo(name: Option<&str>) {\n+    let name = match name {\n+            Some(val) => val,\n+            None => panic!(\"called `Option::unwrap()` on a `None` value\"),\n+        };\n }\n \"#####,\n     )"}, {"sha": "e16021c82ffcfdc4e0159081eccd15ab3f897d0a", "filename": "crates/ide_db/src/helpers/insert_use.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ac300eaceb76fbd3f81a7c10d70b2a91ca5b89bc/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac300eaceb76fbd3f81a7c10d70b2a91ca5b89bc/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs?ref=ac300eaceb76fbd3f81a7c10d70b2a91ca5b89bc", "patch": "@@ -1,4 +1,7 @@\n //! Handle syntactic aspects of inserting a new `use`.\n+#[cfg(test)]\n+mod tests;\n+\n use std::cmp::Ordering;\n \n use hir::Semantics;\n@@ -378,5 +381,3 @@ fn is_inner_comment(token: SyntaxToken) -> bool {\n     ast::Comment::cast(token).and_then(|comment| comment.kind().doc)\n         == Some(ast::CommentPlacement::Inner)\n }\n-#[cfg(test)]\n-mod tests;"}, {"sha": "c5420f4679651060bb5b046b4bd0ddd282b8dbd0", "filename": "crates/ide_db/src/helpers/insert_use/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac300eaceb76fbd3f81a7c10d70b2a91ca5b89bc/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac300eaceb76fbd3f81a7c10d70b2a91ca5b89bc/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use%2Ftests.rs?ref=ac300eaceb76fbd3f81a7c10d70b2a91ca5b89bc", "patch": "@@ -14,7 +14,7 @@ fn foo() {$0}\n         r#\"\n #[cfg(test)]\n fn foo() {\n-use bar::Bar;\n+    use bar::Bar;\n }\n \"#,\n         ImportGranularity::Crate,\n@@ -32,7 +32,7 @@ const FOO: Bar = {$0};\n         r#\"\n #[cfg(test)]\n const FOO: Bar = {\n-use bar::Bar;\n+    use bar::Bar;\n };\n \"#,\n         ImportGranularity::Crate,"}, {"sha": "2396408270efceb0f879a8d8db39c9322855c44d", "filename": "crates/syntax/src/ted.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ac300eaceb76fbd3f81a7c10d70b2a91ca5b89bc/crates%2Fsyntax%2Fsrc%2Fted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac300eaceb76fbd3f81a7c10d70b2a91ca5b89bc/crates%2Fsyntax%2Fsrc%2Fted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fted.rs?ref=ac300eaceb76fbd3f81a7c10d70b2a91ca5b89bc", "patch": "@@ -161,6 +161,14 @@ fn ws_before(position: &Position, new: &SyntaxElement) -> Option<SyntaxToken> {\n         }\n     }\n \n+    if prev.kind() == T!['{'] && ast::Stmt::can_cast(new.kind()) {\n+        if let Some(block_expr) = prev.parent().and_then(ast::BlockExpr::cast) {\n+            let mut indent = IndentLevel::from_element(&block_expr.syntax().clone().into());\n+            indent.0 += 1;\n+            return Some(make::tokens::whitespace(&format!(\"\\n{}\", indent)));\n+        }\n+    }\n+\n     ws_between(prev, new)\n }\n fn ws_after(position: &Position, new: &SyntaxElement) -> Option<SyntaxToken> {\n@@ -187,12 +195,6 @@ fn ws_between(left: &SyntaxElement, right: &SyntaxElement) -> Option<SyntaxToken\n         return None;\n     }\n \n-    if left.kind() == T!['{'] && right.kind() == SyntaxKind::LET_STMT {\n-        let mut indent = IndentLevel::from_element(left);\n-        indent.0 += 1;\n-        return Some(make::tokens::whitespace(&format!(\"\\n{}\", indent)));\n-    }\n-\n     if right.kind() == SyntaxKind::USE {\n         let mut indent = IndentLevel::from_element(left);\n         if left.kind() == SyntaxKind::USE {"}, {"sha": "8e212523fb61beee4857dae7b0ab1465a19e9335", "filename": "crates/test_utils/src/minicore.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ac300eaceb76fbd3f81a7c10d70b2a91ca5b89bc/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac300eaceb76fbd3f81a7c10d70b2a91ca5b89bc/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Fminicore.rs?ref=ac300eaceb76fbd3f81a7c10d70b2a91ca5b89bc", "patch": "@@ -330,6 +330,15 @@ pub mod option {\n         #[lang = \"Some\"]\n         Some(T),\n     }\n+\n+    impl<T> Option<T> {\n+        pub const fn unwrap(self) -> T {\n+            match self {\n+                Some(val) => val,\n+                None => panic!(\"called `Option::unwrap()` on a `None` value\"),\n+            }\n+        }\n+    }\n }\n // endregion:option\n "}]}