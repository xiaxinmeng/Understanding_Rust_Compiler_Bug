{"sha": "05e3c96d36b5281e969b5e79b92d671c7872bf83", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1ZTNjOTZkMzZiNTI4MWU5NjliNWU3OWI5MmQ2NzFjNzg3MmJmODM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-07T01:04:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-07T01:04:34Z"}, "message": "Auto merge of #44380 - Mark-Simulacrum:rollup, r=Mark-Simulacrum\n\nRollup of 23 pull requests\n\n- Successful merges: #44097, #44206, #44218, #44276, #44277, #44296, #44303, #44313, #44315, #44317, #44319, #44321, #44325, #44326, #44327, #44328, #44330, #44351, #44353, #44354, #44361, #44362, #44377\n- Failed merges:", "tree": {"sha": "f048a1b5964cebc464db1e380af1baa40080b455", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f048a1b5964cebc464db1e380af1baa40080b455"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05e3c96d36b5281e969b5e79b92d671c7872bf83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05e3c96d36b5281e969b5e79b92d671c7872bf83", "html_url": "https://github.com/rust-lang/rust/commit/05e3c96d36b5281e969b5e79b92d671c7872bf83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05e3c96d36b5281e969b5e79b92d671c7872bf83/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3681220877771954fa923e50f227e632aabe8bbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/3681220877771954fa923e50f227e632aabe8bbc", "html_url": "https://github.com/rust-lang/rust/commit/3681220877771954fa923e50f227e632aabe8bbc"}, {"sha": "66670584cf30de5b9a68c0eb8de68c45ee2836a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/66670584cf30de5b9a68c0eb8de68c45ee2836a0", "html_url": "https://github.com/rust-lang/rust/commit/66670584cf30de5b9a68c0eb8de68c45ee2836a0"}], "stats": {"total": 642, "additions": 559, "deletions": 83}, "files": [{"sha": "2979ffe136c90af382669f56f007d65d7ac85d52", "filename": "RELEASES.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05e3c96d36b5281e969b5e79b92d671c7872bf83/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/05e3c96d36b5281e969b5e79b92d671c7872bf83/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=05e3c96d36b5281e969b5e79b92d671c7872bf83", "patch": "@@ -170,7 +170,7 @@ Compatibility Notes\n [`slice::sort_unstable_by_key`]: https://doc.rust-lang.org/std/primitive.slice.html#method.sort_unstable_by_key\n [`slice::sort_unstable_by`]: https://doc.rust-lang.org/std/primitive.slice.html#method.sort_unstable_by\n [`slice::sort_unstable`]: https://doc.rust-lang.org/std/primitive.slice.html#method.sort_unstable\n-[`ste::from_boxed_utf8_unchecked`]: https://doc.rust-lang.org/std/str/fn.from_boxed_utf8_unchecked.html\n+[`str::from_boxed_utf8_unchecked`]: https://doc.rust-lang.org/std/str/fn.from_boxed_utf8_unchecked.html\n [`str::as_bytes_mut`]: https://doc.rust-lang.org/std/primitive.str.html#method.as_bytes_mut\n [`str::from_utf8_mut`]: https://doc.rust-lang.org/std/str/fn.from_utf8_mut.html\n [`str::from_utf8_unchecked_mut`]: https://doc.rust-lang.org/std/str/fn.from_utf8_unchecked_mut.html"}, {"sha": "266f4250132135a78593035e6abd7546c5950550", "filename": "config.toml.example", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05e3c96d36b5281e969b5e79b92d671c7872bf83/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/05e3c96d36b5281e969b5e79b92d671c7872bf83/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=05e3c96d36b5281e969b5e79b92d671c7872bf83", "patch": "@@ -146,10 +146,10 @@\n # option to true.\n #full-bootstrap = false\n \n-# Enable a build of the and extended rust tool set which is not only the\n-# compiler but also tools such as Cargo. This will also produce \"combined\n-# installers\" which are used to install Rust and Cargo together. This is\n-# disabled by default.\n+# Enable a build of the extended rust tool set which is not only the compiler\n+# but also tools such as Cargo. This will also produce \"combined installers\"\n+# which are used to install Rust and Cargo together. This is disabled by\n+# default.\n #extended = false\n \n # Verbosity level: 0 == not verbose, 1 == verbose, 2 == very verbose\n@@ -175,7 +175,7 @@\n # script.\n #configure-args = []\n \n-# Indicates that a local rebuild is ocurring instead of a full bootstrap,\n+# Indicates that a local rebuild is occurring instead of a full bootstrap,\n # essentially skipping stage0 as the local compiler is recompiling itself again.\n #local-rebuild = false\n "}, {"sha": "2ca65396b35944403b814e863ea489538a790590", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=05e3c96d36b5281e969b5e79b92d671c7872bf83", "patch": "@@ -365,6 +365,9 @@ impl Step for Rustc {\n         // tiny morsel of metadata is used by rust-packaging\n         let version = build.rust_version();\n         t!(t!(File::create(overlay.join(\"version\"))).write_all(version.as_bytes()));\n+        if let Some(sha) = build.rust_sha() {\n+            t!(t!(File::create(overlay.join(\"git-commit-hash\"))).write_all(sha.as_bytes()));\n+        }\n \n         // On MinGW we've got a few runtime DLL dependencies that we need to\n         // include. The first argument to this script is where to put these DLLs\n@@ -844,6 +847,9 @@ impl Step for PlainSourceTarball {\n \n         // Create the version file\n         write_file(&plain_dst_src.join(\"version\"), build.rust_version().as_bytes());\n+        if let Some(sha) = build.rust_sha() {\n+            write_file(&plain_dst_src.join(\"git-commit-hash\"), sha.as_bytes());\n+        }\n \n         // If we're building from git sources, we need to vendor a complete distribution.\n         if build.rust_info.is_git() {\n@@ -1157,14 +1163,20 @@ impl Step for Extended {\n         install(&build.src.join(\"LICENSE-MIT\"), &overlay, 0o644);\n         let version = build.rust_version();\n         t!(t!(File::create(overlay.join(\"version\"))).write_all(version.as_bytes()));\n+        if let Some(sha) = build.rust_sha() {\n+            t!(t!(File::create(overlay.join(\"git-commit-hash\"))).write_all(sha.as_bytes()));\n+        }\n         install(&etc.join(\"README.md\"), &overlay, 0o644);\n \n         // When rust-std package split from rustc, we needed to ensure that during\n         // upgrades rustc was upgraded before rust-std. To avoid rustc clobbering\n         // the std files during uninstall. To do this ensure that rustc comes\n         // before rust-std in the list below.\n         let mut tarballs = vec![rustc_installer, cargo_installer, rls_installer,\n-                                analysis_installer, docs_installer, std_installer];\n+                                analysis_installer, std_installer];\n+        if build.config.docs {\n+            tarballs.push(docs_installer);\n+        }\n         if target.contains(\"pc-windows-gnu\") {\n             tarballs.push(mingw_installer.unwrap());\n         }"}, {"sha": "608924c9c28d196b623d421a87e185030cbc59d5", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=05e3c96d36b5281e969b5e79b92d671c7872bf83", "patch": "@@ -200,7 +200,7 @@ install!((self, builder, _config),\n         builder.ensure(dist::Src);\n         install_src(builder, self.stage);\n     }, ONLY_BUILD;\n-    Rustc, \"src/librustc\", _config.extended, only_hosts: true, {\n+    Rustc, \"src/librustc\", true, only_hosts: true, {\n         builder.ensure(dist::Rustc {\n             compiler: builder.compiler(self.stage, self.target),\n         });"}, {"sha": "67791e8758c0bef14305ff987505c6a81d497943", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=05e3c96d36b5281e969b5e79b92d671c7872bf83", "patch": "@@ -797,6 +797,11 @@ impl Build {\n         self.rust_info.version(self, channel::CFG_RELEASE_NUM)\n     }\n \n+    /// Return the full commit hash\n+    fn rust_sha(&self) -> Option<&str> {\n+        self.rust_info.sha()\n+    }\n+\n     /// Returns the `a.b.c` version that the given package is at.\n     fn release_num(&self, package: &str) -> String {\n         let mut toml = String::new();"}, {"sha": "2cbae083fc464bd7610d825fcb72e3e5e41e8c95", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=05e3c96d36b5281e969b5e79b92d671c7872bf83", "patch": "@@ -417,6 +417,7 @@ impl Step for Openssl {\n             \"powerpc64-unknown-linux-gnu\" => \"linux-ppc64\",\n             \"powerpc64le-unknown-linux-gnu\" => \"linux-ppc64le\",\n             \"s390x-unknown-linux-gnu\" => \"linux64-s390x\",\n+            \"sparc64-unknown-netbsd\" => \"BSD-sparc64\",\n             \"x86_64-apple-darwin\" => \"darwin64-x86_64-cc\",\n             \"x86_64-linux-android\" => \"linux-x86_64\",\n             \"x86_64-unknown-freebsd\" => \"BSD-x86_64\",\n@@ -436,6 +437,15 @@ impl Step for Openssl {\n             configure.arg(\"-mandroid\");\n             configure.arg(\"-fomit-frame-pointer\");\n         }\n+        if target == \"sparc64-unknown-netbsd\" {\n+            // Need -m64 to get assembly generated correctly for sparc64.\n+            configure.arg(\"-m64\");\n+            if build.build.contains(\"netbsd\") {\n+                // Disable sparc64 asm on NetBSD builders, it uses\n+                // m4(1)'s -B flag, which NetBSD m4 does not support.\n+                configure.arg(\"no-asm\");\n+            }\n+        }\n         // Make PIE binaries\n         // Non-PIE linker support was removed in Lollipop\n         // https://source.android.com/security/enhancements/enhancements50"}, {"sha": "626843818425466a3a2dd6aa2be5207a86b90200", "filename": "src/etc/platform-intrinsics/powerpc.json", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Fetc%2Fplatform-intrinsics%2Fpowerpc.json", "raw_url": "https://github.com/rust-lang/rust/raw/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Fetc%2Fplatform-intrinsics%2Fpowerpc.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fpowerpc.json?ref=05e3c96d36b5281e969b5e79b92d671c7872bf83", "patch": "@@ -156,6 +156,69 @@\n             \"llvm\": \"vupkh{1.kind}{1.data_type_short}\",\n             \"ret\": \"s(16-32)\",\n             \"args\": [\"0N\"]\n+        },\n+        {\n+            \"intrinsic\": \"madds\",\n+            \"width\": [128],\n+            \"llvm\": \"vmhaddshs\",\n+            \"ret\": \"s16\",\n+            \"args\": [\"0\", \"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"msumu{1.data_type_short}m\",\n+            \"width\": [128],\n+            \"llvm\": \"vmsumu{1.data_type_short}m\",\n+            \"ret\": \"u32\",\n+            \"args\": [\"u(8-16)\", \"1\", \"u32\"]\n+        },\n+        {\n+            \"intrinsic\": \"msummbm\",\n+            \"width\": [128],\n+            \"llvm\": \"vmsummbm\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"s8\", \"u8\", \"s32\"]\n+        },\n+        {\n+            \"intrinsic\": \"msumshm\",\n+            \"width\": [128],\n+            \"llvm\": \"vmsumshm\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"s16\", \"s16\", \"s32\"]\n+        },\n+        {\n+            \"intrinsic\": \"msum{0.kind}hs\",\n+            \"width\": [128],\n+            \"llvm\": \"vmsum{0.kind}hs\",\n+            \"ret\": \"i32\",\n+            \"args\": [\"0N\", \"0N\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"sum2s\",\n+            \"width\": [128],\n+            \"llvm\": \"vsum2sws\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"sum4{0.kind}bs\",\n+            \"width\": [128],\n+            \"llvm\": \"vsum4{0.kind}bs\",\n+            \"ret\": \"i32\",\n+            \"args\": [\"0NN\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"sum4shs\",\n+            \"width\": [128],\n+            \"llvm\": \"vsum4shs\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0N\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"sums\",\n+            \"width\": [128],\n+            \"llvm\": \"vsumsws\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0\", \"0\"]\n         }\n     ]\n }"}, {"sha": "2045d5ddd972ddc37645294b811535bf6974e925", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=05e3c96d36b5281e969b5e79b92d671c7872bf83", "patch": "@@ -671,10 +671,25 @@ impl<T> [T] {\n     /// # Examples\n     ///\n     /// ```\n-    /// let v = [10, 40, 30, 20, 50];\n-    /// let (v1, v2) = v.split_at(2);\n-    /// assert_eq!([10, 40], v1);\n-    /// assert_eq!([30, 20, 50], v2);\n+    /// let v = [1, 2, 3, 4, 5, 6];\n+    ///\n+    /// {\n+    ///    let (left, right) = v.split_at(0);\n+    ///    assert!(left == []);\n+    ///    assert!(right == [1, 2, 3, 4, 5, 6]);\n+    /// }\n+    ///\n+    /// {\n+    ///     let (left, right) = v.split_at(2);\n+    ///     assert!(left == [1, 2]);\n+    ///     assert!(right == [3, 4, 5, 6]);\n+    /// }\n+    ///\n+    /// {\n+    ///     let (left, right) = v.split_at(6);\n+    ///     assert!(left == [1, 2, 3, 4, 5, 6]);\n+    ///     assert!(right == []);\n+    /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -695,26 +710,16 @@ impl<T> [T] {\n     /// # Examples\n     ///\n     /// ```\n-    /// let mut v = [1, 2, 3, 4, 5, 6];\n-    ///\n+    /// let mut v = [1, 0, 3, 0, 5, 6];\n     /// // scoped to restrict the lifetime of the borrows\n     /// {\n-    ///    let (left, right) = v.split_at_mut(0);\n-    ///    assert!(left == []);\n-    ///    assert!(right == [1, 2, 3, 4, 5, 6]);\n-    /// }\n-    ///\n-    /// {\n     ///     let (left, right) = v.split_at_mut(2);\n-    ///     assert!(left == [1, 2]);\n-    ///     assert!(right == [3, 4, 5, 6]);\n-    /// }\n-    ///\n-    /// {\n-    ///     let (left, right) = v.split_at_mut(6);\n-    ///     assert!(left == [1, 2, 3, 4, 5, 6]);\n-    ///     assert!(right == []);\n+    ///     assert!(left == [1, 0]);\n+    ///     assert!(right == [3, 0, 5, 6]);\n+    ///     left[1] = 2;\n+    ///     right[1] = 4;\n     /// }\n+    /// assert!(v == [1, 2, 3, 4, 5, 6]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]"}, {"sha": "dc1f2981a50ad7406754e74f6adf0573140e0a2e", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=05e3c96d36b5281e969b5e79b92d671c7872bf83", "patch": "@@ -481,6 +481,30 @@ pub trait Ord: Eq + PartialOrd<Self> {\n     where Self: Sized {\n         if self <= other { self } else { other }\n     }\n+\n+    /// Returns max if self is greater than max, and min if self is less than min.\n+    /// Otherwise this will return self.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(clamp)]\n+    ///\n+    /// assert!((-3).clamp(-2, 1) == -2);\n+    /// assert!(0.clamp(-2, 1) == 0);\n+    /// assert!(2.clamp(-2, 1) == 1);\n+    /// ```\n+    ///\n+    /// # Panics\n+    /// Panics if min > max.\n+    #[unstable(feature = \"clamp\", issue = \"44095\")]\n+    fn clamp(self, min: Self, max: Self) -> Self\n+    where Self: Sized {\n+        assert!(min <= max);\n+        if self < min { min }\n+        else if self > max { max }\n+        else { self }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "83f8f9988f44890f358414ad731c6302b2735350", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=05e3c96d36b5281e969b5e79b92d671c7872bf83", "patch": "@@ -531,15 +531,13 @@ macro_rules! unreachable {\n \n /// A standardized placeholder for marking unfinished code.\n ///\n-/// It panics with the message `\"not yet implemented\"` when executed.\n-///\n /// This can be useful if you are prototyping and are just looking to have your\n /// code typecheck, or if you're implementing a trait that requires multiple\n /// methods, and you're only planning on using one of them.\n ///\n /// # Panics\n ///\n-/// This macro always panics.\n+/// This will always [panic!](macro.panic.html)\n ///\n /// # Examples\n ///"}, {"sha": "f93564c2849f5613ca499649793c8b2abdd990d1", "filename": "src/libcore/num/dec2flt/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Flibcore%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Flibcore%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Fmod.rs?ref=05e3c96d36b5281e969b5e79b92d671c7872bf83", "patch": "@@ -121,7 +121,6 @@ macro_rules! from_str_float_impl {\n             /// * '-3.14'\n             /// * '2.5E10', or equivalently, '2.5e10'\n             /// * '2.5E-10'\n-            /// * '.' (understood as 0)\n             /// * '5.'\n             /// * '.5', or, equivalently,  '0.5'\n             /// * 'inf', '-inf', 'NaN'"}, {"sha": "78daff9f67aa5dde75bc1ba8e590a89b113d4cc3", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=05e3c96d36b5281e969b5e79b92d671c7872bf83", "patch": "@@ -93,10 +93,19 @@ impl serialize::UseSpecializedDecodable for CrateNum {\n ///\n /// Since the DefIndex is mostly treated as an opaque ID, you probably\n /// don't have to care about these ranges.\n-#[derive(Clone, Debug, Eq, Ord, PartialOrd, PartialEq, RustcEncodable,\n+#[derive(Clone, Eq, Ord, PartialOrd, PartialEq, RustcEncodable,\n            RustcDecodable, Hash, Copy)]\n pub struct DefIndex(u32);\n \n+impl fmt::Debug for DefIndex {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f,\n+               \"DefIndex({}:{})\",\n+               self.address_space().index(),\n+               self.as_array_index())\n+    }\n+}\n+\n impl DefIndex {\n     #[inline]\n     pub fn new(x: usize) -> DefIndex {"}, {"sha": "b2572b2d0aba690a83f197005ab92673a1c63d1b", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=05e3c96d36b5281e969b5e79b92d671c7872bf83", "patch": "@@ -606,14 +606,20 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n                    _location: Location) {\n         if *local == RETURN_POINTER {\n             match self.destination {\n-                Lvalue::Local(l) => *local = l,\n+                Lvalue::Local(l) => {\n+                    *local = l;\n+                    return;\n+                },\n                 ref lval => bug!(\"Return lvalue is {:?}, not local\", lval)\n             }\n         }\n         let idx = local.index() - 1;\n         if idx < self.args.len() {\n             match self.args[idx] {\n-                Operand::Consume(Lvalue::Local(l)) => *local = l,\n+                Operand::Consume(Lvalue::Local(l)) => {\n+                    *local = l;\n+                    return;\n+                },\n                 ref op => bug!(\"Arg operand `{:?}` is {:?}, not local\", idx, op)\n             }\n         }"}, {"sha": "a9c56309aa8ba9ec1072bd04ef030834321399a0", "filename": "src/librustc_platform_intrinsics/powerpc.rs", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Flibrustc_platform_intrinsics%2Fpowerpc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Flibrustc_platform_intrinsics%2Fpowerpc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Fpowerpc.rs?ref=05e3c96d36b5281e969b5e79b92d671c7872bf83", "patch": "@@ -337,6 +337,66 @@ pub fn find(name: &str) -> Option<Intrinsic> {\n             output: &::I32x4,\n             definition: Named(\"llvm.ppc.altivec.vupkhsh\")\n         },\n+        \"_vec_madds\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 3] = [&::I16x8, &::I16x8, &::I16x8]; &INPUTS },\n+            output: &::I16x8,\n+            definition: Named(\"llvm.ppc.altivec.vmhaddshs\")\n+        },\n+        \"_vec_msumubm\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 3] = [&::U8x16, &::U8x16, &::U32x4]; &INPUTS },\n+            output: &::U32x4,\n+            definition: Named(\"llvm.ppc.altivec.vmsumubm\")\n+        },\n+        \"_vec_msumuhm\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 3] = [&::U16x8, &::U16x8, &::U32x4]; &INPUTS },\n+            output: &::U32x4,\n+            definition: Named(\"llvm.ppc.altivec.vmsumuhm\")\n+        },\n+        \"_vec_msummbm\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 3] = [&::I8x16, &::U8x16, &::I32x4]; &INPUTS },\n+            output: &::I32x4,\n+            definition: Named(\"llvm.ppc.altivec.vmsummbm\")\n+        },\n+        \"_vec_msumshm\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 3] = [&::I16x8, &::I16x8, &::I32x4]; &INPUTS },\n+            output: &::I32x4,\n+            definition: Named(\"llvm.ppc.altivec.vmsumshm\")\n+        },\n+        \"_vec_msumshs\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 3] = [&::I16x8, &::I16x8, &::I32x4]; &INPUTS },\n+            output: &::I32x4,\n+            definition: Named(\"llvm.ppc.altivec.vmsumshs\")\n+        },\n+        \"_vec_msumuhs\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 3] = [&::U16x8, &::U16x8, &::U32x4]; &INPUTS },\n+            output: &::U32x4,\n+            definition: Named(\"llvm.ppc.altivec.vmsumuhs\")\n+        },\n+        \"_vec_sum2s\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::I32x4]; &INPUTS },\n+            output: &::I32x4,\n+            definition: Named(\"llvm.ppc.altivec.vsum2sws\")\n+        },\n+        \"_vec_sum4sbs\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x16, &::I32x4]; &INPUTS },\n+            output: &::I32x4,\n+            definition: Named(\"llvm.ppc.altivec.vsum4sbs\")\n+        },\n+        \"_vec_sum4ubs\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x16, &::U32x4]; &INPUTS },\n+            output: &::U32x4,\n+            definition: Named(\"llvm.ppc.altivec.vsum4ubs\")\n+        },\n+        \"_vec_sum4shs\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I32x4]; &INPUTS },\n+            output: &::I32x4,\n+            definition: Named(\"llvm.ppc.altivec.vsum4shs\")\n+        },\n+        \"_vec_sums\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::I32x4]; &INPUTS },\n+            output: &::I32x4,\n+            definition: Named(\"llvm.ppc.altivec.vsumsws\")\n+        },\n         _ => return None,\n     })\n }"}, {"sha": "65900dc3f36e7d8242903846e0995187ac6858ee", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=05e3c96d36b5281e969b5e79b92d671c7872bf83", "patch": "@@ -207,7 +207,29 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                  expected: Ty<'tcx>)\n                  -> Option<String> {\n         match (&expected.sty, &checked_ty.sty) {\n-            (&ty::TyRef(_, _), &ty::TyRef(_, _)) => None,\n+            (&ty::TyRef(_, exp), &ty::TyRef(_, check)) => match (&exp.ty.sty, &check.ty.sty) {\n+                (&ty::TyStr, &ty::TyArray(arr, _)) |\n+                (&ty::TyStr, &ty::TySlice(arr)) if arr == self.tcx.types.u8 => {\n+                    if let hir::ExprLit(_) = expr.node {\n+                        let sp = self.sess().codemap().call_span_if_macro(expr.span);\n+                        if let Ok(src) = self.tcx.sess.codemap().span_to_snippet(sp) {\n+                            return Some(format!(\"try `{}`\", &src[1..]));\n+                        }\n+                    }\n+                    None\n+                },\n+                (&ty::TyArray(arr, _), &ty::TyStr) |\n+                (&ty::TySlice(arr), &ty::TyStr) if arr == self.tcx.types.u8 => {\n+                    if let hir::ExprLit(_) = expr.node {\n+                        let sp = self.sess().codemap().call_span_if_macro(expr.span);\n+                        if let Ok(src) = self.tcx.sess.codemap().span_to_snippet(sp) {\n+                            return Some(format!(\"try `b{}`\", src));\n+                        }\n+                    }\n+                    None\n+                }\n+                _ => None,\n+            },\n             (&ty::TyRef(_, mutability), _) => {\n                 // Check if it can work when put into a ref. For example:\n                 //"}, {"sha": "69ca77f54b44aa70b33e2bd33952f91fabb0826d", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=05e3c96d36b5281e969b5e79b92d671c7872bf83", "patch": "@@ -1080,6 +1080,32 @@ impl f32 {\n         0.5 * ((2.0 * self) / (1.0 - self)).ln_1p()\n     }\n \n+    /// Returns max if self is greater than max, and min if self is less than min.\n+    /// Otherwise this returns self.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(clamp)]\n+    /// use std::f32::NAN;\n+    /// assert!((-3.0f32).clamp(-2.0f32, 1.0f32) == -2.0f32);\n+    /// assert!((0.0f32).clamp(-2.0f32, 1.0f32) == 0.0f32);\n+    /// assert!((2.0f32).clamp(-2.0f32, 1.0f32) == 1.0f32);\n+    /// assert!((NAN).clamp(-2.0f32, 1.0f32).is_nan());\n+    /// ```\n+    ///\n+    /// # Panics\n+    /// Panics if min > max, min is NaN, or max is NaN.\n+    #[unstable(feature = \"clamp\", issue = \"44095\")]\n+    #[inline]\n+    pub fn clamp(self, min: f32, max: f32) -> f32 {\n+        assert!(min <= max);\n+        let mut x = self;\n+        if x < min { x = min; }\n+        if x > max { x = max; }\n+        x\n+    }\n+\n     /// Raw transmutation to `u32`.\n     ///\n     /// Converts the `f32` into its raw memory representation,\n@@ -1751,4 +1777,22 @@ mod tests {\n         assert_ne!(nan_masked & QNAN_MASK, 0);\n         assert!(nan_masked_fl.is_nan());\n     }\n+\n+    #[test]\n+    #[should_panic]\n+    fn test_clamp_min_greater_than_max() {\n+        1.0f32.clamp(3.0, 1.0);\n+    }\n+\n+    #[test]\n+    #[should_panic]\n+    fn test_clamp_min_is_nan() {\n+        1.0f32.clamp(NAN, 1.0);\n+    }\n+\n+    #[test]\n+    #[should_panic]\n+    fn test_clamp_max_is_nan() {\n+        1.0f32.clamp(3.0, NAN);\n+    }\n }"}, {"sha": "6ec633bfaaac1be5dcfa5f7110ddb0671db6c3a3", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=05e3c96d36b5281e969b5e79b92d671c7872bf83", "patch": "@@ -970,6 +970,32 @@ impl f64 {\n         0.5 * ((2.0 * self) / (1.0 - self)).ln_1p()\n     }\n \n+    /// Returns max if self is greater than max, and min if self is less than min.\n+    /// Otherwise this returns self.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(clamp)]\n+    /// use std::f64::NAN;\n+    /// assert!((-3.0f64).clamp(-2.0f64, 1.0f64) == -2.0f64);\n+    /// assert!((0.0f64).clamp(-2.0f64, 1.0f64) == 0.0f64);\n+    /// assert!((2.0f64).clamp(-2.0f64, 1.0f64) == 1.0f64);\n+    /// assert!((NAN).clamp(-2.0f64, 1.0f64).is_nan());\n+    /// ```\n+    ///\n+    /// # Panics\n+    /// Panics if min > max, min is NaN, or max is NaN.\n+    #[unstable(feature = \"clamp\", issue = \"44095\")]\n+    #[inline]\n+    pub fn clamp(self, min: f64, max: f64) -> f64 {\n+        assert!(min <= max);\n+        let mut x = self;\n+        if x < min { x = min; }\n+        if x > max { x = max; }\n+        x\n+    }\n+\n     // Solaris/Illumos requires a wrapper around log, log2, and log10 functions\n     // because of their non-standard behavior (e.g. log(-n) returns -Inf instead\n     // of expected NaN).\n@@ -1642,4 +1668,22 @@ mod tests {\n         assert_approx_eq!(f64::from_bits(0x4094e40000000000), 1337.0);\n         assert_approx_eq!(f64::from_bits(0xc02c800000000000), -14.25);\n     }\n+\n+    #[test]\n+    #[should_panic]\n+    fn test_clamp_min_greater_than_max() {\n+        1.0f64.clamp(3.0, 1.0);\n+    }\n+\n+    #[test]\n+    #[should_panic]\n+    fn test_clamp_min_is_nan() {\n+        1.0f64.clamp(NAN, 1.0);\n+    }\n+\n+    #[test]\n+    #[should_panic]\n+    fn test_clamp_max_is_nan() {\n+        1.0f64.clamp(3.0, NAN);\n+    }\n }"}, {"sha": "433499a90a4054f574cb4ae8cfde1063887c0e74", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=05e3c96d36b5281e969b5e79b92d671c7872bf83", "patch": "@@ -249,6 +249,7 @@\n #![feature(cfg_target_vendor)]\n #![feature(char_error_internals)]\n #![feature(char_internals)]\n+#![feature(clamp)]\n #![feature(collections_range)]\n #![feature(compiler_builtins_lib)]\n #![feature(const_fn)]"}, {"sha": "e0dd8cfe62e6fe2291c80d3e7a4d6a61724490e8", "filename": "src/libstd/time/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Flibstd%2Ftime%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Flibstd%2Ftime%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fmod.rs?ref=05e3c96d36b5281e969b5e79b92d671c7872bf83", "patch": "@@ -382,6 +382,17 @@ impl fmt::Debug for SystemTime {\n /// [`SystemTime`] instance to represent another fixed point in time.\n ///\n /// [`SystemTime`]: ../../std/time/struct.SystemTime.html\n+///\n+/// # Examples\n+///\n+/// ```no_run\n+/// use std::time::{SystemTime, UNIX_EPOCH};\n+///\n+/// match SystemTime::now().duration_since(UNIX_EPOCH) {\n+///     Ok(n) => println!(\"1970-01-01 00:00:00 UTC was {} seconds ago!\", n.as_secs()),\n+///     Err(_) => panic!(\"SystemTime before UNIX EPOCH!\"),\n+/// }\n+/// ```\n #[stable(feature = \"time2\", since = \"1.8.0\")]\n pub const UNIX_EPOCH: SystemTime = SystemTime(time::UNIX_EPOCH);\n "}, {"sha": "0046e3f7bd0938ca379cbe00b31b4fd022e0d3de", "filename": "src/libstd_unicode/u_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Flibstd_unicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Flibstd_unicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd_unicode%2Fu_str.rs?ref=05e3c96d36b5281e969b5e79b92d671c7872bf83", "patch": "@@ -26,7 +26,7 @@ use core::str::Split;\n /// [`split_whitespace`]: ../../std/primitive.str.html#method.split_whitespace\n /// [`str`]: ../../std/primitive.str.html\n #[stable(feature = \"split_whitespace\", since = \"1.1.0\")]\n-#[derive(Clone)]\n+#[derive(Clone, Debug)]\n pub struct SplitWhitespace<'a> {\n     inner: Filter<Split<'a, IsWhitespace>, IsNotEmpty>,\n }"}, {"sha": "5248f874a6e970da106a42098ab485a02f991877", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=05e3c96d36b5281e969b5e79b92d671c7872bf83", "patch": "@@ -761,9 +761,9 @@ pub enum StmtKind {\n \n     /// Expr without trailing semi-colon.\n     Expr(P<Expr>),\n-\n+    /// Expr with a trailing semi-colon.\n     Semi(P<Expr>),\n-\n+    /// Macro.\n     Mac(P<(Mac, MacStmtStyle, ThinVec<Attribute>)>),\n }\n "}, {"sha": "3d9ec0a6581d63e08f358b69d5c48ca13f30abf0", "filename": "src/test/compile-fail/issue-22706.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Ftest%2Fcompile-fail%2Fissue-22706.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Ftest%2Fcompile-fail%2Fissue-22706.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22706.rs?ref=05e3c96d36b5281e969b5e79b92d671c7872bf83", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn is_copy<T: ::std::marker<i32>::Copy>() {}\n+//~^ ERROR type parameters are not allowed on this type [E0109]\n+fn main() {}"}, {"sha": "f9833ffecc28083c467d036775555583db7cb17d", "filename": "src/test/mir-opt/validate_1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs?ref=05e3c96d36b5281e969b5e79b92d671c7872bf83", "patch": "@@ -30,7 +30,7 @@ fn main() {\n // END RUST SOURCE\n // START rustc.node12.EraseRegions.after.mir\n //     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(5) => validate_1/8cd878b::{{impl}}[0]::foo[0] }, BrAnon(0)) Test, _2: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(5) => validate_1/8cd878b::{{impl}}[0]::foo[0] }, BrAnon(1)) mut i32]);\n+//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(0:5) => validate_1/8cd878b::{{impl}}[0]::foo[0] }, BrAnon(0)) Test, _2: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(0:5) => validate_1/8cd878b::{{impl}}[0]::foo[0] }, BrAnon(1)) mut i32]);\n //         return;\n //     }\n // END rustc.node12.EraseRegions.after.mir\n@@ -57,7 +57,7 @@ fn main() {\n // START rustc.node50.EraseRegions.after.mir\n // fn main::{{closure}}(_1: &ReErased [closure@NodeId(50)], _2: &ReErased mut i32) -> i32 {\n //     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(2147483663) => validate_1/8cd878b::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(50)], _2: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(2147483663) => validate_1/8cd878b::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n+//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:15) => validate_1/8cd878b::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(50)], _2: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:15) => validate_1/8cd878b::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n //         StorageLive(_3);\n //         _3 = _2;\n //         StorageLive(_4);"}, {"sha": "cd5beae8e91fb48ceb77daedd1690584bddd433c", "filename": "src/test/mir-opt/validate_4.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Ftest%2Fmir-opt%2Fvalidate_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Ftest%2Fmir-opt%2Fvalidate_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_4.rs?ref=05e3c96d36b5281e969b5e79b92d671c7872bf83", "patch": "@@ -48,8 +48,8 @@ fn main() {\n // START rustc.node22.EraseRegions.after.mir\n // fn write_42::{{closure}}(_1: &ReErased [closure@NodeId(22)], _2: *mut i32) -> () {\n //     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(2147483659) => validate_4/8cd878b::write_42[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(22)], _2: *mut i32]);\n-//         Validate(Release, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(2147483659) => validate_4/8cd878b::write_42[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(22)], _2: *mut i32]);\n+//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:11) => validate_4/8cd878b::write_42[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(22)], _2: *mut i32]);\n+//         Validate(Release, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:11) => validate_4/8cd878b::write_42[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(22)], _2: *mut i32]);\n //         StorageLive(_3);\n //         _3 = _2;\n //         (*_3) = const 23i32;\n@@ -61,8 +61,8 @@ fn main() {\n // START rustc.node31.EraseRegions.after.mir\n // fn test(_1: &ReErased mut i32) -> () {\n //     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(4) => validate_4/8cd878b::test[0] }, BrAnon(0)) mut i32]);\n-//         Validate(Release, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(4) => validate_4/8cd878b::test[0] }, BrAnon(0)) mut i32]);\n+//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(0:4) => validate_4/8cd878b::test[0] }, BrAnon(0)) mut i32]);\n+//         Validate(Release, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(0:4) => validate_4/8cd878b::test[0] }, BrAnon(0)) mut i32]);\n //         _3 = const write_42(_4) -> bb1;\n //     }\n //     bb1: {\n@@ -74,8 +74,8 @@ fn main() {\n // START rustc.node60.EraseRegions.after.mir\n // fn main::{{closure}}(_1: &ReErased [closure@NodeId(60)], _2: &ReErased mut i32) -> bool {\n //     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(2147483663) => validate_4/8cd878b::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(60)], _2: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(2147483663) => validate_4/8cd878b::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n-//         Validate(Release, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(2147483663) => validate_4/8cd878b::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(60)], _2: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(2147483663) => validate_4/8cd878b::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n+//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:15) => validate_4/8cd878b::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(60)], _2: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:15) => validate_4/8cd878b::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n+//         Validate(Release, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:15) => validate_4/8cd878b::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(60)], _2: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:15) => validate_4/8cd878b::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n //         StorageLive(_3);\n //         _0 = const write_42(_4) -> bb1;\n //     }"}, {"sha": "dc3daee7ad3a4b451272e1d901864c19d01d8dc6", "filename": "src/test/mir-opt/validate_5.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs?ref=05e3c96d36b5281e969b5e79b92d671c7872bf83", "patch": "@@ -36,7 +36,7 @@ fn main() {\n // START rustc.node17.EraseRegions.after.mir\n // fn test(_1: &ReErased mut i32) -> () {\n //     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(4) => validate_5/8cd878b::test[0] }, BrAnon(0)) mut i32]);\n+//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(0:4) => validate_5/8cd878b::test[0] }, BrAnon(0)) mut i32]);\n //         Validate(Release, [_3: bool, _4: *mut i32]);\n //         _3 = const write_42(_4) -> bb1;\n //     }\n@@ -45,7 +45,7 @@ fn main() {\n // START rustc.node46.EraseRegions.after.mir\n // fn main::{{closure}}(_1: &ReErased [closure@NodeId(46)], _2: &ReErased mut i32) -> bool {\n //     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(2147483660) => validate_5/8cd878b::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(46)], _2: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(2147483660) => validate_5/8cd878b::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n+//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:12) => validate_5/8cd878b::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(46)], _2: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:12) => validate_5/8cd878b::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n //         StorageLive(_3);\n //         _3 = _2;\n //         StorageLive(_4);"}, {"sha": "42c72e647fd2eae18f0f3b4895205b228d8202bd", "filename": "src/test/run-pass/issue-23338-ensure-param-drop-order.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Ftest%2Frun-pass%2Fissue-23338-ensure-param-drop-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Ftest%2Frun-pass%2Fissue-23338-ensure-param-drop-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-23338-ensure-param-drop-order.rs?ref=05e3c96d36b5281e969b5e79b92d671c7872bf83", "patch": "@@ -64,8 +64,7 @@ fn test<'a>(log: d::Log<'a>) {\n     d::println(&format!(\"result {}\", result));\n }\n \n-// FIXME(#33490) Remove the double braces when old trans is gone.\n-fn foo<'a>(da0: D<'a>, de1: D<'a>) -> D<'a> {{\n+fn foo<'a>(da0: D<'a>, de1: D<'a>) -> D<'a> {\n     d::println(\"entered foo\");\n     let de2 = de1.incr();      // creates D(de_2, 2)\n     let de4 = {\n@@ -74,7 +73,7 @@ fn foo<'a>(da0: D<'a>, de1: D<'a>) -> D<'a> {{\n     };\n     d::println(\"eval tail of foo\");\n     de4.incr().incr()          // creates D(de_5, 6) and D(de_6, 7)\n-}}\n+}\n \n // This module provides simultaneous printouts of the dynamic extents\n // of all of the D values, in addition to logging the order that each"}, {"sha": "f12e65323bc95dd198b4b07b9bdceb764dc2111d", "filename": "src/test/run-pass/issue-33185.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Ftest%2Frun-pass%2Fissue-33185.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Ftest%2Frun-pass%2Fissue-33185.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-33185.rs?ref=05e3c96d36b5281e969b5e79b92d671c7872bf83", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(dead_code)]\n+\n+#[macro_export]\n+macro_rules! state {\n+    ( $( $name:ident : $field:ty )* ) => (\n+        #[derive(Default)]\n+        struct State {\n+            $($name : $field),*\n+        }\n+    )\n+}\n+\n+state! { x: i64 }\n+\n+pub fn main() {\n+}"}, {"sha": "25895cd0753e407de23de8cb8849abfd2980cf4a", "filename": "src/test/run-pass/issue-35376.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Ftest%2Frun-pass%2Fissue-35376.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Ftest%2Frun-pass%2Fissue-35376.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-35376.rs?ref=05e3c96d36b5281e969b5e79b92d671c7872bf83", "patch": "@@ -0,0 +1,51 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(specialization)]\n+\n+fn main() {}\n+\n+pub trait Alpha<T> { }\n+\n+pub trait Beta {\n+    type Event;\n+}\n+\n+pub trait Delta {\n+    type Handle;\n+    fn process(&self);\n+}\n+\n+pub struct Parent<A, T>(A, T);\n+\n+impl<A, T> Delta for Parent<A, T>\n+where A: Alpha<T::Handle>,\n+      T: Delta,\n+      T::Handle: Beta<Event = <Handle as Beta>::Event> {\n+    type Handle = Handle;\n+    default fn process(&self) {\n+        unimplemented!()\n+    }\n+}\n+\n+impl<A, T> Delta for Parent<A, T>\n+where A: Alpha<T::Handle> + Alpha<Handle>,\n+      T: Delta,\n+      T::Handle: Beta<Event = <Handle as Beta>::Event> {\n+      fn process(&self) {\n+        unimplemented!()\n+      }\n+}\n+\n+pub struct Handle;\n+\n+impl Beta for Handle {\n+    type Event = ();\n+}\n\\ No newline at end of file"}, {"sha": "8ea8b375b17b464e9c7ebc231a1cee9d5a39416d", "filename": "src/test/run-pass/overloaded-autoderef-order.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-order.rs?ref=05e3c96d36b5281e969b5e79b92d671c7872bf83", "patch": "@@ -75,7 +75,6 @@ pub fn main() {\n     assert_eq!(Rc::new(nested).x, true);\n \n     let nested_priv = priv_test::DerefWrapperHideX::new(true, DerefWrapper {x: 0, y: 1});\n-    // FIXME(eddyb) #12808 should skip private fields.\n-    // assert_eq!(nested_priv.x, 0);\n+    assert_eq!(nested_priv.x, 0);\n     assert_eq!((*nested_priv).x, 0);\n }"}, {"sha": "0fd7d3a9d869e82757f7c0d6af98719219862cf8", "filename": "src/test/ui/str-lit-type-mismatch.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Ftest%2Fui%2Fstr-lit-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Ftest%2Fui%2Fstr-lit-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr-lit-type-mismatch.rs?ref=05e3c96d36b5281e969b5e79b92d671c7872bf83", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+fn main() {\n+    let x: &[u8] = \"foo\";\n+    let y: &[u8; 4] = \"baaa\";\n+    let z: &str = b\"foo\";\n+}"}, {"sha": "47418522df8ac611c92edc119db7fbcc3da7344f", "filename": "src/test/ui/str-lit-type-mismatch.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Ftest%2Fui%2Fstr-lit-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Ftest%2Fui%2Fstr-lit-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr-lit-type-mismatch.stderr?ref=05e3c96d36b5281e969b5e79b92d671c7872bf83", "patch": "@@ -0,0 +1,32 @@\n+error[E0308]: mismatched types\n+  --> $DIR/str-lit-type-mismatch.rs:13:20\n+   |\n+13 |     let x: &[u8] = \"foo\";\n+   |                    ^^^^^ expected slice, found str\n+   |\n+   = note: expected type `&[u8]`\n+              found type `&'static str`\n+   = help: try `b\"foo\"`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/str-lit-type-mismatch.rs:14:23\n+   |\n+14 |     let y: &[u8; 4] = \"baaa\";\n+   |                       ^^^^^^ expected array of 4 elements, found str\n+   |\n+   = note: expected type `&[u8; 4]`\n+              found type `&'static str`\n+   = help: try `b\"baaa\"`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/str-lit-type-mismatch.rs:15:19\n+   |\n+15 |     let z: &str = b\"foo\";\n+   |                   ^^^^^^ expected str, found array of 3 elements\n+   |\n+   = note: expected type `&str`\n+              found type `&'static [u8; 3]`\n+   = help: try `\"foo\"`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "0e91fa9c6022b446a4b560fa4ea38ff8a9ea3a96", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 56, "deletions": 20, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=05e3c96d36b5281e969b5e79b92d671c7872bf83", "patch": "@@ -113,6 +113,7 @@ struct Manifest {\n #[derive(Serialize)]\n struct Package {\n     version: String,\n+    git_commit_hash: Option<String>,\n     target: BTreeMap<String, Target>,\n }\n \n@@ -167,6 +168,9 @@ struct Builder {\n     rust_version: String,\n     cargo_version: String,\n     rls_version: String,\n+    rust_git_commit_hash: Option<String>,\n+    cargo_git_commit_hash: Option<String>,\n+    rls_git_commit_hash: Option<String>,\n }\n \n fn main() {\n@@ -194,6 +198,9 @@ fn main() {\n         rust_version: String::new(),\n         cargo_version: String::new(),\n         rls_version: String::new(),\n+        rust_git_commit_hash: None,\n+        cargo_git_commit_hash: None,\n+        rls_git_commit_hash: None,\n     }.build();\n }\n \n@@ -202,18 +209,16 @@ impl Builder {\n         self.rust_version = self.version(\"rust\", \"x86_64-unknown-linux-gnu\");\n         self.cargo_version = self.version(\"cargo\", \"x86_64-unknown-linux-gnu\");\n         self.rls_version = self.version(\"rls\", \"x86_64-unknown-linux-gnu\");\n+        self.rust_git_commit_hash = self.git_commit_hash(\"rust\", \"x86_64-unknown-linux-gnu\");\n+        self.cargo_git_commit_hash = self.git_commit_hash(\"cargo\", \"x86_64-unknown-linux-gnu\");\n+        self.rls_git_commit_hash = self.git_commit_hash(\"rls\", \"x86_64-unknown-linux-gnu\");\n \n         self.digest_and_sign();\n         let manifest = self.build_manifest();\n-        let filename = format!(\"channel-rust-{}.toml\", self.rust_release);\n-        self.write_manifest(&toml::to_string(&manifest).unwrap(), &filename);\n-\n-        let filename = format!(\"channel-rust-{}-date.txt\", self.rust_release);\n-        self.write_date_stamp(&manifest.date, &filename);\n+        self.write_channel_files(&self.rust_release, &manifest);\n \n         if self.rust_release != \"beta\" && self.rust_release != \"nightly\" {\n-            self.write_manifest(&toml::to_string(&manifest).unwrap(), \"channel-rust-stable.toml\");\n-            self.write_date_stamp(&manifest.date, \"channel-rust-stable-date.txt\");\n+            self.write_channel_files(\"stable\", &manifest);\n         }\n     }\n \n@@ -249,6 +254,7 @@ impl Builder {\n \n         let mut pkg = Package {\n             version: self.cached_version(\"rust\").to_string(),\n+            git_commit_hash: self.cached_git_commit_hash(\"rust\").clone(),\n             target: BTreeMap::new(),\n         };\n         for host in HOSTS {\n@@ -342,6 +348,7 @@ impl Builder {\n \n         dst.insert(pkgname.to_string(), Package {\n             version: self.cached_version(pkgname).to_string(),\n+            git_commit_hash: self.cached_git_commit_hash(pkgname).clone(),\n             target: targets,\n         });\n     }\n@@ -375,21 +382,50 @@ impl Builder {\n         }\n     }\n \n+    fn cached_git_commit_hash(&self, component: &str) -> &Option<String> {\n+        if component == \"cargo\" {\n+            &self.cargo_git_commit_hash\n+        } else if component == \"rls\" || component == \"rls-preview\" {\n+            &self.rls_git_commit_hash\n+        } else {\n+            &self.rust_git_commit_hash\n+        }\n+    }\n+\n     fn version(&self, component: &str, target: &str) -> String {\n         let mut cmd = Command::new(\"tar\");\n         let filename = self.filename(component, target);\n         cmd.arg(\"xf\")\n            .arg(self.input.join(&filename))\n            .arg(format!(\"{}/version\", filename.replace(\".tar.gz\", \"\")))\n            .arg(\"-O\");\n-        let version = t!(cmd.output());\n-        if !version.status.success() {\n+        let output = t!(cmd.output());\n+        if !output.status.success() {\n             panic!(\"failed to learn version:\\n\\n{:?}\\n\\n{}\\n\\n{}\",\n                    cmd,\n-                   String::from_utf8_lossy(&version.stdout),\n-                   String::from_utf8_lossy(&version.stderr));\n+                   String::from_utf8_lossy(&output.stdout),\n+                   String::from_utf8_lossy(&output.stderr));\n+        }\n+        String::from_utf8_lossy(&output.stdout).trim().to_string()\n+    }\n+\n+    fn git_commit_hash(&self, component: &str, target: &str) -> Option<String> {\n+        let mut cmd = Command::new(\"tar\");\n+        let filename = self.filename(component, target);\n+        cmd.arg(\"xf\")\n+           .arg(self.input.join(&filename))\n+           .arg(format!(\"{}/git-commit-hash\", filename.replace(\".tar.gz\", \"\")))\n+           .arg(\"-O\");\n+        let output = t!(cmd.output());\n+        if output.status.success() {\n+            Some(String::from_utf8_lossy(&output.stdout).trim().to_string())\n+        } else {\n+            // This is always called after `.version()`.\n+            // So if that didn\u2019t fail but this does,\n+            // that\u2019s very probably because the tarball is valid\n+            // but does not contain a `git-commit-hash` file.\n+            None\n         }\n-        String::from_utf8_lossy(&version.stdout).trim().to_string()\n     }\n \n     fn hash(&self, path: &Path) -> String {\n@@ -425,16 +461,16 @@ impl Builder {\n         assert!(t!(child.wait()).success());\n     }\n \n-    fn write_manifest(&self, manifest: &str, name: &str) {\n-        let dst = self.output.join(name);\n-        t!(t!(File::create(&dst)).write_all(manifest.as_bytes()));\n-        self.hash(&dst);\n-        self.sign(&dst);\n+    fn write_channel_files(&self, channel_name: &str, manifest: &Manifest) {\n+        self.write(&toml::to_string(&manifest).unwrap(), channel_name, \".toml\");\n+        self.write(&manifest.date, channel_name, \"-date.txt\");\n+        self.write(manifest.pkg[\"rust\"].git_commit_hash.as_ref().unwrap(),\n+                   channel_name, \"-git-commit-hash.txt\");\n     }\n \n-    fn write_date_stamp(&self, date: &str, name: &str) {\n-        let dst = self.output.join(name);\n-        t!(t!(File::create(&dst)).write_all(date.as_bytes()));\n+    fn write(&self, contents: &str, channel_name: &str, suffix: &str) {\n+        let dst = self.output.join(format!(\"channel-rust-{}{}\", channel_name, suffix));\n+        t!(t!(File::create(&dst)).write_all(contents.as_bytes()));\n         self.hash(&dst);\n         self.sign(&dst);\n     }"}, {"sha": "41e88aa245f42e55efc94f0a3581bb30671be8cf", "filename": "src/tools/rustbook/src/main.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05e3c96d36b5281e969b5e79b92d671c7872bf83/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs?ref=05e3c96d36b5281e969b5e79b92d671c7872bf83", "patch": "@@ -41,7 +41,6 @@ fn main() {\n     // Check which subcomamnd the user ran...\n     let res = match matches.subcommand() {\n         (\"build\", Some(sub_matches)) => build(sub_matches),\n-        (\"test\", Some(sub_matches)) => test(sub_matches),\n         (_, _) => unreachable!(),\n     };\n \n@@ -65,14 +64,6 @@ fn build(args: &ArgMatches) -> Result<(), Box<Error>> {\n     Ok(())\n }\n \n-fn test(args: &ArgMatches) -> Result<(), Box<Error>> {\n-    let mut book = build_mdbook_struct(args);\n-\n-    try!(book.test());\n-\n-    Ok(())\n-}\n-\n fn build_mdbook_struct(args: &ArgMatches) -> mdbook::MDBook {\n     let book_dir = get_book_dir(args);\n     let mut book = MDBook::new(&book_dir).read_config();"}]}