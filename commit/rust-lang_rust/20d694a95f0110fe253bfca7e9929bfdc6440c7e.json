{"sha": "20d694a95f0110fe253bfca7e9929bfdc6440c7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwZDY5NGE5NWYwMTEwZmUyNTNiZmNhN2U5OTI5YmZkYzY0NDBjN2U=", "commit": {"author": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2018-12-18T01:19:32Z"}, "committer": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2018-12-22T04:41:24Z"}, "message": "Update Pin API to match the one proposed for stabilization\n\nRemove pin::Unpin reexport and add Unpin to the prelude.\nChange Pin associated functions to methods.\nRename get_mut_unchecked_ to get_unchecked_mut\nRemove impl Unpin for Pin\nMark Pin repr(transparent)", "tree": {"sha": "59c2a5427db23ce29134edfcc5228514340e3ac7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59c2a5427db23ce29134edfcc5228514340e3ac7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20d694a95f0110fe253bfca7e9929bfdc6440c7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20d694a95f0110fe253bfca7e9929bfdc6440c7e", "html_url": "https://github.com/rust-lang/rust/commit/20d694a95f0110fe253bfca7e9929bfdc6440c7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20d694a95f0110fe253bfca7e9929bfdc6440c7e/comments", "author": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abaa9344d4c10a45d7725534145007a8284dabe8", "url": "https://api.github.com/repos/rust-lang/rust/commits/abaa9344d4c10a45d7725534145007a8284dabe8", "html_url": "https://github.com/rust-lang/rust/commit/abaa9344d4c10a45d7725534145007a8284dabe8"}], "stats": {"total": 41, "additions": 18, "deletions": 23}, "files": [{"sha": "da3aa8449bafb4f8b3414cc7732c87c5c561afcf", "filename": "src/libcore/future/future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20d694a95f0110fe253bfca7e9929bfdc6440c7e/src%2Flibcore%2Ffuture%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20d694a95f0110fe253bfca7e9929bfdc6440c7e/src%2Flibcore%2Ffuture%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Ffuture.rs?ref=20d694a95f0110fe253bfca7e9929bfdc6440c7e", "patch": "@@ -120,7 +120,7 @@ impl<'a, F: ?Sized + Future + Unpin> Future for &'a mut F {\n \n impl<P> Future for Pin<P>\n where\n-    P: ops::DerefMut,\n+    P: Unpin + ops::DerefMut,\n     P::Target: Future,\n {\n     type Output = <<P as ops::Deref>::Target as Future>::Output;"}, {"sha": "0d7ddfc20b6d320d96bd7c151eb7588130fc6882", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20d694a95f0110fe253bfca7e9929bfdc6440c7e/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20d694a95f0110fe253bfca7e9929bfdc6440c7e/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=20d694a95f0110fe253bfca7e9929bfdc6440c7e", "patch": "@@ -285,7 +285,7 @@ impl<T> Option<T> {\n     #[unstable(feature = \"pin\", issue = \"49150\")]\n     pub fn as_pin_mut<'a>(self: Pin<&'a mut Option<T>>) -> Option<Pin<&'a mut T>> {\n         unsafe {\n-            Pin::get_mut_unchecked(self).as_mut().map(|x| Pin::new_unchecked(x))\n+            Pin::get_unchecked_mut(self).as_mut().map(|x| Pin::new_unchecked(x))\n         }\n     }\n "}, {"sha": "0436a709b31b7581537ab18e0040e9ab516434af", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/20d694a95f0110fe253bfca7e9929bfdc6440c7e/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20d694a95f0110fe253bfca7e9929bfdc6440c7e/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=20d694a95f0110fe253bfca7e9929bfdc6440c7e", "patch": "@@ -100,12 +100,9 @@\n #![unstable(feature = \"pin\", issue = \"49150\")]\n \n use fmt;\n-use marker::Sized;\n+use marker::{Sized, Unpin};\n use ops::{Deref, DerefMut, Receiver, CoerceUnsized, DispatchFromDyn};\n \n-#[doc(inline)]\n-pub use marker::Unpin;\n-\n /// A pinned pointer.\n ///\n /// This is a wrapper around a kind of pointer which makes that pointer \"pin\" its\n@@ -121,6 +118,7 @@ pub use marker::Unpin;\n // cannot move the value behind `pointer`.\n #[unstable(feature = \"pin\", issue = \"49150\")]\n #[fundamental]\n+#[repr(transparent)]\n #[derive(Copy, Clone, Hash, Eq, PartialEq, Ord, PartialOrd)]\n pub struct Pin<P> {\n     pointer: P,\n@@ -200,10 +198,10 @@ impl<'a, T: ?Sized> Pin<&'a T> {\n     /// because it is one of the fields of that value), and also that you do\n     /// not move out of the argument you receive to the interior function.\n     #[unstable(feature = \"pin\", issue = \"49150\")]\n-    pub unsafe fn map_unchecked<U, F>(this: Pin<&'a T>, func: F) -> Pin<&'a U> where\n+    pub unsafe fn map_unchecked<U, F>(self: Pin<&'a T>, func: F) -> Pin<&'a U> where\n         F: FnOnce(&T) -> &U,\n     {\n-        let pointer = &*this.pointer;\n+        let pointer = &*self.pointer;\n         let new_pointer = func(pointer);\n         Pin::new_unchecked(new_pointer)\n     }\n@@ -217,17 +215,17 @@ impl<'a, T: ?Sized> Pin<&'a T> {\n     /// with the same lifetime as the original `Pin`.\n     #[unstable(feature = \"pin\", issue = \"49150\")]\n     #[inline(always)]\n-    pub fn get_ref(this: Pin<&'a T>) -> &'a T {\n-        this.pointer\n+    pub fn get_ref(self: Pin<&'a T>) -> &'a T {\n+        self.pointer\n     }\n }\n \n impl<'a, T: ?Sized> Pin<&'a mut T> {\n     /// Convert this `Pin<&mut T>` into a `Pin<&T>` with the same lifetime.\n     #[unstable(feature = \"pin\", issue = \"49150\")]\n     #[inline(always)]\n-    pub fn into_ref(this: Pin<&'a mut T>) -> Pin<&'a T> {\n-        Pin { pointer: this.pointer }\n+    pub fn into_ref(self: Pin<&'a mut T>) -> Pin<&'a T> {\n+        Pin { pointer: self.pointer }\n     }\n \n     /// Get a mutable reference to the data inside of this `Pin`.\n@@ -241,10 +239,10 @@ impl<'a, T: ?Sized> Pin<&'a mut T> {\n     /// with the same lifetime as the original `Pin`.\n     #[unstable(feature = \"pin\", issue = \"49150\")]\n     #[inline(always)]\n-    pub fn get_mut(this: Pin<&'a mut T>) -> &'a mut T\n+    pub fn get_mut(self: Pin<&'a mut T>) -> &'a mut T\n         where T: Unpin,\n     {\n-        this.pointer\n+        self.pointer\n     }\n \n     /// Get a mutable reference to the data inside of this `Pin`.\n@@ -259,8 +257,8 @@ impl<'a, T: ?Sized> Pin<&'a mut T> {\n     /// instead.\n     #[unstable(feature = \"pin\", issue = \"49150\")]\n     #[inline(always)]\n-    pub unsafe fn get_mut_unchecked(this: Pin<&'a mut T>) -> &'a mut T {\n-        this.pointer\n+    pub unsafe fn get_unchecked_mut(self: Pin<&'a mut T>) -> &'a mut T {\n+        self.pointer\n     }\n \n     /// Construct a new pin by mapping the interior value.\n@@ -275,10 +273,10 @@ impl<'a, T: ?Sized> Pin<&'a mut T> {\n     /// because it is one of the fields of that value), and also that you do\n     /// not move out of the argument you receive to the interior function.\n     #[unstable(feature = \"pin\", issue = \"49150\")]\n-    pub unsafe fn map_unchecked_mut<U, F>(this: Pin<&'a mut T>, func: F) -> Pin<&'a mut U> where\n+    pub unsafe fn map_unchecked_mut<U, F>(self: Pin<&'a mut T>, func: F) -> Pin<&'a mut U> where\n         F: FnOnce(&mut T) -> &mut U,\n     {\n-        let pointer = Pin::get_mut_unchecked(this);\n+        let pointer = Pin::get_unchecked_mut(self);\n         let new_pointer = func(pointer);\n         Pin::new_unchecked(new_pointer)\n     }\n@@ -342,6 +340,3 @@ impl<'a, P, U> DispatchFromDyn<Pin<U>> for Pin<P>\n where\n     P: DispatchFromDyn<U>,\n {}\n-\n-#[unstable(feature = \"pin\", issue = \"49150\")]\n-impl<P> Unpin for Pin<P> {}"}, {"sha": "a1e6034b20821740a05503152bb9665517bed6b0", "filename": "src/libcore/prelude/v1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20d694a95f0110fe253bfca7e9929bfdc6440c7e/src%2Flibcore%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20d694a95f0110fe253bfca7e9929bfdc6440c7e/src%2Flibcore%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude%2Fv1.rs?ref=20d694a95f0110fe253bfca7e9929bfdc6440c7e", "patch": "@@ -19,7 +19,7 @@\n // Re-exported core operators\n #[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)]\n-pub use marker::{Copy, Send, Sized, Sync};\n+pub use marker::{Copy, Send, Sized, Sync, Unpin};\n #[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)]\n pub use ops::{Drop, Fn, FnMut, FnOnce};"}, {"sha": "3379be79186efce95209a34a86b0c83497f90ed8", "filename": "src/libstd/future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20d694a95f0110fe253bfca7e9929bfdc6440c7e/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20d694a95f0110fe253bfca7e9929bfdc6440c7e/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=20d694a95f0110fe253bfca7e9929bfdc6440c7e", "patch": "@@ -43,7 +43,7 @@ impl<T: Generator<Yield = ()>> !Unpin for GenFuture<T> {}\n impl<T: Generator<Yield = ()>> Future for GenFuture<T> {\n     type Output = T::Return;\n     fn poll(self: Pin<&mut Self>, lw: &LocalWaker) -> Poll<Self::Output> {\n-        set_task_waker(lw, || match unsafe { Pin::get_mut_unchecked(self).0.resume() } {\n+        set_task_waker(lw, || match unsafe { Pin::get_unchecked_mut(self).0.resume() } {\n             GeneratorState::Yielded(()) => Poll::Pending,\n             GeneratorState::Complete(x) => Poll::Ready(x),\n         })"}]}