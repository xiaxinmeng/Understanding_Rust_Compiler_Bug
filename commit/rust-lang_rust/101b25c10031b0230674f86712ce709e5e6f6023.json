{"sha": "101b25c10031b0230674f86712ce709e5e6f6023", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwMWIyNWMxMDAzMWIwMjMwNjc0Zjg2NzEyY2U3MDllNWU2ZjYwMjM=", "commit": {"author": {"name": "Clark Gaebel", "email": "cg.wowus.cg@gmail.com", "date": "2015-02-07T23:49:54Z"}, "committer": {"name": "Clark Gaebel", "email": "cg.wowus.cg@gmail.com", "date": "2015-05-10T00:49:59Z"}, "message": "[liballoc] Adds checks for UB during allocation.\n\nThey're only enabled in debug builds, but a panic is usually more\nwelcome than UB in debug builds.", "tree": {"sha": "95aebaa27867de17175375beb58c0742f1e4211e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95aebaa27867de17175375beb58c0742f1e4211e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/101b25c10031b0230674f86712ce709e5e6f6023", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABAgAGBQJVTqs4AAoJEAxaZlyrzrdeDv4QAIqR8eekOnr9BZIx2V2WgwEF\nwRGhdk9AHSzmYjMC7Qp6zpdDp8pEHU2rWuXzZ967jEchu7/gVGMCRj0U59QRTmEI\nmDMPyzIqJgmQRVNoNO+PifN5ZMaS3nEcvWYw7+hF01oc49EACayibgMaEWJY/qgN\nS1Cg6vpTKBX+CsSTzZYDppQQQfOY0NhiGYjm4t1N/W5YmmrfR3cG4NDTTRLPFeTS\njAUTBPd7hdc8NCqCdWohAggAd1e1z02iH+0wbauCE80SrmZ/TLxrOQyvjDk04EzX\nKKVaNUVjErPefc1iTHnw1WmtpWKfw//j23+BUMbGq+4/tyTz/5JZ0mlSYSyQ8FuC\nwzGDqxH2Notm6wlxU4C4Ul1YiK0vmD+BzXxxcIuYsF0ymsLTFMjtIZavM6T11bjJ\nqTfZTmuyTpCffOGXlwm8n0FdHy6kK8P8kj2ulMPZ+W9xEsFZDx9UhD8lR64CKvXG\nFCbI/LrL0aQUyPc7lqkY81LzxjMB+CyWDUFLw3V6XcqpkwLoRNN4x53o8HAWlkyP\n4lGwZ5i50HK7av+fIE3itMPK8xtTZ4f8PR1hUs7AZ9B8lyWBvxoj+Gw+AUwJ3ky7\n0j/8G82TEZV4c9EJOS7Ak1fWTQcdvVl5H9o8HWw7GEiFu08MuyMBYZ3a+g3TVPJK\nhXkJhVgbNBFV0fw8+/GT\n=CXf7\n-----END PGP SIGNATURE-----", "payload": "tree 95aebaa27867de17175375beb58c0742f1e4211e\nparent dc630d01e3eae8ba05db98383119bc2ddbbb01c1\nauthor Clark Gaebel <cg.wowus.cg@gmail.com> 1423352994 -0500\ncommitter Clark Gaebel <cg.wowus.cg@gmail.com> 1431218999 -0400\n\n[liballoc] Adds checks for UB during allocation.\n\nThey're only enabled in debug builds, but a panic is usually more\nwelcome than UB in debug builds.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/101b25c10031b0230674f86712ce709e5e6f6023", "html_url": "https://github.com/rust-lang/rust/commit/101b25c10031b0230674f86712ce709e5e6f6023", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/101b25c10031b0230674f86712ce709e5e6f6023/comments", "author": null, "committer": null, "parents": [{"sha": "dc630d01e3eae8ba05db98383119bc2ddbbb01c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc630d01e3eae8ba05db98383119bc2ddbbb01c1", "html_url": "https://github.com/rust-lang/rust/commit/dc630d01e3eae8ba05db98383119bc2ddbbb01c1"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "b41ffcda3a5f3105dd0ead7d4cb732ad3f4b9bc1", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/101b25c10031b0230674f86712ce709e5e6f6023/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101b25c10031b0230674f86712ce709e5e6f6023/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=101b25c10031b0230674f86712ce709e5e6f6023", "patch": "@@ -8,6 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use core::{isize, usize};\n+\n+#[inline(always)]\n+fn check_size_and_alignment(size: usize, align: usize) {\n+    debug_assert!(size != 0);\n+    debug_assert!(size <= isize::MAX as usize, \"Tried to allocate too much: {} bytes\", size);\n+    debug_assert!(usize::is_power_of_two(align), \"Invalid alignment of allocation: {}\", align);\n+}\n+\n // FIXME: #13996: mark the `allocate` and `reallocate` return value as `noalias`\n \n /// Return a pointer to `size` bytes of memory aligned to `align`.\n@@ -19,6 +28,7 @@\n /// size on the platform.\n #[inline]\n pub unsafe fn allocate(size: usize, align: usize) -> *mut u8 {\n+    check_size_and_alignment(size, align);\n     imp::allocate(size, align)\n }\n \n@@ -38,6 +48,7 @@ pub unsafe fn allocate(size: usize, align: usize) -> *mut u8 {\n /// any value in range_inclusive(requested_size, usable_size).\n #[inline]\n pub unsafe fn reallocate(ptr: *mut u8, old_size: usize, size: usize, align: usize) -> *mut u8 {\n+    check_size_and_alignment(size, align);\n     imp::reallocate(ptr, old_size, size, align)\n }\n \n@@ -56,6 +67,7 @@ pub unsafe fn reallocate(ptr: *mut u8, old_size: usize, size: usize, align: usiz\n #[inline]\n pub unsafe fn reallocate_inplace(ptr: *mut u8, old_size: usize, size: usize,\n                                  align: usize) -> usize {\n+    check_size_and_alignment(size, align);\n     imp::reallocate_inplace(ptr, old_size, size, align)\n }\n "}]}