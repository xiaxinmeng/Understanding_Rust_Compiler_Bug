{"sha": "5f62c0c8649a61fb304466e90325a042f8c40449", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmNjJjMGM4NjQ5YTYxZmIzMDQ0NjZlOTAzMjVhMDQyZjhjNDA0NDk=", "commit": {"author": {"name": "Michal Budzynski", "email": "budziq@gmail.com", "date": "2017-09-16T20:16:49Z"}, "committer": {"name": "Michal Budzynski", "email": "budziq@gmail.com", "date": "2017-09-16T20:18:46Z"}, "message": "Added more text from unstable-book to `compiler_fence` docs", "tree": {"sha": "c9756ea032eef85d98272292883ec3490c663de9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9756ea032eef85d98272292883ec3490c663de9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f62c0c8649a61fb304466e90325a042f8c40449", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f62c0c8649a61fb304466e90325a042f8c40449", "html_url": "https://github.com/rust-lang/rust/commit/5f62c0c8649a61fb304466e90325a042f8c40449", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f62c0c8649a61fb304466e90325a042f8c40449/comments", "author": {"login": "budziq", "id": 221000, "node_id": "MDQ6VXNlcjIyMTAwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/221000?v=4", "gravatar_id": "", "url": "https://api.github.com/users/budziq", "html_url": "https://github.com/budziq", "followers_url": "https://api.github.com/users/budziq/followers", "following_url": "https://api.github.com/users/budziq/following{/other_user}", "gists_url": "https://api.github.com/users/budziq/gists{/gist_id}", "starred_url": "https://api.github.com/users/budziq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/budziq/subscriptions", "organizations_url": "https://api.github.com/users/budziq/orgs", "repos_url": "https://api.github.com/users/budziq/repos", "events_url": "https://api.github.com/users/budziq/events{/privacy}", "received_events_url": "https://api.github.com/users/budziq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "budziq", "id": 221000, "node_id": "MDQ6VXNlcjIyMTAwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/221000?v=4", "gravatar_id": "", "url": "https://api.github.com/users/budziq", "html_url": "https://github.com/budziq", "followers_url": "https://api.github.com/users/budziq/followers", "following_url": "https://api.github.com/users/budziq/following{/other_user}", "gists_url": "https://api.github.com/users/budziq/gists{/gist_id}", "starred_url": "https://api.github.com/users/budziq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/budziq/subscriptions", "organizations_url": "https://api.github.com/users/budziq/orgs", "repos_url": "https://api.github.com/users/budziq/repos", "events_url": "https://api.github.com/users/budziq/events{/privacy}", "received_events_url": "https://api.github.com/users/budziq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a60bb077c02d424b1031fc4ea93712dda111f2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a60bb077c02d424b1031fc4ea93712dda111f2e", "html_url": "https://github.com/rust-lang/rust/commit/9a60bb077c02d424b1031fc4ea93712dda111f2e"}], "stats": {"total": 23, "additions": 19, "deletions": 4}, "files": [{"sha": "3dd08e697106652f32c2aba27c2f33e58bee03fb", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5f62c0c8649a61fb304466e90325a042f8c40449/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f62c0c8649a61fb304466e90325a042f8c40449/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=5f62c0c8649a61fb304466e90325a042f8c40449", "patch": "@@ -1679,10 +1679,14 @@ pub fn fence(order: Ordering) {\n \n /// A compiler memory fence.\n ///\n-/// `compiler_fence` does not emit any machine code, but prevents the compiler from re-ordering\n-/// memory operations across this point. Which reorderings are disallowed is dictated by the given\n-/// [`Ordering`]. Note that `compiler_fence` does *not* introduce inter-thread memory\n-/// synchronization; for that, a [`fence`] is needed.\n+/// `compiler_fence` does not emit any machine code, but restricts the kinds\n+/// of memory re-ordering the compiler is allowed to do. Specifically, depending on\n+/// the given [`Ordering`] semantics, the compiler may be disallowed from moving reads\n+/// or writes from before or after the call to the other side of the call to\n+/// `compiler_fence`. Note that it does **not** prevent the *hardware*\n+/// from doing such re-ordering. This is not a problem in a single-threaded,\n+/// execution context, but when other threads may modify memory at the same\n+/// time, stronger synchronization primitives such as [`fence`] are required.\n ///\n /// The re-ordering prevented by the different ordering semantics are:\n ///\n@@ -1691,6 +1695,16 @@ pub fn fence(order: Ordering) {\n ///  - with [`Acquire`], subsequent reads and writes cannot be moved ahead of preceding reads.\n ///  - with [`AcqRel`], both of the above rules are enforced.\n ///\n+/// `compiler_fence` is generally only useful for preventing a thread from\n+/// racing *with itself*. That is, if a given thread is executing one piece\n+/// of code, and is then interrupted, and starts executing code elsewhere\n+/// (while still in the same thread, and conceptually still on the same\n+/// core). In traditional programs, this can only occur when a signal\n+/// handler is registered. In more low-level code, such situations can also\n+/// arise when handling interrupts, when implementing green threads with\n+/// pre-emption, etc. Curious readers are encouraged to read the Linux kernel's\n+/// discussion of [memory barriers].\n+///\n /// # Panics\n ///\n /// Panics if `order` is [`Relaxed`].\n@@ -1736,6 +1750,7 @@ pub fn fence(order: Ordering) {\n /// [`Release`]: enum.Ordering.html#variant.Release\n /// [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n+/// [memory barriers]: https://www.kernel.org/doc/Documentation/memory-barriers.txt\n #[inline]\n #[stable(feature = \"compiler_fences\", since = \"1.22.0\")]\n pub fn compiler_fence(order: Ordering) {"}]}