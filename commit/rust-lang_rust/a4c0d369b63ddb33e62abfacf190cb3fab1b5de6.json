{"sha": "a4c0d369b63ddb33e62abfacf190cb3fab1b5de6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0YzBkMzY5YjYzZGRiMzNlNjJhYmZhY2YxOTBjYjNmYWIxYjVkZTY=", "commit": {"author": {"name": "dylan_DPC", "email": "dylan.dpc@gmail.com", "date": "2018-07-21T11:51:04Z"}, "committer": {"name": "dylan_DPC", "email": "dylan.dpc@gmail.com", "date": "2018-07-21T11:51:04Z"}, "message": "add docs", "tree": {"sha": "9dcca59718bd735f30791768d5c1ab550d8b7411", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9dcca59718bd735f30791768d5c1ab550d8b7411"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4c0d369b63ddb33e62abfacf190cb3fab1b5de6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4c0d369b63ddb33e62abfacf190cb3fab1b5de6", "html_url": "https://github.com/rust-lang/rust/commit/a4c0d369b63ddb33e62abfacf190cb3fab1b5de6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4c0d369b63ddb33e62abfacf190cb3fab1b5de6/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7db332434005b823ca151804193837eaf904d2a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7db332434005b823ca151804193837eaf904d2a3", "html_url": "https://github.com/rust-lang/rust/commit/7db332434005b823ca151804193837eaf904d2a3"}], "stats": {"total": 23, "additions": 21, "deletions": 2}, "files": [{"sha": "cbd9c9a4e1a85368906de6d91bd210585a731c7b", "filename": "src/librustc_mir/borrow_check/nll/liveness_map.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a4c0d369b63ddb33e62abfacf190cb3fab1b5de6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fliveness_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4c0d369b63ddb33e62abfacf190cb3fab1b5de6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fliveness_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fliveness_map.rs?ref=a4c0d369b63ddb33e62abfacf190cb3fab1b5de6", "patch": "@@ -8,25 +8,41 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+//! For the NLL computation, we need to compute liveness, but only for those\n+//! local variables whose types contain regions. The others are not of interest\n+//! to us. This file defines a new index type (LocalWithRegion) that indexes into\n+//! a list of \"variables whose type contain regions\". It also defines a map from\n+//! Local to LocalWithRegion and vice versa -- this map can be given to the\n+//! liveness code so that it only operates over variables with regions in their\n+//! types, instead of all variables.\n+\n+use rustc::ty::TypeFoldable;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc::mir::{Mir, Local};\n use util::liveness::LiveVariableMap;\n+\n use rustc_data_structures::indexed_vec::Idx;\n-use rustc::ty::TypeFoldable;\n \n+/// Map between Local and LocalWithRegion indices: this map is supplied to the\n+/// liveness code so that it will only analyze those variables whose types\n+/// contain regions.\n crate struct NllLivenessMap {\n+    /// For each local variable, contains either None (if the type has no regions)\n+    /// or Some(i) with a suitable index.\n     pub from_local: IndexVec<Local, Option<LocalWithRegion>>,\n+    /// For each LocalWithRegion, maps back to the original Local index.\n     pub to_local: IndexVec<LocalWithRegion, Local>,\n \n }\n \n impl LiveVariableMap for NllLivenessMap {\n-    type LiveVar = LocalWithRegion;\n \n     fn from_local(&self, local: Local) -> Option<Self::LiveVar> {\n         self.from_local[local]\n     }\n \n+    type LiveVar = LocalWithRegion;\n+\n     fn from_live_var(&self, local: Self::LiveVar) -> Local {\n         self.to_local[local]\n     }\n@@ -37,6 +53,8 @@ impl LiveVariableMap for NllLivenessMap {\n }\n \n impl NllLivenessMap {\n+    /// Iterates over the variables in Mir and assigns each Local whose type contains\n+    /// regions a LocalWithRegion index. Returns a map for converting back and forth.\n     pub fn compute(mir: &Mir) -> Self {\n         let mut to_local = IndexVec::default();\n         let from_local: IndexVec<Local,Option<_>> = mir\n@@ -55,4 +73,5 @@ impl NllLivenessMap {\n     }\n }\n \n+/// Index given to each local variable whose type contains a region.\n newtype_index!(LocalWithRegion);"}]}