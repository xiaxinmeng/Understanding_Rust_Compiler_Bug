{"sha": "7dd1e8cfdf7f02010cc3d21eba59954255166484", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkZDFlOGNmZGY3ZjAyMDEwY2MzZDIxZWJhNTk5NTQyNTUxNjY0ODQ=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-02-01T10:12:49Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-02-15T18:36:13Z"}, "message": "Trait impls are Items, therefore HIR owners.", "tree": {"sha": "186ae13800a35fa158d559f937186c99f7f6b3ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/186ae13800a35fa158d559f937186c99f7f6b3ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7dd1e8cfdf7f02010cc3d21eba59954255166484", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7dd1e8cfdf7f02010cc3d21eba59954255166484", "html_url": "https://github.com/rust-lang/rust/commit/7dd1e8cfdf7f02010cc3d21eba59954255166484", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7dd1e8cfdf7f02010cc3d21eba59954255166484/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f395f2ea120cad774a2d7396e0e2ab5667be3116", "url": "https://api.github.com/repos/rust-lang/rust/commits/f395f2ea120cad774a2d7396e0e2ab5667be3116", "html_url": "https://github.com/rust-lang/rust/commit/f395f2ea120cad774a2d7396e0e2ab5667be3116"}], "stats": {"total": 38, "additions": 16, "deletions": 22}, "files": [{"sha": "9496689779b052b5136552150c8507bac3ab458f", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7dd1e8cfdf7f02010cc3d21eba59954255166484/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dd1e8cfdf7f02010cc3d21eba59954255166484/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=7dd1e8cfdf7f02010cc3d21eba59954255166484", "patch": "@@ -396,8 +396,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 self_ty: ref ty,\n                 items: ref impl_items,\n             }) => {\n-                let def_id = self.resolver.local_def_id(id);\n-\n                 // Lower the \"impl header\" first. This ordering is important\n                 // for in-band lifetimes! Consider `'a` here:\n                 //\n@@ -411,10 +409,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 // method, it will not be considered an in-band\n                 // lifetime to be added, but rather a reference to a\n                 // parent lifetime.\n-                let lowered_trait_impl_id = self.lower_node_id(id);\n+                let lowered_trait_def_id = self.lower_node_id(id).expect_owner();\n                 let (generics, (trait_ref, lowered_ty)) = self.add_in_band_defs(\n                     ast_generics,\n-                    def_id,\n+                    lowered_trait_def_id,\n                     AnonymousLifetimeMode::CreateParameter,\n                     |this, _| {\n                         let trait_ref = trait_ref.as_ref().map(|trait_ref| {\n@@ -426,7 +424,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                                 this.trait_impls\n                                     .entry(def_id)\n                                     .or_default()\n-                                    .push(lowered_trait_impl_id);\n+                                    .push(lowered_trait_def_id);\n                             }\n                         }\n "}, {"sha": "9d0b2cd5c675d0667d7fe2ad75447158b0554aea", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dd1e8cfdf7f02010cc3d21eba59954255166484/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dd1e8cfdf7f02010cc3d21eba59954255166484/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=7dd1e8cfdf7f02010cc3d21eba59954255166484", "patch": "@@ -108,7 +108,7 @@ struct LoweringContext<'a, 'hir: 'a> {\n     exported_macros: Vec<hir::MacroDef<'hir>>,\n     non_exported_macro_attrs: Vec<ast::Attribute>,\n \n-    trait_impls: BTreeMap<DefId, Vec<hir::HirId>>,\n+    trait_impls: BTreeMap<DefId, Vec<LocalDefId>>,\n \n     modules: BTreeMap<LocalDefId, hir::ModuleItems>,\n "}, {"sha": "6ac1c570cfe1b794ca61ffd92ead4495ad20c969", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dd1e8cfdf7f02010cc3d21eba59954255166484/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dd1e8cfdf7f02010cc3d21eba59954255166484/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=7dd1e8cfdf7f02010cc3d21eba59954255166484", "patch": "@@ -658,7 +658,7 @@ pub struct Crate<'hir> {\n     pub impl_items: BTreeMap<ImplItemId, ImplItem<'hir>>,\n     pub foreign_items: BTreeMap<ForeignItemId, ForeignItem<'hir>>,\n     pub bodies: BTreeMap<BodyId, Body<'hir>>,\n-    pub trait_impls: BTreeMap<DefId, Vec<HirId>>,\n+    pub trait_impls: BTreeMap<DefId, Vec<LocalDefId>>,\n \n     /// A list of the body ids written out in the order in which they\n     /// appear in the crate. If you're going to process all the bodies"}, {"sha": "fa0d5b8301349a6fa752519454b3778dc356f754", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7dd1e8cfdf7f02010cc3d21eba59954255166484/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dd1e8cfdf7f02010cc3d21eba59954255166484/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=7dd1e8cfdf7f02010cc3d21eba59954255166484", "patch": "@@ -361,8 +361,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                             .hir()\n                             .trait_impls(trait_did)\n                             .iter()\n-                            .filter_map(|impl_node| {\n-                                let impl_did = tcx.hir().local_def_id(*impl_node);\n+                            .filter_map(|&impl_did| {\n                                 match tcx.hir().get_if_local(impl_did.to_def_id()) {\n                                     Some(Node::Item(Item {\n                                         kind: ItemKind::Impl(hir::Impl { self_ty, .. }),"}, {"sha": "178253316f4b68dbc01ae81135d4e83896e2dd0f", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dd1e8cfdf7f02010cc3d21eba59954255166484/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dd1e8cfdf7f02010cc3d21eba59954255166484/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=7dd1e8cfdf7f02010cc3d21eba59954255166484", "patch": "@@ -449,7 +449,7 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n-    pub fn trait_impls(&self, trait_did: DefId) -> &'hir [HirId] {\n+    pub fn trait_impls(&self, trait_did: DefId) -> &'hir [LocalDefId] {\n         self.tcx.all_local_trait_impls(LOCAL_CRATE).get(&trait_did).map_or(&[], |xs| &xs[..])\n     }\n "}, {"sha": "475f47c65bd2582e20dcabe36279e4ee8a963369", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dd1e8cfdf7f02010cc3d21eba59954255166484/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dd1e8cfdf7f02010cc3d21eba59954255166484/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=7dd1e8cfdf7f02010cc3d21eba59954255166484", "patch": "@@ -956,7 +956,7 @@ rustc_queries! {\n     /// Passing in any other crate will cause an ICE.\n     ///\n     /// [`LOCAL_CRATE`]: rustc_hir::def_id::LOCAL_CRATE\n-    query all_local_trait_impls(local_crate: CrateNum) -> &'tcx BTreeMap<DefId, Vec<hir::HirId>> {\n+    query all_local_trait_impls(local_crate: CrateNum) -> &'tcx BTreeMap<DefId, Vec<LocalDefId>> {\n         desc { \"local trait impls\" }\n     }\n "}, {"sha": "ce17a724e25d3ba2dd0f5cc71bf8f6eeb096f138", "filename": "compiler/rustc_middle/src/ty/trait_def.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7dd1e8cfdf7f02010cc3d21eba59954255166484/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dd1e8cfdf7f02010cc3d21eba59954255166484/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs?ref=7dd1e8cfdf7f02010cc3d21eba59954255166484", "patch": "@@ -4,9 +4,8 @@ use crate::ty::fast_reject;\n use crate::ty::fold::TypeFoldable;\n use crate::ty::{Ty, TyCtxt};\n use rustc_hir as hir;\n-use rustc_hir::def_id::{CrateNum, DefId};\n+use rustc_hir::def_id::{CrateNum, DefId, LocalDefId};\n use rustc_hir::definitions::DefPathHash;\n-use rustc_hir::HirId;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n@@ -201,7 +200,7 @@ impl<'tcx> TyCtxt<'tcx> {\n pub(super) fn all_local_trait_impls<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     krate: CrateNum,\n-) -> &'tcx BTreeMap<DefId, Vec<HirId>> {\n+) -> &'tcx BTreeMap<DefId, Vec<LocalDefId>> {\n     &tcx.hir_crate(krate).trait_impls\n }\n \n@@ -229,8 +228,8 @@ pub(super) fn trait_impls_of_provider(tcx: TyCtxt<'_>, trait_id: DefId) -> Trait\n         }\n     }\n \n-    for &hir_id in tcx.hir().trait_impls(trait_id) {\n-        let impl_def_id = tcx.hir().local_def_id(hir_id).to_def_id();\n+    for &impl_def_id in tcx.hir().trait_impls(trait_id) {\n+        let impl_def_id = impl_def_id.to_def_id();\n \n         let impl_self_ty = tcx.type_of(impl_def_id);\n         if impl_self_ty.references_error() {"}, {"sha": "5b44cb7eae51649650b83cdea4d29dc148407166", "filename": "compiler/rustc_typeck/src/coherence/builtin.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7dd1e8cfdf7f02010cc3d21eba59954255166484/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dd1e8cfdf7f02010cc3d21eba59954255166484/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=7dd1e8cfdf7f02010cc3d21eba59954255166484", "patch": "@@ -38,8 +38,7 @@ impl<'tcx> Checker<'tcx> {\n         F: FnMut(TyCtxt<'tcx>, LocalDefId),\n     {\n         if Some(self.trait_def_id) == trait_def_id {\n-            for &impl_id in self.tcx.hir().trait_impls(self.trait_def_id) {\n-                let impl_def_id = self.tcx.hir().local_def_id(impl_id);\n+            for &impl_def_id in self.tcx.hir().trait_impls(self.trait_def_id) {\n                 f(self.tcx, impl_def_id);\n             }\n         }"}, {"sha": "05906817914c676ee22b02d30d27035166b9d7d1", "filename": "compiler/rustc_typeck/src/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7dd1e8cfdf7f02010cc3d21eba59954255166484/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dd1e8cfdf7f02010cc3d21eba59954255166484/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fmod.rs?ref=7dd1e8cfdf7f02010cc3d21eba59954255166484", "patch": "@@ -172,8 +172,7 @@ fn coherent_trait(tcx: TyCtxt<'_>, def_id: DefId) {\n     tcx.ensure().specialization_graph_of(def_id);\n \n     let impls = tcx.hir().trait_impls(def_id);\n-    for &hir_id in impls {\n-        let impl_def_id = tcx.hir().local_def_id(hir_id);\n+    for &impl_def_id in impls {\n         let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n \n         check_impl(tcx, impl_def_id, trait_ref);"}, {"sha": "0951a9c2c9794169314d256befd671a670e1e05c", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7dd1e8cfdf7f02010cc3d21eba59954255166484/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dd1e8cfdf7f02010cc3d21eba59954255166484/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=7dd1e8cfdf7f02010cc3d21eba59954255166484", "patch": "@@ -58,8 +58,8 @@ crate fn collect_trait_impls(krate: Crate, cx: &DocContext<'_>) -> Crate {\n     // doesn't work with it anyway, so pull them from the HIR map instead\n     let mut extra_attrs = Vec::new();\n     for &trait_did in cx.tcx.all_traits(LOCAL_CRATE).iter() {\n-        for &impl_node in cx.tcx.hir().trait_impls(trait_did) {\n-            let impl_did = cx.tcx.hir().local_def_id(impl_node).to_def_id();\n+        for &impl_did in cx.tcx.hir().trait_impls(trait_did) {\n+            let impl_did = impl_did.to_def_id();\n             cx.tcx.sess.prof.generic_activity(\"build_local_trait_impl\").run(|| {\n                 let mut parent = cx.tcx.parent(impl_did);\n                 while let Some(did) = parent {"}]}