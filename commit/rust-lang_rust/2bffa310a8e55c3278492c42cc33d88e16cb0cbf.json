{"sha": "2bffa310a8e55c3278492c42cc33d88e16cb0cbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiZmZhMzEwYThlNTVjMzI3ODQ5MmM0MmNjMzNkODhlMTZjYjBjYmY=", "commit": {"author": {"name": "Thomas Jespersen", "email": "laumann.thomas@gmail.com", "date": "2017-08-28T11:35:53Z"}, "committer": {"name": "Thomas Jespersen", "email": "laumann.thomas@gmail.com", "date": "2017-08-28T11:35:53Z"}, "message": "compiletest: Change Config comments to doc comments", "tree": {"sha": "ff31d350222d512e6a1ae9a51c04ef5ee11463e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff31d350222d512e6a1ae9a51c04ef5ee11463e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bffa310a8e55c3278492c42cc33d88e16cb0cbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bffa310a8e55c3278492c42cc33d88e16cb0cbf", "html_url": "https://github.com/rust-lang/rust/commit/2bffa310a8e55c3278492c42cc33d88e16cb0cbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bffa310a8e55c3278492c42cc33d88e16cb0cbf/comments", "author": null, "committer": null, "parents": [{"sha": "a0c3bd2d23f6d08ecf9b4191ee4fff5866a120d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0c3bd2d23f6d08ecf9b4191ee4fff5866a120d1", "html_url": "https://github.com/rust-lang/rust/commit/a0c3bd2d23f6d08ecf9b4191ee4fff5866a120d1"}], "stats": {"total": 78, "additions": 39, "deletions": 39}, "files": [{"sha": "cee7e52c7f3c63f23edce8c7bde77322cc90ab26", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/2bffa310a8e55c3278492c42cc33d88e16cb0cbf/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bffa310a8e55c3278492c42cc33d88e16cb0cbf/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=2bffa310a8e55c3278492c42cc33d88e16cb0cbf", "patch": "@@ -83,117 +83,117 @@ impl fmt::Display for Mode {\n \n #[derive(Clone)]\n pub struct Config {\n-    // The library paths required for running the compiler\n+    /// The library paths required for running the compiler\n     pub compile_lib_path: PathBuf,\n \n-    // The library paths required for running compiled programs\n+    /// The library paths required for running compiled programs\n     pub run_lib_path: PathBuf,\n \n-    // The rustc executable\n+    /// The rustc executable\n     pub rustc_path: PathBuf,\n \n-    // The rustdoc executable\n+    /// The rustdoc executable\n     pub rustdoc_path: Option<PathBuf>,\n \n-    // The python executable to use for LLDB\n+    /// The python executable to use for LLDB\n     pub lldb_python: String,\n \n-    // The python executable to use for htmldocck\n+    /// The python executable to use for htmldocck\n     pub docck_python: String,\n \n-    // The llvm FileCheck binary path\n+    /// The llvm FileCheck binary path\n     pub llvm_filecheck: Option<PathBuf>,\n \n-    // The valgrind path\n+    /// The valgrind path\n     pub valgrind_path: Option<String>,\n \n-    // Whether to fail if we can't run run-pass-valgrind tests under valgrind\n-    // (or, alternatively, to silently run them like regular run-pass tests).\n+    /// Whether to fail if we can't run run-pass-valgrind tests under valgrind\n+    /// (or, alternatively, to silently run them like regular run-pass tests).\n     pub force_valgrind: bool,\n \n-    // The directory containing the tests to run\n+    /// The directory containing the tests to run\n     pub src_base: PathBuf,\n \n-    // The directory where programs should be built\n+    /// The directory where programs should be built\n     pub build_base: PathBuf,\n \n-    // The name of the stage being built (stage1, etc)\n+    /// The name of the stage being built (stage1, etc)\n     pub stage_id: String,\n \n-    // The test mode, compile-fail, run-fail, run-pass\n+    /// The test mode, compile-fail, run-fail, run-pass\n     pub mode: Mode,\n \n-    // Run ignored tests\n+    /// Run ignored tests\n     pub run_ignored: bool,\n \n-    // Only run tests that match this filter\n+    /// Only run tests that match this filter\n     pub filter: Option<String>,\n \n-    // Exactly match the filter, rather than a substring\n+    /// Exactly match the filter, rather than a substring\n     pub filter_exact: bool,\n \n-    // Write out a parseable log of tests that were run\n+    /// Write out a parseable log of tests that were run\n     pub logfile: Option<PathBuf>,\n \n-    // A command line to prefix program execution with,\n-    // for running under valgrind\n+    /// A command line to prefix program execution with,\n+    /// for running under valgrind\n     pub runtool: Option<String>,\n \n-    // Flags to pass to the compiler when building for the host\n+    /// Flags to pass to the compiler when building for the host\n     pub host_rustcflags: Option<String>,\n \n-    // Flags to pass to the compiler when building for the target\n+    /// Flags to pass to the compiler when building for the target\n     pub target_rustcflags: Option<String>,\n \n-    // Target system to be tested\n+    /// Target system to be tested\n     pub target: String,\n \n-    // Host triple for the compiler being invoked\n+    /// Host triple for the compiler being invoked\n     pub host: String,\n \n-    // Path to / name of the GDB executable\n+    /// Path to / name of the GDB executable\n     pub gdb: Option<String>,\n \n-    // Version of GDB, encoded as ((major * 1000) + minor) * 1000 + patch\n+    /// Version of GDB, encoded as ((major * 1000) + minor) * 1000 + patch\n     pub gdb_version: Option<u32>,\n \n-    // Whether GDB has native rust support\n+    /// Whether GDB has native rust support\n     pub gdb_native_rust: bool,\n \n-    // Version of LLDB\n+    /// Version of LLDB\n     pub lldb_version: Option<String>,\n \n-    // Version of LLVM\n+    /// Version of LLVM\n     pub llvm_version: Option<String>,\n \n-    // Is LLVM a system LLVM\n+    /// Is LLVM a system LLVM\n     pub system_llvm: bool,\n \n-    // Path to the android tools\n+    /// Path to the android tools\n     pub android_cross_path: PathBuf,\n \n-    // Extra parameter to run adb on arm-linux-androideabi\n+    /// Extra parameter to run adb on arm-linux-androideabi\n     pub adb_path: String,\n \n-    // Extra parameter to run test suite on arm-linux-androideabi\n+    /// Extra parameter to run test suite on arm-linux-androideabi\n     pub adb_test_dir: String,\n \n-    // status whether android device available or not\n+    /// status whether android device available or not\n     pub adb_device_status: bool,\n \n-    // the path containing LLDB's Python module\n+    /// the path containing LLDB's Python module\n     pub lldb_python_dir: Option<String>,\n \n-    // Explain what's going on\n+    /// Explain what's going on\n     pub verbose: bool,\n \n-    // Print one character per test instead of one line\n+    /// Print one character per test instead of one line\n     pub quiet: bool,\n \n-    // Whether to use colors in test.\n+    /// Whether to use colors in test.\n     pub color: ColorConfig,\n \n-    // where to find the remote test client process, if we're using it\n+    /// where to find the remote test client process, if we're using it\n     pub remote_test_client: Option<PathBuf>,\n \n     // Configuration for various run-make tests frobbing things like C compilers"}]}