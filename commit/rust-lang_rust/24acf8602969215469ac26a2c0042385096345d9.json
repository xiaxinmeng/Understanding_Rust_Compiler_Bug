{"sha": "24acf8602969215469ac26a2c0042385096345d9", "node_id": "C_kwDOAAsO6NoAKDI0YWNmODYwMjk2OTIxNTQ2OWFjMjZhMmMwMDQyMzg1MDk2MzQ1ZDk", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2021-11-13T22:56:22Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2021-11-14T10:38:52Z"}, "message": "Fix span for non-satisfied trivial trait bounds\n\nThe spans for \"trait bound not satisfied\" errors in trivial trait bounds referenced the entire item (fn, impl, struct) before.\nNow they only reference the obligation itself (`String: Copy`)\n\nAddress #90869", "tree": {"sha": "e924b85782ebdf6180493d50f58e1dd1e1bc9260", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e924b85782ebdf6180493d50f58e1dd1e1bc9260"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24acf8602969215469ac26a2c0042385096345d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24acf8602969215469ac26a2c0042385096345d9", "html_url": "https://github.com/rust-lang/rust/commit/24acf8602969215469ac26a2c0042385096345d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24acf8602969215469ac26a2c0042385096345d9/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f820d9d4e5af7d298ffdc3145b48e206b65e8e28", "url": "https://api.github.com/repos/rust-lang/rust/commits/f820d9d4e5af7d298ffdc3145b48e206b65e8e28", "html_url": "https://github.com/rust-lang/rust/commit/f820d9d4e5af7d298ffdc3145b48e206b65e8e28"}], "stats": {"total": 206, "additions": 102, "deletions": 104}, "files": [{"sha": "92f74af4eb3eb930959168337dd0911572a85803", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/24acf8602969215469ac26a2c0042385096345d9/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24acf8602969215469ac26a2c0042385096345d9/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=24acf8602969215469ac26a2c0042385096345d9", "patch": "@@ -5,6 +5,7 @@ use crate::traits::{Obligation, ObligationCause, PredicateObligation};\n use rustc_data_structures::fx::{FxHashSet, FxIndexSet};\n use rustc_middle::ty::{self, ToPredicate, TyCtxt, WithConstness};\n use rustc_span::symbol::Ident;\n+use rustc_span::Span;\n \n pub fn anonymize_predicate<'tcx>(\n     tcx: TyCtxt<'tcx>,\n@@ -97,6 +98,22 @@ pub fn elaborate_predicates<'tcx>(\n     elaborate_obligations(tcx, obligations)\n }\n \n+pub fn elaborate_predicates_with_span<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    predicates: impl Iterator<Item = (ty::Predicate<'tcx>, Span)>,\n+) -> Elaborator<'tcx> {\n+    let obligations = predicates\n+        .map(|(predicate, span)| {\n+            predicate_obligation(\n+                predicate,\n+                ty::ParamEnv::empty(),\n+                ObligationCause::dummy_with_span(span),\n+            )\n+        })\n+        .collect();\n+    elaborate_obligations(tcx, obligations)\n+}\n+\n pub fn elaborate_obligations<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     mut obligations: Vec<PredicateObligation<'tcx>>,"}, {"sha": "91671994c5ace9c87c31ddc0e1750a7277244ae4", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/24acf8602969215469ac26a2c0042385096345d9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24acf8602969215469ac26a2c0042385096345d9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=24acf8602969215469ac26a2c0042385096345d9", "patch": "@@ -65,7 +65,8 @@ pub use self::specialize::{specialization_graph, translate_substs, OverlapError}\n pub use self::structural_match::search_for_structural_match_violation;\n pub use self::structural_match::NonStructuralMatchTy;\n pub use self::util::{\n-    elaborate_obligations, elaborate_predicates, elaborate_trait_ref, elaborate_trait_refs,\n+    elaborate_obligations, elaborate_predicates, elaborate_predicates_with_span,\n+    elaborate_trait_ref, elaborate_trait_refs,\n };\n pub use self::util::{expand_trait_aliases, TraitAliasExpander};\n pub use self::util::{"}, {"sha": "0050ac99cb19a8c32ac804792a94b2ec2b099783", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/24acf8602969215469ac26a2c0042385096345d9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24acf8602969215469ac26a2c0042385096345d9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=24acf8602969215469ac26a2c0042385096345d9", "patch": "@@ -1641,19 +1641,38 @@ fn report_bivariance(tcx: TyCtxt<'_>, param: &rustc_hir::GenericParam<'_>) {\n \n /// Feature gates RFC 2056 -- trivial bounds, checking for global bounds that\n /// aren't true.\n-fn check_false_global_bounds(fcx: &FnCtxt<'_, '_>, span: Span, id: hir::HirId) {\n+fn check_false_global_bounds(fcx: &FnCtxt<'_, '_>, mut span: Span, id: hir::HirId) {\n     let empty_env = ty::ParamEnv::empty();\n \n     let def_id = fcx.tcx.hir().local_def_id(id);\n-    let predicates = fcx.tcx.predicates_of(def_id).predicates.iter().map(|(p, _)| *p);\n+    let predicates_with_span =\n+        fcx.tcx.predicates_of(def_id).predicates.iter().map(|(p, span)| (*p, *span));\n     // Check elaborated bounds.\n-    let implied_obligations = traits::elaborate_predicates(fcx.tcx, predicates);\n+    let implied_obligations = traits::elaborate_predicates_with_span(fcx.tcx, predicates_with_span);\n \n     for obligation in implied_obligations {\n         let pred = obligation.predicate;\n         // Match the existing behavior.\n         if pred.is_global(fcx.tcx) && !pred.has_late_bound_regions() {\n             let pred = fcx.normalize_associated_types_in(span, pred);\n+            let hir_node = fcx.tcx.hir().find(id);\n+\n+            // only use the span of the predicate clause (#90869)\n+\n+            if let Some(hir::Generics { where_clause, .. }) =\n+                hir_node.and_then(|node| node.generics())\n+            {\n+                let obligation_span = obligation.cause.span(fcx.tcx);\n+\n+                span = where_clause\n+                    .predicates\n+                    .iter()\n+                    // There seems to be no better way to find out which predicate we are in\n+                    .find(|pred| pred.span().contains(obligation_span))\n+                    .map(|pred| pred.span())\n+                    .unwrap_or(obligation_span);\n+            }\n+\n             let obligation = traits::Obligation::new(\n                 traits::ObligationCause::new(span, id, traits::TrivialBound),\n                 empty_env,"}, {"sha": "18bb6f6bc1edc4884d65cd5155f87cbdbf94ebdc", "filename": "src/test/ui/const-generics/issues/issue-67185-2.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/24acf8602969215469ac26a2c0042385096345d9/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24acf8602969215469ac26a2c0042385096345d9/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.rs?ref=24acf8602969215469ac26a2c0042385096345d9", "patch": "@@ -9,11 +9,10 @@ trait Bar {}\n impl Bar for [u16; 4] {}\n impl Bar for [[u16; 3]; 3] {}\n \n-trait Foo  //~ ERROR the trait bound `[u16; 3]: Bar` is not satisfied [E0277]\n-           //~^ ERROR the trait bound `[[u16; 3]; 2]: Bar` is not satisfied [E0277]\n-    where\n-        [<u8 as Baz>::Quaks; 2]: Bar,\n-        <u8 as Baz>::Quaks: Bar,\n+trait Foo\n+where\n+    [<u8 as Baz>::Quaks; 2]: Bar, //~ ERROR the trait bound `[[u16; 3]; 2]: Bar` is not satisfied [E0277]\n+    <u8 as Baz>::Quaks: Bar,  //~ ERROR the trait bound `[u16; 3]: Bar` is not satisfied [E0277]\n {\n }\n "}, {"sha": "89aa3d395e25bb8eae63133c28f02e1ee774cad5", "filename": "src/test/ui/const-generics/issues/issue-67185-2.stderr", "status": "modified", "additions": 24, "deletions": 36, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/24acf8602969215469ac26a2c0042385096345d9/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24acf8602969215469ac26a2c0042385096345d9/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.stderr?ref=24acf8602969215469ac26a2c0042385096345d9", "patch": "@@ -1,14 +1,8 @@\n error[E0277]: the trait bound `[u16; 3]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:12:1\n+  --> $DIR/issue-67185-2.rs:15:5\n    |\n-LL | / trait Foo\n-LL | |\n-LL | |     where\n-LL | |         [<u8 as Baz>::Quaks; 2]: Bar,\n-LL | |         <u8 as Baz>::Quaks: Bar,\n-LL | | {\n-LL | | }\n-   | |_^ the trait `Bar` is not implemented for `[u16; 3]`\n+LL |     <u8 as Baz>::Quaks: Bar,\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `[u16; 3]`\n    |\n    = help: the following implementations were found:\n              <[[u16; 3]; 3] as Bar>\n@@ -17,16 +11,10 @@ LL | | }\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `[[u16; 3]; 2]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:12:1\n+  --> $DIR/issue-67185-2.rs:14:5\n    |\n-LL | / trait Foo\n-LL | |\n-LL | |     where\n-LL | |         [<u8 as Baz>::Quaks; 2]: Bar,\n-LL | |         <u8 as Baz>::Quaks: Bar,\n-LL | | {\n-LL | | }\n-   | |_^ the trait `Bar` is not implemented for `[[u16; 3]; 2]`\n+LL |     [<u8 as Baz>::Quaks; 2]: Bar,\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `[[u16; 3]; 2]`\n    |\n    = help: the following implementations were found:\n              <[[u16; 3]; 3] as Bar>\n@@ -35,7 +23,7 @@ LL | | }\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `[u16; 3]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:22:6\n+  --> $DIR/issue-67185-2.rs:21:6\n    |\n LL | impl Foo for FooImpl {}\n    |      ^^^ the trait `Bar` is not implemented for `[u16; 3]`\n@@ -44,16 +32,16 @@ LL | impl Foo for FooImpl {}\n              <[[u16; 3]; 3] as Bar>\n              <[u16; 4] as Bar>\n note: required by a bound in `Foo`\n-  --> $DIR/issue-67185-2.rs:16:29\n+  --> $DIR/issue-67185-2.rs:15:25\n    |\n LL | trait Foo\n    |       --- required by a bound in this\n ...\n-LL |         <u8 as Baz>::Quaks: Bar,\n-   |                             ^^^ required by this bound in `Foo`\n+LL |     <u8 as Baz>::Quaks: Bar,\n+   |                         ^^^ required by this bound in `Foo`\n \n error[E0277]: the trait bound `[[u16; 3]; 2]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:22:6\n+  --> $DIR/issue-67185-2.rs:21:6\n    |\n LL | impl Foo for FooImpl {}\n    |      ^^^ the trait `Bar` is not implemented for `[[u16; 3]; 2]`\n@@ -62,16 +50,16 @@ LL | impl Foo for FooImpl {}\n              <[[u16; 3]; 3] as Bar>\n              <[u16; 4] as Bar>\n note: required by a bound in `Foo`\n-  --> $DIR/issue-67185-2.rs:15:34\n+  --> $DIR/issue-67185-2.rs:14:30\n    |\n LL | trait Foo\n    |       --- required by a bound in this\n-...\n-LL |         [<u8 as Baz>::Quaks; 2]: Bar,\n-   |                                  ^^^ required by this bound in `Foo`\n+LL | where\n+LL |     [<u8 as Baz>::Quaks; 2]: Bar,\n+   |                              ^^^ required by this bound in `Foo`\n \n error[E0277]: the trait bound `[[u16; 3]; 2]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:26:14\n+  --> $DIR/issue-67185-2.rs:25:14\n    |\n LL | fn f(_: impl Foo) {}\n    |              ^^^ the trait `Bar` is not implemented for `[[u16; 3]; 2]`\n@@ -80,16 +68,16 @@ LL | fn f(_: impl Foo) {}\n              <[[u16; 3]; 3] as Bar>\n              <[u16; 4] as Bar>\n note: required by a bound in `Foo`\n-  --> $DIR/issue-67185-2.rs:15:34\n+  --> $DIR/issue-67185-2.rs:14:30\n    |\n LL | trait Foo\n    |       --- required by a bound in this\n-...\n-LL |         [<u8 as Baz>::Quaks; 2]: Bar,\n-   |                                  ^^^ required by this bound in `Foo`\n+LL | where\n+LL |     [<u8 as Baz>::Quaks; 2]: Bar,\n+   |                              ^^^ required by this bound in `Foo`\n \n error[E0277]: the trait bound `[u16; 3]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:26:14\n+  --> $DIR/issue-67185-2.rs:25:14\n    |\n LL | fn f(_: impl Foo) {}\n    |              ^^^ the trait `Bar` is not implemented for `[u16; 3]`\n@@ -98,13 +86,13 @@ LL | fn f(_: impl Foo) {}\n              <[[u16; 3]; 3] as Bar>\n              <[u16; 4] as Bar>\n note: required by a bound in `Foo`\n-  --> $DIR/issue-67185-2.rs:16:29\n+  --> $DIR/issue-67185-2.rs:15:25\n    |\n LL | trait Foo\n    |       --- required by a bound in this\n ...\n-LL |         <u8 as Baz>::Quaks: Bar,\n-   |                             ^^^ required by this bound in `Foo`\n+LL |     <u8 as Baz>::Quaks: Bar,\n+   |                         ^^^ required by this bound in `Foo`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "c38a5001ac86d18c30d068eca0fa0ac0cd055424", "filename": "src/test/ui/cross/cross-fn-cache-hole.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24acf8602969215469ac26a2c0042385096345d9/src%2Ftest%2Fui%2Fcross%2Fcross-fn-cache-hole.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24acf8602969215469ac26a2c0042385096345d9/src%2Ftest%2Fui%2Fcross%2Fcross-fn-cache-hole.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross%2Fcross-fn-cache-hole.rs?ref=24acf8602969215469ac26a2c0042385096345d9", "patch": "@@ -12,8 +12,8 @@ trait Bar<X> { }\n \n // We don't always check where clauses for sanity, but in this case\n // wfcheck does report an error here:\n-fn vacuous<A>() //~ ERROR the trait bound `i32: Bar<u32>` is not satisfied\n-    where i32: Foo<u32, A>\n+fn vacuous<A>()\n+    where i32: Foo<u32, A> //~ ERROR the trait bound `i32: Bar<u32>` is not satisfied\n {\n     // ... the original intention was to check that we don't use that\n     // vacuous where clause (which could never be satisfied) to accept"}, {"sha": "7e15562b0816b38759feaa4f8b5a99f776bc0f21", "filename": "src/test/ui/cross/cross-fn-cache-hole.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/24acf8602969215469ac26a2c0042385096345d9/src%2Ftest%2Fui%2Fcross%2Fcross-fn-cache-hole.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24acf8602969215469ac26a2c0042385096345d9/src%2Ftest%2Fui%2Fcross%2Fcross-fn-cache-hole.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross%2Fcross-fn-cache-hole.stderr?ref=24acf8602969215469ac26a2c0042385096345d9", "patch": "@@ -1,14 +1,8 @@\n error[E0277]: the trait bound `i32: Bar<u32>` is not satisfied\n-  --> $DIR/cross-fn-cache-hole.rs:15:1\n+  --> $DIR/cross-fn-cache-hole.rs:16:11\n    |\n-LL | / fn vacuous<A>()\n-LL | |     where i32: Foo<u32, A>\n-LL | | {\n-LL | |     // ... the original intention was to check that we don't use that\n-...  |\n-LL | |     require::<i32, u32>();\n-LL | | }\n-   | |_^ the trait `Bar<u32>` is not implemented for `i32`\n+LL |     where i32: Foo<u32, A>\n+   |           ^^^^^^^^^^^^^^^^ the trait `Bar<u32>` is not implemented for `i32`\n    |\n    = help: see issue #48214\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable"}, {"sha": "28c49c33bf6b5b41caee35a8b9792aaa5e26f458", "filename": "src/test/ui/feature-gates/feature-gate-trivial_bounds.stderr", "status": "modified", "additions": 28, "deletions": 48, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/24acf8602969215469ac26a2c0042385096345d9/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trivial_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24acf8602969215469ac26a2c0042385096345d9/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trivial_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trivial_bounds.stderr?ref=24acf8602969215469ac26a2c0042385096345d9", "patch": "@@ -1,110 +1,92 @@\n error[E0277]: the trait bound `i32: Foo` is not satisfied\n-  --> $DIR/feature-gate-trivial_bounds.rs:10:1\n+  --> $DIR/feature-gate-trivial_bounds.rs:10:14\n    |\n LL | enum E where i32: Foo { V }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `i32`\n+   |              ^^^^^^^^ the trait `Foo` is not implemented for `i32`\n    |\n    = help: see issue #48214\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `i32: Foo` is not satisfied\n-  --> $DIR/feature-gate-trivial_bounds.rs:12:1\n+  --> $DIR/feature-gate-trivial_bounds.rs:12:16\n    |\n LL | struct S where i32: Foo;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `i32`\n+   |                ^^^^^^^^ the trait `Foo` is not implemented for `i32`\n    |\n    = help: see issue #48214\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `i32: Foo` is not satisfied\n-  --> $DIR/feature-gate-trivial_bounds.rs:14:1\n+  --> $DIR/feature-gate-trivial_bounds.rs:14:15\n    |\n LL | trait T where i32: Foo {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `i32`\n+   |               ^^^^^^^^ the trait `Foo` is not implemented for `i32`\n    |\n    = help: see issue #48214\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `i32: Foo` is not satisfied\n-  --> $DIR/feature-gate-trivial_bounds.rs:16:1\n+  --> $DIR/feature-gate-trivial_bounds.rs:16:15\n    |\n LL | union U where i32: Foo { f: i32 }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `i32`\n+   |               ^^^^^^^^ the trait `Foo` is not implemented for `i32`\n    |\n    = help: see issue #48214\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `i32: Foo` is not satisfied\n-  --> $DIR/feature-gate-trivial_bounds.rs:20:1\n+  --> $DIR/feature-gate-trivial_bounds.rs:20:23\n    |\n-LL | / impl Foo for () where i32: Foo {\n-LL | |     fn test(&self) {\n-LL | |         3i32.test();\n-LL | |         Foo::test(&4i32);\n-LL | |         generic_function(5i32);\n-LL | |     }\n-LL | | }\n-   | |_^ the trait `Foo` is not implemented for `i32`\n+LL | impl Foo for () where i32: Foo {\n+   |                       ^^^^^^^^ the trait `Foo` is not implemented for `i32`\n    |\n    = help: see issue #48214\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `i32: Foo` is not satisfied\n-  --> $DIR/feature-gate-trivial_bounds.rs:28:1\n+  --> $DIR/feature-gate-trivial_bounds.rs:28:14\n    |\n-LL | / fn f() where i32: Foo\n-LL | | {\n-LL | |     let s = S;\n-LL | |     3i32.test();\n-LL | |     Foo::test(&4i32);\n-LL | |     generic_function(5i32);\n-LL | | }\n-   | |_^ the trait `Foo` is not implemented for `i32`\n+LL | fn f() where i32: Foo\n+   |              ^^^^^^^^ the trait `Foo` is not implemented for `i32`\n    |\n    = help: see issue #48214\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `String: Neg` is not satisfied\n-  --> $DIR/feature-gate-trivial_bounds.rs:36:1\n+  --> $DIR/feature-gate-trivial_bounds.rs:36:38\n    |\n-LL | / fn use_op(s: String) -> String where String: ::std::ops::Neg<Output=String> {\n-LL | |     -s\n-LL | | }\n-   | |_^ the trait `Neg` is not implemented for `String`\n+LL | fn use_op(s: String) -> String where String: ::std::ops::Neg<Output=String> {\n+   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Neg` is not implemented for `String`\n    |\n    = help: see issue #48214\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error[E0277]: `i32` is not an iterator\n-  --> $DIR/feature-gate-trivial_bounds.rs:40:1\n+  --> $DIR/feature-gate-trivial_bounds.rs:40:20\n    |\n-LL | / fn use_for() where i32: Iterator {\n-LL | |     for _ in 2i32 {}\n-LL | | }\n-   | |_^ `i32` is not an iterator\n+LL | fn use_for() where i32: Iterator {\n+   |                    ^^^^^^^^^^^^^ `i32` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `i32`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = help: see issue #48214\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n-  --> $DIR/feature-gate-trivial_bounds.rs:52:1\n+  --> $DIR/feature-gate-trivial_bounds.rs:52:32\n    |\n LL | struct TwoStrs(str, str) where str: Sized;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                                ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n    = help: see issue #48214\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error[E0277]: the size for values of type `(dyn A + 'static)` cannot be known at compilation time\n-  --> $DIR/feature-gate-trivial_bounds.rs:55:1\n+  --> $DIR/feature-gate-trivial_bounds.rs:55:26\n    |\n-LL | / fn unsized_local() where Dst<dyn A>: Sized {\n-LL | |     let x: Dst<dyn A> = *(Box::new(Dst { x: 1 }) as Box<Dst<dyn A>>);\n-LL | | }\n-   | |_^ doesn't have a size known at compile-time\n+LL | fn unsized_local() where Dst<dyn A>: Sized {\n+   |                          ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Dst<(dyn A + 'static)>`, the trait `Sized` is not implemented for `(dyn A + 'static)`\n note: required because it appears within the type `Dst<(dyn A + 'static)>`\n@@ -116,12 +98,10 @@ LL | struct Dst<X: ?Sized> {\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n-  --> $DIR/feature-gate-trivial_bounds.rs:59:1\n+  --> $DIR/feature-gate-trivial_bounds.rs:59:30\n    |\n-LL | / fn return_str() -> str where str: Sized {\n-LL | |     *\"Sized\".to_string().into_boxed_str()\n-LL | | }\n-   | |_^ doesn't have a size known at compile-time\n+LL | fn return_str() -> str where str: Sized {\n+   |                              ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n    = help: see issue #48214"}]}