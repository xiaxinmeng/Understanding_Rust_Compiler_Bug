{"sha": "7d48e04f316a384967d48a261f1e3b70b5f85a98", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkNDhlMDRmMzE2YTM4NDk2N2Q0OGEyNjFmMWUzYjcwYjVmODVhOTg=", "commit": {"author": {"name": "ivan770", "email": "leshenko.ivan770@gmail.com", "date": "2021-03-14T15:16:29Z"}, "committer": {"name": "ivan770", "email": "leshenko.ivan770@gmail.com", "date": "2021-03-14T17:00:41Z"}, "message": "Introduce StructureNodeKind", "tree": {"sha": "76eb426dcfa87e3b32f3b0efb4f88ca4416c57af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76eb426dcfa87e3b32f3b0efb4f88ca4416c57af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d48e04f316a384967d48a261f1e3b70b5f85a98", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEcPkYW+t8+2SKgl5T2MS9WuTZzE0FAmBOQUEACgkQ2MS9WuTZ\nzE1VMgf+JapKfuFHm2kZ28qDr4nisq/N8qqAObCZZfCSoYbsAqd2emB6m0+2kKcJ\nO7lfd4DtU7j1VPNqj6xdxDpW+v9Tv2ekSza3NM//BBSXxP63ynX7gQaLiDOAbULj\nn5F0ghSHFafuqx7T3HwHDHKyyf12zQEDY+jElHPInmkpDGh+iP+2OGm9QsmHtahu\ngcvPE0Wzud1WyzwGDflPIrAebJvH2Xvou7jahWekoUq+x2yTTcF1auocl6/RrFby\nMvvmG1iTX7K01wl/aEEYhKGg+67EZMGWDkXabsWamjdC0PIsR4L1GAFSwQsT4AMl\nxC8hniz5Bz2XOwL5LXArn3sMIZcCMA==\n=cDLE\n-----END PGP SIGNATURE-----", "payload": "tree 76eb426dcfa87e3b32f3b0efb4f88ca4416c57af\nparent 8602f9573b3a450b6a29c23bb4bfb7bd4108a89c\nauthor ivan770 <leshenko.ivan770@gmail.com> 1615734989 +0200\ncommitter ivan770 <leshenko.ivan770@gmail.com> 1615741241 +0200\n\nIntroduce StructureNodeKind\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d48e04f316a384967d48a261f1e3b70b5f85a98", "html_url": "https://github.com/rust-lang/rust/commit/7d48e04f316a384967d48a261f1e3b70b5f85a98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d48e04f316a384967d48a261f1e3b70b5f85a98/comments", "author": {"login": "ivan770", "id": 14003886, "node_id": "MDQ6VXNlcjE0MDAzODg2", "avatar_url": "https://avatars.githubusercontent.com/u/14003886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivan770", "html_url": "https://github.com/ivan770", "followers_url": "https://api.github.com/users/ivan770/followers", "following_url": "https://api.github.com/users/ivan770/following{/other_user}", "gists_url": "https://api.github.com/users/ivan770/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivan770/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivan770/subscriptions", "organizations_url": "https://api.github.com/users/ivan770/orgs", "repos_url": "https://api.github.com/users/ivan770/repos", "events_url": "https://api.github.com/users/ivan770/events{/privacy}", "received_events_url": "https://api.github.com/users/ivan770/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ivan770", "id": 14003886, "node_id": "MDQ6VXNlcjE0MDAzODg2", "avatar_url": "https://avatars.githubusercontent.com/u/14003886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivan770", "html_url": "https://github.com/ivan770", "followers_url": "https://api.github.com/users/ivan770/followers", "following_url": "https://api.github.com/users/ivan770/following{/other_user}", "gists_url": "https://api.github.com/users/ivan770/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivan770/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivan770/subscriptions", "organizations_url": "https://api.github.com/users/ivan770/orgs", "repos_url": "https://api.github.com/users/ivan770/repos", "events_url": "https://api.github.com/users/ivan770/events{/privacy}", "received_events_url": "https://api.github.com/users/ivan770/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8602f9573b3a450b6a29c23bb4bfb7bd4108a89c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8602f9573b3a450b6a29c23bb4bfb7bd4108a89c", "html_url": "https://github.com/rust-lang/rust/commit/8602f9573b3a450b6a29c23bb4bfb7bd4108a89c"}], "stats": {"total": 167, "additions": 110, "deletions": 57}, "files": [{"sha": "fd317874e04dfcdfdd409f65b299406167165dc4", "filename": "crates/ide/src/annotations.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7d48e04f316a384967d48a261f1e3b70b5f85a98/crates%2Fide%2Fsrc%2Fannotations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d48e04f316a384967d48a261f1e3b70b5f85a98/crates%2Fide%2Fsrc%2Fannotations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fannotations.rs?ref=7d48e04f316a384967d48a261f1e3b70b5f85a98", "patch": "@@ -1,7 +1,7 @@\n use hir::Semantics;\n use ide_db::{\n     base_db::{FileId, FilePosition, FileRange, SourceDatabase},\n-    RootDatabase, SymbolKind,\n+    RootDatabase, StructureNodeKind, SymbolKind,\n };\n use syntax::TextRange;\n \n@@ -80,15 +80,17 @@ pub(crate) fn annotations(\n         .filter(|node| {\n             matches!(\n                 node.kind,\n-                SymbolKind::Trait\n-                    | SymbolKind::Struct\n-                    | SymbolKind::Enum\n-                    | SymbolKind::Union\n-                    | SymbolKind::Const\n+                StructureNodeKind::SymbolKind(SymbolKind::Trait)\n+                    | StructureNodeKind::SymbolKind(SymbolKind::Struct)\n+                    | StructureNodeKind::SymbolKind(SymbolKind::Enum)\n+                    | StructureNodeKind::SymbolKind(SymbolKind::Union)\n+                    | StructureNodeKind::SymbolKind(SymbolKind::Const)\n             )\n         })\n         .for_each(|node| {\n-            if config.annotate_impls && node.kind != SymbolKind::Const {\n+            if config.annotate_impls\n+                && node.kind != StructureNodeKind::SymbolKind(SymbolKind::Const)\n+            {\n                 annotations.push(Annotation {\n                     range: node.node_range,\n                     kind: AnnotationKind::HasImpls {"}, {"sha": "c21b3fa770eda898f72c102338c16ba40db393eb", "filename": "crates/ide/src/file_structure.rs", "status": "modified", "additions": 85, "deletions": 41, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/7d48e04f316a384967d48a261f1e3b70b5f85a98/crates%2Fide%2Fsrc%2Ffile_structure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d48e04f316a384967d48a261f1e3b70b5f85a98/crates%2Fide%2Fsrc%2Ffile_structure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffile_structure.rs?ref=7d48e04f316a384967d48a261f1e3b70b5f85a98", "patch": "@@ -1,4 +1,4 @@\n-use ide_db::SymbolKind;\n+use ide_db::{StructureNodeKind, SymbolKind};\n use syntax::{\n     ast::{self, AttrsOwner, GenericParamsOwner, NameOwner},\n     match_ast, AstNode, AstToken, NodeOrToken, SourceFile, SyntaxNode, SyntaxToken, TextRange,\n@@ -11,7 +11,7 @@ pub struct StructureNode {\n     pub label: String,\n     pub navigation_range: TextRange,\n     pub node_range: TextRange,\n-    pub kind: SymbolKind,\n+    pub kind: StructureNodeKind,\n     pub detail: Option<String>,\n     pub deprecated: bool,\n }\n@@ -65,14 +65,14 @@ pub(crate) fn file_structure(file: &SourceFile) -> Vec<StructureNode> {\n }\n \n fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n-    fn decl<N: NameOwner + AttrsOwner>(node: N, kind: SymbolKind) -> Option<StructureNode> {\n+    fn decl<N: NameOwner + AttrsOwner>(node: N, kind: StructureNodeKind) -> Option<StructureNode> {\n         decl_with_detail(&node, None, kind)\n     }\n \n     fn decl_with_type_ref<N: NameOwner + AttrsOwner>(\n         node: &N,\n         type_ref: Option<ast::Type>,\n-        kind: SymbolKind,\n+        kind: StructureNodeKind,\n     ) -> Option<StructureNode> {\n         let detail = type_ref.map(|type_ref| {\n             let mut detail = String::new();\n@@ -85,7 +85,7 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n     fn decl_with_detail<N: NameOwner + AttrsOwner>(\n         node: &N,\n         detail: Option<String>,\n-        kind: SymbolKind,\n+        kind: StructureNodeKind,\n     ) -> Option<StructureNode> {\n         let name = node.name()?;\n \n@@ -133,18 +133,18 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n                     collapse_ws(ret_type.syntax(), &mut detail);\n                 }\n \n-                decl_with_detail(&it, Some(detail), SymbolKind::Function)\n+                decl_with_detail(&it, Some(detail), StructureNodeKind::SymbolKind(SymbolKind::Function))\n             },\n-            ast::Struct(it) => decl(it, SymbolKind::Struct),\n-            ast::Union(it) => decl(it, SymbolKind::Union),\n-            ast::Enum(it) => decl(it, SymbolKind::Enum),\n-            ast::Variant(it) => decl(it, SymbolKind::Variant),\n-            ast::Trait(it) => decl(it, SymbolKind::Trait),\n-            ast::Module(it) => decl(it, SymbolKind::Module),\n-            ast::TypeAlias(it) => decl_with_type_ref(&it, it.ty(), SymbolKind::TypeAlias),\n-            ast::RecordField(it) => decl_with_type_ref(&it, it.ty(), SymbolKind::Field),\n-            ast::Const(it) => decl_with_type_ref(&it, it.ty(), SymbolKind::Const),\n-            ast::Static(it) => decl_with_type_ref(&it, it.ty(), SymbolKind::Static),\n+            ast::Struct(it) => decl(it, StructureNodeKind::SymbolKind(SymbolKind::Struct)),\n+            ast::Union(it) => decl(it, StructureNodeKind::SymbolKind(SymbolKind::Union)),\n+            ast::Enum(it) => decl(it, StructureNodeKind::SymbolKind(SymbolKind::Enum)),\n+            ast::Variant(it) => decl(it, StructureNodeKind::SymbolKind(SymbolKind::Variant)),\n+            ast::Trait(it) => decl(it, StructureNodeKind::SymbolKind(SymbolKind::Trait)),\n+            ast::Module(it) => decl(it, StructureNodeKind::SymbolKind(SymbolKind::Module)),\n+            ast::TypeAlias(it) => decl_with_type_ref(&it, it.ty(), StructureNodeKind::SymbolKind(SymbolKind::TypeAlias)),\n+            ast::RecordField(it) => decl_with_type_ref(&it, it.ty(), StructureNodeKind::SymbolKind(SymbolKind::Field)),\n+            ast::Const(it) => decl_with_type_ref(&it, it.ty(), StructureNodeKind::SymbolKind(SymbolKind::Const)),\n+            ast::Static(it) => decl_with_type_ref(&it, it.ty(), StructureNodeKind::SymbolKind(SymbolKind::Static)),\n             ast::Impl(it) => {\n                 let target_type = it.self_ty()?;\n                 let target_trait = it.trait_();\n@@ -160,13 +160,13 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n                     label,\n                     navigation_range: target_type.syntax().text_range(),\n                     node_range: it.syntax().text_range(),\n-                    kind: SymbolKind::Impl,\n+                    kind: StructureNodeKind::SymbolKind(SymbolKind::Impl),\n                     detail: None,\n                     deprecated: false,\n                 };\n                 Some(node)\n             },\n-            ast::MacroRules(it) => decl(it, SymbolKind::Macro),\n+            ast::MacroRules(it) => decl(it, StructureNodeKind::SymbolKind(SymbolKind::Macro)),\n             _ => None,\n         }\n     }\n@@ -182,7 +182,7 @@ fn structure_token(token: SyntaxToken) -> Option<StructureNode> {\n                 label: region_name.to_string(),\n                 navigation_range: comment.syntax().text_range(),\n                 node_range: comment.syntax().text_range(),\n-                kind: SymbolKind::Region,\n+                kind: StructureNodeKind::Region,\n                 detail: None,\n                 deprecated: false,\n             });\n@@ -268,7 +268,9 @@ fn g() {}\n                         label: \"Foo\",\n                         navigation_range: 8..11,\n                         node_range: 1..26,\n-                        kind: Struct,\n+                        kind: SymbolKind(\n+                            Struct,\n+                        ),\n                         detail: None,\n                         deprecated: false,\n                     },\n@@ -279,7 +281,9 @@ fn g() {}\n                         label: \"x\",\n                         navigation_range: 18..19,\n                         node_range: 18..24,\n-                        kind: Field,\n+                        kind: SymbolKind(\n+                            Field,\n+                        ),\n                         detail: Some(\n                             \"i32\",\n                         ),\n@@ -290,7 +294,9 @@ fn g() {}\n                         label: \"m\",\n                         navigation_range: 32..33,\n                         node_range: 28..158,\n-                        kind: Module,\n+                        kind: SymbolKind(\n+                            Module,\n+                        ),\n                         detail: None,\n                         deprecated: false,\n                     },\n@@ -301,7 +307,9 @@ fn g() {}\n                         label: \"bar1\",\n                         navigation_range: 43..47,\n                         node_range: 40..52,\n-                        kind: Function,\n+                        kind: SymbolKind(\n+                            Function,\n+                        ),\n                         detail: Some(\n                             \"fn()\",\n                         ),\n@@ -314,7 +322,9 @@ fn g() {}\n                         label: \"bar2\",\n                         navigation_range: 60..64,\n                         node_range: 57..81,\n-                        kind: Function,\n+                        kind: SymbolKind(\n+                            Function,\n+                        ),\n                         detail: Some(\n                             \"fn<T>(t: T) -> T\",\n                         ),\n@@ -327,7 +337,9 @@ fn g() {}\n                         label: \"bar3\",\n                         navigation_range: 89..93,\n                         node_range: 86..156,\n-                        kind: Function,\n+                        kind: SymbolKind(\n+                            Function,\n+                        ),\n                         detail: Some(\n                             \"fn<A, B>(a: A, b: B) -> Vec< u32 >\",\n                         ),\n@@ -338,7 +350,9 @@ fn g() {}\n                         label: \"E\",\n                         navigation_range: 165..166,\n                         node_range: 160..180,\n-                        kind: Enum,\n+                        kind: SymbolKind(\n+                            Enum,\n+                        ),\n                         detail: None,\n                         deprecated: false,\n                     },\n@@ -349,7 +363,9 @@ fn g() {}\n                         label: \"X\",\n                         navigation_range: 169..170,\n                         node_range: 169..170,\n-                        kind: Variant,\n+                        kind: SymbolKind(\n+                            Variant,\n+                        ),\n                         detail: None,\n                         deprecated: false,\n                     },\n@@ -360,7 +376,9 @@ fn g() {}\n                         label: \"Y\",\n                         navigation_range: 172..173,\n                         node_range: 172..178,\n-                        kind: Variant,\n+                        kind: SymbolKind(\n+                            Variant,\n+                        ),\n                         detail: None,\n                         deprecated: false,\n                     },\n@@ -369,7 +387,9 @@ fn g() {}\n                         label: \"T\",\n                         navigation_range: 186..187,\n                         node_range: 181..193,\n-                        kind: TypeAlias,\n+                        kind: SymbolKind(\n+                            TypeAlias,\n+                        ),\n                         detail: Some(\n                             \"()\",\n                         ),\n@@ -380,7 +400,9 @@ fn g() {}\n                         label: \"S\",\n                         navigation_range: 201..202,\n                         node_range: 194..213,\n-                        kind: Static,\n+                        kind: SymbolKind(\n+                            Static,\n+                        ),\n                         detail: Some(\n                             \"i32\",\n                         ),\n@@ -391,7 +413,9 @@ fn g() {}\n                         label: \"C\",\n                         navigation_range: 220..221,\n                         node_range: 214..232,\n-                        kind: Const,\n+                        kind: SymbolKind(\n+                            Const,\n+                        ),\n                         detail: Some(\n                             \"i32\",\n                         ),\n@@ -402,7 +426,9 @@ fn g() {}\n                         label: \"impl E\",\n                         navigation_range: 239..240,\n                         node_range: 234..243,\n-                        kind: Impl,\n+                        kind: SymbolKind(\n+                            Impl,\n+                        ),\n                         detail: None,\n                         deprecated: false,\n                     },\n@@ -411,7 +437,9 @@ fn g() {}\n                         label: \"impl fmt::Debug for E\",\n                         navigation_range: 265..266,\n                         node_range: 245..269,\n-                        kind: Impl,\n+                        kind: SymbolKind(\n+                            Impl,\n+                        ),\n                         detail: None,\n                         deprecated: false,\n                     },\n@@ -420,7 +448,9 @@ fn g() {}\n                         label: \"mc\",\n                         navigation_range: 284..286,\n                         node_range: 271..303,\n-                        kind: Macro,\n+                        kind: SymbolKind(\n+                            Macro,\n+                        ),\n                         detail: None,\n                         deprecated: false,\n                     },\n@@ -429,7 +459,9 @@ fn g() {}\n                         label: \"mcexp\",\n                         navigation_range: 334..339,\n                         node_range: 305..356,\n-                        kind: Macro,\n+                        kind: SymbolKind(\n+                            Macro,\n+                        ),\n                         detail: None,\n                         deprecated: false,\n                     },\n@@ -438,7 +470,9 @@ fn g() {}\n                         label: \"mcexp\",\n                         navigation_range: 387..392,\n                         node_range: 358..409,\n-                        kind: Macro,\n+                        kind: SymbolKind(\n+                            Macro,\n+                        ),\n                         detail: None,\n                         deprecated: false,\n                     },\n@@ -447,7 +481,9 @@ fn g() {}\n                         label: \"obsolete\",\n                         navigation_range: 428..436,\n                         node_range: 411..441,\n-                        kind: Function,\n+                        kind: SymbolKind(\n+                            Function,\n+                        ),\n                         detail: Some(\n                             \"fn()\",\n                         ),\n@@ -458,7 +494,9 @@ fn g() {}\n                         label: \"very_obsolete\",\n                         navigation_range: 481..494,\n                         node_range: 443..499,\n-                        kind: Function,\n+                        kind: SymbolKind(\n+                            Function,\n+                        ),\n                         detail: Some(\n                             \"fn()\",\n                         ),\n@@ -478,7 +516,9 @@ fn g() {}\n                         label: \"m\",\n                         navigation_range: 568..569,\n                         node_range: 543..606,\n-                        kind: Module,\n+                        kind: SymbolKind(\n+                            Module,\n+                        ),\n                         detail: None,\n                         deprecated: false,\n                     },\n@@ -500,7 +540,9 @@ fn g() {}\n                         label: \"f\",\n                         navigation_range: 575..576,\n                         node_range: 572..581,\n-                        kind: Function,\n+                        kind: SymbolKind(\n+                            Function,\n+                        ),\n                         detail: Some(\n                             \"fn()\",\n                         ),\n@@ -513,7 +555,9 @@ fn g() {}\n                         label: \"g\",\n                         navigation_range: 598..599,\n                         node_range: 582..604,\n-                        kind: Function,\n+                        kind: SymbolKind(\n+                            Function,\n+                        ),\n                         detail: Some(\n                             \"fn()\",\n                         ),"}, {"sha": "3c02fdb1151fb24707be8bef662cac479803e551", "filename": "crates/ide/src/syntax_highlighting/tags.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d48e04f316a384967d48a261f1e3b70b5f85a98/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d48e04f316a384967d48a261f1e3b70b5f85a98/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs?ref=7d48e04f316a384967d48a261f1e3b70b5f85a98", "patch": "@@ -107,7 +107,6 @@ impl HlTag {\n                 SymbolKind::ValueParam => \"value_param\",\n                 SymbolKind::SelfParam => \"self_keyword\",\n                 SymbolKind::Impl => \"self_type\",\n-                SymbolKind::Region => \"region\",\n             },\n             HlTag::Attribute => \"attribute\",\n             HlTag::BoolLiteral => \"bool_literal\","}, {"sha": "9a4b5217a015a6ab0e2dd87428e0d537b55ed374", "filename": "crates/ide_completion/src/item.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d48e04f316a384967d48a261f1e3b70b5f85a98/crates%2Fide_completion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d48e04f316a384967d48a261f1e3b70b5f85a98/crates%2Fide_completion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fitem.rs?ref=7d48e04f316a384967d48a261f1e3b70b5f85a98", "patch": "@@ -225,7 +225,6 @@ impl CompletionItemKind {\n                 SymbolKind::Local => \"lc\",\n                 SymbolKind::Macro => \"ma\",\n                 SymbolKind::Module => \"md\",\n-                SymbolKind::Region => \"rn\",\n                 SymbolKind::SelfParam => \"sp\",\n                 SymbolKind::Static => \"sc\",\n                 SymbolKind::Struct => \"st\","}, {"sha": "e8cafba433e9a44ce61bc384730fa925c03b8186", "filename": "crates/ide_db/src/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7d48e04f316a384967d48a261f1e3b70b5f85a98/crates%2Fide_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d48e04f316a384967d48a261f1e3b70b5f85a98/crates%2Fide_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Flib.rs?ref=7d48e04f316a384967d48a261f1e3b70b5f85a98", "patch": "@@ -135,6 +135,12 @@ fn line_index(db: &dyn LineIndexDatabase, file_id: FileId) -> Arc<LineIndex> {\n     Arc::new(LineIndex::new(&*text))\n }\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]\n+pub enum StructureNodeKind {\n+    SymbolKind(SymbolKind),\n+    Region,\n+}\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]\n pub enum SymbolKind {\n     Const,\n@@ -148,7 +154,6 @@ pub enum SymbolKind {\n     Local,\n     Macro,\n     Module,\n-    Region,\n     SelfParam,\n     Static,\n     Struct,"}, {"sha": "3ff8bd940cf5325edae91173c7729776fd79825c", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d48e04f316a384967d48a261f1e3b70b5f85a98/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d48e04f316a384967d48a261f1e3b70b5f85a98/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=7d48e04f316a384967d48a261f1e3b70b5f85a98", "patch": "@@ -11,7 +11,7 @@ use ide::{\n     AnnotationConfig, FileId, FilePosition, FileRange, HoverAction, HoverGotoTypeData, Query,\n     RangeInfo, Runnable, RunnableKind, SearchScope, SourceChange, TextEdit,\n };\n-use ide_db::SymbolKind;\n+use ide_db::{StructureNodeKind, SymbolKind};\n use itertools::Itertools;\n use lsp_server::ErrorCode;\n use lsp_types::{\n@@ -289,7 +289,7 @@ pub(crate) fn handle_document_symbol(\n         let doc_symbol = lsp_types::DocumentSymbol {\n             name: symbol.label,\n             detail: symbol.detail,\n-            kind: to_proto::symbol_kind(symbol.kind),\n+            kind: to_proto::structure_node_kind(symbol.kind),\n             tags: Some(tags),\n             deprecated: Some(symbol.deprecated),\n             range: to_proto::range(&line_index, symbol.node_range),"}, {"sha": "ab742a17ceb2d6075851f14b786edba4aa498555", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7d48e04f316a384967d48a261f1e3b70b5f85a98/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d48e04f316a384967d48a261f1e3b70b5f85a98/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=7d48e04f316a384967d48a261f1e3b70b5f85a98", "patch": "@@ -11,7 +11,7 @@ use ide::{\n     Markup, NavigationTarget, ReferenceAccess, RenameError, Runnable, Severity, SourceChange,\n     TextEdit, TextRange, TextSize,\n };\n-use ide_db::SymbolKind;\n+use ide_db::{StructureNodeKind, SymbolKind};\n use itertools::Itertools;\n use serde_json::to_value;\n \n@@ -60,7 +60,13 @@ pub(crate) fn symbol_kind(symbol_kind: SymbolKind) -> lsp_types::SymbolKind {\n         | SymbolKind::ValueParam\n         | SymbolKind::Label => lsp_types::SymbolKind::Variable,\n         SymbolKind::Union => lsp_types::SymbolKind::Struct,\n-        SymbolKind::Region => lsp_types::SymbolKind::Namespace,\n+    }\n+}\n+\n+pub(crate) fn structure_node_kind(kind: StructureNodeKind) -> lsp_types::SymbolKind {\n+    match kind {\n+        StructureNodeKind::SymbolKind(symbol) => symbol_kind(symbol),\n+        StructureNodeKind::Region => lsp_types::SymbolKind::Namespace,\n     }\n }\n \n@@ -118,7 +124,6 @@ pub(crate) fn completion_item_kind(\n             SymbolKind::Local => lsp_types::CompletionItemKind::Variable,\n             SymbolKind::Macro => lsp_types::CompletionItemKind::Method,\n             SymbolKind::Module => lsp_types::CompletionItemKind::Module,\n-            SymbolKind::Region => lsp_types::CompletionItemKind::Keyword,\n             SymbolKind::SelfParam => lsp_types::CompletionItemKind::Value,\n             SymbolKind::Static => lsp_types::CompletionItemKind::Value,\n             SymbolKind::Struct => lsp_types::CompletionItemKind::Struct,\n@@ -430,7 +435,6 @@ fn semantic_token_type_and_modifiers(\n             SymbolKind::TypeAlias => semantic_tokens::TYPE_ALIAS,\n             SymbolKind::Trait => lsp_types::SemanticTokenType::INTERFACE,\n             SymbolKind::Macro => lsp_types::SemanticTokenType::MACRO,\n-            SymbolKind::Region => lsp_types::SemanticTokenType::NAMESPACE,\n         },\n         HlTag::BuiltinType => semantic_tokens::BUILTIN_TYPE,\n         HlTag::None => semantic_tokens::GENERIC,"}]}