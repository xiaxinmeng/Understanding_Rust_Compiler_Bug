{"sha": "077592a12fd982de3e69572a4c738dd4468617f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3NzU5MmExMmZkOTgyZGUzZTY5NTcyYTRjNzM4ZGQ0NDY4NjE3Zjk=", "commit": {"author": {"name": "Phil Ellison", "email": "phil.j.ellison@gmail.com", "date": "2020-12-28T18:29:58Z"}, "committer": {"name": "Phil Ellison", "email": "phil.j.ellison@gmail.com", "date": "2020-12-28T18:29:58Z"}, "message": "Initial implementation of view-hir command", "tree": {"sha": "24bc738d02fb8c88ef662f85e4a0c9a4c8ab0fac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24bc738d02fb8c88ef662f85e4a0c9a4c8ab0fac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/077592a12fd982de3e69572a4c738dd4468617f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/077592a12fd982de3e69572a4c738dd4468617f9", "html_url": "https://github.com/rust-lang/rust/commit/077592a12fd982de3e69572a4c738dd4468617f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/077592a12fd982de3e69572a4c738dd4468617f9/comments", "author": {"login": "theotherphil", "id": 1974256, "node_id": "MDQ6VXNlcjE5NzQyNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1974256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theotherphil", "html_url": "https://github.com/theotherphil", "followers_url": "https://api.github.com/users/theotherphil/followers", "following_url": "https://api.github.com/users/theotherphil/following{/other_user}", "gists_url": "https://api.github.com/users/theotherphil/gists{/gist_id}", "starred_url": "https://api.github.com/users/theotherphil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theotherphil/subscriptions", "organizations_url": "https://api.github.com/users/theotherphil/orgs", "repos_url": "https://api.github.com/users/theotherphil/repos", "events_url": "https://api.github.com/users/theotherphil/events{/privacy}", "received_events_url": "https://api.github.com/users/theotherphil/received_events", "type": "User", "site_admin": false}, "committer": {"login": "theotherphil", "id": 1974256, "node_id": "MDQ6VXNlcjE5NzQyNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1974256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theotherphil", "html_url": "https://github.com/theotherphil", "followers_url": "https://api.github.com/users/theotherphil/followers", "following_url": "https://api.github.com/users/theotherphil/following{/other_user}", "gists_url": "https://api.github.com/users/theotherphil/gists{/gist_id}", "starred_url": "https://api.github.com/users/theotherphil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theotherphil/subscriptions", "organizations_url": "https://api.github.com/users/theotherphil/orgs", "repos_url": "https://api.github.com/users/theotherphil/repos", "events_url": "https://api.github.com/users/theotherphil/events{/privacy}", "received_events_url": "https://api.github.com/users/theotherphil/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d530756ed7ba175ec32ff71247072798dc9a748", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d530756ed7ba175ec32ff71247072798dc9a748", "html_url": "https://github.com/rust-lang/rust/commit/1d530756ed7ba175ec32ff71247072798dc9a748"}], "stats": {"total": 146, "additions": 145, "deletions": 1}, "files": [{"sha": "9b78944c6eecf5b40db615ac491e4edea8c270d5", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/077592a12fd982de3e69572a4c738dd4468617f9/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077592a12fd982de3e69572a4c738dd4468617f9/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=077592a12fd982de3e69572a4c738dd4468617f9", "patch": "@@ -729,7 +729,8 @@ impl DefWithBody {\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct Function {\n-    pub(crate) id: FunctionId,\n+    // DO NOT MERGE: this was previously pub(crate)\n+    pub id: FunctionId,\n }\n \n impl Function {"}, {"sha": "25c2047ca65c9cf20a7c5cb84ad13336a76e120d", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/077592a12fd982de3e69572a4c738dd4468617f9/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077592a12fd982de3e69572a4c738dd4468617f9/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=077592a12fd982de3e69572a4c738dd4468617f9", "patch": "@@ -31,6 +31,7 @@ mod folding_ranges;\n mod goto_definition;\n mod goto_implementation;\n mod goto_type_definition;\n+mod view_hir;\n mod hover;\n mod inlay_hints;\n mod join_lines;\n@@ -271,6 +272,10 @@ impl Analysis {\n         self.with_db(|db| syntax_tree::syntax_tree(&db, file_id, text_range))\n     }\n \n+    pub fn view_hir(&self, position: FilePosition) -> Cancelable<String> {\n+        self.with_db(|db| view_hir::view_hir(&db, position))\n+    }\n+\n     pub fn expand_macro(&self, position: FilePosition) -> Cancelable<Option<ExpandedMacro>> {\n         self.with_db(|db| expand_macro::expand_macro(db, position))\n     }"}, {"sha": "e48f2cfe02675522679c2dbf5443668342200efe", "filename": "crates/ide/src/view_hir.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/077592a12fd982de3e69572a4c738dd4468617f9/crates%2Fide%2Fsrc%2Fview_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077592a12fd982de3e69572a4c738dd4468617f9/crates%2Fide%2Fsrc%2Fview_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fview_hir.rs?ref=077592a12fd982de3e69572a4c738dd4468617f9", "patch": "@@ -0,0 +1,39 @@\n+use hir::{Function, Semantics};\n+use hir::db::DefDatabase;\n+use ide_db::base_db::FilePosition;\n+use ide_db::RootDatabase;\n+use syntax::{AstNode, algo::find_node_at_offset, ast};\n+use std::fmt::Write;\n+\n+// Feature: View hir\n+//\n+// |===\n+// | Editor  | Action Name\n+//\n+// | VS Code | **Rust Analyzer: View Hir**\n+// |===\n+pub(crate) fn view_hir(db: &RootDatabase, position: FilePosition) -> String {\n+    body_hir(db, position).unwrap_or(\"Not inside a function body\".to_string())\n+}\n+\n+fn body_hir(db: &RootDatabase, position: FilePosition) -> Option<String> {\n+    let sema = Semantics::new(db);\n+    let source_file = sema.parse(position.file_id);\n+\n+    let function = find_node_at_offset::<ast::Fn>(\n+        source_file.syntax(),\n+        position.offset,\n+    )?;\n+\n+    let function: Function = sema.to_def(&function)?;\n+    let body = db.body(function.id.into());\n+\n+    let mut result = String::new();\n+    writeln!(&mut result, \"== Body expressions ==\").ok()?;\n+\n+    for (id, expr) in body.exprs.iter() {\n+        writeln!(&mut result, \"{:?}: {:?}\", id, expr).ok()?;\n+    }\n+\n+    Some(result)\n+}\n\\ No newline at end of file"}, {"sha": "85f1f81ad7769faf668428ab528a5285f1e3f0e5", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/077592a12fd982de3e69572a4c738dd4468617f9/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077592a12fd982de3e69572a4c738dd4468617f9/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=077592a12fd982de3e69572a4c738dd4468617f9", "patch": "@@ -104,6 +104,16 @@ pub(crate) fn handle_syntax_tree(\n     Ok(res)\n }\n \n+pub(crate) fn handle_view_hir(\n+    snap: GlobalStateSnapshot,\n+    params: lsp_types::TextDocumentPositionParams,\n+) -> Result<String> {\n+    let _p = profile::span(\"handle_view_hir\");\n+    let position = from_proto::file_position(&snap, params)?;\n+    let res = snap.analysis.view_hir(position)?;\n+    Ok(res)\n+}\n+\n pub(crate) fn handle_expand_macro(\n     snap: GlobalStateSnapshot,\n     params: lsp_ext::ExpandMacroParams,"}, {"sha": "a85978737b3a346360878db300f1316521c48dc4", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/077592a12fd982de3e69572a4c738dd4468617f9/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077592a12fd982de3e69572a4c738dd4468617f9/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=077592a12fd982de3e69572a4c738dd4468617f9", "patch": "@@ -53,6 +53,14 @@ pub struct SyntaxTreeParams {\n     pub range: Option<Range>,\n }\n \n+pub enum ViewHir {}\n+\n+impl Request for ViewHir {\n+    type Params = lsp_types::TextDocumentPositionParams;\n+    type Result = String;\n+    const METHOD: &'static str = \"rust-analyzer/viewHir\";\n+}\n+\n pub enum ExpandMacro {}\n \n impl Request for ExpandMacro {"}, {"sha": "8eca79f7ee40c239eb3283b73c0ba90df9be941e", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/077592a12fd982de3e69572a4c738dd4468617f9/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077592a12fd982de3e69572a4c738dd4468617f9/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=077592a12fd982de3e69572a4c738dd4468617f9", "patch": "@@ -443,6 +443,7 @@ impl GlobalState {\n             .on_sync::<lsp_ext::MemoryUsage>(|s, p| handlers::handle_memory_usage(s, p))?\n             .on::<lsp_ext::AnalyzerStatus>(handlers::handle_analyzer_status)\n             .on::<lsp_ext::SyntaxTree>(handlers::handle_syntax_tree)\n+            .on::<lsp_ext::ViewHir>(handlers::handle_view_hir)\n             .on::<lsp_ext::ExpandMacro>(handlers::handle_expand_macro)\n             .on::<lsp_ext::ParentModule>(handlers::handle_parent_module)\n             .on::<lsp_ext::Runnables>(handlers::handle_runnables)"}, {"sha": "4bae5d647b60c007587120353e7be2df0ad093ca", "filename": "editors/code/package.json", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/077592a12fd982de3e69572a4c738dd4468617f9/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/077592a12fd982de3e69572a4c738dd4468617f9/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=077592a12fd982de3e69572a4c738dd4468617f9", "patch": "@@ -103,6 +103,11 @@\n                 \"title\": \"Show Syntax Tree\",\n                 \"category\": \"Rust Analyzer\"\n             },\n+            {\n+                \"command\": \"rust-analyzer.viewHir\",\n+                \"title\": \"View Hir\",\n+                \"category\": \"Rust Analyzer\"\n+            },\n             {\n                 \"command\": \"rust-analyzer.expandMacro\",\n                 \"title\": \"Expand macro recursively\",\n@@ -998,6 +1003,10 @@\n                     \"command\": \"rust-analyzer.syntaxTree\",\n                     \"when\": \"inRustProject\"\n                 },\n+                {\n+                    \"command\": \"rust-analyzer.viewHir\",\n+                    \"when\": \"inRustProject\"\n+                },\n                 {\n                     \"command\": \"rust-analyzer.expandMacro\",\n                     \"when\": \"inRustProject\""}, {"sha": "21b0c27f30d4ccfd658b963594bd8b76885e83ce", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/077592a12fd982de3e69572a4c738dd4468617f9/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/077592a12fd982de3e69572a4c738dd4468617f9/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=077592a12fd982de3e69572a4c738dd4468617f9", "patch": "@@ -340,6 +340,75 @@ export function syntaxTree(ctx: Ctx): Cmd {\n     };\n }\n \n+// Opens the virtual file that will show hir\n+//\n+// The contents of the file come from the `TextDocumentContentProvider`\n+export function viewHir(ctx: Ctx): Cmd {\n+    const tdcp = new class implements vscode.TextDocumentContentProvider {\n+        readonly uri = vscode.Uri.parse('rust-analyzer://viewHir/hir.txt');\n+        readonly eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n+        constructor() {\n+            vscode.workspace.onDidChangeTextDocument(this.onDidChangeTextDocument, this, ctx.subscriptions);\n+            vscode.window.onDidChangeActiveTextEditor(this.onDidChangeActiveTextEditor, this, ctx.subscriptions);\n+        }\n+\n+        private onDidChangeTextDocument(event: vscode.TextDocumentChangeEvent) {\n+            if (isRustDocument(event.document)) {\n+                // We need to order this after language server updates, but there's no API for that.\n+                // Hence, good old sleep().\n+                void sleep(10).then(() => this.eventEmitter.fire(this.uri));\n+            }\n+        }\n+        private onDidChangeActiveTextEditor(editor: vscode.TextEditor | undefined) {\n+            if (editor && isRustEditor(editor)) {\n+                this.eventEmitter.fire(this.uri);\n+            }\n+        }\n+\n+        provideTextDocumentContent(_uri: vscode.Uri, ct: vscode.CancellationToken): vscode.ProviderResult<string> {\n+            const rustEditor = ctx.activeRustEditor;\n+            const client = ctx.client;\n+            if (!rustEditor || !client) return '';\n+\n+            const params = {\n+                textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(rustEditor.document),\n+                position: client.code2ProtocolConverter.asPosition(\n+                    rustEditor.selection.active,\n+                ),\n+            };\n+            return client.sendRequest(ra.viewHir, params, ct);\n+        }\n+\n+        get onDidChange(): vscode.Event<vscode.Uri> {\n+            return this.eventEmitter.event;\n+        }\n+    };\n+\n+    void new AstInspector(ctx);\n+\n+    ctx.pushCleanup(vscode.workspace.registerTextDocumentContentProvider('rust-analyzer', tdcp));\n+    ctx.pushCleanup(vscode.languages.setLanguageConfiguration(\"ra_syntax_tree\", {\n+        brackets: [[\"[\", \")\"]],\n+    }));\n+\n+    return async () => {\n+        const editor = vscode.window.activeTextEditor;\n+        const rangeEnabled = !!editor && !editor.selection.isEmpty;\n+\n+        const uri = rangeEnabled\n+            ? vscode.Uri.parse(`${tdcp.uri.toString()}?range=true`)\n+            : tdcp.uri;\n+\n+        const document = await vscode.workspace.openTextDocument(uri);\n+\n+        tdcp.eventEmitter.fire(uri);\n+\n+        void await vscode.window.showTextDocument(document, {\n+            viewColumn: vscode.ViewColumn.Two,\n+            preserveFocus: true\n+        });\n+    };\n+}\n \n // Opens the virtual file that will show the syntax tree\n //"}, {"sha": "d21a3db862de7d02d3d814caf377769ebe53a23d", "filename": "editors/code/src/lsp_ext.ts", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/077592a12fd982de3e69572a4c738dd4468617f9/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "raw_url": "https://github.com/rust-lang/rust/raw/077592a12fd982de3e69572a4c738dd4468617f9/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Flsp_ext.ts?ref=077592a12fd982de3e69572a4c738dd4468617f9", "patch": "@@ -24,6 +24,7 @@ export interface SyntaxTreeParams {\n }\n export const syntaxTree = new lc.RequestType<SyntaxTreeParams, string, void>(\"rust-analyzer/syntaxTree\");\n \n+export const viewHir = new lc.RequestType<lc.TextDocumentPositionParams, string, void>(\"rust-analyzer/viewHir\");\n \n export interface ExpandMacroParams {\n     textDocument: lc.TextDocumentIdentifier;"}, {"sha": "60907dfd40d2ad12bb38bda41c6f678b40f89a72", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/077592a12fd982de3e69572a4c738dd4468617f9/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/077592a12fd982de3e69572a4c738dd4468617f9/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=077592a12fd982de3e69572a4c738dd4468617f9", "patch": "@@ -105,6 +105,7 @@ async function tryActivate(context: vscode.ExtensionContext) {\n     ctx.registerCommand('joinLines', commands.joinLines);\n     ctx.registerCommand('parentModule', commands.parentModule);\n     ctx.registerCommand('syntaxTree', commands.syntaxTree);\n+    ctx.registerCommand('viewHir', commands.viewHir);\n     ctx.registerCommand('expandMacro', commands.expandMacro);\n     ctx.registerCommand('run', commands.run);\n     ctx.registerCommand('debug', commands.debug);"}]}