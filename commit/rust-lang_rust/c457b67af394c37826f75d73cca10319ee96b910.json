{"sha": "c457b67af394c37826f75d73cca10319ee96b910", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0NTdiNjdhZjM5NGMzNzgyNmY3NWQ3M2NjYTEwMzE5ZWU5NmI5MTA=", "commit": {"author": {"name": "Mohsen Zohrevandi", "email": "mohsen.zohrevandi@fortanix.com", "date": "2020-07-01T19:45:11Z"}, "committer": {"name": "Mohsen Zohrevandi", "email": "mohsen.zohrevandi@fortanix.com", "date": "2020-07-01T19:45:11Z"}, "message": "Remove unnecessary check in SGX wait usercall", "tree": {"sha": "08b66188cae566fabb776611257461a6c681de1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08b66188cae566fabb776611257461a6c681de1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c457b67af394c37826f75d73cca10319ee96b910", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c457b67af394c37826f75d73cca10319ee96b910", "html_url": "https://github.com/rust-lang/rust/commit/c457b67af394c37826f75d73cca10319ee96b910", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c457b67af394c37826f75d73cca10319ee96b910/comments", "author": {"login": "mzohreva", "id": 1142455, "node_id": "MDQ6VXNlcjExNDI0NTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1142455?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mzohreva", "html_url": "https://github.com/mzohreva", "followers_url": "https://api.github.com/users/mzohreva/followers", "following_url": "https://api.github.com/users/mzohreva/following{/other_user}", "gists_url": "https://api.github.com/users/mzohreva/gists{/gist_id}", "starred_url": "https://api.github.com/users/mzohreva/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mzohreva/subscriptions", "organizations_url": "https://api.github.com/users/mzohreva/orgs", "repos_url": "https://api.github.com/users/mzohreva/repos", "events_url": "https://api.github.com/users/mzohreva/events{/privacy}", "received_events_url": "https://api.github.com/users/mzohreva/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mzohreva", "id": 1142455, "node_id": "MDQ6VXNlcjExNDI0NTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1142455?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mzohreva", "html_url": "https://github.com/mzohreva", "followers_url": "https://api.github.com/users/mzohreva/followers", "following_url": "https://api.github.com/users/mzohreva/following{/other_user}", "gists_url": "https://api.github.com/users/mzohreva/gists{/gist_id}", "starred_url": "https://api.github.com/users/mzohreva/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mzohreva/subscriptions", "organizations_url": "https://api.github.com/users/mzohreva/orgs", "repos_url": "https://api.github.com/users/mzohreva/repos", "events_url": "https://api.github.com/users/mzohreva/events{/privacy}", "received_events_url": "https://api.github.com/users/mzohreva/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3442d23c1a12f1f01a0e07b6bec72b58998f49ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/3442d23c1a12f1f01a0e07b6bec72b58998f49ef", "html_url": "https://github.com/rust-lang/rust/commit/3442d23c1a12f1f01a0e07b6bec72b58998f49ef"}], "stats": {"total": 3, "additions": 1, "deletions": 2}, "files": [{"sha": "6ee147d1704adee4cc612fe2cd03ca5d5cc19dc9", "filename": "src/libstd/sys/sgx/abi/usercalls/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c457b67af394c37826f75d73cca10319ee96b910/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c457b67af394c37826f75d73cca10319ee96b910/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fmod.rs?ref=c457b67af394c37826f75d73cca10319ee96b910", "patch": "@@ -161,11 +161,10 @@ pub fn wait(event_mask: u64, mut timeout: u64) -> IoResult<u64> {\n         // model the enclave runner which is serving the wait usercall is not\n         // trusted to ensure accurate timeouts.\n         if let Ok(timeout_signed) = i64::try_from(timeout) {\n-            let tenth = 1 + timeout_signed / 10;\n+            let tenth = timeout_signed / 10;\n             let deviation = (rdrand64() as i64).checked_rem(tenth).unwrap_or(0);\n             timeout = timeout_signed.saturating_add(deviation) as _;\n         }\n-        timeout = cmp::min(u64::MAX - 1, cmp::max(1, timeout));\n     }\n     unsafe { raw::wait(event_mask, timeout).from_sgx_result() }\n }"}]}