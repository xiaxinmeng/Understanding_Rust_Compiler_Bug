{"sha": "a0ca3f94f00fb8772ac9b89333d98e668375163b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwY2EzZjk0ZjAwZmI4NzcyYWM5Yjg5MzMzZDk4ZTY2ODM3NTE2M2I=", "commit": {"author": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-04-14T19:36:13Z"}, "committer": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-05-03T14:56:22Z"}, "message": "Rework `os` to avoid using `cfg_if!` with public items", "tree": {"sha": "e1b216bac178b6c23e6be52d73b2ad4303256b82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1b216bac178b6c23e6be52d73b2ad4303256b82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0ca3f94f00fb8772ac9b89333d98e668375163b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0ca3f94f00fb8772ac9b89333d98e668375163b", "html_url": "https://github.com/rust-lang/rust/commit/a0ca3f94f00fb8772ac9b89333d98e668375163b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0ca3f94f00fb8772ac9b89333d98e668375163b/comments", "author": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e098d2730abfe7210599998d43e2af3be72c74fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/e098d2730abfe7210599998d43e2af3be72c74fc", "html_url": "https://github.com/rust-lang/rust/commit/e098d2730abfe7210599998d43e2af3be72c74fc"}], "stats": {"total": 274, "additions": 151, "deletions": 123}, "files": [{"sha": "4365966e7289ebffaef33271b36797a53201e634", "filename": "library/std/src/os/mod.rs", "status": "modified", "additions": 115, "deletions": 87, "changes": 202, "blob_url": "https://github.com/rust-lang/rust/blob/a0ca3f94f00fb8772ac9b89333d98e668375163b/library%2Fstd%2Fsrc%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0ca3f94f00fb8772ac9b89333d98e668375163b/library%2Fstd%2Fsrc%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fmod.rs?ref=a0ca3f94f00fb8772ac9b89333d98e668375163b", "patch": "@@ -5,91 +5,119 @@\n \n pub mod raw;\n \n-cfg_if::cfg_if! {\n-    if #[cfg(all(doc, not(any(target_os = \"hermit\",\n-                        all(target_arch = \"wasm32\", not(target_os = \"wasi\")),\n-                        all(target_vendor = \"fortanix\", target_env = \"sgx\")))))]{\n-        // When documenting std we want to show the `unix`, `windows`, `linux` and `wasi`\n-        // modules as these are the \"main modules\" that are used across platforms,\n-        // so these modules are enabled when `cfg(doc)` is set.\n-        // This should help show platform-specific functionality in a hopefully cross-platform\n-        // way in the documentation.\n-\n-        pub mod unix;\n-\n-        pub mod linux;\n-\n-        pub mod wasi;\n-\n-        pub mod windows;\n-    } else if #[cfg(doc)] {\n-        // On certain platforms right now the \"main modules\" modules that are\n-        // documented don't compile (missing things in `libc` which is empty),\n-        // so just omit them with an empty module.\n-\n-        #[unstable(issue = \"none\", feature = \"std_internals\")]\n-        pub mod unix {}\n-\n-        #[unstable(issue = \"none\", feature = \"std_internals\")]\n-        pub mod linux {}\n-\n-        #[unstable(issue = \"none\", feature = \"std_internals\")]\n-        pub mod wasi {}\n-\n-        #[unstable(issue = \"none\", feature = \"std_internals\")]\n-        pub mod windows {}\n-    } else {\n-        // If we're not documenting std then we only expose modules appropriate for the\n-        // current platform.\n-\n-        #[cfg(all(target_vendor = \"fortanix\", target_env = \"sgx\"))]\n-        pub mod fortanix_sgx;\n-\n-        #[cfg(target_os = \"hermit\")]\n-        mod hermit;\n-        #[cfg(target_os = \"hermit\")]\n-        pub use hermit as unix;\n-\n-        #[cfg(unix)]\n-        pub mod unix;\n-        #[cfg(target_os = \"android\")]\n-        pub mod android;\n-        #[cfg(target_os = \"dragonfly\")]\n-        pub mod dragonfly;\n-        #[cfg(target_os = \"emscripten\")]\n-        pub mod emscripten;\n-        #[cfg(target_os = \"freebsd\")]\n-        pub mod freebsd;\n-        #[cfg(target_os = \"fuchsia\")]\n-        pub mod fuchsia;\n-        #[cfg(target_os = \"haiku\")]\n-        pub mod haiku;\n-        #[cfg(target_os = \"illumos\")]\n-        pub mod illumos;\n-        #[cfg(target_os = \"ios\")]\n-        pub mod ios;\n-        #[cfg(target_os = \"l4re\")]\n-        pub mod linux;\n-        #[cfg(target_os = \"linux\")]\n-        pub mod linux;\n-        #[cfg(target_os = \"macos\")]\n-        pub mod macos;\n-        #[cfg(target_os = \"netbsd\")]\n-        pub mod netbsd;\n-        #[cfg(target_os = \"openbsd\")]\n-        pub mod openbsd;\n-        #[cfg(target_os = \"redox\")]\n-        pub mod redox;\n-        #[cfg(target_os = \"solaris\")]\n-        pub mod solaris;\n-\n-        #[cfg(target_os = \"vxworks\")]\n-        pub mod vxworks;\n-\n-        #[cfg(target_os = \"wasi\")]\n-        pub mod wasi;\n-\n-        #[cfg(windows)]\n-        pub mod windows;\n-    }\n+// The code below could be written clearer using `cfg_if!`. However, the items below are\n+// publicly exported by `std` and external tools can have trouble analysing them because of the use\n+// of a macro that is not vendored by Rust and included in the toolchain.\n+// See https://github.com/rust-analyzer/rust-analyzer/issues/6038.\n+\n+#[cfg(all(\n+    doc,\n+    not(any(\n+        target_os = \"hermit\",\n+        all(target_arch = \"wasm32\", not(target_os = \"wasi\")),\n+        all(target_vendor = \"fortanix\", target_env = \"sgx\")\n+    ))\n+))]\n+#[path = \".\"]\n+mod doc {\n+    // When documenting std we want to show the `unix`, `windows`, `linux` and `wasi`\n+    // modules as these are the \"main modules\" that are used across platforms,\n+    // so these modules are enabled when `cfg(doc)` is set.\n+    // This should help show platform-specific functionality in a hopefully cross-platform\n+    // way in the documentation.\n+\n+    pub mod unix;\n+\n+    pub mod linux;\n+\n+    pub mod wasi;\n+\n+    pub mod windows;\n }\n+#[cfg(all(\n+    doc,\n+    any(\n+        target_os = \"hermit\",\n+        all(target_arch = \"wasm32\", not(target_os = \"wasi\")),\n+        all(target_vendor = \"fortanix\", target_env = \"sgx\")\n+    )\n+))]\n+mod doc {\n+    // On certain platforms right now the \"main modules\" modules that are\n+    // documented don't compile (missing things in `libc` which is empty),\n+    // so just omit them with an empty module.\n+\n+    #[unstable(issue = \"none\", feature = \"std_internals\")]\n+    pub mod unix {}\n+\n+    #[unstable(issue = \"none\", feature = \"std_internals\")]\n+    pub mod linux {}\n+\n+    #[unstable(issue = \"none\", feature = \"std_internals\")]\n+    pub mod wasi {}\n+\n+    #[unstable(issue = \"none\", feature = \"std_internals\")]\n+    pub mod windows {}\n+}\n+#[cfg(doc)]\n+#[stable(feature = \"os\", since = \"1.0.0\")]\n+pub use doc::*;\n+\n+#[cfg(not(doc))]\n+#[path = \".\"]\n+mod imp {\n+    // If we're not documenting std then we only expose modules appropriate for the\n+    // current platform.\n+\n+    #[cfg(all(target_vendor = \"fortanix\", target_env = \"sgx\"))]\n+    pub mod fortanix_sgx;\n+\n+    #[cfg(target_os = \"hermit\")]\n+    #[path = \"hermit/mod.rs\"]\n+    pub mod unix;\n+\n+    #[cfg(target_os = \"android\")]\n+    pub mod android;\n+    #[cfg(target_os = \"dragonfly\")]\n+    pub mod dragonfly;\n+    #[cfg(target_os = \"emscripten\")]\n+    pub mod emscripten;\n+    #[cfg(target_os = \"freebsd\")]\n+    pub mod freebsd;\n+    #[cfg(target_os = \"fuchsia\")]\n+    pub mod fuchsia;\n+    #[cfg(target_os = \"haiku\")]\n+    pub mod haiku;\n+    #[cfg(target_os = \"illumos\")]\n+    pub mod illumos;\n+    #[cfg(target_os = \"ios\")]\n+    pub mod ios;\n+    #[cfg(target_os = \"l4re\")]\n+    pub mod linux;\n+    #[cfg(target_os = \"linux\")]\n+    pub mod linux;\n+    #[cfg(target_os = \"macos\")]\n+    pub mod macos;\n+    #[cfg(target_os = \"netbsd\")]\n+    pub mod netbsd;\n+    #[cfg(target_os = \"openbsd\")]\n+    pub mod openbsd;\n+    #[cfg(target_os = \"redox\")]\n+    pub mod redox;\n+    #[cfg(target_os = \"solaris\")]\n+    pub mod solaris;\n+    #[cfg(unix)]\n+    pub mod unix;\n+\n+    #[cfg(target_os = \"vxworks\")]\n+    pub mod vxworks;\n+\n+    #[cfg(target_os = \"wasi\")]\n+    pub mod wasi;\n+\n+    #[cfg(windows)]\n+    pub mod windows;\n+}\n+#[cfg(not(doc))]\n+#[stable(feature = \"os\", since = \"1.0.0\")]\n+pub use imp::*;"}, {"sha": "6fc1c89a2ba800922cea428547cc2297ca3fe518", "filename": "library/std/src/os/unix/mod.rs", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/a0ca3f94f00fb8772ac9b89333d98e668375163b/library%2Fstd%2Fsrc%2Fos%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0ca3f94f00fb8772ac9b89333d98e668375163b/library%2Fstd%2Fsrc%2Fos%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fmod.rs?ref=a0ca3f94f00fb8772ac9b89333d98e668375163b", "patch": "@@ -28,42 +28,42 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![doc(cfg(unix))]\n \n-cfg_if::cfg_if! {\n-    if #[cfg(doc)] {\n-        // Use linux as the default platform when documenting on other platforms like Windows\n-        use crate::os::linux as platform;\n-    } else {\n-        #[cfg(target_os = \"android\")]\n-        use crate::os::android as platform;\n-        #[cfg(target_os = \"dragonfly\")]\n-        use crate::os::dragonfly as platform;\n-        #[cfg(target_os = \"emscripten\")]\n-        use crate::os::emscripten as platform;\n-        #[cfg(target_os = \"freebsd\")]\n-        use crate::os::freebsd as platform;\n-        #[cfg(target_os = \"fuchsia\")]\n-        use crate::os::fuchsia as platform;\n-        #[cfg(target_os = \"haiku\")]\n-        use crate::os::haiku as platform;\n-        #[cfg(target_os = \"illumos\")]\n-        use crate::os::illumos as platform;\n-        #[cfg(target_os = \"ios\")]\n-        use crate::os::ios as platform;\n-        #[cfg(any(target_os = \"linux\", target_os = \"l4re\"))]\n-        use crate::os::linux as platform;\n-        #[cfg(target_os = \"macos\")]\n-        use crate::os::macos as platform;\n-        #[cfg(target_os = \"netbsd\")]\n-        use crate::os::netbsd as platform;\n-        #[cfg(target_os = \"openbsd\")]\n-        use crate::os::openbsd as platform;\n-        #[cfg(target_os = \"redox\")]\n-        use crate::os::redox as platform;\n-        #[cfg(target_os = \"solaris\")]\n-        use crate::os::solaris as platform;\n-        #[cfg(target_os = \"vxworks\")]\n-        use crate::os::vxworks as platform;\n-    }\n+// Use linux as the default platform when documenting on other platforms like Windows\n+#[cfg(doc)]\n+use crate::os::linux as platform;\n+\n+#[cfg(not(doc))]\n+mod platform {\n+    #[cfg(target_os = \"android\")]\n+    pub use crate::os::android::*;\n+    #[cfg(target_os = \"dragonfly\")]\n+    pub use crate::os::dragonfly::*;\n+    #[cfg(target_os = \"emscripten\")]\n+    pub use crate::os::emscripten::*;\n+    #[cfg(target_os = \"freebsd\")]\n+    pub use crate::os::freebsd::*;\n+    #[cfg(target_os = \"fuchsia\")]\n+    pub use crate::os::fuchsia::*;\n+    #[cfg(target_os = \"haiku\")]\n+    pub use crate::os::haiku::*;\n+    #[cfg(target_os = \"illumos\")]\n+    pub use crate::os::illumos::*;\n+    #[cfg(target_os = \"ios\")]\n+    pub use crate::os::ios::*;\n+    #[cfg(any(target_os = \"linux\", target_os = \"l4re\"))]\n+    pub use crate::os::linux::*;\n+    #[cfg(target_os = \"macos\")]\n+    pub use crate::os::macos::*;\n+    #[cfg(target_os = \"netbsd\")]\n+    pub use crate::os::netbsd::*;\n+    #[cfg(target_os = \"openbsd\")]\n+    pub use crate::os::openbsd::*;\n+    #[cfg(target_os = \"redox\")]\n+    pub use crate::os::redox::*;\n+    #[cfg(target_os = \"solaris\")]\n+    pub use crate::os::solaris::*;\n+    #[cfg(target_os = \"vxworks\")]\n+    pub use crate::os::vxworks::*;\n }\n \n pub mod ffi;"}]}