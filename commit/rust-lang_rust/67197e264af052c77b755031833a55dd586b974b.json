{"sha": "67197e264af052c77b755031833a55dd586b974b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3MTk3ZTI2NGFmMDUyYzc3Yjc1NTAzMTgzM2E1NWRkNTg2Yjk3NGI=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-06-05T18:09:26Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-06-06T10:50:23Z"}, "message": "Implement only visit_place_base for monomorphize/collector", "tree": {"sha": "6a2ec9d662b1e0a73a2bb964f435df9f396bfa6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a2ec9d662b1e0a73a2bb964f435df9f396bfa6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67197e264af052c77b755031833a55dd586b974b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67197e264af052c77b755031833a55dd586b974b", "html_url": "https://github.com/rust-lang/rust/commit/67197e264af052c77b755031833a55dd586b974b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67197e264af052c77b755031833a55dd586b974b/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc527464bb3c891e062c58cd954c63b556d059ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc527464bb3c891e062c58cd954c63b556d059ec", "html_url": "https://github.com/rust-lang/rust/commit/cc527464bb3c891e062c58cd954c63b556d059ec"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "91b4af9655a43be0dbc34654844ea37209d2960d", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/67197e264af052c77b755031833a55dd586b974b/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67197e264af052c77b755031833a55dd586b974b/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=67197e264af052c77b755031833a55dd586b974b", "patch": "@@ -185,7 +185,7 @@ use rustc::ty::{self, TypeFoldable, Ty, TyCtxt, GenericParamDefKind, Instance};\n use rustc::ty::print::obsolete::DefPathBasedNames;\n use rustc::ty::adjustment::{CustomCoerceUnsized, PointerCast};\n use rustc::session::config::EntryFnType;\n-use rustc::mir::{self, Location, Place, PlaceBase, Promoted, Static, StaticKind};\n+use rustc::mir::{self, Location, PlaceBase, Promoted, Static, StaticKind};\n use rustc::mir::visit::Visitor as MirVisitor;\n use rustc::mir::mono::{MonoItem, InstantiationMode};\n use rustc::mir::interpret::{Scalar, GlobalId, GlobalAlloc, ErrorHandled};\n@@ -655,14 +655,12 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n         self.super_terminator_kind(kind, location);\n     }\n \n-    fn visit_place(&mut self,\n-                    place: &mir::Place<'tcx>,\n-                    context: mir::visit::PlaceContext,\n-                    location: Location) {\n-        match place {\n-            Place::Base(\n-                PlaceBase::Static(box Static{ kind:StaticKind::Static(def_id), .. })\n-            ) => {\n+    fn visit_place_base(&mut self,\n+                        place_base: &mir::PlaceBase<'tcx>,\n+                        _context: mir::visit::PlaceContext,\n+                        location: Location) {\n+        match place_base {\n+            PlaceBase::Static(box Static { kind: StaticKind::Static(def_id), .. }) => {\n                 debug!(\"visiting static {:?} @ {:?}\", def_id, location);\n \n                 let tcx = self.tcx;\n@@ -671,10 +669,13 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                     self.output.push(MonoItem::Static(*def_id));\n                 }\n             }\n-            _ => {}\n+            PlaceBase::Static(box Static { kind: StaticKind::Promoted(_), .. }) => {\n+                // FIXME: should we handle promoteds here instead of eagerly in collect_neighbours?\n+            }\n+            PlaceBase::Local(_) => {\n+                // Locals have no relevance for collector\n+            }\n         }\n-\n-        self.super_place(place, context, location);\n     }\n }\n "}]}