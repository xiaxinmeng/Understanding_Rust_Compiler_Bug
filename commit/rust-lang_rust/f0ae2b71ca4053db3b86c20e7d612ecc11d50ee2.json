{"sha": "f0ae2b71ca4053db3b86c20e7d612ecc11d50ee2", "node_id": "C_kwDOAAsO6NoAKGYwYWUyYjcxY2E0MDUzZGIzYjg2YzIwZTdkNjEyZWNjMTFkNTBlZTI", "commit": {"author": {"name": "J-ZhengLi", "email": "lizheng135@huawei.com", "date": "2023-02-24T02:46:07Z"}, "committer": {"name": "J-ZhengLi", "email": "lizheng135@huawei.com", "date": "2023-03-13T12:13:56Z"}, "message": "make [`ifs_same_cond`] use `ignore_interior_mutablility` configuration", "tree": {"sha": "ef073fcd8babcdaf325e7d55107686204891f9b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef073fcd8babcdaf325e7d55107686204891f9b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0ae2b71ca4053db3b86c20e7d612ecc11d50ee2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0ae2b71ca4053db3b86c20e7d612ecc11d50ee2", "html_url": "https://github.com/rust-lang/rust/commit/f0ae2b71ca4053db3b86c20e7d612ecc11d50ee2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0ae2b71ca4053db3b86c20e7d612ecc11d50ee2/comments", "author": {"login": "J-ZhengLi", "id": 32276130, "node_id": "MDQ6VXNlcjMyMjc2MTMw", "avatar_url": "https://avatars.githubusercontent.com/u/32276130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/J-ZhengLi", "html_url": "https://github.com/J-ZhengLi", "followers_url": "https://api.github.com/users/J-ZhengLi/followers", "following_url": "https://api.github.com/users/J-ZhengLi/following{/other_user}", "gists_url": "https://api.github.com/users/J-ZhengLi/gists{/gist_id}", "starred_url": "https://api.github.com/users/J-ZhengLi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/J-ZhengLi/subscriptions", "organizations_url": "https://api.github.com/users/J-ZhengLi/orgs", "repos_url": "https://api.github.com/users/J-ZhengLi/repos", "events_url": "https://api.github.com/users/J-ZhengLi/events{/privacy}", "received_events_url": "https://api.github.com/users/J-ZhengLi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "J-ZhengLi", "id": 32276130, "node_id": "MDQ6VXNlcjMyMjc2MTMw", "avatar_url": "https://avatars.githubusercontent.com/u/32276130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/J-ZhengLi", "html_url": "https://github.com/J-ZhengLi", "followers_url": "https://api.github.com/users/J-ZhengLi/followers", "following_url": "https://api.github.com/users/J-ZhengLi/following{/other_user}", "gists_url": "https://api.github.com/users/J-ZhengLi/gists{/gist_id}", "starred_url": "https://api.github.com/users/J-ZhengLi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/J-ZhengLi/subscriptions", "organizations_url": "https://api.github.com/users/J-ZhengLi/orgs", "repos_url": "https://api.github.com/users/J-ZhengLi/repos", "events_url": "https://api.github.com/users/J-ZhengLi/events{/privacy}", "received_events_url": "https://api.github.com/users/J-ZhengLi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a9492aa03792f17c7b63b15d10ae9813daa4c4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a9492aa03792f17c7b63b15d10ae9813daa4c4a", "html_url": "https://github.com/rust-lang/rust/commit/8a9492aa03792f17c7b63b15d10ae9813daa4c4a"}], "stats": {"total": 108, "additions": 91, "deletions": 17}, "files": [{"sha": "39f8f7220f1f947bb2ad03c86ca5cdc1d7d0ffeb", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 55, "deletions": 15, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/f0ae2b71ca4053db3b86c20e7d612ecc11d50ee2/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ae2b71ca4053db3b86c20e7d612ecc11d50ee2/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=f0ae2b71ca4053db3b86c20e7d612ecc11d50ee2", "patch": "@@ -3,16 +3,19 @@ use clippy_utils::source::{first_line_of_span, indent_of, reindent_multiline, sn\n use clippy_utils::ty::needs_ordered_drop;\n use clippy_utils::visitors::for_each_expr;\n use clippy_utils::{\n-    capture_local_usage, eq_expr_value, find_binding_init, get_enclosing_block, hash_expr, hash_stmt, if_sequence,\n-    is_else_clause, is_lint_allowed, path_to_local, search_same, ContainsName, HirEqInterExpr, SpanlessEq,\n+    capture_local_usage, def_path_def_ids, eq_expr_value, find_binding_init, get_enclosing_block, hash_expr, hash_stmt,\n+    if_sequence, is_else_clause, is_lint_allowed, path_to_local, search_same, ContainsName, HirEqInterExpr, SpanlessEq,\n };\n use core::iter;\n use core::ops::ControlFlow;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n+use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit;\n use rustc_hir::{BinOpKind, Block, Expr, ExprKind, HirId, HirIdSet, Stmt, StmtKind};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_middle::query::Key;\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::hygiene::walk_chain;\n use rustc_span::source_map::SourceMap;\n use rustc_span::{BytePos, Span, Symbol};\n@@ -159,7 +162,19 @@ declare_clippy_lint! {\n     \"`if` statement with shared code in all blocks\"\n }\n \n-declare_lint_pass!(CopyAndPaste => [\n+pub struct CopyAndPaste {\n+    ignore_interior_mutability: Vec<String>,\n+}\n+\n+impl CopyAndPaste {\n+    pub fn new(ignore_interior_mutability: Vec<String>) -> Self {\n+        Self {\n+            ignore_interior_mutability,\n+        }\n+    }\n+}\n+\n+impl_lint_pass!(CopyAndPaste => [\n     IFS_SAME_COND,\n     SAME_FUNCTIONS_IN_IF_CONDITION,\n     IF_SAME_THEN_ELSE,\n@@ -170,7 +185,14 @@ impl<'tcx> LateLintPass<'tcx> for CopyAndPaste {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if !expr.span.from_expansion() && matches!(expr.kind, ExprKind::If(..)) && !is_else_clause(cx.tcx, expr) {\n             let (conds, blocks) = if_sequence(expr);\n-            lint_same_cond(cx, &conds);\n+            let mut ignored_ty_ids = FxHashSet::default();\n+            for ignored_ty in &self.ignore_interior_mutability {\n+                let path: Vec<&str> = ignored_ty.split(\"::\").collect();\n+                for id in def_path_def_ids(cx, path.as_slice()) {\n+                    ignored_ty_ids.insert(id);\n+                }\n+            }\n+            lint_same_cond(cx, &conds, &ignored_ty_ids);\n             lint_same_fns_in_if_cond(cx, &conds);\n             let all_same =\n                 !is_lint_allowed(cx, IF_SAME_THEN_ELSE, expr.hir_id) && lint_if_same_then_else(cx, &conds, &blocks);\n@@ -547,23 +569,41 @@ fn check_for_warn_of_moved_symbol(cx: &LateContext<'_>, symbols: &[(HirId, Symbo\n     })\n }\n \n+fn method_caller_is_ignored_or_mutable(\n+    cx: &LateContext<'_>,\n+    caller_expr: &Expr<'_>,\n+    ignored_ty_ids: &FxHashSet<DefId>,\n+) -> bool {\n+    let caller_ty = cx.typeck_results().expr_ty(caller_expr);\n+    let is_ignored_ty = if let Some(adt_id) = caller_ty.ty_adt_id() && ignored_ty_ids.contains(&adt_id) {\n+        true\n+    } else {\n+        false\n+    };\n+\n+    if is_ignored_ty\n+        || caller_ty.is_mutable_ptr()\n+        || path_to_local(caller_expr)\n+            .and_then(|hid| find_binding_init(cx, hid))\n+            .is_none()\n+    {\n+        return true;\n+    }\n+\n+    false\n+}\n+\n /// Implementation of `IFS_SAME_COND`.\n-fn lint_same_cond(cx: &LateContext<'_>, conds: &[&Expr<'_>]) {\n+fn lint_same_cond(cx: &LateContext<'_>, conds: &[&Expr<'_>], ignored_ty_ids: &FxHashSet<DefId>) {\n     for (i, j) in search_same(\n         conds,\n         |e| hash_expr(cx, e),\n         |lhs, rhs| {\n-            // If any side (ex. lhs) is a method call, and the caller is not mutable,\n-            // then we can ignore side effects?\n             if let ExprKind::MethodCall(_, caller, _, _) = lhs.kind {\n-                if path_to_local(caller)\n-                    .and_then(|hir_id| find_binding_init(cx, hir_id))\n-                    .is_some()\n-                {\n-                    // caller is not declared as mutable\n-                    SpanlessEq::new(cx).eq_expr(lhs, rhs)\n-                } else {\n+                if method_caller_is_ignored_or_mutable(cx, caller, ignored_ty_ids) {\n                     false\n+                } else {\n+                    SpanlessEq::new(cx).eq_expr(lhs, rhs)\n                 }\n             } else {\n                 eq_expr_value(cx, lhs, rhs)"}, {"sha": "bde84686cc1b9a116e59931a4da56b283b6b575d", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f0ae2b71ca4053db3b86c20e7d612ecc11d50ee2/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ae2b71ca4053db3b86c20e7d612ecc11d50ee2/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=f0ae2b71ca4053db3b86c20e7d612ecc11d50ee2", "patch": "@@ -656,7 +656,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(empty_enum::EmptyEnum));\n     store.register_late_pass(|_| Box::new(invalid_upcast_comparisons::InvalidUpcastComparisons));\n     store.register_late_pass(|_| Box::new(regex::Regex));\n-    store.register_late_pass(|_| Box::new(copies::CopyAndPaste));\n+    let ignore_interior_mutability = conf.ignore_interior_mutability.clone();\n+    store.register_late_pass(move |_| Box::new(copies::CopyAndPaste::new(ignore_interior_mutability.clone())));\n     store.register_late_pass(|_| Box::new(copy_iterator::CopyIterator));\n     store.register_late_pass(|_| Box::new(format::UselessFormat));\n     store.register_late_pass(|_| Box::new(swap::Swap));"}, {"sha": "8ba252425a3d0a5dcb49e0df076e2790617b98a0", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0ae2b71ca4053db3b86c20e7d612ecc11d50ee2/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ae2b71ca4053db3b86c20e7d612ecc11d50ee2/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=f0ae2b71ca4053db3b86c20e7d612ecc11d50ee2", "patch": "@@ -437,7 +437,7 @@ define_Conf! {\n     ///\n     /// The maximum size of the `Err`-variant in a `Result` returned from a function\n     (large_error_threshold: u64 = 128),\n-    /// Lint: MUTABLE_KEY_TYPE.\n+    /// Lint: MUTABLE_KEY_TYPE, IFS_SAME_COND.\n     ///\n     /// A list of paths to types that should be treated like `Arc`, i.e. ignored but\n     /// for the generic parameters for determining interior mutability"}, {"sha": "1615d970c688f60546a9a2ebe2fcb8b9e008f599", "filename": "tests/ui-toml/ifs_same_cond/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0ae2b71ca4053db3b86c20e7d612ecc11d50ee2/tests%2Fui-toml%2Fifs_same_cond%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f0ae2b71ca4053db3b86c20e7d612ecc11d50ee2/tests%2Fui-toml%2Fifs_same_cond%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fifs_same_cond%2Fclippy.toml?ref=f0ae2b71ca4053db3b86c20e7d612ecc11d50ee2", "patch": "@@ -0,0 +1 @@\n+ignore-interior-mutability = [\"std::cell::Cell\"]\n\\ No newline at end of file"}, {"sha": "92438e7d1f2a40dfb142c563525a4a33d29277c6", "filename": "tests/ui-toml/ifs_same_cond/ifs_same_cond.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f0ae2b71ca4053db3b86c20e7d612ecc11d50ee2/tests%2Fui-toml%2Fifs_same_cond%2Fifs_same_cond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ae2b71ca4053db3b86c20e7d612ecc11d50ee2/tests%2Fui-toml%2Fifs_same_cond%2Fifs_same_cond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fifs_same_cond%2Fifs_same_cond.rs?ref=f0ae2b71ca4053db3b86c20e7d612ecc11d50ee2", "patch": "@@ -0,0 +1,24 @@\n+#![warn(clippy::ifs_same_cond)]\n+#![allow(clippy::if_same_then_else, clippy::comparison_chain)]\n+\n+fn main() {}\n+\n+fn issue10272() {\n+    use std::cell::Cell;\n+\n+    let x = Cell::new(true);\n+    if x.get() {\n+    } else if !x.take() {\n+    } else if x.get() {\n+        // ok, x is interior mutable type\n+    } else {\n+    }\n+\n+    let a = [Cell::new(true)];\n+    if a[0].get() {\n+    } else if a[0].take() {\n+    } else if a[0].get() {\n+        // ok, a contains interior mutable type\n+    } else {\n+    }\n+}"}, {"sha": "ae91611c472eb893ab2c710fcf431d269aab23a2", "filename": "tests/ui/ifs_same_cond.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f0ae2b71ca4053db3b86c20e7d612ecc11d50ee2/tests%2Fui%2Fifs_same_cond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ae2b71ca4053db3b86c20e7d612ecc11d50ee2/tests%2Fui%2Fifs_same_cond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fifs_same_cond.rs?ref=f0ae2b71ca4053db3b86c20e7d612ecc11d50ee2", "patch": "@@ -51,6 +51,14 @@ fn issue10272() {\n     } else if a.contains(\"ha\") {\n     } else if a == \"wow\" {\n     }\n+\n+    let p: *mut i8 = std::ptr::null_mut();\n+    if p.is_null() {\n+    } else if p.align_offset(0) == 0 {\n+    } else if p.is_null() {\n+        // ok, p is mutable pointer\n+    } else {\n+    }\n }\n \n fn main() {}"}]}