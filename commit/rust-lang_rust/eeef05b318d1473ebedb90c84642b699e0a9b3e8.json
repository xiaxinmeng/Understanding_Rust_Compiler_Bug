{"sha": "eeef05b318d1473ebedb90c84642b699e0a9b3e8", "node_id": "C_kwDOAAsO6NoAKGVlZWYwNWIzMThkMTQ3M2ViZWRiOTBjODQ2NDJiNjk5ZTBhOWIzZTg", "commit": {"author": {"name": "TheOddGarlic", "email": "umutinanerdogan@pm.me", "date": "2022-08-29T08:21:25Z"}, "committer": {"name": "mejrs", "email": "", "date": "2022-12-17T18:08:25Z"}, "message": "Migrate irrefutable let pattern diagnostics", "tree": {"sha": "5fefc8b45ae164ff49bfea6607761853a5c1d165", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fefc8b45ae164ff49bfea6607761853a5c1d165"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eeef05b318d1473ebedb90c84642b699e0a9b3e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eeef05b318d1473ebedb90c84642b699e0a9b3e8", "html_url": "https://github.com/rust-lang/rust/commit/eeef05b318d1473ebedb90c84642b699e0a9b3e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eeef05b318d1473ebedb90c84642b699e0a9b3e8/comments", "author": {"login": "AsyaTheAbove", "id": 40492846, "node_id": "MDQ6VXNlcjQwNDkyODQ2", "avatar_url": "https://avatars.githubusercontent.com/u/40492846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AsyaTheAbove", "html_url": "https://github.com/AsyaTheAbove", "followers_url": "https://api.github.com/users/AsyaTheAbove/followers", "following_url": "https://api.github.com/users/AsyaTheAbove/following{/other_user}", "gists_url": "https://api.github.com/users/AsyaTheAbove/gists{/gist_id}", "starred_url": "https://api.github.com/users/AsyaTheAbove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AsyaTheAbove/subscriptions", "organizations_url": "https://api.github.com/users/AsyaTheAbove/orgs", "repos_url": "https://api.github.com/users/AsyaTheAbove/repos", "events_url": "https://api.github.com/users/AsyaTheAbove/events{/privacy}", "received_events_url": "https://api.github.com/users/AsyaTheAbove/received_events", "type": "User", "site_admin": false}, "committer": {}, "parents": [{"sha": "e1c5073c07e52ebf9e8217d8bb4aaf795eda7a49", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1c5073c07e52ebf9e8217d8bb4aaf795eda7a49", "html_url": "https://github.com/rust-lang/rust/commit/e1c5073c07e52ebf9e8217d8bb4aaf795eda7a49"}], "stats": {"total": 160, "additions": 103, "deletions": 57}, "files": [{"sha": "7555bd608498d47c6e75dd0ac52aad20c6d235ee", "filename": "compiler/rustc_error_messages/locales/en-US/mir_build.ftl", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/eeef05b318d1473ebedb90c84642b699e0a9b3e8/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/eeef05b318d1473ebedb90c84642b699e0a9b3e8/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl?ref=eeef05b318d1473ebedb90c84642b699e0a9b3e8", "patch": "@@ -237,3 +237,53 @@ mir_build_trailing_irrefutable_let_patterns = trailing irrefutable {$count ->\n mir_build_bindings_with_variant_name =\n     pattern binding `{$ident}` is named the same as one of the variants of the type `{$ty_path}`\n     .suggestion = to match on the variant, qualify the path\n+\n+mir_build_irrefutable_let_patterns_generic_let = irrefutable `let` {$count ->\n+        [one] pattern\n+        *[other] patterns\n+    }\n+    .note = {$count ->\n+        [one] this pattern\n+        *[other] these patterns\n+    } will always match, so the `let` is useless\n+    .help = consider removing `let`\n+\n+mir_build_irrefutable_let_patterns_if_let = irrefutable `if let` {$count ->\n+        [one] pattern\n+        *[other] patterns\n+    }\n+    .note = {$count ->\n+        [one] this pattern\n+        *[other] these patterns\n+    } will always match, so the `if let` is useless\n+    .help = consider replacing the `if let` with a `let`\n+\n+mir_build_irrefutable_let_patterns_if_let_guard = irrefutable `if let` guard {$count ->\n+        [one] pattern\n+        *[other] patterns\n+    }\n+    .note = {$count ->\n+        [one] this pattern\n+        *[other] these patterns\n+    } will always match, so the guard is useless\n+    .help = consider removing the guard and adding a `let` inside the match arm\n+\n+mir_build_irrefutable_let_patterns_let_else = irrefutable `let...else` {$count ->\n+        [one] pattern\n+        *[other] patterns\n+    }\n+    .note = {$count ->\n+        [one] this pattern\n+        *[other] these patterns\n+    } will always match, so the `else` clause is useless\n+    .help = consider removing the `else` clause\n+\n+mir_build_irrefutable_let_patterns_while_let = irrefutable `while let` {$count ->\n+        [one] pattern\n+        *[other] patterns\n+    }\n+    .note = {$count ->\n+        [one] this pattern\n+        *[other] these patterns\n+    } will always match, so the loop will never exit\n+    .help = consider instead using a `loop {\"{\"} ... {\"}\"}` with a `let` inside it"}, {"sha": "eecef26b94cb69008adcd7a5f006428e08e50e95", "filename": "compiler/rustc_mir_build/src/errors.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/eeef05b318d1473ebedb90c84642b699e0a9b3e8/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeef05b318d1473ebedb90c84642b699e0a9b3e8/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs?ref=eeef05b318d1473ebedb90c84642b699e0a9b3e8", "patch": "@@ -522,3 +522,43 @@ pub struct BindingsWithVariantName {\n     pub ty_path: String,\n     pub ident: Ident,\n }\n+\n+#[derive(LintDiagnostic)]\n+#[diag(mir_build::irrefutable_let_patterns_generic_let)]\n+#[note]\n+#[help]\n+pub struct IrrefutableLetPatternsGenericLet {\n+    pub count: usize,\n+}\n+\n+#[derive(LintDiagnostic)]\n+#[diag(mir_build::irrefutable_let_patterns_if_let)]\n+#[note]\n+#[help]\n+pub struct IrrefutableLetPatternsIfLet {\n+    pub count: usize,\n+}\n+\n+#[derive(LintDiagnostic)]\n+#[diag(mir_build::irrefutable_let_patterns_if_let_guard)]\n+#[note]\n+#[help]\n+pub struct IrrefutableLetPatternsIfLetGuard {\n+    pub count: usize,\n+}\n+\n+#[derive(LintDiagnostic)]\n+#[diag(mir_build::irrefutable_let_patterns_let_else)]\n+#[note]\n+#[help]\n+pub struct IrrefutableLetPatternsLetElse {\n+    pub count: usize,\n+}\n+\n+#[derive(LintDiagnostic)]\n+#[diag(mir_build::irrefutable_let_patterns_while_let)]\n+#[note]\n+#[help]\n+pub struct IrrefutableLetPatternsWhileLet {\n+    pub count: usize,\n+}"}, {"sha": "a488253b992b27f0bffaeedb3770af490a3b424a", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 13, "deletions": 57, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/eeef05b318d1473ebedb90c84642b699e0a9b3e8/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeef05b318d1473ebedb90c84642b699e0a9b3e8/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=eeef05b318d1473ebedb90c84642b699e0a9b3e8", "patch": "@@ -598,68 +598,24 @@ fn irrefutable_let_patterns(\n     count: usize,\n     span: Span,\n ) {\n+    let span = match source {\n+        LetSource::LetElse(span) => span,\n+        _ => span,\n+    };\n+\n     macro_rules! emit_diag {\n-        (\n-            $lint:expr,\n-            $source_name:expr,\n-            $note_sufix:expr,\n-            $help_sufix:expr\n-        ) => {{\n-            let s = pluralize!(count);\n-            let these = pluralize!(\"this\", count);\n-            tcx.struct_span_lint_hir(\n-                IRREFUTABLE_LET_PATTERNS,\n-                id,\n-                span,\n-                format!(\"irrefutable {} pattern{s}\", $source_name),\n-                |lint| {\n-                    lint.note(&format!(\n-                        \"{these} pattern{s} will always match, so the {}\",\n-                        $note_sufix\n-                    ))\n-                    .help(concat!(\"consider \", $help_sufix))\n-                },\n-            )\n+        ($lint:tt) => {{\n+            tcx.emit_spanned_lint(IRREFUTABLE_LET_PATTERNS, id, span, $lint { count });\n         }};\n     }\n \n     match source {\n-        LetSource::GenericLet => {\n-            emit_diag!(lint, \"`let`\", \"`let` is useless\", \"removing `let`\");\n-        }\n-        LetSource::IfLet => {\n-            emit_diag!(\n-                lint,\n-                \"`if let`\",\n-                \"`if let` is useless\",\n-                \"replacing the `if let` with a `let`\"\n-            );\n-        }\n-        LetSource::IfLetGuard => {\n-            emit_diag!(\n-                lint,\n-                \"`if let` guard\",\n-                \"guard is useless\",\n-                \"removing the guard and adding a `let` inside the match arm\"\n-            );\n-        }\n-        LetSource::LetElse => {\n-            emit_diag!(\n-                lint,\n-                \"`let...else`\",\n-                \"`else` clause is useless\",\n-                \"removing the `else` clause\"\n-            );\n-        }\n-        LetSource::WhileLet => {\n-            emit_diag!(\n-                lint,\n-                \"`while let`\",\n-                \"loop will never exit\",\n-                \"instead using a `loop { ... }` with a `let` inside it\"\n-            );\n-        }\n-    };\n+        LetSource::GenericLet => emit_diag!(IrrefutableLetPatternsGenericLet),\n+        LetSource::IfLet => emit_diag!(IrrefutableLetPatternsIfLet),\n+        LetSource::IfLetGuard => emit_diag!(IrrefutableLetPatternsIfLetGuard),\n+        LetSource::LetElse(..) => emit_diag!(IrrefutableLetPatternsLetElse),\n+        LetSource::WhileLet => emit_diag!(IrrefutableLetPatternsWhileLet),\n+    }\n }\n \n fn is_let_irrefutable<'p, 'tcx>("}]}