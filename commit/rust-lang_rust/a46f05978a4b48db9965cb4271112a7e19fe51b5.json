{"sha": "a46f05978a4b48db9965cb4271112a7e19fe51b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0NmYwNTk3OGE0YjQ4ZGI5OTY1Y2I0MjcxMTEyYTdlMTlmZTUxYjU=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-04-01T06:20:39Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-04-10T12:40:25Z"}, "message": "Disable optimization fuel when using multiple threads", "tree": {"sha": "bea519b7bd5e1415d5a658ee7d203192c3e13a7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bea519b7bd5e1415d5a658ee7d203192c3e13a7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a46f05978a4b48db9965cb4271112a7e19fe51b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a46f05978a4b48db9965cb4271112a7e19fe51b5", "html_url": "https://github.com/rust-lang/rust/commit/a46f05978a4b48db9965cb4271112a7e19fe51b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a46f05978a4b48db9965cb4271112a7e19fe51b5/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a23e90a6ded12faff52515918ea7da16e40f5166", "url": "https://api.github.com/repos/rust-lang/rust/commits/a23e90a6ded12faff52515918ea7da16e40f5166", "html_url": "https://github.com/rust-lang/rust/commit/a23e90a6ded12faff52515918ea7da16e40f5166"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "8b6a8fea4cabb1dd10bcd865b6104a2ad77a5b4c", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a46f05978a4b48db9965cb4271112a7e19fe51b5/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a46f05978a4b48db9965cb4271112a7e19fe51b5/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=a46f05978a4b48db9965cb4271112a7e19fe51b5", "patch": "@@ -1859,6 +1859,13 @@ pub fn build_session_options_and_crate_config(\n         );\n     }\n \n+    if debugging_opts.query_threads.unwrap_or(1) > 1 && debugging_opts.fuel.is_some() {\n+        early_error(\n+            error_format,\n+            \"Optimization fuel is incompatible with multiple query threads\",\n+        );\n+    }\n+\n     if codegen_units == Some(0) {\n         early_error(\n             error_format,"}, {"sha": "2f036be011be92352a100179b64caf0fed432b79", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a46f05978a4b48db9965cb4271112a7e19fe51b5/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a46f05978a4b48db9965cb4271112a7e19fe51b5/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=a46f05978a4b48db9965cb4271112a7e19fe51b5", "patch": "@@ -26,7 +26,7 @@ use util::nodemap::{FxHashMap, FxHashSet};\n use util::common::{duration_to_secs_str, ErrorReported};\n use util::common::ProfileQueriesMsg;\n \n-use rustc_data_structures::sync::{Lrc, Lock, OneThread, Once};\n+use rustc_data_structures::sync::{Lrc, Lock, LockCell, OneThread, Once};\n \n use syntax::ast::NodeId;\n use errors::{self, DiagnosticBuilder, DiagnosticId};\n@@ -146,15 +146,15 @@ pub struct Session {\n     /// If -zfuel=crate=n is specified, Some(crate).\n     optimization_fuel_crate: Option<String>,\n     /// If -zfuel=crate=n is specified, initially set to n. Otherwise 0.\n-    optimization_fuel_limit: Cell<u64>,\n+    optimization_fuel_limit: LockCell<u64>,\n     /// We're rejecting all further optimizations.\n-    out_of_fuel: Cell<bool>,\n+    out_of_fuel: LockCell<bool>,\n \n     // The next two are public because the driver needs to read them.\n     /// If -zprint-fuel=crate, Some(crate).\n     pub print_fuel_crate: Option<String>,\n     /// Always set to zero and incremented so that we can print fuel expended by a crate.\n-    pub print_fuel: Cell<u64>,\n+    pub print_fuel: LockCell<u64>,\n \n     /// Loaded up early on in the initialization of this `Session` to avoid\n     /// false positives about a job server in our environment.\n@@ -846,6 +846,7 @@ impl Session {\n     /// We want to know if we're allowed to do an optimization for crate foo from -z fuel=foo=n.\n     /// This expends fuel if applicable, and records fuel if applicable.\n     pub fn consider_optimizing<T: Fn() -> String>(&self, crate_name: &str, msg: T) -> bool {\n+        assert!(self.query_threads() == 1);\n         let mut ret = true;\n         match self.optimization_fuel_crate {\n             Some(ref c) if c == crate_name => {\n@@ -1075,9 +1076,9 @@ pub fn build_session_(\n \n     let optimization_fuel_crate = sopts.debugging_opts.fuel.as_ref().map(|i| i.0.clone());\n     let optimization_fuel_limit =\n-        Cell::new(sopts.debugging_opts.fuel.as_ref().map(|i| i.1).unwrap_or(0));\n+        LockCell::new(sopts.debugging_opts.fuel.as_ref().map(|i| i.1).unwrap_or(0));\n     let print_fuel_crate = sopts.debugging_opts.print_fuel.clone();\n-    let print_fuel = Cell::new(0);\n+    let print_fuel = LockCell::new(0);\n \n     let working_dir = match env::current_dir() {\n         Ok(dir) => dir,\n@@ -1132,7 +1133,7 @@ pub fn build_session_(\n         optimization_fuel_limit,\n         print_fuel_crate,\n         print_fuel,\n-        out_of_fuel: Cell::new(false),\n+        out_of_fuel: LockCell::new(false),\n         // Note that this is unsafe because it may misinterpret file descriptors\n         // on Unix as jobserver file descriptors. We hopefully execute this near\n         // the beginning of the process though to ensure we don't get false"}]}