{"sha": "3cd49a0fa8599bbf1705fede777ec2e82b7e3239", "node_id": "C_kwDOAAsO6NoAKDNjZDQ5YTBmYTg1OTliYmYxNzA1ZmVkZTc3N2VjMmU4MmI3ZTMyMzk", "commit": {"author": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2022-03-25T04:49:46Z"}, "committer": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2022-03-25T04:49:46Z"}, "message": "Enforce that layout size fits in isize in Layout", "tree": {"sha": "1a0cf4f98cbc8af78498ba73d2e69a21b05ac440", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a0cf4f98cbc8af78498ba73d2e69a21b05ac440"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cd49a0fa8599bbf1705fede777ec2e82b7e3239", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cd49a0fa8599bbf1705fede777ec2e82b7e3239", "html_url": "https://github.com/rust-lang/rust/commit/3cd49a0fa8599bbf1705fede777ec2e82b7e3239", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cd49a0fa8599bbf1705fede777ec2e82b7e3239/comments", "author": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "661e8beec1fa5f3c58bf6e4362ae3c3fe0b4b1bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/661e8beec1fa5f3c58bf6e4362ae3c3fe0b4b1bd", "html_url": "https://github.com/rust-lang/rust/commit/661e8beec1fa5f3c58bf6e4362ae3c3fe0b4b1bd"}], "stats": {"total": 53, "additions": 34, "deletions": 19}, "files": [{"sha": "749959c34ed5e783d1e44c181bb27a93bc201899", "filename": "library/core/src/alloc/layout.rs", "status": "modified", "additions": 34, "deletions": 19, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/3cd49a0fa8599bbf1705fede777ec2e82b7e3239/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cd49a0fa8599bbf1705fede777ec2e82b7e3239/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs?ref=3cd49a0fa8599bbf1705fede777ec2e82b7e3239", "patch": "@@ -1,4 +1,5 @@\n use crate::cmp;\n+use crate::convert::TryFrom;\n use crate::fmt;\n use crate::mem;\n use crate::num::NonZeroUsize;\n@@ -53,8 +54,8 @@ impl Layout {\n     /// * `align` must be a power of two,\n     ///\n     /// * `size`, when rounded up to the nearest multiple of `align`,\n-    ///    must not overflow (i.e., the rounded value must be less than\n-    ///    or equal to `usize::MAX`).\n+    ///    must not overflow isize (i.e., the rounded value must be\n+    ///    less than or equal to `isize::MAX`).\n     #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n     #[rustc_const_stable(feature = \"const_alloc_layout\", since = \"1.50.0\")]\n     #[inline]\n@@ -77,7 +78,7 @@ impl Layout {\n         //\n         // Above implies that checking for summation overflow is both\n         // necessary and sufficient.\n-        if size > usize::MAX - (align - 1) {\n+        if size > isize::MAX as usize - (align - 1) {\n             return Err(LayoutError);\n         }\n \n@@ -277,8 +278,8 @@ impl Layout {\n         let pad = self.padding_needed_for(self.align());\n         // This cannot overflow. Quoting from the invariant of Layout:\n         // > `size`, when rounded up to the nearest multiple of `align`,\n-        // > must not overflow (i.e., the rounded value must be less than\n-        // > `usize::MAX`)\n+        // > must not overflow isize (i.e., the rounded value must be\n+        // > less than or equal to `isize::MAX`)\n         let new_size = self.size() + pad;\n \n         // SAFETY: self.align is already known to be valid and new_size has been\n@@ -299,14 +300,21 @@ impl Layout {\n     pub fn repeat(&self, n: usize) -> Result<(Self, usize), LayoutError> {\n         // This cannot overflow. Quoting from the invariant of Layout:\n         // > `size`, when rounded up to the nearest multiple of `align`,\n-        // > must not overflow (i.e., the rounded value must be less than\n-        // > `usize::MAX`)\n+        // > must not overflow isize (i.e., the rounded value must be\n+        // > less than or equal to `isize::MAX`)\n         let padded_size = self.size() + self.padding_needed_for(self.align());\n-        let alloc_size = padded_size.checked_mul(n).ok_or(LayoutError)?;\n+        // Size manipulation is done in isize space to avoid overflowing isize.\n+        let n = isize::try_from(n).map_err(|_| LayoutError)?;\n+        let alloc_size = (padded_size as isize).checked_mul(n).ok_or(LayoutError)?;\n \n         // SAFETY: self.align is already known to be valid and alloc_size has been\n         // padded already.\n-        unsafe { Ok((Layout::from_size_align_unchecked(alloc_size, self.align()), padded_size)) }\n+        unsafe {\n+            Ok((\n+                Layout::from_size_align_unchecked(alloc_size as usize, self.align()),\n+                padded_size as usize,\n+            ))\n+        }\n     }\n \n     /// Creates a layout describing the record for `self` followed by\n@@ -360,11 +368,12 @@ impl Layout {\n         let new_align = cmp::max(self.align(), next.align());\n         let pad = self.padding_needed_for(next.align());\n \n-        let offset = self.size().checked_add(pad).ok_or(LayoutError)?;\n-        let new_size = offset.checked_add(next.size()).ok_or(LayoutError)?;\n+        // Size manipulation is done in isize space to avoid overflowing isize.\n+        let offset = (self.size() as isize).checked_add(pad as isize).ok_or(LayoutError)?;\n+        let new_size = offset.checked_add(next.size() as isize).ok_or(LayoutError)?;\n \n-        let layout = Layout::from_size_align(new_size, new_align)?;\n-        Ok((layout, offset))\n+        let layout = Layout::from_size_align(new_size as usize, new_align)?;\n+        Ok((layout, offset as usize))\n     }\n \n     /// Creates a layout describing the record for `n` instances of\n@@ -382,8 +391,10 @@ impl Layout {\n     #[unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n     #[inline]\n     pub fn repeat_packed(&self, n: usize) -> Result<Self, LayoutError> {\n-        let size = self.size().checked_mul(n).ok_or(LayoutError)?;\n-        Layout::from_size_align(size, self.align())\n+        // Size manipulation is done in isize space to avoid overflowing isize.\n+        let n = isize::try_from(n).map_err(|_| LayoutError)?;\n+        let size = (self.size() as isize).checked_mul(n).ok_or(LayoutError)?;\n+        Layout::from_size_align(size as usize, self.align())\n     }\n \n     /// Creates a layout describing the record for `self` followed by\n@@ -395,8 +406,10 @@ impl Layout {\n     #[unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n     #[inline]\n     pub fn extend_packed(&self, next: Self) -> Result<Self, LayoutError> {\n-        let new_size = self.size().checked_add(next.size()).ok_or(LayoutError)?;\n-        Layout::from_size_align(new_size, self.align())\n+        // Size manipulation is done in isize space to avoid overflowing isize.\n+        let new_size =\n+            (self.size() as isize).checked_add(next.size() as isize).ok_or(LayoutError)?;\n+        Layout::from_size_align(new_size as usize, self.align())\n     }\n \n     /// Creates a layout describing the record for a `[T; n]`.\n@@ -405,7 +418,9 @@ impl Layout {\n     #[stable(feature = \"alloc_layout_manipulation\", since = \"1.44.0\")]\n     #[inline]\n     pub fn array<T>(n: usize) -> Result<Self, LayoutError> {\n-        let array_size = mem::size_of::<T>().checked_mul(n).ok_or(LayoutError)?;\n+        // Size manipulation is done in isize space to avoid overflowing isize.\n+        let n = isize::try_from(n).map_err(|_| LayoutError)?;\n+        let array_size = (mem::size_of::<T>() as isize).checked_mul(n).ok_or(LayoutError)?;\n \n         // SAFETY:\n         // - Size: `array_size` cannot be too big because `size_of::<T>()` must\n@@ -415,7 +430,7 @@ impl Layout {\n         //   just checked by the `checked_mul()`.\n         // - Alignment: `align_of::<T>()` will always give an acceptable\n         //   (non-zero, power of two) alignment.\n-        Ok(unsafe { Layout::from_size_align_unchecked(array_size, mem::align_of::<T>()) })\n+        Ok(unsafe { Layout::from_size_align_unchecked(array_size as usize, mem::align_of::<T>()) })\n     }\n }\n "}]}