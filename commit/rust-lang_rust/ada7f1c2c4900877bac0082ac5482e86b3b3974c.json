{"sha": "ada7f1c2c4900877bac0082ac5482e86b3b3974c", "node_id": "C_kwDOAAsO6NoAKGFkYTdmMWMyYzQ5MDA4NzdiYWMwMDgyYWM1NDgyZTg2YjNiMzk3NGM", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-05-17T10:45:12Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-05-17T12:17:33Z"}, "message": "Do not clone dominator tree for SSA analysis.", "tree": {"sha": "477c7fae41f2d7ea4ffdd6f11160deffa2c939e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/477c7fae41f2d7ea4ffdd6f11160deffa2c939e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ada7f1c2c4900877bac0082ac5482e86b3b3974c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ada7f1c2c4900877bac0082ac5482e86b3b3974c", "html_url": "https://github.com/rust-lang/rust/commit/ada7f1c2c4900877bac0082ac5482e86b3b3974c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ada7f1c2c4900877bac0082ac5482e86b3b3974c/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa8598cb5066b3463d53682170cc695af2c1b380", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa8598cb5066b3463d53682170cc695af2c1b380", "html_url": "https://github.com/rust-lang/rust/commit/fa8598cb5066b3463d53682170cc695af2c1b380"}], "stats": {"total": 19, "additions": 8, "deletions": 11}, "files": [{"sha": "e8e4246b7970fe41c7a5369118d0b6ec968c99ab", "filename": "compiler/rustc_mir_transform/src/ssa.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ada7f1c2c4900877bac0082ac5482e86b3b3974c/compiler%2Frustc_mir_transform%2Fsrc%2Fssa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada7f1c2c4900877bac0082ac5482e86b3b3974c/compiler%2Frustc_mir_transform%2Fsrc%2Fssa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fssa.rs?ref=ada7f1c2c4900877bac0082ac5482e86b3b3974c", "patch": "@@ -31,11 +31,11 @@ pub struct SsaLocals {\n /// We often encounter MIR bodies with 1 or 2 basic blocks. In those cases, it's unnecessary to\n /// actually compute dominators, we can just compare block indices because bb0 is always the first\n /// block, and in any body all other blocks are always dominated by bb0.\n-struct SmallDominators {\n-    inner: Option<Dominators<BasicBlock>>,\n+struct SmallDominators<'a> {\n+    inner: Option<&'a Dominators<BasicBlock>>,\n }\n \n-impl SmallDominators {\n+impl SmallDominators<'_> {\n     fn dominates(&self, first: Location, second: Location) -> bool {\n         if first.block == second.block {\n             first.statement_index <= second.statement_index\n@@ -68,11 +68,8 @@ impl SsaLocals {\n         let assignment_order = Vec::with_capacity(body.local_decls.len());\n \n         let assignments = IndexVec::from_elem(Set1::Empty, &body.local_decls);\n-        let dominators = if body.basic_blocks.len() > 2 {\n-            Some(body.basic_blocks.dominators().clone())\n-        } else {\n-            None\n-        };\n+        let dominators =\n+            if body.basic_blocks.len() > 2 { Some(body.basic_blocks.dominators()) } else { None };\n         let dominators = SmallDominators { inner: dominators };\n \n         let direct_uses = IndexVec::from_elem(0, &body.local_decls);\n@@ -201,14 +198,14 @@ enum LocationExtended {\n     Arg,\n }\n \n-struct SsaVisitor {\n-    dominators: SmallDominators,\n+struct SsaVisitor<'a> {\n+    dominators: SmallDominators<'a>,\n     assignments: IndexVec<Local, Set1<LocationExtended>>,\n     assignment_order: Vec<Local>,\n     direct_uses: IndexVec<Local, u32>,\n }\n \n-impl<'tcx> Visitor<'tcx> for SsaVisitor {\n+impl<'tcx> Visitor<'tcx> for SsaVisitor<'_> {\n     fn visit_local(&mut self, local: Local, ctxt: PlaceContext, loc: Location) {\n         match ctxt {\n             PlaceContext::MutatingUse(MutatingUseContext::Projection)"}]}