{"sha": "5e94b5faf1f0812207a9128e2754bd146210b16e", "node_id": "C_kwDOAAsO6NoAKDVlOTRiNWZhZjFmMDgxMjIwN2E5MTI4ZTI3NTRiZDE0NjIxMGIxNmU", "commit": {"author": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2023-05-08T06:52:52Z"}, "committer": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2023-05-08T06:56:36Z"}, "message": "code refactor and fix wrong suggestion", "tree": {"sha": "f7b2a4d14e68bef64b72c1845ebd888f01910cce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7b2a4d14e68bef64b72c1845ebd888f01910cce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e94b5faf1f0812207a9128e2754bd146210b16e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e94b5faf1f0812207a9128e2754bd146210b16e", "html_url": "https://github.com/rust-lang/rust/commit/5e94b5faf1f0812207a9128e2754bd146210b16e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e94b5faf1f0812207a9128e2754bd146210b16e/comments", "author": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7fc32ceaf4708a26a992f61c4ac4ead1555c8eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7fc32ceaf4708a26a992f61c4ac4ead1555c8eb", "html_url": "https://github.com/rust-lang/rust/commit/a7fc32ceaf4708a26a992f61c4ac4ead1555c8eb"}], "stats": {"total": 75, "additions": 51, "deletions": 24}, "files": [{"sha": "b0822fe795650fb6e56993d430028d4998d10017", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 29, "deletions": 23, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/5e94b5faf1f0812207a9128e2754bd146210b16e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e94b5faf1f0812207a9128e2754bd146210b16e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=5e94b5faf1f0812207a9128e2754bd146210b16e", "patch": "@@ -399,29 +399,6 @@ impl<'a> Parser<'a> {\n                 }\n             }\n         }\n-        // we suggest add the missing `let` before the identifier\n-        // `a: Ty = 1` -> `let a: Ty = 1`\n-        if self.token == token::Colon {\n-            let prev_span = self.prev_token.span.shrink_to_lo();\n-            let snapshot = self.create_snapshot_for_diagnostic();\n-            self.bump();\n-            match self.parse_ty() {\n-                Ok(_) => {\n-                    if self.token == token::Eq {\n-                        err.span_suggestion_verbose(\n-                            prev_span,\n-                            \"you might have meant to introduce a new binding\",\n-                            \"let \".to_string(),\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                    }\n-                }\n-                Err(err) => {\n-                    err.cancel();\n-                }\n-            }\n-            self.restore_snapshot(snapshot);\n-        }\n \n         if let Some(recovered_ident) = recovered_ident && recover {\n             err.emit();\n@@ -1029,6 +1006,35 @@ impl<'a> Parser<'a> {\n         Err(e)\n     }\n \n+    /// Suggest add the missing `let` before the identifier in stmt\n+    /// `a: Ty = 1` -> `let a: Ty = 1`\n+    pub(super) fn suggest_add_missing_let_for_stmt(\n+        &mut self,\n+        err: &mut DiagnosticBuilder<'a, ErrorGuaranteed>,\n+    ) {\n+        if self.token == token::Colon {\n+            let prev_span = self.prev_token.span.shrink_to_lo();\n+            let snapshot = self.create_snapshot_for_diagnostic();\n+            self.bump();\n+            match self.parse_ty() {\n+                Ok(_) => {\n+                    if self.token == token::Eq {\n+                        err.span_suggestion_verbose(\n+                            prev_span,\n+                            \"you might have meant to introduce a new binding\",\n+                            \"let \".to_string(),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n+                }\n+                Err(e) => {\n+                    e.cancel();\n+                }\n+            }\n+            self.restore_snapshot(snapshot);\n+        }\n+    }\n+\n     /// Check to see if a pair of chained operators looks like an attempt at chained comparison,\n     /// e.g. `1 < x <= 3`. If so, suggest either splitting the comparison into two, or\n     /// parenthesising the leftmost comparison."}, {"sha": "c35c32f272a93f25b0fb00dd2e1705a8f0dbd500", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e94b5faf1f0812207a9128e2754bd146210b16e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e94b5faf1f0812207a9128e2754bd146210b16e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=5e94b5faf1f0812207a9128e2754bd146210b16e", "patch": "@@ -99,7 +99,13 @@ impl<'a> Parser<'a> {\n                 ForceCollect::Yes => {\n                     self.collect_tokens_no_attrs(|this| this.parse_stmt_path_start(lo, attrs))?\n                 }\n-                ForceCollect::No => self.parse_stmt_path_start(lo, attrs)?,\n+                ForceCollect::No => match self.parse_stmt_path_start(lo, attrs) {\n+                    Ok(stmt) => stmt,\n+                    Err(mut err) => {\n+                        self.suggest_add_missing_let_for_stmt(&mut err);\n+                        return Err(err);\n+                    }\n+                },\n             }\n         } else if let Some(item) = self.parse_item_common(\n             attrs.clone(),"}, {"sha": "879a6fedcd677065bfe77b9c3b443972591bb1d4", "filename": "tests/ui/type/missing-let-in-binding-4.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5e94b5faf1f0812207a9128e2754bd146210b16e/tests%2Fui%2Ftype%2Fmissing-let-in-binding-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e94b5faf1f0812207a9128e2754bd146210b16e/tests%2Fui%2Ftype%2Fmissing-let-in-binding-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Fmissing-let-in-binding-4.rs?ref=5e94b5faf1f0812207a9128e2754bd146210b16e", "patch": "@@ -0,0 +1,5 @@\n+struct A {\n+    : u8 =, //~ ERROR expected identifier, found `:`\n+}\n+\n+fn main() {}"}, {"sha": "e6f173a6658701b9f9c67388bf4664f94c2f5939", "filename": "tests/ui/type/missing-let-in-binding-4.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5e94b5faf1f0812207a9128e2754bd146210b16e/tests%2Fui%2Ftype%2Fmissing-let-in-binding-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e94b5faf1f0812207a9128e2754bd146210b16e/tests%2Fui%2Ftype%2Fmissing-let-in-binding-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Fmissing-let-in-binding-4.stderr?ref=5e94b5faf1f0812207a9128e2754bd146210b16e", "patch": "@@ -0,0 +1,10 @@\n+error: expected identifier, found `:`\n+  --> $DIR/missing-let-in-binding-4.rs:2:5\n+   |\n+LL | struct A {\n+   |        - while parsing this struct\n+LL |     : u8 =,\n+   |     ^ expected identifier\n+\n+error: aborting due to previous error\n+"}]}