{"sha": "c54c5a3c77796e5194dd0369e9ffdbf41bf3c5d8", "node_id": "C_kwDOAAsO6NoAKGM1NGM1YTNjNzc3OTZlNTE5NGRkMDM2OWU5ZmZkYmY0MWJmM2M1ZDg", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-09-19T15:00:38Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-09-19T15:00:38Z"}, "message": "`DestructuredConst` split mir and ty", "tree": {"sha": "60da6ad2d1846f8e9bc806f80a31a447d278b5a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60da6ad2d1846f8e9bc806f80a31a447d278b5a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c54c5a3c77796e5194dd0369e9ffdbf41bf3c5d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c54c5a3c77796e5194dd0369e9ffdbf41bf3c5d8", "html_url": "https://github.com/rust-lang/rust/commit/c54c5a3c77796e5194dd0369e9ffdbf41bf3c5d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c54c5a3c77796e5194dd0369e9ffdbf41bf3c5d8/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "526856768d1fcd78844e4b5aceeca9c871ba047d", "url": "https://api.github.com/repos/rust-lang/rust/commits/526856768d1fcd78844e4b5aceeca9c871ba047d", "html_url": "https://github.com/rust-lang/rust/commit/526856768d1fcd78844e4b5aceeca9c871ba047d"}], "stats": {"total": 30, "additions": 10, "deletions": 20}, "files": [{"sha": "1c33e7845cb0b0b813ac7fcb6cc8e45fb287f271", "filename": "compiler/rustc_const_eval/src/const_eval/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c54c5a3c77796e5194dd0369e9ffdbf41bf3c5d8/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c54c5a3c77796e5194dd0369e9ffdbf41bf3c5d8/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs?ref=c54c5a3c77796e5194dd0369e9ffdbf41bf3c5d8", "patch": "@@ -100,7 +100,7 @@ pub(crate) fn try_destructure_mir_constant<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     val: mir::ConstantKind<'tcx>,\n-) -> InterpResult<'tcx, mir::DestructuredMirConstant<'tcx>> {\n+) -> InterpResult<'tcx, mir::DestructuredConstant<'tcx>> {\n     trace!(\"destructure_mir_constant: {:?}\", val);\n     let ecx = mk_eval_cx(tcx, DUMMY_SP, param_env, false);\n     let op = ecx.const_to_op(&val, None)?;\n@@ -129,7 +129,7 @@ pub(crate) fn try_destructure_mir_constant<'tcx>(\n         .collect::<InterpResult<'tcx, Vec<_>>>()?;\n     let fields = tcx.arena.alloc_from_iter(fields_iter);\n \n-    Ok(mir::DestructuredMirConstant { variant, fields })\n+    Ok(mir::DestructuredConstant { variant, fields })\n }\n \n #[instrument(skip(tcx), level = \"debug\")]"}, {"sha": "a8c7505329cda205edc4959e2eaff0f442ab6694", "filename": "compiler/rustc_middle/src/mir/interpret/queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c54c5a3c77796e5194dd0369e9ffdbf41bf3c5d8/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c54c5a3c77796e5194dd0369e9ffdbf41bf3c5d8/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs?ref=c54c5a3c77796e5194dd0369e9ffdbf41bf3c5d8", "patch": "@@ -211,7 +211,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         self,\n         param_env: ty::ParamEnv<'tcx>,\n         constant: mir::ConstantKind<'tcx>,\n-    ) -> mir::DestructuredMirConstant<'tcx> {\n+    ) -> mir::DestructuredConstant<'tcx> {\n         self.try_destructure_mir_constant(param_env.and(constant)).unwrap()\n     }\n }"}, {"sha": "efd7357afc46c98f1b886a42e3b0b9217137ccce", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c54c5a3c77796e5194dd0369e9ffdbf41bf3c5d8/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c54c5a3c77796e5194dd0369e9ffdbf41bf3c5d8/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=c54c5a3c77796e5194dd0369e9ffdbf41bf3c5d8", "patch": "@@ -392,16 +392,9 @@ pub enum ClosureOutlivesSubject<'tcx> {\n     Region(ty::RegionVid),\n }\n \n-/// The constituent parts of a type level constant of kind ADT or array.\n-#[derive(Copy, Clone, Debug, HashStable)]\n-pub struct DestructuredConst<'tcx> {\n-    pub variant: Option<VariantIdx>,\n-    pub fields: &'tcx [ty::Const<'tcx>],\n-}\n-\n /// The constituent parts of a mir constant of kind ADT or array.\n #[derive(Copy, Clone, Debug, HashStable)]\n-pub struct DestructuredMirConstant<'tcx> {\n+pub struct DestructuredConstant<'tcx> {\n     pub variant: Option<VariantIdx>,\n     pub fields: &'tcx [ConstantKind<'tcx>],\n }"}, {"sha": "1afea4864b8dd712f170101d2af49d4487680326", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c54c5a3c77796e5194dd0369e9ffdbf41bf3c5d8/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c54c5a3c77796e5194dd0369e9ffdbf41bf3c5d8/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=c54c5a3c77796e5194dd0369e9ffdbf41bf3c5d8", "patch": "@@ -1007,7 +1007,9 @@ rustc_queries! {\n \n     /// Tries to destructure an `mir::ConstantKind` ADT or array into its variant index\n     /// and its field values.\n-    query try_destructure_mir_constant(key: ty::ParamEnvAnd<'tcx, mir::ConstantKind<'tcx>>) -> Option<mir::DestructuredMirConstant<'tcx>> {\n+    query try_destructure_mir_constant(\n+        key: ty::ParamEnvAnd<'tcx, mir::ConstantKind<'tcx>>\n+    ) -> Option<mir::DestructuredConstant<'tcx>> {\n         desc { \"destructuring mir constant\"}\n         remap_env_constness\n     }"}, {"sha": "87961890f53e57b814611f5683acf4666c821c8e", "filename": "compiler/rustc_typeck/src/coherence/orphan.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c54c5a3c77796e5194dd0369e9ffdbf41bf3c5d8/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c54c5a3c77796e5194dd0369e9ffdbf41bf3c5d8/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs?ref=c54c5a3c77796e5194dd0369e9ffdbf41bf3c5d8", "patch": "@@ -5,7 +5,6 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_errors::{Diagnostic, ErrorGuaranteed};\n use rustc_hir as hir;\n-use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::util::IgnoreRegions;\n@@ -229,12 +228,8 @@ fn emit_orphan_check_error<'tcx>(\n                 \"only traits defined in the current crate {msg}\"\n             );\n             err.span_label(sp, \"impl doesn't use only types from inside the current crate\");\n-            for (ty, is_target_ty) in &tys {\n-                let mut ty = *ty;\n-                tcx.infer_ctxt().enter(|infcx| {\n-                    // Remove the lifetimes unnecessary for this error.\n-                    ty = infcx.freshen(ty);\n-                });\n+            for &(mut ty, is_target_ty) in &tys {\n+                ty = tcx.erase_regions(ty);\n                 ty = match ty.kind() {\n                     // Remove the type arguments from the output, as they are not relevant.\n                     // You can think of this as the reverse of `resolve_vars_if_possible`.\n@@ -264,7 +259,7 @@ fn emit_orphan_check_error<'tcx>(\n                 };\n \n                 let msg = format!(\"{} is not defined in the current crate{}\", ty, postfix);\n-                if *is_target_ty {\n+                if is_target_ty {\n                     // Point at `D<A>` in `impl<A, B> for C<B> in D<A>`\n                     err.span_label(self_ty_span, &msg);\n                 } else {"}]}