{"sha": "f5f24c7a5c9d975c5edc16d19ae613853ff3f4e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1ZjI0YzdhNWM5ZDk3NWM1ZWRjMTZkMTlhZTYxMzg1M2ZmM2Y0ZTc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-05-01T15:28:45Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-06-30T17:00:52Z"}, "message": "Implement a few volatile intrinsics", "tree": {"sha": "e613cc7340a67abc5c47923a1495d7cb7c251d62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e613cc7340a67abc5c47923a1495d7cb7c251d62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5f24c7a5c9d975c5edc16d19ae613853ff3f4e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5f24c7a5c9d975c5edc16d19ae613853ff3f4e7", "html_url": "https://github.com/rust-lang/rust/commit/f5f24c7a5c9d975c5edc16d19ae613853ff3f4e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5f24c7a5c9d975c5edc16d19ae613853ff3f4e7/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf2ba159723dfe88cfdf301efde4efb7881d98f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf2ba159723dfe88cfdf301efde4efb7881d98f9", "html_url": "https://github.com/rust-lang/rust/commit/bf2ba159723dfe88cfdf301efde4efb7881d98f9"}], "stats": {"total": 25, "additions": 23, "deletions": 2}, "files": [{"sha": "98509847b830f5d1b02fa2db6803006af1e343b5", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f5f24c7a5c9d975c5edc16d19ae613853ff3f4e7/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5f24c7a5c9d975c5edc16d19ae613853ff3f4e7/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=f5f24c7a5c9d975c5edc16d19ae613853ff3f4e7", "patch": "@@ -471,7 +471,26 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n             assert_eq!(args.len(), 3);\n             let byte_amount = fx.bcx.ins().imul(count, elem_size);\n \n-            if intrinsic.ends_with(\"_nonoverlapping\") {\n+            if intrinsic.contains(\"nonoverlapping\") {\n+                // FIXME emit_small_memcpy\n+                fx.bcx.call_memcpy(fx.module.target_config(), dst, src, byte_amount);\n+            } else {\n+                // FIXME emit_small_memmove\n+                fx.bcx.call_memmove(fx.module.target_config(), dst, src, byte_amount);\n+            }\n+        };\n+        // NOTE: the volatile variants have src and dst swapped\n+        volatile_copy_memory | volatile_copy_nonoverlapping_memory, <elem_ty> (v dst, v src, v count) {\n+            let elem_size: u64 = fx.layout_of(elem_ty).size.bytes();\n+            let elem_size = fx\n+                .bcx\n+                .ins()\n+                .iconst(fx.pointer_type, elem_size as i64);\n+            assert_eq!(args.len(), 3);\n+            let byte_amount = fx.bcx.ins().imul(count, elem_size);\n+\n+            // FIXME make the copy actually volatile when using emit_small_mem{cpy,move}\n+            if intrinsic.contains(\"nonoverlapping\") {\n                 // FIXME emit_small_memcpy\n                 fx.bcx.call_memcpy(fx.module.target_config(), dst, src, byte_amount);\n             } else {\n@@ -633,11 +652,13 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n         transmute, (c from) {\n             ret.write_cvalue_transmute(fx, from);\n         };\n-        write_bytes, (c dst, v val, v count) {\n+        write_bytes | volatile_set_memory, (c dst, v val, v count) {\n             let pointee_ty = dst.layout().ty.builtin_deref(true).unwrap().ty;\n             let pointee_size = fx.layout_of(pointee_ty).size.bytes();\n             let count = fx.bcx.ins().imul_imm(count, pointee_size as i64);\n             let dst_ptr = dst.load_scalar(fx);\n+            // FIXME make the memset actually volatile when switching to emit_small_memset\n+            // FIXME use emit_small_memset\n             fx.bcx.call_memset(fx.module.target_config(), dst_ptr, val, count);\n         };\n         ctlz | ctlz_nonzero, <T> (v arg) {"}]}