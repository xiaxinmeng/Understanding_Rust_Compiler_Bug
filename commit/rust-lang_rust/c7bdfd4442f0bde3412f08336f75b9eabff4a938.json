{"sha": "c7bdfd4442f0bde3412f08336f75b9eabff4a938", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3YmRmZDQ0NDJmMGJkZTM0MTJmMDgzMzZmNzViOWVhYmZmNGE5Mzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-22T15:02:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-22T15:02:13Z"}, "message": "Auto merge of #32341 - frewsxcv:compiletest-enum, r=nikomatsakis\n\nUse enum for message kind in compiletest harness.\n\nNone", "tree": {"sha": "72d8a96a5780fdf8b8a5474863341d8b924d67a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72d8a96a5780fdf8b8a5474863341d8b924d67a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7bdfd4442f0bde3412f08336f75b9eabff4a938", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7bdfd4442f0bde3412f08336f75b9eabff4a938", "html_url": "https://github.com/rust-lang/rust/commit/c7bdfd4442f0bde3412f08336f75b9eabff4a938", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7bdfd4442f0bde3412f08336f75b9eabff4a938/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ae05d37dac364cfcbb3cf3a2490ea8b7116f04c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ae05d37dac364cfcbb3cf3a2490ea8b7116f04c", "html_url": "https://github.com/rust-lang/rust/commit/2ae05d37dac364cfcbb3cf3a2490ea8b7116f04c"}, {"sha": "73f432189298dd07195427fcc9216ed2c5ba8d11", "url": "https://api.github.com/repos/rust-lang/rust/commits/73f432189298dd07195427fcc9216ed2c5ba8d11", "html_url": "https://github.com/rust-lang/rust/commit/73f432189298dd07195427fcc9216ed2c5ba8d11"}], "stats": {"total": 71, "additions": 57, "deletions": 14}, "files": [{"sha": "7ad0cd2a95d4bedd8b7966b4f0af52c5cd5bcff8", "filename": "src/compiletest/errors.rs", "status": "modified", "additions": 46, "deletions": 6, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/c7bdfd4442f0bde3412f08336f75b9eabff4a938/src%2Fcompiletest%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7bdfd4442f0bde3412f08336f75b9eabff4a938/src%2Fcompiletest%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Ferrors.rs?ref=c7bdfd4442f0bde3412f08336f75b9eabff4a938", "patch": "@@ -9,14 +9,54 @@\n // except according to those terms.\n use self::WhichLine::*;\n \n+use std::fmt;\n use std::fs::File;\n use std::io::BufReader;\n use std::io::prelude::*;\n use std::path::Path;\n+use std::str::FromStr;\n+\n+#[derive(Clone, Debug, PartialEq)]\n+pub enum ErrorKind {\n+    Help,\n+    Error,\n+    Note,\n+    Suggestion,\n+    Warning,\n+}\n+\n+impl FromStr for ErrorKind {\n+    type Err = ();\n+    fn from_str(s: &str) -> Result<Self, Self::Err> {\n+        match &s.trim_right_matches(':') as &str {\n+            \"HELP\" => Ok(ErrorKind::Help),\n+            \"ERROR\" => Ok(ErrorKind::Error),\n+            \"NOTE\" => Ok(ErrorKind::Note),\n+            \"SUGGESTION\" => Ok(ErrorKind::Suggestion),\n+            \"WARN\" => Ok(ErrorKind::Warning),\n+            \"WARNING\" => Ok(ErrorKind::Warning),\n+            _ => Err(()),\n+        }\n+    }\n+}\n+\n+impl fmt::Display for ErrorKind {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        match *self {\n+            ErrorKind::Help => write!(f, \"help\"),\n+            ErrorKind::Error => write!(f, \"error\"),\n+            ErrorKind::Note => write!(f, \"note\"),\n+            ErrorKind::Suggestion => write!(f, \"suggestion\"),\n+            ErrorKind::Warning => write!(f, \"warning\"),\n+        }\n+    }\n+}\n \n pub struct ExpectedError {\n     pub line_num: usize,\n-    pub kind: String,\n+    /// What kind of message we expect (e.g. warning, error, suggestion).\n+    /// `None` if not specified or unknown message kind.\n+    pub kind: Option<ErrorKind>,\n     pub msg: String,\n }\n \n@@ -81,11 +121,11 @@ fn parse_expected(last_nonfollow_error: Option<usize>,\n         (false, line[start + tag.len()..].chars().take_while(|c| *c == '^').count())\n     };\n     let kind_start = start + tag.len() + adjusts + (follow as usize);\n-    let letters = line[kind_start..].chars();\n-    let kind = letters.skip_while(|c| c.is_whitespace())\n-                      .take_while(|c| !c.is_whitespace())\n-                      .flat_map(|c| c.to_lowercase())\n-                      .collect::<String>();\n+    let kind = line[kind_start..].split_whitespace()\n+                                 .next()\n+                                 .expect(\"Encountered unexpected empty comment\")\n+                                 .parse::<ErrorKind>()\n+                                 .ok();\n     let letters = line[kind_start..].chars();\n     let msg = letters.skip_while(|c| c.is_whitespace())\n                      .skip_while(|c| !c.is_whitespace())"}, {"sha": "5293eee9459cf1728f4964084ce15b0bc6dba80c", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c7bdfd4442f0bde3412f08336f75b9eabff4a938/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7bdfd4442f0bde3412f08336f75b9eabff4a938/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=c7bdfd4442f0bde3412f08336f75b9eabff4a938", "patch": "@@ -11,7 +11,7 @@\n use common::Config;\n use common::{CompileFail, ParseFail, Pretty, RunFail, RunPass, RunPassValgrind};\n use common::{Codegen, DebugInfoLldb, DebugInfoGdb, Rustdoc, CodegenUnits};\n-use errors;\n+use errors::{self, ErrorKind};\n use header::TestProps;\n use header;\n use procsrv;\n@@ -1033,8 +1033,8 @@ fn check_expected_errors(revision: Option<&str>,\n         expected_errors.iter()\n                         .fold((false, false),\n                               |(acc_help, acc_note), ee|\n-                                  (acc_help || ee.kind == \"help:\" || ee.kind == \"help\",\n-                                   acc_note || ee.kind == \"note:\" || ee.kind == \"note\"));\n+                                  (acc_help || ee.kind == Some(ErrorKind::Help),\n+                                   acc_note || ee.kind == Some(ErrorKind::Note)));\n \n     // Scan and extract our error/warning messages,\n     // which look like:\n@@ -1052,15 +1052,15 @@ fn check_expected_errors(revision: Option<&str>,\n         let mut prev = 0;\n         for (i, ee) in expected_errors.iter().enumerate() {\n             if !found_flags[i] {\n-                debug!(\"prefix={} ee.kind={} ee.msg={} line={}\",\n+                debug!(\"prefix={} ee.kind={:?} ee.msg={} line={}\",\n                        prefixes[i],\n                        ee.kind,\n                        ee.msg,\n                        line);\n                 // Suggestions have no line number in their output, so take on the line number of\n                 // the previous expected error\n-                if ee.kind == \"suggestion\" {\n-                    assert!(expected_errors[prev].kind == \"help\",\n+                if ee.kind == Some(ErrorKind::Suggestion) {\n+                    assert!(expected_errors[prev].kind == Some(ErrorKind::Help),\n                             \"SUGGESTIONs must be preceded by a HELP\");\n                     if line.contains(&ee.msg) {\n                         found_flags[i] = true;\n@@ -1070,7 +1070,7 @@ fn check_expected_errors(revision: Option<&str>,\n                 }\n                 if\n                     (prefix_matches(line, &prefixes[i]) || continuation(line)) &&\n-                    line.contains(&ee.kind) &&\n+                    (ee.kind.is_none() || line.contains(&ee.kind.as_ref().unwrap().to_string())) &&\n                     line.contains(&ee.msg)\n                 {\n                     found_flags[i] = true;\n@@ -1096,7 +1096,10 @@ fn check_expected_errors(revision: Option<&str>,\n         if !flag {\n             let ee = &expected_errors[i];\n             error(revision, &format!(\"expected {} on line {} not found: {}\",\n-                                     ee.kind, ee.line_num, ee.msg));\n+                                     ee.kind.as_ref()\n+                                            .map_or(\"message\".into(),\n+                                                    |k| k.to_string()),\n+                                     ee.line_num, ee.msg));\n             not_found += 1;\n         }\n     }"}]}