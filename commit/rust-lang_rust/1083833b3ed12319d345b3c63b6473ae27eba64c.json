{"sha": "1083833b3ed12319d345b3c63b6473ae27eba64c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwODM4MzNiM2VkMTIzMTlkMzQ1YjNjNjNiNjQ3M2FlMjdlYmE2NGM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-09-08T23:35:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-08T23:35:20Z"}, "message": "Rollup merge of #76401 - JulianKnodt:i68366, r=lcnr\n\nAdd help note to unconstrained const parameter\n\nResolves #68366, since it is currently intended behaviour.\nIf demonstrating `T -> U` is injective, there should be an additional word that it is not **yet** supported.\n\nr? @lcnr", "tree": {"sha": "65232997d60ce4fd62fc33de7dd7c4c5500d72d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65232997d60ce4fd62fc33de7dd7c4c5500d72d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1083833b3ed12319d345b3c63b6473ae27eba64c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfWBU4CRBK7hj4Ov3rIwAAdHIIADnjAWlr1T/ZG9+QUkCQEvw0\nAAwQ5fm6byMUb8XMZ4rsNoeDntrx+vdCNJxpWeOb0dpDLXVFE12fFTKkuVECUKYb\nizKQJWbR6qbb0tsQTwI8fqQwzyCgAUuz5478kan4nwkY8s+z6vRitsp0f4vyxLX1\nfLHPSZWE3+31ugRF2Ifn+7eWWJHm1pSdRdNoJpkpdeW7wA22J/dHZeQNcLYTq2fU\ndougAJyVGefWdTgGr7oCJVLW8UhBlMDAa5w+Lvb0QQK610/k8WVGLeI9UR+k8B8u\n+eyQ4qgmPwkmyku4RMg6BKT6hsYL6911WvmkF6HKQ5J7Qnpfx4huRsQafs6Hx4k=\n=KRmv\n-----END PGP SIGNATURE-----\n", "payload": "tree 65232997d60ce4fd62fc33de7dd7c4c5500d72d6\nparent d45faff0bf5fb2634757e6b7326c7a7a1de3ab1b\nparent ee55c1f1d2c427fecedd68e28a7dc4e6c68738b5\nauthor Dylan DPC <dylan.dpc@gmail.com> 1599608120 +0200\ncommitter GitHub <noreply@github.com> 1599608120 +0200\n\nRollup merge of #76401 - JulianKnodt:i68366, r=lcnr\n\nAdd help note to unconstrained const parameter\n\nResolves #68366, since it is currently intended behaviour.\nIf demonstrating `T -> U` is injective, there should be an additional word that it is not **yet** supported.\n\nr? @lcnr\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1083833b3ed12319d345b3c63b6473ae27eba64c", "html_url": "https://github.com/rust-lang/rust/commit/1083833b3ed12319d345b3c63b6473ae27eba64c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1083833b3ed12319d345b3c63b6473ae27eba64c/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d45faff0bf5fb2634757e6b7326c7a7a1de3ab1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d45faff0bf5fb2634757e6b7326c7a7a1de3ab1b", "html_url": "https://github.com/rust-lang/rust/commit/d45faff0bf5fb2634757e6b7326c7a7a1de3ab1b"}, {"sha": "ee55c1f1d2c427fecedd68e28a7dc4e6c68738b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee55c1f1d2c427fecedd68e28a7dc4e6c68738b5", "html_url": "https://github.com/rust-lang/rust/commit/ee55c1f1d2c427fecedd68e28a7dc4e6c68738b5"}], "stats": {"total": 57, "additions": 52, "deletions": 5}, "files": [{"sha": "4901d6041d6f02bdc54e90b32e1b421eac9a7465", "filename": "compiler/rustc_typeck/src/impl_wf_check.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1083833b3ed12319d345b3c63b6473ae27eba64c/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1083833b3ed12319d345b3c63b6473ae27eba64c/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs?ref=1083833b3ed12319d345b3c63b6473ae27eba64c", "patch": "@@ -187,7 +187,7 @@ fn enforce_impl_params_are_constrained(\n     }\n \n     // (*) This is a horrible concession to reality. I think it'd be\n-    // better to just ban unconstrianed lifetimes outright, but in\n+    // better to just ban unconstrained lifetimes outright, but in\n     // practice people do non-hygenic macros like:\n     //\n     // ```\n@@ -207,17 +207,25 @@ fn enforce_impl_params_are_constrained(\n }\n \n fn report_unused_parameter(tcx: TyCtxt<'_>, span: Span, kind: &str, name: &str) {\n-    struct_span_err!(\n+    let mut err = struct_span_err!(\n         tcx.sess,\n         span,\n         E0207,\n         \"the {} parameter `{}` is not constrained by the \\\n         impl trait, self type, or predicates\",\n         kind,\n         name\n-    )\n-    .span_label(span, format!(\"unconstrained {} parameter\", kind))\n-    .emit();\n+    );\n+    err.span_label(span, format!(\"unconstrained {} parameter\", kind));\n+    if kind == \"const\" {\n+        err.note(\n+            \"expressions using a const parameter must map each value to a distinct output value\",\n+        );\n+        err.note(\n+            \"proving the result of expressions other than the parameter are unique is not supported\",\n+        );\n+    }\n+    err.emit();\n }\n \n /// Enforce that we do not have two items in an impl with the same name."}, {"sha": "a06b99d6645ec9b073c76fd39a2ab3702ea70754", "filename": "src/test/ui/const-generics/issues/issue-68366.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1083833b3ed12319d345b3c63b6473ae27eba64c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1083833b3ed12319d345b3c63b6473ae27eba64c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.rs?ref=1083833b3ed12319d345b3c63b6473ae27eba64c", "patch": "@@ -0,0 +1,18 @@\n+// Checks that const expressions have a useful note explaining why they can't be evaluated.\n+// The note should relate to the fact that it cannot be shown forall N that it maps 1-1 to a new\n+// type.\n+\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+struct Collatz<const N: Option<usize>>;\n+\n+impl <const N: usize> Collatz<{Some(N)}> {}\n+//~^ ERROR the const parameter\n+\n+struct Foo;\n+\n+impl<const N: usize> Foo {}\n+//~^ ERROR the const parameter\n+\n+fn main() {}"}, {"sha": "bba16f421535a21c23174c5868341cf8b542cc6c", "filename": "src/test/ui/const-generics/issues/issue-68366.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1083833b3ed12319d345b3c63b6473ae27eba64c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1083833b3ed12319d345b3c63b6473ae27eba64c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.stderr?ref=1083833b3ed12319d345b3c63b6473ae27eba64c", "patch": "@@ -0,0 +1,21 @@\n+error[E0207]: the const parameter `N` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/issue-68366.rs:10:13\n+   |\n+LL | impl <const N: usize> Collatz<{Some(N)}> {}\n+   |             ^ unconstrained const parameter\n+   |\n+   = note: expressions using a const parameter must map each value to a distinct output value\n+   = note: proving the result of expressions other than the parameter are unique is not supported\n+\n+error[E0207]: the const parameter `N` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/issue-68366.rs:15:12\n+   |\n+LL | impl<const N: usize> Foo {}\n+   |            ^ unconstrained const parameter\n+   |\n+   = note: expressions using a const parameter must map each value to a distinct output value\n+   = note: proving the result of expressions other than the parameter are unique is not supported\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0207`."}]}