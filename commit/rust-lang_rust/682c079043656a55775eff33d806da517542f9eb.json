{"sha": "682c079043656a55775eff33d806da517542f9eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4MmMwNzkwNDM2NTZhNTU3NzVlZmYzM2Q4MDZkYTUxNzU0MmY5ZWI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-03T08:57:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-03T08:57:02Z"}, "message": "Merge #4276\n\n4276: Don't count start of non-ASCII characters as being inside of them r=matklad a=lnicola\n\nI'm still not sure that `utf16_to_utf8_col` is correct for code points from Supplementary Planes. These have two UTF-16 code units, and I feel we're not going to count them correctly.\r\n\r\nFixes the crash in https://github.com/rust-analyzer/rust-analyzer/issues/4263#issuecomment-622988258.\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>", "tree": {"sha": "7ac096bc57e71ff76f05691a76e53df06de24d62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ac096bc57e71ff76f05691a76e53df06de24d62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/682c079043656a55775eff33d806da517542f9eb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJerodeCRBK7hj4Ov3rIwAAdHIIACjEJsEqf/ubWbBIpAkKfH/H\nc8UuL38Iml1vUwQteLDjwI+DFnVIjlB/DGGj5p+6NcRmCPSjywrX8KWz0jw3+q0q\nri9Mim+jp83fzaq6OTvS1BE4fxQ94HEhjEcCpFrL7yxZD9Qvl3jVFZwI9mDj5Iww\nFGm9ahXXH/5cYqsyCOi07fCYVjwHqQdSQDA3l+mBDQHbeY+Zd/UA8jEgLFwC/r2c\nahIX24lL0rZGJu83wLSq6NWebu162KF+xaFYU5fuZ4hp5kn9bmp2wBWGnY4VP/FK\np0Hn/wyzcZWNprZNmM1HXQhYpkf99e9BrCcmmb/0Hb6UVGREcTVWbgLk/khIieY=\n=GGOW\n-----END PGP SIGNATURE-----\n", "payload": "tree 7ac096bc57e71ff76f05691a76e53df06de24d62\nparent 2474f42ae95bffea7c0bc713f92322bfec4d59a7\nparent 16d3bb9106762710d2a5314ae4042674dad1b446\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1588496222 +0000\ncommitter GitHub <noreply@github.com> 1588496222 +0000\n\nMerge #4276\n\n4276: Don't count start of non-ASCII characters as being inside of them r=matklad a=lnicola\n\nI'm still not sure that `utf16_to_utf8_col` is correct for code points from Supplementary Planes. These have two UTF-16 code units, and I feel we're not going to count them correctly.\r\n\r\nFixes the crash in https://github.com/rust-analyzer/rust-analyzer/issues/4263#issuecomment-622988258.\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/682c079043656a55775eff33d806da517542f9eb", "html_url": "https://github.com/rust-lang/rust/commit/682c079043656a55775eff33d806da517542f9eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/682c079043656a55775eff33d806da517542f9eb/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2474f42ae95bffea7c0bc713f92322bfec4d59a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2474f42ae95bffea7c0bc713f92322bfec4d59a7", "html_url": "https://github.com/rust-lang/rust/commit/2474f42ae95bffea7c0bc713f92322bfec4d59a7"}, {"sha": "16d3bb9106762710d2a5314ae4042674dad1b446", "url": "https://api.github.com/repos/rust-lang/rust/commits/16d3bb9106762710d2a5314ae4042674dad1b446", "html_url": "https://github.com/rust-lang/rust/commit/16d3bb9106762710d2a5314ae4042674dad1b446"}], "stats": {"total": 12, "additions": 9, "deletions": 3}, "files": [{"sha": "212cb7b5bca10b045415c3206a74e9afc9027d9c", "filename": "crates/ra_ide_db/src/line_index.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/682c079043656a55775eff33d806da517542f9eb/crates%2Fra_ide_db%2Fsrc%2Fline_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/682c079043656a55775eff33d806da517542f9eb/crates%2Fra_ide_db%2Fsrc%2Fline_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fline_index.rs?ref=682c079043656a55775eff33d806da517542f9eb", "patch": "@@ -8,7 +8,9 @@ use superslice::Ext;\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct LineIndex {\n+    /// Offset the the beginning of each line, zero-based\n     pub(crate) newlines: Vec<TextSize>,\n+    /// List of non-ASCII characters on each line\n     pub(crate) utf16_lines: FxHashMap<u32, Vec<Utf16Char>>,\n }\n \n@@ -22,7 +24,9 @@ pub struct LineCol {\n \n #[derive(Clone, Debug, Hash, PartialEq, Eq)]\n pub(crate) struct Utf16Char {\n+    /// Start offset of a character inside a line, zero-based\n     pub(crate) start: TextSize,\n+    /// End offset of a character inside a line, zero-based\n     pub(crate) end: TextSize,\n }\n \n@@ -120,7 +124,7 @@ impl LineIndex {\n     fn utf16_to_utf8_col(&self, line: u32, mut col: u32) -> TextSize {\n         if let Some(utf16_chars) = self.utf16_lines.get(&line) {\n             for c in utf16_chars {\n-                if col >= u32::from(c.start) {\n+                if col > u32::from(c.start) {\n                     col += u32::from(c.len()) - 1;\n                 } else {\n                     // From here on, all utf16 characters come *after* the character we are mapping,\n@@ -226,8 +230,10 @@ const C: char = \\\"\u30e1 \u30e1\\\";\n         // UTF-16 to UTF-8\n         assert_eq!(col_index.utf16_to_utf8_col(1, 15), TextSize::from(15));\n \n-        assert_eq!(col_index.utf16_to_utf8_col(1, 18), TextSize::from(20));\n-        assert_eq!(col_index.utf16_to_utf8_col(1, 19), TextSize::from(23));\n+        // \u30e1 UTF-8: 0xE3 0x83 0xA1, UTF-16: 0x30E1\n+        assert_eq!(col_index.utf16_to_utf8_col(1, 17), TextSize::from(17)); // first \u30e1 at 17..20\n+        assert_eq!(col_index.utf16_to_utf8_col(1, 18), TextSize::from(20)); // space\n+        assert_eq!(col_index.utf16_to_utf8_col(1, 19), TextSize::from(21)); // second \u30e1 at 21..24\n \n         assert_eq!(col_index.utf16_to_utf8_col(2, 15), TextSize::from(15));\n     }"}]}