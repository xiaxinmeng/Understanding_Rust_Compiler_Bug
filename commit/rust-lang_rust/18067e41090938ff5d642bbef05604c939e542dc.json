{"sha": "18067e41090938ff5d642bbef05604c939e542dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MDY3ZTQxMDkwOTM4ZmY1ZDY0MmJiZWYwNTYwNGM5MzllNTQyZGM=", "commit": {"author": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2015-07-01T20:11:13Z"}, "committer": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2015-07-01T20:11:13Z"}, "message": "start on proper atomics", "tree": {"sha": "817a41d15ad579c685e5ca7142b32d30bb7caa96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/817a41d15ad579c685e5ca7142b32d30bb7caa96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18067e41090938ff5d642bbef05604c939e542dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18067e41090938ff5d642bbef05604c939e542dc", "html_url": "https://github.com/rust-lang/rust/commit/18067e41090938ff5d642bbef05604c939e542dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18067e41090938ff5d642bbef05604c939e542dc/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "108a697b1c225dafef16a77076e30149b1d0ebe7", "url": "https://api.github.com/repos/rust-lang/rust/commits/108a697b1c225dafef16a77076e30149b1d0ebe7", "html_url": "https://github.com/rust-lang/rust/commit/108a697b1c225dafef16a77076e30149b1d0ebe7"}], "stats": {"total": 49, "additions": 39, "deletions": 10}, "files": [{"sha": "71cfec3393e5319793aa95f073e6621435df3c7d", "filename": "concurrency.md", "status": "modified", "additions": 39, "deletions": 10, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/18067e41090938ff5d642bbef05604c939e542dc/concurrency.md", "raw_url": "https://github.com/rust-lang/rust/raw/18067e41090938ff5d642bbef05604c939e542dc/concurrency.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/concurrency.md?ref=18067e41090938ff5d642bbef05604c939e542dc", "patch": "@@ -154,15 +154,44 @@ only to data races?\n \n # Atomics\n \n-Rust pretty blatantly just inherits LLVM's model for atomics, which in turn is\n-largely based off of the C11 model for atomics. This is not due these models\n-being particularly excellent or easy to understand. Indeed, these models are\n-quite complex and are known to have several flaws. Rather, it is a pragmatic\n-concession to the fact that *everyone* is pretty bad at modeling atomics. At very\n-least, we can benefit from existing tooling and research around C's model.\n+Rust pretty blatantly just inherits C11's memory model for atomics. This is not\n+due this model being particularly excellent or easy to understand. Indeed, this\n+model is quite complex and known to have [several flaws][C11-busted]. Rather,\n+it is a pragmatic concession to the fact that *everyone* is pretty bad at modeling\n+atomics. At very least, we can benefit from existing tooling and research around\n+C.\n \n-Trying to fully explain these models is fairly hopeless, so we're just going to\n-drop that problem in LLVM's lap.\n+Trying to fully explain the model is fairly hopeless. If you want all the\n+nitty-gritty details, you should check out [C's specification][C11-model].\n+Still, we'll try to cover the basics and some of the problems Rust developers\n+face.\n+\n+The C11 memory model is fundamentally about trying to bridge the gap between C's\n+single-threaded semantics, common compiler optimizations, and hardware peculiarities\n+in the face of a multi-threaded environment. It does this by splitting memory\n+accesses into two worlds: data accesses, and atomic accesses.\n+\n+Data accesses are the bread-and-butter of the programming world. They are\n+fundamentally unsynchronized and compilers are free to aggressively optimize\n+them. In particular data accesses are free to be reordered by the compiler\n+on the assumption that the program is single-threaded. The hardware is also free\n+to propagate the changes made in data accesses as lazily and inconsistently as\n+it wants to other threads. Mostly critically, data accesses are where we get data\n+races. These are pretty clearly awful semantics to try to write a multi-threaded\n+program with.\n+\n+Atomic accesses are the answer to this. Each atomic access can be marked with\n+an *ordering*. The set of orderings Rust exposes are:\n+\n+* Sequentially Consistent (SeqCst)\n+* Release\n+* Acquire\n+* Relaxed\n+\n+(Note: We explicitly do not expose the C11 *consume* ordering)\n+\n+TODO: give simple \"basic\" explanation of these\n+TODO: implementing Arc example (why does Drop need the trailing barrier?)\n \n \n \n@@ -184,5 +213,5 @@ with everyone else's stuff.\n \n \n \n-[llvm-conc]: http://llvm.org/docs/Atomics.html\n-[trpl-conc]: https://doc.rust-lang.org/book/concurrency.html\n+[C11-busted]: http://plv.mpi-sws.org/c11comp/popl15.pdf\n+[C11-model]: http://en.cppreference.com/w/c/atomic/memory_order"}]}