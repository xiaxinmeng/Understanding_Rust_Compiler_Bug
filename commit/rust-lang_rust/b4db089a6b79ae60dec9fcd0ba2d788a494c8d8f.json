{"sha": "b4db089a6b79ae60dec9fcd0ba2d788a494c8d8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ZGIwODlhNmI3OWFlNjBkZWM5ZmNkMGJhMmQ3ODhhNDk0YzhkOGY=", "commit": {"author": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-02-24T19:13:10Z"}, "committer": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-02-24T19:13:10Z"}, "message": "add error handling to fetchArtifactReleaseInfo(), throw Error when no artifact found", "tree": {"sha": "b463517f7793852fd90636543fde4a0a158666b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b463517f7793852fd90636543fde4a0a158666b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4db089a6b79ae60dec9fcd0ba2d788a494c8d8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4db089a6b79ae60dec9fcd0ba2d788a494c8d8f", "html_url": "https://github.com/rust-lang/rust/commit/b4db089a6b79ae60dec9fcd0ba2d788a494c8d8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4db089a6b79ae60dec9fcd0ba2d788a494c8d8f/comments", "author": null, "committer": null, "parents": [{"sha": "bd4ea87f7442541123e3bbd7e17bfecdfb3c18c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd4ea87f7442541123e3bbd7e17bfecdfb3c18c6", "html_url": "https://github.com/rust-lang/rust/commit/bd4ea87f7442541123e3bbd7e17bfecdfb3c18c6"}], "stats": {"total": 56, "additions": 37, "deletions": 19}, "files": [{"sha": "5e201afb0a4d3fcd0476a19b66fc5c77e0926ff9", "filename": "editors/code/src/installation/fetch_artifact_release_info.ts", "status": "modified", "additions": 37, "deletions": 19, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/b4db089a6b79ae60dec9fcd0ba2d788a494c8d8f/editors%2Fcode%2Fsrc%2Finstallation%2Ffetch_artifact_release_info.ts", "raw_url": "https://github.com/rust-lang/rust/raw/b4db089a6b79ae60dec9fcd0ba2d788a494c8d8f/editors%2Fcode%2Fsrc%2Finstallation%2Ffetch_artifact_release_info.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finstallation%2Ffetch_artifact_release_info.ts?ref=b4db089a6b79ae60dec9fcd0ba2d788a494c8d8f", "patch": "@@ -4,41 +4,59 @@ import { log } from \"../util\";\n \n const GITHUB_API_ENDPOINT_URL = \"https://api.github.com\";\n \n-\n /**\n- * Fetches the release with `releaseTag` (or just latest release when not specified)\n- * from GitHub `repo` and returns metadata about `artifactFileName` shipped with\n- * this release or `null` if no such artifact was published.\n+ * Fetches the release with `releaseTag` from GitHub `repo` and\n+ * returns metadata about `artifactFileName` shipped with\n+ * this release.\n+ *\n+ * @throws Error upon network failure or if no such repository, release, or artifact exists.\n  */\n export async function fetchArtifactReleaseInfo(\n-    repo: GithubRepo, artifactFileName: string, releaseTag?: string\n-): Promise<null | ArtifactReleaseInfo> {\n+    repo: GithubRepo,\n+    artifactFileName: string,\n+    releaseTag: string\n+): Promise<ArtifactReleaseInfo> {\n \n     const repoOwner = encodeURIComponent(repo.owner);\n     const repoName = encodeURIComponent(repo.name);\n \n-    const apiEndpointPath = releaseTag\n-        ? `/repos/${repoOwner}/${repoName}/releases/tags/${releaseTag}`\n-        : `/repos/${repoOwner}/${repoName}/releases/latest`;\n+    const apiEndpointPath = `/repos/${repoOwner}/${repoName}/releases/tags/${releaseTag}`;\n \n     const requestUrl = GITHUB_API_ENDPOINT_URL + apiEndpointPath;\n \n-    // We skip runtime type checks for simplicity (here we cast from `any` to `GithubRelease`)\n-\n     log.debug(\"Issuing request for released artifacts metadata to\", requestUrl);\n \n-    // FIXME: handle non-ok response\n-    const response: GithubRelease = await fetch(requestUrl, {\n-        headers: { Accept: \"application/vnd.github.v3+json\" }\n-    })\n-        .then(res => res.json());\n+    const response = await fetch(requestUrl, { headers: { Accept: \"application/vnd.github.v3+json\" } });\n+\n+    if (!response.ok) {\n+        log.error(\"Error fetching artifact release info\", {\n+            requestUrl,\n+            releaseTag,\n+            artifactFileName,\n+            response: {\n+                headers: response.headers,\n+                status: response.status,\n+                body: await response.text(),\n+            }\n+        });\n+\n+        throw new Error(\n+            `Got response ${response.status} when trying to fetch ` +\n+            `\"${artifactFileName}\" artifact release info for ${releaseTag} release`\n+        );\n+    }\n+\n+    // We skip runtime type checks for simplicity (here we cast from `any` to `GithubRelease`)\n+    const release: GithubRelease = await response.json();\n \n-    const artifact = response.assets.find(artifact => artifact.name === artifactFileName);\n+    const artifact = release.assets.find(artifact => artifact.name === artifactFileName);\n \n-    if (!artifact) return null;\n+    if (!artifact) throw new Error(\n+        `Artifact ${artifactFileName} was not found in ${release.name} release!`\n+    );\n \n     return {\n-        releaseName: response.name,\n+        releaseName: release.name,\n         downloadUrl: artifact.browser_download_url\n     };\n "}]}