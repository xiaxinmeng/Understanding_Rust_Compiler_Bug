{"sha": "350a34f85c0ed53315a2114f0001cfea4fe116d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1MGEzNGY4NWMwZWQ1MzMxNWEyMTE0ZjAwMDFjZmVhNGZlMTE2ZDk=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-05T10:24:54Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-06T11:04:02Z"}, "message": "syntax: Use `Token` in some more places", "tree": {"sha": "e9a92eaa132a515754574e39c588cbb01e6b5ef6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9a92eaa132a515754574e39c588cbb01e6b5ef6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/350a34f85c0ed53315a2114f0001cfea4fe116d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/350a34f85c0ed53315a2114f0001cfea4fe116d9", "html_url": "https://github.com/rust-lang/rust/commit/350a34f85c0ed53315a2114f0001cfea4fe116d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/350a34f85c0ed53315a2114f0001cfea4fe116d9/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f745e5f9b676be02cc1dfbab0bfb338dc72b4dd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f745e5f9b676be02cc1dfbab0bfb338dc72b4dd3", "html_url": "https://github.com/rust-lang/rust/commit/f745e5f9b676be02cc1dfbab0bfb338dc72b4dd3"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "cc16bac320d0ea66d64248e07a11809689ce57fa", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/350a34f85c0ed53315a2114f0001cfea4fe116d9/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/350a34f85c0ed53315a2114f0001cfea4fe116d9/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=350a34f85c0ed53315a2114f0001cfea4fe116d9", "patch": "@@ -560,7 +560,7 @@ impl MetaItemKind {\n             Some(TokenTree::Token(token)) if token == token::Eq => {\n                 tokens.next();\n                 return if let Some(TokenTree::Token(token)) = tokens.next() {\n-                    Lit::from_token(&token, token.span).ok().map(MetaItemKind::NameValue)\n+                    Lit::from_token(&token).ok().map(MetaItemKind::NameValue)\n                 } else {\n                     None\n                 };\n@@ -605,7 +605,7 @@ impl NestedMetaItem {\n         where I: Iterator<Item = TokenTree>,\n     {\n         if let Some(TokenTree::Token(token)) = tokens.peek() {\n-            if let Ok(lit) = Lit::from_token(token, token.span) {\n+            if let Ok(lit) = Lit::from_token(token) {\n                 tokens.next();\n                 return Some(NestedMetaItem::Literal(lit));\n             }"}, {"sha": "7b213655abdbf35eca8184280800e735acb20b44", "filename": "src/libsyntax/parse/literal.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/350a34f85c0ed53315a2114f0001cfea4fe116d9/src%2Flibsyntax%2Fparse%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/350a34f85c0ed53315a2114f0001cfea4fe116d9/src%2Flibsyntax%2Fparse%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fliteral.rs?ref=350a34f85c0ed53315a2114f0001cfea4fe116d9", "patch": "@@ -228,8 +228,8 @@ impl Lit {\n     }\n \n     /// Converts arbitrary token into an AST literal.\n-    crate fn from_token(token: &TokenKind, span: Span) -> Result<Lit, LitError> {\n-        let lit = match *token {\n+    crate fn from_token(token: &Token) -> Result<Lit, LitError> {\n+        let lit = match token.kind {\n             token::Ident(name, false) if name == kw::True || name == kw::False =>\n                 token::Lit::new(token::Bool, name, None),\n             token::Literal(lit) =>\n@@ -245,7 +245,7 @@ impl Lit {\n             _ => return Err(LitError::NotLiteral)\n         };\n \n-        Lit::from_lit_token(lit, span)\n+        Lit::from_lit_token(lit, token.span)\n     }\n \n     /// Attempts to recover an AST literal from semantic literal.\n@@ -297,7 +297,7 @@ impl<'a> Parser<'a> {\n         }\n \n         let token = recovered.as_ref().unwrap_or(&self.token);\n-        match Lit::from_token(token, token.span) {\n+        match Lit::from_token(token) {\n             Ok(lit) => {\n                 self.bump();\n                 Ok(lit)"}]}