{"sha": "fdd030127cc68afec44a8d3f6341525dd34e50ae", "node_id": "C_kwDOAAsO6NoAKGZkZDAzMDEyN2NjNjhhZmVjNDRhOGQzZjYzNDE1MjVkZDM0ZTUwYWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-18T12:55:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-18T12:55:15Z"}, "message": "Auto merge of #111721 - Dylan-DPC:rollup-9jw6b7k, r=Dylan-DPC\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #110986 (Delay a bug when overwriting fed value.)\n - #111054 (Do not recover when parsing stmt in cfg-eval.)\n - #111685 (Fix typo in bootstrap command description)\n - #111686 (Retire is_foreign_item query.)\n - #111695 (Exclude inherent projections from some alias type `match`es)\n - #111703 (Merge query property modules into one)\n - #111707 (Remove unused `impl<T> WorkerLocal<Vec<T>>`.)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "9841f89d8d129bcc28ee7c033669d0b25cb28cd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9841f89d8d129bcc28ee7c033669d0b25cb28cd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdd030127cc68afec44a8d3f6341525dd34e50ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdd030127cc68afec44a8d3f6341525dd34e50ae", "html_url": "https://github.com/rust-lang/rust/commit/fdd030127cc68afec44a8d3f6341525dd34e50ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdd030127cc68afec44a8d3f6341525dd34e50ae/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba6f5e3b4d60ea5a847cd4402cca594cd40b218f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba6f5e3b4d60ea5a847cd4402cca594cd40b218f", "html_url": "https://github.com/rust-lang/rust/commit/ba6f5e3b4d60ea5a847cd4402cca594cd40b218f"}, {"sha": "ad214ac02b1188df56008b40b7c648a87081e815", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad214ac02b1188df56008b40b7c648a87081e815", "html_url": "https://github.com/rust-lang/rust/commit/ad214ac02b1188df56008b40b7c648a87081e815"}], "stats": {"total": 396, "additions": 219, "deletions": 177}, "files": [{"sha": "ed91cea4ae26ae1dcb29a8cb393386b79a9ce867", "filename": "compiler/rustc_builtin_macros/src/cfg_eval.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fdd030127cc68afec44a8d3f6341525dd34e50ae/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd030127cc68afec44a8d3f6341525dd34e50ae/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs?ref=fdd030127cc68afec44a8d3f6341525dd34e50ae", "patch": "@@ -166,7 +166,9 @@ impl CfgEval<'_, '_> {\n                     ))\n                 },\n                 Annotatable::Stmt(_) => |parser| {\n-                    Ok(Annotatable::Stmt(P(parser.parse_stmt(ForceCollect::Yes)?.unwrap())))\n+                    Ok(Annotatable::Stmt(P(parser\n+                        .parse_stmt_without_recovery(false, ForceCollect::Yes)?\n+                        .unwrap())))\n                 },\n                 Annotatable::Expr(_) => {\n                     |parser| Ok(Annotatable::Expr(parser.parse_expr_force_collect()?))"}, {"sha": "d61bb55be6836968d87f1cf09a86a0300eba266f", "filename": "compiler/rustc_data_structures/src/sync/worker_local.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fdd030127cc68afec44a8d3f6341525dd34e50ae/compiler%2Frustc_data_structures%2Fsrc%2Fsync%2Fworker_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd030127cc68afec44a8d3f6341525dd34e50ae/compiler%2Frustc_data_structures%2Fsrc%2Fsync%2Fworker_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsync%2Fworker_local.rs?ref=fdd030127cc68afec44a8d3f6341525dd34e50ae", "patch": "@@ -154,13 +154,6 @@ impl<T> WorkerLocal<T> {\n     }\n }\n \n-impl<T> WorkerLocal<Vec<T>> {\n-    /// Joins the elements of all the worker locals into one Vec\n-    pub fn join(self) -> Vec<T> {\n-        self.into_inner().into_iter().flat_map(|v| v).collect()\n-    }\n-}\n-\n impl<T> Deref for WorkerLocal<T> {\n     type Target = T;\n "}, {"sha": "22502bd4fdb98b28f68f81ff8d3b0052d71dedbc", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fdd030127cc68afec44a8d3f6341525dd34e50ae/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd030127cc68afec44a8d3f6341525dd34e50ae/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=fdd030127cc68afec44a8d3f6341525dd34e50ae", "patch": "@@ -73,7 +73,6 @@ pub fn provide(providers: &mut Providers) {\n         fn_sig,\n         impl_trait_ref,\n         impl_polarity,\n-        is_foreign_item,\n         generator_kind,\n         collect_mod_item_types,\n         is_type_alias_impl_trait,\n@@ -1466,10 +1465,6 @@ fn compute_sig_of_foreign_fn_decl<'tcx>(\n     fty\n }\n \n-fn is_foreign_item(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool {\n-    matches!(tcx.hir().get_by_def_id(def_id), Node::ForeignItem(..))\n-}\n-\n fn generator_kind(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<hir::GeneratorKind> {\n     match tcx.hir().get_by_def_id(def_id) {\n         Node::Expr(&rustc_hir::Expr {"}, {"sha": "d0d41c614d6080436022f495ac298e9b6cc5c4c0", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fdd030127cc68afec44a8d3f6341525dd34e50ae/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd030127cc68afec44a8d3f6341525dd34e50ae/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=fdd030127cc68afec44a8d3f6341525dd34e50ae", "patch": "@@ -253,7 +253,7 @@ fn add_query_desc_cached_impl(\n         quote! {\n             #[allow(unused_variables, unused_braces, rustc::pass_by_value)]\n             #[inline]\n-            pub fn #name<'tcx>(#tcx: TyCtxt<'tcx>, #key: &crate::query::query_keys::#name<'tcx>) -> bool {\n+            pub fn #name<'tcx>(#tcx: TyCtxt<'tcx>, #key: &crate::query::queries::#name::Key<'tcx>) -> bool {\n                 #expr\n             }\n         }\n@@ -262,7 +262,7 @@ fn add_query_desc_cached_impl(\n             // we're taking `key` by reference, but some rustc types usually prefer being passed by value\n             #[allow(rustc::pass_by_value)]\n             #[inline]\n-            pub fn #name<'tcx>(_: TyCtxt<'tcx>, _: &crate::query::query_keys::#name<'tcx>) -> bool {\n+            pub fn #name<'tcx>(_: TyCtxt<'tcx>, _: &crate::query::queries::#name::Key<'tcx>) -> bool {\n                 false\n             }\n         }\n@@ -273,7 +273,7 @@ fn add_query_desc_cached_impl(\n \n     let desc = quote! {\n         #[allow(unused_variables)]\n-        pub fn #name<'tcx>(tcx: TyCtxt<'tcx>, key: crate::query::query_keys::#name<'tcx>) -> String {\n+        pub fn #name<'tcx>(tcx: TyCtxt<'tcx>, key: crate::query::queries::#name::Key<'tcx>) -> String {\n             let (#tcx, #key) = (tcx, key);\n             ::rustc_middle::ty::print::with_no_trimmed_paths!(\n                 format!(#desc)"}, {"sha": "deafad394b8219528034e37170a7cab8c7b3a695", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fdd030127cc68afec44a8d3f6341525dd34e50ae/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd030127cc68afec44a8d3f6341525dd34e50ae/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=fdd030127cc68afec44a8d3f6341525dd34e50ae", "patch": "@@ -1251,14 +1251,6 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         }\n     }\n \n-    fn is_foreign_item(self, id: DefIndex) -> bool {\n-        if let Some(parent) = self.def_key(id).parent {\n-            matches!(self.def_kind(parent), DefKind::ForeignMod)\n-        } else {\n-            false\n-        }\n-    }\n-\n     #[inline]\n     fn def_key(self, index: DefIndex) -> DefKey {\n         *self"}, {"sha": "364269095e01199832d94206bb3ebce128b16d6c", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fdd030127cc68afec44a8d3f6341525dd34e50ae/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd030127cc68afec44a8d3f6341525dd34e50ae/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=fdd030127cc68afec44a8d3f6341525dd34e50ae", "patch": "@@ -114,8 +114,8 @@ macro_rules! provide_one {\n     ($tcx:ident, $def_id:ident, $other:ident, $cdata:ident, $name:ident => $compute:block) => {\n         fn $name<'tcx>(\n             $tcx: TyCtxt<'tcx>,\n-            def_id_arg: rustc_middle::query::query_keys::$name<'tcx>,\n-        ) -> rustc_middle::query::query_provided::$name<'tcx> {\n+            def_id_arg: rustc_middle::query::queries::$name::Key<'tcx>,\n+        ) -> rustc_middle::query::queries::$name::ProvidedValue<'tcx> {\n             let _prof_timer =\n                 $tcx.prof.generic_activity(concat!(\"metadata_decode_entry_\", stringify!($name)));\n \n@@ -280,7 +280,6 @@ provide! { tcx, def_id, other, cdata,\n     }\n     associated_item => { cdata.get_associated_item(def_id.index, tcx.sess) }\n     inherent_impls => { cdata.get_inherent_implementations_for_type(tcx, def_id.index) }\n-    is_foreign_item => { cdata.is_foreign_item(def_id.index) }\n     item_attrs => { tcx.arena.alloc_from_iter(cdata.get_item_attrs(def_id.index, tcx.sess)) }\n     is_mir_available => { cdata.is_item_mir_available(def_id.index) }\n     is_ctfe_mir_available => { cdata.is_ctfe_mir_available(def_id.index) }"}, {"sha": "ac0b2844177f373da1ff41ae35a2e3c05d373423", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fdd030127cc68afec44a8d3f6341525dd34e50ae/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd030127cc68afec44a8d3f6341525dd34e50ae/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=fdd030127cc68afec44a8d3f6341525dd34e50ae", "patch": "@@ -10,6 +10,7 @@ use crate::query::Providers;\n use crate::ty::{EarlyBinder, ImplSubject, TyCtxt};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::{par_for_each_in, DynSend, DynSync};\n+use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::*;\n use rustc_query_system::ich::StableHashingContext;\n@@ -110,6 +111,12 @@ impl<'tcx> TyCtxt<'tcx> {\n             None => self.type_of(def_id).map_bound(ImplSubject::Inherent),\n         }\n     }\n+\n+    /// Returns `true` if this is a foreign item (i.e., linked via `extern { ... }`).\n+    pub fn is_foreign_item(self, def_id: impl Into<DefId>) -> bool {\n+        self.opt_parent(def_id.into())\n+            .map_or(false, |parent| matches!(self.def_kind(parent), DefKind::ForeignMod))\n+    }\n }\n \n pub fn provide(providers: &mut Providers) {"}, {"sha": "12c94dc46760db10d2e7e4643593df3a5a757101", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fdd030127cc68afec44a8d3f6341525dd34e50ae/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd030127cc68afec44a8d3f6341525dd34e50ae/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=fdd030127cc68afec44a8d3f6341525dd34e50ae", "patch": "@@ -726,12 +726,6 @@ rustc_queries! {\n         desc { |tcx| \"checking if item is promotable: `{}`\", tcx.def_path_str(key) }\n     }\n \n-    /// Returns `true` if this is a foreign item (i.e., linked via `extern { ... }`).\n-    query is_foreign_item(key: DefId) -> bool {\n-        desc { |tcx| \"checking if `{}` is a foreign item\", tcx.def_path_str(key) }\n-        separate_provide_extern\n-    }\n-\n     /// Returns `Some(generator_kind)` if the node pointed to by `def_id` is a generator.\n     query generator_kind(def_id: DefId) -> Option<hir::GeneratorKind> {\n         desc { |tcx| \"looking up generator kind of `{}`\", tcx.def_path_str(def_id) }"}, {"sha": "8d088b68e59271d0f642635691edbbee2126da80", "filename": "compiler/rustc_middle/src/query/plumbing.rs", "status": "modified", "additions": 77, "deletions": 98, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/fdd030127cc68afec44a8d3f6341525dd34e50ae/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd030127cc68afec44a8d3f6341525dd34e50ae/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fplumbing.rs?ref=fdd030127cc68afec44a8d3f6341525dd34e50ae", "patch": "@@ -221,8 +221,8 @@ macro_rules! separate_provide_extern_decl {\n     ([(separate_provide_extern) $($rest:tt)*][$name:ident]) => {\n         for<'tcx> fn(\n             TyCtxt<'tcx>,\n-            query_keys::$name<'tcx>,\n-        ) -> query_provided::$name<'tcx>\n+            queries::$name::Key<'tcx>,\n+        ) -> queries::$name::ProvidedValue<'tcx>\n     };\n     ([$other:tt $($modifiers:tt)*][$($args:tt)*]) => {\n         separate_provide_extern_decl!([$($modifiers)*][$($args)*])\n@@ -252,60 +252,37 @@ macro_rules! define_callbacks {\n      $($(#[$attr:meta])*\n         [$($modifiers:tt)*] fn $name:ident($($K:tt)*) -> $V:ty,)*) => {\n \n-        // HACK(eddyb) this is like the `impl QueryConfig for queries::$name`\n-        // below, but using type aliases instead of associated types, to bypass\n-        // the limitations around normalizing under HRTB - for example, this:\n-        // `for<'tcx> fn(...) -> <queries::$name<'tcx> as QueryConfig<TyCtxt<'tcx>>>::Value`\n-        // doesn't currently normalize to `for<'tcx> fn(...) -> query_values::$name<'tcx>`.\n-        // This is primarily used by the `provide!` macro in `rustc_metadata`.\n-        #[allow(nonstandard_style, unused_lifetimes)]\n-        pub mod query_keys {\n-            use super::*;\n-\n-            $(pub type $name<'tcx> = $($K)*;)*\n-        }\n-        #[allow(nonstandard_style, unused_lifetimes)]\n-        pub mod query_keys_local {\n-            use super::*;\n-\n-            $(pub type $name<'tcx> = local_key_if_separate_extern!([$($modifiers)*] $($K)*);)*\n-        }\n-        #[allow(nonstandard_style, unused_lifetimes)]\n-        pub mod query_values {\n-            use super::*;\n+        #[allow(unused_lifetimes)]\n+        pub mod queries {\n+            $(pub mod $name {\n+                use super::super::*;\n \n-            $(pub type $name<'tcx> = $V;)*\n-        }\n+                pub type Key<'tcx> = $($K)*;\n+                pub type Value<'tcx> = $V;\n \n-        /// This module specifies the type returned from query providers and the type used for\n-        /// decoding. For regular queries this is the declared returned type `V`, but\n-        /// `arena_cache` will use `<V as Deref>::Target` instead.\n-        #[allow(nonstandard_style, unused_lifetimes)]\n-        pub mod query_provided {\n-            use super::*;\n+                pub type LocalKey<'tcx> = local_key_if_separate_extern!([$($modifiers)*] $($K)*);\n \n-            $(\n-                pub type $name<'tcx> = query_if_arena!([$($modifiers)*] (<$V as Deref>::Target) ($V));\n-            )*\n-        }\n-\n-        /// This module has a function per query which takes a `query_provided` value and coverts\n-        /// it to a regular `V` value by allocating it on an arena if the query has the\n-        /// `arena_cache` modifier. This will happen when computing the query using a provider or\n-        /// decoding a stored result.\n-        #[allow(nonstandard_style, unused_lifetimes)]\n-        pub mod query_provided_to_value {\n-            use super::*;\n+                /// This type alias specifies the type returned from query providers and the type\n+                /// used for decoding. For regular queries this is the declared returned type `V`,\n+                /// but `arena_cache` will use `<V as Deref>::Target` instead.\n+                pub type ProvidedValue<'tcx> = query_if_arena!(\n+                    [$($modifiers)*]\n+                    (<$V as Deref>::Target)\n+                    ($V)\n+                );\n \n-            $(\n+                /// This function takes `ProvidedValue` and coverts it to an erased `Value` by\n+                /// allocating it on an arena if the query has the `arena_cache` modifier. The\n+                /// value is then erased and returned. This will happen when computing the query\n+                /// using a provider or decoding a stored result.\n                 #[inline(always)]\n-                pub fn $name<'tcx>(\n+                pub fn provided_to_erased<'tcx>(\n                     _tcx: TyCtxt<'tcx>,\n-                    value: query_provided::$name<'tcx>,\n-                ) -> Erase<query_values::$name<'tcx>> {\n+                    value: ProvidedValue<'tcx>,\n+                ) -> Erase<Value<'tcx>> {\n                     erase(query_if_arena!([$($modifiers)*]\n                         {\n-                            if mem::needs_drop::<query_provided::$name<'tcx>>() {\n+                            if mem::needs_drop::<ProvidedValue<'tcx>>() {\n                                 &*_tcx.query_system.arenas.$name.alloc(value)\n                             } else {\n                                 &*_tcx.arena.dropless.alloc(value)\n@@ -314,47 +291,41 @@ macro_rules! define_callbacks {\n                         (value)\n                     ))\n                 }\n-            )*\n-        }\n-        #[allow(nonstandard_style, unused_lifetimes)]\n-        pub mod query_storage {\n-            use super::*;\n \n-            $(\n-                pub type $name<'tcx> = <<$($K)* as Key>::CacheSelector as CacheSelector<'tcx, Erase<$V>>>::Cache;\n-            )*\n+                pub type Storage<'tcx> = <\n+                    <$($K)* as keys::Key>::CacheSelector as CacheSelector<'tcx, Erase<$V>>\n+                >::Cache;\n+\n+                // Ensure that keys grow no larger than 64 bytes\n+                #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n+                const _: () = {\n+                    if mem::size_of::<Key<'static>>() > 64 {\n+                        panic!(\"{}\", concat!(\n+                            \"the query `\",\n+                            stringify!($name),\n+                            \"` has a key type `\",\n+                            stringify!($($K)*),\n+                            \"` that is too large\"\n+                        ));\n+                    }\n+                };\n+\n+                // Ensure that values grow no larger than 64 bytes\n+                #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n+                const _: () = {\n+                    if mem::size_of::<Value<'static>>() > 64 {\n+                        panic!(\"{}\", concat!(\n+                            \"the query `\",\n+                            stringify!($name),\n+                            \"` has a value type `\",\n+                            stringify!($V),\n+                            \"` that is too large\"\n+                        ));\n+                    }\n+                };\n+            })*\n         }\n \n-        $(\n-            // Ensure that keys grow no larger than 64 bytes\n-            #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-            const _: () = {\n-                if mem::size_of::<query_keys::$name<'static>>() > 64 {\n-                    panic!(\"{}\", concat!(\n-                        \"the query `\",\n-                        stringify!($name),\n-                        \"` has a key type `\",\n-                        stringify!($($K)*),\n-                        \"` that is too large\"\n-                    ));\n-                }\n-            };\n-\n-            // Ensure that values grow no larger than 64 bytes\n-            #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-            const _: () = {\n-                if mem::size_of::<query_values::$name<'static>>() > 64 {\n-                    panic!(\"{}\", concat!(\n-                        \"the query `\",\n-                        stringify!($name),\n-                        \"` has a value type `\",\n-                        stringify!($V),\n-                        \"` that is too large\"\n-                    ));\n-                }\n-            };\n-        )*\n-\n         pub struct QueryArenas<'tcx> {\n             $($(#[$attr])* pub $name: query_if_arena!([$($modifiers)*]\n                 (WorkerLocal<TypedArena<<$V as Deref>::Target>>)\n@@ -375,7 +346,7 @@ macro_rules! define_callbacks {\n \n         #[derive(Default)]\n         pub struct QueryCaches<'tcx> {\n-            $($(#[$attr])* pub $name: query_storage::$name<'tcx>,)*\n+            $($(#[$attr])* pub $name: queries::$name::Storage<'tcx>,)*\n         }\n \n         impl<'tcx> TyCtxtEnsure<'tcx> {\n@@ -433,7 +404,7 @@ macro_rules! define_callbacks {\n \n         pub struct DynamicQueries<'tcx> {\n             $(\n-                pub $name: DynamicQuery<'tcx, query_storage::$name<'tcx>>,\n+                pub $name: DynamicQuery<'tcx, queries::$name::Storage<'tcx>>,\n             )*\n         }\n \n@@ -447,8 +418,8 @@ macro_rules! define_callbacks {\n         pub struct Providers {\n             $(pub $name: for<'tcx> fn(\n                 TyCtxt<'tcx>,\n-                query_keys_local::$name<'tcx>,\n-            ) -> query_provided::$name<'tcx>,)*\n+                queries::$name::LocalKey<'tcx>,\n+            ) -> queries::$name::ProvidedValue<'tcx>,)*\n         }\n \n         pub struct ExternProviders {\n@@ -493,7 +464,7 @@ macro_rules! define_callbacks {\n             $(pub $name: for<'tcx> fn(\n                 TyCtxt<'tcx>,\n                 Span,\n-                query_keys::$name<'tcx>,\n+                queries::$name::Key<'tcx>,\n                 QueryMode,\n             ) -> Option<Erase<$V>>,)*\n         }\n@@ -517,11 +488,11 @@ macro_rules! define_feedable {\n         $(impl<'tcx, K: IntoQueryParam<$($K)*> + Copy> TyCtxtFeed<'tcx, K> {\n             $(#[$attr])*\n             #[inline(always)]\n-            pub fn $name(self, value: query_provided::$name<'tcx>) {\n+            pub fn $name(self, value: queries::$name::ProvidedValue<'tcx>) {\n                 let key = self.key().into_query_param();\n \n                 let tcx = self.tcx;\n-                let erased = query_provided_to_value::$name(tcx, value);\n+                let erased = queries::$name::provided_to_erased(tcx, value);\n                 let value = restore::<$V>(erased);\n                 let cache = &tcx.query_system.caches.$name;\n \n@@ -533,12 +504,20 @@ macro_rules! define_feedable {\n                             let (value_hash, old_hash): (Fingerprint, Fingerprint) = tcx.with_stable_hashing_context(|mut hcx|\n                                 (hasher(&mut hcx, &value), hasher(&mut hcx, &old))\n                             );\n-                            assert_eq!(\n-                                old_hash, value_hash,\n-                                \"Trying to feed an already recorded value for query {} key={key:?}:\\nold value: {old:?}\\nnew value: {value:?}\",\n-                                stringify!($name),\n-                            )\n+                            if old_hash != value_hash {\n+                                // We have an inconsistency. This can happen if one of the two\n+                                // results is tainted by errors. In this case, delay a bug to\n+                                // ensure compilation is doomed, and keep the `old` value.\n+                                tcx.sess.delay_span_bug(DUMMY_SP, format!(\n+                                    \"Trying to feed an already recorded value for query {} key={key:?}:\\n\\\n+                                    old value: {old:?}\\nnew value: {value:?}\",\n+                                    stringify!($name),\n+                                ));\n+                            }\n                         } else {\n+                            // The query is `no_hash`, so we have no way to perform a sanity check.\n+                            // If feeding the same value multiple times needs to be supported,\n+                            // the query should not be marked `no_hash`.\n                             bug!(\n                                 \"Trying to feed an already recorded value for query {} key={key:?}:\\nold value: {old:?}\\nnew value: {value:?}\",\n                                 stringify!($name),"}, {"sha": "54f9fc5d2b99964efadacf27d90df7b1339ae6dc", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fdd030127cc68afec44a8d3f6341525dd34e50ae/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd030127cc68afec44a8d3f6341525dd34e50ae/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=fdd030127cc68afec44a8d3f6341525dd34e50ae", "patch": "@@ -40,7 +40,8 @@ impl<'a> Parser<'a> {\n \n     /// If `force_collect` is [`ForceCollect::Yes`], forces collection of tokens regardless of whether\n     /// or not we have attributes\n-    pub(crate) fn parse_stmt_without_recovery(\n+    // Public for `cfg_eval` macro expansion.\n+    pub fn parse_stmt_without_recovery(\n         &mut self,\n         capture_semi: bool,\n         force_collect: ForceCollect,"}, {"sha": "7afcbebe274b3411132c200f2b08985b15389c83", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fdd030127cc68afec44a8d3f6341525dd34e50ae/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd030127cc68afec44a8d3f6341525dd34e50ae/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=fdd030127cc68afec44a8d3f6341525dd34e50ae", "patch": "@@ -15,7 +15,7 @@\n #[macro_use]\n extern crate rustc_middle;\n \n-use crate::plumbing::{encode_all_query_results, try_mark_green};\n+use crate::plumbing::{__rust_begin_short_backtrace, encode_all_query_results, try_mark_green};\n use field_offset::offset_of;\n use rustc_data_structures::stable_hasher::HashStable;\n use rustc_data_structures::sync::AtomicU64;\n@@ -27,8 +27,7 @@ use rustc_middle::query::on_disk_cache::OnDiskCache;\n use rustc_middle::query::plumbing::{DynamicQuery, QuerySystem, QuerySystemFns};\n use rustc_middle::query::AsLocalKey;\n use rustc_middle::query::{\n-    query_keys, query_provided, query_provided_to_value, query_storage, query_values,\n-    DynamicQueries, ExternProviders, Providers, QueryCaches, QueryEngine, QueryStates,\n+    queries, DynamicQueries, ExternProviders, Providers, QueryCaches, QueryEngine, QueryStates,\n };\n use rustc_middle::ty::TyCtxt;\n use rustc_query_system::dep_graph::SerializedDepNodeIndex;"}, {"sha": "ebbf69a1007141789dfb24fd74625c402433927d", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/fdd030127cc68afec44a8d3f6341525dd34e50ae/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd030127cc68afec44a8d3f6341525dd34e50ae/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=fdd030127cc68afec44a8d3f6341525dd34e50ae", "patch": "@@ -518,11 +518,11 @@ macro_rules! define_queries {\n                     pub fn __rust_end_short_backtrace<'tcx>(\n                         tcx: TyCtxt<'tcx>,\n                         span: Span,\n-                        key: query_keys::$name<'tcx>,\n+                        key: queries::$name::Key<'tcx>,\n                         mode: QueryMode,\n-                    ) -> Option<Erase<query_values::$name<'tcx>>> {\n+                    ) -> Option<Erase<queries::$name::Value<'tcx>>> {\n                         get_query_incr(\n-                            queries::$name::config(tcx),\n+                            query_config::$name::config(tcx),\n                             QueryCtxt::new(tcx),\n                             span,\n                             key,\n@@ -543,11 +543,11 @@ macro_rules! define_queries {\n                     pub fn __rust_end_short_backtrace<'tcx>(\n                         tcx: TyCtxt<'tcx>,\n                         span: Span,\n-                        key: query_keys::$name<'tcx>,\n+                        key: queries::$name::Key<'tcx>,\n                         __mode: QueryMode,\n-                    ) -> Option<Erase<query_values::$name<'tcx>>> {\n+                    ) -> Option<Erase<queries::$name::Value<'tcx>>> {\n                         Some(get_query_non_incr(\n-                            queries::$name::config(tcx),\n+                            query_config::$name::config(tcx),\n                             QueryCtxt::new(tcx),\n                             span,\n                             key,\n@@ -570,7 +570,7 @@ macro_rules! define_queries {\n         }\n \n         #[allow(nonstandard_style)]\n-        mod queries {\n+        mod query_config {\n             use std::marker::PhantomData;\n \n             $(\n@@ -586,7 +586,7 @@ macro_rules! define_queries {\n             use super::*;\n \n             $(\n-                pub(super) fn $name<'tcx>() -> DynamicQuery<'tcx, query_storage::$name<'tcx>> {\n+                pub(super) fn $name<'tcx>() -> DynamicQuery<'tcx, queries::$name::Storage<'tcx>> {\n                     DynamicQuery {\n                         name: stringify!($name),\n                         eval_always: is_eval_always!([$($modifiers)*]),\n@@ -597,9 +597,8 @@ macro_rules! define_queries {\n                         cache_on_disk: |tcx, key| ::rustc_middle::query::cached::$name(tcx, key),\n                         execute_query: |tcx, key| erase(tcx.$name(key)),\n                         compute: |tcx, key| {\n-                            use crate::plumbing::__rust_begin_short_backtrace;\n                             __rust_begin_short_backtrace(||\n-                                query_provided_to_value::$name(\n+                                queries::$name::provided_to_erased(\n                                     tcx,\n                                     call_provider!([$($modifiers)*][tcx, $name, key])\n                                 )\n@@ -609,12 +608,14 @@ macro_rules! define_queries {\n                         try_load_from_disk: should_ever_cache_on_disk!([$($modifiers)*] {\n                             |tcx, key, prev_index, index| {\n                                 if ::rustc_middle::query::cached::$name(tcx, key) {\n-                                    let value = $crate::plumbing::try_load_from_disk::<query_provided::$name<'tcx>>(\n+                                    let value = $crate::plumbing::try_load_from_disk::<\n+                                        queries::$name::ProvidedValue<'tcx>\n+                                    >(\n                                         tcx,\n                                         prev_index,\n                                         index,\n                                     );\n-                                    value.map(|value| query_provided_to_value::$name(tcx, value))\n+                                    value.map(|value| queries::$name::provided_to_erased(tcx, value))\n                                 } else {\n                                     None\n                                 }\n@@ -623,7 +624,7 @@ macro_rules! define_queries {\n                             |_tcx, _key, _prev_index, _index| None\n                         }),\n                         value_from_cycle_error: |tcx, cycle| {\n-                            let result: query_values::$name<'tcx> = Value::from_cycle_error(tcx, cycle);\n+                            let result: queries::$name::Value<'tcx> = Value::from_cycle_error(tcx, cycle);\n                             erase(result)\n                         },\n                         loadable_from_disk: |_tcx, _key, _index| {\n@@ -634,18 +635,18 @@ macro_rules! define_queries {\n                                 false\n                             })\n                         },\n-                        hash_result: hash_result!([$($modifiers)*][query_values::$name<'tcx>]),\n-                        format_value: |value| format!(\"{:?}\", restore::<query_values::$name<'tcx>>(*value)),\n+                        hash_result: hash_result!([$($modifiers)*][queries::$name::Value<'tcx>]),\n+                        format_value: |value| format!(\"{:?}\", restore::<queries::$name::Value<'tcx>>(*value)),\n                     }\n                 }\n             )*\n         }\n \n-        $(impl<'tcx> QueryConfigRestored<'tcx> for queries::$name<'tcx> {\n-            type RestoredValue = query_values::$name<'tcx>;\n+        $(impl<'tcx> QueryConfigRestored<'tcx> for query_config::$name<'tcx> {\n+            type RestoredValue = queries::$name::Value<'tcx>;\n             type Config = DynamicConfig<\n                 'tcx,\n-                query_storage::$name<'tcx>,\n+                queries::$name::Storage<'tcx>,\n                 { is_anon!([$($modifiers)*]) },\n                 { depth_limit!([$($modifiers)*]) },\n                 { feedable!([$($modifiers)*]) },\n@@ -660,7 +661,7 @@ macro_rules! define_queries {\n \n             #[inline(always)]\n             fn restore(value: <Self::Config as QueryConfig<QueryCtxt<'tcx>>>::Value) -> Self::RestoredValue {\n-                restore::<query_values::$name<'tcx>>(value)\n+                restore::<queries::$name::Value<'tcx>>(value)\n             }\n         })*\n \n@@ -730,7 +731,7 @@ macro_rules! define_queries {\n             }\n \n             $(pub(crate) fn $name<'tcx>()-> DepKindStruct<'tcx> {\n-                $crate::plumbing::query_callback::<queries::$name<'tcx>>(\n+                $crate::plumbing::query_callback::<query_config::$name<'tcx>>(\n                     is_anon!([$($modifiers)*]),\n                     is_eval_always!([$($modifiers)*]),\n                 )\n@@ -785,8 +786,8 @@ macro_rules! define_queries {\n                     )\n                 },\n                 encode_query_results: expand_if_cached!([$($modifiers)*], |tcx, encoder, query_result_index|\n-                    $crate::plumbing::encode_query_results::<super::queries::$name<'tcx>>(\n-                        super::queries::$name::config(tcx),\n+                    $crate::plumbing::encode_query_results::<super::query_config::$name<'tcx>>(\n+                        super::query_config::$name::config(tcx),\n                         QueryCtxt::new(tcx),\n                         encoder,\n                         query_result_index,"}, {"sha": "730e4c8d30db35ec1d2d6182fdf27ae067c6c1e6", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fdd030127cc68afec44a8d3f6341525dd34e50ae/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd030127cc68afec44a8d3f6341525dd34e50ae/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=fdd030127cc68afec44a8d3f6341525dd34e50ae", "patch": "@@ -433,16 +433,22 @@ where\n                 (hasher(&mut hcx, &cached_result), hasher(&mut hcx, &result))\n             });\n             let formatter = query.format_value();\n-            debug_assert_eq!(\n-                old_hash,\n-                new_hash,\n-                \"Computed query value for {:?}({:?}) is inconsistent with fed value,\\n\\\n-                computed={:#?}\\nfed={:#?}\",\n-                query.dep_kind(),\n-                key,\n-                formatter(&result),\n-                formatter(&cached_result),\n-            );\n+            if old_hash != new_hash {\n+                // We have an inconsistency. This can happen if one of the two\n+                // results is tainted by errors. In this case, delay a bug to\n+                // ensure compilation is doomed.\n+                qcx.dep_context().sess().delay_span_bug(\n+                    DUMMY_SP,\n+                    format!(\n+                        \"Computed query value for {:?}({:?}) is inconsistent with fed value,\\n\\\n+                        computed={:#?}\\nfed={:#?}\",\n+                        query.dep_kind(),\n+                        key,\n+                        formatter(&result),\n+                        formatter(&cached_result),\n+                    ),\n+                );\n+            }\n         }\n     }\n     job_owner.complete(cache, result, dep_node_index);"}, {"sha": "d14e6244f7d0774335a413ce5649fe9adc796811", "filename": "compiler/rustc_trait_selection/src/solve/assembly/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fdd030127cc68afec44a8d3f6341525dd34e50ae/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd030127cc68afec44a8d3f6341525dd34e50ae/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fmod.rs?ref=fdd030127cc68afec44a8d3f6341525dd34e50ae", "patch": "@@ -506,10 +506,12 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             | ty::Param(_)\n             | ty::Placeholder(..)\n             | ty::Infer(ty::IntVar(_) | ty::FloatVar(_))\n+            | ty::Alias(ty::Inherent, _)\n             | ty::Error(_) => return,\n             ty::Infer(ty::TyVar(_) | ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_))\n             | ty::Bound(..) => bug!(\"unexpected self type for `{goal:?}`\"),\n-            ty::Alias(_, alias_ty) => alias_ty,\n+            // Excluding IATs here as they don't have meaningful item bounds.\n+            ty::Alias(ty::Projection | ty::Opaque, alias_ty) => alias_ty,\n         };\n \n         for assumption in self.tcx().item_bounds(alias_ty.def_id).subst(self.tcx(), alias_ty.substs)"}, {"sha": "51069897120af6bb779a0ea5898454ade6316d32", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fdd030127cc68afec44a8d3f6341525dd34e50ae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd030127cc68afec44a8d3f6341525dd34e50ae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=fdd030127cc68afec44a8d3f6341525dd34e50ae", "patch": "@@ -1543,7 +1543,10 @@ fn assemble_candidates_from_trait_def<'cx, 'tcx>(\n     // Check whether the self-type is itself a projection.\n     // If so, extract what we know from the trait and try to come up with a good answer.\n     let bounds = match *obligation.predicate.self_ty().kind() {\n-        ty::Alias(_, ref data) => tcx.item_bounds(data.def_id).subst(tcx, data.substs),\n+        // Excluding IATs here as they don't have meaningful item bounds.\n+        ty::Alias(ty::Projection | ty::Opaque, ref data) => {\n+            tcx.item_bounds(data.def_id).subst(tcx, data.substs)\n+        }\n         ty::Infer(ty::TyVar(_)) => {\n             // If the self-type is an inference variable, then it MAY wind up\n             // being a projected type, so induce an ambiguity."}, {"sha": "aa230936903f1ce75a1473539d07594ec77c078c", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fdd030127cc68afec44a8d3f6341525dd34e50ae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd030127cc68afec44a8d3f6341525dd34e50ae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=fdd030127cc68afec44a8d3f6341525dd34e50ae", "patch": "@@ -143,7 +143,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // Before we go into the whole placeholder thing, just\n         // quickly check if the self-type is a projection at all.\n         match obligation.predicate.skip_binder().trait_ref.self_ty().kind() {\n-            ty::Alias(..) => {}\n+            // Excluding IATs here as they don't have meaningful item bounds.\n+            ty::Alias(ty::Projection | ty::Opaque, _) => {}\n             ty::Infer(ty::TyVar(_)) => {\n                 span_bug!(\n                     obligation.cause.span,"}, {"sha": "de023501f9e8595e69cff010498499fd109bf720", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fdd030127cc68afec44a8d3f6341525dd34e50ae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd030127cc68afec44a8d3f6341525dd34e50ae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=fdd030127cc68afec44a8d3f6341525dd34e50ae", "patch": "@@ -156,7 +156,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let placeholder_self_ty = placeholder_trait_predicate.self_ty();\n         let placeholder_trait_predicate = ty::Binder::dummy(placeholder_trait_predicate);\n         let (def_id, substs) = match *placeholder_self_ty.kind() {\n-            ty::Alias(_, ty::AliasTy { def_id, substs, .. }) => (def_id, substs),\n+            // Excluding IATs here as they don't have meaningful item bounds.\n+            ty::Alias(ty::Projection | ty::Opaque, ty::AliasTy { def_id, substs, .. }) => {\n+                (def_id, substs)\n+            }\n             _ => bug!(\"projection candidate for unexpected type: {:?}\", placeholder_self_ty),\n         };\n "}, {"sha": "f1bd9f5bbf8fa649910d05a9fbaa455a661dbd74", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fdd030127cc68afec44a8d3f6341525dd34e50ae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd030127cc68afec44a8d3f6341525dd34e50ae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=fdd030127cc68afec44a8d3f6341525dd34e50ae", "patch": "@@ -1645,7 +1645,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         let tcx = self.infcx.tcx;\n         let (def_id, substs) = match *placeholder_trait_predicate.trait_ref.self_ty().kind() {\n-            ty::Alias(_, ty::AliasTy { def_id, substs, .. }) => (def_id, substs),\n+            ty::Alias(ty::Projection | ty::Opaque, ty::AliasTy { def_id, substs, .. }) => {\n+                (def_id, substs)\n+            }\n             _ => {\n                 span_bug!(\n                     obligation.cause.span,"}, {"sha": "d8b298b59a3f820960f7532874afa34a49f506c0", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdd030127cc68afec44a8d3f6341525dd34e50ae/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd030127cc68afec44a8d3f6341525dd34e50ae/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=fdd030127cc68afec44a8d3f6341525dd34e50ae", "patch": "@@ -365,7 +365,7 @@ pub enum Subcommand {\n         #[arg(long)]\n         all: bool,\n     },\n-    /// Duild distribution artifacts\n+    /// Build distribution artifacts\n     Dist,\n     /// Install distribution artifacts\n     Install,"}, {"sha": "4eddd5cedf18e02e6bc6d90565608ed9c3c2bf9f", "filename": "src/etc/completions/x.py.fish", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdd030127cc68afec44a8d3f6341525dd34e50ae/src%2Fetc%2Fcompletions%2Fx.py.fish", "raw_url": "https://github.com/rust-lang/rust/raw/fdd030127cc68afec44a8d3f6341525dd34e50ae/src%2Fetc%2Fcompletions%2Fx.py.fish", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcompletions%2Fx.py.fish?ref=fdd030127cc68afec44a8d3f6341525dd34e50ae", "patch": "@@ -36,7 +36,7 @@ complete -c x.py -n \"__fish_use_subcommand\" -f -a \"doc\" -d 'Build documentation'\n complete -c x.py -n \"__fish_use_subcommand\" -f -a \"test\" -d 'Build and run some test suites'\n complete -c x.py -n \"__fish_use_subcommand\" -f -a \"bench\" -d 'Build and run some benchmarks'\n complete -c x.py -n \"__fish_use_subcommand\" -f -a \"clean\" -d 'Clean out build directories'\n-complete -c x.py -n \"__fish_use_subcommand\" -f -a \"dist\" -d 'Duild distribution artifacts'\n+complete -c x.py -n \"__fish_use_subcommand\" -f -a \"dist\" -d 'Build distribution artifacts'\n complete -c x.py -n \"__fish_use_subcommand\" -f -a \"install\" -d 'Install distribution artifacts'\n complete -c x.py -n \"__fish_use_subcommand\" -f -a \"run\" -d 'Run tools contained in this repository'\n complete -c x.py -n \"__fish_use_subcommand\" -f -a \"setup\" -d 'Set up the environment for development'"}, {"sha": "59fabf53f984bd34790625d8bedd54ca89e50a8e", "filename": "src/etc/completions/x.py.ps1", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdd030127cc68afec44a8d3f6341525dd34e50ae/src%2Fetc%2Fcompletions%2Fx.py.ps1", "raw_url": "https://github.com/rust-lang/rust/raw/fdd030127cc68afec44a8d3f6341525dd34e50ae/src%2Fetc%2Fcompletions%2Fx.py.ps1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcompletions%2Fx.py.ps1?ref=fdd030127cc68afec44a8d3f6341525dd34e50ae", "patch": "@@ -63,7 +63,7 @@ Register-ArgumentCompleter -Native -CommandName 'x.py' -ScriptBlock {\n             [CompletionResult]::new('test', 'test', [CompletionResultType]::ParameterValue, 'Build and run some test suites')\n             [CompletionResult]::new('bench', 'bench', [CompletionResultType]::ParameterValue, 'Build and run some benchmarks')\n             [CompletionResult]::new('clean', 'clean', [CompletionResultType]::ParameterValue, 'Clean out build directories')\n-            [CompletionResult]::new('dist', 'dist', [CompletionResultType]::ParameterValue, 'Duild distribution artifacts')\n+            [CompletionResult]::new('dist', 'dist', [CompletionResultType]::ParameterValue, 'Build distribution artifacts')\n             [CompletionResult]::new('install', 'install', [CompletionResultType]::ParameterValue, 'Install distribution artifacts')\n             [CompletionResult]::new('run', 'run', [CompletionResultType]::ParameterValue, 'Run tools contained in this repository')\n             [CompletionResult]::new('setup', 'setup', [CompletionResultType]::ParameterValue, 'Set up the environment for development')"}, {"sha": "b65e6c7261a57b3ed339abe49f97f8854b649c60", "filename": "src/tools/clippy/tests/ui/issue-111399.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fdd030127cc68afec44a8d3f6341525dd34e50ae/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fissue-111399.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd030127cc68afec44a8d3f6341525dd34e50ae/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fissue-111399.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fissue-111399.rs?ref=fdd030127cc68afec44a8d3f6341525dd34e50ae", "patch": "@@ -0,0 +1,13 @@\n+#![feature(inherent_associated_types)]\n+#![allow(incomplete_features)]\n+\n+// Check that rustc doesn't crash on the trait bound `Self::Ty: std::marker::Freeze`.\n+\n+pub struct Struct;\n+\n+impl Struct {\n+    pub type Ty = usize;\n+    pub const CT: Self::Ty = 42;\n+}\n+\n+fn main() {}"}, {"sha": "ca7b12e9e627b89b686065098e7cdc7361e81015", "filename": "tests/incremental/const-generic-type-cycle.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fdd030127cc68afec44a8d3f6341525dd34e50ae/tests%2Fincremental%2Fconst-generic-type-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd030127cc68afec44a8d3f6341525dd34e50ae/tests%2Fincremental%2Fconst-generic-type-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fincremental%2Fconst-generic-type-cycle.rs?ref=fdd030127cc68afec44a8d3f6341525dd34e50ae", "patch": "@@ -0,0 +1,17 @@\n+// Verify that we do not ICE when we try to overwrite an anon-const's type because of a trait\n+// cycle.\n+//\n+// compile-flags: -Zincremental-ignore-spans\n+// revisions: cpass cfail\n+// error-pattern: cycle detected when computing type of `Bar::N`\n+\n+#![feature(trait_alias)]\n+#![crate_type=\"lib\"]\n+\n+#[cfg(cpass)]\n+trait Bar<const N: usize> {}\n+\n+#[cfg(cfail)]\n+trait Bar<const N: dyn BB> {}\n+\n+trait BB = Bar<{ 2 + 1 }>;"}, {"sha": "d342b2ff6d91bf2b0819b319b346be74406b4e2c", "filename": "tests/run-make-fulldeps/obtain-borrowck/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fdd030127cc68afec44a8d3f6341525dd34e50ae/tests%2Frun-make-fulldeps%2Fobtain-borrowck%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd030127cc68afec44a8d3f6341525dd34e50ae/tests%2Frun-make-fulldeps%2Fobtain-borrowck%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make-fulldeps%2Fobtain-borrowck%2Fdriver.rs?ref=fdd030127cc68afec44a8d3f6341525dd34e50ae", "patch": "@@ -24,7 +24,7 @@ use rustc_hir::def::DefKind;\n use rustc_hir::def_id::LocalDefId;\n use rustc_interface::interface::Compiler;\n use rustc_interface::{Config, Queries};\n-use rustc_middle::query::query_values::mir_borrowck;\n+use rustc_middle::query::queries::mir_borrowck::ProvidedValue;\n use rustc_middle::query::{ExternProviders, Providers};\n use rustc_middle::ty::TyCtxt;\n use rustc_session::Session;\n@@ -126,7 +126,7 @@ thread_local! {\n         RefCell::new(HashMap::new());\n }\n \n-fn mir_borrowck<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> mir_borrowck<'tcx> {\n+fn mir_borrowck<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> ProvidedValue<'tcx> {\n     let body_with_facts = rustc_borrowck::consumers::get_body_with_borrowck_facts(tcx, def_id);\n     // SAFETY: The reader casts the 'static lifetime to 'tcx before using it.\n     let body_with_facts: BodyWithBorrowckFacts<'static> ="}, {"sha": "2e0839d2a153561595cd9fa95587245c7ff358a0", "filename": "tests/ui/cfg/cfg-stmt-recovery.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fdd030127cc68afec44a8d3f6341525dd34e50ae/tests%2Fui%2Fcfg%2Fcfg-stmt-recovery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd030127cc68afec44a8d3f6341525dd34e50ae/tests%2Fui%2Fcfg%2Fcfg-stmt-recovery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcfg%2Fcfg-stmt-recovery.rs?ref=fdd030127cc68afec44a8d3f6341525dd34e50ae", "patch": "@@ -0,0 +1,13 @@\n+// Verify that we do not ICE when failing to parse a statement in `cfg_eval`.\n+\n+#![feature(cfg_eval)]\n+#![feature(stmt_expr_attributes)]\n+\n+#[cfg_eval]\n+fn main() {\n+    #[cfg_eval]\n+    let _ = #[cfg(FALSE)] 0;\n+    //~^ ERROR removing an expression is not supported in this position\n+    //~| ERROR expected expression, found `;`\n+    //~| ERROR removing an expression is not supported in this position\n+}"}, {"sha": "cb15e21fac698821d2bd88167d913859138d3eb6", "filename": "tests/ui/cfg/cfg-stmt-recovery.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fdd030127cc68afec44a8d3f6341525dd34e50ae/tests%2Fui%2Fcfg%2Fcfg-stmt-recovery.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fdd030127cc68afec44a8d3f6341525dd34e50ae/tests%2Fui%2Fcfg%2Fcfg-stmt-recovery.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcfg%2Fcfg-stmt-recovery.stderr?ref=fdd030127cc68afec44a8d3f6341525dd34e50ae", "patch": "@@ -0,0 +1,20 @@\n+error: removing an expression is not supported in this position\n+  --> $DIR/cfg-stmt-recovery.rs:9:13\n+   |\n+LL |     let _ = #[cfg(FALSE)] 0;\n+   |             ^^^^^^^^^^^^^\n+\n+error: expected expression, found `;`\n+  --> $DIR/cfg-stmt-recovery.rs:9:28\n+   |\n+LL |     let _ = #[cfg(FALSE)] 0;\n+   |                            ^ expected expression\n+\n+error: removing an expression is not supported in this position\n+  --> $DIR/cfg-stmt-recovery.rs:9:13\n+   |\n+LL |     let _ = #[cfg(FALSE)] 0;\n+   |             ^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}]}