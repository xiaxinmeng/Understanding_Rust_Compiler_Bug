{"sha": "842419712a9ed7be166bfdac2d5588356191dabb", "node_id": "C_kwDOAAsO6NoAKDg0MjQxOTcxMmE5ZWQ3YmUxNjZiZmRhYzJkNTU4ODM1NjE5MWRhYmI", "commit": {"author": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2023-04-27T06:52:17Z"}, "committer": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2023-04-27T07:35:19Z"}, "message": "rename `needs_subst` to `has_param`", "tree": {"sha": "0afe598d0f7ac4d14ec023a1235b95e42331a3db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0afe598d0f7ac4d14ec023a1235b95e42331a3db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/842419712a9ed7be166bfdac2d5588356191dabb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/842419712a9ed7be166bfdac2d5588356191dabb", "html_url": "https://github.com/rust-lang/rust/commit/842419712a9ed7be166bfdac2d5588356191dabb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/842419712a9ed7be166bfdac2d5588356191dabb/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f04b8fe0af291a444ecfcf774337966a5cc9d7db", "url": "https://api.github.com/repos/rust-lang/rust/commits/f04b8fe0af291a444ecfcf774337966a5cc9d7db", "html_url": "https://github.com/rust-lang/rust/commit/f04b8fe0af291a444ecfcf774337966a5cc9d7db"}], "stats": {"total": 56, "additions": 28, "deletions": 28}, "files": [{"sha": "2e9f89f41969642233c5cbe82c7973db64aabdfb", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/842419712a9ed7be166bfdac2d5588356191dabb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/842419712a9ed7be166bfdac2d5588356191dabb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=842419712a9ed7be166bfdac2d5588356191dabb", "patch": "@@ -515,7 +515,7 @@ impl<'ll, 'tcx> DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                         ty::Adt(def, ..) if !def.is_box() => {\n                             // Again, only create type information if full debuginfo is enabled\n                             if cx.sess().opts.debuginfo == DebugInfo::Full\n-                                && !impl_self_ty.needs_subst()\n+                                && !impl_self_ty.has_param()\n                             {\n                                 Some(type_di_node(cx, impl_self_ty))\n                             } else {"}, {"sha": "22bdd4d2c3fbcd165088d7e0f2fd3c8eae02aeb3", "filename": "compiler/rustc_const_eval/src/interpret/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/842419712a9ed7be166bfdac2d5588356191dabb/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/842419712a9ed7be166bfdac2d5588356191dabb/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs?ref=842419712a9ed7be166bfdac2d5588356191dabb", "patch": "@@ -14,7 +14,7 @@ where\n     T: TypeVisitable<TyCtxt<'tcx>>,\n {\n     debug!(\"ensure_monomorphic_enough: ty={:?}\", ty);\n-    if !ty.needs_subst() {\n+    if !ty.has_param() {\n         return Ok(());\n     }\n \n@@ -27,7 +27,7 @@ where\n         type BreakTy = FoundParam;\n \n         fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-            if !ty.needs_subst() {\n+            if !ty.has_param() {\n                 return ControlFlow::Continue(());\n             }\n \n@@ -46,7 +46,7 @@ where\n                         // are used and require substitution.\n                         // Just in case there are closures or generators within this subst,\n                         // recurse.\n-                        if unused_params.is_used(index) && subst.needs_subst() {\n+                        if unused_params.is_used(index) && subst.has_param() {\n                             return subst.visit_with(self);\n                         }\n                     }"}, {"sha": "709dea43d84aa5113beb672ce08e14532a1db97a", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/842419712a9ed7be166bfdac2d5588356191dabb/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/842419712a9ed7be166bfdac2d5588356191dabb/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=842419712a9ed7be166bfdac2d5588356191dabb", "patch": "@@ -3039,7 +3039,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 // the anon const, which is empty. This is why the\n                 // `AlwaysApplicable` impl needs a `T: ?Sized` bound for\n                 // this to compile if we were to normalize here.\n-                if forbid_generic && ty.needs_subst() {\n+                if forbid_generic && ty.has_param() {\n                     let mut err = tcx.sess.struct_span_err(\n                         path.span,\n                         \"generic `Self` types are currently not permitted in anonymous constants\","}, {"sha": "c066c396766624caeef30d570b96d063cbbf03b4", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/842419712a9ed7be166bfdac2d5588356191dabb/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/842419712a9ed7be166bfdac2d5588356191dabb/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=842419712a9ed7be166bfdac2d5588356191dabb", "patch": "@@ -1292,7 +1292,7 @@ fn check_where_clauses<'tcx>(wfcx: &WfCheckingCtxt<'_, 'tcx>, span: Span, def_id\n                     // Ignore dependent defaults -- that is, where the default of one type\n                     // parameter includes another (e.g., `<T, U = T>`). In those cases, we can't\n                     // be sure if it will error or not as user might always specify the other.\n-                    if !ty.needs_subst() {\n+                    if !ty.has_param() {\n                         wfcx.register_wf_obligation(\n                             tcx.def_span(param.def_id),\n                             Some(WellFormedLoc::Ty(param.def_id.expect_local())),\n@@ -1308,7 +1308,7 @@ fn check_where_clauses<'tcx>(wfcx: &WfCheckingCtxt<'_, 'tcx>, span: Span, def_id\n                     // for `struct Foo<const N: usize, const M: usize = { 1 - 2 }>`\n                     // we should eagerly error.\n                     let default_ct = tcx.const_param_default(param.def_id).subst_identity();\n-                    if !default_ct.needs_subst() {\n+                    if !default_ct.has_param() {\n                         wfcx.register_wf_obligation(\n                             tcx.def_span(param.def_id),\n                             None,\n@@ -1342,7 +1342,7 @@ fn check_where_clauses<'tcx>(wfcx: &WfCheckingCtxt<'_, 'tcx>, span: Span, def_id\n                 if is_our_default(param) {\n                     let default_ty = tcx.type_of(param.def_id).subst_identity();\n                     // ... and it's not a dependent default, ...\n-                    if !default_ty.needs_subst() {\n+                    if !default_ty.has_param() {\n                         // ... then substitute it with the default.\n                         return default_ty.into();\n                     }\n@@ -1355,7 +1355,7 @@ fn check_where_clauses<'tcx>(wfcx: &WfCheckingCtxt<'_, 'tcx>, span: Span, def_id\n                 if is_our_default(param) {\n                     let default_ct = tcx.const_param_default(param.def_id).subst_identity();\n                     // ... and it's not a dependent default, ...\n-                    if !default_ct.needs_subst() {\n+                    if !default_ct.has_param() {\n                         // ... then substitute it with the default.\n                         return default_ct.into();\n                     }"}, {"sha": "89175c0ef745064121c6ebd5ccb0290e1f918204", "filename": "compiler/rustc_hir_analysis/src/coherence/orphan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/842419712a9ed7be166bfdac2d5588356191dabb/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/842419712a9ed7be166bfdac2d5588356191dabb/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs?ref=842419712a9ed7be166bfdac2d5588356191dabb", "patch": "@@ -457,7 +457,7 @@ fn emit_newtype_suggestion_for_raw_ptr(\n     ptr_ty: &ty::TypeAndMut<'_>,\n     diag: &mut Diagnostic,\n ) {\n-    if !self_ty.needs_subst() {\n+    if !self_ty.has_param() {\n         let mut_key = ptr_ty.mutbl.prefix_str();\n         let msg_sugg = \"consider introducing a new wrapper type\".to_owned();\n         let sugg = vec!["}, {"sha": "82fc1256bba64ac901a74231adb4b31fd527976a", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/842419712a9ed7be166bfdac2d5588356191dabb/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/842419712a9ed7be166bfdac2d5588356191dabb/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=842419712a9ed7be166bfdac2d5588356191dabb", "patch": "@@ -1384,7 +1384,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n         let item_ty = self.tcx.type_of(item.def_id).subst_identity();\n         // FIXME(compiler-errors): This check is *so* rudimentary\n-        if item_ty.needs_subst() {\n+        if item_ty.has_param() {\n             return false;\n         }\n         if self.can_coerce(item_ty, expected_ty) {"}, {"sha": "2ce28f3a049e860ab4576c9741e2b06583565ce8", "filename": "compiler/rustc_lint/src/enum_intrinsics_non_enums.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/842419712a9ed7be166bfdac2d5588356191dabb/compiler%2Frustc_lint%2Fsrc%2Fenum_intrinsics_non_enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/842419712a9ed7be166bfdac2d5588356191dabb/compiler%2Frustc_lint%2Fsrc%2Fenum_intrinsics_non_enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fenum_intrinsics_non_enums.rs?ref=842419712a9ed7be166bfdac2d5588356191dabb", "patch": "@@ -42,7 +42,7 @@ declare_lint_pass!(EnumIntrinsicsNonEnums => [ENUM_INTRINSICS_NON_ENUMS]);\n /// Returns `true` if we know for sure that the given type is not an enum. Note that for cases where\n /// the type is generic, we can't be certain if it will be an enum so we have to assume that it is.\n fn is_non_enum(t: Ty<'_>) -> bool {\n-    !t.is_enum() && !t.needs_subst()\n+    !t.is_enum() && !t.has_param()\n }\n \n fn enforce_mem_discriminant("}, {"sha": "43f95635ab00a577198539e7ed785e066ed9bdad", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/842419712a9ed7be166bfdac2d5588356191dabb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/842419712a9ed7be166bfdac2d5588356191dabb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=842419712a9ed7be166bfdac2d5588356191dabb", "patch": "@@ -761,7 +761,7 @@ impl<'tcx, T: TypeFoldable<TyCtxt<'tcx>>> ty::EarlyBinder<T> {\n \n     /// Returns the inner value, but only if it contains no bound vars.\n     pub fn no_bound_vars(self) -> Option<T> {\n-        if !self.0.needs_subst() { Some(self.0) } else { None }\n+        if !self.0.has_param() { Some(self.0) } else { None }\n     }\n }\n \n@@ -840,7 +840,7 @@ impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for SubstFolder<'a, 'tcx> {\n     }\n \n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n-        if !t.needs_subst() {\n+        if !t.has_param() {\n             return t;\n         }\n "}, {"sha": "5eaa58d69ed660c5c46501d4ce0dcbe057be6fd8", "filename": "compiler/rustc_middle/src/ty/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/842419712a9ed7be166bfdac2d5588356191dabb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/842419712a9ed7be166bfdac2d5588356191dabb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs?ref=842419712a9ed7be166bfdac2d5588356191dabb", "patch": "@@ -70,7 +70,7 @@ pub trait TypeVisitableExt<'tcx>: TypeVisitable<TyCtxt<'tcx>> {\n         }\n     }\n     fn has_non_region_param(&self) -> bool {\n-        self.has_type_flags(TypeFlags::NEEDS_SUBST - TypeFlags::HAS_RE_PARAM)\n+        self.has_type_flags(TypeFlags::HAS_PARAM - TypeFlags::HAS_RE_PARAM)\n     }\n     fn has_infer_regions(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_RE_INFER)\n@@ -94,8 +94,8 @@ pub trait TypeVisitableExt<'tcx>: TypeVisitable<TyCtxt<'tcx>> {\n     fn has_non_region_placeholders(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_TY_PLACEHOLDER | TypeFlags::HAS_CT_PLACEHOLDER)\n     }\n-    fn needs_subst(&self) -> bool {\n-        self.has_type_flags(TypeFlags::NEEDS_SUBST)\n+    fn has_param(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_PARAM)\n     }\n     /// \"Free\" regions in this context means that it has any region\n     /// that is not (a) erased or (b) late-bound."}, {"sha": "64f1dfac5464e0187daa3125866f42b3cb8034a0", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/842419712a9ed7be166bfdac2d5588356191dabb/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/842419712a9ed7be166bfdac2d5588356191dabb/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=842419712a9ed7be166bfdac2d5588356191dabb", "patch": "@@ -428,7 +428,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     /// Returns the value, if any, of evaluating `c`.\n     fn eval_constant(&mut self, c: &Constant<'tcx>) -> Option<OpTy<'tcx>> {\n         // FIXME we need to revisit this for #67176\n-        if c.needs_subst() {\n+        if c.has_param() {\n             return None;\n         }\n \n@@ -527,7 +527,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         }\n \n         // FIXME we need to revisit this for #67176\n-        if rvalue.needs_subst() {\n+        if rvalue.has_param() {\n             return None;\n         }\n         if !rvalue"}, {"sha": "a4049d08d7b82522ed0697c931ddb931415c7eff", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/842419712a9ed7be166bfdac2d5588356191dabb/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/842419712a9ed7be166bfdac2d5588356191dabb/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=842419712a9ed7be166bfdac2d5588356191dabb", "patch": "@@ -281,7 +281,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     /// Returns the value, if any, of evaluating `c`.\n     fn eval_constant(&mut self, c: &Constant<'tcx>, location: Location) -> Option<OpTy<'tcx>> {\n         // FIXME we need to revisit this for #67176\n-        if c.needs_subst() {\n+        if c.has_param() {\n             return None;\n         }\n \n@@ -474,7 +474,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         }\n \n         // FIXME we need to revisit this for #67176\n-        if rvalue.needs_subst() {\n+        if rvalue.has_param() {\n             return None;\n         }\n         if !rvalue.ty(self.local_decls(), self.tcx).is_sized(self.tcx, self.param_env) {"}, {"sha": "6046c3876bee0cf48f2f4bd0f3b948963f2f00e0", "filename": "compiler/rustc_mir_transform/src/inline/cycle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/842419712a9ed7be166bfdac2d5588356191dabb/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/842419712a9ed7be166bfdac2d5588356191dabb/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs?ref=842419712a9ed7be166bfdac2d5588356191dabb", "patch": "@@ -92,7 +92,7 @@ pub(crate) fn mir_callgraph_reachable<'tcx>(\n                     // FIXME: A not fully substituted drop shim can cause ICEs if one attempts to\n                     // have its MIR built. Likely oli-obk just screwed up the `ParamEnv`s, so this\n                     // needs some more analysis.\n-                    if callee.needs_subst() {\n+                    if callee.has_param() {\n                         continue;\n                     }\n                 }"}, {"sha": "03183a406603378d19362a498fc4492376749122", "filename": "compiler/rustc_monomorphize/src/partitioning/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/842419712a9ed7be166bfdac2d5588356191dabb/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/842419712a9ed7be166bfdac2d5588356191dabb/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs?ref=842419712a9ed7be166bfdac2d5588356191dabb", "patch": "@@ -305,7 +305,7 @@ fn characteristic_def_id_of_mono_item<'tcx>(\n \n                 // When polymorphization is enabled, methods which do not depend on their generic\n                 // parameters, but the self-type of their impl block do will fail to normalize.\n-                if !tcx.sess.opts.unstable_opts.polymorphize || !instance.needs_subst() {\n+                if !tcx.sess.opts.unstable_opts.polymorphize || !instance.has_param() {\n                     // This is a method within an impl, find out what the self-type is:\n                     let impl_self_ty = tcx.subst_and_normalize_erasing_regions(\n                         instance.substs,"}, {"sha": "a3f262905c74f8b495df3443f728f65adffcb2e8", "filename": "compiler/rustc_symbol_mangling/src/legacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/842419712a9ed7be166bfdac2d5588356191dabb/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/842419712a9ed7be166bfdac2d5588356191dabb/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs?ref=842419712a9ed7be166bfdac2d5588356191dabb", "patch": "@@ -108,7 +108,7 @@ fn get_symbol_hash<'tcx>(\n             tcx.def_path_hash(def_id).hash_stable(&mut hcx, &mut hasher);\n \n             // Include the main item-type. Note that, in this case, the\n-            // assertions about `needs_subst` may not hold, but this item-type\n+            // assertions about `has_param` may not hold, but this item-type\n             // ought to be the same for every reference anyway.\n             assert!(!item_type.has_erasable_regions());\n             hcx.while_hashing_spans(false, |hcx| {"}, {"sha": "b7690f79933d95d289dbd6c21fd23d101856a691", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/842419712a9ed7be166bfdac2d5588356191dabb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/842419712a9ed7be166bfdac2d5588356191dabb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=842419712a9ed7be166bfdac2d5588356191dabb", "patch": "@@ -582,7 +582,7 @@ fn orphan_check_trait_ref<'tcx>(\n     trait_ref: ty::TraitRef<'tcx>,\n     in_crate: InCrate,\n ) -> Result<(), OrphanCheckErr<'tcx>> {\n-    if trait_ref.has_infer() && trait_ref.needs_subst() {\n+    if trait_ref.has_infer() && trait_ref.has_param() {\n         bug!(\n             \"can't orphan check a trait ref with both params and inference variables {:?}\",\n             trait_ref"}, {"sha": "0e8c74a6765ce9acd3aeaa9364788d6a9b340f44", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/842419712a9ed7be166bfdac2d5588356191dabb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/842419712a9ed7be166bfdac2d5588356191dabb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=842419712a9ed7be166bfdac2d5588356191dabb", "patch": "@@ -414,7 +414,7 @@ fn subst_and_check_impossible_predicates<'tcx>(\n         predicates.push(ty::Binder::dummy(trait_ref).to_predicate(tcx));\n     }\n \n-    predicates.retain(|predicate| !predicate.needs_subst());\n+    predicates.retain(|predicate| !predicate.has_param());\n     let result = impossible_predicates(tcx, predicates);\n \n     debug!(\"subst_and_check_impossible_predicates(key={:?}) = {:?}\", key, result);"}, {"sha": "863553670dee27deefe37aeecfcaaac6e3adef52", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/842419712a9ed7be166bfdac2d5588356191dabb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/842419712a9ed7be166bfdac2d5588356191dabb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=842419712a9ed7be166bfdac2d5588356191dabb", "patch": "@@ -1000,7 +1000,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     ) -> Result<EvaluationResult, OverflowError> {\n         if !self.is_intercrate()\n             && obligation.is_global()\n-            && obligation.param_env.caller_bounds().iter().all(|bound| bound.needs_subst())\n+            && obligation.param_env.caller_bounds().iter().all(|bound| bound.has_param())\n         {\n             // If a param env has no global bounds, global obligations do not\n             // depend on its particular value in order to work, so we can clear"}, {"sha": "1e91e26e2afe9811c7ecf0c41f3b10cfa88abfcd", "filename": "compiler/rustc_type_ir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/842419712a9ed7be166bfdac2d5588356191dabb/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/842419712a9ed7be166bfdac2d5588356191dabb/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs?ref=842419712a9ed7be166bfdac2d5588356191dabb", "patch": "@@ -179,7 +179,7 @@ bitflags! {\n         /// Does this have `ConstKind::Param`?\n         const HAS_CT_PARAM                = 1 << 2;\n \n-        const NEEDS_SUBST                 = TypeFlags::HAS_TY_PARAM.bits\n+        const HAS_PARAM                 = TypeFlags::HAS_TY_PARAM.bits\n                                           | TypeFlags::HAS_RE_PARAM.bits\n                                           | TypeFlags::HAS_CT_PARAM.bits;\n "}]}