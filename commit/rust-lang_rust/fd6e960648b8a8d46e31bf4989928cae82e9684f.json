{"sha": "fd6e960648b8a8d46e31bf4989928cae82e9684f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkNmU5NjA2NDhiOGE4ZDQ2ZTMxYmY0OTg5OTI4Y2FlODJlOTY4NGY=", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2019-10-18T01:04:05Z"}, "committer": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2019-10-18T01:13:11Z"}, "message": "fix: comments between lhs and rhs", "tree": {"sha": "9cc908d888ee01cbd585dc40f2d565abac12c800", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cc908d888ee01cbd585dc40f2d565abac12c800"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd6e960648b8a8d46e31bf4989928cae82e9684f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd6e960648b8a8d46e31bf4989928cae82e9684f", "html_url": "https://github.com/rust-lang/rust/commit/fd6e960648b8a8d46e31bf4989928cae82e9684f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd6e960648b8a8d46e31bf4989928cae82e9684f/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28be77915f5b6750f0390e233a44499f2c3f2547", "url": "https://api.github.com/repos/rust-lang/rust/commits/28be77915f5b6750f0390e233a44499f2c3f2547", "html_url": "https://github.com/rust-lang/rust/commit/28be77915f5b6750f0390e233a44499f2c3f2547"}], "stats": {"total": 76, "additions": 69, "deletions": 7}, "files": [{"sha": "c721f07d0199e3e453b9b6c78d0533eaca67bafe", "filename": "src/comment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd6e960648b8a8d46e31bf4989928cae82e9684f/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd6e960648b8a8d46e31bf4989928cae82e9684f/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=fd6e960648b8a8d46e31bf4989928cae82e9684f", "patch": "@@ -112,7 +112,7 @@ impl<'a> CommentStyle<'a> {\n     }\n }\n \n-fn comment_style(orig: &str, normalize_comments: bool) -> CommentStyle<'_> {\n+pub(crate) fn comment_style(orig: &str, normalize_comments: bool) -> CommentStyle<'_> {\n     if !normalize_comments {\n         if orig.starts_with(\"/**\") && !orig.starts_with(\"/**/\") {\n             CommentStyle::DoubleBullet"}, {"sha": "176f78db92ab085e0f8e2da762aed4d38df55498", "filename": "src/expr.rs", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/fd6e960648b8a8d46e31bf4989928cae82e9684f/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd6e960648b8a8d46e31bf4989928cae82e9684f/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=fd6e960648b8a8d46e31bf4989928cae82e9684f", "patch": "@@ -9,8 +9,8 @@ use syntax::{ast, ptr};\n use crate::chains::rewrite_chain;\n use crate::closures;\n use crate::comment::{\n-    combine_strs_with_missing_comments, contains_comment, recover_comment_removed, rewrite_comment,\n-    rewrite_missing_comment, CharClasses, FindUncommented,\n+    combine_strs_with_missing_comments, comment_style, contains_comment, recover_comment_removed,\n+    rewrite_comment, rewrite_missing_comment, CharClasses, FindUncommented,\n };\n use crate::config::lists::*;\n use crate::config::{Config, ControlBraceStyle, IndentStyle, Version};\n@@ -808,7 +808,7 @@ impl<'a> ControlFlow<'a> {\n         debug!(\"rewrite_pat_expr {:?} {:?} {:?}\", shape, self.pat, expr);\n \n         let cond_shape = shape.offset_left(offset)?;\n-        if !self.pat.is_none() {\n+        if let Some(pat) = self.pat {\n             let matcher = if self.matcher.is_empty() {\n                 self.matcher.to_owned()\n             } else {\n@@ -817,12 +817,41 @@ impl<'a> ControlFlow<'a> {\n             let pat_shape = cond_shape\n                 .offset_left(matcher.len())?\n                 .sub_width(self.connector.len())?;\n-            let pat_string = if let Some(pat) = self.pat {\n-                pat.rewrite(context, pat_shape)?\n+            let pat_string = pat.rewrite(context, pat_shape)?;\n+            let comments_lo = context\n+                .snippet_provider\n+                .span_after(self.span, self.connector.trim());\n+            let missing_comments = if let Some(comment) =\n+                rewrite_missing_comment(mk_sp(comments_lo, expr.span.lo()), cond_shape, context)\n+            {\n+                if !self.connector.is_empty() && !comment.is_empty() {\n+                    if comment_style(&comment, false).is_line_comment() || comment.contains(\"\\n\") {\n+                        let newline = &pat_shape\n+                            .indent\n+                            .block_indent(context.config)\n+                            .to_string_with_newline(context.config);\n+                        // An extra space is added when the lhs and rhs are joined\n+                        // so we need to remove one space from the end to ensure\n+                        // the comment and rhs are aligned.\n+                        let mut suffix = newline.as_ref().to_string();\n+                        if !suffix.is_empty() {\n+                            suffix.truncate(suffix.len() - 1);\n+                        }\n+                        format!(\"{}{}{}\", newline, comment, suffix)\n+                    } else {\n+                        format!(\" {}\", comment)\n+                    }\n+                } else {\n+                    comment\n+                }\n             } else {\n                 \"\".to_owned()\n             };\n-            let result = format!(\"{}{}{}\", matcher, pat_string, self.connector);\n+\n+            let result = format!(\n+                \"{}{}{}{}\",\n+                matcher, pat_string, self.connector, missing_comments\n+            );\n             return rewrite_assign_rhs(context, result, expr, cond_shape);\n         }\n "}, {"sha": "c41309bc7882843b1ff2f3cf816e19c2a324709a", "filename": "tests/source/issue_3853.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fd6e960648b8a8d46e31bf4989928cae82e9684f/tests%2Fsource%2Fissue_3853.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd6e960648b8a8d46e31bf4989928cae82e9684f/tests%2Fsource%2Fissue_3853.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue_3853.rs?ref=fd6e960648b8a8d46e31bf4989928cae82e9684f", "patch": "@@ -33,3 +33,20 @@ fn issue_3853() {\n if let Some(ref /*mut*/ state) = foo {\n \t\t\t\t\t}\n }\n+\n+fn double_slash_comment_between_lhs_and_rhs() {\n+    if let Some(e) =\n+\t\t\t\t // self.foo.bar(e, tx)\n+\t\t\t\t packet.transaction.state.committed\n+                {\n+            // body\n+                            println!(\n+                                \"a2304712836123\");\n+                                }\n+}\n+\n+fn block_comment_between_lhs_and_rhs() {\n+if let Some(ref     /*def*/  mut     /*abc*/       state)=          /*abc*/foo{\n+\t\t\t\tprintln!(\n+        \"asdfasdfasdf\");\t}\n+}"}, {"sha": "eae59eff94e563a6164bbebd24ef76111a7ccbf9", "filename": "tests/target/issue_3853.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fd6e960648b8a8d46e31bf4989928cae82e9684f/tests%2Ftarget%2Fissue_3853.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd6e960648b8a8d46e31bf4989928cae82e9684f/tests%2Ftarget%2Fissue_3853.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue_3853.rs?ref=fd6e960648b8a8d46e31bf4989928cae82e9684f", "patch": "@@ -29,3 +29,19 @@ fn no_prefix_block_before_ident() {\n fn issue_3853() {\n     if let Some(ref /*mut*/ state) = foo {}\n }\n+\n+fn double_slash_comment_between_lhs_and_rhs() {\n+    if let Some(e) =\n+        // self.foo.bar(e, tx)\n+        packet.transaction.state.committed\n+    {\n+        // body\n+        println!(\"a2304712836123\");\n+    }\n+}\n+\n+fn block_comment_between_lhs_and_rhs() {\n+    if let Some(ref /*def*/ mut /*abc*/ state) = /*abc*/ foo {\n+        println!(\"asdfasdfasdf\");\n+    }\n+}"}]}