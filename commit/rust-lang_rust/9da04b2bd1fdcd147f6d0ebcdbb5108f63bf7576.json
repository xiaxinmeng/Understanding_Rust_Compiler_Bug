{"sha": "9da04b2bd1fdcd147f6d0ebcdbb5108f63bf7576", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkYTA0YjJiZDFmZGNkMTQ3ZjZkMGViY2RiYjUxMDhmNjNiZjc1NzY=", "commit": {"author": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-07-21T21:52:21Z"}, "committer": {"name": "Jared Roesch", "email": "jroesch@MacBook.home", "date": "2015-07-26T02:57:59Z"}, "message": "Make default error reporting deterministic", "tree": {"sha": "57efb2020cd1fe30a33aeaed4642b272db0bbda3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57efb2020cd1fe30a33aeaed4642b272db0bbda3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9da04b2bd1fdcd147f6d0ebcdbb5108f63bf7576", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9da04b2bd1fdcd147f6d0ebcdbb5108f63bf7576", "html_url": "https://github.com/rust-lang/rust/commit/9da04b2bd1fdcd147f6d0ebcdbb5108f63bf7576", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9da04b2bd1fdcd147f6d0ebcdbb5108f63bf7576/comments", "author": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d732f7323b07cd62bf2a9f7e4785407d6f82ee63", "url": "https://api.github.com/repos/rust-lang/rust/commits/d732f7323b07cd62bf2a9f7e4785407d6f82ee63", "html_url": "https://github.com/rust-lang/rust/commit/d732f7323b07cd62bf2a9f7e4785407d6f82ee63"}], "stats": {"total": 45, "additions": 35, "deletions": 10}, "files": [{"sha": "95e916f1a0d14c4d445e87823a39e6e9f8e5792b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9da04b2bd1fdcd147f6d0ebcdbb5108f63bf7576/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da04b2bd1fdcd147f6d0ebcdbb5108f63bf7576/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9da04b2bd1fdcd147f6d0ebcdbb5108f63bf7576", "patch": "@@ -1800,6 +1800,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // We wrap this in a transaction for error reporting, if we detect a conflict\n             // we will rollback the inference context to its prior state so we can probe\n             // for conflicts and correctly report them.\n+\n+\n             let _ = self.infcx().commit_if_ok(|_: &infer::CombinedSnapshot| {\n                 for ty in &unbound_tyvars {\n                     if self.infcx().type_var_diverges(ty) {\n@@ -1849,10 +1851,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 def_id: local_def(0) // what do I put here?\n                             });\n \n+                    // This is to ensure that we elimnate any non-determinism from the error\n+                    // reporting by fixing an order, it doesn't matter what order we choose\n+                    // just that it is consistent.\n+                    let (first_default, second_default) =\n+                        if default.def_id < conflicting_default.def_id {\n+                            (default, conflicting_default)\n+                        } else {\n+                            (conflicting_default, default)\n+                        };\n+\n+\n                     self.infcx().report_conflicting_default_types(\n-                        conflicting_default.origin_span,\n-                        conflicting_default,\n-                        default)\n+                        first_default.origin_span,\n+                        first_default,\n+                        second_default)\n                 }\n             }\n         }"}, {"sha": "236a1e690e88c444ecaf5a2e4ca772978cb1b0bc", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9da04b2bd1fdcd147f6d0ebcdbb5108f63bf7576/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da04b2bd1fdcd147f6d0ebcdbb5108f63bf7576/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=9da04b2bd1fdcd147f6d0ebcdbb5108f63bf7576", "patch": "@@ -1930,7 +1930,6 @@ fn get_or_create_type_parameter_def<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n         index: index,\n         name: param.ident.name,\n         def_id: local_def(param.id),\n-        // what do I return? should this be an option as well\n         default_def_id: local_def(parent),\n         default: default,\n         object_lifetime_default: object_lifetime_default,"}, {"sha": "42de545f9d050044a8661ef193535090cbfa09d9", "filename": "src/test/compile-fail/default_ty_param_conflict.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9da04b2bd1fdcd147f6d0ebcdbb5108f63bf7576/src%2Ftest%2Fcompile-fail%2Fdefault_ty_param_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da04b2bd1fdcd147f6d0ebcdbb5108f63bf7576/src%2Ftest%2Fcompile-fail%2Fdefault_ty_param_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdefault_ty_param_conflict.rs?ref=9da04b2bd1fdcd147f6d0ebcdbb5108f63bf7576", "patch": "@@ -12,12 +12,19 @@ use std::fmt::Debug;\n \n // Example from the RFC\n fn foo<F:Default=usize>() -> F { F::default() }\n+//~^ NOTE: a default was defined here...\n+\n fn bar<B:Debug=isize>(b: B) { println!(\"{:?}\", b); }\n+//~^ NOTE: a second default was defined here...\n \n fn main() {\n     // Here, F is instantiated with $0=uint\n     let x = foo();\n+    //~^ ERROR: mismatched types\n+    //~| NOTE: conflicting type parameter defaults `usize` and `isize`\n+    //~| NOTE: ...that was applied to an unconstrained type variable here\n \n     // Here, B is instantiated with $1=uint, and constraint $0 <: $1 is added.\n     bar(x);\n+    //~^ NOTE: ...that also applies to the same type variable here\n }"}, {"sha": "804a864e074e6b9c34047d64db36651878193d9d", "filename": "src/test/compile-fail/default_ty_param_conflict_cross_crate.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9da04b2bd1fdcd147f6d0ebcdbb5108f63bf7576/src%2Ftest%2Fcompile-fail%2Fdefault_ty_param_conflict_cross_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da04b2bd1fdcd147f6d0ebcdbb5108f63bf7576/src%2Ftest%2Fcompile-fail%2Fdefault_ty_param_conflict_cross_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdefault_ty_param_conflict_cross_crate.rs?ref=9da04b2bd1fdcd147f6d0ebcdbb5108f63bf7576", "patch": "@@ -7,14 +7,20 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+//\n+//aux-build:default_ty_param_cross_crate_crate.rs\n+extern crate default_param_test;\n \n-use std::fmt::Debug;\n-use std::collections::HashMap;\n+use default_param_test::{Foo, bleh};\n \n-fn foo<R=()>(x: HashMap<i32, i32, R>) ->  HashMap<i32, i32, R> { x }\n-fn bar<R=char>(x: HashMap<i32, i32, R>) {}\n+fn meh<X, B=bool>(x: Foo<X, B>) {}\n+//~^ NOTE: a default was defined here...\n \n fn main() {\n-    let x: HashMap<i32, i32, _> = foo(panic!());\n-    bar(x);\n+    let foo = bleh();\n+    //~^ NOTE: ...that also applies to the same type variable here\n+\n+    meh(foo);\n+    //~^ ERROR: mismatched types:\n+    //~| NOTE: conflicting type parameter defaults `bool` and `char`\n }"}]}