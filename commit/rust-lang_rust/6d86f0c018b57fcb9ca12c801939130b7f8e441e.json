{"sha": "6d86f0c018b57fcb9ca12c801939130b7f8e441e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkODZmMGMwMThiNTdmY2I5Y2ExMmM4MDE5MzkxMzBiN2Y4ZTQ0MWU=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2017-06-09T04:29:45Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2017-06-09T06:01:39Z"}, "message": "Use ctlz_nonzero to improve ASM from next_power_of_two", "tree": {"sha": "1563fcaaa1b22911c04c545af1969738a7d293f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1563fcaaa1b22911c04c545af1969738a7d293f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d86f0c018b57fcb9ca12c801939130b7f8e441e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d86f0c018b57fcb9ca12c801939130b7f8e441e", "html_url": "https://github.com/rust-lang/rust/commit/6d86f0c018b57fcb9ca12c801939130b7f8e441e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d86f0c018b57fcb9ca12c801939130b7f8e441e/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13e24003472c13636d4350a530d6e6495775afeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/13e24003472c13636d4350a530d6e6495775afeb", "html_url": "https://github.com/rust-lang/rust/commit/13e24003472c13636d4350a530d6e6495775afeb"}], "stats": {"total": 17, "additions": 16, "deletions": 1}, "files": [{"sha": "62d75445cc95e81129988dc75713ba2b9bdf1b7e", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6d86f0c018b57fcb9ca12c801939130b7f8e441e/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d86f0c018b57fcb9ca12c801939130b7f8e441e/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=6d86f0c018b57fcb9ca12c801939130b7f8e441e", "patch": "@@ -1262,6 +1262,7 @@ macro_rules! uint_impl {\n     ($SelfT:ty, $ActualT:ty, $BITS:expr,\n      $ctpop:path,\n      $ctlz:path,\n+     $ctlz_nonzero:path,\n      $cttz:path,\n      $bswap:path,\n      $add_with_overflow:path,\n@@ -2184,6 +2185,7 @@ macro_rules! uint_impl {\n         // This method cannot overflow, as in the `next_power_of_two`\n         // overflow cases it instead ends up returning the maximum value\n         // of the type, and can return 0 for 0.\n+        #[inline]\n         fn one_less_than_next_power_of_two(self) -> Self {\n             if self <= 1 { return 0; }\n \n@@ -2192,7 +2194,7 @@ macro_rules! uint_impl {\n             // (such as intel pre-haswell) have more efficient ctlz\n             // intrinsics when the argument is non-zero.\n             let p = self - 1;\n-            let z = p.leading_zeros();\n+            let z = unsafe { $ctlz_nonzero(p) };\n             <$SelfT>::max_value() >> z\n         }\n \n@@ -2236,11 +2238,17 @@ macro_rules! uint_impl {\n     }\n }\n \n+#[cfg(stage0)]\n+unsafe fn ctlz_nonzero<T>(x: T) -> T { intrinsics::ctlz(x) }\n+#[cfg(not(stage0))]\n+unsafe fn ctlz_nonzero<T>(x: T) -> T { intrinsics::ctlz_nonzero(x) }\n+\n #[lang = \"u8\"]\n impl u8 {\n     uint_impl! { u8, u8, 8,\n         intrinsics::ctpop,\n         intrinsics::ctlz,\n+        ctlz_nonzero,\n         intrinsics::cttz,\n         intrinsics::bswap,\n         intrinsics::add_with_overflow,\n@@ -2253,6 +2261,7 @@ impl u16 {\n     uint_impl! { u16, u16, 16,\n         intrinsics::ctpop,\n         intrinsics::ctlz,\n+        ctlz_nonzero,\n         intrinsics::cttz,\n         intrinsics::bswap,\n         intrinsics::add_with_overflow,\n@@ -2265,6 +2274,7 @@ impl u32 {\n     uint_impl! { u32, u32, 32,\n         intrinsics::ctpop,\n         intrinsics::ctlz,\n+        ctlz_nonzero,\n         intrinsics::cttz,\n         intrinsics::bswap,\n         intrinsics::add_with_overflow,\n@@ -2277,6 +2287,7 @@ impl u64 {\n     uint_impl! { u64, u64, 64,\n         intrinsics::ctpop,\n         intrinsics::ctlz,\n+        ctlz_nonzero,\n         intrinsics::cttz,\n         intrinsics::bswap,\n         intrinsics::add_with_overflow,\n@@ -2289,6 +2300,7 @@ impl u128 {\n     uint_impl! { u128, u128, 128,\n         intrinsics::ctpop,\n         intrinsics::ctlz,\n+        ctlz_nonzero,\n         intrinsics::cttz,\n         intrinsics::bswap,\n         intrinsics::add_with_overflow,\n@@ -2302,6 +2314,7 @@ impl usize {\n     uint_impl! { usize, u16, 16,\n         intrinsics::ctpop,\n         intrinsics::ctlz,\n+        ctlz_nonzero,\n         intrinsics::cttz,\n         intrinsics::bswap,\n         intrinsics::add_with_overflow,\n@@ -2314,6 +2327,7 @@ impl usize {\n     uint_impl! { usize, u32, 32,\n         intrinsics::ctpop,\n         intrinsics::ctlz,\n+        ctlz_nonzero,\n         intrinsics::cttz,\n         intrinsics::bswap,\n         intrinsics::add_with_overflow,\n@@ -2327,6 +2341,7 @@ impl usize {\n     uint_impl! { usize, u64, 64,\n         intrinsics::ctpop,\n         intrinsics::ctlz,\n+        ctlz_nonzero,\n         intrinsics::cttz,\n         intrinsics::bswap,\n         intrinsics::add_with_overflow,"}]}