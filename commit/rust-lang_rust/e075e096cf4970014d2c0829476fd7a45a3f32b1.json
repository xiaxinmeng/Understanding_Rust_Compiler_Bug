{"sha": "e075e096cf4970014d2c0829476fd7a45a3f32b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwNzVlMDk2Y2Y0OTcwMDE0ZDJjMDgyOTQ3NmZkN2E0NWEzZjMyYjE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-07-08T11:09:38Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-07-08T11:09:38Z"}, "message": "don't send LocationLink unless the client opts-in\n\ncloses #1474", "tree": {"sha": "b074a36491d838bae9405ac42f3e64ef9b4dcd60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b074a36491d838bae9405ac42f3e64ef9b4dcd60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e075e096cf4970014d2c0829476fd7a45a3f32b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e075e096cf4970014d2c0829476fd7a45a3f32b1", "html_url": "https://github.com/rust-lang/rust/commit/e075e096cf4970014d2c0829476fd7a45a3f32b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e075e096cf4970014d2c0829476fd7a45a3f32b1/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b042faeb64d858c26b05dbf543925bf626454282", "url": "https://api.github.com/repos/rust-lang/rust/commits/b042faeb64d858c26b05dbf543925bf626454282", "html_url": "https://github.com/rust-lang/rust/commit/b042faeb64d858c26b05dbf543925bf626454282"}], "stats": {"total": 74, "additions": 62, "deletions": 12}, "files": [{"sha": "82c7e757face2f15bbf2e56428182230451ab24c", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e075e096cf4970014d2c0829476fd7a45a3f32b1/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e075e096cf4970014d2c0829476fd7a45a3f32b1/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=e075e096cf4970014d2c0829476fd7a45a3f32b1", "patch": "@@ -421,7 +421,15 @@ impl TryConvWith for (FileId, RangeInfo<Vec<NavigationTarget>>) {\n             .into_iter()\n             .map(|nav| (file_id, RangeInfo::new(range, nav)))\n             .try_conv_with_to_vec(world)?;\n-        Ok(links.into())\n+        if world.options.supports_location_link {\n+            Ok(links.into())\n+        } else {\n+            let locations: Vec<Location> = links\n+                .into_iter()\n+                .map(|link| Location { uri: link.target_uri, range: link.target_selection_range })\n+                .collect();\n+            Ok(locations.into())\n+        }\n     }\n }\n "}, {"sha": "c1f8243be20e88d2ea6b11faa3daeb7fa1b557f5", "filename": "crates/ra_lsp_server/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e075e096cf4970014d2c0829476fd7a45a3f32b1/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e075e096cf4970014d2c0829476fd7a45a3f32b1/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs?ref=e075e096cf4970014d2c0829476fd7a45a3f32b1", "patch": "@@ -51,7 +51,7 @@ fn main_inner() -> Result<()> {\n             .and_then(|v| InitializationOptions::deserialize(v).ok())\n             .unwrap_or_default();\n \n-        ra_lsp_server::main_loop(workspace_roots, opts, r, s)\n+        ra_lsp_server::main_loop(workspace_roots, params.capabilities, opts, r, s)\n     })?;\n     log::info!(\"shutting down IO...\");\n     threads.join()?;"}, {"sha": "f7becd8fba80332618536938978a46f4fc5aa669", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e075e096cf4970014d2c0829476fd7a45a3f32b1/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e075e096cf4970014d2c0829476fd7a45a3f32b1/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=e075e096cf4970014d2c0829476fd7a45a3f32b1", "patch": "@@ -8,7 +8,7 @@ use crossbeam_channel::{select, unbounded, Receiver, RecvError, Sender};\n use gen_lsp_server::{\n     handle_shutdown, ErrorCode, RawMessage, RawNotification, RawRequest, RawResponse,\n };\n-use lsp_types::NumberOrString;\n+use lsp_types::{ClientCapabilities, NumberOrString};\n use ra_ide_api::{Canceled, FileId, LibraryData};\n use ra_prof::profile;\n use ra_vfs::VfsTask;\n@@ -22,7 +22,7 @@ use crate::{\n     },\n     project_model::workspace_loader,\n     req,\n-    world::{WorldSnapshot, WorldState},\n+    world::{Options, WorldSnapshot, WorldState},\n     InitializationOptions, Result,\n };\n \n@@ -51,6 +51,7 @@ impl Error for LspError {}\n \n pub fn main_loop(\n     ws_roots: Vec<PathBuf>,\n+    client_caps: ClientCapabilities,\n     options: InitializationOptions,\n     msg_receiver: &Receiver<RawMessage>,\n     msg_sender: &Sender<RawMessage>,\n@@ -77,15 +78,27 @@ pub fn main_loop(\n         loaded_workspaces\n     };\n \n-    let mut state = WorldState::new(ws_roots, workspaces, options.lru_capacity);\n+    let mut state = WorldState::new(\n+        ws_roots,\n+        workspaces,\n+        options.lru_capacity,\n+        Options {\n+            publish_decorations: options.publish_decorations,\n+            show_workspace_loaded: options.show_workspace_loaded,\n+            supports_location_link: client_caps\n+                .text_document\n+                .and_then(|it| it.definition)\n+                .and_then(|it| it.link_support)\n+                .unwrap_or(false),\n+        },\n+    );\n \n     let pool = ThreadPool::new(THREADPOOL_SIZE);\n     let (task_sender, task_receiver) = unbounded::<Task>();\n     let mut pending_requests = PendingRequests::default();\n \n     log::info!(\"server initialized, serving requests\");\n     let main_res = main_loop_inner(\n-        options,\n         &pool,\n         msg_sender,\n         msg_receiver,\n@@ -159,7 +172,6 @@ impl fmt::Debug for Event {\n }\n \n fn main_loop_inner(\n-    options: InitializationOptions,\n     pool: &ThreadPool,\n     msg_sender: &Sender<RawMessage>,\n     msg_receiver: &Receiver<RawMessage>,\n@@ -258,7 +270,7 @@ fn main_loop_inner(\n             && in_flight_libraries == 0\n         {\n             let n_packages: usize = state.workspaces.iter().map(|it| it.count()).sum();\n-            if options.show_workspace_loaded {\n+            if state.options.show_workspace_loaded {\n                 let msg = format!(\"workspace loaded, {} rust packages\", n_packages);\n                 show_message(req::MessageType::Info, msg, msg_sender);\n             }\n@@ -270,7 +282,7 @@ fn main_loop_inner(\n             update_file_notifications_on_threadpool(\n                 pool,\n                 state.snapshot(),\n-                options.publish_decorations,\n+                state.options.publish_decorations,\n                 task_sender.clone(),\n                 subs.subscriptions(),\n             )"}, {"sha": "9fd654305c337972c4bceb2bd2f80ad90196096d", "filename": "crates/ra_lsp_server/src/world.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e075e096cf4970014d2c0829476fd7a45a3f32b1/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e075e096cf4970014d2c0829476fd7a45a3f32b1/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs?ref=e075e096cf4970014d2c0829476fd7a45a3f32b1", "patch": "@@ -19,13 +19,21 @@ use crate::{\n     LspError, Result,\n };\n \n+#[derive(Debug, Clone)]\n+pub struct Options {\n+    pub publish_decorations: bool,\n+    pub show_workspace_loaded: bool,\n+    pub supports_location_link: bool,\n+}\n+\n /// `WorldState` is the primary mutable state of the language server\n ///\n /// The most interesting components are `vfs`, which stores a consistent\n /// snapshot of the file systems, and `analysis_host`, which stores our\n /// incremental salsa database.\n #[derive(Debug)]\n pub struct WorldState {\n+    pub options: Options,\n     pub roots_to_scan: usize,\n     pub roots: Vec<PathBuf>,\n     pub workspaces: Arc<Vec<ProjectWorkspace>>,\n@@ -36,6 +44,7 @@ pub struct WorldState {\n \n /// An immutable snapshot of the world's state at a point in time.\n pub struct WorldSnapshot {\n+    pub options: Options,\n     pub workspaces: Arc<Vec<ProjectWorkspace>>,\n     pub analysis: Analysis,\n     pub vfs: Arc<RwLock<Vfs>>,\n@@ -47,6 +56,7 @@ impl WorldState {\n         folder_roots: Vec<PathBuf>,\n         workspaces: Vec<ProjectWorkspace>,\n         lru_capacity: Option<usize>,\n+        options: Options,\n     ) -> WorldState {\n         let mut change = AnalysisChange::new();\n \n@@ -78,6 +88,7 @@ impl WorldState {\n         let mut analysis_host = AnalysisHost::new(lru_capacity);\n         analysis_host.apply_change(change);\n         WorldState {\n+            options,\n             roots_to_scan,\n             roots: folder_roots,\n             workspaces: Arc::new(workspaces),\n@@ -140,6 +151,7 @@ impl WorldState {\n \n     pub fn snapshot(&self) -> WorldSnapshot {\n         WorldSnapshot {\n+            options: self.options.clone(),\n             workspaces: Arc::clone(&self.workspaces),\n             analysis: self.analysis_host.analysis(),\n             vfs: Arc::clone(&self.vfs),"}, {"sha": "5dddbbe1725e945481aec1ab650d999c3f723443", "filename": "crates/ra_lsp_server/tests/heavy_tests/support.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e075e096cf4970014d2c0829476fd7a45a3f32b1/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e075e096cf4970014d2c0829476fd7a45a3f32b1/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=e075e096cf4970014d2c0829476fd7a45a3f32b1", "patch": "@@ -13,7 +13,8 @@ use lsp_types::{\n     notification::DidOpenTextDocument,\n     notification::{Notification, ShowMessage},\n     request::{Request, Shutdown},\n-    DidOpenTextDocumentParams, TextDocumentIdentifier, TextDocumentItem, Url,\n+    ClientCapabilities, DidOpenTextDocumentParams, GotoCapability, TextDocumentClientCapabilities,\n+    TextDocumentIdentifier, TextDocumentItem, Url,\n };\n use serde::Serialize;\n use serde_json::{to_string_pretty, Value};\n@@ -92,8 +93,25 @@ impl Server {\n             \"test server\",\n             128,\n             move |msg_receiver, msg_sender| {\n-                main_loop(roots, InitializationOptions::default(), &msg_receiver, &msg_sender)\n-                    .unwrap()\n+                main_loop(\n+                    roots,\n+                    ClientCapabilities {\n+                        workspace: None,\n+                        text_document: Some(TextDocumentClientCapabilities {\n+                            definition: Some(GotoCapability {\n+                                dynamic_registration: None,\n+                                link_support: Some(true),\n+                            }),\n+                            ..Default::default()\n+                        }),\n+                        window: None,\n+                        experimental: None,\n+                    },\n+                    InitializationOptions::default(),\n+                    &msg_receiver,\n+                    &msg_sender,\n+                )\n+                .unwrap()\n             },\n         );\n         let res = Server { req_id: Cell::new(1), dir, messages: Default::default(), worker };"}]}