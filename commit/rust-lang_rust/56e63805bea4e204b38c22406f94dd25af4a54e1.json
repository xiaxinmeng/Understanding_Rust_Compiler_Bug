{"sha": "56e63805bea4e204b38c22406f94dd25af4a54e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2ZTYzODA1YmVhNGUyMDRiMzhjMjI0MDZmOTRkZDI1YWY0YTU0ZTE=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-10-28T07:25:06Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-11-16T21:42:09Z"}, "message": "update `cg_clif`", "tree": {"sha": "5f62046f96a7d6121083c0052ab6abed9c939611", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f62046f96a7d6121083c0052ab6abed9c939611"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56e63805bea4e204b38c22406f94dd25af4a54e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56e63805bea4e204b38c22406f94dd25af4a54e1", "html_url": "https://github.com/rust-lang/rust/commit/56e63805bea4e204b38c22406f94dd25af4a54e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56e63805bea4e204b38c22406f94dd25af4a54e1/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5ec85758b4b425a08b3401422543fe756f980b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5ec85758b4b425a08b3401422543fe756f980b2", "html_url": "https://github.com/rust-lang/rust/commit/a5ec85758b4b425a08b3401422543fe756f980b2"}], "stats": {"total": 91, "additions": 45, "deletions": 46}, "files": [{"sha": "ac076789f2ec35200dcf5ccb4c7aedd890e3cce5", "filename": "src/abi/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/56e63805bea4e204b38c22406f94dd25af4a54e1/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e63805bea4e204b38c22406f94dd25af4a54e1/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=56e63805bea4e204b38c22406f94dd25af4a54e1", "patch": "@@ -216,7 +216,7 @@ pub(crate) fn get_function_name_and_sig<'tcx>(\n     assert!(!inst.substs.needs_infer());\n     let fn_sig = tcx.normalize_erasing_late_bound_regions(\n         ParamEnv::reveal_all(),\n-        &fn_sig_for_fn_abi(tcx, inst),\n+        fn_sig_for_fn_abi(tcx, inst),\n     );\n     if fn_sig.c_variadic && !support_vararg {\n         tcx.sess.span_fatal(\n@@ -372,7 +372,7 @@ pub(crate) fn codegen_fn_prelude<'tcx>(\n         .mir\n         .args_iter()\n         .map(|local| {\n-            let arg_ty = fx.monomorphize(&fx.mir.local_decls[local].ty);\n+            let arg_ty = fx.monomorphize(fx.mir.local_decls[local].ty);\n \n             // Adapted from https://github.com/rust-lang/rust/blob/145155dc96757002c7b2e9de8489416e2fdbbd57/src/librustc_codegen_llvm/mir/mod.rs#L442-L482\n             if Some(local) == fx.mir.spread_arg {\n@@ -470,7 +470,7 @@ pub(crate) fn codegen_fn_prelude<'tcx>(\n     }\n \n     for local in fx.mir.vars_and_temps_iter() {\n-        let ty = fx.monomorphize(&fx.mir.local_decls[local].ty);\n+        let ty = fx.monomorphize(fx.mir.local_decls[local].ty);\n         let layout = fx.layout_of(ty);\n \n         let is_ssa = ssa_analyzed[local] == crate::analyze::SsaKind::Ssa;\n@@ -492,10 +492,10 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n     args: &[Operand<'tcx>],\n     destination: Option<(Place<'tcx>, BasicBlock)>,\n ) {\n-    let fn_ty = fx.monomorphize(&func.ty(fx.mir, fx.tcx));\n+    let fn_ty = fx.monomorphize(func.ty(fx.mir, fx.tcx));\n     let fn_sig = fx\n         .tcx\n-        .normalize_erasing_late_bound_regions(ParamEnv::reveal_all(), &fn_ty.fn_sig(fx.tcx));\n+        .normalize_erasing_late_bound_regions(ParamEnv::reveal_all(), fn_ty.fn_sig(fx.tcx));\n \n     let destination = destination.map(|(place, bb)| (codegen_place(fx, place), bb));\n \n@@ -711,7 +711,7 @@ pub(crate) fn codegen_drop<'tcx>(\n         let drop_fn_ty = drop_fn.ty(fx.tcx, ParamEnv::reveal_all());\n         let fn_sig = fx.tcx.normalize_erasing_late_bound_regions(\n             ParamEnv::reveal_all(),\n-            &drop_fn_ty.fn_sig(fx.tcx),\n+            drop_fn_ty.fn_sig(fx.tcx),\n         );\n         assert_eq!(fn_sig.output(), fx.tcx.mk_unit());\n "}, {"sha": "adf5c7ac4fee72bf64d06fdeefadb443d93ac9de", "filename": "src/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56e63805bea4e204b38c22406f94dd25af4a54e1/src%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e63805bea4e204b38c22406f94dd25af4a54e1/src%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fanalyze.rs?ref=56e63805bea4e204b38c22406f94dd25af4a54e1", "patch": "@@ -17,7 +17,7 @@ pub(crate) fn analyze(fx: &FunctionCx<'_, '_, impl Module>) -> IndexVec<Local, S\n         .local_decls\n         .iter()\n         .map(|local_decl| {\n-            let ty = fx.monomorphize(&local_decl.ty);\n+            let ty = fx.monomorphize(local_decl.ty);\n             if fx.clif_type(ty).is_some() || fx.clif_pair_type(ty).is_some() {\n                 SsaKind::Ssa\n             } else {"}, {"sha": "a4df371c88aa6d56af5c0586ad7660689b03ceca", "filename": "src/base.rs", "status": "modified", "additions": 27, "deletions": 28, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/56e63805bea4e204b38c22406f94dd25af4a54e1/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e63805bea4e204b38c22406f94dd25af4a54e1/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=56e63805bea4e204b38c22406f94dd25af4a54e1", "patch": "@@ -445,43 +445,43 @@ fn codegen_stmt<'tcx>(\n         StatementKind::Assign(to_place_and_rval) => {\n             let lval = codegen_place(fx, to_place_and_rval.0);\n             let dest_layout = lval.layout();\n-            match &to_place_and_rval.1 {\n-                Rvalue::Use(operand) => {\n+            match to_place_and_rval.1 {\n+                Rvalue::Use(ref operand) => {\n                     let val = codegen_operand(fx, operand);\n                     lval.write_cvalue(fx, val);\n                 }\n                 Rvalue::Ref(_, _, place) | Rvalue::AddressOf(_, place) => {\n-                    let place = codegen_place(fx, *place);\n+                    let place = codegen_place(fx, place);\n                     let ref_ = place.place_ref(fx, lval.layout());\n                     lval.write_cvalue(fx, ref_);\n                 }\n                 Rvalue::ThreadLocalRef(def_id) => {\n-                    let val = crate::constant::codegen_tls_ref(fx, *def_id, lval.layout());\n+                    let val = crate::constant::codegen_tls_ref(fx, def_id, lval.layout());\n                     lval.write_cvalue(fx, val);\n                 }\n-                Rvalue::BinaryOp(bin_op, lhs, rhs) => {\n+                Rvalue::BinaryOp(bin_op, ref lhs, ref rhs) => {\n                     let lhs = codegen_operand(fx, lhs);\n                     let rhs = codegen_operand(fx, rhs);\n \n-                    let res = crate::num::codegen_binop(fx, *bin_op, lhs, rhs);\n+                    let res = crate::num::codegen_binop(fx, bin_op, lhs, rhs);\n                     lval.write_cvalue(fx, res);\n                 }\n-                Rvalue::CheckedBinaryOp(bin_op, lhs, rhs) => {\n+                Rvalue::CheckedBinaryOp(bin_op, ref lhs, ref rhs) => {\n                     let lhs = codegen_operand(fx, lhs);\n                     let rhs = codegen_operand(fx, rhs);\n \n                     let res = if !fx.tcx.sess.overflow_checks() {\n                         let val =\n-                            crate::num::codegen_int_binop(fx, *bin_op, lhs, rhs).load_scalar(fx);\n+                            crate::num::codegen_int_binop(fx, bin_op, lhs, rhs).load_scalar(fx);\n                         let is_overflow = fx.bcx.ins().iconst(types::I8, 0);\n                         CValue::by_val_pair(val, is_overflow, lval.layout())\n                     } else {\n-                        crate::num::codegen_checked_int_binop(fx, *bin_op, lhs, rhs)\n+                        crate::num::codegen_checked_int_binop(fx, bin_op, lhs, rhs)\n                     };\n \n                     lval.write_cvalue(fx, res);\n                 }\n-                Rvalue::UnaryOp(un_op, operand) => {\n+                Rvalue::UnaryOp(un_op, ref operand) => {\n                     let operand = codegen_operand(fx, operand);\n                     let layout = operand.layout();\n                     let val = operand.load_scalar(fx);\n@@ -509,8 +509,8 @@ fn codegen_stmt<'tcx>(\n                     };\n                     lval.write_cvalue(fx, res);\n                 }\n-                Rvalue::Cast(CastKind::Pointer(PointerCast::ReifyFnPointer), operand, to_ty) => {\n-                    let from_ty = fx.monomorphize(&operand.ty(&fx.mir.local_decls, fx.tcx));\n+                Rvalue::Cast(CastKind::Pointer(PointerCast::ReifyFnPointer), ref operand, to_ty) => {\n+                    let from_ty = fx.monomorphize(operand.ty(&fx.mir.local_decls, fx.tcx));\n                     let to_layout = fx.layout_of(fx.monomorphize(to_ty));\n                     match *from_ty.kind() {\n                         ty::FnDef(def_id, substs) => {\n@@ -530,14 +530,14 @@ fn codegen_stmt<'tcx>(\n                         _ => bug!(\"Trying to ReifyFnPointer on non FnDef {:?}\", from_ty),\n                     }\n                 }\n-                Rvalue::Cast(CastKind::Pointer(PointerCast::UnsafeFnPointer), operand, to_ty)\n-                | Rvalue::Cast(CastKind::Pointer(PointerCast::MutToConstPointer), operand, to_ty)\n-                | Rvalue::Cast(CastKind::Pointer(PointerCast::ArrayToPointer), operand, to_ty) => {\n+                Rvalue::Cast(CastKind::Pointer(PointerCast::UnsafeFnPointer), ref operand, to_ty)\n+                | Rvalue::Cast(CastKind::Pointer(PointerCast::MutToConstPointer), ref operand, to_ty)\n+                | Rvalue::Cast(CastKind::Pointer(PointerCast::ArrayToPointer), ref operand, to_ty) => {\n                     let to_layout = fx.layout_of(fx.monomorphize(to_ty));\n                     let operand = codegen_operand(fx, operand);\n                     lval.write_cvalue(fx, operand.cast_pointer_to(to_layout));\n                 }\n-                Rvalue::Cast(CastKind::Misc, operand, to_ty) => {\n+                Rvalue::Cast(CastKind::Misc, ref operand, to_ty) => {\n                     let operand = codegen_operand(fx, operand);\n                     let from_ty = operand.layout().ty;\n                     let to_ty = fx.monomorphize(to_ty);\n@@ -577,12 +577,12 @@ fn codegen_stmt<'tcx>(\n \n                         use rustc_target::abi::{Int, TagEncoding, Variants};\n \n-                        match &operand.layout().variants {\n+                        match operand.layout().variants {\n                             Variants::Single { index } => {\n                                 let discr = operand\n                                     .layout()\n                                     .ty\n-                                    .discriminant_for_variant(fx.tcx, *index)\n+                                    .discriminant_for_variant(fx.tcx, index)\n                                     .unwrap();\n                                 let discr = if discr.ty.is_signed() {\n                                     fx.layout_of(discr.ty).size.sign_extend(discr.val)\n@@ -595,7 +595,7 @@ fn codegen_stmt<'tcx>(\n                                 lval.write_cvalue(fx, discr);\n                             }\n                             Variants::Multiple {\n-                                tag,\n+                                ref tag,\n                                 tag_field,\n                                 tag_encoding: TagEncoding::Direct,\n                                 variants: _,\n@@ -604,7 +604,7 @@ fn codegen_stmt<'tcx>(\n \n                                 // Read the tag/niche-encoded discriminant from memory.\n                                 let encoded_discr =\n-                                    operand.value_field(fx, mir::Field::new(*tag_field));\n+                                    operand.value_field(fx, mir::Field::new(tag_field));\n                                 let encoded_discr = encoded_discr.load_scalar(fx);\n \n                                 // Decode the discriminant (specifically if it's niche-encoded).\n@@ -634,7 +634,7 @@ fn codegen_stmt<'tcx>(\n                 }\n                 Rvalue::Cast(\n                     CastKind::Pointer(PointerCast::ClosureFnPointer(_)),\n-                    operand,\n+                    ref operand,\n                     _to_ty,\n                 ) => {\n                     let operand = codegen_operand(fx, operand);\n@@ -654,18 +654,18 @@ fn codegen_stmt<'tcx>(\n                         _ => bug!(\"{} cannot be cast to a fn ptr\", operand.layout().ty),\n                     }\n                 }\n-                Rvalue::Cast(CastKind::Pointer(PointerCast::Unsize), operand, _to_ty) => {\n+                Rvalue::Cast(CastKind::Pointer(PointerCast::Unsize), ref operand, _to_ty) => {\n                     let operand = codegen_operand(fx, operand);\n                     operand.unsize_value(fx, lval);\n                 }\n                 Rvalue::Discriminant(place) => {\n-                    let place = codegen_place(fx, *place);\n+                    let place = codegen_place(fx, place);\n                     let value = place.to_cvalue(fx);\n                     let discr =\n                         crate::discriminant::codegen_get_discriminant(fx, value, dest_layout);\n                     lval.write_cvalue(fx, discr);\n                 }\n-                Rvalue::Repeat(operand, times) => {\n+                Rvalue::Repeat(ref operand, times) => {\n                     let operand = codegen_operand(fx, operand);\n                     let times = fx\n                         .monomorphize(times)\n@@ -704,7 +704,7 @@ fn codegen_stmt<'tcx>(\n                     }\n                 }\n                 Rvalue::Len(place) => {\n-                    let place = codegen_place(fx, *place);\n+                    let place = codegen_place(fx, place);\n                     let usize_layout = fx.layout_of(fx.tcx.types.usize);\n                     let len = codegen_array_len(fx, place);\n                     lval.write_cvalue(fx, CValue::by_val(len, usize_layout));\n@@ -749,7 +749,7 @@ fn codegen_stmt<'tcx>(\n                         CValue::const_val(fx, fx.layout_of(fx.tcx.types.usize), ty_size.into());\n                     lval.write_cvalue(fx, val);\n                 }\n-                Rvalue::Aggregate(kind, operands) => match **kind {\n+                Rvalue::Aggregate(ref kind, ref operands) => match kind.as_ref() {\n                     AggregateKind::Array(_ty) => {\n                         for (i, operand) in operands.iter().enumerate() {\n                             let operand = codegen_operand(fx, operand);\n@@ -877,8 +877,7 @@ fn codegen_array_len<'tcx>(\n     match *place.layout().ty.kind() {\n         ty::Array(_elem_ty, len) => {\n             let len = fx\n-                .monomorphize(&len)\n-                .eval(fx.tcx, ParamEnv::reveal_all())\n+                .monomorphize(len)\n                 .eval_usize(fx.tcx, ParamEnv::reveal_all()) as i64;\n             fx.bcx.ins().iconst(fx.pointer_type, len)\n         }"}, {"sha": "d7d6c3e16773bf6c8224d18df568c3ffc55e2edd", "filename": "src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56e63805bea4e204b38c22406f94dd25af4a54e1/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e63805bea4e204b38c22406f94dd25af4a54e1/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=56e63805bea4e204b38c22406f94dd25af4a54e1", "patch": "@@ -357,7 +357,7 @@ impl<'tcx, M: Module> HasTargetSpec for FunctionCx<'_, 'tcx, M> {\n }\n \n impl<'tcx, M: Module> FunctionCx<'_, 'tcx, M> {\n-    pub(crate) fn monomorphize<T>(&self, value: &T) -> T\n+    pub(crate) fn monomorphize<T>(&self, value: T) -> T\n     where\n         T: TypeFoldable<'tcx> + Copy,\n     {"}, {"sha": "351bb6ecd2383fb2f226dbf7744aadf7e18941b7", "filename": "src/constant.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56e63805bea4e204b38c22406f94dd25af4a54e1/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e63805bea4e204b38c22406f94dd25af4a54e1/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=56e63805bea4e204b38c22406f94dd25af4a54e1", "patch": "@@ -38,7 +38,7 @@ impl ConstantCx {\n \n pub(crate) fn check_constants(fx: &mut FunctionCx<'_, '_, impl Module>) {\n     for constant in &fx.mir.required_consts {\n-        let const_ = fx.monomorphize(&constant.literal);\n+        let const_ = fx.monomorphize(constant.literal);\n         match const_.val {\n             ConstKind::Value(_) => {}\n             ConstKind::Unevaluated(def, ref substs, promoted) => {\n@@ -110,7 +110,7 @@ pub(crate) fn codegen_constant<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     constant: &Constant<'tcx>,\n ) -> CValue<'tcx> {\n-    let const_ = fx.monomorphize(&constant.literal);\n+    let const_ = fx.monomorphize(constant.literal);\n     let const_val = match const_.val {\n         ConstKind::Value(const_val) => const_val,\n         ConstKind::Unevaluated(def, ref substs, promoted) if fx.tcx.is_static(def.did) => {\n@@ -466,7 +466,7 @@ pub(crate) fn mir_operand_get_const_val<'tcx>(\n     match operand {\n         Operand::Copy(_) | Operand::Move(_) => None,\n         Operand::Constant(const_) => Some(\n-            fx.monomorphize(&const_.literal)\n+            fx.monomorphize(const_.literal)\n                 .eval(fx.tcx, ParamEnv::reveal_all()),\n         ),\n     }"}, {"sha": "a6f4ded41b64b19ed2d758cecf04f35b9f2b1ecc", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56e63805bea4e204b38c22406f94dd25af4a54e1/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e63805bea4e204b38c22406f94dd25af4a54e1/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=56e63805bea4e204b38c22406f94dd25af4a54e1", "patch": "@@ -365,7 +365,7 @@ impl<'tcx> DebugContext<'tcx> {\n                 let ty = self.tcx.subst_and_normalize_erasing_regions(\n                     instance.substs,\n                     ty::ParamEnv::reveal_all(),\n-                    &mir.local_decls[local].ty,\n+                    mir.local_decls[local].ty,\n                 );\n                 let var_id = self.define_local(entry_id, format!(\"{:?}\", local), ty);\n "}, {"sha": "6c472e6774fe703d3870040e28e87b2dbe424a72", "filename": "src/main_shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56e63805bea4e204b38c22406f94dd25af4a54e1/src%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e63805bea4e204b38c22406f94dd25af4a54e1/src%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain_shim.rs?ref=56e63805bea4e204b38c22406f94dd25af4a54e1", "patch": "@@ -50,7 +50,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n         // late-bound regions, since late-bound\n         // regions must appear in the argument\n         // listing.\n-        let main_ret_ty = tcx.erase_regions(&main_ret_ty.no_bound_vars().unwrap());\n+        let main_ret_ty = tcx.erase_regions(main_ret_ty.no_bound_vars().unwrap());\n \n         let cmain_sig = Signature {\n             params: vec!["}, {"sha": "a9f060e51d8f88fa680393f912beb298f062fdba", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56e63805bea4e204b38c22406f94dd25af4a54e1/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e63805bea4e204b38c22406f94dd25af4a54e1/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=56e63805bea4e204b38c22406f94dd25af4a54e1", "patch": "@@ -80,7 +80,7 @@ impl CommentWriter {\n                     \"sig {:?}\",\n                     tcx.normalize_erasing_late_bound_regions(\n                         ParamEnv::reveal_all(),\n-                        &crate::abi::fn_sig_for_fn_abi(tcx, instance)\n+                        crate::abi::fn_sig_for_fn_abi(tcx, instance)\n                     )\n                 ),\n                 String::new(),"}, {"sha": "cb40d4ed9a6dffb874b5c90326ccde82b8629c88", "filename": "src/value_and_place.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/56e63805bea4e204b38c22406f94dd25af4a54e1/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e63805bea4e204b38c22406f94dd25af4a54e1/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=56e63805bea4e204b38c22406f94dd25af4a54e1", "patch": "@@ -455,7 +455,7 @@ impl<'tcx> CPlace<'tcx> {\n             from_ty: Ty<'tcx>,\n             to_ty: Ty<'tcx>,\n         ) {\n-            match (&from_ty.kind(), &to_ty.kind()) {\n+            match (from_ty.kind(), to_ty.kind()) {\n                 (ty::Ref(_, a, _), ty::Ref(_, b, _))\n                 | (\n                     ty::RawPtr(TypeAndMut { ty: a, mutbl: _ }),\n@@ -466,11 +466,11 @@ impl<'tcx> CPlace<'tcx> {\n                 (ty::FnPtr(_), ty::FnPtr(_)) => {\n                     let from_sig = fx.tcx.normalize_erasing_late_bound_regions(\n                         ParamEnv::reveal_all(),\n-                        &from_ty.fn_sig(fx.tcx),\n+                        from_ty.fn_sig(fx.tcx),\n                     );\n                     let to_sig = fx.tcx.normalize_erasing_late_bound_regions(\n                         ParamEnv::reveal_all(),\n-                        &to_ty.fn_sig(fx.tcx),\n+                        to_ty.fn_sig(fx.tcx),\n                     );\n                     assert_eq!(\n                         from_sig, to_sig,\n@@ -479,7 +479,7 @@ impl<'tcx> CPlace<'tcx> {\n                     );\n                     // fn(&T) -> for<'l> fn(&'l T) is allowed\n                 }\n-                (ty::Dynamic(from_traits, _), ty::Dynamic(to_traits, _)) => {\n+                (&ty::Dynamic(from_traits, _), &ty::Dynamic(to_traits, _)) => {\n                     let from_traits = fx\n                         .tcx\n                         .normalize_erasing_late_bound_regions(ParamEnv::reveal_all(), from_traits);"}]}