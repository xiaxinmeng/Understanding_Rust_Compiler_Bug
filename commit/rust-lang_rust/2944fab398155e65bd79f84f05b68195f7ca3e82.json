{"sha": "2944fab398155e65bd79f84f05b68195f7ca3e82", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5NDRmYWIzOTgxNTVlNjViZDc5Zjg0ZjA1YjY4MTk1ZjdjYTNlODI=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-04-09T01:06:57Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-04-09T02:12:15Z"}, "message": "Improve import resolution diagnostics", "tree": {"sha": "0b260358c2b84a414c95042c4b155db7430a8185", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b260358c2b84a414c95042c4b155db7430a8185"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2944fab398155e65bd79f84f05b68195f7ca3e82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2944fab398155e65bd79f84f05b68195f7ca3e82", "html_url": "https://github.com/rust-lang/rust/commit/2944fab398155e65bd79f84f05b68195f7ca3e82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2944fab398155e65bd79f84f05b68195f7ca3e82/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7979dd6089ee5cba39cfbe6e880a3edeb7fff788", "url": "https://api.github.com/repos/rust-lang/rust/commits/7979dd6089ee5cba39cfbe6e880a3edeb7fff788", "html_url": "https://github.com/rust-lang/rust/commit/7979dd6089ee5cba39cfbe6e880a3edeb7fff788"}], "stats": {"total": 10, "additions": 7, "deletions": 3}, "files": [{"sha": "f0e834d43032516b0888f8a5bacbc8b1963ae5e5", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2944fab398155e65bd79f84f05b68195f7ca3e82/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2944fab398155e65bd79f84f05b68195f7ca3e82/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=2944fab398155e65bd79f84f05b68195f7ca3e82", "patch": "@@ -539,6 +539,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n             (&Failed(_), &Failed(_)) => {\n                 let resolutions = target_module.resolutions.borrow();\n                 let names = resolutions.iter().filter_map(|(&(ref name, _), resolution)| {\n+                    if *name == source { return None; } // Never suggest the same name\n                     match *resolution.borrow() {\n                         NameResolution { binding: Some(_), .. } => Some(name),\n                         NameResolution { single_imports: SingleImports::None, .. } => None,\n@@ -549,9 +550,12 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                     Some(name) => format!(\". Did you mean to use `{}`?\", name),\n                     None => \"\".to_owned(),\n                 };\n-                let msg = format!(\"There is no `{}` in `{}`{}\",\n-                                  source,\n-                                  module_to_string(target_module), lev_suggestion);\n+                let module_str = module_to_string(target_module);\n+                let msg = if &module_str == \"???\" {\n+                    format!(\"There is no `{}` in the crate root{}\", source, lev_suggestion)\n+                } else {\n+                    format!(\"There is no `{}` in `{}`{}\", source, module_str, lev_suggestion)\n+                };\n                 return Failed(Some((directive.span, msg)));\n             }\n             _ => (),"}]}