{"sha": "90cecab42be9c28c09dd71b4b65d9f4de6976fae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwY2VjYWI0MmJlOWMyOGMwOWRkNzFiNGI2NWQ5ZjRkZTY5NzZmYWU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-04-01T12:32:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-01T12:32:16Z"}, "message": "Rollup merge of #70547 - wesleywiser:extract_can_unwind, r=eddyb\n\nAdd `can_unwind` field to `FnAbi`\n\nThis is a pure refactoring with no behavior changes.\n\nExtracted out of #70467\n\nr? @eddyb", "tree": {"sha": "994578d11983e6d1bdf40974167a2eadc01194e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/994578d11983e6d1bdf40974167a2eadc01194e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90cecab42be9c28c09dd71b4b65d9f4de6976fae", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJehInQCRBK7hj4Ov3rIwAAdHIIAIOFYnxmlzzw6zIxeY/mfxzy\n4L5JZSd5WDjf6/R+dpTDykNDkA8oPBBdoO//yXAp/a9WoKOcdu/x+Hxri3LOATti\n/Y8g5NRwqqqiIdBcncBjZnhVtKO/W85XztaNKY+FetI8Qjs+U3CW1rfr6a9dqb/i\nZQld2kJCwvRq/Afku+wlBhRTTLJ7fuxxbJCgct5JPt3Ka8et+/erzZ+289HQQC6/\n6mNbhJuhPuDeqYWPewOLkCFflITsXzdPMxVkjMsRSa+eMrlN6RBU4xdlcH9Gd9KI\neKZHKNdKWN+GGU13SU8OdbDwQhJG6UPLuFrBn7AUs9yKTvkBbyeaux+DLcaMrPg=\n=jhme\n-----END PGP SIGNATURE-----\n", "payload": "tree 994578d11983e6d1bdf40974167a2eadc01194e3\nparent c739465b1b760911d0e27df18a3b0460afbd4419\nparent 036626f249eff9c7fcf2d1392182ec59e5460b57\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1585744336 +0200\ncommitter GitHub <noreply@github.com> 1585744336 +0200\n\nRollup merge of #70547 - wesleywiser:extract_can_unwind, r=eddyb\n\nAdd `can_unwind` field to `FnAbi`\n\nThis is a pure refactoring with no behavior changes.\n\nExtracted out of #70467\n\nr? @eddyb\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90cecab42be9c28c09dd71b4b65d9f4de6976fae", "html_url": "https://github.com/rust-lang/rust/commit/90cecab42be9c28c09dd71b4b65d9f4de6976fae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90cecab42be9c28c09dd71b4b65d9f4de6976fae/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c739465b1b760911d0e27df18a3b0460afbd4419", "url": "https://api.github.com/repos/rust-lang/rust/commits/c739465b1b760911d0e27df18a3b0460afbd4419", "html_url": "https://github.com/rust-lang/rust/commit/c739465b1b760911d0e27df18a3b0460afbd4419"}, {"sha": "036626f249eff9c7fcf2d1392182ec59e5460b57", "url": "https://api.github.com/repos/rust-lang/rust/commits/036626f249eff9c7fcf2d1392182ec59e5460b57", "html_url": "https://github.com/rust-lang/rust/commit/036626f249eff9c7fcf2d1392182ec59e5460b57"}], "stats": {"total": 131, "additions": 70, "deletions": 61}, "files": [{"sha": "064ca53bd1bd1ad1a2868b962f3293de098f8228", "filename": "src/librustc_codegen_llvm/abi.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/90cecab42be9c28c09dd71b4b65d9f4de6976fae/src%2Flibrustc_codegen_llvm%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90cecab42be9c28c09dd71b4b65d9f4de6976fae/src%2Flibrustc_codegen_llvm%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fabi.rs?ref=90cecab42be9c28c09dd71b4b65d9f4de6976fae", "patch": "@@ -396,6 +396,11 @@ impl<'tcx> FnAbiLlvmExt<'tcx> for FnAbi<'tcx, Ty<'tcx>> {\n             llvm::Attribute::NoReturn.apply_llfn(llvm::AttributePlace::Function, llfn);\n         }\n \n+        // FIXME(eddyb, wesleywiser): apply this to callsites as well?\n+        if !self.can_unwind {\n+            llvm::Attribute::NoUnwind.apply_llfn(llvm::AttributePlace::Function, llfn);\n+        }\n+\n         let mut i = 0;\n         let mut apply = |attrs: &ArgAttributes, ty: Option<&Type>| {\n             attrs.apply_llfn(llvm::AttributePlace::Argument(i), llfn, ty);\n@@ -431,6 +436,8 @@ impl<'tcx> FnAbiLlvmExt<'tcx> for FnAbi<'tcx, Ty<'tcx>> {\n     }\n \n     fn apply_attrs_callsite(&self, bx: &mut Builder<'a, 'll, 'tcx>, callsite: &'ll Value) {\n+        // FIXME(wesleywiser, eddyb): We should apply `nounwind` and `noreturn` as appropriate to this callsite.\n+\n         let mut i = 0;\n         let mut apply = |attrs: &ArgAttributes, ty: Option<&Type>| {\n             attrs.apply_callsite(llvm::AttributePlace::Argument(i), callsite, ty);"}, {"sha": "784a3a87e98852980b52d304ee927e2f85a6b620", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 2, "deletions": 56, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/90cecab42be9c28c09dd71b4b65d9f4de6976fae/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90cecab42be9c28c09dd71b4b65d9f4de6976fae/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=90cecab42be9c28c09dd71b4b65d9f4de6976fae", "patch": "@@ -10,13 +10,10 @@ use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::ty::layout::HasTyCtxt;\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::config::{OptLevel, Sanitizer};\n use rustc_session::Session;\n-use rustc_target::abi::call::Conv;\n-use rustc_target::spec::PanicStrategy;\n \n-use crate::abi::FnAbi;\n use crate::attributes;\n use crate::llvm::AttributePlace::Function;\n use crate::llvm::{self, Attribute};\n@@ -77,12 +74,6 @@ pub fn emit_uwtable(val: &'ll Value, emit: bool) {\n     Attribute::UWTable.toggle_llfn(Function, val, emit);\n }\n \n-/// Tell LLVM whether the function can or cannot unwind.\n-#[inline]\n-fn unwind(val: &'ll Value, can_unwind: bool) {\n-    Attribute::NoUnwind.toggle_llfn(Function, val, !can_unwind);\n-}\n-\n /// Tell LLVM if this function should be 'naked', i.e., skip the epilogue and prologue.\n #[inline]\n fn naked(val: &'ll Value, is_naked: bool) {\n@@ -246,12 +237,7 @@ pub(crate) fn default_optimisation_attrs(sess: &Session, llfn: &'ll Value) {\n \n /// Composite function which sets LLVM attributes for function depending on its AST (`#[attribute]`)\n /// attributes.\n-pub fn from_fn_attrs(\n-    cx: &CodegenCx<'ll, 'tcx>,\n-    llfn: &'ll Value,\n-    instance: ty::Instance<'tcx>,\n-    fn_abi: &FnAbi<'tcx, Ty<'tcx>>,\n-) {\n+pub fn from_fn_attrs(cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value, instance: ty::Instance<'tcx>) {\n     let codegen_fn_attrs = cx.tcx.codegen_fn_attrs(instance.def_id());\n \n     match codegen_fn_attrs.optimize {\n@@ -315,46 +301,6 @@ pub fn from_fn_attrs(\n     }\n     sanitize(cx, codegen_fn_attrs.flags, llfn);\n \n-    unwind(\n-        llfn,\n-        if cx.tcx.sess.panic_strategy() != PanicStrategy::Unwind {\n-            // In panic=abort mode we assume nothing can unwind anywhere, so\n-            // optimize based on this!\n-            false\n-        } else if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::UNWIND) {\n-            // If a specific #[unwind] attribute is present, use that.\n-            true\n-        } else if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::RUSTC_ALLOCATOR_NOUNWIND) {\n-            // Special attribute for allocator functions, which can't unwind.\n-            false\n-        } else {\n-            if fn_abi.conv == Conv::Rust {\n-                // Any Rust method (or `extern \"Rust\" fn` or `extern\n-                // \"rust-call\" fn`) is explicitly allowed to unwind\n-                // (unless it has no-unwind attribute, handled above).\n-                true\n-            } else {\n-                // Anything else is either:\n-                //\n-                //  1. A foreign item using a non-Rust ABI (like `extern \"C\" { fn foo(); }`), or\n-                //\n-                //  2. A Rust item using a non-Rust ABI (like `extern \"C\" fn foo() { ... }`).\n-                //\n-                // Foreign items (case 1) are assumed to not unwind; it is\n-                // UB otherwise. (At least for now; see also\n-                // rust-lang/rust#63909 and Rust RFC 2753.)\n-                //\n-                // Items defined in Rust with non-Rust ABIs (case 2) are also\n-                // not supposed to unwind. Whether this should be enforced\n-                // (versus stating it is UB) and *how* it would be enforced\n-                // is currently under discussion; see rust-lang/rust#58794.\n-                //\n-                // In either case, we mark item as explicitly nounwind.\n-                false\n-            }\n-        },\n-    );\n-\n     // Always annotate functions with the target-cpu they are compiled for.\n     // Without this, ThinLTO won't inline Rust functions into Clang generated\n     // functions (because Clang annotates functions this way too)."}, {"sha": "a36314448b170b82734ee9fb8ad58101598d2d43", "filename": "src/librustc_codegen_llvm/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90cecab42be9c28c09dd71b4b65d9f4de6976fae/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90cecab42be9c28c09dd71b4b65d9f4de6976fae/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcallee.rs?ref=90cecab42be9c28c09dd71b4b65d9f4de6976fae", "patch": "@@ -78,7 +78,7 @@ pub fn get_fn(cx: &CodegenCx<'ll, 'tcx>, instance: Instance<'tcx>) -> &'ll Value\n         let llfn = cx.declare_fn(&sym, &fn_abi);\n         debug!(\"get_fn: not casting pointer!\");\n \n-        attributes::from_fn_attrs(cx, llfn, instance, &fn_abi);\n+        attributes::from_fn_attrs(cx, llfn, instance);\n \n         let instance_def_id = instance.def_id();\n "}, {"sha": "a7a9d0c8a075994c496a963f312c7ab8036e3422", "filename": "src/librustc_codegen_llvm/mono_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90cecab42be9c28c09dd71b4b65d9f4de6976fae/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90cecab42be9c28c09dd71b4b65d9f4de6976fae/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmono_item.rs?ref=90cecab42be9c28c09dd71b4b65d9f4de6976fae", "patch": "@@ -77,7 +77,7 @@ impl PreDefineMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n \n         debug!(\"predefine_fn: instance = {:?}\", instance);\n \n-        attributes::from_fn_attrs(self, lldecl, instance, &fn_abi);\n+        attributes::from_fn_attrs(self, lldecl, instance);\n \n         self.instances.borrow_mut().insert(instance, lldecl);\n     }"}, {"sha": "17c93922b0023a7191d5d192371e0ba4832e3fe2", "filename": "src/librustc_middle/ty/layout.rs", "status": "modified", "additions": 57, "deletions": 3, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/90cecab42be9c28c09dd71b4b65d9f4de6976fae/src%2Flibrustc_middle%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90cecab42be9c28c09dd71b4b65d9f4de6976fae/src%2Flibrustc_middle%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Flayout.rs?ref=90cecab42be9c28c09dd71b4b65d9f4de6976fae", "patch": "@@ -1,4 +1,5 @@\n use crate::ich::StableHashingContext;\n+use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use crate::mir::{GeneratorLayout, GeneratorSavedLocal};\n use crate::ty::subst::Subst;\n use crate::ty::{self, subst::SubstsRef, ReprOptions, Ty, TyCtxt, TypeFoldable};\n@@ -15,7 +16,7 @@ use rustc_target::abi::call::{\n     ArgAbi, ArgAttribute, ArgAttributes, Conv, FnAbi, PassMode, Reg, RegKind,\n };\n pub use rustc_target::abi::*;\n-use rustc_target::spec::{abi::Abi as SpecAbi, HasTargetSpec};\n+use rustc_target::spec::{abi::Abi as SpecAbi, HasTargetSpec, PanicStrategy};\n \n use std::cmp;\n use std::fmt;\n@@ -2368,11 +2369,55 @@ where\n         sig: ty::PolyFnSig<'tcx>,\n         extra_args: &[Ty<'tcx>],\n         caller_location: Option<Ty<'tcx>>,\n+        codegen_fn_attr_flags: CodegenFnAttrFlags,\n         mk_arg_type: impl Fn(Ty<'tcx>, Option<usize>) -> ArgAbi<'tcx, Ty<'tcx>>,\n     ) -> Self;\n     fn adjust_for_abi(&mut self, cx: &C, abi: SpecAbi);\n }\n \n+fn fn_can_unwind(\n+    panic_strategy: PanicStrategy,\n+    codegen_fn_attr_flags: CodegenFnAttrFlags,\n+    call_conv: Conv,\n+) -> bool {\n+    if panic_strategy != PanicStrategy::Unwind {\n+        // In panic=abort mode we assume nothing can unwind anywhere, so\n+        // optimize based on this!\n+        false\n+    } else if codegen_fn_attr_flags.contains(CodegenFnAttrFlags::UNWIND) {\n+        // If a specific #[unwind] attribute is present, use that.\n+        true\n+    } else if codegen_fn_attr_flags.contains(CodegenFnAttrFlags::RUSTC_ALLOCATOR_NOUNWIND) {\n+        // Special attribute for allocator functions, which can't unwind.\n+        false\n+    } else {\n+        if call_conv == Conv::Rust {\n+            // Any Rust method (or `extern \"Rust\" fn` or `extern\n+            // \"rust-call\" fn`) is explicitly allowed to unwind\n+            // (unless it has no-unwind attribute, handled above).\n+            true\n+        } else {\n+            // Anything else is either:\n+            //\n+            //  1. A foreign item using a non-Rust ABI (like `extern \"C\" { fn foo(); }`), or\n+            //\n+            //  2. A Rust item using a non-Rust ABI (like `extern \"C\" fn foo() { ... }`).\n+            //\n+            // Foreign items (case 1) are assumed to not unwind; it is\n+            // UB otherwise. (At least for now; see also\n+            // rust-lang/rust#63909 and Rust RFC 2753.)\n+            //\n+            // Items defined in Rust with non-Rust ABIs (case 2) are also\n+            // not supposed to unwind. Whether this should be enforced\n+            // (versus stating it is UB) and *how* it would be enforced\n+            // is currently under discussion; see rust-lang/rust#58794.\n+            //\n+            // In either case, we mark item as explicitly nounwind.\n+            false\n+        }\n+    }\n+}\n+\n impl<'tcx, C> FnAbiExt<'tcx, C> for call::FnAbi<'tcx, Ty<'tcx>>\n where\n     C: LayoutOf<Ty = Ty<'tcx>, TyAndLayout = TyAndLayout<'tcx>>\n@@ -2382,7 +2427,12 @@ where\n         + HasParamEnv<'tcx>,\n {\n     fn of_fn_ptr(cx: &C, sig: ty::PolyFnSig<'tcx>, extra_args: &[Ty<'tcx>]) -> Self {\n-        call::FnAbi::new_internal(cx, sig, extra_args, None, |ty, _| ArgAbi::new(cx.layout_of(ty)))\n+        // Assume that fn pointers may always unwind\n+        let codegen_fn_attr_flags = CodegenFnAttrFlags::UNWIND;\n+\n+        call::FnAbi::new_internal(cx, sig, extra_args, None, codegen_fn_attr_flags, |ty, _| {\n+            ArgAbi::new(cx.layout_of(ty))\n+        })\n     }\n \n     fn of_instance(cx: &C, instance: ty::Instance<'tcx>, extra_args: &[Ty<'tcx>]) -> Self {\n@@ -2394,7 +2444,9 @@ where\n             None\n         };\n \n-        call::FnAbi::new_internal(cx, sig, extra_args, caller_location, |ty, arg_idx| {\n+        let attrs = cx.tcx().codegen_fn_attrs(instance.def_id()).flags;\n+\n+        call::FnAbi::new_internal(cx, sig, extra_args, caller_location, attrs, |ty, arg_idx| {\n             let mut layout = cx.layout_of(ty);\n             // Don't pass the vtable, it's not an argument of the virtual fn.\n             // Instead, pass just the data pointer, but give it the type `*const/mut dyn Trait`\n@@ -2450,6 +2502,7 @@ where\n         sig: ty::PolyFnSig<'tcx>,\n         extra_args: &[Ty<'tcx>],\n         caller_location: Option<Ty<'tcx>>,\n+        codegen_fn_attr_flags: CodegenFnAttrFlags,\n         mk_arg_type: impl Fn(Ty<'tcx>, Option<usize>) -> ArgAbi<'tcx, Ty<'tcx>>,\n     ) -> Self {\n         debug!(\"FnAbi::new_internal({:?}, {:?})\", sig, extra_args);\n@@ -2639,6 +2692,7 @@ where\n             c_variadic: sig.c_variadic,\n             fixed_count: inputs.len(),\n             conv,\n+            can_unwind: fn_can_unwind(cx.tcx().sess.panic_strategy(), codegen_fn_attr_flags, conv),\n         };\n         fn_abi.adjust_for_abi(cx, sig.abi);\n         fn_abi"}, {"sha": "72768c31e3077444eb9f74f488718d07f8f3bb43", "filename": "src/librustc_target/abi/call/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90cecab42be9c28c09dd71b4b65d9f4de6976fae/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90cecab42be9c28c09dd71b4b65d9f4de6976fae/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs?ref=90cecab42be9c28c09dd71b4b65d9f4de6976fae", "patch": "@@ -546,6 +546,8 @@ pub struct FnAbi<'a, Ty> {\n     pub fixed_count: usize,\n \n     pub conv: Conv,\n+\n+    pub can_unwind: bool,\n }\n \n impl<'a, Ty> FnAbi<'a, Ty> {"}]}