{"sha": "1a5456b766aa427b3bea4e792c0ec21a9ee1bf5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhNTQ1NmI3NjZhYTQyN2IzYmVhNGU3OTJjMGVjMjFhOWVlMWJmNWQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2016-11-02T06:15:02Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2016-11-04T03:59:03Z"}, "message": "Fix invalid \"ref mut mut\" sugestion", "tree": {"sha": "b02a6a2e1669ea1ae4bd958caeec547936e41b18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b02a6a2e1669ea1ae4bd958caeec547936e41b18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a5456b766aa427b3bea4e792c0ec21a9ee1bf5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a5456b766aa427b3bea4e792c0ec21a9ee1bf5d", "html_url": "https://github.com/rust-lang/rust/commit/1a5456b766aa427b3bea4e792c0ec21a9ee1bf5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a5456b766aa427b3bea4e792c0ec21a9ee1bf5d/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac968c466451cb9aafd9e8598ddb396ed0e6fe31", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac968c466451cb9aafd9e8598ddb396ed0e6fe31", "html_url": "https://github.com/rust-lang/rust/commit/ac968c466451cb9aafd9e8598ddb396ed0e6fe31"}], "stats": {"total": 141, "additions": 130, "deletions": 11}, "files": [{"sha": "ae360559a5f3637816139eca9cd248bb18a04220", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1a5456b766aa427b3bea4e792c0ec21a9ee1bf5d/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a5456b766aa427b3bea4e792c0ec21a9ee1bf5d/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=1a5456b766aa427b3bea4e792c0ec21a9ee1bf5d", "patch": "@@ -997,16 +997,23 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                         if let Categorization::Local(local_id) = err.cmt.cat {\n                             let span = self.tcx.map.span(local_id);\n                             if let Ok(snippet) = self.tcx.sess.codemap().span_to_snippet(span) {\n-                                if snippet.starts_with(\"ref \") {\n-                                    db.span_label(span,\n-                                        &format!(\"use `{}` here to make mutable\",\n-                                            snippet.replace(\"ref \", \"ref mut \")));\n-                                } else if snippet != \"self\" {\n-                                    db.span_label(span,\n-                                        &format!(\"use `mut {}` here to make mutable\", snippet));\n+                                if snippet.starts_with(\"ref mut \") || snippet.starts_with(\"&mut \") {\n+                                    db.span_label(error_span, &format!(\"cannot reborrow mutably\"));\n+                                    db.span_label(error_span, &format!(\"try removing `&mut` here\"));\n+                                } else {\n+                                    if snippet.starts_with(\"ref \") {\n+                                        db.span_label(span,\n+                                            &format!(\"use `{}` here to make mutable\",\n+                                                snippet.replace(\"ref \", \"ref mut \")));\n+                                    } else if snippet != \"self\" {\n+                                        db.span_label(span,\n+                                            &format!(\"use `mut {}` here to make mutable\", snippet));\n+                                    }\n+                                    db.span_label(error_span, &format!(\"cannot borrow mutably\"));\n                                 }\n+                            } else {\n+                                db.span_label(error_span, &format!(\"cannot borrow mutably\"));\n                             }\n-                            db.span_label(error_span, &format!(\"cannot borrow mutably\"));\n                         }\n                     }\n                 }"}, {"sha": "374d06bb71d279e5e56067886f5c056d21ce04a0", "filename": "src/test/ui/did_you_mean/issue-31424.rs", "status": "renamed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1a5456b766aa427b3bea4e792c0ec21a9ee1bf5d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a5456b766aa427b3bea4e792c0ec21a9ee1bf5d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.rs?ref=1a5456b766aa427b3bea4e792c0ec21a9ee1bf5d", "patch": "@@ -15,15 +15,12 @@ struct Struct;\n impl Struct {\n     fn foo(&mut self) {\n         (&mut self).bar();\n-        //~^ ERROR cannot borrow immutable argument `self` as mutable\n-        // ... and no SUGGESTION that suggests `&mut mut self`\n     }\n \n     // In this case we could keep the suggestion, but to distinguish the\n     // two cases is pretty hard. It's an obscure case anyway.\n     fn bar(self: &mut Self) {\n         (&mut self).bar();\n-        //~^ ERROR cannot borrow immutable argument `self` as mutable\n     }\n }\n ", "previous_filename": "src/test/compile-fail/issue-31424.rs"}, {"sha": "4873acf551ebc0c1c7f31c0117eb9e3c66269e61", "filename": "src/test/ui/did_you_mean/issue-31424.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1a5456b766aa427b3bea4e792c0ec21a9ee1bf5d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a5456b766aa427b3bea4e792c0ec21a9ee1bf5d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.stderr?ref=1a5456b766aa427b3bea4e792c0ec21a9ee1bf5d", "patch": "@@ -0,0 +1,17 @@\n+error: cannot borrow immutable argument `self` as mutable\n+  --> $DIR/issue-31424.rs:17:15\n+   |\n+17 |         (&mut self).bar();\n+   |               ^^^^\n+   |               |\n+   |               try removing `&mut` here\n+   |               cannot reborrow mutably\n+\n+error: cannot borrow immutable argument `self` as mutable\n+  --> $DIR/issue-31424.rs:23:15\n+   |\n+23 |         (&mut self).bar();\n+   |               ^^^^ cannot borrow mutably\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "9523e6bbf383b8f49007d1fb3efad3a53784bfd1", "filename": "src/test/ui/did_you_mean/issue-34126.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1a5456b766aa427b3bea4e792c0ec21a9ee1bf5d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a5456b766aa427b3bea4e792c0ec21a9ee1bf5d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.rs?ref=1a5456b766aa427b3bea4e792c0ec21a9ee1bf5d", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Z { }\n+\n+impl Z {\n+    fn run(&self, z: &mut Z) { }\n+    fn start(&mut self) {\n+        self.run(&mut self);\n+    }\n+}\n+\n+fn main() {\n+    let mut z = Z {};\n+    z.start();\n+}"}, {"sha": "8011298c80cdded1bf74963020c99171972c61ea", "filename": "src/test/ui/did_you_mean/issue-34126.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1a5456b766aa427b3bea4e792c0ec21a9ee1bf5d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a5456b766aa427b3bea4e792c0ec21a9ee1bf5d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.stderr?ref=1a5456b766aa427b3bea4e792c0ec21a9ee1bf5d", "patch": "@@ -0,0 +1,11 @@\n+error: cannot borrow immutable argument `self` as mutable\n+  --> $DIR/issue-34126.rs:16:23\n+   |\n+16 |         self.run(&mut self);\n+   |                       ^^^^\n+   |                       |\n+   |                       try removing `&mut` here\n+   |                       cannot reborrow mutably\n+\n+error: aborting due to previous error\n+"}, {"sha": "42853a5d83db029e7795184e290fb954fe220a7e", "filename": "src/test/ui/did_you_mean/issue-34337.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1a5456b766aa427b3bea4e792c0ec21a9ee1bf5d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34337.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a5456b766aa427b3bea4e792c0ec21a9ee1bf5d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34337.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34337.rs?ref=1a5456b766aa427b3bea4e792c0ec21a9ee1bf5d", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn get(key: &mut String) { }\n+\n+fn main() {\n+    let mut v: Vec<String> = Vec::new();\n+    let ref mut key = v[0];\n+    get(&mut key);\n+}"}, {"sha": "d658912835b9c438ae889474b8ceccb589b0ad09", "filename": "src/test/ui/did_you_mean/issue-34337.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1a5456b766aa427b3bea4e792c0ec21a9ee1bf5d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34337.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a5456b766aa427b3bea4e792c0ec21a9ee1bf5d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34337.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34337.stderr?ref=1a5456b766aa427b3bea4e792c0ec21a9ee1bf5d", "patch": "@@ -0,0 +1,11 @@\n+error: cannot borrow immutable local variable `key` as mutable\n+  --> $DIR/issue-34337.rs:16:14\n+   |\n+16 |     get(&mut key);\n+   |              ^^^\n+   |              |\n+   |              try removing `&mut` here\n+   |              cannot reborrow mutably\n+\n+error: aborting due to previous error\n+"}, {"sha": "65181768053c0799c70f68653b4c86699c0c5f50", "filename": "src/test/ui/did_you_mean/issue-37139.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1a5456b766aa427b3bea4e792c0ec21a9ee1bf5d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-37139.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a5456b766aa427b3bea4e792c0ec21a9ee1bf5d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-37139.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-37139.rs?ref=1a5456b766aa427b3bea4e792c0ec21a9ee1bf5d", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum TestEnum {\n+    Item(i32),\n+}\n+\n+fn test(_: &mut i32) {\n+}\n+\n+fn main() {\n+    let mut x = TestEnum::Item(10);\n+    match x {\n+        TestEnum::Item(ref mut x) => {\n+            test(&mut x);\n+        }\n+    }\n+}"}, {"sha": "b1a8231fdb6cfd613ed8d206733d147307992b7b", "filename": "src/test/ui/did_you_mean/issue-37139.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1a5456b766aa427b3bea4e792c0ec21a9ee1bf5d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-37139.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a5456b766aa427b3bea4e792c0ec21a9ee1bf5d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-37139.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-37139.stderr?ref=1a5456b766aa427b3bea4e792c0ec21a9ee1bf5d", "patch": "@@ -0,0 +1,11 @@\n+error: cannot borrow immutable local variable `x` as mutable\n+  --> $DIR/issue-37139.rs:22:23\n+   |\n+22 |             test(&mut x);\n+   |                       ^\n+   |                       |\n+   |                       try removing `&mut` here\n+   |                       cannot reborrow mutably\n+\n+error: aborting due to previous error\n+"}]}