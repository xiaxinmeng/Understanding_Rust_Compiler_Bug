{"sha": "aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhNWM0YmIwNWQxZDVkMTBhMmZkYmI4MGYwOThiYTA2ZTczMjE0Yjk=", "commit": {"author": {"name": "Keith Yeung", "email": "kungfukeith11@gmail.com", "date": "2016-08-10T23:20:12Z"}, "committer": {"name": "Keith Yeung", "email": "kungfukeith11@gmail.com", "date": "2016-08-28T05:43:51Z"}, "message": "Change Constness to Spanned<Constness>", "tree": {"sha": "89d3aafd243d531332c7b5e993b51c21bcbe64d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89d3aafd243d531332c7b5e993b51c21bcbe64d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9", "html_url": "https://github.com/rust-lang/rust/commit/aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9/comments", "author": {"login": "KiChjang", "id": 3248587, "node_id": "MDQ6VXNlcjMyNDg1ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/3248587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KiChjang", "html_url": "https://github.com/KiChjang", "followers_url": "https://api.github.com/users/KiChjang/followers", "following_url": "https://api.github.com/users/KiChjang/following{/other_user}", "gists_url": "https://api.github.com/users/KiChjang/gists{/gist_id}", "starred_url": "https://api.github.com/users/KiChjang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KiChjang/subscriptions", "organizations_url": "https://api.github.com/users/KiChjang/orgs", "repos_url": "https://api.github.com/users/KiChjang/repos", "events_url": "https://api.github.com/users/KiChjang/events{/privacy}", "received_events_url": "https://api.github.com/users/KiChjang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "KiChjang", "id": 3248587, "node_id": "MDQ6VXNlcjMyNDg1ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/3248587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KiChjang", "html_url": "https://github.com/KiChjang", "followers_url": "https://api.github.com/users/KiChjang/followers", "following_url": "https://api.github.com/users/KiChjang/following{/other_user}", "gists_url": "https://api.github.com/users/KiChjang/gists{/gist_id}", "starred_url": "https://api.github.com/users/KiChjang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KiChjang/subscriptions", "organizations_url": "https://api.github.com/users/KiChjang/orgs", "repos_url": "https://api.github.com/users/KiChjang/repos", "events_url": "https://api.github.com/users/KiChjang/events{/privacy}", "received_events_url": "https://api.github.com/users/KiChjang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e9e798ccea7f70480c3bcc86e271ca2191b8675", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e9e798ccea7f70480c3bcc86e271ca2191b8675", "html_url": "https://github.com/rust-lang/rust/commit/1e9e798ccea7f70480c3bcc86e271ca2191b8675"}], "stats": {"total": 99, "additions": 61, "deletions": 38}, "files": [{"sha": "be5eb7f83769e0ed382a90cf980703db99ee07f7", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9", "patch": "@@ -809,8 +809,8 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n-    fn lower_constness(&mut self, c: Constness) -> hir::Constness {\n-        match c {\n+    fn lower_constness(&mut self, c: Spanned<Constness>) -> hir::Constness {\n+        match c.node {\n             Constness::Const => hir::Constness::Const,\n             Constness::NotConst => hir::Constness::NotConst,\n         }"}, {"sha": "4487234885692f05f34e205b58c4d0fedcbfa1a1", "filename": "src/librustc/hir/map/blocks.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs?ref=aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9", "patch": "@@ -23,13 +23,13 @@\n \n pub use self::Code::*;\n \n+use hir as ast;\n use hir::map::{self, Node};\n-use syntax::abi;\n use hir::{Block, FnDecl};\n+use hir::intravisit::FnKind;\n+use syntax::abi;\n use syntax::ast::{Attribute, Name, NodeId};\n-use hir as ast;\n use syntax_pos::Span;\n-use hir::intravisit::FnKind;\n \n /// An FnLikeNode is a Node that is like a fn, in that it has a decl\n /// and a body (as well as a NodeId, a span, etc)."}, {"sha": "eab7f37382e67dee570ecb22f2795e2ea2465387", "filename": "src/librustc/infer/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting.rs?ref=aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9", "patch": "@@ -1030,7 +1030,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                     = node_inner.expect(\"expect item fn\");\n         let rebuilder = Rebuilder::new(self.tcx, fn_decl, generics, same_regions, &life_giver);\n         let (fn_decl, generics) = rebuilder.rebuild();\n-        self.give_expl_lifetime_param(err, &fn_decl, unsafety, constness, name, &generics, span);\n+        self.give_expl_lifetime_param(\n+            err, &fn_decl, unsafety, constness, name, &generics, span);\n     }\n \n     pub fn issue_32330_warnings(&self, span: Span, issue32330s: &[ty::Issue32330]) {"}, {"sha": "dde1a4a759563dffd179aa7ede1cfe538cfb911f", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9", "patch": "@@ -20,6 +20,7 @@ use rustc::lint;\n use rustc::session::Session;\n use syntax::ast::*;\n use syntax::attr;\n+use syntax::codemap::Spanned;\n use syntax::parse::token::{self, keywords};\n use syntax::visit::{self, Visitor};\n use syntax_pos::Span;\n@@ -70,11 +71,12 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n-    fn check_trait_fn_not_const(&self, span: Span, constness: Constness) {\n-        match constness {\n+    fn check_trait_fn_not_const(&self, constness: Spanned<Constness>) {\n+        match constness.node {\n             Constness::Const => {\n-                struct_span_err!(self.session, span, E0379, \"trait fns cannot be declared const\")\n-                    .span_label(span, &format!(\"trait fns cannot be const\"))\n+                struct_span_err!(self.session, constness.span, E0379,\n+                                 \"trait fns cannot be declared const\")\n+                    .span_label(constness.span, &format!(\"trait fns cannot be const\"))\n                     .emit();\n             }\n             _ => {}\n@@ -158,7 +160,7 @@ impl<'a> Visitor for AstValidator<'a> {\n                 for impl_item in impl_items {\n                     self.invalid_visibility(&impl_item.vis, impl_item.span, None);\n                     if let ImplItemKind::Method(ref sig, _) = impl_item.node {\n-                        self.check_trait_fn_not_const(impl_item.span, sig.constness);\n+                        self.check_trait_fn_not_const(sig.constness);\n                     }\n                 }\n             }\n@@ -186,7 +188,7 @@ impl<'a> Visitor for AstValidator<'a> {\n             ItemKind::Trait(_, _, _, ref trait_items) => {\n                 for trait_item in trait_items {\n                     if let TraitItemKind::Method(ref sig, _) = trait_item.node {\n-                        self.check_trait_fn_not_const(trait_item.span, sig.constness);\n+                        self.check_trait_fn_not_const(sig.constness);\n                     }\n                 }\n             }"}, {"sha": "2d1b6e1315f8bc810722d68e637a4eae3247afb1", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9", "patch": "@@ -147,7 +147,8 @@ impl<'a, 'gcx> CheckCrateVisitor<'a, 'gcx> {\n         }\n \n         let mode = match fk {\n-            FnKind::ItemFn(_, _, _, hir::Constness::Const, _, _, _) => Mode::ConstFn,\n+            FnKind::ItemFn(_, _, _, hir::Constness::Const, _, _, _)\n+                => Mode::ConstFn,\n             FnKind::Method(_, m, _, _) => {\n                 if m.constness == hir::Constness::Const {\n                     Mode::ConstFn"}, {"sha": "427a44d2e740c23a673bec170c66b1317047a2d3", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9", "patch": "@@ -1120,7 +1120,7 @@ pub struct MutTy {\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct MethodSig {\n     pub unsafety: Unsafety,\n-    pub constness: Constness,\n+    pub constness: Spanned<Constness>,\n     pub abi: Abi,\n     pub decl: P<FnDecl>,\n     pub generics: Generics,\n@@ -1846,7 +1846,7 @@ pub enum ItemKind {\n     /// A function declaration (`fn` or `pub fn`).\n     ///\n     /// E.g. `fn foo(bar: usize) -> usize { .. }`\n-    Fn(P<FnDecl>, Unsafety, Constness, Abi, Generics, P<Block>),\n+    Fn(P<FnDecl>, Unsafety, Spanned<Constness>, Abi, Generics, P<Block>),\n     /// A module declaration (`mod` or `pub mod`).\n     ///\n     /// E.g. `mod foo;` or `mod foo { .. }`"}, {"sha": "14c7e46246d0d454c0a7e83870178480b599ae2f", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9", "patch": "@@ -12,7 +12,7 @@ use abi::Abi;\n use ast::{self, Ident, Generics, Expr, BlockCheckMode, UnOp, PatKind};\n use attr;\n use syntax_pos::{Span, DUMMY_SP, Pos};\n-use codemap::{respan, Spanned};\n+use codemap::{dummy_spanned, respan, Spanned};\n use ext::base::ExtCtxt;\n use parse::token::{self, keywords, InternedString};\n use ptr::P;\n@@ -1016,7 +1016,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                   Vec::new(),\n                   ast::ItemKind::Fn(self.fn_decl(inputs, output),\n                               ast::Unsafety::Normal,\n-                              ast::Constness::NotConst,\n+                              dummy_spanned(ast::Constness::NotConst),\n                               Abi::Rust,\n                               generics,\n                               body))"}, {"sha": "9114c31d29816c459d8db02d530b3d2cac427c16", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9", "patch": "@@ -30,7 +30,7 @@ use ast::{NodeId, PatKind};\n use ast;\n use attr;\n use attr::AttrMetaMethods;\n-use codemap::CodeMap;\n+use codemap::{CodeMap, Spanned};\n use syntax_pos::Span;\n use errors::Handler;\n use visit::{self, FnKind, Visitor};\n@@ -1046,7 +1046,7 @@ impl<'a> Visitor for PostExpansionVisitor<'a> {\n                 _node_id: NodeId) {\n         // check for const fn declarations\n         match fn_kind {\n-            FnKind::ItemFn(_, _, _, ast::Constness::Const, _, _) => {\n+            FnKind::ItemFn(_, _, _, Spanned { node: ast::Constness::Const, .. }, _, _) => {\n                 gate_feature_post!(&self, const_fn, span, \"const fn is unstable\");\n             }\n             _ => {\n@@ -1078,7 +1078,7 @@ impl<'a> Visitor for PostExpansionVisitor<'a> {\n                 if block.is_none() {\n                     self.check_abi(sig.abi, ti.span);\n                 }\n-                if sig.constness == ast::Constness::Const {\n+                if sig.constness.node == ast::Constness::Const {\n                     gate_feature_post!(&self, const_fn, ti.span, \"const fn is unstable\");\n                 }\n             }\n@@ -1105,7 +1105,7 @@ impl<'a> Visitor for PostExpansionVisitor<'a> {\n                                   \"associated constants are experimental\")\n             }\n             ast::ImplItemKind::Method(ref sig, _) => {\n-                if sig.constness == ast::Constness::Const {\n+                if sig.constness.node == ast::Constness::Const {\n                     gate_feature_post!(&self, const_fn, ii.span, \"const fn is unstable\");\n                 }\n             }"}, {"sha": "a89dc80df4b0824419116874ec3f62912b168656", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9", "patch": "@@ -937,7 +937,10 @@ mod tests {\n                                 variadic: false\n                             }),\n                                     ast::Unsafety::Normal,\n-                                    ast::Constness::NotConst,\n+                                    Spanned {\n+                                        span: sp(0,2),\n+                                        node: ast::Constness::NotConst,\n+                                    },\n                                     Abi::Rust,\n                                     ast::Generics{ // no idea on either of these:\n                                         lifetimes: Vec::new(),"}, {"sha": "757c0779e352a1610497bc7f47a898bccca6aca7", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9", "patch": "@@ -39,7 +39,7 @@ use ast::{ViewPath, ViewPathGlob, ViewPathList, ViewPathSimple};\n use ast::{Visibility, WhereClause};\n use ast::{BinOpKind, UnOp};\n use ast;\n-use codemap::{self, CodeMap, Spanned, spanned};\n+use codemap::{self, CodeMap, Spanned, spanned, respan};\n use syntax_pos::{self, Span, BytePos, mk_sp};\n use errors::{self, DiagnosticBuilder};\n use ext::tt::macro_parser;\n@@ -4768,7 +4768,7 @@ impl<'a> Parser<'a> {\n     /// Parse an item-position function declaration.\n     fn parse_item_fn(&mut self,\n                      unsafety: Unsafety,\n-                     constness: Constness,\n+                     constness: Spanned<Constness>,\n                      abi: abi::Abi)\n                      -> PResult<'a, ItemInfo> {\n         let (ident, mut generics) = self.parse_fn_header()?;\n@@ -4794,18 +4794,21 @@ impl<'a> Parser<'a> {\n     /// - `extern fn`\n     /// - etc\n     pub fn parse_fn_front_matter(&mut self)\n-                                 -> PResult<'a, (ast::Constness, ast::Unsafety, abi::Abi)> {\n+                                 -> PResult<'a, (Spanned<ast::Constness>,\n+                                                ast::Unsafety,\n+                                                abi::Abi)> {\n         let is_const_fn = self.eat_keyword(keywords::Const);\n+        let const_span = self.last_span;\n         let unsafety = self.parse_unsafety()?;\n         let (constness, unsafety, abi) = if is_const_fn {\n-            (Constness::Const, unsafety, Abi::Rust)\n+            (respan(const_span, Constness::Const), unsafety, Abi::Rust)\n         } else {\n             let abi = if self.eat_keyword(keywords::Extern) {\n                 self.parse_opt_abi()?.unwrap_or(Abi::C)\n             } else {\n                 Abi::Rust\n             };\n-            (Constness::NotConst, unsafety, abi)\n+            (respan(self.last_span, Constness::NotConst), unsafety, abi)\n         };\n         self.expect_keyword(keywords::Fn)?;\n         Ok((constness, unsafety, abi))\n@@ -5704,9 +5707,12 @@ impl<'a> Parser<'a> {\n \n             if self.eat_keyword(keywords::Fn) {\n                 // EXTERN FUNCTION ITEM\n+                let fn_span = self.last_span;\n                 let abi = opt_abi.unwrap_or(Abi::C);\n                 let (ident, item_, extra_attrs) =\n-                    self.parse_item_fn(Unsafety::Normal, Constness::NotConst, abi)?;\n+                    self.parse_item_fn(Unsafety::Normal,\n+                                       respan(fn_span, Constness::NotConst),\n+                                       abi)?;\n                 let last_span = self.last_span;\n                 let item = self.mk_item(lo,\n                                         last_span.hi,\n@@ -5740,6 +5746,7 @@ impl<'a> Parser<'a> {\n             return Ok(Some(item));\n         }\n         if self.eat_keyword(keywords::Const) {\n+            let const_span = self.last_span;\n             if self.check_keyword(keywords::Fn)\n                 || (self.check_keyword(keywords::Unsafe)\n                     && self.look_ahead(1, |t| t.is_keyword(keywords::Fn))) {\n@@ -5751,7 +5758,9 @@ impl<'a> Parser<'a> {\n                 };\n                 self.bump();\n                 let (ident, item_, extra_attrs) =\n-                    self.parse_item_fn(unsafety, Constness::Const, Abi::Rust)?;\n+                    self.parse_item_fn(unsafety,\n+                                       respan(const_span, Constness::Const),\n+                                       Abi::Rust)?;\n                 let last_span = self.last_span;\n                 let item = self.mk_item(lo,\n                                         last_span.hi,\n@@ -5815,8 +5824,11 @@ impl<'a> Parser<'a> {\n         if self.check_keyword(keywords::Fn) {\n             // FUNCTION ITEM\n             self.bump();\n+            let fn_span = self.last_span;\n             let (ident, item_, extra_attrs) =\n-                self.parse_item_fn(Unsafety::Normal, Constness::NotConst, Abi::Rust)?;\n+                self.parse_item_fn(Unsafety::Normal,\n+                                   respan(fn_span, Constness::NotConst),\n+                                   Abi::Rust)?;\n             let last_span = self.last_span;\n             let item = self.mk_item(lo,\n                                     last_span.hi,\n@@ -5836,8 +5848,11 @@ impl<'a> Parser<'a> {\n                 Abi::Rust\n             };\n             self.expect_keyword(keywords::Fn)?;\n+            let fn_span = self.last_span;\n             let (ident, item_, extra_attrs) =\n-                self.parse_item_fn(Unsafety::Unsafe, Constness::NotConst, abi)?;\n+                self.parse_item_fn(Unsafety::Unsafe,\n+                                   respan(fn_span, Constness::NotConst),\n+                                   abi)?;\n             let last_span = self.last_span;\n             let item = self.mk_item(lo,\n                                     last_span.hi,"}, {"sha": "4c834403063067b2d1a97afc283de0c4c4606a94", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9", "patch": "@@ -1184,7 +1184,7 @@ impl<'a> State<'a> {\n                 try!(self.print_fn(\n                     decl,\n                     unsafety,\n-                    constness,\n+                    constness.node,\n                     abi,\n                     Some(item.ident),\n                     typarams,\n@@ -1518,7 +1518,7 @@ impl<'a> State<'a> {\n                             -> io::Result<()> {\n         self.print_fn(&m.decl,\n                       m.unsafety,\n-                      m.constness,\n+                      m.constness.node,\n                       m.abi,\n                       Some(ident),\n                       &m.generics,"}, {"sha": "cbf9aa8c6c17f1c79f031629ddcb1505e07bd73a", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9", "patch": "@@ -24,7 +24,7 @@ use attr;\n use syntax_pos::{self, DUMMY_SP, NO_EXPANSION, Span, FileMap, BytePos};\n use std::rc::Rc;\n \n-use codemap::{self, CodeMap, ExpnInfo, NameAndSpan, MacroAttribute};\n+use codemap::{self, CodeMap, ExpnInfo, NameAndSpan, MacroAttribute, dummy_spanned};\n use errors;\n use errors::snippet::{SnippetData};\n use config;\n@@ -485,7 +485,7 @@ fn mk_main(cx: &mut TestCtxt) -> P<ast::Item> {\n     let main_body = ecx.block(sp, vec![call_test_main]);\n     let main = ast::ItemKind::Fn(ecx.fn_decl(vec![], main_ret_ty),\n                            ast::Unsafety::Normal,\n-                           ast::Constness::NotConst,\n+                           dummy_spanned(ast::Constness::NotConst),\n                            ::abi::Abi::Rust, ast::Generics::default(), main_body);\n     let main = P(ast::Item {\n         ident: token::str_to_ident(\"main\"),"}, {"sha": "d75110b2654ce1e958460280ee95f79581f9d45c", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9", "patch": "@@ -31,7 +31,7 @@ use codemap::Spanned;\n #[derive(Copy, Clone, PartialEq, Eq)]\n pub enum FnKind<'a> {\n     /// fn foo() or extern \"Abi\" fn foo()\n-    ItemFn(Ident, &'a Generics, Unsafety, Constness, Abi, &'a Visibility),\n+    ItemFn(Ident, &'a Generics, Unsafety, Spanned<Constness>, Abi, &'a Visibility),\n \n     /// fn foo(&self)\n     Method(Ident, &'a MethodSig, Option<&'a Visibility>),"}, {"sha": "809f444b9936e41ce19f8dba460475d6b09aec37", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=aa5c4bb05d1d5d10a2fdbb80f098ba06e73214b9", "patch": "@@ -197,7 +197,7 @@ use syntax::attr;\n use syntax::attr::AttrMetaMethods;\n use syntax::ext::base::{Annotatable, ExtCtxt};\n use syntax::ext::build::AstBuilder;\n-use syntax::codemap::{self, respan};\n+use syntax::codemap::{self, dummy_spanned, respan};\n use syntax::util::move_map::MoveMap;\n use syntax::parse::token::{InternedString, keywords};\n use syntax::ptr::P;\n@@ -901,7 +901,8 @@ impl<'a> MethodDef<'a> {\n                                                 generics: fn_generics,\n                                                 abi: abi,\n                                                 unsafety: unsafety,\n-                                                constness: ast::Constness::NotConst,\n+                                                constness:\n+                                                    dummy_spanned(ast::Constness::NotConst),\n                                                 decl: fn_decl,\n                                             },\n                                             body_block),"}]}