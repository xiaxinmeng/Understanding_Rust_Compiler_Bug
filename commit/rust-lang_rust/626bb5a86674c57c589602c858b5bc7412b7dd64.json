{"sha": "626bb5a86674c57c589602c858b5bc7412b7dd64", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyNmJiNWE4NjY3NGM1N2M1ODk2MDJjODU4YjViYzc0MTJiN2RkNjQ=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-07-23T00:11:24Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-07-24T13:45:20Z"}, "message": "add a RandomAccessIterator trait", "tree": {"sha": "f1b5957e9f5e9911f881ca9429e2aceca3f75657", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1b5957e9f5e9911f881ca9429e2aceca3f75657"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/626bb5a86674c57c589602c858b5bc7412b7dd64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/626bb5a86674c57c589602c858b5bc7412b7dd64", "html_url": "https://github.com/rust-lang/rust/commit/626bb5a86674c57c589602c858b5bc7412b7dd64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/626bb5a86674c57c589602c858b5bc7412b7dd64/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ee423858a23f3a3eccddf9b8b36bfe64660397b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ee423858a23f3a3eccddf9b8b36bfe64660397b", "html_url": "https://github.com/rust-lang/rust/commit/3ee423858a23f3a3eccddf9b8b36bfe64660397b"}], "stats": {"total": 119, "additions": 117, "deletions": 2}, "files": [{"sha": "2c971f0c9ce47c781b9e55c24ffc8d508c89d9ca", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/626bb5a86674c57c589602c858b5bc7412b7dd64/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626bb5a86674c57c589602c858b5bc7412b7dd64/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=626bb5a86674c57c589602c858b5bc7412b7dd64", "patch": "@@ -53,6 +53,16 @@ pub trait DoubleEndedIterator<A>: Iterator<A> {\n     fn next_back(&mut self) -> Option<A>;\n }\n \n+/// An object implementing random access indexing by `uint`\n+pub trait RandomAccessIterator<A> {\n+    /// Return the number of indexable elements. At most `std::uint::max_value`\n+    /// elements are indexable, even if the iterator represents a longer range.\n+    fn indexable(&self) -> uint;\n+\n+    /// Return an element at an index\n+    fn idx(&self, index: uint) -> Option<A>;\n+}\n+\n /// Iterator adaptors provided for every `DoubleEndedIterator` implementation.\n ///\n /// In the future these will be default methods instead of a utility trait.\n@@ -836,6 +846,30 @@ for ChainIterator<A, T, U> {\n     }\n }\n \n+impl<A, T: RandomAccessIterator<A>, U: RandomAccessIterator<A>> RandomAccessIterator<A>\n+for ChainIterator<A, T, U> {\n+    #[inline]\n+    fn indexable(&self) -> uint {\n+        let (a, b) = (self.a.indexable(), self.b.indexable());\n+        let total = a + b;\n+        if total < a || total < b {\n+            uint::max_value\n+        } else {\n+            total\n+        }\n+    }\n+\n+    #[inline]\n+    fn idx(&self, index: uint) -> Option<A> {\n+        let len = self.a.indexable();\n+        if index < len {\n+            self.a.idx(index)\n+        } else {\n+            self.b.idx(index - len)\n+        }\n+    }\n+}\n+\n /// An iterator which iterates two other iterators simultaneously\n // FIXME #6967: Dummy A & B parameters to get around type inference bug\n #[deriving(Clone)]\n@@ -1718,4 +1752,23 @@ mod tests {\n         assert_eq!(it.next_back().unwrap(), &7)\n         assert_eq!(it.next_back(), None)\n     }\n+\n+    #[test]\n+    fn test_random_access_chain() {\n+        let xs = [1, 2, 3, 4, 5];\n+        let ys = ~[7, 9, 11];\n+        let mut it = xs.iter().chain_(ys.iter());\n+        assert_eq!(it.idx(0).unwrap(), &1);\n+        assert_eq!(it.idx(5).unwrap(), &7);\n+        assert_eq!(it.idx(7).unwrap(), &11);\n+        assert!(it.idx(8).is_none());\n+\n+        it.next();\n+        it.next();\n+        it.next_back();\n+\n+        assert_eq!(it.idx(0).unwrap(), &3);\n+        assert_eq!(it.idx(4).unwrap(), &9);\n+        assert!(it.idx(6).is_none());\n+    }\n }"}, {"sha": "9c66ee5eae45aa371c1e39ec5d79d1c0adf73be8", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 64, "deletions": 2, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/626bb5a86674c57c589602c858b5bc7412b7dd64/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626bb5a86674c57c589602c858b5bc7412b7dd64/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=626bb5a86674c57c589602c858b5bc7412b7dd64", "patch": "@@ -2116,8 +2116,7 @@ macro_rules! iterator {\n \n             #[inline]\n             fn size_hint(&self) -> (uint, Option<uint>) {\n-                let diff = (self.end as uint) - (self.ptr as uint);\n-                let exact = diff / sys::nonzero_size_of::<$elem>();\n+                let exact = self.indexable();\n                 (exact, Some(exact))\n             }\n         }\n@@ -2145,6 +2144,28 @@ macro_rules! double_ended_iterator {\n     }\n }\n \n+macro_rules! random_access_iterator {\n+    (impl $name:ident -> $elem:ty) => {\n+        impl<'self, T> RandomAccessIterator<$elem> for $name<'self, T> {\n+            #[inline]\n+            fn indexable(&self) -> uint {\n+                let diff = (self.end as uint) - (self.ptr as uint);\n+                diff / sys::nonzero_size_of::<T>()\n+            }\n+\n+            fn idx(&self, index: uint) -> Option<$elem> {\n+                unsafe {\n+                    if index < self.indexable() {\n+                        cast::transmute(self.ptr.offset(index))\n+                    } else {\n+                        None\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n //iterator!{struct VecIterator -> *T, &'self T}\n /// An iterator for iterating over a vector.\n pub struct VecIterator<'self, T> {\n@@ -2154,6 +2175,7 @@ pub struct VecIterator<'self, T> {\n }\n iterator!{impl VecIterator -> &'self T}\n double_ended_iterator!{impl VecIterator -> &'self T}\n+random_access_iterator!{impl VecIterator -> &'self T}\n pub type VecRevIterator<'self, T> = InvertIterator<&'self T, VecIterator<'self, T>>;\n \n impl<'self, T> Clone for VecIterator<'self, T> {\n@@ -2169,6 +2191,7 @@ pub struct VecMutIterator<'self, T> {\n }\n iterator!{impl VecMutIterator -> &'self mut T}\n double_ended_iterator!{impl VecMutIterator -> &'self mut T}\n+random_access_iterator!{impl VecMutIterator -> &'self mut T}\n pub type VecMutRevIterator<'self, T> = InvertIterator<&'self mut T, VecMutIterator<'self, T>>;\n \n /// An iterator that moves out of a vector.\n@@ -3108,6 +3131,45 @@ mod tests {\n         assert!(it.next().is_none());\n     }\n \n+    #[test]\n+    fn test_random_access_iterator() {\n+        use iterator::*;\n+        let xs = [1, 2, 5, 10, 11];\n+        let mut it = xs.iter();\n+\n+        assert_eq!(it.indexable(), 5);\n+        assert_eq!(it.idx(0).unwrap(), &1);\n+        assert_eq!(it.idx(2).unwrap(), &5);\n+        assert_eq!(it.idx(4).unwrap(), &11);\n+        assert!(it.idx(5).is_none());\n+\n+        assert_eq!(it.next().unwrap(), &1);\n+        assert_eq!(it.indexable(), 4);\n+        assert_eq!(it.idx(0).unwrap(), &2);\n+        assert_eq!(it.idx(3).unwrap(), &11);\n+        assert!(it.idx(4).is_none());\n+\n+        assert_eq!(it.next().unwrap(), &2);\n+        assert_eq!(it.indexable(), 3);\n+        assert_eq!(it.idx(1).unwrap(), &10);\n+        assert!(it.idx(3).is_none());\n+\n+        assert_eq!(it.next().unwrap(), &5);\n+        assert_eq!(it.indexable(), 2);\n+        assert_eq!(it.idx(1).unwrap(), &11);\n+\n+        assert_eq!(it.next().unwrap(), &10);\n+        assert_eq!(it.indexable(), 1);\n+        assert_eq!(it.idx(0).unwrap(), &11);\n+        assert!(it.idx(1).is_none());\n+\n+        assert_eq!(it.next().unwrap(), &11);\n+        assert_eq!(it.indexable(), 0);\n+        assert!(it.idx(0).is_none());\n+\n+        assert!(it.next().is_none());\n+    }\n+\n     #[test]\n     fn test_iter_size_hints() {\n         use iterator::*;"}]}