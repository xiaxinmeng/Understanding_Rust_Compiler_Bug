{"sha": "e03d1064f0d98961b83885ce951351ae57cc7aad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwM2QxMDY0ZjBkOTg5NjFiODM4ODVjZTk1MTM1MWFlNTdjYzdhYWQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-11T08:59:14Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-01T17:54:55Z"}, "message": "syntax: move GLOBALS to attr module", "tree": {"sha": "28a1df9cf7cf2709531328a68370bfd4d8f88035", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28a1df9cf7cf2709531328a68370bfd4d8f88035"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e03d1064f0d98961b83885ce951351ae57cc7aad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e03d1064f0d98961b83885ce951351ae57cc7aad", "html_url": "https://github.com/rust-lang/rust/commit/e03d1064f0d98961b83885ce951351ae57cc7aad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e03d1064f0d98961b83885ce951351ae57cc7aad/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50f0e2e9e6e85c5ae15ffde79e34edfd284465fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/50f0e2e9e6e85c5ae15ffde79e34edfd284465fd", "html_url": "https://github.com/rust-lang/rust/commit/50f0e2e9e6e85c5ae15ffde79e34edfd284465fd"}], "stats": {"total": 79, "additions": 38, "deletions": 41}, "files": [{"sha": "910a0e52e53cf100027acdeab85d4acf5761483e", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e03d1064f0d98961b83885ce951351ae57cc7aad/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e03d1064f0d98961b83885ce951351ae57cc7aad/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=e03d1064f0d98961b83885ce951351ae57cc7aad", "patch": "@@ -1671,7 +1671,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n             }\n \n             let meta = attr::mk_list_item(Ident::with_dummy_span(sym::doc), items);\n-            *at = attr::Attribute {\n+            *at = ast::Attribute {\n                 kind: ast::AttrKind::Normal(AttrItem {\n                     path: meta.path,\n                     args: meta.kind.mac_args(meta.span),"}, {"sha": "f491d662f971d052a58d3fb6544462915940e3db", "filename": "src/librustc_interface/interface.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e03d1064f0d98961b83885ce951351ae57cc7aad/src%2Flibrustc_interface%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e03d1064f0d98961b83885ce951351ae57cc7aad/src%2Flibrustc_interface%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Finterface.rs?ref=e03d1064f0d98961b83885ce951351ae57cc7aad", "patch": "@@ -65,7 +65,7 @@ impl Compiler {\n \n /// Converts strings provided as `--cfg [cfgspec]` into a `crate_cfg`.\n pub fn parse_cfgspecs(cfgspecs: Vec<String>) -> FxHashSet<(String, Option<String>)> {\n-    syntax::with_default_globals(move || {\n+    syntax::attr::with_default_globals(move || {\n         let cfg = cfgspecs\n             .into_iter()\n             .map(|s| {"}, {"sha": "6bda85ded2b7b893a0188af4fb8405773a0c2b7e", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e03d1064f0d98961b83885ce951351ae57cc7aad/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e03d1064f0d98961b83885ce951351ae57cc7aad/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=e03d1064f0d98961b83885ce951351ae57cc7aad", "patch": "@@ -146,7 +146,7 @@ pub fn spawn_thread_pool<F: FnOnce() -> R + Send, R: Send>(\n     crate::callbacks::setup_callbacks();\n \n     scoped_thread(cfg, || {\n-        syntax::with_globals(edition, || {\n+        syntax::attr::with_globals(edition, || {\n             ty::tls::GCX_PTR.set(&Lock::new(0), || {\n                 if let Some(stderr) = stderr {\n                     io::set_panic(Some(box Sink(stderr.clone())));"}, {"sha": "ba36e06fd37f28b9cb1b97452023741777b77a52", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e03d1064f0d98961b83885ce951351ae57cc7aad/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e03d1064f0d98961b83885ce951351ae57cc7aad/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=e03d1064f0d98961b83885ce951351ae57cc7aad", "patch": "@@ -18,7 +18,7 @@ use std::path::PathBuf;\n use std::process::{self, Command, Stdio};\n use std::str;\n use syntax::ast;\n-use syntax::with_globals;\n+use syntax::attr::with_globals;\n use tempfile::Builder as TempFileBuilder;\n use testing;\n "}, {"sha": "419297678d2c7bc9f21ceca41b308f6b29ffe01b", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e03d1064f0d98961b83885ce951351ae57cc7aad/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e03d1064f0d98961b83885ce951351ae57cc7aad/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=e03d1064f0d98961b83885ce951351ae57cc7aad", "patch": "@@ -2,22 +2,24 @@\n \n mod builtin;\n \n-pub use crate::ast::Attribute;\n pub use builtin::*;\n pub use IntType::*;\n pub use ReprAttr::*;\n pub use StabilityLevel::*;\n \n use crate::ast;\n-use crate::ast::{AttrId, AttrItem, AttrKind, AttrStyle, AttrVec, Ident, Name, Path, PathSegment};\n+use crate::ast::{AttrId, AttrItem, AttrKind, AttrStyle, AttrVec, Attribute};\n use crate::ast::{Expr, GenericParam, Item, Lit, LitKind, Local, Stmt, StmtKind};\n+use crate::ast::{Ident, Name, Path, PathSegment};\n use crate::ast::{MacArgs, MacDelimiter, MetaItem, MetaItemKind, NestedMetaItem};\n use crate::mut_visit::visit_clobber;\n use crate::ptr::P;\n use crate::token::{self, Token};\n use crate::tokenstream::{DelimSpan, TokenStream, TokenTree, TreeAndJoint};\n-use crate::GLOBALS;\n \n+use rustc_data_structures::sync::Lock;\n+use rustc_index::bit_set::GrowableBitSet;\n+use rustc_span::edition::{Edition, DEFAULT_EDITION};\n use rustc_span::source_map::{BytePos, Spanned};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n@@ -26,6 +28,35 @@ use log::debug;\n use std::iter;\n use std::ops::DerefMut;\n \n+pub struct Globals {\n+    used_attrs: Lock<GrowableBitSet<AttrId>>,\n+    known_attrs: Lock<GrowableBitSet<AttrId>>,\n+    rustc_span_globals: rustc_span::Globals,\n+}\n+\n+impl Globals {\n+    fn new(edition: Edition) -> Globals {\n+        Globals {\n+            // We have no idea how many attributes there will be, so just\n+            // initiate the vectors with 0 bits. We'll grow them as necessary.\n+            used_attrs: Lock::new(GrowableBitSet::new_empty()),\n+            known_attrs: Lock::new(GrowableBitSet::new_empty()),\n+            rustc_span_globals: rustc_span::Globals::new(edition),\n+        }\n+    }\n+}\n+\n+pub fn with_globals<R>(edition: Edition, f: impl FnOnce() -> R) -> R {\n+    let globals = Globals::new(edition);\n+    GLOBALS.set(&globals, || rustc_span::GLOBALS.set(&globals.rustc_span_globals, f))\n+}\n+\n+pub fn with_default_globals<R>(f: impl FnOnce() -> R) -> R {\n+    with_globals(DEFAULT_EDITION, f)\n+}\n+\n+scoped_tls::scoped_thread_local!(pub static GLOBALS: Globals);\n+\n pub fn mark_used(attr: &Attribute) {\n     debug!(\"marking {:?} as used\", attr);\n     GLOBALS.with(|globals| {"}, {"sha": "9fcc7a1dfa89987bb3cfb032028726c2a08b8231", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e03d1064f0d98961b83885ce951351ae57cc7aad/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e03d1064f0d98961b83885ce951351ae57cc7aad/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=e03d1064f0d98961b83885ce951351ae57cc7aad", "patch": "@@ -17,11 +17,6 @@\n #![feature(unicode_internals)]\n #![recursion_limit = \"256\"]\n \n-use ast::AttrId;\n-use rustc_data_structures::sync::Lock;\n-use rustc_index::bit_set::GrowableBitSet;\n-use rustc_span::edition::{Edition, DEFAULT_EDITION};\n-\n #[macro_export]\n macro_rules! unwrap_or {\n     ($opt:expr, $default:expr) => {\n@@ -32,35 +27,6 @@ macro_rules! unwrap_or {\n     };\n }\n \n-pub struct Globals {\n-    used_attrs: Lock<GrowableBitSet<AttrId>>,\n-    known_attrs: Lock<GrowableBitSet<AttrId>>,\n-    rustc_span_globals: rustc_span::Globals,\n-}\n-\n-impl Globals {\n-    fn new(edition: Edition) -> Globals {\n-        Globals {\n-            // We have no idea how many attributes there will be, so just\n-            // initiate the vectors with 0 bits. We'll grow them as necessary.\n-            used_attrs: Lock::new(GrowableBitSet::new_empty()),\n-            known_attrs: Lock::new(GrowableBitSet::new_empty()),\n-            rustc_span_globals: rustc_span::Globals::new(edition),\n-        }\n-    }\n-}\n-\n-pub fn with_globals<R>(edition: Edition, f: impl FnOnce() -> R) -> R {\n-    let globals = Globals::new(edition);\n-    GLOBALS.set(&globals, || rustc_span::GLOBALS.set(&globals.rustc_span_globals, f))\n-}\n-\n-pub fn with_default_globals<R>(f: impl FnOnce() -> R) -> R {\n-    with_globals(DEFAULT_EDITION, f)\n-}\n-\n-scoped_tls::scoped_thread_local!(pub static GLOBALS: Globals);\n-\n pub mod util {\n     pub mod classify;\n     pub mod comments;"}]}