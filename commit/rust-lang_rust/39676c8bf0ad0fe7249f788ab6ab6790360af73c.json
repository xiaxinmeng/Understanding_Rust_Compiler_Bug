{"sha": "39676c8bf0ad0fe7249f788ab6ab6790360af73c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5Njc2YzhiZjBhZDBmZTcyNDlmNzg4YWI2YWI2NzkwMzYwYWY3M2M=", "commit": {"author": {"name": "Sebastian Gesemann", "email": "s.gesemann@gmail.com", "date": "2015-01-16T07:31:01Z"}, "committer": {"name": "Sebastian Gesemann", "email": "s.gesemann@gmail.com", "date": "2015-01-16T07:31:01Z"}, "message": "Fix/update core::ops module documentation w.r.t. operator traits\n\n* Not all traits are part of the prelude anymore\n* We switched from pass-by-reference to pass-by-value for most traits\n* Add some explanations around pass-by-value traits in the context of\n  generic code and additional implementations for reference types.", "tree": {"sha": "419c09dda8b2535f7ca87f6c3d7651a3d74ccc6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/419c09dda8b2535f7ca87f6c3d7651a3d74ccc6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39676c8bf0ad0fe7249f788ab6ab6790360af73c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39676c8bf0ad0fe7249f788ab6ab6790360af73c", "html_url": "https://github.com/rust-lang/rust/commit/39676c8bf0ad0fe7249f788ab6ab6790360af73c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39676c8bf0ad0fe7249f788ab6ab6790360af73c/comments", "author": {"login": "sellibitze", "id": 290865, "node_id": "MDQ6VXNlcjI5MDg2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/290865?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sellibitze", "html_url": "https://github.com/sellibitze", "followers_url": "https://api.github.com/users/sellibitze/followers", "following_url": "https://api.github.com/users/sellibitze/following{/other_user}", "gists_url": "https://api.github.com/users/sellibitze/gists{/gist_id}", "starred_url": "https://api.github.com/users/sellibitze/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sellibitze/subscriptions", "organizations_url": "https://api.github.com/users/sellibitze/orgs", "repos_url": "https://api.github.com/users/sellibitze/repos", "events_url": "https://api.github.com/users/sellibitze/events{/privacy}", "received_events_url": "https://api.github.com/users/sellibitze/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sellibitze", "id": 290865, "node_id": "MDQ6VXNlcjI5MDg2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/290865?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sellibitze", "html_url": "https://github.com/sellibitze", "followers_url": "https://api.github.com/users/sellibitze/followers", "following_url": "https://api.github.com/users/sellibitze/following{/other_user}", "gists_url": "https://api.github.com/users/sellibitze/gists{/gist_id}", "starred_url": "https://api.github.com/users/sellibitze/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sellibitze/subscriptions", "organizations_url": "https://api.github.com/users/sellibitze/orgs", "repos_url": "https://api.github.com/users/sellibitze/repos", "events_url": "https://api.github.com/users/sellibitze/events{/privacy}", "received_events_url": "https://api.github.com/users/sellibitze/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5eb254b1ccf196ea0856782eba96f92ae0786617", "url": "https://api.github.com/repos/rust-lang/rust/commits/5eb254b1ccf196ea0856782eba96f92ae0786617", "html_url": "https://github.com/rust-lang/rust/commit/5eb254b1ccf196ea0856782eba96f92ae0786617"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "88e0aac2b12312bfbf29b1d8c5fd13f40e0a3f47", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39676c8bf0ad0fe7249f788ab6ab6790360af73c/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39676c8bf0ad0fe7249f788ab6ab6790360af73c/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=39676c8bf0ad0fe7249f788ab6ab6790360af73c", "patch": "@@ -13,12 +13,20 @@\n //! Implementing these traits allows you to get an effect similar to\n //! overloading operators.\n //!\n-//! The values for the right hand side of an operator are automatically\n-//! borrowed, so `a + b` is sugar for `a.add(&b)`.\n-//!\n-//! All of these traits are imported by the prelude, so they are available in\n+//! Some of these traits are imported by the prelude, so they are available in\n //! every Rust program.\n //!\n+//! Many of the operators take their operands by value. In non-generic\n+//! contexts involving built-in types, this is usually not a problem.\n+//! However, using these operators in generic code, requires some\n+//! attention if values have to be reused as opposed to letting the operators\n+//! consume them. One option is to occasionally use `clone()`.\n+//! Another option is to rely on the types involved providing additional\n+//! operator implementations for references. For example, for a user-defined\n+//! type `T` which is supposed to support addition, it is probably a good\n+//! idea to have both `T` and `&T` implement the traits `Add<T>` and `Add<&T>`\n+//! so that generic code can be written without unnecessary cloning.\n+//!\n //! # Example\n //!\n //! This example creates a `Point` struct that implements `Add` and `Sub`, and then"}]}