{"sha": "7d7969d065c438399cde2ebdcd411e5225a31b88", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkNzk2OWQwNjVjNDM4Mzk5Y2RlMmViZGNkNDExZTUyMjVhMzFiODg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-08T07:06:07Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-16T08:59:53Z"}, "message": "syntax: extract parse_derive_paths", "tree": {"sha": "2ef79bd9770315a44305f0f4bae02210fc7f7aa9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ef79bd9770315a44305f0f4bae02210fc7f7aa9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d7969d065c438399cde2ebdcd411e5225a31b88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d7969d065c438399cde2ebdcd411e5225a31b88", "html_url": "https://github.com/rust-lang/rust/commit/7d7969d065c438399cde2ebdcd411e5225a31b88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d7969d065c438399cde2ebdcd411e5225a31b88/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9dba03f6cd8b51db9423f1d2fc9c94acd72b6183", "url": "https://api.github.com/repos/rust-lang/rust/commits/9dba03f6cd8b51db9423f1d2fc9c94acd72b6183", "html_url": "https://github.com/rust-lang/rust/commit/9dba03f6cd8b51db9423f1d2fc9c94acd72b6183"}], "stats": {"total": 39, "additions": 20, "deletions": 19}, "files": [{"sha": "965d4597430f8abbc1655033a12a20457dc32484", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7d7969d065c438399cde2ebdcd411e5225a31b88/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d7969d065c438399cde2ebdcd411e5225a31b88/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=7d7969d065c438399cde2ebdcd411e5225a31b88", "patch": "@@ -298,24 +298,12 @@ impl Attribute {\n         Ok(result)\n     }\n \n-    pub fn parse_list<'a, T, F>(&self, sess: &'a ParseSess, mut f: F) -> PResult<'a, Vec<T>>\n-        where F: FnMut(&mut Parser<'a>) -> PResult<'a, T>,\n-    {\n+    pub fn parse_derive_paths<'a>(&self, sess: &'a ParseSess) -> PResult<'a, Vec<Path>> {\n         if self.tokens.is_empty() {\n             return Ok(Vec::new());\n         }\n-        self.parse(sess, |parser| {\n-            parser.expect(&token::OpenDelim(token::Paren))?;\n-            let mut list = Vec::new();\n-            while !parser.eat(&token::CloseDelim(token::Paren)) {\n-                list.push(f(parser)?);\n-                if !parser.eat(&token::Comma) {\n-                   parser.expect(&token::CloseDelim(token::Paren))?;\n-                    break\n-                }\n-            }\n-            Ok(list)\n-        })\n+\n+        self.parse(sess, |p| p.parse_derive_paths())\n     }\n \n     pub fn parse_meta<'a>(&self, sess: &'a ParseSess) -> PResult<'a, MetaItem> {"}, {"sha": "72062d2ffbf58bae25a9c4bc6fde9bdec7f31e19", "filename": "src/libsyntax/ext/proc_macro.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d7969d065c438399cde2ebdcd411e5225a31b88/src%2Flibsyntax%2Fext%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d7969d065c438399cde2ebdcd411e5225a31b88/src%2Flibsyntax%2Fext%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fproc_macro.rs?ref=7d7969d065c438399cde2ebdcd411e5225a31b88", "patch": "@@ -4,7 +4,6 @@ use crate::errors::{Applicability, FatalError};\n use crate::ext::base::{self, *};\n use crate::ext::proc_macro_server;\n use crate::parse::{self, token};\n-use crate::parse::parser::PathStyle;\n use crate::symbol::sym;\n use crate::tokenstream::{self, TokenStream};\n use crate::visit::Visitor;\n@@ -205,8 +204,7 @@ crate fn collect_derives(cx: &mut ExtCtxt<'_>, attrs: &mut Vec<ast::Attribute>)\n             return false;\n         }\n \n-        match attr.parse_list(cx.parse_sess,\n-                              |parser| parser.parse_path_allowing_meta(PathStyle::Mod)) {\n+        match attr.parse_derive_paths(cx.parse_sess) {\n             Ok(traits) => {\n                 result.extend(traits);\n                 true"}, {"sha": "1f48cc753048355163d06bd9b481abd1f5c74f6f", "filename": "src/libsyntax/parse/parser/path.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7d7969d065c438399cde2ebdcd411e5225a31b88/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d7969d065c438399cde2ebdcd411e5225a31b88/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs?ref=7d7969d065c438399cde2ebdcd411e5225a31b88", "patch": "@@ -111,7 +111,7 @@ impl<'a> Parser<'a> {\n     /// Like `parse_path`, but also supports parsing `Word` meta items into paths for\n     /// backwards-compatibility. This is used when parsing derive macro paths in `#[derive]`\n     /// attributes.\n-    pub fn parse_path_allowing_meta(&mut self, style: PathStyle) -> PResult<'a, Path> {\n+    fn parse_path_allowing_meta(&mut self, style: PathStyle) -> PResult<'a, Path> {\n         let meta_ident = match self.token.kind {\n             token::Interpolated(ref nt) => match **nt {\n                 token::NtMeta(ref item) => match item.tokens.is_empty() {\n@@ -129,6 +129,21 @@ impl<'a> Parser<'a> {\n         self.parse_path(style)\n     }\n \n+    /// Parse a list of paths inside `#[derive(path_0, ..., path_n)]`.\n+    crate fn parse_derive_paths(&mut self) -> PResult<'a, Vec<Path>> {\n+        self.expect(&token::OpenDelim(token::Paren))?;\n+        let mut list = Vec::new();\n+        while !self.eat(&token::CloseDelim(token::Paren)) {\n+            let path = self.parse_path_allowing_meta(PathStyle::Mod)?;\n+            list.push(path);\n+            if !self.eat(&token::Comma) {\n+                self.expect(&token::CloseDelim(token::Paren))?;\n+                break\n+            }\n+        }\n+        Ok(list)\n+    }\n+\n     crate fn parse_path_segments(\n         &mut self,\n         segments: &mut Vec<PathSegment>,"}]}