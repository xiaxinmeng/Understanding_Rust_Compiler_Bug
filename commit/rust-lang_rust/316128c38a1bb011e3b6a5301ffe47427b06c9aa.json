{"sha": "316128c38a1bb011e3b6a5301ffe47427b06c9aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxNjEyOGMzOGExYmIwMTFlM2I2YTUzMDFmZmU0NzQyN2IwNmM5YWE=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-03T18:38:31Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-15T10:58:32Z"}, "message": "optimized_mir", "tree": {"sha": "34e05536707222310c4892a033f77a4c64cc59a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34e05536707222310c4892a033f77a4c64cc59a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/316128c38a1bb011e3b6a5301ffe47427b06c9aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/316128c38a1bb011e3b6a5301ffe47427b06c9aa", "html_url": "https://github.com/rust-lang/rust/commit/316128c38a1bb011e3b6a5301ffe47427b06c9aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/316128c38a1bb011e3b6a5301ffe47427b06c9aa/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8419099d18a3d5bd16ffa5165d6e2e7aefda807", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8419099d18a3d5bd16ffa5165d6e2e7aefda807", "html_url": "https://github.com/rust-lang/rust/commit/a8419099d18a3d5bd16ffa5165d6e2e7aefda807"}], "stats": {"total": 54, "additions": 43, "deletions": 11}, "files": [{"sha": "c46229b77a5b0df5c4e85433c420222d144f7b6c", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/316128c38a1bb011e3b6a5301ffe47427b06c9aa/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316128c38a1bb011e3b6a5301ffe47427b06c9aa/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=316128c38a1bb011e3b6a5301ffe47427b06c9aa", "patch": "@@ -111,7 +111,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n             bug!(\"coerce_unsized_info: `{:?}` is missing its info\", def_id);\n         })\n     }\n-    optimized_mir => { cdata.get_optimized_mir(tcx, def_id.index) }\n+    optimized_mir => { tcx.arena.alloc(cdata.get_optimized_mir(tcx, def_id.index)) }\n     promoted_mir => { cdata.get_promoted_mir(tcx, def_id.index) }\n     mir_const_qualif => { cdata.mir_const_qualif(def_id.index) }\n     fn_sig => { cdata.fn_sig(def_id.index, tcx) }"}, {"sha": "3e5a2cd7825fa887e81e69215d91d07b57abc87c", "filename": "src/librustc_middle/arena.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/316128c38a1bb011e3b6a5301ffe47427b06c9aa/src%2Flibrustc_middle%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316128c38a1bb011e3b6a5301ffe47427b06c9aa/src%2Flibrustc_middle%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Farena.rs?ref=316128c38a1bb011e3b6a5301ffe47427b06c9aa", "patch": "@@ -14,6 +14,7 @@ macro_rules! arena_types {\n             [] layouts: rustc_target::abi::Layout, rustc_target::abi::Layout;\n             // AdtDef are interned and compared by address\n             [] adt_def: rustc_middle::ty::AdtDef, rustc_middle::ty::AdtDef;\n+            [] mir: rustc_middle::mir::Body<$tcx>, rustc_middle::mir::Body<$tcx>;\n             [decode] tables: rustc_middle::ty::TypeckTables<$tcx>, rustc_middle::ty::TypeckTables<'_x>;\n             [] const_allocs: rustc_middle::mir::interpret::Allocation, rustc_middle::mir::interpret::Allocation;\n             // Required for the incremental on-disk cache"}, {"sha": "28cdedca3f74d588d2a7d63e833c16f503687c66", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/316128c38a1bb011e3b6a5301ffe47427b06c9aa/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316128c38a1bb011e3b6a5301ffe47427b06c9aa/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=316128c38a1bb011e3b6a5301ffe47427b06c9aa", "patch": "@@ -244,11 +244,13 @@ rustc_queries! {\n \n         /// MIR after our optimization passes have run. This is MIR that is ready\n         /// for codegen. This is also the only query that can fetch non-local MIR, at present.\n-        query optimized_mir(key: DefId) -> mir::Body<'tcx> {\n+        query optimized_mir(key: DefId) -> &'tcx mir::Body<'tcx> {\n             desc { |tcx| \"optimizing MIR for `{}`\", tcx.def_path_str(key) }\n-            storage(ArenaCacheSelector<'tcx>)\n             cache_on_disk_if { key.is_local() }\n         }\n+        query optimized_mir_of_const_arg(key: ty::WithOptParam<LocalDefId>) -> &'tcx mir::Body<'tcx> {\n+            desc { |tcx| \"optimizing MIR for `{}`\", tcx.def_path_str(key.did.to_def_id()) }\n+        }\n \n         /// Returns coverage summary info for a function, after executing the `InstrumentCoverage`\n         /// MIR pass (assuming the -Zinstrument-coverage option is enabled)."}, {"sha": "2a366c9801efc70cf91f5a59d5686724012cbc8a", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/316128c38a1bb011e3b6a5301ffe47427b06c9aa/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316128c38a1bb011e3b6a5301ffe47427b06c9aa/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=316128c38a1bb011e3b6a5301ffe47427b06c9aa", "patch": "@@ -2880,7 +2880,13 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Returns the possibly-auto-generated MIR of a `(DefId, Subst)` pair.\n     pub fn instance_mir(self, instance: ty::InstanceDef<'tcx>) -> &'tcx Body<'tcx> {\n         match instance {\n-            ty::InstanceDef::Item(def) => self.optimized_mir(def.did),\n+            ty::InstanceDef::Item(def) => {\n+                if let Some(def) = def.as_local() {\n+                    self.optimized_mir_of_const_arg(def)\n+                } else {\n+                    self.optimized_mir(def.did)\n+                }\n+            }\n             ty::InstanceDef::VtableShim(..)\n             | ty::InstanceDef::ReifyShim(..)\n             | ty::InstanceDef::Intrinsic(..)"}, {"sha": "4ba9cb9f7720df7576c5b384a02cc7056ecd8ff6", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/316128c38a1bb011e3b6a5301ffe47427b06c9aa/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316128c38a1bb011e3b6a5301ffe47427b06c9aa/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=316128c38a1bb011e3b6a5301ffe47427b06c9aa", "patch": "@@ -52,6 +52,7 @@ pub(crate) fn provide(providers: &mut Providers) {\n         mir_validated,\n         mir_drops_elaborated_and_const_checked,\n         optimized_mir,\n+        optimized_mir_of_const_arg,\n         is_mir_available,\n         promoted_mir,\n         ..*providers\n@@ -424,19 +425,41 @@ fn run_optimization_passes<'tcx>(\n     );\n }\n \n-fn optimized_mir(tcx: TyCtxt<'_>, def_id: DefId) -> Body<'_> {\n-    if tcx.is_constructor(def_id) {\n+fn optimized_mir<'tcx>(tcx: TyCtxt<'tcx>, did: DefId) -> &'tcx Body<'tcx> {\n+    let did = did.expect_local();\n+    if let param_did @ Some(_) = tcx.opt_const_param_of(did) {\n+        tcx.optimized_mir_of_const_arg(ty::WithOptParam { did, param_did })\n+    } else {\n+        tcx.arena.alloc(inner_optimized_mir(tcx, ty::WithOptParam::dummy(did)))\n+    }\n+}\n+\n+fn optimized_mir_of_const_arg<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    def: ty::WithOptParam<LocalDefId>,\n+) -> &'tcx Body<'tcx> {\n+    if def.param_did.is_none() {\n+        if let param_did @ Some(_) = tcx.opt_const_param_of(def.did) {\n+            tcx.optimized_mir_of_const_arg(ty::WithOptParam { param_did, ..def })\n+        } else {\n+            tcx.optimized_mir(def.did)\n+        }\n+    } else {\n+        tcx.arena.alloc(inner_optimized_mir(tcx, def))\n+    }\n+}\n+\n+fn inner_optimized_mir(tcx: TyCtxt<'_>, def: ty::WithOptParam<LocalDefId>) -> Body<'_> {\n+    if tcx.is_constructor(def.did.to_def_id()) {\n         // There's no reason to run all of the MIR passes on constructors when\n         // we can just output the MIR we want directly. This also saves const\n         // qualification and borrow checking the trouble of special casing\n         // constructors.\n-        return shim::build_adt_ctor(tcx, def_id);\n+        return shim::build_adt_ctor(tcx, def.did.to_def_id());\n     }\n \n-    let def_id = def_id.expect_local();\n-\n-    let mut body = tcx.mir_drops_elaborated_and_const_checked(def_id).steal();\n-    run_optimization_passes(tcx, &mut body, def_id, None);\n+    let mut body = tcx.mir_drops_elaborated_and_const_checked(def.did).steal();\n+    run_optimization_passes(tcx, &mut body, def.did, None);\n \n     debug_assert!(!body.has_free_regions(), \"Free regions in optimized MIR\");\n "}]}