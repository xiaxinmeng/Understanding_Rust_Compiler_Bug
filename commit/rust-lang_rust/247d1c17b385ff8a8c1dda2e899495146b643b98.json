{"sha": "247d1c17b385ff8a8c1dda2e899495146b643b98", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0N2QxYzE3YjM4NWZmOGE4YzFkZGEyZTg5OTQ5NTE0NmI2NDNiOTg=", "commit": {"author": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-02-22T08:15:23Z"}, "committer": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-02-22T08:15:23Z"}, "message": "Change resolve_path to return the fully resolved path or PerNs::none\n\nThis also adds new pub(crate) resolve_path_segments which returns the\nPathResult, which may or may not be fully resolved. PathResult is also now\npub(crate) since it is an implementation detail.", "tree": {"sha": "d0b80f6321d596cc151488e88a2747d168f7137c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0b80f6321d596cc151488e88a2747d168f7137c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/247d1c17b385ff8a8c1dda2e899495146b643b98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/247d1c17b385ff8a8c1dda2e899495146b643b98", "html_url": "https://github.com/rust-lang/rust/commit/247d1c17b385ff8a8c1dda2e899495146b643b98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/247d1c17b385ff8a8c1dda2e899495146b643b98/comments", "author": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39679d499f5e0b5d26ae0f0b707f6db8901cdb66", "url": "https://api.github.com/repos/rust-lang/rust/commits/39679d499f5e0b5d26ae0f0b707f6db8901cdb66", "html_url": "https://github.com/rust-lang/rust/commit/39679d499f5e0b5d26ae0f0b707f6db8901cdb66"}], "stats": {"total": 74, "additions": 38, "deletions": 36}, "files": [{"sha": "7ecf8c368dc3fee0916099bbaf4b578f50b3c5e0", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/247d1c17b385ff8a8c1dda2e899495146b643b98/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/247d1c17b385ff8a8c1dda2e899495146b643b98/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=247d1c17b385ff8a8c1dda2e899495146b643b98", "patch": "@@ -88,7 +88,7 @@ impl ImplBlock {\n         if let Some(TypeRef::Path(path)) = self.target_trait_ref(db) {\n             let resolver = self.resolver(db);\n             if let Some(Resolution::Def(ModuleDef::Trait(tr))) =\n-                resolver.resolve_path(db, &path).into_per_ns().take_types()\n+                resolver.resolve_path(db, &path).take_types()\n             {\n                 return Some(tr);\n             }"}, {"sha": "57e7d0b9ad0e371d872f9c592b6d7d4e71efb501", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/247d1c17b385ff8a8c1dda2e899495146b643b98/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/247d1c17b385ff8a8c1dda2e899495146b643b98/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=247d1c17b385ff8a8c1dda2e899495146b643b98", "patch": "@@ -33,7 +33,7 @@ pub(crate) struct ExprScope {\n }\n \n #[derive(Debug, Clone)]\n-pub struct PathResult {\n+pub(crate) struct PathResult {\n     /// The actual path resolution\n     resolution: PerNs<Resolution>,\n     /// The first index in the path that we\n@@ -45,7 +45,7 @@ pub struct PathResult {\n impl PathResult {\n     /// Returns the remaining index in the result\n     /// returns None if the path was fully resolved\n-    pub fn remaining_index(&self) -> Option<usize> {\n+    pub(crate) fn remaining_index(&self) -> Option<usize> {\n         if self.remaining_index > 0 {\n             Some(self.remaining_index)\n         } else {\n@@ -55,8 +55,8 @@ impl PathResult {\n \n     /// Consumes `PathResult` and returns the contained `PerNs<Resolution>`\n     /// if the path was fully resolved, meaning we have no remaining items\n-    pub fn into_per_ns(self) -> PerNs<Resolution> {\n-        if self.remaining_index().is_none() {\n+    pub(crate) fn into_fully_resolved(self) -> PerNs<Resolution> {\n+        if self.is_fully_resolved() {\n             self.resolution\n         } else {\n             PerNs::none()\n@@ -65,23 +65,17 @@ impl PathResult {\n \n     /// Consumes `PathResult` and returns the resolution and the\n     /// remaining_index as a tuple.\n-    pub fn into_inner(self) -> (PerNs<Resolution>, Option<usize>) {\n+    pub(crate) fn into_inner(self) -> (PerNs<Resolution>, Option<usize>) {\n         let index = self.remaining_index();\n         (self.resolution, index)\n     }\n \n     /// Path is fully resolved when `remaining_index` is none\n     /// and the resolution contains anything\n-    pub fn is_fully_resolved(&self) -> bool {\n+    pub(crate) fn is_fully_resolved(&self) -> bool {\n         !self.resolution.is_none() && self.remaining_index().is_none()\n     }\n \n-    /// Empty path result is where the resolution is `none`\n-    /// and the remaining index is 0\n-    pub fn is_empty(&self) -> bool {\n-        self.resolution.is_none() && self.remaining_index().is_none()\n-    }\n-\n     fn empty() -> PathResult {\n         PathResult { resolution: PerNs::none(), remaining_index: 0 }\n     }\n@@ -134,7 +128,9 @@ impl Resolver {\n         resolution\n     }\n \n-    pub fn resolve_path(&self, db: &impl HirDatabase, path: &Path) -> PathResult {\n+    /// Returns the resolved path segments\n+    /// Which may be fully resolved, empty or partially resolved.\n+    pub(crate) fn resolve_path_segments(&self, db: &impl HirDatabase, path: &Path) -> PathResult {\n         if let Some(name) = path.as_ident() {\n             PathResult::from_resolution(self.resolve_name(db, name))\n         } else if path.is_self() {\n@@ -156,6 +152,13 @@ impl Resolver {\n         }\n     }\n \n+    /// Returns the fully resolved path if we were able to resolve it.\n+    /// otherwise returns `PerNs::none`\n+    pub fn resolve_path(&self, db: &impl HirDatabase, path: &Path) -> PerNs<Resolution> {\n+        // into_fully_resolved() returns the fully resolved path or PerNs::none() otherwise\n+        self.resolve_path_segments(db, path).into_fully_resolved()\n+    }\n+\n     pub fn all_names(&self, db: &impl HirDatabase) -> FxHashMap<Name, PerNs<Resolution>> {\n         let mut names = FxHashMap::default();\n         for scope in self.scopes.iter().rev() {"}, {"sha": "89e854dd7d5270de89d3b7f34f339db31dca2017", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/247d1c17b385ff8a8c1dda2e899495146b643b98/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/247d1c17b385ff8a8c1dda2e899495146b643b98/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=247d1c17b385ff8a8c1dda2e899495146b643b98", "patch": "@@ -370,7 +370,7 @@ impl Ty {\n         }\n \n         // Resolve the path (in type namespace)\n-        let resolution = resolver.resolve_path(db, path).into_per_ns().take_types();\n+        let resolution = resolver.resolve_path(db, path).take_types();\n \n         let def = match resolution {\n             Some(Resolution::Def(def)) => def,\n@@ -1172,7 +1172,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     }\n \n     fn infer_path_expr(&mut self, resolver: &Resolver, path: &Path) -> Option<Ty> {\n-        let resolved = resolver.resolve_path(self.db, &path);\n+        let resolved = resolver.resolve_path_segments(self.db, &path);\n \n         let (def, remaining_index) = resolved.into_inner();\n \n@@ -1244,24 +1244,23 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             None => return (Ty::Unknown, None),\n         };\n         let resolver = &self.resolver;\n-        let typable: Option<TypableDef> =\n-            match resolver.resolve_path(self.db, &path).into_per_ns().take_types() {\n-                Some(Resolution::Def(def)) => def.into(),\n-                Some(Resolution::LocalBinding(..)) => {\n-                    // this cannot happen\n-                    log::error!(\"path resolved to local binding in type ns\");\n-                    return (Ty::Unknown, None);\n-                }\n-                Some(Resolution::GenericParam(..)) => {\n-                    // generic params can't be used in struct literals\n-                    return (Ty::Unknown, None);\n-                }\n-                Some(Resolution::SelfType(..)) => {\n-                    // TODO this is allowed in an impl for a struct, handle this\n-                    return (Ty::Unknown, None);\n-                }\n-                None => return (Ty::Unknown, None),\n-            };\n+        let typable: Option<TypableDef> = match resolver.resolve_path(self.db, &path).take_types() {\n+            Some(Resolution::Def(def)) => def.into(),\n+            Some(Resolution::LocalBinding(..)) => {\n+                // this cannot happen\n+                log::error!(\"path resolved to local binding in type ns\");\n+                return (Ty::Unknown, None);\n+            }\n+            Some(Resolution::GenericParam(..)) => {\n+                // generic params can't be used in struct literals\n+                return (Ty::Unknown, None);\n+            }\n+            Some(Resolution::SelfType(..)) => {\n+                // TODO this is allowed in an impl for a struct, handle this\n+                return (Ty::Unknown, None);\n+            }\n+            None => return (Ty::Unknown, None),\n+        };\n         let def = match typable {\n             None => return (Ty::Unknown, None),\n             Some(it) => it,"}, {"sha": "d337fe970df6a0d9117688c1a1f883d062b2471b", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/247d1c17b385ff8a8c1dda2e899495146b643b98/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/247d1c17b385ff8a8c1dda2e899495146b643b98/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=247d1c17b385ff8a8c1dda2e899495146b643b98", "patch": "@@ -10,7 +10,7 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n         Some(path) => path.clone(),\n         _ => return,\n     };\n-    let def = match ctx.resolver.resolve_path(ctx.db, &path).into_per_ns().take_types() {\n+    let def = match ctx.resolver.resolve_path(ctx.db, &path).take_types() {\n         Some(Resolution::Def(def)) => def,\n         _ => return,\n     };"}, {"sha": "96ed8c8e9f2e4b786195631414a256d0a184ac7d", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/247d1c17b385ff8a8c1dda2e899495146b643b98/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/247d1c17b385ff8a8c1dda2e899495146b643b98/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=247d1c17b385ff8a8c1dda2e899495146b643b98", "patch": "@@ -79,7 +79,7 @@ pub(crate) fn reference_definition(\n     if let Some(path) =\n         name_ref.syntax().ancestors().find_map(ast::Path::cast).and_then(hir::Path::from_ast)\n     {\n-        let resolved = resolver.resolve_path(db, &path).into_per_ns();\n+        let resolved = resolver.resolve_path(db, &path);\n         match resolved.clone().take_types().or_else(|| resolved.take_values()) {\n             Some(Resolution::Def(def)) => return Exact(NavigationTarget::from_def(db, def)),\n             Some(Resolution::LocalBinding(pat)) => {"}]}