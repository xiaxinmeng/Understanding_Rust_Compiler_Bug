{"sha": "d085d9d3151a684cb8b7471e4b0f6e243e68ed8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwODVkOWQzMTUxYTY4NGNiOGI3NDcxZTRiMGY2ZTI0M2U2OGVkOGI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-16T22:32:02Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-23T18:08:17Z"}, "message": "rustc: Add knowledge of separate lookup paths\n\nThis commit adds support for the compiler to distinguish between different forms\nof lookup paths in the compiler itself. Issue #19767 has some background on this\ntopic, as well as some sample bugs which can occur if these lookup paths are not\nseparated.\n\nThis commits extends the existing command line flag `-L` with the same trailing\nsyntax as the `-l` flag. Each argument to `-L` can now have a trailing `:all`,\n`:native`, `:crate`, or `:dependency`. This suffix indicates what form of lookup\npath the compiler should add the argument to. The `dependency` lookup path is\nused when looking up crate dependencies, the `crate` lookup path is used when\nlooking for immediate dependencies (`extern crate` statements), and the `native`\nlookup path is used for probing for native libraries to insert into rlibs. Paths\nwith `all` are used for all of these purposes (the default).\n\nThe default compiler lookup path (the rustlib libdir) is by default added to all\nof these paths. Additionally, the `RUST_PATH` lookup path is added to all of\nthese paths.\n\nCloses #19767", "tree": {"sha": "6bc96d358b107250c3d6dcc41b14043c22b179f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bc96d358b107250c3d6dcc41b14043c22b179f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d085d9d3151a684cb8b7471e4b0f6e243e68ed8b", "comment_count": 12, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d085d9d3151a684cb8b7471e4b0f6e243e68ed8b", "html_url": "https://github.com/rust-lang/rust/commit/d085d9d3151a684cb8b7471e4b0f6e243e68ed8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d085d9d3151a684cb8b7471e4b0f6e243e68ed8b/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62fb41c32bd97c4e9bc286a1db5d7126a06b8b91", "url": "https://api.github.com/repos/rust-lang/rust/commits/62fb41c32bd97c4e9bc286a1db5d7126a06b8b91", "html_url": "https://github.com/rust-lang/rust/commit/62fb41c32bd97c4e9bc286a1db5d7126a06b8b91"}], "stats": {"total": 311, "additions": 251, "deletions": 60}, "files": [{"sha": "e03d645aec3671a87f4d93a4272194c608ef9644", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d085d9d3151a684cb8b7471e4b0f6e243e68ed8b/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d085d9d3151a684cb8b7471e4b0f6e243e68ed8b/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=d085d9d3151a684cb8b7471e4b0f6e243e68ed8b", "patch": "@@ -14,6 +14,7 @@\n \n use back::svh::Svh;\n use session::{config, Session};\n+use session::search_paths::PathKind;\n use metadata::cstore;\n use metadata::cstore::{CStore, CrateSource};\n use metadata::decoder;\n@@ -134,7 +135,8 @@ fn visit_view_item(e: &mut Env, i: &ast::ViewItem) {\n                                              info.ident[],\n                                              info.name[],\n                                              None,\n-                                             i.span);\n+                                             i.span,\n+                                             PathKind::Crate);\n             e.sess.cstore.add_extern_mod_stmt_cnum(info.id, cnum);\n         }\n         None => ()\n@@ -388,12 +390,13 @@ fn register_crate<'a>(e: &mut Env,\n     (cnum, cmeta, source)\n }\n \n-fn resolve_crate<'a>(e: &mut Env,\n+fn resolve_crate(e: &mut Env,\n                  root: &Option<CratePaths>,\n                  ident: &str,\n                  name: &str,\n                  hash: Option<&Svh>,\n-                 span: Span)\n+                 span: Span,\n+                 kind: PathKind)\n                      -> (ast::CrateNum, Rc<cstore::crate_metadata>,\n                          cstore::CrateSource) {\n     match existing_match(e, name, hash) {\n@@ -404,7 +407,7 @@ fn resolve_crate<'a>(e: &mut Env,\n                 ident: ident,\n                 crate_name: name,\n                 hash: hash.map(|a| &*a),\n-                filesearch: e.sess.target_filesearch(),\n+                filesearch: e.sess.target_filesearch(kind),\n                 triple: e.sess.opts.target_triple[],\n                 root: root,\n                 rejected_via_hash: vec!(),\n@@ -434,7 +437,8 @@ fn resolve_crate_deps(e: &mut Env,\n                                                dep.name[],\n                                                dep.name[],\n                                                Some(&dep.hash),\n-                                               span);\n+                                               span,\n+                                               PathKind::Dependency);\n         (dep.cnum, local_cnum)\n     }).collect()\n }\n@@ -453,7 +457,8 @@ impl<'a> PluginMetadataReader<'a> {\n         }\n     }\n \n-    pub fn read_plugin_metadata(&mut self, krate: &ast::ViewItem) -> PluginMetadata {\n+    pub fn read_plugin_metadata(&mut self,\n+                                krate: &ast::ViewItem) -> PluginMetadata {\n         let info = extract_crate_info(&self.env, krate).unwrap();\n         let target_triple = self.env.sess.opts.target_triple[];\n         let is_cross = target_triple != config::host_triple();\n@@ -464,7 +469,7 @@ impl<'a> PluginMetadataReader<'a> {\n             ident: info.ident[],\n             crate_name: info.name[],\n             hash: None,\n-            filesearch: self.env.sess.host_filesearch(),\n+            filesearch: self.env.sess.host_filesearch(PathKind::Crate),\n             triple: config::host_triple(),\n             root: &None,\n             rejected_via_hash: vec!(),\n@@ -477,7 +482,7 @@ impl<'a> PluginMetadataReader<'a> {\n                 // try loading from target crates (only valid if there are\n                 // no syntax extensions)\n                 load_ctxt.triple = target_triple;\n-                load_ctxt.filesearch = self.env.sess.target_filesearch();\n+                load_ctxt.filesearch = self.env.sess.target_filesearch(PathKind::Crate);\n                 let lib = load_ctxt.load_library_crate();\n                 if decoder::get_plugin_registrar_fn(lib.metadata.as_slice()).is_some() {\n                     let message = format!(\"crate `{}` contains a plugin_registrar fn but \\"}, {"sha": "cc67f3ddf0330af6f9141a2620b6a7e403d902f2", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d085d9d3151a684cb8b7471e4b0f6e243e68ed8b/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d085d9d3151a684cb8b7471e4b0f6e243e68ed8b/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=d085d9d3151a684cb8b7471e4b0f6e243e68ed8b", "patch": "@@ -12,13 +12,13 @@\n \n pub use self::FileMatch::*;\n \n-use std::cell::RefCell;\n use std::collections::HashSet;\n use std::io::fs::PathExtensions;\n use std::io::fs;\n use std::os;\n \n use util::fs as myfs;\n+use session::search_paths::{SearchPaths, PathKind};\n \n #[deriving(Copy)]\n pub enum FileMatch {\n@@ -36,8 +36,9 @@ pub type pick<'a> = |path: &Path|: 'a -> FileMatch;\n \n pub struct FileSearch<'a> {\n     pub sysroot: &'a Path,\n-    pub addl_lib_search_paths: &'a RefCell<Vec<Path>>,\n+    pub search_paths: &'a SearchPaths,\n     pub triple: &'a str,\n+    pub kind: PathKind,\n }\n \n impl<'a> FileSearch<'a> {\n@@ -47,9 +48,7 @@ impl<'a> FileSearch<'a> {\n         let mut visited_dirs = HashSet::new();\n         let mut found = false;\n \n-        debug!(\"filesearch: searching additional lib search paths [{}]\",\n-               self.addl_lib_search_paths.borrow().len());\n-        for path in self.addl_lib_search_paths.borrow().iter() {\n+        for path in self.search_paths.iter(self.kind) {\n             match f(path) {\n                 FileMatches => found = true,\n                 FileDoesntMatch => ()\n@@ -133,12 +132,14 @@ impl<'a> FileSearch<'a> {\n \n     pub fn new(sysroot: &'a Path,\n                triple: &'a str,\n-               addl_lib_search_paths: &'a RefCell<Vec<Path>>) -> FileSearch<'a> {\n+               search_paths: &'a SearchPaths,\n+               kind: PathKind) -> FileSearch<'a> {\n         debug!(\"using sysroot = {}, triple = {}\", sysroot.display(), triple);\n         FileSearch {\n             sysroot: sysroot,\n-            addl_lib_search_paths: addl_lib_search_paths,\n+            search_paths: search_paths,\n             triple: triple,\n+            kind: kind,\n         }\n     }\n "}, {"sha": "0cbbbfe3d36ea42b94e4c711ca22a449c0fef9d4", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d085d9d3151a684cb8b7471e4b0f6e243e68ed8b/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d085d9d3151a684cb8b7471e4b0f6e243e68ed8b/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=d085d9d3151a684cb8b7471e4b0f6e243e68ed8b", "patch": "@@ -19,6 +19,7 @@ pub use self::OutputType::*;\n pub use self::DebugInfoLevel::*;\n \n use session::{early_error, Session};\n+use session::search_paths::SearchPaths;\n \n use rustc_back::target::Target;\n use lint;\n@@ -35,7 +36,6 @@ use syntax::parse::token::InternedString;\n use std::collections::HashMap;\n use std::collections::hash_map::Entry::{Occupied, Vacant};\n use getopts;\n-use std::cell::{RefCell};\n use std::fmt;\n \n use llvm;\n@@ -86,7 +86,7 @@ pub struct Options {\n     // This was mutable for rustpkg, which updates search paths based on the\n     // parsed code. It remains mutable in case its replacements wants to use\n     // this.\n-    pub addl_lib_search_paths: RefCell<Vec<Path>>,\n+    pub search_paths: SearchPaths,\n     pub libs: Vec<(String, cstore::NativeLibraryKind)>,\n     pub maybe_sysroot: Option<Path>,\n     pub target_triple: String,\n@@ -198,7 +198,7 @@ pub fn basic_options() -> Options {\n         lint_opts: Vec::new(),\n         describe_lints: false,\n         output_types: Vec::new(),\n-        addl_lib_search_paths: RefCell::new(Vec::new()),\n+        search_paths: SearchPaths::new(),\n         maybe_sysroot: None,\n         target_triple: host_triple().to_string(),\n         cfg: Vec::new(),\n@@ -1007,9 +1007,10 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         }\n     };\n \n-    let addl_lib_search_paths = matches.opt_strs(\"L\").iter().map(|s| {\n-        Path::new(s[])\n-    }).collect();\n+    let mut search_paths = SearchPaths::new();\n+    for s in matches.opt_strs(\"L\").iter() {\n+        search_paths.add_path(s[]);\n+    }\n \n     let libs = matches.opt_strs(\"l\").into_iter().map(|s| {\n         let mut parts = s.rsplitn(1, ':');\n@@ -1109,7 +1110,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         lint_opts: lint_opts,\n         describe_lints: describe_lints,\n         output_types: output_types,\n-        addl_lib_search_paths: RefCell::new(addl_lib_search_paths),\n+        search_paths: search_paths,\n         maybe_sysroot: sysroot_opt,\n         target_triple: target,\n         cfg: cfg,"}, {"sha": "06e9379a07b8f3e15aa6730389a291864cd4155d", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d085d9d3151a684cb8b7471e4b0f6e243e68ed8b/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d085d9d3151a684cb8b7471e4b0f6e243e68ed8b/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=d085d9d3151a684cb8b7471e4b0f6e243e68ed8b", "patch": "@@ -9,9 +9,10 @@\n // except according to those terms.\n \n \n+use lint;\n use metadata::cstore::CStore;\n use metadata::filesearch;\n-use lint;\n+use session::search_paths::PathKind;\n use util::nodemap::NodeMap;\n \n use syntax::ast::NodeId;\n@@ -28,6 +29,7 @@ use std::os;\n use std::cell::{Cell, RefCell};\n \n pub mod config;\n+pub mod search_paths;\n \n // Represents the data associated with a compilation\n // session for a single crate.\n@@ -209,16 +211,18 @@ impl Session {\n                         .expect(\"missing sysroot and default_sysroot in Session\")\n         }\n     }\n-    pub fn target_filesearch<'a>(&'a self) -> filesearch::FileSearch<'a> {\n+    pub fn target_filesearch(&self, kind: PathKind) -> filesearch::FileSearch {\n         filesearch::FileSearch::new(self.sysroot(),\n                                     self.opts.target_triple[],\n-                                    &self.opts.addl_lib_search_paths)\n+                                    &self.opts.search_paths,\n+                                    kind)\n     }\n-    pub fn host_filesearch<'a>(&'a self) -> filesearch::FileSearch<'a> {\n+    pub fn host_filesearch(&self, kind: PathKind) -> filesearch::FileSearch {\n         filesearch::FileSearch::new(\n             self.sysroot(),\n             config::host_triple(),\n-            &self.opts.addl_lib_search_paths)\n+            &self.opts.search_paths,\n+            kind)\n     }\n }\n "}, {"sha": "8a6217a49f560965f935823b99113da700f5634d", "filename": "src/librustc/session/search_paths.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/d085d9d3151a684cb8b7471e4b0f6e243e68ed8b/src%2Flibrustc%2Fsession%2Fsearch_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d085d9d3151a684cb8b7471e4b0f6e243e68ed8b/src%2Flibrustc%2Fsession%2Fsearch_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fsearch_paths.rs?ref=d085d9d3151a684cb8b7471e4b0f6e243e68ed8b", "patch": "@@ -0,0 +1,69 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::slice;\n+\n+#[deriving(Clone)]\n+pub struct SearchPaths {\n+    paths: Vec<(PathKind, Path)>,\n+}\n+\n+pub struct Iter<'a> {\n+    kind: PathKind,\n+    iter: slice::Iter<'a, (PathKind, Path)>,\n+}\n+\n+#[deriving(Eq, PartialEq, Clone, Copy)]\n+pub enum PathKind {\n+    Native,\n+    Crate,\n+    Dependency,\n+    All,\n+}\n+\n+impl SearchPaths {\n+    pub fn new() -> SearchPaths {\n+        SearchPaths { paths: Vec::new() }\n+    }\n+\n+    pub fn add_path(&mut self, path: &str) {\n+        let (kind, path) = if path.ends_with(\":native\") {\n+            (PathKind::Native, path.slice_to(path.len() - \":native\".len()))\n+        } else if path.ends_with(\":crate\") {\n+            (PathKind::Crate, path.slice_to(path.len() - \":crate\".len()))\n+        } else if path.ends_with(\":dependency\") {\n+            (PathKind::Dependency,\n+             path.slice_to(path.len() - \":dependency\".len()))\n+        } else if path.ends_with(\":all\") {\n+            (PathKind::All, path.slice_to(path.len() - \":all\".len()))\n+        } else {\n+            (PathKind::All, path)\n+        };\n+        self.paths.push((kind, Path::new(path)));\n+    }\n+\n+    pub fn iter(&self, kind: PathKind) -> Iter {\n+        Iter { kind: kind, iter: self.paths.iter() }\n+    }\n+}\n+\n+impl<'a> Iterator<&'a Path> for Iter<'a> {\n+    fn next(&mut self) -> Option<&'a Path> {\n+        loop {\n+            match self.iter.next() {\n+                Some(&(kind, ref p)) if self.kind == PathKind::All ||\n+                                        kind == PathKind::All ||\n+                                        kind == self.kind => return Some(p),\n+                Some(..) => {}\n+                None => return None,\n+            }\n+        }\n+    }\n+}"}, {"sha": "f7e9f52751e1619b830279d7a4d91bceb22f87b8", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d085d9d3151a684cb8b7471e4b0f6e243e68ed8b/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d085d9d3151a684cb8b7471e4b0f6e243e68ed8b/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=d085d9d3151a684cb8b7471e4b0f6e243e68ed8b", "patch": "@@ -10,6 +10,7 @@\n \n use rustc::session::Session;\n use rustc::session::config::{mod, Input, OutputFilenames};\n+use rustc::session::search_paths::PathKind;\n use rustc::lint;\n use rustc::metadata::creader;\n use rustc::middle::{stability, ty, reachable};\n@@ -256,7 +257,7 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n             let mut _old_path = String::new();\n             if cfg!(windows) {\n                 _old_path = os::getenv(\"PATH\").unwrap_or(_old_path);\n-                let mut new_path = sess.host_filesearch().get_dylib_search_paths();\n+                let mut new_path = sess.host_filesearch(PathKind::All).get_dylib_search_paths();\n                 new_path.extend(os::split_paths(_old_path[]).into_iter());\n                 os::setenv(\"PATH\", os::join_paths(new_path[]).unwrap());\n             }\n@@ -516,7 +517,7 @@ pub fn phase_6_link_output(sess: &Session,\n                            trans: &trans::CrateTranslation,\n                            outputs: &OutputFilenames) {\n     let old_path = os::getenv(\"PATH\").unwrap_or_else(||String::new());\n-    let mut new_path = sess.host_filesearch().get_tools_search_paths();\n+    let mut new_path = sess.host_filesearch(PathKind::All).get_tools_search_paths();\n     new_path.extend(os::split_paths(old_path[]).into_iter());\n     os::setenv(\"PATH\", os::join_paths(new_path[]).unwrap());\n "}, {"sha": "39ba2a98ce42afdd6252924c5650e8eedc90ccfd", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d085d9d3151a684cb8b7471e4b0f6e243e68ed8b/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d085d9d3151a684cb8b7471e4b0f6e243e68ed8b/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=d085d9d3151a684cb8b7471e4b0f6e243e68ed8b", "patch": "@@ -16,9 +16,11 @@ use super::svh::Svh;\n use session::config;\n use session::config::NoDebugInfo;\n use session::config::{OutputFilenames, Input, OutputTypeBitcode, OutputTypeExe, OutputTypeObject};\n+use session::search_paths::PathKind;\n use session::Session;\n use metadata::common::LinkMeta;\n use metadata::{encoder, cstore, filesearch, csearch, creader};\n+use metadata::filesearch::FileDoesntMatch;\n use trans::{CrateContext, CrateTranslation, gensym_name};\n use middle::ty::{mod, Ty};\n use util::common::time;\n@@ -504,10 +506,11 @@ fn link_binary_output(sess: &Session,\n }\n \n fn archive_search_paths(sess: &Session) -> Vec<Path> {\n-    let mut rustpath = filesearch::rust_path();\n-    rustpath.push(sess.target_filesearch().get_lib_path());\n-    let mut search: Vec<Path> = sess.opts.addl_lib_search_paths.borrow().clone();\n-    search.push_all(rustpath[]);\n+    let mut search = Vec::new();\n+    sess.target_filesearch(PathKind::Native).for_each_lib_search_path(|path| {\n+        search.push(path.clone());\n+        FileDoesntMatch\n+    });\n     return search;\n }\n \n@@ -832,7 +835,7 @@ fn link_args(cmd: &mut Command,\n \n     // The default library location, we need this to find the runtime.\n     // The location of crates will be determined as needed.\n-    let lib_path = sess.target_filesearch().get_lib_path();\n+    let lib_path = sess.target_filesearch(PathKind::All).get_lib_path();\n \n     // target descriptor\n     let t = &sess.target.target;\n@@ -1040,14 +1043,10 @@ fn link_args(cmd: &mut Command,\n // in the current crate. Upstream crates with native library dependencies\n // may have their native library pulled in above.\n fn add_local_native_libraries(cmd: &mut Command, sess: &Session) {\n-    for path in sess.opts.addl_lib_search_paths.borrow().iter() {\n-        cmd.arg(\"-L\").arg(path);\n-    }\n-\n-    let rustpath = filesearch::rust_path();\n-    for path in rustpath.iter() {\n+    sess.target_filesearch(PathKind::All).for_each_lib_search_path(|path| {\n         cmd.arg(\"-L\").arg(path);\n-    }\n+        FileDoesntMatch\n+    });\n \n     // Some platforms take hints about whether a library is static or dynamic.\n     // For those that support this, we ensure we pass the option if the library"}, {"sha": "a80de6e805b25212eb9eb694f7fad2cad20e7846", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d085d9d3151a684cb8b7471e4b0f6e243e68ed8b/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d085d9d3151a684cb8b7471e4b0f6e243e68ed8b/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=d085d9d3151a684cb8b7471e4b0f6e243e68ed8b", "patch": "@@ -11,6 +11,7 @@ pub use self::MaybeTyped::*;\n \n use rustc_driver::driver;\n use rustc::session::{mod, config};\n+use rustc::session::search_paths::SearchPaths;\n use rustc::middle::{privacy, ty};\n use rustc::lint;\n use rustc_trans::back::link;\n@@ -77,7 +78,7 @@ pub struct CrateAnalysis {\n \n pub type Externs = HashMap<String, Vec<String>>;\n \n-pub fn run_core(libs: Vec<Path>, cfgs: Vec<String>, externs: Externs,\n+pub fn run_core(search_paths: SearchPaths, cfgs: Vec<String>, externs: Externs,\n                 cpath: &Path, triple: Option<String>)\n                 -> (clean::Crate, CrateAnalysis) {\n \n@@ -89,7 +90,7 @@ pub fn run_core(libs: Vec<Path>, cfgs: Vec<String>, externs: Externs,\n \n     let sessopts = config::Options {\n         maybe_sysroot: None,\n-        addl_lib_search_paths: RefCell::new(libs),\n+        search_paths: search_paths,\n         crate_types: vec!(config::CrateTypeRlib),\n         lint_opts: vec!((warning_lint, lint::Allow)),\n         externs: externs,"}, {"sha": "8b66d5751e4ccda3c40588caf352e5fe7bbee2a2", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d085d9d3151a684cb8b7471e4b0f6e243e68ed8b/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d085d9d3151a684cb8b7471e4b0f6e243e68ed8b/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=d085d9d3151a684cb8b7471e4b0f6e243e68ed8b", "patch": "@@ -43,6 +43,7 @@ use std::rc::Rc;\n use externalfiles::ExternalHtml;\n use serialize::{Decodable, Encodable};\n use serialize::json::{mod, Json};\n+use rustc::session::search_paths::SearchPaths;\n \n // reexported from `clean` so it can be easily updated with the mod itself\n pub use clean::SCHEMA_VERSION;\n@@ -200,7 +201,10 @@ pub fn main_args(args: &[String]) -> int {\n     }\n     let input = matches.free[0].as_slice();\n \n-    let libs = matches.opt_strs(\"L\").iter().map(|s| Path::new(s.as_slice())).collect();\n+    let mut libs = SearchPaths::new();\n+    for s in matches.opt_strs(\"L\").iter() {\n+        libs.add_path(s.as_slice());\n+    }\n     let externs = match parse_externs(&matches) {\n         Ok(ex) => ex,\n         Err(err) => {\n@@ -334,10 +338,10 @@ fn rust_input(cratefile: &str, externs: core::Externs, matches: &getopts::Matche\n     let mut plugins = matches.opt_strs(\"plugins\");\n \n     // First, parse the crate and extract all relevant information.\n-    let libs: Vec<Path> = matches.opt_strs(\"L\")\n-                                 .iter()\n-                                 .map(|s| Path::new(s.as_slice()))\n-                                 .collect();\n+    let mut paths = SearchPaths::new();\n+    for s in matches.opt_strs(\"L\").iter() {\n+        paths.add_path(s.as_slice());\n+    }\n     let cfgs = matches.opt_strs(\"cfg\");\n     let triple = matches.opt_str(\"target\");\n \n@@ -346,7 +350,7 @@ fn rust_input(cratefile: &str, externs: core::Externs, matches: &getopts::Matche\n \n     let (mut krate, analysis) = std::thread::Thread::spawn(move |:| {\n         let cr = cr;\n-        core::run_core(libs, cfgs, externs, &cr, triple)\n+        core::run_core(paths, cfgs, externs, &cr, triple)\n     }).join().map_err(|_| \"rustc failed\").unwrap();\n     info!(\"finished with rustc\");\n     let mut analysis = Some(analysis);"}, {"sha": "ab9c4ef942230bcc7a94ee0203085c42aeb4fc95", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d085d9d3151a684cb8b7471e4b0f6e243e68ed8b/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d085d9d3151a684cb8b7471e4b0f6e243e68ed8b/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=d085d9d3151a684cb8b7471e4b0f6e243e68ed8b", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n use std::io;\n-use std::string::String;\n \n use core;\n use getopts;\n use testing;\n+use rustc::session::search_paths::SearchPaths;\n \n use externalfiles::ExternalHtml;\n \n@@ -135,7 +135,7 @@ pub fn render(input: &str, mut output: Path, matches: &getopts::Matches,\n }\n \n /// Run any tests/code examples in the markdown file `input`.\n-pub fn test(input: &str, libs: Vec<Path>, externs: core::Externs,\n+pub fn test(input: &str, libs: SearchPaths, externs: core::Externs,\n             mut test_args: Vec<String>) -> int {\n     let input_str = load_or_return!(input, 1, 2);\n "}, {"sha": "ba66c51b8fc686cb8c0a992ab3f775e910e61458", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d085d9d3151a684cb8b7471e4b0f6e243e68ed8b/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d085d9d3151a684cb8b7471e4b0f6e243e68ed8b/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=d085d9d3151a684cb8b7471e4b0f6e243e68ed8b", "patch": "@@ -21,6 +21,7 @@ use std::thread::Thread;\n use std::collections::{HashSet, HashMap};\n use testing;\n use rustc::session::{mod, config};\n+use rustc::session::search_paths::{SearchPaths, PathKind};\n use rustc_driver::driver;\n use syntax::ast;\n use syntax::codemap::{CodeMap, dummy_spanned};\n@@ -38,7 +39,7 @@ use visit_ast::RustdocVisitor;\n \n pub fn run(input: &str,\n            cfgs: Vec<String>,\n-           libs: Vec<Path>,\n+           libs: SearchPaths,\n            externs: core::Externs,\n            mut test_args: Vec<String>,\n            crate_name: Option<String>)\n@@ -48,7 +49,7 @@ pub fn run(input: &str,\n \n     let sessopts = config::Options {\n         maybe_sysroot: Some(os::self_exe_path().unwrap().dir_path()),\n-        addl_lib_search_paths: RefCell::new(libs.clone()),\n+        search_paths: libs.clone(),\n         crate_types: vec!(config::CrateTypeDylib),\n         externs: externs.clone(),\n         ..config::basic_options().clone()\n@@ -107,7 +108,8 @@ pub fn run(input: &str,\n     0\n }\n \n-fn runtest(test: &str, cratename: &str, libs: Vec<Path>, externs: core::Externs,\n+fn runtest(test: &str, cratename: &str, libs: SearchPaths,\n+           externs: core::Externs,\n            should_fail: bool, no_run: bool, as_test_harness: bool) {\n     // the test harness wants its own `main` & top level functions, so\n     // never wrap the test in `fn main() { ... }`\n@@ -116,7 +118,7 @@ fn runtest(test: &str, cratename: &str, libs: Vec<Path>, externs: core::Externs,\n \n     let sessopts = config::Options {\n         maybe_sysroot: Some(os::self_exe_path().unwrap().dir_path()),\n-        addl_lib_search_paths: RefCell::new(libs),\n+        search_paths: libs,\n         crate_types: vec!(config::CrateTypeExecutable),\n         output_types: vec!(config::OutputTypeExe),\n         no_trans: no_run,\n@@ -171,7 +173,7 @@ fn runtest(test: &str, cratename: &str, libs: Vec<Path>, externs: core::Externs,\n     let outdir = TempDir::new(\"rustdoctest\").ok().expect(\"rustdoc needs a tempdir\");\n     let out = Some(outdir.path().clone());\n     let cfg = config::build_configuration(&sess);\n-    let libdir = sess.target_filesearch().get_lib_path();\n+    let libdir = sess.target_filesearch(PathKind::All).get_lib_path();\n     driver::compile_input(sess, cfg, &input, &out, &None, None);\n \n     if no_run { return }\n@@ -242,7 +244,7 @@ pub fn maketest(s: &str, cratename: Option<&str>, lints: bool, dont_insert_main:\n pub struct Collector {\n     pub tests: Vec<testing::TestDescAndFn>,\n     names: Vec<String>,\n-    libs: Vec<Path>,\n+    libs: SearchPaths,\n     externs: core::Externs,\n     cnt: uint,\n     use_headers: bool,\n@@ -251,7 +253,7 @@ pub struct Collector {\n }\n \n impl Collector {\n-    pub fn new(cratename: String, libs: Vec<Path>, externs: core::Externs,\n+    pub fn new(cratename: String, libs: SearchPaths, externs: core::Externs,\n                use_headers: bool) -> Collector {\n         Collector {\n             tests: Vec::new(),"}, {"sha": "032e0882ff8e240e60527ba82acf925e76d8e908", "filename": "src/test/run-make/compiler-lookup-paths/Makefile", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d085d9d3151a684cb8b7471e4b0f6e243e68ed8b/src%2Ftest%2Frun-make%2Fcompiler-lookup-paths%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d085d9d3151a684cb8b7471e4b0f6e243e68ed8b/src%2Ftest%2Frun-make%2Fcompiler-lookup-paths%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcompiler-lookup-paths%2FMakefile?ref=d085d9d3151a684cb8b7471e4b0f6e243e68ed8b", "patch": "@@ -0,0 +1,30 @@\n+-include ../tools.mk\n+\n+all: $(TMPDIR)/libnative.a\n+\tmkdir -p $(TMPDIR)/crate\n+\tmkdir -p $(TMPDIR)/native\n+\tmv $(TMPDIR)/libnative.a $(TMPDIR)/native\n+\t$(RUSTC) a.rs\n+\tmv $(TMPDIR)/liba.rlib $(TMPDIR)/crate\n+\t$(RUSTC) b.rs -L $(TMPDIR)/crate:native && exit 1 || exit 0\n+\t$(RUSTC) b.rs -L $(TMPDIR)/crate:dependency && exit 1 || exit 0\n+\t$(RUSTC) b.rs -L $(TMPDIR)/crate:crate\n+\t$(RUSTC) b.rs -L $(TMPDIR)/crate\n+\t$(RUSTC) c.rs -L $(TMPDIR)/crate:native && exit 1 || exit 0\n+\t$(RUSTC) c.rs -L $(TMPDIR)/crate:crate && exit 1 || exit 0\n+\t$(RUSTC) c.rs -L $(TMPDIR)/crate:dependency\n+\t$(RUSTC) c.rs -L $(TMPDIR)/crate\n+\t$(RUSTC) d.rs -L $(TMPDIR)/native:dependency && exit 1 || exit 0\n+\t$(RUSTC) d.rs -L $(TMPDIR)/native:crate && exit 1 || exit 0\n+\t$(RUSTC) d.rs -L $(TMPDIR)/native:native\n+\t$(RUSTC) d.rs -L $(TMPDIR)/native\n+\tmkdir -p $(TMPDIR)/e1\n+\tmkdir -p $(TMPDIR)/e2\n+\t$(RUSTC) e.rs -o $(TMPDIR)/e1/libe.rlib\n+\t$(RUSTC) e.rs -o $(TMPDIR)/e2/libe.rlib\n+\t$(RUSTC) f.rs -L $(TMPDIR)/e1 -L $(TMPDIR)/e2 && exit 1 || exit 0\n+\t$(RUSTC) f.rs -L $(TMPDIR)/e1:crate -L $(TMPDIR)/e2 && exit 1 || exit 0\n+\t$(RUSTC) f.rs -L $(TMPDIR)/e1:crate -L $(TMPDIR)/e2:crate && exit 1 || exit 0\n+\t$(RUSTC) f.rs -L $(TMPDIR)/e1:native -L $(TMPDIR)/e2\n+\t$(RUSTC) f.rs -L $(TMPDIR)/e1:dependency -L $(TMPDIR)/e2\n+\t$(RUSTC) f.rs -L $(TMPDIR)/e1:dependency -L $(TMPDIR)/e2:crate"}, {"sha": "4ddf231fba2a459d192ff53021ff53308611f306", "filename": "src/test/run-make/compiler-lookup-paths/a.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d085d9d3151a684cb8b7471e4b0f6e243e68ed8b/src%2Ftest%2Frun-make%2Fcompiler-lookup-paths%2Fa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d085d9d3151a684cb8b7471e4b0f6e243e68ed8b/src%2Ftest%2Frun-make%2Fcompiler-lookup-paths%2Fa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcompiler-lookup-paths%2Fa.rs?ref=d085d9d3151a684cb8b7471e4b0f6e243e68ed8b", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"lib\"]"}, {"sha": "c38300f976ebcbe9f27c110a41b13f52a96162f4", "filename": "src/test/run-make/compiler-lookup-paths/b.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d085d9d3151a684cb8b7471e4b0f6e243e68ed8b/src%2Ftest%2Frun-make%2Fcompiler-lookup-paths%2Fb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d085d9d3151a684cb8b7471e4b0f6e243e68ed8b/src%2Ftest%2Frun-make%2Fcompiler-lookup-paths%2Fb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcompiler-lookup-paths%2Fb.rs?ref=d085d9d3151a684cb8b7471e4b0f6e243e68ed8b", "patch": "@@ -0,0 +1,12 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"lib\"]\n+extern crate a;"}, {"sha": "8a801d589fb819e798fab29da4af3eb81048eedc", "filename": "src/test/run-make/compiler-lookup-paths/c.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d085d9d3151a684cb8b7471e4b0f6e243e68ed8b/src%2Ftest%2Frun-make%2Fcompiler-lookup-paths%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d085d9d3151a684cb8b7471e4b0f6e243e68ed8b/src%2Ftest%2Frun-make%2Fcompiler-lookup-paths%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcompiler-lookup-paths%2Fc.rs?ref=d085d9d3151a684cb8b7471e4b0f6e243e68ed8b", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"lib\"]\n+extern crate b;\n+"}, {"sha": "295b6e00e41ab076f4934c988914c81da299a770", "filename": "src/test/run-make/compiler-lookup-paths/d.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d085d9d3151a684cb8b7471e4b0f6e243e68ed8b/src%2Ftest%2Frun-make%2Fcompiler-lookup-paths%2Fd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d085d9d3151a684cb8b7471e4b0f6e243e68ed8b/src%2Ftest%2Frun-make%2Fcompiler-lookup-paths%2Fd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcompiler-lookup-paths%2Fd.rs?ref=d085d9d3151a684cb8b7471e4b0f6e243e68ed8b", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"rlib\"]\n+\n+#[link(name = \"native\", kind = \"static\")]\n+extern {}"}, {"sha": "c0407aba7c9f548cd22e89e0bcfd6932154e7ab4", "filename": "src/test/run-make/compiler-lookup-paths/e.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d085d9d3151a684cb8b7471e4b0f6e243e68ed8b/src%2Ftest%2Frun-make%2Fcompiler-lookup-paths%2Fe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d085d9d3151a684cb8b7471e4b0f6e243e68ed8b/src%2Ftest%2Frun-make%2Fcompiler-lookup-paths%2Fe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcompiler-lookup-paths%2Fe.rs?ref=d085d9d3151a684cb8b7471e4b0f6e243e68ed8b", "patch": "@@ -0,0 +1,12 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"e\"]\n+#![crate_type = \"rlib\"]"}, {"sha": "e616042257625bb9e38ac8e81c2c2e2744f883f0", "filename": "src/test/run-make/compiler-lookup-paths/f.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d085d9d3151a684cb8b7471e4b0f6e243e68ed8b/src%2Ftest%2Frun-make%2Fcompiler-lookup-paths%2Ff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d085d9d3151a684cb8b7471e4b0f6e243e68ed8b/src%2Ftest%2Frun-make%2Fcompiler-lookup-paths%2Ff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcompiler-lookup-paths%2Ff.rs?ref=d085d9d3151a684cb8b7471e4b0f6e243e68ed8b", "patch": "@@ -0,0 +1,12 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"rlib\"]\n+extern crate e;"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/test/run-make/compiler-lookup-paths/native.c", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d085d9d3151a684cb8b7471e4b0f6e243e68ed8b/src%2Ftest%2Frun-make%2Fcompiler-lookup-paths%2Fnative.c", "raw_url": "https://github.com/rust-lang/rust/raw/d085d9d3151a684cb8b7471e4b0f6e243e68ed8b/src%2Ftest%2Frun-make%2Fcompiler-lookup-paths%2Fnative.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcompiler-lookup-paths%2Fnative.c?ref=d085d9d3151a684cb8b7471e4b0f6e243e68ed8b"}, {"sha": "5878eec66bad492d902d5e3e01c55d6bb40a4b5c", "filename": "src/test/run-make/staticlib-blank-lib/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d085d9d3151a684cb8b7471e4b0f6e243e68ed8b/src%2Ftest%2Frun-make%2Fstaticlib-blank-lib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d085d9d3151a684cb8b7471e4b0f6e243e68ed8b/src%2Ftest%2Frun-make%2Fstaticlib-blank-lib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fstaticlib-blank-lib%2FMakefile?ref=d085d9d3151a684cb8b7471e4b0f6e243e68ed8b", "patch": "@@ -1,6 +1,6 @@\n -include ../tools.mk\n \n all:\n-\tar crus libfoo.a foo.rs\n-\tar d libfoo.a foo.rs\n+\tar crus $(TMPDIR)/libfoo.a foo.rs\n+\tar d $(TMPDIR)/libfoo.a foo.rs\n \t$(RUSTC) foo.rs"}]}