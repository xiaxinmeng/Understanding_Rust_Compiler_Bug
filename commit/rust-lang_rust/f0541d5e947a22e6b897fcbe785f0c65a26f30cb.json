{"sha": "f0541d5e947a22e6b897fcbe785f0c65a26f30cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwNTQxZDVlOTQ3YTIyZTZiODk3ZmNiZTc4NWYwYzY1YTI2ZjMwY2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-11T08:01:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-11T08:01:31Z"}, "message": "auto merge of #11465 : pcwalton/rust/borrow-check-bug, r=pcwalton\n\nit. r=nikomatsakis", "tree": {"sha": "9778c8f3cbb8c50c6dd8304361f5e25e7cb24e28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9778c8f3cbb8c50c6dd8304361f5e25e7cb24e28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0541d5e947a22e6b897fcbe785f0c65a26f30cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0541d5e947a22e6b897fcbe785f0c65a26f30cb", "html_url": "https://github.com/rust-lang/rust/commit/f0541d5e947a22e6b897fcbe785f0c65a26f30cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0541d5e947a22e6b897fcbe785f0c65a26f30cb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8de3813d21e425760965f89e0ffcb68075003aad", "url": "https://api.github.com/repos/rust-lang/rust/commits/8de3813d21e425760965f89e0ffcb68075003aad", "html_url": "https://github.com/rust-lang/rust/commit/8de3813d21e425760965f89e0ffcb68075003aad"}, {"sha": "c2e6673a6bb7688f411c4465c3d25fcd2876f808", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2e6673a6bb7688f411c4465c3d25fcd2876f808", "html_url": "https://github.com/rust-lang/rust/commit/c2e6673a6bb7688f411c4465c3d25fcd2876f808"}], "stats": {"total": 76, "additions": 62, "deletions": 14}, "files": [{"sha": "fe9371af1fec71f26ad407723b914f9c4ca3b5bb", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 31, "deletions": 13, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f0541d5e947a22e6b897fcbe785f0c65a26f30cb/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0541d5e947a22e6b897fcbe785f0c65a26f30cb/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=f0541d5e947a22e6b897fcbe785f0c65a26f30cb", "patch": "@@ -24,8 +24,10 @@ use middle::moves;\n use middle::ty;\n use syntax::ast::{MutImmutable, MutMutable};\n use syntax::ast;\n+use syntax::ast_map;\n use syntax::ast_util;\n use syntax::codemap::Span;\n+use syntax::parse::token;\n use syntax::visit::Visitor;\n use syntax::visit;\n use util::ppaux::Repr;\n@@ -77,6 +79,7 @@ pub fn check_loans(bccx: &BorrowckCtxt,\n     clcx.visit_block(body, ());\n }\n \n+#[deriving(Eq)]\n enum MoveError {\n     MoveOk,\n     MoveWhileBorrowed(/*loan*/@LoanPath, /*loan*/Span)\n@@ -125,6 +128,9 @@ impl<'a> CheckLoanCtxt<'a> {\n         //! given `loan_path`\n \n         self.each_in_scope_loan(scope_id, |loan| {\n+            debug!(\"each_in_scope_restriction found loan: {:?}\",\n+                   loan.repr(self.tcx()));\n+\n             let mut ret = true;\n             for restr in loan.restrictions.iter() {\n                 if restr.loan_path == loan_path {\n@@ -647,22 +653,34 @@ impl<'a> CheckLoanCtxt<'a> {\n \n     pub fn analyze_move_out_from(&self,\n                                  expr_id: ast::NodeId,\n-                                 move_path: @LoanPath) -> MoveError {\n+                                 mut move_path: @LoanPath)\n+                                 -> MoveError {\n         debug!(\"analyze_move_out_from(expr_id={:?}, move_path={})\",\n-               expr_id, move_path.repr(self.tcx()));\n-\n-        // FIXME(#4384) inadequare if/when we permit `move a.b`\n-\n-        let mut ret = MoveOk;\n+               ast_map::node_id_to_str(self.tcx().items,\n+                                       expr_id,\n+                                       token::get_ident_interner()),\n+               move_path.repr(self.tcx()));\n+\n+        // We must check every element of a move path. See\n+        // `borrowck-move-subcomponent.rs` for a test case.\n+        loop {\n+            // check for a conflicting loan:\n+            let mut ret = MoveOk;\n+            self.each_in_scope_restriction(expr_id, move_path, |loan, _| {\n+                // Any restriction prevents moves.\n+                ret = MoveWhileBorrowed(loan.loan_path, loan.span);\n+                false\n+            });\n \n-        // check for a conflicting loan:\n-        self.each_in_scope_restriction(expr_id, move_path, |loan, _| {\n-            // Any restriction prevents moves.\n-            ret = MoveWhileBorrowed(loan.loan_path, loan.span);\n-            false\n-        });\n+            if ret != MoveOk {\n+                return ret\n+            }\n \n-        ret\n+            match *move_path {\n+                LpVar(_) => return MoveOk,\n+                LpExtend(subpath, _, _) => move_path = subpath,\n+            }\n+        }\n     }\n \n     pub fn check_call(&self,"}, {"sha": "a252a59014158cfd79b98e02db505dbf964dad2b", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f0541d5e947a22e6b897fcbe785f0c65a26f30cb/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0541d5e947a22e6b897fcbe785f0c65a26f30cb/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=f0541d5e947a22e6b897fcbe785f0c65a26f30cb", "patch": "@@ -872,7 +872,10 @@ impl Repr for LoanPath {\n     fn repr(&self, tcx: ty::ctxt) -> ~str {\n         match self {\n             &LpVar(id) => {\n-                format!(\"$({:?})\", id)\n+                format!(\"$({})\",\n+                        ast_map::node_id_to_str(tcx.items,\n+                                                id,\n+                                                token::get_ident_interner()))\n             }\n \n             &LpExtend(lp, _, LpDeref(_)) => {"}, {"sha": "368ceb5adab4d5d3947a8e54148cddaac0f238d4", "filename": "src/test/compile-fail/borrowck-move-subcomponent.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f0541d5e947a22e6b897fcbe785f0c65a26f30cb/src%2Ftest%2Fcompile-fail%2Fborrowck-move-subcomponent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0541d5e947a22e6b897fcbe785f0c65a26f30cb/src%2Ftest%2Fcompile-fail%2Fborrowck-move-subcomponent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-subcomponent.rs?ref=f0541d5e947a22e6b897fcbe785f0c65a26f30cb", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Tests that the borrow checker checks all components of a path when moving\n+// out.\n+\n+#[no_std];\n+\n+struct S {\n+  x : ~int\n+}\n+\n+fn f<T>(_: T) {}\n+\n+fn main() {\n+  let a : S = S { x : ~1 };\n+  let pb = &a;\n+  let S { x: ax } = a;  //~ ERROR cannot move out\n+  f(pb);\n+}"}]}