{"sha": "641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0MWQ4ZTllNGMxMmIzNzUzY2Y0ZTJhOWFjOTAxYWQwOGVhOTBlMDA=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-08-10T18:00:17Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-09-03T10:39:34Z"}, "message": "Some better support for unions through the compiler", "tree": {"sha": "d58d261fd624fd9248657aad6c7757854752ef5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d58d261fd624fd9248657aad6c7757854752ef5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "html_url": "https://github.com/rust-lang/rust/commit/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a014323e456c00f93134d03b4af95844b2ed4b95", "url": "https://api.github.com/repos/rust-lang/rust/commits/a014323e456c00f93134d03b4af95844b2ed4b95", "html_url": "https://github.com/rust-lang/rust/commit/a014323e456c00f93134d03b4af95844b2ed4b95"}], "stats": {"total": 377, "additions": 243, "deletions": 134}, "files": [{"sha": "a2d4239388acefffa2bfa030345df07b10c9a433", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -18,6 +18,7 @@ use syntax::visit::Visitor;\n enum Target {\n     Fn,\n     Struct,\n+    Union,\n     Enum,\n     Other,\n }\n@@ -27,6 +28,7 @@ impl Target {\n         match item.node {\n             ast::ItemKind::Fn(..) => Target::Fn,\n             ast::ItemKind::Struct(..) => Target::Struct,\n+            ast::ItemKind::Union(..) => Target::Union,\n             ast::ItemKind::Enum(..) => Target::Enum,\n             _ => Target::Other,\n         }\n@@ -62,17 +64,20 @@ impl<'a> CheckAttrVisitor<'a> {\n             let message = match &*name {\n                 \"C\" => {\n                     conflicting_reprs += 1;\n-                    if target != Target::Struct && target != Target::Enum {\n-                        \"attribute should be applied to struct or enum\"\n+                    if target != Target::Struct &&\n+                            target != Target::Union &&\n+                            target != Target::Enum {\n+                        \"attribute should be applied to struct, enum or union\"\n                     } else {\n                         continue\n                     }\n                 }\n                 \"packed\" => {\n                     // Do not increment conflicting_reprs here, because \"packed\"\n                     // can be used to modify another repr hint\n-                    if target != Target::Struct {\n-                        \"attribute should be applied to struct\"\n+                    if target != Target::Struct &&\n+                            target != Target::Union {\n+                        \"attribute should be applied to struct or union\"\n                     } else {\n                         continue\n                     }"}, {"sha": "29fb19fd42152bfc8cfe46913c0b1e3e48b1e577", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -331,7 +331,8 @@ impl<'ast> intravisit::Visitor<'ast> for DefCollector<'ast> {\n                         });\n                     }\n                 }\n-                hir::ItemStruct(ref struct_def, _) => {\n+                hir::ItemStruct(ref struct_def, _) |\n+                hir::ItemUnion(ref struct_def, _) => {\n                     // If this is a tuple-like struct, register the constructor.\n                     if !struct_def.is_struct() {\n                         this.create_def(struct_def.id(),"}, {"sha": "efce0c8354bacbdd361c64bc87c7710daf1dc365", "filename": "src/librustc/infer/error_reporting.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -105,6 +105,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             match item.node {\n                 hir::ItemImpl(..) => \"impl\",\n                 hir::ItemStruct(..) => \"struct\",\n+                hir::ItemUnion(..) => \"union\",\n                 hir::ItemEnum(..) => \"enum\",\n                 hir::ItemTrait(..) => \"trait\",\n                 hir::ItemFn(..) => \"function body\",\n@@ -1370,7 +1371,8 @@ impl<'a, 'gcx, 'tcx> Rebuilder<'a, 'gcx, 'tcx> {\n                 }\n                 hir::TyPath(ref maybe_qself, ref path) => {\n                     match self.tcx.expect_def(cur_ty.id) {\n-                        Def::Enum(did) | Def::TyAlias(did) | Def::Struct(did) => {\n+                        Def::Enum(did) | Def::TyAlias(did) |\n+                        Def::Struct(did) | Def::Union(did) => {\n                             let generics = self.tcx.lookup_generics(did);\n \n                             let expected ="}, {"sha": "9a63ad4b9859e7370366ac7206b931363d460dc6", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -86,7 +86,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n     }\n \n     fn lookup_and_handle_definition(&mut self, id: ast::NodeId) {\n-        use ty::TypeVariants::{TyEnum, TyStruct};\n+        use ty::TypeVariants::{TyEnum, TyStruct, TyUnion};\n \n         let def = self.tcx.expect_def(id);\n \n@@ -96,7 +96,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n             if self.tcx.trait_of_item(def.def_id()).is_some() => {\n                 if let Some(substs) = self.tcx.tables.borrow().item_substs.get(&id) {\n                     match substs.substs.type_at(0).sty {\n-                        TyEnum(tyid, _) | TyStruct(tyid, _) => {\n+                        TyEnum(tyid, _) | TyStruct(tyid, _) | TyUnion(tyid, _) => {\n                             self.check_def_id(tyid.did)\n                         }\n                         _ => {}\n@@ -132,10 +132,11 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n     }\n \n     fn handle_field_access(&mut self, lhs: &hir::Expr, name: ast::Name) {\n-        if let ty::TyStruct(def, _) = self.tcx.expr_ty_adjusted(lhs).sty {\n-            self.insert_def_id(def.struct_variant().field_named(name).did);\n-        } else {\n-            span_bug!(lhs.span, \"named field access on non-struct\")\n+        match self.tcx.expr_ty_adjusted(lhs).sty {\n+            ty::TyStruct(def, _) | ty::TyUnion(def, _) => {\n+                self.insert_def_id(def.struct_variant().field_named(name).did);\n+            }\n+            _ => span_bug!(lhs.span, \"named field access on non-struct\"),\n         }\n     }\n \n@@ -148,7 +149,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n     fn handle_field_pattern_match(&mut self, lhs: &hir::Pat,\n                                   pats: &[codemap::Spanned<hir::FieldPat>]) {\n         let variant = match self.tcx.node_id_to_type(lhs.id).sty {\n-            ty::TyStruct(adt, _) | ty::TyEnum(adt, _) => {\n+            ty::TyStruct(adt, _) | ty::TyUnion(adt, _) | ty::TyEnum(adt, _) => {\n                 adt.variant_of_def(self.tcx.expect_def(lhs.id))\n             }\n             _ => span_bug!(lhs.span, \"non-ADT in struct pattern\")\n@@ -185,7 +186,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n         match *node {\n             ast_map::NodeItem(item) => {\n                 match item.node {\n-                    hir::ItemStruct(..) => {\n+                    hir::ItemStruct(..) | hir::ItemUnion(..) => {\n                         self.struct_has_extern_repr = item.attrs.iter().any(|attr| {\n                             attr::find_repr_attrs(self.tcx.sess.diagnostic(), attr)\n                                 .contains(&attr::ReprExtern)\n@@ -423,7 +424,8 @@ impl<'a, 'tcx> DeadVisitor<'a, 'tcx> {\n             | hir::ItemConst(..)\n             | hir::ItemFn(..)\n             | hir::ItemEnum(..)\n-            | hir::ItemStruct(..) => true,\n+            | hir::ItemStruct(..)\n+            | hir::ItemUnion(..) => true,\n             _ => false\n         };\n         let ctor_id = get_struct_ctor_id(item);"}, {"sha": "7214049f6cd64c77d6c02a64cacde0c95f08092b", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 29, "deletions": 22, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -672,30 +672,36 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n \n         // Select just those fields of the `with`\n         // expression that will actually be used\n-        if let ty::TyStruct(def, substs) = with_cmt.ty.sty {\n-            // Consume those fields of the with expression that are needed.\n-            for with_field in &def.struct_variant().fields {\n-                if !contains_field_named(with_field, fields) {\n-                    let cmt_field = self.mc.cat_field(\n-                        &*with_expr,\n-                        with_cmt.clone(),\n-                        with_field.name,\n-                        with_field.ty(self.tcx(), substs)\n-                    );\n-                    self.delegate_consume(with_expr.id, with_expr.span, cmt_field);\n+        match with_cmt.ty.sty {\n+            ty::TyStruct(def, substs) => {\n+                // Consume those fields of the with expression that are needed.\n+                for with_field in &def.struct_variant().fields {\n+                    if !contains_field_named(with_field, fields) {\n+                        let cmt_field = self.mc.cat_field(\n+                            &*with_expr,\n+                            with_cmt.clone(),\n+                            with_field.name,\n+                            with_field.ty(self.tcx(), substs)\n+                        );\n+                        self.delegate_consume(with_expr.id, with_expr.span, cmt_field);\n+                    }\n                 }\n             }\n-        } else {\n-            // the base expression should always evaluate to a\n-            // struct; however, when EUV is run during typeck, it\n-            // may not. This will generate an error earlier in typeck,\n-            // so we can just ignore it.\n-            if !self.tcx().sess.has_errors() {\n-                span_bug!(\n-                    with_expr.span,\n-                    \"with expression doesn't evaluate to a struct\");\n+            ty::TyUnion(..) => {\n+                unimplemented_unions!();\n             }\n-        };\n+            _ => {\n+                // the base expression should always evaluate to a\n+                // struct; however, when EUV is run during typeck, it\n+                // may not. This will generate an error earlier in typeck,\n+                // so we can just ignore it.\n+                if !self.tcx().sess.has_errors() {\n+                    span_bug!(\n+                        with_expr.span,\n+                        \"with expression doesn't evaluate to a struct\");\n+                }\n+            }\n+        }\n \n         // walk the with expression so that complex expressions\n         // are properly handled.\n@@ -1012,7 +1018,8 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n                     debug!(\"variant downcast_cmt={:?} pat={:?}\", downcast_cmt, pat);\n                     delegate.matched_pat(pat, downcast_cmt, match_mode);\n                 }\n-                Some(Def::Struct(..)) | Some(Def::TyAlias(..)) | Some(Def::AssociatedTy(..)) => {\n+                Some(Def::Struct(..)) | Some(Def::Union(..)) |\n+                Some(Def::TyAlias(..)) | Some(Def::AssociatedTy(..)) => {\n                     debug!(\"struct cmt_pat={:?} pat={:?}\", cmt_pat, pat);\n                     delegate.matched_pat(pat, cmt_pat, match_mode);\n                 }"}, {"sha": "e6979c2545330934d325e8b782adb5f0d7f88930", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -561,7 +561,9 @@ pub fn check_expr<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, e: &hir::Expr,\n         hir::ExprField(ref base_e, ref field) => {\n             span = field.span;\n             match tcx.expr_ty_adjusted(base_e).sty {\n-                ty::TyStruct(def, _) => def.struct_variant().field_named(field.node).did,\n+                ty::TyStruct(def, _) | ty::TyUnion(def, _) => {\n+                    def.struct_variant().field_named(field.node).did\n+                }\n                 _ => span_bug!(e.span,\n                                \"stability::check_expr: named field access on non-struct\")\n             }\n@@ -579,7 +581,7 @@ pub fn check_expr<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, e: &hir::Expr,\n         hir::ExprStruct(_, ref expr_fields, _) => {\n             let type_ = tcx.expr_ty(e);\n             match type_.sty {\n-                ty::TyStruct(def, _) => {\n+                ty::TyStruct(def, _) | ty::TyUnion(def, _) => {\n                     // check the stability of each field that appears\n                     // in the construction expression.\n                     for field in expr_fields {\n@@ -647,7 +649,8 @@ pub fn check_pat<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, pat: &hir::Pat,\n     if is_internal(tcx, pat.span) { return; }\n \n     let v = match tcx.pat_ty_opt(pat) {\n-        Some(&ty::TyS { sty: ty::TyStruct(def, _), .. }) => def.struct_variant(),\n+        Some(&ty::TyS { sty: ty::TyStruct(def, _), .. }) |\n+        Some(&ty::TyS { sty: ty::TyUnion(def, _), .. }) => def.struct_variant(),\n         Some(_) | None => return,\n     };\n     match pat.node {"}, {"sha": "0a7d3e6e76d8f0052cfb3baa65a8805decac0819", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -224,7 +224,7 @@ fn fundamental_ty(tcx: TyCtxt, ty: Ty) -> bool {\n     match ty.sty {\n         ty::TyBox(..) | ty::TyRef(..) =>\n             true,\n-        ty::TyEnum(def, _) | ty::TyStruct(def, _) =>\n+        ty::TyEnum(def, _) | ty::TyStruct(def, _) | ty::TyUnion(def, _) =>\n             def.is_fundamental(),\n         ty::TyTrait(ref data) =>\n             tcx.has_attr(data.principal.def_id(), \"fundamental\"),"}, {"sha": "e5ebe96932d4f9eb77734e84985f915beb2bae7b", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -174,6 +174,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         match (type_category(a), type_category(b)) {\n             (Some(cat_a), Some(cat_b)) => match (&a.sty, &b.sty) {\n                 (&ty::TyStruct(def_a, _), &ty::TyStruct(def_b, _)) |\n+                (&ty::TyUnion(def_a, _), &ty::TyUnion(def_b, _)) |\n                 (&ty::TyEnum(def_a, _), &ty::TyEnum(def_b, _)) =>\n                     def_a == def_b,\n                 _ => cat_a == cat_b"}, {"sha": "ba8d3328509254b2972607942ea65fcb0dbe1f71", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -263,6 +263,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         // anything other than a simple path.\n         match self_ty.sty {\n             ty::TyStruct(adt_def, substs) |\n+            ty::TyUnion(adt_def, substs) |\n             ty::TyEnum(adt_def, substs) => {\n                 if substs.types().next().is_none() { // ignore regions\n                     self.push_item_path(buffer, adt_def.did);"}, {"sha": "ac5e3c6fa700926f05847a991082d0adaaea562b", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -1256,6 +1256,9 @@ impl<'a, 'gcx, 'tcx> SizeSkeleton<'gcx> {\n                 }\n             }\n \n+            ty::TyUnion(..) => {\n+                unimplemented_unions!();\n+            }\n             ty::TyStruct(def, substs) | ty::TyEnum(def, substs) => {\n                 // Only newtypes and enums w/ nullable pointer optimization.\n                 if def.variants.is_empty() || def.variants.len() > 2 {"}, {"sha": "ee2188e8e112cc1b18f37fb6288795422f1c60c8", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -948,6 +948,7 @@ impl<'tcx> TraitPredicate<'tcx> {\n                 .flat_map(|t| t.walk())\n                 .filter_map(|t| match t.sty {\n                     ty::TyStruct(adt_def, _) |\n+                    ty::TyUnion(adt_def, _) |\n                     ty::TyEnum(adt_def, _) =>\n                         Some(adt_def.did),\n                     _ =>\n@@ -1341,6 +1342,7 @@ impl<'a, 'tcx> ParameterEnvironment<'tcx> {\n                     }\n                     hir::ItemEnum(..) |\n                     hir::ItemStruct(..) |\n+                    hir::ItemUnion(..) |\n                     hir::ItemTy(..) |\n                     hir::ItemImpl(..) |\n                     hir::ItemConst(..) |\n@@ -1615,7 +1617,8 @@ impl<'a, 'gcx, 'tcx, 'container> AdtDefData<'gcx, 'container> {\n     /// Asserts this is a struct and returns the struct's unique\n     /// variant.\n     pub fn struct_variant(&self) -> &VariantDefData<'gcx, 'container> {\n-        assert_eq!(self.adt_kind(), AdtKind::Struct);\n+        let adt_kind = self.adt_kind();\n+        assert!(adt_kind == AdtKind::Struct || adt_kind == AdtKind::Union);\n         &self.variants[0]\n     }\n \n@@ -1674,7 +1677,8 @@ impl<'a, 'gcx, 'tcx, 'container> AdtDefData<'gcx, 'container> {\n     pub fn variant_of_def(&self, def: Def) -> &VariantDefData<'gcx, 'container> {\n         match def {\n             Def::Variant(_, vid) => self.variant_with_id(vid),\n-            Def::Struct(..) | Def::TyAlias(..) | Def::AssociatedTy(..) => self.struct_variant(),\n+            Def::Struct(..) | Def::Union(..) |\n+            Def::TyAlias(..) | Def::AssociatedTy(..) => self.struct_variant(),\n             _ => bug!(\"unexpected def {:?} in variant_of_def\", def)\n         }\n     }\n@@ -2413,7 +2417,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             Def::Variant(enum_did, did) => {\n                 self.lookup_adt_def(enum_did).variant_with_id(did)\n             }\n-            Def::Struct(did) => {\n+            Def::Struct(did) | Def::Union(did) => {\n                 self.lookup_adt_def(did).struct_variant()\n             }\n             _ => bug!(\"expect_variant_def used with unexpected def {:?}\", def)"}, {"sha": "dfae19487b6f0ccb8bb38c0ac413de69bfa67f16", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -447,6 +447,13 @@ pub fn super_relate_tys<'a, 'gcx, 'tcx, R>(relation: &mut R,\n             Ok(tcx.mk_struct(a_def, substs))\n         }\n \n+        (&ty::TyUnion(a_def, a_substs), &ty::TyUnion(b_def, b_substs))\n+            if a_def == b_def =>\n+        {\n+            let substs = relate_item_substs(relation, a_def.did, a_substs, b_substs)?;\n+            Ok(tcx.mk_union(a_def, substs))\n+        }\n+\n         (&ty::TyClosure(a_id, a_substs),\n          &ty::TyClosure(b_id, b_substs))\n             if a_id == b_id =>"}, {"sha": "165f86fbef538887164da2725227d2ddef4119ad", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -922,7 +922,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         // FIXME(#24885): be smarter here, the AdtDefData::is_empty method could easily be made\n         // more complete.\n         match self.sty {\n-            TyEnum(def, _) | TyStruct(def, _) => def.is_empty(),\n+            TyEnum(def, _) | TyStruct(def, _) | TyUnion(def, _) => def.is_empty(),\n \n             // FIXME(canndrew): There's no reason why these can't be uncommented, they're tested\n             // and they don't break anything. But I'm keeping my changes small for now.\n@@ -985,7 +985,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n \n     pub fn is_structural(&self) -> bool {\n         match self.sty {\n-            TyStruct(..) | TyTuple(_) | TyEnum(..) |\n+            TyStruct(..) | TyUnion(..) | TyTuple(..) | TyEnum(..) |\n             TyArray(..) | TyClosure(..) => true,\n             _ => self.is_slice() | self.is_trait()\n         }\n@@ -1204,6 +1204,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         match self.sty {\n             TyTrait(ref tt) => Some(tt.principal.def_id()),\n             TyStruct(def, _) |\n+            TyUnion(def, _) |\n             TyEnum(def, _) => Some(def.did),\n             TyClosure(id, _) => Some(id),\n             _ => None\n@@ -1212,7 +1213,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n \n     pub fn ty_adt_def(&self) -> Option<AdtDef<'tcx>> {\n         match self.sty {\n-            TyStruct(adt, _) | TyEnum(adt, _) => Some(adt),\n+            TyStruct(adt, _) | TyUnion(adt, _) | TyEnum(adt, _) => Some(adt),\n             _ => None\n         }\n     }"}, {"sha": "ad209094600ae19e198289ea2152ed790a44c4de", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -138,7 +138,7 @@ impl<'tcx> ParameterEnvironment<'tcx> {\n         // FIXME: (@jroesch) float this code up\n         tcx.infer_ctxt(None, Some(self.clone()), Reveal::ExactMatch).enter(|infcx| {\n             let adt = match self_type.sty {\n-                ty::TyStruct(struct_def, substs) => {\n+                ty::TyStruct(struct_def, substs) | ty::TyUnion(struct_def, substs) => {\n                     for field in struct_def.all_fields() {\n                         let field_ty = field.ty(tcx, substs);\n                         if infcx.type_moves_by_default(field_ty, span) {\n@@ -183,7 +183,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     pub fn has_error_field(self, ty: Ty<'tcx>) -> bool {\n         match ty.sty {\n-            ty::TyStruct(def, substs) | ty::TyEnum(def, substs) => {\n+            ty::TyStruct(def, substs) | ty::TyUnion(def, substs) | ty::TyEnum(def, substs) => {\n                 for field in def.all_fields() {\n                     let field_ty = field.ty(self, substs);\n                     if let TyError = field_ty.sty {\n@@ -203,7 +203,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                                  i: usize,\n                                  variant: Option<DefId>) -> Option<Ty<'tcx>> {\n         match (&ty.sty, variant) {\n-            (&TyStruct(def, substs), None) => {\n+            (&TyStruct(def, substs), None) |\n+            (&TyUnion(def, substs), None) => {\n                 def.struct_variant().fields.get(i).map(|f| f.ty(self, substs))\n             }\n             (&TyEnum(def, substs), Some(vid)) => {\n@@ -225,7 +226,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                             n: Name,\n                             variant: Option<DefId>) -> Option<Ty<'tcx>> {\n         match (&ty.sty, variant) {\n-            (&TyStruct(def, substs), None) => {\n+            (&TyStruct(def, substs), None) |\n+            (&TyUnion(def, substs), None)  => {\n                 def.struct_variant().find_field_named(n).map(|f| f.ty(self, substs))\n             }\n             (&TyEnum(def, substs), Some(vid)) => {\n@@ -661,7 +663,7 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n                 TyArray(ty, _) => {\n                     is_type_structurally_recursive(tcx, sp, seen, ty)\n                 }\n-                TyStruct(def, substs) | TyEnum(def, substs) => {\n+                TyStruct(def, substs) | TyUnion(def, substs) | TyEnum(def, substs) => {\n                     find_nonrepresentable(tcx,\n                                           sp,\n                                           seen,\n@@ -678,7 +680,7 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n \n         fn same_struct_or_enum<'tcx>(ty: Ty<'tcx>, def: ty::AdtDef<'tcx>) -> bool {\n             match ty.sty {\n-                TyStruct(ty_def, _) | TyEnum(ty_def, _) => {\n+                TyStruct(ty_def, _) | TyUnion(ty_def, _) | TyEnum(ty_def, _) => {\n                      ty_def == def\n                 }\n                 _ => false\n@@ -688,6 +690,7 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n         fn same_type<'tcx>(a: Ty<'tcx>, b: Ty<'tcx>) -> bool {\n             match (&a.sty, &b.sty) {\n                 (&TyStruct(did_a, ref substs_a), &TyStruct(did_b, ref substs_b)) |\n+                (&TyUnion(did_a, ref substs_a), &TyUnion(did_b, ref substs_b)) |\n                 (&TyEnum(did_a, ref substs_a), &TyEnum(did_b, ref substs_b)) => {\n                     if did_a != did_b {\n                         return false;\n@@ -710,7 +713,7 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n             debug!(\"is_type_structurally_recursive: {:?}\", ty);\n \n             match ty.sty {\n-                TyStruct(def, _) | TyEnum(def, _) => {\n+                TyStruct(def, _) | TyUnion(def, _) | TyEnum(def, _) => {\n                     {\n                         // Iterate through stack of previously seen types.\n                         let mut iter = seen.iter();"}, {"sha": "b4c6689c24b9e50e05204d05195e4c35bea4c9a0", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -796,7 +796,9 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n             }\n             LpExtend(ref lp_base, _, LpInterior(_, InteriorField(_))) => {\n                 match lp_base.to_type().sty {\n-                    ty::TyStruct(def, _) | ty::TyEnum(def, _) if def.has_dtor() => {\n+                    ty::TyStruct(def, _) |\n+                    ty::TyUnion(def, _) |\n+                    ty::TyEnum(def, _) if def.has_dtor() => {\n                         // In the case where the owner implements drop, then\n                         // the path must be initialized to prevent a case of\n                         // partial reinitialization"}, {"sha": "3cf02fc85a46348a8d273d61ffb3b742486d985e", "filename": "src/librustc_borrowck/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -178,7 +178,7 @@ fn check_and_get_illegal_move_origin<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n         Categorization::Interior(ref b, mc::InteriorField(_)) |\n         Categorization::Interior(ref b, mc::InteriorElement(Kind::Pattern, _)) => {\n             match b.ty.sty {\n-                ty::TyStruct(def, _) | ty::TyEnum(def, _) => {\n+                ty::TyStruct(def, _) | ty::TyUnion(def, _) | ty::TyEnum(def, _) => {\n                     if def.has_dtor() {\n                         Some(cmt.clone())\n                     } else {"}, {"sha": "61c85e393d2dd1ac6f9d532f79ccbea04799896d", "filename": "src/librustc_borrowck/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -149,6 +149,7 @@ fn report_cannot_move_out_of<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n         Categorization::Interior(ref b, mc::InteriorField(_)) => {\n             match b.ty.sty {\n                 ty::TyStruct(def, _) |\n+                ty::TyUnion(def, _) |\n                 ty::TyEnum(def, _) if def.has_dtor() => {\n                     let mut err = struct_span_err!(bccx, move_from.span, E0509,\n                                                    \"cannot move out of type `{}`, \\"}, {"sha": "c5d103453798927c044f4594b10a731714b6b005", "filename": "src/librustc_borrowck/borrowck/mir/elaborate_drops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -709,7 +709,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n     fn open_drop<'a>(&mut self, c: &DropCtxt<'a, 'tcx>) -> BasicBlock {\n         let ty = c.lvalue.ty(self.mir, self.tcx).to_ty(self.tcx);\n         match ty.sty {\n-            ty::TyStruct(def, substs) | ty::TyEnum(def, substs) => {\n+            ty::TyStruct(def, substs) | ty::TyUnion(def, substs) | ty::TyEnum(def, substs) => {\n                 self.open_drop_for_adt(c, def, substs)\n             }\n             ty::TyTuple(tys) | ty::TyClosure(_, ty::ClosureSubsts {\n@@ -893,7 +893,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n         let ty = c.lvalue.ty(self.mir, self.tcx).to_ty(self.tcx);\n \n         match ty.sty {\n-            ty::TyStruct(def, _) | ty::TyEnum(def, _) => {\n+            ty::TyStruct(def, _) | ty::TyUnion(def, _) | ty::TyEnum(def, _) => {\n                 if def.has_dtor() {\n                     self.tcx.sess.span_warn(\n                         c.source_info.span,"}, {"sha": "be408e2db5c340229514162acf85e00be4482c3a", "filename": "src/librustc_borrowck/borrowck/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -261,7 +261,7 @@ fn lvalue_contents_drop_state_cannot_differ<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx\n                    lv, ty);\n             true\n         }\n-        ty::TyStruct(def, _) | ty::TyEnum(def, _) if def.has_dtor() => {\n+        ty::TyStruct(def, _) | ty::TyUnion(def, _) | ty::TyEnum(def, _) if def.has_dtor() => {\n             debug!(\"lvalue_contents_drop_state_cannot_differ lv: {:?} ty: {:?} Drop => false\",\n                    lv, ty);\n             true"}, {"sha": "de28cbb7c9c966d135a9e463bd4f69332e5fd67f", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -566,7 +566,7 @@ fn construct_witness<'a,'tcx>(cx: &MatchCheckCtxt<'a,'tcx>, ctor: &Constructor,\n     let pat = match left_ty.sty {\n         ty::TyTuple(..) => PatKind::Tuple(pats.collect(), None),\n \n-        ty::TyEnum(adt, _) | ty::TyStruct(adt, _)  => {\n+        ty::TyEnum(adt, _) | ty::TyStruct(adt, _) | ty::TyUnion(adt, _) => {\n             let v = ctor.variant_for_adt(adt);\n             match v.kind {\n                 VariantKind::Struct => {\n@@ -792,7 +792,8 @@ fn pat_constructors(cx: &MatchCheckCtxt, p: &Pat,\n         PatKind::Struct(..) | PatKind::TupleStruct(..) | PatKind::Path(..) =>\n             match cx.tcx.expect_def(pat.id) {\n                 Def::Variant(_, id) => vec![Variant(id)],\n-                Def::Struct(..) | Def::TyAlias(..) | Def::AssociatedTy(..) => vec![Single],\n+                Def::Struct(..) | Def::Union(..) |\n+                Def::TyAlias(..) | Def::AssociatedTy(..) => vec![Single],\n                 Def::Const(..) | Def::AssociatedConst(..) =>\n                     span_bug!(pat.span, \"const pattern should've been rewritten\"),\n                 def => span_bug!(pat.span, \"pat_constructors: unexpected definition {:?}\", def),\n@@ -836,7 +837,7 @@ pub fn constructor_arity(_cx: &MatchCheckCtxt, ctor: &Constructor, ty: Ty) -> us\n             _ => bug!()\n         },\n         ty::TyRef(..) => 1,\n-        ty::TyEnum(adt, _) | ty::TyStruct(adt, _) => {\n+        ty::TyEnum(adt, _) | ty::TyStruct(adt, _) | ty::TyUnion(adt, _) => {\n             ctor.variant_for_adt(adt).fields.len()\n         }\n         ty::TyArray(_, n) => n,"}, {"sha": "81fe19812ca47765182457ee58f54f253150b4e6", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -258,7 +258,8 @@ pub fn const_expr_to_pat<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 format!(\"floating point constants cannot be used in patterns\"));\n         }\n         ty::TyEnum(adt_def, _) |\n-        ty::TyStruct(adt_def, _) => {\n+        ty::TyStruct(adt_def, _) |\n+        ty::TyUnion(adt_def, _) => {\n             if !tcx.has_attr(adt_def.did, \"structural_match\") {\n                 tcx.sess.add_lint(\n                     lint::builtin::ILLEGAL_STRUCT_OR_ENUM_CONSTANT_PATTERN,"}, {"sha": "9f5f82c144ccdcff62f08b7c25b636a73621b0cf", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -220,6 +220,7 @@ impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {\n \n                 hir::ItemEnum(..) |\n                 hir::ItemStruct(..) |\n+                hir::ItemUnion(..) |\n                 hir::ItemTrait(..) |\n                 hir::ItemImpl(..) |\n                 hir::ItemDefaultImpl(..) => {"}, {"sha": "d4a3ab59f9cb3cc14f481210a0af64a46d05928e", "filename": "src/librustc_incremental/calculate_svh/svh_visitor.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -419,6 +419,7 @@ impl<'a, 'hash, 'tcx> StrictVersionHashVisitor<'a, 'hash, 'tcx> {\n             Def::AssociatedTy(..) |\n             Def::TyParam(..) |\n             Def::Struct(..) |\n+            Def::Union(..) |\n             Def::Trait(..) |\n             Def::Method(..) |\n             Def::Const(..) |"}, {"sha": "1094d0ee12bbd9e6c67e0412471f4243aba08a07", "filename": "src/librustc_lint/bad_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_lint%2Fbad_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_lint%2Fbad_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbad_style.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -111,7 +111,7 @@ impl LateLintPass for NonCamelCaseTypes {\n         }\n \n         match it.node {\n-            hir::ItemTy(..) | hir::ItemStruct(..) => {\n+            hir::ItemTy(..) | hir::ItemStruct(..) | hir::ItemUnion(..) => {\n                 self.check_case(cx, \"type\", it.name, it.span)\n             }\n             hir::ItemTrait(..) => {"}, {"sha": "571d1222baaa46e25d2476777b77d535ff74682a", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -116,15 +116,17 @@ impl LateLintPass for BoxPointers {\n             hir::ItemFn(..) |\n             hir::ItemTy(..) |\n             hir::ItemEnum(..) |\n-            hir::ItemStruct(..) =>\n+            hir::ItemStruct(..) |\n+            hir::ItemUnion(..) =>\n                 self.check_heap_type(cx, it.span,\n                                      cx.tcx.node_id_to_type(it.id)),\n             _ => ()\n         }\n \n         // If it's a struct, we also have to check the fields' types\n         match it.node {\n-            hir::ItemStruct(ref struct_def, _) => {\n+            hir::ItemStruct(ref struct_def, _) |\n+            hir::ItemUnion(ref struct_def, _) => {\n                 for struct_field in struct_def.fields() {\n                     self.check_heap_type(cx, struct_field.span,\n                                          cx.tcx.node_id_to_type(struct_field.id));\n@@ -348,6 +350,7 @@ impl LateLintPass for MissingDoc {\n             hir::ItemMod(..) => \"a module\",\n             hir::ItemEnum(..) => \"an enum\",\n             hir::ItemStruct(..) => \"a struct\",\n+            hir::ItemUnion(..) => \"a union\",\n             hir::ItemTrait(_, _, _, ref items) => {\n                 // Issue #11592, traits are always considered exported, even when private.\n                 if it.vis == hir::Visibility::Inherited {\n@@ -467,6 +470,14 @@ impl LateLintPass for MissingCopyImplementations {\n                 let def = cx.tcx.lookup_adt_def(cx.tcx.map.local_def_id(item.id));\n                 (def, cx.tcx.mk_struct(def, Substs::empty(cx.tcx)))\n             }\n+            hir::ItemUnion(_, ref ast_generics) => {\n+                if ast_generics.is_parameterized() {\n+                    return;\n+                }\n+                let def = cx.tcx.lookup_adt_def(cx.tcx.map.local_def_id(item.id));\n+                (def, cx.tcx.mk_union(def,\n+                                      cx.tcx.mk_substs(Substs::empty())))\n+            }\n             hir::ItemEnum(_, ref ast_generics) => {\n                 if ast_generics.is_parameterized() {\n                     return;\n@@ -523,7 +534,7 @@ impl LateLintPass for MissingDebugImplementations {\n         }\n \n         match item.node {\n-            hir::ItemStruct(..) | hir::ItemEnum(..) => {},\n+            hir::ItemStruct(..) | hir::ItemUnion(..) | hir::ItemEnum(..) => {},\n             _ => return,\n         }\n "}, {"sha": "44f1cf7b533569a7fc2836149ff0eabe7217a599", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -137,6 +137,7 @@ impl LateLintPass for UnusedResults {\n             ty::TyNever => return,\n             ty::TyBool => return,\n             ty::TyStruct(def, _) |\n+            ty::TyUnion(def, _) |\n             ty::TyEnum(def, _) => {\n                 let attrs = cx.tcx.get_attrs(def.did);\n                 check_must_use(cx, &attrs[..], s.span)"}, {"sha": "0469d44de4ba643419aa48ff394f6852d8a6600d", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -477,6 +477,9 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                         })\n                     }\n                 }\n+                ty::TyUnion(..) => {\n+                    unimplemented_unions!();\n+                }\n                 ty::TyEnum(adt, substs) => {\n                     match cx.tcx.expect_def(expr.id) {\n                         Def::Variant(enum_id, variant_id) => {\n@@ -579,7 +582,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                              body: block::to_expr_ref(cx, body) },\n         hir::ExprField(ref source, name) => {\n             let index = match cx.tcx.expr_ty_adjusted(source).sty {\n-                ty::TyStruct(adt_def, _) =>\n+                ty::TyStruct(adt_def, _) | ty::TyUnion(adt_def, _) =>\n                     adt_def.variants[0].index_of_field_named(name.node),\n                 ref ty =>\n                     span_bug!("}, {"sha": "30f79796aaa6de8f2aea395ce1961afe15be4ca1", "filename": "src/librustc_mir/hair/cx/pattern.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -217,7 +217,9 @@ impl<'patcx, 'cx, 'gcx, 'tcx> PatCx<'patcx, 'cx, 'gcx, 'tcx> {\n             PatKind::Struct(_, ref fields, _) => {\n                 let pat_ty = self.cx.tcx.node_id_to_type(pat.id);\n                 let adt_def = match pat_ty.sty {\n-                    ty::TyStruct(adt_def, _) | ty::TyEnum(adt_def, _) => adt_def,\n+                    ty::TyStruct(adt_def, _) |\n+                    ty::TyUnion(adt_def, _) |\n+                    ty::TyEnum(adt_def, _) => adt_def,\n                     _ => {\n                         span_bug!(\n                             pat.span,\n@@ -313,7 +315,8 @@ impl<'patcx, 'cx, 'gcx, 'tcx> PatCx<'patcx, 'cx, 'gcx, 'tcx> {\n                 }\n             }\n \n-            Def::Struct(..) | Def::TyAlias(..) | Def::AssociatedTy(..) => {\n+            Def::Struct(..) | Def::Union(..) |\n+            Def::TyAlias(..) | Def::AssociatedTy(..) => {\n                 PatternKind::Leaf { subpatterns: subpatterns }\n             }\n "}, {"sha": "55bd51cd75ba9c36836d91cfc589c737da8bed11", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -281,7 +281,9 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n                 (&adt_def.variants[variant_index], substs)\n             }\n             LvalueTy::Ty { ty } => match ty.sty {\n-                ty::TyStruct(adt_def, substs) | ty::TyEnum(adt_def, substs)\n+                ty::TyStruct(adt_def, substs) |\n+                ty::TyUnion(adt_def, substs) |\n+                ty::TyEnum(adt_def, substs)\n                     if adt_def.is_univariant() => {\n                         (&adt_def.variants[0], substs)\n                     }"}, {"sha": "c3749bf4546f3633fcb36522b4173a3975685f7e", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -440,6 +440,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckCrateVisitor<'a, 'tcx> {\n fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Expr, node_ty: Ty<'tcx>) {\n     match node_ty.sty {\n         ty::TyStruct(def, _) |\n+        ty::TyUnion(def, _) |\n         ty::TyEnum(def, _) if def.has_dtor() => {\n             v.add_qualif(ConstQualif::NEEDS_DROP);\n         }"}, {"sha": "25601b6bfec7fe764456bf057609ae762cd52e4e", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -174,7 +174,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n                     self.update(trait_item.id, item_level);\n                 }\n             }\n-            hir::ItemStruct(ref def, _) => {\n+            hir::ItemStruct(ref def, _) | hir::ItemUnion(ref def, _) => {\n                 if !def.is_struct() {\n                     self.update(def.id(), item_level);\n                 }\n@@ -321,8 +321,8 @@ impl<'b, 'a, 'tcx: 'a, 'v> Visitor<'v> for ReachEverythingInTheInterfaceVisitor<\n         if let hir::TyPath(_, ref path) = ty.node {\n             let def = self.ev.tcx.expect_def(ty.id);\n             match def {\n-                Def::Struct(def_id) | Def::Enum(def_id) | Def::TyAlias(def_id) |\n-                Def::Trait(def_id) | Def::AssociatedTy(def_id, _) => {\n+                Def::Struct(def_id) | Def::Union(def_id) | Def::Enum(def_id) |\n+                Def::TyAlias(def_id) | Def::Trait(def_id) | Def::AssociatedTy(def_id, _) => {\n                     if let Some(node_id) = self.ev.tcx.map.as_local_node_id(def_id) {\n                         let item = self.ev.tcx.map.expect_item(node_id);\n                         if let Def::TyAlias(..) = def {\n@@ -943,8 +943,8 @@ impl<'a, 'tcx: 'a, 'v> Visitor<'v> for SearchInterfaceForPrivateItemsVisitor<'a,\n                     // free type aliases, but this isn't done yet.\n                     return\n                 }\n-                Def::Struct(def_id) | Def::Enum(def_id) | Def::TyAlias(def_id) |\n-                Def::Trait(def_id) | Def::AssociatedTy(def_id, _) => {\n+                Def::Struct(def_id) | Def::Union(def_id) | Def::Enum(def_id) |\n+                Def::TyAlias(def_id) | Def::Trait(def_id) | Def::AssociatedTy(def_id, _) => {\n                     // Non-local means public (private items can't leave their crate, modulo bugs)\n                     if let Some(node_id) = self.tcx.map.as_local_node_id(def_id) {\n                         let item = self.tcx.map.expect_item(node_id);"}, {"sha": "db0704db33fd543cc3e61f747d542ff680622175", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -2187,6 +2187,7 @@ impl<'a> Resolver<'a> {\n                                         Def::Trait(_) |\n                                         Def::Enum(_) |\n                                         Def::Struct(_) |\n+                                        Def::Union(_) |\n                                         Def::TyAlias(_) => true,\n                                         _               => false,\n                                     },\n@@ -2389,7 +2390,7 @@ impl<'a> Resolver<'a> {\n                 PatKind::Struct(ref path, _, _) => {\n                     self.resolve_pattern_path(pat.id, None, path, TypeNS, |def| {\n                         match def {\n-                            Def::Struct(..) | Def::Variant(..) |\n+                            Def::Struct(..) | Def::Union(..) | Def::Variant(..) |\n                             Def::TyAlias(..) | Def::AssociatedTy(..) => true,\n                             _ => false,\n                         }\n@@ -2735,7 +2736,7 @@ impl<'a> Resolver<'a> {\n             // Look for a field with the same name in the current self_type.\n             if let Some(resolution) = self.def_map.get(&node_id) {\n                 match resolution.base_def {\n-                    Def::Enum(did) | Def::TyAlias(did) |\n+                    Def::Enum(did) | Def::TyAlias(did) | Def::Union(did) |\n                     Def::Struct(did) | Def::Variant(_, did) if resolution.depth == 0 => {\n                         if let Some(fields) = self.structs.get(&did) {\n                             if fields.iter().any(|&field_name| name == field_name) {"}, {"sha": "47f3a06de1bd1166bd4a7f436f6020651095d786", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -404,7 +404,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     }\n                 };\n                 match self.tcx.expr_ty_adjusted(&hir_node).sty {\n-                    ty::TyStruct(def, _) => {\n+                    ty::TyStruct(def, _) | ty::TyUnion(def, _) => {\n                         let f = def.struct_variant().field_named(ident.node.name);\n                         let sub_span = self.span_utils.span_for_last_ident(expr.span);\n                         filter!(self.span_utils, sub_span, expr.span, None);\n@@ -423,7 +423,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             }\n             ast::ExprKind::Struct(ref path, _, _) => {\n                 match self.tcx.expr_ty_adjusted(&hir_node).sty {\n-                    ty::TyStruct(def, _) => {\n+                    ty::TyStruct(def, _) | ty::TyUnion(def, _) => {\n                         let sub_span = self.span_utils.span_for_last_ident(path.span);\n                         filter!(self.span_utils, sub_span, path.span, None);\n                         Some(Data::TypeRefData(TypeRefData {\n@@ -487,6 +487,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 }))\n             }\n             Def::Struct(def_id) |\n+            Def::Union(def_id) |\n             Def::Enum(def_id) |\n             Def::TyAlias(def_id) |\n             Def::Trait(def_id) |"}, {"sha": "069eef7895c8478671296d7cf9f768cf1b0cd4e3", "filename": "src/librustc_trans/adt.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_trans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_trans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fadt.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -176,6 +176,9 @@ fn represent_type_uncached<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n \n             Univariant(mk_struct(cx, &ftys[..], packed, t))\n         }\n+        ty::TyUnion(..) => {\n+            unimplemented_unions!();\n+        }\n         ty::TyClosure(_, ref substs) => {\n             Univariant(mk_struct(cx, &substs.upvar_tys, false, t))\n         }"}, {"sha": "4bea5d7e87fc9c03197544b028c31d45dc741864", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -744,6 +744,7 @@ fn find_drop_glue_neighbors<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n     // monomorphized Drop::drop() implementation.\n     let destructor_did = match ty.sty {\n         ty::TyStruct(def, _) |\n+        ty::TyUnion(def, _) |\n         ty::TyEnum(def, _)   => def.destructor(),\n         _ => None\n     };"}, {"sha": "6ae6f8aead77dff9d511cb1f23234329f184d38c", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -88,8 +88,8 @@ pub fn type_is_immediate<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>) -\n         return false;\n     }\n     match ty.sty {\n-        ty::TyStruct(..) | ty::TyEnum(..) | ty::TyTuple(..) | ty::TyArray(_, _) |\n-        ty::TyClosure(..) => {\n+        ty::TyStruct(..) | ty::TyUnion(..) | ty::TyEnum(..) |\n+        ty::TyTuple(..) | ty::TyArray(..) | ty::TyClosure(..) => {\n             let llty = sizing_type_of(ccx, ty);\n             llsize_of_alloc(ccx, llty) <= llsize_of_alloc(ccx, ccx.int_type())\n         }\n@@ -205,7 +205,7 @@ impl<'a, 'tcx> VariantInfo<'tcx> {\n                    -> Self\n     {\n         match ty.sty {\n-            ty::TyStruct(adt, substs) | ty::TyEnum(adt, substs) => {\n+            ty::TyStruct(adt, substs) | ty::TyUnion(adt, substs) | ty::TyEnum(adt, substs) => {\n                 let variant = match opt_def {\n                     None => adt.struct_variant(),\n                     Some(def) => adt.variant_of_def(def)"}, {"sha": "f30880ac9beb51e36352be1d6e93aa39ac7570e8", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -184,6 +184,10 @@ impl<'tcx> TypeMap<'tcx> {\n                 unique_type_id.push_str(\"struct \");\n                 from_def_id_and_substs(self, cx, def.did, substs, &mut unique_type_id);\n             },\n+            ty::TyUnion(def, substs) => {\n+                unique_type_id.push_str(\"union \");\n+                from_def_id_and_substs(self, cx, def.did, substs, &mut unique_type_id);\n+            },\n             ty::TyTuple(component_types) if component_types.is_empty() => {\n                 push_debuginfo_type_name(cx, type_, false, &mut unique_type_id);\n             },\n@@ -781,6 +785,9 @@ pub fn type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                                     unique_type_id,\n                                     usage_site_span).finalize(cx)\n         }\n+        ty::TyUnion(..) => {\n+            unimplemented_unions!();\n+        }\n         ty::TyTuple(ref elements) => {\n             prepare_tuple_metadata(cx,\n                                    t,"}, {"sha": "5da9ef3646e6b4bf99a6d1b4f60663c3cebeedeb", "filename": "src/librustc_trans/glue.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_trans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_trans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fglue.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -470,6 +470,9 @@ fn make_drop_glue<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, v0: ValueRef, g: DropGlueK\n                 trans_exchange_free_ty(bcx, llbox, content_ty, DebugLoc::None)\n             }\n         }\n+        ty::TyUnion(..) => {\n+            unimplemented_unions!();\n+        }\n         ty::TyTrait(..) => {\n             // No support in vtable for distinguishing destroying with\n             // versus without calling Drop::drop. Assert caller is"}, {"sha": "b5565109306b4d57321729cadae3d11bd1352052", "filename": "src/librustc_trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_trans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_trans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftype_of.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -331,7 +331,7 @@ pub fn in_memory_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) ->\n \n     // If this was an enum or struct, fill in the type now.\n     match t.sty {\n-        ty::TyEnum(..) | ty::TyStruct(..) | ty::TyClosure(..)\n+        ty::TyEnum(..) | ty::TyStruct(..) | ty::TyUnion(..) | ty::TyClosure(..)\n                 if !t.is_simd() => {\n             let repr = adt::represent_type(cx, t);\n             adt::finish_type_of(cx, &repr, &mut llty);"}, {"sha": "c445455ef2bc5b334321907ac892389e50fc53c8", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -1476,7 +1476,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                                                span,\n                                                partition_bounds(tcx, span, &[]))\n             }\n-            Def::Enum(did) | Def::TyAlias(did) | Def::Struct(did) => {\n+            Def::Enum(did) | Def::TyAlias(did) | Def::Struct(did) | Def::Union(did) => {\n                 tcx.prohibit_type_params(base_segments.split_last().unwrap().1);\n                 self.ast_path_to_ty(rscope,\n                                     span,"}, {"sha": "5fdfa19190bdb29cf09940ad88743f01294a4b28", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -510,7 +510,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         // Type check subpatterns.\n         let substs = match pat_ty.sty {\n-            ty::TyStruct(_, substs) | ty::TyEnum(_, substs) => substs,\n+            ty::TyStruct(_, substs) | ty::TyUnion(_, substs) | ty::TyEnum(_, substs) => substs,\n             _ => span_bug!(pat.span, \"struct variant is not an ADT\")\n         };\n         self.check_struct_pat_fields(pat.span, fields, variant, substs, etc);"}, {"sha": "3e37602169a7ac902eb18f3116a96ef14cd19fb1", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -45,6 +45,7 @@ pub fn check_drop_impl(ccx: &CrateCtxt, drop_impl_did: DefId) -> Result<(), ()>\n     let dtor_predicates = ccx.tcx.lookup_predicates(drop_impl_did);\n     match dtor_self_type.sty {\n         ty::TyEnum(adt_def, self_to_impl_substs) |\n+        ty::TyUnion(adt_def, self_to_impl_substs) |\n         ty::TyStruct(adt_def, self_to_impl_substs) => {\n             ensure_drop_params_and_item_params_correspond(ccx,\n                                                           drop_impl_did,\n@@ -495,7 +496,7 @@ fn iterate_over_potentially_unsafe_regions_in_type<'a, 'b, 'gcx, 'tcx>(\n fn has_dtor_of_interest<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                                         ty: Ty<'tcx>) -> bool {\n     match ty.sty {\n-        ty::TyEnum(def, _) | ty::TyStruct(def, _) => {\n+        ty::TyEnum(def, _) | ty::TyStruct(def, _) | ty::TyUnion(def, _) => {\n             def.is_dtorck(tcx)\n         }\n         ty::TyTrait(..) | ty::TyProjection(..) | ty::TyAnon(..) => {"}, {"sha": "edee7300868714b2b7143a86d6382f64790880af", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -293,7 +293,8 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                 self.assemble_inherent_impl_candidates_for_type(data.principal.def_id());\n             }\n             ty::TyEnum(def, _) |\n-            ty::TyStruct(def, _) => {\n+            ty::TyStruct(def, _) |\n+            ty::TyUnion(def, _) => {\n                 self.assemble_inherent_impl_candidates_for_type(def.did);\n             }\n             ty::TyBox(_) => {"}, {"sha": "6d8a73b8a6aa019753982bab8b8aaed1be8cab8d", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 28, "deletions": 23, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -164,30 +164,33 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 // give a helping note that it has to be called as (x.f)(...).\n                 if let Some(expr) = rcvr_expr {\n                     for (ty, _) in self.autoderef(span, rcvr_ty) {\n-                        if let ty::TyStruct(def, substs) = ty.sty {\n-                            if let Some(field) = def.struct_variant().find_field_named(item_name) {\n-                                let snippet = tcx.sess.codemap().span_to_snippet(expr.span);\n-                                let expr_string = match snippet {\n-                                    Ok(expr_string) => expr_string,\n-                                    _ => \"s\".into() // Default to a generic placeholder for the\n-                                                    // expression when we can't generate a\n-                                                    // string snippet\n-                                };\n-\n-                                let field_ty = field.ty(tcx, substs);\n-\n-                                if self.is_fn_ty(&field_ty, span) {\n-                                    err.span_note(span, &format!(\n-                                        \"use `({0}.{1})(...)` if you meant to call the function \\\n-                                         stored in the `{1}` field\",\n-                                        expr_string, item_name));\n-                                } else {\n-                                    err.span_note(span, &format!(\n-                                        \"did you mean to write `{0}.{1}`?\",\n-                                        expr_string, item_name));\n+                        match ty.sty {\n+                            ty::TyStruct(def, substs) | ty::TyUnion(def, substs) => {\n+                                if let Some(field) = def.struct_variant().find_field_named(item_name) {\n+                                    let snippet = tcx.sess.codemap().span_to_snippet(expr.span);\n+                                    let expr_string = match snippet {\n+                                        Ok(expr_string) => expr_string,\n+                                        _ => \"s\".into() // Default to a generic placeholder for the\n+                                                        // expression when we can't generate a\n+                                                        // string snippet\n+                                    };\n+\n+                                    let field_ty = field.ty(tcx, substs);\n+\n+                                    if self.is_fn_ty(&field_ty, span) {\n+                                        err.span_note(span, &format!(\n+                                            \"use `({0}.{1})(...)` if you meant to call the function \\\n+                                             stored in the `{1}` field\",\n+                                            expr_string, item_name));\n+                                    } else {\n+                                        err.span_note(span, &format!(\n+                                            \"did you mean to write `{0}.{1}`?\",\n+                                            expr_string, item_name));\n+                                    }\n+                                    break;\n                                 }\n-                                break;\n                             }\n+                            _ => {}\n                         }\n                     }\n                 }\n@@ -355,7 +358,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             rcvr_expr: Option<&hir::Expr>) -> bool {\n         fn is_local(ty: Ty) -> bool {\n             match ty.sty {\n-                ty::TyEnum(def, _) | ty::TyStruct(def, _) => def.did.is_local(),\n+                ty::TyEnum(def, _) | ty::TyStruct(def, _) | ty::TyUnion(def, _) => {\n+                    def.did.is_local()\n+                }\n \n                 ty::TyTrait(ref tr) => tr.principal.def_id().is_local(),\n "}, {"sha": "679ced1987e6c2c8b82622e0f2840a91f8f5a12e", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 27, "deletions": 18, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -762,6 +762,9 @@ pub fn check_item_type<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>, it: &'tcx hir::Item) {\n       hir::ItemStruct(..) => {\n         check_struct(ccx, it.id, it.span);\n       }\n+      hir::ItemUnion(..) => {\n+        unimplemented_unions!();\n+      }\n       hir::ItemTy(_, ref generics) => {\n         let pty_ty = ccx.tcx.node_id_to_type(it.id);\n         check_bounds_are_used(ccx, generics, pty_ty);\n@@ -2942,18 +2945,21 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let mut private_candidate = None;\n         let mut autoderef = self.autoderef(expr.span, expr_t);\n         while let Some((base_t, autoderefs)) = autoderef.next() {\n-            if let ty::TyStruct(base_def, substs) = base_t.sty {\n-                debug!(\"struct named {:?}\",  base_t);\n-                if let Some(field) = base_def.struct_variant().find_field_named(field.node) {\n-                    let field_ty = self.field_ty(expr.span, field, substs);\n-                    if field.vis.is_accessible_from(self.body_id, &self.tcx().map) {\n-                        autoderef.finalize(lvalue_pref, Some(base));\n-                        self.write_ty(expr.id, field_ty);\n-                        self.write_autoderef_adjustment(base.id, autoderefs);\n-                        return;\n+            match base_t.sty {\n+                ty::TyStruct(base_def, substs) | ty::TyUnion(base_def, substs) => {\n+                    debug!(\"struct named {:?}\",  base_t);\n+                    if let Some(field) = base_def.struct_variant().find_field_named(field.node) {\n+                        let field_ty = self.field_ty(expr.span, field, substs);\n+                        if field.vis.is_accessible_from(self.body_id, &self.tcx().map) {\n+                            autoderef.finalize(lvalue_pref, Some(base));\n+                            self.write_ty(expr.id, field_ty);\n+                            self.write_autoderef_adjustment(base.id, autoderefs);\n+                            return;\n+                        }\n+                        private_candidate = Some((base_def.did, field_ty));\n                     }\n-                    private_candidate = Some((base_def.did, field_ty));\n                 }\n+                _ => {}\n             }\n         }\n         autoderef.unambiguous_final_ty();\n@@ -2986,12 +2992,15 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                          but no field with that name was found\",\n                         field.node, actual)\n             }, expr_t);\n-            if let ty::TyRawPtr(..) = expr_t.sty {\n-                err.note(&format!(\"`{0}` is a native pointer; perhaps you need to deref with \\\n-                                  `(*{0}).{1}`\", pprust::expr_to_string(base), field.node));\n-            }\n-            if let ty::TyStruct(def, _) = expr_t.sty {\n-                Self::suggest_field_names(&mut err, def.struct_variant(), field, vec![]);\n+            match expr_t.sty {\n+                ty::TyStruct(def, _) | ty::TyUnion(def, _) => {\n+                    Self::suggest_field_names(&mut err, def.struct_variant(), field, vec![]);\n+                }\n+                ty::TyRawPtr(..) => {\n+                    err.note(&format!(\"`{0}` is a native pointer; perhaps you need to deref with \\\n+                                      `(*{0}).{1}`\", pprust::expr_to_string(base), field.node));\n+                }\n+                _ => {}\n             }\n             err.emit();\n             self.write_error(expr.id);\n@@ -3125,7 +3134,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                 check_completeness: bool) {\n         let tcx = self.tcx;\n         let substs = match adt_ty.sty {\n-            ty::TyStruct(_, substs) | ty::TyEnum(_, substs) => substs,\n+            ty::TyStruct(_, substs) | ty::TyUnion(_, substs) | ty::TyEnum(_, substs) => substs,\n             _ => span_bug!(span, \"non-ADT passed to check_expr_struct_fields\")\n         };\n \n@@ -3217,7 +3226,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 self.set_tainted_by_errors();\n                 return None;\n             }\n-            Def::Variant(type_did, _) | Def::Struct(type_did) => {\n+            Def::Variant(type_did, _) | Def::Struct(type_did) | Def::Union(type_did) => {\n                 Some((type_did, self.tcx.expect_variant_def(def)))\n             }\n             Def::TyAlias(did) => {"}, {"sha": "19bee13b6f603ff0f5c50ab1fc0b7b8198128789", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -142,6 +142,9 @@ impl<'ccx, 'gcx> CheckTypeWellFormedVisitor<'ccx, 'gcx> {\n \n                 self.check_variances_for_type_defn(item, ast_generics);\n             }\n+            hir::ItemUnion(..) => {\n+                unimplemented_unions!();\n+            }\n             hir::ItemEnum(ref enum_def, ref ast_generics) => {\n                 self.check_type_defn(item, |fcx| {\n                     fcx.enum_variants(enum_def)"}, {"sha": "fba145efa95078752161f76e0c2309ee91de19a0", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -242,7 +242,8 @@ impl<'a, 'gcx, 'tcx> CoherenceChecker<'a, 'gcx, 'tcx> {\n             let self_type = tcx.lookup_item_type(impl_did);\n             match self_type.ty.sty {\n                 ty::TyEnum(type_def, _) |\n-                ty::TyStruct(type_def, _) => {\n+                ty::TyStruct(type_def, _) |\n+                ty::TyUnion(type_def, _) => {\n                     type_def.set_destructor(method_def_id.def_id());\n                 }\n                 _ => {"}, {"sha": "4c38475335ce84b31c719a69b365c9c873b2854d", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -76,7 +76,8 @@ impl<'cx, 'tcx> OrphanChecker<'cx, 'tcx> {\n                 let self_ty = self.tcx.lookup_item_type(def_id).ty;\n                 match self_ty.sty {\n                     ty::TyEnum(def, _) |\n-                    ty::TyStruct(def, _) => {\n+                    ty::TyStruct(def, _) |\n+                    ty::TyUnion(def, _) => {\n                         self.check_def_id(item, def.did);\n                     }\n                     ty::TyTrait(ref data) => {\n@@ -293,7 +294,9 @@ impl<'cx, 'tcx> OrphanChecker<'cx, 'tcx> {\n                 {\n                     let self_ty = trait_ref.self_ty();\n                     let opt_self_def_id = match self_ty.sty {\n-                        ty::TyStruct(self_def, _) | ty::TyEnum(self_def, _) =>\n+                        ty::TyStruct(self_def, _) |\n+                        ty::TyUnion(self_def, _) |\n+                        ty::TyEnum(self_def, _) =>\n                             Some(self_def.did),\n                         ty::TyBox(..) =>\n                             self.tcx.lang_items.owned_box(),"}, {"sha": "c4d925372f18dcae7c0b2adfb1c5450464a1932d", "filename": "src/librustc_typeck/coherence/overlap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -97,7 +97,7 @@ impl<'cx, 'tcx> OverlapChecker<'cx, 'tcx> {\n impl<'cx, 'tcx,'v> intravisit::Visitor<'v> for OverlapChecker<'cx, 'tcx> {\n     fn visit_item(&mut self, item: &'v hir::Item) {\n         match item.node {\n-            hir::ItemEnum(..) | hir::ItemStruct(..) => {\n+            hir::ItemEnum(..) | hir::ItemStruct(..) | hir::ItemUnion(..) => {\n                 let type_def_id = self.tcx.map.local_def_id(item.id);\n                 self.check_for_overlapping_inherent_impls(type_def_id);\n             }"}, {"sha": "1d260b9dbb290c2d0169887653d9e7e34a38277c", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -931,7 +931,8 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n             tcx.trait_item_def_ids.borrow_mut().insert(ccx.tcx.map.local_def_id(it.id),\n                                                        trait_item_def_ids);\n         },\n-        hir::ItemStruct(ref struct_def, _) => {\n+        hir::ItemStruct(ref struct_def, _) |\n+        hir::ItemUnion(ref struct_def, _) => {\n             let def_id = ccx.tcx.map.local_def_id(it.id);\n             let scheme = type_scheme_of_def_id(ccx, def_id);\n             let predicates = predicates_of_item(ccx, it);"}, {"sha": "24eb29f45a5e5177ca3e1bafcf538f7563040425", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "patch": "@@ -185,6 +185,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                         hir::ItemTy(..) |\n                         hir::ItemEnum(..) |\n                         hir::ItemStruct(..) |\n+                        hir::ItemUnion(..) |\n                         hir::ItemTrait(..)   => is_inferred = true,\n                         hir::ItemFn(..)      => is_inferred = false,\n                         _                    => cannot_happen!(),"}]}