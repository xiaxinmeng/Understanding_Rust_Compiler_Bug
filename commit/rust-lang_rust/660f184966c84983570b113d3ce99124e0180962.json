{"sha": "660f184966c84983570b113d3ce99124e0180962", "node_id": "C_kwDOAAsO6NoAKDY2MGYxODQ5NjZjODQ5ODM1NzBiMTEzZDNjZTk5MTI0ZTAxODA5NjI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-27T17:48:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-27T17:48:49Z"}, "message": "Rollup merge of #108363 - cjgillot:unused-crate, r=WaffleLapkin\n\nMove the unused extern crate check back to the resolver.\n\nIt doesn't have anything to do in `rustc_hir_typeck`.", "tree": {"sha": "475712062dae31948d2f73e29432460eb7cd8362", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/475712062dae31948d2f73e29432460eb7cd8362"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/660f184966c84983570b113d3ce99124e0180962", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj/O0BCRBK7hj4Ov3rIwAAfqoIAJ2cErYRrRmXZdGO6axXAAdR\nsbQzCuo2rxjVwPjCzHRh8Nm7Lcdzx9QOj9bGjAZ6uR+FBH4BZ6HEJuA4JGAczPiU\ntF12UW1Rw2ZjkRbuIRkcjKhdrOtLwT6uWmcb3pOvpRBYISIU9UjpWp5OqX0qwNCq\npW1sKDNaCrco8k+LgsOcuWTLRgHBRNL7SYPw2bRlXrAbhz1i8gb0ToMvk9IgqNjI\n+vowyvWbLLW+gwMo4ardh541ayrlBxxLiq0wuh0zgZ4ELhVif8bQLfWZ+w8VJ3vL\npR9xiAB93B/4qfD98Kg5IReNzD89N2tDHVmHJIKYNWYNnauZR441iO7YhM6DzKM=\n=oaBt\n-----END PGP SIGNATURE-----\n", "payload": "tree 475712062dae31948d2f73e29432460eb7cd8362\nparent 2375d7f38698a23cfc87d7f9f570393245cbc2f7\nparent 40bde9902c3d6a32ee25cdf66cbcf4fc4687b3d9\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1677520129 +0100\ncommitter GitHub <noreply@github.com> 1677520129 +0100\n\nRollup merge of #108363 - cjgillot:unused-crate, r=WaffleLapkin\n\nMove the unused extern crate check back to the resolver.\n\nIt doesn't have anything to do in `rustc_hir_typeck`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/660f184966c84983570b113d3ce99124e0180962", "html_url": "https://github.com/rust-lang/rust/commit/660f184966c84983570b113d3ce99124e0180962", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/660f184966c84983570b113d3ce99124e0180962/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2375d7f38698a23cfc87d7f9f570393245cbc2f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2375d7f38698a23cfc87d7f9f570393245cbc2f7", "html_url": "https://github.com/rust-lang/rust/commit/2375d7f38698a23cfc87d7f9f570393245cbc2f7"}, {"sha": "40bde9902c3d6a32ee25cdf66cbcf4fc4687b3d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/40bde9902c3d6a32ee25cdf66cbcf4fc4687b3d9", "html_url": "https://github.com/rust-lang/rust/commit/40bde9902c3d6a32ee25cdf66cbcf4fc4687b3d9"}], "stats": {"total": 382, "additions": 186, "deletions": 196}, "files": [{"sha": "40b5bc2a32e83b6ca17f8748a61403d71dab2373", "filename": "compiler/rustc_hir_analysis/locales/en-US.ftl", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/660f184966c84983570b113d3ce99124e0180962/compiler%2Frustc_hir_analysis%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/660f184966c84983570b113d3ce99124e0180962/compiler%2Frustc_hir_analysis%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Flocales%2Fen-US.ftl?ref=660f184966c84983570b113d3ce99124e0180962", "patch": "@@ -62,14 +62,6 @@ hir_analysis_manual_implementation =\n \n hir_analysis_substs_on_overridden_impl = could not resolve substs on overridden impl\n \n-hir_analysis_unused_extern_crate =\n-    unused extern crate\n-    .suggestion = remove it\n-\n-hir_analysis_extern_crate_not_idiomatic =\n-    `extern crate` is not idiomatic in the new edition\n-    .suggestion = convert it to a `{$msg_code}`\n-\n hir_analysis_trait_object_declared_with_no_traits =\n     at least one trait is required for an object type\n     .alias_span = this alias does not contain a trait"}, {"sha": "f3f5851d8f92cab6977cc1029695d11c4db5a091", "filename": "compiler/rustc_hir_analysis/src/check_unused.rs", "status": "modified", "additions": 1, "deletions": 132, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/660f184966c84983570b113d3ce99124e0180962/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/660f184966c84983570b113d3ce99124e0180962/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck_unused.rs?ref=660f184966c84983570b113d3ce99124e0180962", "patch": "@@ -1,12 +1,8 @@\n-use crate::errors::{ExternCrateNotIdiomatic, UnusedExternCrate};\n-use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::unord::UnordSet;\n-use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n-use rustc_hir::def_id::{DefId, LocalDefId};\n+use rustc_hir::def_id::LocalDefId;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::lint;\n-use rustc_span::{Span, Symbol};\n \n pub fn check_crate(tcx: TyCtxt<'_>) {\n     let mut used_trait_imports: UnordSet<LocalDefId> = Default::default();\n@@ -43,131 +39,4 @@ pub fn check_crate(tcx: TyCtxt<'_>) {\n             |lint| lint,\n         );\n     }\n-\n-    unused_crates_lint(tcx);\n-}\n-\n-fn unused_crates_lint(tcx: TyCtxt<'_>) {\n-    let lint = lint::builtin::UNUSED_EXTERN_CRATES;\n-\n-    // Collect first the crates that are completely unused. These we\n-    // can always suggest removing (no matter which edition we are\n-    // in).\n-    let unused_extern_crates: FxHashMap<LocalDefId, Span> = tcx\n-        .maybe_unused_extern_crates(())\n-        .iter()\n-        .filter(|&&(def_id, _)| {\n-            tcx.extern_mod_stmt_cnum(def_id).map_or(true, |cnum| {\n-                !tcx.is_compiler_builtins(cnum)\n-                    && !tcx.is_panic_runtime(cnum)\n-                    && !tcx.has_global_allocator(cnum)\n-                    && !tcx.has_panic_handler(cnum)\n-            })\n-        })\n-        .cloned()\n-        .collect();\n-\n-    // Collect all the extern crates (in a reliable order).\n-    let mut crates_to_lint = vec![];\n-\n-    for id in tcx.hir().items() {\n-        if matches!(tcx.def_kind(id.owner_id), DefKind::ExternCrate) {\n-            let item = tcx.hir().item(id);\n-            if let hir::ItemKind::ExternCrate(orig_name) = item.kind {\n-                crates_to_lint.push(ExternCrateToLint {\n-                    def_id: item.owner_id.to_def_id(),\n-                    span: item.span,\n-                    orig_name,\n-                    warn_if_unused: !item.ident.as_str().starts_with('_'),\n-                });\n-            }\n-        }\n-    }\n-\n-    let extern_prelude = &tcx.resolutions(()).extern_prelude;\n-\n-    for extern_crate in &crates_to_lint {\n-        let def_id = extern_crate.def_id.expect_local();\n-        let item = tcx.hir().expect_item(def_id);\n-\n-        // If the crate is fully unused, we suggest removing it altogether.\n-        // We do this in any edition.\n-        if extern_crate.warn_if_unused {\n-            if let Some(&span) = unused_extern_crates.get(&def_id) {\n-                // Removal suggestion span needs to include attributes (Issue #54400)\n-                let id = tcx.hir().local_def_id_to_hir_id(def_id);\n-                let span_with_attrs = tcx\n-                    .hir()\n-                    .attrs(id)\n-                    .iter()\n-                    .map(|attr| attr.span)\n-                    .fold(span, |acc, attr_span| acc.to(attr_span));\n-\n-                tcx.emit_spanned_lint(lint, id, span, UnusedExternCrate { span: span_with_attrs });\n-                continue;\n-            }\n-        }\n-\n-        // If we are not in Rust 2018 edition, then we don't make any further\n-        // suggestions.\n-        if !tcx.sess.rust_2018() {\n-            continue;\n-        }\n-\n-        // If the extern crate isn't in the extern prelude,\n-        // there is no way it can be written as a `use`.\n-        let orig_name = extern_crate.orig_name.unwrap_or(item.ident.name);\n-        if !extern_prelude.get(&orig_name).map_or(false, |from_item| !from_item) {\n-            continue;\n-        }\n-\n-        // If the extern crate is renamed, then we cannot suggest replacing it with a use as this\n-        // would not insert the new name into the prelude, where other imports in the crate may be\n-        // expecting it.\n-        if extern_crate.orig_name.is_some() {\n-            continue;\n-        }\n-\n-        let id = tcx.hir().local_def_id_to_hir_id(def_id);\n-        // If the extern crate has any attributes, they may have funky\n-        // semantics we can't faithfully represent using `use` (most\n-        // notably `#[macro_use]`). Ignore it.\n-        if !tcx.hir().attrs(id).is_empty() {\n-            continue;\n-        }\n-\n-        let base_replacement = match extern_crate.orig_name {\n-            Some(orig_name) => format!(\"use {} as {};\", orig_name, item.ident.name),\n-            None => format!(\"use {};\", item.ident.name),\n-        };\n-        let vis = tcx.sess.source_map().span_to_snippet(item.vis_span).unwrap_or_default();\n-        let add_vis = |to| if vis.is_empty() { to } else { format!(\"{} {}\", vis, to) };\n-        tcx.emit_spanned_lint(\n-            lint,\n-            id,\n-            extern_crate.span,\n-            ExternCrateNotIdiomatic {\n-                span: extern_crate.span,\n-                msg_code: add_vis(\"use\".to_string()),\n-                suggestion_code: add_vis(base_replacement),\n-            },\n-        );\n-    }\n-}\n-\n-struct ExternCrateToLint {\n-    /// `DefId` of the extern crate\n-    def_id: DefId,\n-\n-    /// span from the item\n-    span: Span,\n-\n-    /// if `Some`, then this is renamed (`extern crate orig_name as\n-    /// crate_name`), and -- perhaps surprisingly -- this stores the\n-    /// *original* name (`item.name` will contain the new name)\n-    orig_name: Option<Symbol>,\n-\n-    /// if `false`, the original name started with `_`, so we shouldn't lint\n-    /// about it going unused (but we should still emit idiom lints).\n-    warn_if_unused: bool,\n }"}, {"sha": "203e0f85cad549199c6b778ed0f02336458d5631", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/660f184966c84983570b113d3ce99124e0180962/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/660f184966c84983570b113d3ce99124e0180962/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=660f184966c84983570b113d3ce99124e0180962", "patch": "@@ -5,7 +5,7 @@ use rustc_errors::{\n     error_code, Applicability, DiagnosticBuilder, ErrorGuaranteed, Handler, IntoDiagnostic,\n     MultiSpan,\n };\n-use rustc_macros::{Diagnostic, LintDiagnostic};\n+use rustc_macros::Diagnostic;\n use rustc_middle::ty::Ty;\n use rustc_span::{symbol::Ident, Span, Symbol};\n \n@@ -247,26 +247,6 @@ pub struct SubstsOnOverriddenImpl {\n     pub span: Span,\n }\n \n-#[derive(LintDiagnostic)]\n-#[diag(hir_analysis_unused_extern_crate)]\n-pub struct UnusedExternCrate {\n-    #[suggestion(applicability = \"machine-applicable\", code = \"\")]\n-    pub span: Span,\n-}\n-\n-#[derive(LintDiagnostic)]\n-#[diag(hir_analysis_extern_crate_not_idiomatic)]\n-pub struct ExternCrateNotIdiomatic {\n-    #[suggestion(\n-        style = \"short\",\n-        applicability = \"machine-applicable\",\n-        code = \"{suggestion_code}\"\n-    )]\n-    pub span: Span,\n-    pub msg_code: String,\n-    pub suggestion_code: String,\n-}\n-\n #[derive(Diagnostic)]\n #[diag(hir_analysis_const_impl_for_non_const_trait)]\n pub struct ConstImplForNonConstTrait {"}, {"sha": "f5a711315ea4c5773ab6ee03139cb9204903bb8e", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/660f184966c84983570b113d3ce99124e0180962/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/660f184966c84983570b113d3ce99124e0180962/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=660f184966c84983570b113d3ce99124e0180962", "patch": "@@ -893,6 +893,23 @@ pub trait LintContext: Sized {\n                 BuiltinLintDiagnostics::ByteSliceInPackedStructWithDerive => {\n                     db.help(\"consider implementing the trait by hand, or remove the `packed` attribute\");\n                 }\n+                BuiltinLintDiagnostics::UnusedExternCrate { removal_span }=> {\n+                    db.span_suggestion(\n+                        removal_span,\n+                        \"remove it\",\n+                        \"\",\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n+                BuiltinLintDiagnostics::ExternCrateNotIdiomatic { vis_span, ident_span }=> {\n+                    let suggestion_span = vis_span.between(ident_span);\n+                    db.span_suggestion_verbose(\n+                        suggestion_span,\n+                        \"convert it to a `use`\",\n+                        if vis_span.is_empty() { \"use \" } else { \" use \" },\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n             }\n             // Rewrap `db`, and pass control to the user.\n             decorate(db)"}, {"sha": "534aff7fb620f647686e275bcbdd313584a5d3a9", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/660f184966c84983570b113d3ce99124e0180962/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/660f184966c84983570b113d3ce99124e0180962/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=660f184966c84983570b113d3ce99124e0180962", "patch": "@@ -522,6 +522,13 @@ pub enum BuiltinLintDiagnostics {\n         is_formatting_arg: bool,\n     },\n     ByteSliceInPackedStructWithDerive,\n+    UnusedExternCrate {\n+        removal_span: Span,\n+    },\n+    ExternCrateNotIdiomatic {\n+        vis_span: Span,\n+        ident_span: Span,\n+    },\n }\n \n /// Lints that are buffered up early on in the `Session` before the"}, {"sha": "d37c8d3813b4a439948b17d999426b8cefa7df40", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/660f184966c84983570b113d3ce99124e0180962/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/660f184966c84983570b113d3ce99124e0180962/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=660f184966c84983570b113d3ce99124e0180962", "patch": "@@ -1830,9 +1830,6 @@ rustc_queries! {\n     query maybe_unused_trait_imports(_: ()) -> &'tcx FxIndexSet<LocalDefId> {\n         desc { \"fetching potentially unused trait imports\" }\n     }\n-    query maybe_unused_extern_crates(_: ()) -> &'tcx [(LocalDefId, Span)] {\n-        desc { \"looking up all possibly unused extern crates\" }\n-    }\n     query names_imported_by_glob_use(def_id: LocalDefId) -> &'tcx FxHashSet<Symbol> {\n         desc { |tcx| \"finding names imported by glob use for `{}`\", tcx.def_path_str(def_id.to_def_id()) }\n     }"}, {"sha": "0333198c2031053c7079def761a68fe86525bd4c", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/660f184966c84983570b113d3ce99124e0180962/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/660f184966c84983570b113d3ce99124e0180962/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=660f184966c84983570b113d3ce99124e0180962", "patch": "@@ -2487,8 +2487,6 @@ pub fn provide(providers: &mut ty::query::Providers) {\n         |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);\n     providers.maybe_unused_trait_imports =\n         |tcx, ()| &tcx.resolutions(()).maybe_unused_trait_imports;\n-    providers.maybe_unused_extern_crates =\n-        |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];\n     providers.names_imported_by_glob_use = |tcx, id| {\n         tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())\n     };"}, {"sha": "c3e9dc7bcc1a1b4e4d2f5b8aa3ef11577a05bcf2", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/660f184966c84983570b113d3ce99124e0180962/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/660f184966c84983570b113d3ce99124e0180962/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=660f184966c84983570b113d3ce99124e0180962", "patch": "@@ -165,12 +165,8 @@ pub struct ResolverGlobalCtxt {\n     pub effective_visibilities: EffectiveVisibilities,\n     pub extern_crate_map: FxHashMap<LocalDefId, CrateNum>,\n     pub maybe_unused_trait_imports: FxIndexSet<LocalDefId>,\n-    pub maybe_unused_extern_crates: Vec<(LocalDefId, Span)>,\n     pub reexport_map: FxHashMap<LocalDefId, Vec<ModChild>>,\n     pub glob_map: FxHashMap<LocalDefId, FxHashSet<Symbol>>,\n-    /// Extern prelude entries. The value is `true` if the entry was introduced\n-    /// via `extern crate` item and not `--extern` option or compiler built-in.\n-    pub extern_prelude: FxHashMap<Symbol, bool>,\n     pub main_def: Option<MainDefinition>,\n     pub trait_impls: FxIndexMap<DefId, Vec<LocalDefId>>,\n     /// A list of proc macro LocalDefIds, written out in the order in which"}, {"sha": "b2578e4c4b4467161cd38ec4b5a5f55b43c0ee72", "filename": "compiler/rustc_resolve/src/check_unused.rs", "status": "modified", "additions": 121, "deletions": 14, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/660f184966c84983570b113d3ce99124e0180962/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/660f184966c84983570b113d3ce99124e0180962/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs?ref=660f184966c84983570b113d3ce99124e0180962", "patch": "@@ -29,11 +29,12 @@ use crate::Resolver;\n \n use rustc_ast as ast;\n use rustc_ast::visit::{self, Visitor};\n-use rustc_data_structures::fx::FxIndexMap;\n+use rustc_data_structures::fx::{FxHashMap, FxIndexMap};\n use rustc_data_structures::unord::UnordSet;\n use rustc_errors::{pluralize, MultiSpan};\n-use rustc_session::lint::builtin::{MACRO_USE_EXTERN_CRATE, UNUSED_IMPORTS};\n+use rustc_session::lint::builtin::{MACRO_USE_EXTERN_CRATE, UNUSED_EXTERN_CRATES, UNUSED_IMPORTS};\n use rustc_session::lint::BuiltinLintDiagnostics;\n+use rustc_span::symbol::Ident;\n use rustc_span::{Span, DUMMY_SP};\n \n struct UnusedImport<'a> {\n@@ -53,11 +54,28 @@ struct UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n     r: &'a mut Resolver<'b, 'tcx>,\n     /// All the (so far) unused imports, grouped path list\n     unused_imports: FxIndexMap<ast::NodeId, UnusedImport<'a>>,\n+    extern_crate_items: Vec<ExternCrateToLint>,\n     base_use_tree: Option<&'a ast::UseTree>,\n     base_id: ast::NodeId,\n     item_span: Span,\n }\n \n+struct ExternCrateToLint {\n+    id: ast::NodeId,\n+    /// Span from the item\n+    span: Span,\n+    /// Span to use to suggest complete removal.\n+    span_with_attributes: Span,\n+    /// Span of the visibility, if any.\n+    vis_span: Span,\n+    /// Whether the item has attrs.\n+    has_attrs: bool,\n+    /// Name used to refer to the crate.\n+    ident: Ident,\n+    /// Whether the statement renames the crate `extern crate orig_name as new_name;`.\n+    renames: bool,\n+}\n+\n impl<'a, 'b, 'tcx> UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n     // We have information about whether `use` (import) items are actually\n     // used now. If an import is not used at all, we signal a lint error.\n@@ -96,18 +114,27 @@ impl<'a, 'b, 'tcx> UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n \n impl<'a, 'b, 'tcx> Visitor<'a> for UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n     fn visit_item(&mut self, item: &'a ast::Item) {\n-        self.item_span = item.span_with_attributes();\n-\n-        // Ignore is_public import statements because there's no way to be sure\n-        // whether they're used or not. Also ignore imports with a dummy span\n-        // because this means that they were generated in some fashion by the\n-        // compiler and we don't need to consider them.\n-        if let ast::ItemKind::Use(..) = item.kind {\n-            if item.vis.kind.is_pub() || item.span.is_dummy() {\n-                return;\n+        match item.kind {\n+            // Ignore is_public import statements because there's no way to be sure\n+            // whether they're used or not. Also ignore imports with a dummy span\n+            // because this means that they were generated in some fashion by the\n+            // compiler and we don't need to consider them.\n+            ast::ItemKind::Use(..) if item.vis.kind.is_pub() || item.span.is_dummy() => return,\n+            ast::ItemKind::ExternCrate(orig_name) => {\n+                self.extern_crate_items.push(ExternCrateToLint {\n+                    id: item.id,\n+                    span: item.span,\n+                    vis_span: item.vis.span,\n+                    span_with_attributes: item.span_with_attributes(),\n+                    has_attrs: !item.attrs.is_empty(),\n+                    ident: item.ident,\n+                    renames: orig_name.is_some(),\n+                });\n             }\n+            _ => {}\n         }\n \n+        self.item_span = item.span_with_attributes();\n         visit::walk_item(self, item);\n     }\n \n@@ -224,6 +251,9 @@ fn calc_unused_spans(\n \n impl Resolver<'_, '_> {\n     pub(crate) fn check_unused(&mut self, krate: &ast::Crate) {\n+        let tcx = self.tcx;\n+        let mut maybe_unused_extern_crates = FxHashMap::default();\n+\n         for import in self.potentially_unused_imports.iter() {\n             match import.kind {\n                 _ if import.used.get()\n@@ -246,7 +276,14 @@ impl Resolver<'_, '_> {\n                 }\n                 ImportKind::ExternCrate { id, .. } => {\n                     let def_id = self.local_def_id(id);\n-                    self.maybe_unused_extern_crates.push((def_id, import.span));\n+                    if self.extern_crate_map.get(&def_id).map_or(true, |&cnum| {\n+                        !tcx.is_compiler_builtins(cnum)\n+                            && !tcx.is_panic_runtime(cnum)\n+                            && !tcx.has_global_allocator(cnum)\n+                            && !tcx.has_panic_handler(cnum)\n+                    }) {\n+                        maybe_unused_extern_crates.insert(id, import.span);\n+                    }\n                 }\n                 ImportKind::MacroUse => {\n                     let msg = \"unused `#[macro_use]` import\";\n@@ -259,6 +296,7 @@ impl Resolver<'_, '_> {\n         let mut visitor = UnusedImportCheckVisitor {\n             r: self,\n             unused_imports: Default::default(),\n+            extern_crate_items: Default::default(),\n             base_use_tree: None,\n             base_id: ast::DUMMY_NODE_ID,\n             item_span: DUMMY_SP,\n@@ -290,7 +328,7 @@ impl Resolver<'_, '_> {\n             let ms = MultiSpan::from_spans(spans.clone());\n             let mut span_snippets = spans\n                 .iter()\n-                .filter_map(|s| match visitor.r.tcx.sess.source_map().span_to_snippet(*s) {\n+                .filter_map(|s| match tcx.sess.source_map().span_to_snippet(*s) {\n                     Ok(s) => Some(format!(\"`{}`\", s)),\n                     _ => None,\n                 })\n@@ -317,7 +355,7 @@ impl Resolver<'_, '_> {\n             // If we are in the `--test` mode, suppress a help that adds the `#[cfg(test)]`\n             // attribute; however, if not, suggest adding the attribute. There is no way to\n             // retrieve attributes here because we do not have a `TyCtxt` yet.\n-            let test_module_span = if visitor.r.tcx.sess.opts.test {\n+            let test_module_span = if tcx.sess.opts.test {\n                 None\n             } else {\n                 let parent_module = visitor.r.get_nearest_non_block_module(\n@@ -346,5 +384,74 @@ impl Resolver<'_, '_> {\n                 BuiltinLintDiagnostics::UnusedImports(fix_msg.into(), fixes, test_module_span),\n             );\n         }\n+\n+        for extern_crate in visitor.extern_crate_items {\n+            let warn_if_unused = !extern_crate.ident.name.as_str().starts_with('_');\n+\n+            // If the crate is fully unused, we suggest removing it altogether.\n+            // We do this in any edition.\n+            if warn_if_unused {\n+                if let Some(&span) = maybe_unused_extern_crates.get(&extern_crate.id) {\n+                    visitor.r.lint_buffer.buffer_lint_with_diagnostic(\n+                        UNUSED_EXTERN_CRATES,\n+                        extern_crate.id,\n+                        span,\n+                        \"unused extern crate\",\n+                        BuiltinLintDiagnostics::UnusedExternCrate {\n+                            removal_span: extern_crate.span_with_attributes,\n+                        },\n+                    );\n+                    continue;\n+                }\n+            }\n+\n+            // If we are not in Rust 2018 edition, then we don't make any further\n+            // suggestions.\n+            if !tcx.sess.rust_2018() {\n+                continue;\n+            }\n+\n+            // If the extern crate has any attributes, they may have funky\n+            // semantics we can't faithfully represent using `use` (most\n+            // notably `#[macro_use]`). Ignore it.\n+            if extern_crate.has_attrs {\n+                continue;\n+            }\n+\n+            // If the extern crate is renamed, then we cannot suggest replacing it with a use as this\n+            // would not insert the new name into the prelude, where other imports in the crate may be\n+            // expecting it.\n+            if extern_crate.renames {\n+                continue;\n+            }\n+\n+            // If the extern crate isn't in the extern prelude,\n+            // there is no way it can be written as a `use`.\n+            if !visitor\n+                .r\n+                .extern_prelude\n+                .get(&extern_crate.ident)\n+                .map_or(false, |entry| !entry.introduced_by_item)\n+            {\n+                continue;\n+            }\n+\n+            let vis_span = extern_crate\n+                .vis_span\n+                .find_ancestor_inside(extern_crate.span)\n+                .unwrap_or(extern_crate.vis_span);\n+            let ident_span = extern_crate\n+                .ident\n+                .span\n+                .find_ancestor_inside(extern_crate.span)\n+                .unwrap_or(extern_crate.ident.span);\n+            visitor.r.lint_buffer.buffer_lint_with_diagnostic(\n+                UNUSED_EXTERN_CRATES,\n+                extern_crate.id,\n+                extern_crate.span,\n+                \"`extern crate` is not idiomatic in the new edition\",\n+                BuiltinLintDiagnostics::ExternCrateNotIdiomatic { vis_span, ident_span },\n+            );\n+        }\n     }\n }"}, {"sha": "1fdfb1a53d452e59825cf16c77c645253ce85408", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/660f184966c84983570b113d3ce99124e0180962/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/660f184966c84983570b113d3ce99124e0180962/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=660f184966c84983570b113d3ce99124e0180962", "patch": "@@ -946,7 +946,6 @@ pub struct Resolver<'a, 'tcx> {\n     has_pub_restricted: bool,\n     used_imports: FxHashSet<NodeId>,\n     maybe_unused_trait_imports: FxIndexSet<LocalDefId>,\n-    maybe_unused_extern_crates: Vec<(LocalDefId, Span)>,\n \n     /// Privacy errors are delayed until the end in order to deduplicate them.\n     privacy_errors: Vec<PrivacyError<'a>>,\n@@ -1284,7 +1283,6 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             has_pub_restricted: false,\n             used_imports: FxHashSet::default(),\n             maybe_unused_trait_imports: Default::default(),\n-            maybe_unused_extern_crates: Vec::new(),\n \n             privacy_errors: Vec::new(),\n             ambiguity_errors: Vec::new(),\n@@ -1400,7 +1398,6 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         let extern_crate_map = self.extern_crate_map;\n         let reexport_map = self.reexport_map;\n         let maybe_unused_trait_imports = self.maybe_unused_trait_imports;\n-        let maybe_unused_extern_crates = self.maybe_unused_extern_crates;\n         let glob_map = self.glob_map;\n         let main_def = self.main_def;\n         let confused_type_with_std_module = self.confused_type_with_std_module;\n@@ -1414,12 +1411,6 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             reexport_map,\n             glob_map,\n             maybe_unused_trait_imports,\n-            maybe_unused_extern_crates,\n-            extern_prelude: self\n-                .extern_prelude\n-                .iter()\n-                .map(|(ident, entry)| (ident.name, entry.introduced_by_item))\n-                .collect(),\n             main_def,\n             trait_impls: self.trait_impls,\n             proc_macros,"}, {"sha": "15e0ccc5256a536077cfdb26d5cbc38e3f706f8b", "filename": "tests/ui/rust-2018/remove-extern-crate.fixed", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/660f184966c84983570b113d3ce99124e0180962/tests%2Fui%2Frust-2018%2Fremove-extern-crate.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/660f184966c84983570b113d3ce99124e0180962/tests%2Fui%2Frust-2018%2Fremove-extern-crate.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frust-2018%2Fremove-extern-crate.fixed?ref=660f184966c84983570b113d3ce99124e0180962", "patch": "@@ -23,6 +23,7 @@ extern crate alloc;\n fn main() {\n     another_name::mem::drop(3);\n     another::foo();\n+    with_visibility::foo();\n     remove_extern_crate::foo!();\n     bar!();\n     alloc::vec![5];\n@@ -37,3 +38,12 @@ mod another {\n         remove_extern_crate::foo!();\n     }\n }\n+\n+mod with_visibility {\n+    pub use core; //~ WARNING `extern crate` is not idiomatic\n+\n+    pub fn foo() {\n+        core::mem::drop(4);\n+        remove_extern_crate::foo!();\n+    }\n+}"}, {"sha": "aec0bc7c374013a914abe70c87c589d579f4ddc9", "filename": "tests/ui/rust-2018/remove-extern-crate.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/660f184966c84983570b113d3ce99124e0180962/tests%2Fui%2Frust-2018%2Fremove-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/660f184966c84983570b113d3ce99124e0180962/tests%2Fui%2Frust-2018%2Fremove-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frust-2018%2Fremove-extern-crate.rs?ref=660f184966c84983570b113d3ce99124e0180962", "patch": "@@ -23,6 +23,7 @@ extern crate alloc;\n fn main() {\n     another_name::mem::drop(3);\n     another::foo();\n+    with_visibility::foo();\n     remove_extern_crate::foo!();\n     bar!();\n     alloc::vec![5];\n@@ -37,3 +38,12 @@ mod another {\n         remove_extern_crate::foo!();\n     }\n }\n+\n+mod with_visibility {\n+    pub extern crate core; //~ WARNING `extern crate` is not idiomatic\n+\n+    pub fn foo() {\n+        core::mem::drop(4);\n+        remove_extern_crate::foo!();\n+    }\n+}"}, {"sha": "d07358e471bb40d089faa3f736df7c41f58621f1", "filename": "tests/ui/rust-2018/remove-extern-crate.stderr", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/660f184966c84983570b113d3ce99124e0180962/tests%2Fui%2Frust-2018%2Fremove-extern-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/660f184966c84983570b113d3ce99124e0180962/tests%2Fui%2Frust-2018%2Fremove-extern-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frust-2018%2Fremove-extern-crate.stderr?ref=660f184966c84983570b113d3ce99124e0180962", "patch": "@@ -12,10 +12,26 @@ LL | #![warn(rust_2018_idioms)]\n    = note: `#[warn(unused_extern_crates)]` implied by `#[warn(rust_2018_idioms)]`\n \n warning: `extern crate` is not idiomatic in the new edition\n-  --> $DIR/remove-extern-crate.rs:32:5\n+  --> $DIR/remove-extern-crate.rs:33:5\n    |\n LL |     extern crate core;\n-   |     ^^^^^^^^^^^^^^^^^^ help: convert it to a `use`\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+help: convert it to a `use`\n+   |\n+LL |     use core;\n+   |     ~~~\n+\n+warning: `extern crate` is not idiomatic in the new edition\n+  --> $DIR/remove-extern-crate.rs:43:5\n+   |\n+LL |     pub extern crate core;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: convert it to a `use`\n+   |\n+LL |     pub use core;\n+   |         ~~~\n \n-warning: 2 warnings emitted\n+warning: 3 warnings emitted\n "}]}