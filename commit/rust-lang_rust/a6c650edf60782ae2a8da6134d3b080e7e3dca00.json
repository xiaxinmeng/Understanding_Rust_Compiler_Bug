{"sha": "a6c650edf60782ae2a8da6134d3b080e7e3dca00", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2YzY1MGVkZjYwNzgyYWUyYThkYTYxMzRkM2IwODBlN2UzZGNhMDA=", "commit": {"author": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-09-04T08:43:36Z"}, "committer": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-09-04T09:24:54Z"}, "message": "fix: use placeholder as default type in `Generate function`.", "tree": {"sha": "aa04caac37bba0c2efcb9619e58f6536d2bb392c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa04caac37bba0c2efcb9619e58f6536d2bb392c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6c650edf60782ae2a8da6134d3b080e7e3dca00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6c650edf60782ae2a8da6134d3b080e7e3dca00", "html_url": "https://github.com/rust-lang/rust/commit/a6c650edf60782ae2a8da6134d3b080e7e3dca00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6c650edf60782ae2a8da6134d3b080e7e3dca00/comments", "author": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5506e0dfaffb548a0bcd20584d74c33229d7c186", "url": "https://api.github.com/repos/rust-lang/rust/commits/5506e0dfaffb548a0bcd20584d74c33229d7c186", "html_url": "https://github.com/rust-lang/rust/commit/5506e0dfaffb548a0bcd20584d74c33229d7c186"}], "stats": {"total": 59, "additions": 31, "deletions": 28}, "files": [{"sha": "8feae78126ff223440558585d3f8ccecadf1a54a", "filename": "crates/ide_assists/src/handlers/generate_function.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/a6c650edf60782ae2a8da6134d3b080e7e3dca00/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c650edf60782ae2a8da6134d3b080e7e3dca00/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=a6c650edf60782ae2a8da6134d3b080e7e3dca00", "patch": "@@ -37,7 +37,7 @@ use crate::{\n //     bar(\"\", baz());\n // }\n //\n-// fn bar(arg: &str, baz: Baz) ${0:-> ()} {\n+// fn bar(arg: &str, baz: Baz) ${0:-> _} {\n //     todo!()\n // }\n //\n@@ -342,7 +342,7 @@ impl FunctionBuilder {\n }\n \n /// Makes an optional return type along with whether the return type should be focused by the cursor.\n-/// If we cannot infer what the return type should be, we create unit as a placeholder.\n+/// If we cannot infer what the return type should be, we create a placeholder type.\n ///\n /// The rule for whether we focus a return type or not (and thus focus the function body),\n /// is rather simple:\n@@ -357,14 +357,14 @@ fn make_return_type(\n ) -> (Option<ast::RetType>, bool) {\n     let (ret_ty, should_focus_return_type) = {\n         match ctx.sema.type_of_expr(call).map(TypeInfo::original) {\n-            Some(ty) if ty.is_unknown() => (Some(make::ty_unit()), true),\n-            None => (Some(make::ty_unit()), true),\n+            Some(ty) if ty.is_unknown() => (Some(make::ty_placeholder()), true),\n+            None => (Some(make::ty_placeholder()), true),\n             Some(ty) if ty.is_unit() => (None, false),\n             Some(ty) => {\n                 let rendered = ty.display_source_code(ctx.db(), target_module.into());\n                 match rendered {\n                     Ok(rendered) => (Some(make::ty(&rendered)), false),\n-                    Err(_) => (Some(make::ty_unit()), true),\n+                    Err(_) => (Some(make::ty_placeholder()), true),\n                 }\n             }\n         }\n@@ -458,7 +458,7 @@ fn fn_args(\n                     ty\n                 }\n             }\n-            None => String::from(\"()\"),\n+            None => String::from(\"_\"),\n         });\n     }\n     deduplicate_arg_names(&mut arg_names);\n@@ -639,7 +639,7 @@ fn foo() {\n     bar();\n }\n \n-fn bar() ${0:-> ()} {\n+fn bar() ${0:-> _} {\n     todo!()\n }\n \",\n@@ -666,7 +666,7 @@ impl Foo {\n     }\n }\n \n-fn bar() ${0:-> ()} {\n+fn bar() ${0:-> _} {\n     todo!()\n }\n \",\n@@ -690,7 +690,7 @@ fn foo1() {\n     bar();\n }\n \n-fn bar() ${0:-> ()} {\n+fn bar() ${0:-> _} {\n     todo!()\n }\n \n@@ -716,7 +716,7 @@ mod baz {\n         bar();\n     }\n \n-    fn bar() ${0:-> ()} {\n+    fn bar() ${0:-> _} {\n         todo!()\n     }\n }\n@@ -740,7 +740,7 @@ fn foo() {\n     bar(BazBaz);\n }\n \n-fn bar(baz_baz: BazBaz) ${0:-> ()} {\n+fn bar(baz_baz: BazBaz) ${0:-> _} {\n     todo!()\n }\n \",\n@@ -763,7 +763,7 @@ fn foo() {\n     bar(&BazBaz as *const BazBaz);\n }\n \n-fn bar(baz_baz: *const BazBaz) ${0:-> ()} {\n+fn bar(baz_baz: *const BazBaz) ${0:-> _} {\n     todo!()\n }\n \",\n@@ -788,7 +788,7 @@ fn foo() {\n     bar(baz());\n }\n \n-fn bar(baz: Baz) ${0:-> ()} {\n+fn bar(baz: Baz) ${0:-> _} {\n     todo!()\n }\n \",\n@@ -1091,7 +1091,7 @@ fn foo() {\n     bar(Baz::new);\n }\n \n-fn bar(new: fn) ${0:-> ()} {\n+fn bar(new: fn) ${0:-> _} {\n     todo!()\n }\n \",\n@@ -1115,15 +1115,15 @@ fn foo() {\n     bar(closure)\n }\n \n-fn bar(closure: ()) {\n+fn bar(closure: _) {\n     ${0:todo!()}\n }\n \",\n         )\n     }\n \n     #[test]\n-    fn unresolveable_types_default_to_unit() {\n+    fn unresolveable_types_default_to_placeholder() {\n         check_assist(\n             generate_function,\n             r\"\n@@ -1136,7 +1136,7 @@ fn foo() {\n     bar(baz)\n }\n \n-fn bar(baz: ()) {\n+fn bar(baz: _) {\n     ${0:todo!()}\n }\n \",\n@@ -1400,7 +1400,7 @@ impl Foo {\n         self.bar();\n     }\n \n-    fn bar(&self) ${0:-> ()} {\n+    fn bar(&self) ${0:-> _} {\n         todo!()\n     }\n }\n@@ -1422,7 +1422,7 @@ fn foo() {\n     bar(42).await();\n }\n \n-async fn bar(arg: i32) ${0:-> ()} {\n+async fn bar(arg: i32) ${0:-> _} {\n     todo!()\n }\n \",\n@@ -1443,7 +1443,7 @@ fn foo() {S.bar();}\n impl S {\n \n \n-fn bar(&self) ${0:-> ()} {\n+fn bar(&self) ${0:-> _} {\n     todo!()\n }\n }\n@@ -1465,7 +1465,7 @@ impl S {}\n struct S;\n fn foo() {S.bar();}\n impl S {\n-    fn bar(&self) ${0:-> ()} {\n+    fn bar(&self) ${0:-> _} {\n         todo!()\n     }\n }\n@@ -1490,7 +1490,7 @@ mod s {\n impl S {\n \n \n-    pub(crate) fn bar(&self) ${0:-> ()} {\n+    pub(crate) fn bar(&self) ${0:-> _} {\n         todo!()\n     }\n }\n@@ -1523,7 +1523,7 @@ mod s {\n impl S {\n \n \n-fn bar(&self) ${0:-> ()} {\n+fn bar(&self) ${0:-> _} {\n     todo!()\n }\n }\n@@ -1546,7 +1546,7 @@ fn foo() {S.bar();}\n impl S {\n \n \n-fn bar(&self) ${0:-> ()} {\n+fn bar(&self) ${0:-> _} {\n     todo!()\n }\n }\n@@ -1568,7 +1568,7 @@ fn foo() {S::bar();}\n impl S {\n \n \n-fn bar() ${0:-> ()} {\n+fn bar() ${0:-> _} {\n     todo!()\n }\n }\n@@ -1590,7 +1590,7 @@ impl S {}\n struct S;\n fn foo() {S::bar();}\n impl S {\n-    fn bar() ${0:-> ()} {\n+    fn bar() ${0:-> _} {\n         todo!()\n     }\n }\n@@ -1615,7 +1615,7 @@ mod s {\n impl S {\n \n \n-    pub(crate) fn bar() ${0:-> ()} {\n+    pub(crate) fn bar() ${0:-> _} {\n         todo!()\n     }\n }\n@@ -1639,7 +1639,7 @@ fn foo() {S::bar();}\n impl S {\n \n \n-fn bar() ${0:-> ()} {\n+fn bar() ${0:-> _} {\n     todo!()\n }\n }"}, {"sha": "93eca19c309266641f5d34d9f911579114ab456a", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a6c650edf60782ae2a8da6134d3b080e7e3dca00/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c650edf60782ae2a8da6134d3b080e7e3dca00/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=a6c650edf60782ae2a8da6134d3b080e7e3dca00", "patch": "@@ -95,6 +95,9 @@ pub fn lifetime(text: &str) -> ast::Lifetime {\n pub fn ty(text: &str) -> ast::Type {\n     ty_from_text(text)\n }\n+pub fn ty_placeholder() -> ast::Type {\n+    ty_from_text(\"_\")\n+}\n pub fn ty_unit() -> ast::Type {\n     ty_from_text(\"()\")\n }"}]}