{"sha": "259636a112804b94530c409a468b97d4366bb0d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1OTYzNmExMTI4MDRiOTQ1MzBjNDA5YTQ2OGI5N2Q0MzY2YmIwZDM=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-01-26T16:39:45Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-01-28T17:18:34Z"}, "message": "core: rename vec::position* functions\n\nAlmost all of the vec functions that predicates don't have a\ncorresponding function that takes a single element, so this\ncommit renames the common fn usecase to be the default.", "tree": {"sha": "572db0f59b254355db6ea83caaf6181e25856009", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/572db0f59b254355db6ea83caaf6181e25856009"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/259636a112804b94530c409a468b97d4366bb0d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/259636a112804b94530c409a468b97d4366bb0d3", "html_url": "https://github.com/rust-lang/rust/commit/259636a112804b94530c409a468b97d4366bb0d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/259636a112804b94530c409a468b97d4366bb0d3/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a831e7ce13aa19acf0f65e508097351f8dabca84", "url": "https://api.github.com/repos/rust-lang/rust/commits/a831e7ce13aa19acf0f65e508097351f8dabca84", "html_url": "https://github.com/rust-lang/rust/commit/a831e7ce13aa19acf0f65e508097351f8dabca84"}], "stats": {"total": 51, "additions": 27, "deletions": 24}, "files": [{"sha": "29862e7ba5b6f4a5673728d5c33672fbd41bdf9f", "filename": "doc/tutorial.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/259636a112804b94530c409a468b97d4366bb0d3/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/259636a112804b94530c409a468b97d4366bb0d3/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=259636a112804b94530c409a468b97d4366bb0d3", "patch": "@@ -929,8 +929,8 @@ for the parameter list, as in `{|| ...}`.\n Partial application is done using the `bind` keyword in Rust.\n \n ~~~~\n-let daynum = bind vec::position(_, [\"mo\", \"tu\", \"we\", \"do\",\n-                                    \"fr\", \"sa\", \"su\"]);\n+let daynum = bind vec::position_elt([\"mo\", \"tu\", \"we\", \"do\",\n+                                     \"fr\", \"sa\", \"su\"], _);\n ~~~~\n \n Binding a function produces a boxed closure (`fn@` type) in which some"}, {"sha": "a8a88dfa193e6a7b93d5136611bf750987066cb6", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/259636a112804b94530c409a468b97d4366bb0d3/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/259636a112804b94530c409a468b97d4366bb0d3/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=259636a112804b94530c409a468b97d4366bb0d3", "patch": "@@ -679,7 +679,7 @@ fn filter_invalid(src: list<@invalid>, bs: [binding]) -> list<@invalid> {\n     while cur != list::nil {\n         alt cur {\n           list::cons(head, tail) {\n-            let p = vec::position_pred(bs, {|b| b.node_id == head.node_id});\n+            let p = vec::position(bs, {|b| b.node_id == head.node_id});\n             if !is_none(p) { out = list::cons(head, @out); }\n             cur = *tail;\n           }"}, {"sha": "389f490e8e9c2c6d8fe03c40eb0183196c28db50", "filename": "src/comp/middle/shape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/259636a112804b94530c409a468b97d4366bb0d3/src%2Fcomp%2Fmiddle%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/259636a112804b94530c409a468b97d4366bb0d3/src%2Fcomp%2Fmiddle%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fshape.rs?ref=259636a112804b94530c409a468b97d4366bb0d3", "patch": "@@ -430,7 +430,7 @@ fn shape_of(ccx: @crate_ctxt, t: ty::t, ty_param_map: [uint]) -> [u8] {\n       }\n       ty::ty_param(n, _) {\n         // Find the type parameter in the parameter list.\n-        alt vec::position(n, ty_param_map) {\n+        alt vec::position_elt(ty_param_map, n) {\n           some(i) { s += [shape_var, i as u8]; }\n           none { fail \"ty param not found in ty_param_map\"; }\n         }"}, {"sha": "03c98dfa827df708e2dcba7900a43e5efe9a8410", "filename": "src/comp/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/259636a112804b94530c409a468b97d4366bb0d3/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/259636a112804b94530c409a468b97d4366bb0d3/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs?ref=259636a112804b94530c409a468b97d4366bb0d3", "patch": "@@ -3375,7 +3375,7 @@ fn trans_rec(bcx: @block_ctxt, fields: [ast::field],\n     let ty_fields = alt ty::struct(bcx_tcx(bcx), t) { ty::ty_rec(f) { f } };\n     let temp_cleanups = [];\n     for fld in fields {\n-        let ix = option::get(vec::position_pred(ty_fields, {|ft|\n+        let ix = option::get(vec::position(ty_fields, {|ft|\n             str::eq(fld.node.ident, ft.ident)\n         }));\n         let dst = GEP_tup_like_1(bcx, t, addr, [0, ix as int]);"}, {"sha": "b91379246520f1c016e743e36655a2f554923f0f", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/259636a112804b94530c409a468b97d4366bb0d3/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/259636a112804b94530c409a468b97d4366bb0d3/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=259636a112804b94530c409a468b97d4366bb0d3", "patch": "@@ -1513,7 +1513,7 @@ fn lookup_method(fcx: @fn_ctxt, isc: resolve::iscopes,\n                     ty::ty_iface(i, tps) { (i, tps) }\n                 };\n                 let ifce_methods = ty::iface_methods(tcx, iid);\n-                alt vec::position_pred(*ifce_methods, {|m| m.ident == name}) {\n+                alt vec::position(*ifce_methods, {|m| m.ident == name}) {\n                   some(pos) {\n                     let m = ifce_methods[pos];\n                     ret some({method_ty: ty::mk_fn(tcx, m.fty),"}, {"sha": "1279d1a8e4008e337354a5b64de09c67adebf996", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/259636a112804b94530c409a468b97d4366bb0d3/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/259636a112804b94530c409a468b97d4366bb0d3/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=259636a112804b94530c409a468b97d4366bb0d3", "patch": "@@ -614,7 +614,7 @@ fn find<T: copy>(v: [T], f: fn(T) -> bool) -> option::t<T> {\n }\n \n /*\n-Function: position\n+Function: position_elt\n \n Find the first index containing a matching value\n \n@@ -623,18 +623,16 @@ Returns:\n option::some(uint) - The first index containing a matching value\n option::none - No elements matched\n */\n-fn position<T>(x: T, v: [T]) -> option::t<uint> {\n-    let i: uint = 0u;\n-    while i < len(v) { if x == v[i] { ret some::<uint>(i); } i += 1u; }\n-    ret none;\n+fn position_elt<T>(v: [T], x: T) -> option::t<uint> {\n+    position(v) { |y| x == y }\n }\n \n /*\n-Function: position_pred\n+Function: position\n \n Find the first index for which the value matches some predicate\n */\n-fn position_pred<T>(v: [T], f: fn(T) -> bool) -> option::t<uint> {\n+fn position<T>(v: [T], f: fn(T) -> bool) -> option::t<uint> {\n     let i: uint = 0u;\n     while i < len(v) { if f(v[i]) { ret some::<uint>(i); } i += 1u; }\n     ret none;\n@@ -1453,21 +1451,26 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_position() {\n-        let v1: [int] = [1, 2, 3, 3, 2, 5];\n-        assert (position(1, v1) == option::some::<uint>(0u));\n-        assert (position(2, v1) == option::some::<uint>(1u));\n-        assert (position(5, v1) == option::some::<uint>(5u));\n-        assert (position(4, v1) == option::none::<uint>);\n+    fn test_position_elt() {\n+        assert position_elt([], 1) == none;\n+\n+        let v1 = [1, 2, 3, 3, 2, 5];\n+        assert position_elt(v1, 1) == some(0u);\n+        assert position_elt(v1, 2) == some(1u);\n+        assert position_elt(v1, 5) == some(5u);\n+        assert position_elt(v1, 4) == none;\n     }\n \n     #[test]\n-    fn test_position_pred() {\n+    fn test_position() {\n         fn less_than_three(&&i: int) -> bool { ret i < 3; }\n         fn is_eighteen(&&i: int) -> bool { ret i == 18; }\n-        let v1: [int] = [5, 4, 3, 2, 1];\n-        assert position_pred(v1, less_than_three) == option::some::<uint>(3u);\n-        assert position_pred(v1, is_eighteen) == option::none::<uint>;\n+\n+        assert position([], less_than_three) == none;\n+\n+        let v1 = [5, 4, 3, 2, 1];\n+        assert position(v1, less_than_three) == some(3u);\n+        assert position(v1, is_eighteen) == none;\n     }\n \n     #[test]"}, {"sha": "c517a2f996df708ba81ccbb3c8615de6d3f681c7", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/259636a112804b94530c409a468b97d4366bb0d3/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/259636a112804b94530c409a468b97d4366bb0d3/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=259636a112804b94530c409a468b97d4366bb0d3", "patch": "@@ -149,7 +149,7 @@ fn name_str(nm: name) -> str {\n }\n \n fn find_opt(opts: [opt], nm: name) -> option::t<uint> {\n-    vec::position_pred(opts, { |opt| opt.name == nm })\n+    vec::position(opts, { |opt| opt.name == nm })\n }\n \n /*"}]}