{"sha": "0c284843ba23482a2263e1e60b595ead154baae1", "node_id": "C_kwDOAAsO6NoAKDBjMjg0ODQzYmEyMzQ4MmEyMjYzZTFlNjBiNTk1ZWFkMTU0YmFhZTE", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-06-30T09:06:19Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-07-12T17:00:13Z"}, "message": "make for<> in closures a possible place to suggest adding named lifetime", "tree": {"sha": "36f544973905aabab11afbfdc6d91d9b9ced53cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36f544973905aabab11afbfdc6d91d9b9ced53cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c284843ba23482a2263e1e60b595ead154baae1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c284843ba23482a2263e1e60b595ead154baae1", "html_url": "https://github.com/rust-lang/rust/commit/0c284843ba23482a2263e1e60b595ead154baae1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c284843ba23482a2263e1e60b595ead154baae1/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2dbd62c7c60cd4017c9d499101e40c129e4bc61", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2dbd62c7c60cd4017c9d499101e40c129e4bc61", "html_url": "https://github.com/rust-lang/rust/commit/c2dbd62c7c60cd4017c9d499101e40c129e4bc61"}], "stats": {"total": 40, "additions": 36, "deletions": 4}, "files": [{"sha": "d46f0319f2cc24b688a3983fc306953c1da30c71", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c284843ba23482a2263e1e60b595ead154baae1/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c284843ba23482a2263e1e60b595ead154baae1/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=0c284843ba23482a2263e1e60b595ead154baae1", "patch": "@@ -70,20 +70,24 @@ pub(crate) enum ForLifetimeSpanType {\n     BoundTail,\n     TypeEmpty,\n     TypeTail,\n+    ClosureEmpty,\n+    ClosureTail,\n }\n \n impl ForLifetimeSpanType {\n     pub(crate) fn descr(&self) -> &'static str {\n         match self {\n             Self::BoundEmpty | Self::BoundTail => \"bound\",\n             Self::TypeEmpty | Self::TypeTail => \"type\",\n+            Self::ClosureEmpty | Self::ClosureTail => \"closure\",\n         }\n     }\n \n     pub(crate) fn suggestion(&self, sugg: &str) -> String {\n         match self {\n             Self::BoundEmpty | Self::TypeEmpty => format!(\"for<{}> \", sugg),\n-            Self::BoundTail | Self::TypeTail => format!(\", {}\", sugg),\n+            Self::ClosureEmpty => format!(\"for<{}>\", sugg),\n+            Self::BoundTail | Self::TypeTail | Self::ClosureTail => format!(\", {}\", sugg),\n         }\n     }\n }"}, {"sha": "8763279a66878f43e1155cb2a98cab6195b2a9f7", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0c284843ba23482a2263e1e60b595ead154baae1/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c284843ba23482a2263e1e60b595ead154baae1/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=0c284843ba23482a2263e1e60b595ead154baae1", "patch": "@@ -15,7 +15,7 @@ use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefIdMap, LocalDefId};\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{GenericArg, GenericParam, LifetimeName, Node};\n-use rustc_hir::{GenericParamKind, HirIdMap};\n+use rustc_hir::{GenericParamKind, HirIdMap, LifetimeParamKind};\n use rustc_middle::hir::map::Map;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::resolve_lifetime::*;\n@@ -629,8 +629,6 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     })\n                     .unzip();\n \n-            // FIXME: missing_named_lifetime_spots\n-\n             self.map.late_bound_vars.insert(e.hir_id, binders);\n             let scope = Scope::Binder {\n                 hir_id: e.hir_id,\n@@ -642,11 +640,41 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 allow_late_bound: true,\n                 where_bound_origin: None,\n             };\n+\n+            if let &hir::ClosureBinder::For { span, .. } = binder {\n+                let last_lt = bound_generic_params\n+                    .iter()\n+                    .filter(|p| {\n+                        matches!(\n+                            p,\n+                            GenericParam {\n+                                kind: GenericParamKind::Lifetime {\n+                                    kind: LifetimeParamKind::Explicit\n+                                },\n+                                ..\n+                            }\n+                        )\n+                    })\n+                    .last();\n+                let (span, span_type) = match last_lt {\n+                    Some(GenericParam { span: last_sp, .. }) => {\n+                        (last_sp.shrink_to_hi(), ForLifetimeSpanType::ClosureTail)\n+                    }\n+                    None => (span, ForLifetimeSpanType::ClosureEmpty),\n+                };\n+                self.missing_named_lifetime_spots\n+                    .push(MissingLifetimeSpot::HigherRanked { span, span_type });\n+            }\n+\n             self.with(scope, |this| {\n                 // a closure has no bounds, so everything\n                 // contained within is scoped within its binder.\n                 intravisit::walk_expr(this, e)\n             });\n+\n+            if let hir::ClosureBinder::For { .. } = binder {\n+                self.missing_named_lifetime_spots.pop();\n+            }\n         } else {\n             intravisit::walk_expr(self, e)\n         }"}]}