{"sha": "1be40be613177d4849f42da284a3af74e1d58da2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiZTQwYmU2MTMxNzdkNDg0OWY0MmRhMjg0YTNhZjc0ZTFkNThkYTI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-05-21T00:07:24Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-05-23T04:57:10Z"}, "message": "test: Update tests to use the new syntax.", "tree": {"sha": "e0e9563c7648966ed6d0a620d7829d52ea3fa9f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0e9563c7648966ed6d0a620d7829d52ea3fa9f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1be40be613177d4849f42da284a3af74e1d58da2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1be40be613177d4849f42da284a3af74e1d58da2", "html_url": "https://github.com/rust-lang/rust/commit/1be40be613177d4849f42da284a3af74e1d58da2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1be40be613177d4849f42da284a3af74e1d58da2/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c10e0cb9c984ece484a5c8c9c4c20369e2be499b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c10e0cb9c984ece484a5c8c9c4c20369e2be499b", "html_url": "https://github.com/rust-lang/rust/commit/c10e0cb9c984ece484a5c8c9c4c20369e2be499b"}], "stats": {"total": 1130, "additions": 565, "deletions": 565}, "files": [{"sha": "13cc27e0e278501e1791248b16f2bba943bf0c50", "filename": "src/test/auxiliary/cci_capture_clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::comm::*;\n+use std::comm::*;\n \n pub fn foo<T:Owned + Copy>(x: T) -> Port<T> {\n     let (p, c) = stream();"}, {"sha": "56808b0d58f8d112526f1cba4bb09fbf98f8776d", "filename": "src/test/auxiliary/cci_class_cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::to_str::*;\n+use std::to_str::*;\n \n pub mod kitty {\n     pub struct cat {"}, {"sha": "bbc0f1ad3e558b8bd8ebe993414cfb3f12ef2208", "filename": "src/test/auxiliary/issue-2526.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fauxiliary%2Fissue-2526.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fauxiliary%2Fissue-2526.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2526.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -13,7 +13,7 @@\n        uuid = \"54cc1bc9-02b8-447c-a227-75ebc923bc29\")];\n #[crate_type = \"lib\"];\n \n-extern mod std;\n+extern mod extra;\n \n struct arc_destruct<T> {\n   _data: int,"}, {"sha": "8afc0327755903231c80be9a7a77ac47ff1b5af6", "filename": "src/test/auxiliary/issue-2631-a.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -11,9 +11,9 @@\n #[link(name = \"req\")];\n #[crate_type = \"lib\"];\n \n-extern mod std;\n+extern mod extra;\n \n-use core::hashmap::HashMap;\n+use std::hashmap::HashMap;\n \n pub type header_map = HashMap<~str, @mut ~[@~str]>;\n "}, {"sha": "f938c9c56ed94eda2a9d57ec3c03dbaacfb77521", "filename": "src/test/auxiliary/trait_inheritance_overloading_xc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::cmp::Eq;\n+use std::cmp::Eq;\n \n pub trait MyNum : Add<Self,Self> + Sub<Self,Self> + Mul<Self,Self> + Eq {\n }"}, {"sha": "7904041ea3cb3911088476821085a3f9132bdfaf", "filename": "src/test/bench/core-map.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fcore-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fcore-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-map.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,14 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n+extern mod extra;\n \n-use core::io;\n-use std::time;\n-use std::treemap::TreeMap;\n-use core::hashmap::{HashMap, HashSet};\n-use core::trie::TrieMap;\n-use core::rand::Rng;\n+use std::io;\n+use extra::time;\n+use extra::treemap::TreeMap;\n+use std::hashmap::{HashMap, HashSet};\n+use std::trie::TrieMap;\n+use std::rand::Rng;\n \n fn timed(label: &str, f: &fn()) {\n     let start = time::precise_time_s();\n@@ -103,7 +103,7 @@ fn main() {\n     let mut rand = vec::with_capacity(n_keys);\n \n     {\n-        let mut rng = core::rand::IsaacRng::new_seeded([1, 1, 1, 1, 1, 1, 1]);\n+        let mut rng = std::rand::IsaacRng::new_seeded([1, 1, 1, 1, 1, 1, 1]);\n         let mut set = HashSet::new();\n         while set.len() != n_keys {\n             let next = rng.next() as uint;"}, {"sha": "86215e609eea24b5cfc5250a5f7ca2ad19414382", "filename": "src/test/bench/core-set.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fcore-set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fcore-set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-set.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n-use core::hashmap::HashSet;\n-use std::bitv::BitvSet;\n-use std::treemap::TreeSet;\n+extern mod extra;\n+use std::hashmap::HashSet;\n+use extra::bitv::BitvSet;\n+use extra::treemap::TreeSet;\n \n struct Results {\n     sequential_ints: float,\n@@ -24,9 +24,9 @@ struct Results {\n }\n \n fn timed(result: &mut float, op: &fn()) {\n-    let start = std::time::precise_time_s();\n+    let start = extra::time::precise_time_s();\n     op();\n-    let end = std::time::precise_time_s();\n+    let end = extra::time::precise_time_s();\n     *result = (end - start);\n }\n \n@@ -168,21 +168,21 @@ fn main() {\n         let mut results = empty_results();\n         results.bench_int(&mut rng, num_keys, max, || HashSet::new::<uint>());\n         results.bench_str(&mut rng, num_keys, || HashSet::new::<~str>());\n-        write_results(\"core::hashmap::HashSet\", &results);\n+        write_results(\"std::hashmap::HashSet\", &results);\n     }\n \n     {\n         let mut rng = rand::IsaacRng::new_seeded(seed);\n         let mut results = empty_results();\n         results.bench_int(&mut rng, num_keys, max, || TreeSet::new::<uint>());\n         results.bench_str(&mut rng, num_keys, || TreeSet::new::<~str>());\n-        write_results(\"std::treemap::TreeSet\", &results);\n+        write_results(\"extra::treemap::TreeSet\", &results);\n     }\n \n     {\n         let mut rng = rand::IsaacRng::new_seeded(seed);\n         let mut results = empty_results();\n         results.bench_int(&mut rng, num_keys, max, || BitvSet::new());\n-        write_results(\"std::bitv::BitvSet\", &results);\n+        write_results(\"extra::bitv::BitvSet\", &results);\n     }\n }"}, {"sha": "024d4a0289779a544c388b0b5374a2041e121505", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Microbenchmarks for various functions in core and std\n+// Microbenchmarks for various functions in std and extra\n \n-extern mod std;\n+extern mod extra;\n \n-use std::time::precise_time_s;\n-use core::rand::RngUtil;\n-use core::util;\n+use extra::time::precise_time_s;\n+use std::rand::RngUtil;\n+use std::util;\n \n macro_rules! bench (\n     ($id:ident) => (maybe_run_test(argv, stringify!($id).to_owned(), $id))"}, {"sha": "734b5a0006f90846907290198d17a7a2d6bdff52", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -16,14 +16,14 @@ An implementation of the Graph500 Breadth First Search problem in Rust.\n \n */\n \n-extern mod std;\n-use std::arc;\n-use std::time;\n-use std::deque::Deque;\n-use std::par;\n-use core::hashmap::HashSet;\n-use core::int::abs;\n-use core::rand::RngUtil;\n+extern mod extra;\n+use extra::arc;\n+use extra::time;\n+use extra::deque::Deque;\n+use extra::par;\n+use std::hashmap::HashSet;\n+use std::int::abs;\n+use std::rand::RngUtil;\n \n type node_id = i64;\n type graph = ~[~[node_id]];"}, {"sha": "e041f60705758bbbc7eeefcc5d8989c7f0934094", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -18,11 +18,11 @@\n // different scalability characteristics compared to the select\n // version.\n \n-extern mod std;\n-use core::io::Writer;\n-use core::io::WriterUtil;\n+extern mod extra;\n+use std::io::Writer;\n+use std::io::WriterUtil;\n \n-use core::comm::{Port, Chan, SharedChan};\n+use std::comm::{Port, Chan, SharedChan};\n \n macro_rules! move_out (\n     { $x:expr } => { unsafe { let y = *ptr::to_unsafe_ptr(&($x)); y } }\n@@ -61,7 +61,7 @@ fn run(args: &[~str]) {\n     let size = uint::from_str(args[1]).get();\n     let workers = uint::from_str(args[2]).get();\n     let num_bytes = 100;\n-    let start = std::time::precise_time_s();\n+    let start = extra::time::precise_time_s();\n     let mut worker_results = ~[];\n     for uint::range(0, workers) |_i| {\n         let to_child = to_child.clone();\n@@ -87,7 +87,7 @@ fn run(args: &[~str]) {\n     to_child.send(stop);\n     move_out!(to_child);\n     let result = from_child.recv();\n-    let end = std::time::precise_time_s();\n+    let end = extra::time::precise_time_s();\n     let elapsed = end - start;\n     io::stdout().write_str(fmt!(\"Count is %?\\n\", result));\n     io::stdout().write_str(fmt!(\"Test took %? seconds\\n\", elapsed));"}, {"sha": "a854de0a828f7bd14b8e491e532e1e7b83997f06", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -14,11 +14,11 @@\n //\n // I *think* it's the same, more or less.\n \n-extern mod std;\n-use core::io::Writer;\n-use core::io::WriterUtil;\n+extern mod extra;\n+use std::io::Writer;\n+use std::io::WriterUtil;\n \n-use core::comm::{Port, PortSet, Chan, stream};\n+use std::comm::{Port, PortSet, Chan, stream};\n \n macro_rules! move_out (\n     { $x:expr } => { unsafe { let y = *ptr::to_unsafe_ptr(&($x)); y } }\n@@ -57,7 +57,7 @@ fn run(args: &[~str]) {\n     let size = uint::from_str(args[1]).get();\n     let workers = uint::from_str(args[2]).get();\n     let num_bytes = 100;\n-    let start = std::time::precise_time_s();\n+    let start = extra::time::precise_time_s();\n     let mut worker_results = ~[];\n     for uint::range(0, workers) |_i| {\n         let (from_parent_, to_child) = stream();\n@@ -84,7 +84,7 @@ fn run(args: &[~str]) {\n     to_child.send(stop);\n     move_out!(to_child);\n     let result = from_child.recv();\n-    let end = std::time::precise_time_s();\n+    let end = extra::time::precise_time_s();\n     let elapsed = end - start;\n     io::stdout().write_str(fmt!(\"Count is %?\\n\", result));\n     io::stdout().write_str(fmt!(\"Test took %? seconds\\n\", elapsed));"}, {"sha": "ffca59e3e8fd4c27fe328db8afd85ee1fe5d8104", "filename": "src/test/bench/msgsend-ring-mutex-arcs.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -15,11 +15,11 @@\n \n // This also serves as a pipes test, because ARCs are implemented with pipes.\n \n-extern mod std;\n-use std::time;\n-use std::arc;\n-use std::future;\n-use core::cell::Cell;\n+extern mod extra;\n+use extra::time;\n+use extra::arc;\n+use extra::future;\n+use std::cell::Cell;\n \n // A poor man's pipe.\n type pipe = arc::MutexARC<~[uint]>;"}, {"sha": "7b6e94fa10b3e3b38c8d040cb4934d0751aa2dbb", "filename": "src/test/bench/msgsend-ring-pipes.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -16,13 +16,13 @@\n \n // This version uses automatically compiled channel contracts.\n \n-extern mod std;\n+extern mod extra;\n \n-use core::cell::Cell;\n-use core::pipes::recv;\n-use core::util;\n-use std::time;\n-use std::future;\n+use std::cell::Cell;\n+use std::pipes::recv;\n+use std::util;\n+use extra::time;\n+use extra::future;\n \n proto! ring (\n     num:send {"}, {"sha": "78f7c02a40bbda5922d068fb468d65f9ad251539", "filename": "src/test/bench/msgsend-ring-rw-arcs.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -15,12 +15,12 @@\n \n // This also serves as a pipes test, because ARCs are implemented with pipes.\n \n-extern mod std;\n+extern mod extra;\n \n-use core::cell::Cell;\n-use std::time;\n-use std::arc;\n-use std::future;\n+use std::cell::Cell;\n+use extra::time;\n+use extra::arc;\n+use extra::future;\n \n // A poor man's pipe.\n type pipe = arc::RWARC<~[uint]>;"}, {"sha": "cf1eae3d37b07c52e50c3e64cee7389b94f07ff3", "filename": "src/test/bench/noise.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fnoise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fnoise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fnoise.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -1,6 +1,6 @@\n // Perlin noise benchmark from https://gist.github.com/1170424\n \n-use core::rand::{Rng, RngUtil};\n+use std::rand::{Rng, RngUtil};\n \n struct Vec2 {\n     x: f32,"}, {"sha": "970a970feb1598bc6be0b852e3b31423d7e3d718", "filename": "src/test/bench/pingpong.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fpingpong.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fpingpong.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fpingpong.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -12,11 +12,11 @@\n \n // xfail-pretty\n \n-extern mod std;\n+extern mod extra;\n \n-use core::cell::Cell;\n-use core::pipes::*;\n-use std::time::precise_time_s;\n+use std::cell::Cell;\n+use std::pipes::*;\n+use extra::time::precise_time_s;\n \n proto! pingpong (\n     ping: send {\n@@ -117,10 +117,10 @@ pub fn spawn_service_recv<T:Owned,Tb:Owned>(\n     client\n }\n \n-fn switch<T:Owned,Tb:Owned,U>(endp: core::pipes::RecvPacketBuffered<T, Tb>,\n+fn switch<T:Owned,Tb:Owned,U>(endp: std::pipes::RecvPacketBuffered<T, Tb>,\n                               f: &fn(v: Option<T>) -> U)\n                               -> U {\n-    f(core::pipes::try_recv(endp))\n+    f(std::pipes::try_recv(endp))\n }\n \n // Here's the benchmark"}, {"sha": "4a81130567927b0ee674edcc4039cc0da53d2e1c", "filename": "src/test/bench/shootout-ackermann.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fshootout-ackermann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fshootout-ackermann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-ackermann.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n+extern mod extra;\n \n fn ack(m: int, n: int) -> int {\n     if m == 0 {"}, {"sha": "e7aed911cb0a22f8a0bdd08d13222c1ac8a8d2e3", "filename": "src/test/bench/shootout-binarytrees.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -12,8 +12,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n-use std::arena;\n+extern mod extra;\n+use extra::arena;\n \n enum tree<'self> {\n     nil,"}, {"sha": "0ccb9a16adae65cf7c47562a39c25bbd6e338b03", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,10 +10,10 @@\n \n // chameneos\n \n-extern mod std;\n-use std::sort;\n-use core::cell::Cell;\n-use core::comm::*;\n+extern mod extra;\n+use extra::sort;\n+use std::cell::Cell;\n+use std::comm::*;\n \n fn print_complements() {\n     let all = ~[Blue, Red, Yellow];"}, {"sha": "a65bfe228b2d5892535c31a9c8e4d09f5d039ea1", "filename": "src/test/bench/shootout-fannkuch-redux.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -1,6 +1,6 @@\n-use core::from_str::FromStr;\n-use core::i32::range;\n-use core::vec::MutableVector;\n+use std::from_str::FromStr;\n+use std::i32::range;\n+use std::vec::MutableVector;\n \n fn max(a: i32, b: i32) -> i32 {\n     if a > b {"}, {"sha": "840f6fdb17bdc52d2e149d8209f8d91247e8eee0", "filename": "src/test/bench/shootout-fasta-redux.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -1,8 +1,8 @@\n-use core::cast::transmute;\n-use core::from_str::FromStr;\n-use core::libc::{FILE, STDOUT_FILENO, c_int, fdopen, fputc, fputs, fwrite, size_t};\n-use core::uint::{min, range};\n-use core::vec::bytes::copy_memory;\n+use std::cast::transmute;\n+use std::from_str::FromStr;\n+use std::libc::{FILE, STDOUT_FILENO, c_int, fdopen, fputc, fputs, fwrite, size_t};\n+use std::uint::{min, range};\n+use std::vec::bytes::copy_memory;\n \n static LINE_LEN: uint = 60;\n static LOOKUP_SIZE: uint = 4 * 1024;"}, {"sha": "f3de8bf01e9a22fb8c0a91956fee57a406605d9f", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -15,8 +15,8 @@\n  * Computer Language Benchmarks Game\n  * http://shootout.alioth.debian.org/\n  */\n-extern mod std;\n-use core::rand::Rng;\n+extern mod extra;\n+use std::rand::Rng;\n \n fn LINE_LENGTH() -> uint { return 60u; }\n "}, {"sha": "cfb8e0fe7c9eb042e576f601d324623ebb85f076", "filename": "src/test/bench/shootout-fibo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fshootout-fibo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fshootout-fibo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fibo.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n+extern mod extra;\n \n fn fib(n: int) -> int {\n     if n < 2 {"}, {"sha": "e0ffd3e4133d9d0288ec0e820b4e604b9ffe598a", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -11,13 +11,13 @@\n // xfail-pretty (extra blank line is inserted in vec::mapi call)\n // multi tasking k-nucleotide\n \n-extern mod std;\n-use std::sort;\n-use core::hashmap::HashMap;\n-use core::io::ReaderUtil;\n-use core::comm::{stream, Port, Chan};\n-use core::cmp::Ord;\n-use core::util;\n+extern mod extra;\n+use extra::sort;\n+use std::hashmap::HashMap;\n+use std::io::ReaderUtil;\n+use std::comm::{stream, Port, Chan};\n+use std::cmp::Ord;\n+use std::util;\n \n // given a map, print a sorted version of it\n fn sort_and_fmt(mm: &HashMap<~[u8], uint>, total: uint) -> ~str {"}, {"sha": "a70e07300730677e343ec2eb7a62e3cdc42d223a", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -1,15 +1,15 @@\n // xfail-test\n \n-extern mod std;\n-\n-use core::cast::transmute;\n-use core::i32::range;\n-use core::libc::{STDIN_FILENO, c_int, fdopen, fgets, fileno, fopen, fstat};\n-use core::libc::{stat, strlen};\n-use core::ptr::null;\n-use core::unstable::intrinsics::init;\n-use core::vec::{reverse, slice};\n-use std::sort::quick_sort3;\n+extern mod extra;\n+\n+use std::cast::transmute;\n+use std::i32::range;\n+use std::libc::{STDIN_FILENO, c_int, fdopen, fgets, fileno, fopen, fstat};\n+use std::libc::{stat, strlen};\n+use std::ptr::null;\n+use std::unstable::intrinsics::init;\n+use std::vec::{reverse, slice};\n+use extra::sort::quick_sort3;\n \n static LINE_LEN: uint = 80;\n static TABLE: [u8, ..4] = [ 'A' as u8, 'C' as u8, 'G' as u8, 'T' as u8 ];"}, {"sha": "d4c3862fd7ea07f879dc621f82b86b23ee369fdd", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -1,7 +1,7 @@\n-use core::cast::transmute;\n-use core::from_str::FromStr;\n-use core::i32::range;\n-use core::libc::{STDOUT_FILENO, c_int, fdopen, fputc};\n+use std::cast::transmute;\n+use std::from_str::FromStr;\n+use std::i32::range;\n+use std::libc::{STDOUT_FILENO, c_int, fdopen, fputc};\n \n static ITER: uint = 50;\n static LIMIT: f64 = 2.0;"}, {"sha": "a226d50dc27ae0ea226cfdffbb80cdad0cd57ce7", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -1,5 +1,5 @@\n-use core::from_str::FromStr;\n-use core::uint::range;\n+use std::from_str::FromStr;\n+use std::uint::range;\n \n static PI: f64 = 3.141592653589793;\n static SOLAR_MASS: f64 = 4.0 * PI * PI;"}, {"sha": "e201438a6ef76d64132233a384c10027d0a3fc6e", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -19,14 +19,14 @@\n \n */\n \n-extern mod std;\n+extern mod extra;\n \n-use std::{time, getopts};\n-use core::int::range;\n-use core::comm::*;\n-use core::io::WriterUtil;\n+use extra::{time, getopts};\n+use std::int::range;\n+use std::comm::*;\n+use std::io::WriterUtil;\n \n-use core::result::{Ok, Err};\n+use std::result::{Ok, Err};\n \n fn fib(n: int) -> int {\n     fn pfib(c: &Chan<int>, n: int) {"}, {"sha": "e84a4ea4327aa9c77c87c45e5e29f7458b342d58", "filename": "src/test/bench/shootout-pidigits.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fshootout-pidigits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fshootout-pidigits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pidigits.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -1,10 +1,10 @@\n // xfail-test\n \n-use core::cast::transmute;\n-use core::from_str::FromStr;\n-use core::libc::{STDOUT_FILENO, c_char, c_int, c_uint, c_void, fdopen, fputc};\n-use core::libc::{fputs};\n-use core::ptr::null;\n+use std::cast::transmute;\n+use std::from_str::FromStr;\n+use std::libc::{STDOUT_FILENO, c_char, c_int, c_uint, c_void, fdopen, fputc};\n+use std::libc::{fputs};\n+use std::ptr::null;\n \n struct mpz_t {\n     _mp_alloc: c_int,"}, {"sha": "9893785ecfa2266e52b5a06cfb30fd3745ba769a", "filename": "src/test/bench/shootout-reverse-complement.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -1,12 +1,12 @@\n // xfail-pretty\n // xfail-test\n \n-use core::cast::transmute;\n-use core::libc::{STDOUT_FILENO, c_int, fdopen, fgets, fopen, fputc, fwrite};\n-use core::libc::{size_t};\n-use core::ptr::null;\n-use core::vec::{capacity, reserve, reserve_at_least};\n-use core::vec::raw::set_len;\n+use std::cast::transmute;\n+use std::libc::{STDOUT_FILENO, c_int, fdopen, fgets, fopen, fputc, fwrite};\n+use std::libc::{size_t};\n+use std::ptr::null;\n+use std::vec::{capacity, reserve, reserve_at_least};\n+use std::vec::raw::set_len;\n \n static LINE_LEN: u32 = 80;\n "}, {"sha": "a3beee7c90df7b4353fa1817bdcd18cd72c82e81", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -1,5 +1,5 @@\n-use core::from_str::FromStr;\n-use core::iter::ExtendedMutableIter;\n+use std::from_str::FromStr;\n+use std::iter::ExtendedMutableIter;\n \n #[inline]\n fn A(i: i32, j: i32) -> i32 {"}, {"sha": "f1cd05e1d9e92a298891fa524680690c4ad09e62", "filename": "src/test/bench/std-smallintmap.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fstd-smallintmap.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,9 +10,9 @@\n \n // Microbenchmark for the smallintmap library\n \n-extern mod std;\n-use std::smallintmap::SmallIntMap;\n-use core::io::WriterUtil;\n+extern mod extra;\n+use extra::smallintmap::SmallIntMap;\n+use std::io::WriterUtil;\n \n fn append_sequential(min: uint, max: uint, map: &mut SmallIntMap<uint>) {\n     for uint::range(min, max) |i| {\n@@ -43,11 +43,11 @@ fn main() {\n \n     for uint::range(0u, rep) |_r| {\n         let mut map = SmallIntMap::new();\n-        let start = std::time::precise_time_s();\n+        let start = extra::time::precise_time_s();\n         append_sequential(0u, max, &mut map);\n-        let mid = std::time::precise_time_s();\n+        let mid = extra::time::precise_time_s();\n         check_sequential(0u, max, &map);\n-        let end = std::time::precise_time_s();\n+        let end = extra::time::precise_time_s();\n \n         checkf += (end - mid) as float;\n         appendf += (mid - start) as float;"}, {"sha": "e3f02684bb06c7aa7a0801cc55255b3a44cf0e7e", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,11 +10,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n+extern mod extra;\n \n-use core::io::{ReaderUtil, WriterUtil};\n-use core::io;\n-use core::unstable::intrinsics::cttz16;\n+use std::io::{ReaderUtil, WriterUtil};\n+use std::io;\n+use std::unstable::intrinsics::cttz16;\n \n // Computes a single solution to a given 9x9 sudoku\n //"}, {"sha": "a6d94c753548d795118dd2e3ed2893b53f070d09", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,10 +10,10 @@\n \n // xfail-win32\n \n-extern mod std;\n+extern mod extra;\n \n-use std::list::{List, Cons, Nil};\n-use std::time::precise_time_s;\n+use extra::list::{List, Cons, Nil};\n+use extra::time::precise_time_s;\n \n enum UniqueList {\n     ULNil, ULCons(~UniqueList)"}, {"sha": "4600cf46892fe46a7450337bdde0ef3d31199601", "filename": "src/test/bench/task-perf-jargon-metal-smoke.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -17,7 +17,7 @@\n //\n // The filename is a song reference; google it in quotes.\n \n-use core::cell::Cell;\n+use std::cell::Cell;\n \n fn child_generation(gens_left: uint, c: comm::Chan<()>) {\n     // This used to be O(n^2) in the number of generations that ever existed."}, {"sha": "b8cba98c6fb0b6df8ee29f9a477242016f2aef51", "filename": "src/test/bench/task-perf-linked-failure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -22,7 +22,7 @@\n // Creates in the background 'num_tasks' tasks, all blocked forever.\n // Doesn't return until all such tasks are ready, but doesn't block forever itself.\n \n-use core::comm::*;\n+use std::comm::*;\n \n fn grandchild_group(num_tasks: uint) {\n     let (po, ch) = stream();"}, {"sha": "56e981b735d0d3880857625c9f85428faeac6a8f", "filename": "src/test/bench/task-perf-one-million.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,7 +10,7 @@\n \n // Test for concurrent tasks\n \n-use core::comm::*;\n+use std::comm::*;\n \n fn calc(children: uint, parent_wait_chan: &Chan<Chan<Chan<int>>>) {\n "}, {"sha": "3dafb076afefb2960ebd8570fb22f5ca202949f2", "filename": "src/test/compile-fail/arc-cant-nest-rw-arc-3177.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Farc-cant-nest-rw-arc-3177.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Farc-cant-nest-rw-arc-3177.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farc-cant-nest-rw-arc-3177.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,8 +10,8 @@\n \n // xfail-test\n // error-pattern: instantiating a type parameter with an incompatible type\n-extern mod std;\n-use std::arc::rw_arc;\n+extern mod extra;\n+use extra::arc::rw_arc;\n \n fn main() {\n     let arc1  = ~rw_arc(true);"}, {"sha": "82868647e57da0657b0d6541f43c6bf17f538577", "filename": "src/test/compile-fail/arc-rw-cond-shouldnt-escape.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Farc-rw-cond-shouldnt-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Farc-rw-cond-shouldnt-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farc-rw-cond-shouldnt-escape.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n // error-pattern: reference is not valid outside of its lifetime\n-extern mod std;\n-use std::arc;\n+extern mod extra;\n+use extra::arc;\n fn main() {\n     let x = ~arc::RWARC(1);\n     let mut y = None;"}, {"sha": "6d4b774fd5f6010dda83326b4140d4d478ea4585", "filename": "src/test/compile-fail/arc-rw-read-mode-shouldnt-escape.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Farc-rw-read-mode-shouldnt-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Farc-rw-read-mode-shouldnt-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farc-rw-read-mode-shouldnt-escape.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n-use std::arc;\n+extern mod extra;\n+use extra::arc;\n fn main() {\n     let x = ~arc::RWARC(1);\n     let mut y = None;"}, {"sha": "6bd32866f8989eba1d1f3a52ef1e1fd046120e9e", "filename": "src/test/compile-fail/arc-rw-state-shouldnt-escape.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Farc-rw-state-shouldnt-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Farc-rw-state-shouldnt-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farc-rw-state-shouldnt-escape.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n // error-pattern: reference is not valid outside of its lifetime\n-extern mod std;\n-use std::arc;\n+extern mod extra;\n+use extra::arc;\n fn main() {\n     let x = ~arc::RWARC(1);\n     let mut y = None;"}, {"sha": "534475319033f496760997203785db96a9aa3724", "filename": "src/test/compile-fail/arc-rw-write-mode-cond-shouldnt-escape.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Farc-rw-write-mode-cond-shouldnt-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Farc-rw-write-mode-cond-shouldnt-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farc-rw-write-mode-cond-shouldnt-escape.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n // error-pattern: reference is not valid outside of its lifetime\n-extern mod std;\n-use std::arc;\n+extern mod extra;\n+use extra::arc;\n fn main() {\n     let x = ~arc::RWARC(1);\n     let mut y = None;"}, {"sha": "decb7b8af9f3ad2d88116db43a2fbc3972c1701c", "filename": "src/test/compile-fail/arc-rw-write-mode-shouldnt-escape.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Farc-rw-write-mode-shouldnt-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Farc-rw-write-mode-shouldnt-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farc-rw-write-mode-shouldnt-escape.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n // error-pattern: reference is not valid outside of its lifetime\n-extern mod std;\n-use std::arc;\n+extern mod extra;\n+use extra::arc;\n fn main() {\n     let x = ~arc::RWARC(1);\n     let mut y = None;"}, {"sha": "bd87a57af2570fb7b9ba71177c72499672e03f1a", "filename": "src/test/compile-fail/borrowck-borrowed-uniq-rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,7 +10,7 @@\n \n //buggy.rs\n \n-use core::hashmap::HashMap;\n+use std::hashmap::HashMap;\n \n fn main() {\n     let mut buggy_map :HashMap<uint, &uint> ="}, {"sha": "c9bd75039693f564bed044d22d1e8ea76a526699", "filename": "src/test/compile-fail/borrowck-insert-during-each.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fborrowck-insert-during-each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fborrowck-insert-during-each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-insert-during-each.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::hashmap::HashSet;\n+use std::hashmap::HashSet;\n \n struct Foo {\n   n: HashSet<int>,"}, {"sha": "9ea4fe8aef416af66fb42e0595a2931262b8529e", "filename": "src/test/compile-fail/borrowck-loan-local-as-both-mut-and-imm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-local-as-both-mut-and-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-local-as-both-mut-and-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-local-as-both-mut-and-imm.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::either::{Either, Left, Right};\n+use std::either::{Either, Left, Right};\n \n     fn f(x: &mut Either<int,float>, y: &Either<int,float>) -> int {\n         match *y {"}, {"sha": "4e977442e15869bf2f754c48015bfbabc03d9426", "filename": "src/test/compile-fail/borrowck-move-by-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fborrowck-move-by-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fborrowck-move-by-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-by-capture.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -1,4 +1,4 @@\n-extern mod std;\n+extern mod extra;\n \n fn main() {\n     let foo = ~3;"}, {"sha": "db8127d0854d2587052dd515dd7ef0b2cb5735bc", "filename": "src/test/compile-fail/borrowck-vec-pattern-move-tail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-move-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-move-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-move-tail.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -2,7 +2,7 @@ fn main() {\n     let mut a = [1, 2, 3, 4];\n     let t = match a {\n         [1, 2, ..tail] => tail,\n-        _ => core::util::unreachable()\n+        _ => std::util::unreachable()\n     };\n     a[0] = 0; //~ ERROR cannot assign to `a[]` because it is borrowed\n     t[0];"}, {"sha": "63bbaf80177e1b515dbb5134e5a8175997648566", "filename": "src/test/compile-fail/core-tls-store-pointer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fcore-tls-store-pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fcore-tls-store-pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcore-tls-store-pointer.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,7 +10,7 @@\n \n // Testing that we can't store a borrowed pointer it task-local storage\n \n-use core::local_data::*;\n+use std::local_data::*;\n \n fn key(_x: @&int) { }\n "}, {"sha": "f18ae748ee07f9653f9cc855d10b6f14fd610b88", "filename": "src/test/compile-fail/extfmt-not-enough-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fextfmt-not-enough-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fextfmt-not-enough-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextfmt-not-enough-args.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,6 +10,6 @@\n \n // error-pattern:not enough arguments\n \n-extern mod std;\n+extern mod extra;\n \n fn main() { let s = fmt!(\"%s%s%s\", \"test\", \"test\"); }"}, {"sha": "2a72dcf89889e191ece31392663b1688e19e72de", "filename": "src/test/compile-fail/extfmt-too-many-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fextfmt-too-many-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fextfmt-too-many-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextfmt-too-many-args.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,6 +10,6 @@\n \n // error-pattern:too many arguments\n \n-extern mod std;\n+extern mod extra;\n \n fn main() { let s = fmt!(\"%s\", \"test\", \"test\"); }"}, {"sha": "98270bdc583835e63d9b274d6dd1e3996cdac965", "filename": "src/test/compile-fail/fail-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Ffail-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Ffail-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffail-expr.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:failed to find an implementation of trait core::sys::FailWithCause for int\n+// error-pattern:failed to find an implementation of trait std::sys::FailWithCause for int\n \n fn main() { fail!(5); }"}, {"sha": "b6755249bcf98108dce766569262e59a522784ff", "filename": "src/test/compile-fail/fail-type-err.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Ffail-type-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Ffail-type-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffail-type-err.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,5 +8,5 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:failed to find an implementation of trait core::sys::FailWithCause for ~[int]\n+// error-pattern:failed to find an implementation of trait std::sys::FailWithCause for ~[int]\n fn main() { fail!(~[0i]); }"}, {"sha": "25ab28b5fc067f7db08754274a675515d093f8b8", "filename": "src/test/compile-fail/forget-init-unsafe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fforget-init-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fforget-init-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fforget-init-unsafe.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::unstable::intrinsics::{init, forget};\n+use std::unstable::intrinsics::{init, forget};\n \n // Test that the `forget` and `init` intrinsics are really unsafe\n pub fn main() {"}, {"sha": "dd9833ad41fb1dd3e1036582d87d5ba53349180e", "filename": "src/test/compile-fail/fully-qualified-type-name1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name1.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -13,5 +13,5 @@\n fn main() {\n     let x: Option<uint>;\n     x = 5;\n-    //~^ ERROR mismatched types: expected `core::option::Option<uint>`\n+    //~^ ERROR mismatched types: expected `std::option::Option<uint>`\n }"}, {"sha": "f49eb5ee85aa8722a18b6b679791a476d14b93eb", "filename": "src/test/compile-fail/fully-qualified-type-name4.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name4.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,11 +10,11 @@\n \n // Test that we use fully-qualified type names in error messages.\n \n-use core::task::Task;\n+use std::task::Task;\n \n fn bar(x: uint) -> Task {\n     return x;\n-    //~^ ERROR mismatched types: expected `core::task::Task`\n+    //~^ ERROR mismatched types: expected `std::task::Task`\n }\n \n fn main() {"}, {"sha": "41527027c744b0898ff08e2548031fd23db0efac", "filename": "src/test/compile-fail/issue-2766-a.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fissue-2766-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fissue-2766-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2766-a.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -11,8 +11,8 @@\n pub mod stream {\n     pub enum Stream<T:Owned> { send(T, ::stream::server::Stream<T>), }\n     pub mod server {\n-        use core::option;\n-        use core::pipes;\n+        use std::option;\n+        use std::pipes;\n \n         pub impl<T:Owned> Stream<T> {\n             pub fn recv() -> extern fn(v: Stream<T>) -> ::stream::Stream<T> {"}, {"sha": "f9f1a27e11b2c3e26a57e40755eed4e08d55f9b2", "filename": "src/test/compile-fail/issue-3021-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fissue-3021-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fissue-3021-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021-b.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n+extern mod extra;\n \n fn siphash(k0 : u64) {\n "}, {"sha": "a0b78a4bc79b17699f4d0c6a085b19d6af09112a", "filename": "src/test/compile-fail/issue-3021-c.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fissue-3021-c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fissue-3021-c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021-c.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n+extern mod extra;\n \n fn siphash<T>() {\n "}, {"sha": "fd08d556befcfafab8f77ab925e27dc0142a7891", "filename": "src/test/compile-fail/issue-3021-d.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fissue-3021-d.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fissue-3021-d.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021-d.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n+extern mod extra;\n \n trait siphash {\n     fn result(&self) -> u64;"}, {"sha": "0ca6173275cb2346de11f7a776985a993a84fd71", "filename": "src/test/compile-fail/issue-3021.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fissue-3021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fissue-3021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n+extern mod extra;\n \n trait SipHash {\n     fn reset(&self);"}, {"sha": "ba0ad02f91ccc9e2e47d808973f81da725fd1cbf", "filename": "src/test/compile-fail/issue-3296.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fissue-3296.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fissue-3296.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3296.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,17 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std;\n+use extra;\n \n-struct Deserializer : std::serialization::deserializer{ //~ ERROR obsolete syntax: class traits\n+struct Deserializer : extra::serialization::deserializer{ //~ ERROR obsolete syntax: class traits\n     x: ()\n }\n \n struct Foo {\n     a: ()\n }\n \n-fn deserialize_foo<__D: std::serialization::deserializer>(__d: __D) {\n+fn deserialize_foo<__D: extra::serialization::deserializer>(__d: __D) {\n }\n \n fn main() { let des = Deserializer(); let foo = deserialize_foo(des); }"}, {"sha": "b453384c0c890a577f9f9a4557709465371cef1a", "filename": "src/test/compile-fail/issue-3680.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fissue-3680.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fissue-3680.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3680.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,6 +10,6 @@\n \n fn main() {\n     match None {\n-        Err(_) => () //~ ERROR mismatched types: expected `core::option::Option<<V1>>` but found `core::result::Result<<V2>,<V3>>`\n+        Err(_) => () //~ ERROR mismatched types: expected `std::option::Option<<V1>>` but found `std::result::Result<<V2>,<V3>>`\n     }\n }"}, {"sha": "fc8e456f56b42ee5e5acad65c420d78b7e9d3dfc", "filename": "src/test/compile-fail/issue-3953.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fissue-3953.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fissue-3953.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3953.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::cmp::Eq;\n+use std::cmp::Eq;\n \n trait Hahaha: Eq + Eq + Eq + Eq + Eq + //~ ERROR Duplicate supertrait\n               Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq +"}, {"sha": "a053424b30d51be6ac811c29e3957ffec768495d", "filename": "src/test/compile-fail/issue-511.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fissue-511.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fissue-511.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-511.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n-use core::cmp::Eq;\n+extern mod extra;\n+use std::cmp::Eq;\n \n fn f<T:Eq>(o: &mut Option<T>) {\n     assert!(*o == option::None);"}, {"sha": "a3d25e7d2adcaf3b8821881fa4d196b0f890d14f", "filename": "src/test/compile-fail/issue-5358-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fissue-5358-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fissue-5358-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5358-1.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -12,7 +12,7 @@ struct S(Either<uint, uint>);\n \n fn main() {\n     match S(Left(5)) {\n-        Right(_) => {}  //~ ERROR mismatched types: expected `S` but found `core::either::Either\n+        Right(_) => {}  //~ ERROR mismatched types: expected `S` but found `std::either::Either\n         _ => {}\n     }\n }"}, {"sha": "8d4f463346693913751c03f02d85126885a66cba", "filename": "src/test/compile-fail/issue-5358.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fissue-5358.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fissue-5358.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5358.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -12,6 +12,6 @@ struct S(Either<uint, uint>);\n \n fn main() {\n     match *S(Left(5)) {\n-      S(_) => {}  //~ ERROR mismatched types: expected `core::either::Either<uint,uint>` but found a structure pattern\n+      S(_) => {}  //~ ERROR mismatched types: expected `std::either::Either<uint,uint>` but found a structure pattern\n     }\n }"}, {"sha": "201b2e9b989530e44b7cf5f333f3f4adcf503858", "filename": "src/test/compile-fail/lint-unused-imports.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -12,23 +12,23 @@\n \n use cal = bar::c::cc;\n \n-use core::either::Right;        //~ ERROR unused import\n+use std::either::Right;        //~ ERROR unused import\n \n-use core::util::*;              // shouldn't get errors for not using\n+use std::util::*;              // shouldn't get errors for not using\n                                 // everything imported\n \n // Should get errors for both 'Some' and 'None'\n-use core::option::{Some, None}; //~ ERROR unused import\n+use std::option::{Some, None}; //~ ERROR unused import\n                                 //~^ ERROR unused import\n \n-use core::io::ReaderUtil;       //~ ERROR unused import\n+use std::io::ReaderUtil;       //~ ERROR unused import\n // Be sure that if we just bring some methods into scope that they're also\n // counted as being used.\n-use core::io::WriterUtil;\n+use std::io::WriterUtil;\n \n // Make sure this import is warned about when at least one of its imported names\n // is unused\n-use core::vec::{filter, map};   //~ ERROR unused import\n+use std::vec::{filter, map};   //~ ERROR unused import\n \n mod foo {\n     pub struct Point{x: int, y: int}\n@@ -37,7 +37,7 @@ mod foo {\n \n mod bar {\n     // Don't ignore on 'pub use' because we're not sure if it's used or not\n-    pub use core::cmp::Eq;\n+    pub use std::cmp::Eq;\n \n     pub mod c {\n         use foo::Point;\n@@ -47,7 +47,7 @@ mod bar {\n \n     #[allow(unused_imports)]\n     mod foo {\n-        use core::cmp::Eq;\n+        use std::cmp::Eq;\n     }\n }\n "}, {"sha": "f5d6e95fe2f4d15d8f1c474f95e284121dad53ee", "filename": "src/test/compile-fail/map-types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmap-types.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,14 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::container::Map;\n-use core::hashmap::HashMap;\n+use std::container::Map;\n+use std::hashmap::HashMap;\n \n // Test that trait types printed in error msgs include the type arguments.\n \n fn main() {\n     let x: @Map<~str, ~str> = @HashMap::new::<~str, ~str>() as\n         @Map<~str, ~str>;\n     let y: @Map<uint, ~str> = @x;\n-    //~^ ERROR mismatched types: expected `@core::container::Map<uint,~str>`\n+    //~^ ERROR mismatched types: expected `@std::container::Map<uint,~str>`\n }"}, {"sha": "7c01ddb6c93319af69e1b6f1e4b0e14863dd8a18", "filename": "src/test/compile-fail/moves-based-on-type-cyclic-types-issue-4821.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-cyclic-types-issue-4821.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-cyclic-types-issue-4821.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-cyclic-types-issue-4821.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -12,7 +12,7 @@\n // temporary kinds wound up being stored in a cache and used later.\n // See middle::ty::type_contents() for more information.\n \n-extern mod std;\n+extern mod extra;\n \n struct List { key: int, next: Option<~List> }\n "}, {"sha": "4460da72e205993ac9e03025a6a9e126502079a0", "filename": "src/test/compile-fail/mutable-huh-ptr-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fmutable-huh-ptr-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fmutable-huh-ptr-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-ptr-assign.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n+extern mod extra;\n \n fn main() {\n     unsafe fn f(v: *const int) {"}, {"sha": "68f5d921d023902a79f0ee47c28fe6dc9e508983", "filename": "src/test/compile-fail/name-clash-nullary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fname-clash-nullary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fname-clash-nullary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fname-clash-nullary.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // error-pattern:declaration of `None` shadows\n-use core::option::*;\n+use std::option::*;\n \n fn main() {\n   let None: int = 42;"}, {"sha": "132a5326a88461463ddf1d0d646972f7b2d54b8b", "filename": "src/test/compile-fail/no-capture-arc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,8 +10,8 @@\n \n // error-pattern: use of moved value\n \n-extern mod std;\n-use std::arc;\n+extern mod extra;\n+use extra::arc;\n \n fn main() {\n     let v = ~[1, 2, 3, 4, 5, 6, 7, 8, 9, 10];"}, {"sha": "8bed4e6da47d6559a93be8c7e71ad04929e70e71", "filename": "src/test/compile-fail/no-reuse-move-arc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n-use std::arc;\n+extern mod extra;\n+use extra::arc;\n \n fn main() {\n     let v = ~[1, 2, 3, 4, 5, 6, 7, 8, 9, 10];"}, {"sha": "951103bfbe36948f458f5f18ca6a4284eaa791ec", "filename": "src/test/compile-fail/no-send-res-ports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::cell::Cell;\n+use std::cell::Cell;\n \n struct Port<T>(@T);\n "}, {"sha": "3add0134d002ab24a3c1fdd5e79221a8e17c0d2b", "filename": "src/test/compile-fail/noexporttypeexe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fnoexporttypeexe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fnoexporttypeexe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnoexporttypeexe.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -18,5 +18,5 @@ fn main() {\n     // because the def_id associated with the type was\n     // not convertible to a path.\n   let x: int = noexporttypelib::foo();\n-    //~^ ERROR expected `int` but found `core::option::Option<int>`\n+    //~^ ERROR expected `int` but found `std::option::Option<int>`\n }"}, {"sha": "537d095d2d7a3d0a02b9e242a80e4e44be501e94", "filename": "src/test/compile-fail/pattern-tyvar-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar-2.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,7 +10,7 @@\n // except according to those terms.\n \n \n-extern mod std;\n+extern mod extra;\n \n enum bar { t1((), Option<~[int]>), t2, }\n "}, {"sha": "4ca0aac35ee6649358776d5344e2c94a5c39cd78", "filename": "src/test/compile-fail/pattern-tyvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -9,7 +9,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n+extern mod extra;\n \n // error-pattern: mismatched types\n "}, {"sha": "156d09cedff6c86620963317a3262362cc72fc05", "filename": "src/test/compile-fail/qquote-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fqquote-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fqquote-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fqquote-1.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-test Can't use syntax crate here\n \n-extern mod std;\n+extern mod extra;\n extern mod syntax;\n \n use io::*;"}, {"sha": "2a593c51759c087fa48ce3ea16c084fec9837af8", "filename": "src/test/compile-fail/qquote-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fqquote-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fqquote-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fqquote-2.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,10 +10,10 @@\n \n // xfail-test Can't use syntax crate here\n \n-extern mod std;\n+extern mod extra;\n extern mod syntax;\n \n-use std::io::*;\n+use extra::io::*;\n \n use syntax::diagnostic;\n use syntax::ast;"}, {"sha": "dc3d414e91b4d49f5b2bc9e470ef322741f30ac1", "filename": "src/test/compile-fail/regions-glb-free-free.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n mod argparse {\n-    extern mod std;\n+    extern mod extra;\n \n     pub struct Flag<'self> {\n         name: &'self str,"}, {"sha": "a6ab41a3d6b7446b1644b9fe14f8fcb1809b3aa9", "filename": "src/test/compile-fail/seq-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fseq-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fseq-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fseq-args.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n+extern mod extra;\n fn main() {\n trait seq { }\n "}, {"sha": "9dbef3692574b46842b3c0d247b99fa972c4d653", "filename": "src/test/compile-fail/spawn-non-nil-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fspawn-non-nil-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fspawn-non-nil-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspawn-non-nil-fn.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,6 +10,6 @@\n \n // error-pattern: mismatched types\n \n-extern mod std;\n+extern mod extra;\n \n fn main() { task::spawn(|| -> int { 10 }); }"}, {"sha": "b22d4d3b2e2e3a472d7115f43f0790ef5523111e", "filename": "src/test/compile-fail/sync-cond-shouldnt-escape.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fsync-cond-shouldnt-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fsync-cond-shouldnt-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsync-cond-shouldnt-escape.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n // error-pattern: reference is not valid outside of its lifetime\n-extern mod std;\n-use std::sync;\n+extern mod extra;\n+use extra::sync;\n \n fn main() {\n     let m = ~sync::Mutex();"}, {"sha": "518e67800d763563b9d3c8c8d5e8ab2dc1dbc8a9", "filename": "src/test/compile-fail/sync-rwlock-cond-shouldnt-escape.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-cond-shouldnt-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-cond-shouldnt-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-cond-shouldnt-escape.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n // error-pattern: reference is not valid outside of its lifetime\n-extern mod std;\n-use std::sync;\n+extern mod extra;\n+use extra::sync;\n fn main() {\n     let x = ~sync::RWlock();\n     let mut y = None;"}, {"sha": "4bec5fa270ab89fb78edebb2c31b94764389906b", "filename": "src/test/compile-fail/sync-rwlock-read-mode-shouldnt-escape.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-read-mode-shouldnt-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-read-mode-shouldnt-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-read-mode-shouldnt-escape.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n // error-pattern: cannot infer an appropriate lifetime\n-extern mod std;\n-use std::sync;\n+extern mod extra;\n+use extra::sync;\n fn main() {\n     let x = ~sync::RWlock();\n     let mut y = None;"}, {"sha": "09b83887bcfd14c8bca77533e1f18d5d957dc052", "filename": "src/test/compile-fail/sync-rwlock-write-mode-cond-shouldnt-escape.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-write-mode-cond-shouldnt-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-write-mode-cond-shouldnt-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-write-mode-cond-shouldnt-escape.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n // error-pattern: reference is not valid outside of its lifetime\n-extern mod std;\n-use std::sync;\n+extern mod extra;\n+use extra::sync;\n fn main() {\n     let x = ~sync::RWlock();\n     let mut y = None;"}, {"sha": "679c4a72598ea9ae5462aff7cf5efce062cef396", "filename": "src/test/compile-fail/sync-rwlock-write-mode-shouldnt-escape.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-write-mode-shouldnt-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-write-mode-shouldnt-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-write-mode-shouldnt-escape.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n // error-pattern: reference is not valid outside of its lifetime\n-extern mod std;\n-use std::sync;\n+extern mod extra;\n+use extra::sync;\n fn main() {\n     let x = ~sync::RWlock();\n     let mut y = None;"}, {"sha": "ebd3320d901269871fee00554297ba856e05e229", "filename": "src/test/compile-fail/tag-that-dare-not-speak-its-name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Ftag-that-dare-not-speak-its-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Ftag-that-dare-not-speak-its-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftag-that-dare-not-speak-its-name.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -13,9 +13,9 @@\n \n #[no_std];\n \n-extern mod core;\n+extern mod std;\n \n-fn last<T>(v: ~[&T]) -> core::option::Option<T> {\n+fn last<T>(v: ~[&T]) -> std::option::Option<T> {\n     fail!();\n }\n "}, {"sha": "dd57382afbbb7ccefd74dddbd998666165bfc58c", "filename": "src/test/compile-fail/use-meta-dup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fuse-meta-dup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fuse-meta-dup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-meta-dup.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,6 +10,6 @@\n \n // error-pattern:duplicate meta item `name`\n \n-extern mod std(name = \"std\", name = \"nonstd\");\n+extern mod extra(name = \"extra\", name = \"nonstd\");\n \n fn main() { }"}, {"sha": "118fce8a891b635d5268f21d193160a22d89b8d0", "filename": "src/test/compile-fail/use-meta-mismatch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fuse-meta-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fuse-meta-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-meta-mismatch.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:can't find crate for `std`\n+// error-pattern:can't find crate for `extra`\n \n-extern mod std(complex(meta(item)));\n+extern mod extra(complex(meta(item)));\n \n fn main() { }"}, {"sha": "fa03e0d5199fce57f5cdc36d076416daf1c3f254", "filename": "src/test/compile-fail/view-items-at-top.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fview-items-at-top.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Fcompile-fail%2Fview-items-at-top.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fview-items-at-top.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,12 +10,12 @@\n \n // xfail-test\n \n-extern mod std;\n+extern mod extra;\n \n fn f() {\n }\n \n-use std::net;    //~ ERROR view items must be declared at the top\n+use extra::net;    //~ ERROR view items must be declared at the top\n \n fn main() {\n }"}, {"sha": "15cc8a488673a9213a78603bacc9064ea31c05e0", "filename": "src/test/run-fail/extern-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-fail%2Fextern-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-fail%2Fextern-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fextern-fail.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -12,7 +12,7 @@\n // Testing that runtime failure doesn't cause callbacks to abort abnormally.\n // Instead the failure will be delivered after the callbacks return.\n \n-use core::old_iter;\n+use std::old_iter;\n \n mod rustrt {\n     pub extern {"}, {"sha": "f007e03041c14909b7780269f2a3975cf45d2189", "filename": "src/test/run-fail/fail-main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-fail%2Ffail-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-fail%2Ffail-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffail-main.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n // error-pattern:moop\n-extern mod std;\n+extern mod extra;\n fn main() { fail!(\"moop\"); }"}, {"sha": "d34ca029023f32a1326ca90e17bd3c15c1bf46b0", "filename": "src/test/run-fail/fmt-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-fail%2Ffmt-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-fail%2Ffmt-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffmt-fail.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n // error-pattern:meh\n-extern mod std;\n+extern mod extra;\n \n fn main() { let str_var: ~str = ~\"meh\"; fail!(fmt!(\"%s\", str_var)); }"}, {"sha": "06422244af95841571f6c265ecb86fbe7d6d4537", "filename": "src/test/run-fail/for-each-loop-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-fail%2Ffor-each-loop-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-fail%2Ffor-each-loop-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffor-each-loop-fail.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n // error-pattern:moop\n-extern mod std;\n+extern mod extra;\n fn main() { for uint::range(0u, 10u) |_i| { fail!(\"moop\"); } }"}, {"sha": "de0b903b53c02dbd5148da8da48ca216a11a0c46", "filename": "src/test/run-fail/issue-2156.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-fail%2Fissue-2156.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-fail%2Fissue-2156.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-2156.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,8 +10,8 @@\n \n // error-pattern:explicit failure\n // Don't double free the string\n-extern mod std;\n-use core::io::ReaderUtil;\n+extern mod extra;\n+use std::io::ReaderUtil;\n \n fn main() {\n     do io::with_str_reader(~\"\") |rdr| {"}, {"sha": "0ab1528e4fb752e736fae4a335ea9c03fde95b57", "filename": "src/test/run-fail/issue-2444.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-fail%2Fissue-2444.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-fail%2Fissue-2444.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-2444.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,8 +10,8 @@\n \n // error-pattern:explicit failure\n \n-extern mod std;\n-use std::arc;\n+extern mod extra;\n+use extra::arc;\n \n enum e<T> { e(arc::ARC<T>) }\n "}, {"sha": "6a87e202d13828a928b0b8d5934c8ba094ec497a", "filename": "src/test/run-fail/linked-failure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-fail%2Flinked-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-fail%2Flinked-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Flinked-failure.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -11,7 +11,7 @@\n \n \n // error-pattern:1 == 2\n-extern mod std;\n+extern mod extra;\n \n fn child() { assert!((1 == 2)); }\n "}, {"sha": "f829767edf19d21035032e9c97866fb8b4aad7ad", "filename": "src/test/run-fail/morestack2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack2.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -15,7 +15,7 @@\n // See the hack in upcall_call_shim_on_c_stack where it messes\n // with the stack limit.\n \n-extern mod std;\n+extern mod extra;\n \n mod rustrt {\n     pub extern {"}, {"sha": "6ab064f382738d2d3e0233fefb22d3d3ba8ff135", "filename": "src/test/run-fail/morestack3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-fail%2Fmorestack3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-fail%2Fmorestack3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack3.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -12,7 +12,7 @@\n \n // Just testing unwinding\n \n-extern mod std;\n+extern mod extra;\n \n fn getbig_and_fail(i: int) {\n     let _r = and_then_get_big_again(5);"}, {"sha": "e07c799710848c9fa1d99e434dce5722d221b879", "filename": "src/test/run-fail/morestack4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-fail%2Fmorestack4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-fail%2Fmorestack4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack4.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -12,7 +12,7 @@\n \n // Just testing unwinding\n \n-extern mod std;\n+extern mod extra;\n \n fn getbig_and_fail(i: int) {\n     let r = and_then_get_big_again(5);"}, {"sha": "e9d3c41faa6cc10b8e7a74c0f090f92e6f3dd9af", "filename": "src/test/run-fail/run-unexported-tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-fail%2Frun-unexported-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-fail%2Frun-unexported-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frun-unexported-tests.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -11,7 +11,7 @@\n // error-pattern:runned an unexported test\n // compile-flags:--test\n \n-extern mod std;\n+extern mod extra;\n \n mod m {\n     pub fn exported() { }"}, {"sha": "fc4977308ae14104124d513ec2ce66aef7d59e72", "filename": "src/test/run-fail/spawnfail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-fail%2Fspawnfail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-fail%2Fspawnfail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fspawnfail.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-win32\n // error-pattern:explicit\n-extern mod std;\n+extern mod extra;\n \n // We don't want to see any invalid reads\n fn main() {"}, {"sha": "e30054575d6a634a5efeef5c8c6760daae21d011", "filename": "src/test/run-fail/unwind-misc-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -14,7 +14,7 @@\n \n fn main() {\n     let count = @mut 0u;\n-    let mut map = core::hashmap::HashMap::new();\n+    let mut map = std::hashmap::HashMap::new();\n     let mut arr = ~[];\n     for uint::range(0u, 10u) |i| {\n         arr += ~[@~\"key stuff\"];"}, {"sha": "355a2ce93ed9a9ae04bcd404de7d2528bc3e71ef", "filename": "src/test/run-fail/zip-different-lengths.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-fail%2Fzip-different-lengths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-fail%2Fzip-different-lengths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fzip-different-lengths.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -11,8 +11,8 @@\n // In this case, the code should compile but\n // the assert should fail at runtime\n // error-pattern:assertion failed\n-extern mod std;\n-use core::vec::{same_length, zip};\n+extern mod extra;\n+use std::vec::{same_length, zip};\n \n fn enum_chars(start: u8, end: u8) -> ~[char] {\n     assert!(start < end);"}, {"sha": "9a3ba32390c728915e1441f1e16187860c015a82", "filename": "src/test/run-pass-fulldeps/qquote.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,10 +10,10 @@\n \n // xfail-pretty\n \n-extern mod std;\n+extern mod extra;\n extern mod syntax;\n \n-use core::io::*;\n+use std::io::*;\n \n use syntax::diagnostic;\n use syntax::ast;"}, {"sha": "66b64768060943399f995ee88de850463474a35b", "filename": "src/test/run-pass/alt-join.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Falt-join.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Falt-join.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-join.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-extern mod std;\n+extern mod extra;\n \n fn foo<T>(y: Option<T>) {\n     let mut x: int;"}, {"sha": "71bbb1768e8921f1eb3e4a5745cececb563ff43c", "filename": "src/test/run-pass/alt-pattern-drop.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -14,7 +14,7 @@\n enum t { make_t(@int), clam, }\n \n fn foo(s: @int) {\n-    let count = ::core::sys::refcount(s);\n+    let count = ::std::sys::refcount(s);\n     let x: t = make_t(s); // ref up\n \n     match x {\n@@ -24,20 +24,20 @@ fn foo(s: @int) {\n       }\n       _ => { debug!(\"?\"); fail!(); }\n     }\n-    debug!(::core::sys::refcount(s));\n-    assert_eq!(::core::sys::refcount(s), count + 1u);\n-    let _ = ::core::sys::refcount(s); // don't get bitten by last-use.\n+    debug!(::std::sys::refcount(s));\n+    assert_eq!(::std::sys::refcount(s), count + 1u);\n+    let _ = ::std::sys::refcount(s); // don't get bitten by last-use.\n }\n \n pub fn main() {\n     let s: @int = @0; // ref up\n \n-    let count = ::core::sys::refcount(s);\n+    let count = ::std::sys::refcount(s);\n \n     foo(s); // ref up then down\n \n-    debug!(\"%u\", ::core::sys::refcount(s));\n-    let count2 = ::core::sys::refcount(s);\n-    let _ = ::core::sys::refcount(s); // don't get bitten by last-use.\n+    debug!(\"%u\", ::std::sys::refcount(s));\n+    let count2 = ::std::sys::refcount(s);\n+    let _ = ::std::sys::refcount(s); // don't get bitten by last-use.\n     assert_eq!(count, count2);\n }"}, {"sha": "316f8fa0f61f439ae6ee70a5a4b5385a635fbd1c", "filename": "src/test/run-pass/attr-before-view-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fattr-before-view-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fattr-before-view-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-before-view-item.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -11,7 +11,7 @@\n // error-pattern:expected item\n \n #[foo = \"bar\"]\n-extern mod std;\n+extern mod extra;\n \n pub fn main() {\n }"}, {"sha": "0721544aa0dc8a861c78362d69bef11a028ccaf9", "filename": "src/test/run-pass/attr-before-view-item2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fattr-before-view-item2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fattr-before-view-item2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-before-view-item2.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -12,7 +12,7 @@\n \n mod m {\n     #[foo = \"bar\"]\n-    extern mod std;\n+    extern mod extra;\n }\n \n pub fn main() {"}, {"sha": "0c2f24b5bf75be7a0fd2f82688a7eeaf2f46c3cc", "filename": "src/test/run-pass/auto-encode.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-encode.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -12,18 +12,18 @@\n \n #[forbid(deprecated_pattern)];\n \n-extern mod std;\n+extern mod extra;\n \n // These tests used to be separate files, but I wanted to refactor all\n // the common code.\n \n-use EBReader = std::ebml::reader;\n-use EBWriter = std::ebml::writer;\n-use core::cmp::Eq;\n-use core::io::Writer;\n-use std::ebml;\n-use std::serialize::{Decodable, Encodable};\n-use std::time;\n+use EBReader = extra::ebml::reader;\n+use EBWriter = extra::ebml::writer;\n+use std::cmp::Eq;\n+use std::io::Writer;\n+use extra::ebml;\n+use extra::serialize::{Decodable, Encodable};\n+use extra::time;\n \n fn test_ebml<A:\n     Eq +"}, {"sha": "5cde389ff753609adee057f3ada85b50fcff4365", "filename": "src/test/run-pass/bind-by-move.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fbind-by-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fbind-by-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbind-by-move.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n // xfail-fast\n-extern mod std;\n-use std::arc;\n+extern mod extra;\n+use extra::arc;\n fn dispose(_x: arc::ARC<bool>) { unsafe { } }\n \n pub fn main() {"}, {"sha": "a7e910538c947e7bf054a7198aefa256dc1dcf45", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -64,9 +64,9 @@ fn test_box() {\n \n fn test_ptr() {\n     unsafe {\n-        let p1: *u8 = ::core::cast::transmute(0);\n-        let p2: *u8 = ::core::cast::transmute(0);\n-        let p3: *u8 = ::core::cast::transmute(1);\n+        let p1: *u8 = ::std::cast::transmute(0);\n+        let p2: *u8 = ::std::cast::transmute(0);\n+        let p3: *u8 = ::std::cast::transmute(1);\n \n         assert_eq!(p1, p2);\n         assert!(p1 != p3);\n@@ -107,8 +107,8 @@ fn test_class() {\n \n   unsafe {\n   error!(\"q = %x, r = %x\",\n-         (::core::cast::transmute::<*p, uint>(&q)),\n-         (::core::cast::transmute::<*p, uint>(&r)));\n+         (::std::cast::transmute::<*p, uint>(&q)),\n+         (::std::cast::transmute::<*p, uint>(&r)));\n   }\n   assert_eq!(q, r);\n   r.y = 17;"}, {"sha": "c6edbfbe463d0ca3b6d597bc51766a24e9fd7a8c", "filename": "src/test/run-pass/bitv-perf-test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,8 +10,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n-use std::bitv::*;\n+extern mod extra;\n+use extra::bitv::*;\n \n fn bitv_test() -> bool {\n     let mut v1 = ~Bitv::new(31, false);"}, {"sha": "d68b0be632eb349b03bdb29de1277074045d3b31", "filename": "src/test/run-pass/block-arg-call-as.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n+extern mod extra;\n \n fn asSendfn( f : ~fn()->uint ) -> uint {\n    return f();"}, {"sha": "4c37000113cf7e68801fa8dbe9f3bf5dc417c8ad", "filename": "src/test/run-pass/block-vec-map_zip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fblock-vec-map_zip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fblock-vec-map_zip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-vec-map_zip.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n+extern mod extra;\n \n pub fn main() {\n     let v ="}, {"sha": "fa5ae98450726b3097f71c985b19138d005e4419", "filename": "src/test/run-pass/borrowck-mut-uniq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::util;\n+use std::util;\n \n struct Ints {sum: ~int, values: ~[int]}\n "}, {"sha": "647c42cf891cb94dd3345b5e449a92302e502f3a", "filename": "src/test/run-pass/c-stack-returning-int64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n+extern mod extra;\n \n mod libc {\n     #[abi = \"cdecl\"]"}, {"sha": "c9a1c031e84d0b924717fbe9000fea749419de77", "filename": "src/test/run-pass/capture_nil.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fcapture_nil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fcapture_nil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcapture_nil.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -24,7 +24,7 @@\n // course preferable, as the value itself is\n // irrelevant).\n \n-use core::comm::*;\n+use std::comm::*;\n \n fn foo(x: ()) -> Port<()> {\n     let (p, c) = stream::<()>();"}, {"sha": "de933b53a18b0ba8f833a25315323b7ced41e2e6", "filename": "src/test/run-pass/child-outlives-parent.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fchild-outlives-parent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fchild-outlives-parent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fchild-outlives-parent.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,7 +10,7 @@\n \n // Reported as issue #126, child leaks the string.\n \n-extern mod std;\n+extern mod extra;\n \n fn child2(s: ~str) { }\n "}, {"sha": "393c9e2ece0f560bf5fb478e5837eeb76e099a09", "filename": "src/test/run-pass/class-cast-to-trait-cross-crate-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -11,7 +11,7 @@\n // xfail-fast\n // aux-build:cci_class_cast.rs\n extern mod cci_class_cast;\n-use core::to_str::ToStr;\n+use std::to_str::ToStr;\n use cci_class_cast::kitty::*;\n \n fn print_out(thing: @ToStr, expected: ~str) {"}, {"sha": "09967f0ab361dad883718dfd3b2b507a10a6639d", "filename": "src/test/run-pass/class-impl-parameterized-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-trait.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -11,8 +11,8 @@\n // xfail-test\n // xfail-fast\n \n-extern mod std;\n-use std::oldmap::*;\n+extern mod extra;\n+use extra::oldmap::*;\n \n class cat : map<int, bool> {\n   priv {"}, {"sha": "a73af840fe4e45d86fcaab5707d08257fd7666f6", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,8 +10,8 @@\n \n // xfail-fast\n \n-use core::container::{Container, Mutable, Map};\n-use core::old_iter::BaseIter;\n+use std::container::{Container, Mutable, Map};\n+use std::old_iter::BaseIter;\n \n enum cat_type { tuxedo, tabby, tortoiseshell }\n "}, {"sha": "7a3045db91f1a2f79ce4c9faaaf81bb2d1eec623", "filename": "src/test/run-pass/class-implements-multiple-traits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-traits.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,8 +10,8 @@\n \n // xfail-test\n \n-extern mod std;\n-use std::oldmap::*;\n+extern mod extra;\n+use extra::oldmap::*;\n use vec::*;\n use dvec::{dvec, extensions};\n "}, {"sha": "75c62abcb0d55cdfa4b5747fe2c35809791f8cd0", "filename": "src/test/run-pass/class-trait-bounded-param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fclass-trait-bounded-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fclass-trait-bounded-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-trait-bounded-param.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,8 +10,8 @@\n \n // xfail-test\n \n-extern mod std;\n-use std::oldmap::{map, hashmap, int_hash};\n+extern mod extra;\n+use extra::oldmap::{map, hashmap, int_hash};\n \n class keys<K:Copy,V:Copy,M:Copy + map<K,V>>\n     : old_iter::base_iter<K> {"}, {"sha": "f6a7856dccccfdcc3a5472749a1d312c756ca391", "filename": "src/test/run-pass/clone-with-exterior.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fclone-with-exterior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fclone-with-exterior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclone-with-exterior.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n-use core::task::spawn;\n+extern mod extra;\n+use std::task::spawn;\n \n struct Pair {\n     a: int,"}, {"sha": "707a7bf407659a6adb533413303e2551d38fe9c9", "filename": "src/test/run-pass/coherence-impl-in-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fcoherence-impl-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fcoherence-impl-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-impl-in-fn.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,7 +10,7 @@\n \n pub fn main() {\n     enum x { foo }\n-    impl ::core::cmp::Eq for x {\n+    impl ::std::cmp::Eq for x {\n         fn eq(&self, other: &x) -> bool {\n             (*self) as int == (*other) as int\n         }"}, {"sha": "c307cf809b66dbb4797532af2b7e642b009b3d67", "filename": "src/test/run-pass/comm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcomm.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -9,7 +9,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::comm::*;\n+use std::comm::*;\n \n pub fn main() {\n     let (p, ch) = stream();"}, {"sha": "7e00d7efbe23b18276f1e9e80dfeb0efb2e896be", "filename": "src/test/run-pass/core-export-f64-sqrt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fcore-export-f64-sqrt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fcore-export-f64-sqrt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcore-export-f64-sqrt.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -14,5 +14,5 @@ pub fn main() {\n \n     let digits: uint = 10 as uint;\n \n-    ::core::io::println(float::to_str_digits(f64::sqrt(42.0f64) as float, digits));\n+    ::std::io::println(float::to_str_digits(f64::sqrt(42.0f64) as float, digits));\n }"}, {"sha": "b2f444d39e2424132ea0b67cc1c45000c1694606", "filename": "src/test/run-pass/core-run-destroy.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -13,10 +13,10 @@\n \n // NB: These tests kill child processes. Valgrind sees these children as leaking\n // memory, which makes for some *confusing* logs. That's why these are here\n-// instead of in core.\n+// instead of in std.\n \n-use core::run;\n-use core::run::*;\n+use std::run;\n+use std::run::*;\n \n #[test]\n fn test_destroy_once() {\n@@ -47,9 +47,9 @@ fn test_destroy_actually_kills(force: bool) {\n     #[cfg(windows)]\n     fn process_exists(pid: libc::pid_t) -> bool {\n \n-        use core::libc::types::os::arch::extra::DWORD;\n-        use core::libc::funcs::extra::kernel32::{CloseHandle, GetExitCodeProcess, OpenProcess};\n-        use core::libc::consts::os::extra::{FALSE, PROCESS_QUERY_INFORMATION, STILL_ACTIVE };\n+        use std::libc::types::os::arch::extra::DWORD;\n+        use std::libc::funcs::extra::kernel32::{CloseHandle, GetExitCodeProcess, OpenProcess};\n+        use std::libc::consts::os::extra::{FALSE, PROCESS_QUERY_INFORMATION, STILL_ACTIVE };\n \n         unsafe {\n             let proc = OpenProcess(PROCESS_QUERY_INFORMATION, FALSE, pid as DWORD);"}, {"sha": "f0b2d2ec827bb18cd5167543138746c869fabeb7", "filename": "src/test/run-pass/deriving-meta-multiple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fderiving-meta-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fderiving-meta-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-meta-multiple.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -19,7 +19,7 @@ struct Foo {\n }\n \n pub fn main() {\n-    use core::hash::{Hash, HashUtil}; // necessary for IterBytes check\n+    use std::hash::{Hash, HashUtil}; // necessary for IterBytes check\n \n     let a = Foo {bar: 4, baz: -3};\n "}, {"sha": "aef671ba757aa6773fefd4e0f25f31aa52f49230", "filename": "src/test/run-pass/deriving-meta.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fderiving-meta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fderiving-meta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-meta.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -17,7 +17,7 @@ struct Foo {\n }\n \n pub fn main() {\n-    use core::hash::{Hash, HashUtil}; // necessary for IterBytes check\n+    use std::hash::{Hash, HashUtil}; // necessary for IterBytes check\n \n     let a = Foo {bar: 4, baz: -3};\n "}, {"sha": "2d42088fc140afae24836156cf9634f49ed90809", "filename": "src/test/run-pass/deriving-self-lifetime-totalord-totaleq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fderiving-self-lifetime-totalord-totaleq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fderiving-self-lifetime-totalord-totaleq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-self-lifetime-totalord-totaleq.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,7 +10,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::cmp::{Less,Equal,Greater};\n+use std::cmp::{Less,Equal,Greater};\n \n #[deriving(TotalEq,TotalOrd)]\n struct A<'self> {"}, {"sha": "6c565604fceecd83f19427aa81897f638fa33f0e", "filename": "src/test/run-pass/drop-trait-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fdrop-trait-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fdrop-trait-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-trait-generic.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -13,7 +13,7 @@ struct S<T> {\n }\n \n #[unsafe_destructor]\n-impl<T> ::core::ops::Drop for S<T> {\n+impl<T> ::std::ops::Drop for S<T> {\n     fn finalize(&self) {\n         io::println(\"bye\");\n     }"}, {"sha": "35d5d2ffe8a31661d1f3b0a25cecea9a8037dd0e", "filename": "src/test/run-pass/duplicate-use.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fduplicate-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fduplicate-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fduplicate-use.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n // xfail-test\n-extern mod std;\n+extern mod extra;\n \n-use list = std::oldmap::chained;\n-use std::list;\n+use list = extra::oldmap::chained;\n+use extra::list;\n \n pub fn main() {\n     let _x: list::T<int, int> = list::mk();"}, {"sha": "c500201d65de3e1fa391bde51b4b14129d2fb65d", "filename": "src/test/run-pass/explicit-self-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n+extern mod extra;\n \n /**\n  * A function that returns a hash of a value"}, {"sha": "57587936022090a8b4c3c5e16043acb5e7e81a8f", "filename": "src/test/run-pass/expr-repeat-vstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fexpr-repeat-vstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fexpr-repeat-vstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-repeat-vstore.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -1,4 +1,4 @@\n-use core::io::println;\n+use std::io::println;\n \n fn main() {\n     let v: ~[int] = ~[ 1, ..5 ];"}, {"sha": "0db61fc8cd506c1448a4a0ae769d6b4075a3ac77", "filename": "src/test/run-pass/extern-mod-syntax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fextern-mod-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fextern-mod-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-mod-syntax.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,8 +10,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n-use std::json::Object;\n+extern mod extra;\n+use extra::json::Object;\n \n pub fn main() {\n     io::println(\"Hello world!\");"}, {"sha": "29a180db1855d82e09ad0e3aec15f55b49d4dda3", "filename": "src/test/run-pass/float-nan.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ffloat-nan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ffloat-nan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffloat-nan.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n+extern mod extra;\n \n-use core::num::Float;\n+use std::num::Float;\n \n pub fn main() {\n   let nan = Float::NaN::<float>();"}, {"sha": "dc47dda420cea3ac41d01e48122f82ceb59b8e09", "filename": "src/test/run-pass/fn-bare-size.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ffn-bare-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ffn-bare-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-size.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-test\n \n-extern mod std;\n+extern mod extra;\n \n pub fn main() {\n     // Bare functions should just be a pointer"}, {"sha": "67efca194d5274fea1f3c3d018b4a2b30fcddcd5", "filename": "src/test/run-pass/foreign-call-no-runtime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -1,4 +1,4 @@\n-use core::unstable::run_in_bare_thread;\n+use std::unstable::run_in_bare_thread;\n \n extern {\n     pub fn rust_dbg_call(cb: extern \"C\" fn(libc::uintptr_t)"}, {"sha": "15e14e3abe5a82aa1e28aabf95a0ccc56b1165c8", "filename": "src/test/run-pass/foreign-fn-linkname.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n+extern mod extra;\n \n mod libc {\n     #[nolink]"}, {"sha": "2745ae4014b41f5332dc2393b2d8e7086f63b405", "filename": "src/test/run-pass/foreign2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fforeign2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fforeign2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign2.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -24,8 +24,8 @@ mod libc {\n     #[abi = \"cdecl\"]\n     #[nolink]\n     pub extern {\n-        pub fn write(fd: int, buf: *u8, count: ::core::libc::size_t)\n-                  -> ::core::libc::ssize_t;\n+        pub fn write(fd: int, buf: *u8, count: ::std::libc::size_t)\n+                  -> ::std::libc::ssize_t;\n     }\n }\n "}, {"sha": "5abef9e5f89130184ca9b64fad9f9b3b710fe671", "filename": "src/test/run-pass/getopts_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,9 +10,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n+extern mod extra;\n \n-use std::getopts::*;\n+use extra::getopts::*;\n \n pub fn main() {\n     let args = ~[];"}, {"sha": "fb82e93047da873af6df4978c81a0b3db3546eac", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -19,8 +19,8 @@\n pub fn map(filename: ~str, emit: map_reduce::putter) { emit(filename, ~\"1\"); }\n \n mod map_reduce {\n-    use core::hashmap::HashMap;\n-    use core::comm::*;\n+    use std::hashmap::HashMap;\n+    use std::comm::*;\n \n     pub type putter = @fn(~str, ~str);\n "}, {"sha": "0e95ee25c4243122ba0097f42a953e3f3aeff559", "filename": "src/test/run-pass/import-glob-crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -11,8 +11,8 @@\n // except according to those terms.\n \n \n-extern mod std;\n-use core::vec::*;\n+extern mod extra;\n+use std::vec::*;\n \n pub fn main() {\n     let mut v = from_elem(0u, 0);"}, {"sha": "9537162e1c803bc15193ddf055ad9d5fc08f72ce", "filename": "src/test/run-pass/import-in-block.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fimport-in-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fimport-in-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-in-block.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n pub fn main() {\n-    use core::vec::from_fn;\n-    debug!(::core::vec::len(from_fn(2, |i| i)));\n+    use std::vec::from_fn;\n+    debug!(::std::vec::len(from_fn(2, |i| i)));\n     {\n-        use core::vec::*;\n+        use std::vec::*;\n         debug!(len(~[2]));\n     }\n }"}, {"sha": "dea0df2e52b348034c41ab2ddf282c78634017db", "filename": "src/test/run-pass/infinite-loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Finfinite-loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Finfinite-loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finfinite-loops.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -14,7 +14,7 @@\n */\n // xfail-test\n \n-extern mod std;\n+extern mod extra;\n \n fn loopy(n: int) {\n     if n > 0 { do spawn { loopy(n - 1) }; do spawn { loopy(n - 1) }; }"}, {"sha": "6be47b1e88b3de2036c30c28c542f6ffda6156eb", "filename": "src/test/run-pass/intrinsics-integer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,7 +10,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n+extern mod extra;\n \n mod rusti {\n     #[abi = \"rust-intrinsic\"]"}, {"sha": "d531217e550b6cfa8879d70a164cdfaaf07b432e", "filename": "src/test/run-pass/issue-1696.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-1696.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-1696.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1696.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,7 +10,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::hashmap::HashMap;\n+use std::hashmap::HashMap;\n \n pub fn main() {\n     let mut m = HashMap::new();"}, {"sha": "423888c1cf5b6e6c67c05b1e716707872bac8ce2", "filename": "src/test/run-pass/issue-2101.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-2101.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-2101.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2101.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n // xfail-test\n-extern mod std;\n-use std::arena;\n-use std::arena::Arena;\n+extern mod extra;\n+use extra::arena;\n+use extra::arena::Arena;\n \n enum hold { s(str) }\n "}, {"sha": "93cc8c292b1523a6ef030c4fa3b40e0bafe6e6e5", "filename": "src/test/run-pass/issue-2214.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-2214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-2214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2214.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,9 +10,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::cast;\n-use core::libc::{c_double, c_int};\n-use core::f64::*;\n+use std::cast;\n+use std::libc::{c_double, c_int};\n+use std::f64::*;\n \n fn to_c_int(v: &mut int) -> &mut c_int {\n     unsafe {\n@@ -27,7 +27,7 @@ fn lgamma(n: c_double, value: &mut int) -> c_double {\n }\n \n mod m {\n-    use core::libc::{c_double, c_int};\n+    use std::libc::{c_double, c_int};\n \n     #[link_name = \"m\"]\n     #[abi = \"cdecl\"]"}, {"sha": "9d8701688024c1f8247034cba1f3f7cbbf8afe1b", "filename": "src/test/run-pass/issue-2383.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-2383.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-2383.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2383.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,8 +10,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n-use std::deque::Deque;\n+extern mod extra;\n+use extra::deque::Deque;\n \n pub fn main() {\n     let mut q = Deque::new();"}, {"sha": "3d4bed4b62fc7f7fcd9003e7771e4bc657497031", "filename": "src/test/run-pass/issue-2611.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-2611.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-2611.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2611.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::old_iter::BaseIter;\n+use std::old_iter::BaseIter;\n \n trait FlatMapToVec<A> {\n   fn flat_map_to_vec<B, IB:BaseIter<B>>(&self, op: &fn(&A) -> IB) -> ~[B];"}, {"sha": "3ceae1030562d00133203c4027c98ef6b6d09ce5", "filename": "src/test/run-pass/issue-2631-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -14,7 +14,7 @@\n extern mod req;\n \n use req::*;\n-use core::hashmap::HashMap;\n+use std::hashmap::HashMap;\n \n pub fn main() {\n   let v = ~[@~\"hi\"];"}, {"sha": "48599b2a5383b3f738e4aa46b7d2a806da049764", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,12 +10,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::util;\n+use std::util;\n \n // tjc: I don't know why\n pub mod pipes {\n-    use core::util;\n-    use core::cast::{forget, transmute};\n+    use std::util;\n+    use std::cast::{forget, transmute};\n \n     pub struct Stuff<T> {\n         state: state,\n@@ -54,7 +54,7 @@ pub mod pipes {\n       pub fn atomic_xchg_rel(_dst: &mut int, _src: int) -> int { fail!(); }\n     }\n \n-    // We should consider moving this to ::core::unsafe, although I\n+    // We should consider moving this to ::std::unsafe, although I\n     // suspect graydon would want us to use void pointers instead.\n     pub unsafe fn uniquify<T>(x: *T) -> ~T {\n         unsafe { cast::transmute(x) }\n@@ -219,9 +219,9 @@ pub mod pipes {\n }\n \n pub mod pingpong {\n-    use core::cast;\n-    use core::ptr;\n-    use core::util;\n+    use std::cast;\n+    use std::ptr;\n+    use std::util;\n \n     pub struct ping(::pipes::send_packet<pong>);\n     pub struct pong(::pipes::send_packet<ping>);\n@@ -253,7 +253,7 @@ pub mod pingpong {\n     }\n \n     pub mod client {\n-        use core::option;\n+        use std::option;\n         use pingpong;\n \n         pub type ping = ::pipes::send_packet<pingpong::ping>;"}, {"sha": "917839a5401e2b5c02f1ac88de01df06c5dc77f2", "filename": "src/test/run-pass/issue-2804-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-2804-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-2804-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2804-2.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -13,7 +13,7 @@\n // Minimized version of issue-2804.rs. Both check that callee IDs don't\n // clobber the previous node ID in a macro expr\n \n-use core::hashmap::HashMap;\n+use std::hashmap::HashMap;\n \n fn add_interfaces(managed_ip: ~str, device: HashMap<~str, int>)  {\n      error!(\"%s, %?\", managed_ip, device.get(&~\"interfaces\"));"}, {"sha": "bb2dbb9fe21ffe1c966eb0d0fcfe1a46967b63eb", "filename": "src/test/run-pass/issue-2804.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2804.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,9 +10,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n-use core::hashmap::HashMap;\n-use std::json;\n+extern mod extra;\n+use std::hashmap::HashMap;\n+use extra::json;\n \n enum object {\n     bool_value(bool),\n@@ -23,7 +23,7 @@ fn lookup(table: ~json::Object, key: ~str, default: ~str) -> ~str\n {\n     match table.find(&key)\n     {\n-        option::Some(&std::json::String(copy s)) =>\n+        option::Some(&extra::json::String(copy s)) =>\n         {\n             copy s\n         }\n@@ -39,11 +39,11 @@ fn lookup(table: ~json::Object, key: ~str, default: ~str) -> ~str\n     }\n }\n \n-fn add_interface(store: int, managed_ip: ~str, data: std::json::Json) -> (~str, object)\n+fn add_interface(store: int, managed_ip: ~str, data: extra::json::Json) -> (~str, object)\n {\n     match &data\n     {\n-        &std::json::Object(copy interface) =>\n+        &extra::json::Object(copy interface) =>\n         {\n             let name = lookup(copy interface, ~\"ifDescr\", ~\"\");\n             let label = fmt!(\"%s-%s\", managed_ip, name);\n@@ -58,11 +58,11 @@ fn add_interface(store: int, managed_ip: ~str, data: std::json::Json) -> (~str,\n     }\n }\n \n-fn add_interfaces(store: int, managed_ip: ~str, device: HashMap<~str, std::json::Json>) -> ~[(~str, object)]\n+fn add_interfaces(store: int, managed_ip: ~str, device: HashMap<~str, extra::json::Json>) -> ~[(~str, object)]\n {\n     match device.get(&~\"interfaces\")\n     {\n-        &std::json::List(ref interfaces) =>\n+        &extra::json::List(ref interfaces) =>\n         {\n           do interfaces.map |interface| {\n                 add_interface(store, copy managed_ip, copy *interface)"}, {"sha": "1cb8a74e5a4fe27e0667cc69e50e23ac2c583078", "filename": "src/test/run-pass/issue-2904.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2904.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -12,9 +12,9 @@\n \n /// Map representation\n \n-extern mod std;\n+extern mod extra;\n \n-use core::io::ReaderUtil;\n+use std::io::ReaderUtil;\n \n enum square {\n     bot,"}, {"sha": "8ef67840ba3cfa98c20532c8b9f8d8fcce1c219f", "filename": "src/test/run-pass/issue-2989.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-2989.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-2989.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2989.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n+extern mod extra;\n \n trait methods {\n     fn to_bytes(&self) -> ~[u8];"}, {"sha": "a4b37f0ba0f0b53e46d6efdd4c43eda039ae541d", "filename": "src/test/run-pass/issue-3026.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-3026.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-3026.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3026.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,7 +10,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::hashmap::HashMap;\n+use std::hashmap::HashMap;\n \n pub fn main() {\n     let mut buggy_map: HashMap<uint, &uint> = HashMap::new::<uint, &uint>();"}, {"sha": "54094a0c008a3f2a86cbfd1e6ecd114fc3798d37", "filename": "src/test/run-pass/issue-3176.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-3176.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-3176.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3176.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-fast\n \n-use core::comm::{Select2, Selectable};\n+use std::comm::{Select2, Selectable};\n \n pub fn main() {\n     let (p,c) = comm::stream();"}, {"sha": "a6eb5097b36fcb9f1747a89b58e68e13805dfb53", "filename": "src/test/run-pass/issue-3424.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-3424.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-3424.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3424.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -11,8 +11,8 @@\n // except according to those terms.\n \n // rustc --test ignores2.rs && ./ignores2\n-extern mod std;\n-use core::path::{Path};\n+extern mod extra;\n+use std::path::{Path};\n \n type rsrc_loader = ~fn(path: &Path) -> result::Result<~str, ~str>;\n "}, {"sha": "ca67f1dae431beb7588cbdf6345ebae0c773eb29", "filename": "src/test/run-pass/issue-3556.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-3556.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-3556.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3556.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n-use core::io::WriterUtil;\n+extern mod extra;\n+use std::io::WriterUtil;\n \n enum Token {\n         Text(@~str),"}, {"sha": "9665da11b9334681477c098285d1b29cb17310de", "filename": "src/test/run-pass/issue-3559.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-3559.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-3559.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3559.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -11,9 +11,9 @@\n // except according to those terms.\n \n // rustc --test map_to_str.rs && ./map_to_str\n-extern mod std;\n+extern mod extra;\n \n-use core::io::{WriterUtil};\n+use std::io::{WriterUtil};\n \n fn check_strs(actual: &str, expected: &str) -> bool\n {\n@@ -27,7 +27,7 @@ fn check_strs(actual: &str, expected: &str) -> bool\n \n fn tester()\n {\n-    let mut table = core::hashmap::HashMap::new();\n+    let mut table = std::hashmap::HashMap::new();\n     table.insert(@~\"one\", 1);\n     table.insert(@~\"two\", 2);\n     assert!(check_strs(table.to_str(), ~\"xxx\"));   // not sure what expected should be"}, {"sha": "bfdf4aa053dafd5d1f18276ed1875cbebcb40423", "filename": "src/test/run-pass/issue-3563-3.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -12,15 +12,15 @@\n // Demonstrates traits, impls, operator overloading, non-copyable struct, unit testing.\n // To run execute: rustc --test shapes.rs && ./shapes\n \n-// Rust's core library is tightly bound to the language itself so it is automatically linked in.\n-// However the std library is designed to be optional (for code that must run on constrained\n+// Rust's std library is tightly bound to the language itself so it is automatically linked in.\n+// However the extra library is designed to be optional (for code that must run on constrained\n //  environments like embedded devices or special environments like kernel code) so it must\n // be explicitly linked in.\n-extern mod std;\n+extern mod extra;\n \n // Extern mod controls linkage. Use controls the visibility of names to modules that are\n // already linked in. Using WriterUtil allows us to use the write_line method.\n-use core::io::WriterUtil;\n+use std::io::WriterUtil;\n \n // Represents a position on a canvas.\n struct Point {"}, {"sha": "dc1ce95cfae54d160faa0dd59fb5b443870e6346", "filename": "src/test/run-pass/issue-3574.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-3574.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-3574.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3574.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // rustc --test match_borrowed_str.rs.rs && ./match_borrowed_str.rs\n-extern mod std;\n+extern mod extra;\n \n fn compare(x: &str, y: &str) -> bool\n {"}, {"sha": "a1aced7b5df0ad773247b9e9053786f57724bed4", "filename": "src/test/run-pass/issue-3609.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3609.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -1,6 +1,6 @@\n-extern mod std;\n+extern mod extra;\n \n-use core::comm::Chan;\n+use std::comm::Chan;\n \n type RingBuffer = ~[float];\n type SamplesFn = ~fn(samples: &RingBuffer);"}, {"sha": "96cf88a0e2b5ee690dbff2b1f5f323de941b9f6b", "filename": "src/test/run-pass/issue-3656.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-3656.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-3656.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3656.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -13,7 +13,7 @@\n // Incorrect struct size computation in the FFI, because of not taking\n // the alignment of elements into account.\n \n-use core::libc::*;\n+use std::libc::*;\n \n struct KEYGEN {\n     hash_algorithm: [c_uint, ..2],"}, {"sha": "4e65a7063e7f0dfaaa62f6c00d316f8be775e822", "filename": "src/test/run-pass/issue-4016.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-4016.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-4016.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4016.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n // xfail-test\n-extern mod std;\n+extern mod extra;\n \n use hashmap;\n-use std::json;\n-use std::serialization::{Deserializable, deserialize};\n+use extra::json;\n+use extra::serialization::{Deserializable, deserialize};\n \n trait JD : Deserializable<json::Deserializer> { }\n //type JD = Deserializable<json::Deserializer>;"}, {"sha": "ad82071259593e8b4025a816f4d5f0b2bab81096", "filename": "src/test/run-pass/issue-4036.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-4036.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-4036.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4036.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -11,9 +11,9 @@\n // Issue #4036: Test for an issue that arose around fixing up type inference\n // byproducts in vtable records.\n \n-extern mod std;\n-use self::std::json;\n-use self::std::serialize;\n+extern mod extra;\n+use self::extra::json;\n+use self::extra::serialize;\n \n pub fn main() {\n     let json = json::from_str(\"[1]\").unwrap();"}, {"sha": "919c1f7ad184df0147a44bae0b5e06b265fb8614", "filename": "src/test/run-pass/issue-4092.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-4092.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-4092.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4092.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::hashmap::HashMap;\n+use std::hashmap::HashMap;\n \n pub fn main() {\n     let mut x = HashMap::new();"}, {"sha": "4aa604160d9338f56f2919813c8fd8e8570159e9", "filename": "src/test/run-pass/issue-4241.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-4241.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-4241.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4241.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n // xfail-test\n-extern mod std;\n+extern mod extra;\n \n-use std::net::tcp::TcpSocketBuf;\n+use extra::net::tcp::TcpSocketBuf;\n \n-use core::io::{ReaderUtil,WriterUtil};\n+use std::io::{ReaderUtil,WriterUtil};\n \n enum Result {\n   Nil,"}, {"sha": "24a8adfcb1a532d9439311e139ba3f90f0802150", "filename": "src/test/run-pass/issue-4541.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-4541.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fissue-4541.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4541.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-test\n fn parse_args() -> ~str {\n-    let args = core::os::args();\n+    let args = std::os::args();\n     let mut n = 0;\n \n     while n < args.len() {"}, {"sha": "5a1d54c48b5d2519cd8ebece7d96e5921626994b", "filename": "src/test/run-pass/item-attributes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fitem-attributes.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -17,10 +17,10 @@\n #[attr4(attr5)];\n \n // Special linkage attributes for the crate\n-#[link(name = \"std\",\n+#[link(name = \"extra\",\n        vers = \"0.1\",\n        uuid = \"122bed0b-c19b-4b82-b0b7-7ae8aead7297\",\n-       url = \"http://rust-lang.org/src/std\")];\n+       url = \"http://rust-lang.org/src/extra\")];\n \n // These are are attributes of the following mod\n #[attr1 = \"val\"]\n@@ -148,7 +148,7 @@ mod test_attr_inner_then_outer_multi {\n }\n \n mod test_distinguish_syntax_ext {\n-    extern mod std;\n+    extern mod extra;\n \n     pub fn f() {\n         fmt!(\"test%s\", ~\"s\");"}, {"sha": "5b1102a1917b58c83e5ecbcd74c3dd56b615c41d", "filename": "src/test/run-pass/ivec-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fivec-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fivec-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fivec-tag.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -1,4 +1,4 @@\n-use core::comm::*;\n+use std::comm::*;\n \n fn producer(c: &Chan<~[u8]>) {\n     c.send("}, {"sha": "ae2ae6dbf9ce01bf4a928d399aacabef5662b29a", "filename": "src/test/run-pass/log-knows-the-names-of-variants-in-std.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,8 +10,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n-use std::list;\n+extern mod extra;\n+use extra::list;\n \n enum foo {\n   a(uint),"}, {"sha": "4eb0cd81bc32010631fd2da6cb0fe437ac0a6fdf", "filename": "src/test/run-pass/lots-a-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Flots-a-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Flots-a-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flots-a-fail.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // xfail-win32 leaks\n-extern mod std;\n+extern mod extra;\n \n fn die() {\n     fail!();"}, {"sha": "cb33feef539ef6ca7070d259b1ddc4e8e2eb7bb9", "filename": "src/test/run-pass/mlist-cycle.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fmlist-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fmlist-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmlist-cycle.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,9 +10,9 @@\n \n // xfail-test\n // -*- rust -*-\n-extern mod core;\n-use core::gc;\n-use core::gc::rustrt;\n+extern mod std;\n+use std::gc;\n+use std::gc::rustrt;\n \n struct cell {c: @list}\n "}, {"sha": "2fc2d4b3716050ace6c1f449d81a86cd21874d2c", "filename": "src/test/run-pass/mod-view-items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fmod-view-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fmod-view-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmod-view-items.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -17,7 +17,7 @@\n // begin failing.\n \n mod m {\n-    use core::vec;\n+    use std::vec;\n     pub fn f() -> ~[int] { vec::from_elem(1u, 0) }\n }\n "}, {"sha": "efbf9302117ff956d0fb9ffafc3ac84c75f527ee", "filename": "src/test/run-pass/monomorphized-callees-with-ty-params-3314.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fmonomorphized-callees-with-ty-params-3314.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fmonomorphized-callees-with-ty-params-3314.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonomorphized-callees-with-ty-params-3314.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n+extern mod extra;\n \n trait Serializer {\n }"}, {"sha": "492196ed7f0d5e922f763447f68eba7380e1c0c0", "filename": "src/test/run-pass/morestack5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fmorestack5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fmorestack5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmorestack5.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,7 +10,7 @@\n \n // This test will call __morestack with various minimum stack sizes\n \n-extern mod std;\n+extern mod extra;\n \n fn getbig(i: int) {\n     if i != 0 {"}, {"sha": "79c66ba72b0c7b8971a5def6cb0040f49aaaab9f", "filename": "src/test/run-pass/morestack6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmorestack6.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -54,7 +54,7 @@ fn runtest2(f: extern fn(), frame_backoff: u32, last_stk: *u8) -> u32 {\n }\n \n pub fn main() {\n-    use core::rand::Rng;\n+    use std::rand::Rng;\n     let fns = ~[\n         calllink01,\n         calllink02,"}, {"sha": "7b71fc4f86ecb4d1ed4afa60ec2781f3d4fa52ed", "filename": "src/test/run-pass/move-3-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n+extern mod extra;\n \n struct Triple { x: int, y: int, z: int }\n "}, {"sha": "64519034ebe7ae4a240a697edfdcad5265256f53", "filename": "src/test/run-pass/move-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fmove-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fmove-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-3.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n+extern mod extra;\n \n struct Triple { x: int, y: int, z: int }\n "}, {"sha": "48621cf03be6a9f070fe35e3d36df2218bc59a5e", "filename": "src/test/run-pass/move-4-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fmove-4-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fmove-4-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-4-unique.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n+extern mod extra;\n \n struct Triple {a: int, b: int, c: int}\n "}, {"sha": "2f0f256ba78e8ccf6de37a288051c3b2fc1c7698", "filename": "src/test/run-pass/move-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fmove-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fmove-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-4.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-extern mod std;\n+extern mod extra;\n \n struct Triple { a: int, b: int, c: int }\n "}, {"sha": "b058df7fc7a0f81e0650c60551f1e24562949aac", "filename": "src/test/run-pass/mutable-alias-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -11,7 +11,7 @@\n \n \n // -*- rust -*-\n-extern mod std;\n+extern mod extra;\n \n fn grow(v: &mut ~[int]) { *v += ~[1]; }\n "}, {"sha": "c7497bf3de5256fa0555a67e54630fc29d141269", "filename": "src/test/run-pass/new-import-syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fnew-import-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fnew-import-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnew-import-syntax.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::io::println;\n+use std::io::println;\n \n pub fn main() {\n     println(\"Hello world!\");"}, {"sha": "2da532422c0cb76ba20084a8bcd17df144ff07f9", "filename": "src/test/run-pass/new-style-constants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fnew-style-constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fnew-style-constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnew-style-constants.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::io::println;\n+use std::io::println;\n \n static FOO: int = 3;\n "}, {"sha": "41704c252c8dbf775b4d5ac45304cfd669bc0a15", "filename": "src/test/run-pass/new-style-fixed-length-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fnew-style-fixed-length-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fnew-style-fixed-length-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnew-style-fixed-length-vec.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::io::println;\n+use std::io::println;\n \n static FOO: [int, ..3] = [1, 2, 3];\n "}, {"sha": "0e36f27aa9292d6d2d3ade9cfe9817c8110586e3", "filename": "src/test/run-pass/newtype-struct-with-dtor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fnewtype-struct-with-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fnewtype-struct-with-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype-struct-with-dtor.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -1,5 +1,5 @@\n-use core::libc::c_int;\n-use core::libc;\n+use std::libc::c_int;\n+use std::libc;\n \n pub struct Fd(c_int);\n "}, {"sha": "c08f52cba1597088a757b8cf498a9b36a34a1d4b", "filename": "src/test/run-pass/non-boolean-pure-fns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,9 +10,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n+extern mod extra;\n \n-use std::list::*;\n+use extra::list::*;\n \n fn pure_length_go<T:Copy>(ls: @List<T>, acc: uint) -> uint {\n     match *ls { Nil => { acc } Cons(_, tl) => { pure_length_go(tl, acc + 1u) } }"}, {"sha": "b63870dcfb631f408974d47d9c3d30f2fd1f2eff", "filename": "src/test/run-pass/nullable-pointer-iotareduction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::{option, cast};\n+use std::{option, cast};\n \n // Iota-reduction is a rule in the Calculus of (Co-)Inductive Constructions,\n // which \"says that a destructor applied to an object built from a constructor"}, {"sha": "1838cfe25198a79ab2ccd5f0f2031e8a50e69d5f", "filename": "src/test/run-pass/overload-index-operator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Foverload-index-operator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Foverload-index-operator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverload-index-operator.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -11,7 +11,7 @@\n // Test overloading of the `[]` operator.  In particular test that it\n // takes its argument *by reference*.\n \n-use core::ops::Index;\n+use std::ops::Index;\n \n struct AssociationList<K,V> {\n     pairs: ~[AssociationPair<K,V>]"}, {"sha": "83031b4670450afd115d03e91700b4d223922944", "filename": "src/test/run-pass/pipe-bank-proto.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -15,8 +15,8 @@\n //\n // http://theincredibleholk.wordpress.com/2012/07/06/rusty-pipes/\n \n-use core::pipes;\n-use core::pipes::try_recv;\n+use std::pipes;\n+use std::pipes::try_recv;\n \n pub type username = ~str;\n pub type password = ~str;"}, {"sha": "d922eef5dbb1d9e3835e5e5a100131d9e1fa833f", "filename": "src/test/run-pass/pipe-detect-term.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fpipe-detect-term.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fpipe-detect-term.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-detect-term.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -14,12 +14,12 @@\n \n // xfail-win32\n \n-extern mod std;\n-use std::timer::sleep;\n-use std::uv;\n+extern mod extra;\n+use extra::timer::sleep;\n+use extra::uv;\n \n-use core::cell::Cell;\n-use core::pipes::{try_recv, recv};\n+use std::cell::Cell;\n+use std::pipes::{try_recv, recv};\n \n proto! oneshot (\n     waiting:send {"}, {"sha": "149e81204f474a0fbe463f63cf42f039336dfa13", "filename": "src/test/run-pass/pipe-peek.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fpipe-peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fpipe-peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-peek.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,10 +10,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n-use std::timer::sleep;\n-use std::uv;\n-use core::pipes;\n+extern mod extra;\n+use extra::timer::sleep;\n+use extra::uv;\n+use std::pipes;\n \n proto! oneshot (\n     waiting:send {"}, {"sha": "b4c92dc0614bbdbb18236a90906374c5a98f4038", "filename": "src/test/run-pass/pipe-pingpong-bounded.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -14,15 +14,15 @@\n // experiment with what code the compiler should generate for bounded\n // protocols.\n \n-use core::cell::Cell;\n+use std::cell::Cell;\n \n // This was generated initially by the pipe compiler, but it's been\n // modified in hopefully straightforward ways.\n \n mod pingpong {\n-    use core::pipes;\n-    use core::pipes::*;\n-    use core::ptr;\n+    use std::pipes;\n+    use std::pipes::*;\n+    use std::ptr;\n \n     pub struct Packets {\n         ping: Packet<ping>,\n@@ -46,9 +46,9 @@ mod pingpong {\n     pub struct ping(server::pong);\n     pub struct pong(client::ping);\n     pub mod client {\n-        use core::pipes;\n-        use core::pipes::*;\n-        use core::ptr;\n+        use std::pipes;\n+        use std::pipes::*;\n+        use std::ptr;\n \n         pub fn ping(mut pipe: ping) -> pong {\n             {\n@@ -66,9 +66,9 @@ mod pingpong {\n                                                   ::pingpong::Packets>;\n     }\n     pub mod server {\n-        use core::pipes;\n-        use core::pipes::*;\n-        use core::ptr;\n+        use std::pipes;\n+        use std::pipes::*;\n+        use std::ptr;\n \n         pub type ping = pipes::RecvPacketBuffered<::pingpong::ping,\n         ::pingpong::Packets>;\n@@ -88,7 +88,7 @@ mod pingpong {\n }\n \n mod test {\n-    use core::pipes::recv;\n+    use std::pipes::recv;\n     use pingpong::{ping, pong};\n \n     pub fn client(chan: ::pingpong::client::ping) {"}, {"sha": "95502b14c53147d1827bd1823cf9d069c739f101", "filename": "src/test/run-pass/pipe-pingpong-proto.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -12,8 +12,8 @@\n \n // An example to make sure the protocol parsing syntax extension works.\n \n-use core::cell::Cell;\n-use core::option;\n+use std::cell::Cell;\n+use std::option;\n \n proto! pingpong (\n     ping:send {\n@@ -26,7 +26,7 @@ proto! pingpong (\n )\n \n mod test {\n-    use core::pipes::recv;\n+    use std::pipes::recv;\n     use pingpong::{ping, pong};\n \n     pub fn client(chan: ::pingpong::client::ping) {"}, {"sha": "54cf8ba9c0acbf759ba54fe53ff6cedf6d416fcf", "filename": "src/test/run-pass/pipe-presentation-examples.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fpipe-presentation-examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fpipe-presentation-examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-presentation-examples.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -21,7 +21,7 @@\n \n use double_buffer::client::*;\n use double_buffer::give_buffer;\n-use core::comm::Selectable;\n+use std::comm::Selectable;\n \n macro_rules! select_if (\n     {\n@@ -37,7 +37,7 @@ macro_rules! select_if (\n         ], )*\n     } => {\n         if $index == $count {\n-            match core::pipes::try_recv($port) {\n+            match std::pipes::try_recv($port) {\n               $(Some($message($($($x,)+)* next)) => {\n                 let $next = next;\n                 $e\n@@ -71,7 +71,7 @@ macro_rules! select (\n               -> $next:ident $e:expr),+\n         } )+\n     } => ({\n-        let index = core::comm::selecti([$(($port).header()),+]);\n+        let index = std::comm::selecti([$(($port).header()),+]);\n         select_if!(index, 0, $( $port => [\n             $($message$(($($x),+))dont_type_this* -> $next $e),+\n         ], )+)"}, {"sha": "a386c3a2e05e0032ad64a5501ee0c62346a0d816", "filename": "src/test/run-pass/pipe-select.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fpipe-select.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fpipe-select.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-select.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -13,13 +13,13 @@\n // xfail-pretty\n // xfail-win32\n \n-extern mod std;\n-use std::timer::sleep;\n-use std::uv;\n+extern mod extra;\n+use extra::timer::sleep;\n+use extra::uv;\n \n-use core::cell::Cell;\n-use core::pipes;\n-use core::pipes::*;\n+use std::cell::Cell;\n+use std::pipes;\n+use std::pipes::*;\n \n proto! oneshot (\n     waiting:send {"}, {"sha": "674ad5f340563c52dae9f39b600a3807e1704008", "filename": "src/test/run-pass/pipe-sleep.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fpipe-sleep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fpipe-sleep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-sleep.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,12 +10,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n-use std::timer::sleep;\n-use std::uv;\n-use core::cell::Cell;\n-use core::pipes;\n-use core::pipes::*;\n+extern mod extra;\n+use extra::timer::sleep;\n+use extra::uv;\n+use std::cell::Cell;\n+use std::pipes;\n+use std::pipes::*;\n \n proto! oneshot (\n     waiting:send {"}, {"sha": "1dafbca22f72d66b4c3182f8a892ef42cc1009eb", "filename": "src/test/run-pass/placement-new-arena.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fplacement-new-arena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fplacement-new-arena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fplacement-new-arena.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,8 +10,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n-use std::arena;\n+extern mod extra;\n+use extra::arena;\n \n pub fn main() {\n     let mut arena = arena::Arena();"}, {"sha": "9663beb279e5bd167338fee87063ce861e8ae022", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,9 +10,9 @@\n \n // xfail-fast\n \n-use core::bool;\n-use core::libc::c_void;\n-use core::vec::UnboxedVecRepr;\n+use std::bool;\n+use std::libc::c_void;\n+use std::vec::UnboxedVecRepr;\n use intrinsic::{TyDesc, get_tydesc, visit_tydesc, TyVisitor, Opaque};\n \n #[doc = \"High-level interfaces to `intrinsic::visit_ty` reflection system.\"]"}, {"sha": "33d147c22b612cf02a139faad1e38a9cf641e32a", "filename": "src/test/run-pass/regions-infer-borrow-scope-addr-of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-addr-of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-addr-of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-addr-of.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::util;\n+use std::util;\n \n pub fn main() {\n     let mut x = 4;"}, {"sha": "9a547bd4bdf4654c70d35898a3ed3a0dfecb93d9", "filename": "src/test/run-pass/ret-break-cont-in-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fret-break-cont-in-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fret-break-cont-in-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fret-break-cont-in-block.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-fast\n \n-use core::cmp::Eq;\n+use std::cmp::Eq;\n \n fn iter<T>(v: ~[T], it: &fn(&T) -> bool) -> bool {\n     let mut i = 0u, l = v.len();"}, {"sha": "a60b24987c85b5c233432218f8ea0290107d12c6", "filename": "src/test/run-pass/rt-sched-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Frt-sched-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Frt-sched-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frt-sched-1.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,7 +10,7 @@\n \n // Tests of the runtime's scheduler interface\n \n-use core::comm::*;\n+use std::comm::*;\n \n pub type sched_id = int;\n pub type task_id = *libc::c_void;"}, {"sha": "ed0a5263035bf91b45b840676663e170e26feb59", "filename": "src/test/run-pass/send-iloop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fsend-iloop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fsend-iloop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-iloop.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // xfail-win32\n-extern mod std;\n+extern mod extra;\n \n fn die() {\n     fail!();"}, {"sha": "17789e0b50942aa24e57b88a5edbdf7e4a9fb3f4", "filename": "src/test/run-pass/send-resource.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fsend-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fsend-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-resource.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::comm::*;\n+use std::comm::*;\n \n struct test {\n   f: int,"}, {"sha": "bdb1fbaf422614faf4759aad5bf60989b41cc267", "filename": "src/test/run-pass/send-type-inference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::comm::*;\n+use std::comm::*;\n \n // tests that ctrl's type gets inferred properly\n struct Command<K, V> {"}, {"sha": "19e853199273eecabecb863b96e8cfc0cd59e926", "filename": "src/test/run-pass/sendfn-spawn-with-fn-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::cell::Cell;\n+use std::cell::Cell;\n \n pub fn main() { test05(); }\n "}, {"sha": "f29d0c6f108c6c608088a7ab19828d5c2d8251b2", "filename": "src/test/run-pass/shape_intrinsic_tag_then_rec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -14,9 +14,9 @@\n // on x86_64: when there is a enum embedded in an\n // interior record which is then itself interior to\n // something else, shape calculations were off.\n-extern mod std;\n-use std::list;\n-use std::list::list;\n+extern mod extra;\n+use extra::list;\n+use extra::list::list;\n \n enum opt_span {\n "}, {"sha": "58b7b8c09a5a0896c14752966161297f688f37f4", "filename": "src/test/run-pass/spawn-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fspawn-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fspawn-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn-types.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -14,7 +14,7 @@\n   Arnold.\n  */\n \n-use core::comm::*;\n+use std::comm::*;\n \n type ctx = Chan<int>;\n "}, {"sha": "fef00549fa7710f8116291d5879f7aa2c8c01be0", "filename": "src/test/run-pass/spawn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,7 +10,7 @@\n // except according to those terms.\n \n \n-extern mod std;\n+extern mod extra;\n \n \n pub fn main() {"}, {"sha": "f9216135038a8057f1ba2a07294a86c82863f0a8", "filename": "src/test/run-pass/stat.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fstat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fstat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstat.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,9 +10,9 @@\n \n // xfail-fast\n \n-extern mod std;\n-use core::io::WriterUtil;\n-use std::tempfile;\n+extern mod extra;\n+use std::io::WriterUtil;\n+use extra::tempfile;\n \n pub fn main() {\n     let dir = tempfile::mkdtemp(&Path(\".\"), \"\").unwrap();"}, {"sha": "4fdf7dde031a7c6a9c9fa1e13b0607b3b2cb382f", "filename": "src/test/run-pass/str-append.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fstr-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fstr-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstr-append.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -11,7 +11,7 @@\n \n \n // -*- rust -*-\n-extern mod std;\n+extern mod extra;\n \n fn test1() {\n     let mut s: ~str = ~\"hello\";"}, {"sha": "28c2cd7a41acd9458764347dc4e02d1bf99710a5", "filename": "src/test/run-pass/str-multiline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fstr-multiline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fstr-multiline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstr-multiline.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -11,7 +11,7 @@\n \n \n // -*- rust -*-\n-extern mod std;\n+extern mod extra;\n \n pub fn main() {\n     let a: ~str = ~\"this \\"}, {"sha": "6fe383a64a21aa8b050c503df7e86657c8f67926", "filename": "src/test/run-pass/string-self-append.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fstring-self-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fstring-self-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstring-self-append.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n+extern mod extra;\n \n pub fn main() {\n     // Make sure we properly handle repeated self-appends."}, {"sha": "1c0c05cc16d3c6687a3444d4aed672880c9de776", "filename": "src/test/run-pass/swap-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fswap-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fswap-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fswap-1.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::util;\n+use std::util;\n \n pub fn main() {\n     let mut x = 3; let mut y = 7;"}, {"sha": "52092b994f96ffbeab1b43eecbc42984d955cfba", "filename": "src/test/run-pass/swap-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fswap-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fswap-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fswap-2.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::util;\n+use std::util;\n \n pub fn main() {\n     let mut a: ~[int] = ~[0, 1, 2, 3, 4, 5, 6];"}, {"sha": "1f1b121d362a7dd81aa1d1086b72a61b05eec3f5", "filename": "src/test/run-pass/swap-overlapping.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fswap-overlapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fswap-overlapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fswap-overlapping.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,7 +10,7 @@\n \n // Issue #5041 - avoid overlapping memcpy when src and dest of a swap are the same\n \n-use core::util;\n+use std::util;\n \n pub fn main() {\n     let mut test = TestDescAndFn {"}, {"sha": "67573fce2cd267a8abdecaa7b0a4d9426c30fe5c", "filename": "src/test/run-pass/syntax-extension-fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n+extern mod extra;\n \n fn test(actual: ~str, expected: ~str) {\n     debug!(actual.clone());"}, {"sha": "90812f9a7f868f20a3b16daa90cdf0a933d4b822", "filename": "src/test/run-pass/task-comm-0.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,10 +10,10 @@\n \n // xfail-fast\n \n-extern mod std;\n+extern mod extra;\n \n-use core::comm::Chan;\n-use core::comm::Port;\n+use std::comm::Chan;\n+use std::comm::Port;\n \n pub fn main() { test05(); }\n "}, {"sha": "b4b9592329b51de90268d4a77f307a1d2671a9fa", "filename": "src/test/run-pass/task-comm-10.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-fast\n \n-extern mod std;\n+extern mod extra;\n \n fn start(c: &comm::Chan<comm::Chan<~str>>) {\n     let (p, ch) = comm::stream();"}, {"sha": "2c6baf91862cb60b0c6a5cc58fc74a484ce087eb", "filename": "src/test/run-pass/task-comm-11.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-fast\n \n-extern mod std;\n+extern mod extra;\n \n fn start(c: &comm::Chan<comm::Chan<int>>) {\n     let (p, ch) = comm::stream();"}, {"sha": "9ecbbaeaee2e422a4ee3f33dea144726ffeb5292", "filename": "src/test/run-pass/task-comm-12.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n+extern mod extra;\n \n pub fn main() { test00(); }\n "}, {"sha": "f10aa46ae6e374caefb600aa217c9989b145f517", "filename": "src/test/run-pass/task-comm-13.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-fast\n \n-extern mod std;\n+extern mod extra;\n \n fn start(c: &comm::Chan<int>, start: int, number_of_messages: int) {\n     let mut i: int = 0;"}, {"sha": "3941f8466660645f08116816c7cb16f1bc3b2f84", "filename": "src/test/run-pass/task-comm-15.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -11,7 +11,7 @@\n // xfail-fast\n // xfail-win32\n \n-extern mod std;\n+extern mod extra;\n \n fn start(c: &comm::Chan<int>, i0: int) {\n     let mut i = i0;"}, {"sha": "25bddc7fe944e3c8d02574271169379664120986", "filename": "src/test/run-pass/task-comm-17.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftask-comm-17.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftask-comm-17.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-17.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -12,7 +12,7 @@\n \n // This test is specifically about spawning temporary closures.\n \n-extern mod std;\n+extern mod extra;\n \n fn f() {\n }"}, {"sha": "faa1d8a69b1a660759d57e362be0e69a4952b517", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,8 +10,8 @@\n \n // xfail-fast\n \n-extern mod std;\n-use core::comm::Chan;\n+extern mod extra;\n+use std::comm::Chan;\n \n pub fn main() { debug!(\"===== WITHOUT THREADS =====\"); test00(); }\n "}, {"sha": "22ca343ff17d7ec0ad94223cf7446089551ad9f0", "filename": "src/test/run-pass/task-comm-5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftask-comm-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftask-comm-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-5.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n+extern mod extra;\n \n pub fn main() { test00(); }\n "}, {"sha": "16d6f53ad86e0f44b54a164078207fbcf7c8cefb", "filename": "src/test/run-pass/task-comm-6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftask-comm-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftask-comm-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-6.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::comm::Chan;\n+use std::comm::Chan;\n \n pub fn main() { test00(); }\n "}, {"sha": "3cc1127fbbf6659534e454d82ad295fbbdeef2ac", "filename": "src/test/run-pass/task-comm-7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-fast\n \n-extern mod std;\n+extern mod extra;\n \n pub fn main() { test00(); }\n "}, {"sha": "41e91097d2730c2c1582cbd4222ecc60349a4f3a", "filename": "src/test/run-pass/task-comm-9.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-fast\n \n-extern mod std;\n+extern mod extra;\n \n pub fn main() { test00(); }\n "}, {"sha": "64b587eff9a0180aede2d4d763962d1abeb1292e", "filename": "src/test/run-pass/task-comm-chan-nil.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftask-comm-chan-nil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftask-comm-chan-nil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-chan-nil.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,7 +10,7 @@\n // except according to those terms.\n \n \n-extern mod std;\n+extern mod extra;\n \n // rustboot can't transmit nils across channels because they don't have\n // any size, but rustc currently can because they do have size. Whether"}, {"sha": "4b89ddc4a6c0bfed65109c7772f5b37ff07f08e5", "filename": "src/test/run-pass/task-killjoin-rsrc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -13,8 +13,8 @@\n // A port of task-killjoin to use a class with a dtor to manage\n // the join.\n \n-use core::cell::Cell;\n-use core::comm::*;\n+use std::cell::Cell;\n+use std::comm::*;\n \n struct notify {\n     ch: Chan<bool>, v: @mut bool,"}, {"sha": "0ec62ff85410b46cb66d5e2922c8e7b6c1151899", "filename": "src/test/run-pass/task-life-0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftask-life-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftask-life-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-life-0.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n+extern mod extra;\n pub fn main() {\n     task::spawn(|| child(~\"Hello\") );\n }"}, {"sha": "3e17c5d992ce24e5914ee5a9e8debc5c97f39bfd", "filename": "src/test/run-pass/task-spawn-move-and-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::comm::*;\n+use std::comm::*;\n \n pub fn main() {\n     let (p, ch) = stream::<uint>();"}, {"sha": "0e1bf1e90622dff1986c338f4183429975a146e2", "filename": "src/test/run-pass/terminate-in-initializer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -12,7 +12,7 @@\n // Issue #787\n // Don't try to clean up uninitialized locals\n \n-extern mod std;\n+extern mod extra;\n \n fn test_break() { loop { let x: @int = break; } }\n "}, {"sha": "536dd78bba1f253248448a3ba4a2bfe055396eb2", "filename": "src/test/run-pass/test-ignore-cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftest-ignore-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftest-ignore-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftest-ignore-cfg.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -11,7 +11,7 @@\n // compile-flags: --test --cfg ignorecfg\n // xfail-fast\n \n-extern mod std;\n+extern mod extra;\n \n #[test]\n #[ignore(cfg(ignorecfg))]"}, {"sha": "3f1e9fe4c519749dd9a341e377e47ba1bfd126c6", "filename": "src/test/run-pass/test-runner-hides-main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftest-runner-hides-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftest-runner-hides-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftest-runner-hides-main.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -11,7 +11,7 @@\n // compile-flags:--test\n // xfail-fast\n \n-extern mod std;\n+extern mod extra;\n \n // Building as a test runner means that a synthetic main will be run,\n // not ours"}, {"sha": "47b49513a60cbabcd4571ab38fa7f8de7e561808", "filename": "src/test/run-pass/threads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fthreads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fthreads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fthreads.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,7 +10,7 @@\n // except according to those terms.\n \n \n-extern mod std;\n+extern mod extra;\n \n pub fn main() {\n     let mut i = 10;"}, {"sha": "87de3a2be1496a621c6b59d9b23591a1f2e7ffb6", "filename": "src/test/run-pass/trait-inheritance-num.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -10,10 +10,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n+extern mod extra;\n \n-use core::cmp::{Eq, Ord};\n-use core::num::NumCast;\n+use std::cmp::{Eq, Ord};\n+use std::num::NumCast;\n \n pub trait NumExt: Num + NumCast + Eq + Ord {}\n "}, {"sha": "ae285f3bc958bef711c7b0d792e5131e965256a9", "filename": "src/test/run-pass/trait-inheritance-num0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num0.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -12,7 +12,7 @@\n \n // Extending Num and using inherited static methods\n \n-use core::num::NumCast;\n+use std::num::NumCast;\n \n trait Num {\n     fn from_int(i: int) -> Self;"}, {"sha": "d22a8154a5b2583b5ecca41e2cd677b43d790c8a", "filename": "src/test/run-pass/trait-inheritance-num1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num1.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::cmp::Ord;\n-use core::num::NumCast;\n+use std::cmp::Ord;\n+use std::num::NumCast;\n \n pub trait NumExt: Num + NumCast + Ord { }\n "}, {"sha": "ff9c792af29b167058491bcecf2387a0ef5df8e9", "filename": "src/test/run-pass/trait-inheritance-num2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -12,9 +12,9 @@\n \n // A more complex example of numeric extensions\n \n-extern mod std;\n+extern mod extra;\n \n-use core::cmp::{Eq, Ord};\n+use std::cmp::{Eq, Ord};\n \n pub trait TypeExt {}\n "}, {"sha": "98fa6a5ebf1d6aa1cb3a04e17628be76d4dc5b3d", "filename": "src/test/run-pass/trait-inheritance-num3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num3.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::cmp::{Eq, Ord};\n-use core::num::NumCast;\n+use std::cmp::{Eq, Ord};\n+use std::num::NumCast;\n \n pub trait NumExt: Eq + Ord + Num + NumCast {}\n "}, {"sha": "f56eca693ea53796e6126503ede3e2c600ab7752", "filename": "src/test/run-pass/trait-inheritance-num5.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num5.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::cmp::{Eq, Ord};\n-use core::num::NumCast;\n+use std::cmp::{Eq, Ord};\n+use std::num::NumCast;\n \n pub trait NumExt: Eq + Num + NumCast {}\n "}, {"sha": "041452176e0e3eecd80bc1bfe9f86d6b29ba621c", "filename": "src/test/run-pass/trait-inheritance-overloading-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading-simple.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::cmp::Eq;\n+use std::cmp::Eq;\n \n trait MyNum : Eq { }\n "}, {"sha": "302d3d87df909b6968b2fd38285b42dbf8cb6954", "filename": "src/test/run-pass/trait-inheritance-overloading.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::cmp::Eq;\n+use std::cmp::Eq;\n \n trait MyNum : Add<Self,Self> + Sub<Self,Self> + Mul<Self,Self> + Eq { }\n "}, {"sha": "ff01efc027eb1a7f702de85c9e2e4bae96ccb1f1", "filename": "src/test/run-pass/trait-to-str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -12,9 +12,9 @@\n \n #[no_std];\n \n-extern mod core;\n+extern mod std;\n \n-use core::{str, int, vec};\n+use std::{str, int, vec};\n \n trait to_str {\n     fn to_str(&self) -> ~str;"}, {"sha": "5695254cdbffbb5e15ed76c48c316b486c814224", "filename": "src/test/run-pass/type-sizes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftype-sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Ftype-sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-sizes.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod core;\n-use core::sys::size_of;\n+extern mod std;\n+use std::sys::size_of;\n \n struct t {a: u8, b: i8}\n struct u {a: u8, b: i8, c: u8}"}, {"sha": "2f686d21b96b73d2112952d6bb2f3f7b5219807a", "filename": "src/test/run-pass/unify-return-ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Funify-return-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Funify-return-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funify-return-ty.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -11,7 +11,7 @@\n // Tests that the tail expr in null() has its type\n // unified with the type *T, and so the type variable\n // in that type gets resolved.\n-extern mod std;\n+extern mod extra;\n \n fn null<T>() -> *T {\n     unsafe {"}, {"sha": "b3ce71dcbff5d1b8f9bc921788ec474fe991ef0c", "filename": "src/test/run-pass/unique-kinds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Funique-kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Funique-kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-kinds.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::cmp::Eq;\n+use std::cmp::Eq;\n \n fn sendable() {\n "}, {"sha": "3684a6ef7883dc096aff36d829d2d65f9440c847", "filename": "src/test/run-pass/unique-send-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Funique-send-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Funique-send-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-send-2.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::comm::*;\n+use std::comm::*;\n \n fn child(c: &SharedChan<~uint>, i: uint) {\n     c.send(~i);"}, {"sha": "05012f789c38fed83472193d05ab6607320432c4", "filename": "src/test/run-pass/unique-send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Funique-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Funique-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-send.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::comm::*;\n+use std::comm::*;\n \n pub fn main() {\n     let (p, c) = stream();"}, {"sha": "a372e4a4d98a6a84f254d38756d46a23cbd75b53", "filename": "src/test/run-pass/unique-swap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Funique-swap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Funique-swap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-swap.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::util;\n+use std::util;\n \n pub fn main() {\n     let mut i = ~100;"}, {"sha": "5184ffb8d239e013fd0a6e08d4e19924537c04cb", "filename": "src/test/run-pass/unwind-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Funwind-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Funwind-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-box.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // xfail-win32\n-extern mod std;\n+extern mod extra;\n \n fn f() {\n     let a = @0;"}, {"sha": "012b12ea99e78a9995bb96232dcf8db5378fd4ac", "filename": "src/test/run-pass/unwind-resource.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n // xfail-win32\n-extern mod std;\n+extern mod extra;\n \n-use core::comm::*;\n+use std::comm::*;\n \n struct complainer {\n   c: SharedChan<bool>,"}, {"sha": "0d7c717cd36afb822190271ff2988cf904812fc1", "filename": "src/test/run-pass/unwind-resource2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource2.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // xfail-win32\n-extern mod std;\n+extern mod extra;\n \n struct complainer {\n   c: @int,"}, {"sha": "f5f5209fa5477dd254952b488d076a7167a852f8", "filename": "src/test/run-pass/unwind-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Funwind-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Funwind-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-unique.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // xfail-win32\n-extern mod std;\n+extern mod extra;\n \n fn f() {\n     let a = ~0;"}, {"sha": "4954de3919ffe74567bc609c41bca0c6a21a5f44", "filename": "src/test/run-pass/use-crate-name-alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fuse-crate-name-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fuse-crate-name-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse-crate-name-alias.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n // Issue #1706\n-extern mod stdlib(name=\"std\");\n+extern mod stdlib(name=\"extra\");\n \n pub fn main() {}"}, {"sha": "d73eb6641fadf80d1d638d2ffc50033f8a80e17e", "filename": "src/test/run-pass/use.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -11,16 +11,16 @@\n // except according to those terms.\n \n #[no_std];\n-extern mod core;\n-extern mod zed(name = \"core\");\n-extern mod bar(name = \"core\", vers = \"0.7-pre\");\n+extern mod std;\n+extern mod zed(name = \"std\");\n+extern mod bar(name = \"std\", vers = \"0.7-pre\");\n \n \n-use core::str;\n+use std::str;\n use x = zed::str;\n mod baz {\n     pub use bar::str;\n-    pub use x = core::str;\n+    pub use x = std::str;\n }\n \n pub fn main() { }"}, {"sha": "23dddf59925772b455a47cb4fe56920611c272db", "filename": "src/test/run-pass/utf8_chars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8_chars.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n+extern mod extra;\n \n pub fn main() {\n     // Chars of 1, 2, 3, and 4 bytes"}, {"sha": "d04deeac52e31aca1f2dddc5cadcff12776a0977", "filename": "src/test/run-pass/vec-matching-autoslice.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fvec-matching-autoslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fvec-matching-autoslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-matching-autoslice.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -1,22 +1,22 @@\n pub fn main() {\n     let x = @[1, 2, 3];\n     match x {\n-        [2, .._] => ::core::util::unreachable(),\n+        [2, .._] => ::std::util::unreachable(),\n         [1, ..tail] => {\n             assert_eq!(tail, [2, 3]);\n         }\n-        [_] => ::core::util::unreachable(),\n-        [] => ::core::util::unreachable()\n+        [_] => ::std::util::unreachable(),\n+        [] => ::std::util::unreachable()\n     }\n \n     let y = (~[(1, true), (2, false)], 0.5);\n     match y {\n-        ([_, _, _], 0.5) => ::core::util::unreachable(),\n+        ([_, _, _], 0.5) => ::std::util::unreachable(),\n         ([(1, a), (b, false), ..tail], _) => {\n             assert_eq!(a, true);\n             assert_eq!(b, 2);\n             assert!(tail.is_empty());\n         }\n-        ([..tail], _) => ::core::util::unreachable()\n+        ([..tail], _) => ::std::util::unreachable()\n     }\n }"}, {"sha": "acd9a9664f78d084cdb6e12f2b1377440c8062d8", "filename": "src/test/run-pass/vec-matching-legal-tail-element-borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fvec-matching-legal-tail-element-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fvec-matching-legal-tail-element-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-matching-legal-tail-element-borrow.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -3,7 +3,7 @@ pub fn main() {\n     if !x.is_empty() {\n         let el = match x {\n             [1, ..ref tail] => &tail[0],\n-            _ => ::core::util::unreachable()\n+            _ => ::std::util::unreachable()\n         };\n         io::println(fmt!(\"%d\", *el));\n     }"}, {"sha": "5e906fa265994c9efded6eca74817bf84b962c25", "filename": "src/test/run-pass/vec-matching.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fvec-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fvec-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-matching.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -1,14 +1,14 @@\n fn a() {\n     let x = [1];\n     match x {\n-        [_, _, _, _, _, .._] => ::core::util::unreachable(),\n-        [.._, _, _, _, _] => ::core::util::unreachable(),\n-        [_, .._, _, _] => ::core::util::unreachable(),\n-        [_, _] => ::core::util::unreachable(),\n+        [_, _, _, _, _, .._] => ::std::util::unreachable(),\n+        [.._, _, _, _, _] => ::std::util::unreachable(),\n+        [_, .._, _, _] => ::std::util::unreachable(),\n+        [_, _] => ::std::util::unreachable(),\n         [a] => {\n             assert_eq!(a, 1);\n         }\n-        [] => ::core::util::unreachable()\n+        [] => ::std::util::unreachable()\n     }\n }\n "}, {"sha": "ef661c7ed6723145ea719abca4ecdf6aebc99ed0", "filename": "src/test/run-pass/vec-self-append.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fvec-self-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fvec-self-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-self-append.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n+extern mod extra;\n \n fn test_heap_to_heap() {\n     // a spills onto the heap"}, {"sha": "cf4aebbd0827006e34fa84d8fb7777fa4f9f246c", "filename": "src/test/run-pass/vec-tail-matching.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fvec-tail-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fvec-tail-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-tail-matching.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -17,19 +17,19 @@ pub fn main() {\n \n             match tail {\n                 [Foo { _ }, _, Foo { _ }, ..tail] => {\n-                    ::core::util::unreachable();\n+                    ::std::util::unreachable();\n                 }\n                 [Foo { string: a }, Foo { string: b }] => {\n                     assert_eq!(a, ~\"bar\");\n                     assert_eq!(b, ~\"baz\");\n                 }\n                 _ => {\n-                    ::core::util::unreachable();\n+                    ::std::util::unreachable();\n                 }\n             }\n         }\n         _ => {\n-            ::core::util::unreachable();\n+            ::std::util::unreachable();\n         }\n     }\n }"}, {"sha": "5a585c8c10e81556832615d7c7f9c43d8c37e61e", "filename": "src/test/run-pass/weird-exprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be40be613177d4849f42da284a3af74e1d58da2/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fweird-exprs.rs?ref=1be40be613177d4849f42da284a3af74e1d58da2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::util;\n+use std::util;\n \n // Just a grab bag of stuff that you wouldn't want to actually write.\n "}]}