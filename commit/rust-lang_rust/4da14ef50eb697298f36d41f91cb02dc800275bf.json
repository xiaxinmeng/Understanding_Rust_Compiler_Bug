{"sha": "4da14ef50eb697298f36d41f91cb02dc800275bf", "node_id": "C_kwDOAAsO6NoAKDRkYTE0ZWY1MGViNjk3Mjk4ZjM2ZDQxZjkxY2IwMmRjODAwMjc1YmY", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-08-23T12:08:30Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-08-23T12:08:30Z"}, "message": "Use CRATE_HIR_ID and CRATE_DEF_ID for obligations from foreign crates", "tree": {"sha": "c4c0e089710c7b0d9703f8dc00e6994e7d9a0610", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4c0e089710c7b0d9703f8dc00e6994e7d9a0610"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4da14ef50eb697298f36d41f91cb02dc800275bf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmMEwz4ACgkQgTGiTgx5\n7698GQ//Xgvd2xS808y1E2YgQPOpfsGdZdmNXcn3gAeWVlQU1sVit3xpl3A0YEsk\nvxvYmGNB21jdlJDOqfYMyPUHFjAbE4/pFJqb01QExXN4XxgZ2x7fe8DmQ66RiFw9\nwUYPLksI7JSmnWAhBWx67yo/naRw5/ohee44b0J0ysvWpgNximFyJBvTgKu/zSz6\nLdrQSAVkwmoDAXoIHqZBLs+j+KPoJOtWfzLV+POywiVWsFihccKvskltBx9HcFxC\n1VCe2+L+pCuom6/3MTO0SL9oRPbZkOAMF/lDmmEPXAKNe+1uJAmTq6qid/pVgvin\nVMLQ9mQOuMJk0oEoWLjUGOYs9lFOwEYsqDhLhOeZcT7rsrVUe3abo4I7WunZNFxP\n8l04AoRgTLCUk03cN7o9KocMUr/aj23ndXYPjNuiA0nMCTpAfCtbsXh/Uhd51DbJ\nuYLIaee1CemRyiJB2fLfyYNoUyDuKkl4xUWJ4oIC1c+KOoexahXxHSxZWChg1Fkm\nGxJeWfzg1C7BE2jOg3WMEgKcEjOZbVHLw4iHgQDWWnm/lPMG2gCWhjkj8BgIbcB2\ntit5Qsz9rTfOVJ0Aixc+dpebrUci1MQClRl/IjitJjFY8vOh9anh2HvoDgjRVyLC\nt5DFCHy95waKfb3Ls+RlO22e8Wl1iRSGLfrMye+Zc1ia8sNSFZE=\n=Pt+T\n-----END PGP SIGNATURE-----", "payload": "tree c4c0e089710c7b0d9703f8dc00e6994e7d9a0610\nparent 4cb492e7408c9c54fbc9e6ad5a13af650514c715\nauthor Santiago Pastorino <spastorino@gmail.com> 1661256510 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1661256510 -0300\n\nUse CRATE_HIR_ID and CRATE_DEF_ID for obligations from foreign crates\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4da14ef50eb697298f36d41f91cb02dc800275bf", "html_url": "https://github.com/rust-lang/rust/commit/4da14ef50eb697298f36d41f91cb02dc800275bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4da14ef50eb697298f36d41f91cb02dc800275bf/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cb492e7408c9c54fbc9e6ad5a13af650514c715", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cb492e7408c9c54fbc9e6ad5a13af650514c715", "html_url": "https://github.com/rust-lang/rust/commit/4cb492e7408c9c54fbc9e6ad5a13af650514c715"}], "stats": {"total": 24, "additions": 13, "deletions": 11}, "files": [{"sha": "292787d4dbb24563f4fb6b76b04f951a784c9df2", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4da14ef50eb697298f36d41f91cb02dc800275bf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da14ef50eb697298f36d41f91cb02dc800275bf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=4da14ef50eb697298f36d41f91cb02dc800275bf", "patch": "@@ -16,7 +16,8 @@ use crate::traits::{\n };\n use rustc_data_structures::fx::FxIndexSet;\n use rustc_errors::Diagnostic;\n-use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, CRATE_DEF_ID, LOCAL_CRATE};\n+use rustc_hir::CRATE_HIR_ID;\n use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n use rustc_infer::traits::util;\n use rustc_middle::traits::specialization_graph::OverlapMode;\n@@ -395,19 +396,20 @@ fn resolve_negative_obligation<'cx, 'tcx>(\n         return false;\n     }\n \n-    let outlives_env = if let Some(body_def_id) = body_def_id.as_local() {\n-        let body_id = tcx.hir().local_def_id_to_hir_id(body_def_id);\n-        let ocx = ObligationCtxt::new(&infcx);\n-        let wf_tys = ocx.assumed_wf_types(param_env, DUMMY_SP, body_def_id);\n-        OutlivesEnvironment::with_bounds(\n-            param_env,\n-            Some(&infcx),\n-            infcx.implied_bounds_tys(param_env, body_id, wf_tys),\n-        )\n+    let (body_id, body_def_id) = if let Some(body_def_id) = body_def_id.as_local() {\n+        (tcx.hir().local_def_id_to_hir_id(body_def_id), body_def_id)\n     } else {\n-        OutlivesEnvironment::new(param_env)\n+        (CRATE_HIR_ID, CRATE_DEF_ID)\n     };\n \n+    let ocx = ObligationCtxt::new(&infcx);\n+    let wf_tys = ocx.assumed_wf_types(param_env, DUMMY_SP, body_def_id);\n+    let outlives_env = OutlivesEnvironment::with_bounds(\n+        param_env,\n+        Some(&infcx),\n+        infcx.implied_bounds_tys(param_env, body_id, wf_tys),\n+    );\n+\n     infcx.process_registered_region_obligations(outlives_env.region_bound_pairs(), param_env);\n \n     infcx.resolve_regions(&outlives_env).is_empty()"}]}