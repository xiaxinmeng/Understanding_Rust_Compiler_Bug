{"sha": "3beb762dcf2ff721f2c30534ab6ce6b94c3aebaf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiZWI3NjJkY2YyZmY3MjFmMmMzMDUzNGFiNmNlNmI5NGMzYWViYWY=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-09-12T10:46:48Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-09-12T10:46:48Z"}, "message": "Really make CGU names unique across crates.", "tree": {"sha": "77e88e2794da1982b8583bc1c6103eb0d49d9b9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77e88e2794da1982b8583bc1c6103eb0d49d9b9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3beb762dcf2ff721f2c30534ab6ce6b94c3aebaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3beb762dcf2ff721f2c30534ab6ce6b94c3aebaf", "html_url": "https://github.com/rust-lang/rust/commit/3beb762dcf2ff721f2c30534ab6ce6b94c3aebaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3beb762dcf2ff721f2c30534ab6ce6b94c3aebaf/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2b991b5305b770c7d5288ab3aa231428511c530", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2b991b5305b770c7d5288ab3aa231428511c530", "html_url": "https://github.com/rust-lang/rust/commit/a2b991b5305b770c7d5288ab3aa231428511c530"}], "stats": {"total": 63, "additions": 44, "deletions": 19}, "files": [{"sha": "4d353a36db02a4b249cc0fe6e35b1b1adc392f0e", "filename": "src/librustc/mir/mono.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3beb762dcf2ff721f2c30534ab6ce6b94c3aebaf/src%2Flibrustc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3beb762dcf2ff721f2c30534ab6ce6b94c3aebaf/src%2Flibrustc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmono.rs?ref=3beb762dcf2ff721f2c30534ab6ce6b94c3aebaf", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use hir::def_id::{DefId, CrateNum};\n+use hir::def_id::{DefId, CrateNum, LOCAL_CRATE};\n use syntax::ast::NodeId;\n use syntax::symbol::{Symbol, InternedString};\n use ty::{Instance, TyCtxt};\n@@ -266,7 +266,8 @@ impl<'a, 'gcx: 'tcx, 'tcx: 'a> CodegenUnitNameBuilder<'a, 'gcx, 'tcx> {\n     /// This function will build CGU names of the form:\n     ///\n     /// ```\n-    /// <crate-name>.<crate-disambiguator>(-<component>)*[.<special-suffix>]\n+    /// <crate-name>.<crate-disambiguator>[-in-<local-crate-id>](-<component>)*[.<special-suffix>]\n+    /// <local-crate-id> = <local-crate-name>.<local-crate-disambiguator>\n     /// ```\n     ///\n     /// The '.' before `<special-suffix>` makes sure that names with a special\n@@ -311,9 +312,25 @@ impl<'a, 'gcx: 'tcx, 'tcx: 'a> CodegenUnitNameBuilder<'a, 'gcx, 'tcx> {\n         // Start out with the crate name and disambiguator\n         let tcx = self.tcx;\n         let crate_prefix = self.cache.entry(cnum).or_insert_with(|| {\n+            // Whenever the cnum is not LOCAL_CRATE we also mix in the\n+            // local crate's ID. Otherwise there can be collisions between CGUs\n+            // instantiating stuff for upstream crates.\n+            let local_crate_id = if cnum != LOCAL_CRATE {\n+                let local_crate_disambiguator =\n+                    format!(\"{}\", tcx.crate_disambiguator(LOCAL_CRATE));\n+                format!(\"-in-{}.{}\",\n+                        tcx.crate_name(LOCAL_CRATE),\n+                        &local_crate_disambiguator[0 .. 8])\n+            } else {\n+                String::new()\n+            };\n+\n             let crate_disambiguator = format!(\"{}\", tcx.crate_disambiguator(cnum));\n             // Using a shortened disambiguator of about 40 bits\n-            format!(\"{}.{}\", tcx.crate_name(cnum), &crate_disambiguator[0 .. 8])\n+            format!(\"{}.{}{}\",\n+                tcx.crate_name(cnum),\n+                &crate_disambiguator[0 .. 8],\n+                local_crate_id)\n         });\n \n         write!(cgu_name, \"{}\", crate_prefix).unwrap();"}, {"sha": "e604d6a92c29c1eaa3f34354a4d4f3cd40e205fb", "filename": "src/test/codegen-units/partitioning/extern-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3beb762dcf2ff721f2c30534ab6ce6b94c3aebaf/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3beb762dcf2ff721f2c30534ab6ce6b94c3aebaf/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-generic.rs?ref=3beb762dcf2ff721f2c30534ab6ce6b94c3aebaf", "patch": "@@ -58,5 +58,5 @@ mod mod3 {\n \n // Make sure the two generic functions from the extern crate get instantiated\n // once for the current crate\n-//~ MONO_ITEM fn cgu_generic_function::foo[0]<&str> @@ cgu_generic_function.volatile[External]\n-//~ MONO_ITEM fn cgu_generic_function::bar[0]<&str> @@ cgu_generic_function.volatile[External]\n+//~ MONO_ITEM fn cgu_generic_function::foo[0]<&str> @@ cgu_generic_function-in-extern_generic.volatile[External]\n+//~ MONO_ITEM fn cgu_generic_function::bar[0]<&str> @@ cgu_generic_function-in-extern_generic.volatile[External]"}, {"sha": "8c261f967ca73ec629e135c39b44718554fdfeca", "filename": "src/test/codegen-units/partitioning/shared-generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3beb762dcf2ff721f2c30534ab6ce6b94c3aebaf/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fshared-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3beb762dcf2ff721f2c30534ab6ce6b94c3aebaf/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fshared-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fshared-generics.rs?ref=3beb762dcf2ff721f2c30534ab6ce6b94c3aebaf", "patch": "@@ -19,7 +19,7 @@ extern crate shared_generics_aux;\n //~ MONO_ITEM fn shared_generics::foo[0]\n pub fn foo() {\n \n-    //~ MONO_ITEM fn shared_generics_aux::generic_fn[0]<u16> @@ shared_generics_aux.volatile[External]\n+    //~ MONO_ITEM fn shared_generics_aux::generic_fn[0]<u16> @@ shared_generics_aux-in-shared_generics.volatile[External]\n     let _ = shared_generics_aux::generic_fn(0u16, 1u16);\n \n     // This should not generate a monomorphization because it's already"}, {"sha": "0ee3143935897e50475261294f4f10b54baa9676", "filename": "src/tools/compiletest/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3beb762dcf2ff721f2c30534ab6ce6b94c3aebaf/src%2Ftools%2Fcompiletest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3beb762dcf2ff721f2c30534ab6ce6b94c3aebaf/src%2Ftools%2Fcompiletest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2FCargo.toml?ref=3beb762dcf2ff721f2c30534ab6ce6b94c3aebaf", "patch": "@@ -14,11 +14,11 @@ serde = \"1.0\"\n serde_json = \"1.0\"\n serde_derive = \"1.0\"\n rustfix = \"0.4.1\"\n+lazy_static = \"1.0\"\n \n [target.'cfg(unix)'.dependencies]\n libc = \"0.2\"\n \n [target.'cfg(windows)'.dependencies]\n-lazy_static = \"1.0\"\n miow = \"0.3\"\n winapi = { version = \"0.3\", features = [\"winerror\"] }"}, {"sha": "a5cf45baa653ad0c79b17b3f50f79baac92db423", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3beb762dcf2ff721f2c30534ab6ce6b94c3aebaf/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3beb762dcf2ff721f2c30534ab6ce6b94c3aebaf/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=3beb762dcf2ff721f2c30534ab6ce6b94c3aebaf", "patch": "@@ -22,7 +22,6 @@ extern crate libc;\n extern crate log;\n extern crate regex;\n #[macro_use]\n-#[cfg(windows)]\n extern crate lazy_static;\n #[macro_use]\n extern crate serde_derive;"}, {"sha": "2d49c83edb917db3d67d26069fc8fb95c5ee09e5", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3beb762dcf2ff721f2c30534ab6ce6b94c3aebaf/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3beb762dcf2ff721f2c30534ab6ce6b94c3aebaf/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=3beb762dcf2ff721f2c30534ab6ce6b94c3aebaf", "patch": "@@ -2355,21 +2355,30 @@ impl<'test> TestCx<'test> {\n             string\n         }\n \n+        // Given a cgu-name-prefix of the form <crate-name>.<crate-disambiguator> or\n+        // the form <crate-name1>.<crate-disambiguator1>-in-<crate-name2>.<crate-disambiguator2>,\n+        // remove all crate-disambiguators.\n         fn remove_crate_disambiguator_from_cgu(cgu: &str) -> String {\n-            // The first '.' is the start of the crate disambiguator\n-            let disambiguator_start = cgu.find('.')\n-                .expect(\"Could not find start of crate disambiguator in CGU spec\");\n+            lazy_static! {\n+                static ref RE: Regex = Regex::new(\n+                    r\"^[^\\.]+(?P<d1>\\.[[:alnum:]]+)(-in-[^\\.]+(?P<d2>\\.[[:alnum:]]+))?\"\n+                ).unwrap();\n+            }\n+\n+            let captures = RE.captures(cgu).unwrap_or_else(|| {\n+                panic!(\"invalid cgu name encountered: {}\", cgu)\n+            });\n \n-            // The first non-alphanumeric character is the end of the disambiguator\n-            let disambiguator_end = cgu[disambiguator_start + 1 ..]\n-                .find(|c| !char::is_alphanumeric(c))\n-                .expect(\"Could not find end of crate disambiguator in CGU spec\")\n-                + disambiguator_start + 1;\n+            let mut new_name = cgu.to_owned();\n+\n+            if let Some(d2) = captures.name(\"d2\") {\n+                new_name.replace_range(d2.start() .. d2.end(), \"\");\n+            }\n \n-            let mut result = cgu[0 .. disambiguator_start].to_string();\n-            result.push_str(&cgu[disambiguator_end ..]);\n+            let d1 = captures.name(\"d1\").unwrap();\n+            new_name.replace_range(d1.start() .. d1.end(), \"\");\n \n-            result\n+            new_name\n         }\n     }\n "}]}