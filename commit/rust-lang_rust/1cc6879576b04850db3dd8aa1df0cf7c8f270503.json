{"sha": "1cc6879576b04850db3dd8aa1df0cf7c8f270503", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjYzY4Nzk1NzZiMDQ4NTBkYjNkZDhhYTFkZjBjZjdjOGYyNzA1MDM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-06T14:19:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-06T14:19:58Z"}, "message": "Merge #3489\n\n3489: More robust expression lowering  r=matklad a=matklad\n\nCloses #2236\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "9221e6742315cc0faa8cdec5d44852afcf7d28e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9221e6742315cc0faa8cdec5d44852afcf7d28e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cc6879576b04850db3dd8aa1df0cf7c8f270503", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeYlwOCRBK7hj4Ov3rIwAAdHIIAHwHgEfUud8cUqmhu6xru/3Z\nvlvHpwg+153mnWcgXBFBwDXabSDQctJdf1FHyyeuPNxa44FRAMS1q4b43jmygEG9\nn+xQfmoi1tqpgVdlN4Jm+kPmfOgsQ/+fxtpUE8FnOYGBr69iXs0w01hxdlCeGfU9\nTHSYTGXqc71V94eaoH2M7TOwFWZiCQaVQCenKKx0XZ6/i0chtgQxQEeFfYDqAyS7\n3TFFaphFyaUN69SKJ9kKOQXduSZ0ii1hVnTNlGi13YCMdF00Hd9fJkEGXVDkAw53\nmQrZ1qDasvn6sHRHefTpA7gUKbo/QGkpsmwRL65PfdHb+Xsm7XZb6tcbh6PTO8o=\n=r+t5\n-----END PGP SIGNATURE-----\n", "payload": "tree 9221e6742315cc0faa8cdec5d44852afcf7d28e1\nparent 5947c1f8b52deb4fcfd97970ba6eb473f092cb94\nparent 57da3df99a52ccedd7a684d2053db766e5681a61\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1583504398 +0000\ncommitter GitHub <noreply@github.com> 1583504398 +0000\n\nMerge #3489\n\n3489: More robust expression lowering  r=matklad a=matklad\n\nCloses #2236\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cc6879576b04850db3dd8aa1df0cf7c8f270503", "html_url": "https://github.com/rust-lang/rust/commit/1cc6879576b04850db3dd8aa1df0cf7c8f270503", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cc6879576b04850db3dd8aa1df0cf7c8f270503/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5947c1f8b52deb4fcfd97970ba6eb473f092cb94", "url": "https://api.github.com/repos/rust-lang/rust/commits/5947c1f8b52deb4fcfd97970ba6eb473f092cb94", "html_url": "https://github.com/rust-lang/rust/commit/5947c1f8b52deb4fcfd97970ba6eb473f092cb94"}, {"sha": "57da3df99a52ccedd7a684d2053db766e5681a61", "url": "https://api.github.com/repos/rust-lang/rust/commits/57da3df99a52ccedd7a684d2053db766e5681a61", "html_url": "https://github.com/rust-lang/rust/commit/57da3df99a52ccedd7a684d2053db766e5681a61"}], "stats": {"total": 89, "additions": 51, "deletions": 38}, "files": [{"sha": "da7af110c946aedf9030f20f67c98e6694a33d8c", "filename": "crates/ra_db/src/fixture.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cc6879576b04850db3dd8aa1df0cf7c8f270503/crates%2Fra_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc6879576b04850db3dd8aa1df0cf7c8f270503/crates%2Fra_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Ffixture.rs?ref=1cc6879576b04850db3dd8aa1df0cf7c8f270503", "patch": "@@ -21,9 +21,9 @@ pub trait WithFixture: Default + SourceDatabaseExt + 'static {\n         (db, file_id)\n     }\n \n-    fn with_files(fixture: &str) -> Self {\n+    fn with_files(ra_fixture: &str) -> Self {\n         let mut db = Self::default();\n-        let pos = with_files(&mut db, fixture);\n+        let pos = with_files(&mut db, ra_fixture);\n         assert!(pos.is_none());\n         db\n     }"}, {"sha": "331ecdd9cc3bc4348bd06b434fee4da41378d7a1", "filename": "crates/ra_hir/src/source_analyzer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cc6879576b04850db3dd8aa1df0cf7c8f270503/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc6879576b04850db3dd8aa1df0cf7c8f270503/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs?ref=1cc6879576b04850db3dd8aa1df0cf7c8f270503", "patch": "@@ -261,7 +261,7 @@ fn scope_for_offset(\n         .scope_by_expr()\n         .iter()\n         .filter_map(|(id, scope)| {\n-            let source = source_map.expr_syntax(*id)?;\n+            let source = source_map.expr_syntax(*id).ok()?;\n             // FIXME: correctly handle macro expansion\n             if source.file_id != offset.file_id {\n                 return None;\n@@ -337,7 +337,7 @@ fn adjust(\n         .scope_by_expr()\n         .iter()\n         .filter_map(|(id, scope)| {\n-            let source = source_map.expr_syntax(*id)?;\n+            let source = source_map.expr_syntax(*id).ok()?;\n             // FIXME: correctly handle macro expansion\n             if source.file_id != file_id {\n                 return None;"}, {"sha": "57ba45b455cd6e6d5e18ac6dd6325096a0c9339f", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1cc6879576b04850db3dd8aa1df0cf7c8f270503/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc6879576b04850db3dd8aa1df0cf7c8f270503/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=1cc6879576b04850db3dd8aa1df0cf7c8f270503", "patch": "@@ -149,13 +149,16 @@ pub type PatSource = InFile<PatPtr>;\n #[derive(Default, Debug, Eq, PartialEq)]\n pub struct BodySourceMap {\n     expr_map: FxHashMap<ExprSource, ExprId>,\n-    expr_map_back: ArenaMap<ExprId, ExprSource>,\n+    expr_map_back: ArenaMap<ExprId, Result<ExprSource, SyntheticSyntax>>,\n     pat_map: FxHashMap<PatSource, PatId>,\n-    pat_map_back: ArenaMap<PatId, PatSource>,\n+    pat_map_back: ArenaMap<PatId, Result<PatSource, SyntheticSyntax>>,\n     field_map: FxHashMap<(ExprId, usize), AstPtr<ast::RecordField>>,\n     expansions: FxHashMap<InFile<AstPtr<ast::MacroCall>>, HirFileId>,\n }\n \n+#[derive(Default, Debug, Eq, PartialEq, Clone, Copy)]\n+pub struct SyntheticSyntax;\n+\n impl Body {\n     pub(crate) fn body_with_source_map_query(\n         db: &impl DefDatabase,\n@@ -219,8 +222,8 @@ impl Index<PatId> for Body {\n }\n \n impl BodySourceMap {\n-    pub fn expr_syntax(&self, expr: ExprId) -> Option<ExprSource> {\n-        self.expr_map_back.get(expr).copied()\n+    pub fn expr_syntax(&self, expr: ExprId) -> Result<ExprSource, SyntheticSyntax> {\n+        self.expr_map_back[expr]\n     }\n \n     pub fn node_expr(&self, node: InFile<&ast::Expr>) -> Option<ExprId> {\n@@ -238,8 +241,8 @@ impl BodySourceMap {\n         self.expr_map.get(&src).cloned()\n     }\n \n-    pub fn pat_syntax(&self, pat: PatId) -> Option<PatSource> {\n-        self.pat_map_back.get(pat).copied()\n+    pub fn pat_syntax(&self, pat: PatId) -> Result<PatSource, SyntheticSyntax> {\n+        self.pat_map_back[pat]\n     }\n \n     pub fn node_pat(&self, node: InFile<&ast::Pat>) -> Option<PatId> {"}, {"sha": "ec1b0c2e704b2e23bba6d91ba2fd66aaf6cd2090", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/1cc6879576b04850db3dd8aa1df0cf7c8f270503/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc6879576b04850db3dd8aa1df0cf7c8f270503/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=1cc6879576b04850db3dd8aa1df0cf7c8f270503", "patch": "@@ -14,9 +14,10 @@ use ra_syntax::{\n };\n use test_utils::tested_by;\n \n+use super::{ExprSource, PatSource};\n use crate::{\n     adt::StructKind,\n-    body::{Body, BodySourceMap, Expander, PatPtr},\n+    body::{Body, BodySourceMap, Expander, PatPtr, SyntheticSyntax},\n     builtin_type::{BuiltinFloat, BuiltinInt},\n     db::DefDatabase,\n     expr::{\n@@ -102,44 +103,48 @@ where\n \n     fn alloc_expr(&mut self, expr: Expr, ptr: AstPtr<ast::Expr>) -> ExprId {\n         let ptr = Either::Left(ptr);\n-        let id = self.body.exprs.alloc(expr);\n         let src = self.expander.to_source(ptr);\n+        let id = self.make_expr(expr, Ok(src));\n         self.source_map.expr_map.insert(src, id);\n-        self.source_map.expr_map_back.insert(id, src);\n         id\n     }\n     // desugared exprs don't have ptr, that's wrong and should be fixed\n     // somehow.\n     fn alloc_expr_desugared(&mut self, expr: Expr) -> ExprId {\n-        self.body.exprs.alloc(expr)\n+        self.make_expr(expr, Err(SyntheticSyntax))\n     }\n     fn alloc_expr_field_shorthand(&mut self, expr: Expr, ptr: AstPtr<ast::RecordField>) -> ExprId {\n         let ptr = Either::Right(ptr);\n-        let id = self.body.exprs.alloc(expr);\n         let src = self.expander.to_source(ptr);\n+        let id = self.make_expr(expr, Ok(src));\n         self.source_map.expr_map.insert(src, id);\n+        id\n+    }\n+    fn empty_block(&mut self) -> ExprId {\n+        self.alloc_expr_desugared(Expr::Block { statements: Vec::new(), tail: None })\n+    }\n+    fn missing_expr(&mut self) -> ExprId {\n+        self.alloc_expr_desugared(Expr::Missing)\n+    }\n+    fn make_expr(&mut self, expr: Expr, src: Result<ExprSource, SyntheticSyntax>) -> ExprId {\n+        let id = self.body.exprs.alloc(expr);\n         self.source_map.expr_map_back.insert(id, src);\n         id\n     }\n+\n     fn alloc_pat(&mut self, pat: Pat, ptr: PatPtr) -> PatId {\n-        let id = self.body.pats.alloc(pat);\n         let src = self.expander.to_source(ptr);\n+        let id = self.make_pat(pat, Ok(src));\n         self.source_map.pat_map.insert(src, id);\n-        self.source_map.pat_map_back.insert(id, src);\n         id\n     }\n-\n-    fn empty_block(&mut self) -> ExprId {\n-        let block = Expr::Block { statements: Vec::new(), tail: None };\n-        self.body.exprs.alloc(block)\n-    }\n-\n-    fn missing_expr(&mut self) -> ExprId {\n-        self.body.exprs.alloc(Expr::Missing)\n-    }\n-\n     fn missing_pat(&mut self) -> PatId {\n-        self.body.pats.alloc(Pat::Missing)\n+        self.make_pat(Pat::Missing, Err(SyntheticSyntax))\n+    }\n+    fn make_pat(&mut self, pat: Pat, src: Result<PatSource, SyntheticSyntax>) -> PatId {\n+        let id = self.body.pats.alloc(pat);\n+        self.source_map.pat_map_back.insert(id, src);\n+        id\n     }\n \n     fn collect_expr(&mut self, expr: ast::Expr) -> ExprId {"}, {"sha": "d8cdf5266e1a385c4d79e25975d7538bcbdb8187", "filename": "crates/ra_hir_ty/src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cc6879576b04850db3dd8aa1df0cf7c8f270503/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc6879576b04850db3dd8aa1df0cf7c8f270503/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs?ref=1cc6879576b04850db3dd8aa1df0cf7c8f270503", "patch": "@@ -100,7 +100,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         }\n         let (_, source_map) = db.body_with_source_map(self.func.into());\n \n-        if let Some(source_ptr) = source_map.expr_syntax(id) {\n+        if let Ok(source_ptr) = source_map.expr_syntax(id) {\n             if let Some(expr) = source_ptr.value.left() {\n                 let root = source_ptr.file_syntax(db);\n                 if let ast::Expr::RecordLit(record_lit) = expr.to_node(&root) {\n@@ -145,7 +145,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         if params.len() == 2 && params[0] == mismatch.actual {\n             let (_, source_map) = db.body_with_source_map(self.func.into());\n \n-            if let Some(source_ptr) = source_map.expr_syntax(id) {\n+            if let Ok(source_ptr) = source_map.expr_syntax(id) {\n                 if let Some(expr) = source_ptr.value.left() {\n                     self.sink.push(MissingOkInTailExpr { file: source_ptr.file_id, expr });\n                 }"}, {"sha": "7e95473408af4cb40077c94ee19a7e2bf720e79e", "filename": "crates/ra_hir_ty/src/tests.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1cc6879576b04850db3dd8aa1df0cf7c8f270503/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc6879576b04850db3dd8aa1df0cf7c8f270503/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs?ref=1cc6879576b04850db3dd8aa1df0cf7c8f270503", "patch": "@@ -11,8 +11,13 @@ use std::fmt::Write;\n use std::sync::Arc;\n \n use hir_def::{\n-    body::BodySourceMap, child_by_source::ChildBySource, db::DefDatabase, item_scope::ItemScope,\n-    keys, nameres::CrateDefMap, AssocItemId, DefWithBodyId, LocalModuleId, Lookup, ModuleDefId,\n+    body::{BodySourceMap, SyntheticSyntax},\n+    child_by_source::ChildBySource,\n+    db::DefDatabase,\n+    item_scope::ItemScope,\n+    keys,\n+    nameres::CrateDefMap,\n+    AssocItemId, DefWithBodyId, LocalModuleId, Lookup, ModuleDefId,\n };\n use hir_expand::InFile;\n use insta::assert_snapshot;\n@@ -67,20 +72,20 @@ fn infer_with_mismatches(content: &str, include_mismatches: bool) -> String {\n \n         for (pat, ty) in inference_result.type_of_pat.iter() {\n             let syntax_ptr = match body_source_map.pat_syntax(pat) {\n-                Some(sp) => {\n+                Ok(sp) => {\n                     sp.map(|ast| ast.either(|it| it.syntax_node_ptr(), |it| it.syntax_node_ptr()))\n                 }\n-                None => continue,\n+                Err(SyntheticSyntax) => continue,\n             };\n             types.push((syntax_ptr, ty));\n         }\n \n         for (expr, ty) in inference_result.type_of_expr.iter() {\n             let syntax_ptr = match body_source_map.expr_syntax(expr) {\n-                Some(sp) => {\n+                Ok(sp) => {\n                     sp.map(|ast| ast.either(|it| it.syntax_node_ptr(), |it| it.syntax_node_ptr()))\n                 }\n-                None => continue,\n+                Err(SyntheticSyntax) => continue,\n             };\n             types.push((syntax_ptr, ty));\n             if let Some(mismatch) = inference_result.type_mismatch_for_expr(expr) {"}, {"sha": "643c54a9df09d33149d0562387d9aa7a9e6409d6", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cc6879576b04850db3dd8aa1df0cf7c8f270503/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc6879576b04850db3dd8aa1df0cf7c8f270503/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=1cc6879576b04850db3dd8aa1df0cf7c8f270503", "patch": "@@ -158,7 +158,7 @@ pub fn analysis_stats(\n                 // in super-verbose mode for just one function, we print every single expression\n                 let (_, sm) = db.body_with_source_map(f_id.into());\n                 let src = sm.expr_syntax(expr_id);\n-                if let Some(src) = src {\n+                if let Ok(src) = src {\n                     let original_file = src.file_id.original_file(db);\n                     let line_index = host.analysis().file_line_index(original_file).unwrap();\n                     let text_range = src.value.either(\n@@ -186,7 +186,7 @@ pub fn analysis_stats(\n                 if verbosity.is_verbose() {\n                     let (_, sm) = db.body_with_source_map(f_id.into());\n                     let src = sm.expr_syntax(expr_id);\n-                    if let Some(src) = src {\n+                    if let Ok(src) = src {\n                         // FIXME: it might be nice to have a function (on Analysis?) that goes from Source<T> -> (LineCol, LineCol) directly\n                         // But also, we should just turn the type mismatches into diagnostics and provide these\n                         let root = db.parse_or_expand(src.file_id).unwrap();"}]}