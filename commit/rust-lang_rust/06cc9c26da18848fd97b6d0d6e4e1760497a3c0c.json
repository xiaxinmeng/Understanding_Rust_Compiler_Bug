{"sha": "06cc9c26da18848fd97b6d0d6e4e1760497a3c0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2Y2M5YzI2ZGExODg0OGZkOTdiNmQwZDZlNGUxNzYwNDk3YTNjMGM=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-11-17T09:55:13Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-12-26T17:24:10Z"}, "message": "stabilize min_const_generics", "tree": {"sha": "04b26f2ed62099fd2880b064544c14a1f290503a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04b26f2ed62099fd2880b064544c14a1f290503a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06cc9c26da18848fd97b6d0d6e4e1760497a3c0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06cc9c26da18848fd97b6d0d6e4e1760497a3c0c", "html_url": "https://github.com/rust-lang/rust/commit/06cc9c26da18848fd97b6d0d6e4e1760497a3c0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06cc9c26da18848fd97b6d0d6e4e1760497a3c0c/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f5beec3b111560be181283009ef96da6ac5e7a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f5beec3b111560be181283009ef96da6ac5e7a7", "html_url": "https://github.com/rust-lang/rust/commit/1f5beec3b111560be181283009ef96da6ac5e7a7"}], "stats": {"total": 92, "additions": 41, "deletions": 51}, "files": [{"sha": "a0493056b816b8c8df0e6db135a0e6e2a3d45483", "filename": "compiler/rustc_arena/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06cc9c26da18848fd97b6d0d6e4e1760497a3c0c/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06cc9c26da18848fd97b6d0d6e4e1760497a3c0c/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_arena%2Fsrc%2Flib.rs?ref=06cc9c26da18848fd97b6d0d6e4e1760497a3c0c", "patch": "@@ -16,7 +16,7 @@\n #![feature(new_uninit)]\n #![feature(maybe_uninit_slice)]\n #![feature(array_value_iter)]\n-#![feature(min_const_generics)]\n+#![cfg_attr(bootstrap, feature(min_const_generics))]\n #![feature(min_specialization)]\n #![cfg_attr(test, feature(test))]\n "}, {"sha": "45cc6d894e9e834f770b869a3f2459b3450cfbc3", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06cc9c26da18848fd97b6d0d6e4e1760497a3c0c/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06cc9c26da18848fd97b6d0d6e4e1760497a3c0c/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=06cc9c26da18848fd97b6d0d6e4e1760497a3c0c", "patch": "@@ -1128,7 +1128,7 @@ impl Expr {\n     /// Is this expr either `N`, or `{ N }`.\n     ///\n     /// If this is not the case, name resolution does not resolve `N` when using\n-    /// `feature(min_const_generics)` as more complex expressions are not supported.\n+    /// `min_const_generics` as more complex expressions are not supported.\n     pub fn is_potential_trivial_const_param(&self) -> bool {\n         let this = if let ExprKind::Block(ref block, None) = self.kind {\n             if block.stmts.len() == 1 {"}, {"sha": "686300c7c5fecf82858c0d553b2f5900e09674b0", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/06cc9c26da18848fd97b6d0d6e4e1760497a3c0c/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06cc9c26da18848fd97b6d0d6e4e1760497a3c0c/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=06cc9c26da18848fd97b6d0d6e4e1760497a3c0c", "patch": "@@ -773,14 +773,12 @@ fn validate_generic_param_order<'a>(\n         err.span_suggestion(\n             span,\n             &format!(\n-                \"reorder the parameters: lifetimes{}\",\n+                \"reorder the parameters: lifetimes, {}\",\n                 if sess.features_untracked().const_generics {\n-                    \", then consts and types\"\n-                } else if sess.features_untracked().min_const_generics {\n-                    \", then types, then consts\"\n+                    \"then consts and types\"\n                 } else {\n-                    \", then types\"\n-                },\n+                    \"then types, then consts\"\n+                }\n             ),\n             ordered_params.clone(),\n             Applicability::MachineApplicable,"}, {"sha": "56e1f9989b06f437127908fe68ff381d646fc7dc", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/06cc9c26da18848fd97b6d0d6e4e1760497a3c0c/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06cc9c26da18848fd97b6d0d6e4e1760497a3c0c/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=06cc9c26da18848fd97b6d0d6e4e1760497a3c0c", "patch": "@@ -1,7 +1,7 @@\n use rustc_ast as ast;\n use rustc_ast::visit::{self, AssocCtxt, FnCtxt, FnKind, Visitor};\n use rustc_ast::{AssocTyConstraint, AssocTyConstraintKind, NodeId};\n-use rustc_ast::{GenericParam, GenericParamKind, PatKind, RangeEnd, VariantData};\n+use rustc_ast::{PatKind, RangeEnd, VariantData};\n use rustc_errors::struct_span_err;\n use rustc_feature::{AttributeGate, BUILTIN_ATTRIBUTE_MAP};\n use rustc_feature::{Features, GateIssue};\n@@ -529,19 +529,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         visit::walk_fn(self, fn_kind, span)\n     }\n \n-    fn visit_generic_param(&mut self, param: &'a GenericParam) {\n-        if let GenericParamKind::Const { .. } = param.kind {\n-            gate_feature_fn!(\n-                &self,\n-                |x: &Features| x.const_generics || x.min_const_generics,\n-                param.ident.span,\n-                sym::min_const_generics,\n-                \"const generics are unstable\"\n-            );\n-        }\n-        visit::walk_generic_param(self, param)\n-    }\n-\n     fn visit_assoc_ty_constraint(&mut self, constraint: &'a AssocTyConstraint) {\n         if let AssocTyConstraintKind::Bound { .. } = constraint.kind {\n             gate_feature_post!("}, {"sha": "01d3a759316e1ec89463c3b189bab86dad2c5818", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06cc9c26da18848fd97b6d0d6e4e1760497a3c0c/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06cc9c26da18848fd97b6d0d6e4e1760497a3c0c/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=06cc9c26da18848fd97b6d0d6e4e1760497a3c0c", "patch": "@@ -27,7 +27,7 @@\n #![feature(thread_id_value)]\n #![feature(extend_one)]\n #![feature(const_panic)]\n-#![feature(min_const_generics)]\n+#![cfg_attr(bootstrap, feature(min_const_generics))]\n #![feature(new_uninit)]\n #![feature(once_cell)]\n #![feature(maybe_uninit_uninit_array)]"}, {"sha": "aa54ffb132dc9686b73f00aeb3e90a695c380ce5", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06cc9c26da18848fd97b6d0d6e4e1760497a3c0c/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06cc9c26da18848fd97b6d0d6e4e1760497a3c0c/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=06cc9c26da18848fd97b6d0d6e4e1760497a3c0c", "patch": "@@ -273,6 +273,8 @@ declare_features! (\n     /// Allows patterns with concurrent by-move and by-ref bindings.\n     /// For example, you can write `Foo(a, ref b)` where `a` is by-move and `b` is by-ref.\n     (accepted, move_ref_pattern, \"1.48.0\", Some(68354), None),\n+    /// The smallest useful subset of `const_generics`.\n+    (accepted, min_const_generics, \"1.51.0\", Some(74878), None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: accepted features"}, {"sha": "d60ae8ef75b81ac69592e88baf3633d4af5a62d2", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/06cc9c26da18848fd97b6d0d6e4e1760497a3c0c/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06cc9c26da18848fd97b6d0d6e4e1760497a3c0c/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=06cc9c26da18848fd97b6d0d6e4e1760497a3c0c", "patch": "@@ -578,9 +578,6 @@ declare_features! (\n     /// Allows calling `transmute` in const fn\n     (active, const_fn_transmute, \"1.46.0\", Some(53605), None),\n \n-    /// The smallest useful subset of `const_generics`.\n-    (active, min_const_generics, \"1.47.0\", Some(74878), None),\n-\n     /// Allows `if let` guard in match arms.\n     (active, if_let_guard, \"1.47.0\", Some(51114), None),\n \n@@ -651,5 +648,7 @@ pub const INCOMPLETE_FEATURES: &[Symbol] = &[\n \n /// Some features are not allowed to be used together at the same time, if\n /// the two are present, produce an error.\n-pub const INCOMPATIBLE_FEATURES: &[(Symbol, Symbol)] =\n-    &[(sym::const_generics, sym::min_const_generics)];\n+///\n+/// Currently empty, but we will probably need this again in the future,\n+/// so let's keep it in for now.\n+pub const INCOMPATIBLE_FEATURES: &[(Symbol, Symbol)] = &[];"}, {"sha": "fa943d0d748a39a60c6c9a0aadc436717dc9064e", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06cc9c26da18848fd97b6d0d6e4e1760497a3c0c/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06cc9c26da18848fd97b6d0d6e4e1760497a3c0c/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=06cc9c26da18848fd97b6d0d6e4e1760497a3c0c", "patch": "@@ -2299,7 +2299,7 @@ impl EarlyLintPass for IncompleteFeatures {\n     }\n }\n \n-const HAS_MIN_FEATURES: &[Symbol] = &[sym::const_generics, sym::specialization];\n+const HAS_MIN_FEATURES: &[Symbol] = &[sym::specialization];\n \n declare_lint! {\n     /// The `invalid_value` lint detects creating a value that is not valid,"}, {"sha": "b2db09cbc80652fdf1ba2f6d092461d8bd6e80b5", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06cc9c26da18848fd97b6d0d6e4e1760497a3c0c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06cc9c26da18848fd97b6d0d6e4e1760497a3c0c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=06cc9c26da18848fd97b6d0d6e4e1760497a3c0c", "patch": "@@ -1386,7 +1386,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     #[inline]\n     pub fn lazy_normalization(self) -> bool {\n         let features = self.features();\n-        // Note: We do not enable lazy normalization for `features.min_const_generics`.\n+        // Note: We do not enable lazy normalization for `min_const_generics`.\n         features.const_generics || features.lazy_normalization_consts\n     }\n "}, {"sha": "1fe1400fabecf820404535217cb8261d860ea234", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06cc9c26da18848fd97b6d0d6e4e1760497a3c0c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06cc9c26da18848fd97b6d0d6e4e1760497a3c0c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=06cc9c26da18848fd97b6d0d6e4e1760497a3c0c", "patch": "@@ -1638,8 +1638,6 @@ pub type PlaceholderConst<'tcx> = Placeholder<BoundConst<'tcx>>;\n /// which cause cycle errors.\n ///\n /// ```rust\n-/// #![feature(const_generics)]\n-///\n /// struct A;\n /// impl A {\n ///     fn foo<const N: usize>(&self) -> [u8; N] { [0; N] }"}, {"sha": "860e63020bb0644715d485160dbbdb1d79e8bb92", "filename": "compiler/rustc_parse/src/parser/generics.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/06cc9c26da18848fd97b6d0d6e4e1760497a3c0c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06cc9c26da18848fd97b6d0d6e4e1760497a3c0c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs?ref=06cc9c26da18848fd97b6d0d6e4e1760497a3c0c", "patch": "@@ -5,7 +5,7 @@ use rustc_ast::{\n     self as ast, Attribute, GenericBounds, GenericParam, GenericParamKind, WhereClause,\n };\n use rustc_errors::PResult;\n-use rustc_span::symbol::{kw, sym};\n+use rustc_span::symbol::kw;\n \n impl<'a> Parser<'a> {\n     /// Parses bounds of a lifetime parameter `BOUND + BOUND + BOUND`, possibly with trailing `+`.\n@@ -56,8 +56,6 @@ impl<'a> Parser<'a> {\n         self.expect(&token::Colon)?;\n         let ty = self.parse_ty()?;\n \n-        self.sess.gated_spans.gate(sym::min_const_generics, const_span.to(self.prev_token.span));\n-\n         Ok(GenericParam {\n             ident,\n             id: ast::DUMMY_NODE_ID,"}, {"sha": "d253a9dda861bfd620f1451708dbdcd5427c796e", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/06cc9c26da18848fd97b6d0d6e4e1760497a3c0c/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06cc9c26da18848fd97b6d0d6e4e1760497a3c0c/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=06cc9c26da18848fd97b6d0d6e4e1760497a3c0c", "patch": "@@ -1985,8 +1985,8 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n         }\n     }\n \n-    /// Non-static lifetimes are prohibited in anonymous constants under `min_const_generics` so\n-    /// this function will emit an error if `min_const_generics` is enabled, the body identified by\n+    /// Non-static lifetimes are prohibited in anonymous constants under `min_const_generics`.\n+    /// This function will emit an error if `const_generics` is not enabled, the body identified by\n     /// `body_id` is an anonymous constant and `lifetime_ref` is non-static.\n     crate fn maybe_emit_forbidden_non_static_lifetime_error(\n         &self,\n@@ -2002,7 +2002,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n             hir::LifetimeName::Implicit | hir::LifetimeName::Static | hir::LifetimeName::Underscore\n         );\n \n-        if self.tcx.features().min_const_generics && is_anon_const && !is_allowed_lifetime {\n+        if !self.tcx.lazy_normalization() && is_anon_const && !is_allowed_lifetime {\n             feature_err(\n                 &self.tcx.sess.parse_sess,\n                 sym::const_generics,"}, {"sha": "d5ba6f3b53b211b968a4600c86262a7a1903dbf0", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/06cc9c26da18848fd97b6d0d6e4e1760497a3c0c/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06cc9c26da18848fd97b6d0d6e4e1760497a3c0c/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=06cc9c26da18848fd97b6d0d6e4e1760497a3c0c", "patch": "@@ -1769,8 +1769,8 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         let result = loop {\n             match *scope {\n                 Scope::Body { id, s } => {\n-                    // Non-static lifetimes are prohibited in anonymous constants under\n-                    // `min_const_generics`.\n+                    // Non-static lifetimes are prohibited in anonymous constants without\n+                    // `const_generics`.\n                     self.maybe_emit_forbidden_non_static_lifetime_error(id, lifetime_ref);\n \n                     outermost_body = Some(id);"}, {"sha": "5c79cfa9c1dba07b8ea56b9de2a6ba18e11e3506", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/06cc9c26da18848fd97b6d0d6e4e1760497a3c0c/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06cc9c26da18848fd97b6d0d6e4e1760497a3c0c/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=06cc9c26da18848fd97b6d0d6e4e1760497a3c0c", "patch": "@@ -2624,8 +2624,12 @@ impl<'a> Resolver<'a> {\n                             continue;\n                         }\n                         ConstantItemRibKind(trivial) => {\n+                            let features = self.session.features_untracked();\n                             // HACK(min_const_generics): We currently only allow `N` or `{ N }`.\n-                            if !trivial && self.session.features_untracked().min_const_generics {\n+                            if !(trivial\n+                                || features.const_generics\n+                                || features.lazy_normalization_consts)\n+                            {\n                                 // HACK(min_const_generics): If we encounter `Self` in an anonymous constant\n                                 // we can't easily tell if it's generic at this stage, so we instead remember\n                                 // this and then enforce the self type to be concrete later on.\n@@ -2713,8 +2717,12 @@ impl<'a> Resolver<'a> {\n                             continue;\n                         }\n                         ConstantItemRibKind(trivial) => {\n+                            let features = self.session.features_untracked();\n                             // HACK(min_const_generics): We currently only allow `N` or `{ N }`.\n-                            if !trivial && self.session.features_untracked().min_const_generics {\n+                            if !(trivial\n+                                || features.const_generics\n+                                || features.lazy_normalization_consts)\n+                            {\n                                 if record_used {\n                                     self.report_error(\n                                         span,"}, {"sha": "ac1cdc6ad45f20338a8ad3ba8d55bed26304ab11", "filename": "compiler/rustc_serialize/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06cc9c26da18848fd97b6d0d6e4e1760497a3c0c/compiler%2Frustc_serialize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06cc9c26da18848fd97b6d0d6e4e1760497a3c0c/compiler%2Frustc_serialize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Flib.rs?ref=06cc9c26da18848fd97b6d0d6e4e1760497a3c0c", "patch": "@@ -13,7 +13,7 @@ Core encoding and decoding interfaces.\n #![feature(never_type)]\n #![feature(nll)]\n #![feature(associated_type_bounds)]\n-#![feature(min_const_generics)]\n+#![cfg_attr(bootstrap, feature(min_const_generics))]\n #![cfg_attr(test, feature(test))]\n #![allow(rustc::internal)]\n "}, {"sha": "cd871a4da979f4786c10abba07a88e6ea0c4adb2", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/06cc9c26da18848fd97b6d0d6e4e1760497a3c0c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06cc9c26da18848fd97b6d0d6e4e1760497a3c0c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=06cc9c26da18848fd97b6d0d6e4e1760497a3c0c", "patch": "@@ -293,7 +293,13 @@ fn check_param_wf(tcx: TyCtxt<'_>, param: &hir::GenericParam<'_>) {\n \n             let err_ty_str;\n             let mut is_ptr = true;\n-            let err = if tcx.features().min_const_generics {\n+            let err = if tcx.features().const_generics {\n+                match ty.peel_refs().kind() {\n+                    ty::FnPtr(_) => Some(\"function pointers\"),\n+                    ty::RawPtr(_) => Some(\"raw pointers\"),\n+                    _ => None,\n+                }\n+            } else {\n                 match ty.kind() {\n                     ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::Error(_) => None,\n                     ty::FnPtr(_) => Some(\"function pointers\"),\n@@ -304,12 +310,6 @@ fn check_param_wf(tcx: TyCtxt<'_>, param: &hir::GenericParam<'_>) {\n                         Some(err_ty_str.as_str())\n                     }\n                 }\n-            } else {\n-                match ty.peel_refs().kind() {\n-                    ty::FnPtr(_) => Some(\"function pointers\"),\n-                    ty::RawPtr(_) => Some(\"raw pointers\"),\n-                    _ => None,\n-                }\n             };\n             if let Some(unsupported_type) = err {\n                 if is_ptr {"}, {"sha": "dd4bfc7a751155b8148c9dac39a754146d5fa22d", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06cc9c26da18848fd97b6d0d6e4e1760497a3c0c/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06cc9c26da18848fd97b6d0d6e4e1760497a3c0c/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=06cc9c26da18848fd97b6d0d6e4e1760497a3c0c", "patch": "@@ -1260,7 +1260,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                 // used with const generics, e.g. `Foo<{N+1}>`, can work at all.\n                 //\n                 // Note that we do not supply the parent generics when using\n-                // `feature(min_const_generics)`.\n+                // `min_const_generics`.\n                 Some(parent_def_id.to_def_id())\n             } else {\n                 let parent_node = tcx.hir().get(tcx.hir().get_parent_node(hir_id));"}]}