{"sha": "6fdd6f65cae1dffec4010cbedd05247f6dace3b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmZGQ2ZjY1Y2FlMWRmZmVjNDAxMGNiZWRkMDUyNDdmNmRhY2UzYjI=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-07-31T23:23:29Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-08-03T17:44:09Z"}, "message": "Move unused trait functions to inherent functions", "tree": {"sha": "97d0f158f0e79c989acf754db1e6e1b9ca59db21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97d0f158f0e79c989acf754db1e6e1b9ca59db21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fdd6f65cae1dffec4010cbedd05247f6dace3b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fdd6f65cae1dffec4010cbedd05247f6dace3b2", "html_url": "https://github.com/rust-lang/rust/commit/6fdd6f65cae1dffec4010cbedd05247f6dace3b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fdd6f65cae1dffec4010cbedd05247f6dace3b2/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5aec365cb9d3df7b6da30393363ea571f2e60368", "url": "https://api.github.com/repos/rust-lang/rust/commits/5aec365cb9d3df7b6da30393363ea571f2e60368", "html_url": "https://github.com/rust-lang/rust/commit/5aec365cb9d3df7b6da30393363ea571f2e60368"}], "stats": {"total": 182, "additions": 81, "deletions": 101}, "files": [{"sha": "5f0d96c9c052ccf899d6d02fb23378bf620f95ef", "filename": "src/Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fdd6f65cae1dffec4010cbedd05247f6dace3b2/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/6fdd6f65cae1dffec4010cbedd05247f6dace3b2/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=6fdd6f65cae1dffec4010cbedd05247f6dace3b2", "patch": "@@ -2366,6 +2366,7 @@ name = \"rustc_metadata_utils\"\n version = \"0.0.0\"\n dependencies = [\n  \"rustc 0.0.0\",\n+ \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]\n "}, {"sha": "0e84104245dcb14a78ae3f1d2be8cfa1eb54bae5", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6fdd6f65cae1dffec4010cbedd05247f6dace3b2/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fdd6f65cae1dffec4010cbedd05247f6dace3b2/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=6fdd6f65cae1dffec4010cbedd05247f6dace3b2", "patch": "@@ -22,7 +22,6 @@\n //! are *mostly* used as a part of that interface, but these should\n //! probably get a better home if someone can find one.\n \n-use hir::def;\n use hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use hir::map as hir_map;\n use hir::map::definitions::{DefKey, DefPathTable};\n@@ -34,8 +33,6 @@ use session::search_paths::PathKind;\n use std::any::Any;\n use std::path::{Path, PathBuf};\n use syntax::ast;\n-use syntax::edition::Edition;\n-use syntax::ext::base::SyntaxExtension;\n use syntax::symbol::Symbol;\n use syntax_pos::Span;\n use rustc_target::spec::Target;\n@@ -140,11 +137,6 @@ pub struct ForeignModule {\n     pub def_id: DefId,\n }\n \n-pub enum LoadedMacro {\n-    MacroDef(ast::Item),\n-    ProcMacro(Lrc<SyntaxExtension>),\n-}\n-\n #[derive(Copy, Clone, Debug)]\n pub struct ExternCrate {\n     pub src: ExternCrateSource,\n@@ -221,28 +213,18 @@ pub trait MetadataLoader {\n pub trait CrateStore {\n     fn crate_data_as_rc_any(&self, krate: CrateNum) -> Lrc<dyn Any>;\n \n-    // access to the metadata loader\n-    fn metadata_loader(&self) -> &dyn MetadataLoader;\n-\n     // resolve\n     fn def_key(&self, def: DefId) -> DefKey;\n     fn def_path(&self, def: DefId) -> hir_map::DefPath;\n     fn def_path_hash(&self, def: DefId) -> hir_map::DefPathHash;\n     fn def_path_table(&self, cnum: CrateNum) -> Lrc<DefPathTable>;\n \n     // \"queries\" used in resolve that aren't tracked for incremental compilation\n-    fn export_macros_untracked(&self, cnum: CrateNum);\n-    fn dep_kind_untracked(&self, cnum: CrateNum) -> DepKind;\n     fn crate_name_untracked(&self, cnum: CrateNum) -> Symbol;\n     fn crate_disambiguator_untracked(&self, cnum: CrateNum) -> CrateDisambiguator;\n     fn crate_hash_untracked(&self, cnum: CrateNum) -> Svh;\n-    fn crate_edition_untracked(&self, cnum: CrateNum) -> Edition;\n-    fn struct_field_names_untracked(&self, def: DefId) -> Vec<ast::Name>;\n-    fn item_children_untracked(&self, did: DefId, sess: &Session) -> Vec<def::Export>;\n-    fn load_macro_untracked(&self, did: DefId, sess: &Session) -> LoadedMacro;\n     fn extern_mod_stmt_cnum_untracked(&self, emod_id: ast::NodeId) -> Option<CrateNum>;\n     fn item_generics_cloned_untracked(&self, def: DefId, sess: &Session) -> ty::Generics;\n-    fn associated_item_cloned_untracked(&self, def: DefId) -> ty::AssociatedItem;\n     fn postorder_cnums_untracked(&self) -> Vec<CrateNum>;\n \n     // This is basically a 1-based range of ints, which is a little"}, {"sha": "74e7d328891e035d03b3397bdc1f421e691ef3ca", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fdd6f65cae1dffec4010cbedd05247f6dace3b2/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fdd6f65cae1dffec4010cbedd05247f6dace3b2/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=6fdd6f65cae1dffec4010cbedd05247f6dace3b2", "patch": "@@ -78,7 +78,6 @@ use rustc::session::filesearch;\n use rustc::session::{early_error, early_warn};\n use rustc::lint::Lint;\n use rustc::lint;\n-use rustc::middle::cstore::CrateStore;\n use rustc_metadata::locator;\n use rustc_metadata::cstore::CStore;\n use rustc_metadata::dynamic_lib::DynamicLibrary;\n@@ -1002,7 +1001,7 @@ impl RustcDefaultCalls {\n                     let mut v = Vec::new();\n                     locator::list_file_metadata(&sess.target.target,\n                                                 path,\n-                                                cstore.metadata_loader(),\n+                                                &*cstore.metadata_loader,\n                                                 &mut v)\n                             .unwrap();\n                     println!(\"{}\", String::from_utf8(v).unwrap());"}, {"sha": "2d3e3080c89e390df630b41bab99c7c81d8b2624", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6fdd6f65cae1dffec4010cbedd05247f6dace3b2/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fdd6f65cae1dffec4010cbedd05247f6dace3b2/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=6fdd6f65cae1dffec4010cbedd05247f6dace3b2", "patch": "@@ -93,6 +93,11 @@ pub struct CStore {\n     pub metadata_loader: Box<dyn MetadataLoader + Sync>,\n }\n \n+pub enum LoadedMacro {\n+    MacroDef(ast::Item),\n+    ProcMacro(Lrc<SyntaxExtension>),\n+}\n+\n impl CStore {\n     pub fn new(metadata_loader: Box<dyn MetadataLoader + Sync>) -> CStore {\n         CStore {"}, {"sha": "916c0920e0b4b2dfa7c20376d9f668ed9122d61c", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 71, "deletions": 78, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/6fdd6f65cae1dffec4010cbedd05247f6dace3b2/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fdd6f65cae1dffec4010cbedd05247f6dace3b2/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=6fdd6f65cae1dffec4010cbedd05247f6dace3b2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use cstore;\n+use cstore::{self, LoadedMacro};\n use encoder;\n use link_args;\n use native_libs;\n@@ -17,8 +17,8 @@ use schema;\n \n use rustc::ty::query::QueryConfig;\n use rustc::middle::cstore::{CrateStore, DepKind,\n-                            MetadataLoader, LinkMeta,\n-                            LoadedMacro, EncodedMetadata, NativeLibraryKind};\n+                            LinkMeta,\n+                            EncodedMetadata, NativeLibraryKind};\n use rustc::middle::exported_symbols::ExportedSymbol;\n use rustc::middle::stability::DeprecationEntry;\n use rustc::hir::def;\n@@ -411,102 +411,37 @@ pub fn provide<'tcx>(providers: &mut Providers<'tcx>) {\n     };\n }\n \n-impl CrateStore for cstore::CStore {\n-    fn crate_data_as_rc_any(&self, krate: CrateNum) -> Lrc<dyn Any> {\n-        self.get_crate_data(krate)\n-    }\n-\n-    fn metadata_loader(&self) -> &dyn MetadataLoader {\n-        &*self.metadata_loader\n-    }\n-\n-    fn item_generics_cloned_untracked(&self, def: DefId, sess: &Session) -> ty::Generics {\n-        self.get_crate_data(def.krate).get_generics(def.index, sess)\n-    }\n-\n-    fn associated_item_cloned_untracked(&self, def: DefId) -> ty::AssociatedItem\n-    {\n-        self.get_crate_data(def.krate).get_associated_item(def.index)\n-    }\n-\n-    fn dep_kind_untracked(&self, cnum: CrateNum) -> DepKind\n-    {\n-        let data = self.get_crate_data(cnum);\n-        let r = *data.dep_kind.lock();\n-        r\n-    }\n-\n-    fn export_macros_untracked(&self, cnum: CrateNum) {\n+impl cstore::CStore {\n+    pub fn export_macros_untracked(&self, cnum: CrateNum) {\n         let data = self.get_crate_data(cnum);\n         let mut dep_kind = data.dep_kind.lock();\n         if *dep_kind == DepKind::UnexportedMacrosOnly {\n             *dep_kind = DepKind::MacrosOnly;\n         }\n     }\n \n-    fn crate_name_untracked(&self, cnum: CrateNum) -> Symbol\n-    {\n-        self.get_crate_data(cnum).name\n-    }\n-\n-    fn crate_disambiguator_untracked(&self, cnum: CrateNum) -> CrateDisambiguator\n-    {\n-        self.get_crate_data(cnum).root.disambiguator\n-    }\n-\n-    fn crate_hash_untracked(&self, cnum: CrateNum) -> hir::svh::Svh\n-    {\n-        self.get_crate_data(cnum).root.hash\n+    pub fn dep_kind_untracked(&self, cnum: CrateNum) -> DepKind {\n+        let data = self.get_crate_data(cnum);\n+        let r = *data.dep_kind.lock();\n+        r\n     }\n \n-    fn crate_edition_untracked(&self, cnum: CrateNum) -> Edition\n-    {\n+    pub fn crate_edition_untracked(&self, cnum: CrateNum) -> Edition {\n         self.get_crate_data(cnum).root.edition\n     }\n \n-    /// Returns the `DefKey` for a given `DefId`. This indicates the\n-    /// parent `DefId` as well as some idea of what kind of data the\n-    /// `DefId` refers to.\n-    fn def_key(&self, def: DefId) -> DefKey {\n-        // Note: loading the def-key (or def-path) for a def-id is not\n-        // a *read* of its metadata. This is because the def-id is\n-        // really just an interned shorthand for a def-path, which is the\n-        // canonical name for an item.\n-        //\n-        // self.dep_graph.read(DepNode::MetaData(def));\n-        self.get_crate_data(def.krate).def_key(def.index)\n-    }\n-\n-    fn def_path(&self, def: DefId) -> DefPath {\n-        // See `Note` above in `def_key()` for why this read is\n-        // commented out:\n-        //\n-        // self.dep_graph.read(DepNode::MetaData(def));\n-        self.get_crate_data(def.krate).def_path(def.index)\n-    }\n-\n-    fn def_path_hash(&self, def: DefId) -> DefPathHash {\n-        self.get_crate_data(def.krate).def_path_hash(def.index)\n-    }\n-\n-    fn def_path_table(&self, cnum: CrateNum) -> Lrc<DefPathTable> {\n-        self.get_crate_data(cnum).def_path_table.clone()\n-    }\n-\n-    fn struct_field_names_untracked(&self, def: DefId) -> Vec<ast::Name>\n-    {\n+    pub fn struct_field_names_untracked(&self, def: DefId) -> Vec<ast::Name> {\n         self.get_crate_data(def.krate).get_struct_field_names(def.index)\n     }\n \n-    fn item_children_untracked(&self, def_id: DefId, sess: &Session) -> Vec<def::Export>\n-    {\n+    pub fn item_children_untracked(&self, def_id: DefId, sess: &Session) -> Vec<def::Export> {\n         let mut result = vec![];\n         self.get_crate_data(def_id.krate)\n             .each_child_of_item(def_id.index, |child| result.push(child), sess);\n         result\n     }\n \n-    fn load_macro_untracked(&self, id: DefId, sess: &Session) -> LoadedMacro {\n+    pub fn load_macro_untracked(&self, id: DefId, sess: &Session) -> LoadedMacro {\n         let data = self.get_crate_data(id.krate);\n         if let Some(ref proc_macros) = data.proc_macros {\n             return LoadedMacro::ProcMacro(proc_macros[id.index.to_proc_macro_index()].1.clone());\n@@ -555,6 +490,64 @@ impl CrateStore for cstore::CStore {\n         })\n     }\n \n+    pub fn associated_item_cloned_untracked(&self, def: DefId) -> ty::AssociatedItem {\n+        self.get_crate_data(def.krate).get_associated_item(def.index)\n+    }\n+}\n+\n+impl CrateStore for cstore::CStore {\n+    fn crate_data_as_rc_any(&self, krate: CrateNum) -> Lrc<dyn Any> {\n+        self.get_crate_data(krate)\n+    }\n+\n+    fn item_generics_cloned_untracked(&self, def: DefId, sess: &Session) -> ty::Generics {\n+        self.get_crate_data(def.krate).get_generics(def.index, sess)\n+    }\n+\n+    fn crate_name_untracked(&self, cnum: CrateNum) -> Symbol\n+    {\n+        self.get_crate_data(cnum).name\n+    }\n+\n+    fn crate_disambiguator_untracked(&self, cnum: CrateNum) -> CrateDisambiguator\n+    {\n+        self.get_crate_data(cnum).root.disambiguator\n+    }\n+\n+    fn crate_hash_untracked(&self, cnum: CrateNum) -> hir::svh::Svh\n+    {\n+        self.get_crate_data(cnum).root.hash\n+    }\n+\n+    /// Returns the `DefKey` for a given `DefId`. This indicates the\n+    /// parent `DefId` as well as some idea of what kind of data the\n+    /// `DefId` refers to.\n+    fn def_key(&self, def: DefId) -> DefKey {\n+        // Note: loading the def-key (or def-path) for a def-id is not\n+        // a *read* of its metadata. This is because the def-id is\n+        // really just an interned shorthand for a def-path, which is the\n+        // canonical name for an item.\n+        //\n+        // self.dep_graph.read(DepNode::MetaData(def));\n+        self.get_crate_data(def.krate).def_key(def.index)\n+    }\n+\n+    fn def_path(&self, def: DefId) -> DefPath {\n+        // See `Note` above in `def_key()` for why this read is\n+        // commented out:\n+        //\n+        // self.dep_graph.read(DepNode::MetaData(def));\n+        self.get_crate_data(def.krate).def_path(def.index)\n+    }\n+\n+    fn def_path_hash(&self, def: DefId) -> DefPathHash {\n+        self.get_crate_data(def.krate).def_path_hash(def.index)\n+    }\n+\n+    fn def_path_table(&self, cnum: CrateNum) -> Lrc<DefPathTable> {\n+        self.get_crate_data(cnum).def_path_table.clone()\n+    }\n+\n     fn crates_untracked(&self) -> Vec<CrateNum>\n     {\n         let mut result = vec![];"}, {"sha": "4a5e20376bfb546e23e52091395abd5135cb0409", "filename": "src/librustc_metadata_utils/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fdd6f65cae1dffec4010cbedd05247f6dace3b2/src%2Flibrustc_metadata_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6fdd6f65cae1dffec4010cbedd05247f6dace3b2/src%2Flibrustc_metadata_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata_utils%2FCargo.toml?ref=6fdd6f65cae1dffec4010cbedd05247f6dace3b2", "patch": "@@ -10,4 +10,5 @@ crate-type = [\"dylib\"]\n \n [dependencies]\n rustc = { path = \"../librustc\" }\n+syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "c782f2072b9aaaacaed4b844c11f4f0691a6e033", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fdd6f65cae1dffec4010cbedd05247f6dace3b2/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fdd6f65cae1dffec4010cbedd05247f6dace3b2/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=6fdd6f65cae1dffec4010cbedd05247f6dace3b2", "patch": "@@ -21,11 +21,11 @@ use {PerNS, Resolver, ResolverArenas};\n use Namespace::{self, TypeNS, ValueNS, MacroNS};\n use {resolve_error, resolve_struct_error, ResolutionError};\n \n-use rustc::middle::cstore::LoadedMacro;\n use rustc::hir::def::*;\n use rustc::hir::def_id::{BUILTIN_MACROS_CRATE, CRATE_DEF_INDEX, LOCAL_CRATE, DefId};\n use rustc::ty;\n use rustc::middle::cstore::CrateStore;\n+use rustc_metadata::cstore::LoadedMacro;\n \n use std::cell::Cell;\n use rustc_data_structures::sync::Lrc;"}, {"sha": "a3a9b938bbd6fd859b962bf12b2c942f321d1519", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fdd6f65cae1dffec4010cbedd05247f6dace3b2/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fdd6f65cae1dffec4010cbedd05247f6dace3b2/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=6fdd6f65cae1dffec4010cbedd05247f6dace3b2", "patch": "@@ -25,7 +25,6 @@ use rustc::hir::def_id::{CRATE_DEF_INDEX, DefId};\n use rustc::hir::def::*;\n use rustc::session::DiagnosticMessageId;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n-use rustc::middle::cstore::CrateStore;\n \n use syntax::ast::{Ident, Name, NodeId, CRATE_NODE_ID};\n use syntax::ext::base::Determinacy::{self, Determined, Undetermined};"}, {"sha": "8b4df1b7b7d21921a6b92669993c623e58b6b465", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fdd6f65cae1dffec4010cbedd05247f6dace3b2/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fdd6f65cae1dffec4010cbedd05247f6dace3b2/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=6fdd6f65cae1dffec4010cbedd05247f6dace3b2", "patch": "@@ -19,7 +19,7 @@ use syntax_pos::Span;\n use rustc::hir;\n use rustc::hir::def::{Def, CtorKind};\n use rustc::hir::def_id::DefId;\n-use rustc::middle::cstore::{CrateStore, LoadedMacro};\n+use rustc_metadata::cstore::LoadedMacro;\n use rustc::ty;\n use rustc::util::nodemap::FxHashSet;\n "}]}