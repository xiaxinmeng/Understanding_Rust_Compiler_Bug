{"sha": "360890fcec3af854c4848ba7ed3511b4bae2ff5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2MDg5MGZjZWMzYWY4NTRjNDg0OGJhN2VkMzUxMWI0YmFlMmZmNWU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-09T15:21:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-09T15:21:12Z"}, "message": "Merge #3053\n\n3053: Feature: downloading lsp server from GitHub r=matklad a=Veetaha\n\nThis is currently very WIP, I may need to change this and that, add \"download language server command\", logging stuff (for future bug reports), etc., but it already works.\r\nAlso didn't test this on windows yet and mac (don't have the latter)\r\n\r\nThe quirks:\r\n* Downloaded binary doesn't have executable permissions by default, that's why we ~~`chmod 111`~~ (**[UPD]** `chmod 755` as per @lnicola [suggestion](https://github.com/rust-analyzer/rust-analyzer/pull/3053#discussion_r376694456)) for it.\r\n* To remove installed binary run `rm /${HOME}/.config/Code/User/globalStorage/matklad.rust-analyzer/ra_lsp_server-linux`, ~~note that `-f` flag is necessary, because of `111` permissions (I think this should be changed)~~ (**[UPD]** --force is no longer needed due to 755 permissions).\r\n\r\nI also tried to keep things simple and not to use too many dependencies, all the ones added have 0 dependencies, (`ts-not-nil` is my personal npm package, that imitates `unwrap()` in TypeScript)\r\n\r\n**[UPD]** I reduced throttle latency of progress indicator to 200ms for smoother UX\r\n\r\n\r\n// TODO:\r\n- [x] ~~Add `Rust Analyzer: Download latest language server` vscode command.~~ **[UPD]**: having reviewed the code and estimated available options I concluded that this feature requires too many code changes, I'd like to extract this into a separate PR after we merge this one.\r\n- [x] Add some logging for future debugging\r\n- [x] ~~Gracefully handle the case when language server is not available (e.g. no internet connection, user explicitly rejected the download, etc.)~~ **[UPD]** Decided to postpone better implementation of graceful degradation logic as per [conversation](https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Deployment.20and.20installation/near/187758550).\r\n\r\nDemo (**[UPD]** this is a bit outdated, but still mainly reflects the feature):\r\n![ra-github-release-download-mvp](https://user-images.githubusercontent.com/36276403/74077961-4f248a80-4a2d-11ea-962f-27c650fd6c4c.gif)\r\n\r\nRelated issue: #2988 #3007 \n\nCo-authored-by: Veetaha <gerzoh1@gmail.com>\nCo-authored-by: Veetaha <veetaha2@gmail.com>", "tree": {"sha": "5820313364f04233fe6a36794bc370ff25407cc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5820313364f04233fe6a36794bc370ff25407cc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/360890fcec3af854c4848ba7ed3511b4bae2ff5e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeQCNoCRBK7hj4Ov3rIwAAdHIIACSaiM49ENFtqhi9WXN6LGYu\nyAnY/QTOKTtaLodSiNAxcjs/tYd+jaBWe03xeaq5dMNZ9/2KbNs1+8rD0Ii4HRPO\nc2sH7JvLUhozxG6Oo2ynf+OVv9HbUnX4YKoePSKmqdrV2BUINhRsydli13cKRwiV\nBVNLqCP9751kv5A3Re7+KUXegCvgkGBR21jCOcG0m89geNkV/MXsLzLtIcYZzx9k\nh6BTZFx27isIlU9uaCbNvJ7dsYHMoqQeflmCobnhsp1CyrExsRf2thpJsBe2kPrq\nTk8/54IWdp/I3uUV9yEhU4vdFGHXDYjdWznpTRnUc1RN70Mi/GLl0XYGaSLcfmQ=\n=Kcfc\n-----END PGP SIGNATURE-----\n", "payload": "tree 5820313364f04233fe6a36794bc370ff25407cc5\nparent 0db5525c445fb86a7fb7441267ffab2604d78a41\nparent dfb81a8cd4b9a2efd8151b4ac36105c51df7d683\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1581261672 +0000\ncommitter GitHub <noreply@github.com> 1581261672 +0000\n\nMerge #3053\n\n3053: Feature: downloading lsp server from GitHub r=matklad a=Veetaha\n\nThis is currently very WIP, I may need to change this and that, add \"download language server command\", logging stuff (for future bug reports), etc., but it already works.\r\nAlso didn't test this on windows yet and mac (don't have the latter)\r\n\r\nThe quirks:\r\n* Downloaded binary doesn't have executable permissions by default, that's why we ~~`chmod 111`~~ (**[UPD]** `chmod 755` as per @lnicola [suggestion](https://github.com/rust-analyzer/rust-analyzer/pull/3053#discussion_r376694456)) for it.\r\n* To remove installed binary run `rm /${HOME}/.config/Code/User/globalStorage/matklad.rust-analyzer/ra_lsp_server-linux`, ~~note that `-f` flag is necessary, because of `111` permissions (I think this should be changed)~~ (**[UPD]** --force is no longer needed due to 755 permissions).\r\n\r\nI also tried to keep things simple and not to use too many dependencies, all the ones added have 0 dependencies, (`ts-not-nil` is my personal npm package, that imitates `unwrap()` in TypeScript)\r\n\r\n**[UPD]** I reduced throttle latency of progress indicator to 200ms for smoother UX\r\n\r\n\r\n// TODO:\r\n- [x] ~~Add `Rust Analyzer: Download latest language server` vscode command.~~ **[UPD]**: having reviewed the code and estimated available options I concluded that this feature requires too many code changes, I'd like to extract this into a separate PR after we merge this one.\r\n- [x] Add some logging for future debugging\r\n- [x] ~~Gracefully handle the case when language server is not available (e.g. no internet connection, user explicitly rejected the download, etc.)~~ **[UPD]** Decided to postpone better implementation of graceful degradation logic as per [conversation](https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Deployment.20and.20installation/near/187758550).\r\n\r\nDemo (**[UPD]** this is a bit outdated, but still mainly reflects the feature):\r\n![ra-github-release-download-mvp](https://user-images.githubusercontent.com/36276403/74077961-4f248a80-4a2d-11ea-962f-27c650fd6c4c.gif)\r\n\r\nRelated issue: #2988 #3007 \n\nCo-authored-by: Veetaha <gerzoh1@gmail.com>\nCo-authored-by: Veetaha <veetaha2@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/360890fcec3af854c4848ba7ed3511b4bae2ff5e", "html_url": "https://github.com/rust-lang/rust/commit/360890fcec3af854c4848ba7ed3511b4bae2ff5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/360890fcec3af854c4848ba7ed3511b4bae2ff5e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0db5525c445fb86a7fb7441267ffab2604d78a41", "url": "https://api.github.com/repos/rust-lang/rust/commits/0db5525c445fb86a7fb7441267ffab2604d78a41", "html_url": "https://github.com/rust-lang/rust/commit/0db5525c445fb86a7fb7441267ffab2604d78a41"}, {"sha": "dfb81a8cd4b9a2efd8151b4ac36105c51df7d683", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfb81a8cd4b9a2efd8151b4ac36105c51df7d683", "html_url": "https://github.com/rust-lang/rust/commit/dfb81a8cd4b9a2efd8151b4ac36105c51df7d683"}], "stats": {"total": 459, "additions": 429, "deletions": 30}, "files": [{"sha": "3da30a19371604dae4e5b5bbd474893856c63905", "filename": "docs/user/README.md", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/360890fcec3af854c4848ba7ed3511b4bae2ff5e/docs%2Fuser%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/360890fcec3af854c4848ba7ed3511b4bae2ff5e/docs%2Fuser%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2FREADME.md?ref=360890fcec3af854c4848ba7ed3511b4bae2ff5e", "patch": "@@ -31,7 +31,38 @@ a minimum version of 10 installed. Please refer to\n You will also need the most recent version of VS Code: we don't try to\n maintain compatibility with older versions yet.\n \n-The experimental VS Code plugin can then be built and installed by executing the\n+### Installation from prebuilt binaries\n+\n+We ship prebuilt binaries for Linux, Mac and Windows via\n+[GitHub releases](https://github.com/rust-analyzer/rust-analyzer/releases).\n+In order to use them you need to install the client VSCode extension.\n+\n+Publishing to VSCode marketplace is currently WIP. Thus, you need to clone the repository and install **only** the client extension via\n+```\n+$ git clone https://github.com/rust-analyzer/rust-analyzer.git --depth 1\n+$ cd rust-analyzer\n+$ cargo xtask install --client-code\n+```\n+Then open VSCode (or reload the window if it was already running), open some Rust project and you should\n+see an info message pop-up.\n+\n+\n+<img height=\"140px\" src=\"https://user-images.githubusercontent.com/36276403/74103174-a40df100-4b52-11ea-81f4-372c70797924.png\" alt=\"Download now message\"/>\n+\n+\n+Click `Download now`, wait until the progress is 100% and you are ready to go.\n+\n+For updates you need to remove installed binary\n+```\n+rm -rf ${HOME}/.config/Code/User/globalStorage/matklad.rust-analyzer\n+```\n+\n+`\"Donwload latest language server\"` command for VSCode and automatic updates detection is currently WIP.\n+\n+\n+### Installation from sources\n+\n+The experimental VS Code plugin can be built and installed by executing the\n following commands:\n \n ```\n@@ -46,6 +77,7 @@ doesn't, report bugs!\n **Note** [#1831](https://github.com/rust-analyzer/rust-analyzer/issues/1831): If you are using the popular\n [Vim emulation plugin](https://github.com/VSCodeVim/Vim), you will likely\n need to turn off the `rust-analyzer.enableEnhancedTyping` setting.\n+(// TODO: This configuration is no longer available, enhanced typing shoud be disabled via removing Enter key binding, [see this issue](https://github.com/rust-analyzer/rust-analyzer/issues/3051))\n \n If you have an unusual setup (for example, `code` is not in the `PATH`), you\n should adapt these manual installation instructions:"}, {"sha": "5c056463e080a283e34941d001a3867da018711d", "filename": "editors/code/package-lock.json", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/360890fcec3af854c4848ba7ed3511b4bae2ff5e/editors%2Fcode%2Fpackage-lock.json", "raw_url": "https://github.com/rust-lang/rust/raw/360890fcec3af854c4848ba7ed3511b4bae2ff5e/editors%2Fcode%2Fpackage-lock.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage-lock.json?ref=360890fcec3af854c4848ba7ed3511b4bae2ff5e", "patch": "@@ -82,6 +82,15 @@\n             \"integrity\": \"sha512-nf1LMGZvgFX186geVZR1xMZKKblJiRfiASTHw85zED2kI1yDKHDwTKMdkaCbTlXoRKlGKaDfYywt+V0As30q3w==\",\n             \"dev\": true\n         },\n+        \"@types/node-fetch\": {\n+            \"version\": \"2.5.4\",\n+            \"resolved\": \"https://registry.npmjs.org/@types/node-fetch/-/node-fetch-2.5.4.tgz\",\n+            \"integrity\": \"sha512-Oz6id++2qAOFuOlE1j0ouk1dzl3mmI1+qINPNBhi9nt/gVOz0G+13Ao6qjhdF0Ys+eOkhu6JnFmt38bR3H0POQ==\",\n+            \"dev\": true,\n+            \"requires\": {\n+                \"@types/node\": \"*\"\n+            }\n+        },\n         \"@types/resolve\": {\n             \"version\": \"0.0.8\",\n             \"resolved\": \"https://registry.npmjs.org/@types/resolve/-/resolve-0.0.8.tgz\",\n@@ -91,6 +100,12 @@\n                 \"@types/node\": \"*\"\n             }\n         },\n+        \"@types/throttle-debounce\": {\n+            \"version\": \"2.1.0\",\n+            \"resolved\": \"https://registry.npmjs.org/@types/throttle-debounce/-/throttle-debounce-2.1.0.tgz\",\n+            \"integrity\": \"sha512-5eQEtSCoESnh2FsiLTxE121IiE60hnMqcb435fShf4bpLRjEu1Eoekht23y6zXS9Ts3l+Szu3TARnTsA0GkOkQ==\",\n+            \"dev\": true\n+        },\n         \"@types/vscode\": {\n             \"version\": \"1.41.0\",\n             \"resolved\": \"https://registry.npmjs.org/@types/vscode/-/vscode-1.41.0.tgz\",\n@@ -536,6 +551,11 @@\n             \"integrity\": \"sha512-nnbWWOkoWyUsTjKrhgD0dcz22mdkSnpYqbEjIm2nhwhuxlSkpywJmBo8h0ZqJdkp73mb90SssHkN4rsRaBAfAA==\",\n             \"dev\": true\n         },\n+        \"node-fetch\": {\n+            \"version\": \"2.6.0\",\n+            \"resolved\": \"https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.0.tgz\",\n+            \"integrity\": \"sha512-8dG4H5ujfvFiqDmVu9fQ5bOHUC15JMjMY/Zumv26oOvvVJjM67KF8koCWIabKQ1GJIa9r2mMZscBq/TbdOcmNA==\"\n+        },\n         \"nth-check\": {\n             \"version\": \"1.0.2\",\n             \"resolved\": \"https://registry.npmjs.org/nth-check/-/nth-check-1.0.2.tgz\",\n@@ -719,6 +739,11 @@\n                 \"has-flag\": \"^3.0.0\"\n             }\n         },\n+        \"throttle-debounce\": {\n+            \"version\": \"2.1.0\",\n+            \"resolved\": \"https://registry.npmjs.org/throttle-debounce/-/throttle-debounce-2.1.0.tgz\",\n+            \"integrity\": \"sha512-AOvyNahXQuU7NN+VVvOOX+uW6FPaWdAOdRP5HfwYxAfCzXTFKRMoIMk+n+po318+ktcChx+F1Dd91G3YHeMKyg==\"\n+        },\n         \"tmp\": {\n             \"version\": \"0.0.29\",\n             \"resolved\": \"https://registry.npmjs.org/tmp/-/tmp-0.0.29.tgz\","}, {"sha": "f687eb8d458822fc9e591f8d63c5f672c57fc319", "filename": "editors/code/package.json", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/360890fcec3af854c4848ba7ed3511b4bae2ff5e/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/360890fcec3af854c4848ba7ed3511b4bae2ff5e/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=360890fcec3af854c4848ba7ed3511b4bae2ff5e", "patch": "@@ -25,18 +25,22 @@\n     },\n     \"dependencies\": {\n         \"jsonc-parser\": \"^2.1.0\",\n+        \"node-fetch\": \"^2.6.0\",\n+        \"throttle-debounce\": \"^2.1.0\",\n         \"vscode-languageclient\": \"^6.1.0\"\n     },\n     \"devDependencies\": {\n         \"@rollup/plugin-commonjs\": \"^11.0.2\",\n         \"@rollup/plugin-node-resolve\": \"^7.1.1\",\n         \"@types/node\": \"^12.12.25\",\n+        \"@types/node-fetch\": \"^2.5.4\",\n+        \"@types/throttle-debounce\": \"^2.1.0\",\n         \"@types/vscode\": \"^1.41.0\",\n         \"rollup\": \"^1.31.0\",\n         \"tslib\": \"^1.10.0\",\n         \"tslint\": \"^5.20.1\",\n-        \"typescript-formatter\": \"^7.2.2\",\n         \"typescript\": \"^3.7.5\",\n+        \"typescript-formatter\": \"^7.2.2\",\n         \"vsce\": \"^1.71.0\"\n     },\n     \"activationEvents\": [\n@@ -169,10 +173,11 @@\n                 },\n                 \"rust-analyzer.raLspServerPath\": {\n                     \"type\": [\n+                        \"null\",\n                         \"string\"\n                     ],\n-                    \"default\": \"ra_lsp_server\",\n-                    \"description\": \"Path to ra_lsp_server executable\"\n+                    \"default\": null,\n+                    \"description\": \"Path to ra_lsp_server executable (points to bundled binary by default)\"\n                 },\n                 \"rust-analyzer.excludeGlobs\": {\n                     \"type\": \"array\","}, {"sha": "2e3d4aba2d882ad71db2b127f25e5863dd795791", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/360890fcec3af854c4848ba7ed3511b4bae2ff5e/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/360890fcec3af854c4848ba7ed3511b4bae2ff5e/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=360890fcec3af854c4848ba7ed3511b4bae2ff5e", "patch": "@@ -1,24 +1,18 @@\n-import { homedir } from 'os';\n import * as lc from 'vscode-languageclient';\n-import { spawnSync } from 'child_process';\n \n import { window, workspace } from 'vscode';\n import { Config } from './config';\n+import { ensureLanguageServerBinary } from './installation/language_server';\n \n-export function createClient(config: Config): lc.LanguageClient {\n+export async function createClient(config: Config): Promise<null | lc.LanguageClient> {\n     // '.' Is the fallback if no folder is open\n     // TODO?: Workspace folders support Uri's (eg: file://test.txt).\n     // It might be a good idea to test if the uri points to a file.\n     const workspaceFolderPath = workspace.workspaceFolders?.[0]?.uri.fsPath ?? '.';\n \n-    const raLspServerPath = expandPathResolving(config.raLspServerPath);\n-    if (spawnSync(raLspServerPath, [\"--version\"]).status !== 0) {\n-        window.showErrorMessage(\n-            `Unable to execute '${raLspServerPath} --version'\\n\\n` +\n-            `Perhaps it is not in $PATH?\\n\\n` +\n-            `PATH=${process.env.PATH}\\n`\n-        );\n-    }\n+    const raLspServerPath = await ensureLanguageServerBinary(config.langServerSource);\n+    if (!raLspServerPath) return null;\n+\n     const run: lc.Executable = {\n         command: raLspServerPath,\n         options: { cwd: workspaceFolderPath },\n@@ -87,9 +81,3 @@ export function createClient(config: Config): lc.LanguageClient {\n     res.registerProposedFeatures();\n     return res;\n }\n-function expandPathResolving(path: string) {\n-    if (path.startsWith('~/')) {\n-        return path.replace('~', homedir());\n-    }\n-    return path;\n-}"}, {"sha": "d5f3da2ed85f93903c8d90af7d938368ef4dc160", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 69, "deletions": 8, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/360890fcec3af854c4848ba7ed3511b4bae2ff5e/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/360890fcec3af854c4848ba7ed3511b4bae2ff5e/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=360890fcec3af854c4848ba7ed3511b4bae2ff5e", "patch": "@@ -1,4 +1,6 @@\n+import * as os from \"os\";\n import * as vscode from 'vscode';\n+import { BinarySource } from \"./installation/interfaces\";\n \n const RA_LSP_DEBUG = process.env.__RA_LSP_SERVER_DEBUG;\n \n@@ -16,10 +18,11 @@ export interface CargoFeatures {\n }\n \n export class Config {\n+    langServerSource!: null | BinarySource;\n+\n     highlightingOn = true;\n     rainbowHighlightingOn = false;\n     enableEnhancedTyping = true;\n-    raLspServerPath = RA_LSP_DEBUG || 'ra_lsp_server';\n     lruCapacity: null | number = null;\n     displayInlayHints = true;\n     maxInlayHintLength: null | number = null;\n@@ -45,11 +48,72 @@ export class Config {\n     private prevCargoWatchOptions: null | CargoWatchOptions = null;\n \n     constructor(ctx: vscode.ExtensionContext) {\n-        vscode.workspace.onDidChangeConfiguration(_ => this.refresh(), null, ctx.subscriptions);\n-        this.refresh();\n+        vscode.workspace.onDidChangeConfiguration(_ => this.refresh(ctx), null, ctx.subscriptions);\n+        this.refresh(ctx);\n+    }\n+\n+    private static expandPathResolving(path: string) {\n+        if (path.startsWith('~/')) {\n+            return path.replace('~', os.homedir());\n+        }\n+        return path;\n+    }\n+\n+    /**\n+     * Name of the binary artifact for `ra_lsp_server` that is published for\n+     * `platform` on GitHub releases. (It is also stored under the same name when\n+     * downloaded by the extension).\n+     */\n+    private static prebuiltLangServerFileName(platform: NodeJS.Platform): null | string {\n+        switch (platform) {\n+            case \"linux\":  return \"ra_lsp_server-linux\";\n+            case \"darwin\": return \"ra_lsp_server-mac\";\n+            case \"win32\":  return \"ra_lsp_server-windows.exe\";\n+\n+            // Users on these platforms yet need to manually build from sources\n+            case \"aix\":\n+            case \"android\":\n+            case \"freebsd\":\n+            case \"openbsd\":\n+            case \"sunos\":\n+            case \"cygwin\":\n+            case \"netbsd\": return null;\n+            // The list of platforms is exhaustive (see `NodeJS.Platform` type definition)\n+        }\n+    }\n+\n+    private static langServerBinarySource(\n+        ctx: vscode.ExtensionContext,\n+        config: vscode.WorkspaceConfiguration\n+    ): null | BinarySource {\n+        const langServerPath = RA_LSP_DEBUG ?? config.get<null | string>(\"raLspServerPath\");\n+\n+        if (langServerPath) {\n+            return {\n+                type: BinarySource.Type.ExplicitPath,\n+                path: Config.expandPathResolving(langServerPath)\n+            };\n+        }\n+\n+        const prebuiltBinaryName = Config.prebuiltLangServerFileName(process.platform);\n+\n+        if (!prebuiltBinaryName) return null;\n+\n+        return {\n+            type: BinarySource.Type.GithubRelease,\n+            dir: ctx.globalStoragePath,\n+            file: prebuiltBinaryName,\n+            repo: {\n+                name: \"rust-analyzer\",\n+                owner: \"rust-analyzer\",\n+            }\n+        };\n     }\n \n-    private refresh() {\n+\n+    // FIXME: revisit the logic for `if (.has(...)) config.get(...)` set default\n+    // values only in one place (i.e. remove default values from non-readonly members declarations)\n+    private refresh(ctx: vscode.ExtensionContext) {\n         const config = vscode.workspace.getConfiguration('rust-analyzer');\n \n         let requireReloadMessage = null;\n@@ -82,10 +146,7 @@ export class Config {\n             this.prevEnhancedTyping = this.enableEnhancedTyping;\n         }\n \n-        if (config.has('raLspServerPath')) {\n-            this.raLspServerPath =\n-                RA_LSP_DEBUG || (config.get('raLspServerPath') as string);\n-        }\n+        this.langServerSource = Config.langServerBinarySource(ctx, config);\n \n         if (config.has('cargo-watch.enable')) {\n             this.cargoWatchOptions.enable = config.get<boolean>("}, {"sha": "70042a479e9ae921523125de7042864924232ee8", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/360890fcec3af854c4848ba7ed3511b4bae2ff5e/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/360890fcec3af854c4848ba7ed3511b4bae2ff5e/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=360890fcec3af854c4848ba7ed3511b4bae2ff5e", "patch": "@@ -11,6 +11,9 @@ export class Ctx {\n     // deal with it.\n     //\n     // Ideally, this should be replaced with async getter though.\n+    // FIXME: this actually needs syncronization of some kind (check how\n+    // vscode deals with `deactivate()` call when extension has some work scheduled\n+    // on the event loop to get a better picture of what we can do here)\n     client: lc.LanguageClient | null = null;\n     private extCtx: vscode.ExtensionContext;\n     private onDidRestartHooks: Array<(client: lc.LanguageClient) => void> = [];\n@@ -26,7 +29,14 @@ export class Ctx {\n             await old.stop();\n         }\n         this.client = null;\n-        const client = createClient(this.config);\n+        const client = await createClient(this.config);\n+        if (!client) {\n+            throw new Error(\n+                \"Rust Analyzer Language Server is not available. \" +\n+                \"Please, ensure its [proper installation](https://github.com/rust-analyzer/rust-analyzer/tree/master/docs/user#vs-code).\"\n+            );\n+        }\n+\n         this.pushCleanup(client.start());\n         await client.onReady();\n "}, {"sha": "b51602ef9fcd4733041a1a96e875c8f5f3d17d54", "filename": "editors/code/src/installation/download_file.ts", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/360890fcec3af854c4848ba7ed3511b4bae2ff5e/editors%2Fcode%2Fsrc%2Finstallation%2Fdownload_file.ts", "raw_url": "https://github.com/rust-lang/rust/raw/360890fcec3af854c4848ba7ed3511b4bae2ff5e/editors%2Fcode%2Fsrc%2Finstallation%2Fdownload_file.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finstallation%2Fdownload_file.ts?ref=360890fcec3af854c4848ba7ed3511b4bae2ff5e", "patch": "@@ -0,0 +1,34 @@\n+import fetch from \"node-fetch\";\n+import * as fs from \"fs\";\n+import { strict as assert } from \"assert\";\n+\n+/**\n+ * Downloads file from `url` and stores it at `destFilePath`.\n+ * `onProgress` callback is called on recieveing each chunk of bytes\n+ * to track the progress of downloading, it gets the already read and total\n+ * amount of bytes to read as its parameters.\n+ */\n+export async function downloadFile(\n+    url: string,\n+    destFilePath: fs.PathLike,\n+    onProgress: (readBytes: number, totalBytes: number) => void\n+): Promise<void> {\n+    const response = await fetch(url);\n+\n+    const totalBytes = Number(response.headers.get('content-length'));\n+    assert(!Number.isNaN(totalBytes), \"Sanity check of content-length protocol\");\n+\n+    let readBytes = 0;\n+\n+    console.log(\"Downloading file of\", totalBytes, \"bytes size from\", url, \"to\", destFilePath);\n+\n+    return new Promise<void>((resolve, reject) => response.body\n+        .on(\"data\", (chunk: Buffer) => {\n+            readBytes += chunk.length;\n+            onProgress(readBytes, totalBytes);\n+        })\n+        .on(\"end\", resolve)\n+        .on(\"error\", reject)\n+        .pipe(fs.createWriteStream(destFilePath))\n+    );\n+}"}, {"sha": "7e37006031376c1a138216225d69933a16acca77", "filename": "editors/code/src/installation/fetch_latest_artifact_metadata.ts", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/360890fcec3af854c4848ba7ed3511b4bae2ff5e/editors%2Fcode%2Fsrc%2Finstallation%2Ffetch_latest_artifact_metadata.ts", "raw_url": "https://github.com/rust-lang/rust/raw/360890fcec3af854c4848ba7ed3511b4bae2ff5e/editors%2Fcode%2Fsrc%2Finstallation%2Ffetch_latest_artifact_metadata.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finstallation%2Ffetch_latest_artifact_metadata.ts?ref=360890fcec3af854c4848ba7ed3511b4bae2ff5e", "patch": "@@ -0,0 +1,46 @@\n+import fetch from \"node-fetch\";\n+import { GithubRepo, ArtifactMetadata } from \"./interfaces\";\n+\n+const GITHUB_API_ENDPOINT_URL = \"https://api.github.com\";\n+\n+/**\n+ * Fetches the latest release from GitHub `repo` and returns metadata about\n+ * `artifactFileName` shipped with this release or `null` if no such artifact was published.\n+ */\n+export async function fetchLatestArtifactMetadata(\n+    repo: GithubRepo, artifactFileName: string\n+): Promise<null | ArtifactMetadata> {\n+\n+    const repoOwner = encodeURIComponent(repo.owner);\n+    const repoName  = encodeURIComponent(repo.name);\n+\n+    const apiEndpointPath = `/repos/${repoOwner}/${repoName}/releases/latest`;\n+    const requestUrl = GITHUB_API_ENDPOINT_URL + apiEndpointPath;\n+\n+    // We skip runtime type checks for simplicity (here we cast from `any` to `GithubRelease`)\n+\n+    console.log(\"Issuing request for released artifacts metadata to\", requestUrl);\n+\n+    const response: GithubRelease = await fetch(requestUrl, {\n+            headers: { Accept: \"application/vnd.github.v3+json\" }\n+        })\n+        .then(res => res.json());\n+\n+    const artifact = response.assets.find(artifact => artifact.name === artifactFileName);\n+\n+    if (!artifact) return null;\n+\n+    return {\n+        releaseName: response.name,\n+        downloadUrl: artifact.browser_download_url\n+    };\n+\n+    // We omit declaration of tremendous amount of fields that we are not using here\n+    interface GithubRelease {\n+        name: string;\n+        assets: Array<{\n+            name: string;\n+            browser_download_url: string;\n+        }>;\n+    }\n+}"}, {"sha": "8039d0b90f63974d32aff2b5c6ec3d8966fd27c9", "filename": "editors/code/src/installation/interfaces.ts", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/360890fcec3af854c4848ba7ed3511b4bae2ff5e/editors%2Fcode%2Fsrc%2Finstallation%2Finterfaces.ts", "raw_url": "https://github.com/rust-lang/rust/raw/360890fcec3af854c4848ba7ed3511b4bae2ff5e/editors%2Fcode%2Fsrc%2Finstallation%2Finterfaces.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finstallation%2Finterfaces.ts?ref=360890fcec3af854c4848ba7ed3511b4bae2ff5e", "patch": "@@ -0,0 +1,55 @@\n+export interface GithubRepo {\n+    name: string;\n+    owner: string;\n+}\n+\n+/**\n+ * Metadata about particular artifact retrieved from GitHub releases.\n+ */\n+export interface ArtifactMetadata {\n+    releaseName: string;\n+    downloadUrl: string;\n+}\n+\n+/**\n+ * Represents the source of a binary artifact which is either specified by the user\n+ * explicitly, or bundled by this extension from GitHub releases.\n+ */\n+export type BinarySource = BinarySource.ExplicitPath | BinarySource.GithubRelease;\n+\n+export namespace BinarySource {\n+    /**\n+     * Type tag for `BinarySource` discriminated union.\n+     */\n+    export const enum Type { ExplicitPath, GithubRelease }\n+\n+    export interface ExplicitPath {\n+        type: Type.ExplicitPath;\n+\n+        /**\n+         * Filesystem path to the binary specified by the user explicitly.\n+         */\n+        path: string;\n+    }\n+\n+    export interface GithubRelease {\n+        type: Type.GithubRelease;\n+\n+        /**\n+         * Repository where the binary is stored.\n+         */\n+        repo: GithubRepo;\n+\n+        /**\n+         * Directory on the filesystem where the bundled binary is stored.\n+         */\n+        dir: string;\n+\n+        /**\n+         * Name of the binary file. It is stored under the same name on GitHub releases\n+         * and in local `.dir`.\n+         */\n+        file: string;\n+    }\n+\n+}"}, {"sha": "1ce67b8b25bd8c34e40b4bab62758d3aa2987eae", "filename": "editors/code/src/installation/language_server.ts", "status": "added", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/360890fcec3af854c4848ba7ed3511b4bae2ff5e/editors%2Fcode%2Fsrc%2Finstallation%2Flanguage_server.ts", "raw_url": "https://github.com/rust-lang/rust/raw/360890fcec3af854c4848ba7ed3511b4bae2ff5e/editors%2Fcode%2Fsrc%2Finstallation%2Flanguage_server.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finstallation%2Flanguage_server.ts?ref=360890fcec3af854c4848ba7ed3511b4bae2ff5e", "patch": "@@ -0,0 +1,141 @@\n+import * as vscode from \"vscode\";\n+import * as path from \"path\";\n+import { strict as assert } from \"assert\";\n+import { promises as fs } from \"fs\";\n+import { promises as dns } from \"dns\";\n+import { spawnSync } from \"child_process\";\n+import { throttle } from \"throttle-debounce\";\n+\n+import { BinarySource } from \"./interfaces\";\n+import { fetchLatestArtifactMetadata } from \"./fetch_latest_artifact_metadata\";\n+import { downloadFile } from \"./download_file\";\n+\n+export async function downloadLatestLanguageServer(\n+    {file: artifactFileName, dir: installationDir, repo}: BinarySource.GithubRelease\n+) {\n+    const { releaseName, downloadUrl } = (await fetchLatestArtifactMetadata(\n+        repo, artifactFileName\n+    ))!;\n+\n+    await fs.mkdir(installationDir).catch(err => assert.strictEqual(\n+        err?.code,\n+        \"EEXIST\",\n+        `Couldn't create directory \"${installationDir}\" to download `+\n+        `language server binary: ${err.message}`\n+    ));\n+\n+    const installationPath = path.join(installationDir, artifactFileName);\n+\n+    console.time(\"Downloading ra_lsp_server\");\n+    await vscode.window.withProgress(\n+        {\n+            location: vscode.ProgressLocation.Notification,\n+            cancellable: false, // FIXME: add support for canceling download?\n+            title: `Downloading language server (${releaseName})`\n+        },\n+        async (progress, _cancellationToken) => {\n+            let lastPrecentage = 0;\n+            await downloadFile(downloadUrl, installationPath, throttle(\n+                200,\n+                /* noTrailing: */ true,\n+                (readBytes, totalBytes) => {\n+                    const newPercentage = (readBytes / totalBytes) * 100;\n+                    progress.report({\n+                        message: newPercentage.toFixed(0) + \"%\",\n+                        increment: newPercentage - lastPrecentage\n+                    });\n+\n+                    lastPrecentage = newPercentage;\n+                })\n+            );\n+        }\n+    );\n+    console.timeEnd(\"Downloading ra_lsp_server\");\n+\n+    await fs.chmod(installationPath, 0o755); // Set (rwx, r_x, r_x) permissions\n+}\n+export async function ensureLanguageServerBinary(\n+    langServerSource: null | BinarySource\n+): Promise<null | string> {\n+\n+    if (!langServerSource) {\n+        vscode.window.showErrorMessage(\n+            \"Unfortunately we don't ship binaries for your platform yet. \" +\n+            \"You need to manually clone rust-analyzer repository and \" +\n+            \"run `cargo xtask install --server` to build the language server from sources. \" +\n+            \"If you feel that your platform should be supported, please create an issue \" +\n+            \"about that [here](https://github.com/rust-analyzer/rust-analyzer/issues) and we \" +\n+            \"will consider it.\"\n+        );\n+        return null;\n+    }\n+\n+    switch (langServerSource.type) {\n+        case BinarySource.Type.ExplicitPath: {\n+            if (isBinaryAvailable(langServerSource.path)) {\n+                return langServerSource.path;\n+            }\n+\n+            vscode.window.showErrorMessage(\n+                `Unable to run ${langServerSource.path} binary. ` +\n+                `To use the pre-built language server, set \"rust-analyzer.raLspServerPath\" ` +\n+                \"value to `null` or remove it from the settings to use it by default.\"\n+            );\n+            return null;\n+        }\n+        case BinarySource.Type.GithubRelease: {\n+            const prebuiltBinaryPath = path.join(langServerSource.dir, langServerSource.file);\n+\n+            if (isBinaryAvailable(prebuiltBinaryPath)) {\n+                return prebuiltBinaryPath;\n+            }\n+\n+            const userResponse = await vscode.window.showInformationMessage(\n+                \"Language server binary for rust-analyzer was not found. \" +\n+                \"Do you want to download it now?\",\n+                \"Download now\", \"Cancel\"\n+            );\n+            if (userResponse !== \"Download now\") return null;\n+\n+            try {\n+                await downloadLatestLanguageServer(langServerSource);\n+            } catch (err) {\n+                await vscode.window.showErrorMessage(\n+                    `Failed to download language server from ${langServerSource.repo.name} ` +\n+                    `GitHub repository: ${err.message}`\n+                );\n+\n+                await dns.resolve('www.google.com').catch(err => {\n+                    console.error(\"DNS resolution failed, there might be an issue with Internet availability\");\n+                    console.error(err);\n+                });\n+\n+                return null;\n+            }\n+\n+            if (!isBinaryAvailable(prebuiltBinaryPath)) assert(false,\n+                `Downloaded language server binary is not functional.` +\n+                `Downloaded from: ${JSON.stringify(langServerSource)}`\n+            );\n+\n+\n+            vscode.window.showInformationMessage(\n+                \"Rust analyzer language server was successfully installed \ud83e\udd80\"\n+            );\n+\n+            return prebuiltBinaryPath;\n+        }\n+    }\n+\n+    function isBinaryAvailable(binaryPath: string) {\n+        const res = spawnSync(binaryPath, [\"--version\"]);\n+\n+        // ACHTUNG! `res` type declaration is inherently wrong, see\n+        // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/42221\n+\n+        console.log(\"Checked binary availablity via --version\", res);\n+        console.log(binaryPath, \"--version output:\", res.output?.map(String));\n+\n+        return res.status === 0;\n+    }\n+}"}, {"sha": "0c7702974a9cbf6441a0e5a668982015cc62e369", "filename": "editors/code/tsconfig.json", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/360890fcec3af854c4848ba7ed3511b4bae2ff5e/editors%2Fcode%2Ftsconfig.json", "raw_url": "https://github.com/rust-lang/rust/raw/360890fcec3af854c4848ba7ed3511b4bae2ff5e/editors%2Fcode%2Ftsconfig.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Ftsconfig.json?ref=360890fcec3af854c4848ba7ed3511b4bae2ff5e", "patch": "@@ -6,6 +6,8 @@\n         \"lib\": [\n             \"es2019\"\n         ],\n+        \"esModuleInterop\": true,\n+        \"allowSyntheticDefaultImports\": true,\n         \"sourceMap\": true,\n         \"rootDir\": \"src\",\n         \"strict\": true,"}]}