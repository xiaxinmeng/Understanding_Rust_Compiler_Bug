{"sha": "78a46efff06558674b51c10d8d81758285746ab5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4YTQ2ZWZmZjA2NTU4Njc0YjUxYzEwZDhkODE3NTgyODU3NDZhYjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-17T01:00:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-17T01:00:11Z"}, "message": "Auto merge of #88832 - pcwalton:debug-unit-variant-fast-path, r=oli-obk\n\nIntroduce a fast path that avoids the `debug_tuple` abstraction when deriving Debug for unit-like enum variants.\n\nThe intent here is to allow LLVM to remove the switch entirely in favor of an\nindexed load from a table of constant strings, which is likely what the\nprogrammer would write in C. Unfortunately, LLVM currently doesn't perform this\noptimization due to a bug, but there is [a\npatch](https://reviews.llvm.org/D109565) that fixes this issue. I've verified\nthat, with that patch applied on top of this commit, Debug for unit-like tuple\nvariants becomes a load, reducing the O(n) code bloat to O(1).\n\nNote that inlining `DebugTuple::finish()` wasn't enough to allow LLVM to\noptimize the code properly; I had to avoid the abstraction entirely. Not using\nthe abstraction is likely better for compile time anyway.\n\nPart of #88793.\n\nr? `@oli-obk`", "tree": {"sha": "74bcd0d53e31967dc52657f64da245acdd61f102", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74bcd0d53e31967dc52657f64da245acdd61f102"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78a46efff06558674b51c10d8d81758285746ab5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78a46efff06558674b51c10d8d81758285746ab5", "html_url": "https://github.com/rust-lang/rust/commit/78a46efff06558674b51c10d8d81758285746ab5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78a46efff06558674b51c10d8d81758285746ab5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e36621057d9f497c822eb800934b5933c10510cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/e36621057d9f497c822eb800934b5933c10510cf", "html_url": "https://github.com/rust-lang/rust/commit/e36621057d9f497c822eb800934b5933c10510cf"}, {"sha": "79bc53870f9fb2b25abffedaa3a4823b974fe69f", "url": "https://api.github.com/repos/rust-lang/rust/commits/79bc53870f9fb2b25abffedaa3a4823b974fe69f", "html_url": "https://github.com/rust-lang/rust/commit/79bc53870f9fb2b25abffedaa3a4823b974fe69f"}], "stats": {"total": 21, "additions": 18, "deletions": 3}, "files": [{"sha": "ecf70da6d96c58d6e1b73c5edc2c3167c6655e45", "filename": "compiler/rustc_builtin_macros/src/deriving/debug.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/78a46efff06558674b51c10d8d81758285746ab5/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78a46efff06558674b51c10d8d81758285746ab5/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs?ref=78a46efff06558674b51c10d8d81758285746ab5", "patch": "@@ -65,15 +65,29 @@ fn show_substructure(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>\n     // We want to make sure we have the ctxt set so that we can use unstable methods\n     let span = cx.with_def_site_ctxt(span);\n     let name = cx.expr_lit(span, ast::LitKind::Str(ident.name, ast::StrStyle::Cooked));\n+    let fmt = substr.nonself_args[0].clone();\n+\n+    // Special fast path for unit variants. In the common case of an enum that is entirely unit\n+    // variants (i.e. a C-like enum), this fast path allows LLVM to eliminate the entire switch in\n+    // favor of a lookup table.\n+    if let ast::VariantData::Unit(..) = vdata {\n+        let fn_path_write_str = cx.std_path(&[sym::fmt, sym::Formatter, sym::write_str]);\n+        let expr = cx.expr_call_global(span, fn_path_write_str, vec![fmt, name]);\n+        let stmts = vec![cx.stmt_expr(expr)];\n+        let block = cx.block(span, stmts);\n+        return cx.expr_block(block);\n+    }\n+\n     let builder = Ident::new(sym::debug_trait_builder, span);\n     let builder_expr = cx.expr_ident(span, builder);\n \n-    let fmt = substr.nonself_args[0].clone();\n-\n     let mut stmts = Vec::with_capacity(fields.len() + 2);\n     let fn_path_finish;\n     match vdata {\n-        ast::VariantData::Tuple(..) | ast::VariantData::Unit(..) => {\n+        ast::VariantData::Unit(..) => {\n+            cx.span_bug(span, \"unit variants should have been handled above\");\n+        }\n+        ast::VariantData::Tuple(..) => {\n             // tuple struct/\"normal\" variant\n             let fn_path_debug_tuple = cx.std_path(&[sym::fmt, sym::Formatter, sym::debug_tuple]);\n             let expr = cx.expr_call_global(span, fn_path_debug_tuple, vec![fmt, name]);"}, {"sha": "760357644a57b114b89cfeddc8f1c161d42a9421", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78a46efff06558674b51c10d8d81758285746ab5/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78a46efff06558674b51c10d8d81758285746ab5/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=78a46efff06558674b51c10d8d81758285746ab5", "patch": "@@ -1417,6 +1417,7 @@ symbols! {\n         wrapping_sub,\n         wreg,\n         write_bytes,\n+        write_str,\n         x87_reg,\n         xer,\n         xmm_reg,"}]}