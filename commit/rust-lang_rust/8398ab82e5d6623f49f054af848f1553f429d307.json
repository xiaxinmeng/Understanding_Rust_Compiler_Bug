{"sha": "8398ab82e5d6623f49f054af848f1553f429d307", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzOThhYjgyZTVkNjYyM2Y0OWYwNTRhZjg0OGYxNTUzZjQyOWQzMDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-13T00:10:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-13T00:10:12Z"}, "message": "Auto merge of #50941 - kennytm:never-ok, r=sfackler\n\nReplace `core::iter::AlwaysOk<T>` by `Result<T, !>`\n\n#43278 has been fixed, so we don't need this struct anymore.\n\n(Actually we don't even need `.unwrap()` thanks to `#![feature(exhaustive_patterns)]`)", "tree": {"sha": "2fe33506777045be9a2f4483cd25be76b744a550", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fe33506777045be9a2f4483cd25be76b744a550"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8398ab82e5d6623f49f054af848f1553f429d307", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8398ab82e5d6623f49f054af848f1553f429d307", "html_url": "https://github.com/rust-lang/rust/commit/8398ab82e5d6623f49f054af848f1553f429d307", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8398ab82e5d6623f49f054af848f1553f429d307/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b68432d560c7c6f1e738b27e49d271a2a778f898", "url": "https://api.github.com/repos/rust-lang/rust/commits/b68432d560c7c6f1e738b27e49d271a2a778f898", "html_url": "https://github.com/rust-lang/rust/commit/b68432d560c7c6f1e738b27e49d271a2a778f898"}, {"sha": "8ae188959ba5237f3c40f9d9c15954cce6288aee", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ae188959ba5237f3c40f9d9c15954cce6288aee", "html_url": "https://github.com/rust-lang/rust/commit/8ae188959ba5237f3c40f9d9c15954cce6288aee"}], "stats": {"total": 23, "additions": 4, "deletions": 19}, "files": [{"sha": "81150bc0378090b64c0e920b413f784849c1a087", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8398ab82e5d6623f49f054af848f1553f429d307/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8398ab82e5d6623f49f054af848f1553f429d307/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=8398ab82e5d6623f49f054af848f1553f429d307", "patch": "@@ -11,7 +11,7 @@\n use cmp::Ordering;\n use ops::Try;\n \n-use super::{AlwaysOk, LoopState};\n+use super::LoopState;\n use super::{Chain, Cycle, Cloned, Enumerate, Filter, FilterMap, Fuse};\n use super::{Flatten, FlatMap, flatten_compat};\n use super::{Inspect, Map, Peekable, Scan, Skip, SkipWhile, StepBy, Take, TakeWhile, Rev};\n@@ -1614,7 +1614,7 @@ pub trait Iterator {\n     fn fold<B, F>(mut self, init: B, mut f: F) -> B where\n         Self: Sized, F: FnMut(B, Self::Item) -> B,\n     {\n-        self.try_fold(init, move |acc, x| AlwaysOk(f(acc, x))).0\n+        self.try_fold(init, move |acc, x| Ok::<B, !>(f(acc, x))).unwrap()\n     }\n \n     /// Tests if every element of the iterator matches a predicate."}, {"sha": "840d45ff1cc15847e52c00040aec606e0a8e0282", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8398ab82e5d6623f49f054af848f1553f429d307/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8398ab82e5d6623f49f054af848f1553f429d307/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=8398ab82e5d6623f49f054af848f1553f429d307", "patch": "@@ -354,21 +354,6 @@ mod range;\n mod sources;\n mod traits;\n \n-/// Transparent newtype used to implement foo methods in terms of try_foo.\n-/// Important until #43278 is fixed; might be better as `Result<T, !>` later.\n-struct AlwaysOk<T>(pub T);\n-\n-impl<T> Try for AlwaysOk<T> {\n-    type Ok = T;\n-    type Error = !;\n-    #[inline]\n-    fn into_result(self) -> Result<Self::Ok, Self::Error> { Ok(self.0) }\n-    #[inline]\n-    fn from_error(v: Self::Error) -> Self { v }\n-    #[inline]\n-    fn from_ok(v: Self::Ok) -> Self { AlwaysOk(v) }\n-}\n-\n /// Used to make try_fold closures more like normal loops\n #[derive(PartialEq)]\n enum LoopState<C, B> {"}, {"sha": "3d2ce9e6b104bc9aae32559816e10a81eb9bf9bb", "filename": "src/libcore/iter/traits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8398ab82e5d6623f49f054af848f1553f429d307/src%2Flibcore%2Fiter%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8398ab82e5d6623f49f054af848f1553f429d307/src%2Flibcore%2Fiter%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits.rs?ref=8398ab82e5d6623f49f054af848f1553f429d307", "patch": "@@ -10,7 +10,7 @@\n use ops::{Mul, Add, Try};\n use num::Wrapping;\n \n-use super::{AlwaysOk, LoopState};\n+use super::LoopState;\n \n /// Conversion from an `Iterator`.\n ///\n@@ -524,7 +524,7 @@ pub trait DoubleEndedIterator: Iterator {\n     fn rfold<B, F>(mut self, accum: B, mut f: F) -> B where\n         Self: Sized, F: FnMut(B, Self::Item) -> B,\n     {\n-        self.try_rfold(accum, move |acc, x| AlwaysOk(f(acc, x))).0\n+        self.try_rfold(accum, move |acc, x| Ok::<B, !>(f(acc, x))).unwrap()\n     }\n \n     /// Searches for an element of an iterator from the back that satisfies a predicate."}]}