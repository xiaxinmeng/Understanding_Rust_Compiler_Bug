{"sha": "6f8bec93990434b5da5060f05d1e9fa7116bc743", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmOGJlYzkzOTkwNDM0YjVkYTUwNjBmMDVkMWU5ZmE3MTE2YmM3NDM=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-05-13T04:21:54Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-06-26T11:14:02Z"}, "message": "Warn if linking to a private item", "tree": {"sha": "50a60759a100eeaab60e0d210f098180f4b2c4ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50a60759a100eeaab60e0d210f098180f4b2c4ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f8bec93990434b5da5060f05d1e9fa7116bc743", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f8bec93990434b5da5060f05d1e9fa7116bc743", "html_url": "https://github.com/rust-lang/rust/commit/6f8bec93990434b5da5060f05d1e9fa7116bc743", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f8bec93990434b5da5060f05d1e9fa7116bc743/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14e65d5e95da0f7e4f9127cf1598fa46f33972e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/14e65d5e95da0f7e4f9127cf1598fa46f33972e8", "html_url": "https://github.com/rust-lang/rust/commit/14e65d5e95da0f7e4f9127cf1598fa46f33972e8"}], "stats": {"total": 31, "additions": 28, "deletions": 3}, "files": [{"sha": "4961dc2d4bcea8932fbeeb02c7f69cc4686b386a", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f8bec93990434b5da5060f05d1e9fa7116bc743/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8bec93990434b5da5060f05d1e9fa7116bc743/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=6f8bec93990434b5da5060f05d1e9fa7116bc743", "patch": "@@ -34,6 +34,7 @@ extern crate rustc_metadata;\n extern crate rustc_middle;\n extern crate rustc_mir;\n extern crate rustc_parse;\n+extern crate rustc_privacy;\n extern crate rustc_resolve;\n extern crate rustc_session;\n extern crate rustc_span as rustc_span;"}, {"sha": "a19d3afc2e3b1b9471c8e1a982529a2095f36036", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6f8bec93990434b5da5060f05d1e9fa7116bc743/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8bec93990434b5da5060f05d1e9fa7116bc743/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=6f8bec93990434b5da5060f05d1e9fa7116bc743", "patch": "@@ -178,6 +178,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n             let result = cx.enter_resolver(|resolver| {\n                 resolver.resolve_str_path_error(DUMMY_SP, &path_str, ns, module_id)\n             });\n+            debug!(\"{} resolved to {:?} in namespace {:?}\", path_str, ns, result);\n             let result = match result {\n                 Ok((_, Res::Err)) => Err(ErrorKind::ResolutionFailure),\n                 _ => result.map_err(|_| ErrorKind::ResolutionFailure),\n@@ -202,7 +203,11 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                         }\n                         return Ok((res, Some(path_str.to_owned())));\n                     }\n-                    _ => return Ok((res, extra_fragment.clone())),\n+                    other => {\n+                        debug!(\"failed to resolve {} in namespace {:?} (got {:?})\", path_str, ns, other);\n+                        debug!(\"extra_fragment is {:?}\", extra_fragment);\n+                        return Ok((res, extra_fragment.clone()));\n+                    }\n                 };\n \n                 if value != (ns == ValueNS) {\n@@ -555,9 +560,11 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n             } else {\n                 (parts[0].to_owned(), None)\n             };\n+            let resolved_self;\n+            let mut path_str;\n             let (res, fragment) = {\n                 let mut kind = None;\n-                let mut path_str = if let Some(prefix) =\n+                path_str = if let Some(prefix) =\n                     [\"struct@\", \"enum@\", \"type@\", \"trait@\", \"union@\"]\n                         .iter()\n                         .find(|p| link.starts_with(**p))\n@@ -614,7 +621,6 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                 let base_node =\n                     if item.is_mod() && item.attrs.inner_docs { None } else { parent_node };\n \n-                let resolved_self;\n                 // replace `Self` with suitable item's parent name\n                 if path_str.starts_with(\"Self::\") {\n                     if let Some(ref name) = parent_name {\n@@ -760,6 +766,24 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n             if let Res::PrimTy(_) = res {\n                 item.attrs.links.push((ori_link, None, fragment));\n             } else {\n+                // ~~WRONG: TODO: I think this happens too late and we need to instead put this in `self.resolve`~~\n+                debug!(\"item {:?} resolved to {:?}\", item, res);\n+                if let Some(local) = res.opt_def_id().and_then(|def_id| def_id.as_local()) {\n+                    let hir_id = self.cx.tcx.hir().as_local_hir_id(local);\n+                    if !self.cx.tcx.privacy_access_levels(rustc_hir::def_id::LOCAL_CRATE).is_exported(hir_id) {\n+                        let item_name = item.name.as_deref().unwrap_or(\"<unknown>\");\n+                        build_diagnostic(\n+                            cx,\n+                            &item,\n+                            path_str,\n+                            &dox,\n+                            link_range,\n+                            &format!(\"public documentation for `{}` links to a private item\", item_name),\n+                            \"this item is private\",\n+                            None,\n+                        );\n+                    }\n+                }\n                 let id = register_res(cx, res);\n                 item.attrs.links.push((ori_link, Some(id), fragment));\n             }"}]}