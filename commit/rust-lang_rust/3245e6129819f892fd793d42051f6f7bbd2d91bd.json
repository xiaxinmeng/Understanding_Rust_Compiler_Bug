{"sha": "3245e6129819f892fd793d42051f6f7bbd2d91bd", "node_id": "C_kwDOAAsO6NoAKDMyNDVlNjEyOTgxOWY4OTJmZDc5M2Q0MjA1MWY2ZjdiYmQyZDkxYmQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-04-01T10:07:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-01T10:07:02Z"}, "message": "Rollup merge of #95516 - RalfJung:ptrs-not-ints, r=dtolnay\n\nptr_metadata test: avoid ptr-to-int transmutes\n\nPointers can have provenance, integers don't, so transmuting pointers to integers creates \"non-standard\" values and it is unclear how well those can be supported (https://github.com/rust-lang/unsafe-code-guidelines/issues/286).\n\nSo for this test let's take the safer option and use a pointer type instead. That also makes Miri happy. :)", "tree": {"sha": "7a5fd3ed4ba5231b8c6a9bd9b753eefdb8c1d504", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a5fd3ed4ba5231b8c6a9bd9b753eefdb8c1d504"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3245e6129819f892fd793d42051f6f7bbd2d91bd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiRs7HCRBK7hj4Ov3rIwAAzuUIAD4N3vOFdppXfTHxYVmWAqGi\nPYqrJoZoMvT+E0zUaKXF2POgB515StLId7KfevWndLdMMDUgVmx9ZXkZ3z28ny7t\nwyWG+iCg3GZpvUhSy2/1zwWjW6Zw0CmNGqFvbs2Dws1Dgysc+NjD/efg5db+zfU/\nugmCDwjJ3cTomfTf8GXQwfwpL9ZA0S3uJVaoORm43XCLG1CxHFhoaHXw/1dnc86G\n+optvm693bB/QLAm4TlaFRfqoKWbkLZSgNRWRs9oIi2thNrhhRZxzHIABwvcOlBD\n0mhglwlCMEQTCjuVYf6ks0kPCxaaIhXNi3FDvlKQgJfql2uvaPt18XwKIf+p+G4=\n=o0Ms\n-----END PGP SIGNATURE-----\n", "payload": "tree 7a5fd3ed4ba5231b8c6a9bd9b753eefdb8c1d504\nparent e21b27ff7a7ca155daaa2fac580b12dd2644da57\nparent 907ba11490e95e2bb649329456eb5ab9a6976f99\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1648807622 +0200\ncommitter GitHub <noreply@github.com> 1648807622 +0200\n\nRollup merge of #95516 - RalfJung:ptrs-not-ints, r=dtolnay\n\nptr_metadata test: avoid ptr-to-int transmutes\n\nPointers can have provenance, integers don't, so transmuting pointers to integers creates \"non-standard\" values and it is unclear how well those can be supported (https://github.com/rust-lang/unsafe-code-guidelines/issues/286).\n\nSo for this test let's take the safer option and use a pointer type instead. That also makes Miri happy. :)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3245e6129819f892fd793d42051f6f7bbd2d91bd", "html_url": "https://github.com/rust-lang/rust/commit/3245e6129819f892fd793d42051f6f7bbd2d91bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3245e6129819f892fd793d42051f6f7bbd2d91bd/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e21b27ff7a7ca155daaa2fac580b12dd2644da57", "url": "https://api.github.com/repos/rust-lang/rust/commits/e21b27ff7a7ca155daaa2fac580b12dd2644da57", "html_url": "https://github.com/rust-lang/rust/commit/e21b27ff7a7ca155daaa2fac580b12dd2644da57"}, {"sha": "907ba11490e95e2bb649329456eb5ab9a6976f99", "url": "https://api.github.com/repos/rust-lang/rust/commits/907ba11490e95e2bb649329456eb5ab9a6976f99", "html_url": "https://github.com/rust-lang/rust/commit/907ba11490e95e2bb649329456eb5ab9a6976f99"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "6a39ab79f4965688e0ffbdab2254524fbf76d199", "filename": "library/core/tests/ptr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3245e6129819f892fd793d42051f6f7bbd2d91bd/library%2Fcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3245e6129819f892fd793d42051f6f7bbd2d91bd/library%2Fcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fptr.rs?ref=3245e6129819f892fd793d42051f6f7bbd2d91bd", "patch": "@@ -490,11 +490,11 @@ fn ptr_metadata() {\n     let vtable_5: DynMetadata<dyn Display> =\n         metadata(&Pair(true, 7_u32) as &Pair<bool, dyn Display>);\n     unsafe {\n-        let address_1: usize = std::mem::transmute(vtable_1);\n-        let address_2: usize = std::mem::transmute(vtable_2);\n-        let address_3: usize = std::mem::transmute(vtable_3);\n-        let address_4: usize = std::mem::transmute(vtable_4);\n-        let address_5: usize = std::mem::transmute(vtable_5);\n+        let address_1: *const () = std::mem::transmute(vtable_1);\n+        let address_2: *const () = std::mem::transmute(vtable_2);\n+        let address_3: *const () = std::mem::transmute(vtable_3);\n+        let address_4: *const () = std::mem::transmute(vtable_4);\n+        let address_5: *const () = std::mem::transmute(vtable_5);\n         // Different trait => different vtable pointer\n         assert_ne!(address_1, address_2);\n         // Different erased type => different vtable pointer"}]}