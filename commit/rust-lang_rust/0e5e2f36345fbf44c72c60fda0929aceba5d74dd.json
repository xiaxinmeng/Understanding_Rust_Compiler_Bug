{"sha": "0e5e2f36345fbf44c72c60fda0929aceba5d74dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlNWUyZjM2MzQ1ZmJmNDRjNzJjNjBmZGEwOTI5YWNlYmE1ZDc0ZGQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-25T19:56:02Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-05-02T18:01:00Z"}, "message": "introduce `mir_keys()`\n\nEach MIR key is a DefId that has MIR associated with it", "tree": {"sha": "d23f9af496cdd1b86d30f39a273ca384d482eedc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d23f9af496cdd1b86d30f39a273ca384d482eedc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e5e2f36345fbf44c72c60fda0929aceba5d74dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e5e2f36345fbf44c72c60fda0929aceba5d74dd", "html_url": "https://github.com/rust-lang/rust/commit/0e5e2f36345fbf44c72c60fda0929aceba5d74dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e5e2f36345fbf44c72c60fda0929aceba5d74dd/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed1f26ddda15b2bcf613a257e813e8b02ee14dff", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed1f26ddda15b2bcf613a257e813e8b02ee14dff", "html_url": "https://github.com/rust-lang/rust/commit/ed1f26ddda15b2bcf613a257e813e8b02ee14dff"}], "stats": {"total": 273, "additions": 132, "deletions": 141}, "files": [{"sha": "66505d9a06b59306f1f4e5da94d0c9ad6b7aa02c", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e5e2f36345fbf44c72c60fda0929aceba5d74dd/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5e2f36345fbf44c72c60fda0929aceba5d74dd/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=0e5e2f36345fbf44c72c60fda0929aceba5d74dd", "patch": "@@ -76,6 +76,7 @@ pub enum DepNode<D: Clone + Debug> {\n     BorrowCheck(D),\n     RvalueCheck(D),\n     Reachability,\n+    MirKeys,\n     LateLintCheck,\n     TransCrateItem(D),\n     TransInlinedItem(D),\n@@ -202,6 +203,7 @@ impl<D: Clone + Debug> DepNode<D> {\n             Variance => Some(Variance),\n             PrivacyAccessLevels(k) => Some(PrivacyAccessLevels(k)),\n             Reachability => Some(Reachability),\n+            MirKeys => Some(MirKeys),\n             LateLintCheck => Some(LateLintCheck),\n             TransWriteMetadata => Some(TransWriteMetadata),\n "}, {"sha": "6cb86a30400a772806fdcb546ad65b32871deff6", "filename": "src/librustc/dep_graph/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0e5e2f36345fbf44c72c60fda0929aceba5d74dd/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5e2f36345fbf44c72c60fda0929aceba5d74dd/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fmod.rs?ref=0e5e2f36345fbf44c72c60fda0929aceba5d74dd", "patch": "@@ -28,6 +28,5 @@ pub use self::graph::WorkProduct;\n pub use self::query::DepGraphQuery;\n pub use self::safe::AssertDepGraphSafe;\n pub use self::safe::DepGraphSafe;\n-pub use self::visit::visit_all_bodies_in_krate;\n pub use self::visit::visit_all_item_likes_in_krate;\n pub use self::raii::DepTask;"}, {"sha": "bf3748659fe07f0e4f4e84e8bb7ccb7782a85eb0", "filename": "src/librustc/dep_graph/visit.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0e5e2f36345fbf44c72c60fda0929aceba5d74dd/src%2Flibrustc%2Fdep_graph%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5e2f36345fbf44c72c60fda0929aceba5d74dd/src%2Flibrustc%2Fdep_graph%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fvisit.rs?ref=0e5e2f36345fbf44c72c60fda0929aceba5d74dd", "patch": "@@ -75,15 +75,3 @@ pub fn visit_all_item_likes_in_krate<'a, 'tcx, V, F>(tcx: TyCtxt<'a, 'tcx, 'tcx>\n     krate.visit_all_item_likes(&mut tracking_visitor)\n }\n \n-pub fn visit_all_bodies_in_krate<'a, 'tcx, C>(tcx: TyCtxt<'a, 'tcx, 'tcx>, callback: C)\n-    where C: Fn(/* body_owner */\n-                DefId,\n-                /* body id */\n-                hir::BodyId)\n-{\n-    let krate = tcx.hir.krate();\n-    for &body_id in &krate.body_ids {\n-        let body_owner_def_id = tcx.hir.body_owner_def_id(body_id);\n-        callback(body_owner_def_id, body_id);\n-    }\n-}"}, {"sha": "78a3c1919db2996b14ad4276f5be215318f936f9", "filename": "src/librustc/mir/transform.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0e5e2f36345fbf44c72c60fda0929aceba5d74dd/src%2Flibrustc%2Fmir%2Ftransform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5e2f36345fbf44c72c60fda0929aceba5d74dd/src%2Flibrustc%2Fmir%2Ftransform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftransform.rs?ref=0e5e2f36345fbf44c72c60fda0929aceba5d74dd", "patch": "@@ -10,6 +10,7 @@\n \n use dep_graph::DepNode;\n use hir;\n+use hir::def_id::LOCAL_CRATE;\n use hir::map::DefPathData;\n use mir::{Mir, Promoted};\n use ty::TyCtxt;\n@@ -114,14 +115,9 @@ impl<'tcx, T: MirPass<'tcx>> MirMapPass<'tcx> for T {\n                     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     hooks: &mut [Box<for<'s> MirPassHook<'s>>])\n     {\n-        let def_ids = tcx.maps.mir.borrow().keys();\n-        for def_id in def_ids {\n-            if !def_id.is_local() {\n-                continue;\n-            }\n-\n+        for &def_id in tcx.mir_keys(LOCAL_CRATE).iter() {\n             let _task = tcx.dep_graph.in_task(DepNode::Mir(def_id));\n-            let mir = &mut tcx.maps.mir.borrow()[&def_id].borrow_mut();\n+            let mir = &mut tcx.mir(def_id).borrow_mut();\n             tcx.dep_graph.write(DepNode::Mir(def_id));\n \n             let id = tcx.hir.as_local_node_id(def_id).unwrap();"}, {"sha": "ba475367bc6bb5af737127e843f0226359ebf167", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0e5e2f36345fbf44c72c60fda0929aceba5d74dd/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5e2f36345fbf44c72c60fda0929aceba5d74dd/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=0e5e2f36345fbf44c72c60fda0929aceba5d74dd", "patch": "@@ -20,7 +20,7 @@ use session::CompileResult;\n use ty::{self, CrateInherentImpls, Ty, TyCtxt};\n use ty::item_path;\n use ty::subst::Substs;\n-use util::nodemap::NodeSet;\n+use util::nodemap::{DefIdSet, NodeSet};\n \n use rustc_data_structures::indexed_vec::IndexVec;\n use std::cell::{RefCell, RefMut};\n@@ -270,8 +270,13 @@ impl<'tcx> QueryDescription for queries::reachable_set<'tcx> {\n \n impl<'tcx> QueryDescription for queries::const_eval<'tcx> {\n     fn describe(tcx: TyCtxt, (def_id, _): (DefId, &'tcx Substs<'tcx>)) -> String {\n-        format!(\"const-evaluating `{}`\",\n-                tcx.item_path_str(def_id))\n+        format!(\"const-evaluating `{}`\", tcx.item_path_str(def_id))\n+    }\n+}\n+\n+impl<'tcx> QueryDescription for queries::mir_keys<'tcx> {\n+    fn describe(_: TyCtxt, _: CrateNum) -> String {\n+        format!(\"getting a list of all mir_keys\")\n     }\n }\n \n@@ -546,6 +551,11 @@ define_maps! { <'tcx>\n     /// (in the `RefCell` sense) to prevent accidental mutation.\n     [pub] mir: Mir(DefId) -> &'tcx RefCell<mir::Mir<'tcx>>,\n \n+    /// Set of all the def-ids in this crate that have MIR associated with\n+    /// them. This includes all the body owners, but also things like struct\n+    /// constructors.\n+    [] mir_keys: mir_keys(CrateNum) -> Rc<DefIdSet>,\n+\n     /// Maps DefId's that have an associated Mir to the result\n     /// of the MIR qualify_consts pass. The actual meaning of\n     /// the value isn't known except to the pass itself.\n@@ -644,3 +654,7 @@ fn typeck_item_bodies_dep_node(_: CrateNum) -> DepNode<DefId> {\n fn const_eval_dep_node((def_id, _): (DefId, &Substs)) -> DepNode<DefId> {\n     DepNode::ConstEval(def_id)\n }\n+\n+fn mir_keys(_: CrateNum) -> DepNode<DefId> {\n+    DepNode::MirKeys\n+}"}, {"sha": "5e5dbdf20c04c471d56b49c0baa1ce03303e2665", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0e5e2f36345fbf44c72c60fda0929aceba5d74dd/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5e2f36345fbf44c72c60fda0929aceba5d74dd/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=0e5e2f36345fbf44c72c60fda0929aceba5d74dd", "patch": "@@ -2049,6 +2049,16 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.typeck_tables_of(self.hir.body_owner_def_id(body))\n     }\n \n+    /// Returns an iterator of the def-ids for all body-owners in this\n+    /// crate. If you would prefer to iterate over the bodies\n+    /// themselves, you can do `self.hir.krate().body_ids.iter()`.\n+    pub fn body_owners(self) -> impl Iterator<Item = DefId> + 'a {\n+        self.hir.krate()\n+                .body_ids\n+                .iter()\n+                .map(move |&body_id| self.hir.body_owner_def_id(body_id))\n+    }\n+\n     pub fn expr_span(self, id: NodeId) -> Span {\n         match self.hir.find(id) {\n             Some(hir_map::NodeExpr(e)) => {\n@@ -2331,7 +2341,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     /// Given the DefId of an item, returns its MIR, borrowed immutably.\n     /// Returns None if there is no MIR for the DefId\n     pub fn maybe_item_mir(self, did: DefId) -> Option<Ref<'gcx, Mir<'gcx>>> {\n-        if did.is_local() && !self.maps.mir.borrow().contains_key(&did) {\n+        if did.is_local() && !self.mir_keys(LOCAL_CRATE).contains(&did) {\n             return None;\n         }\n \n@@ -2541,17 +2551,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         dep_graph::visit_all_item_likes_in_krate(self.global_tcx(), dep_node_fn, visitor);\n     }\n \n-    /// Invokes `callback` for each body in the krate. This will\n-    /// create a read edge from `DepNode::Krate` to the current task;\n-    /// it is meant to be run in the context of some global task like\n-    /// `BorrowckCrate`. The callback would then create a task like\n-    /// `BorrowckBody(DefId)` to process each individual item.\n-    pub fn visit_all_bodies_in_krate<C>(self, callback: C)\n-        where C: Fn(/* body_owner */ DefId, /* body id */ hir::BodyId),\n-    {\n-        dep_graph::visit_all_bodies_in_krate(self.global_tcx(), callback)\n-    }\n-\n     /// Looks up the span of `impl_did` if the impl is local; otherwise returns `Err`\n     /// with the name of the crate containing the impl.\n     pub fn span_of_impl(self, impl_did: DefId) -> Result<Span, Symbol> {"}, {"sha": "1259816639a1e82f3c260f511f86a63e9fbd3f7f", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e5e2f36345fbf44c72c60fda0929aceba5d74dd/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5e2f36345fbf44c72c60fda0929aceba5d74dd/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=0e5e2f36345fbf44c72c60fda0929aceba5d74dd", "patch": "@@ -63,9 +63,9 @@ pub struct LoanDataFlowOperator;\n pub type LoanDataFlow<'a, 'tcx> = DataFlowContext<'a, 'tcx, LoanDataFlowOperator>;\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    tcx.visit_all_bodies_in_krate(|body_owner_def_id, _body_id| {\n+    for body_owner_def_id in tcx.body_owners() {\n         tcx.borrowck(body_owner_def_id);\n-    });\n+    }\n }\n \n pub fn provide(providers: &mut Providers) {"}, {"sha": "d40a2ab0b530986128ee893f4de3d3e985167054", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0e5e2f36345fbf44c72c60fda0929aceba5d74dd/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5e2f36345fbf44c72c60fda0929aceba5d74dd/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=0e5e2f36345fbf44c72c60fda0929aceba5d74dd", "patch": "@@ -41,7 +41,6 @@ use graphviz as dot;\n use std::cell::Cell;\n use std::fs::File;\n use std::io::{self, Write};\n-use std::iter;\n use std::option;\n use std::path::Path;\n use std::str::FromStr;\n@@ -999,22 +998,14 @@ fn print_with_analysis<'tcx, 'a: 'tcx>(sess: &'a Session,\n                 if let Some(nodeid) = nodeid {\n                     let def_id = tcx.hir.local_def_id(nodeid);\n                     match ppm {\n-                        PpmMir => write_mir_pretty(tcx, iter::once(def_id), &mut out),\n-                        PpmMirCFG => write_mir_graphviz(tcx, iter::once(def_id), &mut out),\n+                        PpmMir => write_mir_pretty(tcx, Some(def_id), &mut out),\n+                        PpmMirCFG => write_mir_graphviz(tcx, Some(def_id), &mut out),\n                         _ => unreachable!(),\n                     }?;\n                 } else {\n                     match ppm {\n-                        PpmMir => {\n-                            write_mir_pretty(tcx,\n-                                             tcx.maps.mir.borrow().keys().into_iter(),\n-                                             &mut out)\n-                        }\n-                        PpmMirCFG => {\n-                            write_mir_graphviz(tcx,\n-                                               tcx.maps.mir.borrow().keys().into_iter(),\n-                                               &mut out)\n-                        }\n+                        PpmMir => write_mir_pretty(tcx, None, &mut out),\n+                        PpmMirCFG => write_mir_graphviz(tcx, None, &mut out),\n                         _ => unreachable!(),\n                     }?;\n                 }"}, {"sha": "2160a56257b59ae050aefacc3240bd8bc3f4fa14", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0e5e2f36345fbf44c72c60fda0929aceba5d74dd/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5e2f36345fbf44c72c60fda0929aceba5d74dd/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=0e5e2f36345fbf44c72c60fda0929aceba5d74dd", "patch": "@@ -621,7 +621,12 @@ impl<'a, 'b: 'a, 'tcx: 'b> EntryBuilder<'a, 'b, 'tcx> {\n \n     fn encode_mir(&mut self, def_id: DefId) -> Option<Lazy<mir::Mir<'tcx>>> {\n         debug!(\"EntryBuilder::encode_mir({:?})\", def_id);\n-        self.tcx.maps.mir.borrow().get(&def_id).map(|mir| self.lazy(&*mir.borrow()))\n+        if self.tcx.mir_keys(LOCAL_CRATE).contains(&def_id) {\n+            let mir = self.tcx.item_mir(def_id);\n+            Some(self.lazy(&mir))\n+        } else {\n+            None\n+        }\n     }\n \n     // Encodes the inherent implementations of a structure, enumeration, or trait."}, {"sha": "961e202ba1c6ddeeec840a1d6d691eba36f003b5", "filename": "src/librustc_mir/callgraph.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e5e2f36345fbf44c72c60fda0929aceba5d74dd/src%2Flibrustc_mir%2Fcallgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5e2f36345fbf44c72c60fda0929aceba5d74dd/src%2Flibrustc_mir%2Fcallgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fcallgraph.rs?ref=0e5e2f36345fbf44c72c60fda0929aceba5d74dd", "patch": "@@ -12,7 +12,7 @@\n //!\n //! This only considers direct calls\n \n-use rustc::hir::def_id::DefId;\n+use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_data_structures::graph;\n \n use rustc::mir::*;\n@@ -31,16 +31,12 @@ impl CallGraph {\n     // FIXME: allow for construction of a callgraph that inspects\n     // cross-crate MIRs if available.\n     pub fn build<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>) -> CallGraph {\n-        let def_ids = tcx.maps.mir.borrow().keys();\n-\n         let mut callgraph = CallGraph {\n             node_map: DefIdMap(),\n             graph: graph::Graph::new()\n         };\n \n-        for def_id in def_ids {\n-            if !def_id.is_local() { continue; }\n-\n+        for &def_id in tcx.mir_keys(LOCAL_CRATE).iter() {\n             let idx = callgraph.add_node(def_id);\n \n             let mut call_visitor = CallVisitor {"}, {"sha": "353ca3bbd09e31d6ed96c3aeacb0c792b697c3ab", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 44, "deletions": 27, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/0e5e2f36345fbf44c72c60fda0929aceba5d74dd/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5e2f36345fbf44c72c60fda0929aceba5d74dd/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=0e5e2f36345fbf44c72c60fda0929aceba5d74dd", "patch": "@@ -17,7 +17,7 @@\n //! - `#[rustc_mir(pretty=\"file.mir\")]`\n \n use build;\n-use rustc::hir::def_id::DefId;\n+use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc::dep_graph::DepNode;\n use rustc::mir::Mir;\n use rustc::mir::transform::MirSource;\n@@ -32,50 +32,67 @@ use rustc::ty::maps::Providers;\n use rustc::ty::subst::Substs;\n use rustc::hir;\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n+use rustc::util::nodemap::DefIdSet;\n use syntax::abi::Abi;\n use syntax::ast;\n use syntax_pos::Span;\n \n use std::cell::RefCell;\n use std::mem;\n+use std::rc::Rc;\n \n pub fn build_mir_for_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     tcx.dep_graph.with_task(DepNode::MirKrate, tcx, (), build_mir_for_crate_task);\n \n     fn build_mir_for_crate_task<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, (): ()) {\n-        tcx.visit_all_bodies_in_krate(|body_owner_def_id, _body_id| {\n+        for &body_owner_def_id in tcx.mir_keys(LOCAL_CRATE).iter() {\n             tcx.item_mir(body_owner_def_id);\n-        });\n-\n-        // Tuple struct/variant constructors don't have a BodyId, so we need\n-        // to build them separately.\n-        struct GatherCtors<'a, 'tcx: 'a> {\n-            tcx: TyCtxt<'a, 'tcx, 'tcx>\n-        }\n-        impl<'a, 'tcx> Visitor<'tcx> for GatherCtors<'a, 'tcx> {\n-            fn visit_variant_data(&mut self,\n-                                  v: &'tcx hir::VariantData,\n-                                  _: ast::Name,\n-                                  _: &'tcx hir::Generics,\n-                                  _: ast::NodeId,\n-                                  _: Span) {\n-                if let hir::VariantData::Tuple(_, node_id) = *v {\n-                    self.tcx.item_mir(self.tcx.hir.local_def_id(node_id));\n-                }\n-                intravisit::walk_struct_def(self, v)\n-            }\n-            fn nested_visit_map<'b>(&'b mut self) -> NestedVisitorMap<'b, 'tcx> {\n-                NestedVisitorMap::None\n-            }\n         }\n-        tcx.hir.krate().visit_all_item_likes(&mut GatherCtors {\n-            tcx: tcx\n-        }.as_deep_visitor());\n     }\n }\n \n pub fn provide(providers: &mut Providers) {\n     providers.mir = build_mir;\n+    providers.mir_keys = mir_keys;\n+}\n+\n+fn mir_keys<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, krate: CrateNum)\n+                      -> Rc<DefIdSet> {\n+    assert_eq!(krate, LOCAL_CRATE);\n+\n+    let mut set = DefIdSet();\n+\n+    // All body-owners have MIR associated with them.\n+    set.extend(tcx.body_owners());\n+\n+    // Additionally, tuple struct/variant constructors have MIR, but\n+    // they don't have a BodyId, so we need to build them separately.\n+    struct GatherCtors<'a, 'tcx: 'a> {\n+        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+        set: &'a mut DefIdSet,\n+    }\n+    impl<'a, 'tcx> Visitor<'tcx> for GatherCtors<'a, 'tcx> {\n+        fn visit_variant_data(&mut self,\n+                              v: &'tcx hir::VariantData,\n+                              _: ast::Name,\n+                              _: &'tcx hir::Generics,\n+                              _: ast::NodeId,\n+                              _: Span) {\n+            if let hir::VariantData::Tuple(_, node_id) = *v {\n+                self.set.insert(self.tcx.hir.local_def_id(node_id));\n+            }\n+            intravisit::walk_struct_def(self, v)\n+        }\n+        fn nested_visit_map<'b>(&'b mut self) -> NestedVisitorMap<'b, 'tcx> {\n+            NestedVisitorMap::None\n+        }\n+    }\n+    tcx.hir.krate().visit_all_item_likes(&mut GatherCtors {\n+        tcx: tcx,\n+        set: &mut set,\n+    }.as_deep_visitor());\n+\n+    Rc::new(set)\n }\n \n fn build_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)"}, {"sha": "6895facd6af606be1589d1fbd2e44b1e294b8944", "filename": "src/librustc_mir/transform/dump_mir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e5e2f36345fbf44c72c60fda0929aceba5d74dd/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5e2f36345fbf44c72c60fda0929aceba5d74dd/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs?ref=0e5e2f36345fbf44c72c60fda0929aceba5d74dd", "patch": "@@ -81,6 +81,6 @@ pub fn emit_mir<'a, 'tcx>(\n {\n     let path = outputs.path(OutputType::Mir);\n     let mut f = File::create(&path)?;\n-    mir_util::write_mir_pretty(tcx, tcx.maps.mir.borrow().keys().into_iter(), &mut f)?;\n+    mir_util::write_mir_pretty(tcx, None, &mut f)?;\n     Ok(())\n }"}, {"sha": "fcd5f970882d7fa27d36ad16db532ecf3b2b08b7", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 9, "deletions": 29, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0e5e2f36345fbf44c72c60fda0929aceba5d74dd/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5e2f36345fbf44c72c60fda0929aceba5d74dd/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=0e5e2f36345fbf44c72c60fda0929aceba5d74dd", "patch": "@@ -10,7 +10,7 @@\n \n //! Inlining pass for MIR functions\n \n-use rustc::hir::def_id::DefId;\n+use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n \n use rustc_data_structures::bitvec::BitVector;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n@@ -58,43 +58,31 @@ impl<'tcx> MirMapPass<'tcx> for Inline {\n             tcx: tcx,\n         };\n \n-        let def_ids = tcx.maps.mir.borrow().keys();\n-        for &def_id in &def_ids {\n-            if !def_id.is_local() { continue; }\n-\n+        for &def_id in tcx.mir_keys(LOCAL_CRATE).iter() {\n             let _task = tcx.dep_graph.in_task(DepNode::Mir(def_id));\n-            let mut mir = if let Some(mir) = tcx.maps.mir.borrow().get(&def_id) {\n-                mir.borrow_mut()\n-            } else {\n-                continue;\n-            };\n-\n-            tcx.dep_graph.write(DepNode::Mir(def_id));\n+            let mir = &tcx.item_mir(def_id);\n \n             let id = tcx.hir.as_local_node_id(def_id).unwrap();\n             let src = MirSource::from_node(tcx, id);\n \n             for hook in &mut *hooks {\n-                hook.on_mir_pass(tcx, src, &mut mir, self, false);\n+                hook.on_mir_pass(tcx, src, mir, self, false);\n             }\n         }\n \n         for scc in callgraph.scc_iter() {\n             inliner.inline_scc(&callgraph, &scc);\n         }\n \n-        for def_id in def_ids {\n-            if !def_id.is_local() { continue; }\n-\n+        for &def_id in tcx.mir_keys(LOCAL_CRATE).iter() {\n             let _task = tcx.dep_graph.in_task(DepNode::Mir(def_id));\n-            let mut mir = tcx.maps.mir.borrow()[&def_id].borrow_mut();\n-            tcx.dep_graph.write(DepNode::Mir(def_id));\n+            let mir = &tcx.item_mir(def_id);\n \n             let id = tcx.hir.as_local_node_id(def_id).unwrap();\n             let src = MirSource::from_node(tcx, id);\n \n             for hook in &mut *hooks {\n-                hook.on_mir_pass(tcx, src, &mut mir, self, true);\n+                hook.on_mir_pass(tcx, src, mir, self, true);\n             }\n         }\n     }\n@@ -200,11 +188,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n \n                 };\n \n-                let mut caller_mir = {\n-                    let map = self.tcx.maps.mir.borrow();\n-                    let mir = map.get(&callsite.caller).unwrap();\n-                    mir.borrow_mut()\n-                };\n+                let mut caller_mir = self.tcx.mir(callsite.caller).borrow_mut();\n \n                 let start = caller_mir.basic_blocks().len();\n \n@@ -256,11 +240,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n             let _task = self.tcx.dep_graph.in_task(DepNode::Mir(def_id));\n             self.tcx.dep_graph.write(DepNode::Mir(def_id));\n \n-            let mut caller_mir = {\n-                let map = self.tcx.maps.mir.borrow();\n-                let mir = map.get(&def_id).unwrap();\n-                mir.borrow_mut()\n-            };\n+            let mut caller_mir = self.tcx.mir(def_id).borrow_mut();\n \n             debug!(\"Running simplify cfg on {:?}\", def_id);\n             CfgSimplifier::new(&mut caller_mir).simplify();"}, {"sha": "f566229529676fe6d7543fb638a1e729a149b4a2", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0e5e2f36345fbf44c72c60fda0929aceba5d74dd/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5e2f36345fbf44c72c60fda0929aceba5d74dd/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=0e5e2f36345fbf44c72c60fda0929aceba5d74dd", "patch": "@@ -19,7 +19,7 @@ use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n use rustc::dep_graph::DepNode;\n use rustc::hir;\n use rustc::hir::map as hir_map;\n-use rustc::hir::def_id::DefId;\n+use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::hir::map::blocks::FnLikeNode;\n use rustc::traits::{self, Reveal};\n use rustc::ty::{self, TyCtxt, Ty, TypeFoldable};\n@@ -946,12 +946,7 @@ impl<'tcx> MirMapPass<'tcx> for QualifyAndPromoteConstants {\n                     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     hooks: &mut [Box<for<'s> MirPassHook<'s>>])\n     {\n-        let def_ids = tcx.maps.mir.borrow().keys();\n-        for def_id in def_ids {\n-            if !def_id.is_local() {\n-                continue;\n-            }\n-\n+        for &def_id in tcx.mir_keys(LOCAL_CRATE).iter() {\n             let _task = tcx.dep_graph.in_task(DepNode::Mir(def_id));\n             let id = tcx.hir.as_local_node_id(def_id).unwrap();\n             let src = MirSource::from_node(tcx, id);\n@@ -961,7 +956,7 @@ impl<'tcx> MirMapPass<'tcx> for QualifyAndPromoteConstants {\n                 continue;\n             }\n \n-            let mir = &mut tcx.maps.mir.borrow()[&def_id].borrow_mut();\n+            let mir = &mut tcx.mir(def_id).borrow_mut();\n             tcx.dep_graph.write(DepNode::Mir(def_id));\n \n             for hook in &mut *hooks {"}, {"sha": "d3d3977a934d3eef9b689f8f27f7696838045591", "filename": "src/librustc_mir/util/graphviz.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0e5e2f36345fbf44c72c60fda0929aceba5d74dd/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5e2f36345fbf44c72c60fda0929aceba5d74dd/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs?ref=0e5e2f36345fbf44c72c60fda0929aceba5d74dd", "patch": "@@ -18,14 +18,16 @@ use syntax::ast::NodeId;\n \n use rustc_data_structures::indexed_vec::Idx;\n \n+use super::pretty::dump_mir_def_ids;\n+\n /// Write a graphviz DOT graph of a list of MIRs.\n-pub fn write_mir_graphviz<'a, 'b, 'tcx, W, I>(tcx: TyCtxt<'b, 'tcx, 'tcx>,\n-                                              iter: I,\n-                                              w: &mut W)\n-                                              -> io::Result<()>\n-    where W: Write, I: Iterator<Item=DefId>\n+pub fn write_mir_graphviz<'a, 'tcx, W>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                       single: Option<DefId>,\n+                                       w: &mut W)\n+                                       -> io::Result<()>\n+    where W: Write\n {\n-    for def_id in iter {\n+    for def_id in dump_mir_def_ids(tcx, single) {\n         let nodeid = tcx.hir.as_local_node_id(def_id).unwrap();\n         let mir = &tcx.item_mir(def_id);\n "}, {"sha": "c03c9c907a335fd9d0c9dc62fe8be17f5cdfb087", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0e5e2f36345fbf44c72c60fda0929aceba5d74dd/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5e2f36345fbf44c72c60fda0929aceba5d74dd/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=0e5e2f36345fbf44c72c60fda0929aceba5d74dd", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use rustc::hir;\n-use rustc::hir::def_id::DefId;\n+use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::mir::*;\n use rustc::mir::transform::MirSource;\n use rustc::ty::TyCtxt;\n@@ -85,17 +85,16 @@ pub fn dump_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n /// Write out a human-readable textual representation for the given MIR.\n-pub fn write_mir_pretty<'a, 'b, 'tcx, I>(tcx: TyCtxt<'b, 'tcx, 'tcx>,\n-                                         iter: I,\n-                                         w: &mut Write)\n-                                         -> io::Result<()>\n-    where I: Iterator<Item=DefId>, 'tcx: 'a\n+pub fn write_mir_pretty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                  single: Option<DefId>,\n+                                  w: &mut Write)\n+                                  -> io::Result<()>\n {\n     writeln!(w, \"// WARNING: This output format is intended for human consumers only\")?;\n     writeln!(w, \"// and is subject to change without notice. Knock yourself out.\")?;\n \n     let mut first = true;\n-    for def_id in iter.filter(DefId::is_local) {\n+    for def_id in dump_mir_def_ids(tcx, single) {\n         let mir = &tcx.item_mir(def_id);\n \n         if first {\n@@ -312,3 +311,11 @@ fn write_temp_decls(mir: &Mir, w: &mut Write) -> io::Result<()> {\n \n     Ok(())\n }\n+\n+pub fn dump_mir_def_ids(tcx: TyCtxt, single: Option<DefId>) -> Vec<DefId> {\n+    if let Some(i) = single {\n+        vec![i]\n+    } else {\n+        tcx.mir_keys(LOCAL_CRATE).iter().cloned().collect()\n+    }\n+}"}, {"sha": "39b3b709af7ed7d9ac934b228fe5ef288ae0176c", "filename": "src/librustc_passes/mir_stats.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e5e2f36345fbf44c72c60fda0929aceba5d74dd/src%2Flibrustc_passes%2Fmir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5e2f36345fbf44c72c60fda0929aceba5d74dd/src%2Flibrustc_passes%2Fmir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fmir_stats.rs?ref=0e5e2f36345fbf44c72c60fda0929aceba5d74dd", "patch": "@@ -13,6 +13,7 @@\n // completely accurate (some things might be counted twice, others missed).\n \n use rustc_const_math::{ConstUsize};\n+use rustc::hir::def_id::LOCAL_CRATE;\n use rustc::middle::const_val::{ConstVal};\n use rustc::mir::{AggregateKind, AssertMessage, BasicBlock, BasicBlockData};\n use rustc::mir::{Constant, Literal, Location, LocalDecl};\n@@ -44,10 +45,9 @@ pub fn print_mir_stats<'tcx, 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, title: &str) {\n     // For debugging instrumentation like this, we don't need to worry\n     // about maintaining the dep graph.\n     let _ignore = tcx.dep_graph.in_ignore();\n-    let mir_map = tcx.maps.mir.borrow();\n-    for def_id in mir_map.keys() {\n-        let mir = mir_map.get(&def_id).unwrap();\n-        collector.visit_mir(&mir.borrow());\n+    for &def_id in tcx.mir_keys(LOCAL_CRATE).iter() {\n+        let mir = tcx.item_mir(def_id);\n+        collector.visit_mir(&mir);\n     }\n     collector.print(title);\n }"}, {"sha": "11095e70f621c6e699a17e60d92d0f382f0dacda", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e5e2f36345fbf44c72c60fda0929aceba5d74dd/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5e2f36345fbf44c72c60fda0929aceba5d74dd/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=0e5e2f36345fbf44c72c60fda0929aceba5d74dd", "patch": "@@ -640,9 +640,9 @@ pub fn check_item_bodies<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> CompileResult\n fn typeck_item_bodies<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, crate_num: CrateNum) -> CompileResult {\n     debug_assert!(crate_num == LOCAL_CRATE);\n     tcx.sess.track_errors(|| {\n-        tcx.visit_all_bodies_in_krate(|body_owner_def_id, _body_id| {\n+        for body_owner_def_id in tcx.body_owners() {\n             tcx.typeck_tables_of(body_owner_def_id);\n-        });\n+        }\n     })\n }\n "}]}