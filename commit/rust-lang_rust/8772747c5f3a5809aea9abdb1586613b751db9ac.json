{"sha": "8772747c5f3a5809aea9abdb1586613b751db9ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NzI3NDdjNWYzYTU4MDlhZWE5YWJkYjE1ODY2MTNiNzUxZGI5YWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-30T16:52:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-30T16:52:12Z"}, "message": "Auto merge of #51862 - estebank:lifetime-spans, r=nikomatsakis\n\nPoint to lifetime spans on lifetime errors", "tree": {"sha": "830525cc6ddda31909db27b7aa5072d78004f7a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/830525cc6ddda31909db27b7aa5072d78004f7a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8772747c5f3a5809aea9abdb1586613b751db9ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8772747c5f3a5809aea9abdb1586613b751db9ac", "html_url": "https://github.com/rust-lang/rust/commit/8772747c5f3a5809aea9abdb1586613b751db9ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8772747c5f3a5809aea9abdb1586613b751db9ac/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96b47337d9deebdb9cbca909e7772672062021e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/96b47337d9deebdb9cbca909e7772672062021e5", "html_url": "https://github.com/rust-lang/rust/commit/96b47337d9deebdb9cbca909e7772672062021e5"}, {"sha": "8449c5ab8a83cfa1f89c8f7810a42a54130c844d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8449c5ab8a83cfa1f89c8f7810a42a54130c844d", "html_url": "https://github.com/rust-lang/rust/commit/8449c5ab8a83cfa1f89c8f7810a42a54130c844d"}], "stats": {"total": 406, "additions": 236, "deletions": 170}, "files": [{"sha": "dbf99cf30e56b58416bf35013139b77d27f3011b", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=8772747c5f3a5809aea9abdb1586613b751db9ac", "patch": "@@ -25,7 +25,7 @@ use rustc_target::spec::abi::Abi;\n use syntax::ast::{self, Name, NodeId, CRATE_NODE_ID};\n use syntax::codemap::Spanned;\n use syntax::ext::base::MacroKind;\n-use syntax_pos::Span;\n+use syntax_pos::{Span, DUMMY_SP};\n \n use hir::*;\n use hir::print::Nested;\n@@ -664,6 +664,33 @@ impl<'hir> Map<'hir> {\n         self.as_local_node_id(id).map(|id| self.get(id)) // read recorded by `get`\n     }\n \n+    pub fn get_generics(&self, id: DefId) -> Option<&'hir Generics> {\n+        self.get_if_local(id).and_then(|node| {\n+            match node {\n+                NodeImplItem(ref impl_item) => Some(&impl_item.generics),\n+                NodeTraitItem(ref trait_item) => Some(&trait_item.generics),\n+                NodeItem(ref item) => {\n+                    match item.node {\n+                        ItemFn(_, _, ref generics, _) |\n+                        ItemTy(_, ref generics) |\n+                        ItemEnum(_, ref generics) |\n+                        ItemStruct(_, ref generics) |\n+                        ItemUnion(_, ref generics) |\n+                        ItemTrait(_, _, ref generics, ..) |\n+                        ItemTraitAlias(ref generics, _) |\n+                        ItemImpl(_, _, _, ref generics, ..) => Some(generics),\n+                        _ => None,\n+                    }\n+                }\n+                _ => None,\n+            }\n+        })\n+    }\n+\n+    pub fn get_generics_span(&self, id: DefId) -> Option<Span> {\n+        self.get_generics(id).map(|generics| generics.span).filter(|sp| *sp != DUMMY_SP)\n+    }\n+\n     /// Retrieve the Node corresponding to `id`, returning None if\n     /// cannot be found.\n     pub fn find(&self, id: NodeId) -> Option<Node<'hir>> {"}, {"sha": "d8bf5fe9b6ddfe7075c48dd4ba50450305c1fa3a", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=8772747c5f3a5809aea9abdb1586613b751db9ac", "patch": "@@ -31,7 +31,7 @@ use hir::def_id::{DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX};\n use util::nodemap::{NodeMap, FxHashSet};\n use mir::mono::Linkage;\n \n-use syntax_pos::{Span, DUMMY_SP};\n+use syntax_pos::{Span, DUMMY_SP, symbol::InternedString};\n use syntax::codemap::{self, Spanned};\n use rustc_target::spec::abi::Abi;\n use syntax::ast::{self, CrateSugar, Ident, Name, NodeId, DUMMY_NODE_ID, AsmDialect};\n@@ -547,6 +547,15 @@ impl Generics {\n \n         own_counts\n     }\n+\n+    pub fn get_named(&self, name: &InternedString) -> Option<&GenericParam> {\n+        for param in &self.params {\n+            if *name == param.name.ident().as_interned_str() {\n+                return Some(param);\n+            }\n+        }\n+        None\n+    }\n }\n \n /// Synthetic Type Parameters are converted to an other form during lowering, this allows"}, {"sha": "afc83771fe1c7e4e8ed53476ad1c8ff5ecd6911e", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=8772747c5f3a5809aea9abdb1586613b751db9ac", "patch": "@@ -189,6 +189,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self,\n         region: ty::Region<'tcx>,\n     ) -> (String, Option<Span>) {\n+        let cm = self.sess.codemap();\n+\n         let scope = region.free_region_binding_scope(self);\n         let node = self.hir.as_local_node_id(scope).unwrap_or(DUMMY_NODE_ID);\n         let unknown;\n@@ -219,10 +221,26 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             }\n         };\n         let (prefix, span) = match *region {\n-            ty::ReEarlyBound(ref br) => (\n-                format!(\"the lifetime {} as defined on\", br.name),\n-                self.sess.codemap().def_span(self.hir.span(node)),\n-            ),\n+            ty::ReEarlyBound(ref br) => {\n+                let mut sp = cm.def_span(self.hir.span(node));\n+                if let Some(param) = self.hir.get_generics(scope).and_then(|generics| {\n+                    generics.get_named(&br.name)\n+                }) {\n+                    sp = param.span;\n+                }\n+                (format!(\"the lifetime {} as defined on\", br.name), sp)\n+            }\n+            ty::ReFree(ty::FreeRegion {\n+                bound_region: ty::BoundRegion::BrNamed(_, ref name), ..\n+            }) => {\n+                let mut sp = cm.def_span(self.hir.span(node));\n+                if let Some(param) = self.hir.get_generics(scope).and_then(|generics| {\n+                    generics.get_named(&name)\n+                }) {\n+                    sp = param.span;\n+                }\n+                (format!(\"the lifetime {} as defined on\", name), sp)\n+            }\n             ty::ReFree(ref fr) => match fr.bound_region {\n                 ty::BrAnon(idx) => (\n                     format!(\"the anonymous lifetime #{} defined on\", idx + 1),\n@@ -234,7 +252,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 ),\n                 _ => (\n                     format!(\"the lifetime {} as defined on\", fr.bound_region),\n-                    self.sess.codemap().def_span(self.hir.span(node)),\n+                    cm.def_span(self.hir.span(node)),\n                 ),\n             },\n             _ => bug!(),"}, {"sha": "4c903b6fe5851976d8b2087d32b83a4159beb013", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=8772747c5f3a5809aea9abdb1586613b751db9ac", "patch": "@@ -356,7 +356,6 @@ fn check_region_bounds_on_impl_method<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                 impl_generics: &ty::Generics,\n                                                 trait_to_skol_substs: &Substs<'tcx>)\n                                                 -> Result<(), ErrorReported> {\n-    let span = tcx.sess.codemap().def_span(span);\n     let trait_params = trait_generics.own_counts().lifetimes;\n     let impl_params = impl_generics.own_counts().lifetimes;\n \n@@ -378,16 +377,20 @@ fn check_region_bounds_on_impl_method<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // are zero. Since I don't quite know how to phrase things at\n     // the moment, give a kind of vague error message.\n     if trait_params != impl_params {\n-        let mut err = struct_span_err!(tcx.sess,\n-                                       span,\n-                                       E0195,\n-                                       \"lifetime parameters or bounds on method `{}` do not match \\\n-                                        the trait declaration\",\n-                                       impl_m.ident);\n+        let def_span = tcx.sess.codemap().def_span(span);\n+        let span = tcx.hir.get_generics_span(impl_m.def_id).unwrap_or(def_span);\n+        let mut err = struct_span_err!(\n+            tcx.sess,\n+            span,\n+            E0195,\n+            \"lifetime parameters or bounds on method `{}` do not match the trait declaration\",\n+            impl_m.ident,\n+        );\n         err.span_label(span, \"lifetimes do not match method in trait\");\n         if let Some(sp) = tcx.hir.span_if_local(trait_m.def_id) {\n-            err.span_label(tcx.sess.codemap().def_span(sp),\n-                           \"lifetimes in impl do not match this method in trait\");\n+            let def_sp = tcx.sess.codemap().def_span(sp);\n+            let sp = tcx.hir.get_generics_span(trait_m.def_id).unwrap_or(def_sp);\n+            err.span_label(sp, \"lifetimes in impl do not match this method in trait\");\n         }\n         err.emit();\n         return Err(ErrorReported);"}, {"sha": "f8375899e3e01cbee946b13024a6d3aca1d99095", "filename": "src/test/ui/associated-const-impl-wrong-lifetime.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-lifetime.stderr?ref=8772747c5f3a5809aea9abdb1586613b751db9ac", "patch": "@@ -6,11 +6,11 @@ LL |     const NAME: &'a str = \"unit\";\n    |\n    = note: expected type `&'static str`\n               found type `&'a str`\n-note: the lifetime 'a as defined on the impl at 17:1...\n-  --> $DIR/associated-const-impl-wrong-lifetime.rs:17:1\n+note: the lifetime 'a as defined on the impl at 17:6...\n+  --> $DIR/associated-const-impl-wrong-lifetime.rs:17:6\n    |\n LL | impl<'a> Foo for &'a () {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^\n+   |      ^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error: aborting due to previous error"}, {"sha": "5448049a8017d899fa87389b24cc20f3e875b765", "filename": "src/test/ui/borrowck/borrowck-escaping-closure-error-2.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.nll.stderr?ref=8772747c5f3a5809aea9abdb1586613b751db9ac", "patch": "@@ -7,11 +7,11 @@ LL |     //~^ ERROR E0373\n LL | }\n    | - borrowed value only lives until here\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 19:1...\n-  --> $DIR/borrowck-escaping-closure-error-2.rs:19:1\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 19:8...\n+  --> $DIR/borrowck-escaping-closure-error-2.rs:19:8\n    |\n LL | fn foo<'a>(x: &'a i32) -> Box<FnMut()+'a> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^\n \n error: aborting due to previous error\n "}, {"sha": "04f90ea9ad3a2e2bb44a7e24683a0c5151adf639", "filename": "src/test/ui/borrowck/regions-bound-missing-bound-in-impl.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.rs?ref=8772747c5f3a5809aea9abdb1586613b751db9ac", "patch": "@@ -20,6 +20,7 @@ pub trait Foo<'a, 't> {\n     fn no_bound<'b>(self, b: Inv<'b>);\n     fn has_bound<'b:'a>(self, b: Inv<'b>);\n     fn wrong_bound1<'b,'c,'d:'a+'b>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>);\n+    fn wrong_bound2<'b,'c,'d:'a+'b>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>);\n     fn okay_bound<'b,'c,'d:'a+'b+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>);\n     fn another_bound<'x: 'a>(self, x: Inv<'x>, y: Inv<'t>);\n }\n@@ -47,6 +48,10 @@ impl<'a, 't> Foo<'a, 't> for &'a isize {\n         // cases.\n     }\n \n+    fn wrong_bound2(self, b: Inv, c: Inv, d: Inv) {\n+        //~^ ERROR lifetime parameters or bounds on method `wrong_bound2` do not match the trait\n+    }\n+\n     fn okay_bound<'b,'c,'e:'b+'c>(self, b: Inv<'b>, c: Inv<'c>, e: Inv<'e>) {\n     }\n "}, {"sha": "b139369014e4426cf3573b31fc0c798662a89be4", "filename": "src/test/ui/borrowck/regions-bound-missing-bound-in-impl.stderr", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr?ref=8772747c5f3a5809aea9abdb1586613b751db9ac", "patch": "@@ -1,50 +1,59 @@\n error[E0195]: lifetime parameters or bounds on method `no_bound` do not match the trait declaration\n-  --> $DIR/regions-bound-missing-bound-in-impl.rs:28:5\n+  --> $DIR/regions-bound-missing-bound-in-impl.rs:29:16\n    |\n LL |     fn no_bound<'b>(self, b: Inv<'b>);\n-   |     ---------------------------------- lifetimes in impl do not match this method in trait\n+   |                ---- lifetimes in impl do not match this method in trait\n ...\n LL |     fn no_bound<'b:'a>(self, b: Inv<'b>) {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetimes do not match method in trait\n+   |                ^^^^^^^ lifetimes do not match method in trait\n \n error[E0195]: lifetime parameters or bounds on method `has_bound` do not match the trait declaration\n-  --> $DIR/regions-bound-missing-bound-in-impl.rs:32:5\n+  --> $DIR/regions-bound-missing-bound-in-impl.rs:33:17\n    |\n LL |     fn has_bound<'b:'a>(self, b: Inv<'b>);\n-   |     -------------------------------------- lifetimes in impl do not match this method in trait\n+   |                 ------- lifetimes in impl do not match this method in trait\n ...\n LL |     fn has_bound<'b>(self, b: Inv<'b>) {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetimes do not match method in trait\n+   |                 ^^^^ lifetimes do not match method in trait\n \n error[E0308]: method not compatible with trait\n-  --> $DIR/regions-bound-missing-bound-in-impl.rs:36:5\n+  --> $DIR/regions-bound-missing-bound-in-impl.rs:37:5\n    |\n LL |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `fn(&'a isize, Inv<'c>, Inv<'c>, Inv<'d>)`\n               found type `fn(&'a isize, Inv<'_>, Inv<'c>, Inv<'d>)`\n-note: the lifetime 'c as defined on the method body at 36:5...\n-  --> $DIR/regions-bound-missing-bound-in-impl.rs:36:5\n+note: the lifetime 'c as defined on the method body at 37:24...\n+  --> $DIR/regions-bound-missing-bound-in-impl.rs:37:24\n    |\n LL |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...does not necessarily outlive the lifetime 'c as defined on the method body at 36:5\n-  --> $DIR/regions-bound-missing-bound-in-impl.rs:36:5\n+   |                        ^^\n+note: ...does not necessarily outlive the lifetime 'c as defined on the method body at 37:24\n+  --> $DIR/regions-bound-missing-bound-in-impl.rs:37:24\n    |\n LL |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                        ^^\n+\n+error[E0195]: lifetime parameters or bounds on method `wrong_bound2` do not match the trait declaration\n+  --> $DIR/regions-bound-missing-bound-in-impl.rs:51:5\n+   |\n+LL |     fn wrong_bound2<'b,'c,'d:'a+'b>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>);\n+   |                    ---------------- lifetimes in impl do not match this method in trait\n+...\n+LL |     fn wrong_bound2(self, b: Inv, c: Inv, d: Inv) {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetimes do not match method in trait\n \n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/regions-bound-missing-bound-in-impl.rs:53:5\n+  --> $DIR/regions-bound-missing-bound-in-impl.rs:58:5\n    |\n LL |     fn another_bound<'x: 'a>(self, x: Inv<'x>, y: Inv<'t>);\n    |     ------------------------------------------------------- definition of `another_bound` from trait\n ...\n LL |     fn another_bound<'x: 't>(self, x: Inv<'x>, y: Inv<'t>) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `'x: 't`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n \n Some errors occurred: E0195, E0276, E0308.\n For more information about an error, try `rustc --explain E0195`."}, {"sha": "56b43bbd7d34ce4189d7a99d57c6dab687cf0f44", "filename": "src/test/ui/closure-expected-type/expect-region-supply-region.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-region-supply-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-region-supply-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-region-supply-region.stderr?ref=8772747c5f3a5809aea9abdb1586613b751db9ac", "patch": "@@ -38,11 +38,11 @@ LL | |\n LL | |         //~^ ERROR borrowed data cannot be stored outside of its closure\n LL | |     });\n    | |_____^\n-note: ...does not necessarily outlive the lifetime 'x as defined on the function body at 42:1\n-  --> $DIR/expect-region-supply-region.rs:42:1\n+note: ...does not necessarily outlive the lifetime 'x as defined on the function body at 42:30\n+  --> $DIR/expect-region-supply-region.rs:42:30\n    |\n LL | fn expect_bound_supply_named<'x>() {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                              ^^\n \n error[E0308]: mismatched types\n   --> $DIR/expect-region-supply-region.rs:47:33\n@@ -52,11 +52,11 @@ LL |     closure_expecting_bound(|x: &'x u32| {\n    |\n    = note: expected type `&u32`\n               found type `&'x u32`\n-note: the lifetime 'x as defined on the function body at 42:1...\n-  --> $DIR/expect-region-supply-region.rs:42:1\n+note: the lifetime 'x as defined on the function body at 42:30...\n+  --> $DIR/expect-region-supply-region.rs:42:30\n    |\n LL | fn expect_bound_supply_named<'x>() {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                              ^^\n note: ...does not necessarily outlive the anonymous lifetime #2 defined on the body at 47:29\n   --> $DIR/expect-region-supply-region.rs:47:29\n    |"}, {"sha": "3860c93a45f49abd76d491d72b4008fc6148a997", "filename": "src/test/ui/error-codes/E0195.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Ftest%2Fui%2Ferror-codes%2FE0195.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Ftest%2Fui%2Ferror-codes%2FE0195.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0195.stderr?ref=8772747c5f3a5809aea9abdb1586613b751db9ac", "patch": "@@ -1,11 +1,11 @@\n error[E0195]: lifetime parameters or bounds on method `bar` do not match the trait declaration\n-  --> $DIR/E0195.rs:19:5\n+  --> $DIR/E0195.rs:19:11\n    |\n LL |     fn bar<'a,'b:'a>(x: &'a str, y: &'b str);\n-   |     ----------------------------------------- lifetimes in impl do not match this method in trait\n+   |           ---------- lifetimes in impl do not match this method in trait\n ...\n LL |     fn bar<'a,'b>(x: &'a str, y: &'b str) { //~ ERROR E0195\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetimes do not match method in trait\n+   |           ^^^^^^^ lifetimes do not match method in trait\n \n error: aborting due to previous error\n "}, {"sha": "0e778908058e02609438cbd38b0dbf0b63e83953", "filename": "src/test/ui/error-codes/E0478.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Ftest%2Fui%2Ferror-codes%2FE0478.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Ftest%2Fui%2Ferror-codes%2FE0478.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0478.stderr?ref=8772747c5f3a5809aea9abdb1586613b751db9ac", "patch": "@@ -4,16 +4,16 @@ error[E0478]: lifetime bound not satisfied\n LL |     child: Box<Wedding<'kiss> + 'SnowWhite>, //~ ERROR E0478\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: lifetime parameter instantiated with the lifetime 'SnowWhite as defined on the struct at 13:1\n-  --> $DIR/E0478.rs:13:1\n+note: lifetime parameter instantiated with the lifetime 'SnowWhite as defined on the struct at 13:22\n+  --> $DIR/E0478.rs:13:22\n    |\n LL | struct Prince<'kiss, 'SnowWhite> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: but lifetime parameter must outlive the lifetime 'kiss as defined on the struct at 13:1\n-  --> $DIR/E0478.rs:13:1\n+   |                      ^^^^^^^^^^\n+note: but lifetime parameter must outlive the lifetime 'kiss as defined on the struct at 13:15\n+  --> $DIR/E0478.rs:13:15\n    |\n LL | struct Prince<'kiss, 'SnowWhite> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |               ^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "92464a2430169379aee84065f76b77ca002384c7", "filename": "src/test/ui/impl-trait/region-escape-via-bound.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.stderr?ref=8772747c5f3a5809aea9abdb1586613b751db9ac", "patch": "@@ -4,16 +4,11 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL | fn foo(x: Cell<&'x u32>) -> impl Trait<'y>\n    |                             ^^^^^^^^^^^^^^\n    |\n-note: hidden type `std::cell::Cell<&'x u32>` captures the lifetime 'x as defined on the function body at 26:1\n-  --> $DIR/region-escape-via-bound.rs:26:1\n+note: hidden type `std::cell::Cell<&'x u32>` captures the lifetime 'x as defined on the function body at 28:7\n+  --> $DIR/region-escape-via-bound.rs:28:7\n    |\n-LL | / fn foo(x: Cell<&'x u32>) -> impl Trait<'y>\n-LL | |     //~^ ERROR hidden type for `impl Trait` captures lifetime that does not appear in bounds [E0700]\n-LL | | where 'x: 'y\n-LL | | {\n-LL | |     x\n-LL | | }\n-   | |_^\n+LL | where 'x: 'y\n+   |       ^^\n \n error: aborting due to previous error\n "}, {"sha": "083ad03ff8503e1de27c964354a64e5fb4fbf620", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr?ref=8772747c5f3a5809aea9abdb1586613b751db9ac", "patch": "@@ -30,12 +30,12 @@ LL |         self.x.iter().map(|a| a.0)\n    |         |\n    |         ...but this borrow...\n    |\n-note: ...can't outlive the lifetime 'a as defined on the method body at 20:5\n-  --> $DIR/static-return-lifetime-infered.rs:20:5\n+note: ...can't outlive the lifetime 'a as defined on the method body at 20:20\n+  --> $DIR/static-return-lifetime-infered.rs:20:20\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime 'a as defined on the method body at 20:5\n+   |                    ^^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime 'a as defined on the method body at 20:20\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {\n    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "3e54ebeb398d6dda554d04c2340cac6950edd2e6", "filename": "src/test/ui/in-band-lifetimes/impl/dyn-trait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.stderr?ref=8772747c5f3a5809aea9abdb1586613b751db9ac", "patch": "@@ -4,11 +4,11 @@ error[E0495]: cannot infer an appropriate lifetime due to conflicting requiremen\n LL |     static_val(x); //~ ERROR cannot infer\n    |                ^\n    |\n-note: first, the lifetime cannot outlive the lifetime 'a as defined on the function body at 31:1...\n-  --> $DIR/dyn-trait.rs:31:1\n+note: first, the lifetime cannot outlive the lifetime 'a as defined on the function body at 31:26...\n+  --> $DIR/dyn-trait.rs:31:26\n    |\n LL | fn with_dyn_debug_static<'a>(x: Box<dyn Debug + 'a>) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                          ^^\n    = note: ...so that the expression is assignable:\n            expected std::boxed::Box<dyn std::fmt::Debug>\n               found std::boxed::Box<(dyn std::fmt::Debug + 'a)>"}, {"sha": "f2c6155fd98f8e52c5dd8a19277d6c6906d8e779", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr?ref=8772747c5f3a5809aea9abdb1586613b751db9ac", "patch": "@@ -11,11 +11,11 @@ LL | /     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 { //~ ERROR cannot infe\n LL | |         x\n LL | |     }\n    | |_____^\n-note: ...but the lifetime must also be valid for the lifetime 'a as defined on the method body at 19:5...\n-  --> $DIR/mismatched_trait_impl.rs:19:5\n+note: ...but the lifetime must also be valid for the lifetime 'a as defined on the method body at 19:32...\n+  --> $DIR/mismatched_trait_impl.rs:19:32\n    |\n LL |     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 { //~ ERROR cannot infer\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                ^^\n    = note: ...so that the method type is compatible with trait:\n            expected fn(&i32, &'a u32, &u32) -> &'a u32\n               found fn(&i32, &u32, &u32) -> &u32"}, {"sha": "5e2ecbb05aebc98e404888458cd7a23b37c83449", "filename": "src/test/ui/issue-27942.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Ftest%2Fui%2Fissue-27942.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Ftest%2Fui%2Fissue-27942.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-27942.stderr?ref=8772747c5f3a5809aea9abdb1586613b751db9ac", "patch": "@@ -11,11 +11,11 @@ note: the anonymous lifetime #1 defined on the method body at 15:5...\n    |\n LL |     fn select(&self) -> BufferViewHandle<R>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...does not necessarily outlive the lifetime 'a as defined on the trait at 13:1\n-  --> $DIR/issue-27942.rs:13:1\n+note: ...does not necessarily outlive the lifetime 'a as defined on the trait at 13:18\n+  --> $DIR/issue-27942.rs:13:18\n    |\n LL | pub trait Buffer<'a, R: Resources<'a>> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^\n \n error[E0308]: mismatched types\n   --> $DIR/issue-27942.rs:15:5\n@@ -25,11 +25,11 @@ LL |     fn select(&self) -> BufferViewHandle<R>;\n    |\n    = note: expected type `Resources<'_>`\n               found type `Resources<'a>`\n-note: the lifetime 'a as defined on the trait at 13:1...\n-  --> $DIR/issue-27942.rs:13:1\n+note: the lifetime 'a as defined on the trait at 13:18...\n+  --> $DIR/issue-27942.rs:13:18\n    |\n LL | pub trait Buffer<'a, R: Resources<'a>> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^\n note: ...does not necessarily outlive the anonymous lifetime #1 defined on the method body at 15:5\n   --> $DIR/issue-27942.rs:15:5\n    |"}, {"sha": "f01b623aced4225404b32e96dda2e3ef699eaa4a", "filename": "src/test/ui/issue-37884.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Ftest%2Fui%2Fissue-37884.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Ftest%2Fui%2Fissue-37884.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-37884.stderr?ref=8772747c5f3a5809aea9abdb1586613b751db9ac", "patch": "@@ -21,11 +21,11 @@ LL | |     {\n LL | |         Some(&mut self.0)\n LL | |     }\n    | |_____^\n-note: ...does not necessarily outlive the lifetime 'a as defined on the impl at 13:1\n-  --> $DIR/issue-37884.rs:13:1\n+note: ...does not necessarily outlive the lifetime 'a as defined on the impl at 13:6\n+  --> $DIR/issue-37884.rs:13:6\n    |\n LL | impl<'a, T: 'a> Iterator for RepeatMut<'a, T> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |      ^^\n \n error: aborting due to previous error\n "}, {"sha": "8eede34747827f313a0d19fae5db147a28465aaa", "filename": "src/test/ui/issue-4335.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Ftest%2Fui%2Fissue-4335.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Ftest%2Fui%2Fissue-4335.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-4335.nll.stderr?ref=8772747c5f3a5809aea9abdb1586613b751db9ac", "patch": "@@ -13,11 +13,11 @@ LL |     id(Box::new(|| *v))\n LL | }\n    | - borrowed value only lives until here\n    |\n-note: borrowed value must be valid for the lifetime 'r as defined on the function body at 15:1...\n-  --> $DIR/issue-4335.rs:15:1\n+note: borrowed value must be valid for the lifetime 'r as defined on the function body at 15:6...\n+  --> $DIR/issue-4335.rs:15:6\n    |\n LL | fn f<'r, T>(v: &'r T) -> Box<FnMut() -> T + 'r> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |      ^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9e5acf56d26ca97286a39cf5389d2d241add2fde", "filename": "src/test/ui/issue-46472.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Ftest%2Fui%2Fissue-46472.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Ftest%2Fui%2Fissue-46472.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46472.stderr?ref=8772747c5f3a5809aea9abdb1586613b751db9ac", "patch": "@@ -7,11 +7,11 @@ LL |     &mut 4\n LL | }\n    | - temporary value only lives until here\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 13:1...\n-  --> $DIR/issue-46472.rs:13:1\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 13:8...\n+  --> $DIR/issue-46472.rs:13:8\n    |\n LL | fn bar<'a>() -> &'a mut u32 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^\n \n error[E0597]: borrowed value does not live long enough (Mir)\n   --> $DIR/issue-46472.rs:14:10\n@@ -22,11 +22,11 @@ LL |     &mut 4\n LL | }\n    | - temporary value only lives until here\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 13:1...\n-  --> $DIR/issue-46472.rs:13:1\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 13:8...\n+  --> $DIR/issue-46472.rs:13:8\n    |\n LL | fn bar<'a>() -> &'a mut u32 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ea7d81993844382cd06f14a66af91637b00f7451", "filename": "src/test/ui/nll/borrowed-universal-error-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error-2.stderr?ref=8772747c5f3a5809aea9abdb1586613b751db9ac", "patch": "@@ -7,11 +7,11 @@ LL |     //~^ ERROR `v` does not live long enough [E0597]\n LL | }\n    | - borrowed value only lives until here\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 14:1...\n-  --> $DIR/borrowed-universal-error-2.rs:14:1\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 14:8...\n+  --> $DIR/borrowed-universal-error-2.rs:14:8\n    |\n LL | fn foo<'a>(x: &'a (u32,)) -> &'a u32 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^\n \n error: aborting due to previous error\n "}, {"sha": "da287980e8c5f49356907b1ae831af77ca2dbfab", "filename": "src/test/ui/nll/borrowed-universal-error.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error.stderr?ref=8772747c5f3a5809aea9abdb1586613b751db9ac", "patch": "@@ -7,11 +7,11 @@ LL |     //~^ ERROR borrowed value does not live long enough [E0597]\n LL | }\n    | - temporary value only lives until here\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 18:1...\n-  --> $DIR/borrowed-universal-error.rs:18:1\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 18:8...\n+  --> $DIR/borrowed-universal-error.rs:18:8\n    |\n LL | fn foo<'a>(x: &'a (u32,)) -> &'a u32 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^\n \n error: aborting due to previous error\n "}, {"sha": "065de6ea600b4eb46116b7989d67679c9f1d1f9c", "filename": "src/test/ui/nll/issue-31567.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Ftest%2Fui%2Fnll%2Fissue-31567.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Ftest%2Fui%2Fnll%2Fissue-31567.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-31567.stderr?ref=8772747c5f3a5809aea9abdb1586613b751db9ac", "patch": "@@ -7,11 +7,11 @@ LL |     &s_inner.0\n LL | }\n    | - borrowed value only lives until here\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 21:1...\n-  --> $DIR/issue-31567.rs:21:1\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 21:17...\n+  --> $DIR/issue-31567.rs:21:17\n    |\n LL | fn get_dangling<'a>(v: VecWrapper<'a>) -> &'a u32 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                 ^^\n \n error: aborting due to previous error\n "}, {"sha": "a89e186540a47c74f1f9abf056528e9be4c8352d", "filename": "src/test/ui/nll/issue-47470.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Ftest%2Fui%2Fnll%2Fissue-47470.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Ftest%2Fui%2Fnll%2Fissue-47470.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-47470.stderr?ref=8772747c5f3a5809aea9abdb1586613b751db9ac", "patch": "@@ -6,11 +6,11 @@ LL |         &local //~ ERROR `local` does not live long enough\n LL |     }\n    |     - borrowed value only lives until here\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the impl at 23:1...\n-  --> $DIR/issue-47470.rs:23:1\n+note: borrowed value must be valid for the lifetime 'a as defined on the impl at 23:6...\n+  --> $DIR/issue-47470.rs:23:6\n    |\n LL | impl<'a> Bar for Foo<'a> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |      ^^\n \n error: aborting due to previous error\n "}, {"sha": "3548219361fc74876a361ed4047ad8a1cb85779f", "filename": "src/test/ui/nll/normalization-bounds-error.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds-error.stderr?ref=8772747c5f3a5809aea9abdb1586613b751db9ac", "patch": "@@ -4,16 +4,16 @@ error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'d` d\n LL | fn visit_seq<'d, 'a: 'd>() -> <&'a () as Visitor<'d>>::Value {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime 'd as defined on the function body at 23:1...\n-  --> $DIR/normalization-bounds-error.rs:23:1\n+note: first, the lifetime cannot outlive the lifetime 'd as defined on the function body at 23:14...\n+  --> $DIR/normalization-bounds-error.rs:23:14\n    |\n LL | fn visit_seq<'d, 'a: 'd>() -> <&'a () as Visitor<'d>>::Value {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...but the lifetime must also be valid for the lifetime 'a as defined on the function body at 23:1...\n-  --> $DIR/normalization-bounds-error.rs:23:1\n+   |              ^^\n+note: ...but the lifetime must also be valid for the lifetime 'a as defined on the function body at 23:18...\n+  --> $DIR/normalization-bounds-error.rs:23:18\n    |\n LL | fn visit_seq<'d, 'a: 'd>() -> <&'a () as Visitor<'d>>::Value {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^\n    = note: ...so that the types are compatible:\n            expected Visitor<'d>\n               found Visitor<'_>"}, {"sha": "07972ecced313abf7e46f70b5f49e60bf7c8a408", "filename": "src/test/ui/nll/trait-associated-constant.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Ftest%2Fui%2Fnll%2Ftrait-associated-constant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Ftest%2Fui%2Fnll%2Ftrait-associated-constant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftrait-associated-constant.stderr?ref=8772747c5f3a5809aea9abdb1586613b751db9ac", "patch": "@@ -6,16 +6,16 @@ LL |     const AC: Option<&'c str> = None;\n    |\n    = note: expected type `std::option::Option<&'b str>`\n               found type `std::option::Option<&'c str>`\n-note: the lifetime 'c as defined on the impl at 30:1...\n-  --> $DIR/trait-associated-constant.rs:30:1\n+note: the lifetime 'c as defined on the impl at 30:18...\n+  --> $DIR/trait-associated-constant.rs:30:18\n    |\n LL | impl<'a: 'b, 'b, 'c> Anything<'a, 'b> for FailStruct1 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...does not necessarily outlive the lifetime 'b as defined on the impl at 30:1\n-  --> $DIR/trait-associated-constant.rs:30:1\n+   |                  ^^\n+note: ...does not necessarily outlive the lifetime 'b as defined on the impl at 30:14\n+  --> $DIR/trait-associated-constant.rs:30:14\n    |\n LL | impl<'a: 'b, 'b, 'c> Anything<'a, 'b> for FailStruct1 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              ^^\n \n error[E0308]: mismatched types\n   --> $DIR/trait-associated-constant.rs:38:5\n@@ -25,16 +25,16 @@ LL |     const AC: Option<&'a str> = None;\n    |\n    = note: expected type `std::option::Option<&'b str>`\n               found type `std::option::Option<&'a str>`\n-note: the lifetime 'a as defined on the impl at 37:1...\n-  --> $DIR/trait-associated-constant.rs:37:1\n+note: the lifetime 'a as defined on the impl at 37:6...\n+  --> $DIR/trait-associated-constant.rs:37:6\n    |\n LL | impl<'a: 'b, 'b> Anything<'a, 'b> for FailStruct2 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...does not necessarily outlive the lifetime 'b as defined on the impl at 37:1\n-  --> $DIR/trait-associated-constant.rs:37:1\n+   |      ^^\n+note: ...does not necessarily outlive the lifetime 'b as defined on the impl at 37:14\n+  --> $DIR/trait-associated-constant.rs:37:14\n    |\n LL | impl<'a: 'b, 'b> Anything<'a, 'b> for FailStruct2 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              ^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "443af08e1cc7ccdfe3687fa5e14b271c6e38a7d5", "filename": "src/test/ui/region-borrow-params-issue-29793-small.nll.stderr", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Ftest%2Fui%2Fregion-borrow-params-issue-29793-small.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Ftest%2Fui%2Fregion-borrow-params-issue-29793-small.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregion-borrow-params-issue-29793-small.nll.stderr?ref=8772747c5f3a5809aea9abdb1586613b751db9ac", "patch": "@@ -43,11 +43,11 @@ LL |         let f = |t: bool| if t { x } else { y }; // (separate errors for `x\n LL |     };\n    |     - borrowed value only lives until here\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 64:5...\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:64:5\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 64:10...\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:64:10\n    |\n LL |     fn g<'a>(x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |          ^^\n \n error[E0597]: `y` does not live long enough\n   --> $DIR/region-borrow-params-issue-29793-small.rs:65:17\n@@ -58,11 +58,11 @@ LL |         let f = |t: bool| if t { x } else { y }; // (separate errors for `x\n LL |     };\n    |     - borrowed value only lives until here\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 64:5...\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:64:5\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 64:10...\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:64:10\n    |\n LL |     fn g<'a>(x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |          ^^\n \n error[E0597]: `x` does not live long enough\n   --> $DIR/region-borrow-params-issue-29793-small.rs:76:17\n@@ -73,11 +73,11 @@ LL |         let f = |t: bool| if t { x } else { y }; // (separate errors for `x\n LL |     };\n    |     - borrowed value only lives until here\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 75:5...\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:75:5\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 75:10...\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:75:10\n    |\n LL |     fn g<'a>(x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |          ^^\n \n error[E0597]: `y` does not live long enough\n   --> $DIR/region-borrow-params-issue-29793-small.rs:76:17\n@@ -88,11 +88,11 @@ LL |         let f = |t: bool| if t { x } else { y }; // (separate errors for `x\n LL |     };\n    |     - borrowed value only lives until here\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 75:5...\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:75:5\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 75:10...\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:75:10\n    |\n LL |     fn g<'a>(x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |          ^^\n \n error[E0597]: `x` does not live long enough\n   --> $DIR/region-borrow-params-issue-29793-small.rs:100:21\n@@ -103,11 +103,11 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n LL |         }\n    |         - borrowed value only lives until here\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the method body at 99:9...\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:99:9\n+note: borrowed value must be valid for the lifetime 'a as defined on the method body at 99:14...\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:99:14\n    |\n LL |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              ^^\n \n error[E0597]: `y` does not live long enough\n   --> $DIR/region-borrow-params-issue-29793-small.rs:100:21\n@@ -118,11 +118,11 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n LL |         }\n    |         - borrowed value only lives until here\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the method body at 99:9...\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:99:9\n+note: borrowed value must be valid for the lifetime 'a as defined on the method body at 99:14...\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:99:14\n    |\n LL |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              ^^\n \n error[E0597]: `x` does not live long enough\n   --> $DIR/region-borrow-params-issue-29793-small.rs:114:21\n@@ -133,11 +133,11 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n LL |         }\n    |         - borrowed value only lives until here\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the method body at 113:9...\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:113:9\n+note: borrowed value must be valid for the lifetime 'a as defined on the method body at 113:14...\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:113:14\n    |\n LL |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              ^^\n \n error[E0597]: `y` does not live long enough\n   --> $DIR/region-borrow-params-issue-29793-small.rs:114:21\n@@ -148,11 +148,11 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n LL |         }\n    |         - borrowed value only lives until here\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the method body at 113:9...\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:113:9\n+note: borrowed value must be valid for the lifetime 'a as defined on the method body at 113:14...\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:113:14\n    |\n LL |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              ^^\n \n error[E0597]: `x` does not live long enough\n   --> $DIR/region-borrow-params-issue-29793-small.rs:142:21\n@@ -163,11 +163,11 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n LL |         }\n    |         - borrowed value only lives until here\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the method body at 141:9...\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:141:9\n+note: borrowed value must be valid for the lifetime 'a as defined on the method body at 141:14...\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:141:14\n    |\n LL |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              ^^\n \n error[E0597]: `y` does not live long enough\n   --> $DIR/region-borrow-params-issue-29793-small.rs:142:21\n@@ -178,11 +178,11 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n LL |         }\n    |         - borrowed value only lives until here\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the method body at 141:9...\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:141:9\n+note: borrowed value must be valid for the lifetime 'a as defined on the method body at 141:14...\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:141:14\n    |\n LL |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              ^^\n \n error[E0597]: `x` does not live long enough\n   --> $DIR/region-borrow-params-issue-29793-small.rs:157:21\n@@ -193,11 +193,11 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n LL |         }\n    |         - borrowed value only lives until here\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the method body at 156:9...\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:156:9\n+note: borrowed value must be valid for the lifetime 'a as defined on the method body at 156:14...\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:156:14\n    |\n LL |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              ^^\n \n error[E0597]: `y` does not live long enough\n   --> $DIR/region-borrow-params-issue-29793-small.rs:157:21\n@@ -208,11 +208,11 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n LL |         }\n    |         - borrowed value only lives until here\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the method body at 156:9...\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:156:9\n+note: borrowed value must be valid for the lifetime 'a as defined on the method body at 156:14...\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:156:14\n    |\n LL |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              ^^\n \n error[E0597]: `x` does not live long enough\n   --> $DIR/region-borrow-params-issue-29793-small.rs:185:21\n@@ -223,11 +223,11 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n LL |         }\n    |         - borrowed value only lives until here\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the method body at 184:9...\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:184:9\n+note: borrowed value must be valid for the lifetime 'a as defined on the method body at 184:14...\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:184:14\n    |\n LL |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              ^^\n \n error[E0597]: `y` does not live long enough\n   --> $DIR/region-borrow-params-issue-29793-small.rs:185:21\n@@ -238,11 +238,11 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n LL |         }\n    |         - borrowed value only lives until here\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the method body at 184:9...\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:184:9\n+note: borrowed value must be valid for the lifetime 'a as defined on the method body at 184:14...\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:184:14\n    |\n LL |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              ^^\n \n error[E0597]: `x` does not live long enough\n   --> $DIR/region-borrow-params-issue-29793-small.rs:199:21\n@@ -253,11 +253,11 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n LL |         }\n    |         - borrowed value only lives until here\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the method body at 198:9...\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:198:9\n+note: borrowed value must be valid for the lifetime 'a as defined on the method body at 198:14...\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:198:14\n    |\n LL |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              ^^\n \n error[E0597]: `y` does not live long enough\n   --> $DIR/region-borrow-params-issue-29793-small.rs:199:21\n@@ -268,11 +268,11 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n LL |         }\n    |         - borrowed value only lives until here\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the method body at 198:9...\n-  --> $DIR/region-borrow-params-issue-29793-small.rs:198:9\n+note: borrowed value must be valid for the lifetime 'a as defined on the method body at 198:14...\n+  --> $DIR/region-borrow-params-issue-29793-small.rs:198:14\n    |\n LL |         fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              ^^\n \n error: aborting due to 20 previous errors\n "}, {"sha": "c38b8a96f9fc27f7379d9b9132a6918f5323e3c3", "filename": "src/test/ui/static-lifetime.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Ftest%2Fui%2Fstatic-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8772747c5f3a5809aea9abdb1586613b751db9ac/src%2Ftest%2Fui%2Fstatic-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic-lifetime.stderr?ref=8772747c5f3a5809aea9abdb1586613b751db9ac", "patch": "@@ -4,11 +4,11 @@ error[E0478]: lifetime bound not satisfied\n LL | impl<'a, A: Clone> Arbitrary for ::std::borrow::Cow<'a, A> {} //~ ERROR lifetime bound\n    |                    ^^^^^^^^^\n    |\n-note: lifetime parameter instantiated with the lifetime 'a as defined on the impl at 13:1\n-  --> $DIR/static-lifetime.rs:13:1\n+note: lifetime parameter instantiated with the lifetime 'a as defined on the impl at 13:6\n+  --> $DIR/static-lifetime.rs:13:6\n    |\n LL | impl<'a, A: Clone> Arbitrary for ::std::borrow::Cow<'a, A> {} //~ ERROR lifetime bound\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |      ^^\n    = note: but lifetime parameter must outlive the static lifetime\n \n error: aborting due to previous error"}]}