{"sha": "25c71e5c0e88fb9fa9e657549658760f2e8d6bb2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1YzcxZTVjMGU4OGZiOWZhOWU2NTc1NDk2NTg3NjBmMmU4ZDZiYjI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-12T10:00:55Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-12T10:01:20Z"}, "message": "test some more corner cases in happy float casts", "tree": {"sha": "cfff6487ad6a7c96ab47fed7c2a190c3c2214564", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfff6487ad6a7c96ab47fed7c2a190c3c2214564"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25c71e5c0e88fb9fa9e657549658760f2e8d6bb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25c71e5c0e88fb9fa9e657549658760f2e8d6bb2", "html_url": "https://github.com/rust-lang/rust/commit/25c71e5c0e88fb9fa9e657549658760f2e8d6bb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25c71e5c0e88fb9fa9e657549658760f2e8d6bb2/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30d07c861620c4c03226a9a0c693691b2e44ca58", "url": "https://api.github.com/repos/rust-lang/rust/commits/30d07c861620c4c03226a9a0c693691b2e44ca58", "html_url": "https://github.com/rust-lang/rust/commit/30d07c861620c4c03226a9a0c693691b2e44ca58"}], "stats": {"total": 20, "additions": 18, "deletions": 2}, "files": [{"sha": "364388571f44c22aee068a185ad4155c739c28a1", "filename": "tests/run-pass/float.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/25c71e5c0e88fb9fa9e657549658760f2e8d6bb2/tests%2Frun-pass%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25c71e5c0e88fb9fa9e657549658760f2e8d6bb2/tests%2Frun-pass%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffloat.rs?ref=25c71e5c0e88fb9fa9e657549658760f2e8d6bb2", "patch": "@@ -56,6 +56,14 @@ impl FloatToInt<u64> for f64 {\n     fn cast(self) -> u64 { self as _ }\n     unsafe fn cast_unchecked(self) -> u64 { self.to_int_unchecked() }\n }\n+impl FloatToInt<i128> for f64 {\n+    fn cast(self) -> i128 { self as _ }\n+    unsafe fn cast_unchecked(self) -> i128 { self.to_int_unchecked() }\n+}\n+impl FloatToInt<u128> for f64 {\n+    fn cast(self) -> u128 { self as _ }\n+    unsafe fn cast_unchecked(self) -> u128 { self.to_int_unchecked() }\n+}\n \n /// Test this cast both via `as` and via `approx_unchecked` (i.e., it must not saturate).\n #[track_caller]\n@@ -137,6 +145,7 @@ fn casts() {\n     // f32 -> u32\n     test_cast::<f32, u32>(0.0, 0);\n     test_cast::<f32, u32>(-0.0, 0);\n+    test_cast::<f32, u32>(-0.9999999, 0);\n     test_cast::<f32, u32>(/*0x1p-149*/ f32::from_bits(0x1), 0);\n     test_cast::<f32, u32>(/*-0x1p-149*/ f32::from_bits(0x80000001), 0);\n     test_cast::<f32, u32>(/*0x1.19999ap+0*/ f32::from_bits(0x3f8ccccd), 1);\n@@ -210,6 +219,7 @@ fn casts() {\n     // f64 -> u64\n     test_cast::<f64, u64>(0.0, 0);\n     test_cast::<f64, u64>(-0.0, 0);\n+    test_cast::<f64, u64>(-0.99999999999, 0);\n     test_cast::<f64, u64>(5.0, 5);\n     test_cast::<f64, u64>(1e16, 10000000000000000);\n     test_cast::<f64, u64>((u64::MAX-1024) as f64, u64::MAX-2047); // rounding loss\n@@ -225,6 +235,14 @@ fn casts() {\n     assert_eq::<u64>(f64::NAN as u64, 0);\n     assert_eq::<u64>((-f64::NAN) as u64, 0);\n \n+    // f64 -> i128\n+    assert_eq::<i128>(f64::MAX as i128, i128::MAX);\n+    assert_eq::<i128>(f64::MIN as i128, i128::MIN);\n+\n+    // f64 -> u128\n+    assert_eq::<u128>(f64::MAX as u128, u128::MAX);\n+    assert_eq::<u128>(f64::MIN as u128, 0);\n+\n     // int -> f32\n     assert_eq::<f32>(127i8 as f32, 127.0);\n     assert_eq::<f32>(2147483647i32 as f32, 2147483648.0);\n@@ -275,10 +293,8 @@ fn casts() {\n     assert_eq::<f32>(5.0f64 as f32, 5.0f32);\n     assert_eq::<f32>(/*0x0.0000000000001p-1022*/ f64::from_bits(0x1) as f32, 0.0);\n     assert_eq::<f32>(/*-0x0.0000000000001p-1022*/ (-f64::from_bits(0x1)) as f32, -0.0);\n-\n     assert_eq::<f32>(/*0x1.fffffe0000000p-127*/ f64::from_bits(0x380fffffe0000000) as f32, /*0x1p-149*/ f32::from_bits(0x800000));\n     assert_eq::<f32>(/*0x1.4eae4f7024c7p+108*/ f64::from_bits(0x46b4eae4f7024c70) as f32, /*0x1.4eae5p+108*/ f32::from_bits(0x75a75728));\n-\n     assert_eq::<f32>(f64::MAX as f32, f32::INFINITY);\n     assert_eq::<f32>(f64::MIN as f32, f32::NEG_INFINITY);\n     assert_eq::<f32>(f64::INFINITY as f32, f32::INFINITY);"}]}