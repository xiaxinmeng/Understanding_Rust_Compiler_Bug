{"sha": "7dad29d6868914484be04cb054863261903bba58", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkYWQyOWQ2ODY4OTE0NDg0YmUwNGNiMDU0ODYzMjYxOTAzYmJhNTg=", "commit": {"author": {"name": "Bram van den Heuvel", "email": "bram@vandenheuvel.online", "date": "2020-09-01T15:58:34Z"}, "committer": {"name": "Bram van den Heuvel", "email": "bram@vandenheuvel.online", "date": "2020-09-09T08:14:31Z"}, "message": "Remove def_id field from ParamEnv", "tree": {"sha": "b3fe0eb57a739a3c1f9abd36368a196072b5fa27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3fe0eb57a739a3c1f9abd36368a196072b5fa27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7dad29d6868914484be04cb054863261903bba58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7dad29d6868914484be04cb054863261903bba58", "html_url": "https://github.com/rust-lang/rust/commit/7dad29d6868914484be04cb054863261903bba58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7dad29d6868914484be04cb054863261903bba58/comments", "author": {"login": "vandenheuvel", "id": 20440137, "node_id": "MDQ6VXNlcjIwNDQwMTM3", "avatar_url": "https://avatars.githubusercontent.com/u/20440137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vandenheuvel", "html_url": "https://github.com/vandenheuvel", "followers_url": "https://api.github.com/users/vandenheuvel/followers", "following_url": "https://api.github.com/users/vandenheuvel/following{/other_user}", "gists_url": "https://api.github.com/users/vandenheuvel/gists{/gist_id}", "starred_url": "https://api.github.com/users/vandenheuvel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vandenheuvel/subscriptions", "organizations_url": "https://api.github.com/users/vandenheuvel/orgs", "repos_url": "https://api.github.com/users/vandenheuvel/repos", "events_url": "https://api.github.com/users/vandenheuvel/events{/privacy}", "received_events_url": "https://api.github.com/users/vandenheuvel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vandenheuvel", "id": 20440137, "node_id": "MDQ6VXNlcjIwNDQwMTM3", "avatar_url": "https://avatars.githubusercontent.com/u/20440137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vandenheuvel", "html_url": "https://github.com/vandenheuvel", "followers_url": "https://api.github.com/users/vandenheuvel/followers", "following_url": "https://api.github.com/users/vandenheuvel/following{/other_user}", "gists_url": "https://api.github.com/users/vandenheuvel/gists{/gist_id}", "starred_url": "https://api.github.com/users/vandenheuvel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vandenheuvel/subscriptions", "organizations_url": "https://api.github.com/users/vandenheuvel/orgs", "repos_url": "https://api.github.com/users/vandenheuvel/repos", "events_url": "https://api.github.com/users/vandenheuvel/events{/privacy}", "received_events_url": "https://api.github.com/users/vandenheuvel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "780ca140a074845661aaebf08755b4217d7b636d", "url": "https://api.github.com/repos/rust-lang/rust/commits/780ca140a074845661aaebf08755b4217d7b636d", "html_url": "https://github.com/rust-lang/rust/commit/780ca140a074845661aaebf08755b4217d7b636d"}], "stats": {"total": 625, "additions": 288, "deletions": 337}, "files": [{"sha": "de98cccf25689db74a4f1e78c91cde3dc50cee0a", "filename": "compiler/rustc_infer/src/infer/outlives/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs?ref=7dad29d6868914484be04cb054863261903bba58", "patch": "@@ -26,7 +26,8 @@ pub fn explicit_outlives_bounds<'tcx>(\n             | ty::PredicateAtom::ClosureKind(..)\n             | ty::PredicateAtom::TypeOutlives(..)\n             | ty::PredicateAtom::ConstEvaluatable(..)\n-            | ty::PredicateAtom::ConstEquate(..) => None,\n+            | ty::PredicateAtom::ConstEquate(..)\n+            | ty::PredicateAtom::TypeWellFormedFromEnv(..) => None,\n             ty::PredicateAtom::RegionOutlives(ty::OutlivesPredicate(r_a, r_b)) => {\n                 Some(OutlivesBound::RegionSubRegion(r_b, r_a))\n             }"}, {"sha": "a3c4920fa8af3dc593adff29ef4e209edb9b0165", "filename": "compiler/rustc_infer/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs?ref=7dad29d6868914484be04cb054863261903bba58", "patch": "@@ -57,7 +57,7 @@ pub type TraitObligation<'tcx> = Obligation<'tcx, ty::PolyTraitPredicate<'tcx>>;\n \n // `PredicateObligation` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-static_assert_size!(PredicateObligation<'_>, 40);\n+static_assert_size!(PredicateObligation<'_>, 32);\n \n pub type Obligations<'tcx, O> = Vec<Obligation<'tcx, O>>;\n pub type PredicateObligations<'tcx> = Vec<PredicateObligation<'tcx>>;"}, {"sha": "9c0d934a03529a75c39e2fac97710f4a4d02f9c0", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=7dad29d6868914484be04cb054863261903bba58", "patch": "@@ -236,6 +236,9 @@ impl Elaborator<'tcx> {\n                         .map(|predicate| predicate_obligation(predicate, None)),\n                 );\n             }\n+            ty::PredicateAtom::TypeWellFormedFromEnv(..) => {\n+                // Nothing to elaborate\n+            }\n         }\n     }\n }"}, {"sha": "61ecd13c30768aab8e8eefb281f9ef024f98f440", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=7dad29d6868914484be04cb054863261903bba58", "patch": "@@ -1228,7 +1228,8 @@ impl<'tcx> LateLintPass<'tcx> for TrivialConstraints {\n                     ClosureKind(..) |\n                     Subtype(..) |\n                     ConstEvaluatable(..) |\n-                    ConstEquate(..) => continue,\n+                    ConstEquate(..) |\n+                    TypeWellFormedFromEnv(..) => continue,\n                 };\n                 if predicate.is_global() {\n                     cx.struct_span_lint(TRIVIAL_BOUNDS, span, |lint| {"}, {"sha": "15e3110bc851e8976b41ffa27176c254f00f8f28", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=7dad29d6868914484be04cb054863261903bba58", "patch": "@@ -1399,7 +1399,7 @@ rustc_queries! {\n         }\n \n         query evaluate_goal(\n-            goal: traits::ChalkCanonicalGoal<'tcx>\n+            goal: traits::CanonicalChalkEnvironmentAndGoal<'tcx>\n         ) -> Result<\n             &'tcx Canonical<'tcx, canonical::QueryResponse<'tcx, ()>>,\n             NoSolution"}, {"sha": "d8507d08c1bc5217540df1d092537354d3e96057", "filename": "compiler/rustc_middle/src/traits/chalk.rs", "status": "modified", "additions": 3, "deletions": 27, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fchalk.rs?ref=7dad29d6868914484be04cb054863261903bba58", "patch": "@@ -6,14 +6,11 @@\n //! interned Chalk types.\n \n use rustc_middle::mir::interpret::ConstValue;\n-use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n-use rustc_middle::ty::{self, AdtDef, Ty, TyCtxt};\n+use rustc_middle::ty::{self, AdtDef, TyCtxt};\n \n use rustc_hir::def_id::DefId;\n use rustc_target::spec::abi::Abi;\n \n-use smallvec::SmallVec;\n-\n use std::cmp::Ordering;\n use std::fmt;\n use std::hash::{Hash, Hasher};\n@@ -376,31 +373,10 @@ impl<'tcx> chalk_ir::interner::HasInterner for RustInterner<'tcx> {\n     type Interner = Self;\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, HashStable, TypeFoldable)]\n-pub enum ChalkEnvironmentClause<'tcx> {\n-    /// A normal rust `ty::Predicate` in the environment.\n-    Predicate(ty::Predicate<'tcx>),\n-    /// A special clause in the environment that gets lowered to\n-    /// `chalk_ir::FromEnv::Ty`.\n-    TypeFromEnv(Ty<'tcx>),\n-}\n-\n-impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ChalkEnvironmentClause<'tcx>> {\n-    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n-        let v = self.iter().map(|t| t.fold_with(folder)).collect::<SmallVec<[_; 8]>>();\n-        folder.tcx().intern_chalk_environment_clause_list(&v)\n-    }\n-\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        self.iter().any(|t| t.visit_with(visitor))\n-    }\n-}\n-/// We have to elaborate the environment of a chalk goal *before*\n-/// canonicalization. This type wraps the predicate and the elaborated\n-/// environment.\n+/// A chalk environment and goal.\n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, HashStable, TypeFoldable)]\n pub struct ChalkEnvironmentAndGoal<'tcx> {\n-    pub environment: &'tcx ty::List<ChalkEnvironmentClause<'tcx>>,\n+    pub environment: &'tcx ty::List<ty::Predicate<'tcx>>,\n     pub goal: ty::Predicate<'tcx>,\n }\n "}, {"sha": "ae89b68942c96edadaba993440d24cec82293520", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=7dad29d6868914484be04cb054863261903bba58", "patch": "@@ -26,14 +26,12 @@ use std::rc::Rc;\n \n pub use self::select::{EvaluationCache, EvaluationResult, OverflowError, SelectionCache};\n \n-pub type ChalkCanonicalGoal<'tcx> = Canonical<'tcx, ChalkEnvironmentAndGoal<'tcx>>;\n+pub type CanonicalChalkEnvironmentAndGoal<'tcx> = Canonical<'tcx, ChalkEnvironmentAndGoal<'tcx>>;\n \n pub use self::ImplSource::*;\n pub use self::ObligationCauseCode::*;\n \n-pub use self::chalk::{\n-    ChalkEnvironmentAndGoal, ChalkEnvironmentClause, RustInterner as ChalkRustInterner,\n-};\n+pub use self::chalk::{ChalkEnvironmentAndGoal, RustInterner as ChalkRustInterner};\n \n /// Depending on the stage of compilation, we want projection to be\n /// more or less conservative."}, {"sha": "aacf61e5b425a28852d05b70b928ed7a160c026a", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=7dad29d6868914484be04cb054863261903bba58", "patch": "@@ -91,8 +91,6 @@ pub struct CtxtInterners<'tcx> {\n     projs: InternedSet<'tcx, List<ProjectionKind>>,\n     place_elems: InternedSet<'tcx, List<PlaceElem<'tcx>>>,\n     const_: InternedSet<'tcx, Const<'tcx>>,\n-\n-    chalk_environment_clause_list: InternedSet<'tcx, List<traits::ChalkEnvironmentClause<'tcx>>>,\n }\n \n impl<'tcx> CtxtInterners<'tcx> {\n@@ -110,7 +108,6 @@ impl<'tcx> CtxtInterners<'tcx> {\n             projs: Default::default(),\n             place_elems: Default::default(),\n             const_: Default::default(),\n-            chalk_environment_clause_list: Default::default(),\n         }\n     }\n \n@@ -2041,7 +2038,7 @@ direct_interners! {\n }\n \n macro_rules! slice_interners {\n-    ($($field:ident: $method:ident($ty:ty)),+) => (\n+    ($($field:ident: $method:ident($ty:ty)),+ $(,)?) => (\n         $(impl<'tcx> TyCtxt<'tcx> {\n             pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {\n                 self.interners.$field.intern_ref(v, || {\n@@ -2060,8 +2057,6 @@ slice_interners!(\n     predicates: _intern_predicates(Predicate<'tcx>),\n     projs: _intern_projs(ProjectionKind),\n     place_elems: _intern_place_elems(PlaceElem<'tcx>),\n-    chalk_environment_clause_list:\n-        _intern_chalk_environment_clause_list(traits::ChalkEnvironmentClause<'tcx>)\n );\n \n impl<'tcx> TyCtxt<'tcx> {\n@@ -2460,13 +2455,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }\n     }\n \n-    pub fn intern_chalk_environment_clause_list(\n-        self,\n-        ts: &[traits::ChalkEnvironmentClause<'tcx>],\n-    ) -> &'tcx List<traits::ChalkEnvironmentClause<'tcx>> {\n-        if ts.is_empty() { List::empty() } else { self._intern_chalk_environment_clause_list(ts) }\n-    }\n-\n     pub fn mk_fn_sig<I>(\n         self,\n         inputs: I,\n@@ -2524,18 +2512,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))\n     }\n \n-    pub fn mk_chalk_environment_clause_list<\n-        I: InternAs<\n-            [traits::ChalkEnvironmentClause<'tcx>],\n-            &'tcx List<traits::ChalkEnvironmentClause<'tcx>>,\n-        >,\n-    >(\n-        self,\n-        iter: I,\n-    ) -> I::Output {\n-        iter.intern_with(|xs| self.intern_chalk_environment_clause_list(xs))\n-    }\n-\n     /// Walks upwards from `id` to find a node which might change lint levels with attributes.\n     /// It stops at `bound` and just returns it if reached.\n     pub fn maybe_lint_level_root_bounded(self, mut id: HirId, bound: HirId) -> HirId {"}, {"sha": "c9a4022330a7af2df9a7a9de3210ebc2d1b27697", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=7dad29d6868914484be04cb054863261903bba58", "patch": "@@ -249,6 +249,9 @@ impl FlagComputation {\n                 self.add_const(expected);\n                 self.add_const(found);\n             }\n+            ty::PredicateAtom::TypeWellFormedFromEnv(ty) => {\n+                self.add_ty(ty);\n+            }\n         }\n     }\n "}, {"sha": "8283deb3ecc24ffaae4b71cb526fb3a733721ce2", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 17, "deletions": 27, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=7dad29d6868914484be04cb054863261903bba58", "patch": "@@ -1155,6 +1155,11 @@ pub enum PredicateAtom<'tcx> {\n \n     /// Constants must be equal. The first component is the const that is expected.\n     ConstEquate(&'tcx Const<'tcx>, &'tcx Const<'tcx>),\n+\n+    /// Represents a type found in the environment that we can use for implied bounds.\n+    ///\n+    /// Only used for Chalk.\n+    TypeWellFormedFromEnv(Ty<'tcx>),\n }\n \n impl<'tcx> PredicateAtom<'tcx> {\n@@ -1450,7 +1455,8 @@ impl<'tcx> Predicate<'tcx> {\n             | PredicateAtom::ClosureKind(..)\n             | PredicateAtom::TypeOutlives(..)\n             | PredicateAtom::ConstEvaluatable(..)\n-            | PredicateAtom::ConstEquate(..) => None,\n+            | PredicateAtom::ConstEquate(..)\n+            | PredicateAtom::TypeWellFormedFromEnv(..) => None,\n         }\n     }\n \n@@ -1465,7 +1471,8 @@ impl<'tcx> Predicate<'tcx> {\n             | PredicateAtom::ObjectSafe(..)\n             | PredicateAtom::ClosureKind(..)\n             | PredicateAtom::ConstEvaluatable(..)\n-            | PredicateAtom::ConstEquate(..) => None,\n+            | PredicateAtom::ConstEquate(..)\n+            | PredicateAtom::TypeWellFormedFromEnv(..) => None,\n         }\n     }\n }\n@@ -1738,11 +1745,6 @@ pub struct ParamEnv<'tcx> {\n     ///\n     /// Note: This is packed, use the reveal() method to access it.\n     packed: CopyTaggedPtr<&'tcx List<Predicate<'tcx>>, traits::Reveal, true>,\n-\n-    /// If this `ParamEnv` comes from a call to `tcx.param_env(def_id)`,\n-    /// register that `def_id` (useful for transitioning to the chalk trait\n-    /// solver).\n-    pub def_id: Option<DefId>,\n }\n \n unsafe impl rustc_data_structures::tagged_ptr::Tag for traits::Reveal {\n@@ -1767,7 +1769,6 @@ impl<'tcx> fmt::Debug for ParamEnv<'tcx> {\n         f.debug_struct(\"ParamEnv\")\n             .field(\"caller_bounds\", &self.caller_bounds())\n             .field(\"reveal\", &self.reveal())\n-            .field(\"def_id\", &self.def_id)\n             .finish()\n     }\n }\n@@ -1776,23 +1777,16 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for ParamEnv<'tcx> {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n         self.caller_bounds().hash_stable(hcx, hasher);\n         self.reveal().hash_stable(hcx, hasher);\n-        self.def_id.hash_stable(hcx, hasher);\n     }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ParamEnv<'tcx> {\n     fn super_fold_with<F: ty::fold::TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n-        ParamEnv::new(\n-            self.caller_bounds().fold_with(folder),\n-            self.reveal().fold_with(folder),\n-            self.def_id.fold_with(folder),\n-        )\n+        ParamEnv::new(self.caller_bounds().fold_with(folder), self.reveal().fold_with(folder))\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        self.caller_bounds().visit_with(visitor)\n-            || self.reveal().visit_with(visitor)\n-            || self.def_id.visit_with(visitor)\n+        self.caller_bounds().visit_with(visitor) || self.reveal().visit_with(visitor)\n     }\n }\n \n@@ -1803,7 +1797,7 @@ impl<'tcx> ParamEnv<'tcx> {\n     /// type-checking.\n     #[inline]\n     pub fn empty() -> Self {\n-        Self::new(List::empty(), Reveal::UserFacing, None)\n+        Self::new(List::empty(), Reveal::UserFacing)\n     }\n \n     #[inline]\n@@ -1825,17 +1819,13 @@ impl<'tcx> ParamEnv<'tcx> {\n     /// or invoke `param_env.with_reveal_all()`.\n     #[inline]\n     pub fn reveal_all() -> Self {\n-        Self::new(List::empty(), Reveal::All, None)\n+        Self::new(List::empty(), Reveal::All)\n     }\n \n     /// Construct a trait environment with the given set of predicates.\n     #[inline]\n-    pub fn new(\n-        caller_bounds: &'tcx List<Predicate<'tcx>>,\n-        reveal: Reveal,\n-        def_id: Option<DefId>,\n-    ) -> Self {\n-        ty::ParamEnv { packed: CopyTaggedPtr::new(caller_bounds, reveal), def_id }\n+    pub fn new(caller_bounds: &'tcx List<Predicate<'tcx>>, reveal: Reveal) -> Self {\n+        ty::ParamEnv { packed: CopyTaggedPtr::new(caller_bounds, reveal) }\n     }\n \n     pub fn with_user_facing(mut self) -> Self {\n@@ -1857,12 +1847,12 @@ impl<'tcx> ParamEnv<'tcx> {\n             return self;\n         }\n \n-        ParamEnv::new(tcx.normalize_opaque_types(self.caller_bounds()), Reveal::All, self.def_id)\n+        ParamEnv::new(tcx.normalize_opaque_types(self.caller_bounds()), Reveal::All)\n     }\n \n     /// Returns this same environment but with no caller bounds.\n     pub fn without_caller_bounds(self) -> Self {\n-        Self::new(List::empty(), self.reveal(), self.def_id)\n+        Self::new(List::empty(), self.reveal())\n     }\n \n     /// Creates a suitable environment in which to perform trait"}, {"sha": "9562d43791493691c2e9ea47aa1d466d8b352af7", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=7dad29d6868914484be04cb054863261903bba58", "patch": "@@ -2096,6 +2096,11 @@ define_print_and_forward_display! {\n                 print(c2),\n                 write(\"`\"))\n             }\n+            ty::PredicateAtom::TypeWellFormedFromEnv(ty) => {\n+                p!(write(\"the type `\"),\n+                print(ty),\n+                write(\"` is found in the environment\"))\n+            }\n         }\n     }\n "}, {"sha": "afbf805975ce76e8f5875b5be86177c39a479255", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=7dad29d6868914484be04cb054863261903bba58", "patch": "@@ -260,6 +260,9 @@ impl fmt::Debug for ty::PredicateAtom<'tcx> {\n                 write!(f, \"ConstEvaluatable({:?}, {:?})\", def_id, substs)\n             }\n             ty::PredicateAtom::ConstEquate(c1, c2) => write!(f, \"ConstEquate({:?}, {:?})\", c1, c2),\n+            ty::PredicateAtom::TypeWellFormedFromEnv(ty) => {\n+                write!(f, \"TypeWellFormedFromEnv({:?})\", ty)\n+            }\n         }\n     }\n }\n@@ -536,6 +539,9 @@ impl<'a, 'tcx> Lift<'tcx> for ty::PredicateAtom<'a> {\n             ty::PredicateAtom::ConstEquate(c1, c2) => {\n                 tcx.lift(&(c1, c2)).map(|(c1, c2)| ty::PredicateAtom::ConstEquate(c1, c2))\n             }\n+            ty::PredicateAtom::TypeWellFormedFromEnv(ty) => {\n+                tcx.lift(&ty).map(ty::PredicateAtom::TypeWellFormedFromEnv)\n+            }\n         }\n     }\n }\n@@ -551,7 +557,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::ParamEnv<'a> {\n     type Lifted = ty::ParamEnv<'tcx>;\n     fn lift_to_tcx(&self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&self.caller_bounds())\n-            .map(|caller_bounds| ty::ParamEnv::new(caller_bounds, self.reveal(), self.def_id))\n+            .map(|caller_bounds| ty::ParamEnv::new(caller_bounds, self.reveal()))\n     }\n }\n "}, {"sha": "5e102f5151d0ceebedcbe3256d8a3804e1b3be3f", "filename": "compiler/rustc_mir/src/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fqualify_min_const_fn.rs?ref=7dad29d6868914484be04cb054863261903bba58", "patch": "@@ -30,7 +30,8 @@ pub fn is_min_const_fn(tcx: TyCtxt<'tcx>, def_id: DefId, body: &'a Body<'tcx>) -\n                 | ty::PredicateAtom::WellFormed(_)\n                 | ty::PredicateAtom::Projection(_)\n                 | ty::PredicateAtom::ConstEvaluatable(..)\n-                | ty::PredicateAtom::ConstEquate(..) => continue,\n+                | ty::PredicateAtom::ConstEquate(..)\n+                | ty::PredicateAtom::TypeWellFormedFromEnv(..) => continue,\n                 ty::PredicateAtom::ObjectSafe(_) => {\n                     bug!(\"object safe predicate on function: {:#?}\", predicate)\n                 }"}, {"sha": "28697ec4e3b9fe4cc106d4f8e4a350a47a823c7c", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=7dad29d6868914484be04cb054863261903bba58", "patch": "@@ -1261,7 +1261,8 @@ crate fn required_region_bounds(\n                 | ty::PredicateAtom::ClosureKind(..)\n                 | ty::PredicateAtom::RegionOutlives(..)\n                 | ty::PredicateAtom::ConstEvaluatable(..)\n-                | ty::PredicateAtom::ConstEquate(..) => None,\n+                | ty::PredicateAtom::ConstEquate(..)\n+                | ty::PredicateAtom::TypeWellFormedFromEnv(..) => None,\n                 ty::PredicateAtom::TypeOutlives(ty::OutlivesPredicate(ref t, ref r)) => {\n                     // Search for a bound of the form `erased_self_ty\n                     // : 'a`, but be wary of something like `for<'a>"}, {"sha": "6b87bc4f34ad4fbbc9f8901ebe4621b0e81de743", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=7dad29d6868914484be04cb054863261903bba58", "patch": "@@ -373,14 +373,12 @@ impl AutoTraitFinder<'tcx> {\n                 computed_preds.clone().chain(user_computed_preds.iter().cloned()),\n             )\n             .map(|o| o.predicate);\n-            new_env =\n-                ty::ParamEnv::new(tcx.mk_predicates(normalized_preds), param_env.reveal(), None);\n+            new_env = ty::ParamEnv::new(tcx.mk_predicates(normalized_preds), param_env.reveal());\n         }\n \n         let final_user_env = ty::ParamEnv::new(\n             tcx.mk_predicates(user_computed_preds.into_iter()),\n             user_env.reveal(),\n-            None,\n         );\n         debug!(\n             \"evaluate_nested_obligations(ty={:?}, trait_did={:?}): succeeded with '{:?}' \\"}, {"sha": "adc8ae5908656409ec91fe14e4f3e5bbfcbf6bf6", "filename": "compiler/rustc_trait_selection/src/traits/chalk_fulfill.rs", "status": "modified", "additions": 9, "deletions": 133, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs?ref=7dad29d6868914484be04cb054863261903bba58", "patch": "@@ -4,12 +4,11 @@ use crate::infer::canonical::OriginalQueryValues;\n use crate::infer::InferCtxt;\n use crate::traits::query::NoSolution;\n use crate::traits::{\n-    ChalkEnvironmentAndGoal, ChalkEnvironmentClause, FulfillmentError, FulfillmentErrorCode,\n-    ObligationCause, PredicateObligation, SelectionError, TraitEngine,\n+    ChalkEnvironmentAndGoal, FulfillmentError, FulfillmentErrorCode, ObligationCause,\n+    PredicateObligation, SelectionError, TraitEngine,\n };\n use rustc_data_structures::fx::FxIndexSet;\n-use rustc_hir::def_id::DefId;\n-use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::ty::{self, Ty};\n \n pub struct FulfillmentContext<'tcx> {\n     obligations: FxIndexSet<PredicateObligation<'tcx>>,\n@@ -21,132 +20,6 @@ impl FulfillmentContext<'tcx> {\n     }\n }\n \n-fn environment<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    def_id: DefId,\n-) -> &'tcx ty::List<ChalkEnvironmentClause<'tcx>> {\n-    use rustc_hir::{ForeignItemKind, ImplItemKind, ItemKind, Node, TraitItemKind};\n-    use rustc_middle::ty::subst::GenericArgKind;\n-\n-    debug!(\"environment(def_id = {:?})\", def_id);\n-\n-    // The environment of an impl Trait type is its defining function's environment.\n-    if let Some(parent) = ty::is_impl_trait_defn(tcx, def_id) {\n-        return environment(tcx, parent);\n-    }\n-\n-    // Compute the bounds on `Self` and the type parameters.\n-    let ty::InstantiatedPredicates { predicates, .. } =\n-        tcx.predicates_of(def_id).instantiate_identity(tcx);\n-\n-    let clauses = predicates.into_iter().map(ChalkEnvironmentClause::Predicate);\n-\n-    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n-    let node = tcx.hir().get(hir_id);\n-\n-    enum NodeKind {\n-        TraitImpl,\n-        InherentImpl,\n-        Fn,\n-        Other,\n-    };\n-\n-    let node_kind = match node {\n-        Node::TraitItem(item) => match item.kind {\n-            TraitItemKind::Fn(..) => NodeKind::Fn,\n-            _ => NodeKind::Other,\n-        },\n-\n-        Node::ImplItem(item) => match item.kind {\n-            ImplItemKind::Fn(..) => NodeKind::Fn,\n-            _ => NodeKind::Other,\n-        },\n-\n-        Node::Item(item) => match item.kind {\n-            ItemKind::Impl { of_trait: Some(_), .. } => NodeKind::TraitImpl,\n-            ItemKind::Impl { of_trait: None, .. } => NodeKind::InherentImpl,\n-            ItemKind::Fn(..) => NodeKind::Fn,\n-            _ => NodeKind::Other,\n-        },\n-\n-        Node::ForeignItem(item) => match item.kind {\n-            ForeignItemKind::Fn(..) => NodeKind::Fn,\n-            _ => NodeKind::Other,\n-        },\n-\n-        // FIXME: closures?\n-        _ => NodeKind::Other,\n-    };\n-\n-    // FIXME(eddyb) isn't the unordered nature of this a hazard?\n-    let mut inputs = FxIndexSet::default();\n-\n-    match node_kind {\n-        // In a trait impl, we assume that the header trait ref and all its\n-        // constituents are well-formed.\n-        NodeKind::TraitImpl => {\n-            let trait_ref = tcx.impl_trait_ref(def_id).expect(\"not an impl\");\n-\n-            // FIXME(chalk): this has problems because of late-bound regions\n-            //inputs.extend(trait_ref.substs.iter().flat_map(|arg| arg.walk()));\n-            inputs.extend(trait_ref.substs.iter());\n-        }\n-\n-        // In an inherent impl, we assume that the receiver type and all its\n-        // constituents are well-formed.\n-        NodeKind::InherentImpl => {\n-            let self_ty = tcx.type_of(def_id);\n-            inputs.extend(self_ty.walk());\n-        }\n-\n-        // In an fn, we assume that the arguments and all their constituents are\n-        // well-formed.\n-        NodeKind::Fn => {\n-            let fn_sig = tcx.fn_sig(def_id);\n-            let fn_sig = tcx.liberate_late_bound_regions(def_id, &fn_sig);\n-\n-            inputs.extend(fn_sig.inputs().iter().flat_map(|ty| ty.walk()));\n-        }\n-\n-        NodeKind::Other => (),\n-    }\n-    let input_clauses = inputs.into_iter().filter_map(|arg| {\n-        match arg.unpack() {\n-            GenericArgKind::Type(ty) => Some(ChalkEnvironmentClause::TypeFromEnv(ty)),\n-\n-            // FIXME(eddyb) no WF conditions from lifetimes?\n-            GenericArgKind::Lifetime(_) => None,\n-\n-            // FIXME(eddyb) support const generics in Chalk\n-            GenericArgKind::Const(_) => None,\n-        }\n-    });\n-\n-    tcx.mk_chalk_environment_clause_list(clauses.chain(input_clauses))\n-}\n-\n-/// We need to wrap a `ty::Predicate` in an elaborated environment *before* we\n-/// canonicalize. This is due to the fact that we insert extra clauses into the\n-/// environment for all input types (`FromEnv`).\n-fn in_environment(\n-    infcx: &InferCtxt<'_, 'tcx>,\n-    obligation: &PredicateObligation<'tcx>,\n-) -> ChalkEnvironmentAndGoal<'tcx> {\n-    assert!(!infcx.is_in_snapshot());\n-    let obligation = infcx.resolve_vars_if_possible(obligation);\n-\n-    let environment = match obligation.param_env.def_id {\n-        Some(def_id) => environment(infcx.tcx, def_id),\n-        None if obligation.param_env.caller_bounds().is_empty() => ty::List::empty(),\n-        // FIXME(chalk): this is hit in ui/where-clauses/where-clause-constraints-are-local-for-trait-impl\n-        // and ui/generics/generic-static-methods\n-        //_ => bug!(\"non-empty `ParamEnv` with no def-id\"),\n-        _ => ty::List::empty(),\n-    };\n-\n-    ChalkEnvironmentAndGoal { environment, goal: obligation.predicate }\n-}\n-\n impl TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n     fn normalize_projection_type(\n         &mut self,\n@@ -195,6 +68,8 @@ impl TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n         &mut self,\n         infcx: &InferCtxt<'_, 'tcx>,\n     ) -> Result<(), Vec<FulfillmentError<'tcx>>> {\n+        assert!(!infcx.is_in_snapshot());\n+\n         let mut errors = Vec::new();\n         let mut next_round = FxIndexSet::default();\n         let mut making_progress;\n@@ -205,10 +80,11 @@ impl TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n             // We iterate over all obligations, and record if we are able\n             // to unambiguously prove at least one obligation.\n             for obligation in self.obligations.drain(..) {\n-                let goal_in_environment = in_environment(infcx, &obligation);\n+                let obligation = infcx.resolve_vars_if_possible(&obligation);\n+                let environment = obligation.param_env.caller_bounds();\n+                let goal = ChalkEnvironmentAndGoal { environment, goal: obligation.predicate };\n                 let mut orig_values = OriginalQueryValues::default();\n-                let canonical_goal =\n-                    infcx.canonicalize_query(&goal_in_environment, &mut orig_values);\n+                let canonical_goal = infcx.canonicalize_query(&goal, &mut orig_values);\n \n                 match infcx.tcx.evaluate_goal(canonical_goal) {\n                     Ok(response) => {"}, {"sha": "a9651144e597adad3c9a66dc5ba66c1315cb1ae4", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=7dad29d6868914484be04cb054863261903bba58", "patch": "@@ -663,6 +663,11 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             obligation\n                         )\n                     }\n+\n+                    ty::PredicateAtom::TypeWellFormedFromEnv(..) => span_bug!(\n+                        span,\n+                        \"TypeWellFormedFromEnv predicate should only exist in the environment\"\n+                    ),\n                 }\n             }\n "}, {"sha": "7e505e9c49125aedfa7019a1d6aedc5117939d4e", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=7dad29d6868914484be04cb054863261903bba58", "patch": "@@ -86,7 +86,7 @@ pub struct PendingPredicateObligation<'tcx> {\n \n // `PendingPredicateObligation` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-static_assert_size!(PendingPredicateObligation<'_>, 64);\n+static_assert_size!(PendingPredicateObligation<'_>, 56);\n \n impl<'a, 'tcx> FulfillmentContext<'tcx> {\n     /// Creates a new fulfillment context.\n@@ -354,6 +354,9 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n                         obligation.with(pred.to_predicate(self.selcx.tcx())),\n                     ]))\n                 }\n+                ty::PredicateAtom::TypeWellFormedFromEnv(..) => {\n+                    bug!(\"TypeWellFormedFromEnv is only used for Chalk\")\n+                }\n             },\n             &ty::PredicateKind::Atom(atom) => match atom {\n                 ty::PredicateAtom::Trait(ref data, _) => {\n@@ -535,6 +538,9 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n                         }\n                     }\n                 }\n+                ty::PredicateAtom::TypeWellFormedFromEnv(..) => {\n+                    bug!(\"TypeWellFormedFromEnv is only used for Chalk\")\n+                }\n             },\n         }\n     }"}, {"sha": "00ca1d0a74ac64479f1987f95b44e621186c5a70", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=7dad29d6868914484be04cb054863261903bba58", "patch": "@@ -301,11 +301,8 @@ pub fn normalize_param_env_or_error<'tcx>(\n \n     debug!(\"normalize_param_env_or_error: elaborated-predicates={:?}\", predicates);\n \n-    let elaborated_env = ty::ParamEnv::new(\n-        tcx.intern_predicates(&predicates),\n-        unnormalized_env.reveal(),\n-        unnormalized_env.def_id,\n-    );\n+    let elaborated_env =\n+        ty::ParamEnv::new(tcx.intern_predicates(&predicates), unnormalized_env.reveal());\n \n     // HACK: we are trying to normalize the param-env inside *itself*. The problem is that\n     // normalization expects its param-env to be already normalized, which means we have\n@@ -359,7 +356,7 @@ pub fn normalize_param_env_or_error<'tcx>(\n     let outlives_env: Vec<_> =\n         non_outlives_predicates.iter().chain(&outlives_predicates).cloned().collect();\n     let outlives_env =\n-        ty::ParamEnv::new(tcx.intern_predicates(&outlives_env), unnormalized_env.reveal(), None);\n+        ty::ParamEnv::new(tcx.intern_predicates(&outlives_env), unnormalized_env.reveal());\n     let outlives_predicates = match do_normalize_predicates(\n         tcx,\n         region_context,\n@@ -379,11 +376,7 @@ pub fn normalize_param_env_or_error<'tcx>(\n     let mut predicates = non_outlives_predicates;\n     predicates.extend(outlives_predicates);\n     debug!(\"normalize_param_env_or_error: final predicates={:?}\", predicates);\n-    ty::ParamEnv::new(\n-        tcx.intern_predicates(&predicates),\n-        unnormalized_env.reveal(),\n-        unnormalized_env.def_id,\n-    )\n+    ty::ParamEnv::new(tcx.intern_predicates(&predicates), unnormalized_env.reveal())\n }\n \n pub fn fully_normalize<'a, 'tcx, T>("}, {"sha": "2f2ac9f094dc28a29bd7400f409a73397b86ad39", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=7dad29d6868914484be04cb054863261903bba58", "patch": "@@ -276,7 +276,8 @@ fn predicates_reference_self(\n                 | ty::PredicateAtom::ClosureKind(..)\n                 | ty::PredicateAtom::Subtype(..)\n                 | ty::PredicateAtom::ConstEvaluatable(..)\n-                | ty::PredicateAtom::ConstEquate(..) => None,\n+                | ty::PredicateAtom::ConstEquate(..)\n+                | ty::PredicateAtom::TypeWellFormedFromEnv(..) => None,\n             }\n         })\n         .collect()\n@@ -310,7 +311,8 @@ fn generics_require_sized_self(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n             | ty::PredicateAtom::ClosureKind(..)\n             | ty::PredicateAtom::TypeOutlives(..)\n             | ty::PredicateAtom::ConstEvaluatable(..)\n-            | ty::PredicateAtom::ConstEquate(..) => false,\n+            | ty::PredicateAtom::ConstEquate(..)\n+            | ty::PredicateAtom::TypeWellFormedFromEnv(..) => false,\n         }\n     })\n }\n@@ -654,11 +656,7 @@ fn receiver_is_dispatchable<'tcx>(\n             .chain(iter::once(trait_predicate))\n             .collect();\n \n-        ty::ParamEnv::new(\n-            tcx.intern_predicates(&caller_bounds),\n-            param_env.reveal(),\n-            param_env.def_id,\n-        )\n+        ty::ParamEnv::new(tcx.intern_predicates(&caller_bounds), param_env.reveal())\n     };\n \n     // Receiver: DispatchFromDyn<Receiver[Self => U]>"}, {"sha": "1e1ae78d57df76868a50dffcc9068e99cf7c4a5f", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=7dad29d6868914484be04cb054863261903bba58", "patch": "@@ -592,6 +592,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     }\n                 }\n             }\n+            ty::PredicateAtom::TypeWellFormedFromEnv(..) => {\n+                bug!(\"TypeWellFormedFromEnv is only used for chalk\")\n+            }\n         }\n     }\n "}, {"sha": "998990f374cb96ea1e2af6cf77a957eeeb35707c", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=7dad29d6868914484be04cb054863261903bba58", "patch": "@@ -127,6 +127,9 @@ pub fn predicate_obligations<'a, 'tcx>(\n             wf.compute(c1.into());\n             wf.compute(c2.into());\n         }\n+        ty::PredicateAtom::TypeWellFormedFromEnv(..) => {\n+            bug!(\"TypeWellFormedFromEnv is only used for Chalk\")\n+        }\n     }\n \n     wf.normalize()"}, {"sha": "650404e8ca6ddf1896b892ad31657519e1ffa370", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 47, "deletions": 60, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=7dad29d6868914484be04cb054863261903bba58", "patch": "@@ -31,9 +31,7 @@\n //! not. To lower anything wrapped in a `Binder`, we first deeply find any bound\n //! variables from the current `Binder`.\n \n-use rustc_middle::traits::{\n-    ChalkEnvironmentAndGoal, ChalkEnvironmentClause, ChalkRustInterner as RustInterner,\n-};\n+use rustc_middle::traits::{ChalkEnvironmentAndGoal, ChalkRustInterner as RustInterner};\n use rustc_middle::ty::fold::TypeFolder;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, SubstsRef};\n use rustc_middle::ty::{\n@@ -43,8 +41,6 @@ use rustc_span::def_id::DefId;\n \n use std::collections::btree_map::{BTreeMap, Entry};\n \n-use chalk_ir::fold::shift::Shift;\n-\n /// Essentially an `Into` with a `&RustInterner` parameter\n crate trait LowerInto<'tcx, T> {\n     /// Lower a rustc construct (e.g., `ty::TraitPredicate`) to a chalk type, consuming `self`.\n@@ -82,60 +78,45 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::InEnvironment<chalk_ir::Goal<RustInterner<'\n         self,\n         interner: &RustInterner<'tcx>,\n     ) -> chalk_ir::InEnvironment<chalk_ir::Goal<RustInterner<'tcx>>> {\n-        let clauses = self.environment.into_iter().map(|clause| match clause {\n-            ChalkEnvironmentClause::Predicate(predicate) => {\n-                let (predicate, binders, _named_regions) =\n-                    collect_bound_vars(interner, interner.tcx, &predicate.bound_atom(interner.tcx));\n-                let consequence = match predicate {\n-                    ty::PredicateAtom::Trait(predicate, _) => chalk_ir::DomainGoal::FromEnv(\n-                        chalk_ir::FromEnv::Trait(predicate.trait_ref.lower_into(interner)),\n-                    ),\n-                    ty::PredicateAtom::RegionOutlives(predicate) => chalk_ir::DomainGoal::Holds(\n-                        chalk_ir::WhereClause::LifetimeOutlives(chalk_ir::LifetimeOutlives {\n-                            a: predicate.0.lower_into(interner),\n-                            b: predicate.1.lower_into(interner),\n-                        }),\n-                    ),\n-                    ty::PredicateAtom::TypeOutlives(predicate) => chalk_ir::DomainGoal::Holds(\n-                        chalk_ir::WhereClause::TypeOutlives(chalk_ir::TypeOutlives {\n-                            ty: predicate.0.lower_into(interner),\n-                            lifetime: predicate.1.lower_into(interner),\n-                        }),\n-                    ),\n-                    ty::PredicateAtom::Projection(predicate) => chalk_ir::DomainGoal::Holds(\n-                        chalk_ir::WhereClause::AliasEq(predicate.lower_into(interner)),\n-                    ),\n-                    ty::PredicateAtom::WellFormed(..)\n-                    | ty::PredicateAtom::ObjectSafe(..)\n-                    | ty::PredicateAtom::ClosureKind(..)\n-                    | ty::PredicateAtom::Subtype(..)\n-                    | ty::PredicateAtom::ConstEvaluatable(..)\n-                    | ty::PredicateAtom::ConstEquate(..) => {\n-                        bug!(\"unexpected predicate {}\", predicate)\n-                    }\n-                };\n-                let value = chalk_ir::ProgramClauseImplication {\n-                    consequence,\n-                    conditions: chalk_ir::Goals::empty(interner),\n-                    priority: chalk_ir::ClausePriority::High,\n-                    constraints: chalk_ir::Constraints::empty(interner),\n-                };\n-                chalk_ir::ProgramClauseData(chalk_ir::Binders::new(binders, value)).intern(interner)\n-            }\n-            ChalkEnvironmentClause::TypeFromEnv(ty) => {\n-                chalk_ir::ProgramClauseData(chalk_ir::Binders::new(\n-                    chalk_ir::VariableKinds::empty(interner),\n-                    chalk_ir::ProgramClauseImplication {\n-                        consequence: chalk_ir::DomainGoal::FromEnv(chalk_ir::FromEnv::Ty(\n-                            ty.lower_into(interner).shifted_in(interner),\n-                        )),\n-                        conditions: chalk_ir::Goals::empty(interner),\n-                        priority: chalk_ir::ClausePriority::High,\n-                        constraints: chalk_ir::Constraints::empty(interner),\n-                    },\n-                ))\n-                .intern(interner)\n-            }\n+        let clauses = self.environment.into_iter().map(|predicate| {\n+            let (predicate, binders, _named_regions) =\n+                collect_bound_vars(interner, interner.tcx, &predicate.bound_atom(interner.tcx));\n+            let consequence = match predicate {\n+                ty::PredicateAtom::TypeWellFormedFromEnv(ty) => {\n+                    chalk_ir::DomainGoal::FromEnv(chalk_ir::FromEnv::Ty(ty.lower_into(interner)))\n+                }\n+                ty::PredicateAtom::Trait(predicate, _) => chalk_ir::DomainGoal::FromEnv(\n+                    chalk_ir::FromEnv::Trait(predicate.trait_ref.lower_into(interner)),\n+                ),\n+                ty::PredicateAtom::RegionOutlives(predicate) => chalk_ir::DomainGoal::Holds(\n+                    chalk_ir::WhereClause::LifetimeOutlives(chalk_ir::LifetimeOutlives {\n+                        a: predicate.0.lower_into(interner),\n+                        b: predicate.1.lower_into(interner),\n+                    }),\n+                ),\n+                ty::PredicateAtom::TypeOutlives(predicate) => chalk_ir::DomainGoal::Holds(\n+                    chalk_ir::WhereClause::TypeOutlives(chalk_ir::TypeOutlives {\n+                        ty: predicate.0.lower_into(interner),\n+                        lifetime: predicate.1.lower_into(interner),\n+                    }),\n+                ),\n+                ty::PredicateAtom::Projection(predicate) => chalk_ir::DomainGoal::Holds(\n+                    chalk_ir::WhereClause::AliasEq(predicate.lower_into(interner)),\n+                ),\n+                ty::PredicateAtom::WellFormed(..)\n+                | ty::PredicateAtom::ObjectSafe(..)\n+                | ty::PredicateAtom::ClosureKind(..)\n+                | ty::PredicateAtom::Subtype(..)\n+                | ty::PredicateAtom::ConstEvaluatable(..)\n+                | ty::PredicateAtom::ConstEquate(..) => bug!(\"unexpected predicate {}\", predicate),\n+            };\n+            let value = chalk_ir::ProgramClauseImplication {\n+                consequence,\n+                conditions: chalk_ir::Goals::empty(interner),\n+                priority: chalk_ir::ClausePriority::High,\n+                constraints: chalk_ir::Constraints::empty(interner),\n+            };\n+            chalk_ir::ProgramClauseData(chalk_ir::Binders::new(binders, value)).intern(interner)\n         });\n \n         let goal: chalk_ir::GoalData<RustInterner<'tcx>> = self.goal.lower_into(&interner);\n@@ -214,6 +195,9 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::GoalData<RustInterner<'tcx>>> for ty::Predi\n             | ty::PredicateAtom::ConstEquate(..) => {\n                 chalk_ir::GoalData::All(chalk_ir::Goals::empty(interner))\n             }\n+            ty::PredicateAtom::TypeWellFormedFromEnv(ty) => chalk_ir::GoalData::DomainGoal(\n+                chalk_ir::DomainGoal::FromEnv(chalk_ir::FromEnv::Ty(ty.lower_into(interner))),\n+            ),\n         };\n \n         chalk_ir::GoalData::Quantified(\n@@ -684,7 +668,10 @@ impl<'tcx> LowerInto<'tcx, Option<chalk_ir::QuantifiedWhereClause<RustInterner<'\n             | ty::PredicateAtom::ClosureKind(..)\n             | ty::PredicateAtom::Subtype(..)\n             | ty::PredicateAtom::ConstEvaluatable(..)\n-            | ty::PredicateAtom::ConstEquate(..) => bug!(\"unexpected predicate {}\", &self),\n+            | ty::PredicateAtom::ConstEquate(..)\n+            | ty::PredicateAtom::TypeWellFormedFromEnv(..) => {\n+                bug!(\"unexpected predicate {}\", &self)\n+            }\n         };\n         value.map(|value| chalk_ir::Binders::new(binders, value))\n     }"}, {"sha": "63c5b884357b04d47f5867282b3595cc94ad6a5c", "filename": "compiler/rustc_traits/src/chalk/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs?ref=7dad29d6868914484be04cb054863261903bba58", "patch": "@@ -1,8 +1,7 @@\n //! Calls `chalk-solve` to solve a `ty::Predicate`\n //!\n-//! In order to call `chalk-solve`, this file must convert a\n-//! `ChalkCanonicalGoal` into a Chalk ucanonical goal. It then calls Chalk, and\n-//! converts the answer back into rustc solution.\n+//! In order to call `chalk-solve`, this file must convert a `CanonicalChalkEnvironmentAndGoal` into\n+//! a Chalk uncanonical goal. It then calls Chalk, and converts the answer back into rustc solution.\n \n crate mod db;\n crate mod lowering;\n@@ -20,7 +19,7 @@ use rustc_middle::ty::{self, BoundVar, ParamTy, TyCtxt, TypeFoldable};\n use rustc_infer::infer::canonical::{\n     Canonical, CanonicalVarValues, Certainty, QueryRegionConstraints, QueryResponse,\n };\n-use rustc_infer::traits::{self, ChalkCanonicalGoal};\n+use rustc_infer::traits::{self, CanonicalChalkEnvironmentAndGoal};\n \n use crate::chalk::db::RustIrDatabase as ChalkRustIrDatabase;\n use crate::chalk::lowering::{\n@@ -35,7 +34,7 @@ crate fn provide(p: &mut Providers) {\n \n crate fn evaluate_goal<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    obligation: ChalkCanonicalGoal<'tcx>,\n+    obligation: CanonicalChalkEnvironmentAndGoal<'tcx>,\n ) -> Result<&'tcx Canonical<'tcx, QueryResponse<'tcx, ()>>, traits::query::NoSolution> {\n     let interner = ChalkRustInterner { tcx };\n "}, {"sha": "79308b032eccd89e7b5bbf1521225e63adf9df46", "filename": "compiler/rustc_traits/src/implied_outlives_bounds.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs?ref=7dad29d6868914484be04cb054863261903bba58", "patch": "@@ -103,7 +103,8 @@ fn compute_implied_outlives_bounds<'tcx>(\n                     | ty::PredicateAtom::ClosureKind(..)\n                     | ty::PredicateAtom::ObjectSafe(..)\n                     | ty::PredicateAtom::ConstEvaluatable(..)\n-                    | ty::PredicateAtom::ConstEquate(..) => vec![],\n+                    | ty::PredicateAtom::ConstEquate(..)\n+                    | ty::PredicateAtom::TypeWellFormedFromEnv(..) => vec![],\n                     ty::PredicateAtom::WellFormed(arg) => {\n                         wf_args.push(arg);\n                         vec![]"}, {"sha": "3e7c9ac62eb8e93a28b82952a01494d72c37330b", "filename": "compiler/rustc_traits/src/normalize_erasing_regions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs?ref=7dad29d6868914484be04cb054863261903bba58", "patch": "@@ -49,6 +49,7 @@ fn not_outlives_predicate(p: &ty::Predicate<'tcx>) -> bool {\n         | ty::PredicateAtom::ClosureKind(..)\n         | ty::PredicateAtom::Subtype(..)\n         | ty::PredicateAtom::ConstEvaluatable(..)\n-        | ty::PredicateAtom::ConstEquate(..) => true,\n+        | ty::PredicateAtom::ConstEquate(..)\n+        | ty::PredicateAtom::TypeWellFormedFromEnv(..) => true,\n     }\n }"}, {"sha": "c4b6b64339a03713bf481545ee1bbf4a62984d66", "filename": "compiler/rustc_ty/src/ty.rs", "status": "modified", "additions": 128, "deletions": 7, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_ty%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_ty%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty%2Fsrc%2Fty.rs?ref=7dad29d6868914484be04cb054863261903bba58", "patch": "@@ -1,11 +1,14 @@\n+use rustc_data_structures::fx::FxIndexSet;\n use rustc_data_structures::svh::Svh;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n use rustc_infer::traits::util;\n use rustc_middle::hir::map as hir_map;\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n-use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt, WithConstness};\n+use rustc_middle::ty::{\n+    self, Binder, Predicate, PredicateAtom, PredicateKind, ToPredicate, Ty, TyCtxt, WithConstness,\n+};\n use rustc_session::CrateDisambiguator;\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n@@ -245,7 +248,7 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n     }\n     // Compute the bounds on Self and the type parameters.\n \n-    let ty::InstantiatedPredicates { predicates, .. } =\n+    let ty::InstantiatedPredicates { mut predicates, .. } =\n         tcx.predicates_of(def_id).instantiate_identity(tcx);\n \n     // Finally, we have to normalize the bounds in the environment, in\n@@ -260,11 +263,13 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n     // are any errors at that point, so after type checking you can be\n     // sure that this will succeed without errors anyway.\n \n-    let unnormalized_env = ty::ParamEnv::new(\n-        tcx.intern_predicates(&predicates),\n-        traits::Reveal::UserFacing,\n-        tcx.sess.opts.debugging_opts.chalk.then_some(def_id),\n-    );\n+    if tcx.sess.opts.debugging_opts.chalk {\n+        let environment = well_formed_types_in_env(tcx, def_id);\n+        predicates.extend(environment);\n+    }\n+\n+    let unnormalized_env =\n+        ty::ParamEnv::new(tcx.intern_predicates(&predicates), traits::Reveal::UserFacing);\n \n     let body_id = def_id\n         .as_local()\n@@ -276,6 +281,122 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n     traits::normalize_param_env_or_error(tcx, def_id, unnormalized_env, cause)\n }\n \n+/// Elaborate the environment.\n+///\n+/// Collect a list of `Predicate`'s used for building the `ParamEnv`. Adds `TypeWellFormedFromEnv`'s\n+/// that are assumed to be well-formed (because they come from the environment).\n+///\n+/// Used only in chalk mode.\n+fn well_formed_types_in_env<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    def_id: DefId,\n+) -> &'tcx ty::List<Predicate<'tcx>> {\n+    use rustc_hir::{ForeignItemKind, ImplItemKind, ItemKind, Node, TraitItemKind};\n+    use rustc_middle::ty::subst::GenericArgKind;\n+\n+    debug!(\"environment(def_id = {:?})\", def_id);\n+\n+    // The environment of an impl Trait type is its defining function's environment.\n+    if let Some(parent) = ty::is_impl_trait_defn(tcx, def_id) {\n+        return well_formed_types_in_env(tcx, parent);\n+    }\n+\n+    // Compute the bounds on `Self` and the type parameters.\n+    let ty::InstantiatedPredicates { predicates, .. } =\n+        tcx.predicates_of(def_id).instantiate_identity(tcx);\n+\n+    let clauses = predicates.into_iter();\n+\n+    if !def_id.is_local() {\n+        return ty::List::empty();\n+    }\n+    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n+    let node = tcx.hir().get(hir_id);\n+\n+    enum NodeKind {\n+        TraitImpl,\n+        InherentImpl,\n+        Fn,\n+        Other,\n+    };\n+\n+    let node_kind = match node {\n+        Node::TraitItem(item) => match item.kind {\n+            TraitItemKind::Fn(..) => NodeKind::Fn,\n+            _ => NodeKind::Other,\n+        },\n+\n+        Node::ImplItem(item) => match item.kind {\n+            ImplItemKind::Fn(..) => NodeKind::Fn,\n+            _ => NodeKind::Other,\n+        },\n+\n+        Node::Item(item) => match item.kind {\n+            ItemKind::Impl { of_trait: Some(_), .. } => NodeKind::TraitImpl,\n+            ItemKind::Impl { of_trait: None, .. } => NodeKind::InherentImpl,\n+            ItemKind::Fn(..) => NodeKind::Fn,\n+            _ => NodeKind::Other,\n+        },\n+\n+        Node::ForeignItem(item) => match item.kind {\n+            ForeignItemKind::Fn(..) => NodeKind::Fn,\n+            _ => NodeKind::Other,\n+        },\n+\n+        // FIXME: closures?\n+        _ => NodeKind::Other,\n+    };\n+\n+    // FIXME(eddyb) isn't the unordered nature of this a hazard?\n+    let mut inputs = FxIndexSet::default();\n+\n+    match node_kind {\n+        // In a trait impl, we assume that the header trait ref and all its\n+        // constituents are well-formed.\n+        NodeKind::TraitImpl => {\n+            let trait_ref = tcx.impl_trait_ref(def_id).expect(\"not an impl\");\n+\n+            // FIXME(chalk): this has problems because of late-bound regions\n+            //inputs.extend(trait_ref.substs.iter().flat_map(|arg| arg.walk()));\n+            inputs.extend(trait_ref.substs.iter());\n+        }\n+\n+        // In an inherent impl, we assume that the receiver type and all its\n+        // constituents are well-formed.\n+        NodeKind::InherentImpl => {\n+            let self_ty = tcx.type_of(def_id);\n+            inputs.extend(self_ty.walk());\n+        }\n+\n+        // In an fn, we assume that the arguments and all their constituents are\n+        // well-formed.\n+        NodeKind::Fn => {\n+            let fn_sig = tcx.fn_sig(def_id);\n+            let fn_sig = tcx.liberate_late_bound_regions(def_id, &fn_sig);\n+\n+            inputs.extend(fn_sig.inputs().iter().flat_map(|ty| ty.walk()));\n+        }\n+\n+        NodeKind::Other => (),\n+    }\n+    let input_clauses = inputs.into_iter().filter_map(|arg| {\n+        match arg.unpack() {\n+            GenericArgKind::Type(ty) => {\n+                let binder = Binder::dummy(PredicateAtom::TypeWellFormedFromEnv(ty));\n+                Some(tcx.mk_predicate(PredicateKind::ForAll(binder)))\n+            }\n+\n+            // FIXME(eddyb) no WF conditions from lifetimes?\n+            GenericArgKind::Lifetime(_) => None,\n+\n+            // FIXME(eddyb) support const generics in Chalk\n+            GenericArgKind::Const(_) => None,\n+        }\n+    });\n+\n+    tcx.mk_predicates(clauses.chain(input_clauses))\n+}\n+\n fn param_env_reveal_all_normalized(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n     tcx.param_env(def_id).with_reveal_all_normalized(tcx)\n }"}, {"sha": "7aa54e0ebcc6b5d5d2f9ab3a3a1a90097ab98dc7", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=7dad29d6868914484be04cb054863261903bba58", "patch": "@@ -202,11 +202,8 @@ fn compare_predicate_entailment<'tcx>(\n     // The key step here is to update the caller_bounds's predicates to be\n     // the new hybrid bounds we computed.\n     let normalize_cause = traits::ObligationCause::misc(impl_m_span, impl_m_hir_id);\n-    let param_env = ty::ParamEnv::new(\n-        tcx.intern_predicates(&hybrid_preds.predicates),\n-        Reveal::UserFacing,\n-        None,\n-    );\n+    let param_env =\n+        ty::ParamEnv::new(tcx.intern_predicates(&hybrid_preds.predicates), Reveal::UserFacing);\n     let param_env = traits::normalize_param_env_or_error(\n         tcx,\n         impl_m.def_id,\n@@ -1120,11 +1117,8 @@ fn compare_type_predicate_entailment<'tcx>(\n     debug!(\"compare_type_predicate_entailment: bounds={:?}\", hybrid_preds);\n \n     let normalize_cause = traits::ObligationCause::misc(impl_ty_span, impl_ty_hir_id);\n-    let param_env = ty::ParamEnv::new(\n-        tcx.intern_predicates(&hybrid_preds.predicates),\n-        Reveal::UserFacing,\n-        None,\n-    );\n+    let param_env =\n+        ty::ParamEnv::new(tcx.intern_predicates(&hybrid_preds.predicates), Reveal::UserFacing);\n     let param_env = traits::normalize_param_env_or_error(\n         tcx,\n         impl_ty.def_id,\n@@ -1227,7 +1221,7 @@ fn compare_projection_bounds<'tcx>(\n             })\n             .to_predicate(tcx),\n         );\n-        ty::ParamEnv::new(tcx.intern_predicates(&predicates), Reveal::UserFacing, None)\n+        ty::ParamEnv::new(tcx.intern_predicates(&predicates), Reveal::UserFacing)\n     };\n \n     tcx.infer_ctxt().enter(move |infcx| {"}, {"sha": "ebe71b86c9221f52de120bd9adfa3a01024fe2b2", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=7dad29d6868914484be04cb054863261903bba58", "patch": "@@ -814,7 +814,8 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                     | ty::PredicateAtom::ClosureKind(..)\n                     | ty::PredicateAtom::TypeOutlives(..)\n                     | ty::PredicateAtom::ConstEvaluatable(..)\n-                    | ty::PredicateAtom::ConstEquate(..) => None,\n+                    | ty::PredicateAtom::ConstEquate(..)\n+                    | ty::PredicateAtom::TypeWellFormedFromEnv(..) => None,\n                 },\n             );\n "}, {"sha": "b95034adb24d1a4f58e106cd604ace7dfbdc4356", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=7dad29d6868914484be04cb054863261903bba58", "patch": "@@ -3918,6 +3918,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     // code is looking for a self type of a unresolved\n                     // inference variable.\n                     ty::PredicateAtom::ClosureKind(..) => None,\n+                    ty::PredicateAtom::TypeWellFormedFromEnv(..) => None,\n                 }\n             })\n             .filter(move |(tr, _)| self.self_type_matches_expected_vid(*tr, ty_var_root))"}, {"sha": "60b9467fca8b3dc05674735ec9b7e02c59cced6c", "filename": "compiler/rustc_typeck/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=7dad29d6868914484be04cb054863261903bba58", "patch": "@@ -405,6 +405,7 @@ fn trait_predicate_kind<'tcx>(\n         | ty::PredicateAtom::ObjectSafe(_)\n         | ty::PredicateAtom::ClosureKind(..)\n         | ty::PredicateAtom::ConstEvaluatable(..)\n-        | ty::PredicateAtom::ConstEquate(..) => None,\n+        | ty::PredicateAtom::ConstEquate(..)\n+        | ty::PredicateAtom::TypeWellFormedFromEnv(..) => None,\n     }\n }"}, {"sha": "ae336ccca457d1a340c6b40f2cb9f787286eedb3", "filename": "compiler/rustc_typeck/src/outlives/explicit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fexplicit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dad29d6868914484be04cb054863261903bba58/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fexplicit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fexplicit.rs?ref=7dad29d6868914484be04cb054863261903bba58", "patch": "@@ -57,7 +57,8 @@ impl<'tcx> ExplicitPredicatesMap<'tcx> {\n                     | ty::PredicateAtom::ClosureKind(..)\n                     | ty::PredicateAtom::Subtype(..)\n                     | ty::PredicateAtom::ConstEvaluatable(..)\n-                    | ty::PredicateAtom::ConstEquate(..) => (),\n+                    | ty::PredicateAtom::ConstEquate(..)\n+                    | ty::PredicateAtom::TypeWellFormedFromEnv(..) => (),\n                 }\n             }\n "}, {"sha": "31d420c3a18549c229f555a6f2d5435a9d25cba8", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7dad29d6868914484be04cb054863261903bba58/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dad29d6868914484be04cb054863261903bba58/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=7dad29d6868914484be04cb054863261903bba58", "patch": "@@ -508,7 +508,8 @@ impl<'a> Clean<Option<WherePredicate>> for ty::Predicate<'a> {\n             | ty::PredicateAtom::ObjectSafe(..)\n             | ty::PredicateAtom::ClosureKind(..)\n             | ty::PredicateAtom::ConstEvaluatable(..)\n-            | ty::PredicateAtom::ConstEquate(..) => panic!(\"not user writable\"),\n+            | ty::PredicateAtom::ConstEquate(..)\n+            | ty::PredicateAtom::TypeWellFormedFromEnv(..) => panic!(\"not user writable\"),\n         }\n     }\n }"}, {"sha": "91c46b953159e40d8d01b36b572869f44bd6b897", "filename": "src/test/ui/chalkify/type_inference.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7dad29d6868914484be04cb054863261903bba58/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dad29d6868914484be04cb054863261903bba58/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr?ref=7dad29d6868914484be04cb054863261903bba58", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `{float}: Bar` is not satisfied\n-  --> $DIR/type_inference.rs:27:5\n+  --> $DIR/type_inference.rs:27:14\n    |\n LL | fn only_bar<T: Bar>(_x: T) { }\n    |                --- required by this bound in `only_bar`\n ...\n LL |     only_bar(x);\n-   |     ^^^^^^^^ the trait `Bar` is not implemented for `{float}`\n+   |              ^ the trait `Bar` is not implemented for `{float}`\n    |\n    = help: the following implementations were found:\n              <i32 as Bar>"}, {"sha": "45322ea96721d8be3701049615f8019961a0a9f1", "filename": "src/test/ui/infinite/infinite-tag-type-recursion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dad29d6868914484be04cb054863261903bba58/src%2Ftest%2Fui%2Finfinite%2Finfinite-tag-type-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dad29d6868914484be04cb054863261903bba58/src%2Ftest%2Fui%2Finfinite%2Finfinite-tag-type-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-tag-type-recursion.stderr?ref=7dad29d6868914484be04cb054863261903bba58", "patch": "@@ -18,7 +18,7 @@ LL | enum MList { Cons(isize, MList), Nil }\n    | ^^^^^^^^^^\n    |\n    = note: ...which again requires computing drop-check constraints for `MList`, completing the cycle\n-   = note: cycle used when computing dropck types for `Canonical { max_universe: U0, variables: [], value: ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: UserFacing, def_id: None }, value: MList } }`\n+   = note: cycle used when computing dropck types for `Canonical { max_universe: U0, variables: [], value: ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: UserFacing }, value: MList } }`\n \n error: aborting due to 2 previous errors\n "}]}