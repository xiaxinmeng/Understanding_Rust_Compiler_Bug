{"sha": "edb616df3372e75bb501b871906901b834821106", "node_id": "C_kwDOAAsO6NoAKGVkYjYxNmRmMzM3MmU3NWJiNTAxYjg3MTkwNjkwMWI4MzQ4MjExMDY", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-08-10T16:30:47Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-08-15T11:26:35Z"}, "message": "errors: move translation logic into module\n\nJust moving code around so that triagebot can ping relevant parties when\ntranslation logic is modified.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "436c805aeb131fa3968f81e2bf9beaef5bc2f37d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/436c805aeb131fa3968f81e2bf9beaef5bc2f37d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edb616df3372e75bb501b871906901b834821106", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edb616df3372e75bb501b871906901b834821106", "html_url": "https://github.com/rust-lang/rust/commit/edb616df3372e75bb501b871906901b834821106", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edb616df3372e75bb501b871906901b834821106/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76be14b5cadd56e18af721c830c5592621b19cb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/76be14b5cadd56e18af721c830c5592621b19cb7", "html_url": "https://github.com/rust-lang/rust/commit/76be14b5cadd56e18af721c830c5592621b19cb7"}], "stats": {"total": 52, "additions": 33, "deletions": 19}, "files": [{"sha": "6efeee98fea6c2671446bd45e03216a2a55bbdf0", "filename": "src/parse/session.rs", "status": "modified", "additions": 33, "deletions": 19, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/edb616df3372e75bb501b871906901b834821106/src%2Fparse%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edb616df3372e75bb501b871906901b834821106/src%2Fparse%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparse%2Fsession.rs?ref=edb616df3372e75bb501b871906901b834821106", "patch": "@@ -3,6 +3,7 @@ use std::sync::atomic::{AtomicBool, Ordering};\n \n use rustc_data_structures::sync::{Lrc, Send};\n use rustc_errors::emitter::{Emitter, EmitterWriter};\n+use rustc_errors::translation::Translate;\n use rustc_errors::{ColorConfig, Diagnostic, Handler, Level as DiagnosticLevel};\n use rustc_session::parse::ParseSess as RawParseSess;\n use rustc_span::{\n@@ -28,19 +29,24 @@ pub(crate) struct ParseSess {\n /// Emitter which discards every error.\n struct SilentEmitter;\n \n-impl Emitter for SilentEmitter {\n-    fn source_map(&self) -> Option<&Lrc<SourceMap>> {\n-        None\n-    }\n-    fn emit_diagnostic(&mut self, _db: &Diagnostic) {}\n+impl Translate for SilentEmitter {\n     fn fluent_bundle(&self) -> Option<&Lrc<rustc_errors::FluentBundle>> {\n         None\n     }\n+\n     fn fallback_fluent_bundle(&self) -> &rustc_errors::FluentBundle {\n         panic!(\"silent emitter attempted to translate a diagnostic\");\n     }\n }\n \n+impl Emitter for SilentEmitter {\n+    fn source_map(&self) -> Option<&Lrc<SourceMap>> {\n+        None\n+    }\n+\n+    fn emit_diagnostic(&mut self, _db: &Diagnostic) {}\n+}\n+\n fn silent_emitter() -> Box<dyn Emitter + Send> {\n     Box::new(SilentEmitter {})\n }\n@@ -62,10 +68,21 @@ impl SilentOnIgnoredFilesEmitter {\n     }\n }\n \n+impl Translate for SilentOnIgnoredFilesEmitter {\n+    fn fluent_bundle(&self) -> Option<&Lrc<rustc_errors::FluentBundle>> {\n+        self.emitter.fluent_bundle()\n+    }\n+\n+    fn fallback_fluent_bundle(&self) -> &rustc_errors::FluentBundle {\n+        self.emitter.fallback_fluent_bundle()\n+    }\n+}\n+\n impl Emitter for SilentOnIgnoredFilesEmitter {\n     fn source_map(&self) -> Option<&Lrc<SourceMap>> {\n         None\n     }\n+\n     fn emit_diagnostic(&mut self, db: &Diagnostic) {\n         if db.level() == DiagnosticLevel::Fatal {\n             return self.handle_non_ignoreable_error(db);\n@@ -88,14 +105,6 @@ impl Emitter for SilentOnIgnoredFilesEmitter {\n         }\n         self.handle_non_ignoreable_error(db);\n     }\n-\n-    fn fluent_bundle(&self) -> Option<&Lrc<rustc_errors::FluentBundle>> {\n-        self.emitter.fluent_bundle()\n-    }\n-\n-    fn fallback_fluent_bundle(&self) -> &rustc_errors::FluentBundle {\n-        self.emitter.fallback_fluent_bundle()\n-    }\n }\n \n fn default_handler(\n@@ -340,19 +349,24 @@ mod tests {\n             num_emitted_errors: Lrc<AtomicU32>,\n         }\n \n+        impl Translate for TestEmitter {\n+            fn fluent_bundle(&self) -> Option<&Lrc<rustc_errors::FluentBundle>> {\n+                None\n+            }\n+\n+            fn fallback_fluent_bundle(&self) -> &rustc_errors::FluentBundle {\n+                panic!(\"test emitter attempted to translate a diagnostic\");\n+            }\n+        }\n+\n         impl Emitter for TestEmitter {\n             fn source_map(&self) -> Option<&Lrc<SourceMap>> {\n                 None\n             }\n+\n             fn emit_diagnostic(&mut self, _db: &Diagnostic) {\n                 self.num_emitted_errors.fetch_add(1, Ordering::Release);\n             }\n-            fn fluent_bundle(&self) -> Option<&Lrc<rustc_errors::FluentBundle>> {\n-                None\n-            }\n-            fn fallback_fluent_bundle(&self) -> &rustc_errors::FluentBundle {\n-                panic!(\"test emitter attempted to translate a diagnostic\");\n-            }\n         }\n \n         fn build_diagnostic(level: DiagnosticLevel, span: Option<MultiSpan>) -> Diagnostic {"}]}