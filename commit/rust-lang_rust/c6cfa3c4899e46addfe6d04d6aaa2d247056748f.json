{"sha": "c6cfa3c4899e46addfe6d04d6aaa2d247056748f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2Y2ZhM2M0ODk5ZTQ2YWRkZmU2ZDA0ZDZhYWEyZDI0NzA1Njc0OGY=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2017-01-25T03:44:33Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2017-01-25T03:48:38Z"}, "message": "Extend Cell to work with non-Copy types\n\nPart of #39264", "tree": {"sha": "2e27e883994bd4d8971196ac92939116aaab768a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e27e883994bd4d8971196ac92939116aaab768a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6cfa3c4899e46addfe6d04d6aaa2d247056748f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6cfa3c4899e46addfe6d04d6aaa2d247056748f", "html_url": "https://github.com/rust-lang/rust/commit/c6cfa3c4899e46addfe6d04d6aaa2d247056748f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6cfa3c4899e46addfe6d04d6aaa2d247056748f/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83c2d95238e3545e7ae9af4873c48b1e3651c164", "url": "https://api.github.com/repos/rust-lang/rust/commits/83c2d95238e3545e7ae9af4873c48b1e3651c164", "html_url": "https://github.com/rust-lang/rust/commit/83c2d95238e3545e7ae9af4873c48b1e3651c164"}], "stats": {"total": 162, "additions": 126, "deletions": 36}, "files": [{"sha": "cafa19afcb6489f2f884a693c9d83050592ab840", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 94, "deletions": 36, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/c6cfa3c4899e46addfe6d04d6aaa2d247056748f/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6cfa3c4899e46addfe6d04d6aaa2d247056748f/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=c6cfa3c4899e46addfe6d04d6aaa2d247056748f", "patch": "@@ -176,6 +176,7 @@\n use cmp::Ordering;\n use fmt::{self, Debug, Display};\n use marker::Unsize;\n+use mem;\n use ops::{Deref, DerefMut, CoerceUnsized};\n \n /// A mutable memory location that admits only `Copy` data.\n@@ -187,23 +188,6 @@ pub struct Cell<T> {\n }\n \n impl<T:Copy> Cell<T> {\n-    /// Creates a new `Cell` containing the given value.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::cell::Cell;\n-    ///\n-    /// let c = Cell::new(5);\n-    /// ```\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[inline]\n-    pub const fn new(value: T) -> Cell<T> {\n-        Cell {\n-            value: UnsafeCell::new(value),\n-        }\n-    }\n-\n     /// Returns a copy of the contained value.\n     ///\n     /// # Examples\n@@ -221,25 +205,6 @@ impl<T:Copy> Cell<T> {\n         unsafe{ *self.value.get() }\n     }\n \n-    /// Sets the contained value.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::cell::Cell;\n-    ///\n-    /// let c = Cell::new(5);\n-    ///\n-    /// c.set(10);\n-    /// ```\n-    #[inline]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn set(&self, value: T) {\n-        unsafe {\n-            *self.value.get() = value;\n-        }\n-    }\n-\n     /// Returns a reference to the underlying `UnsafeCell`.\n     ///\n     /// # Examples\n@@ -378,6 +343,99 @@ impl<T: Copy> From<T> for Cell<T> {\n     }\n }\n \n+#[unstable(feature = \"move_cell\", issue = \"39264\")]\n+impl<T> Cell<T> {\n+    /// Creates a new `Cell` containing the given value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::cell::Cell;\n+    ///\n+    /// let c = Cell::new(5);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub const fn new(value: T) -> Cell<T> {\n+        Cell {\n+            value: UnsafeCell::new(value),\n+        }\n+    }\n+\n+    /// Sets the contained value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::cell::Cell;\n+    ///\n+    /// let c = Cell::new(5);\n+    ///\n+    /// c.set(10);\n+    /// ```\n+    #[inline]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub fn set(&self, val: T) {\n+        let old = self.replace(val);\n+        drop(old);\n+    }\n+\n+    /// Replaces the contained value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(move_cell)]\n+    /// use std::cell::Cell;\n+    ///\n+    /// let c = Cell::new(5);\n+    /// let old = c.replace(10);\n+    ///\n+    /// assert_eq!(5, old);\n+    /// ```\n+    pub fn replace(&self, val: T) -> T {\n+        mem::replace(unsafe { &mut *self.value.get() }, val)\n+    }\n+\n+    /// Unwraps the value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(move_cell)]\n+    /// use std::cell::Cell;\n+    ///\n+    /// let c = Cell::new(5);\n+    /// let five = c.into_inner();\n+    ///\n+    /// assert_eq!(five, 5);\n+    /// ```\n+    pub fn into_inner(self) -> T {\n+        unsafe { self.value.into_inner() }\n+    }\n+}\n+\n+#[unstable(feature = \"move_cell\", issue = \"39264\")]\n+impl<T: Default> Cell<T> {\n+    /// Takes the value of the cell, leaving `Default::default()` in its place.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(move_cell)]\n+    /// use std::cell::Cell;\n+    ///\n+    /// let c = Cell::new(5);\n+    /// let five = c.take();\n+    ///\n+    /// assert_eq!(five, 5);\n+    /// assert_eq!(c.into_inner(), 0);\n+    /// ```\n+    pub fn take(&self) -> T {\n+        self.replace(Default::default())\n+    }\n+}\n+\n #[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n impl<T: CoerceUnsized<U>, U> CoerceUnsized<Cell<U>> for Cell<T> {}\n "}, {"sha": "8585f2f08711332a3e5af0fa53145df9e1b657ec", "filename": "src/libcoretest/cell.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c6cfa3c4899e46addfe6d04d6aaa2d247056748f/src%2Flibcoretest%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6cfa3c4899e46addfe6d04d6aaa2d247056748f/src%2Flibcoretest%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fcell.rs?ref=c6cfa3c4899e46addfe6d04d6aaa2d247056748f", "patch": "@@ -209,6 +209,37 @@ fn cell_default() {\n     assert_eq!(0, cell.get());\n }\n \n+#[test]\n+fn cell_set() {\n+    let cell = Cell::new(10);\n+    cell.set(20);\n+    assert_eq!(20, cell.get());\n+\n+    let cell = Cell::new(\"Hello\".to_owned());\n+    cell.set(\"World\".to_owned());\n+    assert_eq!(\"World\".to_owned(), cell.into_inner());\n+}\n+\n+#[test]\n+fn cell_replace() {\n+    let cell = Cell::new(10);\n+    assert_eq!(10, cell.replace(20));\n+    assert_eq!(20, cell.get());\n+\n+    let cell = Cell::new(\"Hello\".to_owned());\n+    assert_eq!(\"Hello\".to_owned(), cell.replace(\"World\".to_owned()));\n+    assert_eq!(\"World\".to_owned(), cell.into_inner());\n+}\n+\n+#[test]\n+fn cell_into_inner() {\n+    let cell = Cell::new(10);\n+    assert_eq!(10, cell.into_inner());\n+\n+    let cell = Cell::new(\"Hello world\".to_owned());\n+    assert_eq!(\"Hello world\".to_owned(), cell.into_inner());\n+}\n+\n #[test]\n fn refcell_default() {\n     let cell: RefCell<u64> = Default::default();"}, {"sha": "ea88d45630c46e77c5473619718f2c3415ae9e0e", "filename": "src/libcoretest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6cfa3c4899e46addfe6d04d6aaa2d247056748f/src%2Flibcoretest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6cfa3c4899e46addfe6d04d6aaa2d247056748f/src%2Flibcoretest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Flib.rs?ref=c6cfa3c4899e46addfe6d04d6aaa2d247056748f", "patch": "@@ -34,6 +34,7 @@\n #![feature(ordering_chaining)]\n #![feature(result_unwrap_or_default)]\n #![feature(ptr_unaligned)]\n+#![feature(move_cell)]\n \n extern crate core;\n extern crate test;"}]}