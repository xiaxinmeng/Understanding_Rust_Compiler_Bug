{"sha": "16be619c6aec0db952be61ebb45c63a1ebe4b1a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2YmU2MTljNmFlYzBkYjk1MmJlNjFlYmI0NWM2M2ExZWJlNGIxYTU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-22T21:19:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-22T21:19:22Z"}, "message": "Rollup merge of #71369 - ctaggart:wasm32_profiling, r=ecstatic-morse\n\nallow wasm32 compilation of librustc_data_structures/profiling.rs\n\nI'm trying to use rustfmt from a wasm app. I ran into this compilation problem https://github.com/rust-lang/rustfmt/issues/4132 and after investigating, it looked like just adjusting a few cfg's. I based it on how measureme added support in https://github.com/rust-lang/measureme/pull/43.\n\nMy testing on my macbook was just that librustc_data_structures builds now with both:\n- cargo build\n- cargo build --target wasm32-unknown-unknown", "tree": {"sha": "6329630b2689e6bc3135ee7f2b5d2032dcddd19d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6329630b2689e6bc3135ee7f2b5d2032dcddd19d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16be619c6aec0db952be61ebb45c63a1ebe4b1a5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeoLTaCRBK7hj4Ov3rIwAAdHIIAEsIeFFYNpXUaw2M6Zca6hm3\nhh6D2JFaZQZexX0dLj7YuvhLGRLBIY/1WhL23digvJAoQhVsnISIt/cgRiUxkBgk\nb8A5lZNKQSzoujkXTVOv3Ojx6eSV6IS+QZknNqpxpt7aRhzAfl8d3+nmLduxLC6b\nGMOB83B+PfoCoBDRUwjeW9IdF0JBW4uDpAWpL+OT63xxAlnc/eQIDBkINH3SJOXL\nm61V/FUSbht3WzF6wpvGTSREYcyTtNume8L2pM8gNTPTz9Frtgllgt0hoyi8L6tg\n/R3IwfNHwQu/OfamVbE2SxjSwyaj/BzGw9YvpreLxSN3ljAHi25R/EaFrTwLhHI=\n=Ge7/\n-----END PGP SIGNATURE-----\n", "payload": "tree 6329630b2689e6bc3135ee7f2b5d2032dcddd19d\nparent d3e24bd457df2c707f0ac8e1943ea3872b1a8b73\nparent 51b194f09ab907a388ff7e9799940380d05f7347\nauthor Dylan DPC <dylan.dpc@gmail.com> 1587590362 +0200\ncommitter GitHub <noreply@github.com> 1587590362 +0200\n\nRollup merge of #71369 - ctaggart:wasm32_profiling, r=ecstatic-morse\n\nallow wasm32 compilation of librustc_data_structures/profiling.rs\n\nI'm trying to use rustfmt from a wasm app. I ran into this compilation problem https://github.com/rust-lang/rustfmt/issues/4132 and after investigating, it looked like just adjusting a few cfg's. I based it on how measureme added support in https://github.com/rust-lang/measureme/pull/43.\n\nMy testing on my macbook was just that librustc_data_structures builds now with both:\n- cargo build\n- cargo build --target wasm32-unknown-unknown\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16be619c6aec0db952be61ebb45c63a1ebe4b1a5", "html_url": "https://github.com/rust-lang/rust/commit/16be619c6aec0db952be61ebb45c63a1ebe4b1a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16be619c6aec0db952be61ebb45c63a1ebe4b1a5/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3e24bd457df2c707f0ac8e1943ea3872b1a8b73", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3e24bd457df2c707f0ac8e1943ea3872b1a8b73", "html_url": "https://github.com/rust-lang/rust/commit/d3e24bd457df2c707f0ac8e1943ea3872b1a8b73"}, {"sha": "51b194f09ab907a388ff7e9799940380d05f7347", "url": "https://api.github.com/repos/rust-lang/rust/commits/51b194f09ab907a388ff7e9799940380d05f7347", "html_url": "https://github.com/rust-lang/rust/commit/51b194f09ab907a388ff7e9799940380d05f7347"}], "stats": {"total": 73, "additions": 42, "deletions": 31}, "files": [{"sha": "07d16c6483ec797cbec35e747dda60f9d277c343", "filename": "src/librustc_data_structures/profiling.rs", "status": "modified", "additions": 42, "deletions": 31, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/16be619c6aec0db952be61ebb45c63a1ebe4b1a5/src%2Flibrustc_data_structures%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16be619c6aec0db952be61ebb45c63a1ebe4b1a5/src%2Flibrustc_data_structures%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fprofiling.rs?ref=16be619c6aec0db952be61ebb45c63a1ebe4b1a5", "patch": "@@ -97,12 +97,17 @@ use std::time::{Duration, Instant};\n use measureme::{EventId, EventIdBuilder, SerializableString, StringId};\n use parking_lot::RwLock;\n \n-/// MmapSerializatioSink is faster on macOS and Linux\n-/// but FileSerializationSink is faster on Windows\n-#[cfg(not(windows))]\n-type SerializationSink = measureme::MmapSerializationSink;\n-#[cfg(windows)]\n-type SerializationSink = measureme::FileSerializationSink;\n+cfg_if! {\n+    if #[cfg(any(windows, target_os = \"wasi\"))] {\n+        /// FileSerializationSink is faster on Windows\n+        type SerializationSink = measureme::FileSerializationSink;\n+    } else if #[cfg(target_arch = \"wasm32\")] {\n+        type SerializationSink = measureme::ByteVecSink;\n+    } else {\n+        /// MmapSerializatioSink is faster on macOS and Linux\n+        type SerializationSink = measureme::MmapSerializationSink;\n+    }\n+}\n \n type Profiler = measureme::Profiler<SerializationSink>;\n \n@@ -602,31 +607,37 @@ pub fn duration_to_secs_str(dur: std::time::Duration) -> String {\n }\n \n // Memory reporting\n-#[cfg(unix)]\n-fn get_resident() -> Option<usize> {\n-    let field = 1;\n-    let contents = fs::read(\"/proc/self/statm\").ok()?;\n-    let contents = String::from_utf8(contents).ok()?;\n-    let s = contents.split_whitespace().nth(field)?;\n-    let npages = s.parse::<usize>().ok()?;\n-    Some(npages * 4096)\n-}\n-\n-#[cfg(windows)]\n-fn get_resident() -> Option<usize> {\n-    use std::mem::{self, MaybeUninit};\n-    use winapi::shared::minwindef::DWORD;\n-    use winapi::um::processthreadsapi::GetCurrentProcess;\n-    use winapi::um::psapi::{GetProcessMemoryInfo, PROCESS_MEMORY_COUNTERS};\n-\n-    let mut pmc = MaybeUninit::<PROCESS_MEMORY_COUNTERS>::uninit();\n-    match unsafe {\n-        GetProcessMemoryInfo(GetCurrentProcess(), pmc.as_mut_ptr(), mem::size_of_val(&pmc) as DWORD)\n-    } {\n-        0 => None,\n-        _ => {\n-            let pmc = unsafe { pmc.assume_init() };\n-            Some(pmc.WorkingSetSize as usize)\n+cfg_if! {\n+    if #[cfg(windows)] {\n+        fn get_resident() -> Option<usize> {\n+            use std::mem::{self, MaybeUninit};\n+            use winapi::shared::minwindef::DWORD;\n+            use winapi::um::processthreadsapi::GetCurrentProcess;\n+            use winapi::um::psapi::{GetProcessMemoryInfo, PROCESS_MEMORY_COUNTERS};\n+\n+            let mut pmc = MaybeUninit::<PROCESS_MEMORY_COUNTERS>::uninit();\n+            match unsafe {\n+                GetProcessMemoryInfo(GetCurrentProcess(), pmc.as_mut_ptr(), mem::size_of_val(&pmc) as DWORD)\n+            } {\n+                0 => None,\n+                _ => {\n+                    let pmc = unsafe { pmc.assume_init() };\n+                    Some(pmc.WorkingSetSize as usize)\n+                }\n+            }\n+        }\n+    } else if #[cfg(unix)] {\n+        fn get_resident() -> Option<usize> {\n+            let field = 1;\n+            let contents = fs::read(\"/proc/self/statm\").ok()?;\n+            let contents = String::from_utf8(contents).ok()?;\n+            let s = contents.split_whitespace().nth(field)?;\n+            let npages = s.parse::<usize>().ok()?;\n+            Some(npages * 4096)\n+        }\n+    } else {\n+        fn get_resident() -> Option<usize> {\n+            None\n         }\n     }\n }"}]}