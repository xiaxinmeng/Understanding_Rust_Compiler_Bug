{"sha": "1ce1c645cf27c4acdefe6ec8a11d1f0491954a99", "node_id": "C_kwDOAAsO6NoAKDFjZTFjNjQ1Y2YyN2M0YWNkZWZlNmVjOGExMWQxZjA0OTE5NTRhOTk", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-11-13T00:42:48Z"}, "committer": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2021-11-13T00:56:14Z"}, "message": "Rewrite Arm transmutes, reading std::arch closer", "tree": {"sha": "f61828afb6553ade15d7942fa05e846e40b45a49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f61828afb6553ade15d7942fa05e846e40b45a49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ce1c645cf27c4acdefe6ec8a11d1f0491954a99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ce1c645cf27c4acdefe6ec8a11d1f0491954a99", "html_url": "https://github.com/rust-lang/rust/commit/1ce1c645cf27c4acdefe6ec8a11d1f0491954a99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ce1c645cf27c4acdefe6ec8a11d1f0491954a99/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ddf7ad8e19dfc3c73501bc4dbe066e46ced0f36", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ddf7ad8e19dfc3c73501bc4dbe066e46ced0f36", "html_url": "https://github.com/rust-lang/rust/commit/6ddf7ad8e19dfc3c73501bc4dbe066e46ced0f36"}], "stats": {"total": 97, "additions": 59, "deletions": 38}, "files": [{"sha": "e8ce7176b4f219d4ccb2ed85474365a0916759e2", "filename": "crates/core_simd/src/vendor.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ce1c645cf27c4acdefe6ec8a11d1f0491954a99/crates%2Fcore_simd%2Fsrc%2Fvendor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce1c645cf27c4acdefe6ec8a11d1f0491954a99/crates%2Fcore_simd%2Fsrc%2Fvendor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvendor.rs?ref=1ce1c645cf27c4acdefe6ec8a11d1f0491954a99", "patch": "@@ -15,16 +15,14 @@ macro_rules! from_transmute {\n     };\n }\n \n+/// Conversions to x86's SIMD types.\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n mod x86;\n \n #[cfg(any(target_arch = \"wasm32\"))]\n mod wasm32;\n \n-#[cfg(any(\n-    target_arch = \"aarch64\",\n-    all(target_arch = \"arm\", target_feature = \"v7\")\n-))]\n+#[cfg(any(target_arch = \"aarch64\", target_arch = \"arm\",))]\n mod arm;\n \n #[cfg(any(target_arch = \"powerpc\", target_arch = \"powerpc64\"))]"}, {"sha": "ff3b69ccf959221fa0814b326082531938522640", "filename": "crates/core_simd/src/vendor/arm.rs", "status": "modified", "additions": 57, "deletions": 34, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/1ce1c645cf27c4acdefe6ec8a11d1f0491954a99/crates%2Fcore_simd%2Fsrc%2Fvendor%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce1c645cf27c4acdefe6ec8a11d1f0491954a99/crates%2Fcore_simd%2Fsrc%2Fvendor%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvendor%2Farm.rs?ref=1ce1c645cf27c4acdefe6ec8a11d1f0491954a99", "patch": "@@ -1,53 +1,76 @@\n+#![allow(unused)]\n use crate::simd::*;\n \n-#[cfg(all(target_arch = \"arm\", target_feature = \"v7\"))]\n+#[cfg(target_arch = \"arm\")]\n use core::arch::arm::*;\n \n #[cfg(target_arch = \"aarch64\")]\n use core::arch::aarch64::*;\n \n-from_transmute! { unsafe f32x2 => float32x2_t }\n-from_transmute! { unsafe f32x4 => float32x4_t }\n-\n-from_transmute! { unsafe u8x8 => uint8x8_t }\n-from_transmute! { unsafe u8x16 => uint8x16_t }\n-from_transmute! { unsafe i8x8 => int8x8_t }\n-from_transmute! { unsafe i8x16 => int8x16_t }\n-from_transmute! { unsafe u8x8 => poly8x8_t }\n-from_transmute! { unsafe u8x16 => poly8x16_t }\n-\n-from_transmute! { unsafe u16x4 => uint16x4_t }\n-from_transmute! { unsafe u16x8 => uint16x8_t }\n-from_transmute! { unsafe i16x4 => int16x4_t }\n-from_transmute! { unsafe i16x8 => int16x8_t }\n-from_transmute! { unsafe u16x4 => poly16x4_t }\n-from_transmute! { unsafe u16x8 => poly16x8_t }\n-\n-from_transmute! { unsafe u32x2 => uint32x2_t }\n-from_transmute! { unsafe u32x4 => uint32x4_t }\n-from_transmute! { unsafe i32x2 => int32x2_t }\n-from_transmute! { unsafe i32x4 => int32x4_t }\n-\n-from_transmute! { unsafe Simd<u64, 1> => uint64x1_t }\n-from_transmute! { unsafe u64x2 => uint64x2_t }\n-from_transmute! { unsafe Simd<i64, 1> => int64x1_t }\n-from_transmute! { unsafe i64x2 => int64x2_t }\n-from_transmute! { unsafe Simd<u64, 1> => poly64x1_t }\n-from_transmute! { unsafe u64x2 => poly64x2_t }\n-\n-#[cfg(all(target_arch = \"arm\", target_feature = \"v7\"))]\n-mod arm {\n+#[cfg(any(\n+    target_arch = \"aarch64\",\n+    all(target_arch = \"arm\", target_feature = \"v7\"),\n+))]\n+mod neon {\n+    use super::*;\n+\n+    from_transmute! { unsafe f32x2 => float32x2_t }\n+    from_transmute! { unsafe f32x4 => float32x4_t }\n+\n+    from_transmute! { unsafe u8x8 => uint8x8_t }\n+    from_transmute! { unsafe u8x16 => uint8x16_t }\n+    from_transmute! { unsafe i8x8 => int8x8_t }\n+    from_transmute! { unsafe i8x16 => int8x16_t }\n+    from_transmute! { unsafe u8x8 => poly8x8_t }\n+    from_transmute! { unsafe u8x16 => poly8x16_t }\n+\n+    from_transmute! { unsafe u16x4 => uint16x4_t }\n+    from_transmute! { unsafe u16x8 => uint16x8_t }\n+    from_transmute! { unsafe i16x4 => int16x4_t }\n+    from_transmute! { unsafe i16x8 => int16x8_t }\n+    from_transmute! { unsafe u16x4 => poly16x4_t }\n+    from_transmute! { unsafe u16x8 => poly16x8_t }\n+\n+    from_transmute! { unsafe u32x2 => uint32x2_t }\n+    from_transmute! { unsafe u32x4 => uint32x4_t }\n+    from_transmute! { unsafe i32x2 => int32x2_t }\n+    from_transmute! { unsafe i32x4 => int32x4_t }\n+\n+    from_transmute! { unsafe Simd<u64, 1> => uint64x1_t }\n+    from_transmute! { unsafe u64x2 => uint64x2_t }\n+    from_transmute! { unsafe Simd<i64, 1> => int64x1_t }\n+    from_transmute! { unsafe i64x2 => int64x2_t }\n+    from_transmute! { unsafe Simd<u64, 1> => poly64x1_t }\n+    from_transmute! { unsafe u64x2 => poly64x2_t }\n+}\n+\n+#[cfg(any(\n+    all(target_feature = \"v5te\", not(target_feature = \"mclass\")),\n+    all(target_feature = \"mclass\", target_feature = \"dsp\"),\n+))]\n+mod dsp {\n     use super::*;\n-    from_transmute! { unsafe Simd<u8, 4> => uint8x4_t }\n-    from_transmute! { unsafe Simd<i8, 4> => int8x4_t }\n \n     from_transmute! { unsafe Simd<u16, 2> => uint16x2_t }\n     from_transmute! { unsafe Simd<i16, 2> => int16x2_t }\n }\n \n+#[cfg(any(\n+    all(target_feature = \"v6\", not(target_feature = \"mclass\")),\n+    all(target_feature = \"mclass\", target_feature = \"dsp\"),\n+))]\n+mod simd32 {\n+    use super::*;\n+\n+    from_transmute! { unsafe Simd<u8, 4> => uint8x4_t }\n+    from_transmute! { unsafe Simd<i8, 4> => int8x4_t }\n+}\n+\n #[cfg(target_arch = \"aarch64\")]\n mod aarch64 {\n+    use super::neon::*;\n     use super::*;\n+\n     from_transmute! { unsafe Simd<f64, 1> => float64x1_t }\n     from_transmute! { unsafe f64x2 => float64x2_t }\n }"}]}