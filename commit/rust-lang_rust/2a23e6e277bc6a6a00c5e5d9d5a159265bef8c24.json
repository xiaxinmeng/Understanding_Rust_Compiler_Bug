{"sha": "2a23e6e277bc6a6a00c5e5d9d5a159265bef8c24", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhMjNlNmUyNzdiYzZhNmEwMGM1ZTVkOWQ1YTE1OTI2NWJlZjhjMjQ=", "commit": {"author": {"name": "lukaramu", "email": "lukaramu@users.noreply.github.com", "date": "2017-04-14T21:36:27Z"}, "committer": {"name": "lukaramu", "email": "lukaramu@users.noreply.github.com", "date": "2017-04-14T21:36:27Z"}, "message": "std::collections docs: Address issues that came up in PR #41286\n\n* Bound:\n  * Added another example using RangeArgument to illustrate how Bound maps\n    to range endpoints.\n  * Added a note to the existing example that says that it's better to use\n    range syntax in most cases\n  * Added missing /// line\n* binary_heap::PeakMut: s/Object representing/Structure wrapping\n* added collections/hash_set/struct.HashSet.html to linkchecker whitelist", "tree": {"sha": "e94242d427893691034f433e09f8aacd238bcdad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e94242d427893691034f433e09f8aacd238bcdad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a23e6e277bc6a6a00c5e5d9d5a159265bef8c24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a23e6e277bc6a6a00c5e5d9d5a159265bef8c24", "html_url": "https://github.com/rust-lang/rust/commit/2a23e6e277bc6a6a00c5e5d9d5a159265bef8c24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a23e6e277bc6a6a00c5e5d9d5a159265bef8c24/comments", "author": null, "committer": null, "parents": [{"sha": "89ac8654e19b123132c82eb9f81ed3ba9bb3eb33", "url": "https://api.github.com/repos/rust-lang/rust/commits/89ac8654e19b123132c82eb9f81ed3ba9bb3eb33", "html_url": "https://github.com/rust-lang/rust/commit/89ac8654e19b123132c82eb9f81ed3ba9bb3eb33"}], "stats": {"total": 24, "additions": 22, "deletions": 2}, "files": [{"sha": "149c285a72a98d10a65aa2a2dc73b255601d24e4", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a23e6e277bc6a6a00c5e5d9d5a159265bef8c24/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a23e6e277bc6a6a00c5e5d9d5a159265bef8c24/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=2a23e6e277bc6a6a00c5e5d9d5a159265bef8c24", "patch": "@@ -219,7 +219,7 @@ pub struct BinaryHeap<T> {\n     data: Vec<T>,\n }\n \n-/// Object representing a mutable reference to the greatest item on a\n+/// Structure wrapping a mutable reference to the greatest item on a\n /// `BinaryHeap`.\n ///\n /// This `struct` is created by the [`peek_mut`] method on [`BinaryHeap`]. See"}, {"sha": "a207087915a3d66cf5fdc0bb0c99212404608777", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2a23e6e277bc6a6a00c5e5d9d5a159265bef8c24/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a23e6e277bc6a6a00c5e5d9d5a159265bef8c24/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=2a23e6e277bc6a6a00c5e5d9d5a159265bef8c24", "patch": "@@ -135,8 +135,25 @@ mod std {\n }\n \n /// An endpoint of a range of keys.\n+///\n /// # Examples\n ///\n+/// `Bound`s are range endpoints:\n+///\n+/// ```\n+/// #![feature(collections_range)]\n+///\n+/// use std::collections::range::RangeArgument;\n+/// use std::collections::Bound::*;\n+///\n+/// assert_eq!((..100).start(), Unbounded);\n+/// assert_eq!((1..12).start(), Included(&1));\n+/// assert_eq!((1..12).end(), Excluded(&12));\n+/// ```\n+///\n+/// Using a tuple of `Bound`s as an argument to [`BTreeMap::range`].\n+/// Note that in most cases, it's better to use range syntax (`1..5`) instead.\n+///\n /// ```\n /// use std::collections::BTreeMap;\n /// use std::collections::Bound::{Excluded, Included, Unbounded};\n@@ -152,6 +169,8 @@ mod std {\n ///\n /// assert_eq!(Some((&3, &\"a\")), map.range((Unbounded, Included(5))).next());\n /// ```\n+///\n+/// [`BTreeMap::range`]: btree_map/struct.BTreeMap.html#method.range\n #[stable(feature = \"collections_bound\", since = \"1.17.0\")]\n #[derive(Clone, Copy, Debug, Hash, PartialEq, Eq)]\n pub enum Bound<T> {"}, {"sha": "137de561c76c980cc77cbac8ad90c8425129695b", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a23e6e277bc6a6a00c5e5d9d5a159265bef8c24/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a23e6e277bc6a6a00c5e5d9d5a159265bef8c24/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=2a23e6e277bc6a6a00c5e5d9d5a159265bef8c24", "patch": "@@ -142,7 +142,8 @@ fn check(cache: &mut Cache,\n     if file.ends_with(\"btree_set/struct.BTreeSet.html\") ||\n        file.ends_with(\"collections/struct.BTreeSet.html\") ||\n        file.ends_with(\"collections/btree_map/struct.BTreeMap.html\") ||\n-       file.ends_with(\"collections/hash_map/struct.HashMap.html\") {\n+       file.ends_with(\"collections/hash_map/struct.HashMap.html\") ||\n+       file.ends_with(\"collections/hash_set/struct.HashSet.html\") {\n         return None;\n     }\n "}]}