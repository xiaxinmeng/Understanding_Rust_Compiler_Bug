{"sha": "3f86faddaf5d6a676167f858e6044ea08809179a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmODZmYWRkYWY1ZDZhNjc2MTY3Zjg1OGU2MDQ0ZWEwODgwOTE3OWE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-20T21:03:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-20T21:03:02Z"}, "message": "Rollup merge of #60915 - michaelwoerister:hashstablestuff, r=estebank\n\nstable hashing: Remove unused field and add documentation.\n\nThis PR removes the `bytes_hashed` field from `StableHasher` which in the past has been used for collecting some statistics but has gone unused for quite a while (months at least) now.\n\nThe PR also tries to document some requirements for `HashStable` implementations that haven't been written down explicitly anywhere.", "tree": {"sha": "2fab593eed5d4fa3be8a6d88be49ea9e67a03042", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fab593eed5d4fa3be8a6d88be49ea9e67a03042"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f86faddaf5d6a676167f858e6044ea08809179a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc4xYGCRBK7hj4Ov3rIwAAdHIIACZjXoI2wgTNq01enyD8iWHA\nFB9K72InsJQwdVT8eEDmL3YPY/aiArOOIcZvoeSbcU1EKj7+CQoKQKvV1KsWxbPn\nlVjXvA2slgjcF8N9DQpHWROfg05T0oCfXa+mMdKA+1KdYhstw770tA2hUP2eFaCo\n1HdppK9pL5EyhiqnjkovFJgdYt1OGqghXic03SYvhhicmDqQMI7V+YMBc/nVkDu4\niPClDkMpANnjJ9PT8DCMVNEv6JlmmfStl2NNMLKzhAj3c+FRU43i7UyJasATBEIA\nRutDO/G+Ph05e9Jt0fY2xV6UkxeWBqgKlBA8R74f7IKBWUJeq+5EYFUFMxb34h0=\n=YzvA\n-----END PGP SIGNATURE-----\n", "payload": "tree 2fab593eed5d4fa3be8a6d88be49ea9e67a03042\nparent 36b5724e0dd7a328f5065cbf1188e114c2e5a1b3\nparent a79c06a9ce1986d3c4dbc27b5e51d60d77befafb\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1558386182 +0200\ncommitter GitHub <noreply@github.com> 1558386182 +0200\n\nRollup merge of #60915 - michaelwoerister:hashstablestuff, r=estebank\n\nstable hashing: Remove unused field and add documentation.\n\nThis PR removes the `bytes_hashed` field from `StableHasher` which in the past has been used for collecting some statistics but has gone unused for quite a while (months at least) now.\n\nThe PR also tries to document some requirements for `HashStable` implementations that haven't been written down explicitly anywhere.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f86faddaf5d6a676167f858e6044ea08809179a", "html_url": "https://github.com/rust-lang/rust/commit/3f86faddaf5d6a676167f858e6044ea08809179a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f86faddaf5d6a676167f858e6044ea08809179a/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36b5724e0dd7a328f5065cbf1188e114c2e5a1b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/36b5724e0dd7a328f5065cbf1188e114c2e5a1b3", "html_url": "https://github.com/rust-lang/rust/commit/36b5724e0dd7a328f5065cbf1188e114c2e5a1b3"}, {"sha": "a79c06a9ce1986d3c4dbc27b5e51d60d77befafb", "url": "https://api.github.com/repos/rust-lang/rust/commits/a79c06a9ce1986d3c4dbc27b5e51d60d77befafb", "html_url": "https://github.com/rust-lang/rust/commit/a79c06a9ce1986d3c4dbc27b5e51d60d77befafb"}], "stats": {"total": 44, "additions": 24, "deletions": 20}, "files": [{"sha": "2b844aa24d49c92a6d5bdbd165762f5a00908b31", "filename": "src/librustc_data_structures/stable_hasher.rs", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3f86faddaf5d6a676167f858e6044ea08809179a/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f86faddaf5d6a676167f858e6044ea08809179a/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fstable_hasher.rs?ref=3f86faddaf5d6a676167f858e6044ea08809179a", "patch": "@@ -15,7 +15,6 @@ use crate::bit_set;\n /// extended to 64 bits if needed.\n pub struct StableHasher<W> {\n     state: SipHasher128,\n-    bytes_hashed: u64,\n     width: PhantomData<W>,\n }\n \n@@ -33,7 +32,6 @@ impl<W: StableHasherResult> StableHasher<W> {\n     pub fn new() -> Self {\n         StableHasher {\n             state: SipHasher128::new_with_keys(0, 0),\n-            bytes_hashed: 0,\n             width: PhantomData,\n         }\n     }\n@@ -61,11 +59,6 @@ impl<W> StableHasher<W> {\n     pub fn finalize(self) -> (u64, u64) {\n         self.state.finish128()\n     }\n-\n-    #[inline]\n-    pub fn bytes_hashed(&self) -> u64 {\n-        self.bytes_hashed\n-    }\n }\n \n impl<W> Hasher for StableHasher<W> {\n@@ -76,37 +69,31 @@ impl<W> Hasher for StableHasher<W> {\n     #[inline]\n     fn write(&mut self, bytes: &[u8]) {\n         self.state.write(bytes);\n-        self.bytes_hashed += bytes.len() as u64;\n     }\n \n     #[inline]\n     fn write_u8(&mut self, i: u8) {\n         self.state.write_u8(i);\n-        self.bytes_hashed += 1;\n     }\n \n     #[inline]\n     fn write_u16(&mut self, i: u16) {\n         self.state.write_u16(i.to_le());\n-        self.bytes_hashed += 2;\n     }\n \n     #[inline]\n     fn write_u32(&mut self, i: u32) {\n         self.state.write_u32(i.to_le());\n-        self.bytes_hashed += 4;\n     }\n \n     #[inline]\n     fn write_u64(&mut self, i: u64) {\n         self.state.write_u64(i.to_le());\n-        self.bytes_hashed += 8;\n     }\n \n     #[inline]\n     fn write_u128(&mut self, i: u128) {\n         self.state.write_u128(i.to_le());\n-        self.bytes_hashed += 16;\n     }\n \n     #[inline]\n@@ -115,37 +102,31 @@ impl<W> Hasher for StableHasher<W> {\n         // platforms. This is important for symbol hashes when cross compiling,\n         // for example.\n         self.state.write_u64((i as u64).to_le());\n-        self.bytes_hashed += 8;\n     }\n \n     #[inline]\n     fn write_i8(&mut self, i: i8) {\n         self.state.write_i8(i);\n-        self.bytes_hashed += 1;\n     }\n \n     #[inline]\n     fn write_i16(&mut self, i: i16) {\n         self.state.write_i16(i.to_le());\n-        self.bytes_hashed += 2;\n     }\n \n     #[inline]\n     fn write_i32(&mut self, i: i32) {\n         self.state.write_i32(i.to_le());\n-        self.bytes_hashed += 4;\n     }\n \n     #[inline]\n     fn write_i64(&mut self, i: i64) {\n         self.state.write_i64(i.to_le());\n-        self.bytes_hashed += 8;\n     }\n \n     #[inline]\n     fn write_i128(&mut self, i: i128) {\n         self.state.write_i128(i.to_le());\n-        self.bytes_hashed += 16;\n     }\n \n     #[inline]\n@@ -154,12 +135,35 @@ impl<W> Hasher for StableHasher<W> {\n         // platforms. This is important for symbol hashes when cross compiling,\n         // for example.\n         self.state.write_i64((i as i64).to_le());\n-        self.bytes_hashed += 8;\n     }\n }\n \n /// Something that implements `HashStable<CTX>` can be hashed in a way that is\n /// stable across multiple compilation sessions.\n+///\n+/// Note that `HashStable` imposes rather more strict requirements than usual\n+/// hash functions:\n+///\n+/// - Stable hashes are sometimes used as identifiers. Therefore they must\n+///   conform to the corresponding `PartialEq` implementations:\n+///\n+///     - `x == y` implies `hash_stable(x) == hash_stable(y)`, and\n+///     - `x != y` implies `hash_stable(x) != hash_stable(y)`.\n+///\n+///   That second condition is usually not required for hash functions\n+///   (e.g. `Hash`). In practice this means that `hash_stable` must feed any\n+///   information into the hasher that a `PartialEq` comparision takes into\n+///   account. See [#49300](https://github.com/rust-lang/rust/issues/49300)\n+///   for an example where violating this invariant has caused trouble in the\n+///   past.\n+///\n+/// - `hash_stable()` must be independent of the current\n+///    compilation session. E.g. they must not hash memory addresses or other\n+///    things that are \"randomly\" assigned per compilation session.\n+///\n+/// - `hash_stable()` must be independent of the host architecture. The\n+///   `StableHasher` takes care of endianness and `isize`/`usize` platform\n+///   differences.\n pub trait HashStable<CTX> {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut CTX,"}]}