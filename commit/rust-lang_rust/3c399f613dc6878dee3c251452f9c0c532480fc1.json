{"sha": "3c399f613dc6878dee3c251452f9c0c532480fc1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjMzk5ZjYxM2RjNjg3OGRlZTNjMjUxNDUyZjljMGM1MzI0ODBmYzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-10T08:41:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-10T08:41:36Z"}, "message": "auto merge of #10862 : alexcrichton/rust/issue-10857, r=huonw\n\nThis bug showed up because the visitor only visited the path of the implemented\r\ntrait via walk_path (with no corresponding visit_path function). I have modified\r\nthe visitor to use visit_path (which is now overridable), and the privacy\r\nvisitor overrides this function and now properly checks for the privacy of all\r\npaths.\r\n\r\nCloses #10857", "tree": {"sha": "b8827bc74c5890d015f9c4ea40fd8676b5375a1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8827bc74c5890d015f9c4ea40fd8676b5375a1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c399f613dc6878dee3c251452f9c0c532480fc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c399f613dc6878dee3c251452f9c0c532480fc1", "html_url": "https://github.com/rust-lang/rust/commit/3c399f613dc6878dee3c251452f9c0c532480fc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c399f613dc6878dee3c251452f9c0c532480fc1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad292ac8fd1fe79b4db389a32dde986b9549d6c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad292ac8fd1fe79b4db389a32dde986b9549d6c3", "html_url": "https://github.com/rust-lang/rust/commit/ad292ac8fd1fe79b4db389a32dde986b9549d6c3"}, {"sha": "9522a08cf06a76302eed114b0281b8743ae36dcc", "url": "https://api.github.com/repos/rust-lang/rust/commits/9522a08cf06a76302eed114b0281b8743ae36dcc", "html_url": "https://github.com/rust-lang/rust/commit/9522a08cf06a76302eed114b0281b8743ae36dcc"}], "stats": {"total": 98, "additions": 63, "deletions": 35}, "files": [{"sha": "f335c789db3520947dc6e3032c27bd216ea40b35", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3c399f613dc6878dee3c251452f9c0c532480fc1/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c399f613dc6878dee3c251452f9c0c532480fc1/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=3c399f613dc6878dee3c251452f9c0c532480fc1", "patch": "@@ -58,6 +58,9 @@ impl<'self> Visitor<()> for CheckLoanCtxt<'self> {\n                 b:ast::P<ast::Block>, s:Span, n:ast::NodeId, _:()) {\n         check_loans_in_fn(self, fk, fd, b, s, n);\n     }\n+\n+    // FIXME(#10894) should continue recursing\n+    fn visit_ty(&mut self, _t: &ast::Ty, _: ()) {}\n }\n \n pub fn check_loans(bccx: &BorrowckCtxt,"}, {"sha": "9e1ef411c2dc1f6e03b7cebbf40d57a3c0a252c3", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3c399f613dc6878dee3c251452f9c0c532480fc1/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c399f613dc6878dee3c251452f9c0c532480fc1/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=3c399f613dc6878dee3c251452f9c0c532480fc1", "patch": "@@ -1364,6 +1364,9 @@ impl<'self> Visitor<()> for Context<'self> {\n             visit::walk_variant(cx, v, g, ());\n         })\n     }\n+\n+    // FIXME(#10894) should continue recursing\n+    fn visit_ty(&mut self, _t: &ast::Ty, _: ()) {}\n }\n \n impl<'self> IdVisitingOperation for Context<'self> {"}, {"sha": "c9911480199e8f43e83f588a6e605362f28b1748", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c399f613dc6878dee3c251452f9c0c532480fc1/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c399f613dc6878dee3c251452f9c0c532480fc1/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=3c399f613dc6878dee3c251452f9c0c532480fc1", "patch": "@@ -202,6 +202,8 @@ impl visit::Visitor<()> for VisitContext {\n     fn visit_local(&mut self, l:@Local, _:()) {\n         compute_modes_for_local(self, l);\n     }\n+    // FIXME(#10894) should continue recursing\n+    fn visit_ty(&mut self, _t: &Ty, _: ()) {}\n }\n \n pub fn compute_moves(tcx: ty::ctxt,"}, {"sha": "8b60bbce4018ef5f6df5e09406a5893e3a5e4ba2", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 25, "deletions": 17, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3c399f613dc6878dee3c251452f9c0c532480fc1/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c399f613dc6878dee3c251452f9c0c532480fc1/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=3c399f613dc6878dee3c251452f9c0c532480fc1", "patch": "@@ -312,6 +312,7 @@ struct PrivacyVisitor<'self> {\n     tcx: ty::ctxt,\n     curitem: ast::NodeId,\n     in_fn: bool,\n+    in_foreign: bool,\n     method_map: &'self method_map,\n     parents: HashMap<ast::NodeId, ast::NodeId>,\n     external_exports: resolve::ExternalExports,\n@@ -625,7 +626,9 @@ impl<'self> Visitor<()> for PrivacyVisitor<'self> {\n                 let t = ty::type_autoderef(self.tcx,\n                                            ty::expr_ty(self.tcx, base));\n                 match ty::get(t).sty {\n-                    ty::ty_struct(id, _) => self.check_field(expr.span, id, ident),\n+                    ty::ty_struct(id, _) => {\n+                        self.check_field(expr.span, id, ident);\n+                    }\n                     _ => {}\n                 }\n             }\n@@ -649,9 +652,6 @@ impl<'self> Visitor<()> for PrivacyVisitor<'self> {\n                     _ => {}\n                 }\n             }\n-            ast::ExprPath(ref path) => {\n-                self.check_path(expr.span, expr.id, path);\n-            }\n             ast::ExprStruct(_, ref fields, _) => {\n                 match ty::get(ty::expr_ty(self.tcx, expr)).sty {\n                     ty::ty_struct(id, _) => {\n@@ -697,25 +697,14 @@ impl<'self> Visitor<()> for PrivacyVisitor<'self> {\n         visit::walk_expr(self, expr, ());\n     }\n \n-    fn visit_ty(&mut self, t: &ast::Ty, _: ()) {\n-        match t.node {\n-            ast::ty_path(ref path, _, id) => self.check_path(t.span, id, path),\n-            _ => {}\n-        }\n-        visit::walk_ty(self, t, ());\n-    }\n-\n     fn visit_view_item(&mut self, a: &ast::view_item, _: ()) {\n         match a.node {\n             ast::view_item_extern_mod(..) => {}\n             ast::view_item_use(ref uses) => {\n                 for vpath in uses.iter() {\n                     match vpath.node {\n-                        ast::view_path_simple(_, ref path, id) |\n-                        ast::view_path_glob(ref path, id) => {\n-                            debug!(\"privacy - glob/simple {}\", id);\n-                            self.check_path(vpath.span, id, path);\n-                        }\n+                        ast::view_path_simple(..) |\n+                        ast::view_path_glob(..) => {}\n                         ast::view_path_list(_, ref list, _) => {\n                             for pid in list.iter() {\n                                 debug!(\"privacy - list {}\", pid.node.id);\n@@ -737,9 +726,16 @@ impl<'self> Visitor<()> for PrivacyVisitor<'self> {\n                 }\n             }\n         }\n+        visit::walk_view_item(self, a, ());\n     }\n \n     fn visit_pat(&mut self, pattern: &ast::Pat, _: ()) {\n+        // Foreign functions do not have their patterns mapped in the def_map,\n+        // and there's nothing really relevant there anyway, so don't bother\n+        // checking privacy. If you can name the type then you can pass it to an\n+        // external C function anyway.\n+        if self.in_foreign { return }\n+\n         match pattern.node {\n             ast::PatStruct(_, ref fields, _) => {\n                 match ty::get(ty::pat_ty(self.tcx, pattern)).sty {\n@@ -773,6 +769,17 @@ impl<'self> Visitor<()> for PrivacyVisitor<'self> {\n \n         visit::walk_pat(self, pattern, ());\n     }\n+\n+    fn visit_foreign_item(&mut self, fi: @ast::foreign_item, _: ()) {\n+        self.in_foreign = true;\n+        visit::walk_foreign_item(self, fi, ());\n+        self.in_foreign = false;\n+    }\n+\n+    fn visit_path(&mut self, path: &ast::Path, id: ast::NodeId, _: ()) {\n+        self.check_path(path.span, id, path);\n+        visit::walk_path(self, path, ());\n+    }\n }\n \n ////////////////////////////////////////////////////////////////////////////////\n@@ -999,6 +1006,7 @@ pub fn check_crate(tcx: ty::ctxt,\n     let mut visitor = PrivacyVisitor {\n         curitem: ast::DUMMY_NODE_ID,\n         in_fn: false,\n+        in_foreign: false,\n         tcx: tcx,\n         parents: visitor.parents,\n         method_map: method_map,"}, {"sha": "f90ae3fdc636d48d9651e9b29afb717eaa2d02e6", "filename": "src/librustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c399f613dc6878dee3c251452f9c0c532480fc1/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c399f613dc6878dee3c251452f9c0c532480fc1/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=3c399f613dc6878dee3c251452f9c0c532480fc1", "patch": "@@ -325,6 +325,8 @@ impl Visitor<()> for WbCtxt {\n     fn visit_block(&mut self, b:ast::P<ast::Block>, _:()) { visit_block(b, self); }\n     fn visit_pat(&mut self, p:&ast::Pat, _:()) { visit_pat(p, self); }\n     fn visit_local(&mut self, l:@ast::Local, _:()) { visit_local(l, self); }\n+    // FIXME(#10894) should continue recursing\n+    fn visit_ty(&mut self, _t: &ast::Ty, _:()) {}\n }\n \n pub fn resolve_type_vars_in_expr(fcx: @mut FnCtxt, e: @ast::Expr) -> bool {"}, {"sha": "a5a8513fa7176841186d0b389a99e93119f30bb1", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 25, "deletions": 18, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/3c399f613dc6878dee3c251452f9c0c532480fc1/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c399f613dc6878dee3c251452f9c0c532480fc1/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=3c399f613dc6878dee3c251452f9c0c532480fc1", "patch": "@@ -82,7 +82,7 @@ pub trait Visitor<E:Clone> {\n     fn visit_decl(&mut self, d:@Decl, e:E) { walk_decl(self, d, e) }\n     fn visit_expr(&mut self, ex:@Expr, e:E) { walk_expr(self, ex, e) }\n     fn visit_expr_post(&mut self, _ex:@Expr, _e:E) { }\n-    fn visit_ty(&mut self, _t:&Ty, _e:E) { }\n+    fn visit_ty(&mut self, t:&Ty, e:E) { walk_ty(self, t, e) }\n     fn visit_generics(&mut self, g:&Generics, e:E) { walk_generics(self, g, e) }\n     fn visit_fn(&mut self, fk:&fn_kind, fd:&fn_decl, b:P<Block>, s:Span, n:NodeId, e:E) {\n         walk_fn(self, fk, fd, b, s, n , e)\n@@ -120,6 +120,9 @@ pub trait Visitor<E:Clone> {\n     fn visit_mac(&mut self, macro:&mac, e:E) {\n         walk_mac(self, macro, e)\n     }\n+    fn visit_path(&mut self, path: &Path, _id: ast::NodeId, e: E) {\n+        walk_path(self, path, e)\n+    }\n }\n \n pub fn walk_crate<E:Clone, V:Visitor<E>>(visitor: &mut V, crate: &Crate, env: E) {\n@@ -143,21 +146,21 @@ pub fn walk_view_item<E:Clone, V:Visitor<E>>(visitor: &mut V, vi: &view_item, en\n         }\n         view_item_use(ref paths) => {\n             for vp in paths.iter() {\n-                let path = match vp.node {\n-                    view_path_simple(ident, ref path, _) => {\n+                match vp.node {\n+                    view_path_simple(ident, ref path, id) => {\n                         visitor.visit_ident(vp.span, ident, env.clone());\n-                        path\n+                        visitor.visit_path(path, id, env.clone());\n+                    }\n+                    view_path_glob(ref path, id) => {\n+                        visitor.visit_path(path, id, env.clone());\n                     }\n-                    view_path_glob(ref path, _) => path,\n                     view_path_list(ref path, ref list, _) => {\n                         for id in list.iter() {\n                             visitor.visit_ident(id.span, id.node.name, env.clone())\n                         }\n-                        path\n+                        walk_path(visitor, path, env.clone());\n                     }\n-                };\n-\n-                walk_path(visitor, path, env.clone());\n+                }\n             }\n         }\n     }\n@@ -187,7 +190,7 @@ fn walk_explicit_self<E:Clone, V:Visitor<E>>(visitor: &mut V,\n fn walk_trait_ref<E:Clone, V:Visitor<E>>(visitor: &mut V,\n                             trait_ref: &ast::trait_ref,\n                             env: E) {\n-    walk_path(visitor, &trait_ref.path, env)\n+    visitor.visit_path(&trait_ref.path, trait_ref.ref_id, env)\n }\n \n pub fn walk_item<E:Clone, V:Visitor<E>>(visitor: &mut V, item: &item, env: E) {\n@@ -248,7 +251,9 @@ pub fn walk_item<E:Clone, V:Visitor<E>>(visitor: &mut V, item: &item, env: E) {\n         item_trait(ref generics, ref trait_paths, ref methods) => {\n             visitor.visit_generics(generics, env.clone());\n             for trait_path in trait_paths.iter() {\n-                walk_path(visitor, &trait_path.path, env.clone())\n+                visitor.visit_path(&trait_path.path,\n+                                   trait_path.ref_id,\n+                                   env.clone())\n             }\n             for method in methods.iter() {\n                 visitor.visit_trait_method(method, env.clone())\n@@ -331,8 +336,8 @@ pub fn walk_ty<E:Clone, V:Visitor<E>>(visitor: &mut V, typ: &Ty, env: E) {\n             walk_lifetime_decls(visitor, &function_declaration.lifetimes,\n                                 env.clone());\n         }\n-        ty_path(ref path, ref bounds, _) => {\n-            walk_path(visitor, path, env.clone());\n+        ty_path(ref path, ref bounds, id) => {\n+            visitor.visit_path(path, id, env.clone());\n             for bounds in bounds.iter() {\n                 walk_ty_param_bounds(visitor, bounds, env.clone())\n             }\n@@ -372,15 +377,15 @@ pub fn walk_path<E:Clone, V:Visitor<E>>(visitor: &mut V, path: &Path, env: E) {\n pub fn walk_pat<E:Clone, V:Visitor<E>>(visitor: &mut V, pattern: &Pat, env: E) {\n     match pattern.node {\n         PatEnum(ref path, ref children) => {\n-            walk_path(visitor, path, env.clone());\n+            visitor.visit_path(path, pattern.id, env.clone());\n             for children in children.iter() {\n                 for child in children.iter() {\n                     visitor.visit_pat(*child, env.clone())\n                 }\n             }\n         }\n         PatStruct(ref path, ref fields, _) => {\n-            walk_path(visitor, path, env.clone());\n+            visitor.visit_path(path, pattern.id, env.clone());\n             for field in fields.iter() {\n                 visitor.visit_pat(field.pat, env.clone())\n             }\n@@ -396,7 +401,7 @@ pub fn walk_pat<E:Clone, V:Visitor<E>>(visitor: &mut V, pattern: &Pat, env: E) {\n             visitor.visit_pat(subpattern, env)\n         }\n         PatIdent(_, ref path, ref optional_subpattern) => {\n-            walk_path(visitor, path, env.clone());\n+            visitor.visit_path(path, pattern.id, env.clone());\n             match *optional_subpattern {\n                 None => {}\n                 Some(subpattern) => visitor.visit_pat(subpattern, env),\n@@ -617,7 +622,7 @@ pub fn walk_expr<E:Clone, V:Visitor<E>>(visitor: &mut V, expression: @Expr, env:\n             visitor.visit_expr(count, env.clone())\n         }\n         ExprStruct(ref path, ref fields, optional_base) => {\n-            walk_path(visitor, path, env.clone());\n+            visitor.visit_path(path, expression.id, env.clone());\n             for field in fields.iter() {\n                 visitor.visit_expr(field.expr, env.clone())\n             }\n@@ -711,7 +716,9 @@ pub fn walk_expr<E:Clone, V:Visitor<E>>(visitor: &mut V, expression: @Expr, env:\n             visitor.visit_expr(main_expression, env.clone());\n             visitor.visit_expr(index_expression, env.clone())\n         }\n-        ExprPath(ref path) => walk_path(visitor, path, env.clone()),\n+        ExprPath(ref path) => {\n+            visitor.visit_path(path, expression.id, env.clone())\n+        }\n         ExprSelf | ExprBreak(_) | ExprAgain(_) => {}\n         ExprRet(optional_expression) => {\n             walk_expr_opt(visitor, optional_expression, env.clone())"}, {"sha": "fdc681e1da0c34afdf5ad42b8e85599cb9f3396b", "filename": "src/test/compile-fail/privacy1.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3c399f613dc6878dee3c251452f9c0c532480fc1/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c399f613dc6878dee3c251452f9c0c532480fc1/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs?ref=3c399f613dc6878dee3c251452f9c0c532480fc1", "patch": "@@ -162,6 +162,9 @@ mod foo {\n         bar::foo();\n         bar::bar();\n     }\n+\n+    impl ::bar::B for f32 { fn foo() -> f32 { 1.0 } }\n+    //~^ ERROR: trait `B` is private\n }\n \n pub mod mytest {"}]}