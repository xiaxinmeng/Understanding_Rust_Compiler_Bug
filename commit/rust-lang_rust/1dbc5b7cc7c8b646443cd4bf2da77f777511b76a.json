{"sha": "1dbc5b7cc7c8b646443cd4bf2da77f777511b76a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkYmM1YjdjYzdjOGI2NDY0NDNjZDRiZjJkYTc3Zjc3NzUxMWI3NmE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-23T14:50:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-23T14:50:29Z"}, "message": "Merge #8167\n\n8167: Use styleguide conforming import for ast nodes r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "c5da02a67a716ee3b80a5dcb7badd2ad39bbf42a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5da02a67a716ee3b80a5dcb7badd2ad39bbf42a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dbc5b7cc7c8b646443cd4bf2da77f777511b76a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgWgA1CRBK7hj4Ov3rIwAAdHIIAJN2m5+tenAeNqas6ocp9Z1E\n+zK/qURBo/yTz/quAGd47fR4UX9NHcgI2h7TufRCa4nEujaiwQp/rC9AVXKvXkHG\nVrHzEm4QqMUCsLjR/Y/4sbhHMiuPmbPqMDCWLllKFm8s7KpBxUWKyGt2qdMCDm0i\n3f2++HOKVkZTuAjyxM7ct8QUmIV2+pqDNzsQA8jI2TwIdXs2qevQUsX7YYLpTY0x\nM0vE9TPyb3fkpwkC2zF5mBlIalDh6NbqonNK1bhwCrt2RfZchacQhjDICXjRK17u\nVCI98aCE4yVIR8aESO/FGdEzL3yjteVHcNlLyCdj9bFeEF1uUuUTCeq5Blu1x4o=\n=gMFW\n-----END PGP SIGNATURE-----\n", "payload": "tree c5da02a67a716ee3b80a5dcb7badd2ad39bbf42a\nparent 0469280c8affdc6bdb96ad5bf02073725c5cfd06\nparent 860e069d4dd141ad8d2f2f77a09b9a3ac762ce34\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1616511029 +0000\ncommitter GitHub <noreply@github.com> 1616511029 +0000\n\nMerge #8167\n\n8167: Use styleguide conforming import for ast nodes r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dbc5b7cc7c8b646443cd4bf2da77f777511b76a", "html_url": "https://github.com/rust-lang/rust/commit/1dbc5b7cc7c8b646443cd4bf2da77f777511b76a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dbc5b7cc7c8b646443cd4bf2da77f777511b76a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0469280c8affdc6bdb96ad5bf02073725c5cfd06", "url": "https://api.github.com/repos/rust-lang/rust/commits/0469280c8affdc6bdb96ad5bf02073725c5cfd06", "html_url": "https://github.com/rust-lang/rust/commit/0469280c8affdc6bdb96ad5bf02073725c5cfd06"}, {"sha": "860e069d4dd141ad8d2f2f77a09b9a3ac762ce34", "url": "https://api.github.com/repos/rust-lang/rust/commits/860e069d4dd141ad8d2f2f77a09b9a3ac762ce34", "html_url": "https://github.com/rust-lang/rust/commit/860e069d4dd141ad8d2f2f77a09b9a3ac762ce34"}], "stats": {"total": 70, "additions": 36, "deletions": 34}, "files": [{"sha": "7030d0f9781b8f89de0b534b1b47d1fe39394f8e", "filename": "crates/ide_assists/src/handlers/add_lifetime_to_type.rs", "status": "modified", "additions": 36, "deletions": 34, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/1dbc5b7cc7c8b646443cd4bf2da77f777511b76a/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_lifetime_to_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dbc5b7cc7c8b646443cd4bf2da77f777511b76a/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_lifetime_to_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_lifetime_to_type.rs?ref=1dbc5b7cc7c8b646443cd4bf2da77f777511b76a", "patch": "@@ -1,5 +1,4 @@\n-use ast::FieldList;\n-use syntax::ast::{self, AstNode, GenericParamsOwner, NameOwner, RefType, Type};\n+use syntax::ast::{self, AstNode, GenericParamsOwner, NameOwner};\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n@@ -65,8 +64,8 @@ pub(crate) fn add_lifetime_to_type(acc: &mut Assists, ctx: &AssistContext) -> Op\n     )\n }\n \n-fn fetch_borrowed_types(node: &ast::Adt) -> Option<Vec<RefType>> {\n-    let ref_types: Vec<RefType> = match node {\n+fn fetch_borrowed_types(node: &ast::Adt) -> Option<Vec<ast::RefType>> {\n+    let ref_types: Vec<ast::RefType> = match node {\n         ast::Adt::Enum(enum_) => {\n             let variant_list = enum_.variant_list()?;\n             variant_list\n@@ -88,7 +87,7 @@ fn fetch_borrowed_types(node: &ast::Adt) -> Option<Vec<RefType>> {\n             record_field_list\n                 .fields()\n                 .filter_map(|r_field| {\n-                    if let Type::RefType(ref_type) = r_field.ty()? {\n+                    if let ast::Type::RefType(ref_type) = r_field.ty()? {\n                         if ref_type.lifetime().is_none() {\n                             return Some(ref_type);\n                         }\n@@ -107,12 +106,12 @@ fn fetch_borrowed_types(node: &ast::Adt) -> Option<Vec<RefType>> {\n     }\n }\n \n-fn find_ref_types_from_field_list(field_list: &FieldList) -> Option<Vec<RefType>> {\n-    let ref_types: Vec<RefType> = match field_list {\n+fn find_ref_types_from_field_list(field_list: &ast::FieldList) -> Option<Vec<ast::RefType>> {\n+    let ref_types: Vec<ast::RefType> = match field_list {\n         ast::FieldList::RecordFieldList(record_list) => record_list\n             .fields()\n             .filter_map(|f| {\n-                if let Type::RefType(ref_type) = f.ty()? {\n+                if let ast::Type::RefType(ref_type) = f.ty()? {\n                     if ref_type.lifetime().is_none() {\n                         return Some(ref_type);\n                     }\n@@ -124,7 +123,7 @@ fn find_ref_types_from_field_list(field_list: &FieldList) -> Option<Vec<RefType>\n         ast::FieldList::TupleFieldList(tuple_field_list) => tuple_field_list\n             .fields()\n             .filter_map(|f| {\n-                if let Type::RefType(ref_type) = f.ty()? {\n+                if let ast::Type::RefType(ref_type) = f.ty()? {\n                     if ref_type.lifetime().is_none() {\n                         return Some(ref_type);\n                     }\n@@ -152,76 +151,79 @@ mod tests {\n     fn add_lifetime_to_struct() {\n         check_assist(\n             add_lifetime_to_type,\n-            \"struct Foo { a: &$0i32 }\",\n-            \"struct Foo<'a> { a: &'a i32 }\",\n+            r#\"struct Foo { a: &$0i32 }\"#,\n+            r#\"struct Foo<'a> { a: &'a i32 }\"#,\n         );\n \n         check_assist(\n             add_lifetime_to_type,\n-            \"struct Foo { a: &$0i32, b: &usize }\",\n-            \"struct Foo<'a> { a: &'a i32, b: &'a usize }\",\n+            r#\"struct Foo { a: &$0i32, b: &usize }\"#,\n+            r#\"struct Foo<'a> { a: &'a i32, b: &'a usize }\"#,\n         );\n \n         check_assist(\n             add_lifetime_to_type,\n-            \"struct Foo { a: &$0i32, b: usize }\",\n-            \"struct Foo<'a> { a: &'a i32, b: usize }\",\n+            r#\"struct Foo { a: &$0i32, b: usize }\"#,\n+            r#\"struct Foo<'a> { a: &'a i32, b: usize }\"#,\n         );\n \n         check_assist(\n             add_lifetime_to_type,\n-            \"struct Foo<T> { a: &$0T, b: usize }\",\n-            \"struct Foo<'a, T> { a: &'a T, b: usize }\",\n+            r#\"struct Foo<T> { a: &$0T, b: usize }\"#,\n+            r#\"struct Foo<'a, T> { a: &'a T, b: usize }\"#,\n         );\n \n-        check_assist_not_applicable(add_lifetime_to_type, \"struct Foo<'a> { a: &$0'a i32 }\");\n-        check_assist_not_applicable(add_lifetime_to_type, \"struct Foo { a: &'a$0 i32 }\");\n+        check_assist_not_applicable(add_lifetime_to_type, r#\"struct Foo<'a> { a: &$0'a i32 }\"#);\n+        check_assist_not_applicable(add_lifetime_to_type, r#\"struct Foo { a: &'a$0 i32 }\"#);\n     }\n \n     #[test]\n     fn add_lifetime_to_enum() {\n         check_assist(\n             add_lifetime_to_type,\n-            \"enum Foo { Bar { a: i32 }, Other, Tuple(u32, &$0u32)}\",\n-            \"enum Foo<'a> { Bar { a: i32 }, Other, Tuple(u32, &'a u32)}\",\n+            r#\"enum Foo { Bar { a: i32 }, Other, Tuple(u32, &$0u32)}\"#,\n+            r#\"enum Foo<'a> { Bar { a: i32 }, Other, Tuple(u32, &'a u32)}\"#,\n         );\n \n         check_assist(\n             add_lifetime_to_type,\n-            \"enum Foo { Bar { a: &$0i32 }}\",\n-            \"enum Foo<'a> { Bar { a: &'a i32 }}\",\n+            r#\"enum Foo { Bar { a: &$0i32 }}\"#,\n+            r#\"enum Foo<'a> { Bar { a: &'a i32 }}\"#,\n         );\n \n         check_assist(\n             add_lifetime_to_type,\n-            \"enum Foo<T> { Bar { a: &$0i32, b: &T }}\",\n-            \"enum Foo<'a, T> { Bar { a: &'a i32, b: &'a T }}\",\n+            r#\"enum Foo<T> { Bar { a: &$0i32, b: &T }}\"#,\n+            r#\"enum Foo<'a, T> { Bar { a: &'a i32, b: &'a T }}\"#,\n         );\n \n-        check_assist_not_applicable(add_lifetime_to_type, \"enum Foo<'a> { Bar { a: &$0'a i32 }}\");\n-        check_assist_not_applicable(add_lifetime_to_type, \"enum Foo { Bar, $0Misc }\");\n+        check_assist_not_applicable(\n+            add_lifetime_to_type,\n+            r#\"enum Foo<'a> { Bar { a: &$0'a i32 }}\"#,\n+        );\n+        check_assist_not_applicable(add_lifetime_to_type, r#\"enum Foo { Bar, $0Misc }\"#);\n     }\n \n     #[test]\n     fn add_lifetime_to_union() {\n         check_assist(\n             add_lifetime_to_type,\n-            \"union Foo { a: &$0i32 }\",\n-            \"union Foo<'a> { a: &'a i32 }\",\n+            r#\"union Foo { a: &$0i32 }\"#,\n+            r#\"union Foo<'a> { a: &'a i32 }\"#,\n         );\n \n         check_assist(\n             add_lifetime_to_type,\n-            \"union Foo { a: &$0i32, b: &usize }\",\n-            \"union Foo<'a> { a: &'a i32, b: &'a usize }\",\n+            r#\"union Foo { a: &$0i32, b: &usize }\"#,\n+            r#\"union Foo<'a> { a: &'a i32, b: &'a usize }\"#,\n         );\n \n         check_assist(\n             add_lifetime_to_type,\n-            \"union Foo<T> { a: &$0T, b: usize }\",\n-            \"union Foo<'a, T> { a: &'a T, b: usize }\",\n+            r#\"union Foo<T> { a: &$0T, b: usize }\"#,\n+            r#\"union Foo<'a, T> { a: &'a T, b: usize }\"#,\n         );\n \n-        check_assist_not_applicable(add_lifetime_to_type, \"struct Foo<'a> { a: &'a $0i32 }\");\n+        check_assist_not_applicable(add_lifetime_to_type, r#\"struct Foo<'a> { a: &'a $0i32 }\"#);\n     }\n }"}]}