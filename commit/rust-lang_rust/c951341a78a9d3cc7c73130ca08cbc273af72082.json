{"sha": "c951341a78a9d3cc7c73130ca08cbc273af72082", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5NTEzNDFhNzhhOWQzY2M3YzczMTMwY2EwOGNiYzI3M2FmNzIwODI=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2017-01-10T21:13:53Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-01-19T09:13:32Z"}, "message": "add exclusive range patterns under a feature gate", "tree": {"sha": "8f1fcf8edef8caa33ef15f5121e66d10981e00e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f1fcf8edef8caa33ef15f5121e66d10981e00e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c951341a78a9d3cc7c73130ca08cbc273af72082", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYgIM8AAoJEFbW7qD8Z6xGS9MQAJIR/aiKZN5tdWqg/83t0LLS\nqHXZucLRwTWQU6P04e8BaCQalq1HlA69C62cMiGP6GX0pV34GlTxz7D5tGyNK0y0\nxrUNn3nxcczDl39NPlXzMsF/t67Z7CHZidbBMSt6ftEooHCWmvsB7qnnoWcRPVt9\n+QhRtm/R0gA2v6X6vn7BvuVE59TGjwXQceHopZseS6widiVFS+lYcGR5pw/05MSy\n1oVOT7TZPvNUmVOvECnneY1UI6gwkiPdrvMazCqg0I/tb02MYkcKG2hhhc99ovNS\naT6jiLxahmnHXjFc/BsPYWnBRhfN3gWOvGe2ku66uF+ZPBMrpFwonzDHJzaI24wQ\n0a6wrQ9+q7YCUikGho7BHWSP1pVQXC2mgLLXNJWZDp4CAL0xMfzv2YXlVq7NuHLR\ni8O6ZJ9iaOEHKBMVyiPzhzogqAX7FVASarLhtP2uFAQhkJxXHYMpbJHMurOG/U6V\nr4P8opvuRVNKHmtLnLuwMrlANlW6MQX07kv5NU+8DpCDH/tTiTFsgZlFIN+9GCqy\nPBti4hBbLHARkOwP7jTJyE/e1SNYp4xDUUEz66W451BxUS6HBn9qakjGhgkJnIiM\nL0BC/dExo7clzpA5M888qE6iZd6Xpcqrp9ZuKWHM7gQkkBYPCM1USaP7zAJBQjOR\nJLge3Rotuw1AYEBbhU2Z\n=5oCM\n-----END PGP SIGNATURE-----", "payload": "tree 8f1fcf8edef8caa33ef15f5121e66d10981e00e4\nparent 74c42ac173bee900979870ed986c760596d1fbdb\nauthor Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1484082833 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1484817212 +0100\n\nadd exclusive range patterns under a feature gate"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c951341a78a9d3cc7c73130ca08cbc273af72082", "html_url": "https://github.com/rust-lang/rust/commit/c951341a78a9d3cc7c73130ca08cbc273af72082", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c951341a78a9d3cc7c73130ca08cbc273af72082/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74c42ac173bee900979870ed986c760596d1fbdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/74c42ac173bee900979870ed986c760596d1fbdb", "html_url": "https://github.com/rust-lang/rust/commit/74c42ac173bee900979870ed986c760596d1fbdb"}], "stats": {"total": 282, "additions": 215, "deletions": 67}, "files": [{"sha": "fb8d6618e89a5950b367fafc11a32294c40120c7", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c951341a78a9d3cc7c73130ca08cbc273af72082/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c951341a78a9d3cc7c73130ca08cbc273af72082/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=c951341a78a9d3cc7c73130ca08cbc273af72082", "patch": "@@ -661,7 +661,7 @@ pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat) {\n             walk_list!(visitor, visit_pat, optional_subpattern);\n         }\n         PatKind::Lit(ref expression) => visitor.visit_expr(expression),\n-        PatKind::Range(ref lower_bound, ref upper_bound) => {\n+        PatKind::Range(ref lower_bound, ref upper_bound, _) => {\n             visitor.visit_expr(lower_bound);\n             visitor.visit_expr(upper_bound)\n         }"}, {"sha": "fb403cc22e614b3fa485c18bff9c07da14ce91c9", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c951341a78a9d3cc7c73130ca08cbc273af72082/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c951341a78a9d3cc7c73130ca08cbc273af72082/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=c951341a78a9d3cc7c73130ca08cbc273af72082", "patch": "@@ -1249,8 +1249,10 @@ impl<'a> LoweringContext<'a> {\n                 PatKind::Ref(ref inner, mutbl) => {\n                     hir::PatKind::Ref(self.lower_pat(inner), self.lower_mutability(mutbl))\n                 }\n-                PatKind::Range(ref e1, ref e2) => {\n-                    hir::PatKind::Range(P(self.lower_expr(e1)), P(self.lower_expr(e2)))\n+                PatKind::Range(ref e1, ref e2, ref end) => {\n+                    hir::PatKind::Range(P(self.lower_expr(e1)),\n+                                        P(self.lower_expr(e2)),\n+                                        self.lower_range_end(end))\n                 }\n                 PatKind::Slice(ref before, ref slice, ref after) => {\n                     hir::PatKind::Slice(before.iter().map(|x| self.lower_pat(x)).collect(),\n@@ -1263,6 +1265,13 @@ impl<'a> LoweringContext<'a> {\n         })\n     }\n \n+    fn lower_range_end(&mut self, e: &RangeEnd) -> hir::RangeEnd {\n+        match *e {\n+            RangeEnd::Included => hir::RangeEnd::Included,\n+            RangeEnd::Excluded => hir::RangeEnd::Excluded,\n+        }\n+    }\n+\n     fn lower_expr(&mut self, e: &Expr) -> hir::Expr {\n         hir::Expr {\n             id: e.id,"}, {"sha": "3d9fa4e5a06211ebd09e49a364cabf6f769993c5", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c951341a78a9d3cc7c73130ca08cbc273af72082/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c951341a78a9d3cc7c73130ca08cbc273af72082/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=c951341a78a9d3cc7c73130ca08cbc273af72082", "patch": "@@ -572,6 +572,12 @@ pub enum BindingMode {\n     BindByValue(Mutability),\n }\n \n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+pub enum RangeEnd {\n+    Included,\n+    Excluded,\n+}\n+\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum PatKind {\n     /// Represents a wildcard pattern (`_`)\n@@ -603,8 +609,8 @@ pub enum PatKind {\n     Ref(P<Pat>, Mutability),\n     /// A literal\n     Lit(P<Expr>),\n-    /// A range pattern, e.g. `1...2`\n-    Range(P<Expr>, P<Expr>),\n+    /// A range pattern, e.g. `1...2` or `1..2`\n+    Range(P<Expr>, P<Expr>, RangeEnd),\n     /// `[a, b, ..i, y, z]` is represented as:\n     ///     `PatKind::Slice(box [a, b], Some(i), box [y, z])`\n     Slice(HirVec<P<Pat>>, Option<P<Pat>>, HirVec<P<Pat>>),"}, {"sha": "8ce5fc87f691e2fcd9364b5f2a9f8eb9c71083bf", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c951341a78a9d3cc7c73130ca08cbc273af72082/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c951341a78a9d3cc7c73130ca08cbc273af72082/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=c951341a78a9d3cc7c73130ca08cbc273af72082", "patch": "@@ -24,7 +24,7 @@ use syntax_pos::{self, BytePos};\n use errors;\n \n use hir;\n-use hir::{PatKind, RegionTyParamBound, TraitTyParamBound, TraitBoundModifier};\n+use hir::{PatKind, RegionTyParamBound, TraitTyParamBound, TraitBoundModifier, RangeEnd};\n \n use std::io::{self, Write, Read};\n \n@@ -1735,10 +1735,13 @@ impl<'a> State<'a> {\n                 self.print_pat(&inner)?;\n             }\n             PatKind::Lit(ref e) => self.print_expr(&e)?,\n-            PatKind::Range(ref begin, ref end) => {\n+            PatKind::Range(ref begin, ref end, ref end_kind) => {\n                 self.print_expr(&begin)?;\n                 space(&mut self.s)?;\n-                word(&mut self.s, \"...\")?;\n+                match *end_kind {\n+                    RangeEnd::Included => word(&mut self.s, \"...\")?,\n+                    RangeEnd::Excluded => word(&mut self.s, \"..\")?,\n+                }\n                 self.print_expr(&end)?;\n             }\n             PatKind::Slice(ref before, ref slice, ref after) => {"}, {"sha": "bb5dacf71e175cd8ac508e36e0f925977a4a9844", "filename": "src/librustc_const_eval/_match.rs", "status": "modified", "additions": 34, "deletions": 17, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/c951341a78a9d3cc7c73130ca08cbc273af72082/src%2Flibrustc_const_eval%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c951341a78a9d3cc7c73130ca08cbc273af72082/src%2Flibrustc_const_eval%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2F_match.rs?ref=c951341a78a9d3cc7c73130ca08cbc273af72082", "patch": "@@ -24,6 +24,7 @@ use pattern::{FieldPattern, Pattern, PatternKind};\n use pattern::{PatternFoldable, PatternFolder};\n \n use rustc::hir::def_id::DefId;\n+use rustc::hir::RangeEnd;\n use rustc::ty::{self, AdtKind, Ty, TyCtxt, TypeFoldable};\n \n use rustc::mir::Field;\n@@ -206,8 +207,8 @@ pub enum Constructor {\n     Variant(DefId),\n     /// Literal values.\n     ConstantValue(ConstVal),\n-    /// Ranges of literal values (2..5).\n-    ConstantRange(ConstVal, ConstVal),\n+    /// Ranges of literal values (`2...5` and `2..5`).\n+    ConstantRange(ConstVal, ConstVal, RangeEnd),\n     /// Array patterns of length n.\n     Slice(usize),\n }\n@@ -686,8 +687,8 @@ fn pat_constructors(_cx: &mut MatchCheckCtxt,\n             Some(vec![Variant(adt_def.variants[variant_index].did)]),\n         PatternKind::Constant { ref value } =>\n             Some(vec![ConstantValue(value.clone())]),\n-        PatternKind::Range { ref lo, ref hi } =>\n-            Some(vec![ConstantRange(lo.clone(), hi.clone())]),\n+        PatternKind::Range { ref lo, ref hi, ref end } =>\n+            Some(vec![ConstantRange(lo.clone(), hi.clone(), end.clone())]),\n         PatternKind::Array { .. } => match pcx.ty.sty {\n             ty::TyArray(_, length) => Some(vec![Slice(length)]),\n             _ => span_bug!(pat.span, \"bad ty {:?} for array pattern\", pcx.ty)\n@@ -791,17 +792,33 @@ fn slice_pat_covered_by_constructor(_tcx: TyCtxt, _span: Span,\n \n fn range_covered_by_constructor(tcx: TyCtxt, span: Span,\n                                 ctor: &Constructor,\n-                                from: &ConstVal, to: &ConstVal)\n+                                from: &ConstVal, to: &ConstVal,\n+                                end: RangeEnd)\n                                 -> Result<bool, ErrorReported> {\n-    let (c_from, c_to) = match *ctor {\n-        ConstantValue(ref value)        => (value, value),\n-        ConstantRange(ref from, ref to) => (from, to),\n-        Single                          => return Ok(true),\n-        _                               => bug!()\n-    };\n-    let cmp_from = compare_const_vals(tcx, span, c_from, from)?;\n-    let cmp_to = compare_const_vals(tcx, span, c_to, to)?;\n-    Ok(cmp_from != Ordering::Less && cmp_to != Ordering::Greater)\n+    let cmp_from = |c_from| Ok(compare_const_vals(tcx, span, c_from, from)? != Ordering::Less);\n+    let cmp_to = |c_to| compare_const_vals(tcx, span, c_to, to);\n+    match *ctor {\n+        ConstantValue(ref value) => {\n+            let to = cmp_to(value)?;\n+            let end = (to != Ordering::Greater) ||\n+                      (end == RangeEnd::Excluded && to == Ordering::Equal);\n+            Ok(cmp_from(value)? && end)\n+        },\n+        ConstantRange(ref from, ref to, RangeEnd::Included) => {\n+            let to = cmp_to(to)?;\n+            let end = (to != Ordering::Greater) ||\n+                      (end == RangeEnd::Excluded && to == Ordering::Equal);\n+            Ok(cmp_from(from)? && end)\n+        },\n+        ConstantRange(ref from, ref to, RangeEnd::Excluded) => {\n+            let to = cmp_to(to)?;\n+            let end = (to == Ordering::Less) ||\n+                      (end == RangeEnd::Excluded && to == Ordering::Equal);\n+            Ok(cmp_from(from)? && end)\n+        }\n+        Single => Ok(true),\n+        _ => bug!(),\n+    }\n }\n \n fn patterns_for_variant<'p, 'a: 'p, 'tcx: 'a>(\n@@ -872,7 +889,7 @@ fn specialize<'p, 'a: 'p, 'tcx: 'a>(\n                 },\n                 _ => {\n                     match range_covered_by_constructor(\n-                        cx.tcx, pat.span, constructor, value, value\n+                        cx.tcx, pat.span, constructor, value, value, RangeEnd::Included\n                             ) {\n                         Ok(true) => Some(vec![]),\n                         Ok(false) => None,\n@@ -882,9 +899,9 @@ fn specialize<'p, 'a: 'p, 'tcx: 'a>(\n             }\n         }\n \n-        PatternKind::Range { ref lo, ref hi } => {\n+        PatternKind::Range { ref lo, ref hi, ref end } => {\n             match range_covered_by_constructor(\n-                cx.tcx, pat.span, constructor, lo, hi\n+                cx.tcx, pat.span, constructor, lo, hi, end.clone()\n             ) {\n                 Ok(true) => Some(vec![]),\n                 Ok(false) => None,"}, {"sha": "3235e06b8065f5c79eda9239f911426283fb62b8", "filename": "src/librustc_const_eval/pattern.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c951341a78a9d3cc7c73130ca08cbc273af72082/src%2Flibrustc_const_eval%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c951341a78a9d3cc7c73130ca08cbc273af72082/src%2Flibrustc_const_eval%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fpattern.rs?ref=c951341a78a9d3cc7c73130ca08cbc273af72082", "patch": "@@ -15,7 +15,7 @@ use rustc::middle::const_val::ConstVal;\n use rustc::mir::{Field, BorrowKind, Mutability};\n use rustc::ty::{self, TyCtxt, AdtDef, Ty, TypeVariants, Region};\n use rustc::ty::subst::{Substs, Kind};\n-use rustc::hir::{self, PatKind};\n+use rustc::hir::{self, PatKind, RangeEnd};\n use rustc::hir::def::{Def, CtorKind};\n use rustc::hir::pat_util::EnumerateAndAdjustIterator;\n \n@@ -90,6 +90,7 @@ pub enum PatternKind<'tcx> {\n     Range {\n         lo: ConstVal,\n         hi: ConstVal,\n+        end: RangeEnd,\n     },\n \n     /// matches against a slice, checking the length and extracting elements\n@@ -228,9 +229,12 @@ impl<'tcx> fmt::Display for Pattern<'tcx> {\n             PatternKind::Constant { ref value } => {\n                 print_const_val(value, f)\n             }\n-            PatternKind::Range { ref lo, ref hi } => {\n+            PatternKind::Range { ref lo, ref hi, ref end } => {\n                 print_const_val(lo, f)?;\n-                write!(f, \"...\")?;\n+                match *end {\n+                    RangeEnd::Included => write!(f, \"...\")?,\n+                    RangeEnd::Excluded => write!(f, \"..\")?,\n+                }\n                 print_const_val(hi, f)\n             }\n             PatternKind::Slice { ref prefix, ref slice, ref suffix } |\n@@ -291,11 +295,11 @@ impl<'a, 'gcx, 'tcx> PatternContext<'a, 'gcx, 'tcx> {\n \n             PatKind::Lit(ref value) => self.lower_lit(value),\n \n-            PatKind::Range(ref lo, ref hi) => {\n+            PatKind::Range(ref lo, ref hi, ref end) => {\n                 match (self.lower_lit(lo), self.lower_lit(hi)) {\n                     (PatternKind::Constant { value: lo },\n                      PatternKind::Constant { value: hi }) => {\n-                        PatternKind::Range { lo: lo, hi: hi }\n+                        PatternKind::Range { lo: lo, hi: hi, end: end.clone() }\n                     }\n                     _ => PatternKind::Wild\n                 }\n@@ -871,10 +875,12 @@ impl<'tcx> PatternFoldable<'tcx> for PatternKind<'tcx> {\n             },\n             PatternKind::Range {\n                 ref lo,\n-                ref hi\n+                ref hi,\n+                ref end,\n             } => PatternKind::Range {\n                 lo: lo.fold_with(folder),\n-                hi: hi.fold_with(folder)\n+                hi: hi.fold_with(folder),\n+                end: end.clone(),\n             },\n             PatternKind::Slice {\n                 ref prefix,"}, {"sha": "5c3d93ffda9c1d5a52f36247adf2ef984d16ea2c", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c951341a78a9d3cc7c73130ca08cbc273af72082/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c951341a78a9d3cc7c73130ca08cbc273af72082/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=c951341a78a9d3cc7c73130ca08cbc273af72082", "patch": "@@ -19,6 +19,7 @@ use rustc_data_structures::bitvec::BitVector;\n use rustc::middle::const_val::ConstVal;\n use rustc::ty::{AdtDef, Ty};\n use rustc::mir::*;\n+use rustc::hir;\n use hair::*;\n use syntax::ast::{Name, NodeId};\n use syntax_pos::Span;\n@@ -318,11 +319,12 @@ enum TestKind<'tcx> {\n         ty: Ty<'tcx>,\n     },\n \n-    // test whether the value falls within an inclusive range\n+    // test whether the value falls within an inclusive or exclusive range\n     Range {\n         lo: Literal<'tcx>,\n         hi: Literal<'tcx>,\n         ty: Ty<'tcx>,\n+        end: hir::RangeEnd,\n     },\n \n     // test length of the slice is equal to len"}, {"sha": "a35b2925ae2711d7eb6d1ed97dce0a5005b1a943", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c951341a78a9d3cc7c73130ca08cbc273af72082/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c951341a78a9d3cc7c73130ca08cbc273af72082/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=c951341a78a9d3cc7c73130ca08cbc273af72082", "patch": "@@ -23,6 +23,7 @@ use rustc_data_structures::bitvec::BitVector;\n use rustc::middle::const_val::ConstVal;\n use rustc::ty::{self, Ty};\n use rustc::mir::*;\n+use rustc::hir::RangeEnd;\n use syntax_pos::Span;\n use std::cmp::Ordering;\n \n@@ -69,13 +70,14 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n-            PatternKind::Range { ref lo, ref hi } => {\n+            PatternKind::Range { ref lo, ref hi, ref end } => {\n                 Test {\n                     span: match_pair.pattern.span,\n                     kind: TestKind::Range {\n                         lo: Literal::Value { value: lo.clone() },\n                         hi: Literal::Value { value: hi.clone() },\n                         ty: match_pair.pattern.ty.clone(),\n+                        end: end.clone(),\n                     },\n                 }\n             }\n@@ -324,15 +326,18 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n-            TestKind::Range { ref lo, ref hi, ty } => {\n+            TestKind::Range { ref lo, ref hi, ty, ref end } => {\n                 // Test `val` by computing `lo <= val && val <= hi`, using primitive comparisons.\n                 let lo = self.literal_operand(test.span, ty.clone(), lo.clone());\n                 let hi = self.literal_operand(test.span, ty.clone(), hi.clone());\n                 let val = Operand::Consume(lvalue.clone());\n \n                 let fail = self.cfg.start_new_block();\n                 let block = self.compare(block, fail, test.span, BinOp::Le, lo, val.clone());\n-                let block = self.compare(block, fail, test.span, BinOp::Le, val, hi);\n+                let block = match *end {\n+                    RangeEnd::Included => self.compare(block, fail, test.span, BinOp::Le, val, hi),\n+                    RangeEnd::Excluded => self.compare(block, fail, test.span, BinOp::Lt, val, hi),\n+                };\n \n                 vec![block, fail]\n             }"}, {"sha": "4bdc113e51698cc5d559d3d8700dc415f180ab10", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c951341a78a9d3cc7c73130ca08cbc273af72082/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c951341a78a9d3cc7c73130ca08cbc273af72082/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=c951341a78a9d3cc7c73130ca08cbc273af72082", "patch": "@@ -45,7 +45,7 @@ use rustc::util::common::ErrorReported;\n use rustc::util::nodemap::NodeSet;\n use rustc::lint::builtin::CONST_ERR;\n \n-use rustc::hir::{self, PatKind};\n+use rustc::hir::{self, PatKind, RangeEnd};\n use syntax::ast;\n use syntax_pos::Span;\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n@@ -157,7 +157,21 @@ impl<'a, 'tcx> Visitor<'tcx> for CheckCrateVisitor<'a, 'tcx> {\n             PatKind::Lit(ref lit) => {\n                 self.check_const_eval(lit);\n             }\n-            PatKind::Range(ref start, ref end) => {\n+            PatKind::Range(ref start, ref end, RangeEnd::Excluded) => {\n+                let const_cx = ConstContext::with_tables(self.tcx, self.tables);\n+                match const_cx.compare_lit_exprs(p.span, start, end) {\n+                    Ok(Ordering::Less) => {}\n+                    Ok(Ordering::Equal) |\n+                    Ok(Ordering::Greater) => {\n+                        span_err!(self.tcx.sess,\n+                                  start.span,\n+                                  E0579,\n+                                  \"lower range bound must be less than upper\");\n+                    }\n+                    Err(ErrorReported) => {}\n+                }\n+            }\n+            PatKind::Range(ref start, ref end, RangeEnd::Included) => {\n                 let const_cx = ConstContext::with_tables(self.tcx, self.tables);\n                 match const_cx.compare_lit_exprs(p.span, start, end) {\n                     Ok(Ordering::Less) |"}, {"sha": "c414d71836818d5598efd28531d0eb8bd58f7b3c", "filename": "src/librustc_passes/diagnostics.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c951341a78a9d3cc7c73130ca08cbc273af72082/src%2Flibrustc_passes%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c951341a78a9d3cc7c73130ca08cbc273af72082/src%2Flibrustc_passes%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdiagnostics.rs?ref=c951341a78a9d3cc7c73130ca08cbc273af72082", "patch": "@@ -223,6 +223,24 @@ pub impl Foo for Bar {\n ```\n \"##,\n \n+\n+E0579: r##\"\n+When matching against an exclusive range, the compiler verifies that the range\n+is non-empty. Exclusive range patterns include the start point but not the end\n+point, so this is equivalent to requiring the start of the range to be less\n+than the end of the range.\n+\n+For example:\n+\n+```compile_fail\n+match 5u32 {\n+    // This range is ok, albeit pointless.\n+    1 .. 2 => {}\n+    // This range is empty, and the compiler can tell.\n+    5 .. 5 => {}\n+}\n+```\n+\"##,\n }\n \n register_diagnostics! {"}, {"sha": "3b3c0257c4a412ca56c9a44aac6c7b19385bd06f", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c951341a78a9d3cc7c73130ca08cbc273af72082/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c951341a78a9d3cc7c73130ca08cbc273af72082/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=c951341a78a9d3cc7c73130ca08cbc273af72082", "patch": "@@ -76,7 +76,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 self.demand_suptype(pat.span, expected, pat_ty);\n                 pat_ty\n             }\n-            PatKind::Range(ref begin, ref end) => {\n+            PatKind::Range(ref begin, ref end, _) => {\n                 let lhs_ty = self.check_expr(begin);\n                 let rhs_ty = self.check_expr(end);\n "}, {"sha": "d18215be3e638945f8f1c36976a4efbd2da225e8", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c951341a78a9d3cc7c73130ca08cbc273af72082/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c951341a78a9d3cc7c73130ca08cbc273af72082/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=c951341a78a9d3cc7c73130ca08cbc273af72082", "patch": "@@ -547,6 +547,12 @@ pub enum BindingMode {\n     ByValue(Mutability),\n }\n \n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+pub enum RangeEnd {\n+    Included,\n+    Excluded,\n+}\n+\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum PatKind {\n     /// Represents a wildcard pattern (`_`)\n@@ -583,8 +589,8 @@ pub enum PatKind {\n     Ref(P<Pat>, Mutability),\n     /// A literal\n     Lit(P<Expr>),\n-    /// A range pattern, e.g. `1...2`\n-    Range(P<Expr>, P<Expr>),\n+    /// A range pattern, e.g. `1...2` or `1..2`\n+    Range(P<Expr>, P<Expr>, RangeEnd),\n     /// `[a, b, ..i, y, z]` is represented as:\n     ///     `PatKind::Slice(box [a, b], Some(i), box [y, z])`\n     Slice(Vec<P<Pat>>, Option<P<Pat>>, Vec<P<Pat>>),"}, {"sha": "17b9fdf2e7ccf4aaf3d0c162bb5cf9163aaf3b3b", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c951341a78a9d3cc7c73130ca08cbc273af72082/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c951341a78a9d3cc7c73130ca08cbc273af72082/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=c951341a78a9d3cc7c73130ca08cbc273af72082", "patch": "@@ -26,7 +26,7 @@ use self::AttributeType::*;\n use self::AttributeGate::*;\n \n use abi::Abi;\n-use ast::{self, NodeId, PatKind};\n+use ast::{self, NodeId, PatKind, RangeEnd};\n use attr;\n use codemap::{CodeMap, Spanned};\n use syntax_pos::Span;\n@@ -248,6 +248,9 @@ declare_features! (\n     // a...b and ...b\n     (active, inclusive_range_syntax, \"1.7.0\", Some(28237)),\n \n+    // X..Y patterns\n+    (active, exclusive_range_pattern, \"1.11.0\", Some(37854)),\n+\n     // impl specialization (RFC 1210)\n     (active, specialization, \"1.7.0\", Some(31844)),\n \n@@ -1262,6 +1265,10 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                     }\n                 }\n             }\n+            PatKind::Range(_, _, RangeEnd::Excluded) => {\n+                gate_feature_post!(&self, exclusive_range_pattern, pattern.span,\n+                                   \"exclusive range pattern syntax is experimental\");\n+            }\n             _ => {}\n         }\n         visit::walk_pat(self, pattern)"}, {"sha": "bc8d13d800c96640b5fd2e1d55d32ce57bb6d4c4", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c951341a78a9d3cc7c73130ca08cbc273af72082/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c951341a78a9d3cc7c73130ca08cbc273af72082/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=c951341a78a9d3cc7c73130ca08cbc273af72082", "patch": "@@ -112,6 +112,10 @@ pub trait Folder : Sized {\n         e.map(|e| noop_fold_expr(e, self))\n     }\n \n+    fn fold_range_end(&mut self, re: RangeEnd) -> RangeEnd {\n+        noop_fold_range_end(re, self)\n+    }\n+\n     fn fold_opt_expr(&mut self, e: P<Expr>) -> Option<P<Expr>> {\n         noop_fold_opt_expr(e, self)\n     }\n@@ -1095,8 +1099,10 @@ pub fn noop_fold_pat<T: Folder>(p: P<Pat>, folder: &mut T) -> P<Pat> {\n             }\n             PatKind::Box(inner) => PatKind::Box(folder.fold_pat(inner)),\n             PatKind::Ref(inner, mutbl) => PatKind::Ref(folder.fold_pat(inner), mutbl),\n-            PatKind::Range(e1, e2) => {\n-                PatKind::Range(folder.fold_expr(e1), folder.fold_expr(e2))\n+            PatKind::Range(e1, e2, end) => {\n+                PatKind::Range(folder.fold_expr(e1),\n+                               folder.fold_expr(e2),\n+                               folder.fold_range_end(end))\n             },\n             PatKind::Slice(before, slice, after) => {\n                 PatKind::Slice(before.move_map(|x| folder.fold_pat(x)),\n@@ -1109,6 +1115,10 @@ pub fn noop_fold_pat<T: Folder>(p: P<Pat>, folder: &mut T) -> P<Pat> {\n     })\n }\n \n+pub fn noop_fold_range_end<T: Folder>(end: RangeEnd, _folder: &mut T) -> RangeEnd {\n+    end\n+}\n+\n pub fn noop_fold_expr<T: Folder>(Expr {id, node, span, attrs}: Expr, folder: &mut T) -> Expr {\n     Expr {\n         node: match node {"}, {"sha": "1ddfa16e6225137fca6b5c6e96062bd642e98aca", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 31, "deletions": 12, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c951341a78a9d3cc7c73130ca08cbc273af72082/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c951341a78a9d3cc7c73130ca08cbc273af72082/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c951341a78a9d3cc7c73130ca08cbc273af72082", "patch": "@@ -38,6 +38,7 @@ use ast::{Ty, TyKind, TypeBinding, TyParam, TyParamBounds};\n use ast::{ViewPath, ViewPathGlob, ViewPathList, ViewPathSimple};\n use ast::{Visibility, WhereClause};\n use ast::{BinOpKind, UnOp};\n+use ast::RangeEnd;\n use {ast, attr};\n use codemap::{self, CodeMap, Spanned, spanned, respan};\n use syntax_pos::{self, Span, Pos, BytePos, mk_sp};\n@@ -3445,8 +3446,7 @@ impl<'a> Parser<'a> {\n             }\n \n             if before_slice {\n-                if self.check(&token::DotDot) {\n-                    self.bump();\n+                if self.eat(&token::DotDot) {\n \n                     if self.check(&token::Comma) ||\n                             self.check(&token::CloseDelim(token::Bracket)) {\n@@ -3462,8 +3462,7 @@ impl<'a> Parser<'a> {\n             }\n \n             let subpat = self.parse_pat()?;\n-            if before_slice && self.check(&token::DotDot) {\n-                self.bump();\n+            if before_slice && self.eat(&token::DotDot) {\n                 slice = Some(subpat);\n                 before_slice = false;\n             } else if before_slice {\n@@ -3578,6 +3577,22 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    // helper function to decide whether to parse as ident binding or to try to do\n+    // something more complex like range patterns\n+    fn parse_as_ident(&mut self) -> bool {\n+        self.look_ahead(1, |t| match *t {\n+            token::OpenDelim(token::Paren) | token::OpenDelim(token::Brace) |\n+            token::DotDotDot | token::ModSep | token::Not => Some(false),\n+            // ensure slice patterns [a, b.., c] and [a, b, c..] don't go into the\n+            // range pattern branch\n+            token::DotDot => None,\n+            _ => Some(true),\n+        }).unwrap_or_else(|| self.look_ahead(2, |t| match *t {\n+            token::Comma | token::CloseDelim(token::Bracket) => true,\n+            _ => false,\n+        }))\n+    }\n+\n     /// Parse a pattern.\n     pub fn parse_pat(&mut self) -> PResult<'a, P<Pat>> {\n         maybe_whole!(self, NtPat, |x| x);\n@@ -3627,11 +3642,7 @@ impl<'a> Parser<'a> {\n                 let subpat = self.parse_pat()?;\n                 pat = PatKind::Box(subpat);\n             } else if self.token.is_ident() && !self.token.is_any_keyword() &&\n-                      self.look_ahead(1, |t| match *t {\n-                          token::OpenDelim(token::Paren) | token::OpenDelim(token::Brace) |\n-                          token::DotDotDot | token::ModSep | token::Not => false,\n-                          _ => true,\n-                      }) {\n+                      self.parse_as_ident() {\n                 // Parse ident @ pat\n                 // This can give false positives and parse nullary enums,\n                 // they are dealt with later in resolve\n@@ -3658,14 +3669,19 @@ impl<'a> Parser<'a> {\n                         let mac = spanned(lo, self.prev_span.hi, Mac_ { path: path, tts: tts });\n                         pat = PatKind::Mac(mac);\n                     }\n-                    token::DotDotDot => {\n+                    token::DotDotDot | token::DotDot => {\n+                        let end_kind = match self.token {\n+                            token::DotDot => RangeEnd::Excluded,\n+                            token::DotDotDot => RangeEnd::Included,\n+                            _ => panic!(\"can only parse `..` or `...` for ranges (checked above)\"),\n+                        };\n                         // Parse range\n                         let hi = self.prev_span.hi;\n                         let begin =\n                               self.mk_expr(lo, hi, ExprKind::Path(qself, path), ThinVec::new());\n                         self.bump();\n                         let end = self.parse_pat_range_end()?;\n-                        pat = PatKind::Range(begin, end);\n+                        pat = PatKind::Range(begin, end, end_kind);\n                     }\n                     token::OpenDelim(token::Brace) => {\n                         if qself.is_some() {\n@@ -3699,7 +3715,10 @@ impl<'a> Parser<'a> {\n                     Ok(begin) => {\n                         if self.eat(&token::DotDotDot) {\n                             let end = self.parse_pat_range_end()?;\n-                            pat = PatKind::Range(begin, end);\n+                            pat = PatKind::Range(begin, end, RangeEnd::Included);\n+                        } else if self.eat(&token::DotDot) {\n+                            let end = self.parse_pat_range_end()?;\n+                            pat = PatKind::Range(begin, end, RangeEnd::Excluded);\n                         } else {\n                             pat = PatKind::Lit(begin);\n                         }"}, {"sha": "2c513df88de6a2b7e539d2bf211ad3b422520dda", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c951341a78a9d3cc7c73130ca08cbc273af72082/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c951341a78a9d3cc7c73130ca08cbc273af72082/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=c951341a78a9d3cc7c73130ca08cbc273af72082", "patch": "@@ -11,7 +11,7 @@\n pub use self::AnnNode::*;\n \n use abi::{self, Abi};\n-use ast::{self, BlockCheckMode, PatKind};\n+use ast::{self, BlockCheckMode, PatKind, RangeEnd};\n use ast::{SelfKind, RegionTyParamBound, TraitTyParamBound, TraitBoundModifier};\n use ast::Attribute;\n use util::parser::AssocOp;\n@@ -2553,10 +2553,13 @@ impl<'a> State<'a> {\n                 self.print_pat(&inner)?;\n             }\n             PatKind::Lit(ref e) => self.print_expr(&**e)?,\n-            PatKind::Range(ref begin, ref end) => {\n+            PatKind::Range(ref begin, ref end, ref end_kind) => {\n                 self.print_expr(&begin)?;\n                 space(&mut self.s)?;\n-                word(&mut self.s, \"...\")?;\n+                match *end_kind {\n+                    RangeEnd::Included => word(&mut self.s, \"...\")?,\n+                    RangeEnd::Excluded => word(&mut self.s, \"..\")?,\n+                }\n                 self.print_expr(&end)?;\n             }\n             PatKind::Slice(ref before, ref slice, ref after) => {"}, {"sha": "bfab7a250c67f275b582f58356b6240995e26306", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c951341a78a9d3cc7c73130ca08cbc273af72082/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c951341a78a9d3cc7c73130ca08cbc273af72082/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=c951341a78a9d3cc7c73130ca08cbc273af72082", "patch": "@@ -440,9 +440,9 @@ pub fn walk_pat<'a, V: Visitor<'a>>(visitor: &mut V, pattern: &'a Pat) {\n             walk_list!(visitor, visit_pat, optional_subpattern);\n         }\n         PatKind::Lit(ref expression) => visitor.visit_expr(expression),\n-        PatKind::Range(ref lower_bound, ref upper_bound) => {\n+        PatKind::Range(ref lower_bound, ref upper_bound, _) => {\n             visitor.visit_expr(lower_bound);\n-            visitor.visit_expr(upper_bound)\n+            visitor.visit_expr(upper_bound);\n         }\n         PatKind::Wild => (),\n         PatKind::Slice(ref prepatterns, ref slice_pattern, ref postpatterns) => {"}, {"sha": "91ad2b3507abdf6304359ba9bf6cec62da2e7a69", "filename": "src/test/compile-fail/match-range-fail-2.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c951341a78a9d3cc7c73130ca08cbc273af72082/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c951341a78a9d3cc7c73130ca08cbc273af72082/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail-2.rs?ref=c951341a78a9d3cc7c73130ca08cbc273af72082", "patch": "@@ -8,13 +8,21 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(exclusive_range_pattern)]\n+\n fn main() {\n     match 5 {\n         6 ... 1 => { }\n         _ => { }\n     };\n     //~^^^ ERROR lower range bound must be less than or equal to upper\n \n+    match 5 {\n+        0 .. 0 => { }\n+        _ => { }\n+    };\n+    //~^^^ ERROR lower range bound must be less than upper\n+\n     match 5u64 {\n         0xFFFF_FFFF_FFFF_FFFF ... 1 => { }\n         _ => { }"}, {"sha": "e0b6d5986ff3734e07f5576eff8f4963a811aca1", "filename": "src/test/compile-fail/pat-range-bad-dots.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c951341a78a9d3cc7c73130ca08cbc273af72082/src%2Ftest%2Fcompile-fail%2Fpat-range-bad-dots.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c951341a78a9d3cc7c73130ca08cbc273af72082/src%2Ftest%2Fcompile-fail%2Fpat-range-bad-dots.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpat-range-bad-dots.rs?ref=c951341a78a9d3cc7c73130ca08cbc273af72082", "patch": "@@ -8,11 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z parse-only\n-\n pub fn main() {\n     match 22 {\n-        0 .. 3 => {} //~ ERROR expected one of `...`, `=>`, `if`, or `|`, found `..`\n+        0 .. 3 => {} //~ ERROR exclusive range pattern syntax is experimental\n         _ => {}\n     }\n }", "previous_filename": "src/test/parse-fail/pat-range-bad-dots.rs"}, {"sha": "4bbf387d1c0dab9bd45f35e0fb38eaf8dc20683a", "filename": "src/test/parse-fail/pat-ranges-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c951341a78a9d3cc7c73130ca08cbc273af72082/src%2Ftest%2Fparse-fail%2Fpat-ranges-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c951341a78a9d3cc7c73130ca08cbc273af72082/src%2Ftest%2Fparse-fail%2Fpat-ranges-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fpat-ranges-4.rs?ref=c951341a78a9d3cc7c73130ca08cbc273af72082", "patch": "@@ -11,5 +11,5 @@\n // Parsing of range patterns\n \n fn main() {\n-    let 10 - 3 ... 10 = 8; //~ error: expected one of `...`, `:`, `;`, or `=`, found `-`\n+    let 10 - 3 ... 10 = 8; //~ error: expected one of `...`, `..`, `:`, `;`, or `=`, found `-`\n }"}, {"sha": "d528b97b5de89b93da2ba9b8f1726391ba93ec6c", "filename": "src/test/parse-fail/pat-tuple-5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c951341a78a9d3cc7c73130ca08cbc273af72082/src%2Ftest%2Fparse-fail%2Fpat-tuple-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c951341a78a9d3cc7c73130ca08cbc273af72082/src%2Ftest%2Fparse-fail%2Fpat-tuple-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fpat-tuple-5.rs?ref=c951341a78a9d3cc7c73130ca08cbc273af72082", "patch": "@@ -12,6 +12,6 @@\n \n fn main() {\n     match 0 {\n-        (pat ..) => {} //~ ERROR expected one of `)`, `,`, or `@`, found `..`\n+        (pat ..) => {} //~ ERROR unexpected token: `)`\n     }\n }"}, {"sha": "cf695a77ce1f1c86fef565b26e27c96a0358b844", "filename": "src/test/run-pass/match-range.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c951341a78a9d3cc7c73130ca08cbc273af72082/src%2Ftest%2Frun-pass%2Fmatch-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c951341a78a9d3cc7c73130ca08cbc273af72082/src%2Ftest%2Frun-pass%2Fmatch-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-range.rs?ref=c951341a78a9d3cc7c73130ca08cbc273af72082", "patch": "@@ -7,17 +7,26 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-//\n+\n+#![feature(exclusive_range_pattern)]\n \n pub fn main() {\n     match 5_usize {\n       1_usize...5_usize => {}\n       _ => panic!(\"should match range\"),\n     }\n+    match 1_usize {\n+        1_usize..5_usize => {}\n+        _ => panic!(\"should match range start\"),\n+    }\n     match 5_usize {\n       6_usize...7_usize => panic!(\"shouldn't match range\"),\n       _ => {}\n     }\n+    match 7_usize {\n+        6_usize..7_usize => panic!(\"shouldn't match range end\"),\n+        _ => {},\n+    }\n     match 5_usize {\n       1_usize => panic!(\"should match non-first range\"),\n       2_usize...6_usize => {}\n@@ -39,4 +48,12 @@ pub fn main() {\n       -3.6...3.6 => {}\n       _ => panic!(\"should match negative float range\")\n     }\n+    match 3.5 {\n+        0.0..3.5 => panic!(\"should not match the range end\"),\n+        _ => {},\n+    }\n+    match 0.0 {\n+        0.0..3.5 => {},\n+        _ => panic!(\"should match the range start\"),\n+    }\n }"}]}