{"sha": "73cf2ba0c0c9defc8ff7c500bad6839db2864a78", "node_id": "C_kwDOAAsO6NoAKDczY2YyYmEwYzBjOWRlZmM4ZmY3YzUwMGJhZDY4MzlkYjI4NjRhNzg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-25T22:30:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-25T22:30:42Z"}, "message": "Auto merge of #1923 - RalfJung:more-simd, r=RalfJung\n\nMore portable SIMD: rem, shl, shr\n\nAlso make sure we catch the potential UB in div, rem, shl, shr.", "tree": {"sha": "534fdba707f249ba340e23669ad6c752fa4029c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/534fdba707f249ba340e23669ad6c752fa4029c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73cf2ba0c0c9defc8ff7c500bad6839db2864a78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73cf2ba0c0c9defc8ff7c500bad6839db2864a78", "html_url": "https://github.com/rust-lang/rust/commit/73cf2ba0c0c9defc8ff7c500bad6839db2864a78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73cf2ba0c0c9defc8ff7c500bad6839db2864a78/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f0faed6d24f14620eecaf0941ca321868c30f34", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f0faed6d24f14620eecaf0941ca321868c30f34", "html_url": "https://github.com/rust-lang/rust/commit/4f0faed6d24f14620eecaf0941ca321868c30f34"}, {"sha": "4414d963233ab37f2c3941e7b5dde043a77d37f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4414d963233ab37f2c3941e7b5dde043a77d37f8", "html_url": "https://github.com/rust-lang/rust/commit/4414d963233ab37f2c3941e7b5dde043a77d37f8"}], "stats": {"total": 90, "additions": 87, "deletions": 3}, "files": [{"sha": "f80062668f3ebbfb851ea396d3100264cc62a792", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/73cf2ba0c0c9defc8ff7c500bad6839db2864a78/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cf2ba0c0c9defc8ff7c500bad6839db2864a78/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=73cf2ba0c0c9defc8ff7c500bad6839db2864a78", "patch": "@@ -306,7 +306,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n \n             // SIMD operations\n-            \"simd_add\" | \"simd_sub\" | \"simd_mul\" | \"simd_div\" => {\n+            #[rustfmt::skip]\n+            | \"simd_add\"\n+            | \"simd_sub\"\n+            | \"simd_mul\"\n+            | \"simd_div\"\n+            | \"simd_rem\"\n+            | \"simd_shl\"\n+            | \"simd_shr\" => {\n                 let &[ref left, ref right] = check_arg_count(args)?;\n                 let (left, left_len) = this.operand_to_simd(left)?;\n                 let (right, right_len) = this.operand_to_simd(right)?;\n@@ -320,14 +327,27 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     \"simd_sub\" => mir::BinOp::Sub,\n                     \"simd_mul\" => mir::BinOp::Mul,\n                     \"simd_div\" => mir::BinOp::Div,\n+                    \"simd_rem\" => mir::BinOp::Rem,\n+                    \"simd_shl\" => mir::BinOp::Shl,\n+                    \"simd_shr\" => mir::BinOp::Shr,\n                     _ => unreachable!(),\n                 };\n \n                 for i in 0..dest_len {\n                     let left = this.read_immediate(&this.mplace_index(&left, i)?.into())?;\n                     let right = this.read_immediate(&this.mplace_index(&right, i)?.into())?;\n-                    let dest = this.mplace_index(&dest, i)?.into();\n-                    this.binop_ignore_overflow(op, &left, &right, &dest)?;\n+                    let dest = this.mplace_index(&dest, i)?;\n+                    let (val, overflowed, ty) = this.overflowing_binary_op(op, &left, &right)?;\n+                    assert_eq!(ty, dest.layout.ty);\n+                    if matches!(op, mir::BinOp::Shl | mir::BinOp::Shr) {\n+                        // Shifts have extra UB as SIMD operations that the MIR binop does not have.\n+                        // See <https://github.com/rust-lang/rust/issues/91237>.\n+                        if overflowed {\n+                            let r_val = right.to_scalar()?.to_bits(right.layout.size)?;\n+                            throw_ub_format!(\"overflowing shift by {} in `{}` in SIMD lane {}\", r_val, intrinsic_name, i);\n+                        }\n+                    }\n+                    this.write_scalar(val, &dest.into())?;\n                 }\n             }\n "}, {"sha": "d67d06dc1e6742fdbf7f3b3787a5ef223585268d", "filename": "tests/compile-fail/intrinsics/div-by-zero.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/73cf2ba0c0c9defc8ff7c500bad6839db2864a78/tests%2Fcompile-fail%2Fintrinsics%2Fdiv-by-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cf2ba0c0c9defc8ff7c500bad6839db2864a78/tests%2Fcompile-fail%2Fintrinsics%2Fdiv-by-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fdiv-by-zero.rs?ref=73cf2ba0c0c9defc8ff7c500bad6839db2864a78", "previous_filename": "tests/compile-fail/intrinsics/div-by-zero-1.rs"}, {"sha": "e904049e3b466e7bef51486a3ea3f91008902056", "filename": "tests/compile-fail/intrinsics/rem-by-zero.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/73cf2ba0c0c9defc8ff7c500bad6839db2864a78/tests%2Fcompile-fail%2Fintrinsics%2Frem-by-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cf2ba0c0c9defc8ff7c500bad6839db2864a78/tests%2Fcompile-fail%2Fintrinsics%2Frem-by-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Frem-by-zero.rs?ref=73cf2ba0c0c9defc8ff7c500bad6839db2864a78", "previous_filename": "tests/compile-fail/intrinsics/div-by-zero-2.rs"}, {"sha": "4244e63d23e5d891b88605c6728886fb7dbf4eba", "filename": "tests/compile-fail/intrinsics/simd-div-by-zero.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/73cf2ba0c0c9defc8ff7c500bad6839db2864a78/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-div-by-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cf2ba0c0c9defc8ff7c500bad6839db2864a78/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-div-by-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-div-by-zero.rs?ref=73cf2ba0c0c9defc8ff7c500bad6839db2864a78", "patch": "@@ -0,0 +1,15 @@\n+#![feature(platform_intrinsics, repr_simd)]\n+\n+extern \"platform-intrinsic\" {\n+    pub(crate) fn simd_div<T>(x: T, y: T) -> T;\n+}\n+\n+#[repr(simd)]\n+#[allow(non_camel_case_types)]\n+struct i32x2(i32, i32);\n+\n+fn main() { unsafe {\n+    let x = i32x2(1, 1);\n+    let y = i32x2(1, 0);\n+    simd_div(x, y); //~ERROR Undefined Behavior: dividing by zero\n+} }"}, {"sha": "bc3128b5fb5f1125519450a20a17ba40e5a27311", "filename": "tests/compile-fail/intrinsics/simd-rem-by-zero.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/73cf2ba0c0c9defc8ff7c500bad6839db2864a78/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-rem-by-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cf2ba0c0c9defc8ff7c500bad6839db2864a78/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-rem-by-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-rem-by-zero.rs?ref=73cf2ba0c0c9defc8ff7c500bad6839db2864a78", "patch": "@@ -0,0 +1,15 @@\n+#![feature(platform_intrinsics, repr_simd)]\n+\n+extern \"platform-intrinsic\" {\n+    pub(crate) fn simd_rem<T>(x: T, y: T) -> T;\n+}\n+\n+#[repr(simd)]\n+#[allow(non_camel_case_types)]\n+struct i32x2(i32, i32);\n+\n+fn main() { unsafe {\n+    let x = i32x2(1, 1);\n+    let y = i32x2(1, 0);\n+    simd_rem(x, y); //~ERROR Undefined Behavior: calculating the remainder with a divisor of zero\n+} }"}, {"sha": "b973386f1b5c8c6e29f874b5dc1d00157dd30260", "filename": "tests/compile-fail/intrinsics/simd-shl-too-far.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/73cf2ba0c0c9defc8ff7c500bad6839db2864a78/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-shl-too-far.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cf2ba0c0c9defc8ff7c500bad6839db2864a78/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-shl-too-far.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-shl-too-far.rs?ref=73cf2ba0c0c9defc8ff7c500bad6839db2864a78", "patch": "@@ -0,0 +1,15 @@\n+#![feature(platform_intrinsics, repr_simd)]\n+\n+extern \"platform-intrinsic\" {\n+    pub(crate) fn simd_shl<T>(x: T, y: T) -> T;\n+}\n+\n+#[repr(simd)]\n+#[allow(non_camel_case_types)]\n+struct i32x2(i32, i32);\n+\n+fn main() { unsafe {\n+    let x = i32x2(1, 1);\n+    let y = i32x2(100, 0);\n+    simd_shl(x, y); //~ERROR overflowing shift by 100 in `simd_shl` in SIMD lane 0\n+} }"}, {"sha": "0b4eb8c116797a607b1ca8999983771ecc4056a2", "filename": "tests/compile-fail/intrinsics/simd-shr-too-far.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/73cf2ba0c0c9defc8ff7c500bad6839db2864a78/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-shr-too-far.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cf2ba0c0c9defc8ff7c500bad6839db2864a78/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-shr-too-far.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-shr-too-far.rs?ref=73cf2ba0c0c9defc8ff7c500bad6839db2864a78", "patch": "@@ -0,0 +1,15 @@\n+#![feature(platform_intrinsics, repr_simd)]\n+\n+extern \"platform-intrinsic\" {\n+    pub(crate) fn simd_shr<T>(x: T, y: T) -> T;\n+}\n+\n+#[repr(simd)]\n+#[allow(non_camel_case_types)]\n+struct i32x2(i32, i32);\n+\n+fn main() { unsafe {\n+    let x = i32x2(1, 1);\n+    let y = i32x2(20, 40);\n+    simd_shr(x, y); //~ERROR overflowing shift by 40 in `simd_shr` in SIMD lane 1\n+} }"}, {"sha": "5d3337661878015bf2e5d1dc4421f04ab9fb7e97", "filename": "tests/run-pass/portable-simd.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73cf2ba0c0c9defc8ff7c500bad6839db2864a78/tests%2Frun-pass%2Fportable-simd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cf2ba0c0c9defc8ff7c500bad6839db2864a78/tests%2Frun-pass%2Fportable-simd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fportable-simd.rs?ref=73cf2ba0c0c9defc8ff7c500bad6839db2864a78", "patch": "@@ -9,6 +9,7 @@ fn simd_ops_f32() {\n     assert_eq!(a * b, f32x4::from_array([10.0, 20.0, 30.0, 40.0]));\n     assert_eq!(b / a, f32x4::from_array([0.1, 0.2, 0.3, 0.4]));\n     assert_eq!(a / 2.0, f32x4::splat(5.0));\n+    assert_eq!(a % b, f32x4::from_array([0.0, 0.0, 1.0, 2.0]));\n }\n \n fn simd_ops_i32() {\n@@ -19,6 +20,9 @@ fn simd_ops_i32() {\n     assert_eq!(a * b, i32x4::from_array([10, 20, 30, 40]));\n     assert_eq!(a / b, i32x4::from_array([10, 5, 3, 2]));\n     assert_eq!(a / 2, i32x4::splat(5));\n+    assert_eq!(a % b, i32x4::from_array([0, 0, 1, 2]));\n+    assert_eq!(b << 2, i32x4::from_array([4, 8, 12, 16]));\n+    assert_eq!(b >> 1, i32x4::from_array([0, 1, 1, 2]));\n }\n \n fn main() {"}]}