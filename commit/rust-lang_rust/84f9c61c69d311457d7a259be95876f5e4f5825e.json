{"sha": "84f9c61c69d311457d7a259be95876f5e4f5825e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0ZjljNjFjNjlkMzExNDU3ZDdhMjU5YmU5NTg3NmY1ZTRmNTgyNWU=", "commit": {"author": {"name": "Jonathan Reem", "email": "jonathan.reem@gmail.com", "date": "2015-07-09T23:38:55Z"}, "committer": {"name": "Jonathan Reem", "email": "jonathan.reem@gmail.com", "date": "2015-07-10T00:32:50Z"}, "message": "Implement Borrow<CStr> for CString and ToOwned for CStr\n\nThis allows CString and CStr to be used with the Cow type,\nwhich is extremely useful when interfacing with C libraries\nthat make extensive use of C-style strings.", "tree": {"sha": "16dfdad4af02ced073937bde5c5af1d7f04a8d8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16dfdad4af02ced073937bde5c5af1d7f04a8d8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84f9c61c69d311457d7a259be95876f5e4f5825e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84f9c61c69d311457d7a259be95876f5e4f5825e", "html_url": "https://github.com/rust-lang/rust/commit/84f9c61c69d311457d7a259be95876f5e4f5825e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84f9c61c69d311457d7a259be95876f5e4f5825e/comments", "author": {"login": "reem", "id": 4745181, "node_id": "MDQ6VXNlcjQ3NDUxODE=", "avatar_url": "https://avatars.githubusercontent.com/u/4745181?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reem", "html_url": "https://github.com/reem", "followers_url": "https://api.github.com/users/reem/followers", "following_url": "https://api.github.com/users/reem/following{/other_user}", "gists_url": "https://api.github.com/users/reem/gists{/gist_id}", "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reem/subscriptions", "organizations_url": "https://api.github.com/users/reem/orgs", "repos_url": "https://api.github.com/users/reem/repos", "events_url": "https://api.github.com/users/reem/events{/privacy}", "received_events_url": "https://api.github.com/users/reem/received_events", "type": "User", "site_admin": false}, "committer": {"login": "reem", "id": 4745181, "node_id": "MDQ6VXNlcjQ3NDUxODE=", "avatar_url": "https://avatars.githubusercontent.com/u/4745181?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reem", "html_url": "https://github.com/reem", "followers_url": "https://api.github.com/users/reem/followers", "following_url": "https://api.github.com/users/reem/following{/other_user}", "gists_url": "https://api.github.com/users/reem/gists{/gist_id}", "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reem/subscriptions", "organizations_url": "https://api.github.com/users/reem/orgs", "repos_url": "https://api.github.com/users/reem/repos", "events_url": "https://api.github.com/users/reem/events{/privacy}", "received_events_url": "https://api.github.com/users/reem/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c4e236b955ba6a2dd8ef8e054f50ff64135a8be", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c4e236b955ba6a2dd8ef8e054f50ff64135a8be", "html_url": "https://github.com/rust-lang/rust/commit/6c4e236b955ba6a2dd8ef8e054f50ff64135a8be"}], "stats": {"total": 25, "additions": 24, "deletions": 1}, "files": [{"sha": "1ddd74d3f4f3427352c9bdef4d011959af9aa4a6", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/84f9c61c69d311457d7a259be95876f5e4f5825e/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f9c61c69d311457d7a259be95876f5e4f5825e/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=84f9c61c69d311457d7a259be95876f5e4f5825e", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use borrow::{Cow, ToOwned};\n+use borrow::{Cow, ToOwned, Borrow};\n use boxed::Box;\n use clone::Clone;\n use convert::{Into, From};\n@@ -272,6 +272,11 @@ impl fmt::Debug for CString {\n     }\n }\n \n+#[stable(feature = \"cstr_borrow\", since = \"1.3.0\")]\n+impl Borrow<CStr> for CString {\n+    fn borrow(&self) -> &CStr { self }\n+}\n+\n impl NulError {\n     /// Returns the position of the nul byte in the slice that was provided to\n     /// `CString::new`.\n@@ -444,6 +449,15 @@ impl Ord for CStr {\n     }\n }\n \n+#[stable(feature = \"cstr_borrow\", since = \"1.3.0\")]\n+impl ToOwned for CStr {\n+    type Owned = CString;\n+\n+    fn to_owned(&self) -> CString {\n+        unsafe { CString::from_vec_unchecked(self.to_bytes().to_vec()) }\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use prelude::v1::*;\n@@ -515,4 +529,13 @@ mod tests {\n             assert_eq!(CStr::from_ptr(ptr).to_string_lossy(), Owned::<str>(format!(\"123\\u{FFFD}\")));\n         }\n     }\n+\n+    #[test]\n+    fn to_owned() {\n+        let data = b\"123\\0\";\n+        let ptr = data.as_ptr() as *const libc::c_char;\n+\n+        let owned = unsafe { CStr::from_ptr(ptr).to_owned() };\n+        assert_eq!(owned.as_bytes_with_nul(), data);\n+    }\n }"}]}