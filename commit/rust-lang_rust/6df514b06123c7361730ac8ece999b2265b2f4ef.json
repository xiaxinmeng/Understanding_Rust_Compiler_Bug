{"sha": "6df514b06123c7361730ac8ece999b2265b2f4ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkZjUxNGIwNjEyM2M3MzYxNzMwYWM4ZWNlOTk5YjIyNjViMmY0ZWY=", "commit": {"author": {"name": "nham", "email": "hamann.nick@gmail.com", "date": "2014-08-06T06:30:17Z"}, "committer": {"name": "nham", "email": "hamann.nick@gmail.com", "date": "2014-08-06T06:30:17Z"}, "message": "Use byte literals in libcore", "tree": {"sha": "1e32fac3e288cc3afd519bc528a38e161b9f6270", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e32fac3e288cc3afd519bc528a38e161b9f6270"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6df514b06123c7361730ac8ece999b2265b2f4ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6df514b06123c7361730ac8ece999b2265b2f4ef", "html_url": "https://github.com/rust-lang/rust/commit/6df514b06123c7361730ac8ece999b2265b2f4ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6df514b06123c7361730ac8ece999b2265b2f4ef/comments", "author": {"login": "nham", "id": 546409, "node_id": "MDQ6VXNlcjU0NjQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/546409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nham", "html_url": "https://github.com/nham", "followers_url": "https://api.github.com/users/nham/followers", "following_url": "https://api.github.com/users/nham/following{/other_user}", "gists_url": "https://api.github.com/users/nham/gists{/gist_id}", "starred_url": "https://api.github.com/users/nham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nham/subscriptions", "organizations_url": "https://api.github.com/users/nham/orgs", "repos_url": "https://api.github.com/users/nham/repos", "events_url": "https://api.github.com/users/nham/events{/privacy}", "received_events_url": "https://api.github.com/users/nham/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nham", "id": 546409, "node_id": "MDQ6VXNlcjU0NjQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/546409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nham", "html_url": "https://github.com/nham", "followers_url": "https://api.github.com/users/nham/followers", "following_url": "https://api.github.com/users/nham/following{/other_user}", "gists_url": "https://api.github.com/users/nham/gists{/gist_id}", "starred_url": "https://api.github.com/users/nham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nham/subscriptions", "organizations_url": "https://api.github.com/users/nham/orgs", "repos_url": "https://api.github.com/users/nham/repos", "events_url": "https://api.github.com/users/nham/events{/privacy}", "received_events_url": "https://api.github.com/users/nham/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fb78e29f4ae9b3e5bb19bf5a740375e90b01ceb", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fb78e29f4ae9b3e5bb19bf5a740375e90b01ceb", "html_url": "https://github.com/rust-lang/rust/commit/3fb78e29f4ae9b3e5bb19bf5a740375e90b01ceb"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "88702e59e30d165833278b3a5851930aa6f2e0ec", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6df514b06123c7361730ac8ece999b2265b2f4ef/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6df514b06123c7361730ac8ece999b2265b2f4ef/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=6df514b06123c7361730ac8ece999b2265b2f4ef", "patch": "@@ -198,11 +198,11 @@ pub fn float_to_str_bytes_common<T: Primitive + Float, U>(\n     // Decide what sign to put in front\n     match sign {\n         SignNeg | SignAll if neg => {\n-            buf[end] = '-' as u8;\n+            buf[end] = b'-';\n             end += 1;\n         }\n         SignAll => {\n-            buf[end] = '+' as u8;\n+            buf[end] = b'+';\n             end += 1;\n         }\n         _ => ()\n@@ -218,7 +218,7 @@ pub fn float_to_str_bytes_common<T: Primitive + Float, U>(\n     // Now emit the fractional part, if any\n     deccum = num.fract();\n     if deccum != _0 || (limit_digits && exact && digit_count > 0) {\n-        buf[end] = '.' as u8;\n+        buf[end] = b'.';\n         end += 1;\n         let mut dig = 0u;\n \n@@ -269,8 +269,8 @@ pub fn float_to_str_bytes_common<T: Primitive + Float, U>(\n                     // If reached left end of number, have to\n                     // insert additional digit:\n                     if i < 0\n-                    || buf[i as uint] == '-' as u8\n-                    || buf[i as uint] == '+' as u8 {\n+                    || buf[i as uint] == b'-'\n+                    || buf[i as uint] == b'+' {\n                         for j in range(i as uint + 1, end).rev() {\n                             buf[j + 1] = buf[j];\n                         }\n@@ -280,7 +280,7 @@ pub fn float_to_str_bytes_common<T: Primitive + Float, U>(\n                     }\n \n                     // Skip the '.'\n-                    if buf[i as uint] == '.' as u8 { i -= 1; continue; }\n+                    if buf[i as uint] == b'.' { i -= 1; continue; }\n \n                     // Either increment the digit,\n                     // or set to 0 if max and carry the 1.\n@@ -306,14 +306,14 @@ pub fn float_to_str_bytes_common<T: Primitive + Float, U>(\n         let mut i = buf_max_i;\n \n         // discover trailing zeros of fractional part\n-        while i > start_fractional_digits && buf[i] == '0' as u8 {\n+        while i > start_fractional_digits && buf[i] == b'0' {\n             i -= 1;\n         }\n \n         // Only attempt to truncate digits if buf has fractional digits\n         if i >= start_fractional_digits {\n             // If buf ends with '.', cut that too.\n-            if buf[i] == '.' as u8 { i -= 1 }\n+            if buf[i] == b'.' { i -= 1 }\n \n             // only resize buf if we actually remove digits\n             if i < buf_max_i {\n@@ -323,7 +323,7 @@ pub fn float_to_str_bytes_common<T: Primitive + Float, U>(\n     } // If exact and trailing '.', just cut that\n     else {\n         let max_i = end - 1;\n-        if buf[max_i] == '.' as u8 {\n+        if buf[max_i] == b'.' {\n             end = max_i;\n         }\n     }"}, {"sha": "99920dc7881901cc2a0eb7324b544337ef235f98", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6df514b06123c7361730ac8ece999b2265b2f4ef/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6df514b06123c7361730ac8ece999b2265b2f4ef/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=6df514b06123c7361730ac8ece999b2265b2f4ef", "patch": "@@ -104,13 +104,13 @@ macro_rules! radix {\n     }\n }\n \n-radix!(Binary,    2, \"0b\", x @  0 .. 2 => '0' as u8 + x)\n-radix!(Octal,     8, \"0o\", x @  0 .. 7 => '0' as u8 + x)\n-radix!(Decimal,  10, \"\",   x @  0 .. 9 => '0' as u8 + x)\n-radix!(LowerHex, 16, \"0x\", x @  0 .. 9 => '0' as u8 + x,\n-                           x @ 10 ..15 => 'a' as u8 + (x - 10))\n-radix!(UpperHex, 16, \"0x\", x @  0 .. 9 => '0' as u8 + x,\n-                           x @ 10 ..15 => 'A' as u8 + (x - 10))\n+radix!(Binary,    2, \"0b\", x @  0 .. 2 => b'0' + x)\n+radix!(Octal,     8, \"0o\", x @  0 .. 7 => b'0' + x)\n+radix!(Decimal,  10, \"\",   x @  0 .. 9 => b'0' + x)\n+radix!(LowerHex, 16, \"0x\", x @  0 .. 9 => b'0' + x,\n+                           x @ 10 ..15 => b'a' + (x - 10))\n+radix!(UpperHex, 16, \"0x\", x @  0 .. 9 => b'0' + x,\n+                           x @ 10 ..15 => b'A' + (x - 10))\n \n /// A radix with in the range of `2..36`.\n #[deriving(Clone, PartialEq)]\n@@ -129,8 +129,8 @@ impl GenericRadix for Radix {\n     fn base(&self) -> u8 { self.base }\n     fn digit(&self, x: u8) -> u8 {\n         match x {\n-            x @  0 ..9 => '0' as u8 + x,\n-            x if x < self.base() => 'a' as u8 + (x - 10),\n+            x @  0 ..9 => b'0' + x,\n+            x if x < self.base() => b'a' + (x - 10),\n             x => fail!(\"number not in the range 0..{}: {}\", self.base() - 1, x),\n         }\n     }"}, {"sha": "5eb463687904c41b34119f3b0b85ca5daeba3324", "filename": "src/libcore/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6df514b06123c7361730ac8ece999b2265b2f4ef/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6df514b06123c7361730ac8ece999b2265b2f4ef/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=6df514b06123c7361730ac8ece999b2265b2f4ef", "patch": "@@ -1755,7 +1755,7 @@ impl<'a> StrSlice<'a> for &'a str {\n     fn lines_any(&self) -> AnyLines<'a> {\n         self.lines().map(|line| {\n             let l = line.len();\n-            if l > 0 && line.as_bytes()[l - 1] == '\\r' as u8 { line.slice(0, l - 1) }\n+            if l > 0 && line.as_bytes()[l - 1] == b'\\r' { line.slice(0, l - 1) }\n             else { line }\n         })\n     }"}]}