{"sha": "f81734bcaa9688bef78b5ef35c7d134edc0b41f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4MTczNGJjYWE5Njg4YmVmNzhiNWVmMzVjN2QxMzRlZGMwYjQxZjQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-16T18:25:32Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-22T18:33:13Z"}, "message": "ignore musl target in tests to avoid issues with output differences", "tree": {"sha": "0a45faff038c566b7251b90b7913457721be8572", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a45faff038c566b7251b90b7913457721be8572"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f81734bcaa9688bef78b5ef35c7d134edc0b41f4", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f81734bcaa9688bef78b5ef35c7d134edc0b41f4", "html_url": "https://github.com/rust-lang/rust/commit/f81734bcaa9688bef78b5ef35c7d134edc0b41f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b21408527a77136af7aed22ffbe256a6116ddc4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b21408527a77136af7aed22ffbe256a6116ddc4e", "html_url": "https://github.com/rust-lang/rust/commit/b21408527a77136af7aed22ffbe256a6116ddc4e"}], "stats": {"total": 80, "additions": 52, "deletions": 28}, "files": [{"sha": "4af67039fd8777e624f75e188d3c2049d324f86f", "filename": "src/etc/generate-deriving-span-tests.py", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/src%2Fetc%2Fgenerate-deriving-span-tests.py", "raw_url": "https://github.com/rust-lang/rust/raw/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/src%2Fetc%2Fgenerate-deriving-span-tests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgenerate-deriving-span-tests.py?ref=f81734bcaa9688bef78b5ef35c7d134edc0b41f4", "patch": "@@ -14,6 +14,8 @@\n     os.path.join(os.path.dirname(__file__), '../test/ui/derives/'))\n \n TEMPLATE = \"\"\"\\\n+// ignore-musl\n+// ^ due to stderr output differences\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n {error_deriving}"}, {"sha": "007ed4efa6981381afb06a32ac00d12be0ce1514", "filename": "src/test/ui/async-await/issues/issue-62009-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.rs?ref=f81734bcaa9688bef78b5ef35c7d134edc0b41f4", "patch": "@@ -1,4 +1,6 @@\n // edition:2018\n+// ignore-musl\n+// ^ due to stderr output differences\n \n async fn print_dur() {}\n "}, {"sha": "f63eaa4c48a97ea5100937f4d48e1f8852fb2ea8", "filename": "src/test/ui/async-await/issues/issue-62009-1.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr?ref=f81734bcaa9688bef78b5ef35c7d134edc0b41f4", "patch": "@@ -1,13 +1,13 @@\n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009-1.rs:6:5\n+  --> $DIR/issue-62009-1.rs:8:5\n    |\n LL | fn main() {\n    |    ---- this is not `async`\n LL |     async { let (); }.await;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009-1.rs:8:5\n+  --> $DIR/issue-62009-1.rs:10:5\n    |\n LL |   fn main() {\n    |      ---- this is not `async`\n@@ -19,19 +19,19 @@ LL | |     }.await;\n    | |___________^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009-1.rs:12:5\n+  --> $DIR/issue-62009-1.rs:14:5\n    |\n LL | fn main() {\n    |    ---- this is not `async`\n ...\n LL |     (|_| 2333).await;\n    |     ^^^^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n-error[E0277]: the trait bound `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]: std::future::Future` is not satisfied\n-  --> $DIR/issue-62009-1.rs:12:5\n+error[E0277]: the trait bound `[closure@$DIR/issue-62009-1.rs:14:5: 14:15]: std::future::Future` is not satisfied\n+  --> $DIR/issue-62009-1.rs:14:5\n    |\n LL |     (|_| 2333).await;\n-   |     ^^^^^^^^^^^^^^^^ the trait `std::future::Future` is not implemented for `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]`\n+   |     ^^^^^^^^^^^^^^^^ the trait `std::future::Future` is not implemented for `[closure@$DIR/issue-62009-1.rs:14:5: 14:15]`\n    | \n   ::: $SRC_DIR/libstd/future.rs:LL:COL\n    |"}, {"sha": "4cb6358864fca78e002018dae205c3d6aaf5a746", "filename": "src/test/ui/closures/closure-move-sync.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.rs?ref=f81734bcaa9688bef78b5ef35c7d134edc0b41f4", "patch": "@@ -1,3 +1,5 @@\n+// ignore-musl\n+// ^ due to stderr output differences\n use std::thread;\n use std::sync::mpsc::channel;\n "}, {"sha": "f676df9c559ebc67e3d889b4d0ca3287181e5b61", "filename": "src/test/ui/closures/closure-move-sync.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr?ref=f81734bcaa9688bef78b5ef35c7d134edc0b41f4", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `std::sync::mpsc::Receiver<()>` cannot be shared between threads safely\n-  --> $DIR/closure-move-sync.rs:6:13\n+  --> $DIR/closure-move-sync.rs:8:13\n    |\n LL |     let t = thread::spawn(|| {\n    |             ^^^^^^^^^^^^^ `std::sync::mpsc::Receiver<()>` cannot be shared between threads safely\n@@ -11,10 +11,10 @@ LL |     F: FnOnce() -> T, F: Send + 'static, T: Send + 'static\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::sync::mpsc::Receiver<()>`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&std::sync::mpsc::Receiver<()>`\n-   = note: required because it appears within the type `[closure@$DIR/closure-move-sync.rs:6:27: 9:6 recv:&std::sync::mpsc::Receiver<()>]`\n+   = note: required because it appears within the type `[closure@$DIR/closure-move-sync.rs:8:27: 11:6 recv:&std::sync::mpsc::Receiver<()>]`\n \n error[E0277]: `std::sync::mpsc::Sender<()>` cannot be shared between threads safely\n-  --> $DIR/closure-move-sync.rs:18:5\n+  --> $DIR/closure-move-sync.rs:20:5\n    |\n LL |     thread::spawn(|| tx.send(()).unwrap());\n    |     ^^^^^^^^^^^^^ `std::sync::mpsc::Sender<()>` cannot be shared between threads safely\n@@ -26,7 +26,7 @@ LL |     F: FnOnce() -> T, F: Send + 'static, T: Send + 'static\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::sync::mpsc::Sender<()>`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&std::sync::mpsc::Sender<()>`\n-   = note: required because it appears within the type `[closure@$DIR/closure-move-sync.rs:18:19: 18:42 tx:&std::sync::mpsc::Sender<()>]`\n+   = note: required because it appears within the type `[closure@$DIR/closure-move-sync.rs:20:19: 20:42 tx:&std::sync::mpsc::Sender<()>]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "516a15b55bf1d37dc071b1dcb22e7644d24c44fa", "filename": "src/test/ui/derives/derives-span-Hash-enum-struct-variant.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.rs?ref=f81734bcaa9688bef78b5ef35c7d134edc0b41f4", "patch": "@@ -1,3 +1,5 @@\n+// ignore-musl\n+// ^ due to stderr output differences\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "708ebca9fb15306c14d4a1699255bce345035e88", "filename": "src/test/ui/derives/derives-span-Hash-enum-struct-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr?ref=f81734bcaa9688bef78b5ef35c7d134edc0b41f4", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Error: std::hash::Hash` is not satisfied\n-  --> $DIR/derives-span-Hash-enum-struct-variant.rs:9:6\n+  --> $DIR/derives-span-Hash-enum-struct-variant.rs:11:6\n    |\n LL |      x: Error\n    |      ^^^^^^^^ the trait `std::hash::Hash` is not implemented for `Error`"}, {"sha": "ba12deaf98137c85c7fa4935be1f9d54e05e5b95", "filename": "src/test/ui/derives/derives-span-Hash-enum.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.rs?ref=f81734bcaa9688bef78b5ef35c7d134edc0b41f4", "patch": "@@ -1,3 +1,5 @@\n+// ignore-musl\n+// ^ due to stderr output differences\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "dc171cbe5dd1374e92a1d02a33b9f0f50a19fdc1", "filename": "src/test/ui/derives/derives-span-Hash-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr?ref=f81734bcaa9688bef78b5ef35c7d134edc0b41f4", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Error: std::hash::Hash` is not satisfied\n-  --> $DIR/derives-span-Hash-enum.rs:9:6\n+  --> $DIR/derives-span-Hash-enum.rs:11:6\n    |\n LL |      Error\n    |      ^^^^^ the trait `std::hash::Hash` is not implemented for `Error`"}, {"sha": "b9e7e04f4cfed75237f5c7bb5ae3d7f9b5165656", "filename": "src/test/ui/derives/derives-span-Hash-struct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.rs?ref=f81734bcaa9688bef78b5ef35c7d134edc0b41f4", "patch": "@@ -1,3 +1,5 @@\n+// ignore-musl\n+// ^ due to stderr output differences\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "429449b82bf64a9e3aef7985bd6cc4bb9eeb6c1c", "filename": "src/test/ui/derives/derives-span-Hash-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr?ref=f81734bcaa9688bef78b5ef35c7d134edc0b41f4", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Error: std::hash::Hash` is not satisfied\n-  --> $DIR/derives-span-Hash-struct.rs:8:5\n+  --> $DIR/derives-span-Hash-struct.rs:10:5\n    |\n LL |     x: Error\n    |     ^^^^^^^^ the trait `std::hash::Hash` is not implemented for `Error`"}, {"sha": "bb271e60745a5962ce6361e6628aa563304318dc", "filename": "src/test/ui/derives/derives-span-Hash-tuple-struct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.rs?ref=f81734bcaa9688bef78b5ef35c7d134edc0b41f4", "patch": "@@ -1,3 +1,5 @@\n+// ignore-musl\n+// ^ due to stderr output differences\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "a6c4c479b24d71d4cadae2f5ac199fe77a600017", "filename": "src/test/ui/derives/derives-span-Hash-tuple-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr?ref=f81734bcaa9688bef78b5ef35c7d134edc0b41f4", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Error: std::hash::Hash` is not satisfied\n-  --> $DIR/derives-span-Hash-tuple-struct.rs:8:5\n+  --> $DIR/derives-span-Hash-tuple-struct.rs:10:5\n    |\n LL |     Error\n    |     ^^^^^ the trait `std::hash::Hash` is not implemented for `Error`"}, {"sha": "d75c149a7b68207f94c96bdf04c78ba72f58a12a", "filename": "src/test/ui/interior-mutability/interior-mutability.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.rs?ref=f81734bcaa9688bef78b5ef35c7d134edc0b41f4", "patch": "@@ -1,3 +1,5 @@\n+// ignore-musl\n+// ^ due to stderr output differences\n use std::cell::Cell;\n use std::panic::catch_unwind;\n fn main() {"}, {"sha": "b76fce288055263c6485af758cbcd6441f6d5c42", "filename": "src/test/ui/interior-mutability/interior-mutability.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr?ref=f81734bcaa9688bef78b5ef35c7d134edc0b41f4", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the type `std::cell::UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n-  --> $DIR/interior-mutability.rs:5:5\n+  --> $DIR/interior-mutability.rs:7:5\n    |\n LL |     catch_unwind(|| { x.set(23); });\n    |     ^^^^^^^^^^^^ `std::cell::UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n@@ -12,7 +12,7 @@ LL | pub fn catch_unwind<F: FnOnce() -> R + UnwindSafe, R>(f: F) -> Result<R> {\n    = help: within `std::cell::Cell<i32>`, the trait `std::panic::RefUnwindSafe` is not implemented for `std::cell::UnsafeCell<i32>`\n    = note: required because it appears within the type `std::cell::Cell<i32>`\n    = note: required because of the requirements on the impl of `std::panic::UnwindSafe` for `&std::cell::Cell<i32>`\n-   = note: required because it appears within the type `[closure@$DIR/interior-mutability.rs:5:18: 5:35 x:&std::cell::Cell<i32>]`\n+   = note: required because it appears within the type `[closure@$DIR/interior-mutability.rs:7:18: 7:35 x:&std::cell::Cell<i32>]`\n \n error: aborting due to previous error\n "}, {"sha": "1e441a173e4be4994432bc93a2aa9c10e4e99e0b", "filename": "src/test/ui/issues/issue-21160.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/src%2Ftest%2Fui%2Fissues%2Fissue-21160.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/src%2Ftest%2Fui%2Fissues%2Fissue-21160.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21160.rs?ref=f81734bcaa9688bef78b5ef35c7d134edc0b41f4", "patch": "@@ -1,3 +1,5 @@\n+// ignore-musl\n+// ^ due to stderr output differences\n struct Bar;\n \n impl Bar {"}, {"sha": "9f88fa2fadd4cc68143b7213aced019efbf95896", "filename": "src/test/ui/issues/issue-21160.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr?ref=f81734bcaa9688bef78b5ef35c7d134edc0b41f4", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Bar: std::hash::Hash` is not satisfied\n-  --> $DIR/issue-21160.rs:8:12\n+  --> $DIR/issue-21160.rs:10:12\n    |\n LL | struct Foo(Bar);\n    |            ^^^ the trait `std::hash::Hash` is not implemented for `Bar`"}, {"sha": "2c8cf0cf4e61c3e2c4ad4b4c6533eccc652d7cae", "filename": "src/test/ui/no-send-res-ports.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/src%2Ftest%2Fui%2Fno-send-res-ports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/src%2Ftest%2Fui%2Fno-send-res-ports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-send-res-ports.rs?ref=f81734bcaa9688bef78b5ef35c7d134edc0b41f4", "patch": "@@ -1,3 +1,5 @@\n+// ignore-musl\n+// ^ due to stderr output differences\n use std::thread;\n use std::rc::Rc;\n "}, {"sha": "dc186f7c85e94725728d917c131b5815b1fc2f02", "filename": "src/test/ui/no-send-res-ports.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/src%2Ftest%2Fui%2Fno-send-res-ports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/src%2Ftest%2Fui%2Fno-send-res-ports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-send-res-ports.stderr?ref=f81734bcaa9688bef78b5ef35c7d134edc0b41f4", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `std::rc::Rc<()>` cannot be sent between threads safely\n-  --> $DIR/no-send-res-ports.rs:25:5\n+  --> $DIR/no-send-res-ports.rs:27:5\n    |\n LL |     thread::spawn(move|| {\n    |     ^^^^^^^^^^^^^ `std::rc::Rc<()>` cannot be sent between threads safely\n@@ -9,10 +9,10 @@ LL |     thread::spawn(move|| {\n LL |     F: FnOnce() -> T, F: Send + 'static, T: Send + 'static\n    |                          ---- required by this bound in `std::thread::spawn`\n    |\n-   = help: within `[closure@$DIR/no-send-res-ports.rs:25:19: 29:6 x:main::Foo]`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<()>`\n+   = help: within `[closure@$DIR/no-send-res-ports.rs:27:19: 31:6 x:main::Foo]`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<()>`\n    = note: required because it appears within the type `Port<()>`\n    = note: required because it appears within the type `main::Foo`\n-   = note: required because it appears within the type `[closure@$DIR/no-send-res-ports.rs:25:19: 29:6 x:main::Foo]`\n+   = note: required because it appears within the type `[closure@$DIR/no-send-res-ports.rs:27:19: 31:6 x:main::Foo]`\n \n error: aborting due to previous error\n "}, {"sha": "d5105b40d36f57a77f17d92f617c1569e5515821", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-test-wrong-type.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.rs?ref=f81734bcaa9688bef78b5ef35c7d134edc0b41f4", "patch": "@@ -1,4 +1,6 @@\n // compile-flags: --test\n+// ignore-musl\n+// ^ due to stderr output differences\n \n use std::num::ParseFloatError;\n "}, {"sha": "6aa95c308f24814a4f53e37d2db51f7f50724c17", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-test-wrong-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr?ref=f81734bcaa9688bef78b5ef35c7d134edc0b41f4", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `main` has invalid return type `std::result::Result<f32, std::num::ParseFloatError>`\n-  --> $DIR/termination-trait-test-wrong-type.rs:6:1\n+  --> $DIR/termination-trait-test-wrong-type.rs:8:1\n    |\n LL | / fn can_parse_zero_as_f32() -> Result<f32, ParseFloatError> {\n LL | |     \"0\".parse()"}, {"sha": "822f0c580e651a12ef8f4ef6ac10415be1dae030", "filename": "src/test/ui/traits/trait-suggest-where-clause.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.rs?ref=f81734bcaa9688bef78b5ef35c7d134edc0b41f4", "patch": "@@ -1,3 +1,5 @@\n+// ignore-musl\n+// ^ due to stderr output differences\n use std::mem;\n \n struct Misc<T:?Sized>(T);"}, {"sha": "a59306d3cb41f8ed6f85d5d5eef3590d613bea3e", "filename": "src/test/ui/traits/trait-suggest-where-clause.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f81734bcaa9688bef78b5ef35c7d134edc0b41f4/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.stderr?ref=f81734bcaa9688bef78b5ef35c7d134edc0b41f4", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the size for values of type `U` cannot be known at compilation time\n-  --> $DIR/trait-suggest-where-clause.rs:7:5\n+  --> $DIR/trait-suggest-where-clause.rs:9:5\n    |\n LL |     mem::size_of::<U>();\n    |     ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n@@ -14,7 +14,7 @@ LL | pub const fn size_of<T>() -> usize {\n    = help: consider adding a `where U: std::marker::Sized` bound\n \n error[E0277]: the size for values of type `U` cannot be known at compilation time\n-  --> $DIR/trait-suggest-where-clause.rs:10:5\n+  --> $DIR/trait-suggest-where-clause.rs:12:5\n    |\n LL |     mem::size_of::<Misc<U>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n@@ -30,7 +30,7 @@ LL | pub const fn size_of<T>() -> usize {\n    = note: required because it appears within the type `Misc<U>`\n \n error[E0277]: the trait bound `u64: std::convert::From<T>` is not satisfied\n-  --> $DIR/trait-suggest-where-clause.rs:15:5\n+  --> $DIR/trait-suggest-where-clause.rs:17:5\n    |\n LL |     <u64 as From<T>>::from;\n    |     ^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::From<T>` is not implemented for `u64`\n@@ -39,7 +39,7 @@ LL |     <u64 as From<T>>::from;\n    = note: required by `std::convert::From::from`\n \n error[E0277]: the trait bound `u64: std::convert::From<<T as std::iter::Iterator>::Item>` is not satisfied\n-  --> $DIR/trait-suggest-where-clause.rs:18:5\n+  --> $DIR/trait-suggest-where-clause.rs:20:5\n    |\n LL |     <u64 as From<<T as Iterator>::Item>>::from;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::From<<T as std::iter::Iterator>::Item>` is not implemented for `u64`\n@@ -48,15 +48,15 @@ LL |     <u64 as From<<T as Iterator>::Item>>::from;\n    = note: required by `std::convert::From::from`\n \n error[E0277]: the trait bound `Misc<_>: std::convert::From<T>` is not satisfied\n-  --> $DIR/trait-suggest-where-clause.rs:23:5\n+  --> $DIR/trait-suggest-where-clause.rs:25:5\n    |\n LL |     <Misc<_> as From<T>>::from;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::From<T>` is not implemented for `Misc<_>`\n    |\n    = note: required by `std::convert::From::from`\n \n error[E0277]: the size for values of type `[T]` cannot be known at compilation time\n-  --> $DIR/trait-suggest-where-clause.rs:28:5\n+  --> $DIR/trait-suggest-where-clause.rs:30:5\n    |\n LL |     mem::size_of::<[T]>();\n    |     ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n@@ -70,7 +70,7 @@ LL | pub const fn size_of<T>() -> usize {\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error[E0277]: the size for values of type `[&U]` cannot be known at compilation time\n-  --> $DIR/trait-suggest-where-clause.rs:31:5\n+  --> $DIR/trait-suggest-where-clause.rs:33:5\n    |\n LL |     mem::size_of::<[&U]>();\n    |     ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time"}]}