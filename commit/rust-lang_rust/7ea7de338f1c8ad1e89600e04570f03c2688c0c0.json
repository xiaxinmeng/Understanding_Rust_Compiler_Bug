{"sha": "7ea7de338f1c8ad1e89600e04570f03c2688c0c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlYTdkZTMzOGYxYzhhZDFlODk2MDBlMDQ1NzBmMDNjMjY4OGMwYzA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-01-13T17:06:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-13T17:06:19Z"}, "message": "Merge #2825\n\n2825: Some clippy lints r=matklad a=kjeremy\n\n\n\nCo-authored-by: kjeremy <kjeremy@gmail.com>", "tree": {"sha": "ebd05b4c0f0d91eda62d2767780646f95835270b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebd05b4c0f0d91eda62d2767780646f95835270b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ea7de338f1c8ad1e89600e04570f03c2688c0c0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeHKOLCRBK7hj4Ov3rIwAAdHIIAF0S6bnUWPT9CaUTLBY2HsB6\nkjz09KlTYf1VKpssfw3dWDBBD/nSItaMhsGCcj+wAru3mWbvlPWuzVV/z6+GFwsj\noeunsv6ILNY0rVw5R19rtESAYGIPNNQ/84e/fnAZ+OAbo4DRnOLhufBVqinZLHKb\nu23TbzHW6SlTyZZqbsT6QTfxU7SWYhcCwO2Gn6ZXIgFZPMtlc0lICONTZZn9lJu4\n8Fct6czOzUQ8GACpFeAZ5O+gF+BPFERLpVxz9kE9eYHBYYtbuedl+4vXeKhSWa0h\nfaBj5fRVApij1CNCvpBs3A8ysj4yotS1W99viLySFQj7tqxam+Hc+7IAd9JEEuE=\n=H8jQ\n-----END PGP SIGNATURE-----\n", "payload": "tree ebd05b4c0f0d91eda62d2767780646f95835270b\nparent 27abd4a1a57bba47c717cb55e4719d69f2c5eb5c\nparent c5c5f4260b4ab1a03d2d3f7a616202369adc9ade\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1578935179 +0000\ncommitter GitHub <noreply@github.com> 1578935179 +0000\n\nMerge #2825\n\n2825: Some clippy lints r=matklad a=kjeremy\n\n\n\nCo-authored-by: kjeremy <kjeremy@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ea7de338f1c8ad1e89600e04570f03c2688c0c0", "html_url": "https://github.com/rust-lang/rust/commit/7ea7de338f1c8ad1e89600e04570f03c2688c0c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ea7de338f1c8ad1e89600e04570f03c2688c0c0/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27abd4a1a57bba47c717cb55e4719d69f2c5eb5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/27abd4a1a57bba47c717cb55e4719d69f2c5eb5c", "html_url": "https://github.com/rust-lang/rust/commit/27abd4a1a57bba47c717cb55e4719d69f2c5eb5c"}, {"sha": "c5c5f4260b4ab1a03d2d3f7a616202369adc9ade", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5c5f4260b4ab1a03d2d3f7a616202369adc9ade", "html_url": "https://github.com/rust-lang/rust/commit/c5c5f4260b4ab1a03d2d3f7a616202369adc9ade"}], "stats": {"total": 89, "additions": 44, "deletions": 45}, "files": [{"sha": "9b89557104a38579806e752352925883719f7bc5", "filename": "crates/ra_assists/src/assists/add_custom_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ea7de338f1c8ad1e89600e04570f03c2688c0c0/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_custom_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ea7de338f1c8ad1e89600e04570f03c2688c0c0/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_custom_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_custom_impl.rs?ref=7ea7de338f1c8ad1e89600e04570f03c2688c0c0", "patch": "@@ -10,7 +10,7 @@ use ra_syntax::{\n     TextRange, TextUnit,\n };\n \n-const DERIVE_TRAIT: &'static str = \"derive\";\n+const DERIVE_TRAIT: &str = \"derive\";\n \n // Assist: add_custom_impl\n //"}, {"sha": "806612c2ce129172d22330dac9a6485a2b2e2c42", "filename": "crates/ra_cli/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ea7de338f1c8ad1e89600e04570f03c2688c0c0/crates%2Fra_cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ea7de338f1c8ad1e89600e04570f03c2688c0c0/crates%2Fra_cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fmain.rs?ref=7ea7de338f1c8ad1e89600e04570f03c2688c0c0", "patch": "@@ -22,7 +22,7 @@ pub enum Verbosity {\n }\n \n impl Verbosity {\n-    fn is_verbose(&self) -> bool {\n+    fn is_verbose(self) -> bool {\n         match self {\n             Verbosity::Verbose => true,\n             _ => false,"}, {"sha": "aa5d60c7b5a36b0af2e329e33191aaff1fa572b0", "filename": "crates/ra_ide/src/call_hierarchy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ea7de338f1c8ad1e89600e04570f03c2688c0c0/crates%2Fra_ide%2Fsrc%2Fcall_hierarchy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ea7de338f1c8ad1e89600e04570f03c2688c0c0/crates%2Fra_ide%2Fsrc%2Fcall_hierarchy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcall_hierarchy.rs?ref=7ea7de338f1c8ad1e89600e04570f03c2688c0c0", "patch": "@@ -121,7 +121,7 @@ pub(crate) fn outgoing_calls(db: &RootDatabase, position: FilePosition) -> Optio\n                     Some(macro_def.to_nav(db))\n                 }\n             } {\n-                Some((func_target.clone(), name_ref.value.text_range()))\n+                Some((func_target, name_ref.value.text_range()))\n             } else {\n                 None\n             }"}, {"sha": "72a68522e507d0f54329977513fb3497ec940211", "filename": "crates/ra_ide/src/call_info.rs", "status": "modified", "additions": 31, "deletions": 28, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/7ea7de338f1c8ad1e89600e04570f03c2688c0c0/crates%2Fra_ide%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ea7de338f1c8ad1e89600e04570f03c2688c0c0/crates%2Fra_ide%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcall_info.rs?ref=7ea7de338f1c8ad1e89600e04570f03c2688c0c0", "patch": "@@ -1,10 +1,10 @@\n //! FIXME: write short doc here\n-\n use hir::db::AstDatabase;\n use ra_syntax::{\n     ast::{self, ArgListOwner},\n     match_ast, AstNode, SyntaxNode,\n };\n+\n use test_utils::tested_by;\n \n use crate::{\n@@ -51,36 +51,39 @@ pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<Cal\n     // If we have a calling expression let's find which argument we are on\n     let num_params = call_info.parameters().len();\n \n-    if num_params == 1 {\n-        if !has_self {\n-            call_info.active_parameter = Some(0);\n-        }\n-    } else if num_params > 1 {\n-        // Count how many parameters into the call we are.\n-        if let Some(arg_list) = calling_node.arg_list() {\n-            // Number of arguments specified at the call site\n-            let num_args_at_callsite = arg_list.args().count();\n-\n-            let arg_list_range = arg_list.syntax().text_range();\n-            if !arg_list_range.contains_inclusive(position.offset) {\n-                tested_by!(call_info_bad_offset);\n-                return None;\n+    match num_params {\n+        0 => (),\n+        1 => {\n+            if !has_self {\n+                call_info.active_parameter = Some(0);\n             }\n+        }\n+        _ => {\n+            if let Some(arg_list) = calling_node.arg_list() {\n+                // Number of arguments specified at the call site\n+                let num_args_at_callsite = arg_list.args().count();\n+\n+                let arg_list_range = arg_list.syntax().text_range();\n+                if !arg_list_range.contains_inclusive(position.offset) {\n+                    tested_by!(call_info_bad_offset);\n+                    return None;\n+                }\n \n-            let mut param = std::cmp::min(\n-                num_args_at_callsite,\n-                arg_list\n-                    .args()\n-                    .take_while(|arg| arg.syntax().text_range().end() < position.offset)\n-                    .count(),\n-            );\n-\n-            // If we are in a method account for `self`\n-            if has_self {\n-                param += 1;\n-            }\n+                let mut param = std::cmp::min(\n+                    num_args_at_callsite,\n+                    arg_list\n+                        .args()\n+                        .take_while(|arg| arg.syntax().text_range().end() < position.offset)\n+                        .count(),\n+                );\n+\n+                // If we are in a method account for `self`\n+                if has_self {\n+                    param += 1;\n+                }\n \n-            call_info.active_parameter = Some(param);\n+                call_info.active_parameter = Some(param);\n+            }\n         }\n     }\n "}, {"sha": "0dce9dc2d8878cb481751a890d99fedd82829cc6", "filename": "crates/ra_ide/src/completion/complete_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ea7de338f1c8ad1e89600e04570f03c2688c0c0/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ea7de338f1c8ad1e89600e04570f03c2688c0c0/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=7ea7de338f1c8ad1e89600e04570f03c2688c0c0", "patch": "@@ -26,7 +26,7 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n                     }\n                     if let ScopeDef::Unknown = def {\n                         if let Some(name_ref) = ctx.name_ref_syntax.as_ref() {\n-                            if &name_ref.syntax().text() == name.to_string().as_str() {\n+                            if name_ref.syntax().text() == name.to_string().as_str() {\n                                 // for `use self::foo<|>`, don't suggest `foo` as a completion\n                                 tested_by!(dont_complete_current_use);\n                                 continue;"}, {"sha": "930e0c4c243108cef72c3c311619853da4323cf3", "filename": "crates/ra_ide/src/extend_selection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ea7de338f1c8ad1e89600e04570f03c2688c0c0/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ea7de338f1c8ad1e89600e04570f03c2688c0c0/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs?ref=7ea7de338f1c8ad1e89600e04570f03c2688c0c0", "patch": "@@ -339,7 +339,7 @@ mod tests {\n         let (cursor, before) = extract_offset(before);\n         let (analysis, file_id) = single_file(&before);\n         let range = TextRange::offset_len(cursor, 0.into());\n-        let mut frange = FileRange { file_id: file_id, range };\n+        let mut frange = FileRange { file_id, range };\n \n         for &after in afters {\n             frange.range = analysis.extend_selection(frange).unwrap();"}, {"sha": "2c753dade2909fc763c3569bde89515b0ab47a00", "filename": "crates/ra_ide/src/references.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7ea7de338f1c8ad1e89600e04570f03c2688c0c0/crates%2Fra_ide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ea7de338f1c8ad1e89600e04570f03c2688c0c0/crates%2Fra_ide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences.rs?ref=7ea7de338f1c8ad1e89600e04570f03c2688c0c0", "patch": "@@ -166,7 +166,7 @@ pub(crate) fn find_all_refs(\n     Some(RangeInfo::new(range, ReferenceSearchResult { declaration, references }))\n }\n \n-fn find_name<'a>(\n+fn find_name(\n     db: &RootDatabase,\n     syntax: &SyntaxNode,\n     position: FilePosition,\n@@ -253,13 +253,10 @@ fn decl_access(\n     let stmt = find_node_at_offset::<ast::LetStmt>(syntax, range.start())?;\n     if let Some(_) = stmt.initializer() {\n         let pat = stmt.pat()?;\n-        match pat {\n-            ast::Pat::BindPat(it) => {\n-                if it.name()?.text().as_str() == name {\n-                    return Some(ReferenceAccess::Write);\n-                }\n+        if let ast::Pat::BindPat(it) = pat {\n+            if it.name()?.text().as_str() == name {\n+                return Some(ReferenceAccess::Write);\n             }\n-            _ => {}\n         }\n     }\n \n@@ -286,7 +283,7 @@ fn reference_access(kind: &NameKind, name_ref: &ast::NameRef) -> Option<Referenc\n                             }\n                         }\n                     }\n-                    return Some(ReferenceAccess::Read);\n+                    Some(ReferenceAccess::Read)\n                 },\n                 _ => {None}\n             }"}, {"sha": "f8211a74692b6a669214425357da8002575bdf9e", "filename": "crates/ra_ide/src/references/search_scope.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ea7de338f1c8ad1e89600e04570f03c2688c0c0/crates%2Fra_ide%2Fsrc%2Freferences%2Fsearch_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ea7de338f1c8ad1e89600e04570f03c2688c0c0/crates%2Fra_ide%2Fsrc%2Freferences%2Fsearch_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Fsearch_scope.rs?ref=7ea7de338f1c8ad1e89600e04570f03c2688c0c0", "patch": "@@ -82,8 +82,7 @@ impl NameDefinition {\n             return SearchScope::new(res);\n         }\n \n-        let vis =\n-            self.visibility.as_ref().map(|v| v.syntax().to_string()).unwrap_or(\"\".to_string());\n+        let vis = self.visibility.as_ref().map(|v| v.syntax().to_string()).unwrap_or_default();\n \n         if vis.as_str() == \"pub(super)\" {\n             if let Some(parent_module) = self.container.parent(db) {"}, {"sha": "6da4b1309acbc8dd3e5fc6b3af28819e5e57bbd3", "filename": "crates/ra_syntax/src/ast/expr_extensions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ea7de338f1c8ad1e89600e04570f03c2688c0c0/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ea7de338f1c8ad1e89600e04570f03c2688c0c0/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs?ref=7ea7de338f1c8ad1e89600e04570f03c2688c0c0", "patch": "@@ -127,8 +127,8 @@ pub enum BinOp {\n }\n \n impl BinOp {\n-    pub fn is_assignment(&self) -> bool {\n-        match *self {\n+    pub fn is_assignment(self) -> bool {\n+        match self {\n             BinOp::Assignment\n             | BinOp::AddAssign\n             | BinOp::DivAssign"}]}