{"sha": "f5be06fa1fed6d9f9467bc644e78292bf94b30f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1YmUwNmZhMWZlZDZkOWY5NDY3YmM2NDRlNzgyOTJiZjk0YjMwZjQ=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-07-24T16:35:44Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-07-25T19:12:25Z"}, "message": "Added infrastructure to spin for a bit on recv. A spin count > 0 makes bench/pingpong.rs about 10x faster, but makes msgsend-ring-pipes unbearably slow.", "tree": {"sha": "fe19b84c582dbca06f1fbd7f3106eb4ba158efa7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe19b84c582dbca06f1fbd7f3106eb4ba158efa7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5be06fa1fed6d9f9467bc644e78292bf94b30f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5be06fa1fed6d9f9467bc644e78292bf94b30f4", "html_url": "https://github.com/rust-lang/rust/commit/f5be06fa1fed6d9f9467bc644e78292bf94b30f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5be06fa1fed6d9f9467bc644e78292bf94b30f4/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35576168dc639c47c354615def5362c7a441de81", "url": "https://api.github.com/repos/rust-lang/rust/commits/35576168dc639c47c354615def5362c7a441de81", "html_url": "https://github.com/rust-lang/rust/commit/35576168dc639c47c354615def5362c7a441de81"}], "stats": {"total": 22, "additions": 18, "deletions": 4}, "files": [{"sha": "d46452097bd631645193244406c84e984881e728", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f5be06fa1fed6d9f9467bc644e78292bf94b30f4/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5be06fa1fed6d9f9467bc644e78292bf94b30f4/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=f5be06fa1fed6d9f9467bc644e78292bf94b30f4", "patch": "@@ -20,6 +20,8 @@ export select, select2, selecti, select2i, selectable;\n export spawn_service, spawn_service_recv;\n export stream, port, chan, shared_chan, port_set, channel;\n \n+const SPIN_COUNT: uint = 0;\n+\n macro_rules! move {\n     { $x:expr } => { unsafe { let y <- *ptr::addr_of($x); y } }\n }\n@@ -272,15 +274,15 @@ unsafe fn get_buffer<T: send>(p: *packet_header) -> ~buffer<T> {\n class buffer_resource<T: send> {\n     let buffer: ~buffer<T>;\n     new(+b: ~buffer<T>) {\n-        let p = ptr::addr_of(*b);\n+        //let p = ptr::addr_of(*b);\n         //#error(\"take %?\", p);\n         atomic_add_acq(b.header.ref_count, 1);\n         self.buffer = b;\n     }\n \n     drop unsafe {\n         let b = move!{self.buffer};\n-        let p = ptr::addr_of(*b);\n+        //let p = ptr::addr_of(*b);\n         //#error(\"drop %?\", p);\n         let old_count = atomic_sub_rel(b.header.ref_count, 1);\n         //let old_count = atomic_xchng_rel(b.header.ref_count, 0);\n@@ -345,14 +347,26 @@ fn try_recv<T: send, Tbuffer: send>(-p: recv_packet_buffered<T, Tbuffer>)\n     rustrt::task_clear_event_reject(this);\n     p.header.blocked_task = some(this);\n     let mut first = true;\n+    let mut count = SPIN_COUNT;\n     loop {\n         rustrt::task_clear_event_reject(this);\n         let old_state = swap_state_acq(p.header.state,\n                                        blocked);\n         alt old_state {\n           empty {\n             #debug(\"no data available on %?, going to sleep.\", p_);\n-            wait_event(this);\n+            if count == 0 {\n+                wait_event(this);\n+            }\n+            else {\n+                count -= 1;\n+                // FIXME (#524): Putting the yield here destroys a lot\n+                // of the benefit of spinning, since we still go into\n+                // the scheduler at every iteration. However, without\n+                // this everything spins too much because we end up\n+                // sometimes blocking the thing we are waiting on.\n+                task::yield();\n+            }\n             #debug(\"woke up, p.state = %?\", copy p.header.state);\n           }\n           blocked {"}, {"sha": "d6bd85622852c050a50dde061d0e576dce1cf9f9", "filename": "src/test/bench/pingpong.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5be06fa1fed6d9f9467bc644e78292bf94b30f4/src%2Ftest%2Fbench%2Fpingpong.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5be06fa1fed6d9f9467bc644e78292bf94b30f4/src%2Ftest%2Fbench%2Fpingpong.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fpingpong.rs?ref=f5be06fa1fed6d9f9467bc644e78292bf94b30f4", "patch": "@@ -137,7 +137,7 @@ fn main() {\n     let unbounded = do timeit { unbounded(count) };\n \n     io::println(#fmt(\"count: %?\\n\", count));\n-    io::println(#fmt(\"bounded: %? s\\t(%? \u03bcs/message)\",\n+    io::println(#fmt(\"bounded:   %? s\\t(%? \u03bcs/message)\",\n                      bounded, bounded * 1000000. / (count as float)));\n     io::println(#fmt(\"unbounded: %? s\\t(%? \u03bcs/message)\",\n                      unbounded, unbounded * 1000000. / (count as float)));"}]}