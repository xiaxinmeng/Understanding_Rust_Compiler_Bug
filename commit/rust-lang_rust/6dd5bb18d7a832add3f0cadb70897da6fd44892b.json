{"sha": "6dd5bb18d7a832add3f0cadb70897da6fd44892b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkZDViYjE4ZDdhODMyYWRkM2YwY2FkYjcwODk3ZGE2ZmQ0NDg5MmI=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-10-25T02:23:45Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-10-25T20:50:51Z"}, "message": "more reviewer changes", "tree": {"sha": "69272f8552b8d145bc6161ef17fa2105422208d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69272f8552b8d145bc6161ef17fa2105422208d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6dd5bb18d7a832add3f0cadb70897da6fd44892b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6dd5bb18d7a832add3f0cadb70897da6fd44892b", "html_url": "https://github.com/rust-lang/rust/commit/6dd5bb18d7a832add3f0cadb70897da6fd44892b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6dd5bb18d7a832add3f0cadb70897da6fd44892b/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63ac2aae51034f93c23cffde7be711a86f9d139f", "url": "https://api.github.com/repos/rust-lang/rust/commits/63ac2aae51034f93c23cffde7be711a86f9d139f", "html_url": "https://github.com/rust-lang/rust/commit/63ac2aae51034f93c23cffde7be711a86f9d139f"}], "stats": {"total": 24, "additions": 8, "deletions": 16}, "files": [{"sha": "6370a52018338842ec60d80a8414032c4745fcc2", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6dd5bb18d7a832add3f0cadb70897da6fd44892b/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dd5bb18d7a832add3f0cadb70897da6fd44892b/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=6dd5bb18d7a832add3f0cadb70897da6fd44892b", "patch": "@@ -147,7 +147,6 @@ pub trait Resolver {\n     fn resolve_hir_path(\n         &mut self,\n         path: &ast::Path,\n-        args: Option<P<hir::GenericArgs>>,\n         is_value: bool,\n     ) -> hir::Path;\n \n@@ -168,7 +167,6 @@ pub trait Resolver {\n         span: Span,\n         crate_root: Option<&str>,\n         components: &[&str],\n-        args: Option<P<hir::GenericArgs>>,\n         is_value: bool,\n     ) -> hir::Path;\n }\n@@ -4856,7 +4854,9 @@ impl<'a> LoweringContext<'a> {\n         is_value: bool\n     ) -> hir::Path {\n         let mut path = self.resolver\n-            .resolve_str_path(span, self.crate_root, components, params, is_value);\n+            .resolve_str_path(span, self.crate_root, components, is_value);\n+        path.segments.last_mut().unwrap().args = params;\n+\n \n         for seg in path.segments.iter_mut() {\n             if let Some(id) = seg.id {"}, {"sha": "546c5a5ed3d6cadbcf2c019f1dc356fd67b96a29", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6dd5bb18d7a832add3f0cadb70897da6fd44892b/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dd5bb18d7a832add3f0cadb70897da6fd44892b/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=6dd5bb18d7a832add3f0cadb70897da6fd44892b", "patch": "@@ -1574,10 +1574,9 @@ impl<'a, 'cl> hir::lowering::Resolver for Resolver<'a, 'cl> {\n     fn resolve_hir_path(\n         &mut self,\n         path: &ast::Path,\n-        args: Option<P<hir::GenericArgs>>,\n         is_value: bool,\n     ) -> hir::Path {\n-        self.resolve_hir_path_cb(path, args, is_value,\n+        self.resolve_hir_path_cb(path, is_value,\n                                  |resolver, span, error| resolve_error(resolver, span, error))\n     }\n \n@@ -1586,7 +1585,6 @@ impl<'a, 'cl> hir::lowering::Resolver for Resolver<'a, 'cl> {\n         span: Span,\n         crate_root: Option<&str>,\n         components: &[&str],\n-        args: Option<P<hir::GenericArgs>>,\n         is_value: bool\n     ) -> hir::Path {\n         let segments = iter::once(keywords::CrateRoot.ident())\n@@ -1602,7 +1600,7 @@ impl<'a, 'cl> hir::lowering::Resolver for Resolver<'a, 'cl> {\n             segments,\n         };\n \n-        self.resolve_hir_path(&path, args, is_value)\n+        self.resolve_hir_path(&path, is_value)\n     }\n \n     fn get_resolution(&mut self, id: NodeId) -> Option<PathResolution> {\n@@ -1648,7 +1646,7 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n                     .collect(),\n             }\n         };\n-        let path = self.resolve_hir_path_cb(&path, None, is_value, |_, _, _| errored = true);\n+        let path = self.resolve_hir_path_cb(&path, is_value, |_, _, _| errored = true);\n         if errored || path.def == Def::Err {\n             Err(())\n         } else {\n@@ -1660,7 +1658,6 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n     fn resolve_hir_path_cb<F>(\n         &mut self,\n         path: &ast::Path,\n-        args: Option<P<hir::GenericArgs>>,\n         is_value: bool,\n         error_callback: F,\n     ) -> hir::Path\n@@ -1697,12 +1694,11 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n             }\n         };\n \n-        let mut segments: Vec<_> = segments.iter().map(|seg| {\n+        let segments: Vec<_> = segments.iter().map(|seg| {\n             let mut hir_seg = hir::PathSegment::from_ident(seg.ident);\n             hir_seg.def = Some(self.def_map.get(&seg.id).map_or(Def::Err, |p| p.base_def()));\n             hir_seg\n         }).collect();\n-        segments.last_mut().unwrap().args = args;\n         hir::Path {\n             span,\n             def,"}, {"sha": "ee82b9860058a1fd1b68db5581aa84957d93871e", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6dd5bb18d7a832add3f0cadb70897da6fd44892b/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dd5bb18d7a832add3f0cadb70897da6fd44892b/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=6dd5bb18d7a832add3f0cadb70897da6fd44892b", "patch": "@@ -145,11 +145,7 @@ impl PathSegment {\n         PathSegment { ident, id: DUMMY_NODE_ID, args: None }\n     }\n     pub fn crate_root(span: Span) -> Self {\n-        PathSegment {\n-            ident: Ident::new(keywords::CrateRoot.name(), span),\n-            id: DUMMY_NODE_ID,\n-            args: None,\n-        }\n+        PathSegment::from_ident(Ident::new(keywords::CrateRoot.name(), span))\n     }\n }\n "}]}