{"sha": "0df1ddc185af0d1b8d476851a50c42a31ebbb741", "node_id": "C_kwDOAAsO6NoAKDBkZjFkZGMxODVhZjBkMWI4ZDQ3Njg1MWE1MGM0MmEzMWViYmI3NDE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-13T01:19:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-13T01:19:05Z"}, "message": "Auto merge of #99556 - davidtwco:collapse-debuginfo, r=wesleywiser\n\nssa: implement `#[collapse_debuginfo]`\n\ncc #39153 rust-lang/compiler-team#386\n\nDebuginfo line information for macro invocations are collapsed by default - line information are replaced by the line of the outermost expansion site. Using `-Zdebug-macros` disables this behaviour.\n\nWhen the `collapse_debuginfo` feature is enabled, the default behaviour is reversed so that debuginfo is not collapsed by default. In addition, the `#[collapse_debuginfo]` attribute is available and can be applied to macro definitions which will then have their line information collapsed.\n\nr? rust-lang/wg-debugging", "tree": {"sha": "3f8be06a747146cf6d86ba4788ddab17b166ce91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f8be06a747146cf6d86ba4788ddab17b166ce91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0df1ddc185af0d1b8d476851a50c42a31ebbb741", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0df1ddc185af0d1b8d476851a50c42a31ebbb741", "html_url": "https://github.com/rust-lang/rust/commit/0df1ddc185af0d1b8d476851a50c42a31ebbb741", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0df1ddc185af0d1b8d476851a50c42a31ebbb741/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "089584db01c85c24cc98a532eb7d02f651a2c137", "url": "https://api.github.com/repos/rust-lang/rust/commits/089584db01c85c24cc98a532eb7d02f651a2c137", "html_url": "https://github.com/rust-lang/rust/commit/089584db01c85c24cc98a532eb7d02f651a2c137"}, {"sha": "38958aa8bdd2b46dd7f9213bda1c9c6433282a68", "url": "https://api.github.com/repos/rust-lang/rust/commits/38958aa8bdd2b46dd7f9213bda1c9c6433282a68", "html_url": "https://github.com/rust-lang/rust/commit/38958aa8bdd2b46dd7f9213bda1c9c6433282a68"}], "stats": {"total": 736, "additions": 700, "deletions": 36}, "files": [{"sha": "463de6a91c74c62f620eaa69c715133b8707f3ad", "filename": "compiler/rustc_codegen_cranelift/src/debuginfo/line_info.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0df1ddc185af0d1b8d476851a50c42a31ebbb741/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fline_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df1ddc185af0d1b8d476851a50c42a31ebbb741/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fline_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fline_info.rs?ref=0df1ddc185af0d1b8d476851a50c42a31ebbb741", "patch": "@@ -68,9 +68,9 @@ impl DebugContext {\n     ) -> (Lrc<SourceFile>, u64, u64) {\n         // Based on https://github.com/rust-lang/rust/blob/e369d87b015a84653343032833d65d0545fd3f26/src/librustc_codegen_ssa/mir/mod.rs#L116-L131\n         // In order to have a good line stepping behavior in debugger, we overwrite debug\n-        // locations of macro expansions with that of the outermost expansion site\n-        // (unless the crate is being compiled with `-Z debug-macros`).\n-        let span = if !span.from_expansion() || tcx.sess.opts.unstable_opts.debug_macros {\n+        // locations of macro expansions with that of the outermost expansion site (when the macro is\n+        // annotated with `#[collapse_debuginfo]` or when `-Zdebug-macros` is provided).\n+        let span = if tcx.should_collapse_debuginfo(span) {\n             span\n         } else {\n             // Walk up the macro expansion chain until we reach a non-expanded span."}, {"sha": "157c1c82311dcff335adbf9aa5b10a54a7fa669e", "filename": "compiler/rustc_codegen_ssa/src/mir/debuginfo.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0df1ddc185af0d1b8d476851a50c42a31ebbb741/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df1ddc185af0d1b8d476851a50c42a31ebbb741/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs?ref=0df1ddc185af0d1b8d476851a50c42a31ebbb741", "patch": "@@ -3,7 +3,7 @@ use rustc_index::vec::IndexVec;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir;\n use rustc_middle::ty;\n-use rustc_middle::ty::layout::LayoutOf;\n+use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf};\n use rustc_session::config::DebugInfo;\n use rustc_span::symbol::{kw, Symbol};\n use rustc_span::{BytePos, Span};\n@@ -93,15 +93,15 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     }\n \n     /// In order to have a good line stepping behavior in debugger, we overwrite debug\n-    /// locations of macro expansions with that of the outermost expansion site\n-    /// (unless the crate is being compiled with `-Z debug-macros`).\n+    /// locations of macro expansions with that of the outermost expansion site (when the macro is\n+    /// annotated with `#[collapse_debuginfo]` or when `-Zdebug-macros` is provided).\n     fn adjust_span_for_debugging(&self, mut span: Span) -> Span {\n         // Bail out if debug info emission is not enabled.\n         if self.debug_context.is_none() {\n             return span;\n         }\n \n-        if span.from_expansion() && !self.cx.sess().opts.unstable_opts.debug_macros {\n+        if self.cx.tcx().should_collapse_debuginfo(span) {\n             // Walk up the macro expansion chain until we reach a non-expanded span.\n             // We also stop at the function body level because no line stepping can occur\n             // at the level above that."}, {"sha": "556a6452f1a19947f1d1a07492940d75d631d5e5", "filename": "compiler/rustc_error_messages/locales/en-US/passes.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0df1ddc185af0d1b8d476851a50c42a31ebbb741/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/0df1ddc185af0d1b8d476851a50c42a31ebbb741/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl?ref=0df1ddc185af0d1b8d476851a50c42a31ebbb741", "patch": "@@ -265,3 +265,6 @@ passes_rustc_lint_opt_deny_field_access = `#[rustc_lint_opt_deny_field_access]`\n \n passes_link_ordinal = attribute should be applied to a foreign function or static\n     .label = not a foreign function or static\n+\n+passes_collapse_debuginfo = `collapse_debuginfo` attribute should be applied to macro definitions\n+    .label = not a macro definition"}, {"sha": "e1da3ecdec7f4aed63508aa92d5517b2992bc146", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0df1ddc185af0d1b8d476851a50c42a31ebbb741/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df1ddc185af0d1b8d476851a50c42a31ebbb741/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=0df1ddc185af0d1b8d476851a50c42a31ebbb741", "patch": "@@ -693,10 +693,6 @@ pub struct SyntaxExtension {\n     pub span: Span,\n     /// List of unstable features that are treated as stable inside this macro.\n     pub allow_internal_unstable: Option<Lrc<[Symbol]>>,\n-    /// Suppresses the `unsafe_code` lint for code produced by this macro.\n-    pub allow_internal_unsafe: bool,\n-    /// Enables the macro helper hack (`ident!(...)` -> `$crate::ident!(...)`) for this macro.\n-    pub local_inner_macros: bool,\n     /// The macro's stability info.\n     pub stability: Option<Stability>,\n     /// The macro's deprecation info.\n@@ -708,6 +704,13 @@ pub struct SyntaxExtension {\n     /// Built-in macros have a couple of special properties like availability\n     /// in `#[no_implicit_prelude]` modules, so we have to keep this flag.\n     pub builtin_name: Option<Symbol>,\n+    /// Suppresses the `unsafe_code` lint for code produced by this macro.\n+    pub allow_internal_unsafe: bool,\n+    /// Enables the macro helper hack (`ident!(...)` -> `$crate::ident!(...)`) for this macro.\n+    pub local_inner_macros: bool,\n+    /// Should debuginfo for the macro be collapsed to the outermost expansion site (in other\n+    /// words, was the macro definition annotated with `#[collapse_debuginfo]`)?\n+    pub collapse_debuginfo: bool,\n }\n \n impl SyntaxExtension {\n@@ -729,14 +732,15 @@ impl SyntaxExtension {\n         SyntaxExtension {\n             span: DUMMY_SP,\n             allow_internal_unstable: None,\n-            allow_internal_unsafe: false,\n-            local_inner_macros: false,\n             stability: None,\n             deprecation: None,\n             helper_attrs: Vec::new(),\n             edition,\n             builtin_name: None,\n             kind,\n+            allow_internal_unsafe: false,\n+            local_inner_macros: false,\n+            collapse_debuginfo: false,\n         }\n     }\n \n@@ -754,12 +758,13 @@ impl SyntaxExtension {\n         let allow_internal_unstable =\n             attr::allow_internal_unstable(sess, &attrs).collect::<Vec<Symbol>>();\n \n-        let mut local_inner_macros = false;\n-        if let Some(macro_export) = sess.find_by_name(attrs, sym::macro_export) {\n-            if let Some(l) = macro_export.meta_item_list() {\n-                local_inner_macros = attr::list_contains_name(&l, sym::local_inner_macros);\n-            }\n-        }\n+        let allow_internal_unsafe = sess.contains_name(attrs, sym::allow_internal_unsafe);\n+        let local_inner_macros = sess\n+            .find_by_name(attrs, sym::macro_export)\n+            .and_then(|macro_export| macro_export.meta_item_list())\n+            .map_or(false, |l| attr::list_contains_name(&l, sym::local_inner_macros));\n+        let collapse_debuginfo = sess.contains_name(attrs, sym::collapse_debuginfo);\n+        tracing::debug!(?local_inner_macros, ?collapse_debuginfo, ?allow_internal_unsafe);\n \n         let (builtin_name, helper_attrs) = sess\n             .find_by_name(attrs, sym::rustc_builtin_macro)\n@@ -801,13 +806,14 @@ impl SyntaxExtension {\n             span,\n             allow_internal_unstable: (!allow_internal_unstable.is_empty())\n                 .then(|| allow_internal_unstable.into()),\n-            allow_internal_unsafe: sess.contains_name(attrs, sym::allow_internal_unsafe),\n-            local_inner_macros,\n             stability: stability.map(|(s, _)| s),\n             deprecation: attr::find_deprecation(&sess, attrs).map(|(d, _)| d),\n             helper_attrs,\n             edition,\n             builtin_name,\n+            allow_internal_unsafe,\n+            local_inner_macros,\n+            collapse_debuginfo,\n         }\n     }\n \n@@ -852,11 +858,12 @@ impl SyntaxExtension {\n             call_site,\n             self.span,\n             self.allow_internal_unstable.clone(),\n-            self.allow_internal_unsafe,\n-            self.local_inner_macros,\n             self.edition,\n             macro_def_id,\n             parent_module,\n+            self.allow_internal_unsafe,\n+            self.local_inner_macros,\n+            self.collapse_debuginfo,\n         )\n     }\n }"}, {"sha": "9232b774e2678cb79c5cab4e27f2247a325b7d5d", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0df1ddc185af0d1b8d476851a50c42a31ebbb741/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df1ddc185af0d1b8d476851a50c42a31ebbb741/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=0df1ddc185af0d1b8d476851a50c42a31ebbb741", "patch": "@@ -338,6 +338,8 @@ declare_features! (\n     (active, closure_track_caller, \"1.57.0\", Some(87417), None),\n     /// Allows to use the `#[cmse_nonsecure_entry]` attribute.\n     (active, cmse_nonsecure_entry, \"1.48.0\", Some(75835), None),\n+    /// Allows use of the `#[collapse_debuginfo]` attribute.\n+    (active, collapse_debuginfo, \"CURRENT_RUSTC_VERSION\", Some(100758), None),\n     /// Allows `async {}` expressions in const contexts.\n     (active, const_async_blocks, \"1.53.0\", Some(85368), None),\n     // Allows limiting the evaluation steps of const expressions"}, {"sha": "b50c972e6f6c0eda0ece654fe1e8b3a7f404cb86", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0df1ddc185af0d1b8d476851a50c42a31ebbb741/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df1ddc185af0d1b8d476851a50c42a31ebbb741/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=0df1ddc185af0d1b8d476851a50c42a31ebbb741", "patch": "@@ -478,6 +478,12 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         experimental!(deprecated_safe),\n     ),\n \n+    // `#[collapse_debuginfo]`\n+    gated!(\n+        collapse_debuginfo, Normal, template!(Word), WarnFollowing,\n+        experimental!(collapse_debuginfo)\n+    ),\n+\n     // ==========================================================================\n     // Internal attributes: Stability, deprecation, and unsafe:\n     // =========================================================================="}, {"sha": "94eddef944a02ed399169a15ca495ce331fc614a", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0df1ddc185af0d1b8d476851a50c42a31ebbb741/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df1ddc185af0d1b8d476851a50c42a31ebbb741/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=0df1ddc185af0d1b8d476851a50c42a31ebbb741", "patch": "@@ -1590,7 +1590,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         })\n     }\n \n-    // Returns the `DefId` and the `BoundRegionKind` corresponding to the given region.\n+    /// Returns the `DefId` and the `BoundRegionKind` corresponding to the given region.\n     pub fn is_suitable_region(self, region: Region<'tcx>) -> Option<FreeRegionInfo> {\n         let (suitable_region_binding_scope, bound_region) = match *region {\n             ty::ReFree(ref free_region) => {"}, {"sha": "3ff6264710565504db9f62569e072b1a60e4fa03", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0df1ddc185af0d1b8d476851a50c42a31ebbb741/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df1ddc185af0d1b8d476851a50c42a31ebbb741/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=0df1ddc185af0d1b8d476851a50c42a31ebbb741", "patch": "@@ -2470,6 +2470,23 @@ impl<'tcx> TyCtxt<'tcx> {\n         (ident, scope)\n     }\n \n+    /// Returns `true` if the debuginfo for `span` should be collapsed to the outermost expansion\n+    /// site. Only applies when `Span` is the result of macro expansion.\n+    ///\n+    /// - If the `collapse_debuginfo` feature is enabled then debuginfo is not collapsed by default\n+    ///   and only when a macro definition is annotated with `#[collapse_debuginfo]`.\n+    /// - If `collapse_debuginfo` is not enabled, then debuginfo is collapsed by default.\n+    ///\n+    /// When `-Zdebug-macros` is provided then debuginfo will never be collapsed.\n+    pub fn should_collapse_debuginfo(self, span: Span) -> bool {\n+        !self.sess.opts.unstable_opts.debug_macros\n+            && if self.features().collapse_debuginfo {\n+                span.in_macro_expansion_with_collapse_debuginfo()\n+            } else {\n+                span.from_expansion()\n+            }\n+    }\n+\n     pub fn is_object_safe(self, key: DefId) -> bool {\n         self.object_safety_violations(key).is_empty()\n     }"}, {"sha": "ebe4d2e9dd0bd9d8702e01d99b057c75fc0c1d89", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0df1ddc185af0d1b8d476851a50c42a31ebbb741/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df1ddc185af0d1b8d476851a50c42a31ebbb741/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=0df1ddc185af0d1b8d476851a50c42a31ebbb741", "patch": "@@ -131,6 +131,7 @@ impl CheckAttrVisitor<'_> {\n                 | sym::rustc_if_this_changed\n                 | sym::rustc_then_this_would_need => self.check_rustc_dirty_clean(&attr),\n                 sym::cmse_nonsecure_entry => self.check_cmse_nonsecure_entry(attr, span, target),\n+                sym::collapse_debuginfo => self.check_collapse_debuginfo(attr, span, target),\n                 sym::const_trait => self.check_const_trait(attr, span, target),\n                 sym::must_not_suspend => self.check_must_not_suspend(&attr, span, target),\n                 sym::must_use => self.check_must_use(hir_id, &attr, span, target),\n@@ -431,6 +432,19 @@ impl CheckAttrVisitor<'_> {\n         }\n     }\n \n+    /// Checks if `#[collapse_debuginfo]` is applied to a macro.\n+    fn check_collapse_debuginfo(&self, attr: &Attribute, span: Span, target: Target) -> bool {\n+        match target {\n+            Target::MacroDef => true,\n+            _ => {\n+                self.tcx\n+                    .sess\n+                    .emit_err(errors::CollapseDebuginfo { attr_span: attr.span, defn_span: span });\n+                false\n+            }\n+        }\n+    }\n+\n     /// Checks if a `#[track_caller]` is applied to a non-naked function. Returns `true` if valid.\n     fn check_track_caller(\n         &self,"}, {"sha": "96cc8ae988cd57368a7473ce33e8dffca260a886", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0df1ddc185af0d1b8d476851a50c42a31ebbb741/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df1ddc185af0d1b8d476851a50c42a31ebbb741/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=0df1ddc185af0d1b8d476851a50c42a31ebbb741", "patch": "@@ -649,3 +649,12 @@ pub struct RustcLintOptDenyFieldAccess {\n     #[label]\n     pub span: Span,\n }\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(passes::collapse_debuginfo)]\n+pub struct CollapseDebuginfo {\n+    #[primary_span]\n+    pub attr_span: Span,\n+    #[label]\n+    pub defn_span: Span,\n+}"}, {"sha": "191186af6fa08de3c173a3457bccb9783fd20995", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0df1ddc185af0d1b8d476851a50c42a31ebbb741/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df1ddc185af0d1b8d476851a50c42a31ebbb741/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=0df1ddc185af0d1b8d476851a50c42a31ebbb741", "patch": "@@ -944,19 +944,20 @@ pub struct ExpnData {\n     /// internally without forcing the whole crate to opt-in\n     /// to them.\n     pub allow_internal_unstable: Option<Lrc<[Symbol]>>,\n-    /// Whether the macro is allowed to use `unsafe` internally\n-    /// even if the user crate has `#![forbid(unsafe_code)]`.\n-    pub allow_internal_unsafe: bool,\n-    /// Enables the macro helper hack (`ident!(...)` -> `$crate::ident!(...)`)\n-    /// for a given macro.\n-    pub local_inner_macros: bool,\n     /// Edition of the crate in which the macro is defined.\n     pub edition: Edition,\n     /// The `DefId` of the macro being invoked,\n     /// if this `ExpnData` corresponds to a macro invocation\n     pub macro_def_id: Option<DefId>,\n     /// The normal module (`mod`) in which the expanded macro was defined.\n     pub parent_module: Option<DefId>,\n+    /// Suppresses the `unsafe_code` lint for code produced by this macro.\n+    pub allow_internal_unsafe: bool,\n+    /// Enables the macro helper hack (`ident!(...)` -> `$crate::ident!(...)`) for this macro.\n+    pub local_inner_macros: bool,\n+    /// Should debuginfo for the macro be collapsed to the outermost expansion site (in other\n+    /// words, was the macro definition annotated with `#[collapse_debuginfo]`)?\n+    pub collapse_debuginfo: bool,\n }\n \n impl !PartialEq for ExpnData {}\n@@ -969,24 +970,26 @@ impl ExpnData {\n         call_site: Span,\n         def_site: Span,\n         allow_internal_unstable: Option<Lrc<[Symbol]>>,\n-        allow_internal_unsafe: bool,\n-        local_inner_macros: bool,\n         edition: Edition,\n         macro_def_id: Option<DefId>,\n         parent_module: Option<DefId>,\n+        allow_internal_unsafe: bool,\n+        local_inner_macros: bool,\n+        collapse_debuginfo: bool,\n     ) -> ExpnData {\n         ExpnData {\n             kind,\n             parent,\n             call_site,\n             def_site,\n             allow_internal_unstable,\n-            allow_internal_unsafe,\n-            local_inner_macros,\n             edition,\n             macro_def_id,\n             parent_module,\n             disambiguator: 0,\n+            allow_internal_unsafe,\n+            local_inner_macros,\n+            collapse_debuginfo,\n         }\n     }\n \n@@ -1004,12 +1007,13 @@ impl ExpnData {\n             call_site,\n             def_site: DUMMY_SP,\n             allow_internal_unstable: None,\n-            allow_internal_unsafe: false,\n-            local_inner_macros: false,\n             edition,\n             macro_def_id,\n             parent_module,\n             disambiguator: 0,\n+            allow_internal_unsafe: false,\n+            local_inner_macros: false,\n+            collapse_debuginfo: false,\n         }\n     }\n "}, {"sha": "26b4ebeab1b394d60621bfff2aa58298337ae0c0", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0df1ddc185af0d1b8d476851a50c42a31ebbb741/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df1ddc185af0d1b8d476851a50c42a31ebbb741/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=0df1ddc185af0d1b8d476851a50c42a31ebbb741", "patch": "@@ -564,6 +564,13 @@ impl Span {\n         self.ctxt() != SyntaxContext::root()\n     }\n \n+    /// Returns `true` if `span` originates in a macro's expansion where debuginfo should be\n+    /// collapsed.\n+    pub fn in_macro_expansion_with_collapse_debuginfo(self) -> bool {\n+        let outer_expn = self.ctxt().outer_expn_data();\n+        matches!(outer_expn.kind, ExpnKind::Macro(..)) && outer_expn.collapse_debuginfo\n+    }\n+\n     /// Returns `true` if `span` originates in a derive-macro's expansion.\n     pub fn in_derive_expansion(self) -> bool {\n         matches!(self.ctxt().outer_expn_data().kind, ExpnKind::Macro(MacroKind::Derive, _))"}, {"sha": "416c42e3d51c69c49342a22f103681667fcaf138", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0df1ddc185af0d1b8d476851a50c42a31ebbb741/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df1ddc185af0d1b8d476851a50c42a31ebbb741/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=0df1ddc185af0d1b8d476851a50c42a31ebbb741", "patch": "@@ -487,6 +487,7 @@ symbols! {\n         cmse_nonsecure_entry,\n         coerce_unsized,\n         cold,\n+        collapse_debuginfo,\n         column,\n         column_macro,\n         compare_and_swap,"}, {"sha": "413f6120105ee660ca4be3bf7dac34e6b5e53a79", "filename": "src/test/debuginfo/collapse-debuginfo-no-attr-flag.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/0df1ddc185af0d1b8d476851a50c42a31ebbb741/src%2Ftest%2Fdebuginfo%2Fcollapse-debuginfo-no-attr-flag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df1ddc185af0d1b8d476851a50c42a31ebbb741/src%2Ftest%2Fdebuginfo%2Fcollapse-debuginfo-no-attr-flag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fcollapse-debuginfo-no-attr-flag.rs?ref=0df1ddc185af0d1b8d476851a50c42a31ebbb741", "patch": "@@ -0,0 +1,61 @@\n+// ignore-lldb\n+#![feature(collapse_debuginfo)]\n+\n+// Test that line numbers are not replaced with those of the outermost expansion site when the\n+// `collapse_debuginfo` is active, `-Zdebug-macros` is provided and `#[collapse_debuginfo]` not\n+// being used.\n+\n+// compile-flags:-g -Zdebug-macros\n+\n+// === GDB TESTS ===================================================================================\n+\n+// gdb-command:run\n+// gdb-command:next\n+// gdb-command:frame\n+// gdb-check:[...]#loc1[...]\n+// gdb-command:next\n+// gdb-command:frame\n+// gdb-check:[...]#loc2[...]\n+// gdb-command:next\n+// gdb-command:frame\n+// gdb-check:[...]#loc3[...]\n+// gdb-command:next\n+// gdb-command:frame\n+// gdb-check:[...]#loc4[...]\n+// gdb-command:continue\n+\n+fn one() {\n+    println!(\"one\");\n+}\n+fn two() {\n+    println!(\"two\");\n+}\n+fn three() {\n+    println!(\"three\");\n+}\n+fn four() {\n+    println!(\"four\");\n+}\n+\n+macro_rules! outer {\n+    ($b:block) => {\n+        one(); // #loc1\n+        inner!();\n+        $b\n+    };\n+}\n+\n+macro_rules! inner {\n+    () => {\n+        two(); // #loc2\n+    };\n+}\n+\n+fn main() {\n+    let ret = 0; // #break\n+    outer!({\n+        three(); // #loc3\n+        four(); // #loc4\n+    });\n+    std::process::exit(ret);\n+}"}, {"sha": "230c8795be3650a052f61ff1d4678056518617cc", "filename": "src/test/debuginfo/collapse-debuginfo-no-attr.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/0df1ddc185af0d1b8d476851a50c42a31ebbb741/src%2Ftest%2Fdebuginfo%2Fcollapse-debuginfo-no-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df1ddc185af0d1b8d476851a50c42a31ebbb741/src%2Ftest%2Fdebuginfo%2Fcollapse-debuginfo-no-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fcollapse-debuginfo-no-attr.rs?ref=0df1ddc185af0d1b8d476851a50c42a31ebbb741", "patch": "@@ -0,0 +1,60 @@\n+// ignore-lldb\n+#![feature(collapse_debuginfo)]\n+\n+// Test that line numbers are not replaced with those of the outermost expansion site when the\n+// `collapse_debuginfo` feature is active and the attribute is not provided.\n+\n+// compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n+// gdb-command:run\n+// gdb-command:next\n+// gdb-command:frame\n+// gdb-check:[...]#loc1[...]\n+// gdb-command:next\n+// gdb-command:frame\n+// gdb-check:[...]#loc2[...]\n+// gdb-command:next\n+// gdb-command:frame\n+// gdb-check:[...]#loc3[...]\n+// gdb-command:next\n+// gdb-command:frame\n+// gdb-check:[...]#loc4[...]\n+// gdb-command:continue\n+\n+fn one() {\n+    println!(\"one\");\n+}\n+fn two() {\n+    println!(\"two\");\n+}\n+fn three() {\n+    println!(\"three\");\n+}\n+fn four() {\n+    println!(\"four\");\n+}\n+\n+macro_rules! outer {\n+    ($b:block) => {\n+        one(); // #loc1\n+        inner!();\n+        $b\n+    };\n+}\n+\n+macro_rules! inner {\n+    () => {\n+        two(); // #loc2\n+    };\n+}\n+\n+fn main() {\n+    let ret = 0; // #break\n+    outer!({\n+        three(); // #loc3\n+        four(); // #loc4\n+    });\n+    std::process::exit(ret);\n+}"}, {"sha": "183cf537e85dc89335d0f575be929cad9aae0a9a", "filename": "src/test/debuginfo/collapse-debuginfo-with-attr-flag.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/0df1ddc185af0d1b8d476851a50c42a31ebbb741/src%2Ftest%2Fdebuginfo%2Fcollapse-debuginfo-with-attr-flag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df1ddc185af0d1b8d476851a50c42a31ebbb741/src%2Ftest%2Fdebuginfo%2Fcollapse-debuginfo-with-attr-flag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fcollapse-debuginfo-with-attr-flag.rs?ref=0df1ddc185af0d1b8d476851a50c42a31ebbb741", "patch": "@@ -0,0 +1,63 @@\n+// ignore-lldb\n+#![feature(collapse_debuginfo)]\n+\n+// Test that line numbers are not replaced with those of the outermost expansion site when the\n+// `collapse_debuginfo` is active and `-Zdebug-macros` is provided, despite `#[collapse_debuginfo]`\n+// being used.\n+\n+// compile-flags:-g -Zdebug-macros\n+\n+// === GDB TESTS ===================================================================================\n+\n+// gdb-command:run\n+// gdb-command:next\n+// gdb-command:frame\n+// gdb-check:[...]#loc1[...]\n+// gdb-command:next\n+// gdb-command:frame\n+// gdb-check:[...]#loc2[...]\n+// gdb-command:next\n+// gdb-command:frame\n+// gdb-check:[...]#loc3[...]\n+// gdb-command:next\n+// gdb-command:frame\n+// gdb-check:[...]#loc4[...]\n+// gdb-command:continue\n+\n+fn one() {\n+    println!(\"one\");\n+}\n+fn two() {\n+    println!(\"two\");\n+}\n+fn three() {\n+    println!(\"three\");\n+}\n+fn four() {\n+    println!(\"four\");\n+}\n+\n+#[collapse_debuginfo]\n+macro_rules! outer {\n+    ($b:block) => {\n+        one(); // #loc1\n+        inner!();\n+        $b\n+    };\n+}\n+\n+#[collapse_debuginfo]\n+macro_rules! inner {\n+    () => {\n+        two(); // #loc2\n+    };\n+}\n+\n+fn main() {\n+    let ret = 0; // #break\n+    outer!({\n+        three(); // #loc3\n+        four(); // #loc4\n+    });\n+    std::process::exit(ret);\n+}"}, {"sha": "34d03c18bc72d3269b9e67b8fc93d471227b662a", "filename": "src/test/debuginfo/collapse-debuginfo-with-attr.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/0df1ddc185af0d1b8d476851a50c42a31ebbb741/src%2Ftest%2Fdebuginfo%2Fcollapse-debuginfo-with-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df1ddc185af0d1b8d476851a50c42a31ebbb741/src%2Ftest%2Fdebuginfo%2Fcollapse-debuginfo-with-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fcollapse-debuginfo-with-attr.rs?ref=0df1ddc185af0d1b8d476851a50c42a31ebbb741", "patch": "@@ -0,0 +1,59 @@\n+// ignore-lldb\n+#![feature(collapse_debuginfo)]\n+\n+// Test that line numbers are replaced with those of the outermost expansion site when the\n+// `collapse_debuginfo` feature is active and the attribute is provided.\n+\n+// compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n+// gdb-command:run\n+// gdb-command:next\n+// gdb-command:frame\n+// gdb-check:[...]#loc1[...]\n+// gdb-command:next\n+// gdb-command:frame\n+// gdb-check:[...]#loc2[...]\n+// gdb-command:next\n+// gdb-command:frame\n+// gdb-check:[...]#loc3[...]\n+// gdb-command:continue\n+\n+fn one() {\n+    println!(\"one\");\n+}\n+fn two() {\n+    println!(\"two\");\n+}\n+fn three() {\n+    println!(\"three\");\n+}\n+fn four() {\n+    println!(\"four\");\n+}\n+\n+#[collapse_debuginfo]\n+macro_rules! outer {\n+    ($b:block) => {\n+        one();\n+        inner!();\n+        $b\n+    };\n+}\n+\n+#[collapse_debuginfo]\n+macro_rules! inner {\n+    () => {\n+        two();\n+    };\n+}\n+\n+fn main() {\n+    let ret = 0; // #break\n+    outer!({ // #loc1\n+        three(); // #loc2\n+        four(); // #loc3\n+    });\n+    std::process::exit(ret);\n+}"}, {"sha": "42d8982c118612535a4c0c3e1f24a1af1e4c76fb", "filename": "src/test/ui/attributes/collapse-debuginfo-invalid.rs", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/0df1ddc185af0d1b8d476851a50c42a31ebbb741/src%2Ftest%2Fui%2Fattributes%2Fcollapse-debuginfo-invalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df1ddc185af0d1b8d476851a50c42a31ebbb741/src%2Ftest%2Fui%2Fattributes%2Fcollapse-debuginfo-invalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fcollapse-debuginfo-invalid.rs?ref=0df1ddc185af0d1b8d476851a50c42a31ebbb741", "patch": "@@ -0,0 +1,110 @@\n+#![feature(collapse_debuginfo)]\n+#![feature(stmt_expr_attributes)]\n+#![feature(type_alias_impl_trait)]\n+#![no_std]\n+\n+// Test that the `#[collapse_debuginfo]` attribute can only be used on macro definitions.\n+\n+#[collapse_debuginfo]\n+//~^ ERROR `collapse_debuginfo` attribute should be applied to macro definitions\n+extern crate std;\n+\n+#[collapse_debuginfo]\n+//~^ ERROR `collapse_debuginfo` attribute should be applied to macro definitions\n+use std::collections::HashMap;\n+\n+#[collapse_debuginfo]\n+//~^ ERROR `collapse_debuginfo` attribute should be applied to macro definitions\n+static FOO: u32 = 3;\n+\n+#[collapse_debuginfo]\n+//~^ ERROR `collapse_debuginfo` attribute should be applied to macro definitions\n+const BAR: u32 = 3;\n+\n+#[collapse_debuginfo]\n+//~^ ERROR `collapse_debuginfo` attribute should be applied to macro definitions\n+fn foo() {\n+    let _ = #[collapse_debuginfo] || { };\n+//~^ ERROR `collapse_debuginfo` attribute should be applied to macro definitions\n+    #[collapse_debuginfo]\n+//~^ ERROR `collapse_debuginfo` attribute should be applied to macro definitions\n+    let _ = 3;\n+    let _ = #[collapse_debuginfo] 3;\n+//~^ ERROR `collapse_debuginfo` attribute should be applied to macro definitions\n+    match (3, 4) {\n+        #[collapse_debuginfo]\n+//~^ ERROR `collapse_debuginfo` attribute should be applied to macro definitions\n+        _ => (),\n+    }\n+}\n+\n+#[collapse_debuginfo]\n+//~^ ERROR `collapse_debuginfo` attribute should be applied to macro definitions\n+mod bar {\n+}\n+\n+#[collapse_debuginfo]\n+//~^ ERROR `collapse_debuginfo` attribute should be applied to macro definitions\n+type Map = HashMap<u32, u32>;\n+\n+#[collapse_debuginfo]\n+//~^ ERROR `collapse_debuginfo` attribute should be applied to macro definitions\n+enum Foo {\n+    #[collapse_debuginfo]\n+//~^ ERROR `collapse_debuginfo` attribute should be applied to macro definitions\n+    Variant,\n+}\n+\n+#[collapse_debuginfo]\n+//~^ ERROR `collapse_debuginfo` attribute should be applied to macro definitions\n+struct Bar {\n+    #[collapse_debuginfo]\n+//~^ ERROR `collapse_debuginfo` attribute should be applied to macro definitions\n+    field: u32,\n+}\n+\n+#[collapse_debuginfo]\n+//~^ ERROR `collapse_debuginfo` attribute should be applied to macro definitions\n+union Qux {\n+    a: u32,\n+    b: u16\n+}\n+\n+#[collapse_debuginfo]\n+//~^ ERROR `collapse_debuginfo` attribute should be applied to macro definitions\n+trait Foobar {\n+    #[collapse_debuginfo]\n+//~^ ERROR `collapse_debuginfo` attribute should be applied to macro definitions\n+    type Bar;\n+}\n+\n+#[collapse_debuginfo]\n+//~^ ERROR `collapse_debuginfo` attribute should be applied to macro definitions\n+type AFoobar = impl Foobar;\n+\n+impl Foobar for Bar {\n+    type Bar = u32;\n+}\n+\n+fn constraining() -> AFoobar {\n+    Bar { field: 3 }\n+}\n+\n+#[collapse_debuginfo]\n+//~^ ERROR `collapse_debuginfo` attribute should be applied to macro definitions\n+impl Bar {\n+    #[collapse_debuginfo]\n+//~^ ERROR `collapse_debuginfo` attribute should be applied to macro definitions\n+    const FOO: u32 = 3;\n+\n+    #[collapse_debuginfo]\n+//~^ ERROR `collapse_debuginfo` attribute should be applied to macro definitions\n+    fn bar(&self) {}\n+}\n+\n+#[collapse_debuginfo]\n+macro_rules! finally {\n+    ($e:expr) => { $e }\n+}\n+\n+fn main() {}"}, {"sha": "01c476091082f14b6453a5c8c38ea76633a841de", "filename": "src/test/ui/attributes/collapse-debuginfo-invalid.stderr", "status": "added", "additions": 222, "deletions": 0, "changes": 222, "blob_url": "https://github.com/rust-lang/rust/blob/0df1ddc185af0d1b8d476851a50c42a31ebbb741/src%2Ftest%2Fui%2Fattributes%2Fcollapse-debuginfo-invalid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0df1ddc185af0d1b8d476851a50c42a31ebbb741/src%2Ftest%2Fui%2Fattributes%2Fcollapse-debuginfo-invalid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fcollapse-debuginfo-invalid.stderr?ref=0df1ddc185af0d1b8d476851a50c42a31ebbb741", "patch": "@@ -0,0 +1,222 @@\n+error: `collapse_debuginfo` attribute should be applied to macro definitions\n+  --> $DIR/collapse-debuginfo-invalid.rs:8:1\n+   |\n+LL | #[collapse_debuginfo]\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | extern crate std;\n+   | ----------------- not a macro definition\n+\n+error: `collapse_debuginfo` attribute should be applied to macro definitions\n+  --> $DIR/collapse-debuginfo-invalid.rs:12:1\n+   |\n+LL | #[collapse_debuginfo]\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | use std::collections::HashMap;\n+   | ------------------------------ not a macro definition\n+\n+error: `collapse_debuginfo` attribute should be applied to macro definitions\n+  --> $DIR/collapse-debuginfo-invalid.rs:16:1\n+   |\n+LL | #[collapse_debuginfo]\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | static FOO: u32 = 3;\n+   | -------------------- not a macro definition\n+\n+error: `collapse_debuginfo` attribute should be applied to macro definitions\n+  --> $DIR/collapse-debuginfo-invalid.rs:20:1\n+   |\n+LL | #[collapse_debuginfo]\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | const BAR: u32 = 3;\n+   | ------------------- not a macro definition\n+\n+error: `collapse_debuginfo` attribute should be applied to macro definitions\n+  --> $DIR/collapse-debuginfo-invalid.rs:24:1\n+   |\n+LL |   #[collapse_debuginfo]\n+   |   ^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | / fn foo() {\n+LL | |     let _ = #[collapse_debuginfo] || { };\n+LL | |\n+LL | |     #[collapse_debuginfo]\n+...  |\n+LL | |     }\n+LL | | }\n+   | |_- not a macro definition\n+\n+error: `collapse_debuginfo` attribute should be applied to macro definitions\n+  --> $DIR/collapse-debuginfo-invalid.rs:27:13\n+   |\n+LL |     let _ = #[collapse_debuginfo] || { };\n+   |             ^^^^^^^^^^^^^^^^^^^^^ ------ not a macro definition\n+\n+error: `collapse_debuginfo` attribute should be applied to macro definitions\n+  --> $DIR/collapse-debuginfo-invalid.rs:29:5\n+   |\n+LL |     #[collapse_debuginfo]\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL |     let _ = 3;\n+   |     ---------- not a macro definition\n+\n+error: `collapse_debuginfo` attribute should be applied to macro definitions\n+  --> $DIR/collapse-debuginfo-invalid.rs:32:13\n+   |\n+LL |     let _ = #[collapse_debuginfo] 3;\n+   |             ^^^^^^^^^^^^^^^^^^^^^ - not a macro definition\n+\n+error: `collapse_debuginfo` attribute should be applied to macro definitions\n+  --> $DIR/collapse-debuginfo-invalid.rs:35:9\n+   |\n+LL |         #[collapse_debuginfo]\n+   |         ^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL |         _ => (),\n+   |         ------- not a macro definition\n+\n+error: `collapse_debuginfo` attribute should be applied to macro definitions\n+  --> $DIR/collapse-debuginfo-invalid.rs:41:1\n+   |\n+LL |   #[collapse_debuginfo]\n+   |   ^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | / mod bar {\n+LL | | }\n+   | |_- not a macro definition\n+\n+error: `collapse_debuginfo` attribute should be applied to macro definitions\n+  --> $DIR/collapse-debuginfo-invalid.rs:46:1\n+   |\n+LL | #[collapse_debuginfo]\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | type Map = HashMap<u32, u32>;\n+   | ----------------------------- not a macro definition\n+\n+error: `collapse_debuginfo` attribute should be applied to macro definitions\n+  --> $DIR/collapse-debuginfo-invalid.rs:50:1\n+   |\n+LL |   #[collapse_debuginfo]\n+   |   ^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | / enum Foo {\n+LL | |     #[collapse_debuginfo]\n+LL | |\n+LL | |     Variant,\n+LL | | }\n+   | |_- not a macro definition\n+\n+error: `collapse_debuginfo` attribute should be applied to macro definitions\n+  --> $DIR/collapse-debuginfo-invalid.rs:53:5\n+   |\n+LL |     #[collapse_debuginfo]\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL |     Variant,\n+   |     ------- not a macro definition\n+\n+error: `collapse_debuginfo` attribute should be applied to macro definitions\n+  --> $DIR/collapse-debuginfo-invalid.rs:58:1\n+   |\n+LL |   #[collapse_debuginfo]\n+   |   ^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | / struct Bar {\n+LL | |     #[collapse_debuginfo]\n+LL | |\n+LL | |     field: u32,\n+LL | | }\n+   | |_- not a macro definition\n+\n+error: `collapse_debuginfo` attribute should be applied to macro definitions\n+  --> $DIR/collapse-debuginfo-invalid.rs:61:5\n+   |\n+LL |     #[collapse_debuginfo]\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL |     field: u32,\n+   |     ---------- not a macro definition\n+\n+error: `collapse_debuginfo` attribute should be applied to macro definitions\n+  --> $DIR/collapse-debuginfo-invalid.rs:66:1\n+   |\n+LL |   #[collapse_debuginfo]\n+   |   ^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | / union Qux {\n+LL | |     a: u32,\n+LL | |     b: u16\n+LL | | }\n+   | |_- not a macro definition\n+\n+error: `collapse_debuginfo` attribute should be applied to macro definitions\n+  --> $DIR/collapse-debuginfo-invalid.rs:73:1\n+   |\n+LL |   #[collapse_debuginfo]\n+   |   ^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | / trait Foobar {\n+LL | |     #[collapse_debuginfo]\n+LL | |\n+LL | |     type Bar;\n+LL | | }\n+   | |_- not a macro definition\n+\n+error: `collapse_debuginfo` attribute should be applied to macro definitions\n+  --> $DIR/collapse-debuginfo-invalid.rs:81:1\n+   |\n+LL | #[collapse_debuginfo]\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | type AFoobar = impl Foobar;\n+   | --------------------------- not a macro definition\n+\n+error: `collapse_debuginfo` attribute should be applied to macro definitions\n+  --> $DIR/collapse-debuginfo-invalid.rs:93:1\n+   |\n+LL |   #[collapse_debuginfo]\n+   |   ^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | / impl Bar {\n+LL | |     #[collapse_debuginfo]\n+LL | |\n+LL | |     const FOO: u32 = 3;\n+...  |\n+LL | |     fn bar(&self) {}\n+LL | | }\n+   | |_- not a macro definition\n+\n+error: `collapse_debuginfo` attribute should be applied to macro definitions\n+  --> $DIR/collapse-debuginfo-invalid.rs:76:5\n+   |\n+LL |     #[collapse_debuginfo]\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL |     type Bar;\n+   |     --------- not a macro definition\n+\n+error: `collapse_debuginfo` attribute should be applied to macro definitions\n+  --> $DIR/collapse-debuginfo-invalid.rs:96:5\n+   |\n+LL |     #[collapse_debuginfo]\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL |     const FOO: u32 = 3;\n+   |     ------------------- not a macro definition\n+\n+error: `collapse_debuginfo` attribute should be applied to macro definitions\n+  --> $DIR/collapse-debuginfo-invalid.rs:100:5\n+   |\n+LL |     #[collapse_debuginfo]\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL |     fn bar(&self) {}\n+   |     ---------------- not a macro definition\n+\n+error: aborting due to 22 previous errors\n+"}, {"sha": "f73bf579f6d131fa0ec5642a862687f99fd54a93", "filename": "src/test/ui/feature-gates/feature-gate-collapse_debuginfo.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0df1ddc185af0d1b8d476851a50c42a31ebbb741/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-collapse_debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df1ddc185af0d1b8d476851a50c42a31ebbb741/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-collapse_debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-collapse_debuginfo.rs?ref=0df1ddc185af0d1b8d476851a50c42a31ebbb741", "patch": "@@ -0,0 +1,7 @@\n+#[collapse_debuginfo]\n+//~^ ERROR the `#[collapse_debuginfo]` attribute is an experimental feature\n+macro_rules! foo {\n+    ($e:expr) => { $e }\n+}\n+\n+fn main() {}"}, {"sha": "2cbde893af9bd93df425851c72f636ff38ffb8bf", "filename": "src/test/ui/feature-gates/feature-gate-collapse_debuginfo.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0df1ddc185af0d1b8d476851a50c42a31ebbb741/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-collapse_debuginfo.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0df1ddc185af0d1b8d476851a50c42a31ebbb741/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-collapse_debuginfo.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-collapse_debuginfo.stderr?ref=0df1ddc185af0d1b8d476851a50c42a31ebbb741", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: the `#[collapse_debuginfo]` attribute is an experimental feature\n+  --> $DIR/feature-gate-collapse_debuginfo.rs:1:1\n+   |\n+LL | #[collapse_debuginfo]\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #100758 <https://github.com/rust-lang/rust/issues/100758> for more information\n+   = help: add `#![feature(collapse_debuginfo)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}]}