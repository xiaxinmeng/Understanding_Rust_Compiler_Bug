{"sha": "2d5200605f18717efcb5483cfd2aece167cab7ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkNTIwMDYwNWYxODcxN2VmY2I1NDgzY2ZkMmFlY2UxNjdjYWI3Y2U=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2020-07-05T17:35:46Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2021-03-08T07:17:48Z"}, "message": "Make parse_json return JsonConfig", "tree": {"sha": "01747dd2aab9560865e395124d3bbb5d96cdd463", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01747dd2aab9560865e395124d3bbb5d96cdd463"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d5200605f18717efcb5483cfd2aece167cab7ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d5200605f18717efcb5483cfd2aece167cab7ce", "html_url": "https://github.com/rust-lang/rust/commit/2d5200605f18717efcb5483cfd2aece167cab7ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d5200605f18717efcb5483cfd2aece167cab7ce/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f2ca47a79911d422fd47ee2a23dd08a9fa42aa9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f2ca47a79911d422fd47ee2a23dd08a9fa42aa9", "html_url": "https://github.com/rust-lang/rust/commit/3f2ca47a79911d422fd47ee2a23dd08a9fa42aa9"}], "stats": {"total": 21, "additions": 17, "deletions": 4}, "files": [{"sha": "433b87aa3c682f00bf58cd3a08c9e9e35cbf51cf", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2d5200605f18717efcb5483cfd2aece167cab7ce/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5200605f18717efcb5483cfd2aece167cab7ce/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=2d5200605f18717efcb5483cfd2aece167cab7ce", "patch": "@@ -1251,11 +1251,18 @@ pub fn parse_color(matches: &getopts::Matches) -> ColorConfig {\n     }\n }\n \n+/// Possible json config files\n+pub struct JsonConfig {\n+    pub json_rendered: HumanReadableErrorType,\n+    pub json_artifact_notifications: bool,\n+    pub json_unused_externs: bool,\n+}\n+\n /// Parse the `--json` flag.\n ///\n /// The first value returned is how to render JSON diagnostics, and the second\n /// is whether or not artifact notifications are enabled.\n-pub fn parse_json(matches: &getopts::Matches) -> (HumanReadableErrorType, bool, bool) {\n+pub fn parse_json(matches: &getopts::Matches) -> JsonConfig {\n     let mut json_rendered: fn(ColorConfig) -> HumanReadableErrorType =\n         HumanReadableErrorType::Default;\n     let mut json_color = ColorConfig::Never;\n@@ -1285,7 +1292,12 @@ pub fn parse_json(matches: &getopts::Matches) -> (HumanReadableErrorType, bool,\n             }\n         }\n     }\n-    (json_rendered(json_color), json_artifact_notifications, json_unused_externs)\n+\n+    JsonConfig {\n+        json_rendered: json_rendered(json_color),\n+        json_artifact_notifications,\n+        json_unused_externs,\n+    }\n }\n \n /// Parses the `--error-format` flag.\n@@ -1863,7 +1875,8 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n \n     let edition = parse_crate_edition(matches);\n \n-    let (json_rendered, json_artifact_notifications, json_unused_externs) = parse_json(matches);\n+    let JsonConfig { json_rendered, json_artifact_notifications, json_unused_externs } =\n+        parse_json(matches);\n \n     let error_format = parse_error_format(matches, color, json_rendered);\n "}, {"sha": "112fe230916f29bfe2451f3d76246d2871658ce5", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5200605f18717efcb5483cfd2aece167cab7ce/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5200605f18717efcb5483cfd2aece167cab7ce/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=2d5200605f18717efcb5483cfd2aece167cab7ce", "patch": "@@ -323,7 +323,7 @@ impl Options {\n         }\n \n         let color = config::parse_color(&matches);\n-        let (json_rendered, ..) = config::parse_json(&matches);\n+        let config::JsonConfig { json_rendered, .. } = config::parse_json(&matches);\n         let error_format = config::parse_error_format(&matches, color, json_rendered);\n \n         let codegen_options = build_codegen_options(matches, error_format);"}]}