{"sha": "680eb71564ebba5e76ce1e1a8287b30042332cc5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4MGViNzE1NjRlYmJhNWU3NmNlMWUxYTgyODdiMzAwNDIzMzJjYzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-16T13:02:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-16T13:02:14Z"}, "message": "auto merge of #8532 : kballard/rust/cstr-cleanup, r=erickt\n\nImplement interior null checking in `.to_c_str()`, among other changes.", "tree": {"sha": "4c800d08841b4dfb44ee869dfa3a24fcec5b00a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c800d08841b4dfb44ee869dfa3a24fcec5b00a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/680eb71564ebba5e76ce1e1a8287b30042332cc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/680eb71564ebba5e76ce1e1a8287b30042332cc5", "html_url": "https://github.com/rust-lang/rust/commit/680eb71564ebba5e76ce1e1a8287b30042332cc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/680eb71564ebba5e76ce1e1a8287b30042332cc5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8caf5176224be2d5fb43036a0d6eeecf749f6fe6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8caf5176224be2d5fb43036a0d6eeecf749f6fe6", "html_url": "https://github.com/rust-lang/rust/commit/8caf5176224be2d5fb43036a0d6eeecf749f6fe6"}, {"sha": "5ca4cdc7b8fb8b9c3fd1a6160db31ff2f4b5b957", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ca4cdc7b8fb8b9c3fd1a6160db31ff2f4b5b957", "html_url": "https://github.com/rust-lang/rust/commit/5ca4cdc7b8fb8b9c3fd1a6160db31ff2f4b5b957"}], "stats": {"total": 423, "additions": 271, "deletions": 152}, "files": [{"sha": "ead1f276ca701a13c9b3c0fbf08e21bd4685de9c", "filename": "src/libextra/rl.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibextra%2Frl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibextra%2Frl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Frl.rs?ref=680eb71564ebba5e76ce1e1a8287b30042332cc5", "patch": "@@ -32,7 +32,7 @@ pub mod rustrt {\n \n /// Add a line to history\n pub unsafe fn add_history(line: &str) -> bool {\n-    do line.to_c_str().with_ref |buf| {\n+    do line.with_c_str |buf| {\n         rustrt::linenoiseHistoryAdd(buf) == 1 as c_int\n     }\n }\n@@ -44,21 +44,21 @@ pub unsafe fn set_history_max_len(len: int) -> bool {\n \n /// Save line history to a file\n pub unsafe fn save_history(file: &str) -> bool {\n-    do file.to_c_str().with_ref |buf| {\n+    do file.with_c_str |buf| {\n         rustrt::linenoiseHistorySave(buf) == 1 as c_int\n     }\n }\n \n /// Load line history from a file\n pub unsafe fn load_history(file: &str) -> bool {\n-    do file.to_c_str().with_ref |buf| {\n+    do file.with_c_str |buf| {\n         rustrt::linenoiseHistoryLoad(buf) == 1 as c_int\n     }\n }\n \n /// Print out a prompt and then wait for input and return it\n pub unsafe fn read(prompt: &str) -> Option<~str> {\n-    do prompt.to_c_str().with_ref |buf| {\n+    do prompt.with_c_str |buf| {\n         let line = rustrt::linenoise(buf);\n \n         if line.is_null() { None }\n@@ -80,7 +80,7 @@ pub unsafe fn complete(cb: CompletionCb) {\n \n             unsafe {\n                 do cb(str::raw::from_c_str(line)) |suggestion| {\n-                    do suggestion.to_c_str().with_ref |buf| {\n+                    do suggestion.with_c_str |buf| {\n                         rustrt::linenoiseAddCompletion(completions, buf);\n                     }\n                 }"}, {"sha": "91b6ee2411091982c3acb9766abd30d1c3a66ee0", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=680eb71564ebba5e76ce1e1a8287b30042332cc5", "patch": "@@ -78,10 +78,10 @@ pub fn WriteOutputFile(sess: Session,\n         OptLevel: c_int,\n         EnableSegmentedStacks: bool) {\n     unsafe {\n-        do Triple.to_c_str().with_ref |Triple| {\n-            do Cpu.to_c_str().with_ref |Cpu| {\n-                do Feature.to_c_str().with_ref |Feature| {\n-                    do Output.to_c_str().with_ref |Output| {\n+        do Triple.with_c_str |Triple| {\n+            do Cpu.with_c_str |Cpu| {\n+                do Feature.with_c_str |Feature| {\n+                    do Output.with_c_str |Output| {\n                         let result = llvm::LLVMRustWriteOutputFile(\n                                 PM,\n                                 M,\n@@ -152,7 +152,7 @@ pub mod jit {\n \n                 debug!(\"linking: %s\", path);\n \n-                do path.to_c_str().with_ref |buf_t| {\n+                do path.with_c_str |buf_t| {\n                     if !llvm::LLVMRustLoadCrate(manager, buf_t) {\n                         llvm_err(sess, ~\"Could not link\");\n                     }\n@@ -171,7 +171,7 @@ pub mod jit {\n             // Next, we need to get a handle on the _rust_main function by\n             // looking up it's corresponding ValueRef and then requesting that\n             // the execution engine compiles the function.\n-            let fun = do \"_rust_main\".to_c_str().with_ref |entry| {\n+            let fun = do \"_rust_main\".with_c_str |entry| {\n                 llvm::LLVMGetNamedFunction(m, entry)\n             };\n             if fun.is_null() {\n@@ -270,14 +270,14 @@ pub mod write {\n                   output_type_bitcode => {\n                     if opts.optimize != session::No {\n                         let filename = output.with_filetype(\"no-opt.bc\");\n-                        do filename.to_c_str().with_ref |buf| {\n+                        do filename.with_c_str |buf| {\n                             llvm::LLVMWriteBitcodeToFile(llmod, buf);\n                         }\n                     }\n                   }\n                   _ => {\n                     let filename = output.with_filetype(\"bc\");\n-                    do filename.to_c_str().with_ref |buf| {\n+                    do filename.with_c_str |buf| {\n                         llvm::LLVMWriteBitcodeToFile(llmod, buf);\n                     }\n                   }\n@@ -340,7 +340,7 @@ pub mod write {\n                     // Always output the bitcode file with --save-temps\n \n                     let filename = output.with_filetype(\"opt.bc\");\n-                    do filename.to_c_str().with_ref |buf| {\n+                    do filename.with_c_str |buf| {\n                         llvm::LLVMWriteBitcodeToFile(llmod, buf)\n                     };\n                     // Save the assembly file if -S is used\n@@ -401,13 +401,13 @@ pub mod write {\n \n             if output_type == output_type_llvm_assembly {\n                 // Given options \"-S --emit-llvm\": output LLVM assembly\n-                do output.to_c_str().with_ref |buf_o| {\n+                do output.with_c_str |buf_o| {\n                     llvm::LLVMRustAddPrintModulePass(pm.llpm, llmod, buf_o);\n                 }\n             } else {\n                 // If only a bitcode file is asked for by using the\n                 // '--emit-llvm' flag, then output it here\n-                do output.to_c_str().with_ref |buf| {\n+                do output.with_c_str |buf| {\n                     llvm::LLVMWriteBitcodeToFile(llmod, buf);\n                 }\n             }"}, {"sha": "29bc577dff960c844c87756c581062e487719d02", "filename": "src/librustc/back/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibrustc%2Fback%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibrustc%2Fback%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fpasses.rs?ref=680eb71564ebba5e76ce1e1a8287b30042332cc5", "patch": "@@ -173,7 +173,7 @@ pub fn populate_pass_manager(sess: Session, pm: &mut PassManager, pass_list:&[~s\n }\n \n pub fn create_pass(name:&str) -> Option<PassRef> {\n-    do name.to_c_str().with_ref |s| {\n+    do name.with_c_str |s| {\n         unsafe {\n             let p = llvm::LLVMCreatePass(s);\n             if p.is_null() {"}, {"sha": "307b691a56e67de588840ade9a7d577ddd346ae7", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=680eb71564ebba5e76ce1e1a8287b30042332cc5", "patch": "@@ -2271,7 +2271,7 @@ pub struct TargetData {\n }\n \n pub fn mk_target_data(string_rep: &str) -> TargetData {\n-    let lltd = do string_rep.to_c_str().with_ref |buf| {\n+    let lltd = do string_rep.with_c_str |buf| {\n         unsafe { llvm::LLVMCreateTargetData(buf) }\n     };\n "}, {"sha": "d0060931a6607eca54c753346ff492fbf8146d20", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=680eb71564ebba5e76ce1e1a8287b30042332cc5", "patch": "@@ -199,7 +199,7 @@ pub fn metadata_matches(extern_metas: &[@ast::MetaItem],\n fn get_metadata_section(os: os,\n                         filename: &Path) -> Option<@~[u8]> {\n     unsafe {\n-        let mb = do filename.to_c_str().with_ref |buf| {\n+        let mb = do filename.with_c_str |buf| {\n             llvm::LLVMRustCreateMemoryBufferWithContentsOfFile(buf)\n         };\n         if mb as int == 0 { return option::None::<@~[u8]>; }"}, {"sha": "3400da75b9e5e880d237ea3192ce50b7b6659e8c", "filename": "src/librustc/middle/trans/asm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs?ref=680eb71564ebba5e76ce1e1a8287b30042332cc5", "patch": "@@ -120,8 +120,8 @@ pub fn trans_inline_asm(bcx: @mut Block, ia: &ast::inline_asm) -> @mut Block {\n         ast::asm_intel => lib::llvm::AD_Intel\n     };\n \n-    let r = do ia.asm.to_c_str().with_ref |a| {\n-        do constraints.to_c_str().with_ref |c| {\n+    let r = do ia.asm.with_c_str |a| {\n+        do constraints.with_c_str |c| {\n             InlineAsmCall(bcx, a, c, inputs, output, ia.volatile, ia.alignstack, dialect)\n         }\n     };"}, {"sha": "84b3ab2040722d15f59f1a65754ca8282c7fdd63", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=680eb71564ebba5e76ce1e1a8287b30042332cc5", "patch": "@@ -181,7 +181,7 @@ impl<'self> Drop for StatRecorder<'self> {\n }\n \n pub fn decl_fn(llmod: ModuleRef, name: &str, cc: lib::llvm::CallConv, ty: Type) -> ValueRef {\n-    let llfn: ValueRef = do name.to_c_str().with_ref |buf| {\n+    let llfn: ValueRef = do name.with_c_str |buf| {\n         unsafe {\n             llvm::LLVMGetOrInsertFunction(llmod, buf, ty.to_ref())\n         }\n@@ -221,7 +221,7 @@ pub fn get_extern_const(externs: &mut ExternMap, llmod: ModuleRef,\n         None => ()\n     }\n     unsafe {\n-        let c = do name.to_c_str().with_ref |buf| {\n+        let c = do name.with_c_str |buf| {\n             llvm::LLVMAddGlobal(llmod, ty.to_ref(), buf)\n         };\n         externs.insert(name, c);\n@@ -523,7 +523,7 @@ pub fn get_res_dtor(ccx: @mut CrateContext,\n // Structural comparison: a rather involved form of glue.\n pub fn maybe_name_value(cx: &CrateContext, v: ValueRef, s: &str) {\n     if cx.sess.opts.save_temps {\n-        do s.to_c_str().with_ref |buf| {\n+        do s.with_c_str |buf| {\n             unsafe {\n                 llvm::LLVMSetValueName(v, buf)\n             }\n@@ -1136,7 +1136,7 @@ pub fn new_block(cx: @mut FunctionContext,\n                  opt_node_info: Option<NodeInfo>)\n               -> @mut Block {\n     unsafe {\n-        let llbb = do name.to_c_str().with_ref |buf| {\n+        let llbb = do name.with_c_str |buf| {\n             llvm::LLVMAppendBasicBlockInContext(cx.ccx.llcx, cx.llfn, buf)\n         };\n         let bcx = @mut Block::new(llbb,\n@@ -1553,7 +1553,7 @@ pub struct BasicBlocks {\n pub fn mk_staticallocas_basic_block(llfn: ValueRef) -> BasicBlockRef {\n     unsafe {\n         let cx = task_llcx();\n-        do \"static_allocas\".to_c_str().with_ref | buf| {\n+        do \"static_allocas\".with_c_str | buf| {\n             llvm::LLVMAppendBasicBlockInContext(cx, llfn, buf)\n         }\n     }\n@@ -1562,7 +1562,7 @@ pub fn mk_staticallocas_basic_block(llfn: ValueRef) -> BasicBlockRef {\n pub fn mk_return_basic_block(llfn: ValueRef) -> BasicBlockRef {\n     unsafe {\n         let cx = task_llcx();\n-        do \"return\".to_c_str().with_ref |buf| {\n+        do \"return\".with_c_str |buf| {\n             llvm::LLVMAppendBasicBlockInContext(cx, llfn, buf)\n         }\n     }\n@@ -2328,7 +2328,7 @@ pub fn create_entry_wrapper(ccx: @mut CrateContext,\n             };\n             decl_cdecl_fn(ccx.llmod, main_name, llfty)\n         };\n-        let llbb = do \"top\".to_c_str().with_ref |buf| {\n+        let llbb = do \"top\".with_c_str |buf| {\n             unsafe {\n                 llvm::LLVMAppendBasicBlockInContext(ccx.llcx, llfn, buf)\n             }\n@@ -2338,7 +2338,7 @@ pub fn create_entry_wrapper(ccx: @mut CrateContext,\n             llvm::LLVMPositionBuilderAtEnd(bld, llbb);\n \n             let crate_map = ccx.crate_map;\n-            let opaque_crate_map = do \"crate_map\".to_c_str().with_ref |buf| {\n+            let opaque_crate_map = do \"crate_map\".with_c_str |buf| {\n                 llvm::LLVMBuildPointerCast(bld, crate_map, Type::i8p().to_ref(), buf)\n             };\n \n@@ -2356,7 +2356,7 @@ pub fn create_entry_wrapper(ccx: @mut CrateContext,\n                 };\n \n                 let args = {\n-                    let opaque_rust_main = do \"rust_main\".to_c_str().with_ref |buf| {\n+                    let opaque_rust_main = do \"rust_main\".with_c_str |buf| {\n                         llvm::LLVMBuildPointerCast(bld, rust_main, Type::i8p().to_ref(), buf)\n                     };\n \n@@ -2438,7 +2438,7 @@ pub fn get_item_val(ccx: @mut CrateContext, id: ast::NodeId) -> ValueRef {\n \n                             unsafe {\n                                 let llty = llvm::LLVMTypeOf(v);\n-                                let g = do sym.to_c_str().with_ref |buf| {\n+                                let g = do sym.with_c_str |buf| {\n                                     llvm::LLVMAddGlobal(ccx.llmod, llty, buf)\n                                 };\n \n@@ -2471,7 +2471,7 @@ pub fn get_item_val(ccx: @mut CrateContext, id: ast::NodeId) -> ValueRef {\n \n                     match (attr::first_attr_value_str_by_name(i.attrs, \"link_section\")) {\n                         Some(sect) => unsafe {\n-                            do sect.to_c_str().with_ref |buf| {\n+                            do sect.with_c_str |buf| {\n                                 llvm::LLVMSetSection(v, buf);\n                             }\n                         },\n@@ -2512,7 +2512,7 @@ pub fn get_item_val(ccx: @mut CrateContext, id: ast::NodeId) -> ValueRef {\n                         }\n                         ast::foreign_item_static(*) => {\n                             let ident = token::ident_to_str(&ni.ident);\n-                            let g = do ident.to_c_str().with_ref |buf| {\n+                            let g = do ident.with_c_str |buf| {\n                                 unsafe {\n                                     let ty = type_of(ccx, ty);\n                                     llvm::LLVMAddGlobal(ccx.llmod, ty.to_ref(), buf)\n@@ -2619,7 +2619,7 @@ pub fn trans_constant(ccx: &mut CrateContext, it: @ast::item) {\n             let s = mangle_exported_name(ccx, p, ty::mk_int()).to_managed();\n             let disr_val = vi[i].disr_val;\n             note_unique_llvm_symbol(ccx, s);\n-            let discrim_gvar = do s.to_c_str().with_ref |buf| {\n+            let discrim_gvar = do s.with_c_str |buf| {\n                 unsafe {\n                     llvm::LLVMAddGlobal(ccx.llmod, ccx.int_type.to_ref(), buf)\n                 }\n@@ -2814,7 +2814,7 @@ pub fn decl_gc_metadata(ccx: &mut CrateContext, llmod_id: &str) {\n     }\n \n     let gc_metadata_name = ~\"_gc_module_metadata_\" + llmod_id;\n-    let gc_metadata = do gc_metadata_name.to_c_str().with_ref |buf| {\n+    let gc_metadata = do gc_metadata_name.with_c_str |buf| {\n         unsafe {\n             llvm::LLVMAddGlobal(ccx.llmod, Type::i32().to_ref(), buf)\n         }\n@@ -2829,7 +2829,7 @@ pub fn decl_gc_metadata(ccx: &mut CrateContext, llmod_id: &str) {\n pub fn create_module_map(ccx: &mut CrateContext) -> ValueRef {\n     let elttype = Type::struct_([ccx.int_type, ccx.int_type], false);\n     let maptype = Type::array(&elttype, (ccx.module_data.len() + 1) as u64);\n-    let map = do \"_rust_mod_map\".to_c_str().with_ref |buf| {\n+    let map = do \"_rust_mod_map\".with_c_str |buf| {\n         unsafe {\n             llvm::LLVMAddGlobal(ccx.llmod, maptype.to_ref(), buf)\n         }\n@@ -2877,7 +2877,7 @@ pub fn decl_crate_map(sess: session::Session, mapmeta: LinkMeta,\n     let sym_name = ~\"_rust_crate_map_\" + mapname;\n     let arrtype = Type::array(&int_type, n_subcrates as u64);\n     let maptype = Type::struct_([Type::i32(), Type::i8p(), int_type, arrtype], false);\n-    let map = do sym_name.to_c_str().with_ref |buf| {\n+    let map = do sym_name.with_c_str |buf| {\n         unsafe {\n             llvm::LLVMAddGlobal(llmod, maptype.to_ref(), buf)\n         }\n@@ -2896,7 +2896,7 @@ pub fn fill_crate_map(ccx: @mut CrateContext, map: ValueRef) {\n                       cdata.name,\n                       cstore::get_crate_vers(cstore, i),\n                       cstore::get_crate_hash(cstore, i));\n-        let cr = do nm.to_c_str().with_ref |buf| {\n+        let cr = do nm.with_c_str |buf| {\n             unsafe {\n                 llvm::LLVMAddGlobal(ccx.llmod, ccx.int_type.to_ref(), buf)\n             }\n@@ -2959,21 +2959,21 @@ pub fn write_metadata(cx: &mut CrateContext, crate: &ast::Crate) {\n     let encode_parms = crate_ctxt_to_encode_parms(cx, encode_inlined_item);\n     let llmeta = C_bytes(encoder::encode_metadata(encode_parms, crate));\n     let llconst = C_struct([llmeta]);\n-    let mut llglobal = do \"rust_metadata\".to_c_str().with_ref |buf| {\n+    let mut llglobal = do \"rust_metadata\".with_c_str |buf| {\n         unsafe {\n             llvm::LLVMAddGlobal(cx.llmod, val_ty(llconst).to_ref(), buf)\n         }\n     };\n     unsafe {\n         llvm::LLVMSetInitializer(llglobal, llconst);\n-        do cx.sess.targ_cfg.target_strs.meta_sect_name.to_c_str().with_ref |buf| {\n+        do cx.sess.targ_cfg.target_strs.meta_sect_name.with_c_str |buf| {\n             llvm::LLVMSetSection(llglobal, buf)\n         };\n         lib::llvm::SetLinkage(llglobal, lib::llvm::InternalLinkage);\n \n         let t_ptr_i8 = Type::i8p();\n         llglobal = llvm::LLVMConstBitCast(llglobal, t_ptr_i8.to_ref());\n-        let llvm_used = do \"llvm.used\".to_c_str().with_ref |buf| {\n+        let llvm_used = do \"llvm.used\".with_c_str |buf| {\n             llvm::LLVMAddGlobal(cx.llmod, Type::array(&t_ptr_i8, 1).to_ref(), buf)\n         };\n         lib::llvm::SetLinkage(llvm_used, lib::llvm::AppendingLinkage);\n@@ -2987,7 +2987,7 @@ fn mk_global(ccx: &CrateContext,\n              internal: bool)\n           -> ValueRef {\n     unsafe {\n-        let llglobal = do name.to_c_str().with_ref |buf| {\n+        let llglobal = do name.with_c_str |buf| {\n             llvm::LLVMAddGlobal(ccx.llmod, val_ty(llval).to_ref(), buf)\n         };\n         llvm::LLVMSetInitializer(llglobal, llval);"}, {"sha": "cba7a2253952ff55989de9d882914dbfbd7d4510", "filename": "src/librustc/middle/trans/builder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs?ref=680eb71564ebba5e76ce1e1a8287b30042332cc5", "patch": "@@ -423,7 +423,7 @@ impl Builder {\n             if name.is_empty() {\n                 llvm::LLVMBuildAlloca(self.llbuilder, ty.to_ref(), noname())\n             } else {\n-                do name.to_c_str().with_ref |c| {\n+                do name.with_c_str |c| {\n                     llvm::LLVMBuildAlloca(self.llbuilder, ty.to_ref(), c)\n                 }\n             }\n@@ -739,7 +739,7 @@ impl Builder {\n             let sanitized = text.replace(\"$\", \"\");\n             let comment_text = fmt!(\"# %s\", sanitized.replace(\"\\n\", \"\\n\\t# \"));\n             self.count_insn(\"inlineasm\");\n-            let asm = do comment_text.to_c_str().with_ref |c| {\n+            let asm = do comment_text.with_c_str |c| {\n                 unsafe {\n                     llvm::LLVMConstInlineAsm(Type::func([], &Type::void()).to_ref(),\n                                              c, noname(), False, False)\n@@ -895,7 +895,7 @@ impl Builder {\n             let BB: BasicBlockRef = llvm::LLVMGetInsertBlock(self.llbuilder);\n             let FN: ValueRef = llvm::LLVMGetBasicBlockParent(BB);\n             let M: ModuleRef = llvm::LLVMGetGlobalParent(FN);\n-            let T: ValueRef = do \"llvm.trap\".to_c_str().with_ref |buf| {\n+            let T: ValueRef = do \"llvm.trap\".with_c_str |buf| {\n                 llvm::LLVMGetNamedFunction(M, buf)\n             };\n             assert!((T as int != 0));"}, {"sha": "4ca4a9a12fc4c96ba7355e2e90cb647139169c65", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=680eb71564ebba5e76ce1e1a8287b30042332cc5", "patch": "@@ -36,7 +36,7 @@ use std::c_str::ToCStr;\n use std::cast::transmute;\n use std::cast;\n use std::hashmap::{HashMap};\n-use std::libc::{c_uint, c_longlong, c_ulonglong};\n+use std::libc::{c_uint, c_longlong, c_ulonglong, c_char};\n use std::vec;\n use syntax::ast::ident;\n use syntax::ast_map::{path, path_elt};\n@@ -709,7 +709,7 @@ pub fn C_integral(t: Type, u: u64, sign_extend: bool) -> ValueRef {\n \n pub fn C_floating(s: &str, t: Type) -> ValueRef {\n     unsafe {\n-        do s.to_c_str().with_ref |buf| {\n+        do s.with_c_str |buf| {\n             llvm::LLVMConstRealOfString(t.to_ref(), buf)\n         }\n     }\n@@ -757,12 +757,12 @@ pub fn C_cstr(cx: &mut CrateContext, s: @str) -> ValueRef {\n             None => ()\n         }\n \n-        let sc = do s.to_c_str().with_ref |buf| {\n-            llvm::LLVMConstStringInContext(cx.llcx, buf, s.len() as c_uint, False)\n+        let sc = do s.as_imm_buf |buf, buflen| {\n+            llvm::LLVMConstStringInContext(cx.llcx, buf as *c_char, buflen as c_uint, False)\n         };\n \n         let gsym = token::gensym(\"str\");\n-        let g = do fmt!(\"str%u\", gsym).to_c_str().with_ref |buf| {\n+        let g = do fmt!(\"str%u\", gsym).with_c_str |buf| {\n             llvm::LLVMAddGlobal(cx.llmod, val_ty(sc).to_ref(), buf)\n         };\n         llvm::LLVMSetInitializer(g, sc);"}, {"sha": "87d26fa5ba07c6f7b4be346e0a25166583f08159", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=680eb71564ebba5e76ce1e1a8287b30042332cc5", "patch": "@@ -103,7 +103,7 @@ pub fn const_vec(cx: @mut CrateContext, e: &ast::expr, es: &[@ast::expr])\n \n fn const_addr_of(cx: &mut CrateContext, cv: ValueRef) -> ValueRef {\n     unsafe {\n-        let gv = do \"const\".to_c_str().with_ref |name| {\n+        let gv = do \"const\".with_c_str |name| {\n             llvm::LLVMAddGlobal(cx.llmod, val_ty(cv).to_ref(), name)\n         };\n         llvm::LLVMSetInitializer(gv, cv);\n@@ -529,7 +529,7 @@ fn const_expr_unadjusted(cx: @mut CrateContext, e: &ast::expr) -> ValueRef {\n               ast::expr_vec(ref es, ast::m_imm) => {\n                 let (cv, sz, llunitty) = const_vec(cx, e, *es);\n                 let llty = val_ty(cv);\n-                let gv = do \"const\".to_c_str().with_ref |name| {\n+                let gv = do \"const\".with_c_str |name| {\n                     llvm::LLVMAddGlobal(cx.llmod, llty.to_ref(), name)\n                 };\n                 llvm::LLVMSetInitializer(gv, cv);"}, {"sha": "5d0849ef12c9ab2ba2bcca0e845b013959ed84fc", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=680eb71564ebba5e76ce1e1a8287b30042332cc5", "patch": "@@ -128,15 +128,15 @@ impl CrateContext {\n         unsafe {\n             let llcx = llvm::LLVMContextCreate();\n             set_task_llcx(llcx);\n-            let llmod = do name.to_c_str().with_ref |buf| {\n+            let llmod = do name.with_c_str |buf| {\n                 llvm::LLVMModuleCreateWithNameInContext(buf, llcx)\n             };\n             let data_layout: &str = sess.targ_cfg.target_strs.data_layout;\n             let targ_triple: &str = sess.targ_cfg.target_strs.target_triple;\n-            do data_layout.to_c_str().with_ref |buf| {\n+            do data_layout.with_c_str |buf| {\n                 llvm::LLVMSetDataLayout(llmod, buf)\n             };\n-            do targ_triple.to_c_str().with_ref |buf| {\n+            do targ_triple.with_c_str |buf| {\n                 llvm::LLVMSetTarget(llmod, buf)\n             };\n             let targ_cfg = sess.targ_cfg;"}, {"sha": "04d401f82970ceb567c12dd1f24f4554b26374e4", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=680eb71564ebba5e76ce1e1a8287b30042332cc5", "patch": "@@ -237,7 +237,7 @@ pub fn trans_log(log_ex: &ast::expr,\n             ccx, modpath, \"loglevel\");\n         let global;\n         unsafe {\n-            global = do s.to_c_str().with_ref |buf| {\n+            global = do s.with_c_str |buf| {\n                 llvm::LLVMAddGlobal(ccx.llmod, Type::i32().to_ref(), buf)\n             };\n             llvm::LLVMSetGlobalConstant(global, False);"}, {"sha": "d23c009ac1599c87bc2ea57057f0a864510c2adb", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=680eb71564ebba5e76ce1e1a8287b30042332cc5", "patch": "@@ -207,7 +207,7 @@ pub fn create_argument_metadata(bcx: @mut Block,\n             argument_index as c_uint\n         };\n \n-        let arg_metadata = do name.to_c_str().with_ref |name| {\n+        let arg_metadata = do name.with_c_str |name| {\n             unsafe {\n                 llvm::LLVMDIBuilderCreateLocalVariable(\n                     DIB(cx),\n@@ -351,8 +351,8 @@ pub fn create_function_metadata(fcx: &mut FunctionContext) -> DISubprogram {\n     };\n \n     let fn_metadata =\n-        do cx.sess.str_of(ident).to_c_str().with_ref |name| {\n-        do cx.sess.str_of(ident).to_c_str().with_ref |linkage| {\n+        do cx.sess.str_of(ident).with_c_str |name| {\n+        do cx.sess.str_of(ident).with_c_str |linkage| {\n             unsafe {\n                 llvm::LLVMDIBuilderCreateFunction(\n                     DIB(cx),\n@@ -420,11 +420,11 @@ fn compile_unit_metadata(cx: @mut CrateContext) {\n     let work_dir = cx.sess.working_dir.to_str();\n     let producer = fmt!(\"rustc version %s\", env!(\"CFG_VERSION\"));\n \n-    do crate_name.to_c_str().with_ref |crate_name| {\n-    do work_dir.to_c_str().with_ref |work_dir| {\n-    do producer.to_c_str().with_ref |producer| {\n-    do \"\".to_c_str().with_ref |flags| {\n-    do \"\".to_c_str().with_ref |split_name| {\n+    do crate_name.with_c_str |crate_name| {\n+    do work_dir.with_c_str |work_dir| {\n+    do producer.with_c_str |producer| {\n+    do \"\".with_c_str |flags| {\n+    do \"\".with_c_str |split_name| {\n         unsafe {\n             llvm::LLVMDIBuilderCreateCompileUnit(dcx.builder,\n                 DW_LANG_RUST as c_uint, crate_name, work_dir, producer,\n@@ -449,7 +449,7 @@ fn declare_local(bcx: @mut Block,\n     let type_metadata = type_metadata(cx, variable_type, span);\n     let scope = scope_metadata(bcx.fcx, node_id, span);\n \n-    let var_metadata = do name.to_c_str().with_ref |name| {\n+    let var_metadata = do name.with_c_str |name| {\n         unsafe {\n             llvm::LLVMDIBuilderCreateLocalVariable(\n                 DIB(cx),\n@@ -501,8 +501,8 @@ fn file_metadata(cx: &mut CrateContext, full_path: &str) -> DIFile {\n         };\n \n     let file_metadata =\n-        do file_name.to_c_str().with_ref |file_name| {\n-        do work_dir.to_c_str().with_ref |work_dir| {\n+        do file_name.with_c_str |file_name| {\n+        do work_dir.with_c_str |work_dir| {\n             unsafe {\n                 llvm::LLVMDIBuilderCreateFile(DIB(cx), file_name, work_dir)\n             }\n@@ -566,7 +566,7 @@ fn basic_type_metadata(cx: &mut CrateContext, t: ty::t) -> DIType {\n \n     let llvm_type = type_of::type_of(cx, t);\n     let (size, align) = size_and_align_of(cx, llvm_type);\n-    let ty_metadata = do name.to_c_str().with_ref |name| {\n+    let ty_metadata = do name.with_c_str |name| {\n         unsafe {\n             llvm::LLVMDIBuilderCreateBasicType(\n                 DIB(cx),\n@@ -587,7 +587,7 @@ fn pointer_type_metadata(cx: &mut CrateContext,\n     let pointer_llvm_type = type_of::type_of(cx, pointer_type);\n     let (pointer_size, pointer_align) = size_and_align_of(cx, pointer_llvm_type);\n     let name = ty_to_str(cx.tcx, pointer_type);\n-    let ptr_metadata = do name.to_c_str().with_ref |name| {\n+    let ptr_metadata = do name.with_c_str |name| {\n         unsafe {\n             llvm::LLVMDIBuilderCreatePointerType(\n                 DIB(cx),\n@@ -681,7 +681,7 @@ fn enum_metadata(cx: &mut CrateContext,\n             let name: &str = cx.sess.str_of(v.name);\n             let discriminant_value = v.disr_val as c_ulonglong;\n \n-            do name.to_c_str().with_ref |name| {\n+            do name.with_c_str |name| {\n                 unsafe {\n                     llvm::LLVMDIBuilderCreateEnumerator(\n                         DIB(cx),\n@@ -695,7 +695,7 @@ fn enum_metadata(cx: &mut CrateContext,\n     let loc = span_start(cx, span);\n     let file_metadata = file_metadata(cx, loc.file.name);\n \n-    let discriminant_type_metadata = do enum_name.to_c_str().with_ref |enum_name| {\n+    let discriminant_type_metadata = do enum_name.with_c_str |enum_name| {\n         unsafe {\n             llvm::LLVMDIBuilderCreateEnumerationType(\n                 DIB(cx),\n@@ -732,7 +732,7 @@ fn enum_metadata(cx: &mut CrateContext,\n                         Some(discriminant_type_metadata),\n                         span);\n \n-                    do \"\".to_c_str().with_ref |name| {\n+                    do \"\".with_c_str |name| {\n                         unsafe {\n                             llvm::LLVMDIBuilderCreateMemberType(\n                                 DIB(cx),\n@@ -752,7 +752,7 @@ fn enum_metadata(cx: &mut CrateContext,\n             let enum_llvm_type = type_of::type_of(cx, enum_type);\n             let (enum_type_size, enum_type_align) = size_and_align_of(cx, enum_llvm_type);\n \n-            return do enum_name.to_c_str().with_ref |enum_name| {\n+            return do enum_name.with_c_str |enum_name| {\n                 unsafe {\n                     llvm::LLVMDIBuilderCreateUnionType(\n                     DIB(cx),\n@@ -836,7 +836,7 @@ fn composite_type_metadata(cx: &mut CrateContext,\n             let member_offset = machine::llelement_offset(cx, composite_llvm_type, i);\n             let member_name: &str = member_names[i];\n \n-            do member_name.to_c_str().with_ref |member_name| {\n+            do member_name.with_c_str |member_name| {\n                 unsafe {\n                     llvm::LLVMDIBuilderCreateMemberType(\n                         DIB(cx),\n@@ -854,7 +854,7 @@ fn composite_type_metadata(cx: &mut CrateContext,\n         })\n         .collect();\n \n-    return do composite_type_name.to_c_str().with_ref |name| {\n+    return do composite_type_name.with_c_str |name| {\n         unsafe {\n             llvm::LLVMDIBuilderCreateStructType(\n                 DIB(cx),\n@@ -1080,7 +1080,7 @@ fn unimplemented_type_metadata(cx: &mut CrateContext, t: ty::t) -> DIType {\n     debug!(\"unimplemented_type_metadata: %?\", ty::get(t));\n \n     let name = ty_to_str(cx.tcx, t);\n-    let metadata = do fmt!(\"NYI<%s>\", name).to_c_str().with_ref |name| {\n+    let metadata = do fmt!(\"NYI<%s>\", name).with_c_str |name| {\n         unsafe {\n             llvm::LLVMDIBuilderCreateBasicType(\n                 DIB(cx),"}, {"sha": "04fd477a317380d2eee4a560eeb9c482e0f24bca", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=680eb71564ebba5e76ce1e1a8287b30042332cc5", "patch": "@@ -1030,7 +1030,7 @@ fn trans_lvalue_unadjusted(bcx: @mut Block, expr: @ast::expr) -> DatumBlock {\n                             let symbol = csearch::get_symbol(\n                                 bcx.ccx().sess.cstore,\n                                 did);\n-                            let llval = do symbol.to_c_str().with_ref |buf| {\n+                            let llval = do symbol.with_c_str |buf| {\n                                 llvm::LLVMAddGlobal(bcx.ccx().llmod,\n                                                     llty.to_ref(),\n                                                     buf)"}, {"sha": "9acc3018046b3bf324559ed27675ea2ac27668fe", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=680eb71564ebba5e76ce1e1a8287b30042332cc5", "patch": "@@ -673,7 +673,7 @@ pub fn declare_tydesc(ccx: &mut CrateContext, t: ty::t) -> @mut tydesc_info {\n     let name = mangle_internal_name_by_type_and_seq(ccx, t, \"tydesc\").to_managed();\n     note_unique_llvm_symbol(ccx, name);\n     debug!(\"+++ declare_tydesc %s %s\", ppaux::ty_to_str(ccx.tcx, t), name);\n-    let gvar = do name.to_c_str().with_ref |buf| {\n+    let gvar = do name.with_c_str |buf| {\n         unsafe {\n             llvm::LLVMAddGlobal(ccx.llmod, ccx.tydesc_type.to_ref(), buf)\n         }"}, {"sha": "9ffbafb706cd4ab8ce68d65c277a622af86e1a8e", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=680eb71564ebba5e76ce1e1a8287b30042332cc5", "patch": "@@ -537,7 +537,7 @@ pub fn make_vtable(ccx: &mut CrateContext,\n \n         let tbl = C_struct(components);\n         let vtable = ccx.sess.str_of(gensym_name(\"vtable\"));\n-        let vt_gvar = do vtable.to_c_str().with_ref |buf| {\n+        let vt_gvar = do vtable.with_c_str |buf| {\n             llvm::LLVMAddGlobal(ccx.llmod, val_ty(tbl).to_ref(), buf)\n         };\n         llvm::LLVMSetInitializer(vt_gvar, tbl);"}, {"sha": "47d5b7ff3a53f9ae5b72793068a0b84f919b3fd8", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=680eb71564ebba5e76ce1e1a8287b30042332cc5", "patch": "@@ -265,7 +265,7 @@ pub fn trans_lit_str(bcx: @mut Block,\n         Ignore => bcx,\n         SaveIn(lldest) => {\n             unsafe {\n-                let bytes = str_lit.len(); // count null-terminator too\n+                let bytes = str_lit.len();\n                 let llbytes = C_uint(bcx.ccx(), bytes);\n                 let llcstr = C_cstr(bcx.ccx(), str_lit);\n                 let llcstr = llvm::LLVMConstPointerCast(llcstr, Type::i8p().to_ref());"}, {"sha": "f8f6f7b87ec6a9419208f6cf08bd98bde9b55226", "filename": "src/librustc/middle/trans/type_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs?ref=680eb71564ebba5e76ce1e1a8287b30042332cc5", "patch": "@@ -171,7 +171,7 @@ impl Type {\n \n     pub fn named_struct(name: &str) -> Type {\n         let ctx = base::task_llcx();\n-        ty!(name.to_c_str().with_ref(|s| llvm::LLVMStructCreateNamed(ctx, s)))\n+        ty!(name.with_c_str(|s| llvm::LLVMStructCreateNamed(ctx, s)))\n     }\n \n     pub fn empty_struct() -> Type {"}, {"sha": "82f098b668dc45d1dbd424e6f56816c3496c4427", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=680eb71564ebba5e76ce1e1a8287b30042332cc5", "patch": "@@ -398,8 +398,8 @@ pub fn link_exe(src: &Path, dest: &Path) -> bool {\n     use std::libc;\n \n     unsafe {\n-        do src.to_c_str().with_ref |src_buf| {\n-            do dest.to_c_str().with_ref |dest_buf| {\n+        do src.with_c_str |src_buf| {\n+            do dest.with_c_str |dest_buf| {\n                 libc::link(src_buf, dest_buf) == 0 as libc::c_int &&\n                     libc::chmod(dest_buf, 755) == 0 as libc::c_int\n             }"}, {"sha": "6fc14439abb24e1a59030c770c5213522677fd23", "filename": "src/libstd/c_str.rs", "status": "modified", "additions": 124, "deletions": 13, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibstd%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibstd%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_str.rs?ref=680eb71564ebba5e76ce1e1a8287b30042332cc5", "patch": "@@ -9,14 +9,28 @@\n // except according to those terms.\n \n use cast;\n-use iterator::Iterator;\n+use iterator::{Iterator,range};\n use libc;\n use ops::Drop;\n use option::{Option, Some, None};\n use ptr::RawPtr;\n use ptr;\n use str::StrSlice;\n-use vec::ImmutableVector;\n+use vec::{ImmutableVector,CopyableVector};\n+use container::Container;\n+\n+/// Resolution options for the `null_byte` condition\n+pub enum NullByteResolution {\n+    /// Truncate at the null byte\n+    Truncate,\n+    /// Use a replacement byte\n+    ReplaceWith(libc::c_char)\n+}\n+\n+condition! {\n+    // this should be &[u8] but there's a lifetime issue\n+    null_byte: (~[u8]) -> super::NullByteResolution;\n+}\n \n /// The representation of a C String.\n ///\n@@ -34,6 +48,7 @@ impl CString {\n     }\n \n     /// Unwraps the wrapped `*libc::c_char` from the `CString` wrapper.\n+    /// Any ownership of the buffer by the `CString` wrapper is forgotten.\n     pub unsafe fn unwrap(self) -> *libc::c_char {\n         let mut c_str = self;\n         c_str.owns_buffer_ = false;\n@@ -89,7 +104,7 @@ impl CString {\n     }\n \n     /// Return a CString iterator.\n-    fn iter<'a>(&'a self) -> CStringIterator<'a> {\n+    pub fn iter<'a>(&'a self) -> CStringIterator<'a> {\n         CStringIterator {\n             ptr: self.buf,\n             lifetime: unsafe { cast::transmute(self.buf) },\n@@ -109,31 +124,82 @@ impl Drop for CString {\n \n /// A generic trait for converting a value to a CString.\n pub trait ToCStr {\n-    /// Create a C String.\n+    /// Copy the receiver into a CString.\n+    ///\n+    /// # Failure\n+    ///\n+    /// Raises the `null_byte` condition if the receiver has an interior null.\n     fn to_c_str(&self) -> CString;\n+\n+    /// Unsafe variant of `to_c_str()` that doesn't check for nulls.\n+    unsafe fn to_c_str_unchecked(&self) -> CString;\n+\n+    /// Work with a temporary CString constructed from the receiver.\n+    /// The provided `*libc::c_char` will be freed immediately upon return.\n+    ///\n+    /// # Example\n+    ///\n+    /// ~~~ {.rust}\n+    /// let s = \"PATH\".with_c_str(|path| libc::getenv(path))\n+    /// ~~~\n+    ///\n+    /// # Failure\n+    ///\n+    /// Raises the `null_byte` condition if the receiver has an interior null.\n+    #[inline]\n+    fn with_c_str<T>(&self, f: &fn(*libc::c_char) -> T) -> T {\n+        self.to_c_str().with_ref(f)\n+    }\n+\n+    /// Unsafe variant of `with_c_str()` that doesn't check for nulls.\n+    #[inline]\n+    unsafe fn with_c_str_unchecked<T>(&self, f: &fn(*libc::c_char) -> T) -> T {\n+        self.to_c_str_unchecked().with_ref(f)\n+    }\n }\n \n impl<'self> ToCStr for &'self str {\n     #[inline]\n     fn to_c_str(&self) -> CString {\n         self.as_bytes().to_c_str()\n     }\n+\n+    #[inline]\n+    unsafe fn to_c_str_unchecked(&self) -> CString {\n+        self.as_bytes().to_c_str_unchecked()\n+    }\n }\n \n impl<'self> ToCStr for &'self [u8] {\n     fn to_c_str(&self) -> CString {\n-        do self.as_imm_buf |self_buf, self_len| {\n-            unsafe {\n-                let buf = libc::malloc(self_len as libc::size_t + 1) as *mut u8;\n-                if buf.is_null() {\n-                    fail!(\"failed to allocate memory!\");\n+        let mut cs = unsafe { self.to_c_str_unchecked() };\n+        do cs.with_mut_ref |buf| {\n+            for i in range(0, self.len()) {\n+                unsafe {\n+                    let p = buf.offset_inbounds(i as int);\n+                    if *p == 0 {\n+                        match null_byte::cond.raise(self.to_owned()) {\n+                            Truncate => break,\n+                            ReplaceWith(c) => *p = c\n+                        }\n+                    }\n                 }\n+            }\n+        }\n+        cs\n+    }\n \n-                ptr::copy_memory(buf, self_buf, self_len);\n-                *ptr::mut_offset(buf, self_len as int) = 0;\n-\n-                CString::new(buf as *libc::c_char, true)\n+    unsafe fn to_c_str_unchecked(&self) -> CString {\n+        do self.as_imm_buf |self_buf, self_len| {\n+            let buf = libc::malloc(self_len as libc::size_t + 1) as *mut u8;\n+            if buf.is_null() {\n+                fail!(\"failed to allocate memory!\");\n             }\n+\n+            ptr::copy_memory(buf, self_buf, self_len);\n+            *ptr::mut_offset(buf, self_len as int) = 0;\n+\n+            CString::new(buf as *libc::c_char, true)\n         }\n     }\n }\n@@ -230,4 +296,49 @@ mod tests {\n         assert_eq!(iter.next(), Some('o' as libc::c_char));\n         assert_eq!(iter.next(), None);\n     }\n+\n+    #[test]\n+    #[ignore(cfg(windows))]\n+    fn test_to_c_str_fail() {\n+        use c_str::null_byte::cond;\n+\n+        let mut error_happened = false;\n+        do cond.trap(|err| {\n+            assert_eq!(err, bytes!(\"he\", 0, \"llo\").to_owned())\n+            error_happened = true;\n+            Truncate\n+        }).inside {\n+            \"he\\x00llo\".to_c_str()\n+        };\n+        assert!(error_happened);\n+\n+        do cond.trap(|_| {\n+            ReplaceWith('?' as libc::c_char)\n+        }).inside(|| \"he\\x00llo\".to_c_str()).with_ref |buf| {\n+            unsafe {\n+                assert_eq!(*buf.offset(0), 'h' as libc::c_char);\n+                assert_eq!(*buf.offset(1), 'e' as libc::c_char);\n+                assert_eq!(*buf.offset(2), '?' as libc::c_char);\n+                assert_eq!(*buf.offset(3), 'l' as libc::c_char);\n+                assert_eq!(*buf.offset(4), 'l' as libc::c_char);\n+                assert_eq!(*buf.offset(5), 'o' as libc::c_char);\n+                assert_eq!(*buf.offset(6), 0);\n+            }\n+        }\n+    }\n+\n+    #[test]\n+    fn test_to_c_str_unchecked() {\n+        unsafe {\n+            do \"he\\x00llo\".to_c_str_unchecked().with_ref |buf| {\n+                assert_eq!(*buf.offset(0), 'h' as libc::c_char);\n+                assert_eq!(*buf.offset(1), 'e' as libc::c_char);\n+                assert_eq!(*buf.offset(2), 0);\n+                assert_eq!(*buf.offset(3), 'l' as libc::c_char);\n+                assert_eq!(*buf.offset(4), 'l' as libc::c_char);\n+                assert_eq!(*buf.offset(5), 'o' as libc::c_char);\n+                assert_eq!(*buf.offset(6), 0);\n+            }\n+        }\n+    }\n }"}, {"sha": "c9e0c4f862d3a6e2f860c2f1878b51a33b6bb725", "filename": "src/libstd/io.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=680eb71564ebba5e76ce1e1a8287b30042332cc5", "patch": "@@ -1041,8 +1041,8 @@ pub fn stdin() -> @Reader {\n }\n \n pub fn file_reader(path: &Path) -> Result<@Reader, ~str> {\n-    let f = do path.to_c_str().with_ref |pathbuf| {\n-        do \"rb\".to_c_str().with_ref |modebuf| {\n+    let f = do path.with_c_str |pathbuf| {\n+        do \"rb\".with_c_str |modebuf| {\n             unsafe { libc::fopen(pathbuf, modebuf as *libc::c_char) }\n         }\n     };\n@@ -1291,7 +1291,7 @@ pub fn mk_file_writer(path: &Path, flags: &[FileFlag])\n         }\n     }\n     let fd = unsafe {\n-        do path.to_c_str().with_ref |pathbuf| {\n+        do path.with_c_str |pathbuf| {\n             libc::open(pathbuf, fflags, (S_IRUSR | S_IWUSR) as c_int)\n         }\n     };\n@@ -1574,8 +1574,8 @@ pub fn file_writer(path: &Path, flags: &[FileFlag]) -> Result<@Writer, ~str> {\n // FIXME: fileflags // #2004\n pub fn buffered_file_writer(path: &Path) -> Result<@Writer, ~str> {\n     unsafe {\n-        let f = do path.to_c_str().with_ref |pathbuf| {\n-            do \"w\".to_c_str().with_ref |modebuf| {\n+        let f = do path.with_c_str |pathbuf| {\n+            do \"w\".with_c_str |modebuf| {\n                 libc::fopen(pathbuf, modebuf)\n             }\n         };"}, {"sha": "b357489d62ff82174fab87f883b9b21509f94e06", "filename": "src/libstd/os.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=680eb71564ebba5e76ce1e1a8287b30042332cc5", "patch": "@@ -239,7 +239,7 @@ pub fn env() -> ~[(~str,~str)] {\n pub fn getenv(n: &str) -> Option<~str> {\n     unsafe {\n         do with_env_lock {\n-            let s = do n.to_c_str().with_ref |buf| {\n+            let s = do n.with_c_str |buf| {\n                 libc::getenv(buf)\n             };\n             if s.is_null() {\n@@ -274,8 +274,8 @@ pub fn getenv(n: &str) -> Option<~str> {\n pub fn setenv(n: &str, v: &str) {\n     unsafe {\n         do with_env_lock {\n-            do n.to_c_str().with_ref |nbuf| {\n-                do v.to_c_str().with_ref |vbuf| {\n+            do n.with_c_str |nbuf| {\n+                do v.with_c_str |vbuf| {\n                     libc::funcs::posix01::unistd::setenv(nbuf, vbuf, 1);\n                 }\n             }\n@@ -306,7 +306,7 @@ pub fn unsetenv(n: &str) {\n     fn _unsetenv(n: &str) {\n         unsafe {\n             do with_env_lock {\n-                do n.to_c_str().with_ref |nbuf| {\n+                do n.with_c_str |nbuf| {\n                     libc::funcs::posix01::unistd::unsetenv(nbuf);\n                 }\n             }\n@@ -328,7 +328,7 @@ pub fn unsetenv(n: &str) {\n }\n \n pub fn fdopen(fd: c_int) -> *FILE {\n-    do \"r\".to_c_str().with_ref |modebuf| {\n+    do \"r\".with_c_str |modebuf| {\n         unsafe {\n             libc::fdopen(fd, modebuf)\n         }\n@@ -464,7 +464,7 @@ pub fn self_exe_path() -> Option<Path> {\n             let mut path = [0 as c_char, .. TMPBUF_SZ];\n \n             do path.as_mut_buf |buf, len| {\n-                let len = do \"/proc/self/exe\".to_c_str().with_ref |proc_self_buf| {\n+                let len = do \"/proc/self/exe\".with_c_str |proc_self_buf| {\n                     readlink(proc_self_buf, buf, len as size_t) as uint\n                 };\n \n@@ -593,7 +593,7 @@ pub fn walk_dir(p: &Path, f: &fn(&Path) -> bool) -> bool {\n /// Indicates whether a path represents a directory\n pub fn path_is_dir(p: &Path) -> bool {\n     unsafe {\n-        do p.to_c_str().with_ref |buf| {\n+        do p.with_c_str |buf| {\n             rustrt::rust_path_is_dir(buf) != 0 as c_int\n         }\n     }\n@@ -602,7 +602,7 @@ pub fn path_is_dir(p: &Path) -> bool {\n /// Indicates whether a path exists\n pub fn path_exists(p: &Path) -> bool {\n     unsafe {\n-        do p.to_c_str().with_ref |buf| {\n+        do p.with_c_str |buf| {\n             rustrt::rust_path_exists(buf) != 0 as c_int\n         }\n     }\n@@ -645,7 +645,7 @@ pub fn make_dir(p: &Path, mode: c_int) -> bool {\n \n     #[cfg(unix)]\n     fn mkdir(p: &Path, mode: c_int) -> bool {\n-        do p.to_c_str().with_ref |buf| {\n+        do p.with_c_str |buf| {\n             unsafe {\n                 libc::mkdir(buf, mode as libc::mode_t) == (0 as c_int)\n             }\n@@ -697,7 +697,7 @@ pub fn list_dir(p: &Path) -> ~[~str] {\n             let mut strings = ~[];\n             debug!(\"os::list_dir -- BEFORE OPENDIR\");\n \n-            let dir_ptr = do p.to_c_str().with_ref |buf| {\n+            let dir_ptr = do p.with_c_str |buf| {\n                 opendir(buf)\n             };\n \n@@ -819,7 +819,7 @@ pub fn remove_dir(p: &Path) -> bool {\n \n     #[cfg(unix)]\n     fn rmdir(p: &Path) -> bool {\n-        do p.to_c_str().with_ref |buf| {\n+        do p.with_c_str |buf| {\n             unsafe {\n                 libc::rmdir(buf) == (0 as c_int)\n             }\n@@ -844,7 +844,7 @@ pub fn change_dir(p: &Path) -> bool {\n \n     #[cfg(unix)]\n     fn chdir(p: &Path) -> bool {\n-        do p.to_c_str().with_ref |buf| {\n+        do p.with_c_str |buf| {\n             unsafe {\n                 libc::chdir(buf) == (0 as c_int)\n             }\n@@ -872,8 +872,8 @@ pub fn copy_file(from: &Path, to: &Path) -> bool {\n     #[cfg(unix)]\n     fn do_copy_file(from: &Path, to: &Path) -> bool {\n         unsafe {\n-            let istream = do from.to_c_str().with_ref |fromp| {\n-                do \"rb\".to_c_str().with_ref |modebuf| {\n+            let istream = do from.with_c_str |fromp| {\n+                do \"rb\".with_c_str |modebuf| {\n                     libc::fopen(fromp, modebuf)\n                 }\n             };\n@@ -884,8 +884,8 @@ pub fn copy_file(from: &Path, to: &Path) -> bool {\n             let from_mode = from.get_mode().expect(\"copy_file: couldn't get permissions \\\n                                                     for source file\");\n \n-            let ostream = do to.to_c_str().with_ref |top| {\n-                do \"w+b\".to_c_str().with_ref |modebuf| {\n+            let ostream = do to.with_c_str |top| {\n+                do \"w+b\".with_c_str |modebuf| {\n                     libc::fopen(top, modebuf)\n                 }\n             };\n@@ -917,7 +917,7 @@ pub fn copy_file(from: &Path, to: &Path) -> bool {\n             fclose(ostream);\n \n             // Give the new file the old file's permissions\n-            if do to.to_c_str().with_ref |to_buf| {\n+            if do to.with_c_str |to_buf| {\n                 libc::chmod(to_buf, from_mode as libc::mode_t)\n             } != 0 {\n                 return false; // should be a condition...\n@@ -944,7 +944,7 @@ pub fn remove_file(p: &Path) -> bool {\n     #[cfg(unix)]\n     fn unlink(p: &Path) -> bool {\n         unsafe {\n-            do p.to_c_str().with_ref |buf| {\n+            do p.with_c_str |buf| {\n                 libc::unlink(buf) == (0 as c_int)\n             }\n         }\n@@ -1282,7 +1282,7 @@ pub fn glob(pattern: &str) -> ~[Path] {\n     }\n \n     let mut g = default_glob_t();\n-    do pattern.to_c_str().with_ref |c_pattern| {\n+    do pattern.with_c_str |c_pattern| {\n         unsafe { libc::glob(c_pattern, 0, ptr::null(), &mut g) }\n     };\n     do(|| {\n@@ -1929,14 +1929,14 @@ mod tests {\n             let out = tempdir.push(\"out.txt\");\n \n             /* Write the temp input file */\n-            let ostream = do input.to_c_str().with_ref |fromp| {\n-                do \"w+b\".to_c_str().with_ref |modebuf| {\n+            let ostream = do input.with_c_str |fromp| {\n+                do \"w+b\".with_c_str |modebuf| {\n                     libc::fopen(fromp, modebuf)\n                 }\n             };\n             assert!((ostream as uint != 0u));\n             let s = ~\"hello\";\n-            do \"hello\".to_c_str().with_ref |buf| {\n+            do \"hello\".with_c_str |buf| {\n                 let write_len = libc::fwrite(buf as *c_void,\n                                              1u as size_t,\n                                              (s.len() + 1u) as size_t,\n@@ -2013,11 +2013,11 @@ mod tests {\n         remove_file(&path);\n \n         let fd = unsafe {\n-            let fd = do path.to_c_str().with_ref |path| {\n+            let fd = do path.with_c_str |path| {\n                 open(path, O_CREAT | O_RDWR | O_TRUNC, S_IRUSR | S_IWUSR)\n             };\n             lseek_(fd, size);\n-            do \"x\".to_c_str().with_ref |x| {\n+            do \"x\".with_c_str |x| {\n                 assert!(write(fd, x as *c_void, 1) == 1);\n             }\n             fd"}, {"sha": "de7658b5710b32cded88809f57693383a8896b5e", "filename": "src/libstd/path.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=680eb71564ebba5e76ce1e1a8287b30042332cc5", "patch": "@@ -381,7 +381,7 @@ mod stat {\n #[cfg(target_os = \"win32\")]\n impl WindowsPath {\n     pub fn stat(&self) -> Option<libc::stat> {\n-        do self.to_c_str().with_ref |buf| {\n+        do self.with_c_str |buf| {\n             let mut st = stat::arch::default_stat();\n             match unsafe { libc::stat(buf, &mut st) } {\n                 0 => Some(st),\n@@ -415,7 +415,7 @@ impl WindowsPath {\n #[cfg(not(target_os = \"win32\"))]\n impl PosixPath {\n     pub fn stat(&self) -> Option<libc::stat> {\n-        do self.to_c_str().with_ref |buf| {\n+        do self.with_c_str |buf| {\n             let mut st = stat::arch::default_stat();\n             match unsafe { libc::stat(buf as *libc::c_char, &mut st) } {\n                 0 => Some(st),\n@@ -493,7 +493,7 @@ impl PosixPath {\n #[cfg(unix)]\n impl PosixPath {\n     pub fn lstat(&self) -> Option<libc::stat> {\n-        do self.to_c_str().with_ref |buf| {\n+        do self.with_c_str |buf| {\n             let mut st = stat::arch::default_stat();\n             match unsafe { libc::lstat(buf, &mut st) } {\n                 0 => Some(st),\n@@ -569,6 +569,10 @@ impl ToCStr for PosixPath {\n     fn to_c_str(&self) -> c_str::CString {\n         self.to_str().to_c_str()\n     }\n+\n+    unsafe fn to_c_str_unchecked(&self) -> c_str::CString {\n+        self.to_str().to_c_str_unchecked()\n+    }\n }\n \n // FIXME (#3227): when default methods in traits are working, de-duplicate\n@@ -781,6 +785,10 @@ impl c_str::ToCStr for WindowsPath {\n     fn to_c_str(&self) -> c_str::CString {\n         self.to_str().to_c_str()\n     }\n+\n+    unsafe fn to_c_str_unchecked(&self) -> c_str::CString {\n+        self.to_str().to_c_str_unchecked()\n+    }\n }\n \n impl GenericPath for WindowsPath {"}, {"sha": "de8f8c69e8432e25cd4137f9eae6007c3e59b561", "filename": "src/libstd/ptr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibstd%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibstd%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fptr.rs?ref=680eb71564ebba5e76ce1e1a8287b30042332cc5", "patch": "@@ -482,7 +482,7 @@ pub mod ptr_tests {\n     fn test_position() {\n         use libc::c_char;\n \n-        do \"hello\".to_c_str().with_ref |p| {\n+        do \"hello\".with_c_str |p| {\n             unsafe {\n                 assert!(2u == position(p, |c| *c == 'l' as c_char));\n                 assert!(4u == position(p, |c| *c == 'o' as c_char));\n@@ -493,9 +493,9 @@ pub mod ptr_tests {\n \n     #[test]\n     fn test_buf_len() {\n-        do \"hello\".to_c_str().with_ref |p0| {\n-            do \"there\".to_c_str().with_ref |p1| {\n-                do \"thing\".to_c_str().with_ref |p2| {\n+        do \"hello\".with_c_str |p0| {\n+            do \"there\".with_c_str |p1| {\n+                do \"thing\".with_c_str |p2| {\n                     let v = ~[p0, p1, p2, null()];\n                     do v.as_imm_buf |vp, len| {\n                         assert_eq!(unsafe { buf_len(vp) }, 3u);"}, {"sha": "ba4cbc668038fcec80364da26d167f7ae5e762cd", "filename": "src/libstd/rt/borrowck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibstd%2Frt%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibstd%2Frt%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fborrowck.rs?ref=680eb71564ebba5e76ce1e1a8287b30042332cc5", "patch": "@@ -52,7 +52,7 @@ unsafe fn fail_borrowed(box: *mut raw::Box<()>, file: *c_char, line: size_t) {\n     match try_take_task_borrow_list() {\n         None => { // not recording borrows\n             let msg = \"borrowed\";\n-            do msg.to_c_str().with_ref |msg_p| {\n+            do msg.with_c_str |msg_p| {\n                 sys::begin_unwind_(msg_p, file, line);\n             }\n         }\n@@ -68,7 +68,7 @@ unsafe fn fail_borrowed(box: *mut raw::Box<()>, file: *c_char, line: size_t) {\n                     sep = \" and at \";\n                 }\n             }\n-            do msg.to_c_str().with_ref |msg_p| {\n+            do msg.with_c_str |msg_p| {\n                 sys::begin_unwind_(msg_p, file, line)\n             }\n         }\n@@ -208,7 +208,7 @@ pub unsafe fn unrecord_borrow(a: *u8, old_ref_count: uint,\n             let br = borrow_list.pop();\n             if br.box != a || br.file != file || br.line != line {\n                 let err = fmt!(\"wrong borrow found, br=%?\", br);\n-                do err.to_c_str().with_ref |msg_p| {\n+                do err.with_c_str |msg_p| {\n                     sys::begin_unwind_(msg_p, file, line)\n                 }\n             }"}, {"sha": "4ee65a2b4495fa275d6baca8c4393229f4292155", "filename": "src/libstd/rt/logging.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibstd%2Frt%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibstd%2Frt%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flogging.rs?ref=680eb71564ebba5e76ce1e1a8287b30042332cc5", "patch": "@@ -66,7 +66,7 @@ pub fn init(crate_map: *u8) {\n     let log_spec = os::getenv(\"RUST_LOG\");\n     match log_spec {\n         Some(spec) => {\n-            do spec.to_c_str().with_ref |buf| {\n+            do spec.with_c_str |buf| {\n                 unsafe { rust_update_log_settings(crate_map, buf) }\n             }\n         }"}, {"sha": "a26b8a3ad594de52f5bc128b24eaa580f664fe02", "filename": "src/libstd/rt/uv/uvio.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs?ref=680eb71564ebba5e76ce1e1a8287b30042332cc5", "patch": "@@ -654,7 +654,7 @@ impl RtioUdpSocket for UvUdpSocket {\n \n     fn join_multicast(&mut self, multi: IpAddr) -> Result<(), IoError> {\n         let r = unsafe {\n-            do multi.to_str().to_c_str().with_ref |m_addr| {\n+            do multi.to_str().with_c_str |m_addr| {\n                 uvll::udp_set_membership(self.native_handle(), m_addr,\n                                          ptr::null(), uvll::UV_JOIN_GROUP)\n             }\n@@ -668,7 +668,7 @@ impl RtioUdpSocket for UvUdpSocket {\n \n     fn leave_multicast(&mut self, multi: IpAddr) -> Result<(), IoError> {\n         let r = unsafe {\n-            do multi.to_str().to_c_str().with_ref |m_addr| {\n+            do multi.to_str().with_c_str |m_addr| {\n                 uvll::udp_set_membership(self.native_handle(), m_addr,\n                                          ptr::null(), uvll::UV_LEAVE_GROUP)\n             }"}, {"sha": "11d64f4697cb8e3ad28950b591b39b4684642a76", "filename": "src/libstd/rt/uv/uvll.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs?ref=680eb71564ebba5e76ce1e1a8287b30042332cc5", "patch": "@@ -373,12 +373,12 @@ pub unsafe fn is_ip6_addr(addr: *sockaddr) -> bool {\n }\n \n pub unsafe fn malloc_ip4_addr(ip: &str, port: int) -> *sockaddr_in {\n-    do ip.to_c_str().with_ref |ip_buf| {\n+    do ip.with_c_str |ip_buf| {\n         rust_uv_ip4_addrp(ip_buf as *u8, port as libc::c_int)\n     }\n }\n pub unsafe fn malloc_ip6_addr(ip: &str, port: int) -> *sockaddr_in6 {\n-    do ip.to_c_str().with_ref |ip_buf| {\n+    do ip.with_c_str |ip_buf| {\n         rust_uv_ip6_addrp(ip_buf as *u8, port as libc::c_int)\n     }\n }"}, {"sha": "bd284b39983045f8a64324c2c8a84064a908ac75", "filename": "src/libstd/run.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibstd%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibstd%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun.rs?ref=680eb71564ebba5e76ce1e1a8287b30042332cc5", "patch": "@@ -506,7 +506,7 @@ fn spawn_process_os(prog: &str, args: &[~str],\n \n         do with_envp(env) |envp| {\n             do with_dirp(dir) |dirp| {\n-                do cmd.to_c_str().with_ref |cmdp| {\n+                do cmd.with_c_str |cmdp| {\n                     let created = CreateProcessA(ptr::null(), cast::transmute(cmdp),\n                                                  ptr::mut_null(), ptr::mut_null(), TRUE,\n                                                  0, envp, dirp, &mut si, &mut pi);\n@@ -775,7 +775,7 @@ fn with_envp<T>(env: Option<~[(~str, ~str)]>, cb: &fn(*mut c_void) -> T) -> T {\n \n fn with_dirp<T>(d: Option<&Path>, cb: &fn(*libc::c_char) -> T) -> T {\n     match d {\n-      Some(dir) => dir.to_c_str().with_ref(|buf| cb(buf)),\n+      Some(dir) => dir.with_c_str(|buf| cb(buf)),\n       None => cb(ptr::null())\n     }\n }"}, {"sha": "bfb9bee78028c3d59755739f3021f64194d0c427", "filename": "src/libstd/sys.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibstd%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibstd%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys.rs?ref=680eb71564ebba5e76ce1e1a8287b30042332cc5", "patch": "@@ -105,8 +105,8 @@ pub trait FailWithCause {\n \n impl FailWithCause for ~str {\n     fn fail_with(cause: ~str, file: &'static str, line: uint) -> ! {\n-        do cause.to_c_str().with_ref |msg_buf| {\n-            do file.to_c_str().with_ref |file_buf| {\n+        do cause.with_c_str |msg_buf| {\n+            do file.with_c_str |file_buf| {\n                 begin_unwind_(msg_buf, file_buf, line as libc::size_t)\n             }\n         }\n@@ -115,8 +115,8 @@ impl FailWithCause for ~str {\n \n impl FailWithCause for &'static str {\n     fn fail_with(cause: &'static str, file: &'static str, line: uint) -> ! {\n-        do cause.to_c_str().with_ref |msg_buf| {\n-            do file.to_c_str().with_ref |file_buf| {\n+        do cause.with_c_str |msg_buf| {\n+            do file.with_c_str |file_buf| {\n                 begin_unwind_(msg_buf, file_buf, line as libc::size_t)\n             }\n         }"}, {"sha": "005cedd0ffdfdccca83d869c3b519e091beb4f6e", "filename": "src/libstd/unstable/dynamic_lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibstd%2Funstable%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibstd%2Funstable%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fdynamic_lib.rs?ref=680eb71564ebba5e76ce1e1a8287b30042332cc5", "patch": "@@ -66,7 +66,7 @@ impl DynamicLibrary {\n         // T but that feature is still unimplemented\n \n         let maybe_symbol_value = do dl::check_for_errors_in {\n-            do symbol.to_c_str().with_ref |raw_string| {\n+            do symbol.with_c_str |raw_string| {\n                 dl::symbol(self.handle, raw_string)\n             }\n         };\n@@ -145,7 +145,7 @@ mod dl {\n     use result::*;\n \n     pub unsafe fn open_external(filename: &path::Path) -> *libc::c_void {\n-        do filename.to_c_str().with_ref |raw_name| {\n+        do filename.with_c_str |raw_name| {\n             dlopen(raw_name, Lazy as libc::c_int)\n         }\n     }"}, {"sha": "91b4283ba12dd92236cb847bbaf833331bbd2fa9", "filename": "src/libstd/unstable/lang.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibstd%2Funstable%2Flang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Flibstd%2Funstable%2Flang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Flang.rs?ref=680eb71564ebba5e76ce1e1a8287b30042332cc5", "patch": "@@ -29,7 +29,7 @@ pub fn fail_bounds_check(file: *c_char, line: size_t,\n                          index: size_t, len: size_t) {\n     let msg = fmt!(\"index out of bounds: the len is %d but the index is %d\",\n                     len as int, index as int);\n-    do msg.to_c_str().with_ref |buf| {\n+    do msg.with_c_str |buf| {\n         fail_(buf, file, line);\n     }\n }"}, {"sha": "22c5e9dad25a4723cab72ca83277e7daf3acf79d", "filename": "src/test/run-pass/c-stack-returning-int64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs?ref=680eb71564ebba5e76ce1e1a8287b30042332cc5", "patch": "@@ -20,11 +20,11 @@ mod libc {\n }\n \n fn atol(s: ~str) -> int {\n-    s.to_c_str().with_ref(|x| unsafe { libc::atol(x as *u8) })\n+    s.with_c_str(|x| unsafe { libc::atol(x as *u8) })\n }\n \n fn atoll(s: ~str) -> i64 {\n-    s.to_c_str().with_ref(|x| unsafe { libc::atoll(x as *u8) })\n+    s.with_c_str(|x| unsafe { libc::atoll(x as *u8) })\n }\n \n pub fn main() {"}, {"sha": "827f950dab241ec9924c16ebd736d6fdec2de15f", "filename": "src/test/run-pass/foreign-fn-linkname.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680eb71564ebba5e76ce1e1a8287b30042332cc5/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs?ref=680eb71564ebba5e76ce1e1a8287b30042332cc5", "patch": "@@ -26,7 +26,7 @@ mod libc {\n fn strlen(str: ~str) -> uint {\n     unsafe {\n         // C string is terminated with a zero\n-        do str.to_c_str().with_ref |buf| {\n+        do str.with_c_str |buf| {\n             libc::my_strlen(buf as *u8)\n         }\n     }"}]}