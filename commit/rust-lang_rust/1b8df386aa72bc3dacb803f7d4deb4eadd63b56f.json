{"sha": "1b8df386aa72bc3dacb803f7d4deb4eadd63b56f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiOGRmMzg2YWE3MmJjM2RhY2I4MDNmN2Q0ZGViNGVhZGQ2M2I1NmY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-07-23T16:07:38Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-07-23T16:08:15Z"}, "message": "Fix -Zpolymorphize", "tree": {"sha": "9e9b3c6d2c6369cd6e77a85d69aafe27c7fec742", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e9b3c6d2c6369cd6e77a85d69aafe27c7fec742"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b8df386aa72bc3dacb803f7d4deb4eadd63b56f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b8df386aa72bc3dacb803f7d4deb4eadd63b56f", "html_url": "https://github.com/rust-lang/rust/commit/1b8df386aa72bc3dacb803f7d4deb4eadd63b56f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b8df386aa72bc3dacb803f7d4deb4eadd63b56f/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95511cb3eebec837a5c3efa3c87c1fc70dc0c1ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/95511cb3eebec837a5c3efa3c87c1fc70dc0c1ba", "html_url": "https://github.com/rust-lang/rust/commit/95511cb3eebec837a5c3efa3c87c1fc70dc0c1ba"}], "stats": {"total": 98, "additions": 52, "deletions": 46}, "files": [{"sha": "fcf05be8653998705f222293e8d10f011dfac9e7", "filename": "src/abi/mod.rs", "status": "modified", "additions": 39, "deletions": 35, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/1b8df386aa72bc3dacb803f7d4deb4eadd63b56f/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8df386aa72bc3dacb803f7d4deb4eadd63b56f/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=1b8df386aa72bc3dacb803f7d4deb4eadd63b56f", "patch": "@@ -13,14 +13,26 @@ use crate::prelude::*;\n \n pub(crate) use self::returning::{can_return_to_ssa_var, codegen_return};\n \n-// Copied from https://github.com/rust-lang/rust/blob/b2c1a606feb1fbdb0ac0acba76f881ef172ed474/src/librustc_middle/ty/layout.rs#L2287\n+// Copied from https://github.com/rust-lang/rust/blob/f52c72948aa1dd718cc1f168d21c91c584c0a662/src/librustc_middle/ty/layout.rs#L2301\n pub(crate) fn fn_sig_for_fn_abi<'tcx>(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) -> ty::PolyFnSig<'tcx> {\n-    let ty = instance.ty(tcx, ParamEnv::reveal_all());\n+    use rustc_middle::ty::subst::Subst;\n+\n+    // FIXME(davidtwco,eddyb): A `ParamEnv` should be passed through to this function.\n+    let ty = instance.ty(tcx, ty::ParamEnv::reveal_all());\n     match ty.kind {\n-        ty::FnDef(..) |\n-        // Shims currently have type FnPtr. Not sure this should remain.\n-        ty::FnPtr(_) => {\n-            let mut sig = ty.fn_sig(tcx);\n+        ty::FnDef(..) => {\n+            // HACK(davidtwco,eddyb): This is a workaround for polymorphization considering\n+            // parameters unused if they show up in the signature, but not in the `mir::Body`\n+            // (i.e. due to being inside a projection that got normalized, see\n+            // `src/test/ui/polymorphization/normalized_sig_types.rs`), and codegen not keeping\n+            // track of a polymorphization `ParamEnv` to allow normalizing later.\n+            let mut sig = match ty.kind {\n+                ty::FnDef(def_id, substs) => tcx\n+                    .normalize_erasing_regions(tcx.param_env(def_id), tcx.fn_sig(def_id))\n+                    .subst(tcx, substs),\n+                _ => unreachable!(),\n+            };\n+\n             if let ty::InstanceDef::VtableShim(..) = instance.def {\n                 // Modify `fn(self, ...)` to `fn(self: *mut Self, ...)`.\n                 sig = sig.map_bound(|mut sig| {\n@@ -36,44 +48,44 @@ pub(crate) fn fn_sig_for_fn_abi<'tcx>(tcx: TyCtxt<'tcx>, instance: Instance<'tcx\n             let sig = substs.as_closure().sig();\n \n             let env_ty = tcx.closure_env_ty(def_id, substs).unwrap();\n-            sig.map_bound(|sig| tcx.mk_fn_sig(\n-                std::iter::once(env_ty.skip_binder()).chain(sig.inputs().iter().cloned()),\n-                sig.output(),\n-                sig.c_variadic,\n-                sig.unsafety,\n-                sig.abi\n-            ))\n+            sig.map_bound(|sig| {\n+                tcx.mk_fn_sig(\n+                    std::iter::once(env_ty.skip_binder()).chain(sig.inputs().iter().cloned()),\n+                    sig.output(),\n+                    sig.c_variadic,\n+                    sig.unsafety,\n+                    sig.abi,\n+                )\n+            })\n         }\n         ty::Generator(_, substs, _) => {\n             let sig = substs.as_generator().poly_sig();\n \n             let env_region = ty::ReLateBound(ty::INNERMOST, ty::BrEnv);\n             let env_ty = tcx.mk_mut_ref(tcx.mk_region(env_region), ty);\n \n-            let pin_did = tcx.lang_items().pin_type().unwrap();\n+            let pin_did = tcx.require_lang_item(rustc_hir::LangItem::PinTypeLangItem, None);\n             let pin_adt_ref = tcx.adt_def(pin_did);\n             let pin_substs = tcx.intern_substs(&[env_ty.into()]);\n             let env_ty = tcx.mk_adt(pin_adt_ref, pin_substs);\n \n             sig.map_bound(|sig| {\n-                let state_did = tcx.lang_items().gen_state().unwrap();\n+                let state_did = tcx.require_lang_item(rustc_hir::LangItem::GeneratorStateLangItem, None);\n                 let state_adt_ref = tcx.adt_def(state_did);\n-                let state_substs = tcx.intern_substs(&[\n-                    sig.yield_ty.into(),\n-                    sig.return_ty.into(),\n-                ]);\n+                let state_substs =\n+                    tcx.intern_substs(&[sig.yield_ty.into(), sig.return_ty.into()]);\n                 let ret_ty = tcx.mk_adt(state_adt_ref, state_substs);\n \n                 tcx.mk_fn_sig(\n                     [env_ty, sig.resume_ty].iter(),\n                     &ret_ty,\n                     false,\n                     rustc_hir::Unsafety::Normal,\n-                    rustc_target::spec::abi::Abi::Rust\n+                    rustc_target::spec::abi::Abi::Rust,\n                 )\n             })\n         }\n-        _ => bug!(\"unexpected type {:?} in Instance::fn_sig\", ty)\n+        _ => bug!(\"unexpected type {:?} in Instance::fn_sig\", ty),\n     }\n }\n \n@@ -464,7 +476,8 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n     let instance = if let ty::FnDef(def_id, substs) = fn_ty.kind {\n         let instance = ty::Instance::resolve(fx.tcx, ty::ParamEnv::reveal_all(), def_id, substs)\n             .unwrap()\n-            .unwrap();\n+            .unwrap()\n+            .polymorphize(fx.tcx);\n \n         if fx.tcx.symbol_name(instance).name.starts_with(\"llvm.\") {\n             crate::intrinsics::codegen_llvm_intrinsic_call(\n@@ -655,7 +668,7 @@ pub(crate) fn codegen_drop<'tcx>(\n     drop_place: CPlace<'tcx>,\n ) {\n     let ty = drop_place.layout().ty;\n-    let drop_fn = Instance::resolve_drop_in_place(fx.tcx, ty);\n+    let drop_fn = Instance::resolve_drop_in_place(fx.tcx, ty).polymorphize(fx.tcx);\n \n     if let ty::InstanceDef::DropGlue(_, None) = drop_fn.def {\n         // we don't actually need to drop anything\n@@ -685,16 +698,7 @@ pub(crate) fn codegen_drop<'tcx>(\n                 fx.bcx.ins().call_indirect(sig, drop_fn, &[ptr]);\n             }\n             _ => {\n-                let instance = match drop_fn_ty.kind {\n-                    ty::FnDef(def_id, substs) => {\n-                        Instance::resolve(fx.tcx, ParamEnv::reveal_all(), def_id, substs)\n-                            .unwrap()\n-                            .unwrap()\n-                    }\n-                    _ => unreachable!(\"{:?}\", drop_fn_ty),\n-                };\n-\n-                assert!(!matches!(instance.def, InstanceDef::Virtual(_, _)));\n+                assert!(!matches!(drop_fn.def, InstanceDef::Virtual(_, _)));\n \n                 let arg_place = CPlace::new_stack_slot(\n                     fx,\n@@ -712,13 +716,13 @@ pub(crate) fn codegen_drop<'tcx>(\n \n                 let mut call_args: Vec<Value> = arg_value.into_iter().collect::<Vec<_>>();\n \n-                if instance.def.requires_caller_location(fx.tcx) {\n+                if drop_fn.def.requires_caller_location(fx.tcx) {\n                     // Pass the caller location for `#[track_caller]`.\n                     let caller_location = fx.get_caller_location(span);\n                     call_args.extend(adjust_arg_for_abi(fx, caller_location).into_iter());\n                 }\n \n-                let func_ref = fx.get_function_ref(instance);\n+                let func_ref = fx.get_function_ref(drop_fn);\n                 fx.bcx.ins().call(func_ref, &call_args);\n             }\n         }"}, {"sha": "cd8152066fa556bcc614bcf425fb7d4b4ed0c1b1", "filename": "src/base.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1b8df386aa72bc3dacb803f7d4deb4eadd63b56f/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8df386aa72bc3dacb803f7d4deb4eadd63b56f/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=1b8df386aa72bc3dacb803f7d4deb4eadd63b56f", "patch": "@@ -267,7 +267,7 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n                     fx.tcx.sess.span_fatal(bb_data.terminator().source_info.span, &s)\n                 });\n \n-                let instance = Instance::mono(fx.tcx, def_id);\n+                let instance = Instance::mono(fx.tcx, def_id).polymorphize(fx.tcx);\n                 let symbol_name = fx.tcx.symbol_name(instance).name;\n \n                 fx.lib_call(&*symbol_name, vec![fx.pointer_type, fx.pointer_type, fx.pointer_type], vec![], &args);\n@@ -469,7 +469,8 @@ fn trans_stmt<'tcx>(\n                         ty::FnDef(def_id, substs) => {\n                             let func_ref = fx.get_function_ref(\n                                 Instance::resolve_for_fn_ptr(fx.tcx, ParamEnv::reveal_all(), def_id, substs)\n-                                    .unwrap(),\n+                                    .unwrap()\n+                                    .polymorphize(fx.tcx),\n                             );\n                             let func_addr = fx.bcx.ins().func_addr(fx.pointer_type, func_ref);\n                             lval.write_cvalue(fx, CValue::by_val(func_addr, to_layout));\n@@ -580,7 +581,7 @@ fn trans_stmt<'tcx>(\n                                 def_id,\n                                 substs,\n                                 ty::ClosureKind::FnOnce,\n-                            );\n+                            ).polymorphize(fx.tcx);\n                             let func_ref = fx.get_function_ref(instance);\n                             let func_addr = fx.bcx.ins().func_addr(fx.pointer_type, func_ref);\n                             lval.write_cvalue(fx, CValue::by_val(func_addr, lval.layout()));\n@@ -641,7 +642,7 @@ fn trans_stmt<'tcx>(\n                                 .fatal(&format!(\"allocation of `{}` {}\", box_layout.ty, s));\n                         }\n                     };\n-                    let instance = ty::Instance::mono(fx.tcx, def_id);\n+                    let instance = ty::Instance::mono(fx.tcx, def_id).polymorphize(fx.tcx);\n                     let func_ref = fx.get_function_ref(instance);\n                     let call = fx.bcx.ins().call(func_ref, &[llsize, llalign]);\n                     let ptr = fx.bcx.inst_results(call)[0];"}, {"sha": "c807bde15c30ca2dbff209d056e06a65f9845415", "filename": "src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b8df386aa72bc3dacb803f7d4deb4eadd63b56f/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8df386aa72bc3dacb803f7d4deb4eadd63b56f/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=1b8df386aa72bc3dacb803f7d4deb4eadd63b56f", "patch": "@@ -287,7 +287,7 @@ impl<'tcx, B: Backend> LayoutOf for FunctionCx<'_, 'tcx, B> {\n     type TyAndLayout = TyAndLayout<'tcx>;\n \n     fn layout_of(&self, ty: Ty<'tcx>) -> TyAndLayout<'tcx> {\n-        assert!(!ty.needs_subst());\n+        assert!(!ty.still_further_specializable());\n         self.tcx\n             .layout_of(ParamEnv::reveal_all().and(&ty))\n             .unwrap_or_else(|e| {"}, {"sha": "e3d96528972a25f84ab1fd8676c00db07b96d680", "filename": "src/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b8df386aa72bc3dacb803f7d4deb4eadd63b56f/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8df386aa72bc3dacb803f7d4deb4eadd63b56f/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=1b8df386aa72bc3dacb803f7d4deb4eadd63b56f", "patch": "@@ -228,7 +228,7 @@ fn data_id_for_static(\n     def_id: DefId,\n     linkage: Linkage,\n ) -> DataId {\n-    let instance = Instance::mono(tcx, def_id);\n+    let instance = Instance::mono(tcx, def_id).polymorphize(tcx);\n     let symbol_name = tcx.symbol_name(instance).name;\n     let ty = instance.ty(tcx, ParamEnv::reveal_all());\n     let is_mutable = if tcx.is_mutable_static(def_id) {"}, {"sha": "a256446df93c9e09ad32b22559f327c11d7fb7a9", "filename": "src/main_shim.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1b8df386aa72bc3dacb803f7d4deb4eadd63b56f/src%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8df386aa72bc3dacb803f7d4deb4eadd63b56f/src%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain_shim.rs?ref=1b8df386aa72bc3dacb803f7d4deb4eadd63b56f", "patch": "@@ -21,7 +21,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n         None => return,\n     };\n \n-    let instance = Instance::mono(tcx, main_def_id);\n+    let instance = Instance::mono(tcx, main_def_id).polymorphize(tcx);\n     if module.get_name(&*tcx.symbol_name(instance).name).is_none() {\n         return;\n     }\n@@ -58,7 +58,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n             .declare_function(\"main\", Linkage::Export, &cmain_sig)\n             .unwrap();\n \n-        let instance = Instance::mono(tcx, rust_main_def_id);\n+        let instance = Instance::mono(tcx, rust_main_def_id).polymorphize(tcx);\n \n         let (main_name, main_sig) =\n             get_function_name_and_sig(tcx, m.isa().triple(), instance, false);\n@@ -90,7 +90,8 @@ pub(crate) fn maybe_create_entry_wrapper(\n                     tcx.intern_substs(&[main_ret_ty.into()]),\n                 )\n                 .unwrap()\n-                .unwrap();\n+                .unwrap()\n+                .polymorphize(tcx);\n                 let start_func_id = import_function(tcx, m, start_instance);\n \n                 let main_val = bcx"}, {"sha": "601c37d82c8852d6ced19e4a9fc1754b66698784", "filename": "src/vtable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b8df386aa72bc3dacb803f7d4deb4eadd63b56f/src%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8df386aa72bc3dacb803f7d4deb4eadd63b56f/src%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvtable.rs?ref=1b8df386aa72bc3dacb803f7d4deb4eadd63b56f", "patch": "@@ -93,7 +93,7 @@ fn build_vtable<'tcx>(\n     let usize_size = fx.layout_of(fx.tcx.types.usize).size.bytes() as usize;\n \n     let drop_in_place_fn =\n-        import_function(tcx, fx.module, Instance::resolve_drop_in_place(tcx, layout.ty));\n+        import_function(tcx, fx.module, Instance::resolve_drop_in_place(tcx, layout.ty).polymorphize(fx.tcx));\n \n     let mut components: Vec<_> = vec![Some(drop_in_place_fn), None, None];\n \n@@ -109,7 +109,7 @@ fn build_vtable<'tcx>(\n             Some(import_function(\n                 tcx,\n                 fx.module,\n-                Instance::resolve_for_vtable(tcx, ParamEnv::reveal_all(), def_id, substs).unwrap(),\n+                Instance::resolve_for_vtable(tcx, ParamEnv::reveal_all(), def_id, substs).unwrap().polymorphize(fx.tcx),\n             ))\n         })\n     });"}]}