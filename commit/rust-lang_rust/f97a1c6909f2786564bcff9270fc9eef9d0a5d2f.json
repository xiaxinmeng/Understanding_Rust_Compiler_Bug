{"sha": "f97a1c6909f2786564bcff9270fc9eef9d0a5d2f", "node_id": "C_kwDOAAsO6NoAKGY5N2ExYzY5MDlmMjc4NjU2NGJjZmY5MjcwZmM5ZWVmOWQwYTVkMmY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-11T02:32:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-11T02:32:06Z"}, "message": "Rollup merge of #94826 - allgoewer:fix-retain-documentation, r=yaahc\n\nImprove doc wording for retain on some collections\n\nI found the documentation wording on the various retain methods on many collections to be unusual.\nI tried to invert the relation by switching `such that` with `for which` .", "tree": {"sha": "170e71eb3637996ced89f65917256fb530278cc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/170e71eb3637996ced89f65917256fb530278cc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f97a1c6909f2786564bcff9270fc9eef9d0a5d2f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiKrSmCRBK7hj4Ov3rIwAAdAoIAGvL8JIp6IMAWYfgJMyzp46z\nRpXjGU8FjZHSs36tzUQ1PEkcuYp8d3VKW302sOXr4fC+MxnsV7Lb/i0046Zwjb0S\nAPFEuL1LSdu1qtEEXubLGK28jZAGdo+zj0esCnMJvHzr+dM7PhbsKuseIvtk3qOO\nhn2oHoRMbnXJj+gABeO2FRgnXzYuqKSh6Js35O9Es9d9KYpzYyka58hIl5Um1YaP\neKlu3GP0fNyCL4BqwWJKkEEV0qVKiHXrE0n2UM4OryCUEwMGL8QCZkTrPxT3lw7c\n2hT+zv5Yc5E529gUn/7DHJ0m7tOSTazJlebrsP3mD8LX99+au5B/o8XB7+YsoEY=\n=V0sy\n-----END PGP SIGNATURE-----\n", "payload": "tree 170e71eb3637996ced89f65917256fb530278cc1\nparent bb8274ad36db4fba178959da68a903894d0e7a86\nparent 229e01d11fc5e6e34488beb5da05702de5eac632\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1646965926 +0100\ncommitter GitHub <noreply@github.com> 1646965926 +0100\n\nRollup merge of #94826 - allgoewer:fix-retain-documentation, r=yaahc\n\nImprove doc wording for retain on some collections\n\nI found the documentation wording on the various retain methods on many collections to be unusual.\nI tried to invert the relation by switching `such that` with `for which` .\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f97a1c6909f2786564bcff9270fc9eef9d0a5d2f", "html_url": "https://github.com/rust-lang/rust/commit/f97a1c6909f2786564bcff9270fc9eef9d0a5d2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f97a1c6909f2786564bcff9270fc9eef9d0a5d2f/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb8274ad36db4fba178959da68a903894d0e7a86", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb8274ad36db4fba178959da68a903894d0e7a86", "html_url": "https://github.com/rust-lang/rust/commit/bb8274ad36db4fba178959da68a903894d0e7a86"}, {"sha": "229e01d11fc5e6e34488beb5da05702de5eac632", "url": "https://api.github.com/repos/rust-lang/rust/commits/229e01d11fc5e6e34488beb5da05702de5eac632", "html_url": "https://github.com/rust-lang/rust/commit/229e01d11fc5e6e34488beb5da05702de5eac632"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "e6c3d38dab3a29603ba1e54c30f9e72c0e7d1f0c", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f97a1c6909f2786564bcff9270fc9eef9d0a5d2f/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97a1c6909f2786564bcff9270fc9eef9d0a5d2f/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=f97a1c6909f2786564bcff9270fc9eef9d0a5d2f", "patch": "@@ -779,7 +779,7 @@ impl<T: Ord> BinaryHeap<T> {\n \n     /// Retains only the elements specified by the predicate.\n     ///\n-    /// In other words, remove all elements `e` such that `f(&e)` returns\n+    /// In other words, remove all elements `e` for which `f(&e)` returns\n     /// `false`. The elements are visited in unsorted (and unspecified) order.\n     ///\n     /// # Examples"}, {"sha": "d0ff3eb747598a86ce4029223935d1f9b937b14e", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f97a1c6909f2786564bcff9270fc9eef9d0a5d2f/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97a1c6909f2786564bcff9270fc9eef9d0a5d2f/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=f97a1c6909f2786564bcff9270fc9eef9d0a5d2f", "patch": "@@ -963,7 +963,7 @@ impl<K, V> BTreeMap<K, V> {\n \n     /// Retains only the elements specified by the predicate.\n     ///\n-    /// In other words, remove all pairs `(k, v)` such that `f(&k, &mut v)` returns `false`.\n+    /// In other words, remove all pairs `(k, v)` for which `f(&k, &mut v)` returns `false`.\n     /// The elements are visited in ascending key order.\n     ///\n     /// # Examples"}, {"sha": "d6733425288d4d50091f07f8c62991f38f26d516", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f97a1c6909f2786564bcff9270fc9eef9d0a5d2f/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97a1c6909f2786564bcff9270fc9eef9d0a5d2f/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=f97a1c6909f2786564bcff9270fc9eef9d0a5d2f", "patch": "@@ -873,7 +873,7 @@ impl<T> BTreeSet<T> {\n \n     /// Retains only the elements specified by the predicate.\n     ///\n-    /// In other words, remove all elements `e` such that `f(&e)` returns `false`.\n+    /// In other words, remove all elements `e` for which `f(&e)` returns `false`.\n     /// The elements are visited in ascending order.\n     ///\n     /// # Examples"}, {"sha": "c3cabc754e6a8069c4846121c39650317ffb3eb6", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f97a1c6909f2786564bcff9270fc9eef9d0a5d2f/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97a1c6909f2786564bcff9270fc9eef9d0a5d2f/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=f97a1c6909f2786564bcff9270fc9eef9d0a5d2f", "patch": "@@ -2119,7 +2119,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n \n     /// Retains only the elements specified by the predicate.\n     ///\n-    /// In other words, remove all elements `e` such that `f(&e)` returns false.\n+    /// In other words, remove all elements `e` for which `f(&e)` returns false.\n     /// This method operates in place, visiting each element exactly once in the\n     /// original order, and preserves the order of the retained elements.\n     ///\n@@ -2158,7 +2158,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n \n     /// Retains only the elements specified by the predicate.\n     ///\n-    /// In other words, remove all elements `e` such that `f(&e)` returns false.\n+    /// In other words, remove all elements `e` for which `f(&e)` returns false.\n     /// This method operates in place, visiting each element exactly once in the\n     /// original order, and preserves the order of the retained elements.\n     ///"}, {"sha": "5131168db0c82bb972889c2dc630fd5bf3405786", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f97a1c6909f2786564bcff9270fc9eef9d0a5d2f/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97a1c6909f2786564bcff9270fc9eef9d0a5d2f/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=f97a1c6909f2786564bcff9270fc9eef9d0a5d2f", "patch": "@@ -1424,7 +1424,7 @@ impl<T, A: Allocator> Vec<T, A> {\n \n     /// Retains only the elements specified by the predicate.\n     ///\n-    /// In other words, remove all elements `e` such that `f(&e)` returns `false`.\n+    /// In other words, remove all elements `e` for which `f(&e)` returns `false`.\n     /// This method operates in place, visiting each element exactly once in the\n     /// original order, and preserves the order of the retained elements.\n     ///"}, {"sha": "6b63191eb583d7602ec0455a4c5fb46e5813830c", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f97a1c6909f2786564bcff9270fc9eef9d0a5d2f/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97a1c6909f2786564bcff9270fc9eef9d0a5d2f/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=f97a1c6909f2786564bcff9270fc9eef9d0a5d2f", "patch": "@@ -621,7 +621,7 @@ impl<K, V, S> HashMap<K, V, S> {\n \n     /// Retains only the elements specified by the predicate.\n     ///\n-    /// In other words, remove all pairs `(k, v)` such that `f(&k, &mut v)` returns `false`.\n+    /// In other words, remove all pairs `(k, v)` for which `f(&k, &mut v)` returns `false`.\n     /// The elements are visited in unsorted (and unspecified) order.\n     ///\n     /// # Examples"}, {"sha": "fa471a3c3f323df88416f1f411a6bfe3ea844406", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f97a1c6909f2786564bcff9270fc9eef9d0a5d2f/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97a1c6909f2786564bcff9270fc9eef9d0a5d2f/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=f97a1c6909f2786564bcff9270fc9eef9d0a5d2f", "patch": "@@ -300,7 +300,7 @@ impl<T, S> HashSet<T, S> {\n \n     /// Retains only the elements specified by the predicate.\n     ///\n-    /// In other words, remove all elements `e` such that `f(&e)` returns `false`.\n+    /// In other words, remove all elements `e` for which `f(&e)` returns `false`.\n     /// The elements are visited in unsorted (and unspecified) order.\n     ///\n     /// # Examples"}]}