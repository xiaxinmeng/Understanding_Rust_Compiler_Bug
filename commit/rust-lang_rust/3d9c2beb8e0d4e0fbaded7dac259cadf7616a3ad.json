{"sha": "3d9c2beb8e0d4e0fbaded7dac259cadf7616a3ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkOWMyYmViOGUwZDRlMGZiYWRlZDdkYWMyNTljYWRmNzYxNmEzYWQ=", "commit": {"author": {"name": "pcpthm", "email": "pcpthm@gmail.com", "date": "2019-03-18T04:03:04Z"}, "committer": {"name": "pcpthm", "email": "pcpthm@gmail.com", "date": "2019-03-18T04:14:47Z"}, "message": "Apply stylistic changes suggested", "tree": {"sha": "d0d7a91f282537c3294f3b5b3a283dfd5faaa1a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0d7a91f282537c3294f3b5b3a283dfd5faaa1a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d9c2beb8e0d4e0fbaded7dac259cadf7616a3ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d9c2beb8e0d4e0fbaded7dac259cadf7616a3ad", "html_url": "https://github.com/rust-lang/rust/commit/3d9c2beb8e0d4e0fbaded7dac259cadf7616a3ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d9c2beb8e0d4e0fbaded7dac259cadf7616a3ad/comments", "author": {"login": "pcpthm", "id": 43881370, "node_id": "MDQ6VXNlcjQzODgxMzcw", "avatar_url": "https://avatars.githubusercontent.com/u/43881370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcpthm", "html_url": "https://github.com/pcpthm", "followers_url": "https://api.github.com/users/pcpthm/followers", "following_url": "https://api.github.com/users/pcpthm/following{/other_user}", "gists_url": "https://api.github.com/users/pcpthm/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcpthm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcpthm/subscriptions", "organizations_url": "https://api.github.com/users/pcpthm/orgs", "repos_url": "https://api.github.com/users/pcpthm/repos", "events_url": "https://api.github.com/users/pcpthm/events{/privacy}", "received_events_url": "https://api.github.com/users/pcpthm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcpthm", "id": 43881370, "node_id": "MDQ6VXNlcjQzODgxMzcw", "avatar_url": "https://avatars.githubusercontent.com/u/43881370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcpthm", "html_url": "https://github.com/pcpthm", "followers_url": "https://api.github.com/users/pcpthm/followers", "following_url": "https://api.github.com/users/pcpthm/following{/other_user}", "gists_url": "https://api.github.com/users/pcpthm/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcpthm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcpthm/subscriptions", "organizations_url": "https://api.github.com/users/pcpthm/orgs", "repos_url": "https://api.github.com/users/pcpthm/repos", "events_url": "https://api.github.com/users/pcpthm/events{/privacy}", "received_events_url": "https://api.github.com/users/pcpthm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5702675155a5db137af65cf9d62cba4a6cea6c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5702675155a5db137af65cf9d62cba4a6cea6c0", "html_url": "https://github.com/rust-lang/rust/commit/e5702675155a5db137af65cf9d62cba4a6cea6c0"}], "stats": {"total": 31, "additions": 14, "deletions": 17}, "files": [{"sha": "6d3e379a3410de9e308e1267f61f41c7149f54fd", "filename": "crates/ra_parser/src/grammar/expressions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3d9c2beb8e0d4e0fbaded7dac259cadf7616a3ad/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d9c2beb8e0d4e0fbaded7dac259cadf7616a3ad/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=3d9c2beb8e0d4e0fbaded7dac259cadf7616a3ad", "patch": "@@ -54,17 +54,17 @@ pub(crate) fn expr_block_contents(p: &mut Parser) {\n \n         // test block_items\n         // fn a() { fn b() {} }\n-        let mut m = p.start();\n+        let m = p.start();\n         let has_attrs = p.at(POUND);\n         attributes::outer_attributes(p);\n         if p.at(LET_KW) {\n             let_stmt(p, m);\n             continue;\n         }\n \n-        m = match items::maybe_item(p, m, items::ItemFlavor::Mod) {\n-            Some(m) => m,\n-            None => continue,\n+        let m = match items::maybe_item(p, m, items::ItemFlavor::Mod) {\n+            Ok(()) => continue,\n+            Err(m) => m,\n         };\n \n         // test pub_expr"}, {"sha": "94b93a02b7ff8c1df96eba3ef4e97c98e7ffff19", "filename": "crates/ra_parser/src/grammar/items.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3d9c2beb8e0d4e0fbaded7dac259cadf7616a3ad/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d9c2beb8e0d4e0fbaded7dac259cadf7616a3ad/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs?ref=3d9c2beb8e0d4e0fbaded7dac259cadf7616a3ad", "patch": "@@ -35,11 +35,11 @@ pub(super) const ITEM_RECOVERY_SET: TokenSet = token_set![\n ];\n \n pub(super) fn item_or_macro(p: &mut Parser, stop_on_r_curly: bool, flavor: ItemFlavor) {\n-    let mut m = p.start();\n+    let m = p.start();\n     attributes::outer_attributes(p);\n-    m = match maybe_item(p, m, flavor) {\n-        Some(m) => m,\n-        None => return,\n+    let m = match maybe_item(p, m, flavor) {\n+        Ok(()) => return,\n+        Err(m) => m,\n     };\n     if paths::is_path_start(p) {\n         match macro_call(p) {\n@@ -66,11 +66,11 @@ pub(super) fn item_or_macro(p: &mut Parser, stop_on_r_curly: bool, flavor: ItemF\n     }\n }\n \n-pub(super) fn maybe_item(p: &mut Parser, m: Marker, flavor: ItemFlavor) -> Option<Marker> {\n+pub(super) fn maybe_item(p: &mut Parser, m: Marker, flavor: ItemFlavor) -> Result<(), Marker> {\n     opt_visibility(p);\n     if let Some(kind) = items_without_modifiers(p) {\n         m.complete(p, kind);\n-        return None;\n+        return Ok(());\n     }\n \n     let mut has_mods = false;\n@@ -124,7 +124,6 @@ pub(super) fn maybe_item(p: &mut Parser, m: Marker, flavor: ItemFlavor) -> Optio\n         FN_KW => {\n             fn_def(p, flavor);\n             m.complete(p, FN_DEF);\n-            None\n         }\n \n         // test unsafe_trait\n@@ -138,7 +137,6 @@ pub(super) fn maybe_item(p: &mut Parser, m: Marker, flavor: ItemFlavor) -> Optio\n         TRAIT_KW => {\n             traits::trait_def(p);\n             m.complete(p, TRAIT_DEF);\n-            None\n         }\n \n         // test unsafe_impl\n@@ -152,18 +150,17 @@ pub(super) fn maybe_item(p: &mut Parser, m: Marker, flavor: ItemFlavor) -> Optio\n         IMPL_KW => {\n             traits::impl_block(p);\n             m.complete(p, IMPL_BLOCK);\n-            None\n         }\n         _ => {\n-            if has_mods {\n+            if !has_mods {\n+                return Err(m);\n+            } else {\n                 p.error(\"expected fn, trait or impl\");\n                 m.complete(p, ERROR);\n-                None\n-            } else {\n-                Some(m)\n             }\n         }\n     }\n+    Ok(())\n }\n \n fn items_without_modifiers(p: &mut Parser) -> Option<SyntaxKind> {"}]}