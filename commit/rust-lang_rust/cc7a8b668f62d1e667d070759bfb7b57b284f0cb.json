{"sha": "cc7a8b668f62d1e667d070759bfb7b57b284f0cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjN2E4YjY2OGY2MmQxZTY2N2QwNzA3NTliZmI3YjU3YjI4NGYwY2I=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-09T01:05:06Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-09T01:05:45Z"}, "message": "rustc: Make resolve_all_vars() check to see whether the type actually has vars before folding over it; also remove some debug code. 2x typechecking speedup.", "tree": {"sha": "03f21feebde330703d321b700591e116f393be7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03f21feebde330703d321b700591e116f393be7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc7a8b668f62d1e667d070759bfb7b57b284f0cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc7a8b668f62d1e667d070759bfb7b57b284f0cb", "html_url": "https://github.com/rust-lang/rust/commit/cc7a8b668f62d1e667d070759bfb7b57b284f0cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc7a8b668f62d1e667d070759bfb7b57b284f0cb/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7527084e629340503fbe15b8e21c73879b5bd253", "url": "https://api.github.com/repos/rust-lang/rust/commits/7527084e629340503fbe15b8e21c73879b5bd253", "html_url": "https://github.com/rust-lang/rust/commit/7527084e629340503fbe15b8e21c73879b5bd253"}], "stats": {"total": 21, "additions": 7, "deletions": 14}, "files": [{"sha": "021f8e32b6c537c1154092d7cdd6f4327156433f", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cc7a8b668f62d1e667d070759bfb7b57b284f0cb/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc7a8b668f62d1e667d070759bfb7b57b284f0cb/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=cc7a8b668f62d1e667d070759bfb7b57b284f0cb", "patch": "@@ -2099,38 +2099,31 @@ mod unify {\n     // we eliminate pushdown. The typechecker should never rely on early\n     // resolution of type variables.\n     fn resolve_all_vars(&ty_ctxt tcx, &@var_bindings vb, t typ) -> t {\n-        fn folder(ty_ctxt tcx, @var_bindings vb, @bool success, t typ) -> t {\n+        if (!type_contains_vars(tcx, typ)) { ret typ; }\n+\n+        fn folder(ty_ctxt tcx, @var_bindings vb, t typ) -> t {\n             alt (struct(tcx, typ)) {\n                 case (ty_var(?vid)) {\n                     // It's possible that we haven't even created the var set.\n                     // Handle this case gracefully.\n                     if ((vid as uint) >= ufind::set_count(vb.sets)) {\n-                        *success = false; ret typ;\n+                        ret typ;\n                     }\n \n                     auto root_id = ufind::find(vb.sets, vid as uint);\n                     alt (smallintmap::find[t](vb.types, root_id)) {\n                         case (some[t](?typ2)) {\n-                            ret fold_ty(tcx, bind folder(tcx, vb, success, _),\n-                                        typ2);\n+                            ret fold_ty(tcx, bind folder(tcx, vb, _), typ2);\n                         }\n-                        case (none[t]) { *success = false; ret typ; }\n+                        case (none[t]) { ret typ; }\n                     }\n-                    log \"\"; // fixes ambiguity\n-                    *success = false; ret typ;\n                 }\n \n                 case (_) { ret typ; }\n             }\n         }\n \n-        auto success = @true;\n-        auto rty = fold_ty(tcx, bind folder(tcx, vb, success, _), typ);\n-        /*if (*success) { ret rty; }\n-        log_err \"*** failed! type \" + ty::ty_to_str(tcx, typ) + \" => \" +\n-            ty::ty_to_str(tcx, rty);\n-        ret typ;*/\n-        ret rty;\n+        ret fold_ty(tcx, bind folder(tcx, vb, _), typ);\n     }\n \n     fn unify_step(&@ctxt cx, &t expected, &t actual) -> result {"}]}