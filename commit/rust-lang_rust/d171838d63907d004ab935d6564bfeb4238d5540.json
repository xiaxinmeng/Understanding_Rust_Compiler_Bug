{"sha": "d171838d63907d004ab935d6564bfeb4238d5540", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxNzE4MzhkNjM5MDdkMDA0YWI5MzVkNjU2NGJmZWI0MjM4ZDU1NDA=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-11-27T15:29:40Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-11-27T15:29:40Z"}, "message": "More accurately place proc-macro diagnostic", "tree": {"sha": "5c8d1a42cedda2027a6214727e4ad7cd4ffc4fa9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c8d1a42cedda2027a6214727e4ad7cd4ffc4fa9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d171838d63907d004ab935d6564bfeb4238d5540", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d171838d63907d004ab935d6564bfeb4238d5540", "html_url": "https://github.com/rust-lang/rust/commit/d171838d63907d004ab935d6564bfeb4238d5540", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d171838d63907d004ab935d6564bfeb4238d5540/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0432aa0ed7be3f41d41928499abc688a956214cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/0432aa0ed7be3f41d41928499abc688a956214cf", "html_url": "https://github.com/rust-lang/rust/commit/0432aa0ed7be3f41d41928499abc688a956214cf"}], "stats": {"total": 58, "additions": 49, "deletions": 9}, "files": [{"sha": "c71266dc09137e2ecb2117cc7e10604b5e20c200", "filename": "crates/hir_def/src/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d171838d63907d004ab935d6564bfeb4238d5540/crates%2Fhir_def%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d171838d63907d004ab935d6564bfeb4238d5540/crates%2Fhir_def%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdiagnostics.rs?ref=d171838d63907d004ab935d6564bfeb4238d5540", "patch": "@@ -6,7 +6,7 @@ use stdx::format_to;\n use cfg::{CfgExpr, CfgOptions, DnfExpr};\n use hir_expand::diagnostics::{Diagnostic, DiagnosticCode, DiagnosticSink};\n use hir_expand::{HirFileId, InFile};\n-use syntax::{ast, AstPtr, SyntaxNodePtr};\n+use syntax::{ast, AstPtr, SyntaxNodePtr, TextRange};\n \n use crate::{db::DefDatabase, DefWithBodyId};\n \n@@ -137,6 +137,9 @@ impl Diagnostic for InactiveCode {\n pub struct UnresolvedProcMacro {\n     pub file: HirFileId,\n     pub node: SyntaxNodePtr,\n+    /// If the diagnostic can be pinpointed more accurately than via `node`, this is the `TextRange`\n+    /// to use instead.\n+    pub precise_location: Option<TextRange>,\n     pub macro_name: Option<String>,\n }\n "}, {"sha": "ffd0381d43ec84aac20c43fcee8bf5b36de13a23", "filename": "crates/hir_def/src/nameres.rs", "status": "modified", "additions": 38, "deletions": 3, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d171838d63907d004ab935d6564bfeb4238d5540/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d171838d63907d004ab935d6564bfeb4238d5540/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres.rs?ref=d171838d63907d004ab935d6564bfeb4238d5540", "patch": "@@ -287,7 +287,8 @@ mod diagnostics {\n     use hir_expand::diagnostics::DiagnosticSink;\n     use hir_expand::hygiene::Hygiene;\n     use hir_expand::{InFile, MacroCallKind};\n-    use syntax::{ast, AstPtr, SyntaxNodePtr};\n+    use syntax::ast::AttrsOwner;\n+    use syntax::{ast, AstNode, AstPtr, SyntaxKind, SyntaxNodePtr};\n \n     use crate::path::ModPath;\n     use crate::{db::DefDatabase, diagnostics::*, nameres::LocalModuleId, AstId};\n@@ -425,21 +426,55 @@ mod diagnostics {\n                 }\n \n                 DiagnosticKind::UnresolvedProcMacro { ast } => {\n+                    let mut precise_location = None;\n                     let (file, ast, name) = match ast {\n                         MacroCallKind::FnLike(ast) => {\n                             let node = ast.to_node(db.upcast());\n                             (ast.file_id, SyntaxNodePtr::from(AstPtr::new(&node)), None)\n                         }\n                         MacroCallKind::Attr(ast, name) => {\n                             let node = ast.to_node(db.upcast());\n+\n+                            // Compute the precise location of the macro name's token in the derive\n+                            // list.\n+                            // FIXME: This does not handle paths to the macro, but neither does the\n+                            // rest of r-a.\n+                            let derive_attrs =\n+                                node.attrs().filter_map(|attr| match attr.as_simple_call() {\n+                                    Some((name, args)) if name == \"derive\" => Some(args),\n+                                    _ => None,\n+                                });\n+                            'outer: for attr in derive_attrs {\n+                                let tokens =\n+                                    attr.syntax().children_with_tokens().filter_map(|elem| {\n+                                        match elem {\n+                                            syntax::NodeOrToken::Node(_) => None,\n+                                            syntax::NodeOrToken::Token(tok) => Some(tok),\n+                                        }\n+                                    });\n+                                for token in tokens {\n+                                    if token.kind() == SyntaxKind::IDENT\n+                                        && token.to_string() == *name\n+                                    {\n+                                        precise_location = Some(token.text_range());\n+                                        break 'outer;\n+                                    }\n+                                }\n+                            }\n+\n                             (\n                                 ast.file_id,\n                                 SyntaxNodePtr::from(AstPtr::new(&node)),\n-                                Some(name.to_string()),\n+                                Some(name.clone()),\n                             )\n                         }\n                     };\n-                    sink.push(UnresolvedProcMacro { file, node: ast, macro_name: name });\n+                    sink.push(UnresolvedProcMacro {\n+                        file,\n+                        node: ast,\n+                        precise_location,\n+                        macro_name: name,\n+                    });\n                 }\n \n                 DiagnosticKind::MacroError { ast, message } => {"}, {"sha": "9d3d8828956f5be8ffc91cf97a38a9880abc4734", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d171838d63907d004ab935d6564bfeb4238d5540/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d171838d63907d004ab935d6564bfeb4238d5540/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=d171838d63907d004ab935d6564bfeb4238d5540", "patch": "@@ -143,11 +143,13 @@ pub(crate) fn diagnostics(\n             );\n         })\n         .on::<hir::diagnostics::UnresolvedProcMacro, _>(|d| {\n+            // Use more accurate position if available.\n+            let display_range =\n+                d.precise_location.unwrap_or_else(|| sema.diagnostics_display_range(d).range);\n+\n             // FIXME: it would be nice to tell the user whether proc macros are currently disabled\n-            res.borrow_mut().push(\n-                Diagnostic::hint(sema.diagnostics_display_range(d).range, d.message())\n-                    .with_code(Some(d.code())),\n-            );\n+            res.borrow_mut()\n+                .push(Diagnostic::hint(display_range, d.message()).with_code(Some(d.code())));\n         })\n         // Only collect experimental diagnostics when they're enabled.\n         .filter(|diag| !(diag.is_experimental() && config.disable_experimental))"}, {"sha": "ec8581a03cb39d370da3266091b29d155f6944da", "filename": "docs/user/generated_diagnostic.adoc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d171838d63907d004ab935d6564bfeb4238d5540/docs%2Fuser%2Fgenerated_diagnostic.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/d171838d63907d004ab935d6564bfeb4238d5540/docs%2Fuser%2Fgenerated_diagnostic.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_diagnostic.adoc?ref=d171838d63907d004ab935d6564bfeb4238d5540", "patch": "@@ -18,7 +18,7 @@ This diagnostic is triggered if item name doesn't follow https://doc.rust-lang.o\n \n \n === macro-error\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_def/src/diagnostics.rs#L164[diagnostics.rs]\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_def/src/diagnostics.rs#L167[diagnostics.rs]\n \n This diagnostic is shown for macro expansion errors.\n "}]}