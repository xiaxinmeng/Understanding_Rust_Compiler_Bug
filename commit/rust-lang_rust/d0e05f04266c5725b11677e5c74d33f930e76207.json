{"sha": "d0e05f04266c5725b11677e5c74d33f930e76207", "node_id": "C_kwDOAAsO6NoAKGQwZTA1ZjA0MjY2YzU3MjViMTE2NzdlNWM3NGQzM2Y5MzBlNzYyMDc", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-03-28T08:25:30Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-04-02T10:21:01Z"}, "message": "update tests", "tree": {"sha": "0b05dc5ad649985a2d0bb045c65d8031c046961e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b05dc5ad649985a2d0bb045c65d8031c046961e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0e05f04266c5725b11677e5c74d33f930e76207", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0e05f04266c5725b11677e5c74d33f930e76207", "html_url": "https://github.com/rust-lang/rust/commit/d0e05f04266c5725b11677e5c74d33f930e76207", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0e05f04266c5725b11677e5c74d33f930e76207/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0078e5418552bbe888376ed5331836370bcf2c99", "url": "https://api.github.com/repos/rust-lang/rust/commits/0078e5418552bbe888376ed5331836370bcf2c99", "html_url": "https://github.com/rust-lang/rust/commit/0078e5418552bbe888376ed5331836370bcf2c99"}], "stats": {"total": 489, "additions": 204, "deletions": 285}, "files": [{"sha": "ef651f01c9b98df9f3b3c9091973dce8bdf0b81c", "filename": "src/test/mir-opt/const_allocation2.main.ConstProp.after.64bit.mir", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.64bit.mir?ref=d0e05f04266c5725b11677e5c74d33f930e76207", "patch": "@@ -21,44 +21,44 @@ fn main() -> () {\n }\n \n alloc1 (static: FOO, size: 16, align: 8) {\n-    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc22\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc28\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n }\n \n-alloc22 (size: 72, align: 8) {\n-    0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc9\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+alloc28 (size: 72, align: 8) {\n+    0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc13\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n     0x10 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 __ __ __ __ \u2502 ............\u2591\u2591\u2591\u2591\n-    0x20 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc14\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 02 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n-    0x30 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc20\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....*...\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+    0x20 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc18\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 02 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+    0x30 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc26\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....*...\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n     0x40 \u2502 03 00 00 00 00 00 00 00                         \u2502 ........\n }\n \n-alloc9 (size: 0, align: 8) {}\n+alloc13 (size: 0, align: 8) {}\n \n-alloc14 (size: 16, align: 8) {\n-    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc12\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc13\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+alloc18 (size: 16, align: 8) {\n+    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc16\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc17\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n }\n \n-alloc12 (size: 1, align: 1) {\n+alloc16 (size: 1, align: 1) {\n     05                                              \u2502 .\n }\n \n-alloc13 (size: 1, align: 1) {\n+alloc17 (size: 1, align: 1) {\n     06                                              \u2502 .\n }\n \n-alloc20 (size: 24, align: 8) {\n-    0x00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500alloc17+0x3\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc18\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n-    0x10 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500alloc19+0x2\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+alloc26 (size: 24, align: 8) {\n+    0x00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500alloc22+0x3\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc23\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+    0x10 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500alloc25+0x2\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n }\n \n-alloc17 (size: 4, align: 1) {\n+alloc22 (size: 4, align: 1) {\n     2a 45 15 6f                                     \u2502 *E.o\n }\n \n-alloc18 (size: 1, align: 1) {\n+alloc23 (size: 1, align: 1) {\n     2a                                              \u2502 *\n }\n \n-alloc19 (size: 4, align: 1) {\n+alloc25 (size: 4, align: 1) {\n     2a 45 15 6f                                     \u2502 *E.o\n }"}, {"sha": "372b14eb7c92ac2df2677f06172d80aebb305fd6", "filename": "src/test/mir-opt/deduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff?ref=d0e05f04266c5725b11677e5c74d33f930e76207", "patch": "@@ -26,7 +26,7 @@\n -         _2 = transmute::<&str, &[u8]>(move _8) -> bb14; // scope 2 at $SRC_DIR/core/src/str/mod.rs:LL:COL\n +         _2 = transmute::<&str, &[u8]>(move _8) -> bb12; // scope 2 at $SRC_DIR/core/src/str/mod.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $DIR/deduplicate_blocks.rs:3:11: 3:23\n+                                           // + span: $SRC_DIR/core/src/str/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&str) -> &[u8] {transmute::<&str, &[u8]>}, val: Value(Scalar(<ZST>)) }\n       }\n   "}, {"sha": "3b9d5e727b8a333abc74437b0e5e4c2cc35e2557", "filename": "src/test/mir-opt/inline/inline_diverging.g.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff?ref=d0e05f04266c5725b11677e5c74d33f930e76207", "patch": "@@ -39,7 +39,7 @@\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-diverging.rs:16:9: 16:14\n -                                          // + literal: Const { ty: fn() -> ! {panic}, val: Value(Scalar(<ZST>)) }\n-+                                          // + span: $DIR/inline-diverging.rs:16:9: 16:16\n++                                          // + span: $SRC_DIR/std/src/panic.rs:LL:COL\n +                                          // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(Scalar(<ZST>)) }\n +                                          // mir::Constant\n +                                          // + span: $SRC_DIR/std/src/panic.rs:LL:COL"}, {"sha": "0f83b0c4a27ad2b3ccd83f63d831f50f3dc3890a", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.64bit.diff", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff?ref=d0e05f04266c5725b11677e5c74d33f930e76207", "patch": "@@ -34,10 +34,7 @@\n -         (*_5) = Vec::<u32>::new() -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         StorageLive(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         _7 = &mut (*_5);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+         ((*_7).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32>::NEW; // scope 3 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+                                          // ty::Const\n-+                                          // + ty: alloc::raw_vec::RawVec<u32>\n-+                                          // + val: Unevaluated(alloc::raw_vec::RawVec::<T>::NEW, [u32], None)\n++         ((*_7).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: Unique::<u32> { pointer: {0x4 as *const u32}, _marker: PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:41\n -                                          // + user_ty: UserType(1)\n@@ -47,8 +44,8 @@\n -     bb2: {\n +                                          // + span: $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +                                          // + user_ty: UserType(0)\n-+                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(5:77 ~ alloc[25db]::raw_vec::{impl#0}::NEW), const_param_did: None }, substs: [u32], promoted: None }) }\n-+         ((*_7).1: usize) = const 0_usize; // scope 3 at $DIR/inline-into-box-place.rs:8:33: 8:43\n++                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [65535], len: Size { raw: 16 } }, align: Align { pow2: 3 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n++         ((*_7).1: usize) = const 0_usize; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +         StorageDead(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n           _1 = move _5;                    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n           StorageDead(_5);                 // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43"}, {"sha": "e2051c85af215a32d654c1430252f7da367f6f62", "filename": "src/test/mir-opt/issues/issue_59352.num_to_digit.PreCodegen.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir?ref=d0e05f04266c5725b11677e5c74d33f930e76207", "patch": "@@ -38,7 +38,7 @@ fn num_to_digit(_1: char) -> u32 {\n         _8 = _2;                         // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         _7 = char::methods::<impl char>::to_digit(move _8, const 8_u32) -> bb5; // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n                                          // mir::Constant\n-                                         // + span: $DIR/issue-59352.rs:14:8: 14:23\n+                                         // + span: $SRC_DIR/core/src/char/methods.rs:LL:COL\n                                          // + literal: Const { ty: fn(char, u32) -> Option<u32> {char::methods::<impl char>::to_digit}, val: Value(Scalar(<ZST>)) }\n     }\n "}, {"sha": "312031b7a0ff42725614ade95f8243531fc206b8", "filename": "src/test/mir-opt/remove_storage_markers.main.RemoveStorageMarkers.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff?ref=d0e05f04266c5725b11677e5c74d33f930e76207", "patch": "@@ -58,7 +58,7 @@\n           _14 = &mut (*_8);                // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n           _7 = <std::ops::Range<i32> as iter::range::RangeIteratorImpl>::spec_next(move _14) -> bb4; // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $DIR/remove_storage_markers.rs:8:14: 8:19\n+                                           // + span: $SRC_DIR/core/src/iter/range.rs:LL:COL\n                                            // + literal: Const { ty: for<'r> fn(&'r mut std::ops::Range<i32>) -> Option<<std::ops::Range<i32> as iter::range::RangeIteratorImpl>::Item> {<std::ops::Range<i32> as iter::range::RangeIteratorImpl>::spec_next}, val: Value(Scalar(<ZST>)) }\n       }\n   "}, {"sha": "2f1858d39b3c6743218b3cd606bdce3751047722", "filename": "src/test/ui/associated-consts/defaults-cyclic-fail.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-cyclic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-cyclic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-cyclic-fail.rs?ref=d0e05f04266c5725b11677e5c74d33f930e76207", "patch": "@@ -4,7 +4,6 @@\n // Cyclic assoc. const defaults don't error unless *used*\n trait Tr {\n     const A: u8 = Self::B;\n-    //~^ ERROR cycle detected when const-evaluating + checking `Tr::A`\n \n     const B: u8 = Self::A;\n }"}, {"sha": "3fb4ab72fe6d61239e0d890b776b6026eb6858d3", "filename": "src/test/ui/associated-consts/defaults-cyclic-fail.stderr", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-cyclic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-cyclic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-cyclic-fail.stderr?ref=d0e05f04266c5725b11677e5c74d33f930e76207", "patch": "@@ -1,15 +1,37 @@\n-error[E0391]: cycle detected when const-evaluating + checking `Tr::A`\n-  --> $DIR/defaults-cyclic-fail.rs:5:5\n+error[E0391]: cycle detected when normalizing `<() as Tr>::A`\n+   |\n+note: ...which requires simplifying constant for the type system `Tr::A`...\n+  --> $DIR/defaults-cyclic-fail.rs:6:5\n+   |\n+LL |     const A: u8 = Self::B;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires simplifying constant for the type system `Tr::A`...\n+  --> $DIR/defaults-cyclic-fail.rs:6:5\n+   |\n+LL |     const A: u8 = Self::B;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires const-evaluating + checking `Tr::A`...\n+  --> $DIR/defaults-cyclic-fail.rs:6:5\n    |\n LL |     const A: u8 = Self::B;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n+   = note: ...which requires normalizing `<() as Tr>::B`...\n+note: ...which requires simplifying constant for the type system `Tr::B`...\n+  --> $DIR/defaults-cyclic-fail.rs:8:5\n    |\n+LL |     const B: u8 = Self::A;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires simplifying constant for the type system `Tr::B`...\n+  --> $DIR/defaults-cyclic-fail.rs:8:5\n+   |\n+LL |     const B: u8 = Self::A;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires const-evaluating + checking `Tr::B`...\n   --> $DIR/defaults-cyclic-fail.rs:8:5\n    |\n LL |     const B: u8 = Self::A;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which again requires const-evaluating + checking `Tr::A`, completing the cycle\n+   = note: ...which again requires normalizing `<() as Tr>::A`, completing the cycle\n note: cycle used when const-evaluating + checking `main::promoted[1]`\n   --> $DIR/defaults-cyclic-fail.rs:14:1\n    |"}, {"sha": "020d758e153c2fcc8064bb8ece6df5d87d9770da", "filename": "src/test/ui/associated-consts/issue-24949-assoc-const-static-recursion-trait.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait.stderr?ref=d0e05f04266c5725b11677e5c74d33f930e76207", "patch": "@@ -6,6 +6,10 @@ LL |     const BAR: u32 = TRAIT_REF_BAR;\n    |\n    = note: ...which requires normalizing `TRAIT_REF_BAR`...\n note: ...which requires simplifying constant for the type system `TRAIT_REF_BAR`...\n+  --> $DIR/issue-24949-assoc-const-static-recursion-trait.rs:7:1\n+   |\n+LL | const TRAIT_REF_BAR: u32 = <GlobalTraitRef>::BAR;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires simplifying constant for the type system `TRAIT_REF_BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait.rs:7:1\n    |\n@@ -27,9 +31,6 @@ note: ...which requires simplifying constant for the type system `<impl at $DIR/\n    |\n LL |     const BAR: u32 = TRAIT_REF_BAR;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-=======\n-   |\n->>>>>>> 53eca42efca (bless tests)\n note: ...which requires const-evaluating + checking `<impl at $DIR/issue-24949-assoc-const-static-recursion-trait.rs:11:1: 13:2>::BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait.rs:12:5\n    |"}, {"sha": "632f8dc3ad6f5dfe7c6dfe9a5a84b8e503a3c593", "filename": "src/test/ui/borrowck/issue-88434-minimal-example.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.rs?ref=d0e05f04266c5725b11677e5c74d33f930e76207", "patch": "@@ -1,8 +1,6 @@\n // Regression test related to issue 88434\n \n const _CONST: &() = &f(&|_| {});\n-//~^ ERROR any use of this value will cause an error\n-//~| WARNING this was previously accepted by the compiler but is being phased out\n \n const fn f<F>(_: &F)\n where"}, {"sha": "d9635e1ee464ce514a16bd858292bcae3311dcc9", "filename": "src/test/ui/borrowck/issue-88434-minimal-example.stderr", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr?ref=d0e05f04266c5725b11677e5c74d33f930e76207", "patch": "@@ -1,29 +1,17 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-88434-minimal-example.rs:12:5\n+  --> $DIR/issue-88434-minimal-example.rs:9:5\n    |\n LL | const _CONST: &() = &f(&|_| {});\n    |                      ---------- inside `_CONST` at $DIR/issue-88434-minimal-example.rs:3:22\n ...\n LL |     panic!()\n    |     ^^^^^^^^\n    |     |\n-   |     the evaluated program panicked at 'explicit panic', $DIR/issue-88434-minimal-example.rs:12:5\n-   |     inside `f::<[closure@$DIR/issue-88434-minimal-example.rs:4:25: 4:31]>` at $SRC_DIR/std/src/panic.rs:LL:COL\n+   |     the evaluated program panicked at 'explicit panic', $DIR/issue-88434-minimal-example.rs:9:5\n+   |     inside `f::<[closure@$DIR/issue-88434-minimal-example.rs:3:25: 3:31]>` at $SRC_DIR/std/src/panic.rs:LL:COL\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: any use of this value will cause an error\n-  --> $DIR/issue-88434-minimal-example.rs:4:21\n-   |\n-LL | const _CONST: &() = &f(&|_| {});\n-   | --------------------^^^^^^^^^^^-\n-   |                     |\n-   |                     referenced constant has errors\n-   |\n-   = note: `#[deny(const_err)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "f0a6dcd4eb3b885a0b4eee555690ae1514590204", "filename": "src/test/ui/borrowck/issue-88434-removal-index-should-be-less.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.rs?ref=d0e05f04266c5725b11677e5c74d33f930e76207", "patch": "@@ -1,8 +1,6 @@\n // Regression test for issue 88434\n \n const _CONST: &[u8] = &f(&[], |_| {});\n-//~^ ERROR any use of this value will cause an error\n-//~| WARNING this was previously\n \n const fn f<F>(_: &[u8], _: F) -> &[u8]\n where"}, {"sha": "44e244ae9cc3f9463736309c86628794d8eecbfb", "filename": "src/test/ui/borrowck/issue-88434-removal-index-should-be-less.stderr", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr?ref=d0e05f04266c5725b11677e5c74d33f930e76207", "patch": "@@ -1,29 +1,17 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-88434-removal-index-should-be-less.rs:12:5\n+  --> $DIR/issue-88434-removal-index-should-be-less.rs:9:5\n    |\n LL | const _CONST: &[u8] = &f(&[], |_| {});\n    |                        -------------- inside `_CONST` at $DIR/issue-88434-removal-index-should-be-less.rs:3:24\n ...\n LL |     panic!()\n    |     ^^^^^^^^\n    |     |\n-   |     the evaluated program panicked at 'explicit panic', $DIR/issue-88434-removal-index-should-be-less.rs:12:5\n-   |     inside `f::<[closure@$DIR/issue-88434-removal-index-should-be-less.rs:4:31: 4:37]>` at $SRC_DIR/std/src/panic.rs:LL:COL\n+   |     the evaluated program panicked at 'explicit panic', $DIR/issue-88434-removal-index-should-be-less.rs:9:5\n+   |     inside `f::<[closure@$DIR/issue-88434-removal-index-should-be-less.rs:3:31: 3:37]>` at $SRC_DIR/std/src/panic.rs:LL:COL\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: any use of this value will cause an error\n-  --> $DIR/issue-88434-removal-index-should-be-less.rs:4:23\n-   |\n-LL | const _CONST: &[u8] = &f(&[], |_| {});\n-   | ----------------------^^^^^^^^^^^^^^^-\n-   |                       |\n-   |                       referenced constant has errors\n-   |\n-   = note: `#[deny(const_err)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "678714d0e055a7254bf3bef4dca34a8e928049f6", "filename": "src/test/ui/const-ptr/out_of_bounds_read.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr?ref=d0e05f04266c5725b11677e5c74d33f930e76207", "patch": "@@ -4,7 +4,7 @@ error[E0080]: evaluation of constant value failed\n LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n-   |         memory access failed: alloc5 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n+   |         memory access failed: alloc7 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n    |         inside `std::ptr::read::<u32>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n   ::: $DIR/out_of_bounds_read.rs:12:33\n@@ -18,7 +18,7 @@ error[E0080]: evaluation of constant value failed\n LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n-   |         memory access failed: alloc5 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n+   |         memory access failed: alloc7 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n    |         inside `std::ptr::read::<u32>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n   ::: $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -37,7 +37,7 @@ error[E0080]: evaluation of constant value failed\n LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n-   |         memory access failed: alloc5 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n+   |         memory access failed: alloc7 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n    |         inside `std::ptr::read::<u32>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n   ::: $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL"}, {"sha": "e73e54ff5f1b37d667fe486e3deb60312f4721e9", "filename": "src/test/ui/consts/const-eval/const-eval-query-stack.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.rs?ref=d0e05f04266c5725b11677e5c74d33f930e76207", "patch": "@@ -23,7 +23,5 @@ const X: i32 = 1 / 0; //~WARN any use of this value will cause an error\n fn main() {\n     let x: &'static i32 = &X;\n     //~^ ERROR evaluation of constant value failed\n-    //~| ERROR erroneous constant used\n-    //~| WARNING this was previously accepted by the compiler\n     println!(\"x={}\", x);\n }"}, {"sha": "8bd5c08dc4649703ea896da727669de20f27ad76", "filename": "src/test/ui/consts/const-eval/const-eval-query-stack.stderr", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr?ref=d0e05f04266c5725b11677e5c74d33f930e76207", "patch": "@@ -1,35 +1,24 @@\n warning: any use of this value will cause an error\n-  --> $DIR/const-eval-query-stack.rs:19:16\n+  --> $DIR/const-eval-query-stack.rs:20:16\n    |\n LL | const X: i32 = 1 / 0;\n    | ---------------^^^^^-\n    |                |\n    |                attempt to divide `1_i32` by zero\n    |\n note: the lint level is defined here\n-  --> $DIR/const-eval-query-stack.rs:18:8\n+  --> $DIR/const-eval-query-stack.rs:19:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-eval-query-stack.rs:23:28\n+  --> $DIR/const-eval-query-stack.rs:24:28\n    |\n LL |     let x: &'static i32 = &X;\n    |                            ^ referenced constant has errors\n-\n-error: erroneous constant used\n-  --> $DIR/const-eval-query-stack.rs:23:27\n-   |\n-LL |     let x: &'static i32 = &X;\n-   |                           ^^ referenced constant has errors\n-   |\n-   = note: `#[deny(const_err)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-\n query stack during panic:\n #0 [try_normalize_mir_const_after_erasing_regions] normalizing `main::promoted[1]`\n #1 [mir_drops_elaborated_and_const_checked] elaborating drops for `main`"}, {"sha": "35915a7a606a4ddee8e5b93493b1227d97e03d0c", "filename": "src/test/ui/consts/const-integer-bool-ops.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fconsts%2Fconst-integer-bool-ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fconsts%2Fconst-integer-bool-ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-integer-bool-ops.rs?ref=d0e05f04266c5725b11677e5c74d33f930e76207", "patch": "@@ -6,7 +6,6 @@ const X: usize = 42 && 39;\n //~| ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARR: [i32; X] = [99; 34];\n-//~^ ERROR evaluation of constant value failed\n \n const X1: usize = 42 || 39;\n //~^ ERROR mismatched types\n@@ -16,7 +15,6 @@ const X1: usize = 42 || 39;\n //~| ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARR1: [i32; X1] = [99; 47];\n-//~^ ERROR evaluation of constant value failed\n \n const X2: usize = -42 || -39;\n //~^ ERROR mismatched types\n@@ -26,7 +24,6 @@ const X2: usize = -42 || -39;\n //~| ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARR2: [i32; X2] = [99; 18446744073709551607];\n-//~^ ERROR evaluation of constant value failed\n \n const X3: usize = -42 && -39;\n //~^ ERROR mismatched types\n@@ -36,43 +33,36 @@ const X3: usize = -42 && -39;\n //~| ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARR3: [i32; X3] = [99; 6];\n-//~^ ERROR evaluation of constant value failed\n \n const Y: usize = 42.0 == 42.0;\n //~^ ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARRR: [i32; Y] = [99; 1];\n-//~^ ERROR evaluation of constant value failed\n \n const Y1: usize = 42.0 >= 42.0;\n //~^ ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARRR1: [i32; Y1] = [99; 1];\n-//~^ ERROR evaluation of constant value failed\n \n const Y2: usize = 42.0 <= 42.0;\n //~^ ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARRR2: [i32; Y2] = [99; 1];\n-//~^ ERROR evaluation of constant value failed\n \n const Y3: usize = 42.0 > 42.0;\n //~^ ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARRR3: [i32; Y3] = [99; 0];\n-//~^ ERROR evaluation of constant value failed\n \n const Y4: usize = 42.0 < 42.0;\n //~^ ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARRR4: [i32; Y4] = [99; 0];\n-//~^ ERROR evaluation of constant value failed\n \n const Y5: usize = 42.0 != 42.0;\n //~^ ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARRR5: [i32; Y5] = [99; 0];\n-//~^ ERROR evaluation of constant value failed\n \n fn main() {\n     let _ = ARR;"}, {"sha": "4e503e5a5c0a4df39a204d7e5e31c4679f620d8a", "filename": "src/test/ui/consts/const-integer-bool-ops.stderr", "status": "modified", "additions": 17, "deletions": 78, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fconsts%2Fconst-integer-bool-ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fconsts%2Fconst-integer-bool-ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-integer-bool-ops.stderr?ref=d0e05f04266c5725b11677e5c74d33f930e76207", "patch": "@@ -16,157 +16,96 @@ error[E0308]: mismatched types\n LL | const X: usize = 42 && 39;\n    |                  ^^^^^^^^ expected `usize`, found `bool`\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-integer-bool-ops.rs:8:18\n-   |\n-LL | const ARR: [i32; X] = [99; 34];\n-   |                  ^ referenced constant has errors\n-\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:11:19\n+  --> $DIR/const-integer-bool-ops.rs:10:19\n    |\n LL | const X1: usize = 42 || 39;\n    |                   ^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:11:25\n+  --> $DIR/const-integer-bool-ops.rs:10:25\n    |\n LL | const X1: usize = 42 || 39;\n    |                         ^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:11:19\n+  --> $DIR/const-integer-bool-ops.rs:10:19\n    |\n LL | const X1: usize = 42 || 39;\n    |                   ^^^^^^^^ expected `usize`, found `bool`\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-integer-bool-ops.rs:18:19\n-   |\n-LL | const ARR1: [i32; X1] = [99; 47];\n-   |                   ^^ referenced constant has errors\n-\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:21:19\n+  --> $DIR/const-integer-bool-ops.rs:19:19\n    |\n LL | const X2: usize = -42 || -39;\n    |                   ^^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:21:26\n+  --> $DIR/const-integer-bool-ops.rs:19:26\n    |\n LL | const X2: usize = -42 || -39;\n    |                          ^^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:21:19\n+  --> $DIR/const-integer-bool-ops.rs:19:19\n    |\n LL | const X2: usize = -42 || -39;\n    |                   ^^^^^^^^^^ expected `usize`, found `bool`\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-integer-bool-ops.rs:28:19\n-   |\n-LL | const ARR2: [i32; X2] = [99; 18446744073709551607];\n-   |                   ^^ referenced constant has errors\n-\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:31:19\n+  --> $DIR/const-integer-bool-ops.rs:28:19\n    |\n LL | const X3: usize = -42 && -39;\n    |                   ^^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:31:26\n+  --> $DIR/const-integer-bool-ops.rs:28:26\n    |\n LL | const X3: usize = -42 && -39;\n    |                          ^^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:31:19\n+  --> $DIR/const-integer-bool-ops.rs:28:19\n    |\n LL | const X3: usize = -42 && -39;\n    |                   ^^^^^^^^^^ expected `usize`, found `bool`\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-integer-bool-ops.rs:38:19\n-   |\n-LL | const ARR3: [i32; X3] = [99; 6];\n-   |                   ^^ referenced constant has errors\n-\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:41:18\n+  --> $DIR/const-integer-bool-ops.rs:37:18\n    |\n LL | const Y: usize = 42.0 == 42.0;\n    |                  ^^^^^^^^^^^^ expected `usize`, found `bool`\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-integer-bool-ops.rs:44:19\n-   |\n-LL | const ARRR: [i32; Y] = [99; 1];\n-   |                   ^ referenced constant has errors\n-\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:47:19\n+  --> $DIR/const-integer-bool-ops.rs:42:19\n    |\n LL | const Y1: usize = 42.0 >= 42.0;\n    |                   ^^^^^^^^^^^^ expected `usize`, found `bool`\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-integer-bool-ops.rs:50:20\n-   |\n-LL | const ARRR1: [i32; Y1] = [99; 1];\n-   |                    ^^ referenced constant has errors\n-\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:53:19\n+  --> $DIR/const-integer-bool-ops.rs:47:19\n    |\n LL | const Y2: usize = 42.0 <= 42.0;\n    |                   ^^^^^^^^^^^^ expected `usize`, found `bool`\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-integer-bool-ops.rs:56:20\n-   |\n-LL | const ARRR2: [i32; Y2] = [99; 1];\n-   |                    ^^ referenced constant has errors\n-\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:59:19\n+  --> $DIR/const-integer-bool-ops.rs:52:19\n    |\n LL | const Y3: usize = 42.0 > 42.0;\n    |                   ^^^^^^^^^^^ expected `usize`, found `bool`\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-integer-bool-ops.rs:62:20\n-   |\n-LL | const ARRR3: [i32; Y3] = [99; 0];\n-   |                    ^^ referenced constant has errors\n-\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:65:19\n+  --> $DIR/const-integer-bool-ops.rs:57:19\n    |\n LL | const Y4: usize = 42.0 < 42.0;\n    |                   ^^^^^^^^^^^ expected `usize`, found `bool`\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-integer-bool-ops.rs:68:20\n-   |\n-LL | const ARRR4: [i32; Y4] = [99; 0];\n-   |                    ^^ referenced constant has errors\n-\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:71:19\n+  --> $DIR/const-integer-bool-ops.rs:62:19\n    |\n LL | const Y5: usize = 42.0 != 42.0;\n    |                   ^^^^^^^^^^^^ expected `usize`, found `bool`\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-integer-bool-ops.rs:74:20\n-   |\n-LL | const ARRR5: [i32; Y5] = [99; 0];\n-   |                    ^^ referenced constant has errors\n-\n-error: aborting due to 28 previous errors\n+error: aborting due to 18 previous errors\n \n-Some errors have detailed explanations: E0080, E0308.\n-For more information about an error, try `rustc --explain E0080`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "61b00be345feee4bb0cf3a42aaa397097a8de029", "filename": "src/test/ui/consts/const-mut-refs/issue-76510.64bit.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.64bit.stderr?ref=d0e05f04266c5725b11677e5c74d33f930e76207", "patch": "@@ -19,13 +19,7 @@ error[E0596]: cannot borrow data in a `&` reference as mutable\n LL | const S: &'static mut str = &mut \" hello \";\n    |                             ^^^^^^^^^^^^^^ cannot borrow as mutable\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-76510.rs:11:70\n-   |\n-LL |         let s = transmute::<(*const u8, usize), &ManuallyDrop<str>>((S.as_ptr(), 3));\n-   |                                                                      ^ referenced constant has errors\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0080, E0596, E0658, E0764.\n-For more information about an error, try `rustc --explain E0080`.\n+Some errors have detailed explanations: E0596, E0658, E0764.\n+For more information about an error, try `rustc --explain E0596`."}, {"sha": "143d2fb6b9a3a1a599f36edcc222f4f1d7d34e83", "filename": "src/test/ui/consts/const-mut-refs/issue-76510.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.rs?ref=d0e05f04266c5725b11677e5c74d33f930e76207", "patch": "@@ -9,7 +9,6 @@ const S: &'static mut str = &mut \" hello \";\n \n const fn trigger() -> [(); unsafe {\n         let s = transmute::<(*const u8, usize), &ManuallyDrop<str>>((S.as_ptr(), 3));\n-        //~^ ERROR evaluation of constant value failed\n         0\n     }] {\n     [(); 0]"}, {"sha": "8057d64369a23e553ba21dcb181203e10c97d4db", "filename": "src/test/ui/consts/const-tup-index-span.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.rs?ref=d0e05f04266c5725b11677e5c74d33f930e76207", "patch": "@@ -4,7 +4,6 @@ const TUP: (usize,) = 5usize << 64;\n //~^ ERROR mismatched types\n //~| expected tuple, found `usize`\n const ARR: [i32; TUP.0] = [];\n-//~^ ERROR evaluation of constant value failed\n \n fn main() {\n }"}, {"sha": "d301f8c4054c23bb901cac12cc877926b3a90607", "filename": "src/test/ui/consts/const-tup-index-span.stderr", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.stderr?ref=d0e05f04266c5725b11677e5c74d33f930e76207", "patch": "@@ -11,13 +11,6 @@ help: use a trailing comma to create a tuple with one element\n LL | const TUP: (usize,) = (5usize << 64,);\n    |                       +            ++\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-tup-index-span.rs:6:18\n-   |\n-LL | const ARR: [i32; TUP.0] = [];\n-   |                  ^^^ referenced constant has errors\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0080, E0308.\n-For more information about an error, try `rustc --explain E0080`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "6bfa97a2fded7875aeed1c92e698265662037f8e", "filename": "src/test/ui/consts/invalid-union.64bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.64bit.stderr?ref=d0e05f04266c5725b11677e5c74d33f930e76207", "patch": "@@ -6,7 +6,7 @@ LL | fn main() {\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {\n-               \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc6\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+               \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc7\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n            }\n \n error: erroneous constant used"}, {"sha": "113f86cf0f99fa84c275401b2aea9b7b4ca03735", "filename": "src/test/ui/consts/issue-36163.stderr", "status": "modified", "additions": 34, "deletions": 6, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fconsts%2Fissue-36163.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fconsts%2Fissue-36163.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-36163.stderr?ref=d0e05f04266c5725b11677e5c74d33f930e76207", "patch": "@@ -1,20 +1,48 @@\n-error[E0391]: cycle detected when const-evaluating + checking `Foo::B::{constant#0}`\n+error[E0391]: cycle detected when simplifying constant for the type system `Foo::B::{constant#0}`\n   --> $DIR/issue-36163.rs:4:9\n    |\n LL |     B = A,\n    |         ^\n    |\n+note: ...which requires simplifying constant for the type system `Foo::B::{constant#0}`...\n+  --> $DIR/issue-36163.rs:4:9\n+   |\n+LL |     B = A,\n+   |         ^\n+note: ...which requires const-evaluating + checking `Foo::B::{constant#0}`...\n+  --> $DIR/issue-36163.rs:4:9\n+   |\n+LL |     B = A,\n+   |         ^\n+   = note: ...which requires normalizing `A`...\n+note: ...which requires simplifying constant for the type system `A`...\n+  --> $DIR/issue-36163.rs:1:1\n+   |\n+LL | const A: isize = Foo::B as isize;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires simplifying constant for the type system `A`...\n+  --> $DIR/issue-36163.rs:1:1\n+   |\n+LL | const A: isize = Foo::B as isize;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires const-evaluating + checking `A`...\n   --> $DIR/issue-36163.rs:1:1\n    |\n LL | const A: isize = Foo::B as isize;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which again requires const-evaluating + checking `Foo::B::{constant#0}`, completing the cycle\n-note: cycle used when simplifying constant for the type system `Foo::B::{constant#0}`\n-  --> $DIR/issue-36163.rs:4:9\n+   = note: ...which requires normalizing `A`...\n+   = note: ...which again requires simplifying constant for the type system `Foo::B::{constant#0}`, completing the cycle\n+note: cycle used when collecting item types in top-level module\n+  --> $DIR/issue-36163.rs:1:1\n    |\n-LL |     B = A,\n-   |         ^\n+LL | / const A: isize = Foo::B as isize;\n+LL | |\n+LL | | enum Foo {\n+LL | |     B = A,\n+LL | | }\n+LL | |\n+LL | | fn main() {}\n+   | |____________^\n \n error: aborting due to previous error\n "}, {"sha": "1148577016ab47952dca433672458f80437f0ee8", "filename": "src/test/ui/issues/issue-17252.stderr", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fissues%2Fissue-17252.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fissues%2Fissue-17252.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17252.stderr?ref=d0e05f04266c5725b11677e5c74d33f930e76207", "patch": "@@ -1,10 +1,21 @@\n-error[E0391]: cycle detected when const-evaluating + checking `FOO`\n+error[E0391]: cycle detected when normalizing `FOO`\n+   |\n+note: ...which requires simplifying constant for the type system `FOO`...\n+  --> $DIR/issue-17252.rs:1:1\n+   |\n+LL | const FOO: usize = FOO;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires simplifying constant for the type system `FOO`...\n   --> $DIR/issue-17252.rs:1:1\n    |\n LL | const FOO: usize = FOO;\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires const-evaluating + checking `FOO`...\n+  --> $DIR/issue-17252.rs:1:1\n    |\n-   = note: ...which immediately requires const-evaluating + checking `FOO` again\n+LL | const FOO: usize = FOO;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: ...which again requires normalizing `FOO`, completing the cycle\n note: cycle used when const-evaluating + checking `main::{constant#0}`\n   --> $DIR/issue-17252.rs:4:18\n    |"}, {"sha": "d3a1993536a00aaa60f8fe1e8408f55536b0959d", "filename": "src/test/ui/issues/issue-23302-1.stderr", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fissues%2Fissue-23302-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fissues%2Fissue-23302-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23302-1.stderr?ref=d0e05f04266c5725b11677e5c74d33f930e76207", "patch": "@@ -1,15 +1,26 @@\n-error[E0391]: cycle detected when const-evaluating + checking `X::A::{constant#0}`\n+error[E0391]: cycle detected when simplifying constant for the type system `X::A::{constant#0}`\n   --> $DIR/issue-23302-1.rs:4:9\n    |\n LL |     A = X::A as isize,\n    |         ^^^^^^^^^^^^^\n    |\n-   = note: ...which immediately requires const-evaluating + checking `X::A::{constant#0}` again\n-note: cycle used when simplifying constant for the type system `X::A::{constant#0}`\n+note: ...which requires simplifying constant for the type system `X::A::{constant#0}`...\n   --> $DIR/issue-23302-1.rs:4:9\n    |\n LL |     A = X::A as isize,\n    |         ^^^^^^^^^^^^^\n+note: ...which requires const-evaluating + checking `X::A::{constant#0}`...\n+  --> $DIR/issue-23302-1.rs:4:9\n+   |\n+LL |     A = X::A as isize,\n+   |         ^^^^^^^^^^^^^\n+   = note: ...which requires normalizing `X::A as isize`...\n+   = note: ...which again requires simplifying constant for the type system `X::A::{constant#0}`, completing the cycle\n+note: cycle used when collecting item types in top-level module\n+  --> $DIR/issue-23302-1.rs:3:1\n+   |\n+LL | enum X {\n+   | ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "d3b78ea1af5f5c39e70914777182197dea0faeb8", "filename": "src/test/ui/issues/issue-23302-2.stderr", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fissues%2Fissue-23302-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fissues%2Fissue-23302-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23302-2.stderr?ref=d0e05f04266c5725b11677e5c74d33f930e76207", "patch": "@@ -1,15 +1,26 @@\n-error[E0391]: cycle detected when const-evaluating + checking `Y::A::{constant#0}`\n+error[E0391]: cycle detected when simplifying constant for the type system `Y::A::{constant#0}`\n   --> $DIR/issue-23302-2.rs:4:9\n    |\n LL |     A = Y::B as isize,\n    |         ^^^^^^^^^^^^^\n    |\n-   = note: ...which immediately requires const-evaluating + checking `Y::A::{constant#0}` again\n-note: cycle used when simplifying constant for the type system `Y::A::{constant#0}`\n+note: ...which requires simplifying constant for the type system `Y::A::{constant#0}`...\n   --> $DIR/issue-23302-2.rs:4:9\n    |\n LL |     A = Y::B as isize,\n    |         ^^^^^^^^^^^^^\n+note: ...which requires const-evaluating + checking `Y::A::{constant#0}`...\n+  --> $DIR/issue-23302-2.rs:4:9\n+   |\n+LL |     A = Y::B as isize,\n+   |         ^^^^^^^^^^^^^\n+   = note: ...which requires normalizing `Y::B as isize`...\n+   = note: ...which again requires simplifying constant for the type system `Y::A::{constant#0}`, completing the cycle\n+note: cycle used when collecting item types in top-level module\n+  --> $DIR/issue-23302-2.rs:3:1\n+   |\n+LL | enum Y {\n+   | ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "5233b832ecc796f1bf351011b9e376e400d521f0", "filename": "src/test/ui/issues/issue-23302-3.stderr", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fissues%2Fissue-23302-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fissues%2Fissue-23302-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23302-3.stderr?ref=d0e05f04266c5725b11677e5c74d33f930e76207", "patch": "@@ -1,20 +1,38 @@\n-error[E0391]: cycle detected when const-evaluating + checking `A`\n+error[E0391]: cycle detected when simplifying constant for the type system `A`\n   --> $DIR/issue-23302-3.rs:1:1\n    |\n LL | const A: i32 = B;\n    | ^^^^^^^^^^^^^^^^^\n    |\n-note: ...which requires const-evaluating + checking `B`...\n-  --> $DIR/issue-23302-3.rs:3:1\n+note: ...which requires simplifying constant for the type system `A`...\n+  --> $DIR/issue-23302-3.rs:1:1\n    |\n-LL | const B: i32 = A;\n+LL | const A: i32 = B;\n    | ^^^^^^^^^^^^^^^^^\n-   = note: ...which again requires const-evaluating + checking `A`, completing the cycle\n-note: cycle used when simplifying constant for the type system `A`\n+note: ...which requires const-evaluating + checking `A`...\n   --> $DIR/issue-23302-3.rs:1:1\n    |\n LL | const A: i32 = B;\n    | ^^^^^^^^^^^^^^^^^\n+   = note: ...which requires normalizing `B`...\n+note: ...which requires simplifying constant for the type system `B`...\n+  --> $DIR/issue-23302-3.rs:3:1\n+   |\n+LL | const B: i32 = A;\n+   | ^^^^^^^^^^^^^^^^^\n+note: ...which requires simplifying constant for the type system `B`...\n+  --> $DIR/issue-23302-3.rs:3:1\n+   |\n+LL | const B: i32 = A;\n+   | ^^^^^^^^^^^^^^^^^\n+note: ...which requires const-evaluating + checking `B`...\n+  --> $DIR/issue-23302-3.rs:3:1\n+   |\n+LL | const B: i32 = A;\n+   | ^^^^^^^^^^^^^^^^^\n+   = note: ...which requires normalizing `A`...\n+   = note: ...which again requires simplifying constant for the type system `A`, completing the cycle\n+   = note: cycle used when running analysis passes on this crate\n \n error: aborting due to previous error\n "}, {"sha": "06a330813406a9fe0f5a61de534e8e403854181c", "filename": "src/test/ui/issues/issue-41394.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fissues%2Fissue-41394.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fissues%2Fissue-41394.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41394.rs?ref=d0e05f04266c5725b11677e5c74d33f930e76207", "patch": "@@ -5,7 +5,6 @@ enum Foo {\n \n enum Bar {\n     A = Foo::A as isize\n-    //~^ ERROR evaluation of constant value failed\n }\n \n fn main() {}"}, {"sha": "fa95ca9c18a1004a049da6e67152c0e40be605a0", "filename": "src/test/ui/issues/issue-41394.stderr", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fissues%2Fissue-41394.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fissues%2Fissue-41394.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41394.stderr?ref=d0e05f04266c5725b11677e5c74d33f930e76207", "patch": "@@ -6,13 +6,6 @@ LL |     A = \"\" + 1\n    |         |\n    |         &str\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-41394.rs:7:9\n-   |\n-LL |     A = Foo::A as isize\n-   |         ^^^^^^^^^^^^^^^ referenced constant has errors\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0080, E0369.\n-For more information about an error, try `rustc --explain E0080`.\n+For more information about this error, try `rustc --explain E0369`."}, {"sha": "42a4d5b674b229c239149037f9398ce90f86565c", "filename": "src/test/ui/issues/issue-54954.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fissues%2Fissue-54954.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fissues%2Fissue-54954.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54954.rs?ref=d0e05f04266c5725b11677e5c74d33f930e76207", "patch": "@@ -9,8 +9,6 @@ trait Tt {\n }\n \n fn f(z: [f32; ARR_LEN]) -> [f32; ARR_LEN] {\n-  //~^ ERROR evaluation of constant value failed\n-  //~| ERROR evaluation of constant value failed\n     z\n }\n "}, {"sha": "efe2ef504a2ba16fcea5c3a274b745f881dfd2f9", "filename": "src/test/ui/issues/issue-54954.stderr", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr?ref=d0e05f04266c5725b11677e5c74d33f930e76207", "patch": "@@ -12,19 +12,7 @@ LL | const ARR_LEN: usize = Tt::const_val::<[i8; 123]>();\n    |\n    = note: cannot satisfy `_: Tt`\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-54954.rs:11:15\n-   |\n-LL | fn f(z: [f32; ARR_LEN]) -> [f32; ARR_LEN] {\n-   |               ^^^^^^^ referenced constant has errors\n-\n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-54954.rs:11:34\n-   |\n-LL | fn f(z: [f32; ARR_LEN]) -> [f32; ARR_LEN] {\n-   |                                  ^^^^^^^ referenced constant has errors\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0080, E0283, E0379.\n-For more information about an error, try `rustc --explain E0080`.\n+Some errors have detailed explanations: E0283, E0379.\n+For more information about an error, try `rustc --explain E0283`."}, {"sha": "2c5257ce063cb525897cd2c19a1b4380f1d0c37d", "filename": "src/test/ui/issues/issue-69602-type-err-during-codegen-ice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.rs?ref=d0e05f04266c5725b11677e5c74d33f930e76207", "patch": "@@ -19,5 +19,4 @@ impl TraitB for B { //~ ERROR not all trait items implemented, missing: `MyA`\n \n fn main() {\n     let _ = [0; B::VALUE];\n-    //~^ ERROR evaluation of constant value failed\n }"}, {"sha": "8ae0f8b804c93e822b6b5f97fa81105cb3215dcc", "filename": "src/test/ui/issues/issue-69602-type-err-during-codegen-ice.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.stderr?ref=d0e05f04266c5725b11677e5c74d33f930e76207", "patch": "@@ -13,13 +13,7 @@ LL |     type MyA: TraitA;\n LL | impl TraitB for B {\n    | ^^^^^^^^^^^^^^^^^ missing `MyA` in implementation\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-69602-type-err-during-codegen-ice.rs:21:17\n-   |\n-LL |     let _ = [0; B::VALUE];\n-   |                 ^^^^^^^^ referenced constant has errors\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0046, E0080, E0437.\n+Some errors have detailed explanations: E0046, E0437.\n For more information about an error, try `rustc --explain E0046`."}, {"sha": "966d76d148af3f69d901198d4955d3b4654d769a", "filename": "src/test/ui/issues/issue-77919.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fissues%2Fissue-77919.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fissues%2Fissue-77919.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-77919.rs?ref=d0e05f04266c5725b11677e5c74d33f930e76207", "patch": "@@ -1,6 +1,5 @@\n fn main() {\n     [1; <Multiply<Five, Five>>::VAL];\n-    //~^ ERROR evaluation of constant value failed\n }\n trait TypeVal<T> {\n     const VAL: T;"}, {"sha": "97bd5ab36b65d176d2e4ab0fb8580f0d2342dde0", "filename": "src/test/ui/issues/issue-77919.stderr", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fissues%2Fissue-77919.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fissues%2Fissue-77919.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-77919.stderr?ref=d0e05f04266c5725b11677e5c74d33f930e76207", "patch": "@@ -1,5 +1,5 @@\n error[E0412]: cannot find type `PhantomData` in this scope\n-  --> $DIR/issue-77919.rs:10:9\n+  --> $DIR/issue-77919.rs:9:9\n    |\n LL |     _n: PhantomData,\n    |         ^^^^^^^^^^^ not found in this scope\n@@ -10,29 +10,23 @@ LL | use std::marker::PhantomData;\n    |\n \n error[E0412]: cannot find type `VAL` in this scope\n-  --> $DIR/issue-77919.rs:12:63\n+  --> $DIR/issue-77919.rs:11:63\n    |\n LL | impl<N, M> TypeVal<usize> for Multiply<N, M> where N: TypeVal<VAL> {}\n    |          -                                                    ^^^ not found in this scope\n    |          |\n    |          help: you might be missing a type parameter: `, VAL`\n \n error[E0046]: not all trait items implemented, missing: `VAL`\n-  --> $DIR/issue-77919.rs:12:1\n+  --> $DIR/issue-77919.rs:11:1\n    |\n LL |     const VAL: T;\n    |     ------------- `VAL` from trait\n ...\n LL | impl<N, M> TypeVal<usize> for Multiply<N, M> where N: TypeVal<VAL> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `VAL` in implementation\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-77919.rs:2:9\n-   |\n-LL |     [1; <Multiply<Five, Five>>::VAL];\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0046, E0080, E0412.\n+Some errors have detailed explanations: E0046, E0412.\n For more information about an error, try `rustc --explain E0046`."}, {"sha": "00588735b9a5932c78fdfb9b3d3b9057d8492541", "filename": "src/test/ui/resolve/issue-50599.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fresolve%2Fissue-50599.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fresolve%2Fissue-50599.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-50599.rs?ref=d0e05f04266c5725b11677e5c74d33f930e76207", "patch": "@@ -2,5 +2,4 @@ fn main() {\n     const N: u32 = 1_000;\n     const M: usize = (f64::from(N) * std::f64::LOG10_2) as usize; //~ ERROR cannot find value\n     let mut digits = [0u32; M];\n-    //~^ ERROR evaluation of constant value failed\n }"}, {"sha": "7ec567a06f09dcf3694ddffca05188b708db21fe", "filename": "src/test/ui/resolve/issue-50599.stderr", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fresolve%2Fissue-50599.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Fresolve%2Fissue-50599.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-50599.stderr?ref=d0e05f04266c5725b11677e5c74d33f930e76207", "patch": "@@ -11,13 +11,6 @@ LL | use std::f32::consts::LOG10_2;\n LL | use std::f64::consts::LOG10_2;\n    |\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-50599.rs:4:29\n-   |\n-LL |     let mut digits = [0u32; M];\n-   |                             ^ referenced constant has errors\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0080, E0425.\n-For more information about an error, try `rustc --explain E0080`.\n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "4b6bc6124dbf301e232d640498f539cfde51fbba", "filename": "src/test/ui/type/type-dependent-def-issue-49241.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.rs?ref=d0e05f04266c5725b11677e5c74d33f930e76207", "patch": "@@ -2,5 +2,4 @@ fn main() {\n     let v = vec![0];\n     const l: usize = v.count(); //~ ERROR attempt to use a non-constant value in a constant\n     let s: [u32; l] = v.into_iter().collect();\n-    //~^ ERROR evaluation of constant value failed\n }"}, {"sha": "64c7687f7a882d600af96e075bc78c7f9aff7afd", "filename": "src/test/ui/type/type-dependent-def-issue-49241.stderr", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0e05f04266c5725b11677e5c74d33f930e76207/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.stderr?ref=d0e05f04266c5725b11677e5c74d33f930e76207", "patch": "@@ -6,13 +6,6 @@ LL |     const l: usize = v.count();\n    |     |\n    |     help: consider using `let` instead of `const`: `let l`\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/type-dependent-def-issue-49241.rs:4:18\n-   |\n-LL |     let s: [u32; l] = v.into_iter().collect();\n-   |                  ^ referenced constant has errors\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0080, E0435.\n-For more information about an error, try `rustc --explain E0080`.\n+For more information about this error, try `rustc --explain E0435`."}]}