{"sha": "e8c4c9af9c3225a78ae505a7f486d748109e40e2", "node_id": "C_kwDOAAsO6NoAKGU4YzRjOWFmOWMzMjI1YTc4YWU1MDVhN2Y0ODZkNzQ4MTA5ZTQwZTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-20T22:32:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-20T22:32:41Z"}, "message": "Auto merge of #2404 - RalfJung:mix, r=RalfJung\n\ncheck for extern static size mismatches\n\nAlso handle get_alloc_extra the same throughout Stacked Borrows. I don't think this `unwrap` can actually cause an ICE since another part of SB will raise an error before, but still, seems strange to do this inconsistently in retagging vs expose_ptr.", "tree": {"sha": "c1c9cec712f4ba43c361b7f5857ef41aa548d0f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1c9cec712f4ba43c361b7f5857ef41aa548d0f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8c4c9af9c3225a78ae505a7f486d748109e40e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8c4c9af9c3225a78ae505a7f486d748109e40e2", "html_url": "https://github.com/rust-lang/rust/commit/e8c4c9af9c3225a78ae505a7f486d748109e40e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8c4c9af9c3225a78ae505a7f486d748109e40e2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "167e5dcad39cd12596ace6fce1ef06218e559542", "url": "https://api.github.com/repos/rust-lang/rust/commits/167e5dcad39cd12596ace6fce1ef06218e559542", "html_url": "https://github.com/rust-lang/rust/commit/167e5dcad39cd12596ace6fce1ef06218e559542"}, {"sha": "9f99d1068959abdd7a51b0c43bcc54f83bc7ca30", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f99d1068959abdd7a51b0c43bcc54f83bc7ca30", "html_url": "https://github.com/rust-lang/rust/commit/9f99d1068959abdd7a51b0c43bcc54f83bc7ca30"}], "stats": {"total": 121, "additions": 93, "deletions": 28}, "files": [{"sha": "90b38225105dfaae7c2a31c30abcf324253489a8", "filename": "src/concurrency/data_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8c4c9af9c3225a78ae505a7f486d748109e40e2/src%2Fconcurrency%2Fdata_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8c4c9af9c3225a78ae505a7f486d748109e40e2/src%2Fconcurrency%2Fdata_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconcurrency%2Fdata_race.rs?ref=e8c4c9af9c3225a78ae505a7f486d748109e40e2", "patch": "@@ -1061,7 +1061,7 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: MiriEvalContextExt<'mir, 'tcx> {\n         if let Some(data_race) = &this.machine.data_race {\n             if data_race.race_detecting() {\n                 let size = place.layout.size;\n-                let (alloc_id, base_offset, _tag) = this.ptr_get_alloc_id(place.ptr)?;\n+                let (alloc_id, base_offset, _prov) = this.ptr_get_alloc_id(place.ptr)?;\n                 // Load and log the atomic operation.\n                 // Note that atomic loads are possible even from read-only allocations, so `get_alloc_extra_mut` is not an option.\n                 let alloc_meta = this.get_alloc_extra(alloc_id)?.data_race.as_ref().unwrap();"}, {"sha": "442c201e8ece64349ba081cfdb119f9b9ffbf3c7", "filename": "src/intptrcast.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e8c4c9af9c3225a78ae505a7f486d748109e40e2/src%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8c4c9af9c3225a78ae505a7f486d748109e40e2/src%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintptrcast.rs?ref=e8c4c9af9c3225a78ae505a7f486d748109e40e2", "patch": "@@ -94,16 +94,21 @@ impl<'mir, 'tcx> GlobalStateInner {\n         None\n     }\n \n-    pub fn expose_ptr(ecx: &mut MiriEvalContext<'mir, 'tcx>, alloc_id: AllocId, sb: SbTag) {\n+    pub fn expose_ptr(\n+        ecx: &mut MiriEvalContext<'mir, 'tcx>,\n+        alloc_id: AllocId,\n+        sb: SbTag,\n+    ) -> InterpResult<'tcx> {\n         let global_state = ecx.machine.intptrcast.get_mut();\n         // In strict mode, we don't need this, so we can save some cycles by not tracking it.\n         if global_state.provenance_mode != ProvenanceMode::Strict {\n             trace!(\"Exposing allocation id {alloc_id:?}\");\n             global_state.exposed.insert(alloc_id);\n             if ecx.machine.stacked_borrows.is_some() {\n-                ecx.expose_tag(alloc_id, sb);\n+                ecx.expose_tag(alloc_id, sb)?;\n             }\n         }\n+        Ok(())\n     }\n \n     pub fn ptr_from_addr_transmute("}, {"sha": "67a6c997e99027e71a6e5d67d2d5acd22e7c8305", "filename": "src/machine.rs", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e8c4c9af9c3225a78ae505a7f486d748109e40e2/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8c4c9af9c3225a78ae505a7f486d748109e40e2/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=e8c4c9af9c3225a78ae505a7f486d748109e40e2", "patch": "@@ -638,12 +638,35 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n     ) -> InterpResult<'tcx, Pointer<Provenance>> {\n         let link_name = ecx.item_link_name(def_id);\n         if let Some(&ptr) = ecx.machine.extern_statics.get(&link_name) {\n+            // Various parts of the engine rely on `get_alloc_info` for size and alignment\n+            // information. That uses the type information of this static.\n+            // Make sure it matches the Miri allocation for this.\n+            let Provenance::Concrete { alloc_id, .. } = ptr.provenance else {\n+                panic!(\"extern_statics cannot contain wildcards\")\n+            };\n+            let (shim_size, shim_align, _kind) = ecx.get_alloc_info(alloc_id);\n+            let extern_decl_layout =\n+                ecx.tcx.layout_of(ty::ParamEnv::empty().and(ecx.tcx.type_of(def_id))).unwrap();\n+            if extern_decl_layout.size != shim_size || extern_decl_layout.align.abi != shim_align {\n+                throw_unsup_format!(\n+                    \"`extern` static `{name}` from crate `{krate}` has been declared \\\n+                    with a size of {decl_size} bytes and alignment of {decl_align} bytes, \\\n+                    but Miri emulates it via an extern static shim \\\n+                    with a size of {shim_size} bytes and alignment of {shim_align} bytes\",\n+                    name = ecx.tcx.def_path_str(def_id),\n+                    krate = ecx.tcx.crate_name(def_id.krate),\n+                    decl_size = extern_decl_layout.size.bytes(),\n+                    decl_align = extern_decl_layout.align.abi.bytes(),\n+                    shim_size = shim_size.bytes(),\n+                    shim_align = shim_align.bytes(),\n+                )\n+            }\n             Ok(ptr)\n         } else {\n             throw_unsup_format!(\n-                \"`extern` static `{}` from crate `{}` is not supported by Miri\",\n-                ecx.tcx.def_path_str(def_id),\n-                ecx.tcx.crate_name(def_id.krate),\n+                \"`extern` static `{name}` from crate `{krate}` is not supported by Miri\",\n+                name = ecx.tcx.def_path_str(def_id),\n+                krate = ecx.tcx.crate_name(def_id.krate),\n             )\n         }\n     }\n@@ -754,15 +777,14 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n         ptr: Pointer<Self::Provenance>,\n     ) -> InterpResult<'tcx> {\n         match ptr.provenance {\n-            Provenance::Concrete { alloc_id, sb } => {\n-                intptrcast::GlobalStateInner::expose_ptr(ecx, alloc_id, sb);\n-            }\n+            Provenance::Concrete { alloc_id, sb } =>\n+                intptrcast::GlobalStateInner::expose_ptr(ecx, alloc_id, sb),\n             Provenance::Wildcard => {\n                 // No need to do anything for wildcard pointers as\n                 // their provenances have already been previously exposed.\n+                Ok(())\n             }\n         }\n-        Ok(())\n     }\n \n     /// Convert a pointer with provenance into an allocation-offset pair,"}, {"sha": "c5aab255aaf84c70490ef2a343f62e8a3dfd27f3", "filename": "src/shims/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8c4c9af9c3225a78ae505a7f486d748109e40e2/src%2Fshims%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8c4c9af9c3225a78ae505a7f486d748109e40e2/src%2Fshims%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fbacktrace.rs?ref=e8c4c9af9c3225a78ae505a7f486d748109e40e2", "patch": "@@ -123,7 +123,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let ptr = this.read_pointer(ptr)?;\n         // Take apart the pointer, we need its pieces.\n-        let (alloc_id, offset, _tag) = this.ptr_get_alloc_id(ptr)?;\n+        let (alloc_id, offset, _prov) = this.ptr_get_alloc_id(ptr)?;\n \n         let fn_instance =\n             if let Some(GlobalAlloc::Function(instance)) = this.tcx.get_global_alloc(alloc_id) {"}, {"sha": "38a73929a0362151e6dc551739c558d730bd9498", "filename": "src/stacked_borrows/mod.rs", "status": "modified", "additions": 31, "deletions": 17, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e8c4c9af9c3225a78ae505a7f486d748109e40e2/src%2Fstacked_borrows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8c4c9af9c3225a78ae505a7f486d748109e40e2/src%2Fstacked_borrows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows%2Fmod.rs?ref=e8c4c9af9c3225a78ae505a7f486d748109e40e2", "patch": "@@ -777,20 +777,31 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 return Ok(())\n             };\n \n-            let extra = this.get_alloc_extra(alloc_id)?;\n-            let mut stacked_borrows = extra\n-                .stacked_borrows\n-                .as_ref()\n-                .expect(\"we should have Stacked Borrows data\")\n-                .borrow_mut();\n-            stacked_borrows.history.log_creation(\n-                Some(orig_tag),\n-                new_tag,\n-                alloc_range(base_offset, size),\n-                current_span,\n-            );\n-            if protect {\n-                stacked_borrows.history.log_protector(orig_tag, new_tag, current_span);\n+            let (_size, _align, kind) = this.get_alloc_info(alloc_id);\n+            match kind {\n+                AllocKind::LiveData => {\n+                    // This should have alloc_extra data, but `get_alloc_extra` can still fail\n+                    // if converting this alloc_id from a global to a local one\n+                    // uncovers a non-supported `extern static`.\n+                    let extra = this.get_alloc_extra(alloc_id)?;\n+                    let mut stacked_borrows = extra\n+                        .stacked_borrows\n+                        .as_ref()\n+                        .expect(\"we should have Stacked Borrows data\")\n+                        .borrow_mut();\n+                    stacked_borrows.history.log_creation(\n+                        Some(orig_tag),\n+                        new_tag,\n+                        alloc_range(base_offset, size),\n+                        current_span,\n+                    );\n+                    if protect {\n+                        stacked_borrows.history.log_protector(orig_tag, new_tag, current_span);\n+                    }\n+                }\n+                AllocKind::Function | AllocKind::Dead => {\n+                    // No stacked borrows on these allocations.\n+                }\n             }\n             Ok(())\n         };\n@@ -1116,7 +1127,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     }\n \n     /// Mark the given tag as exposed. It was found on a pointer with the given AllocId.\n-    fn expose_tag(&mut self, alloc_id: AllocId, tag: SbTag) {\n+    fn expose_tag(&mut self, alloc_id: AllocId, tag: SbTag) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n \n         // Function pointers and dead objects don't have an alloc_extra so we ignore them.\n@@ -1125,14 +1136,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let (_size, _align, kind) = this.get_alloc_info(alloc_id);\n         match kind {\n             AllocKind::LiveData => {\n-                // This should have alloc_extra data.\n-                let alloc_extra = this.get_alloc_extra(alloc_id).unwrap();\n+                // This should have alloc_extra data, but `get_alloc_extra` can still fail\n+                // if converting this alloc_id from a global to a local one\n+                // uncovers a non-supported `extern static`.\n+                let alloc_extra = this.get_alloc_extra(alloc_id)?;\n                 trace!(\"Stacked Borrows tag {tag:?} exposed in {alloc_id:?}\");\n                 alloc_extra.stacked_borrows.as_ref().unwrap().borrow_mut().exposed_tags.insert(tag);\n             }\n             AllocKind::Function | AllocKind::Dead => {\n                 // No stacked borrows on these allocations.\n             }\n         }\n+        Ok(())\n     }\n }"}, {"sha": "17061f0e5c81c85376a21fee4ac6cb926aa3849d", "filename": "tests/fail/extern_static_wrong_size.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e8c4c9af9c3225a78ae505a7f486d748109e40e2/tests%2Ffail%2Fextern_static_wrong_size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8c4c9af9c3225a78ae505a7f486d748109e40e2/tests%2Ffail%2Fextern_static_wrong_size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fextern_static_wrong_size.rs?ref=e8c4c9af9c3225a78ae505a7f486d748109e40e2", "patch": "@@ -0,0 +1,10 @@\n+//@ only-target-linux: we need a specific extern supported on this target\n+//@normalize-stderr-test: \"[48] bytes\" -> \"N bytes\"\n+\n+extern \"C\" {\n+    static mut environ: i8;\n+}\n+\n+fn main() {\n+    let _val = unsafe { environ }; //~ ERROR: /has been declared with a size of 1 bytes and alignment of 1 bytes, but Miri emulates it via an extern static shim with a size of [48] bytes and alignment of [48] bytes/\n+}"}, {"sha": "fdeb7bb5f6880d214687c762086cf11882cb4680", "filename": "tests/fail/extern_static_wrong_size.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e8c4c9af9c3225a78ae505a7f486d748109e40e2/tests%2Ffail%2Fextern_static_wrong_size.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8c4c9af9c3225a78ae505a7f486d748109e40e2/tests%2Ffail%2Fextern_static_wrong_size.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fextern_static_wrong_size.stderr?ref=e8c4c9af9c3225a78ae505a7f486d748109e40e2", "patch": "@@ -0,0 +1,14 @@\n+error: unsupported operation: `extern` static `environ` from crate `extern_static_wrong_size` has been declared with a size of 1 bytes and alignment of 1 bytes, but Miri emulates it via an extern static shim with a size of N bytes and alignment of N bytes\n+  --> $DIR/extern_static_wrong_size.rs:LL:CC\n+   |\n+LL |     let _val = unsafe { environ };\n+   |                         ^^^^^^^ `extern` static `environ` from crate `extern_static_wrong_size` has been declared with a size of 1 bytes and alignment of 1 bytes, but Miri emulates it via an extern static shim with a size of N bytes and alignment of N bytes\n+   |\n+   = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n+   = note: backtrace:\n+   = note: inside `main` at $DIR/extern_static_wrong_size.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}]}