{"sha": "8a2bea931b5e97efb4ebeba75c408e64bb823848", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMmJlYTkzMWI1ZTk3ZWZiNGViZWJhNzVjNDA4ZTY0YmI4MjM4NDg=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-13T17:15:29Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-27T17:37:34Z"}, "message": "Remove obsolete workaround.", "tree": {"sha": "200bc374cd43dd4b8d2eb5a27a65fdcba5cf2e1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/200bc374cd43dd4b8d2eb5a27a65fdcba5cf2e1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a2bea931b5e97efb4ebeba75c408e64bb823848", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a2bea931b5e97efb4ebeba75c408e64bb823848", "html_url": "https://github.com/rust-lang/rust/commit/8a2bea931b5e97efb4ebeba75c408e64bb823848", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a2bea931b5e97efb4ebeba75c408e64bb823848/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e92fb409816c65cd0a78a1fbcc71e2fbabdf50a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e92fb409816c65cd0a78a1fbcc71e2fbabdf50a", "html_url": "https://github.com/rust-lang/rust/commit/6e92fb409816c65cd0a78a1fbcc71e2fbabdf50a"}], "stats": {"total": 35, "additions": 1, "deletions": 34}, "files": [{"sha": "a97f38327313055d74fbce23718b336461c90f04", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 1, "deletions": 34, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8a2bea931b5e97efb4ebeba75c408e64bb823848/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2bea931b5e97efb4ebeba75c408e64bb823848/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=8a2bea931b5e97efb4ebeba75c408e64bb823848", "patch": "@@ -3,7 +3,7 @@\n //! manage the caches, and so forth.\n \n use super::queries;\n-use rustc_middle::dep_graph::{DepKind, DepNode, DepNodeExt, DepNodeIndex, SerializedDepNodeIndex};\n+use rustc_middle::dep_graph::{DepKind, DepNode, DepNodeIndex, SerializedDepNodeIndex};\n use rustc_middle::ty::query::on_disk_cache;\n use rustc_middle::ty::tls::{self, ImplicitCtxt};\n use rustc_middle::ty::{self, TyCtxt};\n@@ -60,39 +60,6 @@ impl QueryContext for QueryCtxt<'tcx> {\n     }\n \n     fn try_force_from_dep_node(&self, dep_node: &DepNode) -> bool {\n-        // FIXME: This match is just a workaround for incremental bugs and should\n-        // be removed. https://github.com/rust-lang/rust/issues/62649 is one such\n-        // bug that must be fixed before removing this.\n-        match dep_node.kind {\n-            DepKind::hir_owner | DepKind::hir_owner_nodes => {\n-                if let Some(def_id) = dep_node.extract_def_id(**self) {\n-                    let def_id = def_id.expect_local();\n-                    let hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id);\n-                    if def_id != hir_id.owner {\n-                        // This `DefPath` does not have a\n-                        // corresponding `DepNode` (e.g. a\n-                        // struct field), and the ` DefPath`\n-                        // collided with the `DefPath` of a\n-                        // proper item that existed in the\n-                        // previous compilation session.\n-                        //\n-                        // Since the given `DefPath` does not\n-                        // denote the item that previously\n-                        // existed, we just fail to mark green.\n-                        return false;\n-                    }\n-                } else {\n-                    // If the node does not exist anymore, we\n-                    // just fail to mark green.\n-                    return false;\n-                }\n-            }\n-            _ => {\n-                // For other kinds of nodes it's OK to be\n-                // forced.\n-            }\n-        }\n-\n         debug!(\"try_force_from_dep_node({:?}) --- trying to force\", dep_node);\n \n         // We must avoid ever having to call `force_from_dep_node()` for a"}]}