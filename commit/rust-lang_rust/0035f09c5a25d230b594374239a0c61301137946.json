{"sha": "0035f09c5a25d230b594374239a0c61301137946", "node_id": "C_kwDOAAsO6NoAKDAwMzVmMDljNWEyNWQyMzBiNTk0Mzc0MjM5YTBjNjEzMDExMzc5NDY", "commit": {"author": {"name": "Afonso Bordado", "email": "afonsobordado@az8.co", "date": "2022-08-21T16:42:50Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-09-26T16:20:11Z"}, "message": "Avoid masking shift amounts\n\nCranelift 0.87 now follows its own documentation regarding\nshift amounts, and implicitly masks them if the arch requires it. [0]\n\n[0]: https://github.com/bytecodealliance/wasmtime/commit/05089321740a07757dff0a285176b2651a49aae2", "tree": {"sha": "d3d7b0e80c7a790576a46d6a53e7e79eb0c1e618", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3d7b0e80c7a790576a46d6a53e7e79eb0c1e618"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0035f09c5a25d230b594374239a0c61301137946", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0035f09c5a25d230b594374239a0c61301137946", "html_url": "https://github.com/rust-lang/rust/commit/0035f09c5a25d230b594374239a0c61301137946", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0035f09c5a25d230b594374239a0c61301137946/comments", "author": {"login": "afonso360", "id": 1357143, "node_id": "MDQ6VXNlcjEzNTcxNDM=", "avatar_url": "https://avatars.githubusercontent.com/u/1357143?v=4", "gravatar_id": "", "url": "https://api.github.com/users/afonso360", "html_url": "https://github.com/afonso360", "followers_url": "https://api.github.com/users/afonso360/followers", "following_url": "https://api.github.com/users/afonso360/following{/other_user}", "gists_url": "https://api.github.com/users/afonso360/gists{/gist_id}", "starred_url": "https://api.github.com/users/afonso360/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/afonso360/subscriptions", "organizations_url": "https://api.github.com/users/afonso360/orgs", "repos_url": "https://api.github.com/users/afonso360/repos", "events_url": "https://api.github.com/users/afonso360/events{/privacy}", "received_events_url": "https://api.github.com/users/afonso360/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72992c483c02974897aab5be3144befd896d5472", "url": "https://api.github.com/repos/rust-lang/rust/commits/72992c483c02974897aab5be3144befd896d5472", "html_url": "https://github.com/rust-lang/rust/commit/72992c483c02974897aab5be3144befd896d5472"}], "stats": {"total": 25, "additions": 6, "deletions": 19}, "files": [{"sha": "ecbab408ded972889b6cbca8840daee8c2e837f4", "filename": "src/num.rs", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0035f09c5a25d230b594374239a0c61301137946/src%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0035f09c5a25d230b594374239a0c61301137946/src%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fnum.rs?ref=0035f09c5a25d230b594374239a0c61301137946", "patch": "@@ -150,18 +150,12 @@ pub(crate) fn codegen_int_binop<'tcx>(\n         BinOp::BitXor => b.bxor(lhs, rhs),\n         BinOp::BitAnd => b.band(lhs, rhs),\n         BinOp::BitOr => b.bor(lhs, rhs),\n-        BinOp::Shl => {\n-            let lhs_ty = fx.bcx.func.dfg.value_type(lhs);\n-            let actual_shift = fx.bcx.ins().band_imm(rhs, i64::from(lhs_ty.bits() - 1));\n-            fx.bcx.ins().ishl(lhs, actual_shift)\n-        }\n+        BinOp::Shl => b.ishl(lhs, rhs),\n         BinOp::Shr => {\n-            let lhs_ty = fx.bcx.func.dfg.value_type(lhs);\n-            let actual_shift = fx.bcx.ins().band_imm(rhs, i64::from(lhs_ty.bits() - 1));\n             if signed {\n-                fx.bcx.ins().sshr(lhs, actual_shift)\n+                b.sshr(lhs, rhs)\n             } else {\n-                fx.bcx.ins().ushr(lhs, actual_shift)\n+                b.ushr(lhs, rhs)\n             }\n         }\n         // Compare binops handles by `codegen_binop`.\n@@ -279,22 +273,15 @@ pub(crate) fn codegen_checked_int_binop<'tcx>(\n             }\n         }\n         BinOp::Shl => {\n-            let lhs_ty = fx.bcx.func.dfg.value_type(lhs);\n-            let masked_shift = fx.bcx.ins().band_imm(rhs, i64::from(lhs_ty.bits() - 1));\n-            let val = fx.bcx.ins().ishl(lhs, masked_shift);\n+            let val = fx.bcx.ins().ishl(lhs, rhs);\n             let ty = fx.bcx.func.dfg.value_type(val);\n             let max_shift = i64::from(ty.bits()) - 1;\n             let has_overflow = fx.bcx.ins().icmp_imm(IntCC::UnsignedGreaterThan, rhs, max_shift);\n             (val, has_overflow)\n         }\n         BinOp::Shr => {\n-            let lhs_ty = fx.bcx.func.dfg.value_type(lhs);\n-            let masked_shift = fx.bcx.ins().band_imm(rhs, i64::from(lhs_ty.bits() - 1));\n-            let val = if !signed {\n-                fx.bcx.ins().ushr(lhs, masked_shift)\n-            } else {\n-                fx.bcx.ins().sshr(lhs, masked_shift)\n-            };\n+            let val =\n+                if !signed { fx.bcx.ins().ushr(lhs, rhs) } else { fx.bcx.ins().sshr(lhs, rhs) };\n             let ty = fx.bcx.func.dfg.value_type(val);\n             let max_shift = i64::from(ty.bits()) - 1;\n             let has_overflow = fx.bcx.ins().icmp_imm(IntCC::UnsignedGreaterThan, rhs, max_shift);"}]}