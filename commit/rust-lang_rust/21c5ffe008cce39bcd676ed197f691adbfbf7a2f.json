{"sha": "21c5ffe008cce39bcd676ed197f691adbfbf7a2f", "node_id": "C_kwDOAAsO6NoAKDIxYzVmZmUwMDhjY2UzOWJjZDY3NmVkMTk3ZjY5MWFkYmZiZjdhMmY", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2022-12-21T21:53:52Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2023-01-09T08:41:21Z"}, "message": "Clean up\n\nSimplify match statement\n\nAdd multiple tests\n- 1 test for checking `N + 1 + 1` does not unify with `N+1`\n- 2 tests for checking that a function that uses two parameters only returns the parameter that\n  is actually used.\n- Check exact repeat predicates", "tree": {"sha": "6ceecfd80f0d1f1d08de73aa3cbe941af9593f10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ceecfd80f0d1f1d08de73aa3cbe941af9593f10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21c5ffe008cce39bcd676ed197f691adbfbf7a2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21c5ffe008cce39bcd676ed197f691adbfbf7a2f", "html_url": "https://github.com/rust-lang/rust/commit/21c5ffe008cce39bcd676ed197f691adbfbf7a2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21c5ffe008cce39bcd676ed197f691adbfbf7a2f/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c5cb737357518c9a704994e007b32ed0da214f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c5cb737357518c9a704994e007b32ed0da214f3", "html_url": "https://github.com/rust-lang/rust/commit/7c5cb737357518c9a704994e007b32ed0da214f3"}], "stats": {"total": 158, "additions": 133, "deletions": 25}, "files": [{"sha": "71fb6058cd2c54e722a0be82f736dd295f7b9ceb", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 9, "deletions": 23, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/21c5ffe008cce39bcd676ed197f691adbfbf7a2f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c5ffe008cce39bcd676ed197f691adbfbf7a2f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=21c5ffe008cce39bcd676ed197f691adbfbf7a2f", "patch": "@@ -186,8 +186,9 @@ fn satisfied_from_param_env<'tcx>(\n                     Some(Ok(o)) if o == c => Some(Ok(c)),\n                     Some(_) => Some(Err(())),\n                 };\n-                ControlFlow::CONTINUE\n-            } else if let ty::ConstKind::Expr(e) = c.kind() {\n+            }\n+\n+            if let ty::ConstKind::Expr(e) = c.kind() {\n                 e.visit_with(self)\n             } else {\n                 // FIXME(generic_const_exprs): This doesn't recurse into `<T as Trait<U>>::ASSOC`'s substs.\n@@ -208,35 +209,20 @@ fn satisfied_from_param_env<'tcx>(\n         match pred.kind().skip_binder() {\n             ty::PredicateKind::ConstEvaluatable(ce) => {\n                 let b_ct = tcx.expand_abstract_consts(ce);\n-                let mut v = Visitor { ct, infcx, param_env, single_match: None };\n+                let mut v = Visitor { ct, infcx, param_env, single_match };\n                 let _ = b_ct.visit_with(&mut v);\n \n-                if let Some(inner) = v.single_match {\n-                    single_match = if let Ok(inner) = inner {\n-                        match single_match {\n-                            None => Some(Ok(inner)),\n-                            Some(Ok(prev)) if prev == inner => Some(Ok(prev)),\n-                            Some(_) => Some(Err(())),\n-                        }\n-                    } else {\n-                        Some(Err(()))\n-                    };\n-                }\n+                single_match = v.single_match;\n             }\n             _ => {} // don't care\n         }\n     }\n \n     if let Some(Ok(c)) = single_match {\n-        let is_ok = infcx\n-            .commit_if_ok(|_| {\n-                let ocx = ObligationCtxt::new_in_snapshot(infcx);\n-                assert!(ocx.eq(&ObligationCause::dummy(), param_env, c.ty(), ct.ty()).is_ok());\n-                assert!(ocx.eq(&ObligationCause::dummy(), param_env, c, ct).is_ok());\n-                if ocx.select_all_or_error().is_empty() { Ok(()) } else { Err(()) }\n-            })\n-            .is_ok();\n-        assert!(is_ok);\n+        let ocx = ObligationCtxt::new(infcx);\n+        assert!(ocx.eq(&ObligationCause::dummy(), param_env, c.ty(), ct.ty()).is_ok());\n+        assert!(ocx.eq(&ObligationCause::dummy(), param_env, c, ct).is_ok());\n+        assert!(ocx.select_all_or_error().is_empty());\n         return true;\n     }\n "}, {"sha": "0d6246a9f02c3449ecd8f112d6651787db318919", "filename": "src/test/ui/const-generics/fn_with_two_const_inputs.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/21c5ffe008cce39bcd676ed197f691adbfbf7a2f/src%2Ftest%2Fui%2Fconst-generics%2Ffn_with_two_const_inputs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c5ffe008cce39bcd676ed197f691adbfbf7a2f/src%2Ftest%2Fui%2Fconst-generics%2Ffn_with_two_const_inputs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn_with_two_const_inputs.rs?ref=21c5ffe008cce39bcd676ed197f691adbfbf7a2f", "patch": "@@ -0,0 +1,23 @@\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+const fn both(_: usize, b: usize) -> usize {\n+    b\n+}\n+\n+fn foo<const N: usize, const M: usize>() -> [(); N + 2]\n+where\n+    [(); both(N + 1, M + 1)]:,\n+{\n+    bar()\n+    //~^ ERROR: unconstrained generic constant\n+}\n+\n+fn bar<const N: usize>() -> [(); N]\n+where\n+    [(); N + 1]:,\n+{\n+    [(); N]\n+}\n+\n+fn main() {}"}, {"sha": "614e7e0d2fc202617b6cf10ed123d9d38bbe43e7", "filename": "src/test/ui/const-generics/fn_with_two_const_inputs.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/21c5ffe008cce39bcd676ed197f691adbfbf7a2f/src%2Ftest%2Fui%2Fconst-generics%2Ffn_with_two_const_inputs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21c5ffe008cce39bcd676ed197f691adbfbf7a2f/src%2Ftest%2Fui%2Fconst-generics%2Ffn_with_two_const_inputs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn_with_two_const_inputs.stderr?ref=21c5ffe008cce39bcd676ed197f691adbfbf7a2f", "patch": "@@ -0,0 +1,18 @@\n+error: unconstrained generic constant\n+  --> $DIR/fn_with_two_const_inputs.rs:12:5\n+   |\n+LL |     bar()\n+   |     ^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); N + 1]:`\n+note: required by a bound in `bar`\n+  --> $DIR/fn_with_two_const_inputs.rs:18:10\n+   |\n+LL | fn bar<const N: usize>() -> [(); N]\n+   |    --- required by a bound in this\n+LL | where\n+LL |     [(); N + 1]:,\n+   |          ^^^^^ required by this bound in `bar`\n+\n+error: aborting due to previous error\n+"}, {"sha": "f0ce093e07a4f14b268a94d8c4032ab5ee56cb13", "filename": "src/test/ui/const-generics/fn_with_two_same_const_inputs.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/21c5ffe008cce39bcd676ed197f691adbfbf7a2f/src%2Ftest%2Fui%2Fconst-generics%2Ffn_with_two_same_const_inputs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c5ffe008cce39bcd676ed197f691adbfbf7a2f/src%2Ftest%2Fui%2Fconst-generics%2Ffn_with_two_same_const_inputs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn_with_two_same_const_inputs.rs?ref=21c5ffe008cce39bcd676ed197f691adbfbf7a2f", "patch": "@@ -0,0 +1,22 @@\n+// check-pass\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+const fn both(_: usize, b: usize) -> usize {\n+    b\n+}\n+\n+fn foo<const N: usize>()\n+where\n+    [(); both(N + 1, N + 1)]:,\n+{\n+    bar::<N>();\n+}\n+\n+fn bar<const N: usize>()\n+where\n+    [(); N + 1]:,\n+{\n+}\n+\n+fn main() {}"}, {"sha": "6093fc70b16965c6153db11740f9e3a0efd02386", "filename": "src/test/ui/const-generics/generic_const_exprs/const_kind_expr/wf_obligation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21c5ffe008cce39bcd676ed197f691adbfbf7a2f/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_kind_expr%2Fwf_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c5ffe008cce39bcd676ed197f691adbfbf7a2f/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_kind_expr%2Fwf_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_kind_expr%2Fwf_obligation.rs?ref=21c5ffe008cce39bcd676ed197f691adbfbf7a2f", "patch": "@@ -15,8 +15,8 @@ where\n     [(); (L - 1) + 1 + L]:,\n {\n     foo::<_, L>([(); L + 1 + L]);\n-    //~^ ERROR: unconstrained generic constant\n-    //~| ERROR: mismatched types\n+    //~^ ERROR: mismatched types\n+    //~^^ ERROR: unconstrained generic constant\n }\n \n fn main() {}"}, {"sha": "de608f73e2c0c0ffb8f5d4cd0d6841c686b41927", "filename": "src/test/ui/const-generics/two_matching_preds.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/21c5ffe008cce39bcd676ed197f691adbfbf7a2f/src%2Ftest%2Fui%2Fconst-generics%2Ftwo_matching_preds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c5ffe008cce39bcd676ed197f691adbfbf7a2f/src%2Ftest%2Fui%2Fconst-generics%2Ftwo_matching_preds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftwo_matching_preds.rs?ref=21c5ffe008cce39bcd676ed197f691adbfbf7a2f", "patch": "@@ -0,0 +1,19 @@\n+// check-pass\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+fn foo<const N: usize>()\n+where\n+    [(); N + 1]:,\n+    [(); N + 1]:,\n+{\n+    bar::<N>();\n+}\n+\n+fn bar<const N: usize>()\n+where\n+    [(); N + 1]:,\n+{\n+}\n+\n+fn main() {}"}, {"sha": "1271e0902a3bd5c06b852a7db408c94a824df91a", "filename": "src/test/ui/const-generics/unify_with_nested_expr.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/21c5ffe008cce39bcd676ed197f691adbfbf7a2f/src%2Ftest%2Fui%2Fconst-generics%2Funify_with_nested_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c5ffe008cce39bcd676ed197f691adbfbf7a2f/src%2Ftest%2Fui%2Fconst-generics%2Funify_with_nested_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funify_with_nested_expr.rs?ref=21c5ffe008cce39bcd676ed197f691adbfbf7a2f", "patch": "@@ -0,0 +1,18 @@\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+fn foo<const N: usize>()\n+where\n+    [(); N + 1 + 1]:,\n+{\n+    bar();\n+    //~^ ERROR: type annotations\n+}\n+\n+fn bar<const N: usize>()\n+where\n+    [(); N + 1]:,\n+{\n+}\n+\n+fn main() {}"}, {"sha": "8bab0dff7f26371966ca88721c3653fe64e6a2cf", "filename": "src/test/ui/const-generics/unify_with_nested_expr.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/21c5ffe008cce39bcd676ed197f691adbfbf7a2f/src%2Ftest%2Fui%2Fconst-generics%2Funify_with_nested_expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21c5ffe008cce39bcd676ed197f691adbfbf7a2f/src%2Ftest%2Fui%2Fconst-generics%2Funify_with_nested_expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funify_with_nested_expr.stderr?ref=21c5ffe008cce39bcd676ed197f691adbfbf7a2f", "patch": "@@ -0,0 +1,22 @@\n+error[E0284]: type annotations needed\n+  --> $DIR/unify_with_nested_expr.rs:8:5\n+   |\n+LL |     bar();\n+   |     ^^^ cannot infer the value of the const parameter `N` declared on the function `bar`\n+   |\n+note: required by a bound in `bar`\n+  --> $DIR/unify_with_nested_expr.rs:14:10\n+   |\n+LL | fn bar<const N: usize>()\n+   |    --- required by a bound in this\n+LL | where\n+LL |     [(); N + 1]:,\n+   |          ^^^^^ required by this bound in `bar`\n+help: consider specifying the generic argument\n+   |\n+LL |     bar::<N>();\n+   |        +++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0284`."}]}