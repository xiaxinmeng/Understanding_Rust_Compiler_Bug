{"sha": "0e017fc94a5b35250fd1b0732e004e0112d09728", "node_id": "C_kwDOAAsO6NoAKDBlMDE3ZmM5NGE1YjM1MjUwZmQxYjA3MzJlMDA0ZTAxMTJkMDk3Mjg", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-19T10:02:00Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-04-20T17:13:39Z"}, "message": "Feed type_of query instead of using WithOptconstParam.", "tree": {"sha": "5e79b42629ef3438ac5435decb1cdeda43eb4a78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e79b42629ef3438ac5435decb1cdeda43eb4a78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e017fc94a5b35250fd1b0732e004e0112d09728", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e017fc94a5b35250fd1b0732e004e0112d09728", "html_url": "https://github.com/rust-lang/rust/commit/0e017fc94a5b35250fd1b0732e004e0112d09728", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e017fc94a5b35250fd1b0732e004e0112d09728/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4224b4b1f5695a70b268f36fa845ce9f224c1d6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4224b4b1f5695a70b268f36fa845ce9f224c1d6b", "html_url": "https://github.com/rust-lang/rust/commit/4224b4b1f5695a70b268f36fa845ce9f224c1d6b"}], "stats": {"total": 79, "additions": 40, "deletions": 39}, "files": [{"sha": "992316edb6309a78d4c4c3bd2c919349085a9714", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0e017fc94a5b35250fd1b0732e004e0112d09728/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e017fc94a5b35250fd1b0732e004e0112d09728/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=0e017fc94a5b35250fd1b0732e004e0112d09728", "patch": "@@ -447,14 +447,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         handle_ty_args(has_default, &inf.to_ty())\n                     }\n                     (GenericParamDefKind::Const { .. }, GenericArg::Const(ct)) => {\n-                        ty::Const::from_opt_const_arg_anon_const(\n-                            tcx,\n-                            ty::WithOptConstParam {\n-                                did: ct.value.def_id,\n-                                const_param_did: Some(param.def_id),\n-                            },\n-                        )\n-                        .into()\n+                        let did = ct.value.def_id;\n+                        tcx.feed_anon_const_type(did, tcx.type_of(param.def_id));\n+                        ty::Const::from_anon_const(tcx, did).into()\n                     }\n                     (&GenericParamDefKind::Const { .. }, hir::GenericArg::Infer(inf)) => {\n                         let ty = tcx"}, {"sha": "2b5af4bc81bfe688091104a6c9c92733ab26f137", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0e017fc94a5b35250fd1b0732e004e0112d09728/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e017fc94a5b35250fd1b0732e004e0112d09728/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=0e017fc94a5b35250fd1b0732e004e0112d09728", "patch": "@@ -420,9 +420,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         ast_c: &hir::AnonConst,\n         param_def_id: DefId,\n     ) -> ty::Const<'tcx> {\n-        let const_def =\n-            ty::WithOptConstParam { did: ast_c.def_id, const_param_did: Some(param_def_id) };\n-        let c = ty::Const::from_opt_const_arg_anon_const(self.tcx, const_def);\n+        let did = ast_c.def_id;\n+        self.tcx.feed_anon_const_type(did, self.tcx.type_of(param_def_id));\n+        let c = ty::Const::from_anon_const(self.tcx, did);\n         self.register_wf_obligation(\n             c.into(),\n             self.tcx.hir().span(ast_c.hir_id),"}, {"sha": "b460fd7a8dae459cfb868edf44ff38f3f6cd32aa", "filename": "compiler/rustc_hir_typeck/src/lib.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e017fc94a5b35250fd1b0732e004e0112d09728/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e017fc94a5b35250fd1b0732e004e0112d09728/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs?ref=0e017fc94a5b35250fd1b0732e004e0112d09728", "patch": "@@ -165,12 +165,8 @@ fn typeck_const_arg<'tcx>(\n }\n \n fn typeck<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> &ty::TypeckResults<'tcx> {\n-    if let Some(param_did) = tcx.opt_const_param_of(def_id) {\n-        tcx.typeck_const_arg((def_id, param_did))\n-    } else {\n-        let fallback = move || tcx.type_of(def_id.to_def_id()).subst_identity();\n-        typeck_with_fallback(tcx, def_id, fallback)\n-    }\n+    let fallback = move || tcx.type_of(def_id.to_def_id()).subst_identity();\n+    typeck_with_fallback(tcx, def_id, fallback)\n }\n \n /// Used only to get `TypeckResults` for type inference during error recovery."}, {"sha": "ef2452aba73694836caaa940e1da21b4a14c6ebb", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e017fc94a5b35250fd1b0732e004e0112d09728/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e017fc94a5b35250fd1b0732e004e0112d09728/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=0e017fc94a5b35250fd1b0732e004e0112d09728", "patch": "@@ -449,6 +449,14 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn feed_local_crate(self) -> TyCtxtFeed<'tcx, CrateNum> {\n         TyCtxtFeed { tcx: self, key: LOCAL_CRATE }\n     }\n+\n+    /// In order to break cycles involving `AnonConst`, we need to set the expected type by side\n+    /// effect. However, we do not want this as a general capability, so this interface restricts\n+    /// to the only allowed case.\n+    pub fn feed_anon_const_type(self, key: LocalDefId, value: ty::EarlyBinder<Ty<'tcx>>) {\n+        debug_assert_eq!(self.def_kind(key), DefKind::AnonConst);\n+        TyCtxtFeed { tcx: self, key }.type_of(value)\n+    }\n }\n \n impl<'tcx, KEY: Copy> TyCtxtFeed<'tcx, KEY> {"}, {"sha": "8932900fc1c303c2214ba249b2af748630fe5d14", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0e017fc94a5b35250fd1b0732e004e0112d09728/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e017fc94a5b35250fd1b0732e004e0112d09728/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=0e017fc94a5b35250fd1b0732e004e0112d09728", "patch": "@@ -1548,20 +1548,14 @@ impl WithOptConstParam<LocalDefId> {\n     /// Returns `Some((did, param_did))` if `def_id` is a const argument,\n     /// `None` otherwise.\n     #[inline(always)]\n-    pub fn try_lookup(did: LocalDefId, tcx: TyCtxt<'_>) -> Option<(LocalDefId, DefId)> {\n-        tcx.opt_const_param_of(did).map(|param_did| (did, param_did))\n+    pub fn try_lookup(_: LocalDefId, _: TyCtxt<'_>) -> Option<(LocalDefId, DefId)> {\n+        None\n     }\n \n     /// In case `self` is unknown but `self.did` is a const argument, this returns\n     /// a `WithOptConstParam` with the correct `const_param_did`.\n     #[inline(always)]\n-    pub fn try_upgrade(self, tcx: TyCtxt<'_>) -> Option<WithOptConstParam<LocalDefId>> {\n-        if self.const_param_did.is_none() {\n-            if let const_param_did @ Some(_) = tcx.opt_const_param_of(self.did) {\n-                return Some(WithOptConstParam { did: self.did, const_param_did });\n-            }\n-        }\n-\n+    pub fn try_upgrade(self, _: TyCtxt<'_>) -> Option<WithOptConstParam<LocalDefId>> {\n         None\n     }\n \n@@ -1570,7 +1564,7 @@ impl WithOptConstParam<LocalDefId> {\n     }\n \n     pub fn def_id_for_type_of(self) -> DefId {\n-        if let Some(did) = self.const_param_did { did } else { self.did.to_def_id() }\n+        self.did.to_def_id()\n     }\n }\n "}, {"sha": "e46cfb8dd1655592a91e4c3e45080605efbbb0d4", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0e017fc94a5b35250fd1b0732e004e0112d09728/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e017fc94a5b35250fd1b0732e004e0112d09728/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=0e017fc94a5b35250fd1b0732e004e0112d09728", "patch": "@@ -76,6 +76,9 @@ use std::ops::Deref;\n use std::path::PathBuf;\n use std::sync::Arc;\n \n+use rustc_data_structures::fingerprint::Fingerprint;\n+use rustc_query_system::ich::StableHashingContext;\n+\n #[derive(Default)]\n pub struct QuerySystem<'tcx> {\n     pub arenas: QueryArenas<'tcx>,\n@@ -477,21 +480,33 @@ macro_rules! define_feedable {\n         $(impl<'tcx, K: IntoQueryParam<$($K)*> + Copy> TyCtxtFeed<'tcx, K> {\n             $(#[$attr])*\n             #[inline(always)]\n-            pub fn $name(self, value: query_provided::$name<'tcx>) -> $V {\n+            pub fn $name(self, value: query_provided::$name<'tcx>) {\n                 let key = self.key().into_query_param();\n \n                 let tcx = self.tcx;\n                 let erased = query_provided_to_value::$name(tcx, value);\n                 let value = restore::<$V>(erased);\n                 let cache = &tcx.query_system.caches.$name;\n \n+                let hasher: Option<fn(&mut StableHashingContext<'_>, &_) -> _> = hash_result!([$($modifiers)*]);\n                 match try_get_cached(tcx, cache, &key) {\n                     Some(old) => {\n                         let old = restore::<$V>(old);\n-                        bug!(\n-                            \"Trying to feed an already recorded value for query {} key={key:?}:\\nold value: {old:?}\\nnew value: {value:?}\",\n-                            stringify!($name),\n-                        )\n+                        if let Some(hasher) = hasher {\n+                            let (value_hash, old_hash): (Fingerprint, Fingerprint) = tcx.with_stable_hashing_context(|mut hcx|\n+                                (hasher(&mut hcx, &value), hasher(&mut hcx, &old))\n+                            );\n+                            assert_eq!(\n+                                old_hash, value_hash,\n+                                \"Trying to feed an already recorded value for query {} key={key:?}:\\nold value: {old:?}\\nnew value: {value:?}\",\n+                                stringify!($name),\n+                            )\n+                        } else {\n+                            bug!(\n+                                \"Trying to feed an already recorded value for query {} key={key:?}:\\nold value: {old:?}\\nnew value: {value:?}\",\n+                                stringify!($name),\n+                            )\n+                        }\n                     }\n                     None => {\n                         let dep_node = dep_graph::DepNode::construct(tcx, dep_graph::DepKind::$name, &key);\n@@ -503,7 +518,6 @@ macro_rules! define_feedable {\n                             hash_result!([$($modifiers)*]),\n                         );\n                         cache.complete(key, erased, dep_node_index);\n-                        value\n                     }\n                 }\n             }"}, {"sha": "35529ff8548abf05d7b1a1f18141fbb2778e8dad", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0e017fc94a5b35250fd1b0732e004e0112d09728/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e017fc94a5b35250fd1b0732e004e0112d09728/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=0e017fc94a5b35250fd1b0732e004e0112d09728", "patch": "@@ -15,12 +15,6 @@ fn resolve_instance<'tcx>(\n     key: ty::ParamEnvAnd<'tcx, (DefId, SubstsRef<'tcx>)>,\n ) -> Result<Option<Instance<'tcx>>, ErrorGuaranteed> {\n     let (param_env, (did, substs)) = key.into_parts();\n-    if let Some(did) = did.as_local() {\n-        if let Some(param_did) = tcx.opt_const_param_of(did) {\n-            return tcx.resolve_instance_of_const_arg(param_env.and((did, param_did, substs)));\n-        }\n-    }\n-\n     inner_resolve_instance(tcx, param_env.and((ty::WithOptConstParam::unknown(did), substs)))\n }\n "}]}