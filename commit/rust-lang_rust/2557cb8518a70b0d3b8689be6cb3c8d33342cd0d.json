{"sha": "2557cb8518a70b0d3b8689be6cb3c8d33342cd0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1NTdjYjg1MThhNzBiMGQzYjg2ODliZTZjYjNjOGQzMzM0MmNkMGQ=", "commit": {"author": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-10-02T09:49:24Z"}, "committer": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-10-02T09:49:33Z"}, "message": "Improve format-like completions code appearance", "tree": {"sha": "77ab376be14572be7ec57720aae0eff0d31cb651", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77ab376be14572be7ec57720aae0eff0d31cb651"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2557cb8518a70b0d3b8689be6cb3c8d33342cd0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2557cb8518a70b0d3b8689be6cb3c8d33342cd0d", "html_url": "https://github.com/rust-lang/rust/commit/2557cb8518a70b0d3b8689be6cb3c8d33342cd0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2557cb8518a70b0d3b8689be6cb3c8d33342cd0d/comments", "author": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "777ccb58f06d10e0bbcdaa5512e73a0f3554ddcc", "url": "https://api.github.com/repos/rust-lang/rust/commits/777ccb58f06d10e0bbcdaa5512e73a0f3554ddcc", "html_url": "https://github.com/rust-lang/rust/commit/777ccb58f06d10e0bbcdaa5512e73a0f3554ddcc"}], "stats": {"total": 58, "additions": 26, "deletions": 32}, "files": [{"sha": "e549e051761f23ee42e9b10abc7b61a3b09db933", "filename": "crates/ide/src/completion/complete_postfix.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2557cb8518a70b0d3b8689be6cb3c8d33342cd0d/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2557cb8518a70b0d3b8689be6cb3c8d33342cd0d/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs?ref=2557cb8518a70b0d3b8689be6cb3c8d33342cd0d", "patch": "@@ -1,4 +1,7 @@\n //! FIXME: write short doc here\n+\n+mod format_like;\n+\n use assists::utils::TryEnum;\n use syntax::{\n     ast::{self, AstNode},\n@@ -16,8 +19,6 @@ use crate::{\n     CompletionItem, CompletionItemKind,\n };\n \n-mod format_like;\n-\n pub(super) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n     if !ctx.config.enable_postfix_completions {\n         return;"}, {"sha": "f0ef017d1acb4b1fdf0872a62b2fc6c93b2a06a2", "filename": "crates/ide/src/completion/complete_postfix/format_like.rs", "status": "modified", "additions": 23, "deletions": 30, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/2557cb8518a70b0d3b8689be6cb3c8d33342cd0d/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_postfix%2Fformat_like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2557cb8518a70b0d3b8689be6cb3c8d33342cd0d/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_postfix%2Fformat_like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_postfix%2Fformat_like.rs?ref=2557cb8518a70b0d3b8689be6cb3c8d33342cd0d", "patch": "@@ -1,23 +1,22 @@\n-//! Postfix completion for `format`-like strings.\n-//!\n-//! `\"Result {result} is {2 + 2}\"` is expanded to the `\"Result {} is {}\", result, 2 + 2`.\n-//!\n-//! The following postfix snippets are available:\n-//!\n-//! - `format` -> `format!(...)`\n-//! - `panic` -> `panic!(...)`\n-//! - `println` -> `println!(...)`\n-//! - `log`:\n-//!   + `logd` -> `log::debug!(...)`\n-//!   + `logt` -> `log::trace!(...)`\n-//!   + `logi` -> `log::info!(...)`\n-//!   + `logw` -> `log::warn!(...)`\n-//!   + `loge` -> `log::error!(...)`\n+// Feature: Postfix completion for `format`-like strings.\n+//\n+// `\"Result {result} is {2 + 2}\"` is expanded to the `\"Result {} is {}\", result, 2 + 2`.\n+//\n+// The following postfix snippets are available:\n+//\n+// - `format` -> `format!(...)`\n+// - `panic` -> `panic!(...)`\n+// - `println` -> `println!(...)`\n+// - `log`:\n+//   + `logd` -> `log::debug!(...)`\n+//   + `logt` -> `log::trace!(...)`\n+//   + `logi` -> `log::info!(...)`\n+//   + `logw` -> `log::warn!(...)`\n+//   + `loge` -> `log::error!(...)`\n \n-use super::postfix_snippet;\n use crate::completion::{\n-    completion_config::SnippetCap, completion_context::CompletionContext,\n-    completion_item::Completions,\n+    complete_postfix::postfix_snippet, completion_config::SnippetCap,\n+    completion_context::CompletionContext, completion_item::Completions,\n };\n use syntax::ast;\n \n@@ -35,7 +34,7 @@ pub(super) fn add_format_like_completions(\n \n     let input = &receiver_text[1..receiver_text.len() - 1];\n \n-    let mut parser = FormatStrParser::new(input);\n+    let mut parser = FormatStrParser::new(input.to_owned());\n \n     if parser.parse().is_ok() {\n         for kind in PostfixKind::all_suggestions() {\n@@ -129,7 +128,7 @@ enum State {\n }\n \n impl FormatStrParser {\n-    pub fn new(input: impl Into<String>) -> Self {\n+    pub fn new(input: String) -> Self {\n         Self {\n             input: input.into(),\n             output: String::new(),\n@@ -238,14 +237,8 @@ impl FormatStrParser {\n     pub fn into_suggestion(&self, kind: PostfixKind) -> String {\n         assert!(self.parsed, \"Attempt to get a suggestion from not parsed expression\");\n \n-        let mut output = format!(r#\"{}(\"{}\"\"#, kind.into_macro_name(), self.output);\n-        for expr in &self.extracted_expressions {\n-            output += \", \";\n-            output += expr;\n-        }\n-        output.push(')');\n-\n-        output\n+        let expressions_as_string = self.extracted_expressions.join(\", \");\n+        format!(r#\"{}(\"{}\", {})\"#, kind.into_macro_name(), self.output, expressions_as_string)\n     }\n }\n \n@@ -281,7 +274,7 @@ mod tests {\n         ];\n \n         for (input, output) in test_vector {\n-            let mut parser = FormatStrParser::new(*input);\n+            let mut parser = FormatStrParser::new((*input).to_owned());\n             let outcome = parser.parse();\n \n             if let Some((result_str, result_args)) = output {\n@@ -316,7 +309,7 @@ mod tests {\n         ];\n \n         for (kind, input, output) in test_vector {\n-            let mut parser = FormatStrParser::new(*input);\n+            let mut parser = FormatStrParser::new((*input).to_owned());\n             parser.parse().expect(\"Parsing must succeed\");\n \n             assert_eq!(&parser.into_suggestion(*kind), output);"}]}